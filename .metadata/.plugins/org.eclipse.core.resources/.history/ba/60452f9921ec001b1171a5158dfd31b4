/*
 * dsp.c
 *
 *  Created on: Jul 3, 2021
 *      Author: Chris
 */

#include "dsp.h"


static const float coeff[TAPS] = {0.0000000000, -0.0000045388, -0.0000079114, 0.0000089297, 0.0000244098, 0.0000000000, -0.0000409391, -0.0000260595, 0.0000443107, 0.0000641189, -0.0000223250, -0.0000993402, -0.0000293257, 0.0001110008, 0.0001017949, -0.0000803432, -0.0001722943, -0.0000000000, 0.0002093170, 0.0001186924, -0.0001832179, -0.0002441289, 0.0000791381, 0.0003307423, 0.0000923589, -0.0003326437, -0.0002917070, 0.0002210839, 0.0004569064, 0.0000000000, -0.0005201643, -0.0002865999, 0.0004307813, 0.0005599661, -0.0001773839, -0.0007255432, -0.0001985604, 0.0007017376, 0.0006045281, -0.0004505592, -0.0009165600, -0.0000000000, 0.0010136000, 0.0005510623, -0.0008178683, -0.0010504435, 0.0003289830, 0.0013311234, 0.0003605584, -0.0012618397, -0.0010769577, 0.0007955762, 0.0016048096, 0.0000000000, -0.0017470829, -0.0009429382, 0.0013898069, 0.0017732869, -0.0005518943, -0.0022197950, -0.0005978792, 0.0020811938, 0.0017672618, -0.0012992660, -0.0026089816, -0.0000000000, 0.0028168607, 0.0015146218, -0.0022246092, -0.0028292059, 0.0008778795, 0.0035212097, 0.0009460169, -0.0032855709, -0.0027843187, 0.0020433536, 0.0040968739, 0.0000000000, -0.0044131783, -0.0023711701, 0.0034809791, 0.0044261003, -0.0013734850, -0.0055111293, -0.0014816281, 0.0051508613, 0.0043707863, -0.0032129592, -0.0064549390, -0.0000000000, 0.0069895796, 0.0037675932, -0.0055513752, -0.0070880610, 0.0022098404, 0.0089135057, 0.0024103319, -0.0084338692, -0.0072080769, 0.0053408251, 0.0108243033, 0.0000000000, -0.0119618681, -0.0065243197, 0.0097394468, 0.0126161500, -0.0039967272, -0.0164098318, -0.0045260445, 0.0161904210, 0.0141840184, -0.0108065871, -0.0226033060, -0.0000000000, 0.0269791149, 0.0154322199, -0.0243539795, -0.0336918734, 0.0115512388, 0.0522533930, 0.0162823686, -0.0683090956, -0.0745726866, 0.0792969469, 0.3070814369, 0.4169992618, 0.3070814369, 0.0792969469, -0.0745726866, -0.0683090956, 0.0162823686, 0.0522533930, 0.0115512388, -0.0336918734, -0.0243539795, 0.0154322199, 0.0269791149, -0.0000000000, -0.0226033060, -0.0108065871, 0.0141840184, 0.0161904210, -0.0045260445, -0.0164098318, -0.0039967272, 0.0126161500, 0.0097394468, -0.0065243197, -0.0119618681, 0.0000000000, 0.0108243033, 0.0053408251, -0.0072080769, -0.0084338692, 0.0024103319, 0.0089135057, 0.0022098404, -0.0070880610, -0.0055513752, 0.0037675932, 0.0069895796, -0.0000000000, -0.0064549390, -0.0032129592, 0.0043707863, 0.0051508613, -0.0014816281, -0.0055111293, -0.0013734850, 0.0044261003, 0.0034809791, -0.0023711701, -0.0044131783, 0.0000000000, 0.0040968739, 0.0020433536, -0.0027843187, -0.0032855709, 0.0009460169, 0.0035212097, 0.0008778795, -0.0028292059, -0.0022246092, 0.0015146218, 0.0028168607, -0.0000000000, -0.0026089816, -0.0012992660, 0.0017672618, 0.0020811938, -0.0005978792, -0.0022197950, -0.0005518943, 0.0017732869, 0.0013898069, -0.0009429382, -0.0017470829, 0.0000000000, 0.0016048096, 0.0007955762, -0.0010769577, -0.0012618397, 0.0003605584, 0.0013311234, 0.0003289830, -0.0010504435, -0.0008178683, 0.0005510623, 0.0010136000, -0.0000000000, -0.0009165600, -0.0004505592, 0.0006045281, 0.0007017376, -0.0001985604, -0.0007255432, -0.0001773839, 0.0005599661, 0.0004307813, -0.0002865999, -0.0005201643, 0.0000000000, 0.0004569064, 0.0002210839, -0.0002917070, -0.0003326437, 0.0000923589, 0.0003307423, 0.0000791381, -0.0002441289, -0.0001832179, 0.0001186924, 0.0002093170, -0.0000000000, -0.0001722943, -0.0000803432, 0.0001017949, 0.0001110008, -0.0000293257, -0.0000993402, -0.0000223250, 0.0000641189, 0.0000443107, -0.0000260595, -0.0000409391, 0.0000000000, 0.0000244098, 0.0000089297, -0.0000079114, -0.0000045388, 0.0000000000};
static q15_t coeff_q15[TAPS];
void matrix_init(uint32_t numRow, uint32_t numCol, uint16_t* matrix, arm_matrix_instance_q15* instance, uint32_t offset){

	for(uint32_t i = 0; i < 2; i++){
		arm_mat_init_q15(&instance[i], numRow, numCol, (q15_t*)&matrix[offset*i]);
	}
}

void FIR_Filter_F32_Init(dsp_buffer_t* buff, uint32_t channelNumber){
	for(uint32_t i = 0; i < channelNumber; i++){
		arm_fir_init_f32(buff[i].lpFilter_inst, TAPS, &coeff[0], &buff[i].state[0], BLOCK_SIZE);
	}
}

void FIR_Filter_F32(dsp_buffer_t* dsp, float (*input)[BLOCK_SIZE], float (*output)[BLOCK_SIZE] , uint32_t channelNumber){
	for(uint32_t i = 0; i < channelNumber; i++){
		arm_fir_f32(dsp[i].lpFilter_inst, &input[i][0], &output[i][0], BLOCK_SIZE);
	}
}

void FIR_Filter_Q15(dsp_buffer_t* dsp, q15_t (*input)[BLOCK_SIZE], q15_t (*output)[BLOCK_SIZE] , uint32_t channelNumber){
	for(uint32_t i = 0; i < channelNumber; i++){
		arm_fir_fast_q15(&dsp[i].lpFilter_inst[0], &input[i][0], &output[i][0], BLOCK_SIZE);
	}
}

void FIR_Filter_Q15_Init(dsp_buffer_t* buff, uint32_t channelNumber){

	arm_float_to_q15(coeff, coeff_q15, TAPS);

	for(uint32_t i = 0; i < channelNumber; i++){
		arm_fir_init_q15(&buff[i].lpFilter_inst[0], TAPS, &coeff_q15[0], &buff[i].state[0], BLOCK_SIZE);
	}
}

void FFT_Init(arm_rfft_fast_instance_f32* fft_instance, uint32_t channelNumber){
	for(uint32_t i = 0; i < channelNumber; i++){
		arm_rfft_fast_init_f32(&fft_instance[i], FFT_LEN);
	}
}

void Q15_To_Float(q15_t (*q15)[Q15_FLOAT_LEN], float (*flt)[Q15_FLOAT_LEN], uint32_t channelNumber){
	for(uint32_t i = 0; i < channelNumber; i++){
		arm_q15_to_float(&q15[i][0], &flt[i][0], Q15_FLOAT_LEN);
	}
}

void Float_To_Q15(float (*flt)[Q15_FLOAT_LEN], q15_t (*q15)[Q15_FLOAT_LEN], uint32_t channelNumber){
	for(uint32_t i = 0; i < channelNumber; i++){
		arm_float_to_q15(&flt[i][0], &q15[i][0], Q15_FLOAT_LEN);
	}
}
#define FALSE 				0
#define fft_conjugate_j 	fft_output_j
#define fft_absolute_i_j	fft_output_i

void GCC_PHAT(arm_rfft_fast_instance_f32* fft_instance_i, float *fft_input_i, arm_rfft_fast_instance_f32* fft_instance_j, float *fft_input_j, float* Gphat_output){

	static float fft_output_i[FFT_LEN+2];
	static float fft_output_j[FFT_LEN+2];
	static float fft_multi_i_j[FFT_LEN+2];

	//FFT Signals I & J
	arm_rfft_fast_f32(&fft_instance_i[0], &fft_input_i[0], &fft_output_i[0], FALSE);
	arm_rfft_fast_f32(&fft_instance_j[0], &fft_input_j[0], &fft_output_j[0], FALSE);

	//Take the conjugate of signal J
	arm_cmplx_conj_f32(&fft_output_j[2], &fft_conjugate_j[2], FFT_LEN/2 - 1);

	//Re-assign the values for J
	fft_conjugate_j[FFT_LEN-2] 	= fft_output_j[1];
	fft_conjugate_j[FFT_LEN-1] 	= 0;
	fft_conjugate_j[1] 			= 0;

	//Re-assign the value for I
	fft_output_i[FFT_LEN-2] 	= fft_output_i[1];
	fft_output_i[FFT_LEN-1] 	= 0;
	fft_output_i[1] 			= 0;

	//Multiply the Top
	arm_cmplx_mult_cmplx_f32(&fft_output_i[0], &fft_conjugate_j[0], &fft_multi_i_j[0], (FFT_LEN+2)/2);

	//Find the bottoms magnitude
	arm_cmplx_mag_f32(&fft_multi_i_j[0], &fft_absolute_i_j[0], (FFT_LEN+2)/2);

	//Take the inverse of each one
	for(uint32_t i = 0; i < (FFT_LEN+2)/2; i++){
		fft_absolute_i_j[i] = 1/fft_absolute_i_j[i];
	}

	//Multiply the top with the bottom
	arm_cmplx_mult_real_f32(&fft_multi_i_j[0], &fft_absolute_i_j[0], &Gphat_output[0], (FFT_LEN+2)/2);
}
