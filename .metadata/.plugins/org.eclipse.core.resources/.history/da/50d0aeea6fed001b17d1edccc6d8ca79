/*
 * dsp.c
 *
 *  Created on: Jul 3, 2021
 *      Author: Chris
 */

#include "dsp.h"


static const float coeff[TAPS] = {0.000000e+00, 4.556807e-06, 7.942899e-06, 8.965237e-06, 6.566579e-06, -4.218881e-15, -1.101321e-05, -2.616315e-05, -4.448682e-05, -6.437376e-05, -8.364923e-05, -9.973515e-05, -1.098801e-04, -1.114420e-04, -1.021996e-04, -8.066259e-05, -4.634964e-05, 2.237311e-14, 5.630929e-05, 1.191642e-04, 1.839462e-04, 2.450994e-04, 2.965215e-04, 3.320572e-04, 3.460582e-04, 3.339661e-04, 2.928667e-04, 2.219628e-04, 1.229144e-04, -5.098376e-14, -1.399317e-04, -2.877392e-04, -4.324939e-04, -5.621923e-04, -6.646374e-04, -7.284275e-04, -7.439835e-04, -7.045274e-04, -6.069314e-04, -4.523504e-04, -2.465679e-04, 8.816493e-14, 2.726730e-04, 5.532530e-04, 8.211197e-04, 1.054620e-03, 1.232662e-03, 1.336415e-03, 1.350972e-03, 1.266856e-03, 1.081239e-03, 7.987390e-04, 4.317169e-04, -1.312572e-13, -4.699905e-04, -9.466868e-04, -1.395332e-03, -1.780337e-03, -2.067886e-03, -2.228620e-03, -2.240186e-03, -2.089468e-03, -1.774288e-03, -1.304431e-03, -7.018537e-04, 1.770627e-13, 7.577761e-04, 1.520643e-03, 2.233453e-03, 2.840453e-03, 3.289316e-03, 3.535208e-03, 3.544619e-03, 3.298633e-03, 2.795388e-03, 2.051477e-03, 1.102118e-03, -2.221509e-13, -1.187209e-03, -2.380597e-03, -3.494818e-03, -4.443696e-03, -5.146294e-03, -5.533039e-03, -5.551494e-03, -5.171339e-03, -4.388162e-03, -3.225732e-03, -1.736472e-03, 2.631460e-13, 1.880298e-03, 3.782571e-03, 5.573445e-03, 7.116240e-03, 8.280023e-03, 8.948941e-03, 9.031243e-03, 8.467398e-03, 7.236733e-03, 5.362058e-03, 2.911894e-03, -2.970363e-13, -3.217915e-03, -6.550257e-03, -9.778166e-03, -1.266631e-02, -1.497529e-02, -1.647507e-02, -1.695858e-02, -1.625479e-02, -1.424041e-02, -1.084955e-02, -6.080615e-03, 3.214682e-13, 7.257771e-03, 1.549357e-02, 2.445080e-02, 3.382581e-02, 4.328119e-02, 5.246112e-02, 6.100820e-02, 6.858066e-02, 7.486915e-02, 7.961219e-02, 8.260933e-02, 8.373141e-02, 8.260933e-02, 7.961219e-02, 7.486915e-02, 6.858066e-02, 6.100820e-02, 5.246112e-02, 4.328119e-02, 3.382581e-02, 2.445080e-02, 1.549357e-02, 7.257771e-03, 3.214682e-13, -6.080615e-03, -1.084955e-02, -1.424041e-02, -1.625479e-02, -1.695858e-02, -1.647507e-02, -1.497529e-02, -1.266631e-02, -9.778166e-03, -6.550257e-03, -3.217915e-03, -2.970363e-13, 2.911894e-03, 5.362058e-03, 7.236733e-03, 8.467398e-03, 9.031243e-03, 8.948941e-03, 8.280023e-03, 7.116240e-03, 5.573445e-03, 3.782571e-03, 1.880298e-03, 2.631460e-13, -1.736472e-03, -3.225732e-03, -4.388162e-03, -5.171339e-03, -5.551494e-03, -5.533039e-03, -5.146294e-03, -4.443696e-03, -3.494818e-03, -2.380597e-03, -1.187209e-03, -2.221509e-13, 1.102118e-03, 2.051477e-03, 2.795388e-03, 3.298633e-03, 3.544619e-03, 3.535208e-03, 3.289316e-03, 2.840453e-03, 2.233453e-03, 1.520643e-03, 7.577761e-04, 1.770627e-13, -7.018537e-04, -1.304431e-03, -1.774288e-03, -2.089468e-03, -2.240186e-03, -2.228620e-03, -2.067886e-03, -1.780337e-03, -1.395332e-03, -9.466868e-04, -4.699905e-04, -1.312572e-13, 4.317169e-04, 7.987390e-04, 1.081239e-03, 1.266856e-03, 1.350972e-03, 1.336415e-03, 1.232662e-03, 1.054620e-03, 8.211197e-04, 5.532530e-04, 2.726730e-04, 8.816493e-14, -2.465679e-04, -4.523504e-04, -6.069314e-04, -7.045274e-04, -7.439835e-04, -7.284275e-04, -6.646374e-04, -5.621923e-04, -4.324939e-04, -2.877392e-04, -1.399317e-04, -5.098376e-14, 1.229144e-04, 2.219628e-04, 2.928667e-04, 3.339661e-04, 3.460582e-04, 3.320572e-04, 2.965215e-04, 2.450994e-04, 1.839462e-04, 1.191642e-04, 5.630929e-05, 2.237311e-14, -4.634964e-05, -8.066259e-05, -1.021996e-04, -1.114420e-04, -1.098801e-04, -9.973515e-05, -8.364923e-05, -6.437376e-05, -4.448682e-05, -2.616315e-05, -1.101321e-05, -4.218881e-15, 6.566579e-06, 8.965237e-06, 7.942899e-06, 4.556807e-06, 0.000000e+00};

void matrix_init(uint32_t numRow, uint32_t numCol, uint16_t* matrix, arm_matrix_instance_q15* instance, uint32_t offset){

	for(uint32_t i = 0; i < 2; i++){
		arm_mat_init_q15(&instance[i], numRow, numCol, (q15_t*)&matrix[offset*i]);
	}
}

void FIR_Filter_Init(dsp_buffer_t* buff, uint32_t channelNumber){
	for(uint32_t i = 0; i < channelNumber; i++){
		arm_fir_init_f32(&buff[i].lpFilter_inst[0], TAPS, &coeff[0], &buff[i].state[0], BLOCK_SIZE);
	}
}

void FIR_Filter(dsp_buffer_t* dsp, float (*input)[BLOCK_SIZE], float (*output)[BLOCK_SIZE] , uint32_t channelNumber){
	for(uint32_t i = 0; i < channelNumber; i++){
		arm_fir_f32(&dsp[i].lpFilter_inst[0], &input[i][0], &output[i][0], BLOCK_SIZE);
	}
}

void FFT_Init(arm_rfft_fast_instance_f32* fft_instance, uint32_t channelNumber){
	for(uint32_t i = 0; i < channelNumber; i++){
		arm_rfft_fast_init_f32(&fft_instance[i], FFT_LEN);
	}
}

void Q15_To_Float(q15_t (*q15)[Q15_FLOAT_LEN], float (*flt)[Q15_FLOAT_LEN], uint32_t channelNumber){
	for(uint32_t i = 0; i < channelNumber; i++){
		arm_q15_to_float(&q15[i][0], &flt[i][0], Q15_FLOAT_LEN);
	}
}

void Float_To_Q15(float (*flt)[Q15_FLOAT_LEN], q15_t (*q15)[Q15_FLOAT_LEN], uint32_t channelNumber){
	for(uint32_t i = 0; i < channelNumber; i++){
		arm_float_to_q15(&flt[i][0], &q15[i][0], Q15_FLOAT_LEN);
	}
}
#define FALSE 				0
#define fft_conjugate_j 	fft_output_j
#define fft_absolute_i_j	fft_output_i

void GCC_PHAT(arm_rfft_fast_instance_f32* fft_instance_i, float *fft_input_i, arm_rfft_fast_instance_f32* fft_instance_j, float *fft_input_j, float* Gphat_output){

	static float fft_output_i[FFT_LEN+2];
	static float fft_output_j[FFT_LEN+2];
	static float fft_multi_i_j[FFT_LEN+2];

	//FFT Signals I & J
	arm_rfft_fast_f32(&fft_instance_i[0], &fft_input_i[0], &fft_output_i[0], FALSE);
	arm_rfft_fast_f32(&fft_instance_j[0], &fft_input_j[0], &fft_output_j[0], FALSE);

	//Take the conjugate of signal J
	arm_cmplx_conj_f32(&fft_output_j[2], &fft_conjugate_j[2], FFT_LEN/2 - 1);

	//Re-assign the values for J
	fft_conjugate_j[FFT_LEN-2] 	= fft_output_j[1];
	fft_conjugate_j[FFT_LEN-1] 	= 0;
	fft_conjugate_j[1] 			= 0;

	//Re-assign the value for I
	fft_output_i[FFT_LEN-2] 	= fft_output_i[1];
	fft_output_i[FFT_LEN-1] 	= 0;
	fft_output_i[1] 			= 0;

	//Multiply the Top
	arm_cmplx_mult_cmplx_f32(&fft_output_i[0], &fft_conjugate_j[0], &fft_multi_i_j[0], (FFT_LEN+2)/2);

	//Find the bottoms magnitude
	arm_cmplx_mag_f32(&fft_multi_i_j[0], &fft_absolute_i_j[0], (FFT_LEN+2)/2);

	//Take the inverse of each one
	for(uint32_t i = 0; i < (FFT_LEN+2)/2; i++){
		fft_absolute_i_j[i] = 1/fft_absolute_i_j[i];
	}

	//Multiply the top with the bottom
	arm_cmplx_mult_real_f32(&fft_multi_i_j[0], &fft_absolute_i_j[0], &Gphat_output[0], (FFT_LEN+2)/2);
}
