/*
 * dsp.c
 *
 *  Created on: Jul 3, 2021
 *      Author: Chris
 */

#include "dsp.h"


static const float coeff[TAPS] = {0.000000, 0.000005, 0.000008, 0.000009, 0.000007, -0.000000, -0.000011, -0.000026, -0.000044, -0.000064, -0.000084, -0.000100, -0.000110, -0.000111, -0.000102, -0.000081, -0.000046, 0.000000, 0.000056, 0.000119, 0.000184, 0.000245, 0.000297, 0.000332, 0.000346, 0.000334, 0.000293, 0.000222, 0.000123, -0.000000, -0.000140, -0.000288, -0.000432, -0.000562, -0.000665, -0.000728, -0.000744, -0.000705, -0.000607, -0.000452, -0.000247, 0.000000, 0.000273, 0.000553, 0.000821, 0.001055, 0.001233, 0.001336, 0.001351, 0.001267, 0.001081, 0.000799, 0.000432, -0.000000, -0.000470, -0.000947, -0.001395, -0.001780, -0.002068, -0.002229, -0.002240, -0.002089, -0.001774, -0.001304, -0.000702, 0.000000, 0.000758, 0.001521, 0.002233, 0.002840, 0.003289, 0.003535, 0.003545, 0.003299, 0.002795, 0.002051, 0.001102, -0.000000, -0.001187, -0.002381, -0.003495, -0.004444, -0.005146, -0.005533, -0.005551, -0.005171, -0.004388, -0.003226, -0.001736, 0.000000, 0.001880, 0.003783, 0.005573, 0.007116, 0.008280, 0.008949, 0.009031, 0.008467, 0.007237, 0.005362, 0.002912, -0.000000, -0.003218, -0.006550, -0.009778, -0.012666, -0.014975, -0.016475, -0.016959, -0.016255, -0.014240, -0.010850, -0.006081, 0.000000, 0.007258, 0.015494, 0.024451, 0.033826, 0.043281, 0.052461, 0.061008, 0.068581, 0.074869, 0.079612, 0.082609, 0.083731, 0.082609, 0.079612, 0.074869, 0.068581, 0.061008, 0.052461, 0.043281, 0.033826, 0.024451, 0.015494, 0.007258, 0.000000, -0.006081, -0.010850, -0.014240, -0.016255, -0.016959, -0.016475, -0.014975, -0.012666, -0.009778, -0.006550, -0.003218, -0.000000, 0.002912, 0.005362, 0.007237, 0.008467, 0.009031, 0.008949, 0.008280, 0.007116, 0.005573, 0.003783, 0.001880, 0.000000, -0.001736, -0.003226, -0.004388, -0.005171, -0.005551, -0.005533, -0.005146, -0.004444, -0.003495, -0.002381, -0.001187, -0.000000, 0.001102, 0.002051, 0.002795, 0.003299, 0.003545, 0.003535, 0.003289, 0.002840, 0.002233, 0.001521, 0.000758, 0.000000, -0.000702, -0.001304, -0.001774, -0.002089, -0.002240, -0.002229, -0.002068, -0.001780, -0.001395, -0.000947, -0.000470, -0.000000, 0.000432, 0.000799, 0.001081, 0.001267, 0.001351, 0.001336, 0.001233, 0.001055, 0.000821, 0.000553, 0.000273, 0.000000, -0.000247, -0.000452, -0.000607, -0.000705, -0.000744, -0.000728, -0.000665, -0.000562, -0.000432, -0.000288, -0.000140, -0.000000, 0.000123, 0.000222, 0.000293, 0.000334, 0.000346, 0.000332, 0.000297, 0.000245, 0.000184, 0.000119, 0.000056, 0.000000, -0.000046, -0.000081, -0.000102, -0.000111, -0.000110, -0.000100, -0.000084, -0.000064, -0.000044, -0.000026, -0.000011, -0.000000, 0.000007, 0.000009, 0.000008, 0.000005, 0.000000, };

void matrix_init(uint32_t numRow, uint32_t numCol, uint16_t* matrix, arm_matrix_instance_q15* instance, uint32_t offset){

	for(uint32_t i = 0; i < 2; i++){
		arm_mat_init_q15(&instance[i], numRow, numCol, (q15_t*)&matrix[offset*i]);
	}
}

void FIR_Filter_Init(dsp_buffer_t* buff, uint32_t channelNumber){
	for(uint32_t i = 0; i < channelNumber; i++){
		arm_fir_init_f32(buff[i].lpFilter_inst, TAPS, &coeff[0], buff[i].state, BLOCK_SIZE);
	}
}

void FIR_Filter(dsp_buffer_t* dsp, float (*input)[BLOCK_SIZE], float (*output)[BLOCK_SIZE] , uint32_t channelNumber){
	for(uint32_t i = 0; i < channelNumber; i++){
		arm_fir_f32(dsp[i].lpFilter_inst, &input[i][0], &output[i][0], BLOCK_SIZE);
	}
}

void FFT_Init(arm_rfft_fast_instance_f32* fft_instance, uint32_t channelNumber){
	for(uint32_t i = 0; i < channelNumber; i++){
		arm_rfft_fast_init_f32(&fft_instance[i], FFT_LEN);
	}
}

void Q15_To_Float(q15_t (*q15)[Q15_FLOAT_LEN], float (*flt)[Q15_FLOAT_LEN], uint32_t channelNumber){
	for(uint32_t i = 0; i < channelNumber; i++){
		arm_q15_to_float(&q15[i][0], &flt[i][0], Q15_FLOAT_LEN);
	}
}

void Float_To_Q15(float (*flt)[Q15_FLOAT_LEN], q15_t (*q15)[Q15_FLOAT_LEN], uint32_t channelNumber){
	for(uint32_t i = 0; i < channelNumber; i++){
		arm_float_to_q15(&flt[i][0], &q15[i][0], Q15_FLOAT_LEN);
	}
}
#define FALSE 				0
#define fft_conjugate_j 	fft_output_j
#define fft_absolute_i_j	fft_output_i

void GCC_PHAT(arm_rfft_fast_instance_f32* fft_instance_i, float *fft_input_i, arm_rfft_fast_instance_f32* fft_instance_j, float *fft_input_j, float* Gphat_output){

	static float fft_output_i[FFT_LEN+2];
	static float fft_output_j[FFT_LEN+2];
	static float fft_multi_i_j[FFT_LEN+2];

	//FFT Signals I & J
	arm_rfft_fast_f32(&fft_instance_i[0], &fft_input_i[0], &fft_output_i[0], FALSE);
	arm_rfft_fast_f32(&fft_instance_j[0], &fft_input_j[0], &fft_output_j[0], FALSE);

	//Take the conjugate of signal J
	arm_cmplx_conj_f32(&fft_output_j[2], &fft_conjugate_j[2], FFT_LEN/2 - 1);

	//Re-assign the values for J
	fft_conjugate_j[FFT_LEN-2] 	= fft_output_j[1];
	fft_conjugate_j[FFT_LEN-1] 	= 0;
	fft_conjugate_j[1] 			= 0;

	//Re-assign the value for I
	fft_output_i[FFT_LEN-2] 	= fft_output_i[1];
	fft_output_i[FFT_LEN-1] 	= 0;
	fft_output_i[1] 			= 0;

	//Multiply the Top
	arm_cmplx_mult_cmplx_f32(&fft_output_i[0], &fft_conjugate_j[0], &fft_multi_i_j[0], (FFT_LEN+2)/2);

	//Find the bottoms magnitude
	arm_cmplx_mag_f32(&fft_multi_i_j[0], &fft_absolute_i_j[0], (FFT_LEN+2)/2);

	//Take the inverse of each one
	for(uint32_t i = 0; i < (FFT_LEN+2)/2; i++){
		fft_absolute_i_j[i] = 1/fft_absolute_i_j[i];
	}

	//Multiply the top with the bottom
	arm_cmplx_mult_real_f32(&fft_multi_i_j[0], &fft_absolute_i_j[0], &Gphat_output[0], (FFT_LEN+2)/2);
}
