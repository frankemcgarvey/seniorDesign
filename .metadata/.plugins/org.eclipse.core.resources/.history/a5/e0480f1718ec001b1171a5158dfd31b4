/*
 * dsp.c
 *
 *  Created on: Jul 3, 2021
 *      Author: Chris
 */

#include "dsp.h"


static const float coeff[TAPS] = {0, -5.322004e-15, -6.075393e-06, -1.267075e-05, -1.212579e-05, 4.637813e-14, 2.033692e-05, 3.697692e-05, 3.402724e-05, -7.033343e-14, -6.398193e-05, -1.409577e-04, -2.029037e-04, -2.227433e-04, -1.887210e-04, -1.140021e-04, -3.545208e-05, 0, -4.307006e-05, -1.684172e-04, -3.396737e-04, -4.898893e-04, -5.475543e-04, -4.693032e-04, -2.646943e-04, 3.145575e-13, 2.240089e-04, 3.137046e-04, 2.269728e-04, -5.604627e-13, -2.583968e-04, -4.066678e-04, -3.308074e-04, 4.871568e-13, 5.083702e-04, 1.029502e-03, 1.373834e-03, 1.408165e-03, 1.120755e-03, 6.393161e-04, 1.885957e-04, 0, 2.085631e-04, 7.819238e-04, 1.516273e-03, 2.107907e-03, 2.276225e-03, 1.888783e-03, 1.033336e-03, -9.068541e-13, -8.270220e-04, -1.128874e-03, -7.972052e-04, 1.442887e-12, 8.678808e-04, 1.337972e-03, 1.067267e-03, -1.140264e-12, -1.581692e-03, -3.149754e-03, -4.136711e-03, -4.176296e-03, -3.276386e-03, -1.843579e-03, -5.368364e-04, 0, -5.796105e-04, -2.149156e-03, -4.124277e-03, -5.677320e-03, -6.074025e-03, -4.996382e-03, -2.711221e-03, 1.615590e-12, 2.138146e-03, 2.899394e-03, 2.035163e-03, -2.442097e-12, -2.192290e-03, -3.364546e-03, -2.673129e-03, 1.841582e-12, 3.936316e-03, 7.819957e-03, 1.025135e-02, 1.033615e-02, 8.103147e-03, 4.558994e-03, 1.328199e-03, 0, 1.438209e-03, 5.345986e-03, 1.029188e-02, 1.422349e-02, 1.528983e-02, 1.264772e-02, 6.907849e-03, -2.233063e-12, -5.535258e-03, -7.578306e-03, -5.377080e-03, 3.265311e-12, 5.942177e-03, 9.257613e-03, 7.479158e-03, -2.386024e-12, -1.145435e-02, -2.328455e-02, -3.131558e-02, -3.248904e-02, -2.629623e-02, -1.533389e-02, -4.650963e-03, -3.343799e-18, -5.551350e-03, -2.189738e-02, -4.515066e-02, -6.760891e-02, -7.992272e-02, -7.414439e-02, -4.666417e-02, 2.583782e-12, 5.726618e-02, 1.125175e-01, 1.525458e-01, 1.673571e-01, 1.525458e-01, 1.125175e-01, 5.726618e-02, 2.583782e-12, -4.666417e-02, -7.414439e-02, -7.992272e-02, -6.760891e-02, -4.515066e-02, -2.189738e-02, -5.551350e-03, -3.343799e-18, -4.650963e-03, -1.533389e-02, -2.629623e-02, -3.248904e-02, -3.131558e-02, -2.328455e-02, -1.145435e-02, -2.386024e-12, 7.479158e-03, 9.257613e-03, 5.942177e-03, 3.265311e-12, -5.377080e-03, -7.578306e-03, -5.535258e-03, -2.233063e-12, 6.907849e-03, 1.264772e-02, 1.528983e-02, 1.422349e-02, 1.029188e-02, 5.345986e-03, 1.438209e-03, 0, 1.328199e-03, 4.558994e-03, 8.103147e-03, 1.033615e-02, 1.025135e-02, 7.819957e-03, 3.936316e-03, 1.841582e-12, -2.673129e-03, -3.364546e-03, -2.192290e-03, -2.442097e-12, 2.035163e-03, 2.899394e-03, 2.138146e-03, 1.615590e-12, -2.711221e-03, -4.996382e-03, -6.074025e-03, -5.677320e-03, -4.124277e-03, -2.149156e-03, -5.796105e-04, 0, -5.368364e-04, -1.843579e-03, -3.276386e-03, -4.176296e-03, -4.136711e-03, -3.149754e-03, -1.581692e-03, -1.140264e-12, 1.067267e-03, 1.337972e-03, 8.678808e-04, 1.442887e-12, -7.972052e-04, -1.128874e-03, -8.270220e-04, -9.068541e-13, 1.033336e-03, 1.888783e-03, 2.276225e-03, 2.107907e-03, 1.516273e-03, 7.819238e-04, 2.085631e-04, 0, 1.885957e-04, 6.393161e-04, 1.120755e-03, 1.408165e-03, 1.373834e-03, 1.029502e-03, 5.083702e-04, 4.871568e-13, -3.308074e-04, -4.066678e-04, -2.583968e-04, -5.604627e-13, 2.269728e-04, 3.137046e-04, 2.240089e-04, 3.145575e-13, -2.646943e-04, -4.693032e-04, -5.475543e-04, -4.898893e-04, -3.396737e-04, -1.684172e-04, -4.307006e-05, 0, -3.545208e-05, -1.140021e-04, -1.887210e-04, -2.227433e-04, -2.029037e-04, -1.409577e-04, -6.398193e-05, -7.033343e-14, 3.402724e-05, 3.697692e-05, 2.033692e-05, 4.637813e-14, -1.212579e-05, -1.267075e-05, -6.075393e-06, -5.322004e-15, 0};
static q15_t coeff_q15[TAPS];
void matrix_init(uint32_t numRow, uint32_t numCol, uint16_t* matrix, arm_matrix_instance_q15* instance, uint32_t offset){

	for(uint32_t i = 0; i < 2; i++){
		arm_mat_init_q15(&instance[i], numRow, numCol, (q15_t*)&matrix[offset*i]);
	}
}

void FIR_Filter_F32_Init(dsp_buffer_t* buff, uint32_t channelNumber){
	for(uint32_t i = 0; i < channelNumber; i++){
		arm_fir_init_f32(buff[i].lpFilter_inst, TAPS, &coeff[0], &buff[i].state[0], BLOCK_SIZE);
	}
}

void FIR_Filter_F32(dsp_buffer_t* dsp, float (*input)[BLOCK_SIZE], float (*output)[BLOCK_SIZE] , uint32_t channelNumber){
	for(uint32_t i = 0; i < channelNumber; i++){
		arm_fir_f32(dsp[i].lpFilter_inst, &input[i][0], &output[i][0], BLOCK_SIZE);
	}
}

void FIR_Filter_Q15(dsp_buffer_t* dsp, q15_t (*input)[BLOCK_SIZE], q15_t (*output)[BLOCK_SIZE] , uint32_t channelNumber){
	for(uint32_t i = 0; i < channelNumber; i++){
		arm_fir_fast_q15(&dsp[i].lpFilter_inst[0], &input[i][0], &output[i][0], BLOCK_SIZE);
	}
}

void FIR_Filter_Q15_Init(dsp_buffer_t* buff, uint32_t channelNumber){

	arm_float_to_q15(coeff, coeff_q15, TAPS);

	for(uint32_t i = 0; i < channelNumber; i++){
		arm_fir_init_q15(&buff[i].lpFilter_inst[0], TAPS, &coeff_q15[0], &buff[i].state[0], BLOCK_SIZE);
	}
}

void FFT_Init(arm_rfft_fast_instance_f32* fft_instance, uint32_t channelNumber){
	for(uint32_t i = 0; i < channelNumber; i++){
		arm_rfft_fast_init_f32(&fft_instance[i], FFT_LEN);
	}
}

void Q15_To_Float(q15_t (*q15)[Q15_FLOAT_LEN], float (*flt)[Q15_FLOAT_LEN], uint32_t channelNumber){
	for(uint32_t i = 0; i < channelNumber; i++){
		arm_q15_to_float(&q15[i][0], &flt[i][0], Q15_FLOAT_LEN);
	}
}

void Float_To_Q15(float (*flt)[Q15_FLOAT_LEN], q15_t (*q15)[Q15_FLOAT_LEN], uint32_t channelNumber){
	for(uint32_t i = 0; i < channelNumber; i++){
		arm_float_to_q15(&flt[i][0], &q15[i][0], Q15_FLOAT_LEN);
	}
}
#define FALSE 				0
#define fft_conjugate_j 	fft_output_j
#define fft_absolute_i_j	fft_output_i

void GCC_PHAT(arm_rfft_fast_instance_f32* fft_instance_i, float *fft_input_i, arm_rfft_fast_instance_f32* fft_instance_j, float *fft_input_j, float* Gphat_output){

	static float fft_output_i[FFT_LEN+2];
	static float fft_output_j[FFT_LEN+2];
	static float fft_multi_i_j[FFT_LEN+2];

	//FFT Signals I & J
	arm_rfft_fast_f32(&fft_instance_i[0], &fft_input_i[0], &fft_output_i[0], FALSE);
	arm_rfft_fast_f32(&fft_instance_j[0], &fft_input_j[0], &fft_output_j[0], FALSE);

	//Take the conjugate of signal J
	arm_cmplx_conj_f32(&fft_output_j[2], &fft_conjugate_j[2], FFT_LEN/2 - 1);

	//Re-assign the values for J
	fft_conjugate_j[FFT_LEN-2] 	= fft_output_j[1];
	fft_conjugate_j[FFT_LEN-1] 	= 0;
	fft_conjugate_j[1] 			= 0;

	//Re-assign the value for I
	fft_output_i[FFT_LEN-2] 	= fft_output_i[1];
	fft_output_i[FFT_LEN-1] 	= 0;
	fft_output_i[1] 			= 0;

	//Multiply the Top
	arm_cmplx_mult_cmplx_f32(&fft_output_i[0], &fft_conjugate_j[0], &fft_multi_i_j[0], (FFT_LEN+2)/2);

	//Find the bottoms magnitude
	arm_cmplx_mag_f32(&fft_multi_i_j[0], &fft_absolute_i_j[0], (FFT_LEN+2)/2);

	//Take the inverse of each one
	for(uint32_t i = 0; i < (FFT_LEN+2)/2; i++){
		fft_absolute_i_j[i] = 1/fft_absolute_i_j[i];
	}

	//Multiply the top with the bottom
	arm_cmplx_mult_real_f32(&fft_multi_i_j[0], &fft_absolute_i_j[0], &Gphat_output[0], (FFT_LEN+2)/2);
}
