/*
 * dsp.c
 *
 *  Created on: Jul 3, 2021
 *      Author: Chris
 */

#include "dsp.h"

void FIR_Filter_Init(dsp_buffer_t* buff, uint32_t channelNumber, float *coeff){
	for(uint32_t i = 0; i < channelNumber; i++){
		arm_fir_init_f32(&buff[i].Filter_inst, TAPS, &coeff[0], buff[i].state, BLOCK_SIZE);
	}
}

void FIR_Filter(dsp_buffer_t* dsp, float (*input)[BLOCK_SIZE], float (*output)[BLOCK_SIZE] , uint32_t channelNumber){
	for(uint32_t i = 0; i < channelNumber; i++){
		arm_fir_f32(&dsp[i].Filter_inst, &input[i][0], &output[i][0], BLOCK_SIZE);
	}
}

void Filter_Buffer((q15_t(*sig_i)[Q15_FLOAT_LEN]), float *sig_j, float *sig_i_buffer, float *sig_j_buffer){
	//Q15 to Float
	Q15_To_Float((q15_t(*)[LOCALIZATION_SIZE])&sig_i[0][i*LOCALIZATION_SIZE], (float(*)[LOCALIZATION_SIZE])&buffer->pcmBuffer_flt[0][indexCnt*LOCALIZATION_SIZE], CHANNEL_NUMBER);

	//FIR Filter
	FIR_Filter(&dsp[0], (float(*)[Q15_FLOAT_LEN])&buffer->pcmBuffer_flt[0][indexC], (float(*)[LOCALIZATION_SIZE])&buffer->pcmBuffer_flt[0][indexCnt*LOCALIZATION_SIZE], CHANNEL_NUMBER);

}

void Q15_To_Float(q15_t (*q15)[Q15_FLOAT_LEN], float (*flt)[Q15_FLOAT_LEN], uint32_t channelNumber){
	for(uint32_t i = 0; i < channelNumber; i++){
		arm_q15_to_float(&q15[i][0], &flt[i][0], Q15_FLOAT_LEN);
	}
}

void Float_To_Q15(float (*flt)[Q15_FLOAT_LEN], q15_t (*q15)[Q15_FLOAT_LEN], uint32_t channelNumber){
	for(uint32_t i = 0; i < channelNumber; i++){
		arm_float_to_q15(&flt[i][0], &q15[i][0], Q15_FLOAT_LEN);
	}
}

bool Max_Threshold_Q15(q15_t *sig_i, q15_t *sig_j, q15_t MAX){
	static q15_t max_i, max_j;
	static uint32_t pos_i, pos_j;

	arm_absmax_q15(sig_i, BLOCK_SIZE, &max_i, &pos_i);
	arm_absmax_q15(sig_j, BLOCK_SIZE, &max_j, &pos_j);

	if(max_i >= MAX || max_j >= MAX){
		return true;
	}
	else{
		return false;
	}

}



















#define FALSE 				0
#define fft_conjugate_j 	fft_output_j
#define fft_absolute_i_j	fft_output_i

void GCC_PHAT(arm_rfft_fast_instance_f32* fft_instance_i, float *fft_input_i, arm_rfft_fast_instance_f32* fft_instance_j, float *fft_input_j, float* Gphat_output){

	static float fft_output_i[FFT_LEN+2];
	static float fft_output_j[FFT_LEN+2];
	static float fft_multi_i_j[FFT_LEN+2];

	//FFT Signals I & J
	arm_rfft_fast_f32(&fft_instance_i[0], &fft_input_i[0], &fft_output_i[0], FALSE);
	arm_rfft_fast_f32(&fft_instance_j[0], &fft_input_j[0], &fft_output_j[0], FALSE);

	//Take the conjugate of signal J
	arm_cmplx_conj_f32(&fft_output_j[2], &fft_conjugate_j[2], FFT_LEN/2 - 1);

	//Re-assign the values for J
	fft_conjugate_j[FFT_LEN-2] 	= fft_output_j[1];
	fft_conjugate_j[FFT_LEN-1] 	= 0;
	fft_conjugate_j[1] 			= 0;

	//Re-assign the value for I
	fft_output_i[FFT_LEN-2] 	= fft_output_i[1];
	fft_output_i[FFT_LEN-1] 	= 0;
	fft_output_i[1] 			= 0;

	//Multiply the Top
	arm_cmplx_mult_cmplx_f32(&fft_output_i[0], &fft_conjugate_j[0], &fft_multi_i_j[0], (FFT_LEN+2)/2);

	//Find the bottoms magnitude
	arm_cmplx_mag_f32(&fft_multi_i_j[0], &fft_absolute_i_j[0], (FFT_LEN+2)/2);

	//Take the inverse of each one
	for(uint32_t i = 0; i < (FFT_LEN+2)/2; i++){
		fft_absolute_i_j[i] = 1/fft_absolute_i_j[i];
	}

	//Multiply the top with the bottom
	arm_cmplx_mult_real_f32(&fft_multi_i_j[0], &fft_absolute_i_j[0], &Gphat_output[0], (FFT_LEN+2)/2);
}
