/*
 * dsp.c
 *
 *  Created on: Jul 3, 2021
 *      Author: Chris
 */

#include "dsp.h"


static const float coeff[TAPS+1] = {-1.376502e-07,-4.038715e-07,-5.123967e-07,-4.037984e-07,2.580436e-15,6.820008e-07,1.413226e-06,1.690563e-06,7.816492e-07,-2.095917e-06,-7.475081e-06,-1.528261e-05,-2.453115e-05,-3.318720e-05,-3.832730e-05,-3.663901e-05,-2.523085e-05,-2.606751e-06,3.043481e-05,7.026445e-05,1.105081e-04,1.429012e-04,1.588671e-04,1.515571e-04,1.178906e-04,6.003447e-05,-1.420227e-05,-9.237955e-05,-1.598265e-04,-2.030171e-04,-2.131530e-04,-1.889902e-04,-1.379980e-04,-7.526219e-05,-2.009566e-05,9.024923e-06,-9.082545e-14,-4.839610e-05,-1.245144e-04,-2.052752e-04,-2.611492e-04,-2.637569e-04,-1.942759e-04,-5.035545e-05,1.506551e-04,3.735898e-04,5.726009e-04,7.021814e-04,7.294085e-04,6.440451e-04,4.633422e-04,2.295439e-04,-1.593398e-13,-1.680387e-04,-2.340282e-04,-1.873343e-04,-5.265060e-05,1.149287e-04,2.449018e-04,2.729789e-04,1.633346e-04,-7.558721e-05,-3.878678e-04,-6.826636e-04,-8.612055e-04,-8.520944e-04,-6.449273e-04,-3.108061e-04,3.599587e-13,8.800335e-05,-2.405332e-04,-1.104256e-03,-2.480248e-03,-4.160669e-03,-5.750736e-03,-6.718809e-03,-6.497642e-03,-4.622140e-03,-8.765757e-04,4.583473e-03,1.116952e-02,1.788569e-02,2.345202e-02,2.651524e-02,2.591482e-02,2.095506e-02,1.162529e-02,-1.285686e-03,-1.621892e-02,-3.103031e-02,-4.331148e-02,-5.079683e-02,-5.178460e-02,-4.549100e-02,-3.226363e-02,-1.360353e-02,8.019978e-03,2.953799e-02,4.777348e-02,5.996903e-02,6.425469e-02,5.996903e-02,4.777348e-02,2.953799e-02,8.019978e-03,-1.360353e-02,-3.226363e-02,-4.549100e-02,-5.178460e-02,-5.079683e-02,-4.331148e-02,-3.103031e-02,-1.621892e-02,-1.285686e-03,1.162529e-02,2.095506e-02,2.591482e-02,2.651524e-02,2.345202e-02,1.788569e-02,1.116952e-02,4.583473e-03,-8.765757e-04,-4.622140e-03,-6.497642e-03,-6.718809e-03,-5.750736e-03,-4.160669e-03,-2.480248e-03,-1.104256e-03,-2.405332e-04,8.800335e-05,3.599587e-13,-3.108061e-04,-6.449273e-04,-8.520944e-04,-8.612055e-04,-6.826636e-04,-3.878678e-04,-7.558721e-05,1.633346e-04,2.729789e-04,2.449018e-04,1.149287e-04,-5.265060e-05,-1.873343e-04,-2.340282e-04,-1.680387e-04,-1.593398e-13,2.295439e-04,4.633422e-04,6.440451e-04,7.294085e-04,7.021814e-04,5.726009e-04,3.735898e-04,1.506551e-04,-5.035545e-05,-1.942759e-04,-2.637569e-04,-2.611492e-04,-2.052752e-04,-1.245144e-04,-4.839610e-05,-9.082545e-14,9.024923e-06,-2.009566e-05,-7.526219e-05,-1.379980e-04,-1.889902e-04,-2.131530e-04,-2.030171e-04,-1.598265e-04,-9.237955e-05,-1.420227e-05,6.003447e-05,1.178906e-04,1.515571e-04,1.588671e-04,1.429012e-04,1.105081e-04,7.026445e-05,3.043481e-05,-2.606751e-06,-2.523085e-05,-3.663901e-05,-3.832730e-05,-3.318720e-05,-2.453115e-05,-1.528261e-05,-7.475081e-06,-2.095917e-06,7.816492e-07,1.690563e-06,1.413226e-06,6.820008e-07,2.580436e-15,-4.037984e-07,-5.123967e-07,-4.038715e-07,-1.376502e-07};

void matrix_init(uint32_t numRow, uint32_t numCol, uint16_t* matrix, arm_matrix_instance_q15* instance, uint32_t offset){

	for(uint32_t i = 0; i < 2; i++){
		arm_mat_init_q15(&instance[i], numRow, numCol, (q15_t*)&matrix[offset*i]);
	}
}

void FIR_Filter_Init(dsp_buffer_t* buff, uint32_t channelNumber){
	for(uint32_t i = 0; i < channelNumber; i++){
		arm_fir_init_f32(&buff[i].lpFilter_inst, TAPS, &coeff[0], &buff[i].state, BLOCK_SIZE);
	}
}

void FIR_Filter(dsp_buffer_t* dsp, float (*input)[BLOCK_SIZE], float (*output)[BLOCK_SIZE] , uint32_t channelNumber){
	for(uint32_t i = 0; i < channelNumber; i++){
		arm_fir_f32(dsp[i].lpFilter_inst, &input[i][0], &output[i][0], BLOCK_SIZE);
	}
}

void FFT_Init(arm_rfft_fast_instance_f32* fft_instance, uint32_t channelNumber){
	for(uint32_t i = 0; i < channelNumber; i++){
		arm_rfft_fast_init_f32(&fft_instance[i], FFT_LEN);
	}
}

void Q15_To_Float(q15_t (*q15)[Q15_FLOAT_LEN], float (*flt)[Q15_FLOAT_LEN], uint32_t channelNumber){
	for(uint32_t i = 0; i < channelNumber; i++){
		arm_q15_to_float(&q15[i][0], &flt[i][0], Q15_FLOAT_LEN);
	}
}

void Float_To_Q15(float (*flt)[Q15_FLOAT_LEN], q15_t (*q15)[Q15_FLOAT_LEN], uint32_t channelNumber){
	for(uint32_t i = 0; i < channelNumber; i++){
		arm_float_to_q15(&flt[i][0], &q15[i][0], Q15_FLOAT_LEN);
	}
}
#define FALSE 				0
#define fft_conjugate_j 	fft_output_j
#define fft_absolute_i_j	fft_output_i

void GCC_PHAT(arm_rfft_fast_instance_f32* fft_instance_i, float *fft_input_i, arm_rfft_fast_instance_f32* fft_instance_j, float *fft_input_j, float* Gphat_output){

	static float fft_output_i[FFT_LEN+2];
	static float fft_output_j[FFT_LEN+2];
	static float fft_multi_i_j[FFT_LEN+2];

	//FFT Signals I & J
	arm_rfft_fast_f32(&fft_instance_i[0], &fft_input_i[0], &fft_output_i[0], FALSE);
	arm_rfft_fast_f32(&fft_instance_j[0], &fft_input_j[0], &fft_output_j[0], FALSE);

	//Take the conjugate of signal J
	arm_cmplx_conj_f32(&fft_output_j[2], &fft_conjugate_j[2], FFT_LEN/2 - 1);

	//Re-assign the values for J
	fft_conjugate_j[FFT_LEN-2] 	= fft_output_j[1];
	fft_conjugate_j[FFT_LEN-1] 	= 0;
	fft_conjugate_j[1] 			= 0;

	//Re-assign the value for I
	fft_output_i[FFT_LEN-2] 	= fft_output_i[1];
	fft_output_i[FFT_LEN-1] 	= 0;
	fft_output_i[1] 			= 0;

	//Multiply the Top
	arm_cmplx_mult_cmplx_f32(&fft_output_i[0], &fft_conjugate_j[0], &fft_multi_i_j[0], (FFT_LEN+2)/2);

	//Find the bottoms magnitude
	arm_cmplx_mag_f32(&fft_multi_i_j[0], &fft_absolute_i_j[0], (FFT_LEN+2)/2);

	//Take the inverse of each one
	for(uint32_t i = 0; i < (FFT_LEN+2)/2; i++){
		fft_absolute_i_j[i] = 1/fft_absolute_i_j[i];
	}

	//Multiply the top with the bottom
	arm_cmplx_mult_real_f32(&fft_multi_i_j[0], &fft_absolute_i_j[0], &Gphat_output[0], (FFT_LEN+2)/2);
}
