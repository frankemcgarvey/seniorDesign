/*
 * dsp.c
 *
 *  Created on: Jul 3, 2021
 *      Author: Chris
 */

#include "dsp.h"

static const float coeff[TAPS+1] = {7.860538e-03,7.106822e-04,-1.617725e-03,2.848837e-03,-4.103850e-03,4.960907e-03,-5.086568e-03,4.276341e-03,-2.504160e-03,-9.815784e-06,2.822396e-03,-5.351313e-03,6.978683e-03,-7.196099e-03,5.750005e-03,-2.731228e-03,-1.395151e-03,5.838585e-03,-9.624507e-03,1.179214e-02,-1.161201e-02,8.787580e-03,-3.582543e-03,-3.164866e-03,1.014963e-02,-1.582910e-02,1.873863e-02,-1.782749e-02,1.274902e-02,-4.036893e-03,-6.890726e-03,1.791713e-02,-2.658550e-02,3.058080e-02,-2.824712e-02,1.903749e-02,-3.802171e-03,-1.516273e-02,3.434425e-02,-4.950133e-02,5.635067e-02,-5.134583e-02,3.241945e-02,4.299549e-04,-4.477966e-02,9.562518e-02,-1.451304e-01,1.811083e-01,-1.787058e-01,4.628212e-02,1.071009e+00,4.628212e-02,-1.787058e-01,1.811083e-01,-1.451304e-01,9.562518e-02,-4.477966e-02,4.299549e-04,3.241945e-02,-5.134583e-02,5.635067e-02,-4.950133e-02,3.434425e-02,-1.516273e-02,-3.802171e-03,1.903749e-02,-2.824712e-02,3.058080e-02,-2.658550e-02,1.791713e-02,-6.890726e-03,-4.036893e-03,1.274902e-02,-1.782749e-02,1.873863e-02,-1.582910e-02,1.014963e-02,-3.164866e-03,-3.582543e-03,8.787580e-03,-1.161201e-02,1.179214e-02,-9.624507e-03,5.838585e-03,-1.395151e-03,-2.731228e-03,5.750005e-03,-7.196099e-03,6.978683e-03,-5.351313e-03,2.822396e-03,-9.815784e-06,-2.504160e-03,4.276341e-03,-5.086568e-03,4.960907e-03,-4.103850e-03,2.848837e-03,-1.617725e-03,7.106822e-04,7.860538e-03};



void matrix_init(uint32_t numRow, uint32_t numCol, uint16_t* matrix, arm_matrix_instance_q15* instance, uint32_t offset){

	for(uint32_t i = 0; i < 2; i++){
		arm_mat_init_q15(&instance[i], numRow, numCol, (q15_t*)&matrix[offset*i]);
	}
}

void FIR_Filter_Init(dsp_buffer_t* buff, uint32_t channelNumber){
	for(uint32_t i = 0; i < channelNumber; i++){
		arm_fir_init_f32(buff[i].lpFilter_inst, TAPS, &coeff[0], buff[i].state, BLOCK_SIZE);
	}
}

void FIR_Filter(dsp_buffer_t* dsp, uint16_t (*input)[16], uint16_t (*output)[16] , uint32_t channelNumber){

	float32_t floatFilter_input[4][16];
	float32_t floatFilter_output[4][16];

	arm_q15_to_float((const q15_t*)&input[0][0], (float32_t*)&floatFilter_input[0][0], channelNumber*16);

	for(uint32_t i = 0; i < channelNumber; i++){
		arm_fir_f32(dsp[i].lpFilter_inst, &floatFilter_input[i][0], &floatFilter_output[i][0], BLOCK_SIZE);
	}

	arm_float_to_q15(&floatFilter_output[0][0], (q15_t*)&output[0][0], channelNumber*16);

}
