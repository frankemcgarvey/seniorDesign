/*
 * dsp.c
 *
 *  Created on: Jul 3, 2021
 *      Author: Chris
 */

#include "dsp.h"


static const float coeff[TAPS] = {0, 4.175870e-07, -6.904078e-07, -2.230781e-06, -2.818624e-06, -1.457166e-06, 1.833514e-06, 5.687398e-06, 7.545359e-06, 4.337879e-06, -6.424272e-06, -2.543144e-05, -5.060603e-05, -7.675936e-05, -9.613718e-05, -9.990585e-05, -8.036940e-05, -3.345800e-05, 3.913616e-05, 1.288245e-04, 2.204940e-04, 2.945925e-04, 3.307330e-04, 3.122151e-04, 2.305353e-04, 8.881974e-05, -9.679029e-05, -2.984263e-04, -4.805440e-04, -6.062050e-04, -6.444816e-04, -5.774948e-04, -4.055102e-04, -1.487846e-04, 1.545601e-04, 4.545473e-04, 6.982945e-04, 8.402306e-04, 8.514994e-04, 7.264892e-04, 4.849133e-04, 1.687302e-04, -1.657107e-04, -4.588410e-04, -6.600808e-04, -7.384420e-04, -6.891014e-04, -5.342967e-04, -3.181046e-04, -9.603986e-05, 7.833359e-05, 1.667575e-04, 1.564013e-04, 6.410464e-05, -6.669432e-05, -1.761357e-04, -2.032949e-04, -1.033875e-04, 1.372502e-04, 4.923268e-04, 8.957509e-04, 1.251778e-03, 1.453910e-03, 1.409133e-03, 1.062499e-03, 4.164158e-04, -4.603621e-04, -1.437289e-03, -2.340717e-03, -2.984249e-03, -3.205510e-03, -2.902215e-03, -2.059850e-03, -7.644046e-04, 8.038771e-04, 2.396129e-03, 3.736298e-03, 4.571277e-03, 4.720324e-03, 4.113858e-03, 2.813240e-03, 1.006469e-03, -1.020668e-03, -2.933546e-03, -4.408997e-03, -5.195500e-03, -5.161347e-03, -4.320795e-03, -2.832339e-03, -9.687195e-04, 9.359348e-04, 2.551534e-03, 3.616809e-03, 3.989977e-03, 3.674441e-03, 2.813630e-03, 1.655569e-03, 4.943483e-04, -3.990630e-04, -8.413862e-04, -7.821129e-04, -3.179351e-04, 3.282903e-04, 8.610679e-04, 9.877316e-04, 4.995816e-04, -6.600603e-04, -2.358124e-03, -4.276198e-03, -5.960404e-03, -6.910207e-03, -6.690309e-03, -5.043219e-03, -1.977636e-03, 2.189403e-03, 6.851063e-03, 1.119299e-02, 1.432943e-02, 1.547108e-02, 1.409408e-02, 1.007640e-02, 3.771054e-03, -4.004391e-03, -1.206806e-02, -1.905293e-02, -2.363788e-02, -2.479149e-02, -2.198404e-02, -1.532594e-02, -5.601381e-03, 5.816405e-03, 1.716109e-02, 2.655229e-02, 3.231269e-02, 3.326893e-02, 2.898172e-02, 1.986091e-02, 7.139509e-03, -7.295393e-03, -2.119123e-02, -3.229284e-02, -3.871928e-02, -3.929009e-02, -3.374294e-02, -2.280254e-02, -8.084905e-03, 8.150104e-03, 2.335891e-02, 3.512753e-02, 4.156874e-02, 4.156874e-02, 3.512753e-02, 2.335891e-02, 8.150104e-03, -8.084905e-03, -2.280254e-02, -3.374294e-02, -3.929009e-02, -3.871928e-02, -3.229284e-02, -2.119123e-02, -7.295393e-03, 7.139509e-03, 1.986091e-02, 2.898172e-02, 3.326893e-02, 3.231269e-02, 2.655229e-02, 1.716109e-02, 5.816405e-03, -5.601381e-03, -1.532594e-02, -2.198404e-02, -2.479149e-02, -2.363788e-02, -1.905293e-02, -1.206806e-02, -4.004391e-03, 3.771054e-03, 1.007640e-02, 1.409408e-02, 1.547108e-02, 1.432943e-02, 1.119299e-02, 6.851063e-03, 2.189403e-03, -1.977636e-03, -5.043219e-03, -6.690309e-03, -6.910207e-03, -5.960404e-03, -4.276198e-03, -2.358124e-03, -6.600603e-04, 4.995816e-04, 9.877316e-04, 8.610679e-04, 3.282903e-04, -3.179351e-04, -7.821129e-04, -8.413862e-04, -3.990630e-04, 4.943483e-04, 1.655569e-03, 2.813630e-03, 3.674441e-03, 3.989977e-03, 3.616809e-03, 2.551534e-03, 9.359348e-04, -9.687195e-04, -2.832339e-03, -4.320795e-03, -5.161347e-03, -5.195500e-03, -4.408997e-03, -2.933546e-03, -1.020668e-03, 1.006469e-03, 2.813240e-03, 4.113858e-03, 4.720324e-03, 4.571277e-03, 3.736298e-03, 2.396129e-03, 8.038771e-04, -7.644046e-04, -2.059850e-03, -2.902215e-03, -3.205510e-03, -2.984249e-03, -2.340717e-03, -1.437289e-03, -4.603621e-04, 4.164158e-04, 1.062499e-03, 1.409133e-03, 1.453910e-03, 1.251778e-03, 8.957509e-04, 4.923268e-04, 1.372502e-04, -1.033875e-04, -2.032949e-04, -1.761357e-04, -6.669432e-05, 6.410464e-05, 1.564013e-04, 1.667575e-04, 7.833359e-05, -9.603986e-05, -3.181046e-04, -5.342967e-04, -6.891014e-04, -7.384420e-04, -6.600808e-04, -4.588410e-04, -1.657107e-04, 1.687302e-04, 4.849133e-04, 7.264892e-04, 8.514994e-04, 8.402306e-04, 6.982945e-04, 4.545473e-04, 1.545601e-04, -1.487846e-04, -4.055102e-04, -5.774948e-04, -6.444816e-04, -6.062050e-04, -4.805440e-04, -2.984263e-04, -9.679029e-05, 8.881974e-05, 2.305353e-04, 3.122151e-04, 3.307330e-04, 2.945925e-04, 2.204940e-04, 1.288245e-04, 3.913616e-05, -3.345800e-05, -8.036940e-05, -9.990585e-05, -9.613718e-05, -7.675936e-05, -5.060603e-05, -2.543144e-05, -6.424272e-06, 4.337879e-06, 7.545359e-06, 5.687398e-06, 1.833514e-06, -1.457166e-06, -2.818624e-06, -2.230781e-06, -6.904078e-07, 4.175870e-07, 0};
static q15_t coeff_q15[TAPS];
void matrix_init(uint32_t numRow, uint32_t numCol, uint16_t* matrix, arm_matrix_instance_q15* instance, uint32_t offset){

	for(uint32_t i = 0; i < 2; i++){
		arm_mat_init_q15(&instance[i], numRow, numCol, (q15_t*)&matrix[offset*i]);
	}
}

void FIR_Filter_F32_Init(dsp_buffer_t* buff, uint32_t channelNumber){
	for(uint32_t i = 0; i < channelNumber; i++){
		arm_fir_init_f32(buff[i].lpFilter_inst, TAPS, &coeff[0], &buff[i].state[0], BLOCK_SIZE);
	}
}

void FIR_Filter_F32(dsp_buffer_t* dsp, float (*input)[BLOCK_SIZE], float (*output)[BLOCK_SIZE] , uint32_t channelNumber){
	for(uint32_t i = 0; i < channelNumber; i++){
		arm_fir_f32(dsp[i].lpFilter_inst, &input[i][0], &output[i][0], BLOCK_SIZE);
	}
}

void FIR_Filter_Q15(dsp_buffer_t* dsp, q15_t (*input)[BLOCK_SIZE], q15_t (*output)[BLOCK_SIZE] , uint32_t channelNumber){
	for(uint32_t i = 0; i < channelNumber; i++){
		arm_fir_fast_q15(&dsp[i].lpFilter_inst[0], &input[i][0], &output[i][0], BLOCK_SIZE);
	}
}

void FIR_Filter_Q15_Init(dsp_buffer_t* buff, uint32_t channelNumber){

	arm_float_to_q15(coeff, coeff_q15, TAPS);

	for(uint32_t i = 0; i < channelNumber; i++){
		arm_fir_init_q15(&buff[i].lpFilter_inst[0], TAPS, &coeff_q15[0], &buff[i].state[0], BLOCK_SIZE);
	}
}

void FFT_Init(arm_rfft_fast_instance_f32* fft_instance, uint32_t channelNumber){
	for(uint32_t i = 0; i < channelNumber; i++){
		arm_rfft_fast_init_f32(&fft_instance[i], FFT_LEN);
	}
}

void Q15_To_Float(q15_t (*q15)[Q15_FLOAT_LEN], float (*flt)[Q15_FLOAT_LEN], uint32_t channelNumber){
	for(uint32_t i = 0; i < channelNumber; i++){
		arm_q15_to_float(&q15[i][0], &flt[i][0], Q15_FLOAT_LEN);
	}
}

void Float_To_Q15(float (*flt)[Q15_FLOAT_LEN], q15_t (*q15)[Q15_FLOAT_LEN], uint32_t channelNumber){
	for(uint32_t i = 0; i < channelNumber; i++){
		arm_float_to_q15(&flt[i][0], &q15[i][0], Q15_FLOAT_LEN);
	}
}
#define FALSE 				0
#define fft_conjugate_j 	fft_output_j
#define fft_absolute_i_j	fft_output_i

void GCC_PHAT(arm_rfft_fast_instance_f32* fft_instance_i, float *fft_input_i, arm_rfft_fast_instance_f32* fft_instance_j, float *fft_input_j, float* Gphat_output){

	static float fft_output_i[FFT_LEN+2];
	static float fft_output_j[FFT_LEN+2];
	static float fft_multi_i_j[FFT_LEN+2];

	//FFT Signals I & J
	arm_rfft_fast_f32(&fft_instance_i[0], &fft_input_i[0], &fft_output_i[0], FALSE);
	arm_rfft_fast_f32(&fft_instance_j[0], &fft_input_j[0], &fft_output_j[0], FALSE);

	//Take the conjugate of signal J
	arm_cmplx_conj_f32(&fft_output_j[2], &fft_conjugate_j[2], FFT_LEN/2 - 1);

	//Re-assign the values for J
	fft_conjugate_j[FFT_LEN-2] 	= fft_output_j[1];
	fft_conjugate_j[FFT_LEN-1] 	= 0;
	fft_conjugate_j[1] 			= 0;

	//Re-assign the value for I
	fft_output_i[FFT_LEN-2] 	= fft_output_i[1];
	fft_output_i[FFT_LEN-1] 	= 0;
	fft_output_i[1] 			= 0;

	//Multiply the Top
	arm_cmplx_mult_cmplx_f32(&fft_output_i[0], &fft_conjugate_j[0], &fft_multi_i_j[0], (FFT_LEN+2)/2);

	//Find the bottoms magnitude
	arm_cmplx_mag_f32(&fft_multi_i_j[0], &fft_absolute_i_j[0], (FFT_LEN+2)/2);

	//Take the inverse of each one
	for(uint32_t i = 0; i < (FFT_LEN+2)/2; i++){
		fft_absolute_i_j[i] = 1/fft_absolute_i_j[i];
	}

	//Multiply the top with the bottom
	arm_cmplx_mult_real_f32(&fft_multi_i_j[0], &fft_absolute_i_j[0], &Gphat_output[0], (FFT_LEN+2)/2);
}
