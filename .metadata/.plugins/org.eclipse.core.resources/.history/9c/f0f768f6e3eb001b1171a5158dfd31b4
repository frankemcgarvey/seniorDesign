/*
 * dsp.c
 *
 *  Created on: Jul 3, 2021
 *      Author: Chris
 */

#include "dsp.h"


static const float coeff[TAPS+1] = {-0.000000e+00,-2.072720e-06,-2.587595e-06,-1.401908e-06,9.073273e-07,3.228366e-06,4.310124e-06,3.261017e-06,-3.807949e-14,-4.495605e-06,-8.259706e-06,-8.759050e-06,-3.601624e-06,8.627804e-06,2.762687e-05,5.096049e-05,7.414967e-05,9.133387e-05,9.643542e-05,8.461178e-05,5.367586e-05,5.126641e-06,-5.552081e-05,-1.192859e-04,-1.751439e-04,-2.120963e-04,-2.214908e-04,-1.990833e-04,-1.463451e-04,-7.063821e-05,1.588683e-05,9.853756e-05,1.630565e-04,1.987091e-04,2.007822e-04,1.718704e-04,1.215556e-04,6.442758e-05,1.677607e-05,-7.373645e-06,1.822482e-13,3.830999e-05,9.761420e-05,1.600829e-04,2.035522e-04,2.065398e-04,1.537000e-04,4.050000e-05,-1.240405e-04,-3.173712e-04,-5.064766e-04,-6.536071e-04,-7.236763e-04,-6.918670e-04,-5.498201e-04,-3.089579e-04,7.573641e-13,3.315182e-04,6.330680e-04,8.548725e-04,9.596506e-04,9.303160e-04,7.739041e-04,5.207061e-04,2.185665e-04,-7.666257e-05,-3.126357e-04,-4.515943e-04,-4.785867e-04,-4.048990e-04,-2.657213e-04,-1.122922e-04,4.604125e-13,2.510054e-05,-6.159866e-05,-2.553453e-04,-5.203849e-04,-7.954030e-04,-1.005351e-03,-1.077494e-03,-9.584489e-04,-6.285324e-04,-1.100918e-04,5.324578e-04,1.201514e-03,1.782846e-03,2.166889e-03,2.270625e-03,2.055555e-03,1.537818e-03,7.879323e-04,-8.027987e-05,-9.298539e-04,-1.626156e-03,-2.062654e-03,-2.181692e-03,-1.985781e-03,-1.536786e-03,-9.427913e-04,-3.350712e-04,1.602173e-04,4.497074e-04,4.938373e-04,3.163874e-04,-1.598163e-12,-3.319151e-04,-5.435055e-04,-5.192430e-04,-1.940811e-04,4.258549e-04,1.257222e-03,2.150341e-03,2.915767e-03,3.361838e-03,3.335882e-03,2.760518e-03,1.657049e-03,1.502007e-04,-1.547946e-03,-3.172744e-03,-4.454403e-03,-5.169007e-03,-5.182942e-03,-4.481393e-03,-3.174490e-03,-1.479001e-03,3.215685e-04,1.931008e-03,3.097931e-03,3.665038e-03,3.599664e-03,2.998738e-03,2.066405e-03,1.068310e-03,2.716220e-04,-1.166954e-04,1.128819e-12,5.809789e-04,1.451160e-03,2.335052e-03,2.915828e-03,2.908041e-03,2.128872e-03,5.522943e-04,-1.666763e-03,-4.205550e-03,-6.623759e-03,-8.442936e-03,-9.240412e-03,-8.739298e-03,-6.875698e-03,-3.828005e-03,3.101475e-12,4.041483e-03,7.664249e-03,1.028601e-02,1.148495e-02,1.108320e-02,9.185320e-03,6.162147e-03,2.581206e-03,-9.042694e-04,-3.686496e-03,-5.328204e-03,-5.655343e-03,-4.796601e-03,-3.158930e-03,-1.341053e-03,1.382423e-12,3.035236e-04,-7.508572e-04,-3.141521e-03,-6.470571e-03,-1.000980e-02,-1.282418e-02,-1.395397e-02,-1.262320e-02,-8.434311e-03,-1.508225e-03,7.463236e-03,1.727144e-02,2.635100e-02,3.302510e-02,3.579755e-02,3.364142e-02,2.623107e-02,1.407109e-02,-1.508756e-03,-1.850122e-02,-3.449593e-02,-4.704081e-02,-5.403375e-02,-5.407985e-02,-4.675213e-02,-3.270786e-02,-1.363530e-02,7.966404e-03,2.914347e-02,4.692538e-02,5.877523e-02,6.297988e-02,5.877523e-02,4.692538e-02,2.914347e-02,7.966404e-03,-1.363530e-02,-3.270786e-02,-4.675213e-02,-5.407985e-02,-5.403375e-02,-4.704081e-02,-3.449593e-02,-1.850122e-02,-1.508756e-03,1.407109e-02,2.623107e-02,3.364142e-02,3.579755e-02,3.302510e-02,2.635100e-02,1.727144e-02,7.463236e-03,-1.508225e-03,-8.434311e-03,-1.262320e-02,-1.395397e-02,-1.282418e-02,-1.000980e-02,-6.470571e-03,-3.141521e-03,-7.508572e-04,3.035236e-04,1.382423e-12,-1.341053e-03,-3.158930e-03,-4.796601e-03,-5.655343e-03,-5.328204e-03,-3.686496e-03,-9.042694e-04,2.581206e-03,6.162147e-03,9.185320e-03,1.108320e-02,1.148495e-02,1.028601e-02,7.664249e-03,4.041483e-03,3.101475e-12,-3.828005e-03,-6.875698e-03,-8.739298e-03,-9.240412e-03,-8.442936e-03,-6.623759e-03,-4.205550e-03,-1.666763e-03,5.522943e-04,2.128872e-03,2.908041e-03,2.915828e-03,2.335052e-03,1.451160e-03,5.809789e-04,1.128819e-12,-1.166954e-04,2.716220e-04,1.068310e-03,2.066405e-03,2.998738e-03,3.599664e-03,3.665038e-03,3.097931e-03,1.931008e-03,3.215685e-04,-1.479001e-03,-3.174490e-03,-4.481393e-03,-5.182942e-03,-5.169007e-03,-4.454403e-03,-3.172744e-03,-1.547946e-03,1.502007e-04,1.657049e-03,2.760518e-03,3.335882e-03,3.361838e-03,2.915767e-03,2.150341e-03,1.257222e-03,4.258549e-04,-1.940811e-04,-5.192430e-04,-5.435055e-04,-3.319151e-04,-1.598163e-12,3.163874e-04,4.938373e-04,4.497074e-04,1.602173e-04,-3.350712e-04,-9.427913e-04,-1.536786e-03,-1.985781e-03,-2.181692e-03,-2.062654e-03,-1.626156e-03,-9.298539e-04,-8.027987e-05,7.879323e-04,1.537818e-03,2.055555e-03,2.270625e-03,2.166889e-03,1.782846e-03,1.201514e-03,5.324578e-04,-1.100918e-04,-6.285324e-04,-9.584489e-04,-1.077494e-03,-1.005351e-03,-7.954030e-04,-5.203849e-04,-2.553453e-04,-6.159866e-05,2.510054e-05,4.604125e-13,-1.122922e-04,-2.657213e-04,-4.048990e-04,-4.785867e-04,-4.515943e-04,-3.126357e-04,-7.666257e-05,2.185665e-04,5.207061e-04,7.739041e-04,9.303160e-04,9.596506e-04,8.548725e-04,6.330680e-04,3.315182e-04,7.573641e-13,-3.089579e-04,-5.498201e-04,-6.918670e-04,-7.236763e-04,-6.536071e-04,-5.064766e-04,-3.173712e-04,-1.240405e-04,4.050000e-05,1.537000e-04,2.065398e-04,2.035522e-04,1.600829e-04,9.761420e-05,3.830999e-05,1.822482e-13,-7.373645e-06,1.677607e-05,6.442758e-05,1.215556e-04,1.718704e-04,2.007822e-04,1.987091e-04,1.630565e-04,9.853756e-05,1.588683e-05,-7.063821e-05,-1.463451e-04,-1.990833e-04,-2.214908e-04,-2.120963e-04,-1.751439e-04,-1.192859e-04,-5.552081e-05,5.126641e-06,5.367586e-05,8.461178e-05,9.643542e-05,9.133387e-05,7.414967e-05,5.096049e-05,2.762687e-05,8.627804e-06,-3.601624e-06,-8.759050e-06,-8.259706e-06,-4.495605e-06,-3.807949e-14,3.261017e-06,4.310124e-06,3.228366e-06,9.073273e-07,-1.401908e-06,-2.587595e-06,-2.072720e-06,-0.000000e+00};

void matrix_init(uint32_t numRow, uint32_t numCol, uint16_t* matrix, arm_matrix_instance_q15* instance, uint32_t offset){

	for(uint32_t i = 0; i < 2; i++){
		arm_mat_init_q15(&instance[i], numRow, numCol, (q15_t*)&matrix[offset*i]);
	}
}

void FIR_Filter_Init(dsp_buffer_t* buff, uint32_t channelNumber){
	for(uint32_t i = 0; i < channelNumber; i++){
		arm_fir_init_f32(buff[i].lpFilter_inst, TAPS, &coeff[0], &buff[i].state[0], BLOCK_SIZE);
	}
}

void FIR_Filter(dsp_buffer_t* dsp, float (*input)[BLOCK_SIZE], float (*output)[BLOCK_SIZE] , uint32_t channelNumber){
	for(uint32_t i = 0; i < channelNumber; i++){
		arm_fir_f32(dsp[i].lpFilter_inst, &input[i][0], &output[i][0], BLOCK_SIZE);
	}
}

void FFT_Init(arm_rfft_fast_instance_f32* fft_instance, uint32_t channelNumber){
	for(uint32_t i = 0; i < channelNumber; i++){
		arm_rfft_fast_init_f32(&fft_instance[i], FFT_LEN);
	}
}

void Q15_To_Float(q15_t (*q15)[Q15_FLOAT_LEN], float (*flt)[Q15_FLOAT_LEN], uint32_t channelNumber){
	for(uint32_t i = 0; i < channelNumber; i++){
		arm_q15_to_float(&q15[i][0], &flt[i][0], Q15_FLOAT_LEN);
	}
}

void Float_To_Q15(float (*flt)[Q15_FLOAT_LEN], q15_t (*q15)[Q15_FLOAT_LEN], uint32_t channelNumber){
	for(uint32_t i = 0; i < channelNumber; i++){
		arm_float_to_q15(&flt[i][0], &q15[i][0], Q15_FLOAT_LEN);
	}
}
#define FALSE 				0
#define fft_conjugate_j 	fft_output_j
#define fft_absolute_i_j	fft_output_i

void GCC_PHAT(arm_rfft_fast_instance_f32* fft_instance_i, float *fft_input_i, arm_rfft_fast_instance_f32* fft_instance_j, float *fft_input_j, float* Gphat_output){

	static float fft_output_i[FFT_LEN+2];
	static float fft_output_j[FFT_LEN+2];
	static float fft_multi_i_j[FFT_LEN+2];

	//FFT Signals I & J
	arm_rfft_fast_f32(&fft_instance_i[0], &fft_input_i[0], &fft_output_i[0], FALSE);
	arm_rfft_fast_f32(&fft_instance_j[0], &fft_input_j[0], &fft_output_j[0], FALSE);

	//Take the conjugate of signal J
	arm_cmplx_conj_f32(&fft_output_j[2], &fft_conjugate_j[2], FFT_LEN/2 - 1);

	//Re-assign the values for J
	fft_conjugate_j[FFT_LEN-2] 	= fft_output_j[1];
	fft_conjugate_j[FFT_LEN-1] 	= 0;
	fft_conjugate_j[1] 			= 0;

	//Re-assign the value for I
	fft_output_i[FFT_LEN-2] 	= fft_output_i[1];
	fft_output_i[FFT_LEN-1] 	= 0;
	fft_output_i[1] 			= 0;

	//Multiply the Top
	arm_cmplx_mult_cmplx_f32(&fft_output_i[0], &fft_conjugate_j[0], &fft_multi_i_j[0], (FFT_LEN+2)/2);

	//Find the bottoms magnitude
	arm_cmplx_mag_f32(&fft_multi_i_j[0], &fft_absolute_i_j[0], (FFT_LEN+2)/2);

	//Take the inverse of each one
	for(uint32_t i = 0; i < (FFT_LEN+2)/2; i++){
		fft_absolute_i_j[i] = 1/fft_absolute_i_j[i];
	}

	//Multiply the top with the bottom
	arm_cmplx_mult_real_f32(&fft_multi_i_j[0], &fft_absolute_i_j[0], &Gphat_output[0], (FFT_LEN+2)/2);
}
