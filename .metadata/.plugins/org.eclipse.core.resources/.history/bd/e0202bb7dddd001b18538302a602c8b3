/*
 * dsp.c
 *
 *  Created on: Jul 3, 2021
 *      Author: Chris
 */

#include "dsp.h"

static const float coeff[TAPS+1] = {,6.261524e-03,1.728745e-02,9.170416e-03,-7.717965e-03,-1.351634e-04,4.847664e-03,-4.607377e-03,1.358480e-03,2.097501e-03,-3.753606e-03,3.032960e-03,-6.530610e-04,-1.967203e-03,3.428248e-03,-2.989304e-03,8.898684e-04,1.781307e-03,-3.589744e-03,3.496515e-03,-1.440542e-03,-1.586752e-03,3.965085e-03,-4.305601e-03,2.246322e-03,1.279169e-03,-4.416272e-03,5.360506e-03,-3.351436e-03,-7.666390e-04,4.872725e-03,-6.633241e-03,4.811752e-03,-6.530983e-05,-5.231947e-03,8.136714e-03,-6.735948e-03,1.347351e-03,5.423262e-03,-9.886107e-03,9.241889e-03,-3.261212e-03,-5.306103e-03,1.191732e-02,-1.257407e-02,6.129185e-03,4.705410e-03,-1.436637e-02,1.717971e-02,-1.052978e-02,-3.282733e-03,1.753131e-02,-2.413896e-02,1.783833e-02,2.737657e-04,-2.235476e-02,3.650539e-02,-3.239740e-02,6.895633e-03,3.256319e-02,-6.858730e-02,7.827869e-02,-3.714189e-02,-9.231236e-02,5.926972e-01,5.926972e-01,-9.231236e-02,-3.714189e-02,7.827869e-02,-6.858730e-02,3.256319e-02,6.895633e-03,-3.239740e-02,3.650539e-02,-2.235476e-02,2.737657e-04,1.783833e-02,-2.413896e-02,1.753131e-02,-3.282733e-03,-1.052978e-02,1.717971e-02,-1.436637e-02,4.705410e-03,6.129185e-03,-1.257407e-02,1.191732e-02,-5.306103e-03,-3.261212e-03,9.241889e-03,-9.886107e-03,5.423262e-03,1.347351e-03,-6.735948e-03,8.136714e-03,-5.231947e-03,-6.530983e-05,4.811752e-03,-6.633241e-03,4.872725e-03,-7.666390e-04,-3.351436e-03,5.360506e-03,-4.416272e-03,1.279169e-03,2.246322e-03,-4.305601e-03,3.965085e-03,-1.586752e-03,-1.440542e-03,3.496515e-03,-3.589744e-03,1.781307e-03,8.898684e-04,-2.989304e-03,3.428248e-03,-1.967203e-03,-6.530610e-04,3.032960e-03,-3.753606e-03,2.097501e-03,1.358480e-03,-4.607377e-03,4.847664e-03,-1.351634e-04,-7.717965e-03,9.170416e-03,1.728745e-02,6.261524e-03};

void matrix_init(uint32_t numRow, uint32_t numCol, uint16_t* matrix, arm_matrix_instance_q15* instance, uint32_t offset){

	for(uint32_t i = 0; i < 2; i++){
		arm_mat_init_q15(&instance[i], numRow, numCol, (q15_t*)&matrix[offset*i]);
	}
}

void FIR_Filter_Init(dsp_buffer_t* buff, uint32_t channelNumber){
	for(uint32_t i = 0; i < channelNumber; i++){
		arm_fir_init_f32(buff[i].lpFilter_inst, TAPS, &coeff[0], buff[i].state, BLOCK_SIZE);
	}
}

void FIR_Filter(dsp_buffer_t* dsp, uint16_t (*input)[16], uint16_t (*output)[16] , uint32_t channelNumber){

	float32_t floatFilter_input[4][16];
	float32_t floatFilter_output[4][16];

	arm_q15_to_float((const q15_t*)&input[0][0], (float32_t*)&floatFilter_input[0][0], channelNumber*16);

	for(uint32_t i = 0; i < channelNumber; i++){
		arm_fir_f32(dsp[i].lpFilter_inst, &floatFilter_input[i][0], &floatFilter_output[i][0], BLOCK_SIZE);
	}

	arm_float_to_q15(&floatFilter_output[0][0], (q15_t*)&output[0][0], channelNumber*16);

}
