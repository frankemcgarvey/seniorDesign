/*
 * dsp.c
 *
 *  Created on: Jul 3, 2021
 *      Author: Chris
 */

#include "dsp.h"


static const float coeff[TAPS+1] = {-0.000000e+00,-1.214196e-06,-2.800958e-06,-4.130710e-06,-4.652889e-06,-4.076435e-06,-2.478619e-06,-3.044001e-07,1.752551e-06,2.962271e-06,2.809861e-06,1.214232e-06,-1.356078e-06,-3.919384e-06,-5.182221e-06,-3.873718e-06,8.598477e-07,9.099623e-06,1.994055e-05,3.149929e-05,4.117708e-05,4.615076e-05,4.400426e-05,3.336708e-05,1.440732e-05,-1.095614e-05,-3.920732e-05,-6.576110e-05,-8.578763e-05,-9.517871e-05,-9.145439e-05,-7.440212e-05,-4.628363e-05,-1.152809e-05,2.406002e-05,5.443807e-05,7.457843e-05,8.156523e-05,7.527823e-05,5.848258e-05,3.626604e-05,1.491007e-05,4.172139e-07,-2.987825e-06,5.963530e-06,2.502547e-05,4.867940e-05,6.918573e-05,7.827146e-05,6.911967e-05,3.823142e-05,-1.327656e-05,-7.928364e-05,-1.493573e-04,-2.104698e-04,-2.494537e-04,-2.557269e-04,-2.237225e-04,-1.544821e-04,-5.601447e-05,5.774376e-05,1.692379e-04,2.604710e-04,3.164331e-04,3.280854e-04,2.942556e-04,2.220017e-04,1.253072e-04,2.231615e-05,-6.835737e-05,-1.314920e-04,-1.584699e-04,-1.491184e-04,-1.117298e-04,-6.118801e-05,-1.553862e-05,8.299809e-06,-1.236145e-06,-4.714083e-05,-1.224194e-04,-2.108882e-04,-2.901563e-04,-3.362678e-04,-3.290882e-04,-2.573027e-04,-1.219065e-04,6.266866e-05,2.701981e-04,4.669084e-04,6.175954e-04,6.924516e-04,6.732239e-04,5.573995e-04,3.594604e-04,1.088186e-04,-1.552827e-04,-3.909756e-04,-5.616769e-04,-6.431046e-04,-6.279330e-04,-5.270647e-04,-3.671805e-04,-1.849961e-04,-1.937065e-05,9.710050e-05,1.452142e-04,1.234336e-04,4.829566e-05,-4.925789e-05,-1.309597e-04,-1.602704e-04,-1.114837e-04,2.313593e-05,2.298626e-04,4.746358e-04,7.088171e-04,8.785966e-04,9.362301e-04,8.508115e-04,6.162624e-04,2.547030e-04,-1.857535e-04,-6.386134e-04,-1.030717e-03,-1.295846e-03,-1.387529e-03,-1.288414e-03,-1.014202e-03,-6.111690e-04,-1.476262e-04,2.991055e-04,6.576260e-04,8.762746e-04,9.329637e-04,8.389277e-04,6.355096e-04,3.845604e-04,1.543925e-04,4.221693e-06,-2.956311e-05,5.773500e-05,2.372033e-04,4.519995e-04,6.296579e-04,6.985842e-04,6.052953e-04,3.286631e-04,-1.120954e-04,-6.577445e-04,-1.218047e-03,-1.688017e-03,-1.968369e-03,-1.986079e-03,-1.710808e-03,-1.163603e-03,-4.157383e-04,4.224462e-04,1.220842e-03,1.853366e-03,2.221594e-03,2.273462e-03,2.013152e-03,1.499992e-03,8.364039e-04,1.471939e-04,-4.456637e-04,-8.475978e-04,-1.010232e-03,-9.403754e-04,-6.971800e-04,-3.778815e-04,-9.499933e-05,5.024560e-05,-7.411780e-06,-2.800095e-04,-7.205197e-04,-1.230166e-03,-1.677851e-03,-1.928009e-03,-1.871241e-03,-1.451259e-03,-6.821809e-04,3.480021e-04,1.489219e-03,2.554687e-03,3.355241e-03,3.735987e-03,3.607894e-03,2.967700e-03,1.901709e-03,5.721571e-04,-8.115831e-04,-2.031587e-03,-2.902190e-03,-3.304848e-03,-3.209891e-03,-2.680552e-03,-1.858228e-03,-9.317867e-04,-9.711980e-05,4.846965e-04,7.218002e-04,6.110482e-04,2.381547e-04,-2.419973e-04,-6.411072e-04,-7.819506e-04,-5.421820e-04,1.121770e-04,1.111332e-03,2.288599e-03,3.409209e-03,4.215950e-03,4.482828e-03,4.065779e-03,2.939646e-03,1.213001e-03,-8.833673e-04,-3.033190e-03,-4.890346e-03,-6.142909e-03,-6.573037e-03,-6.100523e-03,-4.800745e-03,-2.892710e-03,-6.988019e-04,1.416287e-03,3.115538e-03,4.154449e-03,4.427426e-03,3.985843e-03,3.023602e-03,1.832625e-03,7.371298e-04,2.019841e-05,-1.417751e-04,2.775989e-04,1.143773e-03,2.186314e-03,3.055996e-03,3.402996e-03,2.960255e-03,1.614211e-03,-5.530661e-04,-3.261088e-03,-6.070522e-03,-8.459432e-03,-9.922555e-03,-1.007446e-02,-8.735664e-03,-5.983234e-03,-2.153583e-03,2.205483e-03,6.426441e-03,9.841166e-03,1.190497e-02,1.230105e-02,1.100386e-02,8.287131e-03,4.673284e-03,8.322296e-04,-2.551389e-03,-4.916532e-03,-5.941392e-03,-5.611536e-03,-4.224467e-03,-2.326922e-03,-5.950049e-04,3.203833e-04,-4.816039e-05,-1.856045e-03,-4.877463e-03,-8.514582e-03,-1.188948e-02,-1.400651e-02,-1.395767e-02,-1.113259e-02,-5.391214e-03,2.838858e-03,1.256653e-02,2.235132e-02,3.051542e-02,3.542252e-02,3.577694e-02,3.089009e-02,2.086312e-02,6.647092e-03,-1.003907e-02,-2.692783e-02,-4.153034e-02,-5.152206e-02,-5.512432e-02,-5.141748e-02,-4.053012e-02,-2.366780e-02,-2.970832e-03,1.878143e-02,3.857561e-02,5.361577e-02,6.174939e-02,6.174939e-02,5.361577e-02,3.857561e-02,1.878143e-02,-2.970832e-03,-2.366780e-02,-4.053012e-02,-5.141748e-02,-5.512432e-02,-5.152206e-02,-4.153034e-02,-2.692783e-02,-1.003907e-02,6.647092e-03,2.086312e-02,3.089009e-02,3.577694e-02,3.542252e-02,3.051542e-02,2.235132e-02,1.256653e-02,2.838858e-03,-5.391214e-03,-1.113259e-02,-1.395767e-02,-1.400651e-02,-1.188948e-02,-8.514582e-03,-4.877463e-03,-1.856045e-03,-4.816039e-05,3.203833e-04,-5.950049e-04,-2.326922e-03,-4.224467e-03,-5.611536e-03,-5.941392e-03,-4.916532e-03,-2.551389e-03,8.322296e-04,4.673284e-03,8.287131e-03,1.100386e-02,1.230105e-02,1.190497e-02,9.841166e-03,6.426441e-03,2.205483e-03,-2.153583e-03,-5.983234e-03,-8.735664e-03,-1.007446e-02,-9.922555e-03,-8.459432e-03,-6.070522e-03,-3.261088e-03,-5.530661e-04,1.614211e-03,2.960255e-03,3.402996e-03,3.055996e-03,2.186314e-03,1.143773e-03,2.775989e-04,-1.417751e-04,2.019841e-05,7.371298e-04,1.832625e-03,3.023602e-03,3.985843e-03,4.427426e-03,4.154449e-03,3.115538e-03,1.416287e-03,-6.988019e-04,-2.892710e-03,-4.800745e-03,-6.100523e-03,-6.573037e-03,-6.142909e-03,-4.890346e-03,-3.033190e-03,-8.833673e-04,1.213001e-03,2.939646e-03,4.065779e-03,4.482828e-03,4.215950e-03,3.409209e-03,2.288599e-03,1.111332e-03,1.121770e-04,-5.421820e-04,-7.819506e-04,-6.411072e-04,-2.419973e-04,2.381547e-04,6.110482e-04,7.218002e-04,4.846965e-04,-9.711980e-05,-9.317867e-04,-1.858228e-03,-2.680552e-03,-3.209891e-03,-3.304848e-03,-2.902190e-03,-2.031587e-03,-8.115831e-04,5.721571e-04,1.901709e-03,2.967700e-03,3.607894e-03,3.735987e-03,3.355241e-03,2.554687e-03,1.489219e-03,3.480021e-04,-6.821809e-04,-1.451259e-03,-1.871241e-03,-1.928009e-03,-1.677851e-03,-1.230166e-03,-7.205197e-04,-2.800095e-04,-7.411780e-06,5.024560e-05,-9.499933e-05,-3.778815e-04,-6.971800e-04,-9.403754e-04,-1.010232e-03,-8.475978e-04,-4.456637e-04,1.471939e-04,8.364039e-04,1.499992e-03,2.013152e-03,2.273462e-03,2.221594e-03,1.853366e-03,1.220842e-03,4.224462e-04,-4.157383e-04,-1.163603e-03,-1.710808e-03,-1.986079e-03,-1.968369e-03,-1.688017e-03,-1.218047e-03,-6.577445e-04,-1.120954e-04,3.286631e-04,6.052953e-04,6.985842e-04,6.296579e-04,4.519995e-04,2.372033e-04,5.773500e-05,-2.956311e-05,4.221693e-06,1.543925e-04,3.845604e-04,6.355096e-04,8.389277e-04,9.329637e-04,8.762746e-04,6.576260e-04,2.991055e-04,-1.476262e-04,-6.111690e-04,-1.014202e-03,-1.288414e-03,-1.387529e-03,-1.295846e-03,-1.030717e-03,-6.386134e-04,-1.857535e-04,2.547030e-04,6.162624e-04,8.508115e-04,9.362301e-04,8.785966e-04,7.088171e-04,4.746358e-04,2.298626e-04,2.313593e-05,-1.114837e-04,-1.602704e-04,-1.309597e-04,-4.925789e-05,4.829566e-05,1.234336e-04,1.452142e-04,9.710050e-05,-1.937065e-05,-1.849961e-04,-3.671805e-04,-5.270647e-04,-6.279330e-04,-6.431046e-04,-5.616769e-04,-3.909756e-04,-1.552827e-04,1.088186e-04,3.594604e-04,5.573995e-04,6.732239e-04,6.924516e-04,6.175954e-04,4.669084e-04,2.701981e-04,6.266866e-05,-1.219065e-04,-2.573027e-04,-3.290882e-04,-3.362678e-04,-2.901563e-04,-2.108882e-04,-1.224194e-04,-4.714083e-05,-1.236145e-06,8.299809e-06,-1.553862e-05,-6.118801e-05,-1.117298e-04,-1.491184e-04,-1.584699e-04,-1.314920e-04,-6.835737e-05,2.231615e-05,1.253072e-04,2.220017e-04,2.942556e-04,3.280854e-04,3.164331e-04,2.604710e-04,1.692379e-04,5.774376e-05,-5.601447e-05,-1.544821e-04,-2.237225e-04,-2.557269e-04,-2.494537e-04,-2.104698e-04,-1.493573e-04,-7.928364e-05,-1.327656e-05,3.823142e-05,6.911967e-05,7.827146e-05,6.918573e-05,4.867940e-05,2.502547e-05,5.963530e-06,-2.987825e-06,4.172139e-07,1.491007e-05,3.626604e-05,5.848258e-05,7.527823e-05,8.156523e-05,7.457843e-05,5.443807e-05,2.406002e-05,-1.152809e-05,-4.628363e-05,-7.440212e-05,-9.145439e-05,-9.517871e-05,-8.578763e-05,-6.576110e-05,-3.920732e-05,-1.095614e-05,1.440732e-05,3.336708e-05,4.400426e-05,4.615076e-05,4.117708e-05,3.149929e-05,1.994055e-05,9.099623e-06,8.598477e-07,-3.873718e-06,-5.182221e-06,-3.919384e-06,-1.356078e-06,1.214232e-06,2.809861e-06,2.962271e-06,1.752551e-06,-3.044001e-07,-2.478619e-06,-4.076435e-06,-4.652889e-06,-4.130710e-06,-2.800958e-06,-1.214196e-06,-0.000000e+00};

void matrix_init(uint32_t numRow, uint32_t numCol, uint16_t* matrix, arm_matrix_instance_q15* instance, uint32_t offset){

	for(uint32_t i = 0; i < 2; i++){
		arm_mat_init_q15(&instance[i], numRow, numCol, (q15_t*)&matrix[offset*i]);
	}
}

void FIR_Filter_F32_Init(dsp_buffer_t* buff, uint32_t channelNumber){
	for(uint32_t i = 0; i < channelNumber; i++){
		arm_fir_init_f32(buff[i].lpFilter_inst, TAPS, &coeff[0], &buff[i].state[0], BLOCK_SIZE);
	}
}

void FIR_Filter_F32(dsp_buffer_t* dsp, float (*input)[BLOCK_SIZE], float (*output)[BLOCK_SIZE] , uint32_t channelNumber){
	for(uint32_t i = 0; i < channelNumber; i++){
		arm_fir_f32(dsp[i].lpFilter_inst, &input[i][0], &output[i][0], BLOCK_SIZE);
	}
}

void FIR_Filter_Q15(dsp_buffer_t* dsp, float (*input)[BLOCK_SIZE], float (*output)[BLOCK_SIZE] , uint32_t channelNumber){
	for(uint32_t i = 0; i < channelNumber; i++){
		arm_fir_f32(dsp[i].lpFilter_inst, &input[i][0], &output[i][0], BLOCK_SIZE);
	}
}

void FIR_Filter_Q15_Init(dsp_buffer_t* buff, uint32_t channelNumber){
	for(uint32_t i = 0; i < channelNumber; i++){
		arm_fir_init_q15(buff[i].lpFilter_inst, TAPS, &coeff[0], &buff[i].state[0], BLOCK_SIZE);
	}
}

void FFT_Init(arm_rfft_fast_instance_f32* fft_instance, uint32_t channelNumber){
	for(uint32_t i = 0; i < channelNumber; i++){
		arm_rfft_fast_init_f32(&fft_instance[i], FFT_LEN);
	}
}

void Q15_To_Float(q15_t (*q15)[Q15_FLOAT_LEN], float (*flt)[Q15_FLOAT_LEN], uint32_t channelNumber){
	for(uint32_t i = 0; i < channelNumber; i++){
		arm_q15_to_float(&q15[i][0], &flt[i][0], Q15_FLOAT_LEN);
	}
}

void Float_To_Q15(float (*flt)[Q15_FLOAT_LEN], q15_t (*q15)[Q15_FLOAT_LEN], uint32_t channelNumber){
	for(uint32_t i = 0; i < channelNumber; i++){
		arm_float_to_q15(&flt[i][0], &q15[i][0], Q15_FLOAT_LEN);
	}
}
#define FALSE 				0
#define fft_conjugate_j 	fft_output_j
#define fft_absolute_i_j	fft_output_i

void GCC_PHAT(arm_rfft_fast_instance_f32* fft_instance_i, float *fft_input_i, arm_rfft_fast_instance_f32* fft_instance_j, float *fft_input_j, float* Gphat_output){

	static float fft_output_i[FFT_LEN+2];
	static float fft_output_j[FFT_LEN+2];
	static float fft_multi_i_j[FFT_LEN+2];

	//FFT Signals I & J
	arm_rfft_fast_f32(&fft_instance_i[0], &fft_input_i[0], &fft_output_i[0], FALSE);
	arm_rfft_fast_f32(&fft_instance_j[0], &fft_input_j[0], &fft_output_j[0], FALSE);

	//Take the conjugate of signal J
	arm_cmplx_conj_f32(&fft_output_j[2], &fft_conjugate_j[2], FFT_LEN/2 - 1);

	//Re-assign the values for J
	fft_conjugate_j[FFT_LEN-2] 	= fft_output_j[1];
	fft_conjugate_j[FFT_LEN-1] 	= 0;
	fft_conjugate_j[1] 			= 0;

	//Re-assign the value for I
	fft_output_i[FFT_LEN-2] 	= fft_output_i[1];
	fft_output_i[FFT_LEN-1] 	= 0;
	fft_output_i[1] 			= 0;

	//Multiply the Top
	arm_cmplx_mult_cmplx_f32(&fft_output_i[0], &fft_conjugate_j[0], &fft_multi_i_j[0], (FFT_LEN+2)/2);

	//Find the bottoms magnitude
	arm_cmplx_mag_f32(&fft_multi_i_j[0], &fft_absolute_i_j[0], (FFT_LEN+2)/2);

	//Take the inverse of each one
	for(uint32_t i = 0; i < (FFT_LEN+2)/2; i++){
		fft_absolute_i_j[i] = 1/fft_absolute_i_j[i];
	}

	//Multiply the top with the bottom
	arm_cmplx_mult_real_f32(&fft_multi_i_j[0], &fft_absolute_i_j[0], &Gphat_output[0], (FFT_LEN+2)/2);
}
