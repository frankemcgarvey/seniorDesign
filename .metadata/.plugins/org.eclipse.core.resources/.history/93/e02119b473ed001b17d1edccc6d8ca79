/*
 * dsp.c
 *
 *  Created on: Jul 3, 2021
 *      Author: Chris
 */

#include "dsp.h"


static const f32_t coeff[TAPS] = {0.0000000000, 0.0000045568, 0.0000079429, 0.0000089652, 0.0000065666, -0.0000000000, -0.0000110132, -0.0000261631, -0.0000444868, -0.0000643738, -0.0000836492, -0.0000997351, -0.0001098801, -0.0001114420, -0.0001021996, -0.0000806626, -0.0000463496, 0.0000000000, 0.0000563093, 0.0001191642, 0.0001839462, 0.0002450994, 0.0002965215, 0.0003320572, 0.0003460582, 0.0003339661, 0.0002928667, 0.0002219628, 0.0001229144, -0.0000000000, -0.0001399317, -0.0002877392, -0.0004324939, -0.0005621923, -0.0006646374, -0.0007284275, -0.0007439835, -0.0007045274, -0.0006069314, -0.0004523504, -0.0002465679, 0.0000000000, 0.0002726730, 0.0005532530, 0.0008211197, 0.0010546196, 0.0012326622, 0.0013364153, 0.0013509716, 0.0012668561, 0.0010812391, 0.0007987390, 0.0004317169, -0.0000000000, -0.0004699905, -0.0009466868, -0.0013953320, -0.0017803366, -0.0020678858, -0.0022286198, -0.0022401861, -0.0020894676, -0.0017742875, -0.0013044312, -0.0007018537, 0.0000000000, 0.0007577761, 0.0015206431, 0.0022334531, 0.0028404533, 0.0032893156, 0.0035352083, 0.0035446188, 0.0032986326, 0.0027953878, 0.0020514769, 0.0011021182, -0.0000000000, -0.0011872086, -0.0023805967, -0.0034948178, -0.0044436962, -0.0051462939, -0.0055330386, -0.0055514937, -0.0051713386, -0.0043881624, -0.0032257324, -0.0017364717, 0.0000000000, 0.0018802977, 0.0037825713, 0.0055734445, 0.0071162395, 0.0082800230, 0.0089489408, 0.0090312427, 0.0084673977, 0.0072367326, 0.0053620576, 0.0029118937, -0.0000000000, -0.0032179151, -0.0065502571, -0.0097781662, -0.0126663055, -0.0149752870, -0.0164750684, -0.0169585794, -0.0162547864, -0.0142404065, -0.0108495485, -0.0060806153, 0.0000000000, 0.0072577707, 0.0154935708, 0.0244507976, 0.0338258147, 0.0432811938, 0.0524611250, 0.0610082038, 0.0685806572, 0.0748691484, 0.0796121880, 0.0826093331, 0.0837314054, 0.0826093331, 0.0796121880, 0.0748691484, 0.0685806572, 0.0610082038, 0.0524611250, 0.0432811938, 0.0338258147, 0.0244507976, 0.0154935708, 0.0072577707, 0.0000000000, -0.0060806153, -0.0108495485, -0.0142404065, -0.0162547864, -0.0169585794, -0.0164750684, -0.0149752870, -0.0126663055, -0.0097781662, -0.0065502571, -0.0032179151, -0.0000000000, 0.0029118937, 0.0053620576, 0.0072367326, 0.0084673977, 0.0090312427, 0.0089489408, 0.0082800230, 0.0071162395, 0.0055734445, 0.0037825713, 0.0018802977, 0.0000000000, -0.0017364717, -0.0032257324, -0.0043881624, -0.0051713386, -0.0055514937, -0.0055330386, -0.0051462939, -0.0044436962, -0.0034948178, -0.0023805967, -0.0011872086, -0.0000000000, 0.0011021182, 0.0020514769, 0.0027953878, 0.0032986326, 0.0035446188, 0.0035352083, 0.0032893156, 0.0028404533, 0.0022334531, 0.0015206431, 0.0007577761, 0.0000000000, -0.0007018537, -0.0013044312, -0.0017742875, -0.0020894676, -0.0022401861, -0.0022286198, -0.0020678858, -0.0017803366, -0.0013953320, -0.0009466868, -0.0004699905, -0.0000000000, 0.0004317169, 0.0007987390, 0.0010812391, 0.0012668561, 0.0013509716, 0.0013364153, 0.0012326622, 0.0010546196, 0.0008211197, 0.0005532530, 0.0002726730, 0.0000000000, -0.0002465679, -0.0004523504, -0.0006069314, -0.0007045274, -0.0007439835, -0.0007284275, -0.0006646374, -0.0005621923, -0.0004324939, -0.0002877392, -0.0001399317, -0.0000000000, 0.0001229144, 0.0002219628, 0.0002928667, 0.0003339661, 0.0003460582, 0.0003320572, 0.0002965215, 0.0002450994, 0.0001839462, 0.0001191642, 0.0000563093, 0.0000000000, -0.0000463496, -0.0000806626, -0.0001021996, -0.0001114420, -0.0001098801, -0.0000997351, -0.0000836492, -0.0000643738, -0.0000444868, -0.0000261631, -0.0000110132, -0.0000000000, 0.0000065666, 0.0000089652, 0.0000079429, 0.0000045568, 0.0000000000};

void matrix_init(uint32_t numRow, uint32_t numCol, uint16_t* matrix, arm_matrix_instance_q15* instance, uint32_t offset){

	for(uint32_t i = 0; i < 2; i++){
		arm_mat_init_q15(&instance[i], numRow, numCol, (q15_t*)&matrix[offset*i]);
	}
}

void FIR_Filter_Init(dsp_buffer_t* buff, uint32_t channelNumber){
	for(uint32_t i = 0; i < channelNumber; i++){
		arm_fir_init_f32(&buff[i].Filter_inst[0], TAPS, &coeff[0], &buff[i].state[0], BLOCK_SIZE);
	}
}

void FIR_Filter(dsp_buffer_t* dsp, float (*input)[BLOCK_SIZE], float (*output)[BLOCK_SIZE] , uint32_t channelNumber){
	for(uint32_t i = 0; i < channelNumber; i++){
		arm_fir_f32(&dsp[i].Filter_inst[0], &input[i][0], &output[i][0], BLOCK_SIZE);
	}
}

void FFT_Init(arm_rfft_fast_instance_f32* fft_instance, uint32_t channelNumber){
	for(uint32_t i = 0; i < channelNumber; i++){
		arm_rfft_fast_init_f32(&fft_instance[i], FFT_LEN);
	}
}

void Q15_To_Float(q15_t (*q15)[Q15_FLOAT_LEN], float (*flt)[Q15_FLOAT_LEN], uint32_t channelNumber){
	for(uint32_t i = 0; i < channelNumber; i++){
		arm_q15_to_float(&q15[i][0], &flt[i][0], Q15_FLOAT_LEN);
	}
}

void Float_To_Q15(float (*flt)[Q15_FLOAT_LEN], q15_t (*q15)[Q15_FLOAT_LEN], uint32_t channelNumber){
	for(uint32_t i = 0; i < channelNumber; i++){
		arm_float_to_q15(&flt[i][0], &q15[i][0], Q15_FLOAT_LEN);
	}
}
#define FALSE 				0
#define fft_conjugate_j 	fft_output_j
#define fft_absolute_i_j	fft_output_i

void GCC_PHAT(arm_rfft_fast_instance_f32* fft_instance_i, float *fft_input_i, arm_rfft_fast_instance_f32* fft_instance_j, float *fft_input_j, float* Gphat_output){

	static float fft_output_i[FFT_LEN+2];
	static float fft_output_j[FFT_LEN+2];
	static float fft_multi_i_j[FFT_LEN+2];

	//FFT Signals I & J
	arm_rfft_fast_f32(&fft_instance_i[0], &fft_input_i[0], &fft_output_i[0], FALSE);
	arm_rfft_fast_f32(&fft_instance_j[0], &fft_input_j[0], &fft_output_j[0], FALSE);

	//Take the conjugate of signal J
	arm_cmplx_conj_f32(&fft_output_j[2], &fft_conjugate_j[2], FFT_LEN/2 - 1);

	//Re-assign the values for J
	fft_conjugate_j[FFT_LEN-2] 	= fft_output_j[1];
	fft_conjugate_j[FFT_LEN-1] 	= 0;
	fft_conjugate_j[1] 			= 0;

	//Re-assign the value for I
	fft_output_i[FFT_LEN-2] 	= fft_output_i[1];
	fft_output_i[FFT_LEN-1] 	= 0;
	fft_output_i[1] 			= 0;

	//Multiply the Top
	arm_cmplx_mult_cmplx_f32(&fft_output_i[0], &fft_conjugate_j[0], &fft_multi_i_j[0], (FFT_LEN+2)/2);

	//Find the bottoms magnitude
	arm_cmplx_mag_f32(&fft_multi_i_j[0], &fft_absolute_i_j[0], (FFT_LEN+2)/2);

	//Take the inverse of each one
	for(uint32_t i = 0; i < (FFT_LEN+2)/2; i++){
		fft_absolute_i_j[i] = 1/fft_absolute_i_j[i];
	}

	//Multiply the top with the bottom
	arm_cmplx_mult_real_f32(&fft_multi_i_j[0], &fft_absolute_i_j[0], &Gphat_output[0], (FFT_LEN+2)/2);
}
