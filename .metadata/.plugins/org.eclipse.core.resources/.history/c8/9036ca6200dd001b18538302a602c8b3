/*
 * dsp.c
 *
 *  Created on: Jul 3, 2021
 *      Author: Chris
 */

#include "dsp.h"

static const float coeff[TAPS] = {1.587184e-01,-1.364162e-01,1.036913e-01,-6.616060e-02,2.986263e-02,3.039827e-12,-2.004556e-02,2.920702e-02,-2.865497e-02,2.122142e-02,-1.051778e-02,-2.273328e-12,7.780196e-03,-1.157696e-02,1.145660e-02,-8.473356e-03,4.159200e-03,1.325896e-12,-2.955443e-03,4.271844e-03,-4.085864e-03,2.908862e-03,-1.370871e-03,-5.593847e-13,9.014324e-04,-1.269566e-03,1.208294e-03,-8.863792e-04,4.527766e-04,2.666068e-13};


void matrix_init(uint32_t numRow, uint32_t numCol, uint16_t* matrix, arm_matrix_instance_q15* instance, uint32_t offset){

	for(uint32_t i = 0; i < 2; i++){
		arm_mat_init_q15(&instance[i], numRow, numCol, (q15_t*)&matrix[offset*i]);
	}
}

void Low_Pass_Init(dsp_buffer_t* buff, uint32_t channelNumber){
	for(uint32_t i = 0; i < channelNumber; i++){
		arm_fir_init_f32(buff[i].lpFilter_inst, TAPS, &coeff[0], buff[i].state, BLOCK_SIZE);
	}
}

void Low_Pass_Filter(dsp_buffer_t* dsp, uint16_t (*input)[16], uint16_t (*output)[16] , uint32_t channelNumber){

	float32_t floatFilter_input[4][16];
	float32_t floatFilter_output[4][16];

	arm_q15_to_float((const q15_t*)&input[0][0], (float32_t*)&floatFilter_input[0][0], channelNumber*16);

	for(uint32_t i = 0; i < channelNumber; i++){
		arm_fir_f32(dsp[i].lpFilter_inst, &floatFilter_input[i][0], &floatFilter_output[i][0], BLOCK_SIZE);
	}

	arm_float_to_q15(&floatFilter_output[0][0], (q15_t*)&output[0][0], channelNumber*16);

}
