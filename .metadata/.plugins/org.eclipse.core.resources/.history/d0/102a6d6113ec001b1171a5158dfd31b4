/*
 * dsp.c
 *
 *  Created on: Jul 3, 2021
 *      Author: Chris
 */

#include "dsp.h"


static const float coeff[TAPS] = {0.000000, 0.000000, -0.000009, -0.000026, -0.000048, -0.000068, -0.000080, -0.000075, -0.000048, 0.000000, 0.000064, 0.000132, 0.000192, 0.000226, 0.000226, 0.000184, 0.000105, 0.000000, -0.000112, -0.000208, -0.000271, -0.000288, -0.000255, -0.000183, -0.000090, -0.000000, 0.000063, 0.000083, 0.000058, -0.000000, -0.000066, -0.000108, -0.000093, -0.000000, 0.000172, 0.000401, 0.000640, 0.000827, 0.000895, 0.000791, 0.000489, -0.000000, -0.000616, -0.001262, -0.001813, -0.002143, -0.002149, -0.001774, -0.001030, -0.000000, 0.001166, 0.002276, 0.003125, 0.003538, 0.003402, 0.002698, 0.001505, 0.000000, -0.001577, -0.002959, -0.003905, -0.004246, -0.003917, -0.002974, -0.001586, 0.000000, 0.001501, 0.002661, 0.003295, 0.003333, 0.002828, 0.001944, 0.000917, -0.000000, -0.000600, -0.000770, -0.000523, 0.000000, 0.000563, 0.000893, 0.000750, 0.000000, -0.001332, -0.003043, -0.004773, -0.006068, -0.006473, -0.005644, -0.003440, 0.000000, 0.004248, 0.008625, 0.012305, 0.014462, 0.014435, 0.011881, 0.006886, 0.000000, -0.007806, -0.015279, -0.021079, -0.024019, -0.023294, -0.018665, -0.010548, -0.000000, 0.011418, 0.021873, 0.029565, 0.033034, 0.031440, 0.024739, 0.013737, -0.000000, -0.014379, -0.027108, -0.036070, -0.039689, -0.037210, -0.028850, -0.015789, -0.000000, 0.016065, 0.029866, 0.039195, 0.042541, 0.039195, 0.029866, 0.016065, -0.000000, -0.015789, -0.028850, -0.037210, -0.039689, -0.036070, -0.027108, -0.014379, -0.000000, 0.013737, 0.024739, 0.031440, 0.033034, 0.029565, 0.021873, 0.011418, -0.000000, -0.010548, -0.018665, -0.023294, -0.024019, -0.021079, -0.015279, -0.007806, 0.000000, 0.006886, 0.011881, 0.014435, 0.014462, 0.012305, 0.008625, 0.004248, 0.000000, -0.003440, -0.005644, -0.006473, -0.006068, -0.004773, -0.003043, -0.001332, 0.000000, 0.000750, 0.000893, 0.000563, 0.000000, -0.000523, -0.000770, -0.000600, -0.000000, 0.000917, 0.001944, 0.002828, 0.003333, 0.003295, 0.002661, 0.001501, 0.000000, -0.001586, -0.002974, -0.003917, -0.004246, -0.003905, -0.002959, -0.001577, 0.000000, 0.001505, 0.002698, 0.003402, 0.003538, 0.003125, 0.002276, 0.001166, -0.000000, -0.001030, -0.001774, -0.002149, -0.002143, -0.001813, -0.001262, -0.000616, -0.000000, 0.000489, 0.000791, 0.000895, 0.000827, 0.000640, 0.000401, 0.000172, -0.000000, -0.000093, -0.000108, -0.000066, -0.000000, 0.000058, 0.000083, 0.000063, -0.000000, -0.000090, -0.000183, -0.000255, -0.000288, -0.000271, -0.000208, -0.000112, 0.000000, 0.000105, 0.000184, 0.000226, 0.000226, 0.000192, 0.000132, 0.000064, 0.000000, -0.000048, -0.000075, -0.000080, -0.000068, -0.000048, -0.000026, -0.000009, 0.000000, 0.000000};
static q15_t coeff_q15[TAPS];
void matrix_init(uint32_t numRow, uint32_t numCol, uint16_t* matrix, arm_matrix_instance_q15* instance, uint32_t offset){

	for(uint32_t i = 0; i < 2; i++){
		arm_mat_init_q15(&instance[i], numRow, numCol, (q15_t*)&matrix[offset*i]);
	}
}

void FIR_Filter_F32_Init(dsp_buffer_t* buff, uint32_t channelNumber){
	for(uint32_t i = 0; i < channelNumber; i++){
		arm_fir_init_f32(buff[i].lpFilter_inst, TAPS, &coeff[0], &buff[i].state[0], BLOCK_SIZE);
	}
}

void FIR_Filter_F32(dsp_buffer_t* dsp, float (*input)[BLOCK_SIZE], float (*output)[BLOCK_SIZE] , uint32_t channelNumber){
	for(uint32_t i = 0; i < channelNumber; i++){
		arm_fir_f32(dsp[i].lpFilter_inst, &input[i][0], &output[i][0], BLOCK_SIZE);
	}
}

void FIR_Filter_Q15(dsp_buffer_t* dsp, q15_t (*input)[BLOCK_SIZE], q15_t (*output)[BLOCK_SIZE] , uint32_t channelNumber){
	for(uint32_t i = 0; i < channelNumber; i++){
		arm_fir_fast_q15(&dsp[i].lpFilter_inst[0], &input[i][0], &output[i][0], BLOCK_SIZE);
	}
}

void FIR_Filter_Q15_Init(dsp_buffer_t* buff, uint32_t channelNumber){

	arm_float_to_q15(coeff, coeff_q15, TAPS);

	for(uint32_t i = 0; i < channelNumber; i++){
		arm_fir_init_q15(&buff[i].lpFilter_inst[0], TAPS, &coeff_q15[0], &buff[i].state[0], BLOCK_SIZE);
	}
}

void FFT_Init(arm_rfft_fast_instance_f32* fft_instance, uint32_t channelNumber){
	for(uint32_t i = 0; i < channelNumber; i++){
		arm_rfft_fast_init_f32(&fft_instance[i], FFT_LEN);
	}
}

void Q15_To_Float(q15_t (*q15)[Q15_FLOAT_LEN], float (*flt)[Q15_FLOAT_LEN], uint32_t channelNumber){
	for(uint32_t i = 0; i < channelNumber; i++){
		arm_q15_to_float(&q15[i][0], &flt[i][0], Q15_FLOAT_LEN);
	}
}

void Float_To_Q15(float (*flt)[Q15_FLOAT_LEN], q15_t (*q15)[Q15_FLOAT_LEN], uint32_t channelNumber){
	for(uint32_t i = 0; i < channelNumber; i++){
		arm_float_to_q15(&flt[i][0], &q15[i][0], Q15_FLOAT_LEN);
	}
}
#define FALSE 				0
#define fft_conjugate_j 	fft_output_j
#define fft_absolute_i_j	fft_output_i

void GCC_PHAT(arm_rfft_fast_instance_f32* fft_instance_i, float *fft_input_i, arm_rfft_fast_instance_f32* fft_instance_j, float *fft_input_j, float* Gphat_output){

	static float fft_output_i[FFT_LEN+2];
	static float fft_output_j[FFT_LEN+2];
	static float fft_multi_i_j[FFT_LEN+2];

	//FFT Signals I & J
	arm_rfft_fast_f32(&fft_instance_i[0], &fft_input_i[0], &fft_output_i[0], FALSE);
	arm_rfft_fast_f32(&fft_instance_j[0], &fft_input_j[0], &fft_output_j[0], FALSE);

	//Take the conjugate of signal J
	arm_cmplx_conj_f32(&fft_output_j[2], &fft_conjugate_j[2], FFT_LEN/2 - 1);

	//Re-assign the values for J
	fft_conjugate_j[FFT_LEN-2] 	= fft_output_j[1];
	fft_conjugate_j[FFT_LEN-1] 	= 0;
	fft_conjugate_j[1] 			= 0;

	//Re-assign the value for I
	fft_output_i[FFT_LEN-2] 	= fft_output_i[1];
	fft_output_i[FFT_LEN-1] 	= 0;
	fft_output_i[1] 			= 0;

	//Multiply the Top
	arm_cmplx_mult_cmplx_f32(&fft_output_i[0], &fft_conjugate_j[0], &fft_multi_i_j[0], (FFT_LEN+2)/2);

	//Find the bottoms magnitude
	arm_cmplx_mag_f32(&fft_multi_i_j[0], &fft_absolute_i_j[0], (FFT_LEN+2)/2);

	//Take the inverse of each one
	for(uint32_t i = 0; i < (FFT_LEN+2)/2; i++){
		fft_absolute_i_j[i] = 1/fft_absolute_i_j[i];
	}

	//Multiply the top with the bottom
	arm_cmplx_mult_real_f32(&fft_multi_i_j[0], &fft_absolute_i_j[0], &Gphat_output[0], (FFT_LEN+2)/2);
}
