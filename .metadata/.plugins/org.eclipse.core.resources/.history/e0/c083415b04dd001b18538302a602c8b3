/*
 * dsp.c
 *
 *  Created on: Jul 3, 2021
 *      Author: Chris
 */

#include "dsp.h"

static const float coeff[TAPS+1] = {1.694870e-03,-1.770248e-03,1.463892e-03,-5.585927e-13,-3.354108e-03,8.531591e-03,-1.404808e-02,1.692272e-02,-1.334899e-02,2.270109e-12,2.446969e-02,-5.833132e-02,9.662325e-02,-1.321338e-01,1.572969e-01,8.319674e-01,1.572969e-01,-1.321338e-01,9.662325e-02,-5.833132e-02,2.446969e-02,2.270109e-12,-1.334899e-02,1.692272e-02,-1.404808e-02,8.531591e-03,-3.354108e-03,-5.585927e-13,1.463892e-03,-1.770248e-03,1.694870e-03};

void matrix_init(uint32_t numRow, uint32_t numCol, uint16_t* matrix, arm_matrix_instance_q15* instance, uint32_t offset){

	for(uint32_t i = 0; i < 2; i++){
		arm_mat_init_q15(&instance[i], numRow, numCol, (q15_t*)&matrix[offset*i]);
	}
}

void Low_Pass_Init(dsp_buffer_t* buff, uint32_t channelNumber){
	for(uint32_t i = 0; i < channelNumber; i++){
		arm_fir_init_f32(buff[i].lpFilter_inst, TAPS, &coeff[0], buff[i].state, BLOCK_SIZE);
	}
}

void Low_Pass_Filter(dsp_buffer_t* dsp, uint16_t (*input)[16], uint16_t (*output)[16] , uint32_t channelNumber){

	float32_t floatFilter_input[4][16];
	float32_t floatFilter_output[4][16];

	arm_q15_to_float((const q15_t*)&input[0][0], (float32_t*)&floatFilter_input[0][0], channelNumber*16);

	for(uint32_t i = 0; i < channelNumber; i++){
		arm_fir_f32(dsp[i].lpFilter_inst, &floatFilter_input[i][0], &floatFilter_output[i][0], BLOCK_SIZE);
	}

	arm_float_to_q15(&floatFilter_output[0][0], (q15_t*)&output[0][0], channelNumber*16);

}
