/*
 * dsp.c
 *
 *  Created on: Jul 3, 2021
 *      Author: Chris
 */

#include "dsp.h"


static const float coeff[TAPS] = {0.000000e+00,-1.536484e-04,-5.953882e-04,-1.193288e-03,-1.714456e-03,-1.913206e-03,-1.640422e-03,-9.272316e-04,5.751529e-13,7.918088e-04,1.116142e-03,8.138348e-04,-1.013718e-12,-9.439722e-04,-1.501693e-03,-1.235811e-03,8.812162e-13,1.948136e-03,3.999894e-03,5.415191e-03,5.634462e-03,4.554894e-03,2.640536e-03,7.920460e-04,0.000000e+00,9.070425e-04,3.463250e-03,6.843206e-03,9.699217e-03,1.068449e-02,9.049776e-03,5.057021e-03,-1.671206e-12,-4.231486e-03,-5.912910e-03,-4.278546e-03,2.647524e-12,4.905358e-03,7.774576e-03,6.384466e-03,-2.068622e-12,-1.007746e-02,-2.077116e-02,-2.830109e-02,-2.972115e-02,-2.433009e-02,-1.433701e-02,-4.390747e-03,-3.184622e-18,-5.329302e-03,-2.117136e-02,-4.392744e-02,-6.613334e-02,-7.853441e-02,-7.312556e-02,-4.615331e-02,2.560531e-12,5.681373e-02,1.116558e-01,1.512835e-01,1.657257e-01,1.512835e-01,1.116558e-01,5.681373e-02,2.560531e-12,-4.615331e-02,-7.312556e-02,-7.853441e-02,-6.613334e-02,-4.392744e-02,-2.117136e-02,-5.329302e-03,-3.184622e-18,-4.390747e-03,-1.433701e-02,-2.433009e-02,-2.972115e-02,-2.830109e-02,-2.077116e-02,-1.007746e-02,-2.068622e-12,6.384466e-03,7.774576e-03,4.905358e-03,2.647524e-12,-4.278546e-03,-5.912910e-03,-4.231486e-03,-1.671206e-12,5.057021e-03,9.049776e-03,1.068449e-02,9.699217e-03,6.843206e-03,3.463250e-03,9.070425e-04,0.000000e+00,7.920460e-04,2.640536e-03,4.554894e-03,5.634462e-03,5.415191e-03,3.999894e-03,1.948136e-03,8.812162e-13,-1.235811e-03,-1.501693e-03,-9.439722e-04,-1.013718e-12,8.138348e-04,1.116142e-03,7.918088e-04,5.751529e-13,-9.272316e-04,-1.640422e-03,-1.913206e-03,-1.714456e-03,-1.193288e-03,-5.953882e-04,-1.536484e-04,0.000000e+00};

void matrix_init(uint32_t numRow, uint32_t numCol, uint16_t* matrix, arm_matrix_instance_q15* instance, uint32_t offset){

	for(uint32_t i = 0; i < 2; i++){
		arm_mat_init_q15(&instance[i], numRow, numCol, (q15_t*)&matrix[offset*i]);
	}
}

void FIR_Filter_Init(dsp_buffer_t* buff, uint32_t channelNumber){
	for(uint32_t i = 0; i < channelNumber; i++){
		arm_fir_init_f32(buff[i].lpFilter_inst, TAPS, &coeff[0], buff[i].state, BLOCK_SIZE);
	}
}

void FIR_Filter(dsp_buffer_t* dsp, float (*input)[BLOCK_SIZE], float (*output)[BLOCK_SIZE] , uint32_t channelNumber){
	for(uint32_t i = 0; i < channelNumber; i++){
		arm_fir_f32(dsp[i].lpFilter_inst, &input[i][0], &output[i][0], BLOCK_SIZE);
	}
}

void FFT_Init(arm_rfft_fast_instance_f32* fft_instance, uint32_t channelNumber){
	for(uint32_t i = 0; i < channelNumber; i++){
		arm_rfft_fast_init_f32(&fft_instance[i], FFT_LEN);
	}
}

void Q15_To_Float(q15_t (*q15)[Q15_FLOAT_LEN], float (*flt)[Q15_FLOAT_LEN], uint32_t channelNumber){
	for(uint32_t i = 0; i < channelNumber; i++){
		arm_q15_to_float(&q15[i][0], &flt[i][0], Q15_FLOAT_LEN);
	}
}

void Float_To_Q15(float (*flt)[Q15_FLOAT_LEN], q15_t (*q15)[Q15_FLOAT_LEN], uint32_t channelNumber){
	for(uint32_t i = 0; i < channelNumber; i++){
		arm_float_to_q15(&flt[i][0], &q15[i][0], Q15_FLOAT_LEN);
	}
}
#define FALSE 				0
#define fft_conjugate_j 	fft_output_j
#define fft_absolute_i_j	fft_output_i

void GCC_PHAT(arm_rfft_fast_instance_f32* fft_instance_i, float *fft_input_i, arm_rfft_fast_instance_f32* fft_instance_j, float *fft_input_j, float* Gphat_output){

	static float fft_output_i[FFT_LEN+2];
	static float fft_output_j[FFT_LEN+2];
	static float fft_multi_i_j[FFT_LEN+2];

	//FFT Signals I & J
	arm_rfft_fast_f32(&fft_instance_i[0], &fft_input_i[0], &fft_output_i[0], FALSE);
	arm_rfft_fast_f32(&fft_instance_j[0], &fft_input_j[0], &fft_output_j[0], FALSE);

	//Take the conjugate of signal J
	arm_cmplx_conj_f32(&fft_output_j[2], &fft_conjugate_j[2], FFT_LEN/2 - 1);

	//Re-assign the values for J
	fft_conjugate_j[FFT_LEN-2] 	= fft_output_j[1];
	fft_conjugate_j[FFT_LEN-1] 	= 0;
	fft_conjugate_j[1] 			= 0;

	//Re-assign the value for I
	fft_output_i[FFT_LEN-2] 	= fft_output_i[1];
	fft_output_i[FFT_LEN-1] 	= 0;
	fft_output_i[1] 			= 0;

	//Multiply the Top
	arm_cmplx_mult_cmplx_f32(&fft_output_i[0], &fft_conjugate_j[0], &fft_multi_i_j[0], (FFT_LEN+2)/2);

	//Find the bottoms magnitude
	arm_cmplx_mag_f32(&fft_multi_i_j[0], &fft_absolute_i_j[0], (FFT_LEN+2)/2);

	//Take the inverse of each one
	for(uint32_t i = 0; i < (FFT_LEN+2)/2; i++){
		fft_absolute_i_j[i] = 1/fft_absolute_i_j[i];
	}

	//Multiply the top with the bottom
	arm_cmplx_mult_real_f32(&fft_multi_i_j[0], &fft_absolute_i_j[0], &Gphat_output[0], (FFT_LEN+2)/2);
}
