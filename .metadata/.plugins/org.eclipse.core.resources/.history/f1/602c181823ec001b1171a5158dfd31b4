/*
 * dsp.c
 *
 *  Created on: Jul 3, 2021
 *      Author: Chris
 */

#include "dsp.h"


static float coeff[TAPS] = {-0.00000, 0.00000, 0.00001, 0.00002, 0.00002, -0.00000, -0.00003, -0.00005, -0.00004, -0.00000, 0.00006, 0.00010, 0.00008, -0.00000, -0.00010, -0.00016, -0.00013, 0.00000, 0.00015, 0.00024, 0.00018, 0.00000, -0.00022, -0.00033, -0.00025, -0.00000, 0.00029, 0.00044, 0.00033, -0.00000, -0.00038, -0.00057, -0.00043, 0.00000, 0.00048, 0.00073, 0.00054, -0.00000, -0.00060, -0.00090, -0.00067, -0.00000, 0.00074, 0.00110, 0.00082, -0.00000, -0.00090, -0.00133, -0.00099, 0.00000, 0.00108, 0.00159, 0.00118, -0.00000, -0.00128, -0.00189, -0.00139, -0.00000, 0.00151, 0.00222, 0.00163, -0.00000, -0.00177, -0.00260, -0.00191, 0.00000, 0.00206, 0.00303, 0.00223, -0.00000, -0.00240, -0.00352, -0.00259, -0.00000, 0.00279, 0.00409, 0.00300, -0.00000, -0.00323, -0.00475, -0.00348, 0.00000, 0.00375, 0.00551, 0.00405, -0.00000, -0.00437, -0.00643, -0.00473, 0.00000, 0.00512, 0.00754, 0.00556, -0.00000, -0.00604, -0.00892, -0.00659, 0.00000, 0.00721, 0.01069, 0.00793, -0.00000, -0.00876, -0.01306, -0.00975, 0.00000, 0.01093, 0.01642, 0.01237, -0.00000, -0.01419, -0.02163, -0.01656, 0.00000, 0.01976, 0.03089, 0.02437, -0.00000, -0.03158, -0.05229, -0.04451, 0.00000, 0.07462, 0.15870, 0.22495, 0.25037, 0.22495, 0.15870, 0.07462, 0.00000, -0.04451, -0.05229, -0.03158, -0.00000, 0.02437, 0.03089, 0.01976, 0.00000, -0.01656, -0.02163, -0.01419, -0.00000, 0.01237, 0.01642, 0.01093, 0.00000, -0.00975, -0.01306, -0.00876, -0.00000, 0.00793, 0.01069, 0.00721, 0.00000, -0.00659, -0.00892, -0.00604, -0.00000, 0.00556, 0.00754, 0.00512, 0.00000, -0.00473, -0.00643, -0.00437, -0.00000, 0.00405, 0.00551, 0.00375, 0.00000, -0.00348, -0.00475, -0.00323, -0.00000, 0.00300, 0.00409, 0.00279, -0.00000, -0.00259, -0.00352, -0.00240, -0.00000, 0.00223, 0.00303, 0.00206, 0.00000, -0.00191, -0.00260, -0.00177, -0.00000, 0.00163, 0.00222, 0.00151, -0.00000, -0.00139, -0.00189, -0.00128, -0.00000, 0.00118, 0.00159, 0.00108, 0.00000, -0.00099, -0.00133, -0.00090, -0.00000, 0.00082, 0.00110, 0.00074, -0.00000, -0.00067, -0.00090, -0.00060, -0.00000, 0.00054, 0.00073, 0.00048, 0.00000, -0.00043, -0.00057, -0.00038, -0.00000, 0.00033, 0.00044, 0.00029, -0.00000, -0.00025, -0.00033, -0.00022, 0.00000, 0.00018, 0.00024, 0.00015, 0.00000, -0.00013, -0.00016, -0.00010, -0.00000, 0.00008, 0.00010, 0.00006, -0.00000, -0.00004, -0.00005, -0.00003, -0.00000, 0.00002, 0.00002, 0.00001, 0.00000, -0.00000};

void matrix_init(uint32_t numRow, uint32_t numCol, uint16_t* matrix, arm_matrix_instance_q15* instance, uint32_t offset){

	for(uint32_t i = 0; i < 2; i++){
		arm_mat_init_q15(&instance[i], numRow, numCol, (q15_t*)&matrix[offset*i]);
	}
}

void FIR_Filter_F32_Init(dsp_buffer_t* buff, uint32_t channelNumber){
	for(uint32_t i = 0; i < channelNumber; i++){
		arm_fir_init_f32(buff[i].lpFilter_inst, TAPS, &coeff[0], &buff[i].state[0], BLOCK_SIZE);
	}
}

void FIR_Filter_F32(dsp_buffer_t* dsp, float (*input)[BLOCK_SIZE], float (*output)[BLOCK_SIZE] , uint32_t channelNumber){
	for(uint32_t i = 0; i < channelNumber; i++){
		arm_fir_f32(dsp[i].lpFilter_inst, &input[i][0], &output[i][0], BLOCK_SIZE);
	}
}



void FFT_Init(arm_rfft_fast_instance_f32* fft_instance, uint32_t channelNumber){
	for(uint32_t i = 0; i < channelNumber; i++){
		arm_rfft_fast_init_f32(&fft_instance[i], FFT_LEN);
	}
}

void Q15_To_Float(q15_t (*q15)[Q15_FLOAT_LEN], float (*flt)[Q15_FLOAT_LEN], uint32_t channelNumber){
	for(uint32_t i = 0; i < channelNumber; i++){
		arm_q15_to_float(&q15[i][0], &flt[i][0], Q15_FLOAT_LEN);
	}
}

void Float_To_Q15(float (*flt)[Q15_FLOAT_LEN], q15_t (*q15)[Q15_FLOAT_LEN], uint32_t channelNumber){
	for(uint32_t i = 0; i < channelNumber; i++){
		arm_float_to_q15(&flt[i][0], &q15[i][0], Q15_FLOAT_LEN);
	}
}
#define FALSE 				0
#define fft_conjugate_j 	fft_output_j
#define fft_absolute_i_j	fft_output_i

void GCC_PHAT(arm_rfft_fast_instance_f32* fft_instance_i, float *fft_input_i, arm_rfft_fast_instance_f32* fft_instance_j, float *fft_input_j, float* Gphat_output){

	static float fft_output_i[FFT_LEN+2];
	static float fft_output_j[FFT_LEN+2];
	static float fft_multi_i_j[FFT_LEN+2];

	//FFT Signals I & J
	arm_rfft_fast_f32(&fft_instance_i[0], &fft_input_i[0], &fft_output_i[0], FALSE);
	arm_rfft_fast_f32(&fft_instance_j[0], &fft_input_j[0], &fft_output_j[0], FALSE);

	//Take the conjugate of signal J
	arm_cmplx_conj_f32(&fft_output_j[2], &fft_conjugate_j[2], FFT_LEN/2 - 1);

	//Re-assign the values for J
	fft_conjugate_j[FFT_LEN-2] 	= fft_output_j[1];
	fft_conjugate_j[FFT_LEN-1] 	= 0;
	fft_conjugate_j[1] 			= 0;

	//Re-assign the value for I
	fft_output_i[FFT_LEN-2] 	= fft_output_i[1];
	fft_output_i[FFT_LEN-1] 	= 0;
	fft_output_i[1] 			= 0;

	//Multiply the Top
	arm_cmplx_mult_cmplx_f32(&fft_output_i[0], &fft_conjugate_j[0], &fft_multi_i_j[0], (FFT_LEN+2)/2);

	//Find the bottoms magnitude
	arm_cmplx_mag_f32(&fft_multi_i_j[0], &fft_absolute_i_j[0], (FFT_LEN+2)/2);

	//Take the inverse of each one
	for(uint32_t i = 0; i < (FFT_LEN+2)/2; i++){
		fft_absolute_i_j[i] = 1/fft_absolute_i_j[i];
	}

	//Multiply the top with the bottom
	arm_cmplx_mult_real_f32(&fft_multi_i_j[0], &fft_absolute_i_j[0], &Gphat_output[0], (FFT_LEN+2)/2);
}
