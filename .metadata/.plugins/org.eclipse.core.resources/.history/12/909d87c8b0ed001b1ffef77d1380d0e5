/*
 * dsp.c
 *
 *  Created on: Jul 3, 2021
 *      Author: Chris
 */

#include "dsp.h"


static float coeff[TAPS] = {0.000000e+00, 9.433830e-06, -4.245098e-15, -3.744747e-05, -1.089220e-04, -2.154142e-04, -3.514473e-04, -5.043414e-04, -6.543851e-04, -7.760288e-04, -8.400978e-04, -8.169040e-04, -6.800132e-04, -4.103192e-04, 6.908043e-14, 5.441149e-04, 1.198223e-03, 1.920684e-03, 2.652914e-03, 3.322212e-03, 3.846486e-03, 4.140714e-03, 4.124719e-03, 3.731728e-03, 2.917009e-03, 1.665841e-03, -1.781630e-13, -2.017936e-03, -4.283110e-03, -6.650136e-03, -8.938296e-03, -1.094008e-02, -1.243274e-02, -1.319223e-02, -1.300860e-02, -1.170192e-02, -9.137509e-03, -5.239247e-03, 2.828876e-13, 6.511884e-03, 1.415066e-02, 2.269625e-02, 3.186232e-02, 4.130905e-02, 5.065996e-02, 5.952166e-02, 6.750557e-02, 7.424985e-02, 7.944049e-02, 8.282977e-02, 8.425115e-02, 8.282977e-02, 7.944049e-02, 7.424985e-02, 6.750557e-02, 5.952166e-02, 5.065996e-02, 4.130905e-02, 3.186232e-02, 2.269625e-02, 1.415066e-02, 6.511884e-03, 2.828876e-13, -5.239247e-03, -9.137509e-03, -1.170192e-02, -1.300860e-02, -1.319223e-02, -1.243274e-02, -1.094008e-02, -8.938296e-03, -6.650136e-03, -4.283110e-03, -2.017936e-03, -1.781630e-13, 1.665841e-03, 2.917009e-03, 3.731728e-03, 4.124719e-03, 4.140714e-03, 3.846486e-03, 3.322212e-03, 2.652914e-03, 1.920684e-03, 1.198223e-03, 5.441149e-04, 6.908043e-14, -4.103192e-04, -6.800132e-04, -8.169040e-04, -8.400978e-04, -7.760288e-04, -6.543851e-04, -5.043414e-04, -3.514473e-04, -2.154142e-04, -1.089220e-04, -3.744747e-05, -4.245098e-15, 9.433830e-06, 0.000000e+00};

void matrix_init(uint32_t numRow, uint32_t numCol, uint16_t* matrix, arm_matrix_instance_q15* instance, uint32_t offset){

	for(uint32_t i = 0; i < 2; i++){
		arm_mat_init_q15(&instance[i], numRow, numCol, (q15_t*)&matrix[offset*i]);
	}
}

void FIR_Filter_Init(dsp_buffer_t* buff, uint32_t channelNumber){
	for(uint32_t i = 0; i < channelNumber; i++){
		arm_fir_init_f32(buff[i].lpFilter_inst, TAPS, &coeff[0], buff[i].state, BLOCK_SIZE);
	}
}

void FIR_Filter(dsp_buffer_t* dsp, float (*input)[BLOCK_SIZE], float (*output)[BLOCK_SIZE] , uint32_t channelNumber){
	for(uint32_t i = 0; i < channelNumber; i++){
		arm_fir_f32(dsp[i].lpFilter_inst, &input[i][0], &output[i][0], BLOCK_SIZE);
	}
}

void FFT_Init(arm_rfft_fast_instance_f32* fft_instance, uint32_t channelNumber){
	for(uint32_t i = 0; i < channelNumber; i++){
		arm_rfft_fast_init_f32(&fft_instance[i], FFT_LEN);
	}
}

void Q15_To_Float(q15_t (*q15)[Q15_FLOAT_LEN], float (*flt)[Q15_FLOAT_LEN], uint32_t channelNumber){
	for(uint32_t i = 0; i < channelNumber; i++){
		arm_q15_to_float(&q15[i][0], &flt[i][0], Q15_FLOAT_LEN);
	}
}

void Float_To_Q15(float (*flt)[Q15_FLOAT_LEN], q15_t (*q15)[Q15_FLOAT_LEN], uint32_t channelNumber){
	for(uint32_t i = 0; i < channelNumber; i++){
		arm_float_to_q15(&flt[i][0], &q15[i][0], Q15_FLOAT_LEN);
	}
}
#define FALSE 				0
#define fft_conjugate_j 	fft_output_j
#define fft_absolute_i_j	fft_output_i

void GCC_PHAT(arm_rfft_fast_instance_f32* fft_instance_i, float *fft_input_i, arm_rfft_fast_instance_f32* fft_instance_j, float *fft_input_j, float* Gphat_output){

	static float fft_output_i[FFT_LEN+2];
	static float fft_output_j[FFT_LEN+2];
	static float fft_multi_i_j[FFT_LEN+2];

	//FFT Signals I & J
	arm_rfft_fast_f32(&fft_instance_i[0], &fft_input_i[0], &fft_output_i[0], FALSE);
	arm_rfft_fast_f32(&fft_instance_j[0], &fft_input_j[0], &fft_output_j[0], FALSE);

	//Take the conjugate of signal J
	arm_cmplx_conj_f32(&fft_output_j[2], &fft_conjugate_j[2], FFT_LEN/2 - 1);

	//Re-assign the values for J
	fft_conjugate_j[FFT_LEN-2] 	= fft_output_j[1];
	fft_conjugate_j[FFT_LEN-1] 	= 0;
	fft_conjugate_j[1] 			= 0;

	//Re-assign the value for I
	fft_output_i[FFT_LEN-2] 	= fft_output_i[1];
	fft_output_i[FFT_LEN-1] 	= 0;
	fft_output_i[1] 			= 0;

	//Multiply the Top
	arm_cmplx_mult_cmplx_f32(&fft_output_i[0], &fft_conjugate_j[0], &fft_multi_i_j[0], (FFT_LEN+2)/2);

	//Find the bottoms magnitude
	arm_cmplx_mag_f32(&fft_multi_i_j[0], &fft_absolute_i_j[0], (FFT_LEN+2)/2);

	//Take the inverse of each one
	for(uint32_t i = 0; i < (FFT_LEN+2)/2; i++){
		fft_absolute_i_j[i] = 1/fft_absolute_i_j[i];
	}

	//Multiply the top with the bottom
	arm_cmplx_mult_real_f32(&fft_multi_i_j[0], &fft_absolute_i_j[0], &Gphat_output[0], (FFT_LEN+2)/2);
}
