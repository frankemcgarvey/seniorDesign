/*
 * dsp.c
 *
 *  Created on: Jul 3, 2021
 *      Author: Chris
 */

#include "dsp.h"

static const float coeff[TAPS+1] = {3.716911e-02,-8.137625e-02,4.095308e-03,-4.195562e-02,7.497133e-03,-1.686788e-02,-1.371731e-02,6.944196e-03,-3.265148e-02,1.654018e-02,-3.244375e-02,3.782141e-03,-1.215537e-02,-2.271367e-02,1.207534e-02,-4.201211e-02,1.895051e-02,-3.717554e-02,-4.674038e-05,-1.034019e-02,-3.197255e-02,1.702334e-02,-5.119327e-02,2.068899e-02,-4.041323e-02,-5.454306e-03,-6.568940e-03,-4.226411e-02,2.265280e-02,-5.933048e-02,2.085407e-02,-4.043011e-02,-1.383075e-02,8.331478e-04,-5.449750e-02,2.959368e-02,-6.577585e-02,1.799711e-02,-3.417100e-02,-2.906300e-02,1.682485e-02,-7.320827e-02,4.114518e-02,-6.988660e-02,5.202481e-03,-4.164056e-03,-8.307082e-02,9.335934e-02,-1.751451e-01,1.646983e-01,7.858527e-01,1.646983e-01,-1.751451e-01,9.335934e-02,-8.307082e-02,-4.164056e-03,5.202481e-03,-6.988660e-02,4.114518e-02,-7.320827e-02,1.682485e-02,-2.906300e-02,-3.417100e-02,1.799711e-02,-6.577585e-02,2.959368e-02,-5.449750e-02,8.331478e-04,-1.383075e-02,-4.043011e-02,2.085407e-02,-5.933048e-02,2.265280e-02,-4.226411e-02,-6.568940e-03,-5.454306e-03,-4.041323e-02,2.068899e-02,-5.119327e-02,1.702334e-02,-3.197255e-02,-1.034019e-02,-4.674038e-05,-3.717554e-02,1.895051e-02,-4.201211e-02,1.207534e-02,-2.271367e-02,-1.215537e-02,3.782141e-03,-3.244375e-02,1.654018e-02,-3.265148e-02,6.944196e-03,-1.371731e-02,-1.686788e-02,7.497133e-03,-4.195562e-02,4.095308e-03,-8.137625e-02,3.716911e-02}
void matrix_init(uint32_t numRow, uint32_t numCol, uint16_t* matrix, arm_matrix_instance_q15* instance, uint32_t offset){

	for(uint32_t i = 0; i < 2; i++){
		arm_mat_init_q15(&instance[i], numRow, numCol, (q15_t*)&matrix[offset*i]);
	}
}

void Low_Pass_Init(dsp_buffer_t* buff, uint32_t channelNumber){
	for(uint32_t i = 0; i < channelNumber; i++){
		arm_fir_init_f32(buff[i].lpFilter_inst, TAPS, &coeff[0], buff[i].state, BLOCK_SIZE);
	}
}

void Low_Pass_Filter(dsp_buffer_t* dsp, uint16_t (*input)[16], uint16_t (*output)[16] , uint32_t channelNumber){

	float32_t floatFilter_input[4][16];
	float32_t floatFilter_output[4][16];

	arm_q15_to_float((const q15_t*)&input[0][0], (float32_t*)&floatFilter_input[0][0], channelNumber*16);

	for(uint32_t i = 0; i < channelNumber; i++){
		arm_fir_f32(dsp[i].lpFilter_inst, &floatFilter_input[i][0], &floatFilter_output[i][0], BLOCK_SIZE);
	}

	arm_float_to_q15(&floatFilter_output[0][0], (q15_t*)&output[0][0], channelNumber*16);

}
