
microphone_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bb88  08000298  08000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002e8  0800be20  0800be20  0001be20  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c108  0800c108  00020478  2**0
                  CONTENTS
  4 .ARM          00000008  0800c108  0800c108  0001c108  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c110  0800c110  00020478  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c110  0800c110  0001c110  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c114  0800c114  0001c114  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000478  24000000  0800c118  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003b0  24000478  0800c590  00020478  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24000828  0800c590  00020828  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020478  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ee80  00000000  00000000  000204a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003780  00000000  00000000  0003f326  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e50  00000000  00000000  00042aa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d60  00000000  00000000  000438f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003a192  00000000  00000000  00044658  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000148d3  00000000  00000000  0007e7ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0017c603  00000000  00000000  000930bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000d1  00000000  00000000  0020f6c0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b70  00000000  00000000  0020f794  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000478 	.word	0x24000478
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800be08 	.word	0x0800be08

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	2400047c 	.word	0x2400047c
 80002d4:	0800be08 	.word	0x0800be08

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96e 	b.w	80005cc <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468c      	mov	ip, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	f040 8083 	bne.w	800041e <__udivmoddi4+0x116>
 8000318:	428a      	cmp	r2, r1
 800031a:	4617      	mov	r7, r2
 800031c:	d947      	bls.n	80003ae <__udivmoddi4+0xa6>
 800031e:	fab2 f282 	clz	r2, r2
 8000322:	b142      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000324:	f1c2 0020 	rsb	r0, r2, #32
 8000328:	fa24 f000 	lsr.w	r0, r4, r0
 800032c:	4091      	lsls	r1, r2
 800032e:	4097      	lsls	r7, r2
 8000330:	ea40 0c01 	orr.w	ip, r0, r1
 8000334:	4094      	lsls	r4, r2
 8000336:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fbbc f6f8 	udiv	r6, ip, r8
 8000340:	fa1f fe87 	uxth.w	lr, r7
 8000344:	fb08 c116 	mls	r1, r8, r6, ip
 8000348:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034c:	fb06 f10e 	mul.w	r1, r6, lr
 8000350:	4299      	cmp	r1, r3
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x60>
 8000354:	18fb      	adds	r3, r7, r3
 8000356:	f106 30ff 	add.w	r0, r6, #4294967295
 800035a:	f080 8119 	bcs.w	8000590 <__udivmoddi4+0x288>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 8116 	bls.w	8000590 <__udivmoddi4+0x288>
 8000364:	3e02      	subs	r6, #2
 8000366:	443b      	add	r3, r7
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000370:	fb08 3310 	mls	r3, r8, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 fe0e 	mul.w	lr, r0, lr
 800037c:	45a6      	cmp	lr, r4
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x8c>
 8000380:	193c      	adds	r4, r7, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	f080 8105 	bcs.w	8000594 <__udivmoddi4+0x28c>
 800038a:	45a6      	cmp	lr, r4
 800038c:	f240 8102 	bls.w	8000594 <__udivmoddi4+0x28c>
 8000390:	3802      	subs	r0, #2
 8000392:	443c      	add	r4, r7
 8000394:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	2600      	movs	r6, #0
 800039e:	b11d      	cbz	r5, 80003a8 <__udivmoddi4+0xa0>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c5 4300 	strd	r4, r3, [r5]
 80003a8:	4631      	mov	r1, r6
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	b902      	cbnz	r2, 80003b2 <__udivmoddi4+0xaa>
 80003b0:	deff      	udf	#255	; 0xff
 80003b2:	fab2 f282 	clz	r2, r2
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d150      	bne.n	800045c <__udivmoddi4+0x154>
 80003ba:	1bcb      	subs	r3, r1, r7
 80003bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c0:	fa1f f887 	uxth.w	r8, r7
 80003c4:	2601      	movs	r6, #1
 80003c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80003ca:	0c21      	lsrs	r1, r4, #16
 80003cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003d4:	fb08 f30c 	mul.w	r3, r8, ip
 80003d8:	428b      	cmp	r3, r1
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0xe4>
 80003dc:	1879      	adds	r1, r7, r1
 80003de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0xe2>
 80003e4:	428b      	cmp	r3, r1
 80003e6:	f200 80e9 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 80003ea:	4684      	mov	ip, r0
 80003ec:	1ac9      	subs	r1, r1, r3
 80003ee:	b2a3      	uxth	r3, r4
 80003f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80003f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80003f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003fc:	fb08 f800 	mul.w	r8, r8, r0
 8000400:	45a0      	cmp	r8, r4
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x10c>
 8000404:	193c      	adds	r4, r7, r4
 8000406:	f100 33ff 	add.w	r3, r0, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x10a>
 800040c:	45a0      	cmp	r8, r4
 800040e:	f200 80d9 	bhi.w	80005c4 <__udivmoddi4+0x2bc>
 8000412:	4618      	mov	r0, r3
 8000414:	eba4 0408 	sub.w	r4, r4, r8
 8000418:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800041c:	e7bf      	b.n	800039e <__udivmoddi4+0x96>
 800041e:	428b      	cmp	r3, r1
 8000420:	d909      	bls.n	8000436 <__udivmoddi4+0x12e>
 8000422:	2d00      	cmp	r5, #0
 8000424:	f000 80b1 	beq.w	800058a <__udivmoddi4+0x282>
 8000428:	2600      	movs	r6, #0
 800042a:	e9c5 0100 	strd	r0, r1, [r5]
 800042e:	4630      	mov	r0, r6
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	fab3 f683 	clz	r6, r3
 800043a:	2e00      	cmp	r6, #0
 800043c:	d14a      	bne.n	80004d4 <__udivmoddi4+0x1cc>
 800043e:	428b      	cmp	r3, r1
 8000440:	d302      	bcc.n	8000448 <__udivmoddi4+0x140>
 8000442:	4282      	cmp	r2, r0
 8000444:	f200 80b8 	bhi.w	80005b8 <__udivmoddi4+0x2b0>
 8000448:	1a84      	subs	r4, r0, r2
 800044a:	eb61 0103 	sbc.w	r1, r1, r3
 800044e:	2001      	movs	r0, #1
 8000450:	468c      	mov	ip, r1
 8000452:	2d00      	cmp	r5, #0
 8000454:	d0a8      	beq.n	80003a8 <__udivmoddi4+0xa0>
 8000456:	e9c5 4c00 	strd	r4, ip, [r5]
 800045a:	e7a5      	b.n	80003a8 <__udivmoddi4+0xa0>
 800045c:	f1c2 0320 	rsb	r3, r2, #32
 8000460:	fa20 f603 	lsr.w	r6, r0, r3
 8000464:	4097      	lsls	r7, r2
 8000466:	fa01 f002 	lsl.w	r0, r1, r2
 800046a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800046e:	40d9      	lsrs	r1, r3
 8000470:	4330      	orrs	r0, r6
 8000472:	0c03      	lsrs	r3, r0, #16
 8000474:	fbb1 f6fe 	udiv	r6, r1, lr
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000480:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000484:	fb06 f108 	mul.w	r1, r6, r8
 8000488:	4299      	cmp	r1, r3
 800048a:	fa04 f402 	lsl.w	r4, r4, r2
 800048e:	d909      	bls.n	80004a4 <__udivmoddi4+0x19c>
 8000490:	18fb      	adds	r3, r7, r3
 8000492:	f106 3cff 	add.w	ip, r6, #4294967295
 8000496:	f080 808d 	bcs.w	80005b4 <__udivmoddi4+0x2ac>
 800049a:	4299      	cmp	r1, r3
 800049c:	f240 808a 	bls.w	80005b4 <__udivmoddi4+0x2ac>
 80004a0:	3e02      	subs	r6, #2
 80004a2:	443b      	add	r3, r7
 80004a4:	1a5b      	subs	r3, r3, r1
 80004a6:	b281      	uxth	r1, r0
 80004a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80004ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b4:	fb00 f308 	mul.w	r3, r0, r8
 80004b8:	428b      	cmp	r3, r1
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x1c4>
 80004bc:	1879      	adds	r1, r7, r1
 80004be:	f100 3cff 	add.w	ip, r0, #4294967295
 80004c2:	d273      	bcs.n	80005ac <__udivmoddi4+0x2a4>
 80004c4:	428b      	cmp	r3, r1
 80004c6:	d971      	bls.n	80005ac <__udivmoddi4+0x2a4>
 80004c8:	3802      	subs	r0, #2
 80004ca:	4439      	add	r1, r7
 80004cc:	1acb      	subs	r3, r1, r3
 80004ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004d2:	e778      	b.n	80003c6 <__udivmoddi4+0xbe>
 80004d4:	f1c6 0c20 	rsb	ip, r6, #32
 80004d8:	fa03 f406 	lsl.w	r4, r3, r6
 80004dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e0:	431c      	orrs	r4, r3
 80004e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80004e6:	fa01 f306 	lsl.w	r3, r1, r6
 80004ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80004f2:	431f      	orrs	r7, r3
 80004f4:	0c3b      	lsrs	r3, r7, #16
 80004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fa:	fa1f f884 	uxth.w	r8, r4
 80004fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000502:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000506:	fb09 fa08 	mul.w	sl, r9, r8
 800050a:	458a      	cmp	sl, r1
 800050c:	fa02 f206 	lsl.w	r2, r2, r6
 8000510:	fa00 f306 	lsl.w	r3, r0, r6
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x220>
 8000516:	1861      	adds	r1, r4, r1
 8000518:	f109 30ff 	add.w	r0, r9, #4294967295
 800051c:	d248      	bcs.n	80005b0 <__udivmoddi4+0x2a8>
 800051e:	458a      	cmp	sl, r1
 8000520:	d946      	bls.n	80005b0 <__udivmoddi4+0x2a8>
 8000522:	f1a9 0902 	sub.w	r9, r9, #2
 8000526:	4421      	add	r1, r4
 8000528:	eba1 010a 	sub.w	r1, r1, sl
 800052c:	b2bf      	uxth	r7, r7
 800052e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000532:	fb0e 1110 	mls	r1, lr, r0, r1
 8000536:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800053a:	fb00 f808 	mul.w	r8, r0, r8
 800053e:	45b8      	cmp	r8, r7
 8000540:	d907      	bls.n	8000552 <__udivmoddi4+0x24a>
 8000542:	19e7      	adds	r7, r4, r7
 8000544:	f100 31ff 	add.w	r1, r0, #4294967295
 8000548:	d22e      	bcs.n	80005a8 <__udivmoddi4+0x2a0>
 800054a:	45b8      	cmp	r8, r7
 800054c:	d92c      	bls.n	80005a8 <__udivmoddi4+0x2a0>
 800054e:	3802      	subs	r0, #2
 8000550:	4427      	add	r7, r4
 8000552:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000556:	eba7 0708 	sub.w	r7, r7, r8
 800055a:	fba0 8902 	umull	r8, r9, r0, r2
 800055e:	454f      	cmp	r7, r9
 8000560:	46c6      	mov	lr, r8
 8000562:	4649      	mov	r1, r9
 8000564:	d31a      	bcc.n	800059c <__udivmoddi4+0x294>
 8000566:	d017      	beq.n	8000598 <__udivmoddi4+0x290>
 8000568:	b15d      	cbz	r5, 8000582 <__udivmoddi4+0x27a>
 800056a:	ebb3 020e 	subs.w	r2, r3, lr
 800056e:	eb67 0701 	sbc.w	r7, r7, r1
 8000572:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000576:	40f2      	lsrs	r2, r6
 8000578:	ea4c 0202 	orr.w	r2, ip, r2
 800057c:	40f7      	lsrs	r7, r6
 800057e:	e9c5 2700 	strd	r2, r7, [r5]
 8000582:	2600      	movs	r6, #0
 8000584:	4631      	mov	r1, r6
 8000586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800058a:	462e      	mov	r6, r5
 800058c:	4628      	mov	r0, r5
 800058e:	e70b      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000590:	4606      	mov	r6, r0
 8000592:	e6e9      	b.n	8000368 <__udivmoddi4+0x60>
 8000594:	4618      	mov	r0, r3
 8000596:	e6fd      	b.n	8000394 <__udivmoddi4+0x8c>
 8000598:	4543      	cmp	r3, r8
 800059a:	d2e5      	bcs.n	8000568 <__udivmoddi4+0x260>
 800059c:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a0:	eb69 0104 	sbc.w	r1, r9, r4
 80005a4:	3801      	subs	r0, #1
 80005a6:	e7df      	b.n	8000568 <__udivmoddi4+0x260>
 80005a8:	4608      	mov	r0, r1
 80005aa:	e7d2      	b.n	8000552 <__udivmoddi4+0x24a>
 80005ac:	4660      	mov	r0, ip
 80005ae:	e78d      	b.n	80004cc <__udivmoddi4+0x1c4>
 80005b0:	4681      	mov	r9, r0
 80005b2:	e7b9      	b.n	8000528 <__udivmoddi4+0x220>
 80005b4:	4666      	mov	r6, ip
 80005b6:	e775      	b.n	80004a4 <__udivmoddi4+0x19c>
 80005b8:	4630      	mov	r0, r6
 80005ba:	e74a      	b.n	8000452 <__udivmoddi4+0x14a>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	4439      	add	r1, r7
 80005c2:	e713      	b.n	80003ec <__udivmoddi4+0xe4>
 80005c4:	3802      	subs	r0, #2
 80005c6:	443c      	add	r4, r7
 80005c8:	e724      	b.n	8000414 <__udivmoddi4+0x10c>
 80005ca:	bf00      	nop

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005d0:	b480      	push	{r7}
 80005d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005d4:	4b3f      	ldr	r3, [pc, #252]	; (80006d4 <SystemInit+0x104>)
 80005d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005da:	4a3e      	ldr	r2, [pc, #248]	; (80006d4 <SystemInit+0x104>)
 80005dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80005e4:	4b3b      	ldr	r3, [pc, #236]	; (80006d4 <SystemInit+0x104>)
 80005e6:	691b      	ldr	r3, [r3, #16]
 80005e8:	4a3a      	ldr	r2, [pc, #232]	; (80006d4 <SystemInit+0x104>)
 80005ea:	f043 0310 	orr.w	r3, r3, #16
 80005ee:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005f0:	4b39      	ldr	r3, [pc, #228]	; (80006d8 <SystemInit+0x108>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	f003 030f 	and.w	r3, r3, #15
 80005f8:	2b06      	cmp	r3, #6
 80005fa:	d807      	bhi.n	800060c <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80005fc:	4b36      	ldr	r3, [pc, #216]	; (80006d8 <SystemInit+0x108>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	f023 030f 	bic.w	r3, r3, #15
 8000604:	4a34      	ldr	r2, [pc, #208]	; (80006d8 <SystemInit+0x108>)
 8000606:	f043 0307 	orr.w	r3, r3, #7
 800060a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800060c:	4b33      	ldr	r3, [pc, #204]	; (80006dc <SystemInit+0x10c>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	4a32      	ldr	r2, [pc, #200]	; (80006dc <SystemInit+0x10c>)
 8000612:	f043 0301 	orr.w	r3, r3, #1
 8000616:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000618:	4b30      	ldr	r3, [pc, #192]	; (80006dc <SystemInit+0x10c>)
 800061a:	2200      	movs	r2, #0
 800061c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800061e:	4b2f      	ldr	r3, [pc, #188]	; (80006dc <SystemInit+0x10c>)
 8000620:	681a      	ldr	r2, [r3, #0]
 8000622:	492e      	ldr	r1, [pc, #184]	; (80006dc <SystemInit+0x10c>)
 8000624:	4b2e      	ldr	r3, [pc, #184]	; (80006e0 <SystemInit+0x110>)
 8000626:	4013      	ands	r3, r2
 8000628:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800062a:	4b2b      	ldr	r3, [pc, #172]	; (80006d8 <SystemInit+0x108>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	f003 0308 	and.w	r3, r3, #8
 8000632:	2b00      	cmp	r3, #0
 8000634:	d007      	beq.n	8000646 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000636:	4b28      	ldr	r3, [pc, #160]	; (80006d8 <SystemInit+0x108>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	f023 030f 	bic.w	r3, r3, #15
 800063e:	4a26      	ldr	r2, [pc, #152]	; (80006d8 <SystemInit+0x108>)
 8000640:	f043 0307 	orr.w	r3, r3, #7
 8000644:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000646:	4b25      	ldr	r3, [pc, #148]	; (80006dc <SystemInit+0x10c>)
 8000648:	2200      	movs	r2, #0
 800064a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800064c:	4b23      	ldr	r3, [pc, #140]	; (80006dc <SystemInit+0x10c>)
 800064e:	2200      	movs	r2, #0
 8000650:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000652:	4b22      	ldr	r3, [pc, #136]	; (80006dc <SystemInit+0x10c>)
 8000654:	2200      	movs	r2, #0
 8000656:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000658:	4b20      	ldr	r3, [pc, #128]	; (80006dc <SystemInit+0x10c>)
 800065a:	4a22      	ldr	r2, [pc, #136]	; (80006e4 <SystemInit+0x114>)
 800065c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800065e:	4b1f      	ldr	r3, [pc, #124]	; (80006dc <SystemInit+0x10c>)
 8000660:	4a21      	ldr	r2, [pc, #132]	; (80006e8 <SystemInit+0x118>)
 8000662:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000664:	4b1d      	ldr	r3, [pc, #116]	; (80006dc <SystemInit+0x10c>)
 8000666:	4a21      	ldr	r2, [pc, #132]	; (80006ec <SystemInit+0x11c>)
 8000668:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800066a:	4b1c      	ldr	r3, [pc, #112]	; (80006dc <SystemInit+0x10c>)
 800066c:	2200      	movs	r2, #0
 800066e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000670:	4b1a      	ldr	r3, [pc, #104]	; (80006dc <SystemInit+0x10c>)
 8000672:	4a1e      	ldr	r2, [pc, #120]	; (80006ec <SystemInit+0x11c>)
 8000674:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000676:	4b19      	ldr	r3, [pc, #100]	; (80006dc <SystemInit+0x10c>)
 8000678:	2200      	movs	r2, #0
 800067a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800067c:	4b17      	ldr	r3, [pc, #92]	; (80006dc <SystemInit+0x10c>)
 800067e:	4a1b      	ldr	r2, [pc, #108]	; (80006ec <SystemInit+0x11c>)
 8000680:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000682:	4b16      	ldr	r3, [pc, #88]	; (80006dc <SystemInit+0x10c>)
 8000684:	2200      	movs	r2, #0
 8000686:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000688:	4b14      	ldr	r3, [pc, #80]	; (80006dc <SystemInit+0x10c>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	4a13      	ldr	r2, [pc, #76]	; (80006dc <SystemInit+0x10c>)
 800068e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000692:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000694:	4b11      	ldr	r3, [pc, #68]	; (80006dc <SystemInit+0x10c>)
 8000696:	2200      	movs	r2, #0
 8000698:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800069a:	4b15      	ldr	r3, [pc, #84]	; (80006f0 <SystemInit+0x120>)
 800069c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800069e:	4a14      	ldr	r2, [pc, #80]	; (80006f0 <SystemInit+0x120>)
 80006a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006a4:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80006a6:	4b13      	ldr	r3, [pc, #76]	; (80006f4 <SystemInit+0x124>)
 80006a8:	681a      	ldr	r2, [r3, #0]
 80006aa:	4b13      	ldr	r3, [pc, #76]	; (80006f8 <SystemInit+0x128>)
 80006ac:	4013      	ands	r3, r2
 80006ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80006b2:	d202      	bcs.n	80006ba <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006b4:	4b11      	ldr	r3, [pc, #68]	; (80006fc <SystemInit+0x12c>)
 80006b6:	2201      	movs	r2, #1
 80006b8:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006ba:	4b11      	ldr	r3, [pc, #68]	; (8000700 <SystemInit+0x130>)
 80006bc:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80006c0:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 80006c2:	4b04      	ldr	r3, [pc, #16]	; (80006d4 <SystemInit+0x104>)
 80006c4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80006c8:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 80006ca:	bf00      	nop
 80006cc:	46bd      	mov	sp, r7
 80006ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d2:	4770      	bx	lr
 80006d4:	e000ed00 	.word	0xe000ed00
 80006d8:	52002000 	.word	0x52002000
 80006dc:	58024400 	.word	0x58024400
 80006e0:	eaf6ed7f 	.word	0xeaf6ed7f
 80006e4:	02020200 	.word	0x02020200
 80006e8:	01ff0000 	.word	0x01ff0000
 80006ec:	01010280 	.word	0x01010280
 80006f0:	580000c0 	.word	0x580000c0
 80006f4:	5c001000 	.word	0x5c001000
 80006f8:	ffff0000 	.word	0xffff0000
 80006fc:	51008108 	.word	0x51008108
 8000700:	52004000 	.word	0x52004000

08000704 <pdm_to_pcm>:
	    PDM_FilterConfig[index].decimation_factor = PDM_FILTER_DEC_FACTOR_64;
	    PDM_Filter_setConfig((PDM_Filter_Handler_t*)&PDM_FilterHandler[index], (PDM_Filter_Config_t*)&PDM_FilterConfig[index]);
	  }
}

void pdm_to_pcm(PDM_Filter_Handler_t* PDM_FilterHandler, uint8_t *pdm, uint16_t *pcm,  uint32_t channelNumber){
 8000704:	b580      	push	{r7, lr}
 8000706:	b08e      	sub	sp, #56	; 0x38
 8000708:	af00      	add	r7, sp, #0
 800070a:	60f8      	str	r0, [r7, #12]
 800070c:	60b9      	str	r1, [r7, #8]
 800070e:	607a      	str	r2, [r7, #4]
 8000710:	603b      	str	r3, [r7, #0]
 8000712:	68bb      	ldr	r3, [r7, #8]
 8000714:	633b      	str	r3, [r7, #48]	; 0x30
 8000716:	2380      	movs	r3, #128	; 0x80
 8000718:	62fb      	str	r3, [r7, #44]	; 0x2c
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_InvalidateDCache_by_Addr (void *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 800071a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800071c:	2b00      	cmp	r3, #0
 800071e:	dd1d      	ble.n	800075c <pdm_to_pcm+0x58>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8000720:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000722:	f003 021f 	and.w	r2, r3, #31
 8000726:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000728:	4413      	add	r3, r2
 800072a:	62bb      	str	r3, [r7, #40]	; 0x28
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 800072c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800072e:	627b      	str	r3, [r7, #36]	; 0x24
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000730:	f3bf 8f4f 	dsb	sy
}
 8000734:	bf00      	nop
    
      __DSB();

      do {
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8000736:	4a2c      	ldr	r2, [pc, #176]	; (80007e8 <pdm_to_pcm+0xe4>)
 8000738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800073a:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 800073e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000740:	3320      	adds	r3, #32
 8000742:	627b      	str	r3, [r7, #36]	; 0x24
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8000744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000746:	3b20      	subs	r3, #32
 8000748:	62bb      	str	r3, [r7, #40]	; 0x28
      } while ( op_size > 0 );
 800074a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800074c:	2b00      	cmp	r3, #0
 800074e:	dcf2      	bgt.n	8000736 <pdm_to_pcm+0x32>
  __ASM volatile ("dsb 0xF":::"memory");
 8000750:	f3bf 8f4f 	dsb	sy
}
 8000754:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000756:	f3bf 8f6f 	isb	sy
}
 800075a:	bf00      	nop

      __DSB();
      __ISB();
    }
  #endif
}
 800075c:	bf00      	nop

	SCB_InvalidateDCache_by_Addr((uint32_t*)&pdm[0], BUFFER_SIZE/2);

	for(uint32_t i = 0; i < channelNumber; i++){
 800075e:	2300      	movs	r3, #0
 8000760:	637b      	str	r3, [r7, #52]	; 0x34
 8000762:	e012      	b.n	800078a <pdm_to_pcm+0x86>
		PDM_Filter(&pdm[i], &pcm[i], &PDM_FilterHandler[i]);
 8000764:	68ba      	ldr	r2, [r7, #8]
 8000766:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000768:	18d0      	adds	r0, r2, r3
 800076a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800076c:	005b      	lsls	r3, r3, #1
 800076e:	687a      	ldr	r2, [r7, #4]
 8000770:	18d1      	adds	r1, r2, r3
 8000772:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000774:	224c      	movs	r2, #76	; 0x4c
 8000776:	fb02 f303 	mul.w	r3, r2, r3
 800077a:	68fa      	ldr	r2, [r7, #12]
 800077c:	4413      	add	r3, r2
 800077e:	461a      	mov	r2, r3
 8000780:	f00b f930 	bl	800b9e4 <PDM_Filter>
	for(uint32_t i = 0; i < channelNumber; i++){
 8000784:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000786:	3301      	adds	r3, #1
 8000788:	637b      	str	r3, [r7, #52]	; 0x34
 800078a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800078c:	683b      	ldr	r3, [r7, #0]
 800078e:	429a      	cmp	r2, r3
 8000790:	d3e8      	bcc.n	8000764 <pdm_to_pcm+0x60>
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	623b      	str	r3, [r7, #32]
 8000796:	2320      	movs	r3, #32
 8000798:	61fb      	str	r3, [r7, #28]
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_CleanDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 800079a:	69fb      	ldr	r3, [r7, #28]
 800079c:	2b00      	cmp	r3, #0
 800079e:	dd1d      	ble.n	80007dc <pdm_to_pcm+0xd8>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 80007a0:	6a3b      	ldr	r3, [r7, #32]
 80007a2:	f003 021f 	and.w	r2, r3, #31
 80007a6:	69fb      	ldr	r3, [r7, #28]
 80007a8:	4413      	add	r3, r2
 80007aa:	61bb      	str	r3, [r7, #24]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 80007ac:	6a3b      	ldr	r3, [r7, #32]
 80007ae:	617b      	str	r3, [r7, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80007b0:	f3bf 8f4f 	dsb	sy
}
 80007b4:	bf00      	nop
    
      __DSB();

      do {
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 80007b6:	4a0c      	ldr	r2, [pc, #48]	; (80007e8 <pdm_to_pcm+0xe4>)
 80007b8:	697b      	ldr	r3, [r7, #20]
 80007ba:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 80007be:	697b      	ldr	r3, [r7, #20]
 80007c0:	3320      	adds	r3, #32
 80007c2:	617b      	str	r3, [r7, #20]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 80007c4:	69bb      	ldr	r3, [r7, #24]
 80007c6:	3b20      	subs	r3, #32
 80007c8:	61bb      	str	r3, [r7, #24]
      } while ( op_size > 0 );
 80007ca:	69bb      	ldr	r3, [r7, #24]
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	dcf2      	bgt.n	80007b6 <pdm_to_pcm+0xb2>
  __ASM volatile ("dsb 0xF":::"memory");
 80007d0:	f3bf 8f4f 	dsb	sy
}
 80007d4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80007d6:	f3bf 8f6f 	isb	sy
}
 80007da:	bf00      	nop

      __DSB();
      __ISB();
    }
  #endif
}
 80007dc:	bf00      	nop
	}

	SCB_CleanDCache_by_Addr((uint32_t*)&pcm[0], BUFFER_SIZE/8);
}
 80007de:	bf00      	nop
 80007e0:	3738      	adds	r7, #56	; 0x38
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	e000ed00 	.word	0xe000ed00

080007ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b08a      	sub	sp, #40	; 0x28
 80007f0:	af00      	add	r7, sp, #0
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80007f2:	4b87      	ldr	r3, [pc, #540]	; (8000a10 <main+0x224>)
 80007f4:	695b      	ldr	r3, [r3, #20]
 80007f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d11b      	bne.n	8000836 <main+0x4a>
  __ASM volatile ("dsb 0xF":::"memory");
 80007fe:	f3bf 8f4f 	dsb	sy
}
 8000802:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000804:	f3bf 8f6f 	isb	sy
}
 8000808:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800080a:	4b81      	ldr	r3, [pc, #516]	; (8000a10 <main+0x224>)
 800080c:	2200      	movs	r2, #0
 800080e:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000812:	f3bf 8f4f 	dsb	sy
}
 8000816:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000818:	f3bf 8f6f 	isb	sy
}
 800081c:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800081e:	4b7c      	ldr	r3, [pc, #496]	; (8000a10 <main+0x224>)
 8000820:	695b      	ldr	r3, [r3, #20]
 8000822:	4a7b      	ldr	r2, [pc, #492]	; (8000a10 <main+0x224>)
 8000824:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000828:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800082a:	f3bf 8f4f 	dsb	sy
}
 800082e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000830:	f3bf 8f6f 	isb	sy
}
 8000834:	e000      	b.n	8000838 <main+0x4c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000836:	bf00      	nop
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000838:	4b75      	ldr	r3, [pc, #468]	; (8000a10 <main+0x224>)
 800083a:	695b      	ldr	r3, [r3, #20]
 800083c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000840:	2b00      	cmp	r3, #0
 8000842:	d138      	bne.n	80008b6 <main+0xca>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000844:	4b72      	ldr	r3, [pc, #456]	; (8000a10 <main+0x224>)
 8000846:	2200      	movs	r2, #0
 8000848:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800084c:	f3bf 8f4f 	dsb	sy
}
 8000850:	bf00      	nop
    ccsidr = SCB->CCSIDR;
 8000852:	4b6f      	ldr	r3, [pc, #444]	; (8000a10 <main+0x224>)
 8000854:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000858:	61fb      	str	r3, [r7, #28]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800085a:	69fb      	ldr	r3, [r7, #28]
 800085c:	0b5b      	lsrs	r3, r3, #13
 800085e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000862:	61bb      	str	r3, [r7, #24]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000864:	69fb      	ldr	r3, [r7, #28]
 8000866:	08db      	lsrs	r3, r3, #3
 8000868:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800086c:	617b      	str	r3, [r7, #20]
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800086e:	69bb      	ldr	r3, [r7, #24]
 8000870:	015a      	lsls	r2, r3, #5
 8000872:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000876:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000878:	697a      	ldr	r2, [r7, #20]
 800087a:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800087c:	4964      	ldr	r1, [pc, #400]	; (8000a10 <main+0x224>)
 800087e:	4313      	orrs	r3, r2
 8000880:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
      } while (ways-- != 0U);
 8000884:	697b      	ldr	r3, [r7, #20]
 8000886:	1e5a      	subs	r2, r3, #1
 8000888:	617a      	str	r2, [r7, #20]
 800088a:	2b00      	cmp	r3, #0
 800088c:	d1ef      	bne.n	800086e <main+0x82>
    } while(sets-- != 0U);
 800088e:	69bb      	ldr	r3, [r7, #24]
 8000890:	1e5a      	subs	r2, r3, #1
 8000892:	61ba      	str	r2, [r7, #24]
 8000894:	2b00      	cmp	r3, #0
 8000896:	d1e5      	bne.n	8000864 <main+0x78>
  __ASM volatile ("dsb 0xF":::"memory");
 8000898:	f3bf 8f4f 	dsb	sy
}
 800089c:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800089e:	4b5c      	ldr	r3, [pc, #368]	; (8000a10 <main+0x224>)
 80008a0:	695b      	ldr	r3, [r3, #20]
 80008a2:	4a5b      	ldr	r2, [pc, #364]	; (8000a10 <main+0x224>)
 80008a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80008a8:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80008aa:	f3bf 8f4f 	dsb	sy
}
 80008ae:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80008b0:	f3bf 8f6f 	isb	sy
}
 80008b4:	e000      	b.n	80008b8 <main+0xcc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80008b6:	bf00      	nop

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008b8:	f000 fcc0 	bl	800123c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008bc:	f000 f8b6 	bl	8000a2c <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 80008c0:	4b54      	ldr	r3, [pc, #336]	; (8000a14 <main+0x228>)
 80008c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008c6:	4a53      	ldr	r2, [pc, #332]	; (8000a14 <main+0x228>)
 80008c8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80008cc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008d0:	4b50      	ldr	r3, [pc, #320]	; (8000a14 <main+0x228>)
 80008d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80008da:	603b      	str	r3, [r7, #0]
 80008dc:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 80008de:	2000      	movs	r0, #0
 80008e0:	f003 ff3a 	bl	8004758 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 80008e4:	2100      	movs	r1, #0
 80008e6:	2000      	movs	r0, #0
 80008e8:	f003 ff50 	bl	800478c <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 80008ec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80008f0:	627b      	str	r3, [r7, #36]	; 0x24
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 80008f2:	bf00      	nop
 80008f4:	4b47      	ldr	r3, [pc, #284]	; (8000a14 <main+0x228>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d104      	bne.n	800090a <main+0x11e>
 8000900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000902:	1e5a      	subs	r2, r3, #1
 8000904:	627a      	str	r2, [r7, #36]	; 0x24
 8000906:	2b00      	cmp	r3, #0
 8000908:	dcf4      	bgt.n	80008f4 <main+0x108>
if ( timeout < 0 )
 800090a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800090c:	2b00      	cmp	r3, #0
 800090e:	da01      	bge.n	8000914 <main+0x128>
{
Error_Handler();
 8000910:	f000 fa88 	bl	8000e24 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000914:	f000 fa12 	bl	8000d3c <MX_GPIO_Init>
  MX_DMA_Init();
 8000918:	f000 f9e8 	bl	8000cec <MX_DMA_Init>
  MX_USART3_UART_Init();
 800091c:	f000 f996 	bl	8000c4c <MX_USART3_UART_Init>
  MX_CRC_Init();
 8000920:	f000 f908 	bl	8000b34 <MX_CRC_Init>
  MX_SAI1_Init();
 8000924:	f000 f930 	bl	8000b88 <MX_SAI1_Init>
  MX_PDM2PCM_Init();
 8000928:	f009 f964 	bl	8009bf4 <MX_PDM2PCM_Init>
  /* USER CODE BEGIN 2 */

  for(uint32_t i = 0; i < BUFFER_SIZE; i++){
 800092c:	2300      	movs	r3, #0
 800092e:	623b      	str	r3, [r7, #32]
 8000930:	e007      	b.n	8000942 <main+0x156>
	  buffer->pdmBuffer[i] = 0;
 8000932:	4a39      	ldr	r2, [pc, #228]	; (8000a18 <main+0x22c>)
 8000934:	6a3b      	ldr	r3, [r7, #32]
 8000936:	2100      	movs	r1, #0
 8000938:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for(uint32_t i = 0; i < BUFFER_SIZE; i++){
 800093c:	6a3b      	ldr	r3, [r7, #32]
 800093e:	3301      	adds	r3, #1
 8000940:	623b      	str	r3, [r7, #32]
 8000942:	6a3b      	ldr	r3, [r7, #32]
 8000944:	2bff      	cmp	r3, #255	; 0xff
 8000946:	d9f4      	bls.n	8000932 <main+0x146>
  }

  SCB_CleanDCache_by_Addr((uint32_t*)&buffer->pcmBuffer[0], BUFFER_SIZE);
 8000948:	4b33      	ldr	r3, [pc, #204]	; (8000a18 <main+0x22c>)
 800094a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800094e:	613b      	str	r3, [r7, #16]
 8000950:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000954:	60fb      	str	r3, [r7, #12]
    if ( dsize > 0 ) { 
 8000956:	68fb      	ldr	r3, [r7, #12]
 8000958:	2b00      	cmp	r3, #0
 800095a:	dd1d      	ble.n	8000998 <main+0x1ac>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 800095c:	693b      	ldr	r3, [r7, #16]
 800095e:	f003 021f 	and.w	r2, r3, #31
 8000962:	68fb      	ldr	r3, [r7, #12]
 8000964:	4413      	add	r3, r2
 8000966:	60bb      	str	r3, [r7, #8]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8000968:	693b      	ldr	r3, [r7, #16]
 800096a:	607b      	str	r3, [r7, #4]
  __ASM volatile ("dsb 0xF":::"memory");
 800096c:	f3bf 8f4f 	dsb	sy
}
 8000970:	bf00      	nop
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8000972:	4a27      	ldr	r2, [pc, #156]	; (8000a10 <main+0x224>)
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	3320      	adds	r3, #32
 800097e:	607b      	str	r3, [r7, #4]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8000980:	68bb      	ldr	r3, [r7, #8]
 8000982:	3b20      	subs	r3, #32
 8000984:	60bb      	str	r3, [r7, #8]
      } while ( op_size > 0 );
 8000986:	68bb      	ldr	r3, [r7, #8]
 8000988:	2b00      	cmp	r3, #0
 800098a:	dcf2      	bgt.n	8000972 <main+0x186>
  __ASM volatile ("dsb 0xF":::"memory");
 800098c:	f3bf 8f4f 	dsb	sy
}
 8000990:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000992:	f3bf 8f6f 	isb	sy
}
 8000996:	bf00      	nop
}
 8000998:	bf00      	nop
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  HAL_SAI_Receive_DMA(&hsai_BlockA1, (uint8_t*)&buffer->pdmBuffer[0], BUFFER_SIZE);
 800099a:	4b1f      	ldr	r3, [pc, #124]	; (8000a18 <main+0x22c>)
 800099c:	f44f 7280 	mov.w	r2, #256	; 0x100
 80009a0:	4619      	mov	r1, r3
 80009a2:	481e      	ldr	r0, [pc, #120]	; (8000a1c <main+0x230>)
 80009a4:	f007 fb22 	bl	8007fec <HAL_SAI_Receive_DMA>

  while (1){

	  //Wait for Half of the buffer to be filled
	  while(dmaFlag != HALF){}
 80009a8:	bf00      	nop
 80009aa:	4b1d      	ldr	r3, [pc, #116]	; (8000a20 <main+0x234>)
 80009ac:	781b      	ldrb	r3, [r3, #0]
 80009ae:	2b01      	cmp	r3, #1
 80009b0:	d1fb      	bne.n	80009aa <main+0x1be>
	  //Reset Flag
	  dmaFlag = NONE;
 80009b2:	4b1b      	ldr	r3, [pc, #108]	; (8000a20 <main+0x234>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	701a      	strb	r2, [r3, #0]
	  //Filter PDM to PCM
	  pdm_to_pcm(&PDM_FilterHandler[0],	(uint8_t*)&buffer->pdmBuffer[0], (uint16_t*)&buffer->pcmBuffer[0], 2);
 80009b8:	4b17      	ldr	r3, [pc, #92]	; (8000a18 <main+0x22c>)
 80009ba:	4619      	mov	r1, r3
 80009bc:	4b16      	ldr	r3, [pc, #88]	; (8000a18 <main+0x22c>)
 80009be:	f503 7200 	add.w	r2, r3, #512	; 0x200
 80009c2:	2302      	movs	r3, #2
 80009c4:	4817      	ldr	r0, [pc, #92]	; (8000a24 <main+0x238>)
 80009c6:	f7ff fe9d 	bl	8000704 <pdm_to_pcm>
	  //Transmit PCM
	  HAL_UART_Transmit_DMA(&huart3, (uint8_t*)&buffer->pcmBuffer[0], 64);
 80009ca:	4b13      	ldr	r3, [pc, #76]	; (8000a18 <main+0x22c>)
 80009cc:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80009d0:	2240      	movs	r2, #64	; 0x40
 80009d2:	4619      	mov	r1, r3
 80009d4:	4814      	ldr	r0, [pc, #80]	; (8000a28 <main+0x23c>)
 80009d6:	f007 fcd7 	bl	8008388 <HAL_UART_Transmit_DMA>

	  //Wait for Half of the buffer to be filled
	  while(dmaFlag != FULL){}
 80009da:	bf00      	nop
 80009dc:	4b10      	ldr	r3, [pc, #64]	; (8000a20 <main+0x234>)
 80009de:	781b      	ldrb	r3, [r3, #0]
 80009e0:	2b02      	cmp	r3, #2
 80009e2:	d1fb      	bne.n	80009dc <main+0x1f0>
	  //Reset Flag
	  dmaFlag = NONE;
 80009e4:	4b0e      	ldr	r3, [pc, #56]	; (8000a20 <main+0x234>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	701a      	strb	r2, [r3, #0]
	  //Filter PDM to PCM
	  pdm_to_pcm(&PDM_FilterHandler[0],	(uint8_t*)&buffer->pdmBuffer[BUFFER_SIZE/2], (uint16_t*)&buffer->pcmBuffer[32], 2);
 80009ea:	4b0b      	ldr	r3, [pc, #44]	; (8000a18 <main+0x22c>)
 80009ec:	f503 7180 	add.w	r1, r3, #256	; 0x100
 80009f0:	4b09      	ldr	r3, [pc, #36]	; (8000a18 <main+0x22c>)
 80009f2:	f503 7210 	add.w	r2, r3, #576	; 0x240
 80009f6:	2302      	movs	r3, #2
 80009f8:	480a      	ldr	r0, [pc, #40]	; (8000a24 <main+0x238>)
 80009fa:	f7ff fe83 	bl	8000704 <pdm_to_pcm>
	  //Transmit PCM
	  HAL_UART_Transmit_DMA(&huart3, (uint8_t*)&buffer->pcmBuffer[32], 64);
 80009fe:	4b06      	ldr	r3, [pc, #24]	; (8000a18 <main+0x22c>)
 8000a00:	f503 7310 	add.w	r3, r3, #576	; 0x240
 8000a04:	2240      	movs	r2, #64	; 0x40
 8000a06:	4619      	mov	r1, r3
 8000a08:	4807      	ldr	r0, [pc, #28]	; (8000a28 <main+0x23c>)
 8000a0a:	f007 fcbd 	bl	8008388 <HAL_UART_Transmit_DMA>
	  while(dmaFlag != HALF){}
 8000a0e:	e7cb      	b.n	80009a8 <main+0x1bc>
 8000a10:	e000ed00 	.word	0xe000ed00
 8000a14:	58024400 	.word	0x58024400
 8000a18:	30040000 	.word	0x30040000
 8000a1c:	240006e4 	.word	0x240006e4
 8000a20:	24000495 	.word	0x24000495
 8000a24:	240004a8 	.word	0x240004a8
 8000a28:	24000540 	.word	0x24000540

08000a2c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b09c      	sub	sp, #112	; 0x70
 8000a30:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a36:	224c      	movs	r2, #76	; 0x4c
 8000a38:	2100      	movs	r1, #0
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f00b f816 	bl	800ba6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a40:	1d3b      	adds	r3, r7, #4
 8000a42:	2220      	movs	r2, #32
 8000a44:	2100      	movs	r1, #0
 8000a46:	4618      	mov	r0, r3
 8000a48:	f00b f810 	bl	800ba6c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000a4c:	2004      	movs	r0, #4
 8000a4e:	f003 feb1 	bl	80047b4 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000a52:	2300      	movs	r3, #0
 8000a54:	603b      	str	r3, [r7, #0]
 8000a56:	4b34      	ldr	r3, [pc, #208]	; (8000b28 <SystemClock_Config+0xfc>)
 8000a58:	699b      	ldr	r3, [r3, #24]
 8000a5a:	4a33      	ldr	r2, [pc, #204]	; (8000b28 <SystemClock_Config+0xfc>)
 8000a5c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000a60:	6193      	str	r3, [r2, #24]
 8000a62:	4b31      	ldr	r3, [pc, #196]	; (8000b28 <SystemClock_Config+0xfc>)
 8000a64:	699b      	ldr	r3, [r3, #24]
 8000a66:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a6a:	603b      	str	r3, [r7, #0]
 8000a6c:	4b2f      	ldr	r3, [pc, #188]	; (8000b2c <SystemClock_Config+0x100>)
 8000a6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a70:	4a2e      	ldr	r2, [pc, #184]	; (8000b2c <SystemClock_Config+0x100>)
 8000a72:	f043 0301 	orr.w	r3, r3, #1
 8000a76:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000a78:	4b2c      	ldr	r3, [pc, #176]	; (8000b2c <SystemClock_Config+0x100>)
 8000a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a7c:	f003 0301 	and.w	r3, r3, #1
 8000a80:	603b      	str	r3, [r7, #0]
 8000a82:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000a84:	bf00      	nop
 8000a86:	4b28      	ldr	r3, [pc, #160]	; (8000b28 <SystemClock_Config+0xfc>)
 8000a88:	699b      	ldr	r3, [r3, #24]
 8000a8a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000a8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000a92:	d1f8      	bne.n	8000a86 <SystemClock_Config+0x5a>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000a94:	4b26      	ldr	r3, [pc, #152]	; (8000b30 <SystemClock_Config+0x104>)
 8000a96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a98:	f023 0303 	bic.w	r3, r3, #3
 8000a9c:	4a24      	ldr	r2, [pc, #144]	; (8000b30 <SystemClock_Config+0x104>)
 8000a9e:	f043 0302 	orr.w	r3, r3, #2
 8000aa2:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000aa4:	2301      	movs	r3, #1
 8000aa6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000aa8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000aac:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000aae:	2302      	movs	r3, #2
 8000ab0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ab2:	2302      	movs	r3, #2
 8000ab4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000ab6:	2301      	movs	r3, #1
 8000ab8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 120;
 8000aba:	2378      	movs	r3, #120	; 0x78
 8000abc:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000abe:	2302      	movs	r3, #2
 8000ac0:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000ac2:	2304      	movs	r3, #4
 8000ac4:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000ac6:	2302      	movs	r3, #2
 8000ac8:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000aca:	230c      	movs	r3, #12
 8000acc:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ad6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ada:	4618      	mov	r0, r3
 8000adc:	f003 fec4 	bl	8004868 <HAL_RCC_OscConfig>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d001      	beq.n	8000aea <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8000ae6:	f000 f99d 	bl	8000e24 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000aea:	233f      	movs	r3, #63	; 0x3f
 8000aec:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000aee:	2303      	movs	r3, #3
 8000af0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000af2:	2300      	movs	r3, #0
 8000af4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV4;
 8000af6:	2309      	movs	r3, #9
 8000af8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000afa:	2340      	movs	r3, #64	; 0x40
 8000afc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000afe:	2300      	movs	r3, #0
 8000b00:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000b02:	2300      	movs	r3, #0
 8000b04:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000b06:	2300      	movs	r3, #0
 8000b08:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000b0a:	1d3b      	adds	r3, r7, #4
 8000b0c:	2101      	movs	r1, #1
 8000b0e:	4618      	mov	r0, r3
 8000b10:	f004 faba 	bl	8005088 <HAL_RCC_ClockConfig>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d001      	beq.n	8000b1e <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8000b1a:	f000 f983 	bl	8000e24 <Error_Handler>
  }
}
 8000b1e:	bf00      	nop
 8000b20:	3770      	adds	r7, #112	; 0x70
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	58024800 	.word	0x58024800
 8000b2c:	58000400 	.word	0x58000400
 8000b30:	58024400 	.word	0x58024400

08000b34 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000b38:	4b11      	ldr	r3, [pc, #68]	; (8000b80 <MX_CRC_Init+0x4c>)
 8000b3a:	4a12      	ldr	r2, [pc, #72]	; (8000b84 <MX_CRC_Init+0x50>)
 8000b3c:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000b3e:	4b10      	ldr	r3, [pc, #64]	; (8000b80 <MX_CRC_Init+0x4c>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000b44:	4b0e      	ldr	r3, [pc, #56]	; (8000b80 <MX_CRC_Init+0x4c>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000b4a:	4b0d      	ldr	r3, [pc, #52]	; (8000b80 <MX_CRC_Init+0x4c>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000b50:	4b0b      	ldr	r3, [pc, #44]	; (8000b80 <MX_CRC_Init+0x4c>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000b56:	4b0a      	ldr	r3, [pc, #40]	; (8000b80 <MX_CRC_Init+0x4c>)
 8000b58:	2201      	movs	r2, #1
 8000b5a:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000b5c:	4808      	ldr	r0, [pc, #32]	; (8000b80 <MX_CRC_Init+0x4c>)
 8000b5e:	f000 fd1b 	bl	8001598 <HAL_CRC_Init>
 8000b62:	4603      	mov	r3, r0
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d001      	beq.n	8000b6c <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000b68:	f000 f95c 	bl	8000e24 <Error_Handler>
  }
  __HAL_CRC_DR_RESET(&hcrc);
 8000b6c:	4b04      	ldr	r3, [pc, #16]	; (8000b80 <MX_CRC_Init+0x4c>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	689a      	ldr	r2, [r3, #8]
 8000b72:	4b03      	ldr	r3, [pc, #12]	; (8000b80 <MX_CRC_Init+0x4c>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	f042 0201 	orr.w	r2, r2, #1
 8000b7a:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000b7c:	bf00      	nop
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	240005d0 	.word	0x240005d0
 8000b84:	58024c00 	.word	0x58024c00

08000b88 <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockA1.Instance = SAI1_Block_A;
 8000b8c:	4b2d      	ldr	r3, [pc, #180]	; (8000c44 <MX_SAI1_Init+0xbc>)
 8000b8e:	4a2e      	ldr	r2, [pc, #184]	; (8000c48 <MX_SAI1_Init+0xc0>)
 8000b90:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
 8000b92:	4b2c      	ldr	r3, [pc, #176]	; (8000c44 <MX_SAI1_Init+0xbc>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_RX;
 8000b98:	4b2a      	ldr	r3, [pc, #168]	; (8000c44 <MX_SAI1_Init+0xbc>)
 8000b9a:	2201      	movs	r2, #1
 8000b9c:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.DataSize = SAI_DATASIZE_16;
 8000b9e:	4b29      	ldr	r3, [pc, #164]	; (8000c44 <MX_SAI1_Init+0xbc>)
 8000ba0:	2280      	movs	r2, #128	; 0x80
 8000ba2:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000ba4:	4b27      	ldr	r3, [pc, #156]	; (8000c44 <MX_SAI1_Init+0xbc>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000baa:	4b26      	ldr	r3, [pc, #152]	; (8000c44 <MX_SAI1_Init+0xbc>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8000bb0:	4b24      	ldr	r3, [pc, #144]	; (8000c44 <MX_SAI1_Init+0xbc>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000bb6:	4b23      	ldr	r3, [pc, #140]	; (8000c44 <MX_SAI1_Init+0xbc>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_DISABLE;
 8000bbc:	4b21      	ldr	r3, [pc, #132]	; (8000c44 <MX_SAI1_Init+0xbc>)
 8000bbe:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000bc2:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_FULL;
 8000bc4:	4b1f      	ldr	r3, [pc, #124]	; (8000c44 <MX_SAI1_Init+0xbc>)
 8000bc6:	2204      	movs	r2, #4
 8000bc8:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_MCKDIV;
 8000bca:	4b1e      	ldr	r3, [pc, #120]	; (8000c44 <MX_SAI1_Init+0xbc>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	621a      	str	r2, [r3, #32]
  hsai_BlockA1.Init.Mckdiv = 1;
 8000bd0:	4b1c      	ldr	r3, [pc, #112]	; (8000c44 <MX_SAI1_Init+0xbc>)
 8000bd2:	2201      	movs	r2, #1
 8000bd4:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8000bd6:	4b1b      	ldr	r3, [pc, #108]	; (8000c44 <MX_SAI1_Init+0xbc>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8000bdc:	4b19      	ldr	r3, [pc, #100]	; (8000c44 <MX_SAI1_Init+0xbc>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA1.Init.PdmInit.Activation = ENABLE;
 8000be2:	4b18      	ldr	r3, [pc, #96]	; (8000c44 <MX_SAI1_Init+0xbc>)
 8000be4:	2201      	movs	r2, #1
 8000be6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hsai_BlockA1.Init.PdmInit.MicPairsNbr = 1;
 8000bea:	4b16      	ldr	r3, [pc, #88]	; (8000c44 <MX_SAI1_Init+0xbc>)
 8000bec:	2201      	movs	r2, #1
 8000bee:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA1.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 8000bf0:	4b14      	ldr	r3, [pc, #80]	; (8000c44 <MX_SAI1_Init+0xbc>)
 8000bf2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000bf6:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA1.FrameInit.FrameLength = 16;
 8000bf8:	4b12      	ldr	r3, [pc, #72]	; (8000c44 <MX_SAI1_Init+0xbc>)
 8000bfa:	2210      	movs	r2, #16
 8000bfc:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA1.FrameInit.ActiveFrameLength = 1;
 8000bfe:	4b11      	ldr	r3, [pc, #68]	; (8000c44 <MX_SAI1_Init+0xbc>)
 8000c00:	2201      	movs	r2, #1
 8000c02:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8000c04:	4b0f      	ldr	r3, [pc, #60]	; (8000c44 <MX_SAI1_Init+0xbc>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA1.FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 8000c0a:	4b0e      	ldr	r3, [pc, #56]	; (8000c44 <MX_SAI1_Init+0xbc>)
 8000c0c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000c10:	661a      	str	r2, [r3, #96]	; 0x60
  hsai_BlockA1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8000c12:	4b0c      	ldr	r3, [pc, #48]	; (8000c44 <MX_SAI1_Init+0xbc>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	665a      	str	r2, [r3, #100]	; 0x64
  hsai_BlockA1.SlotInit.FirstBitOffset = 0;
 8000c18:	4b0a      	ldr	r3, [pc, #40]	; (8000c44 <MX_SAI1_Init+0xbc>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	669a      	str	r2, [r3, #104]	; 0x68
  hsai_BlockA1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8000c1e:	4b09      	ldr	r3, [pc, #36]	; (8000c44 <MX_SAI1_Init+0xbc>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai_BlockA1.SlotInit.SlotNumber = 1;
 8000c24:	4b07      	ldr	r3, [pc, #28]	; (8000c44 <MX_SAI1_Init+0xbc>)
 8000c26:	2201      	movs	r2, #1
 8000c28:	671a      	str	r2, [r3, #112]	; 0x70
  hsai_BlockA1.SlotInit.SlotActive = 0x00000001;
 8000c2a:	4b06      	ldr	r3, [pc, #24]	; (8000c44 <MX_SAI1_Init+0xbc>)
 8000c2c:	2201      	movs	r2, #1
 8000c2e:	675a      	str	r2, [r3, #116]	; 0x74
  if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
 8000c30:	4804      	ldr	r0, [pc, #16]	; (8000c44 <MX_SAI1_Init+0xbc>)
 8000c32:	f006 ff3b 	bl	8007aac <HAL_SAI_Init>
 8000c36:	4603      	mov	r3, r0
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d001      	beq.n	8000c40 <MX_SAI1_Init+0xb8>
  {
    Error_Handler();
 8000c3c:	f000 f8f2 	bl	8000e24 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8000c40:	bf00      	nop
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	240006e4 	.word	0x240006e4
 8000c48:	40015804 	.word	0x40015804

08000c4c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000c50:	4b23      	ldr	r3, [pc, #140]	; (8000ce0 <MX_USART3_UART_Init+0x94>)
 8000c52:	4a24      	ldr	r2, [pc, #144]	; (8000ce4 <MX_USART3_UART_Init+0x98>)
 8000c54:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 1000000;
 8000c56:	4b22      	ldr	r3, [pc, #136]	; (8000ce0 <MX_USART3_UART_Init+0x94>)
 8000c58:	4a23      	ldr	r2, [pc, #140]	; (8000ce8 <MX_USART3_UART_Init+0x9c>)
 8000c5a:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000c5c:	4b20      	ldr	r3, [pc, #128]	; (8000ce0 <MX_USART3_UART_Init+0x94>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000c62:	4b1f      	ldr	r3, [pc, #124]	; (8000ce0 <MX_USART3_UART_Init+0x94>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000c68:	4b1d      	ldr	r3, [pc, #116]	; (8000ce0 <MX_USART3_UART_Init+0x94>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000c6e:	4b1c      	ldr	r3, [pc, #112]	; (8000ce0 <MX_USART3_UART_Init+0x94>)
 8000c70:	220c      	movs	r2, #12
 8000c72:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c74:	4b1a      	ldr	r3, [pc, #104]	; (8000ce0 <MX_USART3_UART_Init+0x94>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c7a:	4b19      	ldr	r3, [pc, #100]	; (8000ce0 <MX_USART3_UART_Init+0x94>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c80:	4b17      	ldr	r3, [pc, #92]	; (8000ce0 <MX_USART3_UART_Init+0x94>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c86:	4b16      	ldr	r3, [pc, #88]	; (8000ce0 <MX_USART3_UART_Init+0x94>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c8c:	4b14      	ldr	r3, [pc, #80]	; (8000ce0 <MX_USART3_UART_Init+0x94>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000c92:	4813      	ldr	r0, [pc, #76]	; (8000ce0 <MX_USART3_UART_Init+0x94>)
 8000c94:	f007 fb27 	bl	80082e6 <HAL_UART_Init>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d001      	beq.n	8000ca2 <MX_USART3_UART_Init+0x56>
  {
    Error_Handler();
 8000c9e:	f000 f8c1 	bl	8000e24 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_8_8) != HAL_OK)
 8000ca2:	f04f 4120 	mov.w	r1, #2684354560	; 0xa0000000
 8000ca6:	480e      	ldr	r0, [pc, #56]	; (8000ce0 <MX_USART3_UART_Init+0x94>)
 8000ca8:	f008 fed9 	bl	8009a5e <HAL_UARTEx_SetTxFifoThreshold>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d001      	beq.n	8000cb6 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000cb2:	f000 f8b7 	bl	8000e24 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_8_8) != HAL_OK)
 8000cb6:	f04f 6120 	mov.w	r1, #167772160	; 0xa000000
 8000cba:	4809      	ldr	r0, [pc, #36]	; (8000ce0 <MX_USART3_UART_Init+0x94>)
 8000cbc:	f008 ff0d 	bl	8009ada <HAL_UARTEx_SetRxFifoThreshold>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d001      	beq.n	8000cca <MX_USART3_UART_Init+0x7e>
  {
    Error_Handler();
 8000cc6:	f000 f8ad 	bl	8000e24 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000cca:	4805      	ldr	r0, [pc, #20]	; (8000ce0 <MX_USART3_UART_Init+0x94>)
 8000ccc:	f008 fe8e 	bl	80099ec <HAL_UARTEx_DisableFifoMode>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d001      	beq.n	8000cda <MX_USART3_UART_Init+0x8e>
  {
    Error_Handler();
 8000cd6:	f000 f8a5 	bl	8000e24 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000cda:	bf00      	nop
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	24000540 	.word	0x24000540
 8000ce4:	40004800 	.word	0x40004800
 8000ce8:	000f4240 	.word	0x000f4240

08000cec <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b082      	sub	sp, #8
 8000cf0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000cf2:	4b11      	ldr	r3, [pc, #68]	; (8000d38 <MX_DMA_Init+0x4c>)
 8000cf4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000cf8:	4a0f      	ldr	r2, [pc, #60]	; (8000d38 <MX_DMA_Init+0x4c>)
 8000cfa:	f043 0301 	orr.w	r3, r3, #1
 8000cfe:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000d02:	4b0d      	ldr	r3, [pc, #52]	; (8000d38 <MX_DMA_Init+0x4c>)
 8000d04:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d08:	f003 0301 	and.w	r3, r3, #1
 8000d0c:	607b      	str	r3, [r7, #4]
 8000d0e:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000d10:	2200      	movs	r2, #0
 8000d12:	2100      	movs	r1, #0
 8000d14:	200b      	movs	r0, #11
 8000d16:	f000 fc0a 	bl	800152e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000d1a:	200b      	movs	r0, #11
 8000d1c:	f000 fc21 	bl	8001562 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000d20:	2200      	movs	r2, #0
 8000d22:	2100      	movs	r1, #0
 8000d24:	200c      	movs	r0, #12
 8000d26:	f000 fc02 	bl	800152e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000d2a:	200c      	movs	r0, #12
 8000d2c:	f000 fc19 	bl	8001562 <HAL_NVIC_EnableIRQ>

}
 8000d30:	bf00      	nop
 8000d32:	3708      	adds	r7, #8
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	58024400 	.word	0x58024400

08000d3c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	b085      	sub	sp, #20
 8000d40:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d42:	4b19      	ldr	r3, [pc, #100]	; (8000da8 <MX_GPIO_Init+0x6c>)
 8000d44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d48:	4a17      	ldr	r2, [pc, #92]	; (8000da8 <MX_GPIO_Init+0x6c>)
 8000d4a:	f043 0310 	orr.w	r3, r3, #16
 8000d4e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d52:	4b15      	ldr	r3, [pc, #84]	; (8000da8 <MX_GPIO_Init+0x6c>)
 8000d54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d58:	f003 0310 	and.w	r3, r3, #16
 8000d5c:	60fb      	str	r3, [r7, #12]
 8000d5e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d60:	4b11      	ldr	r3, [pc, #68]	; (8000da8 <MX_GPIO_Init+0x6c>)
 8000d62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d66:	4a10      	ldr	r2, [pc, #64]	; (8000da8 <MX_GPIO_Init+0x6c>)
 8000d68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d6c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d70:	4b0d      	ldr	r3, [pc, #52]	; (8000da8 <MX_GPIO_Init+0x6c>)
 8000d72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d7a:	60bb      	str	r3, [r7, #8]
 8000d7c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d7e:	4b0a      	ldr	r3, [pc, #40]	; (8000da8 <MX_GPIO_Init+0x6c>)
 8000d80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d84:	4a08      	ldr	r2, [pc, #32]	; (8000da8 <MX_GPIO_Init+0x6c>)
 8000d86:	f043 0308 	orr.w	r3, r3, #8
 8000d8a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d8e:	4b06      	ldr	r3, [pc, #24]	; (8000da8 <MX_GPIO_Init+0x6c>)
 8000d90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d94:	f003 0308 	and.w	r3, r3, #8
 8000d98:	607b      	str	r3, [r7, #4]
 8000d9a:	687b      	ldr	r3, [r7, #4]

}
 8000d9c:	bf00      	nop
 8000d9e:	3714      	adds	r7, #20
 8000da0:	46bd      	mov	sp, r7
 8000da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da6:	4770      	bx	lr
 8000da8:	58024400 	.word	0x58024400

08000dac <HAL_SAI_RxHalfCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai){
 8000dac:	b480      	push	{r7}
 8000dae:	b083      	sub	sp, #12
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
	dmaFlag = HALF;
 8000db4:	4b04      	ldr	r3, [pc, #16]	; (8000dc8 <HAL_SAI_RxHalfCpltCallback+0x1c>)
 8000db6:	2201      	movs	r2, #1
 8000db8:	701a      	strb	r2, [r3, #0]
}
 8000dba:	bf00      	nop
 8000dbc:	370c      	adds	r7, #12
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc4:	4770      	bx	lr
 8000dc6:	bf00      	nop
 8000dc8:	24000495 	.word	0x24000495

08000dcc <HAL_SAI_RxCpltCallback>:

void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai){
 8000dcc:	b480      	push	{r7}
 8000dce:	b083      	sub	sp, #12
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
	dmaFlag = FULL;
 8000dd4:	4b04      	ldr	r3, [pc, #16]	; (8000de8 <HAL_SAI_RxCpltCallback+0x1c>)
 8000dd6:	2202      	movs	r2, #2
 8000dd8:	701a      	strb	r2, [r3, #0]
}
 8000dda:	bf00      	nop
 8000ddc:	370c      	adds	r7, #12
 8000dde:	46bd      	mov	sp, r7
 8000de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de4:	4770      	bx	lr
 8000de6:	bf00      	nop
 8000de8:	24000495 	.word	0x24000495

08000dec <HAL_UART_TxHalfCpltCallback>:

void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart){
 8000dec:	b480      	push	{r7}
 8000dee:	b085      	sub	sp, #20
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
	volatile uint32_t h = 1;
 8000df4:	2301      	movs	r3, #1
 8000df6:	60fb      	str	r3, [r7, #12]
}
 8000df8:	bf00      	nop
 8000dfa:	3714      	adds	r7, #20
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e02:	4770      	bx	lr

08000e04 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8000e04:	b480      	push	{r7}
 8000e06:	b083      	sub	sp, #12
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
	uartFlag = READY;
 8000e0c:	4b04      	ldr	r3, [pc, #16]	; (8000e20 <HAL_UART_TxCpltCallback+0x1c>)
 8000e0e:	2201      	movs	r2, #1
 8000e10:	701a      	strb	r2, [r3, #0]
}
 8000e12:	bf00      	nop
 8000e14:	370c      	adds	r7, #12
 8000e16:	46bd      	mov	sp, r7
 8000e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1c:	4770      	bx	lr
 8000e1e:	bf00      	nop
 8000e20:	24000408 	.word	0x24000408

08000e24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000e28:	b672      	cpsid	i
}
 8000e2a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e2c:	e7fe      	b.n	8000e2c <Error_Handler+0x8>
	...

08000e30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	b083      	sub	sp, #12
 8000e34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e36:	4b0a      	ldr	r3, [pc, #40]	; (8000e60 <HAL_MspInit+0x30>)
 8000e38:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000e3c:	4a08      	ldr	r2, [pc, #32]	; (8000e60 <HAL_MspInit+0x30>)
 8000e3e:	f043 0302 	orr.w	r3, r3, #2
 8000e42:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000e46:	4b06      	ldr	r3, [pc, #24]	; (8000e60 <HAL_MspInit+0x30>)
 8000e48:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000e4c:	f003 0302 	and.w	r3, r3, #2
 8000e50:	607b      	str	r3, [r7, #4]
 8000e52:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e54:	bf00      	nop
 8000e56:	370c      	adds	r7, #12
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5e:	4770      	bx	lr
 8000e60:	58024400 	.word	0x58024400

08000e64 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000e64:	b480      	push	{r7}
 8000e66:	b085      	sub	sp, #20
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	4a0b      	ldr	r2, [pc, #44]	; (8000ea0 <HAL_CRC_MspInit+0x3c>)
 8000e72:	4293      	cmp	r3, r2
 8000e74:	d10e      	bne.n	8000e94 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000e76:	4b0b      	ldr	r3, [pc, #44]	; (8000ea4 <HAL_CRC_MspInit+0x40>)
 8000e78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e7c:	4a09      	ldr	r2, [pc, #36]	; (8000ea4 <HAL_CRC_MspInit+0x40>)
 8000e7e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000e82:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e86:	4b07      	ldr	r3, [pc, #28]	; (8000ea4 <HAL_CRC_MspInit+0x40>)
 8000e88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e8c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000e90:	60fb      	str	r3, [r7, #12]
 8000e92:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000e94:	bf00      	nop
 8000e96:	3714      	adds	r7, #20
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9e:	4770      	bx	lr
 8000ea0:	58024c00 	.word	0x58024c00
 8000ea4:	58024400 	.word	0x58024400

08000ea8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b0b8      	sub	sp, #224	; 0xe0
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	601a      	str	r2, [r3, #0]
 8000eb8:	605a      	str	r2, [r3, #4]
 8000eba:	609a      	str	r2, [r3, #8]
 8000ebc:	60da      	str	r2, [r3, #12]
 8000ebe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ec0:	f107 0310 	add.w	r3, r7, #16
 8000ec4:	22bc      	movs	r2, #188	; 0xbc
 8000ec6:	2100      	movs	r1, #0
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f00a fdcf 	bl	800ba6c <memset>
  if(huart->Instance==USART3)
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	4a49      	ldr	r2, [pc, #292]	; (8000ff8 <HAL_UART_MspInit+0x150>)
 8000ed4:	4293      	cmp	r3, r2
 8000ed6:	f040 808a 	bne.w	8000fee <HAL_UART_MspInit+0x146>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000eda:	2302      	movs	r3, #2
 8000edc:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 2;
 8000ede:	2302      	movs	r3, #2
 8000ee0:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL3.PLL3N = 100;
 8000ee2:	2364      	movs	r3, #100	; 0x64
 8000ee4:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8000ee6:	2302      	movs	r3, #2
 8000ee8:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3Q = 4;
 8000eea:	2304      	movs	r3, #4
 8000eec:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 8000eee:	2302      	movs	r3, #2
 8000ef0:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_2;
 8000ef2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000ef6:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8000efc:	2300      	movs	r3, #0
 8000efe:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_PLL3;
 8000f00:	2302      	movs	r3, #2
 8000f02:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f06:	f107 0310 	add.w	r3, r7, #16
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f004 fc48 	bl	80057a0 <HAL_RCCEx_PeriphCLKConfig>
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d001      	beq.n	8000f1a <HAL_UART_MspInit+0x72>
    {
      Error_Handler();
 8000f16:	f7ff ff85 	bl	8000e24 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000f1a:	4b38      	ldr	r3, [pc, #224]	; (8000ffc <HAL_UART_MspInit+0x154>)
 8000f1c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000f20:	4a36      	ldr	r2, [pc, #216]	; (8000ffc <HAL_UART_MspInit+0x154>)
 8000f22:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f26:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000f2a:	4b34      	ldr	r3, [pc, #208]	; (8000ffc <HAL_UART_MspInit+0x154>)
 8000f2c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000f30:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f34:	60fb      	str	r3, [r7, #12]
 8000f36:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f38:	4b30      	ldr	r3, [pc, #192]	; (8000ffc <HAL_UART_MspInit+0x154>)
 8000f3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f3e:	4a2f      	ldr	r2, [pc, #188]	; (8000ffc <HAL_UART_MspInit+0x154>)
 8000f40:	f043 0308 	orr.w	r3, r3, #8
 8000f44:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f48:	4b2c      	ldr	r3, [pc, #176]	; (8000ffc <HAL_UART_MspInit+0x154>)
 8000f4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f4e:	f003 0308 	and.w	r3, r3, #8
 8000f52:	60bb      	str	r3, [r7, #8]
 8000f54:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000f56:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000f5a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f5e:	2302      	movs	r3, #2
 8000f60:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f64:	2300      	movs	r3, #0
 8000f66:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000f70:	2307      	movs	r3, #7
 8000f72:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f76:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	4820      	ldr	r0, [pc, #128]	; (8001000 <HAL_UART_MspInit+0x158>)
 8000f7e:	f003 fa3b 	bl	80043f8 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream1;
 8000f82:	4b20      	ldr	r3, [pc, #128]	; (8001004 <HAL_UART_MspInit+0x15c>)
 8000f84:	4a20      	ldr	r2, [pc, #128]	; (8001008 <HAL_UART_MspInit+0x160>)
 8000f86:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8000f88:	4b1e      	ldr	r3, [pc, #120]	; (8001004 <HAL_UART_MspInit+0x15c>)
 8000f8a:	222e      	movs	r2, #46	; 0x2e
 8000f8c:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000f8e:	4b1d      	ldr	r3, [pc, #116]	; (8001004 <HAL_UART_MspInit+0x15c>)
 8000f90:	2240      	movs	r2, #64	; 0x40
 8000f92:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f94:	4b1b      	ldr	r3, [pc, #108]	; (8001004 <HAL_UART_MspInit+0x15c>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000f9a:	4b1a      	ldr	r3, [pc, #104]	; (8001004 <HAL_UART_MspInit+0x15c>)
 8000f9c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000fa0:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000fa2:	4b18      	ldr	r3, [pc, #96]	; (8001004 <HAL_UART_MspInit+0x15c>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000fa8:	4b16      	ldr	r3, [pc, #88]	; (8001004 <HAL_UART_MspInit+0x15c>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8000fae:	4b15      	ldr	r3, [pc, #84]	; (8001004 <HAL_UART_MspInit+0x15c>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000fb4:	4b13      	ldr	r3, [pc, #76]	; (8001004 <HAL_UART_MspInit+0x15c>)
 8000fb6:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000fba:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000fbc:	4b11      	ldr	r3, [pc, #68]	; (8001004 <HAL_UART_MspInit+0x15c>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8000fc2:	4810      	ldr	r0, [pc, #64]	; (8001004 <HAL_UART_MspInit+0x15c>)
 8000fc4:	f000 fbd2 	bl	800176c <HAL_DMA_Init>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d001      	beq.n	8000fd2 <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 8000fce:	f7ff ff29 	bl	8000e24 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	4a0b      	ldr	r2, [pc, #44]	; (8001004 <HAL_UART_MspInit+0x15c>)
 8000fd6:	679a      	str	r2, [r3, #120]	; 0x78
 8000fd8:	4a0a      	ldr	r2, [pc, #40]	; (8001004 <HAL_UART_MspInit+0x15c>)
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000fde:	2200      	movs	r2, #0
 8000fe0:	2100      	movs	r1, #0
 8000fe2:	2027      	movs	r0, #39	; 0x27
 8000fe4:	f000 faa3 	bl	800152e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000fe8:	2027      	movs	r0, #39	; 0x27
 8000fea:	f000 faba 	bl	8001562 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000fee:	bf00      	nop
 8000ff0:	37e0      	adds	r7, #224	; 0xe0
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	40004800 	.word	0x40004800
 8000ffc:	58024400 	.word	0x58024400
 8001000:	58020c00 	.word	0x58020c00
 8001004:	240005f4 	.word	0x240005f4
 8001008:	40020028 	.word	0x40020028

0800100c <HAL_SAI_MspInit>:
extern DMA_HandleTypeDef hdma_sai1_a;

static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b0b8      	sub	sp, #224	; 0xe0
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001014:	f107 0310 	add.w	r3, r7, #16
 8001018:	22bc      	movs	r2, #188	; 0xbc
 800101a:	2100      	movs	r1, #0
 800101c:	4618      	mov	r0, r3
 800101e:	f00a fd25 	bl	800ba6c <memset>
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	4a46      	ldr	r2, [pc, #280]	; (8001140 <HAL_SAI_MspInit+0x134>)
 8001028:	4293      	cmp	r3, r2
 800102a:	f040 8085 	bne.w	8001138 <HAL_SAI_MspInit+0x12c>
    {
    /* Peripheral clock enable */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 800102e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001032:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 4;
 8001034:	2304      	movs	r3, #4
 8001036:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLL2.PLL2N = 129;
 8001038:	2381      	movs	r3, #129	; 0x81
 800103a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2P = 3;
 800103c:	2303      	movs	r3, #3
 800103e:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001040:	2302      	movs	r3, #2
 8001042:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001044:	2302      	movs	r3, #2
 8001046:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_1;
 8001048:	2340      	movs	r3, #64	; 0x40
 800104a:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 800104c:	2300      	movs	r3, #0
 800104e:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001050:	2300      	movs	r3, #0
 8001052:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL2;
 8001054:	2301      	movs	r3, #1
 8001056:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001058:	f107 0310 	add.w	r3, r7, #16
 800105c:	4618      	mov	r0, r3
 800105e:	f004 fb9f 	bl	80057a0 <HAL_RCCEx_PeriphCLKConfig>
 8001062:	4603      	mov	r3, r0
 8001064:	2b00      	cmp	r3, #0
 8001066:	d001      	beq.n	800106c <HAL_SAI_MspInit+0x60>
    {
      Error_Handler();
 8001068:	f7ff fedc 	bl	8000e24 <Error_Handler>
    }

    if (SAI1_client == 0)
 800106c:	4b35      	ldr	r3, [pc, #212]	; (8001144 <HAL_SAI_MspInit+0x138>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	2b00      	cmp	r3, #0
 8001072:	d10e      	bne.n	8001092 <HAL_SAI_MspInit+0x86>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8001074:	4b34      	ldr	r3, [pc, #208]	; (8001148 <HAL_SAI_MspInit+0x13c>)
 8001076:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800107a:	4a33      	ldr	r2, [pc, #204]	; (8001148 <HAL_SAI_MspInit+0x13c>)
 800107c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001080:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001084:	4b30      	ldr	r3, [pc, #192]	; (8001148 <HAL_SAI_MspInit+0x13c>)
 8001086:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800108a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800108e:	60fb      	str	r3, [r7, #12]
 8001090:	68fb      	ldr	r3, [r7, #12]
    }
    SAI1_client ++;
 8001092:	4b2c      	ldr	r3, [pc, #176]	; (8001144 <HAL_SAI_MspInit+0x138>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	3301      	adds	r3, #1
 8001098:	4a2a      	ldr	r2, [pc, #168]	; (8001144 <HAL_SAI_MspInit+0x138>)
 800109a:	6013      	str	r3, [r2, #0]

    /**SAI1_A_Block_A GPIO Configuration
    PE2     ------> SAI1_CK1
    PE6     ------> SAI1_D1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_6;
 800109c:	2344      	movs	r3, #68	; 0x44
 800109e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010a2:	2302      	movs	r3, #2
 80010a4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a8:	2300      	movs	r3, #0
 80010aa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ae:	2300      	movs	r3, #0
 80010b0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF2_SAI1;
 80010b4:	2302      	movs	r3, #2
 80010b6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80010ba:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80010be:	4619      	mov	r1, r3
 80010c0:	4822      	ldr	r0, [pc, #136]	; (800114c <HAL_SAI_MspInit+0x140>)
 80010c2:	f003 f999 	bl	80043f8 <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai1_a.Instance = DMA1_Stream0;
 80010c6:	4b22      	ldr	r3, [pc, #136]	; (8001150 <HAL_SAI_MspInit+0x144>)
 80010c8:	4a22      	ldr	r2, [pc, #136]	; (8001154 <HAL_SAI_MspInit+0x148>)
 80010ca:	601a      	str	r2, [r3, #0]
    hdma_sai1_a.Init.Request = DMA_REQUEST_SAI1_A;
 80010cc:	4b20      	ldr	r3, [pc, #128]	; (8001150 <HAL_SAI_MspInit+0x144>)
 80010ce:	2257      	movs	r2, #87	; 0x57
 80010d0:	605a      	str	r2, [r3, #4]
    hdma_sai1_a.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80010d2:	4b1f      	ldr	r3, [pc, #124]	; (8001150 <HAL_SAI_MspInit+0x144>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	609a      	str	r2, [r3, #8]
    hdma_sai1_a.Init.PeriphInc = DMA_PINC_DISABLE;
 80010d8:	4b1d      	ldr	r3, [pc, #116]	; (8001150 <HAL_SAI_MspInit+0x144>)
 80010da:	2200      	movs	r2, #0
 80010dc:	60da      	str	r2, [r3, #12]
    hdma_sai1_a.Init.MemInc = DMA_MINC_ENABLE;
 80010de:	4b1c      	ldr	r3, [pc, #112]	; (8001150 <HAL_SAI_MspInit+0x144>)
 80010e0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80010e4:	611a      	str	r2, [r3, #16]
    hdma_sai1_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80010e6:	4b1a      	ldr	r3, [pc, #104]	; (8001150 <HAL_SAI_MspInit+0x144>)
 80010e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80010ec:	615a      	str	r2, [r3, #20]
    hdma_sai1_a.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80010ee:	4b18      	ldr	r3, [pc, #96]	; (8001150 <HAL_SAI_MspInit+0x144>)
 80010f0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80010f4:	619a      	str	r2, [r3, #24]
    hdma_sai1_a.Init.Mode = DMA_CIRCULAR;
 80010f6:	4b16      	ldr	r3, [pc, #88]	; (8001150 <HAL_SAI_MspInit+0x144>)
 80010f8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80010fc:	61da      	str	r2, [r3, #28]
    hdma_sai1_a.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80010fe:	4b14      	ldr	r3, [pc, #80]	; (8001150 <HAL_SAI_MspInit+0x144>)
 8001100:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001104:	621a      	str	r2, [r3, #32]
    hdma_sai1_a.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001106:	4b12      	ldr	r3, [pc, #72]	; (8001150 <HAL_SAI_MspInit+0x144>)
 8001108:	2200      	movs	r2, #0
 800110a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
 800110c:	4810      	ldr	r0, [pc, #64]	; (8001150 <HAL_SAI_MspInit+0x144>)
 800110e:	f000 fb2d 	bl	800176c <HAL_DMA_Init>
 8001112:	4603      	mov	r3, r0
 8001114:	2b00      	cmp	r3, #0
 8001116:	d001      	beq.n	800111c <HAL_SAI_MspInit+0x110>
    {
      Error_Handler();
 8001118:	f7ff fe84 	bl	8000e24 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_a);
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	4a0c      	ldr	r2, [pc, #48]	; (8001150 <HAL_SAI_MspInit+0x144>)
 8001120:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8001124:	4a0a      	ldr	r2, [pc, #40]	; (8001150 <HAL_SAI_MspInit+0x144>)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	6393      	str	r3, [r2, #56]	; 0x38

    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_a);
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	4a08      	ldr	r2, [pc, #32]	; (8001150 <HAL_SAI_MspInit+0x144>)
 800112e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8001132:	4a07      	ldr	r2, [pc, #28]	; (8001150 <HAL_SAI_MspInit+0x144>)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	6393      	str	r3, [r2, #56]	; 0x38

    }
}
 8001138:	bf00      	nop
 800113a:	37e0      	adds	r7, #224	; 0xe0
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}
 8001140:	40015804 	.word	0x40015804
 8001144:	24000498 	.word	0x24000498
 8001148:	58024400 	.word	0x58024400
 800114c:	58021000 	.word	0x58021000
 8001150:	2400066c 	.word	0x2400066c
 8001154:	40020010 	.word	0x40020010

08001158 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800115c:	e7fe      	b.n	800115c <NMI_Handler+0x4>

0800115e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800115e:	b480      	push	{r7}
 8001160:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001162:	e7fe      	b.n	8001162 <HardFault_Handler+0x4>

08001164 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001168:	e7fe      	b.n	8001168 <MemManage_Handler+0x4>

0800116a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800116a:	b480      	push	{r7}
 800116c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800116e:	e7fe      	b.n	800116e <BusFault_Handler+0x4>

08001170 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001174:	e7fe      	b.n	8001174 <UsageFault_Handler+0x4>

08001176 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001176:	b480      	push	{r7}
 8001178:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800117a:	bf00      	nop
 800117c:	46bd      	mov	sp, r7
 800117e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001182:	4770      	bx	lr

08001184 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001188:	bf00      	nop
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr

08001192 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001192:	b480      	push	{r7}
 8001194:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001196:	bf00      	nop
 8001198:	46bd      	mov	sp, r7
 800119a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119e:	4770      	bx	lr

080011a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011a4:	f000 f8bc 	bl	8001320 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011a8:	bf00      	nop
 80011aa:	bd80      	pop	{r7, pc}

080011ac <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_a);
 80011b0:	4802      	ldr	r0, [pc, #8]	; (80011bc <DMA1_Stream0_IRQHandler+0x10>)
 80011b2:	f001 fe03 	bl	8002dbc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80011b6:	bf00      	nop
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	2400066c 	.word	0x2400066c

080011c0 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 80011c4:	4802      	ldr	r0, [pc, #8]	; (80011d0 <DMA1_Stream1_IRQHandler+0x10>)
 80011c6:	f001 fdf9 	bl	8002dbc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80011ca:	bf00      	nop
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	240005f4 	.word	0x240005f4

080011d4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80011d8:	4802      	ldr	r0, [pc, #8]	; (80011e4 <USART3_IRQHandler+0x10>)
 80011da:	f007 f955 	bl	8008488 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80011de:	bf00      	nop
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	24000540 	.word	0x24000540

080011e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80011e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001220 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80011ec:	f7ff f9f0 	bl	80005d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011f0:	480c      	ldr	r0, [pc, #48]	; (8001224 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80011f2:	490d      	ldr	r1, [pc, #52]	; (8001228 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80011f4:	4a0d      	ldr	r2, [pc, #52]	; (800122c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80011f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011f8:	e002      	b.n	8001200 <LoopCopyDataInit>

080011fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011fe:	3304      	adds	r3, #4

08001200 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001200:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001202:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001204:	d3f9      	bcc.n	80011fa <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001206:	4a0a      	ldr	r2, [pc, #40]	; (8001230 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001208:	4c0a      	ldr	r4, [pc, #40]	; (8001234 <LoopFillZerobss+0x22>)
  movs r3, #0
 800120a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800120c:	e001      	b.n	8001212 <LoopFillZerobss>

0800120e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800120e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001210:	3204      	adds	r2, #4

08001212 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001212:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001214:	d3fb      	bcc.n	800120e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001216:	f00a fc05 	bl	800ba24 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800121a:	f7ff fae7 	bl	80007ec <main>
  bx  lr
 800121e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001220:	24040000 	.word	0x24040000
  ldr r0, =_sdata
 8001224:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001228:	24000478 	.word	0x24000478
  ldr r2, =_sidata
 800122c:	0800c118 	.word	0x0800c118
  ldr r2, =_sbss
 8001230:	24000478 	.word	0x24000478
  ldr r4, =_ebss
 8001234:	24000828 	.word	0x24000828

08001238 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001238:	e7fe      	b.n	8001238 <ADC3_IRQHandler>
	...

0800123c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001242:	2003      	movs	r0, #3
 8001244:	f000 f968 	bl	8001518 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001248:	f004 f8d4 	bl	80053f4 <HAL_RCC_GetSysClockFreq>
 800124c:	4602      	mov	r2, r0
 800124e:	4b15      	ldr	r3, [pc, #84]	; (80012a4 <HAL_Init+0x68>)
 8001250:	699b      	ldr	r3, [r3, #24]
 8001252:	0a1b      	lsrs	r3, r3, #8
 8001254:	f003 030f 	and.w	r3, r3, #15
 8001258:	4913      	ldr	r1, [pc, #76]	; (80012a8 <HAL_Init+0x6c>)
 800125a:	5ccb      	ldrb	r3, [r1, r3]
 800125c:	f003 031f 	and.w	r3, r3, #31
 8001260:	fa22 f303 	lsr.w	r3, r2, r3
 8001264:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001266:	4b0f      	ldr	r3, [pc, #60]	; (80012a4 <HAL_Init+0x68>)
 8001268:	699b      	ldr	r3, [r3, #24]
 800126a:	f003 030f 	and.w	r3, r3, #15
 800126e:	4a0e      	ldr	r2, [pc, #56]	; (80012a8 <HAL_Init+0x6c>)
 8001270:	5cd3      	ldrb	r3, [r2, r3]
 8001272:	f003 031f 	and.w	r3, r3, #31
 8001276:	687a      	ldr	r2, [r7, #4]
 8001278:	fa22 f303 	lsr.w	r3, r2, r3
 800127c:	4a0b      	ldr	r2, [pc, #44]	; (80012ac <HAL_Init+0x70>)
 800127e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001280:	4a0b      	ldr	r2, [pc, #44]	; (80012b0 <HAL_Init+0x74>)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001286:	2000      	movs	r0, #0
 8001288:	f000 f814 	bl	80012b4 <HAL_InitTick>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d001      	beq.n	8001296 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001292:	2301      	movs	r3, #1
 8001294:	e002      	b.n	800129c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001296:	f7ff fdcb 	bl	8000e30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800129a:	2300      	movs	r3, #0
}
 800129c:	4618      	mov	r0, r3
 800129e:	3708      	adds	r7, #8
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	58024400 	.word	0x58024400
 80012a8:	0800be58 	.word	0x0800be58
 80012ac:	24000404 	.word	0x24000404
 80012b0:	24000400 	.word	0x24000400

080012b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b082      	sub	sp, #8
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80012bc:	4b15      	ldr	r3, [pc, #84]	; (8001314 <HAL_InitTick+0x60>)
 80012be:	781b      	ldrb	r3, [r3, #0]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d101      	bne.n	80012c8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80012c4:	2301      	movs	r3, #1
 80012c6:	e021      	b.n	800130c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80012c8:	4b13      	ldr	r3, [pc, #76]	; (8001318 <HAL_InitTick+0x64>)
 80012ca:	681a      	ldr	r2, [r3, #0]
 80012cc:	4b11      	ldr	r3, [pc, #68]	; (8001314 <HAL_InitTick+0x60>)
 80012ce:	781b      	ldrb	r3, [r3, #0]
 80012d0:	4619      	mov	r1, r3
 80012d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80012da:	fbb2 f3f3 	udiv	r3, r2, r3
 80012de:	4618      	mov	r0, r3
 80012e0:	f000 f94d 	bl	800157e <HAL_SYSTICK_Config>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d001      	beq.n	80012ee <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80012ea:	2301      	movs	r3, #1
 80012ec:	e00e      	b.n	800130c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	2b0f      	cmp	r3, #15
 80012f2:	d80a      	bhi.n	800130a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012f4:	2200      	movs	r2, #0
 80012f6:	6879      	ldr	r1, [r7, #4]
 80012f8:	f04f 30ff 	mov.w	r0, #4294967295
 80012fc:	f000 f917 	bl	800152e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001300:	4a06      	ldr	r2, [pc, #24]	; (800131c <HAL_InitTick+0x68>)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001306:	2300      	movs	r3, #0
 8001308:	e000      	b.n	800130c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800130a:	2301      	movs	r3, #1
}
 800130c:	4618      	mov	r0, r3
 800130e:	3708      	adds	r7, #8
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}
 8001314:	24000410 	.word	0x24000410
 8001318:	24000400 	.word	0x24000400
 800131c:	2400040c 	.word	0x2400040c

08001320 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001324:	4b06      	ldr	r3, [pc, #24]	; (8001340 <HAL_IncTick+0x20>)
 8001326:	781b      	ldrb	r3, [r3, #0]
 8001328:	461a      	mov	r2, r3
 800132a:	4b06      	ldr	r3, [pc, #24]	; (8001344 <HAL_IncTick+0x24>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	4413      	add	r3, r2
 8001330:	4a04      	ldr	r2, [pc, #16]	; (8001344 <HAL_IncTick+0x24>)
 8001332:	6013      	str	r3, [r2, #0]
}
 8001334:	bf00      	nop
 8001336:	46bd      	mov	sp, r7
 8001338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133c:	4770      	bx	lr
 800133e:	bf00      	nop
 8001340:	24000410 	.word	0x24000410
 8001344:	2400077c 	.word	0x2400077c

08001348 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001348:	b480      	push	{r7}
 800134a:	af00      	add	r7, sp, #0
  return uwTick;
 800134c:	4b03      	ldr	r3, [pc, #12]	; (800135c <HAL_GetTick+0x14>)
 800134e:	681b      	ldr	r3, [r3, #0]
}
 8001350:	4618      	mov	r0, r3
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr
 800135a:	bf00      	nop
 800135c:	2400077c 	.word	0x2400077c

08001360 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001364:	4b03      	ldr	r3, [pc, #12]	; (8001374 <HAL_GetREVID+0x14>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	0c1b      	lsrs	r3, r3, #16
}
 800136a:	4618      	mov	r0, r3
 800136c:	46bd      	mov	sp, r7
 800136e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001372:	4770      	bx	lr
 8001374:	5c001000 	.word	0x5c001000

08001378 <__NVIC_SetPriorityGrouping>:
{
 8001378:	b480      	push	{r7}
 800137a:	b085      	sub	sp, #20
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	f003 0307 	and.w	r3, r3, #7
 8001386:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001388:	4b0b      	ldr	r3, [pc, #44]	; (80013b8 <__NVIC_SetPriorityGrouping+0x40>)
 800138a:	68db      	ldr	r3, [r3, #12]
 800138c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800138e:	68ba      	ldr	r2, [r7, #8]
 8001390:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001394:	4013      	ands	r3, r2
 8001396:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800139c:	68bb      	ldr	r3, [r7, #8]
 800139e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80013a0:	4b06      	ldr	r3, [pc, #24]	; (80013bc <__NVIC_SetPriorityGrouping+0x44>)
 80013a2:	4313      	orrs	r3, r2
 80013a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013a6:	4a04      	ldr	r2, [pc, #16]	; (80013b8 <__NVIC_SetPriorityGrouping+0x40>)
 80013a8:	68bb      	ldr	r3, [r7, #8]
 80013aa:	60d3      	str	r3, [r2, #12]
}
 80013ac:	bf00      	nop
 80013ae:	3714      	adds	r7, #20
 80013b0:	46bd      	mov	sp, r7
 80013b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b6:	4770      	bx	lr
 80013b8:	e000ed00 	.word	0xe000ed00
 80013bc:	05fa0000 	.word	0x05fa0000

080013c0 <__NVIC_GetPriorityGrouping>:
{
 80013c0:	b480      	push	{r7}
 80013c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013c4:	4b04      	ldr	r3, [pc, #16]	; (80013d8 <__NVIC_GetPriorityGrouping+0x18>)
 80013c6:	68db      	ldr	r3, [r3, #12]
 80013c8:	0a1b      	lsrs	r3, r3, #8
 80013ca:	f003 0307 	and.w	r3, r3, #7
}
 80013ce:	4618      	mov	r0, r3
 80013d0:	46bd      	mov	sp, r7
 80013d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d6:	4770      	bx	lr
 80013d8:	e000ed00 	.word	0xe000ed00

080013dc <__NVIC_EnableIRQ>:
{
 80013dc:	b480      	push	{r7}
 80013de:	b083      	sub	sp, #12
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	4603      	mov	r3, r0
 80013e4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80013e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	db0b      	blt.n	8001406 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013ee:	88fb      	ldrh	r3, [r7, #6]
 80013f0:	f003 021f 	and.w	r2, r3, #31
 80013f4:	4907      	ldr	r1, [pc, #28]	; (8001414 <__NVIC_EnableIRQ+0x38>)
 80013f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013fa:	095b      	lsrs	r3, r3, #5
 80013fc:	2001      	movs	r0, #1
 80013fe:	fa00 f202 	lsl.w	r2, r0, r2
 8001402:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001406:	bf00      	nop
 8001408:	370c      	adds	r7, #12
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr
 8001412:	bf00      	nop
 8001414:	e000e100 	.word	0xe000e100

08001418 <__NVIC_SetPriority>:
{
 8001418:	b480      	push	{r7}
 800141a:	b083      	sub	sp, #12
 800141c:	af00      	add	r7, sp, #0
 800141e:	4603      	mov	r3, r0
 8001420:	6039      	str	r1, [r7, #0]
 8001422:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001424:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001428:	2b00      	cmp	r3, #0
 800142a:	db0a      	blt.n	8001442 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	b2da      	uxtb	r2, r3
 8001430:	490c      	ldr	r1, [pc, #48]	; (8001464 <__NVIC_SetPriority+0x4c>)
 8001432:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001436:	0112      	lsls	r2, r2, #4
 8001438:	b2d2      	uxtb	r2, r2
 800143a:	440b      	add	r3, r1
 800143c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001440:	e00a      	b.n	8001458 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	b2da      	uxtb	r2, r3
 8001446:	4908      	ldr	r1, [pc, #32]	; (8001468 <__NVIC_SetPriority+0x50>)
 8001448:	88fb      	ldrh	r3, [r7, #6]
 800144a:	f003 030f 	and.w	r3, r3, #15
 800144e:	3b04      	subs	r3, #4
 8001450:	0112      	lsls	r2, r2, #4
 8001452:	b2d2      	uxtb	r2, r2
 8001454:	440b      	add	r3, r1
 8001456:	761a      	strb	r2, [r3, #24]
}
 8001458:	bf00      	nop
 800145a:	370c      	adds	r7, #12
 800145c:	46bd      	mov	sp, r7
 800145e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001462:	4770      	bx	lr
 8001464:	e000e100 	.word	0xe000e100
 8001468:	e000ed00 	.word	0xe000ed00

0800146c <NVIC_EncodePriority>:
{
 800146c:	b480      	push	{r7}
 800146e:	b089      	sub	sp, #36	; 0x24
 8001470:	af00      	add	r7, sp, #0
 8001472:	60f8      	str	r0, [r7, #12]
 8001474:	60b9      	str	r1, [r7, #8]
 8001476:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	f003 0307 	and.w	r3, r3, #7
 800147e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001480:	69fb      	ldr	r3, [r7, #28]
 8001482:	f1c3 0307 	rsb	r3, r3, #7
 8001486:	2b04      	cmp	r3, #4
 8001488:	bf28      	it	cs
 800148a:	2304      	movcs	r3, #4
 800148c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800148e:	69fb      	ldr	r3, [r7, #28]
 8001490:	3304      	adds	r3, #4
 8001492:	2b06      	cmp	r3, #6
 8001494:	d902      	bls.n	800149c <NVIC_EncodePriority+0x30>
 8001496:	69fb      	ldr	r3, [r7, #28]
 8001498:	3b03      	subs	r3, #3
 800149a:	e000      	b.n	800149e <NVIC_EncodePriority+0x32>
 800149c:	2300      	movs	r3, #0
 800149e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014a0:	f04f 32ff 	mov.w	r2, #4294967295
 80014a4:	69bb      	ldr	r3, [r7, #24]
 80014a6:	fa02 f303 	lsl.w	r3, r2, r3
 80014aa:	43da      	mvns	r2, r3
 80014ac:	68bb      	ldr	r3, [r7, #8]
 80014ae:	401a      	ands	r2, r3
 80014b0:	697b      	ldr	r3, [r7, #20]
 80014b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014b4:	f04f 31ff 	mov.w	r1, #4294967295
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	fa01 f303 	lsl.w	r3, r1, r3
 80014be:	43d9      	mvns	r1, r3
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014c4:	4313      	orrs	r3, r2
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	3724      	adds	r7, #36	; 0x24
 80014ca:	46bd      	mov	sp, r7
 80014cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d0:	4770      	bx	lr
	...

080014d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b082      	sub	sp, #8
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	3b01      	subs	r3, #1
 80014e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014e4:	d301      	bcc.n	80014ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014e6:	2301      	movs	r3, #1
 80014e8:	e00f      	b.n	800150a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014ea:	4a0a      	ldr	r2, [pc, #40]	; (8001514 <SysTick_Config+0x40>)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	3b01      	subs	r3, #1
 80014f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014f2:	210f      	movs	r1, #15
 80014f4:	f04f 30ff 	mov.w	r0, #4294967295
 80014f8:	f7ff ff8e 	bl	8001418 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014fc:	4b05      	ldr	r3, [pc, #20]	; (8001514 <SysTick_Config+0x40>)
 80014fe:	2200      	movs	r2, #0
 8001500:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001502:	4b04      	ldr	r3, [pc, #16]	; (8001514 <SysTick_Config+0x40>)
 8001504:	2207      	movs	r2, #7
 8001506:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001508:	2300      	movs	r3, #0
}
 800150a:	4618      	mov	r0, r3
 800150c:	3708      	adds	r7, #8
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	e000e010 	.word	0xe000e010

08001518 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b082      	sub	sp, #8
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001520:	6878      	ldr	r0, [r7, #4]
 8001522:	f7ff ff29 	bl	8001378 <__NVIC_SetPriorityGrouping>
}
 8001526:	bf00      	nop
 8001528:	3708      	adds	r7, #8
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}

0800152e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800152e:	b580      	push	{r7, lr}
 8001530:	b086      	sub	sp, #24
 8001532:	af00      	add	r7, sp, #0
 8001534:	4603      	mov	r3, r0
 8001536:	60b9      	str	r1, [r7, #8]
 8001538:	607a      	str	r2, [r7, #4]
 800153a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800153c:	f7ff ff40 	bl	80013c0 <__NVIC_GetPriorityGrouping>
 8001540:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001542:	687a      	ldr	r2, [r7, #4]
 8001544:	68b9      	ldr	r1, [r7, #8]
 8001546:	6978      	ldr	r0, [r7, #20]
 8001548:	f7ff ff90 	bl	800146c <NVIC_EncodePriority>
 800154c:	4602      	mov	r2, r0
 800154e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001552:	4611      	mov	r1, r2
 8001554:	4618      	mov	r0, r3
 8001556:	f7ff ff5f 	bl	8001418 <__NVIC_SetPriority>
}
 800155a:	bf00      	nop
 800155c:	3718      	adds	r7, #24
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}

08001562 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001562:	b580      	push	{r7, lr}
 8001564:	b082      	sub	sp, #8
 8001566:	af00      	add	r7, sp, #0
 8001568:	4603      	mov	r3, r0
 800156a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800156c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001570:	4618      	mov	r0, r3
 8001572:	f7ff ff33 	bl	80013dc <__NVIC_EnableIRQ>
}
 8001576:	bf00      	nop
 8001578:	3708      	adds	r7, #8
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}

0800157e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800157e:	b580      	push	{r7, lr}
 8001580:	b082      	sub	sp, #8
 8001582:	af00      	add	r7, sp, #0
 8001584:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001586:	6878      	ldr	r0, [r7, #4]
 8001588:	f7ff ffa4 	bl	80014d4 <SysTick_Config>
 800158c:	4603      	mov	r3, r0
}
 800158e:	4618      	mov	r0, r3
 8001590:	3708      	adds	r7, #8
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
	...

08001598 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b082      	sub	sp, #8
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d101      	bne.n	80015aa <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80015a6:	2301      	movs	r3, #1
 80015a8:	e054      	b.n	8001654 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	7f5b      	ldrb	r3, [r3, #29]
 80015ae:	b2db      	uxtb	r3, r3
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d105      	bne.n	80015c0 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2200      	movs	r2, #0
 80015b8:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80015ba:	6878      	ldr	r0, [r7, #4]
 80015bc:	f7ff fc52 	bl	8000e64 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	2202      	movs	r2, #2
 80015c4:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	791b      	ldrb	r3, [r3, #4]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d10c      	bne.n	80015e8 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4a22      	ldr	r2, [pc, #136]	; (800165c <HAL_CRC_Init+0xc4>)
 80015d4:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	689a      	ldr	r2, [r3, #8]
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f022 0218 	bic.w	r2, r2, #24
 80015e4:	609a      	str	r2, [r3, #8]
 80015e6:	e00c      	b.n	8001602 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6899      	ldr	r1, [r3, #8]
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	68db      	ldr	r3, [r3, #12]
 80015f0:	461a      	mov	r2, r3
 80015f2:	6878      	ldr	r0, [r7, #4]
 80015f4:	f000 f834 	bl	8001660 <HAL_CRCEx_Polynomial_Set>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d001      	beq.n	8001602 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80015fe:	2301      	movs	r3, #1
 8001600:	e028      	b.n	8001654 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	795b      	ldrb	r3, [r3, #5]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d105      	bne.n	8001616 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f04f 32ff 	mov.w	r2, #4294967295
 8001612:	611a      	str	r2, [r3, #16]
 8001614:	e004      	b.n	8001620 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	687a      	ldr	r2, [r7, #4]
 800161c:	6912      	ldr	r2, [r2, #16]
 800161e:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	689b      	ldr	r3, [r3, #8]
 8001626:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	695a      	ldr	r2, [r3, #20]
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	430a      	orrs	r2, r1
 8001634:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	689b      	ldr	r3, [r3, #8]
 800163c:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	699a      	ldr	r2, [r3, #24]
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	430a      	orrs	r2, r1
 800164a:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	2201      	movs	r2, #1
 8001650:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8001652:	2300      	movs	r3, #0
}
 8001654:	4618      	mov	r0, r3
 8001656:	3708      	adds	r7, #8
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}
 800165c:	04c11db7 	.word	0x04c11db7

08001660 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8001660:	b480      	push	{r7}
 8001662:	b087      	sub	sp, #28
 8001664:	af00      	add	r7, sp, #0
 8001666:	60f8      	str	r0, [r7, #12]
 8001668:	60b9      	str	r1, [r7, #8]
 800166a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800166c:	2300      	movs	r3, #0
 800166e:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8001670:	231f      	movs	r3, #31
 8001672:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8001674:	bf00      	nop
 8001676:	693b      	ldr	r3, [r7, #16]
 8001678:	1e5a      	subs	r2, r3, #1
 800167a:	613a      	str	r2, [r7, #16]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d009      	beq.n	8001694 <HAL_CRCEx_Polynomial_Set+0x34>
 8001680:	693b      	ldr	r3, [r7, #16]
 8001682:	f003 031f 	and.w	r3, r3, #31
 8001686:	68ba      	ldr	r2, [r7, #8]
 8001688:	fa22 f303 	lsr.w	r3, r2, r3
 800168c:	f003 0301 	and.w	r3, r3, #1
 8001690:	2b00      	cmp	r3, #0
 8001692:	d0f0      	beq.n	8001676 <HAL_CRCEx_Polynomial_Set+0x16>
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2b18      	cmp	r3, #24
 8001698:	d846      	bhi.n	8001728 <HAL_CRCEx_Polynomial_Set+0xc8>
 800169a:	a201      	add	r2, pc, #4	; (adr r2, 80016a0 <HAL_CRCEx_Polynomial_Set+0x40>)
 800169c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016a0:	0800172f 	.word	0x0800172f
 80016a4:	08001729 	.word	0x08001729
 80016a8:	08001729 	.word	0x08001729
 80016ac:	08001729 	.word	0x08001729
 80016b0:	08001729 	.word	0x08001729
 80016b4:	08001729 	.word	0x08001729
 80016b8:	08001729 	.word	0x08001729
 80016bc:	08001729 	.word	0x08001729
 80016c0:	0800171d 	.word	0x0800171d
 80016c4:	08001729 	.word	0x08001729
 80016c8:	08001729 	.word	0x08001729
 80016cc:	08001729 	.word	0x08001729
 80016d0:	08001729 	.word	0x08001729
 80016d4:	08001729 	.word	0x08001729
 80016d8:	08001729 	.word	0x08001729
 80016dc:	08001729 	.word	0x08001729
 80016e0:	08001711 	.word	0x08001711
 80016e4:	08001729 	.word	0x08001729
 80016e8:	08001729 	.word	0x08001729
 80016ec:	08001729 	.word	0x08001729
 80016f0:	08001729 	.word	0x08001729
 80016f4:	08001729 	.word	0x08001729
 80016f8:	08001729 	.word	0x08001729
 80016fc:	08001729 	.word	0x08001729
 8001700:	08001705 	.word	0x08001705
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8001704:	693b      	ldr	r3, [r7, #16]
 8001706:	2b06      	cmp	r3, #6
 8001708:	d913      	bls.n	8001732 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 800170a:	2301      	movs	r3, #1
 800170c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800170e:	e010      	b.n	8001732 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8001710:	693b      	ldr	r3, [r7, #16]
 8001712:	2b07      	cmp	r3, #7
 8001714:	d90f      	bls.n	8001736 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8001716:	2301      	movs	r3, #1
 8001718:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800171a:	e00c      	b.n	8001736 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 800171c:	693b      	ldr	r3, [r7, #16]
 800171e:	2b0f      	cmp	r3, #15
 8001720:	d90b      	bls.n	800173a <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8001722:	2301      	movs	r3, #1
 8001724:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8001726:	e008      	b.n	800173a <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8001728:	2301      	movs	r3, #1
 800172a:	75fb      	strb	r3, [r7, #23]
      break;
 800172c:	e006      	b.n	800173c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800172e:	bf00      	nop
 8001730:	e004      	b.n	800173c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001732:	bf00      	nop
 8001734:	e002      	b.n	800173c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001736:	bf00      	nop
 8001738:	e000      	b.n	800173c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800173a:	bf00      	nop
  }
  if (status == HAL_OK)
 800173c:	7dfb      	ldrb	r3, [r7, #23]
 800173e:	2b00      	cmp	r3, #0
 8001740:	d10d      	bne.n	800175e <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	68ba      	ldr	r2, [r7, #8]
 8001748:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	689b      	ldr	r3, [r3, #8]
 8001750:	f023 0118 	bic.w	r1, r3, #24
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	687a      	ldr	r2, [r7, #4]
 800175a:	430a      	orrs	r2, r1
 800175c:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800175e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001760:	4618      	mov	r0, r3
 8001762:	371c      	adds	r7, #28
 8001764:	46bd      	mov	sp, r7
 8001766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176a:	4770      	bx	lr

0800176c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b086      	sub	sp, #24
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001774:	f7ff fde8 	bl	8001348 <HAL_GetTick>
 8001778:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d101      	bne.n	8001784 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001780:	2301      	movs	r3, #1
 8001782:	e316      	b.n	8001db2 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a66      	ldr	r2, [pc, #408]	; (8001924 <HAL_DMA_Init+0x1b8>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d04a      	beq.n	8001824 <HAL_DMA_Init+0xb8>
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4a65      	ldr	r2, [pc, #404]	; (8001928 <HAL_DMA_Init+0x1bc>)
 8001794:	4293      	cmp	r3, r2
 8001796:	d045      	beq.n	8001824 <HAL_DMA_Init+0xb8>
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4a63      	ldr	r2, [pc, #396]	; (800192c <HAL_DMA_Init+0x1c0>)
 800179e:	4293      	cmp	r3, r2
 80017a0:	d040      	beq.n	8001824 <HAL_DMA_Init+0xb8>
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	4a62      	ldr	r2, [pc, #392]	; (8001930 <HAL_DMA_Init+0x1c4>)
 80017a8:	4293      	cmp	r3, r2
 80017aa:	d03b      	beq.n	8001824 <HAL_DMA_Init+0xb8>
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a60      	ldr	r2, [pc, #384]	; (8001934 <HAL_DMA_Init+0x1c8>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d036      	beq.n	8001824 <HAL_DMA_Init+0xb8>
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4a5f      	ldr	r2, [pc, #380]	; (8001938 <HAL_DMA_Init+0x1cc>)
 80017bc:	4293      	cmp	r3, r2
 80017be:	d031      	beq.n	8001824 <HAL_DMA_Init+0xb8>
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4a5d      	ldr	r2, [pc, #372]	; (800193c <HAL_DMA_Init+0x1d0>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d02c      	beq.n	8001824 <HAL_DMA_Init+0xb8>
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4a5c      	ldr	r2, [pc, #368]	; (8001940 <HAL_DMA_Init+0x1d4>)
 80017d0:	4293      	cmp	r3, r2
 80017d2:	d027      	beq.n	8001824 <HAL_DMA_Init+0xb8>
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4a5a      	ldr	r2, [pc, #360]	; (8001944 <HAL_DMA_Init+0x1d8>)
 80017da:	4293      	cmp	r3, r2
 80017dc:	d022      	beq.n	8001824 <HAL_DMA_Init+0xb8>
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4a59      	ldr	r2, [pc, #356]	; (8001948 <HAL_DMA_Init+0x1dc>)
 80017e4:	4293      	cmp	r3, r2
 80017e6:	d01d      	beq.n	8001824 <HAL_DMA_Init+0xb8>
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4a57      	ldr	r2, [pc, #348]	; (800194c <HAL_DMA_Init+0x1e0>)
 80017ee:	4293      	cmp	r3, r2
 80017f0:	d018      	beq.n	8001824 <HAL_DMA_Init+0xb8>
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4a56      	ldr	r2, [pc, #344]	; (8001950 <HAL_DMA_Init+0x1e4>)
 80017f8:	4293      	cmp	r3, r2
 80017fa:	d013      	beq.n	8001824 <HAL_DMA_Init+0xb8>
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a54      	ldr	r2, [pc, #336]	; (8001954 <HAL_DMA_Init+0x1e8>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d00e      	beq.n	8001824 <HAL_DMA_Init+0xb8>
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4a53      	ldr	r2, [pc, #332]	; (8001958 <HAL_DMA_Init+0x1ec>)
 800180c:	4293      	cmp	r3, r2
 800180e:	d009      	beq.n	8001824 <HAL_DMA_Init+0xb8>
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4a51      	ldr	r2, [pc, #324]	; (800195c <HAL_DMA_Init+0x1f0>)
 8001816:	4293      	cmp	r3, r2
 8001818:	d004      	beq.n	8001824 <HAL_DMA_Init+0xb8>
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4a50      	ldr	r2, [pc, #320]	; (8001960 <HAL_DMA_Init+0x1f4>)
 8001820:	4293      	cmp	r3, r2
 8001822:	d101      	bne.n	8001828 <HAL_DMA_Init+0xbc>
 8001824:	2301      	movs	r3, #1
 8001826:	e000      	b.n	800182a <HAL_DMA_Init+0xbe>
 8001828:	2300      	movs	r3, #0
 800182a:	2b00      	cmp	r3, #0
 800182c:	f000 813b 	beq.w	8001aa6 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2200      	movs	r2, #0
 8001834:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	2202      	movs	r2, #2
 800183c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a37      	ldr	r2, [pc, #220]	; (8001924 <HAL_DMA_Init+0x1b8>)
 8001846:	4293      	cmp	r3, r2
 8001848:	d04a      	beq.n	80018e0 <HAL_DMA_Init+0x174>
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4a36      	ldr	r2, [pc, #216]	; (8001928 <HAL_DMA_Init+0x1bc>)
 8001850:	4293      	cmp	r3, r2
 8001852:	d045      	beq.n	80018e0 <HAL_DMA_Init+0x174>
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4a34      	ldr	r2, [pc, #208]	; (800192c <HAL_DMA_Init+0x1c0>)
 800185a:	4293      	cmp	r3, r2
 800185c:	d040      	beq.n	80018e0 <HAL_DMA_Init+0x174>
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	4a33      	ldr	r2, [pc, #204]	; (8001930 <HAL_DMA_Init+0x1c4>)
 8001864:	4293      	cmp	r3, r2
 8001866:	d03b      	beq.n	80018e0 <HAL_DMA_Init+0x174>
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a31      	ldr	r2, [pc, #196]	; (8001934 <HAL_DMA_Init+0x1c8>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d036      	beq.n	80018e0 <HAL_DMA_Init+0x174>
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4a30      	ldr	r2, [pc, #192]	; (8001938 <HAL_DMA_Init+0x1cc>)
 8001878:	4293      	cmp	r3, r2
 800187a:	d031      	beq.n	80018e0 <HAL_DMA_Init+0x174>
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a2e      	ldr	r2, [pc, #184]	; (800193c <HAL_DMA_Init+0x1d0>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d02c      	beq.n	80018e0 <HAL_DMA_Init+0x174>
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4a2d      	ldr	r2, [pc, #180]	; (8001940 <HAL_DMA_Init+0x1d4>)
 800188c:	4293      	cmp	r3, r2
 800188e:	d027      	beq.n	80018e0 <HAL_DMA_Init+0x174>
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a2b      	ldr	r2, [pc, #172]	; (8001944 <HAL_DMA_Init+0x1d8>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d022      	beq.n	80018e0 <HAL_DMA_Init+0x174>
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4a2a      	ldr	r2, [pc, #168]	; (8001948 <HAL_DMA_Init+0x1dc>)
 80018a0:	4293      	cmp	r3, r2
 80018a2:	d01d      	beq.n	80018e0 <HAL_DMA_Init+0x174>
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a28      	ldr	r2, [pc, #160]	; (800194c <HAL_DMA_Init+0x1e0>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d018      	beq.n	80018e0 <HAL_DMA_Init+0x174>
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4a27      	ldr	r2, [pc, #156]	; (8001950 <HAL_DMA_Init+0x1e4>)
 80018b4:	4293      	cmp	r3, r2
 80018b6:	d013      	beq.n	80018e0 <HAL_DMA_Init+0x174>
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4a25      	ldr	r2, [pc, #148]	; (8001954 <HAL_DMA_Init+0x1e8>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d00e      	beq.n	80018e0 <HAL_DMA_Init+0x174>
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4a24      	ldr	r2, [pc, #144]	; (8001958 <HAL_DMA_Init+0x1ec>)
 80018c8:	4293      	cmp	r3, r2
 80018ca:	d009      	beq.n	80018e0 <HAL_DMA_Init+0x174>
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4a22      	ldr	r2, [pc, #136]	; (800195c <HAL_DMA_Init+0x1f0>)
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d004      	beq.n	80018e0 <HAL_DMA_Init+0x174>
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4a21      	ldr	r2, [pc, #132]	; (8001960 <HAL_DMA_Init+0x1f4>)
 80018dc:	4293      	cmp	r3, r2
 80018de:	d108      	bne.n	80018f2 <HAL_DMA_Init+0x186>
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	681a      	ldr	r2, [r3, #0]
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f022 0201 	bic.w	r2, r2, #1
 80018ee:	601a      	str	r2, [r3, #0]
 80018f0:	e007      	b.n	8001902 <HAL_DMA_Init+0x196>
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	681a      	ldr	r2, [r3, #0]
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f022 0201 	bic.w	r2, r2, #1
 8001900:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001902:	e02f      	b.n	8001964 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001904:	f7ff fd20 	bl	8001348 <HAL_GetTick>
 8001908:	4602      	mov	r2, r0
 800190a:	693b      	ldr	r3, [r7, #16]
 800190c:	1ad3      	subs	r3, r2, r3
 800190e:	2b05      	cmp	r3, #5
 8001910:	d928      	bls.n	8001964 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	2220      	movs	r2, #32
 8001916:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2203      	movs	r2, #3
 800191c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8001920:	2301      	movs	r3, #1
 8001922:	e246      	b.n	8001db2 <HAL_DMA_Init+0x646>
 8001924:	40020010 	.word	0x40020010
 8001928:	40020028 	.word	0x40020028
 800192c:	40020040 	.word	0x40020040
 8001930:	40020058 	.word	0x40020058
 8001934:	40020070 	.word	0x40020070
 8001938:	40020088 	.word	0x40020088
 800193c:	400200a0 	.word	0x400200a0
 8001940:	400200b8 	.word	0x400200b8
 8001944:	40020410 	.word	0x40020410
 8001948:	40020428 	.word	0x40020428
 800194c:	40020440 	.word	0x40020440
 8001950:	40020458 	.word	0x40020458
 8001954:	40020470 	.word	0x40020470
 8001958:	40020488 	.word	0x40020488
 800195c:	400204a0 	.word	0x400204a0
 8001960:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f003 0301 	and.w	r3, r3, #1
 800196e:	2b00      	cmp	r3, #0
 8001970:	d1c8      	bne.n	8001904 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800197a:	697a      	ldr	r2, [r7, #20]
 800197c:	4b83      	ldr	r3, [pc, #524]	; (8001b8c <HAL_DMA_Init+0x420>)
 800197e:	4013      	ands	r3, r2
 8001980:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800198a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	691b      	ldr	r3, [r3, #16]
 8001990:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001996:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	699b      	ldr	r3, [r3, #24]
 800199c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019a2:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6a1b      	ldr	r3, [r3, #32]
 80019a8:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80019aa:	697a      	ldr	r2, [r7, #20]
 80019ac:	4313      	orrs	r3, r2
 80019ae:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019b4:	2b04      	cmp	r3, #4
 80019b6:	d107      	bne.n	80019c8 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c0:	4313      	orrs	r3, r2
 80019c2:	697a      	ldr	r2, [r7, #20]
 80019c4:	4313      	orrs	r3, r2
 80019c6:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80019c8:	4b71      	ldr	r3, [pc, #452]	; (8001b90 <HAL_DMA_Init+0x424>)
 80019ca:	681a      	ldr	r2, [r3, #0]
 80019cc:	4b71      	ldr	r3, [pc, #452]	; (8001b94 <HAL_DMA_Init+0x428>)
 80019ce:	4013      	ands	r3, r2
 80019d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80019d4:	d328      	bcc.n	8001a28 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	2b28      	cmp	r3, #40	; 0x28
 80019dc:	d903      	bls.n	80019e6 <HAL_DMA_Init+0x27a>
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	2b2e      	cmp	r3, #46	; 0x2e
 80019e4:	d917      	bls.n	8001a16 <HAL_DMA_Init+0x2aa>
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	2b3e      	cmp	r3, #62	; 0x3e
 80019ec:	d903      	bls.n	80019f6 <HAL_DMA_Init+0x28a>
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	2b42      	cmp	r3, #66	; 0x42
 80019f4:	d90f      	bls.n	8001a16 <HAL_DMA_Init+0x2aa>
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	2b46      	cmp	r3, #70	; 0x46
 80019fc:	d903      	bls.n	8001a06 <HAL_DMA_Init+0x29a>
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	2b48      	cmp	r3, #72	; 0x48
 8001a04:	d907      	bls.n	8001a16 <HAL_DMA_Init+0x2aa>
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	2b4e      	cmp	r3, #78	; 0x4e
 8001a0c:	d905      	bls.n	8001a1a <HAL_DMA_Init+0x2ae>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	2b52      	cmp	r3, #82	; 0x52
 8001a14:	d801      	bhi.n	8001a1a <HAL_DMA_Init+0x2ae>
 8001a16:	2301      	movs	r3, #1
 8001a18:	e000      	b.n	8001a1c <HAL_DMA_Init+0x2b0>
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d003      	beq.n	8001a28 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001a26:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	697a      	ldr	r2, [r7, #20]
 8001a2e:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	695b      	ldr	r3, [r3, #20]
 8001a36:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	f023 0307 	bic.w	r3, r3, #7
 8001a3e:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a44:	697a      	ldr	r2, [r7, #20]
 8001a46:	4313      	orrs	r3, r2
 8001a48:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a4e:	2b04      	cmp	r3, #4
 8001a50:	d117      	bne.n	8001a82 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a56:	697a      	ldr	r2, [r7, #20]
 8001a58:	4313      	orrs	r3, r2
 8001a5a:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d00e      	beq.n	8001a82 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001a64:	6878      	ldr	r0, [r7, #4]
 8001a66:	f002 fb3d 	bl	80040e4 <DMA_CheckFifoParam>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d008      	beq.n	8001a82 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2240      	movs	r2, #64	; 0x40
 8001a74:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2201      	movs	r2, #1
 8001a7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	e197      	b.n	8001db2 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	697a      	ldr	r2, [r7, #20]
 8001a88:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001a8a:	6878      	ldr	r0, [r7, #4]
 8001a8c:	f002 fa78 	bl	8003f80 <DMA_CalcBaseAndBitshift>
 8001a90:	4603      	mov	r3, r0
 8001a92:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a98:	f003 031f 	and.w	r3, r3, #31
 8001a9c:	223f      	movs	r2, #63	; 0x3f
 8001a9e:	409a      	lsls	r2, r3
 8001aa0:	68bb      	ldr	r3, [r7, #8]
 8001aa2:	609a      	str	r2, [r3, #8]
 8001aa4:	e0cd      	b.n	8001c42 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4a3b      	ldr	r2, [pc, #236]	; (8001b98 <HAL_DMA_Init+0x42c>)
 8001aac:	4293      	cmp	r3, r2
 8001aae:	d022      	beq.n	8001af6 <HAL_DMA_Init+0x38a>
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4a39      	ldr	r2, [pc, #228]	; (8001b9c <HAL_DMA_Init+0x430>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d01d      	beq.n	8001af6 <HAL_DMA_Init+0x38a>
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4a38      	ldr	r2, [pc, #224]	; (8001ba0 <HAL_DMA_Init+0x434>)
 8001ac0:	4293      	cmp	r3, r2
 8001ac2:	d018      	beq.n	8001af6 <HAL_DMA_Init+0x38a>
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a36      	ldr	r2, [pc, #216]	; (8001ba4 <HAL_DMA_Init+0x438>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d013      	beq.n	8001af6 <HAL_DMA_Init+0x38a>
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4a35      	ldr	r2, [pc, #212]	; (8001ba8 <HAL_DMA_Init+0x43c>)
 8001ad4:	4293      	cmp	r3, r2
 8001ad6:	d00e      	beq.n	8001af6 <HAL_DMA_Init+0x38a>
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4a33      	ldr	r2, [pc, #204]	; (8001bac <HAL_DMA_Init+0x440>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d009      	beq.n	8001af6 <HAL_DMA_Init+0x38a>
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4a32      	ldr	r2, [pc, #200]	; (8001bb0 <HAL_DMA_Init+0x444>)
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	d004      	beq.n	8001af6 <HAL_DMA_Init+0x38a>
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a30      	ldr	r2, [pc, #192]	; (8001bb4 <HAL_DMA_Init+0x448>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d101      	bne.n	8001afa <HAL_DMA_Init+0x38e>
 8001af6:	2301      	movs	r3, #1
 8001af8:	e000      	b.n	8001afc <HAL_DMA_Init+0x390>
 8001afa:	2300      	movs	r3, #0
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	f000 8097 	beq.w	8001c30 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4a24      	ldr	r2, [pc, #144]	; (8001b98 <HAL_DMA_Init+0x42c>)
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	d021      	beq.n	8001b50 <HAL_DMA_Init+0x3e4>
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a22      	ldr	r2, [pc, #136]	; (8001b9c <HAL_DMA_Init+0x430>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d01c      	beq.n	8001b50 <HAL_DMA_Init+0x3e4>
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4a21      	ldr	r2, [pc, #132]	; (8001ba0 <HAL_DMA_Init+0x434>)
 8001b1c:	4293      	cmp	r3, r2
 8001b1e:	d017      	beq.n	8001b50 <HAL_DMA_Init+0x3e4>
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a1f      	ldr	r2, [pc, #124]	; (8001ba4 <HAL_DMA_Init+0x438>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d012      	beq.n	8001b50 <HAL_DMA_Init+0x3e4>
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4a1e      	ldr	r2, [pc, #120]	; (8001ba8 <HAL_DMA_Init+0x43c>)
 8001b30:	4293      	cmp	r3, r2
 8001b32:	d00d      	beq.n	8001b50 <HAL_DMA_Init+0x3e4>
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a1c      	ldr	r2, [pc, #112]	; (8001bac <HAL_DMA_Init+0x440>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d008      	beq.n	8001b50 <HAL_DMA_Init+0x3e4>
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4a1b      	ldr	r2, [pc, #108]	; (8001bb0 <HAL_DMA_Init+0x444>)
 8001b44:	4293      	cmp	r3, r2
 8001b46:	d003      	beq.n	8001b50 <HAL_DMA_Init+0x3e4>
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4a19      	ldr	r2, [pc, #100]	; (8001bb4 <HAL_DMA_Init+0x448>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2200      	movs	r2, #0
 8001b56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	2202      	movs	r2, #2
 8001b5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8001b6a:	697a      	ldr	r2, [r7, #20]
 8001b6c:	4b12      	ldr	r3, [pc, #72]	; (8001bb8 <HAL_DMA_Init+0x44c>)
 8001b6e:	4013      	ands	r3, r2
 8001b70:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	689b      	ldr	r3, [r3, #8]
 8001b76:	2b40      	cmp	r3, #64	; 0x40
 8001b78:	d020      	beq.n	8001bbc <HAL_DMA_Init+0x450>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	689b      	ldr	r3, [r3, #8]
 8001b7e:	2b80      	cmp	r3, #128	; 0x80
 8001b80:	d102      	bne.n	8001b88 <HAL_DMA_Init+0x41c>
 8001b82:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001b86:	e01a      	b.n	8001bbe <HAL_DMA_Init+0x452>
 8001b88:	2300      	movs	r3, #0
 8001b8a:	e018      	b.n	8001bbe <HAL_DMA_Init+0x452>
 8001b8c:	fe10803f 	.word	0xfe10803f
 8001b90:	5c001000 	.word	0x5c001000
 8001b94:	ffff0000 	.word	0xffff0000
 8001b98:	58025408 	.word	0x58025408
 8001b9c:	5802541c 	.word	0x5802541c
 8001ba0:	58025430 	.word	0x58025430
 8001ba4:	58025444 	.word	0x58025444
 8001ba8:	58025458 	.word	0x58025458
 8001bac:	5802546c 	.word	0x5802546c
 8001bb0:	58025480 	.word	0x58025480
 8001bb4:	58025494 	.word	0x58025494
 8001bb8:	fffe000f 	.word	0xfffe000f
 8001bbc:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001bbe:	687a      	ldr	r2, [r7, #4]
 8001bc0:	68d2      	ldr	r2, [r2, #12]
 8001bc2:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001bc4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	691b      	ldr	r3, [r3, #16]
 8001bca:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001bcc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	695b      	ldr	r3, [r3, #20]
 8001bd2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001bd4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	699b      	ldr	r3, [r3, #24]
 8001bda:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001bdc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	69db      	ldr	r3, [r3, #28]
 8001be2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001be4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6a1b      	ldr	r3, [r3, #32]
 8001bea:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001bec:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001bee:	697a      	ldr	r2, [r7, #20]
 8001bf0:	4313      	orrs	r3, r2
 8001bf2:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	697a      	ldr	r2, [r7, #20]
 8001bfa:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	461a      	mov	r2, r3
 8001c02:	4b6e      	ldr	r3, [pc, #440]	; (8001dbc <HAL_DMA_Init+0x650>)
 8001c04:	4413      	add	r3, r2
 8001c06:	4a6e      	ldr	r2, [pc, #440]	; (8001dc0 <HAL_DMA_Init+0x654>)
 8001c08:	fba2 2303 	umull	r2, r3, r2, r3
 8001c0c:	091b      	lsrs	r3, r3, #4
 8001c0e:	009a      	lsls	r2, r3, #2
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001c14:	6878      	ldr	r0, [r7, #4]
 8001c16:	f002 f9b3 	bl	8003f80 <DMA_CalcBaseAndBitshift>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c22:	f003 031f 	and.w	r3, r3, #31
 8001c26:	2201      	movs	r2, #1
 8001c28:	409a      	lsls	r2, r3
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	605a      	str	r2, [r3, #4]
 8001c2e:	e008      	b.n	8001c42 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2240      	movs	r2, #64	; 0x40
 8001c34:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2203      	movs	r2, #3
 8001c3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	e0b7      	b.n	8001db2 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4a5f      	ldr	r2, [pc, #380]	; (8001dc4 <HAL_DMA_Init+0x658>)
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	d072      	beq.n	8001d32 <HAL_DMA_Init+0x5c6>
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a5d      	ldr	r2, [pc, #372]	; (8001dc8 <HAL_DMA_Init+0x65c>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d06d      	beq.n	8001d32 <HAL_DMA_Init+0x5c6>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4a5c      	ldr	r2, [pc, #368]	; (8001dcc <HAL_DMA_Init+0x660>)
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d068      	beq.n	8001d32 <HAL_DMA_Init+0x5c6>
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a5a      	ldr	r2, [pc, #360]	; (8001dd0 <HAL_DMA_Init+0x664>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d063      	beq.n	8001d32 <HAL_DMA_Init+0x5c6>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4a59      	ldr	r2, [pc, #356]	; (8001dd4 <HAL_DMA_Init+0x668>)
 8001c70:	4293      	cmp	r3, r2
 8001c72:	d05e      	beq.n	8001d32 <HAL_DMA_Init+0x5c6>
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a57      	ldr	r2, [pc, #348]	; (8001dd8 <HAL_DMA_Init+0x66c>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d059      	beq.n	8001d32 <HAL_DMA_Init+0x5c6>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4a56      	ldr	r2, [pc, #344]	; (8001ddc <HAL_DMA_Init+0x670>)
 8001c84:	4293      	cmp	r3, r2
 8001c86:	d054      	beq.n	8001d32 <HAL_DMA_Init+0x5c6>
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4a54      	ldr	r2, [pc, #336]	; (8001de0 <HAL_DMA_Init+0x674>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d04f      	beq.n	8001d32 <HAL_DMA_Init+0x5c6>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4a53      	ldr	r2, [pc, #332]	; (8001de4 <HAL_DMA_Init+0x678>)
 8001c98:	4293      	cmp	r3, r2
 8001c9a:	d04a      	beq.n	8001d32 <HAL_DMA_Init+0x5c6>
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a51      	ldr	r2, [pc, #324]	; (8001de8 <HAL_DMA_Init+0x67c>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d045      	beq.n	8001d32 <HAL_DMA_Init+0x5c6>
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4a50      	ldr	r2, [pc, #320]	; (8001dec <HAL_DMA_Init+0x680>)
 8001cac:	4293      	cmp	r3, r2
 8001cae:	d040      	beq.n	8001d32 <HAL_DMA_Init+0x5c6>
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a4e      	ldr	r2, [pc, #312]	; (8001df0 <HAL_DMA_Init+0x684>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d03b      	beq.n	8001d32 <HAL_DMA_Init+0x5c6>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4a4d      	ldr	r2, [pc, #308]	; (8001df4 <HAL_DMA_Init+0x688>)
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	d036      	beq.n	8001d32 <HAL_DMA_Init+0x5c6>
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a4b      	ldr	r2, [pc, #300]	; (8001df8 <HAL_DMA_Init+0x68c>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d031      	beq.n	8001d32 <HAL_DMA_Init+0x5c6>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4a4a      	ldr	r2, [pc, #296]	; (8001dfc <HAL_DMA_Init+0x690>)
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	d02c      	beq.n	8001d32 <HAL_DMA_Init+0x5c6>
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a48      	ldr	r2, [pc, #288]	; (8001e00 <HAL_DMA_Init+0x694>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d027      	beq.n	8001d32 <HAL_DMA_Init+0x5c6>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4a47      	ldr	r2, [pc, #284]	; (8001e04 <HAL_DMA_Init+0x698>)
 8001ce8:	4293      	cmp	r3, r2
 8001cea:	d022      	beq.n	8001d32 <HAL_DMA_Init+0x5c6>
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4a45      	ldr	r2, [pc, #276]	; (8001e08 <HAL_DMA_Init+0x69c>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d01d      	beq.n	8001d32 <HAL_DMA_Init+0x5c6>
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4a44      	ldr	r2, [pc, #272]	; (8001e0c <HAL_DMA_Init+0x6a0>)
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	d018      	beq.n	8001d32 <HAL_DMA_Init+0x5c6>
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4a42      	ldr	r2, [pc, #264]	; (8001e10 <HAL_DMA_Init+0x6a4>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d013      	beq.n	8001d32 <HAL_DMA_Init+0x5c6>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4a41      	ldr	r2, [pc, #260]	; (8001e14 <HAL_DMA_Init+0x6a8>)
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d00e      	beq.n	8001d32 <HAL_DMA_Init+0x5c6>
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a3f      	ldr	r2, [pc, #252]	; (8001e18 <HAL_DMA_Init+0x6ac>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d009      	beq.n	8001d32 <HAL_DMA_Init+0x5c6>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4a3e      	ldr	r2, [pc, #248]	; (8001e1c <HAL_DMA_Init+0x6b0>)
 8001d24:	4293      	cmp	r3, r2
 8001d26:	d004      	beq.n	8001d32 <HAL_DMA_Init+0x5c6>
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a3c      	ldr	r2, [pc, #240]	; (8001e20 <HAL_DMA_Init+0x6b4>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d101      	bne.n	8001d36 <HAL_DMA_Init+0x5ca>
 8001d32:	2301      	movs	r3, #1
 8001d34:	e000      	b.n	8001d38 <HAL_DMA_Init+0x5cc>
 8001d36:	2300      	movs	r3, #0
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d032      	beq.n	8001da2 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001d3c:	6878      	ldr	r0, [r7, #4]
 8001d3e:	f002 fa4d 	bl	80041dc <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	689b      	ldr	r3, [r3, #8]
 8001d46:	2b80      	cmp	r3, #128	; 0x80
 8001d48:	d102      	bne.n	8001d50 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	685a      	ldr	r2, [r3, #4]
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d58:	b2d2      	uxtb	r2, r2
 8001d5a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001d60:	687a      	ldr	r2, [r7, #4]
 8001d62:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001d64:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d010      	beq.n	8001d90 <HAL_DMA_Init+0x624>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	2b08      	cmp	r3, #8
 8001d74:	d80c      	bhi.n	8001d90 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001d76:	6878      	ldr	r0, [r7, #4]
 8001d78:	f002 faca 	bl	8004310 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001d80:	2200      	movs	r2, #0
 8001d82:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d88:	687a      	ldr	r2, [r7, #4]
 8001d8a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8001d8c:	605a      	str	r2, [r3, #4]
 8001d8e:	e008      	b.n	8001da2 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2200      	movs	r2, #0
 8001d94:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2200      	movs	r2, #0
 8001d9a:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2200      	movs	r2, #0
 8001da0:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2200      	movs	r2, #0
 8001da6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2201      	movs	r2, #1
 8001dac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001db0:	2300      	movs	r3, #0
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	3718      	adds	r7, #24
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	a7fdabf8 	.word	0xa7fdabf8
 8001dc0:	cccccccd 	.word	0xcccccccd
 8001dc4:	40020010 	.word	0x40020010
 8001dc8:	40020028 	.word	0x40020028
 8001dcc:	40020040 	.word	0x40020040
 8001dd0:	40020058 	.word	0x40020058
 8001dd4:	40020070 	.word	0x40020070
 8001dd8:	40020088 	.word	0x40020088
 8001ddc:	400200a0 	.word	0x400200a0
 8001de0:	400200b8 	.word	0x400200b8
 8001de4:	40020410 	.word	0x40020410
 8001de8:	40020428 	.word	0x40020428
 8001dec:	40020440 	.word	0x40020440
 8001df0:	40020458 	.word	0x40020458
 8001df4:	40020470 	.word	0x40020470
 8001df8:	40020488 	.word	0x40020488
 8001dfc:	400204a0 	.word	0x400204a0
 8001e00:	400204b8 	.word	0x400204b8
 8001e04:	58025408 	.word	0x58025408
 8001e08:	5802541c 	.word	0x5802541c
 8001e0c:	58025430 	.word	0x58025430
 8001e10:	58025444 	.word	0x58025444
 8001e14:	58025458 	.word	0x58025458
 8001e18:	5802546c 	.word	0x5802546c
 8001e1c:	58025480 	.word	0x58025480
 8001e20:	58025494 	.word	0x58025494

08001e24 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b086      	sub	sp, #24
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	60f8      	str	r0, [r7, #12]
 8001e2c:	60b9      	str	r1, [r7, #8]
 8001e2e:	607a      	str	r2, [r7, #4]
 8001e30:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001e32:	2300      	movs	r3, #0
 8001e34:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d101      	bne.n	8001e40 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	e226      	b.n	800228e <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001e46:	2b01      	cmp	r3, #1
 8001e48:	d101      	bne.n	8001e4e <HAL_DMA_Start_IT+0x2a>
 8001e4a:	2302      	movs	r3, #2
 8001e4c:	e21f      	b.n	800228e <HAL_DMA_Start_IT+0x46a>
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	2201      	movs	r2, #1
 8001e52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e5c:	b2db      	uxtb	r3, r3
 8001e5e:	2b01      	cmp	r3, #1
 8001e60:	f040 820a 	bne.w	8002278 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	2202      	movs	r2, #2
 8001e68:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	2200      	movs	r2, #0
 8001e70:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4a68      	ldr	r2, [pc, #416]	; (8002018 <HAL_DMA_Start_IT+0x1f4>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d04a      	beq.n	8001f12 <HAL_DMA_Start_IT+0xee>
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a66      	ldr	r2, [pc, #408]	; (800201c <HAL_DMA_Start_IT+0x1f8>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d045      	beq.n	8001f12 <HAL_DMA_Start_IT+0xee>
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4a65      	ldr	r2, [pc, #404]	; (8002020 <HAL_DMA_Start_IT+0x1fc>)
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d040      	beq.n	8001f12 <HAL_DMA_Start_IT+0xee>
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a63      	ldr	r2, [pc, #396]	; (8002024 <HAL_DMA_Start_IT+0x200>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d03b      	beq.n	8001f12 <HAL_DMA_Start_IT+0xee>
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4a62      	ldr	r2, [pc, #392]	; (8002028 <HAL_DMA_Start_IT+0x204>)
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d036      	beq.n	8001f12 <HAL_DMA_Start_IT+0xee>
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a60      	ldr	r2, [pc, #384]	; (800202c <HAL_DMA_Start_IT+0x208>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d031      	beq.n	8001f12 <HAL_DMA_Start_IT+0xee>
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4a5f      	ldr	r2, [pc, #380]	; (8002030 <HAL_DMA_Start_IT+0x20c>)
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d02c      	beq.n	8001f12 <HAL_DMA_Start_IT+0xee>
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a5d      	ldr	r2, [pc, #372]	; (8002034 <HAL_DMA_Start_IT+0x210>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d027      	beq.n	8001f12 <HAL_DMA_Start_IT+0xee>
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4a5c      	ldr	r2, [pc, #368]	; (8002038 <HAL_DMA_Start_IT+0x214>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d022      	beq.n	8001f12 <HAL_DMA_Start_IT+0xee>
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4a5a      	ldr	r2, [pc, #360]	; (800203c <HAL_DMA_Start_IT+0x218>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d01d      	beq.n	8001f12 <HAL_DMA_Start_IT+0xee>
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4a59      	ldr	r2, [pc, #356]	; (8002040 <HAL_DMA_Start_IT+0x21c>)
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d018      	beq.n	8001f12 <HAL_DMA_Start_IT+0xee>
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4a57      	ldr	r2, [pc, #348]	; (8002044 <HAL_DMA_Start_IT+0x220>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d013      	beq.n	8001f12 <HAL_DMA_Start_IT+0xee>
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4a56      	ldr	r2, [pc, #344]	; (8002048 <HAL_DMA_Start_IT+0x224>)
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d00e      	beq.n	8001f12 <HAL_DMA_Start_IT+0xee>
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4a54      	ldr	r2, [pc, #336]	; (800204c <HAL_DMA_Start_IT+0x228>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d009      	beq.n	8001f12 <HAL_DMA_Start_IT+0xee>
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4a53      	ldr	r2, [pc, #332]	; (8002050 <HAL_DMA_Start_IT+0x22c>)
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d004      	beq.n	8001f12 <HAL_DMA_Start_IT+0xee>
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a51      	ldr	r2, [pc, #324]	; (8002054 <HAL_DMA_Start_IT+0x230>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d108      	bne.n	8001f24 <HAL_DMA_Start_IT+0x100>
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	681a      	ldr	r2, [r3, #0]
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f022 0201 	bic.w	r2, r2, #1
 8001f20:	601a      	str	r2, [r3, #0]
 8001f22:	e007      	b.n	8001f34 <HAL_DMA_Start_IT+0x110>
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	681a      	ldr	r2, [r3, #0]
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f022 0201 	bic.w	r2, r2, #1
 8001f32:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	687a      	ldr	r2, [r7, #4]
 8001f38:	68b9      	ldr	r1, [r7, #8]
 8001f3a:	68f8      	ldr	r0, [r7, #12]
 8001f3c:	f001 fe74 	bl	8003c28 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a34      	ldr	r2, [pc, #208]	; (8002018 <HAL_DMA_Start_IT+0x1f4>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d04a      	beq.n	8001fe0 <HAL_DMA_Start_IT+0x1bc>
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4a33      	ldr	r2, [pc, #204]	; (800201c <HAL_DMA_Start_IT+0x1f8>)
 8001f50:	4293      	cmp	r3, r2
 8001f52:	d045      	beq.n	8001fe0 <HAL_DMA_Start_IT+0x1bc>
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a31      	ldr	r2, [pc, #196]	; (8002020 <HAL_DMA_Start_IT+0x1fc>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d040      	beq.n	8001fe0 <HAL_DMA_Start_IT+0x1bc>
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4a30      	ldr	r2, [pc, #192]	; (8002024 <HAL_DMA_Start_IT+0x200>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d03b      	beq.n	8001fe0 <HAL_DMA_Start_IT+0x1bc>
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a2e      	ldr	r2, [pc, #184]	; (8002028 <HAL_DMA_Start_IT+0x204>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d036      	beq.n	8001fe0 <HAL_DMA_Start_IT+0x1bc>
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4a2d      	ldr	r2, [pc, #180]	; (800202c <HAL_DMA_Start_IT+0x208>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d031      	beq.n	8001fe0 <HAL_DMA_Start_IT+0x1bc>
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4a2b      	ldr	r2, [pc, #172]	; (8002030 <HAL_DMA_Start_IT+0x20c>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d02c      	beq.n	8001fe0 <HAL_DMA_Start_IT+0x1bc>
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4a2a      	ldr	r2, [pc, #168]	; (8002034 <HAL_DMA_Start_IT+0x210>)
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d027      	beq.n	8001fe0 <HAL_DMA_Start_IT+0x1bc>
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a28      	ldr	r2, [pc, #160]	; (8002038 <HAL_DMA_Start_IT+0x214>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d022      	beq.n	8001fe0 <HAL_DMA_Start_IT+0x1bc>
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4a27      	ldr	r2, [pc, #156]	; (800203c <HAL_DMA_Start_IT+0x218>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d01d      	beq.n	8001fe0 <HAL_DMA_Start_IT+0x1bc>
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a25      	ldr	r2, [pc, #148]	; (8002040 <HAL_DMA_Start_IT+0x21c>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d018      	beq.n	8001fe0 <HAL_DMA_Start_IT+0x1bc>
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4a24      	ldr	r2, [pc, #144]	; (8002044 <HAL_DMA_Start_IT+0x220>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d013      	beq.n	8001fe0 <HAL_DMA_Start_IT+0x1bc>
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a22      	ldr	r2, [pc, #136]	; (8002048 <HAL_DMA_Start_IT+0x224>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d00e      	beq.n	8001fe0 <HAL_DMA_Start_IT+0x1bc>
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4a21      	ldr	r2, [pc, #132]	; (800204c <HAL_DMA_Start_IT+0x228>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d009      	beq.n	8001fe0 <HAL_DMA_Start_IT+0x1bc>
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a1f      	ldr	r2, [pc, #124]	; (8002050 <HAL_DMA_Start_IT+0x22c>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d004      	beq.n	8001fe0 <HAL_DMA_Start_IT+0x1bc>
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4a1e      	ldr	r2, [pc, #120]	; (8002054 <HAL_DMA_Start_IT+0x230>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d101      	bne.n	8001fe4 <HAL_DMA_Start_IT+0x1c0>
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	e000      	b.n	8001fe6 <HAL_DMA_Start_IT+0x1c2>
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d036      	beq.n	8002058 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f023 021e 	bic.w	r2, r3, #30
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f042 0216 	orr.w	r2, r2, #22
 8001ffc:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002002:	2b00      	cmp	r3, #0
 8002004:	d03e      	beq.n	8002084 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	681a      	ldr	r2, [r3, #0]
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f042 0208 	orr.w	r2, r2, #8
 8002014:	601a      	str	r2, [r3, #0]
 8002016:	e035      	b.n	8002084 <HAL_DMA_Start_IT+0x260>
 8002018:	40020010 	.word	0x40020010
 800201c:	40020028 	.word	0x40020028
 8002020:	40020040 	.word	0x40020040
 8002024:	40020058 	.word	0x40020058
 8002028:	40020070 	.word	0x40020070
 800202c:	40020088 	.word	0x40020088
 8002030:	400200a0 	.word	0x400200a0
 8002034:	400200b8 	.word	0x400200b8
 8002038:	40020410 	.word	0x40020410
 800203c:	40020428 	.word	0x40020428
 8002040:	40020440 	.word	0x40020440
 8002044:	40020458 	.word	0x40020458
 8002048:	40020470 	.word	0x40020470
 800204c:	40020488 	.word	0x40020488
 8002050:	400204a0 	.word	0x400204a0
 8002054:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f023 020e 	bic.w	r2, r3, #14
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f042 020a 	orr.w	r2, r2, #10
 800206a:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002070:	2b00      	cmp	r3, #0
 8002072:	d007      	beq.n	8002084 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	681a      	ldr	r2, [r3, #0]
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f042 0204 	orr.w	r2, r2, #4
 8002082:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a83      	ldr	r2, [pc, #524]	; (8002298 <HAL_DMA_Start_IT+0x474>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d072      	beq.n	8002174 <HAL_DMA_Start_IT+0x350>
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4a82      	ldr	r2, [pc, #520]	; (800229c <HAL_DMA_Start_IT+0x478>)
 8002094:	4293      	cmp	r3, r2
 8002096:	d06d      	beq.n	8002174 <HAL_DMA_Start_IT+0x350>
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a80      	ldr	r2, [pc, #512]	; (80022a0 <HAL_DMA_Start_IT+0x47c>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d068      	beq.n	8002174 <HAL_DMA_Start_IT+0x350>
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4a7f      	ldr	r2, [pc, #508]	; (80022a4 <HAL_DMA_Start_IT+0x480>)
 80020a8:	4293      	cmp	r3, r2
 80020aa:	d063      	beq.n	8002174 <HAL_DMA_Start_IT+0x350>
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a7d      	ldr	r2, [pc, #500]	; (80022a8 <HAL_DMA_Start_IT+0x484>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d05e      	beq.n	8002174 <HAL_DMA_Start_IT+0x350>
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4a7c      	ldr	r2, [pc, #496]	; (80022ac <HAL_DMA_Start_IT+0x488>)
 80020bc:	4293      	cmp	r3, r2
 80020be:	d059      	beq.n	8002174 <HAL_DMA_Start_IT+0x350>
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a7a      	ldr	r2, [pc, #488]	; (80022b0 <HAL_DMA_Start_IT+0x48c>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d054      	beq.n	8002174 <HAL_DMA_Start_IT+0x350>
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4a79      	ldr	r2, [pc, #484]	; (80022b4 <HAL_DMA_Start_IT+0x490>)
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d04f      	beq.n	8002174 <HAL_DMA_Start_IT+0x350>
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a77      	ldr	r2, [pc, #476]	; (80022b8 <HAL_DMA_Start_IT+0x494>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d04a      	beq.n	8002174 <HAL_DMA_Start_IT+0x350>
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4a76      	ldr	r2, [pc, #472]	; (80022bc <HAL_DMA_Start_IT+0x498>)
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d045      	beq.n	8002174 <HAL_DMA_Start_IT+0x350>
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a74      	ldr	r2, [pc, #464]	; (80022c0 <HAL_DMA_Start_IT+0x49c>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d040      	beq.n	8002174 <HAL_DMA_Start_IT+0x350>
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4a73      	ldr	r2, [pc, #460]	; (80022c4 <HAL_DMA_Start_IT+0x4a0>)
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d03b      	beq.n	8002174 <HAL_DMA_Start_IT+0x350>
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4a71      	ldr	r2, [pc, #452]	; (80022c8 <HAL_DMA_Start_IT+0x4a4>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d036      	beq.n	8002174 <HAL_DMA_Start_IT+0x350>
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4a70      	ldr	r2, [pc, #448]	; (80022cc <HAL_DMA_Start_IT+0x4a8>)
 800210c:	4293      	cmp	r3, r2
 800210e:	d031      	beq.n	8002174 <HAL_DMA_Start_IT+0x350>
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a6e      	ldr	r2, [pc, #440]	; (80022d0 <HAL_DMA_Start_IT+0x4ac>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d02c      	beq.n	8002174 <HAL_DMA_Start_IT+0x350>
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4a6d      	ldr	r2, [pc, #436]	; (80022d4 <HAL_DMA_Start_IT+0x4b0>)
 8002120:	4293      	cmp	r3, r2
 8002122:	d027      	beq.n	8002174 <HAL_DMA_Start_IT+0x350>
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a6b      	ldr	r2, [pc, #428]	; (80022d8 <HAL_DMA_Start_IT+0x4b4>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d022      	beq.n	8002174 <HAL_DMA_Start_IT+0x350>
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4a6a      	ldr	r2, [pc, #424]	; (80022dc <HAL_DMA_Start_IT+0x4b8>)
 8002134:	4293      	cmp	r3, r2
 8002136:	d01d      	beq.n	8002174 <HAL_DMA_Start_IT+0x350>
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a68      	ldr	r2, [pc, #416]	; (80022e0 <HAL_DMA_Start_IT+0x4bc>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d018      	beq.n	8002174 <HAL_DMA_Start_IT+0x350>
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4a67      	ldr	r2, [pc, #412]	; (80022e4 <HAL_DMA_Start_IT+0x4c0>)
 8002148:	4293      	cmp	r3, r2
 800214a:	d013      	beq.n	8002174 <HAL_DMA_Start_IT+0x350>
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a65      	ldr	r2, [pc, #404]	; (80022e8 <HAL_DMA_Start_IT+0x4c4>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d00e      	beq.n	8002174 <HAL_DMA_Start_IT+0x350>
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4a64      	ldr	r2, [pc, #400]	; (80022ec <HAL_DMA_Start_IT+0x4c8>)
 800215c:	4293      	cmp	r3, r2
 800215e:	d009      	beq.n	8002174 <HAL_DMA_Start_IT+0x350>
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a62      	ldr	r2, [pc, #392]	; (80022f0 <HAL_DMA_Start_IT+0x4cc>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d004      	beq.n	8002174 <HAL_DMA_Start_IT+0x350>
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4a61      	ldr	r2, [pc, #388]	; (80022f4 <HAL_DMA_Start_IT+0x4d0>)
 8002170:	4293      	cmp	r3, r2
 8002172:	d101      	bne.n	8002178 <HAL_DMA_Start_IT+0x354>
 8002174:	2301      	movs	r3, #1
 8002176:	e000      	b.n	800217a <HAL_DMA_Start_IT+0x356>
 8002178:	2300      	movs	r3, #0
 800217a:	2b00      	cmp	r3, #0
 800217c:	d01a      	beq.n	80021b4 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002188:	2b00      	cmp	r3, #0
 800218a:	d007      	beq.n	800219c <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002190:	681a      	ldr	r2, [r3, #0]
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002196:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800219a:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d007      	beq.n	80021b4 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80021a8:	681a      	ldr	r2, [r3, #0]
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80021ae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80021b2:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a37      	ldr	r2, [pc, #220]	; (8002298 <HAL_DMA_Start_IT+0x474>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d04a      	beq.n	8002254 <HAL_DMA_Start_IT+0x430>
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4a36      	ldr	r2, [pc, #216]	; (800229c <HAL_DMA_Start_IT+0x478>)
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d045      	beq.n	8002254 <HAL_DMA_Start_IT+0x430>
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a34      	ldr	r2, [pc, #208]	; (80022a0 <HAL_DMA_Start_IT+0x47c>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d040      	beq.n	8002254 <HAL_DMA_Start_IT+0x430>
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4a33      	ldr	r2, [pc, #204]	; (80022a4 <HAL_DMA_Start_IT+0x480>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	d03b      	beq.n	8002254 <HAL_DMA_Start_IT+0x430>
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a31      	ldr	r2, [pc, #196]	; (80022a8 <HAL_DMA_Start_IT+0x484>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d036      	beq.n	8002254 <HAL_DMA_Start_IT+0x430>
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4a30      	ldr	r2, [pc, #192]	; (80022ac <HAL_DMA_Start_IT+0x488>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d031      	beq.n	8002254 <HAL_DMA_Start_IT+0x430>
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a2e      	ldr	r2, [pc, #184]	; (80022b0 <HAL_DMA_Start_IT+0x48c>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d02c      	beq.n	8002254 <HAL_DMA_Start_IT+0x430>
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4a2d      	ldr	r2, [pc, #180]	; (80022b4 <HAL_DMA_Start_IT+0x490>)
 8002200:	4293      	cmp	r3, r2
 8002202:	d027      	beq.n	8002254 <HAL_DMA_Start_IT+0x430>
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4a2b      	ldr	r2, [pc, #172]	; (80022b8 <HAL_DMA_Start_IT+0x494>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d022      	beq.n	8002254 <HAL_DMA_Start_IT+0x430>
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4a2a      	ldr	r2, [pc, #168]	; (80022bc <HAL_DMA_Start_IT+0x498>)
 8002214:	4293      	cmp	r3, r2
 8002216:	d01d      	beq.n	8002254 <HAL_DMA_Start_IT+0x430>
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a28      	ldr	r2, [pc, #160]	; (80022c0 <HAL_DMA_Start_IT+0x49c>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d018      	beq.n	8002254 <HAL_DMA_Start_IT+0x430>
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4a27      	ldr	r2, [pc, #156]	; (80022c4 <HAL_DMA_Start_IT+0x4a0>)
 8002228:	4293      	cmp	r3, r2
 800222a:	d013      	beq.n	8002254 <HAL_DMA_Start_IT+0x430>
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a25      	ldr	r2, [pc, #148]	; (80022c8 <HAL_DMA_Start_IT+0x4a4>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d00e      	beq.n	8002254 <HAL_DMA_Start_IT+0x430>
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4a24      	ldr	r2, [pc, #144]	; (80022cc <HAL_DMA_Start_IT+0x4a8>)
 800223c:	4293      	cmp	r3, r2
 800223e:	d009      	beq.n	8002254 <HAL_DMA_Start_IT+0x430>
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a22      	ldr	r2, [pc, #136]	; (80022d0 <HAL_DMA_Start_IT+0x4ac>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d004      	beq.n	8002254 <HAL_DMA_Start_IT+0x430>
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4a21      	ldr	r2, [pc, #132]	; (80022d4 <HAL_DMA_Start_IT+0x4b0>)
 8002250:	4293      	cmp	r3, r2
 8002252:	d108      	bne.n	8002266 <HAL_DMA_Start_IT+0x442>
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	681a      	ldr	r2, [r3, #0]
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f042 0201 	orr.w	r2, r2, #1
 8002262:	601a      	str	r2, [r3, #0]
 8002264:	e012      	b.n	800228c <HAL_DMA_Start_IT+0x468>
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	681a      	ldr	r2, [r3, #0]
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f042 0201 	orr.w	r2, r2, #1
 8002274:	601a      	str	r2, [r3, #0]
 8002276:	e009      	b.n	800228c <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	2200      	movs	r2, #0
 800227c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002286:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 8002288:	2301      	movs	r3, #1
 800228a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800228c:	7dfb      	ldrb	r3, [r7, #23]
}
 800228e:	4618      	mov	r0, r3
 8002290:	3718      	adds	r7, #24
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}
 8002296:	bf00      	nop
 8002298:	40020010 	.word	0x40020010
 800229c:	40020028 	.word	0x40020028
 80022a0:	40020040 	.word	0x40020040
 80022a4:	40020058 	.word	0x40020058
 80022a8:	40020070 	.word	0x40020070
 80022ac:	40020088 	.word	0x40020088
 80022b0:	400200a0 	.word	0x400200a0
 80022b4:	400200b8 	.word	0x400200b8
 80022b8:	40020410 	.word	0x40020410
 80022bc:	40020428 	.word	0x40020428
 80022c0:	40020440 	.word	0x40020440
 80022c4:	40020458 	.word	0x40020458
 80022c8:	40020470 	.word	0x40020470
 80022cc:	40020488 	.word	0x40020488
 80022d0:	400204a0 	.word	0x400204a0
 80022d4:	400204b8 	.word	0x400204b8
 80022d8:	58025408 	.word	0x58025408
 80022dc:	5802541c 	.word	0x5802541c
 80022e0:	58025430 	.word	0x58025430
 80022e4:	58025444 	.word	0x58025444
 80022e8:	58025458 	.word	0x58025458
 80022ec:	5802546c 	.word	0x5802546c
 80022f0:	58025480 	.word	0x58025480
 80022f4:	58025494 	.word	0x58025494

080022f8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b086      	sub	sp, #24
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8002300:	f7ff f822 	bl	8001348 <HAL_GetTick>
 8002304:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d101      	bne.n	8002310 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 800230c:	2301      	movs	r3, #1
 800230e:	e2dc      	b.n	80028ca <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002316:	b2db      	uxtb	r3, r3
 8002318:	2b02      	cmp	r3, #2
 800231a:	d008      	beq.n	800232e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2280      	movs	r2, #128	; 0x80
 8002320:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2200      	movs	r2, #0
 8002326:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	e2cd      	b.n	80028ca <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4a76      	ldr	r2, [pc, #472]	; (800250c <HAL_DMA_Abort+0x214>)
 8002334:	4293      	cmp	r3, r2
 8002336:	d04a      	beq.n	80023ce <HAL_DMA_Abort+0xd6>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a74      	ldr	r2, [pc, #464]	; (8002510 <HAL_DMA_Abort+0x218>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d045      	beq.n	80023ce <HAL_DMA_Abort+0xd6>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4a73      	ldr	r2, [pc, #460]	; (8002514 <HAL_DMA_Abort+0x21c>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d040      	beq.n	80023ce <HAL_DMA_Abort+0xd6>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a71      	ldr	r2, [pc, #452]	; (8002518 <HAL_DMA_Abort+0x220>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d03b      	beq.n	80023ce <HAL_DMA_Abort+0xd6>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4a70      	ldr	r2, [pc, #448]	; (800251c <HAL_DMA_Abort+0x224>)
 800235c:	4293      	cmp	r3, r2
 800235e:	d036      	beq.n	80023ce <HAL_DMA_Abort+0xd6>
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a6e      	ldr	r2, [pc, #440]	; (8002520 <HAL_DMA_Abort+0x228>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d031      	beq.n	80023ce <HAL_DMA_Abort+0xd6>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4a6d      	ldr	r2, [pc, #436]	; (8002524 <HAL_DMA_Abort+0x22c>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d02c      	beq.n	80023ce <HAL_DMA_Abort+0xd6>
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a6b      	ldr	r2, [pc, #428]	; (8002528 <HAL_DMA_Abort+0x230>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d027      	beq.n	80023ce <HAL_DMA_Abort+0xd6>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a6a      	ldr	r2, [pc, #424]	; (800252c <HAL_DMA_Abort+0x234>)
 8002384:	4293      	cmp	r3, r2
 8002386:	d022      	beq.n	80023ce <HAL_DMA_Abort+0xd6>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a68      	ldr	r2, [pc, #416]	; (8002530 <HAL_DMA_Abort+0x238>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d01d      	beq.n	80023ce <HAL_DMA_Abort+0xd6>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4a67      	ldr	r2, [pc, #412]	; (8002534 <HAL_DMA_Abort+0x23c>)
 8002398:	4293      	cmp	r3, r2
 800239a:	d018      	beq.n	80023ce <HAL_DMA_Abort+0xd6>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a65      	ldr	r2, [pc, #404]	; (8002538 <HAL_DMA_Abort+0x240>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d013      	beq.n	80023ce <HAL_DMA_Abort+0xd6>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4a64      	ldr	r2, [pc, #400]	; (800253c <HAL_DMA_Abort+0x244>)
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d00e      	beq.n	80023ce <HAL_DMA_Abort+0xd6>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a62      	ldr	r2, [pc, #392]	; (8002540 <HAL_DMA_Abort+0x248>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d009      	beq.n	80023ce <HAL_DMA_Abort+0xd6>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4a61      	ldr	r2, [pc, #388]	; (8002544 <HAL_DMA_Abort+0x24c>)
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d004      	beq.n	80023ce <HAL_DMA_Abort+0xd6>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a5f      	ldr	r2, [pc, #380]	; (8002548 <HAL_DMA_Abort+0x250>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d101      	bne.n	80023d2 <HAL_DMA_Abort+0xda>
 80023ce:	2301      	movs	r3, #1
 80023d0:	e000      	b.n	80023d4 <HAL_DMA_Abort+0xdc>
 80023d2:	2300      	movs	r3, #0
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d013      	beq.n	8002400 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	681a      	ldr	r2, [r3, #0]
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f022 021e 	bic.w	r2, r2, #30
 80023e6:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	695a      	ldr	r2, [r3, #20]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80023f6:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	617b      	str	r3, [r7, #20]
 80023fe:	e00a      	b.n	8002416 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	681a      	ldr	r2, [r3, #0]
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f022 020e 	bic.w	r2, r2, #14
 800240e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4a3c      	ldr	r2, [pc, #240]	; (800250c <HAL_DMA_Abort+0x214>)
 800241c:	4293      	cmp	r3, r2
 800241e:	d072      	beq.n	8002506 <HAL_DMA_Abort+0x20e>
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a3a      	ldr	r2, [pc, #232]	; (8002510 <HAL_DMA_Abort+0x218>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d06d      	beq.n	8002506 <HAL_DMA_Abort+0x20e>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4a39      	ldr	r2, [pc, #228]	; (8002514 <HAL_DMA_Abort+0x21c>)
 8002430:	4293      	cmp	r3, r2
 8002432:	d068      	beq.n	8002506 <HAL_DMA_Abort+0x20e>
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a37      	ldr	r2, [pc, #220]	; (8002518 <HAL_DMA_Abort+0x220>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d063      	beq.n	8002506 <HAL_DMA_Abort+0x20e>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4a36      	ldr	r2, [pc, #216]	; (800251c <HAL_DMA_Abort+0x224>)
 8002444:	4293      	cmp	r3, r2
 8002446:	d05e      	beq.n	8002506 <HAL_DMA_Abort+0x20e>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a34      	ldr	r2, [pc, #208]	; (8002520 <HAL_DMA_Abort+0x228>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d059      	beq.n	8002506 <HAL_DMA_Abort+0x20e>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4a33      	ldr	r2, [pc, #204]	; (8002524 <HAL_DMA_Abort+0x22c>)
 8002458:	4293      	cmp	r3, r2
 800245a:	d054      	beq.n	8002506 <HAL_DMA_Abort+0x20e>
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a31      	ldr	r2, [pc, #196]	; (8002528 <HAL_DMA_Abort+0x230>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d04f      	beq.n	8002506 <HAL_DMA_Abort+0x20e>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4a30      	ldr	r2, [pc, #192]	; (800252c <HAL_DMA_Abort+0x234>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d04a      	beq.n	8002506 <HAL_DMA_Abort+0x20e>
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4a2e      	ldr	r2, [pc, #184]	; (8002530 <HAL_DMA_Abort+0x238>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d045      	beq.n	8002506 <HAL_DMA_Abort+0x20e>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4a2d      	ldr	r2, [pc, #180]	; (8002534 <HAL_DMA_Abort+0x23c>)
 8002480:	4293      	cmp	r3, r2
 8002482:	d040      	beq.n	8002506 <HAL_DMA_Abort+0x20e>
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a2b      	ldr	r2, [pc, #172]	; (8002538 <HAL_DMA_Abort+0x240>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d03b      	beq.n	8002506 <HAL_DMA_Abort+0x20e>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4a2a      	ldr	r2, [pc, #168]	; (800253c <HAL_DMA_Abort+0x244>)
 8002494:	4293      	cmp	r3, r2
 8002496:	d036      	beq.n	8002506 <HAL_DMA_Abort+0x20e>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a28      	ldr	r2, [pc, #160]	; (8002540 <HAL_DMA_Abort+0x248>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d031      	beq.n	8002506 <HAL_DMA_Abort+0x20e>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4a27      	ldr	r2, [pc, #156]	; (8002544 <HAL_DMA_Abort+0x24c>)
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d02c      	beq.n	8002506 <HAL_DMA_Abort+0x20e>
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4a25      	ldr	r2, [pc, #148]	; (8002548 <HAL_DMA_Abort+0x250>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d027      	beq.n	8002506 <HAL_DMA_Abort+0x20e>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4a24      	ldr	r2, [pc, #144]	; (800254c <HAL_DMA_Abort+0x254>)
 80024bc:	4293      	cmp	r3, r2
 80024be:	d022      	beq.n	8002506 <HAL_DMA_Abort+0x20e>
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a22      	ldr	r2, [pc, #136]	; (8002550 <HAL_DMA_Abort+0x258>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d01d      	beq.n	8002506 <HAL_DMA_Abort+0x20e>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4a21      	ldr	r2, [pc, #132]	; (8002554 <HAL_DMA_Abort+0x25c>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d018      	beq.n	8002506 <HAL_DMA_Abort+0x20e>
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a1f      	ldr	r2, [pc, #124]	; (8002558 <HAL_DMA_Abort+0x260>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d013      	beq.n	8002506 <HAL_DMA_Abort+0x20e>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4a1e      	ldr	r2, [pc, #120]	; (800255c <HAL_DMA_Abort+0x264>)
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d00e      	beq.n	8002506 <HAL_DMA_Abort+0x20e>
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a1c      	ldr	r2, [pc, #112]	; (8002560 <HAL_DMA_Abort+0x268>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d009      	beq.n	8002506 <HAL_DMA_Abort+0x20e>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4a1b      	ldr	r2, [pc, #108]	; (8002564 <HAL_DMA_Abort+0x26c>)
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d004      	beq.n	8002506 <HAL_DMA_Abort+0x20e>
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4a19      	ldr	r2, [pc, #100]	; (8002568 <HAL_DMA_Abort+0x270>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d132      	bne.n	800256c <HAL_DMA_Abort+0x274>
 8002506:	2301      	movs	r3, #1
 8002508:	e031      	b.n	800256e <HAL_DMA_Abort+0x276>
 800250a:	bf00      	nop
 800250c:	40020010 	.word	0x40020010
 8002510:	40020028 	.word	0x40020028
 8002514:	40020040 	.word	0x40020040
 8002518:	40020058 	.word	0x40020058
 800251c:	40020070 	.word	0x40020070
 8002520:	40020088 	.word	0x40020088
 8002524:	400200a0 	.word	0x400200a0
 8002528:	400200b8 	.word	0x400200b8
 800252c:	40020410 	.word	0x40020410
 8002530:	40020428 	.word	0x40020428
 8002534:	40020440 	.word	0x40020440
 8002538:	40020458 	.word	0x40020458
 800253c:	40020470 	.word	0x40020470
 8002540:	40020488 	.word	0x40020488
 8002544:	400204a0 	.word	0x400204a0
 8002548:	400204b8 	.word	0x400204b8
 800254c:	58025408 	.word	0x58025408
 8002550:	5802541c 	.word	0x5802541c
 8002554:	58025430 	.word	0x58025430
 8002558:	58025444 	.word	0x58025444
 800255c:	58025458 	.word	0x58025458
 8002560:	5802546c 	.word	0x5802546c
 8002564:	58025480 	.word	0x58025480
 8002568:	58025494 	.word	0x58025494
 800256c:	2300      	movs	r3, #0
 800256e:	2b00      	cmp	r3, #0
 8002570:	d007      	beq.n	8002582 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002576:	681a      	ldr	r2, [r3, #0]
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800257c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002580:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4a6d      	ldr	r2, [pc, #436]	; (800273c <HAL_DMA_Abort+0x444>)
 8002588:	4293      	cmp	r3, r2
 800258a:	d04a      	beq.n	8002622 <HAL_DMA_Abort+0x32a>
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a6b      	ldr	r2, [pc, #428]	; (8002740 <HAL_DMA_Abort+0x448>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d045      	beq.n	8002622 <HAL_DMA_Abort+0x32a>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4a6a      	ldr	r2, [pc, #424]	; (8002744 <HAL_DMA_Abort+0x44c>)
 800259c:	4293      	cmp	r3, r2
 800259e:	d040      	beq.n	8002622 <HAL_DMA_Abort+0x32a>
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a68      	ldr	r2, [pc, #416]	; (8002748 <HAL_DMA_Abort+0x450>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d03b      	beq.n	8002622 <HAL_DMA_Abort+0x32a>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4a67      	ldr	r2, [pc, #412]	; (800274c <HAL_DMA_Abort+0x454>)
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d036      	beq.n	8002622 <HAL_DMA_Abort+0x32a>
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a65      	ldr	r2, [pc, #404]	; (8002750 <HAL_DMA_Abort+0x458>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d031      	beq.n	8002622 <HAL_DMA_Abort+0x32a>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4a64      	ldr	r2, [pc, #400]	; (8002754 <HAL_DMA_Abort+0x45c>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d02c      	beq.n	8002622 <HAL_DMA_Abort+0x32a>
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a62      	ldr	r2, [pc, #392]	; (8002758 <HAL_DMA_Abort+0x460>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d027      	beq.n	8002622 <HAL_DMA_Abort+0x32a>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a61      	ldr	r2, [pc, #388]	; (800275c <HAL_DMA_Abort+0x464>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	d022      	beq.n	8002622 <HAL_DMA_Abort+0x32a>
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a5f      	ldr	r2, [pc, #380]	; (8002760 <HAL_DMA_Abort+0x468>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d01d      	beq.n	8002622 <HAL_DMA_Abort+0x32a>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a5e      	ldr	r2, [pc, #376]	; (8002764 <HAL_DMA_Abort+0x46c>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d018      	beq.n	8002622 <HAL_DMA_Abort+0x32a>
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a5c      	ldr	r2, [pc, #368]	; (8002768 <HAL_DMA_Abort+0x470>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d013      	beq.n	8002622 <HAL_DMA_Abort+0x32a>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4a5b      	ldr	r2, [pc, #364]	; (800276c <HAL_DMA_Abort+0x474>)
 8002600:	4293      	cmp	r3, r2
 8002602:	d00e      	beq.n	8002622 <HAL_DMA_Abort+0x32a>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a59      	ldr	r2, [pc, #356]	; (8002770 <HAL_DMA_Abort+0x478>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d009      	beq.n	8002622 <HAL_DMA_Abort+0x32a>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4a58      	ldr	r2, [pc, #352]	; (8002774 <HAL_DMA_Abort+0x47c>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d004      	beq.n	8002622 <HAL_DMA_Abort+0x32a>
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a56      	ldr	r2, [pc, #344]	; (8002778 <HAL_DMA_Abort+0x480>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d108      	bne.n	8002634 <HAL_DMA_Abort+0x33c>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	681a      	ldr	r2, [r3, #0]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f022 0201 	bic.w	r2, r2, #1
 8002630:	601a      	str	r2, [r3, #0]
 8002632:	e007      	b.n	8002644 <HAL_DMA_Abort+0x34c>
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	681a      	ldr	r2, [r3, #0]
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f022 0201 	bic.w	r2, r2, #1
 8002642:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002644:	e013      	b.n	800266e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002646:	f7fe fe7f 	bl	8001348 <HAL_GetTick>
 800264a:	4602      	mov	r2, r0
 800264c:	693b      	ldr	r3, [r7, #16]
 800264e:	1ad3      	subs	r3, r2, r3
 8002650:	2b05      	cmp	r3, #5
 8002652:	d90c      	bls.n	800266e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2220      	movs	r2, #32
 8002658:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2200      	movs	r2, #0
 800265e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2203      	movs	r2, #3
 8002666:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 800266a:	2301      	movs	r3, #1
 800266c:	e12d      	b.n	80028ca <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800266e:	697b      	ldr	r3, [r7, #20]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f003 0301 	and.w	r3, r3, #1
 8002676:	2b00      	cmp	r3, #0
 8002678:	d1e5      	bne.n	8002646 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4a2f      	ldr	r2, [pc, #188]	; (800273c <HAL_DMA_Abort+0x444>)
 8002680:	4293      	cmp	r3, r2
 8002682:	d04a      	beq.n	800271a <HAL_DMA_Abort+0x422>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a2d      	ldr	r2, [pc, #180]	; (8002740 <HAL_DMA_Abort+0x448>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d045      	beq.n	800271a <HAL_DMA_Abort+0x422>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4a2c      	ldr	r2, [pc, #176]	; (8002744 <HAL_DMA_Abort+0x44c>)
 8002694:	4293      	cmp	r3, r2
 8002696:	d040      	beq.n	800271a <HAL_DMA_Abort+0x422>
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a2a      	ldr	r2, [pc, #168]	; (8002748 <HAL_DMA_Abort+0x450>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d03b      	beq.n	800271a <HAL_DMA_Abort+0x422>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4a29      	ldr	r2, [pc, #164]	; (800274c <HAL_DMA_Abort+0x454>)
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d036      	beq.n	800271a <HAL_DMA_Abort+0x422>
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a27      	ldr	r2, [pc, #156]	; (8002750 <HAL_DMA_Abort+0x458>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d031      	beq.n	800271a <HAL_DMA_Abort+0x422>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a26      	ldr	r2, [pc, #152]	; (8002754 <HAL_DMA_Abort+0x45c>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d02c      	beq.n	800271a <HAL_DMA_Abort+0x422>
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a24      	ldr	r2, [pc, #144]	; (8002758 <HAL_DMA_Abort+0x460>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d027      	beq.n	800271a <HAL_DMA_Abort+0x422>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a23      	ldr	r2, [pc, #140]	; (800275c <HAL_DMA_Abort+0x464>)
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d022      	beq.n	800271a <HAL_DMA_Abort+0x422>
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a21      	ldr	r2, [pc, #132]	; (8002760 <HAL_DMA_Abort+0x468>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d01d      	beq.n	800271a <HAL_DMA_Abort+0x422>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4a20      	ldr	r2, [pc, #128]	; (8002764 <HAL_DMA_Abort+0x46c>)
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d018      	beq.n	800271a <HAL_DMA_Abort+0x422>
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a1e      	ldr	r2, [pc, #120]	; (8002768 <HAL_DMA_Abort+0x470>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d013      	beq.n	800271a <HAL_DMA_Abort+0x422>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4a1d      	ldr	r2, [pc, #116]	; (800276c <HAL_DMA_Abort+0x474>)
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d00e      	beq.n	800271a <HAL_DMA_Abort+0x422>
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a1b      	ldr	r2, [pc, #108]	; (8002770 <HAL_DMA_Abort+0x478>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d009      	beq.n	800271a <HAL_DMA_Abort+0x422>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4a1a      	ldr	r2, [pc, #104]	; (8002774 <HAL_DMA_Abort+0x47c>)
 800270c:	4293      	cmp	r3, r2
 800270e:	d004      	beq.n	800271a <HAL_DMA_Abort+0x422>
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a18      	ldr	r2, [pc, #96]	; (8002778 <HAL_DMA_Abort+0x480>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d101      	bne.n	800271e <HAL_DMA_Abort+0x426>
 800271a:	2301      	movs	r3, #1
 800271c:	e000      	b.n	8002720 <HAL_DMA_Abort+0x428>
 800271e:	2300      	movs	r3, #0
 8002720:	2b00      	cmp	r3, #0
 8002722:	d02b      	beq.n	800277c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002728:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800272e:	f003 031f 	and.w	r3, r3, #31
 8002732:	223f      	movs	r2, #63	; 0x3f
 8002734:	409a      	lsls	r2, r3
 8002736:	68bb      	ldr	r3, [r7, #8]
 8002738:	609a      	str	r2, [r3, #8]
 800273a:	e02a      	b.n	8002792 <HAL_DMA_Abort+0x49a>
 800273c:	40020010 	.word	0x40020010
 8002740:	40020028 	.word	0x40020028
 8002744:	40020040 	.word	0x40020040
 8002748:	40020058 	.word	0x40020058
 800274c:	40020070 	.word	0x40020070
 8002750:	40020088 	.word	0x40020088
 8002754:	400200a0 	.word	0x400200a0
 8002758:	400200b8 	.word	0x400200b8
 800275c:	40020410 	.word	0x40020410
 8002760:	40020428 	.word	0x40020428
 8002764:	40020440 	.word	0x40020440
 8002768:	40020458 	.word	0x40020458
 800276c:	40020470 	.word	0x40020470
 8002770:	40020488 	.word	0x40020488
 8002774:	400204a0 	.word	0x400204a0
 8002778:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002780:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002786:	f003 031f 	and.w	r3, r3, #31
 800278a:	2201      	movs	r2, #1
 800278c:	409a      	lsls	r2, r3
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4a4f      	ldr	r2, [pc, #316]	; (80028d4 <HAL_DMA_Abort+0x5dc>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d072      	beq.n	8002882 <HAL_DMA_Abort+0x58a>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a4d      	ldr	r2, [pc, #308]	; (80028d8 <HAL_DMA_Abort+0x5e0>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d06d      	beq.n	8002882 <HAL_DMA_Abort+0x58a>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a4c      	ldr	r2, [pc, #304]	; (80028dc <HAL_DMA_Abort+0x5e4>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d068      	beq.n	8002882 <HAL_DMA_Abort+0x58a>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a4a      	ldr	r2, [pc, #296]	; (80028e0 <HAL_DMA_Abort+0x5e8>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d063      	beq.n	8002882 <HAL_DMA_Abort+0x58a>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4a49      	ldr	r2, [pc, #292]	; (80028e4 <HAL_DMA_Abort+0x5ec>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d05e      	beq.n	8002882 <HAL_DMA_Abort+0x58a>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4a47      	ldr	r2, [pc, #284]	; (80028e8 <HAL_DMA_Abort+0x5f0>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d059      	beq.n	8002882 <HAL_DMA_Abort+0x58a>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4a46      	ldr	r2, [pc, #280]	; (80028ec <HAL_DMA_Abort+0x5f4>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d054      	beq.n	8002882 <HAL_DMA_Abort+0x58a>
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a44      	ldr	r2, [pc, #272]	; (80028f0 <HAL_DMA_Abort+0x5f8>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d04f      	beq.n	8002882 <HAL_DMA_Abort+0x58a>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4a43      	ldr	r2, [pc, #268]	; (80028f4 <HAL_DMA_Abort+0x5fc>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d04a      	beq.n	8002882 <HAL_DMA_Abort+0x58a>
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a41      	ldr	r2, [pc, #260]	; (80028f8 <HAL_DMA_Abort+0x600>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d045      	beq.n	8002882 <HAL_DMA_Abort+0x58a>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4a40      	ldr	r2, [pc, #256]	; (80028fc <HAL_DMA_Abort+0x604>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d040      	beq.n	8002882 <HAL_DMA_Abort+0x58a>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a3e      	ldr	r2, [pc, #248]	; (8002900 <HAL_DMA_Abort+0x608>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d03b      	beq.n	8002882 <HAL_DMA_Abort+0x58a>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a3d      	ldr	r2, [pc, #244]	; (8002904 <HAL_DMA_Abort+0x60c>)
 8002810:	4293      	cmp	r3, r2
 8002812:	d036      	beq.n	8002882 <HAL_DMA_Abort+0x58a>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a3b      	ldr	r2, [pc, #236]	; (8002908 <HAL_DMA_Abort+0x610>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d031      	beq.n	8002882 <HAL_DMA_Abort+0x58a>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4a3a      	ldr	r2, [pc, #232]	; (800290c <HAL_DMA_Abort+0x614>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d02c      	beq.n	8002882 <HAL_DMA_Abort+0x58a>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a38      	ldr	r2, [pc, #224]	; (8002910 <HAL_DMA_Abort+0x618>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d027      	beq.n	8002882 <HAL_DMA_Abort+0x58a>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4a37      	ldr	r2, [pc, #220]	; (8002914 <HAL_DMA_Abort+0x61c>)
 8002838:	4293      	cmp	r3, r2
 800283a:	d022      	beq.n	8002882 <HAL_DMA_Abort+0x58a>
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a35      	ldr	r2, [pc, #212]	; (8002918 <HAL_DMA_Abort+0x620>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d01d      	beq.n	8002882 <HAL_DMA_Abort+0x58a>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4a34      	ldr	r2, [pc, #208]	; (800291c <HAL_DMA_Abort+0x624>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d018      	beq.n	8002882 <HAL_DMA_Abort+0x58a>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a32      	ldr	r2, [pc, #200]	; (8002920 <HAL_DMA_Abort+0x628>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d013      	beq.n	8002882 <HAL_DMA_Abort+0x58a>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4a31      	ldr	r2, [pc, #196]	; (8002924 <HAL_DMA_Abort+0x62c>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d00e      	beq.n	8002882 <HAL_DMA_Abort+0x58a>
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a2f      	ldr	r2, [pc, #188]	; (8002928 <HAL_DMA_Abort+0x630>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d009      	beq.n	8002882 <HAL_DMA_Abort+0x58a>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4a2e      	ldr	r2, [pc, #184]	; (800292c <HAL_DMA_Abort+0x634>)
 8002874:	4293      	cmp	r3, r2
 8002876:	d004      	beq.n	8002882 <HAL_DMA_Abort+0x58a>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a2c      	ldr	r2, [pc, #176]	; (8002930 <HAL_DMA_Abort+0x638>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d101      	bne.n	8002886 <HAL_DMA_Abort+0x58e>
 8002882:	2301      	movs	r3, #1
 8002884:	e000      	b.n	8002888 <HAL_DMA_Abort+0x590>
 8002886:	2300      	movs	r3, #0
 8002888:	2b00      	cmp	r3, #0
 800288a:	d015      	beq.n	80028b8 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002890:	687a      	ldr	r2, [r7, #4]
 8002892:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002894:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800289a:	2b00      	cmp	r3, #0
 800289c:	d00c      	beq.n	80028b8 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80028a2:	681a      	ldr	r2, [r3, #0]
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80028a8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80028ac:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028b2:	687a      	ldr	r2, [r7, #4]
 80028b4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80028b6:	605a      	str	r2, [r3, #4]
      }
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2200      	movs	r2, #0
 80028bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2201      	movs	r2, #1
 80028c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }

  return HAL_OK;
 80028c8:	2300      	movs	r3, #0
}
 80028ca:	4618      	mov	r0, r3
 80028cc:	3718      	adds	r7, #24
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}
 80028d2:	bf00      	nop
 80028d4:	40020010 	.word	0x40020010
 80028d8:	40020028 	.word	0x40020028
 80028dc:	40020040 	.word	0x40020040
 80028e0:	40020058 	.word	0x40020058
 80028e4:	40020070 	.word	0x40020070
 80028e8:	40020088 	.word	0x40020088
 80028ec:	400200a0 	.word	0x400200a0
 80028f0:	400200b8 	.word	0x400200b8
 80028f4:	40020410 	.word	0x40020410
 80028f8:	40020428 	.word	0x40020428
 80028fc:	40020440 	.word	0x40020440
 8002900:	40020458 	.word	0x40020458
 8002904:	40020470 	.word	0x40020470
 8002908:	40020488 	.word	0x40020488
 800290c:	400204a0 	.word	0x400204a0
 8002910:	400204b8 	.word	0x400204b8
 8002914:	58025408 	.word	0x58025408
 8002918:	5802541c 	.word	0x5802541c
 800291c:	58025430 	.word	0x58025430
 8002920:	58025444 	.word	0x58025444
 8002924:	58025458 	.word	0x58025458
 8002928:	5802546c 	.word	0x5802546c
 800292c:	58025480 	.word	0x58025480
 8002930:	58025494 	.word	0x58025494

08002934 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b084      	sub	sp, #16
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d101      	bne.n	8002946 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8002942:	2301      	movs	r3, #1
 8002944:	e205      	b.n	8002d52 <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800294c:	b2db      	uxtb	r3, r3
 800294e:	2b02      	cmp	r3, #2
 8002950:	d004      	beq.n	800295c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2280      	movs	r2, #128	; 0x80
 8002956:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002958:	2301      	movs	r3, #1
 800295a:	e1fa      	b.n	8002d52 <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a8c      	ldr	r2, [pc, #560]	; (8002b94 <HAL_DMA_Abort_IT+0x260>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d04a      	beq.n	80029fc <HAL_DMA_Abort_IT+0xc8>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4a8b      	ldr	r2, [pc, #556]	; (8002b98 <HAL_DMA_Abort_IT+0x264>)
 800296c:	4293      	cmp	r3, r2
 800296e:	d045      	beq.n	80029fc <HAL_DMA_Abort_IT+0xc8>
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a89      	ldr	r2, [pc, #548]	; (8002b9c <HAL_DMA_Abort_IT+0x268>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d040      	beq.n	80029fc <HAL_DMA_Abort_IT+0xc8>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4a88      	ldr	r2, [pc, #544]	; (8002ba0 <HAL_DMA_Abort_IT+0x26c>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d03b      	beq.n	80029fc <HAL_DMA_Abort_IT+0xc8>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a86      	ldr	r2, [pc, #536]	; (8002ba4 <HAL_DMA_Abort_IT+0x270>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d036      	beq.n	80029fc <HAL_DMA_Abort_IT+0xc8>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4a85      	ldr	r2, [pc, #532]	; (8002ba8 <HAL_DMA_Abort_IT+0x274>)
 8002994:	4293      	cmp	r3, r2
 8002996:	d031      	beq.n	80029fc <HAL_DMA_Abort_IT+0xc8>
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a83      	ldr	r2, [pc, #524]	; (8002bac <HAL_DMA_Abort_IT+0x278>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d02c      	beq.n	80029fc <HAL_DMA_Abort_IT+0xc8>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4a82      	ldr	r2, [pc, #520]	; (8002bb0 <HAL_DMA_Abort_IT+0x27c>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d027      	beq.n	80029fc <HAL_DMA_Abort_IT+0xc8>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a80      	ldr	r2, [pc, #512]	; (8002bb4 <HAL_DMA_Abort_IT+0x280>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d022      	beq.n	80029fc <HAL_DMA_Abort_IT+0xc8>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a7f      	ldr	r2, [pc, #508]	; (8002bb8 <HAL_DMA_Abort_IT+0x284>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d01d      	beq.n	80029fc <HAL_DMA_Abort_IT+0xc8>
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a7d      	ldr	r2, [pc, #500]	; (8002bbc <HAL_DMA_Abort_IT+0x288>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d018      	beq.n	80029fc <HAL_DMA_Abort_IT+0xc8>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4a7c      	ldr	r2, [pc, #496]	; (8002bc0 <HAL_DMA_Abort_IT+0x28c>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d013      	beq.n	80029fc <HAL_DMA_Abort_IT+0xc8>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a7a      	ldr	r2, [pc, #488]	; (8002bc4 <HAL_DMA_Abort_IT+0x290>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d00e      	beq.n	80029fc <HAL_DMA_Abort_IT+0xc8>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4a79      	ldr	r2, [pc, #484]	; (8002bc8 <HAL_DMA_Abort_IT+0x294>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d009      	beq.n	80029fc <HAL_DMA_Abort_IT+0xc8>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a77      	ldr	r2, [pc, #476]	; (8002bcc <HAL_DMA_Abort_IT+0x298>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d004      	beq.n	80029fc <HAL_DMA_Abort_IT+0xc8>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4a76      	ldr	r2, [pc, #472]	; (8002bd0 <HAL_DMA_Abort_IT+0x29c>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d101      	bne.n	8002a00 <HAL_DMA_Abort_IT+0xcc>
 80029fc:	2301      	movs	r3, #1
 80029fe:	e000      	b.n	8002a02 <HAL_DMA_Abort_IT+0xce>
 8002a00:	2300      	movs	r3, #0
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d065      	beq.n	8002ad2 <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2204      	movs	r2, #4
 8002a0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4a60      	ldr	r2, [pc, #384]	; (8002b94 <HAL_DMA_Abort_IT+0x260>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d04a      	beq.n	8002aae <HAL_DMA_Abort_IT+0x17a>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a5e      	ldr	r2, [pc, #376]	; (8002b98 <HAL_DMA_Abort_IT+0x264>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d045      	beq.n	8002aae <HAL_DMA_Abort_IT+0x17a>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4a5d      	ldr	r2, [pc, #372]	; (8002b9c <HAL_DMA_Abort_IT+0x268>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d040      	beq.n	8002aae <HAL_DMA_Abort_IT+0x17a>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a5b      	ldr	r2, [pc, #364]	; (8002ba0 <HAL_DMA_Abort_IT+0x26c>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d03b      	beq.n	8002aae <HAL_DMA_Abort_IT+0x17a>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4a5a      	ldr	r2, [pc, #360]	; (8002ba4 <HAL_DMA_Abort_IT+0x270>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d036      	beq.n	8002aae <HAL_DMA_Abort_IT+0x17a>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a58      	ldr	r2, [pc, #352]	; (8002ba8 <HAL_DMA_Abort_IT+0x274>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d031      	beq.n	8002aae <HAL_DMA_Abort_IT+0x17a>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4a57      	ldr	r2, [pc, #348]	; (8002bac <HAL_DMA_Abort_IT+0x278>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d02c      	beq.n	8002aae <HAL_DMA_Abort_IT+0x17a>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a55      	ldr	r2, [pc, #340]	; (8002bb0 <HAL_DMA_Abort_IT+0x27c>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d027      	beq.n	8002aae <HAL_DMA_Abort_IT+0x17a>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a54      	ldr	r2, [pc, #336]	; (8002bb4 <HAL_DMA_Abort_IT+0x280>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d022      	beq.n	8002aae <HAL_DMA_Abort_IT+0x17a>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a52      	ldr	r2, [pc, #328]	; (8002bb8 <HAL_DMA_Abort_IT+0x284>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d01d      	beq.n	8002aae <HAL_DMA_Abort_IT+0x17a>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4a51      	ldr	r2, [pc, #324]	; (8002bbc <HAL_DMA_Abort_IT+0x288>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d018      	beq.n	8002aae <HAL_DMA_Abort_IT+0x17a>
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a4f      	ldr	r2, [pc, #316]	; (8002bc0 <HAL_DMA_Abort_IT+0x28c>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d013      	beq.n	8002aae <HAL_DMA_Abort_IT+0x17a>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a4e      	ldr	r2, [pc, #312]	; (8002bc4 <HAL_DMA_Abort_IT+0x290>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d00e      	beq.n	8002aae <HAL_DMA_Abort_IT+0x17a>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a4c      	ldr	r2, [pc, #304]	; (8002bc8 <HAL_DMA_Abort_IT+0x294>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d009      	beq.n	8002aae <HAL_DMA_Abort_IT+0x17a>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a4b      	ldr	r2, [pc, #300]	; (8002bcc <HAL_DMA_Abort_IT+0x298>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d004      	beq.n	8002aae <HAL_DMA_Abort_IT+0x17a>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a49      	ldr	r2, [pc, #292]	; (8002bd0 <HAL_DMA_Abort_IT+0x29c>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d108      	bne.n	8002ac0 <HAL_DMA_Abort_IT+0x18c>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	681a      	ldr	r2, [r3, #0]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f022 0201 	bic.w	r2, r2, #1
 8002abc:	601a      	str	r2, [r3, #0]
 8002abe:	e147      	b.n	8002d50 <HAL_DMA_Abort_IT+0x41c>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	681a      	ldr	r2, [r3, #0]
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f022 0201 	bic.w	r2, r2, #1
 8002ace:	601a      	str	r2, [r3, #0]
 8002ad0:	e13e      	b.n	8002d50 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	681a      	ldr	r2, [r3, #0]
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f022 020e 	bic.w	r2, r2, #14
 8002ae0:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4a2b      	ldr	r2, [pc, #172]	; (8002b94 <HAL_DMA_Abort_IT+0x260>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d04a      	beq.n	8002b82 <HAL_DMA_Abort_IT+0x24e>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a29      	ldr	r2, [pc, #164]	; (8002b98 <HAL_DMA_Abort_IT+0x264>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d045      	beq.n	8002b82 <HAL_DMA_Abort_IT+0x24e>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4a28      	ldr	r2, [pc, #160]	; (8002b9c <HAL_DMA_Abort_IT+0x268>)
 8002afc:	4293      	cmp	r3, r2
 8002afe:	d040      	beq.n	8002b82 <HAL_DMA_Abort_IT+0x24e>
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a26      	ldr	r2, [pc, #152]	; (8002ba0 <HAL_DMA_Abort_IT+0x26c>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d03b      	beq.n	8002b82 <HAL_DMA_Abort_IT+0x24e>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4a25      	ldr	r2, [pc, #148]	; (8002ba4 <HAL_DMA_Abort_IT+0x270>)
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d036      	beq.n	8002b82 <HAL_DMA_Abort_IT+0x24e>
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a23      	ldr	r2, [pc, #140]	; (8002ba8 <HAL_DMA_Abort_IT+0x274>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d031      	beq.n	8002b82 <HAL_DMA_Abort_IT+0x24e>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4a22      	ldr	r2, [pc, #136]	; (8002bac <HAL_DMA_Abort_IT+0x278>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d02c      	beq.n	8002b82 <HAL_DMA_Abort_IT+0x24e>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a20      	ldr	r2, [pc, #128]	; (8002bb0 <HAL_DMA_Abort_IT+0x27c>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d027      	beq.n	8002b82 <HAL_DMA_Abort_IT+0x24e>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4a1f      	ldr	r2, [pc, #124]	; (8002bb4 <HAL_DMA_Abort_IT+0x280>)
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d022      	beq.n	8002b82 <HAL_DMA_Abort_IT+0x24e>
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a1d      	ldr	r2, [pc, #116]	; (8002bb8 <HAL_DMA_Abort_IT+0x284>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d01d      	beq.n	8002b82 <HAL_DMA_Abort_IT+0x24e>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4a1c      	ldr	r2, [pc, #112]	; (8002bbc <HAL_DMA_Abort_IT+0x288>)
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d018      	beq.n	8002b82 <HAL_DMA_Abort_IT+0x24e>
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a1a      	ldr	r2, [pc, #104]	; (8002bc0 <HAL_DMA_Abort_IT+0x28c>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d013      	beq.n	8002b82 <HAL_DMA_Abort_IT+0x24e>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4a19      	ldr	r2, [pc, #100]	; (8002bc4 <HAL_DMA_Abort_IT+0x290>)
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d00e      	beq.n	8002b82 <HAL_DMA_Abort_IT+0x24e>
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4a17      	ldr	r2, [pc, #92]	; (8002bc8 <HAL_DMA_Abort_IT+0x294>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d009      	beq.n	8002b82 <HAL_DMA_Abort_IT+0x24e>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4a16      	ldr	r2, [pc, #88]	; (8002bcc <HAL_DMA_Abort_IT+0x298>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d004      	beq.n	8002b82 <HAL_DMA_Abort_IT+0x24e>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a14      	ldr	r2, [pc, #80]	; (8002bd0 <HAL_DMA_Abort_IT+0x29c>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d128      	bne.n	8002bd4 <HAL_DMA_Abort_IT+0x2a0>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	681a      	ldr	r2, [r3, #0]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f022 0201 	bic.w	r2, r2, #1
 8002b90:	601a      	str	r2, [r3, #0]
 8002b92:	e027      	b.n	8002be4 <HAL_DMA_Abort_IT+0x2b0>
 8002b94:	40020010 	.word	0x40020010
 8002b98:	40020028 	.word	0x40020028
 8002b9c:	40020040 	.word	0x40020040
 8002ba0:	40020058 	.word	0x40020058
 8002ba4:	40020070 	.word	0x40020070
 8002ba8:	40020088 	.word	0x40020088
 8002bac:	400200a0 	.word	0x400200a0
 8002bb0:	400200b8 	.word	0x400200b8
 8002bb4:	40020410 	.word	0x40020410
 8002bb8:	40020428 	.word	0x40020428
 8002bbc:	40020440 	.word	0x40020440
 8002bc0:	40020458 	.word	0x40020458
 8002bc4:	40020470 	.word	0x40020470
 8002bc8:	40020488 	.word	0x40020488
 8002bcc:	400204a0 	.word	0x400204a0
 8002bd0:	400204b8 	.word	0x400204b8
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	681a      	ldr	r2, [r3, #0]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f022 0201 	bic.w	r2, r2, #1
 8002be2:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a5c      	ldr	r2, [pc, #368]	; (8002d5c <HAL_DMA_Abort_IT+0x428>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d072      	beq.n	8002cd4 <HAL_DMA_Abort_IT+0x3a0>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4a5b      	ldr	r2, [pc, #364]	; (8002d60 <HAL_DMA_Abort_IT+0x42c>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d06d      	beq.n	8002cd4 <HAL_DMA_Abort_IT+0x3a0>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a59      	ldr	r2, [pc, #356]	; (8002d64 <HAL_DMA_Abort_IT+0x430>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d068      	beq.n	8002cd4 <HAL_DMA_Abort_IT+0x3a0>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4a58      	ldr	r2, [pc, #352]	; (8002d68 <HAL_DMA_Abort_IT+0x434>)
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d063      	beq.n	8002cd4 <HAL_DMA_Abort_IT+0x3a0>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a56      	ldr	r2, [pc, #344]	; (8002d6c <HAL_DMA_Abort_IT+0x438>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d05e      	beq.n	8002cd4 <HAL_DMA_Abort_IT+0x3a0>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4a55      	ldr	r2, [pc, #340]	; (8002d70 <HAL_DMA_Abort_IT+0x43c>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d059      	beq.n	8002cd4 <HAL_DMA_Abort_IT+0x3a0>
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a53      	ldr	r2, [pc, #332]	; (8002d74 <HAL_DMA_Abort_IT+0x440>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d054      	beq.n	8002cd4 <HAL_DMA_Abort_IT+0x3a0>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a52      	ldr	r2, [pc, #328]	; (8002d78 <HAL_DMA_Abort_IT+0x444>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d04f      	beq.n	8002cd4 <HAL_DMA_Abort_IT+0x3a0>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a50      	ldr	r2, [pc, #320]	; (8002d7c <HAL_DMA_Abort_IT+0x448>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d04a      	beq.n	8002cd4 <HAL_DMA_Abort_IT+0x3a0>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4a4f      	ldr	r2, [pc, #316]	; (8002d80 <HAL_DMA_Abort_IT+0x44c>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d045      	beq.n	8002cd4 <HAL_DMA_Abort_IT+0x3a0>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a4d      	ldr	r2, [pc, #308]	; (8002d84 <HAL_DMA_Abort_IT+0x450>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d040      	beq.n	8002cd4 <HAL_DMA_Abort_IT+0x3a0>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a4c      	ldr	r2, [pc, #304]	; (8002d88 <HAL_DMA_Abort_IT+0x454>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d03b      	beq.n	8002cd4 <HAL_DMA_Abort_IT+0x3a0>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a4a      	ldr	r2, [pc, #296]	; (8002d8c <HAL_DMA_Abort_IT+0x458>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d036      	beq.n	8002cd4 <HAL_DMA_Abort_IT+0x3a0>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a49      	ldr	r2, [pc, #292]	; (8002d90 <HAL_DMA_Abort_IT+0x45c>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d031      	beq.n	8002cd4 <HAL_DMA_Abort_IT+0x3a0>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a47      	ldr	r2, [pc, #284]	; (8002d94 <HAL_DMA_Abort_IT+0x460>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d02c      	beq.n	8002cd4 <HAL_DMA_Abort_IT+0x3a0>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4a46      	ldr	r2, [pc, #280]	; (8002d98 <HAL_DMA_Abort_IT+0x464>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d027      	beq.n	8002cd4 <HAL_DMA_Abort_IT+0x3a0>
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a44      	ldr	r2, [pc, #272]	; (8002d9c <HAL_DMA_Abort_IT+0x468>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d022      	beq.n	8002cd4 <HAL_DMA_Abort_IT+0x3a0>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4a43      	ldr	r2, [pc, #268]	; (8002da0 <HAL_DMA_Abort_IT+0x46c>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d01d      	beq.n	8002cd4 <HAL_DMA_Abort_IT+0x3a0>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a41      	ldr	r2, [pc, #260]	; (8002da4 <HAL_DMA_Abort_IT+0x470>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d018      	beq.n	8002cd4 <HAL_DMA_Abort_IT+0x3a0>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4a40      	ldr	r2, [pc, #256]	; (8002da8 <HAL_DMA_Abort_IT+0x474>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d013      	beq.n	8002cd4 <HAL_DMA_Abort_IT+0x3a0>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a3e      	ldr	r2, [pc, #248]	; (8002dac <HAL_DMA_Abort_IT+0x478>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d00e      	beq.n	8002cd4 <HAL_DMA_Abort_IT+0x3a0>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4a3d      	ldr	r2, [pc, #244]	; (8002db0 <HAL_DMA_Abort_IT+0x47c>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d009      	beq.n	8002cd4 <HAL_DMA_Abort_IT+0x3a0>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a3b      	ldr	r2, [pc, #236]	; (8002db4 <HAL_DMA_Abort_IT+0x480>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d004      	beq.n	8002cd4 <HAL_DMA_Abort_IT+0x3a0>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4a3a      	ldr	r2, [pc, #232]	; (8002db8 <HAL_DMA_Abort_IT+0x484>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d101      	bne.n	8002cd8 <HAL_DMA_Abort_IT+0x3a4>
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	e000      	b.n	8002cda <HAL_DMA_Abort_IT+0x3a6>
 8002cd8:	2300      	movs	r3, #0
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d028      	beq.n	8002d30 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ce2:	681a      	ldr	r2, [r3, #0]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ce8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002cec:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cf2:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cf8:	f003 031f 	and.w	r3, r3, #31
 8002cfc:	2201      	movs	r2, #1
 8002cfe:	409a      	lsls	r2, r3
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002d08:	687a      	ldr	r2, [r7, #4]
 8002d0a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002d0c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d00c      	beq.n	8002d30 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d1a:	681a      	ldr	r2, [r3, #0]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d20:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002d24:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d2a:	687a      	ldr	r2, [r7, #4]
 8002d2c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002d2e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2200      	movs	r2, #0
 8002d34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2201      	movs	r2, #1
 8002d3c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d003      	beq.n	8002d50 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d4c:	6878      	ldr	r0, [r7, #4]
 8002d4e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8002d50:	2300      	movs	r3, #0
}
 8002d52:	4618      	mov	r0, r3
 8002d54:	3710      	adds	r7, #16
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}
 8002d5a:	bf00      	nop
 8002d5c:	40020010 	.word	0x40020010
 8002d60:	40020028 	.word	0x40020028
 8002d64:	40020040 	.word	0x40020040
 8002d68:	40020058 	.word	0x40020058
 8002d6c:	40020070 	.word	0x40020070
 8002d70:	40020088 	.word	0x40020088
 8002d74:	400200a0 	.word	0x400200a0
 8002d78:	400200b8 	.word	0x400200b8
 8002d7c:	40020410 	.word	0x40020410
 8002d80:	40020428 	.word	0x40020428
 8002d84:	40020440 	.word	0x40020440
 8002d88:	40020458 	.word	0x40020458
 8002d8c:	40020470 	.word	0x40020470
 8002d90:	40020488 	.word	0x40020488
 8002d94:	400204a0 	.word	0x400204a0
 8002d98:	400204b8 	.word	0x400204b8
 8002d9c:	58025408 	.word	0x58025408
 8002da0:	5802541c 	.word	0x5802541c
 8002da4:	58025430 	.word	0x58025430
 8002da8:	58025444 	.word	0x58025444
 8002dac:	58025458 	.word	0x58025458
 8002db0:	5802546c 	.word	0x5802546c
 8002db4:	58025480 	.word	0x58025480
 8002db8:	58025494 	.word	0x58025494

08002dbc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b08a      	sub	sp, #40	; 0x28
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002dc8:	4b67      	ldr	r3, [pc, #412]	; (8002f68 <HAL_DMA_IRQHandler+0x1ac>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a67      	ldr	r2, [pc, #412]	; (8002f6c <HAL_DMA_IRQHandler+0x1b0>)
 8002dce:	fba2 2303 	umull	r2, r3, r2, r3
 8002dd2:	0a9b      	lsrs	r3, r3, #10
 8002dd4:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dda:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002de0:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8002de2:	6a3b      	ldr	r3, [r7, #32]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8002de8:	69fb      	ldr	r3, [r7, #28]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4a5f      	ldr	r2, [pc, #380]	; (8002f70 <HAL_DMA_IRQHandler+0x1b4>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d04a      	beq.n	8002e8e <HAL_DMA_IRQHandler+0xd2>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a5d      	ldr	r2, [pc, #372]	; (8002f74 <HAL_DMA_IRQHandler+0x1b8>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d045      	beq.n	8002e8e <HAL_DMA_IRQHandler+0xd2>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4a5c      	ldr	r2, [pc, #368]	; (8002f78 <HAL_DMA_IRQHandler+0x1bc>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d040      	beq.n	8002e8e <HAL_DMA_IRQHandler+0xd2>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a5a      	ldr	r2, [pc, #360]	; (8002f7c <HAL_DMA_IRQHandler+0x1c0>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d03b      	beq.n	8002e8e <HAL_DMA_IRQHandler+0xd2>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4a59      	ldr	r2, [pc, #356]	; (8002f80 <HAL_DMA_IRQHandler+0x1c4>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d036      	beq.n	8002e8e <HAL_DMA_IRQHandler+0xd2>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4a57      	ldr	r2, [pc, #348]	; (8002f84 <HAL_DMA_IRQHandler+0x1c8>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d031      	beq.n	8002e8e <HAL_DMA_IRQHandler+0xd2>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4a56      	ldr	r2, [pc, #344]	; (8002f88 <HAL_DMA_IRQHandler+0x1cc>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d02c      	beq.n	8002e8e <HAL_DMA_IRQHandler+0xd2>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a54      	ldr	r2, [pc, #336]	; (8002f8c <HAL_DMA_IRQHandler+0x1d0>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d027      	beq.n	8002e8e <HAL_DMA_IRQHandler+0xd2>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4a53      	ldr	r2, [pc, #332]	; (8002f90 <HAL_DMA_IRQHandler+0x1d4>)
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d022      	beq.n	8002e8e <HAL_DMA_IRQHandler+0xd2>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4a51      	ldr	r2, [pc, #324]	; (8002f94 <HAL_DMA_IRQHandler+0x1d8>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d01d      	beq.n	8002e8e <HAL_DMA_IRQHandler+0xd2>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4a50      	ldr	r2, [pc, #320]	; (8002f98 <HAL_DMA_IRQHandler+0x1dc>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d018      	beq.n	8002e8e <HAL_DMA_IRQHandler+0xd2>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a4e      	ldr	r2, [pc, #312]	; (8002f9c <HAL_DMA_IRQHandler+0x1e0>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d013      	beq.n	8002e8e <HAL_DMA_IRQHandler+0xd2>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4a4d      	ldr	r2, [pc, #308]	; (8002fa0 <HAL_DMA_IRQHandler+0x1e4>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d00e      	beq.n	8002e8e <HAL_DMA_IRQHandler+0xd2>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4a4b      	ldr	r2, [pc, #300]	; (8002fa4 <HAL_DMA_IRQHandler+0x1e8>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d009      	beq.n	8002e8e <HAL_DMA_IRQHandler+0xd2>
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4a4a      	ldr	r2, [pc, #296]	; (8002fa8 <HAL_DMA_IRQHandler+0x1ec>)
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d004      	beq.n	8002e8e <HAL_DMA_IRQHandler+0xd2>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4a48      	ldr	r2, [pc, #288]	; (8002fac <HAL_DMA_IRQHandler+0x1f0>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d101      	bne.n	8002e92 <HAL_DMA_IRQHandler+0xd6>
 8002e8e:	2301      	movs	r3, #1
 8002e90:	e000      	b.n	8002e94 <HAL_DMA_IRQHandler+0xd8>
 8002e92:	2300      	movs	r3, #0
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	f000 842b 	beq.w	80036f0 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e9e:	f003 031f 	and.w	r3, r3, #31
 8002ea2:	2208      	movs	r2, #8
 8002ea4:	409a      	lsls	r2, r3
 8002ea6:	69bb      	ldr	r3, [r7, #24]
 8002ea8:	4013      	ands	r3, r2
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	f000 80a2 	beq.w	8002ff4 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a2e      	ldr	r2, [pc, #184]	; (8002f70 <HAL_DMA_IRQHandler+0x1b4>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d04a      	beq.n	8002f50 <HAL_DMA_IRQHandler+0x194>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4a2d      	ldr	r2, [pc, #180]	; (8002f74 <HAL_DMA_IRQHandler+0x1b8>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d045      	beq.n	8002f50 <HAL_DMA_IRQHandler+0x194>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a2b      	ldr	r2, [pc, #172]	; (8002f78 <HAL_DMA_IRQHandler+0x1bc>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d040      	beq.n	8002f50 <HAL_DMA_IRQHandler+0x194>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a2a      	ldr	r2, [pc, #168]	; (8002f7c <HAL_DMA_IRQHandler+0x1c0>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d03b      	beq.n	8002f50 <HAL_DMA_IRQHandler+0x194>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a28      	ldr	r2, [pc, #160]	; (8002f80 <HAL_DMA_IRQHandler+0x1c4>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d036      	beq.n	8002f50 <HAL_DMA_IRQHandler+0x194>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4a27      	ldr	r2, [pc, #156]	; (8002f84 <HAL_DMA_IRQHandler+0x1c8>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d031      	beq.n	8002f50 <HAL_DMA_IRQHandler+0x194>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a25      	ldr	r2, [pc, #148]	; (8002f88 <HAL_DMA_IRQHandler+0x1cc>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d02c      	beq.n	8002f50 <HAL_DMA_IRQHandler+0x194>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4a24      	ldr	r2, [pc, #144]	; (8002f8c <HAL_DMA_IRQHandler+0x1d0>)
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d027      	beq.n	8002f50 <HAL_DMA_IRQHandler+0x194>
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a22      	ldr	r2, [pc, #136]	; (8002f90 <HAL_DMA_IRQHandler+0x1d4>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d022      	beq.n	8002f50 <HAL_DMA_IRQHandler+0x194>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4a21      	ldr	r2, [pc, #132]	; (8002f94 <HAL_DMA_IRQHandler+0x1d8>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d01d      	beq.n	8002f50 <HAL_DMA_IRQHandler+0x194>
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a1f      	ldr	r2, [pc, #124]	; (8002f98 <HAL_DMA_IRQHandler+0x1dc>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d018      	beq.n	8002f50 <HAL_DMA_IRQHandler+0x194>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4a1e      	ldr	r2, [pc, #120]	; (8002f9c <HAL_DMA_IRQHandler+0x1e0>)
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d013      	beq.n	8002f50 <HAL_DMA_IRQHandler+0x194>
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a1c      	ldr	r2, [pc, #112]	; (8002fa0 <HAL_DMA_IRQHandler+0x1e4>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d00e      	beq.n	8002f50 <HAL_DMA_IRQHandler+0x194>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a1b      	ldr	r2, [pc, #108]	; (8002fa4 <HAL_DMA_IRQHandler+0x1e8>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d009      	beq.n	8002f50 <HAL_DMA_IRQHandler+0x194>
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a19      	ldr	r2, [pc, #100]	; (8002fa8 <HAL_DMA_IRQHandler+0x1ec>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d004      	beq.n	8002f50 <HAL_DMA_IRQHandler+0x194>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4a18      	ldr	r2, [pc, #96]	; (8002fac <HAL_DMA_IRQHandler+0x1f0>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d12f      	bne.n	8002fb0 <HAL_DMA_IRQHandler+0x1f4>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f003 0304 	and.w	r3, r3, #4
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	bf14      	ite	ne
 8002f5e:	2301      	movne	r3, #1
 8002f60:	2300      	moveq	r3, #0
 8002f62:	b2db      	uxtb	r3, r3
 8002f64:	e02e      	b.n	8002fc4 <HAL_DMA_IRQHandler+0x208>
 8002f66:	bf00      	nop
 8002f68:	24000400 	.word	0x24000400
 8002f6c:	1b4e81b5 	.word	0x1b4e81b5
 8002f70:	40020010 	.word	0x40020010
 8002f74:	40020028 	.word	0x40020028
 8002f78:	40020040 	.word	0x40020040
 8002f7c:	40020058 	.word	0x40020058
 8002f80:	40020070 	.word	0x40020070
 8002f84:	40020088 	.word	0x40020088
 8002f88:	400200a0 	.word	0x400200a0
 8002f8c:	400200b8 	.word	0x400200b8
 8002f90:	40020410 	.word	0x40020410
 8002f94:	40020428 	.word	0x40020428
 8002f98:	40020440 	.word	0x40020440
 8002f9c:	40020458 	.word	0x40020458
 8002fa0:	40020470 	.word	0x40020470
 8002fa4:	40020488 	.word	0x40020488
 8002fa8:	400204a0 	.word	0x400204a0
 8002fac:	400204b8 	.word	0x400204b8
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f003 0308 	and.w	r3, r3, #8
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	bf14      	ite	ne
 8002fbe:	2301      	movne	r3, #1
 8002fc0:	2300      	moveq	r3, #0
 8002fc2:	b2db      	uxtb	r3, r3
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d015      	beq.n	8002ff4 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	681a      	ldr	r2, [r3, #0]
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f022 0204 	bic.w	r2, r2, #4
 8002fd6:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fdc:	f003 031f 	and.w	r3, r3, #31
 8002fe0:	2208      	movs	r2, #8
 8002fe2:	409a      	lsls	r2, r3
 8002fe4:	6a3b      	ldr	r3, [r7, #32]
 8002fe6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fec:	f043 0201 	orr.w	r2, r3, #1
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ff8:	f003 031f 	and.w	r3, r3, #31
 8002ffc:	69ba      	ldr	r2, [r7, #24]
 8002ffe:	fa22 f303 	lsr.w	r3, r2, r3
 8003002:	f003 0301 	and.w	r3, r3, #1
 8003006:	2b00      	cmp	r3, #0
 8003008:	d06e      	beq.n	80030e8 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4a69      	ldr	r2, [pc, #420]	; (80031b4 <HAL_DMA_IRQHandler+0x3f8>)
 8003010:	4293      	cmp	r3, r2
 8003012:	d04a      	beq.n	80030aa <HAL_DMA_IRQHandler+0x2ee>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4a67      	ldr	r2, [pc, #412]	; (80031b8 <HAL_DMA_IRQHandler+0x3fc>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d045      	beq.n	80030aa <HAL_DMA_IRQHandler+0x2ee>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4a66      	ldr	r2, [pc, #408]	; (80031bc <HAL_DMA_IRQHandler+0x400>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d040      	beq.n	80030aa <HAL_DMA_IRQHandler+0x2ee>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4a64      	ldr	r2, [pc, #400]	; (80031c0 <HAL_DMA_IRQHandler+0x404>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d03b      	beq.n	80030aa <HAL_DMA_IRQHandler+0x2ee>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4a63      	ldr	r2, [pc, #396]	; (80031c4 <HAL_DMA_IRQHandler+0x408>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d036      	beq.n	80030aa <HAL_DMA_IRQHandler+0x2ee>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a61      	ldr	r2, [pc, #388]	; (80031c8 <HAL_DMA_IRQHandler+0x40c>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d031      	beq.n	80030aa <HAL_DMA_IRQHandler+0x2ee>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a60      	ldr	r2, [pc, #384]	; (80031cc <HAL_DMA_IRQHandler+0x410>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d02c      	beq.n	80030aa <HAL_DMA_IRQHandler+0x2ee>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a5e      	ldr	r2, [pc, #376]	; (80031d0 <HAL_DMA_IRQHandler+0x414>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d027      	beq.n	80030aa <HAL_DMA_IRQHandler+0x2ee>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a5d      	ldr	r2, [pc, #372]	; (80031d4 <HAL_DMA_IRQHandler+0x418>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d022      	beq.n	80030aa <HAL_DMA_IRQHandler+0x2ee>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a5b      	ldr	r2, [pc, #364]	; (80031d8 <HAL_DMA_IRQHandler+0x41c>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d01d      	beq.n	80030aa <HAL_DMA_IRQHandler+0x2ee>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4a5a      	ldr	r2, [pc, #360]	; (80031dc <HAL_DMA_IRQHandler+0x420>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d018      	beq.n	80030aa <HAL_DMA_IRQHandler+0x2ee>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4a58      	ldr	r2, [pc, #352]	; (80031e0 <HAL_DMA_IRQHandler+0x424>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d013      	beq.n	80030aa <HAL_DMA_IRQHandler+0x2ee>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4a57      	ldr	r2, [pc, #348]	; (80031e4 <HAL_DMA_IRQHandler+0x428>)
 8003088:	4293      	cmp	r3, r2
 800308a:	d00e      	beq.n	80030aa <HAL_DMA_IRQHandler+0x2ee>
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a55      	ldr	r2, [pc, #340]	; (80031e8 <HAL_DMA_IRQHandler+0x42c>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d009      	beq.n	80030aa <HAL_DMA_IRQHandler+0x2ee>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4a54      	ldr	r2, [pc, #336]	; (80031ec <HAL_DMA_IRQHandler+0x430>)
 800309c:	4293      	cmp	r3, r2
 800309e:	d004      	beq.n	80030aa <HAL_DMA_IRQHandler+0x2ee>
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a52      	ldr	r2, [pc, #328]	; (80031f0 <HAL_DMA_IRQHandler+0x434>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d10a      	bne.n	80030c0 <HAL_DMA_IRQHandler+0x304>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	695b      	ldr	r3, [r3, #20]
 80030b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	bf14      	ite	ne
 80030b8:	2301      	movne	r3, #1
 80030ba:	2300      	moveq	r3, #0
 80030bc:	b2db      	uxtb	r3, r3
 80030be:	e003      	b.n	80030c8 <HAL_DMA_IRQHandler+0x30c>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	2300      	movs	r3, #0
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d00d      	beq.n	80030e8 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030d0:	f003 031f 	and.w	r3, r3, #31
 80030d4:	2201      	movs	r2, #1
 80030d6:	409a      	lsls	r2, r3
 80030d8:	6a3b      	ldr	r3, [r7, #32]
 80030da:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030e0:	f043 0202 	orr.w	r2, r3, #2
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030ec:	f003 031f 	and.w	r3, r3, #31
 80030f0:	2204      	movs	r2, #4
 80030f2:	409a      	lsls	r2, r3
 80030f4:	69bb      	ldr	r3, [r7, #24]
 80030f6:	4013      	ands	r3, r2
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	f000 808f 	beq.w	800321c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a2c      	ldr	r2, [pc, #176]	; (80031b4 <HAL_DMA_IRQHandler+0x3f8>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d04a      	beq.n	800319e <HAL_DMA_IRQHandler+0x3e2>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a2a      	ldr	r2, [pc, #168]	; (80031b8 <HAL_DMA_IRQHandler+0x3fc>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d045      	beq.n	800319e <HAL_DMA_IRQHandler+0x3e2>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4a29      	ldr	r2, [pc, #164]	; (80031bc <HAL_DMA_IRQHandler+0x400>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d040      	beq.n	800319e <HAL_DMA_IRQHandler+0x3e2>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a27      	ldr	r2, [pc, #156]	; (80031c0 <HAL_DMA_IRQHandler+0x404>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d03b      	beq.n	800319e <HAL_DMA_IRQHandler+0x3e2>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a26      	ldr	r2, [pc, #152]	; (80031c4 <HAL_DMA_IRQHandler+0x408>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d036      	beq.n	800319e <HAL_DMA_IRQHandler+0x3e2>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a24      	ldr	r2, [pc, #144]	; (80031c8 <HAL_DMA_IRQHandler+0x40c>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d031      	beq.n	800319e <HAL_DMA_IRQHandler+0x3e2>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4a23      	ldr	r2, [pc, #140]	; (80031cc <HAL_DMA_IRQHandler+0x410>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d02c      	beq.n	800319e <HAL_DMA_IRQHandler+0x3e2>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a21      	ldr	r2, [pc, #132]	; (80031d0 <HAL_DMA_IRQHandler+0x414>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d027      	beq.n	800319e <HAL_DMA_IRQHandler+0x3e2>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a20      	ldr	r2, [pc, #128]	; (80031d4 <HAL_DMA_IRQHandler+0x418>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d022      	beq.n	800319e <HAL_DMA_IRQHandler+0x3e2>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a1e      	ldr	r2, [pc, #120]	; (80031d8 <HAL_DMA_IRQHandler+0x41c>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d01d      	beq.n	800319e <HAL_DMA_IRQHandler+0x3e2>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4a1d      	ldr	r2, [pc, #116]	; (80031dc <HAL_DMA_IRQHandler+0x420>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d018      	beq.n	800319e <HAL_DMA_IRQHandler+0x3e2>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a1b      	ldr	r2, [pc, #108]	; (80031e0 <HAL_DMA_IRQHandler+0x424>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d013      	beq.n	800319e <HAL_DMA_IRQHandler+0x3e2>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a1a      	ldr	r2, [pc, #104]	; (80031e4 <HAL_DMA_IRQHandler+0x428>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d00e      	beq.n	800319e <HAL_DMA_IRQHandler+0x3e2>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a18      	ldr	r2, [pc, #96]	; (80031e8 <HAL_DMA_IRQHandler+0x42c>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d009      	beq.n	800319e <HAL_DMA_IRQHandler+0x3e2>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a17      	ldr	r2, [pc, #92]	; (80031ec <HAL_DMA_IRQHandler+0x430>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d004      	beq.n	800319e <HAL_DMA_IRQHandler+0x3e2>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a15      	ldr	r2, [pc, #84]	; (80031f0 <HAL_DMA_IRQHandler+0x434>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d12a      	bne.n	80031f4 <HAL_DMA_IRQHandler+0x438>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f003 0302 	and.w	r3, r3, #2
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	bf14      	ite	ne
 80031ac:	2301      	movne	r3, #1
 80031ae:	2300      	moveq	r3, #0
 80031b0:	b2db      	uxtb	r3, r3
 80031b2:	e023      	b.n	80031fc <HAL_DMA_IRQHandler+0x440>
 80031b4:	40020010 	.word	0x40020010
 80031b8:	40020028 	.word	0x40020028
 80031bc:	40020040 	.word	0x40020040
 80031c0:	40020058 	.word	0x40020058
 80031c4:	40020070 	.word	0x40020070
 80031c8:	40020088 	.word	0x40020088
 80031cc:	400200a0 	.word	0x400200a0
 80031d0:	400200b8 	.word	0x400200b8
 80031d4:	40020410 	.word	0x40020410
 80031d8:	40020428 	.word	0x40020428
 80031dc:	40020440 	.word	0x40020440
 80031e0:	40020458 	.word	0x40020458
 80031e4:	40020470 	.word	0x40020470
 80031e8:	40020488 	.word	0x40020488
 80031ec:	400204a0 	.word	0x400204a0
 80031f0:	400204b8 	.word	0x400204b8
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	2300      	movs	r3, #0
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d00d      	beq.n	800321c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003204:	f003 031f 	and.w	r3, r3, #31
 8003208:	2204      	movs	r2, #4
 800320a:	409a      	lsls	r2, r3
 800320c:	6a3b      	ldr	r3, [r7, #32]
 800320e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003214:	f043 0204 	orr.w	r2, r3, #4
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003220:	f003 031f 	and.w	r3, r3, #31
 8003224:	2210      	movs	r2, #16
 8003226:	409a      	lsls	r2, r3
 8003228:	69bb      	ldr	r3, [r7, #24]
 800322a:	4013      	ands	r3, r2
 800322c:	2b00      	cmp	r3, #0
 800322e:	f000 80a6 	beq.w	800337e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a85      	ldr	r2, [pc, #532]	; (800344c <HAL_DMA_IRQHandler+0x690>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d04a      	beq.n	80032d2 <HAL_DMA_IRQHandler+0x516>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4a83      	ldr	r2, [pc, #524]	; (8003450 <HAL_DMA_IRQHandler+0x694>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d045      	beq.n	80032d2 <HAL_DMA_IRQHandler+0x516>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4a82      	ldr	r2, [pc, #520]	; (8003454 <HAL_DMA_IRQHandler+0x698>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d040      	beq.n	80032d2 <HAL_DMA_IRQHandler+0x516>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a80      	ldr	r2, [pc, #512]	; (8003458 <HAL_DMA_IRQHandler+0x69c>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d03b      	beq.n	80032d2 <HAL_DMA_IRQHandler+0x516>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4a7f      	ldr	r2, [pc, #508]	; (800345c <HAL_DMA_IRQHandler+0x6a0>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d036      	beq.n	80032d2 <HAL_DMA_IRQHandler+0x516>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a7d      	ldr	r2, [pc, #500]	; (8003460 <HAL_DMA_IRQHandler+0x6a4>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d031      	beq.n	80032d2 <HAL_DMA_IRQHandler+0x516>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4a7c      	ldr	r2, [pc, #496]	; (8003464 <HAL_DMA_IRQHandler+0x6a8>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d02c      	beq.n	80032d2 <HAL_DMA_IRQHandler+0x516>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a7a      	ldr	r2, [pc, #488]	; (8003468 <HAL_DMA_IRQHandler+0x6ac>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d027      	beq.n	80032d2 <HAL_DMA_IRQHandler+0x516>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4a79      	ldr	r2, [pc, #484]	; (800346c <HAL_DMA_IRQHandler+0x6b0>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d022      	beq.n	80032d2 <HAL_DMA_IRQHandler+0x516>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a77      	ldr	r2, [pc, #476]	; (8003470 <HAL_DMA_IRQHandler+0x6b4>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d01d      	beq.n	80032d2 <HAL_DMA_IRQHandler+0x516>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a76      	ldr	r2, [pc, #472]	; (8003474 <HAL_DMA_IRQHandler+0x6b8>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d018      	beq.n	80032d2 <HAL_DMA_IRQHandler+0x516>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a74      	ldr	r2, [pc, #464]	; (8003478 <HAL_DMA_IRQHandler+0x6bc>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d013      	beq.n	80032d2 <HAL_DMA_IRQHandler+0x516>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4a73      	ldr	r2, [pc, #460]	; (800347c <HAL_DMA_IRQHandler+0x6c0>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d00e      	beq.n	80032d2 <HAL_DMA_IRQHandler+0x516>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a71      	ldr	r2, [pc, #452]	; (8003480 <HAL_DMA_IRQHandler+0x6c4>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d009      	beq.n	80032d2 <HAL_DMA_IRQHandler+0x516>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a70      	ldr	r2, [pc, #448]	; (8003484 <HAL_DMA_IRQHandler+0x6c8>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d004      	beq.n	80032d2 <HAL_DMA_IRQHandler+0x516>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a6e      	ldr	r2, [pc, #440]	; (8003488 <HAL_DMA_IRQHandler+0x6cc>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d10a      	bne.n	80032e8 <HAL_DMA_IRQHandler+0x52c>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f003 0308 	and.w	r3, r3, #8
 80032dc:	2b00      	cmp	r3, #0
 80032de:	bf14      	ite	ne
 80032e0:	2301      	movne	r3, #1
 80032e2:	2300      	moveq	r3, #0
 80032e4:	b2db      	uxtb	r3, r3
 80032e6:	e009      	b.n	80032fc <HAL_DMA_IRQHandler+0x540>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f003 0304 	and.w	r3, r3, #4
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	bf14      	ite	ne
 80032f6:	2301      	movne	r3, #1
 80032f8:	2300      	moveq	r3, #0
 80032fa:	b2db      	uxtb	r3, r3
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d03e      	beq.n	800337e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003304:	f003 031f 	and.w	r3, r3, #31
 8003308:	2210      	movs	r2, #16
 800330a:	409a      	lsls	r2, r3
 800330c:	6a3b      	ldr	r3, [r7, #32]
 800330e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800331a:	2b00      	cmp	r3, #0
 800331c:	d018      	beq.n	8003350 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003328:	2b00      	cmp	r3, #0
 800332a:	d108      	bne.n	800333e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003330:	2b00      	cmp	r3, #0
 8003332:	d024      	beq.n	800337e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003338:	6878      	ldr	r0, [r7, #4]
 800333a:	4798      	blx	r3
 800333c:	e01f      	b.n	800337e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003342:	2b00      	cmp	r3, #0
 8003344:	d01b      	beq.n	800337e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800334a:	6878      	ldr	r0, [r7, #4]
 800334c:	4798      	blx	r3
 800334e:	e016      	b.n	800337e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800335a:	2b00      	cmp	r3, #0
 800335c:	d107      	bne.n	800336e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	681a      	ldr	r2, [r3, #0]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f022 0208 	bic.w	r2, r2, #8
 800336c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003372:	2b00      	cmp	r3, #0
 8003374:	d003      	beq.n	800337e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800337a:	6878      	ldr	r0, [r7, #4]
 800337c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003382:	f003 031f 	and.w	r3, r3, #31
 8003386:	2220      	movs	r2, #32
 8003388:	409a      	lsls	r2, r3
 800338a:	69bb      	ldr	r3, [r7, #24]
 800338c:	4013      	ands	r3, r2
 800338e:	2b00      	cmp	r3, #0
 8003390:	f000 8110 	beq.w	80035b4 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a2c      	ldr	r2, [pc, #176]	; (800344c <HAL_DMA_IRQHandler+0x690>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d04a      	beq.n	8003434 <HAL_DMA_IRQHandler+0x678>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4a2b      	ldr	r2, [pc, #172]	; (8003450 <HAL_DMA_IRQHandler+0x694>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d045      	beq.n	8003434 <HAL_DMA_IRQHandler+0x678>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a29      	ldr	r2, [pc, #164]	; (8003454 <HAL_DMA_IRQHandler+0x698>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d040      	beq.n	8003434 <HAL_DMA_IRQHandler+0x678>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a28      	ldr	r2, [pc, #160]	; (8003458 <HAL_DMA_IRQHandler+0x69c>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d03b      	beq.n	8003434 <HAL_DMA_IRQHandler+0x678>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a26      	ldr	r2, [pc, #152]	; (800345c <HAL_DMA_IRQHandler+0x6a0>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d036      	beq.n	8003434 <HAL_DMA_IRQHandler+0x678>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a25      	ldr	r2, [pc, #148]	; (8003460 <HAL_DMA_IRQHandler+0x6a4>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d031      	beq.n	8003434 <HAL_DMA_IRQHandler+0x678>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a23      	ldr	r2, [pc, #140]	; (8003464 <HAL_DMA_IRQHandler+0x6a8>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d02c      	beq.n	8003434 <HAL_DMA_IRQHandler+0x678>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a22      	ldr	r2, [pc, #136]	; (8003468 <HAL_DMA_IRQHandler+0x6ac>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d027      	beq.n	8003434 <HAL_DMA_IRQHandler+0x678>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a20      	ldr	r2, [pc, #128]	; (800346c <HAL_DMA_IRQHandler+0x6b0>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d022      	beq.n	8003434 <HAL_DMA_IRQHandler+0x678>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4a1f      	ldr	r2, [pc, #124]	; (8003470 <HAL_DMA_IRQHandler+0x6b4>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d01d      	beq.n	8003434 <HAL_DMA_IRQHandler+0x678>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a1d      	ldr	r2, [pc, #116]	; (8003474 <HAL_DMA_IRQHandler+0x6b8>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d018      	beq.n	8003434 <HAL_DMA_IRQHandler+0x678>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a1c      	ldr	r2, [pc, #112]	; (8003478 <HAL_DMA_IRQHandler+0x6bc>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d013      	beq.n	8003434 <HAL_DMA_IRQHandler+0x678>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a1a      	ldr	r2, [pc, #104]	; (800347c <HAL_DMA_IRQHandler+0x6c0>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d00e      	beq.n	8003434 <HAL_DMA_IRQHandler+0x678>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4a19      	ldr	r2, [pc, #100]	; (8003480 <HAL_DMA_IRQHandler+0x6c4>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d009      	beq.n	8003434 <HAL_DMA_IRQHandler+0x678>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a17      	ldr	r2, [pc, #92]	; (8003484 <HAL_DMA_IRQHandler+0x6c8>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d004      	beq.n	8003434 <HAL_DMA_IRQHandler+0x678>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a16      	ldr	r2, [pc, #88]	; (8003488 <HAL_DMA_IRQHandler+0x6cc>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d12b      	bne.n	800348c <HAL_DMA_IRQHandler+0x6d0>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f003 0310 	and.w	r3, r3, #16
 800343e:	2b00      	cmp	r3, #0
 8003440:	bf14      	ite	ne
 8003442:	2301      	movne	r3, #1
 8003444:	2300      	moveq	r3, #0
 8003446:	b2db      	uxtb	r3, r3
 8003448:	e02a      	b.n	80034a0 <HAL_DMA_IRQHandler+0x6e4>
 800344a:	bf00      	nop
 800344c:	40020010 	.word	0x40020010
 8003450:	40020028 	.word	0x40020028
 8003454:	40020040 	.word	0x40020040
 8003458:	40020058 	.word	0x40020058
 800345c:	40020070 	.word	0x40020070
 8003460:	40020088 	.word	0x40020088
 8003464:	400200a0 	.word	0x400200a0
 8003468:	400200b8 	.word	0x400200b8
 800346c:	40020410 	.word	0x40020410
 8003470:	40020428 	.word	0x40020428
 8003474:	40020440 	.word	0x40020440
 8003478:	40020458 	.word	0x40020458
 800347c:	40020470 	.word	0x40020470
 8003480:	40020488 	.word	0x40020488
 8003484:	400204a0 	.word	0x400204a0
 8003488:	400204b8 	.word	0x400204b8
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f003 0302 	and.w	r3, r3, #2
 8003496:	2b00      	cmp	r3, #0
 8003498:	bf14      	ite	ne
 800349a:	2301      	movne	r3, #1
 800349c:	2300      	moveq	r3, #0
 800349e:	b2db      	uxtb	r3, r3
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	f000 8087 	beq.w	80035b4 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034aa:	f003 031f 	and.w	r3, r3, #31
 80034ae:	2220      	movs	r2, #32
 80034b0:	409a      	lsls	r2, r3
 80034b2:	6a3b      	ldr	r3, [r7, #32]
 80034b4:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80034bc:	b2db      	uxtb	r3, r3
 80034be:	2b04      	cmp	r3, #4
 80034c0:	d139      	bne.n	8003536 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	681a      	ldr	r2, [r3, #0]
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f022 0216 	bic.w	r2, r2, #22
 80034d0:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	695a      	ldr	r2, [r3, #20]
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80034e0:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d103      	bne.n	80034f2 <HAL_DMA_IRQHandler+0x736>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d007      	beq.n	8003502 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	681a      	ldr	r2, [r3, #0]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f022 0208 	bic.w	r2, r2, #8
 8003500:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003506:	f003 031f 	and.w	r3, r3, #31
 800350a:	223f      	movs	r2, #63	; 0x3f
 800350c:	409a      	lsls	r2, r3
 800350e:	6a3b      	ldr	r3, [r7, #32]
 8003510:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2200      	movs	r2, #0
 8003516:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2201      	movs	r2, #1
 800351e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003526:	2b00      	cmp	r3, #0
 8003528:	f000 834a 	beq.w	8003bc0 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003530:	6878      	ldr	r0, [r7, #4]
 8003532:	4798      	blx	r3
          }
          return;
 8003534:	e344      	b.n	8003bc0 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003540:	2b00      	cmp	r3, #0
 8003542:	d018      	beq.n	8003576 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800354e:	2b00      	cmp	r3, #0
 8003550:	d108      	bne.n	8003564 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003556:	2b00      	cmp	r3, #0
 8003558:	d02c      	beq.n	80035b4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800355e:	6878      	ldr	r0, [r7, #4]
 8003560:	4798      	blx	r3
 8003562:	e027      	b.n	80035b4 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003568:	2b00      	cmp	r3, #0
 800356a:	d023      	beq.n	80035b4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003570:	6878      	ldr	r0, [r7, #4]
 8003572:	4798      	blx	r3
 8003574:	e01e      	b.n	80035b4 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003580:	2b00      	cmp	r3, #0
 8003582:	d10f      	bne.n	80035a4 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	681a      	ldr	r2, [r3, #0]
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f022 0210 	bic.w	r2, r2, #16
 8003592:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2200      	movs	r2, #0
 8003598:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2201      	movs	r2, #1
 80035a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d003      	beq.n	80035b4 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035b0:	6878      	ldr	r0, [r7, #4]
 80035b2:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	f000 8306 	beq.w	8003bca <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035c2:	f003 0301 	and.w	r3, r3, #1
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	f000 8088 	beq.w	80036dc <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2204      	movs	r2, #4
 80035d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4a7a      	ldr	r2, [pc, #488]	; (80037c4 <HAL_DMA_IRQHandler+0xa08>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d04a      	beq.n	8003674 <HAL_DMA_IRQHandler+0x8b8>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4a79      	ldr	r2, [pc, #484]	; (80037c8 <HAL_DMA_IRQHandler+0xa0c>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d045      	beq.n	8003674 <HAL_DMA_IRQHandler+0x8b8>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a77      	ldr	r2, [pc, #476]	; (80037cc <HAL_DMA_IRQHandler+0xa10>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d040      	beq.n	8003674 <HAL_DMA_IRQHandler+0x8b8>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4a76      	ldr	r2, [pc, #472]	; (80037d0 <HAL_DMA_IRQHandler+0xa14>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d03b      	beq.n	8003674 <HAL_DMA_IRQHandler+0x8b8>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4a74      	ldr	r2, [pc, #464]	; (80037d4 <HAL_DMA_IRQHandler+0xa18>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d036      	beq.n	8003674 <HAL_DMA_IRQHandler+0x8b8>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4a73      	ldr	r2, [pc, #460]	; (80037d8 <HAL_DMA_IRQHandler+0xa1c>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d031      	beq.n	8003674 <HAL_DMA_IRQHandler+0x8b8>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a71      	ldr	r2, [pc, #452]	; (80037dc <HAL_DMA_IRQHandler+0xa20>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d02c      	beq.n	8003674 <HAL_DMA_IRQHandler+0x8b8>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4a70      	ldr	r2, [pc, #448]	; (80037e0 <HAL_DMA_IRQHandler+0xa24>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d027      	beq.n	8003674 <HAL_DMA_IRQHandler+0x8b8>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4a6e      	ldr	r2, [pc, #440]	; (80037e4 <HAL_DMA_IRQHandler+0xa28>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d022      	beq.n	8003674 <HAL_DMA_IRQHandler+0x8b8>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4a6d      	ldr	r2, [pc, #436]	; (80037e8 <HAL_DMA_IRQHandler+0xa2c>)
 8003634:	4293      	cmp	r3, r2
 8003636:	d01d      	beq.n	8003674 <HAL_DMA_IRQHandler+0x8b8>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a6b      	ldr	r2, [pc, #428]	; (80037ec <HAL_DMA_IRQHandler+0xa30>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d018      	beq.n	8003674 <HAL_DMA_IRQHandler+0x8b8>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4a6a      	ldr	r2, [pc, #424]	; (80037f0 <HAL_DMA_IRQHandler+0xa34>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d013      	beq.n	8003674 <HAL_DMA_IRQHandler+0x8b8>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a68      	ldr	r2, [pc, #416]	; (80037f4 <HAL_DMA_IRQHandler+0xa38>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d00e      	beq.n	8003674 <HAL_DMA_IRQHandler+0x8b8>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4a67      	ldr	r2, [pc, #412]	; (80037f8 <HAL_DMA_IRQHandler+0xa3c>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d009      	beq.n	8003674 <HAL_DMA_IRQHandler+0x8b8>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a65      	ldr	r2, [pc, #404]	; (80037fc <HAL_DMA_IRQHandler+0xa40>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d004      	beq.n	8003674 <HAL_DMA_IRQHandler+0x8b8>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4a64      	ldr	r2, [pc, #400]	; (8003800 <HAL_DMA_IRQHandler+0xa44>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d108      	bne.n	8003686 <HAL_DMA_IRQHandler+0x8ca>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	681a      	ldr	r2, [r3, #0]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f022 0201 	bic.w	r2, r2, #1
 8003682:	601a      	str	r2, [r3, #0]
 8003684:	e007      	b.n	8003696 <HAL_DMA_IRQHandler+0x8da>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	681a      	ldr	r2, [r3, #0]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f022 0201 	bic.w	r2, r2, #1
 8003694:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	3301      	adds	r3, #1
 800369a:	60fb      	str	r3, [r7, #12]
 800369c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800369e:	429a      	cmp	r2, r3
 80036a0:	d307      	bcc.n	80036b2 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f003 0301 	and.w	r3, r3, #1
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d1f2      	bne.n	8003696 <HAL_DMA_IRQHandler+0x8da>
 80036b0:	e000      	b.n	80036b4 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80036b2:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2200      	movs	r2, #0
 80036b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f003 0301 	and.w	r3, r3, #1
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d004      	beq.n	80036d4 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2203      	movs	r2, #3
 80036ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80036d2:	e003      	b.n	80036dc <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2201      	movs	r2, #1
 80036d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	f000 8272 	beq.w	8003bca <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036ea:	6878      	ldr	r0, [r7, #4]
 80036ec:	4798      	blx	r3
 80036ee:	e26c      	b.n	8003bca <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a43      	ldr	r2, [pc, #268]	; (8003804 <HAL_DMA_IRQHandler+0xa48>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d022      	beq.n	8003740 <HAL_DMA_IRQHandler+0x984>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4a42      	ldr	r2, [pc, #264]	; (8003808 <HAL_DMA_IRQHandler+0xa4c>)
 8003700:	4293      	cmp	r3, r2
 8003702:	d01d      	beq.n	8003740 <HAL_DMA_IRQHandler+0x984>
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4a40      	ldr	r2, [pc, #256]	; (800380c <HAL_DMA_IRQHandler+0xa50>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d018      	beq.n	8003740 <HAL_DMA_IRQHandler+0x984>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4a3f      	ldr	r2, [pc, #252]	; (8003810 <HAL_DMA_IRQHandler+0xa54>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d013      	beq.n	8003740 <HAL_DMA_IRQHandler+0x984>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a3d      	ldr	r2, [pc, #244]	; (8003814 <HAL_DMA_IRQHandler+0xa58>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d00e      	beq.n	8003740 <HAL_DMA_IRQHandler+0x984>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4a3c      	ldr	r2, [pc, #240]	; (8003818 <HAL_DMA_IRQHandler+0xa5c>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d009      	beq.n	8003740 <HAL_DMA_IRQHandler+0x984>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a3a      	ldr	r2, [pc, #232]	; (800381c <HAL_DMA_IRQHandler+0xa60>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d004      	beq.n	8003740 <HAL_DMA_IRQHandler+0x984>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4a39      	ldr	r2, [pc, #228]	; (8003820 <HAL_DMA_IRQHandler+0xa64>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d101      	bne.n	8003744 <HAL_DMA_IRQHandler+0x988>
 8003740:	2301      	movs	r3, #1
 8003742:	e000      	b.n	8003746 <HAL_DMA_IRQHandler+0x98a>
 8003744:	2300      	movs	r3, #0
 8003746:	2b00      	cmp	r3, #0
 8003748:	f000 823f 	beq.w	8003bca <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003758:	f003 031f 	and.w	r3, r3, #31
 800375c:	2204      	movs	r2, #4
 800375e:	409a      	lsls	r2, r3
 8003760:	697b      	ldr	r3, [r7, #20]
 8003762:	4013      	ands	r3, r2
 8003764:	2b00      	cmp	r3, #0
 8003766:	f000 80cd 	beq.w	8003904 <HAL_DMA_IRQHandler+0xb48>
 800376a:	693b      	ldr	r3, [r7, #16]
 800376c:	f003 0304 	and.w	r3, r3, #4
 8003770:	2b00      	cmp	r3, #0
 8003772:	f000 80c7 	beq.w	8003904 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800377a:	f003 031f 	and.w	r3, r3, #31
 800377e:	2204      	movs	r2, #4
 8003780:	409a      	lsls	r2, r3
 8003782:	69fb      	ldr	r3, [r7, #28]
 8003784:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003786:	693b      	ldr	r3, [r7, #16]
 8003788:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800378c:	2b00      	cmp	r3, #0
 800378e:	d049      	beq.n	8003824 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003790:	693b      	ldr	r3, [r7, #16]
 8003792:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003796:	2b00      	cmp	r3, #0
 8003798:	d109      	bne.n	80037ae <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800379e:	2b00      	cmp	r3, #0
 80037a0:	f000 8210 	beq.w	8003bc4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037a8:	6878      	ldr	r0, [r7, #4]
 80037aa:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80037ac:	e20a      	b.n	8003bc4 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	f000 8206 	beq.w	8003bc4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037bc:	6878      	ldr	r0, [r7, #4]
 80037be:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80037c0:	e200      	b.n	8003bc4 <HAL_DMA_IRQHandler+0xe08>
 80037c2:	bf00      	nop
 80037c4:	40020010 	.word	0x40020010
 80037c8:	40020028 	.word	0x40020028
 80037cc:	40020040 	.word	0x40020040
 80037d0:	40020058 	.word	0x40020058
 80037d4:	40020070 	.word	0x40020070
 80037d8:	40020088 	.word	0x40020088
 80037dc:	400200a0 	.word	0x400200a0
 80037e0:	400200b8 	.word	0x400200b8
 80037e4:	40020410 	.word	0x40020410
 80037e8:	40020428 	.word	0x40020428
 80037ec:	40020440 	.word	0x40020440
 80037f0:	40020458 	.word	0x40020458
 80037f4:	40020470 	.word	0x40020470
 80037f8:	40020488 	.word	0x40020488
 80037fc:	400204a0 	.word	0x400204a0
 8003800:	400204b8 	.word	0x400204b8
 8003804:	58025408 	.word	0x58025408
 8003808:	5802541c 	.word	0x5802541c
 800380c:	58025430 	.word	0x58025430
 8003810:	58025444 	.word	0x58025444
 8003814:	58025458 	.word	0x58025458
 8003818:	5802546c 	.word	0x5802546c
 800381c:	58025480 	.word	0x58025480
 8003820:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003824:	693b      	ldr	r3, [r7, #16]
 8003826:	f003 0320 	and.w	r3, r3, #32
 800382a:	2b00      	cmp	r3, #0
 800382c:	d160      	bne.n	80038f0 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a8c      	ldr	r2, [pc, #560]	; (8003a64 <HAL_DMA_IRQHandler+0xca8>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d04a      	beq.n	80038ce <HAL_DMA_IRQHandler+0xb12>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a8a      	ldr	r2, [pc, #552]	; (8003a68 <HAL_DMA_IRQHandler+0xcac>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d045      	beq.n	80038ce <HAL_DMA_IRQHandler+0xb12>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a89      	ldr	r2, [pc, #548]	; (8003a6c <HAL_DMA_IRQHandler+0xcb0>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d040      	beq.n	80038ce <HAL_DMA_IRQHandler+0xb12>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4a87      	ldr	r2, [pc, #540]	; (8003a70 <HAL_DMA_IRQHandler+0xcb4>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d03b      	beq.n	80038ce <HAL_DMA_IRQHandler+0xb12>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4a86      	ldr	r2, [pc, #536]	; (8003a74 <HAL_DMA_IRQHandler+0xcb8>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d036      	beq.n	80038ce <HAL_DMA_IRQHandler+0xb12>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4a84      	ldr	r2, [pc, #528]	; (8003a78 <HAL_DMA_IRQHandler+0xcbc>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d031      	beq.n	80038ce <HAL_DMA_IRQHandler+0xb12>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4a83      	ldr	r2, [pc, #524]	; (8003a7c <HAL_DMA_IRQHandler+0xcc0>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d02c      	beq.n	80038ce <HAL_DMA_IRQHandler+0xb12>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4a81      	ldr	r2, [pc, #516]	; (8003a80 <HAL_DMA_IRQHandler+0xcc4>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d027      	beq.n	80038ce <HAL_DMA_IRQHandler+0xb12>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4a80      	ldr	r2, [pc, #512]	; (8003a84 <HAL_DMA_IRQHandler+0xcc8>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d022      	beq.n	80038ce <HAL_DMA_IRQHandler+0xb12>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4a7e      	ldr	r2, [pc, #504]	; (8003a88 <HAL_DMA_IRQHandler+0xccc>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d01d      	beq.n	80038ce <HAL_DMA_IRQHandler+0xb12>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4a7d      	ldr	r2, [pc, #500]	; (8003a8c <HAL_DMA_IRQHandler+0xcd0>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d018      	beq.n	80038ce <HAL_DMA_IRQHandler+0xb12>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a7b      	ldr	r2, [pc, #492]	; (8003a90 <HAL_DMA_IRQHandler+0xcd4>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d013      	beq.n	80038ce <HAL_DMA_IRQHandler+0xb12>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4a7a      	ldr	r2, [pc, #488]	; (8003a94 <HAL_DMA_IRQHandler+0xcd8>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d00e      	beq.n	80038ce <HAL_DMA_IRQHandler+0xb12>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a78      	ldr	r2, [pc, #480]	; (8003a98 <HAL_DMA_IRQHandler+0xcdc>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d009      	beq.n	80038ce <HAL_DMA_IRQHandler+0xb12>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4a77      	ldr	r2, [pc, #476]	; (8003a9c <HAL_DMA_IRQHandler+0xce0>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d004      	beq.n	80038ce <HAL_DMA_IRQHandler+0xb12>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a75      	ldr	r2, [pc, #468]	; (8003aa0 <HAL_DMA_IRQHandler+0xce4>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d108      	bne.n	80038e0 <HAL_DMA_IRQHandler+0xb24>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	681a      	ldr	r2, [r3, #0]
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f022 0208 	bic.w	r2, r2, #8
 80038dc:	601a      	str	r2, [r3, #0]
 80038de:	e007      	b.n	80038f0 <HAL_DMA_IRQHandler+0xb34>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	681a      	ldr	r2, [r3, #0]
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f022 0204 	bic.w	r2, r2, #4
 80038ee:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	f000 8165 	beq.w	8003bc4 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038fe:	6878      	ldr	r0, [r7, #4]
 8003900:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003902:	e15f      	b.n	8003bc4 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003908:	f003 031f 	and.w	r3, r3, #31
 800390c:	2202      	movs	r2, #2
 800390e:	409a      	lsls	r2, r3
 8003910:	697b      	ldr	r3, [r7, #20]
 8003912:	4013      	ands	r3, r2
 8003914:	2b00      	cmp	r3, #0
 8003916:	f000 80c5 	beq.w	8003aa4 <HAL_DMA_IRQHandler+0xce8>
 800391a:	693b      	ldr	r3, [r7, #16]
 800391c:	f003 0302 	and.w	r3, r3, #2
 8003920:	2b00      	cmp	r3, #0
 8003922:	f000 80bf 	beq.w	8003aa4 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800392a:	f003 031f 	and.w	r3, r3, #31
 800392e:	2202      	movs	r2, #2
 8003930:	409a      	lsls	r2, r3
 8003932:	69fb      	ldr	r3, [r7, #28]
 8003934:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003936:	693b      	ldr	r3, [r7, #16]
 8003938:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800393c:	2b00      	cmp	r3, #0
 800393e:	d018      	beq.n	8003972 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003940:	693b      	ldr	r3, [r7, #16]
 8003942:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003946:	2b00      	cmp	r3, #0
 8003948:	d109      	bne.n	800395e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800394e:	2b00      	cmp	r3, #0
 8003950:	f000 813a 	beq.w	8003bc8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003958:	6878      	ldr	r0, [r7, #4]
 800395a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800395c:	e134      	b.n	8003bc8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003962:	2b00      	cmp	r3, #0
 8003964:	f000 8130 	beq.w	8003bc8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800396c:	6878      	ldr	r0, [r7, #4]
 800396e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003970:	e12a      	b.n	8003bc8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003972:	693b      	ldr	r3, [r7, #16]
 8003974:	f003 0320 	and.w	r3, r3, #32
 8003978:	2b00      	cmp	r3, #0
 800397a:	d168      	bne.n	8003a4e <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a38      	ldr	r2, [pc, #224]	; (8003a64 <HAL_DMA_IRQHandler+0xca8>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d04a      	beq.n	8003a1c <HAL_DMA_IRQHandler+0xc60>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4a37      	ldr	r2, [pc, #220]	; (8003a68 <HAL_DMA_IRQHandler+0xcac>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d045      	beq.n	8003a1c <HAL_DMA_IRQHandler+0xc60>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a35      	ldr	r2, [pc, #212]	; (8003a6c <HAL_DMA_IRQHandler+0xcb0>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d040      	beq.n	8003a1c <HAL_DMA_IRQHandler+0xc60>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4a34      	ldr	r2, [pc, #208]	; (8003a70 <HAL_DMA_IRQHandler+0xcb4>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d03b      	beq.n	8003a1c <HAL_DMA_IRQHandler+0xc60>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a32      	ldr	r2, [pc, #200]	; (8003a74 <HAL_DMA_IRQHandler+0xcb8>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d036      	beq.n	8003a1c <HAL_DMA_IRQHandler+0xc60>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a31      	ldr	r2, [pc, #196]	; (8003a78 <HAL_DMA_IRQHandler+0xcbc>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d031      	beq.n	8003a1c <HAL_DMA_IRQHandler+0xc60>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a2f      	ldr	r2, [pc, #188]	; (8003a7c <HAL_DMA_IRQHandler+0xcc0>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d02c      	beq.n	8003a1c <HAL_DMA_IRQHandler+0xc60>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4a2e      	ldr	r2, [pc, #184]	; (8003a80 <HAL_DMA_IRQHandler+0xcc4>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d027      	beq.n	8003a1c <HAL_DMA_IRQHandler+0xc60>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a2c      	ldr	r2, [pc, #176]	; (8003a84 <HAL_DMA_IRQHandler+0xcc8>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d022      	beq.n	8003a1c <HAL_DMA_IRQHandler+0xc60>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4a2b      	ldr	r2, [pc, #172]	; (8003a88 <HAL_DMA_IRQHandler+0xccc>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d01d      	beq.n	8003a1c <HAL_DMA_IRQHandler+0xc60>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a29      	ldr	r2, [pc, #164]	; (8003a8c <HAL_DMA_IRQHandler+0xcd0>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d018      	beq.n	8003a1c <HAL_DMA_IRQHandler+0xc60>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a28      	ldr	r2, [pc, #160]	; (8003a90 <HAL_DMA_IRQHandler+0xcd4>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d013      	beq.n	8003a1c <HAL_DMA_IRQHandler+0xc60>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a26      	ldr	r2, [pc, #152]	; (8003a94 <HAL_DMA_IRQHandler+0xcd8>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d00e      	beq.n	8003a1c <HAL_DMA_IRQHandler+0xc60>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a25      	ldr	r2, [pc, #148]	; (8003a98 <HAL_DMA_IRQHandler+0xcdc>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d009      	beq.n	8003a1c <HAL_DMA_IRQHandler+0xc60>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a23      	ldr	r2, [pc, #140]	; (8003a9c <HAL_DMA_IRQHandler+0xce0>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d004      	beq.n	8003a1c <HAL_DMA_IRQHandler+0xc60>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a22      	ldr	r2, [pc, #136]	; (8003aa0 <HAL_DMA_IRQHandler+0xce4>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d108      	bne.n	8003a2e <HAL_DMA_IRQHandler+0xc72>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	681a      	ldr	r2, [r3, #0]
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f022 0214 	bic.w	r2, r2, #20
 8003a2a:	601a      	str	r2, [r3, #0]
 8003a2c:	e007      	b.n	8003a3e <HAL_DMA_IRQHandler+0xc82>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	681a      	ldr	r2, [r3, #0]
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f022 020a 	bic.w	r2, r2, #10
 8003a3c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2200      	movs	r2, #0
 8003a42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2201      	movs	r2, #1
 8003a4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	f000 80b8 	beq.w	8003bc8 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a5c:	6878      	ldr	r0, [r7, #4]
 8003a5e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003a60:	e0b2      	b.n	8003bc8 <HAL_DMA_IRQHandler+0xe0c>
 8003a62:	bf00      	nop
 8003a64:	40020010 	.word	0x40020010
 8003a68:	40020028 	.word	0x40020028
 8003a6c:	40020040 	.word	0x40020040
 8003a70:	40020058 	.word	0x40020058
 8003a74:	40020070 	.word	0x40020070
 8003a78:	40020088 	.word	0x40020088
 8003a7c:	400200a0 	.word	0x400200a0
 8003a80:	400200b8 	.word	0x400200b8
 8003a84:	40020410 	.word	0x40020410
 8003a88:	40020428 	.word	0x40020428
 8003a8c:	40020440 	.word	0x40020440
 8003a90:	40020458 	.word	0x40020458
 8003a94:	40020470 	.word	0x40020470
 8003a98:	40020488 	.word	0x40020488
 8003a9c:	400204a0 	.word	0x400204a0
 8003aa0:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003aa8:	f003 031f 	and.w	r3, r3, #31
 8003aac:	2208      	movs	r2, #8
 8003aae:	409a      	lsls	r2, r3
 8003ab0:	697b      	ldr	r3, [r7, #20]
 8003ab2:	4013      	ands	r3, r2
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	f000 8088 	beq.w	8003bca <HAL_DMA_IRQHandler+0xe0e>
 8003aba:	693b      	ldr	r3, [r7, #16]
 8003abc:	f003 0308 	and.w	r3, r3, #8
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	f000 8082 	beq.w	8003bca <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4a41      	ldr	r2, [pc, #260]	; (8003bd0 <HAL_DMA_IRQHandler+0xe14>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d04a      	beq.n	8003b66 <HAL_DMA_IRQHandler+0xdaa>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a3f      	ldr	r2, [pc, #252]	; (8003bd4 <HAL_DMA_IRQHandler+0xe18>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d045      	beq.n	8003b66 <HAL_DMA_IRQHandler+0xdaa>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4a3e      	ldr	r2, [pc, #248]	; (8003bd8 <HAL_DMA_IRQHandler+0xe1c>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d040      	beq.n	8003b66 <HAL_DMA_IRQHandler+0xdaa>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a3c      	ldr	r2, [pc, #240]	; (8003bdc <HAL_DMA_IRQHandler+0xe20>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d03b      	beq.n	8003b66 <HAL_DMA_IRQHandler+0xdaa>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4a3b      	ldr	r2, [pc, #236]	; (8003be0 <HAL_DMA_IRQHandler+0xe24>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d036      	beq.n	8003b66 <HAL_DMA_IRQHandler+0xdaa>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4a39      	ldr	r2, [pc, #228]	; (8003be4 <HAL_DMA_IRQHandler+0xe28>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d031      	beq.n	8003b66 <HAL_DMA_IRQHandler+0xdaa>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4a38      	ldr	r2, [pc, #224]	; (8003be8 <HAL_DMA_IRQHandler+0xe2c>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d02c      	beq.n	8003b66 <HAL_DMA_IRQHandler+0xdaa>
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a36      	ldr	r2, [pc, #216]	; (8003bec <HAL_DMA_IRQHandler+0xe30>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d027      	beq.n	8003b66 <HAL_DMA_IRQHandler+0xdaa>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4a35      	ldr	r2, [pc, #212]	; (8003bf0 <HAL_DMA_IRQHandler+0xe34>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d022      	beq.n	8003b66 <HAL_DMA_IRQHandler+0xdaa>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4a33      	ldr	r2, [pc, #204]	; (8003bf4 <HAL_DMA_IRQHandler+0xe38>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d01d      	beq.n	8003b66 <HAL_DMA_IRQHandler+0xdaa>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4a32      	ldr	r2, [pc, #200]	; (8003bf8 <HAL_DMA_IRQHandler+0xe3c>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d018      	beq.n	8003b66 <HAL_DMA_IRQHandler+0xdaa>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a30      	ldr	r2, [pc, #192]	; (8003bfc <HAL_DMA_IRQHandler+0xe40>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d013      	beq.n	8003b66 <HAL_DMA_IRQHandler+0xdaa>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4a2f      	ldr	r2, [pc, #188]	; (8003c00 <HAL_DMA_IRQHandler+0xe44>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d00e      	beq.n	8003b66 <HAL_DMA_IRQHandler+0xdaa>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a2d      	ldr	r2, [pc, #180]	; (8003c04 <HAL_DMA_IRQHandler+0xe48>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d009      	beq.n	8003b66 <HAL_DMA_IRQHandler+0xdaa>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4a2c      	ldr	r2, [pc, #176]	; (8003c08 <HAL_DMA_IRQHandler+0xe4c>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d004      	beq.n	8003b66 <HAL_DMA_IRQHandler+0xdaa>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a2a      	ldr	r2, [pc, #168]	; (8003c0c <HAL_DMA_IRQHandler+0xe50>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d108      	bne.n	8003b78 <HAL_DMA_IRQHandler+0xdbc>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	681a      	ldr	r2, [r3, #0]
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f022 021c 	bic.w	r2, r2, #28
 8003b74:	601a      	str	r2, [r3, #0]
 8003b76:	e007      	b.n	8003b88 <HAL_DMA_IRQHandler+0xdcc>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	681a      	ldr	r2, [r3, #0]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f022 020e 	bic.w	r2, r2, #14
 8003b86:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b8c:	f003 031f 	and.w	r3, r3, #31
 8003b90:	2201      	movs	r2, #1
 8003b92:	409a      	lsls	r2, r3
 8003b94:	69fb      	ldr	r3, [r7, #28]
 8003b96:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2201      	movs	r2, #1
 8003b9c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2201      	movs	r2, #1
 8003baa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d009      	beq.n	8003bca <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bba:	6878      	ldr	r0, [r7, #4]
 8003bbc:	4798      	blx	r3
 8003bbe:	e004      	b.n	8003bca <HAL_DMA_IRQHandler+0xe0e>
          return;
 8003bc0:	bf00      	nop
 8003bc2:	e002      	b.n	8003bca <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003bc4:	bf00      	nop
 8003bc6:	e000      	b.n	8003bca <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003bc8:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003bca:	3728      	adds	r7, #40	; 0x28
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	bd80      	pop	{r7, pc}
 8003bd0:	40020010 	.word	0x40020010
 8003bd4:	40020028 	.word	0x40020028
 8003bd8:	40020040 	.word	0x40020040
 8003bdc:	40020058 	.word	0x40020058
 8003be0:	40020070 	.word	0x40020070
 8003be4:	40020088 	.word	0x40020088
 8003be8:	400200a0 	.word	0x400200a0
 8003bec:	400200b8 	.word	0x400200b8
 8003bf0:	40020410 	.word	0x40020410
 8003bf4:	40020428 	.word	0x40020428
 8003bf8:	40020440 	.word	0x40020440
 8003bfc:	40020458 	.word	0x40020458
 8003c00:	40020470 	.word	0x40020470
 8003c04:	40020488 	.word	0x40020488
 8003c08:	400204a0 	.word	0x400204a0
 8003c0c:	400204b8 	.word	0x400204b8

08003c10 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003c10:	b480      	push	{r7}
 8003c12:	b083      	sub	sp, #12
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	370c      	adds	r7, #12
 8003c20:	46bd      	mov	sp, r7
 8003c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c26:	4770      	bx	lr

08003c28 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003c28:	b480      	push	{r7}
 8003c2a:	b087      	sub	sp, #28
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	60f8      	str	r0, [r7, #12]
 8003c30:	60b9      	str	r1, [r7, #8]
 8003c32:	607a      	str	r2, [r7, #4]
 8003c34:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c3a:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c40:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4a84      	ldr	r2, [pc, #528]	; (8003e58 <DMA_SetConfig+0x230>)
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d072      	beq.n	8003d32 <DMA_SetConfig+0x10a>
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4a82      	ldr	r2, [pc, #520]	; (8003e5c <DMA_SetConfig+0x234>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d06d      	beq.n	8003d32 <DMA_SetConfig+0x10a>
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4a81      	ldr	r2, [pc, #516]	; (8003e60 <DMA_SetConfig+0x238>)
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d068      	beq.n	8003d32 <DMA_SetConfig+0x10a>
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4a7f      	ldr	r2, [pc, #508]	; (8003e64 <DMA_SetConfig+0x23c>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d063      	beq.n	8003d32 <DMA_SetConfig+0x10a>
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	4a7e      	ldr	r2, [pc, #504]	; (8003e68 <DMA_SetConfig+0x240>)
 8003c70:	4293      	cmp	r3, r2
 8003c72:	d05e      	beq.n	8003d32 <DMA_SetConfig+0x10a>
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4a7c      	ldr	r2, [pc, #496]	; (8003e6c <DMA_SetConfig+0x244>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d059      	beq.n	8003d32 <DMA_SetConfig+0x10a>
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4a7b      	ldr	r2, [pc, #492]	; (8003e70 <DMA_SetConfig+0x248>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d054      	beq.n	8003d32 <DMA_SetConfig+0x10a>
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4a79      	ldr	r2, [pc, #484]	; (8003e74 <DMA_SetConfig+0x24c>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d04f      	beq.n	8003d32 <DMA_SetConfig+0x10a>
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4a78      	ldr	r2, [pc, #480]	; (8003e78 <DMA_SetConfig+0x250>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d04a      	beq.n	8003d32 <DMA_SetConfig+0x10a>
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a76      	ldr	r2, [pc, #472]	; (8003e7c <DMA_SetConfig+0x254>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d045      	beq.n	8003d32 <DMA_SetConfig+0x10a>
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4a75      	ldr	r2, [pc, #468]	; (8003e80 <DMA_SetConfig+0x258>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d040      	beq.n	8003d32 <DMA_SetConfig+0x10a>
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a73      	ldr	r2, [pc, #460]	; (8003e84 <DMA_SetConfig+0x25c>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d03b      	beq.n	8003d32 <DMA_SetConfig+0x10a>
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4a72      	ldr	r2, [pc, #456]	; (8003e88 <DMA_SetConfig+0x260>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d036      	beq.n	8003d32 <DMA_SetConfig+0x10a>
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4a70      	ldr	r2, [pc, #448]	; (8003e8c <DMA_SetConfig+0x264>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d031      	beq.n	8003d32 <DMA_SetConfig+0x10a>
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4a6f      	ldr	r2, [pc, #444]	; (8003e90 <DMA_SetConfig+0x268>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d02c      	beq.n	8003d32 <DMA_SetConfig+0x10a>
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a6d      	ldr	r2, [pc, #436]	; (8003e94 <DMA_SetConfig+0x26c>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d027      	beq.n	8003d32 <DMA_SetConfig+0x10a>
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4a6c      	ldr	r2, [pc, #432]	; (8003e98 <DMA_SetConfig+0x270>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d022      	beq.n	8003d32 <DMA_SetConfig+0x10a>
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4a6a      	ldr	r2, [pc, #424]	; (8003e9c <DMA_SetConfig+0x274>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d01d      	beq.n	8003d32 <DMA_SetConfig+0x10a>
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4a69      	ldr	r2, [pc, #420]	; (8003ea0 <DMA_SetConfig+0x278>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d018      	beq.n	8003d32 <DMA_SetConfig+0x10a>
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4a67      	ldr	r2, [pc, #412]	; (8003ea4 <DMA_SetConfig+0x27c>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d013      	beq.n	8003d32 <DMA_SetConfig+0x10a>
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4a66      	ldr	r2, [pc, #408]	; (8003ea8 <DMA_SetConfig+0x280>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d00e      	beq.n	8003d32 <DMA_SetConfig+0x10a>
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4a64      	ldr	r2, [pc, #400]	; (8003eac <DMA_SetConfig+0x284>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d009      	beq.n	8003d32 <DMA_SetConfig+0x10a>
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4a63      	ldr	r2, [pc, #396]	; (8003eb0 <DMA_SetConfig+0x288>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d004      	beq.n	8003d32 <DMA_SetConfig+0x10a>
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4a61      	ldr	r2, [pc, #388]	; (8003eb4 <DMA_SetConfig+0x28c>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d101      	bne.n	8003d36 <DMA_SetConfig+0x10e>
 8003d32:	2301      	movs	r3, #1
 8003d34:	e000      	b.n	8003d38 <DMA_SetConfig+0x110>
 8003d36:	2300      	movs	r3, #0
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d00d      	beq.n	8003d58 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d40:	68fa      	ldr	r2, [r7, #12]
 8003d42:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003d44:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d004      	beq.n	8003d58 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d52:	68fa      	ldr	r2, [r7, #12]
 8003d54:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003d56:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a3e      	ldr	r2, [pc, #248]	; (8003e58 <DMA_SetConfig+0x230>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d04a      	beq.n	8003df8 <DMA_SetConfig+0x1d0>
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4a3d      	ldr	r2, [pc, #244]	; (8003e5c <DMA_SetConfig+0x234>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d045      	beq.n	8003df8 <DMA_SetConfig+0x1d0>
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4a3b      	ldr	r2, [pc, #236]	; (8003e60 <DMA_SetConfig+0x238>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d040      	beq.n	8003df8 <DMA_SetConfig+0x1d0>
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4a3a      	ldr	r2, [pc, #232]	; (8003e64 <DMA_SetConfig+0x23c>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d03b      	beq.n	8003df8 <DMA_SetConfig+0x1d0>
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a38      	ldr	r2, [pc, #224]	; (8003e68 <DMA_SetConfig+0x240>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d036      	beq.n	8003df8 <DMA_SetConfig+0x1d0>
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4a37      	ldr	r2, [pc, #220]	; (8003e6c <DMA_SetConfig+0x244>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d031      	beq.n	8003df8 <DMA_SetConfig+0x1d0>
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4a35      	ldr	r2, [pc, #212]	; (8003e70 <DMA_SetConfig+0x248>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d02c      	beq.n	8003df8 <DMA_SetConfig+0x1d0>
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4a34      	ldr	r2, [pc, #208]	; (8003e74 <DMA_SetConfig+0x24c>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d027      	beq.n	8003df8 <DMA_SetConfig+0x1d0>
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4a32      	ldr	r2, [pc, #200]	; (8003e78 <DMA_SetConfig+0x250>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d022      	beq.n	8003df8 <DMA_SetConfig+0x1d0>
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4a31      	ldr	r2, [pc, #196]	; (8003e7c <DMA_SetConfig+0x254>)
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d01d      	beq.n	8003df8 <DMA_SetConfig+0x1d0>
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a2f      	ldr	r2, [pc, #188]	; (8003e80 <DMA_SetConfig+0x258>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d018      	beq.n	8003df8 <DMA_SetConfig+0x1d0>
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4a2e      	ldr	r2, [pc, #184]	; (8003e84 <DMA_SetConfig+0x25c>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d013      	beq.n	8003df8 <DMA_SetConfig+0x1d0>
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4a2c      	ldr	r2, [pc, #176]	; (8003e88 <DMA_SetConfig+0x260>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d00e      	beq.n	8003df8 <DMA_SetConfig+0x1d0>
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4a2b      	ldr	r2, [pc, #172]	; (8003e8c <DMA_SetConfig+0x264>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d009      	beq.n	8003df8 <DMA_SetConfig+0x1d0>
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	4a29      	ldr	r2, [pc, #164]	; (8003e90 <DMA_SetConfig+0x268>)
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d004      	beq.n	8003df8 <DMA_SetConfig+0x1d0>
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4a28      	ldr	r2, [pc, #160]	; (8003e94 <DMA_SetConfig+0x26c>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d101      	bne.n	8003dfc <DMA_SetConfig+0x1d4>
 8003df8:	2301      	movs	r3, #1
 8003dfa:	e000      	b.n	8003dfe <DMA_SetConfig+0x1d6>
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d05a      	beq.n	8003eb8 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e06:	f003 031f 	and.w	r3, r3, #31
 8003e0a:	223f      	movs	r2, #63	; 0x3f
 8003e0c:	409a      	lsls	r2, r3
 8003e0e:	697b      	ldr	r3, [r7, #20]
 8003e10:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	681a      	ldr	r2, [r3, #0]
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003e20:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	683a      	ldr	r2, [r7, #0]
 8003e28:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	689b      	ldr	r3, [r3, #8]
 8003e2e:	2b40      	cmp	r3, #64	; 0x40
 8003e30:	d108      	bne.n	8003e44 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	687a      	ldr	r2, [r7, #4]
 8003e38:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	68ba      	ldr	r2, [r7, #8]
 8003e40:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003e42:	e087      	b.n	8003f54 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	68ba      	ldr	r2, [r7, #8]
 8003e4a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	687a      	ldr	r2, [r7, #4]
 8003e52:	60da      	str	r2, [r3, #12]
}
 8003e54:	e07e      	b.n	8003f54 <DMA_SetConfig+0x32c>
 8003e56:	bf00      	nop
 8003e58:	40020010 	.word	0x40020010
 8003e5c:	40020028 	.word	0x40020028
 8003e60:	40020040 	.word	0x40020040
 8003e64:	40020058 	.word	0x40020058
 8003e68:	40020070 	.word	0x40020070
 8003e6c:	40020088 	.word	0x40020088
 8003e70:	400200a0 	.word	0x400200a0
 8003e74:	400200b8 	.word	0x400200b8
 8003e78:	40020410 	.word	0x40020410
 8003e7c:	40020428 	.word	0x40020428
 8003e80:	40020440 	.word	0x40020440
 8003e84:	40020458 	.word	0x40020458
 8003e88:	40020470 	.word	0x40020470
 8003e8c:	40020488 	.word	0x40020488
 8003e90:	400204a0 	.word	0x400204a0
 8003e94:	400204b8 	.word	0x400204b8
 8003e98:	58025408 	.word	0x58025408
 8003e9c:	5802541c 	.word	0x5802541c
 8003ea0:	58025430 	.word	0x58025430
 8003ea4:	58025444 	.word	0x58025444
 8003ea8:	58025458 	.word	0x58025458
 8003eac:	5802546c 	.word	0x5802546c
 8003eb0:	58025480 	.word	0x58025480
 8003eb4:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4a28      	ldr	r2, [pc, #160]	; (8003f60 <DMA_SetConfig+0x338>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d022      	beq.n	8003f08 <DMA_SetConfig+0x2e0>
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4a27      	ldr	r2, [pc, #156]	; (8003f64 <DMA_SetConfig+0x33c>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d01d      	beq.n	8003f08 <DMA_SetConfig+0x2e0>
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4a25      	ldr	r2, [pc, #148]	; (8003f68 <DMA_SetConfig+0x340>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d018      	beq.n	8003f08 <DMA_SetConfig+0x2e0>
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4a24      	ldr	r2, [pc, #144]	; (8003f6c <DMA_SetConfig+0x344>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d013      	beq.n	8003f08 <DMA_SetConfig+0x2e0>
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4a22      	ldr	r2, [pc, #136]	; (8003f70 <DMA_SetConfig+0x348>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d00e      	beq.n	8003f08 <DMA_SetConfig+0x2e0>
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a21      	ldr	r2, [pc, #132]	; (8003f74 <DMA_SetConfig+0x34c>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d009      	beq.n	8003f08 <DMA_SetConfig+0x2e0>
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a1f      	ldr	r2, [pc, #124]	; (8003f78 <DMA_SetConfig+0x350>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d004      	beq.n	8003f08 <DMA_SetConfig+0x2e0>
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4a1e      	ldr	r2, [pc, #120]	; (8003f7c <DMA_SetConfig+0x354>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d101      	bne.n	8003f0c <DMA_SetConfig+0x2e4>
 8003f08:	2301      	movs	r3, #1
 8003f0a:	e000      	b.n	8003f0e <DMA_SetConfig+0x2e6>
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d020      	beq.n	8003f54 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f16:	f003 031f 	and.w	r3, r3, #31
 8003f1a:	2201      	movs	r2, #1
 8003f1c:	409a      	lsls	r2, r3
 8003f1e:	693b      	ldr	r3, [r7, #16]
 8003f20:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	683a      	ldr	r2, [r7, #0]
 8003f28:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	689b      	ldr	r3, [r3, #8]
 8003f2e:	2b40      	cmp	r3, #64	; 0x40
 8003f30:	d108      	bne.n	8003f44 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	687a      	ldr	r2, [r7, #4]
 8003f38:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	68ba      	ldr	r2, [r7, #8]
 8003f40:	60da      	str	r2, [r3, #12]
}
 8003f42:	e007      	b.n	8003f54 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	68ba      	ldr	r2, [r7, #8]
 8003f4a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	687a      	ldr	r2, [r7, #4]
 8003f52:	60da      	str	r2, [r3, #12]
}
 8003f54:	bf00      	nop
 8003f56:	371c      	adds	r7, #28
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5e:	4770      	bx	lr
 8003f60:	58025408 	.word	0x58025408
 8003f64:	5802541c 	.word	0x5802541c
 8003f68:	58025430 	.word	0x58025430
 8003f6c:	58025444 	.word	0x58025444
 8003f70:	58025458 	.word	0x58025458
 8003f74:	5802546c 	.word	0x5802546c
 8003f78:	58025480 	.word	0x58025480
 8003f7c:	58025494 	.word	0x58025494

08003f80 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003f80:	b480      	push	{r7}
 8003f82:	b085      	sub	sp, #20
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4a42      	ldr	r2, [pc, #264]	; (8004098 <DMA_CalcBaseAndBitshift+0x118>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d04a      	beq.n	8004028 <DMA_CalcBaseAndBitshift+0xa8>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4a41      	ldr	r2, [pc, #260]	; (800409c <DMA_CalcBaseAndBitshift+0x11c>)
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d045      	beq.n	8004028 <DMA_CalcBaseAndBitshift+0xa8>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a3f      	ldr	r2, [pc, #252]	; (80040a0 <DMA_CalcBaseAndBitshift+0x120>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d040      	beq.n	8004028 <DMA_CalcBaseAndBitshift+0xa8>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4a3e      	ldr	r2, [pc, #248]	; (80040a4 <DMA_CalcBaseAndBitshift+0x124>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d03b      	beq.n	8004028 <DMA_CalcBaseAndBitshift+0xa8>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4a3c      	ldr	r2, [pc, #240]	; (80040a8 <DMA_CalcBaseAndBitshift+0x128>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d036      	beq.n	8004028 <DMA_CalcBaseAndBitshift+0xa8>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4a3b      	ldr	r2, [pc, #236]	; (80040ac <DMA_CalcBaseAndBitshift+0x12c>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d031      	beq.n	8004028 <DMA_CalcBaseAndBitshift+0xa8>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4a39      	ldr	r2, [pc, #228]	; (80040b0 <DMA_CalcBaseAndBitshift+0x130>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d02c      	beq.n	8004028 <DMA_CalcBaseAndBitshift+0xa8>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4a38      	ldr	r2, [pc, #224]	; (80040b4 <DMA_CalcBaseAndBitshift+0x134>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d027      	beq.n	8004028 <DMA_CalcBaseAndBitshift+0xa8>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4a36      	ldr	r2, [pc, #216]	; (80040b8 <DMA_CalcBaseAndBitshift+0x138>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d022      	beq.n	8004028 <DMA_CalcBaseAndBitshift+0xa8>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4a35      	ldr	r2, [pc, #212]	; (80040bc <DMA_CalcBaseAndBitshift+0x13c>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d01d      	beq.n	8004028 <DMA_CalcBaseAndBitshift+0xa8>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4a33      	ldr	r2, [pc, #204]	; (80040c0 <DMA_CalcBaseAndBitshift+0x140>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d018      	beq.n	8004028 <DMA_CalcBaseAndBitshift+0xa8>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4a32      	ldr	r2, [pc, #200]	; (80040c4 <DMA_CalcBaseAndBitshift+0x144>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d013      	beq.n	8004028 <DMA_CalcBaseAndBitshift+0xa8>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4a30      	ldr	r2, [pc, #192]	; (80040c8 <DMA_CalcBaseAndBitshift+0x148>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d00e      	beq.n	8004028 <DMA_CalcBaseAndBitshift+0xa8>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4a2f      	ldr	r2, [pc, #188]	; (80040cc <DMA_CalcBaseAndBitshift+0x14c>)
 8004010:	4293      	cmp	r3, r2
 8004012:	d009      	beq.n	8004028 <DMA_CalcBaseAndBitshift+0xa8>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4a2d      	ldr	r2, [pc, #180]	; (80040d0 <DMA_CalcBaseAndBitshift+0x150>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d004      	beq.n	8004028 <DMA_CalcBaseAndBitshift+0xa8>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	4a2c      	ldr	r2, [pc, #176]	; (80040d4 <DMA_CalcBaseAndBitshift+0x154>)
 8004024:	4293      	cmp	r3, r2
 8004026:	d101      	bne.n	800402c <DMA_CalcBaseAndBitshift+0xac>
 8004028:	2301      	movs	r3, #1
 800402a:	e000      	b.n	800402e <DMA_CalcBaseAndBitshift+0xae>
 800402c:	2300      	movs	r3, #0
 800402e:	2b00      	cmp	r3, #0
 8004030:	d024      	beq.n	800407c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	b2db      	uxtb	r3, r3
 8004038:	3b10      	subs	r3, #16
 800403a:	4a27      	ldr	r2, [pc, #156]	; (80040d8 <DMA_CalcBaseAndBitshift+0x158>)
 800403c:	fba2 2303 	umull	r2, r3, r2, r3
 8004040:	091b      	lsrs	r3, r3, #4
 8004042:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	f003 0307 	and.w	r3, r3, #7
 800404a:	4a24      	ldr	r2, [pc, #144]	; (80040dc <DMA_CalcBaseAndBitshift+0x15c>)
 800404c:	5cd3      	ldrb	r3, [r2, r3]
 800404e:	461a      	mov	r2, r3
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	2b03      	cmp	r3, #3
 8004058:	d908      	bls.n	800406c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	461a      	mov	r2, r3
 8004060:	4b1f      	ldr	r3, [pc, #124]	; (80040e0 <DMA_CalcBaseAndBitshift+0x160>)
 8004062:	4013      	ands	r3, r2
 8004064:	1d1a      	adds	r2, r3, #4
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	659a      	str	r2, [r3, #88]	; 0x58
 800406a:	e00d      	b.n	8004088 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	461a      	mov	r2, r3
 8004072:	4b1b      	ldr	r3, [pc, #108]	; (80040e0 <DMA_CalcBaseAndBitshift+0x160>)
 8004074:	4013      	ands	r3, r2
 8004076:	687a      	ldr	r2, [r7, #4]
 8004078:	6593      	str	r3, [r2, #88]	; 0x58
 800407a:	e005      	b.n	8004088 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800408c:	4618      	mov	r0, r3
 800408e:	3714      	adds	r7, #20
 8004090:	46bd      	mov	sp, r7
 8004092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004096:	4770      	bx	lr
 8004098:	40020010 	.word	0x40020010
 800409c:	40020028 	.word	0x40020028
 80040a0:	40020040 	.word	0x40020040
 80040a4:	40020058 	.word	0x40020058
 80040a8:	40020070 	.word	0x40020070
 80040ac:	40020088 	.word	0x40020088
 80040b0:	400200a0 	.word	0x400200a0
 80040b4:	400200b8 	.word	0x400200b8
 80040b8:	40020410 	.word	0x40020410
 80040bc:	40020428 	.word	0x40020428
 80040c0:	40020440 	.word	0x40020440
 80040c4:	40020458 	.word	0x40020458
 80040c8:	40020470 	.word	0x40020470
 80040cc:	40020488 	.word	0x40020488
 80040d0:	400204a0 	.word	0x400204a0
 80040d4:	400204b8 	.word	0x400204b8
 80040d8:	aaaaaaab 	.word	0xaaaaaaab
 80040dc:	0800be68 	.word	0x0800be68
 80040e0:	fffffc00 	.word	0xfffffc00

080040e4 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80040e4:	b480      	push	{r7}
 80040e6:	b085      	sub	sp, #20
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80040ec:	2300      	movs	r3, #0
 80040ee:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	699b      	ldr	r3, [r3, #24]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d120      	bne.n	800413a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040fc:	2b03      	cmp	r3, #3
 80040fe:	d858      	bhi.n	80041b2 <DMA_CheckFifoParam+0xce>
 8004100:	a201      	add	r2, pc, #4	; (adr r2, 8004108 <DMA_CheckFifoParam+0x24>)
 8004102:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004106:	bf00      	nop
 8004108:	08004119 	.word	0x08004119
 800410c:	0800412b 	.word	0x0800412b
 8004110:	08004119 	.word	0x08004119
 8004114:	080041b3 	.word	0x080041b3
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800411c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004120:	2b00      	cmp	r3, #0
 8004122:	d048      	beq.n	80041b6 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004124:	2301      	movs	r3, #1
 8004126:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004128:	e045      	b.n	80041b6 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800412e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004132:	d142      	bne.n	80041ba <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004134:	2301      	movs	r3, #1
 8004136:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004138:	e03f      	b.n	80041ba <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	699b      	ldr	r3, [r3, #24]
 800413e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004142:	d123      	bne.n	800418c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004148:	2b03      	cmp	r3, #3
 800414a:	d838      	bhi.n	80041be <DMA_CheckFifoParam+0xda>
 800414c:	a201      	add	r2, pc, #4	; (adr r2, 8004154 <DMA_CheckFifoParam+0x70>)
 800414e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004152:	bf00      	nop
 8004154:	08004165 	.word	0x08004165
 8004158:	0800416b 	.word	0x0800416b
 800415c:	08004165 	.word	0x08004165
 8004160:	0800417d 	.word	0x0800417d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004164:	2301      	movs	r3, #1
 8004166:	73fb      	strb	r3, [r7, #15]
        break;
 8004168:	e030      	b.n	80041cc <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800416e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004172:	2b00      	cmp	r3, #0
 8004174:	d025      	beq.n	80041c2 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8004176:	2301      	movs	r3, #1
 8004178:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800417a:	e022      	b.n	80041c2 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004180:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004184:	d11f      	bne.n	80041c6 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004186:	2301      	movs	r3, #1
 8004188:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800418a:	e01c      	b.n	80041c6 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004190:	2b02      	cmp	r3, #2
 8004192:	d902      	bls.n	800419a <DMA_CheckFifoParam+0xb6>
 8004194:	2b03      	cmp	r3, #3
 8004196:	d003      	beq.n	80041a0 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004198:	e018      	b.n	80041cc <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800419a:	2301      	movs	r3, #1
 800419c:	73fb      	strb	r3, [r7, #15]
        break;
 800419e:	e015      	b.n	80041cc <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d00e      	beq.n	80041ca <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80041ac:	2301      	movs	r3, #1
 80041ae:	73fb      	strb	r3, [r7, #15]
    break;
 80041b0:	e00b      	b.n	80041ca <DMA_CheckFifoParam+0xe6>
        break;
 80041b2:	bf00      	nop
 80041b4:	e00a      	b.n	80041cc <DMA_CheckFifoParam+0xe8>
        break;
 80041b6:	bf00      	nop
 80041b8:	e008      	b.n	80041cc <DMA_CheckFifoParam+0xe8>
        break;
 80041ba:	bf00      	nop
 80041bc:	e006      	b.n	80041cc <DMA_CheckFifoParam+0xe8>
        break;
 80041be:	bf00      	nop
 80041c0:	e004      	b.n	80041cc <DMA_CheckFifoParam+0xe8>
        break;
 80041c2:	bf00      	nop
 80041c4:	e002      	b.n	80041cc <DMA_CheckFifoParam+0xe8>
        break;
 80041c6:	bf00      	nop
 80041c8:	e000      	b.n	80041cc <DMA_CheckFifoParam+0xe8>
    break;
 80041ca:	bf00      	nop
    }
  }

  return status;
 80041cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80041ce:	4618      	mov	r0, r3
 80041d0:	3714      	adds	r7, #20
 80041d2:	46bd      	mov	sp, r7
 80041d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d8:	4770      	bx	lr
 80041da:	bf00      	nop

080041dc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80041dc:	b480      	push	{r7}
 80041de:	b085      	sub	sp, #20
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4a38      	ldr	r2, [pc, #224]	; (80042d0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d022      	beq.n	800423a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a36      	ldr	r2, [pc, #216]	; (80042d4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d01d      	beq.n	800423a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4a35      	ldr	r2, [pc, #212]	; (80042d8 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d018      	beq.n	800423a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a33      	ldr	r2, [pc, #204]	; (80042dc <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d013      	beq.n	800423a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4a32      	ldr	r2, [pc, #200]	; (80042e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d00e      	beq.n	800423a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4a30      	ldr	r2, [pc, #192]	; (80042e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d009      	beq.n	800423a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4a2f      	ldr	r2, [pc, #188]	; (80042e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d004      	beq.n	800423a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4a2d      	ldr	r2, [pc, #180]	; (80042ec <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d101      	bne.n	800423e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800423a:	2301      	movs	r3, #1
 800423c:	e000      	b.n	8004240 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800423e:	2300      	movs	r3, #0
 8004240:	2b00      	cmp	r3, #0
 8004242:	d01a      	beq.n	800427a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	b2db      	uxtb	r3, r3
 800424a:	3b08      	subs	r3, #8
 800424c:	4a28      	ldr	r2, [pc, #160]	; (80042f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800424e:	fba2 2303 	umull	r2, r3, r2, r3
 8004252:	091b      	lsrs	r3, r3, #4
 8004254:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004256:	68fa      	ldr	r2, [r7, #12]
 8004258:	4b26      	ldr	r3, [pc, #152]	; (80042f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800425a:	4413      	add	r3, r2
 800425c:	009b      	lsls	r3, r3, #2
 800425e:	461a      	mov	r2, r3
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	4a24      	ldr	r2, [pc, #144]	; (80042f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004268:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	f003 031f 	and.w	r3, r3, #31
 8004270:	2201      	movs	r2, #1
 8004272:	409a      	lsls	r2, r3
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004278:	e024      	b.n	80042c4 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	b2db      	uxtb	r3, r3
 8004280:	3b10      	subs	r3, #16
 8004282:	4a1e      	ldr	r2, [pc, #120]	; (80042fc <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004284:	fba2 2303 	umull	r2, r3, r2, r3
 8004288:	091b      	lsrs	r3, r3, #4
 800428a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	4a1c      	ldr	r2, [pc, #112]	; (8004300 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d806      	bhi.n	80042a2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004294:	68bb      	ldr	r3, [r7, #8]
 8004296:	4a1b      	ldr	r2, [pc, #108]	; (8004304 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d902      	bls.n	80042a2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	3308      	adds	r3, #8
 80042a0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80042a2:	68fa      	ldr	r2, [r7, #12]
 80042a4:	4b18      	ldr	r3, [pc, #96]	; (8004308 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80042a6:	4413      	add	r3, r2
 80042a8:	009b      	lsls	r3, r3, #2
 80042aa:	461a      	mov	r2, r3
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	4a16      	ldr	r2, [pc, #88]	; (800430c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80042b4:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	f003 031f 	and.w	r3, r3, #31
 80042bc:	2201      	movs	r2, #1
 80042be:	409a      	lsls	r2, r3
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	669a      	str	r2, [r3, #104]	; 0x68
}
 80042c4:	bf00      	nop
 80042c6:	3714      	adds	r7, #20
 80042c8:	46bd      	mov	sp, r7
 80042ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ce:	4770      	bx	lr
 80042d0:	58025408 	.word	0x58025408
 80042d4:	5802541c 	.word	0x5802541c
 80042d8:	58025430 	.word	0x58025430
 80042dc:	58025444 	.word	0x58025444
 80042e0:	58025458 	.word	0x58025458
 80042e4:	5802546c 	.word	0x5802546c
 80042e8:	58025480 	.word	0x58025480
 80042ec:	58025494 	.word	0x58025494
 80042f0:	cccccccd 	.word	0xcccccccd
 80042f4:	16009600 	.word	0x16009600
 80042f8:	58025880 	.word	0x58025880
 80042fc:	aaaaaaab 	.word	0xaaaaaaab
 8004300:	400204b8 	.word	0x400204b8
 8004304:	4002040f 	.word	0x4002040f
 8004308:	10008200 	.word	0x10008200
 800430c:	40020880 	.word	0x40020880

08004310 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004310:	b480      	push	{r7}
 8004312:	b085      	sub	sp, #20
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	685b      	ldr	r3, [r3, #4]
 800431c:	b2db      	uxtb	r3, r3
 800431e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d04a      	beq.n	80043bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	2b08      	cmp	r3, #8
 800432a:	d847      	bhi.n	80043bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4a25      	ldr	r2, [pc, #148]	; (80043c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d022      	beq.n	800437c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4a24      	ldr	r2, [pc, #144]	; (80043cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d01d      	beq.n	800437c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4a22      	ldr	r2, [pc, #136]	; (80043d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d018      	beq.n	800437c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4a21      	ldr	r2, [pc, #132]	; (80043d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004350:	4293      	cmp	r3, r2
 8004352:	d013      	beq.n	800437c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4a1f      	ldr	r2, [pc, #124]	; (80043d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d00e      	beq.n	800437c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4a1e      	ldr	r2, [pc, #120]	; (80043dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004364:	4293      	cmp	r3, r2
 8004366:	d009      	beq.n	800437c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4a1c      	ldr	r2, [pc, #112]	; (80043e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d004      	beq.n	800437c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4a1b      	ldr	r2, [pc, #108]	; (80043e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004378:	4293      	cmp	r3, r2
 800437a:	d101      	bne.n	8004380 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800437c:	2301      	movs	r3, #1
 800437e:	e000      	b.n	8004382 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004380:	2300      	movs	r3, #0
 8004382:	2b00      	cmp	r3, #0
 8004384:	d00a      	beq.n	800439c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004386:	68fa      	ldr	r2, [r7, #12]
 8004388:	4b17      	ldr	r3, [pc, #92]	; (80043e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800438a:	4413      	add	r3, r2
 800438c:	009b      	lsls	r3, r3, #2
 800438e:	461a      	mov	r2, r3
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	4a15      	ldr	r2, [pc, #84]	; (80043ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004398:	671a      	str	r2, [r3, #112]	; 0x70
 800439a:	e009      	b.n	80043b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800439c:	68fa      	ldr	r2, [r7, #12]
 800439e:	4b14      	ldr	r3, [pc, #80]	; (80043f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80043a0:	4413      	add	r3, r2
 80043a2:	009b      	lsls	r3, r3, #2
 80043a4:	461a      	mov	r2, r3
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	4a11      	ldr	r2, [pc, #68]	; (80043f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80043ae:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	3b01      	subs	r3, #1
 80043b4:	2201      	movs	r2, #1
 80043b6:	409a      	lsls	r2, r3
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80043bc:	bf00      	nop
 80043be:	3714      	adds	r7, #20
 80043c0:	46bd      	mov	sp, r7
 80043c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c6:	4770      	bx	lr
 80043c8:	58025408 	.word	0x58025408
 80043cc:	5802541c 	.word	0x5802541c
 80043d0:	58025430 	.word	0x58025430
 80043d4:	58025444 	.word	0x58025444
 80043d8:	58025458 	.word	0x58025458
 80043dc:	5802546c 	.word	0x5802546c
 80043e0:	58025480 	.word	0x58025480
 80043e4:	58025494 	.word	0x58025494
 80043e8:	1600963f 	.word	0x1600963f
 80043ec:	58025940 	.word	0x58025940
 80043f0:	1000823f 	.word	0x1000823f
 80043f4:	40020940 	.word	0x40020940

080043f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80043f8:	b480      	push	{r7}
 80043fa:	b089      	sub	sp, #36	; 0x24
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
 8004400:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004402:	2300      	movs	r3, #0
 8004404:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004406:	4b89      	ldr	r3, [pc, #548]	; (800462c <HAL_GPIO_Init+0x234>)
 8004408:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800440a:	e194      	b.n	8004736 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	681a      	ldr	r2, [r3, #0]
 8004410:	2101      	movs	r1, #1
 8004412:	69fb      	ldr	r3, [r7, #28]
 8004414:	fa01 f303 	lsl.w	r3, r1, r3
 8004418:	4013      	ands	r3, r2
 800441a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800441c:	693b      	ldr	r3, [r7, #16]
 800441e:	2b00      	cmp	r3, #0
 8004420:	f000 8186 	beq.w	8004730 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	685b      	ldr	r3, [r3, #4]
 8004428:	2b01      	cmp	r3, #1
 800442a:	d00b      	beq.n	8004444 <HAL_GPIO_Init+0x4c>
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	685b      	ldr	r3, [r3, #4]
 8004430:	2b02      	cmp	r3, #2
 8004432:	d007      	beq.n	8004444 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004438:	2b11      	cmp	r3, #17
 800443a:	d003      	beq.n	8004444 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	2b12      	cmp	r3, #18
 8004442:	d130      	bne.n	80044a6 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	689b      	ldr	r3, [r3, #8]
 8004448:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800444a:	69fb      	ldr	r3, [r7, #28]
 800444c:	005b      	lsls	r3, r3, #1
 800444e:	2203      	movs	r2, #3
 8004450:	fa02 f303 	lsl.w	r3, r2, r3
 8004454:	43db      	mvns	r3, r3
 8004456:	69ba      	ldr	r2, [r7, #24]
 8004458:	4013      	ands	r3, r2
 800445a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	68da      	ldr	r2, [r3, #12]
 8004460:	69fb      	ldr	r3, [r7, #28]
 8004462:	005b      	lsls	r3, r3, #1
 8004464:	fa02 f303 	lsl.w	r3, r2, r3
 8004468:	69ba      	ldr	r2, [r7, #24]
 800446a:	4313      	orrs	r3, r2
 800446c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	69ba      	ldr	r2, [r7, #24]
 8004472:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800447a:	2201      	movs	r2, #1
 800447c:	69fb      	ldr	r3, [r7, #28]
 800447e:	fa02 f303 	lsl.w	r3, r2, r3
 8004482:	43db      	mvns	r3, r3
 8004484:	69ba      	ldr	r2, [r7, #24]
 8004486:	4013      	ands	r3, r2
 8004488:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	091b      	lsrs	r3, r3, #4
 8004490:	f003 0201 	and.w	r2, r3, #1
 8004494:	69fb      	ldr	r3, [r7, #28]
 8004496:	fa02 f303 	lsl.w	r3, r2, r3
 800449a:	69ba      	ldr	r2, [r7, #24]
 800449c:	4313      	orrs	r3, r2
 800449e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	69ba      	ldr	r2, [r7, #24]
 80044a4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	68db      	ldr	r3, [r3, #12]
 80044aa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80044ac:	69fb      	ldr	r3, [r7, #28]
 80044ae:	005b      	lsls	r3, r3, #1
 80044b0:	2203      	movs	r2, #3
 80044b2:	fa02 f303 	lsl.w	r3, r2, r3
 80044b6:	43db      	mvns	r3, r3
 80044b8:	69ba      	ldr	r2, [r7, #24]
 80044ba:	4013      	ands	r3, r2
 80044bc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	689a      	ldr	r2, [r3, #8]
 80044c2:	69fb      	ldr	r3, [r7, #28]
 80044c4:	005b      	lsls	r3, r3, #1
 80044c6:	fa02 f303 	lsl.w	r3, r2, r3
 80044ca:	69ba      	ldr	r2, [r7, #24]
 80044cc:	4313      	orrs	r3, r2
 80044ce:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	69ba      	ldr	r2, [r7, #24]
 80044d4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	685b      	ldr	r3, [r3, #4]
 80044da:	2b02      	cmp	r3, #2
 80044dc:	d003      	beq.n	80044e6 <HAL_GPIO_Init+0xee>
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	685b      	ldr	r3, [r3, #4]
 80044e2:	2b12      	cmp	r3, #18
 80044e4:	d123      	bne.n	800452e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80044e6:	69fb      	ldr	r3, [r7, #28]
 80044e8:	08da      	lsrs	r2, r3, #3
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	3208      	adds	r2, #8
 80044ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80044f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80044f4:	69fb      	ldr	r3, [r7, #28]
 80044f6:	f003 0307 	and.w	r3, r3, #7
 80044fa:	009b      	lsls	r3, r3, #2
 80044fc:	220f      	movs	r2, #15
 80044fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004502:	43db      	mvns	r3, r3
 8004504:	69ba      	ldr	r2, [r7, #24]
 8004506:	4013      	ands	r3, r2
 8004508:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	691a      	ldr	r2, [r3, #16]
 800450e:	69fb      	ldr	r3, [r7, #28]
 8004510:	f003 0307 	and.w	r3, r3, #7
 8004514:	009b      	lsls	r3, r3, #2
 8004516:	fa02 f303 	lsl.w	r3, r2, r3
 800451a:	69ba      	ldr	r2, [r7, #24]
 800451c:	4313      	orrs	r3, r2
 800451e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004520:	69fb      	ldr	r3, [r7, #28]
 8004522:	08da      	lsrs	r2, r3, #3
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	3208      	adds	r2, #8
 8004528:	69b9      	ldr	r1, [r7, #24]
 800452a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004534:	69fb      	ldr	r3, [r7, #28]
 8004536:	005b      	lsls	r3, r3, #1
 8004538:	2203      	movs	r2, #3
 800453a:	fa02 f303 	lsl.w	r3, r2, r3
 800453e:	43db      	mvns	r3, r3
 8004540:	69ba      	ldr	r2, [r7, #24]
 8004542:	4013      	ands	r3, r2
 8004544:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	685b      	ldr	r3, [r3, #4]
 800454a:	f003 0203 	and.w	r2, r3, #3
 800454e:	69fb      	ldr	r3, [r7, #28]
 8004550:	005b      	lsls	r3, r3, #1
 8004552:	fa02 f303 	lsl.w	r3, r2, r3
 8004556:	69ba      	ldr	r2, [r7, #24]
 8004558:	4313      	orrs	r3, r2
 800455a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	69ba      	ldr	r2, [r7, #24]
 8004560:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800456a:	2b00      	cmp	r3, #0
 800456c:	f000 80e0 	beq.w	8004730 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004570:	4b2f      	ldr	r3, [pc, #188]	; (8004630 <HAL_GPIO_Init+0x238>)
 8004572:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004576:	4a2e      	ldr	r2, [pc, #184]	; (8004630 <HAL_GPIO_Init+0x238>)
 8004578:	f043 0302 	orr.w	r3, r3, #2
 800457c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004580:	4b2b      	ldr	r3, [pc, #172]	; (8004630 <HAL_GPIO_Init+0x238>)
 8004582:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004586:	f003 0302 	and.w	r3, r3, #2
 800458a:	60fb      	str	r3, [r7, #12]
 800458c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800458e:	4a29      	ldr	r2, [pc, #164]	; (8004634 <HAL_GPIO_Init+0x23c>)
 8004590:	69fb      	ldr	r3, [r7, #28]
 8004592:	089b      	lsrs	r3, r3, #2
 8004594:	3302      	adds	r3, #2
 8004596:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800459a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800459c:	69fb      	ldr	r3, [r7, #28]
 800459e:	f003 0303 	and.w	r3, r3, #3
 80045a2:	009b      	lsls	r3, r3, #2
 80045a4:	220f      	movs	r2, #15
 80045a6:	fa02 f303 	lsl.w	r3, r2, r3
 80045aa:	43db      	mvns	r3, r3
 80045ac:	69ba      	ldr	r2, [r7, #24]
 80045ae:	4013      	ands	r3, r2
 80045b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	4a20      	ldr	r2, [pc, #128]	; (8004638 <HAL_GPIO_Init+0x240>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d052      	beq.n	8004660 <HAL_GPIO_Init+0x268>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	4a1f      	ldr	r2, [pc, #124]	; (800463c <HAL_GPIO_Init+0x244>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d031      	beq.n	8004626 <HAL_GPIO_Init+0x22e>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	4a1e      	ldr	r2, [pc, #120]	; (8004640 <HAL_GPIO_Init+0x248>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d02b      	beq.n	8004622 <HAL_GPIO_Init+0x22a>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	4a1d      	ldr	r2, [pc, #116]	; (8004644 <HAL_GPIO_Init+0x24c>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d025      	beq.n	800461e <HAL_GPIO_Init+0x226>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	4a1c      	ldr	r2, [pc, #112]	; (8004648 <HAL_GPIO_Init+0x250>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d01f      	beq.n	800461a <HAL_GPIO_Init+0x222>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	4a1b      	ldr	r2, [pc, #108]	; (800464c <HAL_GPIO_Init+0x254>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d019      	beq.n	8004616 <HAL_GPIO_Init+0x21e>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	4a1a      	ldr	r2, [pc, #104]	; (8004650 <HAL_GPIO_Init+0x258>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d013      	beq.n	8004612 <HAL_GPIO_Init+0x21a>
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	4a19      	ldr	r2, [pc, #100]	; (8004654 <HAL_GPIO_Init+0x25c>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d00d      	beq.n	800460e <HAL_GPIO_Init+0x216>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	4a18      	ldr	r2, [pc, #96]	; (8004658 <HAL_GPIO_Init+0x260>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d007      	beq.n	800460a <HAL_GPIO_Init+0x212>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	4a17      	ldr	r2, [pc, #92]	; (800465c <HAL_GPIO_Init+0x264>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d101      	bne.n	8004606 <HAL_GPIO_Init+0x20e>
 8004602:	2309      	movs	r3, #9
 8004604:	e02d      	b.n	8004662 <HAL_GPIO_Init+0x26a>
 8004606:	230a      	movs	r3, #10
 8004608:	e02b      	b.n	8004662 <HAL_GPIO_Init+0x26a>
 800460a:	2308      	movs	r3, #8
 800460c:	e029      	b.n	8004662 <HAL_GPIO_Init+0x26a>
 800460e:	2307      	movs	r3, #7
 8004610:	e027      	b.n	8004662 <HAL_GPIO_Init+0x26a>
 8004612:	2306      	movs	r3, #6
 8004614:	e025      	b.n	8004662 <HAL_GPIO_Init+0x26a>
 8004616:	2305      	movs	r3, #5
 8004618:	e023      	b.n	8004662 <HAL_GPIO_Init+0x26a>
 800461a:	2304      	movs	r3, #4
 800461c:	e021      	b.n	8004662 <HAL_GPIO_Init+0x26a>
 800461e:	2303      	movs	r3, #3
 8004620:	e01f      	b.n	8004662 <HAL_GPIO_Init+0x26a>
 8004622:	2302      	movs	r3, #2
 8004624:	e01d      	b.n	8004662 <HAL_GPIO_Init+0x26a>
 8004626:	2301      	movs	r3, #1
 8004628:	e01b      	b.n	8004662 <HAL_GPIO_Init+0x26a>
 800462a:	bf00      	nop
 800462c:	58000080 	.word	0x58000080
 8004630:	58024400 	.word	0x58024400
 8004634:	58000400 	.word	0x58000400
 8004638:	58020000 	.word	0x58020000
 800463c:	58020400 	.word	0x58020400
 8004640:	58020800 	.word	0x58020800
 8004644:	58020c00 	.word	0x58020c00
 8004648:	58021000 	.word	0x58021000
 800464c:	58021400 	.word	0x58021400
 8004650:	58021800 	.word	0x58021800
 8004654:	58021c00 	.word	0x58021c00
 8004658:	58022000 	.word	0x58022000
 800465c:	58022400 	.word	0x58022400
 8004660:	2300      	movs	r3, #0
 8004662:	69fa      	ldr	r2, [r7, #28]
 8004664:	f002 0203 	and.w	r2, r2, #3
 8004668:	0092      	lsls	r2, r2, #2
 800466a:	4093      	lsls	r3, r2
 800466c:	69ba      	ldr	r2, [r7, #24]
 800466e:	4313      	orrs	r3, r2
 8004670:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004672:	4938      	ldr	r1, [pc, #224]	; (8004754 <HAL_GPIO_Init+0x35c>)
 8004674:	69fb      	ldr	r3, [r7, #28]
 8004676:	089b      	lsrs	r3, r3, #2
 8004678:	3302      	adds	r3, #2
 800467a:	69ba      	ldr	r2, [r7, #24]
 800467c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004680:	697b      	ldr	r3, [r7, #20]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004686:	693b      	ldr	r3, [r7, #16]
 8004688:	43db      	mvns	r3, r3
 800468a:	69ba      	ldr	r2, [r7, #24]
 800468c:	4013      	ands	r3, r2
 800468e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	685b      	ldr	r3, [r3, #4]
 8004694:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004698:	2b00      	cmp	r3, #0
 800469a:	d003      	beq.n	80046a4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800469c:	69ba      	ldr	r2, [r7, #24]
 800469e:	693b      	ldr	r3, [r7, #16]
 80046a0:	4313      	orrs	r3, r2
 80046a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80046a4:	697b      	ldr	r3, [r7, #20]
 80046a6:	69ba      	ldr	r2, [r7, #24]
 80046a8:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 80046aa:	697b      	ldr	r3, [r7, #20]
 80046ac:	685b      	ldr	r3, [r3, #4]
 80046ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80046b0:	693b      	ldr	r3, [r7, #16]
 80046b2:	43db      	mvns	r3, r3
 80046b4:	69ba      	ldr	r2, [r7, #24]
 80046b6:	4013      	ands	r3, r2
 80046b8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d003      	beq.n	80046ce <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80046c6:	69ba      	ldr	r2, [r7, #24]
 80046c8:	693b      	ldr	r3, [r7, #16]
 80046ca:	4313      	orrs	r3, r2
 80046cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80046ce:	697b      	ldr	r3, [r7, #20]
 80046d0:	69ba      	ldr	r2, [r7, #24]
 80046d2:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80046d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80046dc:	693b      	ldr	r3, [r7, #16]
 80046de:	43db      	mvns	r3, r3
 80046e0:	69ba      	ldr	r2, [r7, #24]
 80046e2:	4013      	ands	r3, r2
 80046e4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	685b      	ldr	r3, [r3, #4]
 80046ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d003      	beq.n	80046fa <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 80046f2:	69ba      	ldr	r2, [r7, #24]
 80046f4:	693b      	ldr	r3, [r7, #16]
 80046f6:	4313      	orrs	r3, r2
 80046f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80046fa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80046fe:	69bb      	ldr	r3, [r7, #24]
 8004700:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004702:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800470a:	693b      	ldr	r3, [r7, #16]
 800470c:	43db      	mvns	r3, r3
 800470e:	69ba      	ldr	r2, [r7, #24]
 8004710:	4013      	ands	r3, r2
 8004712:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	685b      	ldr	r3, [r3, #4]
 8004718:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800471c:	2b00      	cmp	r3, #0
 800471e:	d003      	beq.n	8004728 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8004720:	69ba      	ldr	r2, [r7, #24]
 8004722:	693b      	ldr	r3, [r7, #16]
 8004724:	4313      	orrs	r3, r2
 8004726:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004728:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800472c:	69bb      	ldr	r3, [r7, #24]
 800472e:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8004730:	69fb      	ldr	r3, [r7, #28]
 8004732:	3301      	adds	r3, #1
 8004734:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	681a      	ldr	r2, [r3, #0]
 800473a:	69fb      	ldr	r3, [r7, #28]
 800473c:	fa22 f303 	lsr.w	r3, r2, r3
 8004740:	2b00      	cmp	r3, #0
 8004742:	f47f ae63 	bne.w	800440c <HAL_GPIO_Init+0x14>
  }
}
 8004746:	bf00      	nop
 8004748:	bf00      	nop
 800474a:	3724      	adds	r7, #36	; 0x24
 800474c:	46bd      	mov	sp, r7
 800474e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004752:	4770      	bx	lr
 8004754:	58000400 	.word	0x58000400

08004758 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8004758:	b480      	push	{r7}
 800475a:	b083      	sub	sp, #12
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8004760:	4a08      	ldr	r2, [pc, #32]	; (8004784 <HAL_HSEM_FastTake+0x2c>)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	3320      	adds	r3, #32
 8004766:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800476a:	4a07      	ldr	r2, [pc, #28]	; (8004788 <HAL_HSEM_FastTake+0x30>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d101      	bne.n	8004774 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8004770:	2300      	movs	r3, #0
 8004772:	e000      	b.n	8004776 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8004774:	2301      	movs	r3, #1
}
 8004776:	4618      	mov	r0, r3
 8004778:	370c      	adds	r7, #12
 800477a:	46bd      	mov	sp, r7
 800477c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004780:	4770      	bx	lr
 8004782:	bf00      	nop
 8004784:	58026400 	.word	0x58026400
 8004788:	80000300 	.word	0x80000300

0800478c <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 800478c:	b480      	push	{r7}
 800478e:	b083      	sub	sp, #12
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
 8004794:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8004796:	4906      	ldr	r1, [pc, #24]	; (80047b0 <HAL_HSEM_Release+0x24>)
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 80047a4:	bf00      	nop
 80047a6:	370c      	adds	r7, #12
 80047a8:	46bd      	mov	sp, r7
 80047aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ae:	4770      	bx	lr
 80047b0:	58026400 	.word	0x58026400

080047b4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b084      	sub	sp, #16
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80047bc:	4b29      	ldr	r3, [pc, #164]	; (8004864 <HAL_PWREx_ConfigSupply+0xb0>)
 80047be:	68db      	ldr	r3, [r3, #12]
 80047c0:	f003 0307 	and.w	r3, r3, #7
 80047c4:	2b06      	cmp	r3, #6
 80047c6:	d00a      	beq.n	80047de <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80047c8:	4b26      	ldr	r3, [pc, #152]	; (8004864 <HAL_PWREx_ConfigSupply+0xb0>)
 80047ca:	68db      	ldr	r3, [r3, #12]
 80047cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80047d0:	687a      	ldr	r2, [r7, #4]
 80047d2:	429a      	cmp	r2, r3
 80047d4:	d001      	beq.n	80047da <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80047d6:	2301      	movs	r3, #1
 80047d8:	e040      	b.n	800485c <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80047da:	2300      	movs	r3, #0
 80047dc:	e03e      	b.n	800485c <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80047de:	4b21      	ldr	r3, [pc, #132]	; (8004864 <HAL_PWREx_ConfigSupply+0xb0>)
 80047e0:	68db      	ldr	r3, [r3, #12]
 80047e2:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80047e6:	491f      	ldr	r1, [pc, #124]	; (8004864 <HAL_PWREx_ConfigSupply+0xb0>)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	4313      	orrs	r3, r2
 80047ec:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80047ee:	f7fc fdab 	bl	8001348 <HAL_GetTick>
 80047f2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80047f4:	e009      	b.n	800480a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80047f6:	f7fc fda7 	bl	8001348 <HAL_GetTick>
 80047fa:	4602      	mov	r2, r0
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	1ad3      	subs	r3, r2, r3
 8004800:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004804:	d901      	bls.n	800480a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004806:	2301      	movs	r3, #1
 8004808:	e028      	b.n	800485c <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800480a:	4b16      	ldr	r3, [pc, #88]	; (8004864 <HAL_PWREx_ConfigSupply+0xb0>)
 800480c:	685b      	ldr	r3, [r3, #4]
 800480e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004812:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004816:	d1ee      	bne.n	80047f6 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2b1e      	cmp	r3, #30
 800481c:	d008      	beq.n	8004830 <HAL_PWREx_ConfigSupply+0x7c>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2b2e      	cmp	r3, #46	; 0x2e
 8004822:	d005      	beq.n	8004830 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2b1d      	cmp	r3, #29
 8004828:	d002      	beq.n	8004830 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2b2d      	cmp	r3, #45	; 0x2d
 800482e:	d114      	bne.n	800485a <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8004830:	f7fc fd8a 	bl	8001348 <HAL_GetTick>
 8004834:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8004836:	e009      	b.n	800484c <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004838:	f7fc fd86 	bl	8001348 <HAL_GetTick>
 800483c:	4602      	mov	r2, r0
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	1ad3      	subs	r3, r2, r3
 8004842:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004846:	d901      	bls.n	800484c <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8004848:	2301      	movs	r3, #1
 800484a:	e007      	b.n	800485c <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800484c:	4b05      	ldr	r3, [pc, #20]	; (8004864 <HAL_PWREx_ConfigSupply+0xb0>)
 800484e:	68db      	ldr	r3, [r3, #12]
 8004850:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004854:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004858:	d1ee      	bne.n	8004838 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800485a:	2300      	movs	r3, #0
}
 800485c:	4618      	mov	r0, r3
 800485e:	3710      	adds	r7, #16
 8004860:	46bd      	mov	sp, r7
 8004862:	bd80      	pop	{r7, pc}
 8004864:	58024800 	.word	0x58024800

08004868 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b08c      	sub	sp, #48	; 0x30
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d101      	bne.n	800487a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004876:	2301      	movs	r3, #1
 8004878:	e3ff      	b.n	800507a <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f003 0301 	and.w	r3, r3, #1
 8004882:	2b00      	cmp	r3, #0
 8004884:	f000 8087 	beq.w	8004996 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004888:	4b99      	ldr	r3, [pc, #612]	; (8004af0 <HAL_RCC_OscConfig+0x288>)
 800488a:	691b      	ldr	r3, [r3, #16]
 800488c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004890:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004892:	4b97      	ldr	r3, [pc, #604]	; (8004af0 <HAL_RCC_OscConfig+0x288>)
 8004894:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004896:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004898:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800489a:	2b10      	cmp	r3, #16
 800489c:	d007      	beq.n	80048ae <HAL_RCC_OscConfig+0x46>
 800489e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048a0:	2b18      	cmp	r3, #24
 80048a2:	d110      	bne.n	80048c6 <HAL_RCC_OscConfig+0x5e>
 80048a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048a6:	f003 0303 	and.w	r3, r3, #3
 80048aa:	2b02      	cmp	r3, #2
 80048ac:	d10b      	bne.n	80048c6 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048ae:	4b90      	ldr	r3, [pc, #576]	; (8004af0 <HAL_RCC_OscConfig+0x288>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d06c      	beq.n	8004994 <HAL_RCC_OscConfig+0x12c>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	685b      	ldr	r3, [r3, #4]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d168      	bne.n	8004994 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80048c2:	2301      	movs	r3, #1
 80048c4:	e3d9      	b.n	800507a <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	685b      	ldr	r3, [r3, #4]
 80048ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048ce:	d106      	bne.n	80048de <HAL_RCC_OscConfig+0x76>
 80048d0:	4b87      	ldr	r3, [pc, #540]	; (8004af0 <HAL_RCC_OscConfig+0x288>)
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	4a86      	ldr	r2, [pc, #536]	; (8004af0 <HAL_RCC_OscConfig+0x288>)
 80048d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048da:	6013      	str	r3, [r2, #0]
 80048dc:	e02e      	b.n	800493c <HAL_RCC_OscConfig+0xd4>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	685b      	ldr	r3, [r3, #4]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d10c      	bne.n	8004900 <HAL_RCC_OscConfig+0x98>
 80048e6:	4b82      	ldr	r3, [pc, #520]	; (8004af0 <HAL_RCC_OscConfig+0x288>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4a81      	ldr	r2, [pc, #516]	; (8004af0 <HAL_RCC_OscConfig+0x288>)
 80048ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048f0:	6013      	str	r3, [r2, #0]
 80048f2:	4b7f      	ldr	r3, [pc, #508]	; (8004af0 <HAL_RCC_OscConfig+0x288>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	4a7e      	ldr	r2, [pc, #504]	; (8004af0 <HAL_RCC_OscConfig+0x288>)
 80048f8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80048fc:	6013      	str	r3, [r2, #0]
 80048fe:	e01d      	b.n	800493c <HAL_RCC_OscConfig+0xd4>
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	685b      	ldr	r3, [r3, #4]
 8004904:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004908:	d10c      	bne.n	8004924 <HAL_RCC_OscConfig+0xbc>
 800490a:	4b79      	ldr	r3, [pc, #484]	; (8004af0 <HAL_RCC_OscConfig+0x288>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	4a78      	ldr	r2, [pc, #480]	; (8004af0 <HAL_RCC_OscConfig+0x288>)
 8004910:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004914:	6013      	str	r3, [r2, #0]
 8004916:	4b76      	ldr	r3, [pc, #472]	; (8004af0 <HAL_RCC_OscConfig+0x288>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4a75      	ldr	r2, [pc, #468]	; (8004af0 <HAL_RCC_OscConfig+0x288>)
 800491c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004920:	6013      	str	r3, [r2, #0]
 8004922:	e00b      	b.n	800493c <HAL_RCC_OscConfig+0xd4>
 8004924:	4b72      	ldr	r3, [pc, #456]	; (8004af0 <HAL_RCC_OscConfig+0x288>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	4a71      	ldr	r2, [pc, #452]	; (8004af0 <HAL_RCC_OscConfig+0x288>)
 800492a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800492e:	6013      	str	r3, [r2, #0]
 8004930:	4b6f      	ldr	r3, [pc, #444]	; (8004af0 <HAL_RCC_OscConfig+0x288>)
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	4a6e      	ldr	r2, [pc, #440]	; (8004af0 <HAL_RCC_OscConfig+0x288>)
 8004936:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800493a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	685b      	ldr	r3, [r3, #4]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d013      	beq.n	800496c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004944:	f7fc fd00 	bl	8001348 <HAL_GetTick>
 8004948:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800494a:	e008      	b.n	800495e <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800494c:	f7fc fcfc 	bl	8001348 <HAL_GetTick>
 8004950:	4602      	mov	r2, r0
 8004952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004954:	1ad3      	subs	r3, r2, r3
 8004956:	2b64      	cmp	r3, #100	; 0x64
 8004958:	d901      	bls.n	800495e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800495a:	2303      	movs	r3, #3
 800495c:	e38d      	b.n	800507a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800495e:	4b64      	ldr	r3, [pc, #400]	; (8004af0 <HAL_RCC_OscConfig+0x288>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004966:	2b00      	cmp	r3, #0
 8004968:	d0f0      	beq.n	800494c <HAL_RCC_OscConfig+0xe4>
 800496a:	e014      	b.n	8004996 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800496c:	f7fc fcec 	bl	8001348 <HAL_GetTick>
 8004970:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004972:	e008      	b.n	8004986 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004974:	f7fc fce8 	bl	8001348 <HAL_GetTick>
 8004978:	4602      	mov	r2, r0
 800497a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800497c:	1ad3      	subs	r3, r2, r3
 800497e:	2b64      	cmp	r3, #100	; 0x64
 8004980:	d901      	bls.n	8004986 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004982:	2303      	movs	r3, #3
 8004984:	e379      	b.n	800507a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004986:	4b5a      	ldr	r3, [pc, #360]	; (8004af0 <HAL_RCC_OscConfig+0x288>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800498e:	2b00      	cmp	r3, #0
 8004990:	d1f0      	bne.n	8004974 <HAL_RCC_OscConfig+0x10c>
 8004992:	e000      	b.n	8004996 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004994:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f003 0302 	and.w	r3, r3, #2
 800499e:	2b00      	cmp	r3, #0
 80049a0:	f000 80ae 	beq.w	8004b00 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80049a4:	4b52      	ldr	r3, [pc, #328]	; (8004af0 <HAL_RCC_OscConfig+0x288>)
 80049a6:	691b      	ldr	r3, [r3, #16]
 80049a8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80049ac:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80049ae:	4b50      	ldr	r3, [pc, #320]	; (8004af0 <HAL_RCC_OscConfig+0x288>)
 80049b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049b2:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80049b4:	6a3b      	ldr	r3, [r7, #32]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d007      	beq.n	80049ca <HAL_RCC_OscConfig+0x162>
 80049ba:	6a3b      	ldr	r3, [r7, #32]
 80049bc:	2b18      	cmp	r3, #24
 80049be:	d13a      	bne.n	8004a36 <HAL_RCC_OscConfig+0x1ce>
 80049c0:	69fb      	ldr	r3, [r7, #28]
 80049c2:	f003 0303 	and.w	r3, r3, #3
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d135      	bne.n	8004a36 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80049ca:	4b49      	ldr	r3, [pc, #292]	; (8004af0 <HAL_RCC_OscConfig+0x288>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f003 0304 	and.w	r3, r3, #4
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d005      	beq.n	80049e2 <HAL_RCC_OscConfig+0x17a>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	68db      	ldr	r3, [r3, #12]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d101      	bne.n	80049e2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80049de:	2301      	movs	r3, #1
 80049e0:	e34b      	b.n	800507a <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049e2:	f7fc fcbd 	bl	8001360 <HAL_GetREVID>
 80049e6:	4603      	mov	r3, r0
 80049e8:	f241 0203 	movw	r2, #4099	; 0x1003
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d817      	bhi.n	8004a20 <HAL_RCC_OscConfig+0x1b8>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	691b      	ldr	r3, [r3, #16]
 80049f4:	2b40      	cmp	r3, #64	; 0x40
 80049f6:	d108      	bne.n	8004a0a <HAL_RCC_OscConfig+0x1a2>
 80049f8:	4b3d      	ldr	r3, [pc, #244]	; (8004af0 <HAL_RCC_OscConfig+0x288>)
 80049fa:	685b      	ldr	r3, [r3, #4]
 80049fc:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004a00:	4a3b      	ldr	r2, [pc, #236]	; (8004af0 <HAL_RCC_OscConfig+0x288>)
 8004a02:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a06:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004a08:	e07a      	b.n	8004b00 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a0a:	4b39      	ldr	r3, [pc, #228]	; (8004af0 <HAL_RCC_OscConfig+0x288>)
 8004a0c:	685b      	ldr	r3, [r3, #4]
 8004a0e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	691b      	ldr	r3, [r3, #16]
 8004a16:	031b      	lsls	r3, r3, #12
 8004a18:	4935      	ldr	r1, [pc, #212]	; (8004af0 <HAL_RCC_OscConfig+0x288>)
 8004a1a:	4313      	orrs	r3, r2
 8004a1c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004a1e:	e06f      	b.n	8004b00 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a20:	4b33      	ldr	r3, [pc, #204]	; (8004af0 <HAL_RCC_OscConfig+0x288>)
 8004a22:	685b      	ldr	r3, [r3, #4]
 8004a24:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	691b      	ldr	r3, [r3, #16]
 8004a2c:	061b      	lsls	r3, r3, #24
 8004a2e:	4930      	ldr	r1, [pc, #192]	; (8004af0 <HAL_RCC_OscConfig+0x288>)
 8004a30:	4313      	orrs	r3, r2
 8004a32:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004a34:	e064      	b.n	8004b00 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	68db      	ldr	r3, [r3, #12]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d045      	beq.n	8004aca <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004a3e:	4b2c      	ldr	r3, [pc, #176]	; (8004af0 <HAL_RCC_OscConfig+0x288>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f023 0219 	bic.w	r2, r3, #25
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	68db      	ldr	r3, [r3, #12]
 8004a4a:	4929      	ldr	r1, [pc, #164]	; (8004af0 <HAL_RCC_OscConfig+0x288>)
 8004a4c:	4313      	orrs	r3, r2
 8004a4e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a50:	f7fc fc7a 	bl	8001348 <HAL_GetTick>
 8004a54:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004a56:	e008      	b.n	8004a6a <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004a58:	f7fc fc76 	bl	8001348 <HAL_GetTick>
 8004a5c:	4602      	mov	r2, r0
 8004a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a60:	1ad3      	subs	r3, r2, r3
 8004a62:	2b02      	cmp	r3, #2
 8004a64:	d901      	bls.n	8004a6a <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8004a66:	2303      	movs	r3, #3
 8004a68:	e307      	b.n	800507a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004a6a:	4b21      	ldr	r3, [pc, #132]	; (8004af0 <HAL_RCC_OscConfig+0x288>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f003 0304 	and.w	r3, r3, #4
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d0f0      	beq.n	8004a58 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a76:	f7fc fc73 	bl	8001360 <HAL_GetREVID>
 8004a7a:	4603      	mov	r3, r0
 8004a7c:	f241 0203 	movw	r2, #4099	; 0x1003
 8004a80:	4293      	cmp	r3, r2
 8004a82:	d817      	bhi.n	8004ab4 <HAL_RCC_OscConfig+0x24c>
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	691b      	ldr	r3, [r3, #16]
 8004a88:	2b40      	cmp	r3, #64	; 0x40
 8004a8a:	d108      	bne.n	8004a9e <HAL_RCC_OscConfig+0x236>
 8004a8c:	4b18      	ldr	r3, [pc, #96]	; (8004af0 <HAL_RCC_OscConfig+0x288>)
 8004a8e:	685b      	ldr	r3, [r3, #4]
 8004a90:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004a94:	4a16      	ldr	r2, [pc, #88]	; (8004af0 <HAL_RCC_OscConfig+0x288>)
 8004a96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a9a:	6053      	str	r3, [r2, #4]
 8004a9c:	e030      	b.n	8004b00 <HAL_RCC_OscConfig+0x298>
 8004a9e:	4b14      	ldr	r3, [pc, #80]	; (8004af0 <HAL_RCC_OscConfig+0x288>)
 8004aa0:	685b      	ldr	r3, [r3, #4]
 8004aa2:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	691b      	ldr	r3, [r3, #16]
 8004aaa:	031b      	lsls	r3, r3, #12
 8004aac:	4910      	ldr	r1, [pc, #64]	; (8004af0 <HAL_RCC_OscConfig+0x288>)
 8004aae:	4313      	orrs	r3, r2
 8004ab0:	604b      	str	r3, [r1, #4]
 8004ab2:	e025      	b.n	8004b00 <HAL_RCC_OscConfig+0x298>
 8004ab4:	4b0e      	ldr	r3, [pc, #56]	; (8004af0 <HAL_RCC_OscConfig+0x288>)
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	691b      	ldr	r3, [r3, #16]
 8004ac0:	061b      	lsls	r3, r3, #24
 8004ac2:	490b      	ldr	r1, [pc, #44]	; (8004af0 <HAL_RCC_OscConfig+0x288>)
 8004ac4:	4313      	orrs	r3, r2
 8004ac6:	604b      	str	r3, [r1, #4]
 8004ac8:	e01a      	b.n	8004b00 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004aca:	4b09      	ldr	r3, [pc, #36]	; (8004af0 <HAL_RCC_OscConfig+0x288>)
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	4a08      	ldr	r2, [pc, #32]	; (8004af0 <HAL_RCC_OscConfig+0x288>)
 8004ad0:	f023 0301 	bic.w	r3, r3, #1
 8004ad4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ad6:	f7fc fc37 	bl	8001348 <HAL_GetTick>
 8004ada:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004adc:	e00a      	b.n	8004af4 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004ade:	f7fc fc33 	bl	8001348 <HAL_GetTick>
 8004ae2:	4602      	mov	r2, r0
 8004ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ae6:	1ad3      	subs	r3, r2, r3
 8004ae8:	2b02      	cmp	r3, #2
 8004aea:	d903      	bls.n	8004af4 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8004aec:	2303      	movs	r3, #3
 8004aee:	e2c4      	b.n	800507a <HAL_RCC_OscConfig+0x812>
 8004af0:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004af4:	4ba4      	ldr	r3, [pc, #656]	; (8004d88 <HAL_RCC_OscConfig+0x520>)
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f003 0304 	and.w	r3, r3, #4
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d1ee      	bne.n	8004ade <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f003 0310 	and.w	r3, r3, #16
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	f000 80a9 	beq.w	8004c60 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004b0e:	4b9e      	ldr	r3, [pc, #632]	; (8004d88 <HAL_RCC_OscConfig+0x520>)
 8004b10:	691b      	ldr	r3, [r3, #16]
 8004b12:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004b16:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004b18:	4b9b      	ldr	r3, [pc, #620]	; (8004d88 <HAL_RCC_OscConfig+0x520>)
 8004b1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b1c:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004b1e:	69bb      	ldr	r3, [r7, #24]
 8004b20:	2b08      	cmp	r3, #8
 8004b22:	d007      	beq.n	8004b34 <HAL_RCC_OscConfig+0x2cc>
 8004b24:	69bb      	ldr	r3, [r7, #24]
 8004b26:	2b18      	cmp	r3, #24
 8004b28:	d13a      	bne.n	8004ba0 <HAL_RCC_OscConfig+0x338>
 8004b2a:	697b      	ldr	r3, [r7, #20]
 8004b2c:	f003 0303 	and.w	r3, r3, #3
 8004b30:	2b01      	cmp	r3, #1
 8004b32:	d135      	bne.n	8004ba0 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004b34:	4b94      	ldr	r3, [pc, #592]	; (8004d88 <HAL_RCC_OscConfig+0x520>)
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d005      	beq.n	8004b4c <HAL_RCC_OscConfig+0x2e4>
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	69db      	ldr	r3, [r3, #28]
 8004b44:	2b80      	cmp	r3, #128	; 0x80
 8004b46:	d001      	beq.n	8004b4c <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8004b48:	2301      	movs	r3, #1
 8004b4a:	e296      	b.n	800507a <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004b4c:	f7fc fc08 	bl	8001360 <HAL_GetREVID>
 8004b50:	4603      	mov	r3, r0
 8004b52:	f241 0203 	movw	r2, #4099	; 0x1003
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d817      	bhi.n	8004b8a <HAL_RCC_OscConfig+0x322>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6a1b      	ldr	r3, [r3, #32]
 8004b5e:	2b20      	cmp	r3, #32
 8004b60:	d108      	bne.n	8004b74 <HAL_RCC_OscConfig+0x30c>
 8004b62:	4b89      	ldr	r3, [pc, #548]	; (8004d88 <HAL_RCC_OscConfig+0x520>)
 8004b64:	685b      	ldr	r3, [r3, #4]
 8004b66:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004b6a:	4a87      	ldr	r2, [pc, #540]	; (8004d88 <HAL_RCC_OscConfig+0x520>)
 8004b6c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004b70:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004b72:	e075      	b.n	8004c60 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004b74:	4b84      	ldr	r3, [pc, #528]	; (8004d88 <HAL_RCC_OscConfig+0x520>)
 8004b76:	685b      	ldr	r3, [r3, #4]
 8004b78:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6a1b      	ldr	r3, [r3, #32]
 8004b80:	069b      	lsls	r3, r3, #26
 8004b82:	4981      	ldr	r1, [pc, #516]	; (8004d88 <HAL_RCC_OscConfig+0x520>)
 8004b84:	4313      	orrs	r3, r2
 8004b86:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004b88:	e06a      	b.n	8004c60 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004b8a:	4b7f      	ldr	r3, [pc, #508]	; (8004d88 <HAL_RCC_OscConfig+0x520>)
 8004b8c:	68db      	ldr	r3, [r3, #12]
 8004b8e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6a1b      	ldr	r3, [r3, #32]
 8004b96:	061b      	lsls	r3, r3, #24
 8004b98:	497b      	ldr	r1, [pc, #492]	; (8004d88 <HAL_RCC_OscConfig+0x520>)
 8004b9a:	4313      	orrs	r3, r2
 8004b9c:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004b9e:	e05f      	b.n	8004c60 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	69db      	ldr	r3, [r3, #28]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d042      	beq.n	8004c2e <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004ba8:	4b77      	ldr	r3, [pc, #476]	; (8004d88 <HAL_RCC_OscConfig+0x520>)
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	4a76      	ldr	r2, [pc, #472]	; (8004d88 <HAL_RCC_OscConfig+0x520>)
 8004bae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bb2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bb4:	f7fc fbc8 	bl	8001348 <HAL_GetTick>
 8004bb8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004bba:	e008      	b.n	8004bce <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004bbc:	f7fc fbc4 	bl	8001348 <HAL_GetTick>
 8004bc0:	4602      	mov	r2, r0
 8004bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bc4:	1ad3      	subs	r3, r2, r3
 8004bc6:	2b02      	cmp	r3, #2
 8004bc8:	d901      	bls.n	8004bce <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8004bca:	2303      	movs	r3, #3
 8004bcc:	e255      	b.n	800507a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004bce:	4b6e      	ldr	r3, [pc, #440]	; (8004d88 <HAL_RCC_OscConfig+0x520>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d0f0      	beq.n	8004bbc <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004bda:	f7fc fbc1 	bl	8001360 <HAL_GetREVID>
 8004bde:	4603      	mov	r3, r0
 8004be0:	f241 0203 	movw	r2, #4099	; 0x1003
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d817      	bhi.n	8004c18 <HAL_RCC_OscConfig+0x3b0>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6a1b      	ldr	r3, [r3, #32]
 8004bec:	2b20      	cmp	r3, #32
 8004bee:	d108      	bne.n	8004c02 <HAL_RCC_OscConfig+0x39a>
 8004bf0:	4b65      	ldr	r3, [pc, #404]	; (8004d88 <HAL_RCC_OscConfig+0x520>)
 8004bf2:	685b      	ldr	r3, [r3, #4]
 8004bf4:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004bf8:	4a63      	ldr	r2, [pc, #396]	; (8004d88 <HAL_RCC_OscConfig+0x520>)
 8004bfa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004bfe:	6053      	str	r3, [r2, #4]
 8004c00:	e02e      	b.n	8004c60 <HAL_RCC_OscConfig+0x3f8>
 8004c02:	4b61      	ldr	r3, [pc, #388]	; (8004d88 <HAL_RCC_OscConfig+0x520>)
 8004c04:	685b      	ldr	r3, [r3, #4]
 8004c06:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6a1b      	ldr	r3, [r3, #32]
 8004c0e:	069b      	lsls	r3, r3, #26
 8004c10:	495d      	ldr	r1, [pc, #372]	; (8004d88 <HAL_RCC_OscConfig+0x520>)
 8004c12:	4313      	orrs	r3, r2
 8004c14:	604b      	str	r3, [r1, #4]
 8004c16:	e023      	b.n	8004c60 <HAL_RCC_OscConfig+0x3f8>
 8004c18:	4b5b      	ldr	r3, [pc, #364]	; (8004d88 <HAL_RCC_OscConfig+0x520>)
 8004c1a:	68db      	ldr	r3, [r3, #12]
 8004c1c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6a1b      	ldr	r3, [r3, #32]
 8004c24:	061b      	lsls	r3, r3, #24
 8004c26:	4958      	ldr	r1, [pc, #352]	; (8004d88 <HAL_RCC_OscConfig+0x520>)
 8004c28:	4313      	orrs	r3, r2
 8004c2a:	60cb      	str	r3, [r1, #12]
 8004c2c:	e018      	b.n	8004c60 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004c2e:	4b56      	ldr	r3, [pc, #344]	; (8004d88 <HAL_RCC_OscConfig+0x520>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	4a55      	ldr	r2, [pc, #340]	; (8004d88 <HAL_RCC_OscConfig+0x520>)
 8004c34:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c38:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c3a:	f7fc fb85 	bl	8001348 <HAL_GetTick>
 8004c3e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004c40:	e008      	b.n	8004c54 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004c42:	f7fc fb81 	bl	8001348 <HAL_GetTick>
 8004c46:	4602      	mov	r2, r0
 8004c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c4a:	1ad3      	subs	r3, r2, r3
 8004c4c:	2b02      	cmp	r3, #2
 8004c4e:	d901      	bls.n	8004c54 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8004c50:	2303      	movs	r3, #3
 8004c52:	e212      	b.n	800507a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004c54:	4b4c      	ldr	r3, [pc, #304]	; (8004d88 <HAL_RCC_OscConfig+0x520>)
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d1f0      	bne.n	8004c42 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f003 0308 	and.w	r3, r3, #8
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d036      	beq.n	8004cda <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	695b      	ldr	r3, [r3, #20]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d019      	beq.n	8004ca8 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c74:	4b44      	ldr	r3, [pc, #272]	; (8004d88 <HAL_RCC_OscConfig+0x520>)
 8004c76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c78:	4a43      	ldr	r2, [pc, #268]	; (8004d88 <HAL_RCC_OscConfig+0x520>)
 8004c7a:	f043 0301 	orr.w	r3, r3, #1
 8004c7e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c80:	f7fc fb62 	bl	8001348 <HAL_GetTick>
 8004c84:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004c86:	e008      	b.n	8004c9a <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004c88:	f7fc fb5e 	bl	8001348 <HAL_GetTick>
 8004c8c:	4602      	mov	r2, r0
 8004c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c90:	1ad3      	subs	r3, r2, r3
 8004c92:	2b02      	cmp	r3, #2
 8004c94:	d901      	bls.n	8004c9a <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8004c96:	2303      	movs	r3, #3
 8004c98:	e1ef      	b.n	800507a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004c9a:	4b3b      	ldr	r3, [pc, #236]	; (8004d88 <HAL_RCC_OscConfig+0x520>)
 8004c9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c9e:	f003 0302 	and.w	r3, r3, #2
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d0f0      	beq.n	8004c88 <HAL_RCC_OscConfig+0x420>
 8004ca6:	e018      	b.n	8004cda <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004ca8:	4b37      	ldr	r3, [pc, #220]	; (8004d88 <HAL_RCC_OscConfig+0x520>)
 8004caa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004cac:	4a36      	ldr	r2, [pc, #216]	; (8004d88 <HAL_RCC_OscConfig+0x520>)
 8004cae:	f023 0301 	bic.w	r3, r3, #1
 8004cb2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cb4:	f7fc fb48 	bl	8001348 <HAL_GetTick>
 8004cb8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004cba:	e008      	b.n	8004cce <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004cbc:	f7fc fb44 	bl	8001348 <HAL_GetTick>
 8004cc0:	4602      	mov	r2, r0
 8004cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cc4:	1ad3      	subs	r3, r2, r3
 8004cc6:	2b02      	cmp	r3, #2
 8004cc8:	d901      	bls.n	8004cce <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8004cca:	2303      	movs	r3, #3
 8004ccc:	e1d5      	b.n	800507a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004cce:	4b2e      	ldr	r3, [pc, #184]	; (8004d88 <HAL_RCC_OscConfig+0x520>)
 8004cd0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004cd2:	f003 0302 	and.w	r3, r3, #2
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d1f0      	bne.n	8004cbc <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f003 0320 	and.w	r3, r3, #32
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d036      	beq.n	8004d54 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	699b      	ldr	r3, [r3, #24]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d019      	beq.n	8004d22 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004cee:	4b26      	ldr	r3, [pc, #152]	; (8004d88 <HAL_RCC_OscConfig+0x520>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4a25      	ldr	r2, [pc, #148]	; (8004d88 <HAL_RCC_OscConfig+0x520>)
 8004cf4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004cf8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004cfa:	f7fc fb25 	bl	8001348 <HAL_GetTick>
 8004cfe:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004d00:	e008      	b.n	8004d14 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8004d02:	f7fc fb21 	bl	8001348 <HAL_GetTick>
 8004d06:	4602      	mov	r2, r0
 8004d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d0a:	1ad3      	subs	r3, r2, r3
 8004d0c:	2b02      	cmp	r3, #2
 8004d0e:	d901      	bls.n	8004d14 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8004d10:	2303      	movs	r3, #3
 8004d12:	e1b2      	b.n	800507a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004d14:	4b1c      	ldr	r3, [pc, #112]	; (8004d88 <HAL_RCC_OscConfig+0x520>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d0f0      	beq.n	8004d02 <HAL_RCC_OscConfig+0x49a>
 8004d20:	e018      	b.n	8004d54 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004d22:	4b19      	ldr	r3, [pc, #100]	; (8004d88 <HAL_RCC_OscConfig+0x520>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	4a18      	ldr	r2, [pc, #96]	; (8004d88 <HAL_RCC_OscConfig+0x520>)
 8004d28:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004d2c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004d2e:	f7fc fb0b 	bl	8001348 <HAL_GetTick>
 8004d32:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004d34:	e008      	b.n	8004d48 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8004d36:	f7fc fb07 	bl	8001348 <HAL_GetTick>
 8004d3a:	4602      	mov	r2, r0
 8004d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d3e:	1ad3      	subs	r3, r2, r3
 8004d40:	2b02      	cmp	r3, #2
 8004d42:	d901      	bls.n	8004d48 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8004d44:	2303      	movs	r3, #3
 8004d46:	e198      	b.n	800507a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004d48:	4b0f      	ldr	r3, [pc, #60]	; (8004d88 <HAL_RCC_OscConfig+0x520>)
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d1f0      	bne.n	8004d36 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f003 0304 	and.w	r3, r3, #4
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	f000 8085 	beq.w	8004e6c <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004d62:	4b0a      	ldr	r3, [pc, #40]	; (8004d8c <HAL_RCC_OscConfig+0x524>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	4a09      	ldr	r2, [pc, #36]	; (8004d8c <HAL_RCC_OscConfig+0x524>)
 8004d68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d6c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004d6e:	f7fc faeb 	bl	8001348 <HAL_GetTick>
 8004d72:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004d74:	e00c      	b.n	8004d90 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004d76:	f7fc fae7 	bl	8001348 <HAL_GetTick>
 8004d7a:	4602      	mov	r2, r0
 8004d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d7e:	1ad3      	subs	r3, r2, r3
 8004d80:	2b64      	cmp	r3, #100	; 0x64
 8004d82:	d905      	bls.n	8004d90 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8004d84:	2303      	movs	r3, #3
 8004d86:	e178      	b.n	800507a <HAL_RCC_OscConfig+0x812>
 8004d88:	58024400 	.word	0x58024400
 8004d8c:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004d90:	4b96      	ldr	r3, [pc, #600]	; (8004fec <HAL_RCC_OscConfig+0x784>)
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d0ec      	beq.n	8004d76 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	689b      	ldr	r3, [r3, #8]
 8004da0:	2b01      	cmp	r3, #1
 8004da2:	d106      	bne.n	8004db2 <HAL_RCC_OscConfig+0x54a>
 8004da4:	4b92      	ldr	r3, [pc, #584]	; (8004ff0 <HAL_RCC_OscConfig+0x788>)
 8004da6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004da8:	4a91      	ldr	r2, [pc, #580]	; (8004ff0 <HAL_RCC_OscConfig+0x788>)
 8004daa:	f043 0301 	orr.w	r3, r3, #1
 8004dae:	6713      	str	r3, [r2, #112]	; 0x70
 8004db0:	e02d      	b.n	8004e0e <HAL_RCC_OscConfig+0x5a6>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	689b      	ldr	r3, [r3, #8]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d10c      	bne.n	8004dd4 <HAL_RCC_OscConfig+0x56c>
 8004dba:	4b8d      	ldr	r3, [pc, #564]	; (8004ff0 <HAL_RCC_OscConfig+0x788>)
 8004dbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dbe:	4a8c      	ldr	r2, [pc, #560]	; (8004ff0 <HAL_RCC_OscConfig+0x788>)
 8004dc0:	f023 0301 	bic.w	r3, r3, #1
 8004dc4:	6713      	str	r3, [r2, #112]	; 0x70
 8004dc6:	4b8a      	ldr	r3, [pc, #552]	; (8004ff0 <HAL_RCC_OscConfig+0x788>)
 8004dc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dca:	4a89      	ldr	r2, [pc, #548]	; (8004ff0 <HAL_RCC_OscConfig+0x788>)
 8004dcc:	f023 0304 	bic.w	r3, r3, #4
 8004dd0:	6713      	str	r3, [r2, #112]	; 0x70
 8004dd2:	e01c      	b.n	8004e0e <HAL_RCC_OscConfig+0x5a6>
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	689b      	ldr	r3, [r3, #8]
 8004dd8:	2b05      	cmp	r3, #5
 8004dda:	d10c      	bne.n	8004df6 <HAL_RCC_OscConfig+0x58e>
 8004ddc:	4b84      	ldr	r3, [pc, #528]	; (8004ff0 <HAL_RCC_OscConfig+0x788>)
 8004dde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004de0:	4a83      	ldr	r2, [pc, #524]	; (8004ff0 <HAL_RCC_OscConfig+0x788>)
 8004de2:	f043 0304 	orr.w	r3, r3, #4
 8004de6:	6713      	str	r3, [r2, #112]	; 0x70
 8004de8:	4b81      	ldr	r3, [pc, #516]	; (8004ff0 <HAL_RCC_OscConfig+0x788>)
 8004dea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dec:	4a80      	ldr	r2, [pc, #512]	; (8004ff0 <HAL_RCC_OscConfig+0x788>)
 8004dee:	f043 0301 	orr.w	r3, r3, #1
 8004df2:	6713      	str	r3, [r2, #112]	; 0x70
 8004df4:	e00b      	b.n	8004e0e <HAL_RCC_OscConfig+0x5a6>
 8004df6:	4b7e      	ldr	r3, [pc, #504]	; (8004ff0 <HAL_RCC_OscConfig+0x788>)
 8004df8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dfa:	4a7d      	ldr	r2, [pc, #500]	; (8004ff0 <HAL_RCC_OscConfig+0x788>)
 8004dfc:	f023 0301 	bic.w	r3, r3, #1
 8004e00:	6713      	str	r3, [r2, #112]	; 0x70
 8004e02:	4b7b      	ldr	r3, [pc, #492]	; (8004ff0 <HAL_RCC_OscConfig+0x788>)
 8004e04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e06:	4a7a      	ldr	r2, [pc, #488]	; (8004ff0 <HAL_RCC_OscConfig+0x788>)
 8004e08:	f023 0304 	bic.w	r3, r3, #4
 8004e0c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	689b      	ldr	r3, [r3, #8]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d015      	beq.n	8004e42 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e16:	f7fc fa97 	bl	8001348 <HAL_GetTick>
 8004e1a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004e1c:	e00a      	b.n	8004e34 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e1e:	f7fc fa93 	bl	8001348 <HAL_GetTick>
 8004e22:	4602      	mov	r2, r0
 8004e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e26:	1ad3      	subs	r3, r2, r3
 8004e28:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d901      	bls.n	8004e34 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8004e30:	2303      	movs	r3, #3
 8004e32:	e122      	b.n	800507a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004e34:	4b6e      	ldr	r3, [pc, #440]	; (8004ff0 <HAL_RCC_OscConfig+0x788>)
 8004e36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e38:	f003 0302 	and.w	r3, r3, #2
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d0ee      	beq.n	8004e1e <HAL_RCC_OscConfig+0x5b6>
 8004e40:	e014      	b.n	8004e6c <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e42:	f7fc fa81 	bl	8001348 <HAL_GetTick>
 8004e46:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004e48:	e00a      	b.n	8004e60 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e4a:	f7fc fa7d 	bl	8001348 <HAL_GetTick>
 8004e4e:	4602      	mov	r2, r0
 8004e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e52:	1ad3      	subs	r3, r2, r3
 8004e54:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d901      	bls.n	8004e60 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8004e5c:	2303      	movs	r3, #3
 8004e5e:	e10c      	b.n	800507a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004e60:	4b63      	ldr	r3, [pc, #396]	; (8004ff0 <HAL_RCC_OscConfig+0x788>)
 8004e62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e64:	f003 0302 	and.w	r3, r3, #2
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d1ee      	bne.n	8004e4a <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	f000 8101 	beq.w	8005078 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004e76:	4b5e      	ldr	r3, [pc, #376]	; (8004ff0 <HAL_RCC_OscConfig+0x788>)
 8004e78:	691b      	ldr	r3, [r3, #16]
 8004e7a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004e7e:	2b18      	cmp	r3, #24
 8004e80:	f000 80bc 	beq.w	8004ffc <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e88:	2b02      	cmp	r3, #2
 8004e8a:	f040 8095 	bne.w	8004fb8 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e8e:	4b58      	ldr	r3, [pc, #352]	; (8004ff0 <HAL_RCC_OscConfig+0x788>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	4a57      	ldr	r2, [pc, #348]	; (8004ff0 <HAL_RCC_OscConfig+0x788>)
 8004e94:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004e98:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e9a:	f7fc fa55 	bl	8001348 <HAL_GetTick>
 8004e9e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004ea0:	e008      	b.n	8004eb4 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ea2:	f7fc fa51 	bl	8001348 <HAL_GetTick>
 8004ea6:	4602      	mov	r2, r0
 8004ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eaa:	1ad3      	subs	r3, r2, r3
 8004eac:	2b02      	cmp	r3, #2
 8004eae:	d901      	bls.n	8004eb4 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8004eb0:	2303      	movs	r3, #3
 8004eb2:	e0e2      	b.n	800507a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004eb4:	4b4e      	ldr	r3, [pc, #312]	; (8004ff0 <HAL_RCC_OscConfig+0x788>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d1f0      	bne.n	8004ea2 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004ec0:	4b4b      	ldr	r3, [pc, #300]	; (8004ff0 <HAL_RCC_OscConfig+0x788>)
 8004ec2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004ec4:	4b4b      	ldr	r3, [pc, #300]	; (8004ff4 <HAL_RCC_OscConfig+0x78c>)
 8004ec6:	4013      	ands	r3, r2
 8004ec8:	687a      	ldr	r2, [r7, #4]
 8004eca:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8004ecc:	687a      	ldr	r2, [r7, #4]
 8004ece:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004ed0:	0112      	lsls	r2, r2, #4
 8004ed2:	430a      	orrs	r2, r1
 8004ed4:	4946      	ldr	r1, [pc, #280]	; (8004ff0 <HAL_RCC_OscConfig+0x788>)
 8004ed6:	4313      	orrs	r3, r2
 8004ed8:	628b      	str	r3, [r1, #40]	; 0x28
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ede:	3b01      	subs	r3, #1
 8004ee0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ee8:	3b01      	subs	r3, #1
 8004eea:	025b      	lsls	r3, r3, #9
 8004eec:	b29b      	uxth	r3, r3
 8004eee:	431a      	orrs	r2, r3
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ef4:	3b01      	subs	r3, #1
 8004ef6:	041b      	lsls	r3, r3, #16
 8004ef8:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004efc:	431a      	orrs	r2, r3
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f02:	3b01      	subs	r3, #1
 8004f04:	061b      	lsls	r3, r3, #24
 8004f06:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004f0a:	4939      	ldr	r1, [pc, #228]	; (8004ff0 <HAL_RCC_OscConfig+0x788>)
 8004f0c:	4313      	orrs	r3, r2
 8004f0e:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8004f10:	4b37      	ldr	r3, [pc, #220]	; (8004ff0 <HAL_RCC_OscConfig+0x788>)
 8004f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f14:	4a36      	ldr	r2, [pc, #216]	; (8004ff0 <HAL_RCC_OscConfig+0x788>)
 8004f16:	f023 0301 	bic.w	r3, r3, #1
 8004f1a:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004f1c:	4b34      	ldr	r3, [pc, #208]	; (8004ff0 <HAL_RCC_OscConfig+0x788>)
 8004f1e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f20:	4b35      	ldr	r3, [pc, #212]	; (8004ff8 <HAL_RCC_OscConfig+0x790>)
 8004f22:	4013      	ands	r3, r2
 8004f24:	687a      	ldr	r2, [r7, #4]
 8004f26:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004f28:	00d2      	lsls	r2, r2, #3
 8004f2a:	4931      	ldr	r1, [pc, #196]	; (8004ff0 <HAL_RCC_OscConfig+0x788>)
 8004f2c:	4313      	orrs	r3, r2
 8004f2e:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004f30:	4b2f      	ldr	r3, [pc, #188]	; (8004ff0 <HAL_RCC_OscConfig+0x788>)
 8004f32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f34:	f023 020c 	bic.w	r2, r3, #12
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f3c:	492c      	ldr	r1, [pc, #176]	; (8004ff0 <HAL_RCC_OscConfig+0x788>)
 8004f3e:	4313      	orrs	r3, r2
 8004f40:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004f42:	4b2b      	ldr	r3, [pc, #172]	; (8004ff0 <HAL_RCC_OscConfig+0x788>)
 8004f44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f46:	f023 0202 	bic.w	r2, r3, #2
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f4e:	4928      	ldr	r1, [pc, #160]	; (8004ff0 <HAL_RCC_OscConfig+0x788>)
 8004f50:	4313      	orrs	r3, r2
 8004f52:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004f54:	4b26      	ldr	r3, [pc, #152]	; (8004ff0 <HAL_RCC_OscConfig+0x788>)
 8004f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f58:	4a25      	ldr	r2, [pc, #148]	; (8004ff0 <HAL_RCC_OscConfig+0x788>)
 8004f5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f5e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f60:	4b23      	ldr	r3, [pc, #140]	; (8004ff0 <HAL_RCC_OscConfig+0x788>)
 8004f62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f64:	4a22      	ldr	r2, [pc, #136]	; (8004ff0 <HAL_RCC_OscConfig+0x788>)
 8004f66:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f6a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004f6c:	4b20      	ldr	r3, [pc, #128]	; (8004ff0 <HAL_RCC_OscConfig+0x788>)
 8004f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f70:	4a1f      	ldr	r2, [pc, #124]	; (8004ff0 <HAL_RCC_OscConfig+0x788>)
 8004f72:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004f76:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8004f78:	4b1d      	ldr	r3, [pc, #116]	; (8004ff0 <HAL_RCC_OscConfig+0x788>)
 8004f7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f7c:	4a1c      	ldr	r2, [pc, #112]	; (8004ff0 <HAL_RCC_OscConfig+0x788>)
 8004f7e:	f043 0301 	orr.w	r3, r3, #1
 8004f82:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004f84:	4b1a      	ldr	r3, [pc, #104]	; (8004ff0 <HAL_RCC_OscConfig+0x788>)
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	4a19      	ldr	r2, [pc, #100]	; (8004ff0 <HAL_RCC_OscConfig+0x788>)
 8004f8a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004f8e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f90:	f7fc f9da 	bl	8001348 <HAL_GetTick>
 8004f94:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004f96:	e008      	b.n	8004faa <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f98:	f7fc f9d6 	bl	8001348 <HAL_GetTick>
 8004f9c:	4602      	mov	r2, r0
 8004f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fa0:	1ad3      	subs	r3, r2, r3
 8004fa2:	2b02      	cmp	r3, #2
 8004fa4:	d901      	bls.n	8004faa <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8004fa6:	2303      	movs	r3, #3
 8004fa8:	e067      	b.n	800507a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004faa:	4b11      	ldr	r3, [pc, #68]	; (8004ff0 <HAL_RCC_OscConfig+0x788>)
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d0f0      	beq.n	8004f98 <HAL_RCC_OscConfig+0x730>
 8004fb6:	e05f      	b.n	8005078 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004fb8:	4b0d      	ldr	r3, [pc, #52]	; (8004ff0 <HAL_RCC_OscConfig+0x788>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	4a0c      	ldr	r2, [pc, #48]	; (8004ff0 <HAL_RCC_OscConfig+0x788>)
 8004fbe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004fc2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fc4:	f7fc f9c0 	bl	8001348 <HAL_GetTick>
 8004fc8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004fca:	e008      	b.n	8004fde <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004fcc:	f7fc f9bc 	bl	8001348 <HAL_GetTick>
 8004fd0:	4602      	mov	r2, r0
 8004fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fd4:	1ad3      	subs	r3, r2, r3
 8004fd6:	2b02      	cmp	r3, #2
 8004fd8:	d901      	bls.n	8004fde <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8004fda:	2303      	movs	r3, #3
 8004fdc:	e04d      	b.n	800507a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004fde:	4b04      	ldr	r3, [pc, #16]	; (8004ff0 <HAL_RCC_OscConfig+0x788>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d1f0      	bne.n	8004fcc <HAL_RCC_OscConfig+0x764>
 8004fea:	e045      	b.n	8005078 <HAL_RCC_OscConfig+0x810>
 8004fec:	58024800 	.word	0x58024800
 8004ff0:	58024400 	.word	0x58024400
 8004ff4:	fffffc0c 	.word	0xfffffc0c
 8004ff8:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004ffc:	4b21      	ldr	r3, [pc, #132]	; (8005084 <HAL_RCC_OscConfig+0x81c>)
 8004ffe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005000:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005002:	4b20      	ldr	r3, [pc, #128]	; (8005084 <HAL_RCC_OscConfig+0x81c>)
 8005004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005006:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800500c:	2b01      	cmp	r3, #1
 800500e:	d031      	beq.n	8005074 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005010:	693b      	ldr	r3, [r7, #16]
 8005012:	f003 0203 	and.w	r2, r3, #3
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800501a:	429a      	cmp	r2, r3
 800501c:	d12a      	bne.n	8005074 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800501e:	693b      	ldr	r3, [r7, #16]
 8005020:	091b      	lsrs	r3, r3, #4
 8005022:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800502a:	429a      	cmp	r2, r3
 800502c:	d122      	bne.n	8005074 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005038:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800503a:	429a      	cmp	r2, r3
 800503c:	d11a      	bne.n	8005074 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	0a5b      	lsrs	r3, r3, #9
 8005042:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800504a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800504c:	429a      	cmp	r2, r3
 800504e:	d111      	bne.n	8005074 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	0c1b      	lsrs	r3, r3, #16
 8005054:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800505c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800505e:	429a      	cmp	r2, r3
 8005060:	d108      	bne.n	8005074 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	0e1b      	lsrs	r3, r3, #24
 8005066:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800506e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005070:	429a      	cmp	r2, r3
 8005072:	d001      	beq.n	8005078 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8005074:	2301      	movs	r3, #1
 8005076:	e000      	b.n	800507a <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8005078:	2300      	movs	r3, #0
}
 800507a:	4618      	mov	r0, r3
 800507c:	3730      	adds	r7, #48	; 0x30
 800507e:	46bd      	mov	sp, r7
 8005080:	bd80      	pop	{r7, pc}
 8005082:	bf00      	nop
 8005084:	58024400 	.word	0x58024400

08005088 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005088:	b580      	push	{r7, lr}
 800508a:	b086      	sub	sp, #24
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
 8005090:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2b00      	cmp	r3, #0
 8005096:	d101      	bne.n	800509c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005098:	2301      	movs	r3, #1
 800509a:	e19c      	b.n	80053d6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800509c:	4b8a      	ldr	r3, [pc, #552]	; (80052c8 <HAL_RCC_ClockConfig+0x240>)
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f003 030f 	and.w	r3, r3, #15
 80050a4:	683a      	ldr	r2, [r7, #0]
 80050a6:	429a      	cmp	r2, r3
 80050a8:	d910      	bls.n	80050cc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050aa:	4b87      	ldr	r3, [pc, #540]	; (80052c8 <HAL_RCC_ClockConfig+0x240>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f023 020f 	bic.w	r2, r3, #15
 80050b2:	4985      	ldr	r1, [pc, #532]	; (80052c8 <HAL_RCC_ClockConfig+0x240>)
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	4313      	orrs	r3, r2
 80050b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80050ba:	4b83      	ldr	r3, [pc, #524]	; (80052c8 <HAL_RCC_ClockConfig+0x240>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f003 030f 	and.w	r3, r3, #15
 80050c2:	683a      	ldr	r2, [r7, #0]
 80050c4:	429a      	cmp	r2, r3
 80050c6:	d001      	beq.n	80050cc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80050c8:	2301      	movs	r3, #1
 80050ca:	e184      	b.n	80053d6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f003 0304 	and.w	r3, r3, #4
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d010      	beq.n	80050fa <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	691a      	ldr	r2, [r3, #16]
 80050dc:	4b7b      	ldr	r3, [pc, #492]	; (80052cc <HAL_RCC_ClockConfig+0x244>)
 80050de:	699b      	ldr	r3, [r3, #24]
 80050e0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80050e4:	429a      	cmp	r2, r3
 80050e6:	d908      	bls.n	80050fa <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80050e8:	4b78      	ldr	r3, [pc, #480]	; (80052cc <HAL_RCC_ClockConfig+0x244>)
 80050ea:	699b      	ldr	r3, [r3, #24]
 80050ec:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	691b      	ldr	r3, [r3, #16]
 80050f4:	4975      	ldr	r1, [pc, #468]	; (80052cc <HAL_RCC_ClockConfig+0x244>)
 80050f6:	4313      	orrs	r3, r2
 80050f8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f003 0308 	and.w	r3, r3, #8
 8005102:	2b00      	cmp	r3, #0
 8005104:	d010      	beq.n	8005128 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	695a      	ldr	r2, [r3, #20]
 800510a:	4b70      	ldr	r3, [pc, #448]	; (80052cc <HAL_RCC_ClockConfig+0x244>)
 800510c:	69db      	ldr	r3, [r3, #28]
 800510e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005112:	429a      	cmp	r2, r3
 8005114:	d908      	bls.n	8005128 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005116:	4b6d      	ldr	r3, [pc, #436]	; (80052cc <HAL_RCC_ClockConfig+0x244>)
 8005118:	69db      	ldr	r3, [r3, #28]
 800511a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	695b      	ldr	r3, [r3, #20]
 8005122:	496a      	ldr	r1, [pc, #424]	; (80052cc <HAL_RCC_ClockConfig+0x244>)
 8005124:	4313      	orrs	r3, r2
 8005126:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f003 0310 	and.w	r3, r3, #16
 8005130:	2b00      	cmp	r3, #0
 8005132:	d010      	beq.n	8005156 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	699a      	ldr	r2, [r3, #24]
 8005138:	4b64      	ldr	r3, [pc, #400]	; (80052cc <HAL_RCC_ClockConfig+0x244>)
 800513a:	69db      	ldr	r3, [r3, #28]
 800513c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005140:	429a      	cmp	r2, r3
 8005142:	d908      	bls.n	8005156 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005144:	4b61      	ldr	r3, [pc, #388]	; (80052cc <HAL_RCC_ClockConfig+0x244>)
 8005146:	69db      	ldr	r3, [r3, #28]
 8005148:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	699b      	ldr	r3, [r3, #24]
 8005150:	495e      	ldr	r1, [pc, #376]	; (80052cc <HAL_RCC_ClockConfig+0x244>)
 8005152:	4313      	orrs	r3, r2
 8005154:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f003 0320 	and.w	r3, r3, #32
 800515e:	2b00      	cmp	r3, #0
 8005160:	d010      	beq.n	8005184 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	69da      	ldr	r2, [r3, #28]
 8005166:	4b59      	ldr	r3, [pc, #356]	; (80052cc <HAL_RCC_ClockConfig+0x244>)
 8005168:	6a1b      	ldr	r3, [r3, #32]
 800516a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800516e:	429a      	cmp	r2, r3
 8005170:	d908      	bls.n	8005184 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005172:	4b56      	ldr	r3, [pc, #344]	; (80052cc <HAL_RCC_ClockConfig+0x244>)
 8005174:	6a1b      	ldr	r3, [r3, #32]
 8005176:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	69db      	ldr	r3, [r3, #28]
 800517e:	4953      	ldr	r1, [pc, #332]	; (80052cc <HAL_RCC_ClockConfig+0x244>)
 8005180:	4313      	orrs	r3, r2
 8005182:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f003 0302 	and.w	r3, r3, #2
 800518c:	2b00      	cmp	r3, #0
 800518e:	d010      	beq.n	80051b2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	68da      	ldr	r2, [r3, #12]
 8005194:	4b4d      	ldr	r3, [pc, #308]	; (80052cc <HAL_RCC_ClockConfig+0x244>)
 8005196:	699b      	ldr	r3, [r3, #24]
 8005198:	f003 030f 	and.w	r3, r3, #15
 800519c:	429a      	cmp	r2, r3
 800519e:	d908      	bls.n	80051b2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80051a0:	4b4a      	ldr	r3, [pc, #296]	; (80052cc <HAL_RCC_ClockConfig+0x244>)
 80051a2:	699b      	ldr	r3, [r3, #24]
 80051a4:	f023 020f 	bic.w	r2, r3, #15
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	68db      	ldr	r3, [r3, #12]
 80051ac:	4947      	ldr	r1, [pc, #284]	; (80052cc <HAL_RCC_ClockConfig+0x244>)
 80051ae:	4313      	orrs	r3, r2
 80051b0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f003 0301 	and.w	r3, r3, #1
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d055      	beq.n	800526a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80051be:	4b43      	ldr	r3, [pc, #268]	; (80052cc <HAL_RCC_ClockConfig+0x244>)
 80051c0:	699b      	ldr	r3, [r3, #24]
 80051c2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	689b      	ldr	r3, [r3, #8]
 80051ca:	4940      	ldr	r1, [pc, #256]	; (80052cc <HAL_RCC_ClockConfig+0x244>)
 80051cc:	4313      	orrs	r3, r2
 80051ce:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	685b      	ldr	r3, [r3, #4]
 80051d4:	2b02      	cmp	r3, #2
 80051d6:	d107      	bne.n	80051e8 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80051d8:	4b3c      	ldr	r3, [pc, #240]	; (80052cc <HAL_RCC_ClockConfig+0x244>)
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d121      	bne.n	8005228 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80051e4:	2301      	movs	r3, #1
 80051e6:	e0f6      	b.n	80053d6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	685b      	ldr	r3, [r3, #4]
 80051ec:	2b03      	cmp	r3, #3
 80051ee:	d107      	bne.n	8005200 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80051f0:	4b36      	ldr	r3, [pc, #216]	; (80052cc <HAL_RCC_ClockConfig+0x244>)
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d115      	bne.n	8005228 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80051fc:	2301      	movs	r3, #1
 80051fe:	e0ea      	b.n	80053d6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	685b      	ldr	r3, [r3, #4]
 8005204:	2b01      	cmp	r3, #1
 8005206:	d107      	bne.n	8005218 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005208:	4b30      	ldr	r3, [pc, #192]	; (80052cc <HAL_RCC_ClockConfig+0x244>)
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005210:	2b00      	cmp	r3, #0
 8005212:	d109      	bne.n	8005228 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005214:	2301      	movs	r3, #1
 8005216:	e0de      	b.n	80053d6 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005218:	4b2c      	ldr	r3, [pc, #176]	; (80052cc <HAL_RCC_ClockConfig+0x244>)
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f003 0304 	and.w	r3, r3, #4
 8005220:	2b00      	cmp	r3, #0
 8005222:	d101      	bne.n	8005228 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005224:	2301      	movs	r3, #1
 8005226:	e0d6      	b.n	80053d6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005228:	4b28      	ldr	r3, [pc, #160]	; (80052cc <HAL_RCC_ClockConfig+0x244>)
 800522a:	691b      	ldr	r3, [r3, #16]
 800522c:	f023 0207 	bic.w	r2, r3, #7
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	685b      	ldr	r3, [r3, #4]
 8005234:	4925      	ldr	r1, [pc, #148]	; (80052cc <HAL_RCC_ClockConfig+0x244>)
 8005236:	4313      	orrs	r3, r2
 8005238:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800523a:	f7fc f885 	bl	8001348 <HAL_GetTick>
 800523e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005240:	e00a      	b.n	8005258 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005242:	f7fc f881 	bl	8001348 <HAL_GetTick>
 8005246:	4602      	mov	r2, r0
 8005248:	697b      	ldr	r3, [r7, #20]
 800524a:	1ad3      	subs	r3, r2, r3
 800524c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005250:	4293      	cmp	r3, r2
 8005252:	d901      	bls.n	8005258 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8005254:	2303      	movs	r3, #3
 8005256:	e0be      	b.n	80053d6 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005258:	4b1c      	ldr	r3, [pc, #112]	; (80052cc <HAL_RCC_ClockConfig+0x244>)
 800525a:	691b      	ldr	r3, [r3, #16]
 800525c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	685b      	ldr	r3, [r3, #4]
 8005264:	00db      	lsls	r3, r3, #3
 8005266:	429a      	cmp	r2, r3
 8005268:	d1eb      	bne.n	8005242 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f003 0302 	and.w	r3, r3, #2
 8005272:	2b00      	cmp	r3, #0
 8005274:	d010      	beq.n	8005298 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	68da      	ldr	r2, [r3, #12]
 800527a:	4b14      	ldr	r3, [pc, #80]	; (80052cc <HAL_RCC_ClockConfig+0x244>)
 800527c:	699b      	ldr	r3, [r3, #24]
 800527e:	f003 030f 	and.w	r3, r3, #15
 8005282:	429a      	cmp	r2, r3
 8005284:	d208      	bcs.n	8005298 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005286:	4b11      	ldr	r3, [pc, #68]	; (80052cc <HAL_RCC_ClockConfig+0x244>)
 8005288:	699b      	ldr	r3, [r3, #24]
 800528a:	f023 020f 	bic.w	r2, r3, #15
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	68db      	ldr	r3, [r3, #12]
 8005292:	490e      	ldr	r1, [pc, #56]	; (80052cc <HAL_RCC_ClockConfig+0x244>)
 8005294:	4313      	orrs	r3, r2
 8005296:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005298:	4b0b      	ldr	r3, [pc, #44]	; (80052c8 <HAL_RCC_ClockConfig+0x240>)
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f003 030f 	and.w	r3, r3, #15
 80052a0:	683a      	ldr	r2, [r7, #0]
 80052a2:	429a      	cmp	r2, r3
 80052a4:	d214      	bcs.n	80052d0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052a6:	4b08      	ldr	r3, [pc, #32]	; (80052c8 <HAL_RCC_ClockConfig+0x240>)
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f023 020f 	bic.w	r2, r3, #15
 80052ae:	4906      	ldr	r1, [pc, #24]	; (80052c8 <HAL_RCC_ClockConfig+0x240>)
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	4313      	orrs	r3, r2
 80052b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80052b6:	4b04      	ldr	r3, [pc, #16]	; (80052c8 <HAL_RCC_ClockConfig+0x240>)
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f003 030f 	and.w	r3, r3, #15
 80052be:	683a      	ldr	r2, [r7, #0]
 80052c0:	429a      	cmp	r2, r3
 80052c2:	d005      	beq.n	80052d0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80052c4:	2301      	movs	r3, #1
 80052c6:	e086      	b.n	80053d6 <HAL_RCC_ClockConfig+0x34e>
 80052c8:	52002000 	.word	0x52002000
 80052cc:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f003 0304 	and.w	r3, r3, #4
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d010      	beq.n	80052fe <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	691a      	ldr	r2, [r3, #16]
 80052e0:	4b3f      	ldr	r3, [pc, #252]	; (80053e0 <HAL_RCC_ClockConfig+0x358>)
 80052e2:	699b      	ldr	r3, [r3, #24]
 80052e4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80052e8:	429a      	cmp	r2, r3
 80052ea:	d208      	bcs.n	80052fe <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80052ec:	4b3c      	ldr	r3, [pc, #240]	; (80053e0 <HAL_RCC_ClockConfig+0x358>)
 80052ee:	699b      	ldr	r3, [r3, #24]
 80052f0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	691b      	ldr	r3, [r3, #16]
 80052f8:	4939      	ldr	r1, [pc, #228]	; (80053e0 <HAL_RCC_ClockConfig+0x358>)
 80052fa:	4313      	orrs	r3, r2
 80052fc:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f003 0308 	and.w	r3, r3, #8
 8005306:	2b00      	cmp	r3, #0
 8005308:	d010      	beq.n	800532c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	695a      	ldr	r2, [r3, #20]
 800530e:	4b34      	ldr	r3, [pc, #208]	; (80053e0 <HAL_RCC_ClockConfig+0x358>)
 8005310:	69db      	ldr	r3, [r3, #28]
 8005312:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005316:	429a      	cmp	r2, r3
 8005318:	d208      	bcs.n	800532c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800531a:	4b31      	ldr	r3, [pc, #196]	; (80053e0 <HAL_RCC_ClockConfig+0x358>)
 800531c:	69db      	ldr	r3, [r3, #28]
 800531e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	695b      	ldr	r3, [r3, #20]
 8005326:	492e      	ldr	r1, [pc, #184]	; (80053e0 <HAL_RCC_ClockConfig+0x358>)
 8005328:	4313      	orrs	r3, r2
 800532a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f003 0310 	and.w	r3, r3, #16
 8005334:	2b00      	cmp	r3, #0
 8005336:	d010      	beq.n	800535a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	699a      	ldr	r2, [r3, #24]
 800533c:	4b28      	ldr	r3, [pc, #160]	; (80053e0 <HAL_RCC_ClockConfig+0x358>)
 800533e:	69db      	ldr	r3, [r3, #28]
 8005340:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005344:	429a      	cmp	r2, r3
 8005346:	d208      	bcs.n	800535a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005348:	4b25      	ldr	r3, [pc, #148]	; (80053e0 <HAL_RCC_ClockConfig+0x358>)
 800534a:	69db      	ldr	r3, [r3, #28]
 800534c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	699b      	ldr	r3, [r3, #24]
 8005354:	4922      	ldr	r1, [pc, #136]	; (80053e0 <HAL_RCC_ClockConfig+0x358>)
 8005356:	4313      	orrs	r3, r2
 8005358:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f003 0320 	and.w	r3, r3, #32
 8005362:	2b00      	cmp	r3, #0
 8005364:	d010      	beq.n	8005388 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	69da      	ldr	r2, [r3, #28]
 800536a:	4b1d      	ldr	r3, [pc, #116]	; (80053e0 <HAL_RCC_ClockConfig+0x358>)
 800536c:	6a1b      	ldr	r3, [r3, #32]
 800536e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005372:	429a      	cmp	r2, r3
 8005374:	d208      	bcs.n	8005388 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005376:	4b1a      	ldr	r3, [pc, #104]	; (80053e0 <HAL_RCC_ClockConfig+0x358>)
 8005378:	6a1b      	ldr	r3, [r3, #32]
 800537a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	69db      	ldr	r3, [r3, #28]
 8005382:	4917      	ldr	r1, [pc, #92]	; (80053e0 <HAL_RCC_ClockConfig+0x358>)
 8005384:	4313      	orrs	r3, r2
 8005386:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005388:	f000 f834 	bl	80053f4 <HAL_RCC_GetSysClockFreq>
 800538c:	4602      	mov	r2, r0
 800538e:	4b14      	ldr	r3, [pc, #80]	; (80053e0 <HAL_RCC_ClockConfig+0x358>)
 8005390:	699b      	ldr	r3, [r3, #24]
 8005392:	0a1b      	lsrs	r3, r3, #8
 8005394:	f003 030f 	and.w	r3, r3, #15
 8005398:	4912      	ldr	r1, [pc, #72]	; (80053e4 <HAL_RCC_ClockConfig+0x35c>)
 800539a:	5ccb      	ldrb	r3, [r1, r3]
 800539c:	f003 031f 	and.w	r3, r3, #31
 80053a0:	fa22 f303 	lsr.w	r3, r2, r3
 80053a4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80053a6:	4b0e      	ldr	r3, [pc, #56]	; (80053e0 <HAL_RCC_ClockConfig+0x358>)
 80053a8:	699b      	ldr	r3, [r3, #24]
 80053aa:	f003 030f 	and.w	r3, r3, #15
 80053ae:	4a0d      	ldr	r2, [pc, #52]	; (80053e4 <HAL_RCC_ClockConfig+0x35c>)
 80053b0:	5cd3      	ldrb	r3, [r2, r3]
 80053b2:	f003 031f 	and.w	r3, r3, #31
 80053b6:	693a      	ldr	r2, [r7, #16]
 80053b8:	fa22 f303 	lsr.w	r3, r2, r3
 80053bc:	4a0a      	ldr	r2, [pc, #40]	; (80053e8 <HAL_RCC_ClockConfig+0x360>)
 80053be:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80053c0:	4a0a      	ldr	r2, [pc, #40]	; (80053ec <HAL_RCC_ClockConfig+0x364>)
 80053c2:	693b      	ldr	r3, [r7, #16]
 80053c4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80053c6:	4b0a      	ldr	r3, [pc, #40]	; (80053f0 <HAL_RCC_ClockConfig+0x368>)
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	4618      	mov	r0, r3
 80053cc:	f7fb ff72 	bl	80012b4 <HAL_InitTick>
 80053d0:	4603      	mov	r3, r0
 80053d2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80053d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80053d6:	4618      	mov	r0, r3
 80053d8:	3718      	adds	r7, #24
 80053da:	46bd      	mov	sp, r7
 80053dc:	bd80      	pop	{r7, pc}
 80053de:	bf00      	nop
 80053e0:	58024400 	.word	0x58024400
 80053e4:	0800be58 	.word	0x0800be58
 80053e8:	24000404 	.word	0x24000404
 80053ec:	24000400 	.word	0x24000400
 80053f0:	2400040c 	.word	0x2400040c

080053f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80053f4:	b480      	push	{r7}
 80053f6:	b089      	sub	sp, #36	; 0x24
 80053f8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80053fa:	4bb3      	ldr	r3, [pc, #716]	; (80056c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80053fc:	691b      	ldr	r3, [r3, #16]
 80053fe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005402:	2b18      	cmp	r3, #24
 8005404:	f200 8155 	bhi.w	80056b2 <HAL_RCC_GetSysClockFreq+0x2be>
 8005408:	a201      	add	r2, pc, #4	; (adr r2, 8005410 <HAL_RCC_GetSysClockFreq+0x1c>)
 800540a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800540e:	bf00      	nop
 8005410:	08005475 	.word	0x08005475
 8005414:	080056b3 	.word	0x080056b3
 8005418:	080056b3 	.word	0x080056b3
 800541c:	080056b3 	.word	0x080056b3
 8005420:	080056b3 	.word	0x080056b3
 8005424:	080056b3 	.word	0x080056b3
 8005428:	080056b3 	.word	0x080056b3
 800542c:	080056b3 	.word	0x080056b3
 8005430:	0800549b 	.word	0x0800549b
 8005434:	080056b3 	.word	0x080056b3
 8005438:	080056b3 	.word	0x080056b3
 800543c:	080056b3 	.word	0x080056b3
 8005440:	080056b3 	.word	0x080056b3
 8005444:	080056b3 	.word	0x080056b3
 8005448:	080056b3 	.word	0x080056b3
 800544c:	080056b3 	.word	0x080056b3
 8005450:	080054a1 	.word	0x080054a1
 8005454:	080056b3 	.word	0x080056b3
 8005458:	080056b3 	.word	0x080056b3
 800545c:	080056b3 	.word	0x080056b3
 8005460:	080056b3 	.word	0x080056b3
 8005464:	080056b3 	.word	0x080056b3
 8005468:	080056b3 	.word	0x080056b3
 800546c:	080056b3 	.word	0x080056b3
 8005470:	080054a7 	.word	0x080054a7
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005474:	4b94      	ldr	r3, [pc, #592]	; (80056c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f003 0320 	and.w	r3, r3, #32
 800547c:	2b00      	cmp	r3, #0
 800547e:	d009      	beq.n	8005494 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005480:	4b91      	ldr	r3, [pc, #580]	; (80056c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	08db      	lsrs	r3, r3, #3
 8005486:	f003 0303 	and.w	r3, r3, #3
 800548a:	4a90      	ldr	r2, [pc, #576]	; (80056cc <HAL_RCC_GetSysClockFreq+0x2d8>)
 800548c:	fa22 f303 	lsr.w	r3, r2, r3
 8005490:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8005492:	e111      	b.n	80056b8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005494:	4b8d      	ldr	r3, [pc, #564]	; (80056cc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005496:	61bb      	str	r3, [r7, #24]
    break;
 8005498:	e10e      	b.n	80056b8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800549a:	4b8d      	ldr	r3, [pc, #564]	; (80056d0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800549c:	61bb      	str	r3, [r7, #24]
    break;
 800549e:	e10b      	b.n	80056b8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80054a0:	4b8c      	ldr	r3, [pc, #560]	; (80056d4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80054a2:	61bb      	str	r3, [r7, #24]
    break;
 80054a4:	e108      	b.n	80056b8 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80054a6:	4b88      	ldr	r3, [pc, #544]	; (80056c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80054a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054aa:	f003 0303 	and.w	r3, r3, #3
 80054ae:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80054b0:	4b85      	ldr	r3, [pc, #532]	; (80056c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80054b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054b4:	091b      	lsrs	r3, r3, #4
 80054b6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80054ba:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80054bc:	4b82      	ldr	r3, [pc, #520]	; (80056c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80054be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054c0:	f003 0301 	and.w	r3, r3, #1
 80054c4:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80054c6:	4b80      	ldr	r3, [pc, #512]	; (80056c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80054c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054ca:	08db      	lsrs	r3, r3, #3
 80054cc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80054d0:	68fa      	ldr	r2, [r7, #12]
 80054d2:	fb02 f303 	mul.w	r3, r2, r3
 80054d6:	ee07 3a90 	vmov	s15, r3
 80054da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054de:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80054e2:	693b      	ldr	r3, [r7, #16]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	f000 80e1 	beq.w	80056ac <HAL_RCC_GetSysClockFreq+0x2b8>
 80054ea:	697b      	ldr	r3, [r7, #20]
 80054ec:	2b02      	cmp	r3, #2
 80054ee:	f000 8083 	beq.w	80055f8 <HAL_RCC_GetSysClockFreq+0x204>
 80054f2:	697b      	ldr	r3, [r7, #20]
 80054f4:	2b02      	cmp	r3, #2
 80054f6:	f200 80a1 	bhi.w	800563c <HAL_RCC_GetSysClockFreq+0x248>
 80054fa:	697b      	ldr	r3, [r7, #20]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d003      	beq.n	8005508 <HAL_RCC_GetSysClockFreq+0x114>
 8005500:	697b      	ldr	r3, [r7, #20]
 8005502:	2b01      	cmp	r3, #1
 8005504:	d056      	beq.n	80055b4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8005506:	e099      	b.n	800563c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005508:	4b6f      	ldr	r3, [pc, #444]	; (80056c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f003 0320 	and.w	r3, r3, #32
 8005510:	2b00      	cmp	r3, #0
 8005512:	d02d      	beq.n	8005570 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005514:	4b6c      	ldr	r3, [pc, #432]	; (80056c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	08db      	lsrs	r3, r3, #3
 800551a:	f003 0303 	and.w	r3, r3, #3
 800551e:	4a6b      	ldr	r2, [pc, #428]	; (80056cc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005520:	fa22 f303 	lsr.w	r3, r2, r3
 8005524:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	ee07 3a90 	vmov	s15, r3
 800552c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005530:	693b      	ldr	r3, [r7, #16]
 8005532:	ee07 3a90 	vmov	s15, r3
 8005536:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800553a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800553e:	4b62      	ldr	r3, [pc, #392]	; (80056c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005542:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005546:	ee07 3a90 	vmov	s15, r3
 800554a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800554e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005552:	eddf 5a61 	vldr	s11, [pc, #388]	; 80056d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005556:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800555a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800555e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005562:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005566:	ee67 7a27 	vmul.f32	s15, s14, s15
 800556a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800556e:	e087      	b.n	8005680 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005570:	693b      	ldr	r3, [r7, #16]
 8005572:	ee07 3a90 	vmov	s15, r3
 8005576:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800557a:	eddf 6a58 	vldr	s13, [pc, #352]	; 80056dc <HAL_RCC_GetSysClockFreq+0x2e8>
 800557e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005582:	4b51      	ldr	r3, [pc, #324]	; (80056c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005586:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800558a:	ee07 3a90 	vmov	s15, r3
 800558e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005592:	ed97 6a02 	vldr	s12, [r7, #8]
 8005596:	eddf 5a50 	vldr	s11, [pc, #320]	; 80056d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800559a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800559e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80055a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80055a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80055aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80055b2:	e065      	b.n	8005680 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80055b4:	693b      	ldr	r3, [r7, #16]
 80055b6:	ee07 3a90 	vmov	s15, r3
 80055ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055be:	eddf 6a48 	vldr	s13, [pc, #288]	; 80056e0 <HAL_RCC_GetSysClockFreq+0x2ec>
 80055c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80055c6:	4b40      	ldr	r3, [pc, #256]	; (80056c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80055c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055ce:	ee07 3a90 	vmov	s15, r3
 80055d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80055d6:	ed97 6a02 	vldr	s12, [r7, #8]
 80055da:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80056d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80055de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80055e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80055e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80055ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80055ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80055f6:	e043      	b.n	8005680 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80055f8:	693b      	ldr	r3, [r7, #16]
 80055fa:	ee07 3a90 	vmov	s15, r3
 80055fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005602:	eddf 6a38 	vldr	s13, [pc, #224]	; 80056e4 <HAL_RCC_GetSysClockFreq+0x2f0>
 8005606:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800560a:	4b2f      	ldr	r3, [pc, #188]	; (80056c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800560c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800560e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005612:	ee07 3a90 	vmov	s15, r3
 8005616:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800561a:	ed97 6a02 	vldr	s12, [r7, #8]
 800561e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80056d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005622:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005626:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800562a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800562e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005632:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005636:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800563a:	e021      	b.n	8005680 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800563c:	693b      	ldr	r3, [r7, #16]
 800563e:	ee07 3a90 	vmov	s15, r3
 8005642:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005646:	eddf 6a26 	vldr	s13, [pc, #152]	; 80056e0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800564a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800564e:	4b1e      	ldr	r3, [pc, #120]	; (80056c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005652:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005656:	ee07 3a90 	vmov	s15, r3
 800565a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800565e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005662:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80056d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005666:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800566a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800566e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005672:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005676:	ee67 7a27 	vmul.f32	s15, s14, s15
 800567a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800567e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8005680:	4b11      	ldr	r3, [pc, #68]	; (80056c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005682:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005684:	0a5b      	lsrs	r3, r3, #9
 8005686:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800568a:	3301      	adds	r3, #1
 800568c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	ee07 3a90 	vmov	s15, r3
 8005694:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005698:	edd7 6a07 	vldr	s13, [r7, #28]
 800569c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80056a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80056a4:	ee17 3a90 	vmov	r3, s15
 80056a8:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80056aa:	e005      	b.n	80056b8 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80056ac:	2300      	movs	r3, #0
 80056ae:	61bb      	str	r3, [r7, #24]
    break;
 80056b0:	e002      	b.n	80056b8 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80056b2:	4b07      	ldr	r3, [pc, #28]	; (80056d0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80056b4:	61bb      	str	r3, [r7, #24]
    break;
 80056b6:	bf00      	nop
  }

  return sysclockfreq;
 80056b8:	69bb      	ldr	r3, [r7, #24]
}
 80056ba:	4618      	mov	r0, r3
 80056bc:	3724      	adds	r7, #36	; 0x24
 80056be:	46bd      	mov	sp, r7
 80056c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c4:	4770      	bx	lr
 80056c6:	bf00      	nop
 80056c8:	58024400 	.word	0x58024400
 80056cc:	03d09000 	.word	0x03d09000
 80056d0:	003d0900 	.word	0x003d0900
 80056d4:	007a1200 	.word	0x007a1200
 80056d8:	46000000 	.word	0x46000000
 80056dc:	4c742400 	.word	0x4c742400
 80056e0:	4a742400 	.word	0x4a742400
 80056e4:	4af42400 	.word	0x4af42400

080056e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b082      	sub	sp, #8
 80056ec:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80056ee:	f7ff fe81 	bl	80053f4 <HAL_RCC_GetSysClockFreq>
 80056f2:	4602      	mov	r2, r0
 80056f4:	4b10      	ldr	r3, [pc, #64]	; (8005738 <HAL_RCC_GetHCLKFreq+0x50>)
 80056f6:	699b      	ldr	r3, [r3, #24]
 80056f8:	0a1b      	lsrs	r3, r3, #8
 80056fa:	f003 030f 	and.w	r3, r3, #15
 80056fe:	490f      	ldr	r1, [pc, #60]	; (800573c <HAL_RCC_GetHCLKFreq+0x54>)
 8005700:	5ccb      	ldrb	r3, [r1, r3]
 8005702:	f003 031f 	and.w	r3, r3, #31
 8005706:	fa22 f303 	lsr.w	r3, r2, r3
 800570a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800570c:	4b0a      	ldr	r3, [pc, #40]	; (8005738 <HAL_RCC_GetHCLKFreq+0x50>)
 800570e:	699b      	ldr	r3, [r3, #24]
 8005710:	f003 030f 	and.w	r3, r3, #15
 8005714:	4a09      	ldr	r2, [pc, #36]	; (800573c <HAL_RCC_GetHCLKFreq+0x54>)
 8005716:	5cd3      	ldrb	r3, [r2, r3]
 8005718:	f003 031f 	and.w	r3, r3, #31
 800571c:	687a      	ldr	r2, [r7, #4]
 800571e:	fa22 f303 	lsr.w	r3, r2, r3
 8005722:	4a07      	ldr	r2, [pc, #28]	; (8005740 <HAL_RCC_GetHCLKFreq+0x58>)
 8005724:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005726:	4a07      	ldr	r2, [pc, #28]	; (8005744 <HAL_RCC_GetHCLKFreq+0x5c>)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800572c:	4b04      	ldr	r3, [pc, #16]	; (8005740 <HAL_RCC_GetHCLKFreq+0x58>)
 800572e:	681b      	ldr	r3, [r3, #0]
}
 8005730:	4618      	mov	r0, r3
 8005732:	3708      	adds	r7, #8
 8005734:	46bd      	mov	sp, r7
 8005736:	bd80      	pop	{r7, pc}
 8005738:	58024400 	.word	0x58024400
 800573c:	0800be58 	.word	0x0800be58
 8005740:	24000404 	.word	0x24000404
 8005744:	24000400 	.word	0x24000400

08005748 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005748:	b580      	push	{r7, lr}
 800574a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800574c:	f7ff ffcc 	bl	80056e8 <HAL_RCC_GetHCLKFreq>
 8005750:	4602      	mov	r2, r0
 8005752:	4b06      	ldr	r3, [pc, #24]	; (800576c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005754:	69db      	ldr	r3, [r3, #28]
 8005756:	091b      	lsrs	r3, r3, #4
 8005758:	f003 0307 	and.w	r3, r3, #7
 800575c:	4904      	ldr	r1, [pc, #16]	; (8005770 <HAL_RCC_GetPCLK1Freq+0x28>)
 800575e:	5ccb      	ldrb	r3, [r1, r3]
 8005760:	f003 031f 	and.w	r3, r3, #31
 8005764:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005768:	4618      	mov	r0, r3
 800576a:	bd80      	pop	{r7, pc}
 800576c:	58024400 	.word	0x58024400
 8005770:	0800be58 	.word	0x0800be58

08005774 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005774:	b580      	push	{r7, lr}
 8005776:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005778:	f7ff ffb6 	bl	80056e8 <HAL_RCC_GetHCLKFreq>
 800577c:	4602      	mov	r2, r0
 800577e:	4b06      	ldr	r3, [pc, #24]	; (8005798 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005780:	69db      	ldr	r3, [r3, #28]
 8005782:	0a1b      	lsrs	r3, r3, #8
 8005784:	f003 0307 	and.w	r3, r3, #7
 8005788:	4904      	ldr	r1, [pc, #16]	; (800579c <HAL_RCC_GetPCLK2Freq+0x28>)
 800578a:	5ccb      	ldrb	r3, [r1, r3]
 800578c:	f003 031f 	and.w	r3, r3, #31
 8005790:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8005794:	4618      	mov	r0, r3
 8005796:	bd80      	pop	{r7, pc}
 8005798:	58024400 	.word	0x58024400
 800579c:	0800be58 	.word	0x0800be58

080057a0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b086      	sub	sp, #24
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80057a8:	2300      	movs	r3, #0
 80057aa:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80057ac:	2300      	movs	r3, #0
 80057ae:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d03f      	beq.n	800583c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80057c0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80057c4:	d02a      	beq.n	800581c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80057c6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80057ca:	d824      	bhi.n	8005816 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80057cc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80057d0:	d018      	beq.n	8005804 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80057d2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80057d6:	d81e      	bhi.n	8005816 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d003      	beq.n	80057e4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80057dc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80057e0:	d007      	beq.n	80057f2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80057e2:	e018      	b.n	8005816 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80057e4:	4bab      	ldr	r3, [pc, #684]	; (8005a94 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80057e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057e8:	4aaa      	ldr	r2, [pc, #680]	; (8005a94 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80057ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80057ee:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80057f0:	e015      	b.n	800581e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	3304      	adds	r3, #4
 80057f6:	2102      	movs	r1, #2
 80057f8:	4618      	mov	r0, r3
 80057fa:	f001 fff3 	bl	80077e4 <RCCEx_PLL2_Config>
 80057fe:	4603      	mov	r3, r0
 8005800:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005802:	e00c      	b.n	800581e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	3324      	adds	r3, #36	; 0x24
 8005808:	2102      	movs	r1, #2
 800580a:	4618      	mov	r0, r3
 800580c:	f002 f89c 	bl	8007948 <RCCEx_PLL3_Config>
 8005810:	4603      	mov	r3, r0
 8005812:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005814:	e003      	b.n	800581e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005816:	2301      	movs	r3, #1
 8005818:	75fb      	strb	r3, [r7, #23]
      break;
 800581a:	e000      	b.n	800581e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800581c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800581e:	7dfb      	ldrb	r3, [r7, #23]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d109      	bne.n	8005838 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005824:	4b9b      	ldr	r3, [pc, #620]	; (8005a94 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005826:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005828:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005830:	4998      	ldr	r1, [pc, #608]	; (8005a94 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005832:	4313      	orrs	r3, r2
 8005834:	650b      	str	r3, [r1, #80]	; 0x50
 8005836:	e001      	b.n	800583c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005838:	7dfb      	ldrb	r3, [r7, #23]
 800583a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005844:	2b00      	cmp	r3, #0
 8005846:	d03d      	beq.n	80058c4 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800584c:	2b04      	cmp	r3, #4
 800584e:	d826      	bhi.n	800589e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8005850:	a201      	add	r2, pc, #4	; (adr r2, 8005858 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8005852:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005856:	bf00      	nop
 8005858:	0800586d 	.word	0x0800586d
 800585c:	0800587b 	.word	0x0800587b
 8005860:	0800588d 	.word	0x0800588d
 8005864:	080058a5 	.word	0x080058a5
 8005868:	080058a5 	.word	0x080058a5
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800586c:	4b89      	ldr	r3, [pc, #548]	; (8005a94 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800586e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005870:	4a88      	ldr	r2, [pc, #544]	; (8005a94 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005872:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005876:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005878:	e015      	b.n	80058a6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	3304      	adds	r3, #4
 800587e:	2100      	movs	r1, #0
 8005880:	4618      	mov	r0, r3
 8005882:	f001 ffaf 	bl	80077e4 <RCCEx_PLL2_Config>
 8005886:	4603      	mov	r3, r0
 8005888:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800588a:	e00c      	b.n	80058a6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	3324      	adds	r3, #36	; 0x24
 8005890:	2100      	movs	r1, #0
 8005892:	4618      	mov	r0, r3
 8005894:	f002 f858 	bl	8007948 <RCCEx_PLL3_Config>
 8005898:	4603      	mov	r3, r0
 800589a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800589c:	e003      	b.n	80058a6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800589e:	2301      	movs	r3, #1
 80058a0:	75fb      	strb	r3, [r7, #23]
      break;
 80058a2:	e000      	b.n	80058a6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80058a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80058a6:	7dfb      	ldrb	r3, [r7, #23]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d109      	bne.n	80058c0 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80058ac:	4b79      	ldr	r3, [pc, #484]	; (8005a94 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80058ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058b0:	f023 0207 	bic.w	r2, r3, #7
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058b8:	4976      	ldr	r1, [pc, #472]	; (8005a94 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80058ba:	4313      	orrs	r3, r2
 80058bc:	650b      	str	r3, [r1, #80]	; 0x50
 80058be:	e001      	b.n	80058c4 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058c0:	7dfb      	ldrb	r3, [r7, #23]
 80058c2:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d042      	beq.n	8005956 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80058d8:	d02b      	beq.n	8005932 <HAL_RCCEx_PeriphCLKConfig+0x192>
 80058da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80058de:	d825      	bhi.n	800592c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80058e0:	2bc0      	cmp	r3, #192	; 0xc0
 80058e2:	d028      	beq.n	8005936 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80058e4:	2bc0      	cmp	r3, #192	; 0xc0
 80058e6:	d821      	bhi.n	800592c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80058e8:	2b80      	cmp	r3, #128	; 0x80
 80058ea:	d016      	beq.n	800591a <HAL_RCCEx_PeriphCLKConfig+0x17a>
 80058ec:	2b80      	cmp	r3, #128	; 0x80
 80058ee:	d81d      	bhi.n	800592c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d002      	beq.n	80058fa <HAL_RCCEx_PeriphCLKConfig+0x15a>
 80058f4:	2b40      	cmp	r3, #64	; 0x40
 80058f6:	d007      	beq.n	8005908 <HAL_RCCEx_PeriphCLKConfig+0x168>
 80058f8:	e018      	b.n	800592c <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80058fa:	4b66      	ldr	r3, [pc, #408]	; (8005a94 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80058fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058fe:	4a65      	ldr	r2, [pc, #404]	; (8005a94 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005900:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005904:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8005906:	e017      	b.n	8005938 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	3304      	adds	r3, #4
 800590c:	2100      	movs	r1, #0
 800590e:	4618      	mov	r0, r3
 8005910:	f001 ff68 	bl	80077e4 <RCCEx_PLL2_Config>
 8005914:	4603      	mov	r3, r0
 8005916:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8005918:	e00e      	b.n	8005938 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	3324      	adds	r3, #36	; 0x24
 800591e:	2100      	movs	r1, #0
 8005920:	4618      	mov	r0, r3
 8005922:	f002 f811 	bl	8007948 <RCCEx_PLL3_Config>
 8005926:	4603      	mov	r3, r0
 8005928:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800592a:	e005      	b.n	8005938 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800592c:	2301      	movs	r3, #1
 800592e:	75fb      	strb	r3, [r7, #23]
      break;
 8005930:	e002      	b.n	8005938 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8005932:	bf00      	nop
 8005934:	e000      	b.n	8005938 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8005936:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005938:	7dfb      	ldrb	r3, [r7, #23]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d109      	bne.n	8005952 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800593e:	4b55      	ldr	r3, [pc, #340]	; (8005a94 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005940:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005942:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800594a:	4952      	ldr	r1, [pc, #328]	; (8005a94 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800594c:	4313      	orrs	r3, r2
 800594e:	650b      	str	r3, [r1, #80]	; 0x50
 8005950:	e001      	b.n	8005956 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005952:	7dfb      	ldrb	r3, [r7, #23]
 8005954:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800595e:	2b00      	cmp	r3, #0
 8005960:	d049      	beq.n	80059f6 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005968:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800596c:	d030      	beq.n	80059d0 <HAL_RCCEx_PeriphCLKConfig+0x230>
 800596e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005972:	d82a      	bhi.n	80059ca <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005974:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005978:	d02c      	beq.n	80059d4 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800597a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800597e:	d824      	bhi.n	80059ca <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005980:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005984:	d018      	beq.n	80059b8 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8005986:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800598a:	d81e      	bhi.n	80059ca <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800598c:	2b00      	cmp	r3, #0
 800598e:	d003      	beq.n	8005998 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8005990:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005994:	d007      	beq.n	80059a6 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8005996:	e018      	b.n	80059ca <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005998:	4b3e      	ldr	r3, [pc, #248]	; (8005a94 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800599a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800599c:	4a3d      	ldr	r2, [pc, #244]	; (8005a94 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800599e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80059a2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80059a4:	e017      	b.n	80059d6 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	3304      	adds	r3, #4
 80059aa:	2100      	movs	r1, #0
 80059ac:	4618      	mov	r0, r3
 80059ae:	f001 ff19 	bl	80077e4 <RCCEx_PLL2_Config>
 80059b2:	4603      	mov	r3, r0
 80059b4:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80059b6:	e00e      	b.n	80059d6 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	3324      	adds	r3, #36	; 0x24
 80059bc:	2100      	movs	r1, #0
 80059be:	4618      	mov	r0, r3
 80059c0:	f001 ffc2 	bl	8007948 <RCCEx_PLL3_Config>
 80059c4:	4603      	mov	r3, r0
 80059c6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80059c8:	e005      	b.n	80059d6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80059ca:	2301      	movs	r3, #1
 80059cc:	75fb      	strb	r3, [r7, #23]
      break;
 80059ce:	e002      	b.n	80059d6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80059d0:	bf00      	nop
 80059d2:	e000      	b.n	80059d6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80059d4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80059d6:	7dfb      	ldrb	r3, [r7, #23]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d10a      	bne.n	80059f2 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80059dc:	4b2d      	ldr	r3, [pc, #180]	; (8005a94 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80059de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059e0:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80059ea:	492a      	ldr	r1, [pc, #168]	; (8005a94 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80059ec:	4313      	orrs	r3, r2
 80059ee:	658b      	str	r3, [r1, #88]	; 0x58
 80059f0:	e001      	b.n	80059f6 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059f2:	7dfb      	ldrb	r3, [r7, #23]
 80059f4:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d04c      	beq.n	8005a9c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005a08:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005a0c:	d030      	beq.n	8005a70 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8005a0e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005a12:	d82a      	bhi.n	8005a6a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8005a14:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005a18:	d02c      	beq.n	8005a74 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8005a1a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005a1e:	d824      	bhi.n	8005a6a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8005a20:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005a24:	d018      	beq.n	8005a58 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8005a26:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005a2a:	d81e      	bhi.n	8005a6a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d003      	beq.n	8005a38 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8005a30:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005a34:	d007      	beq.n	8005a46 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8005a36:	e018      	b.n	8005a6a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a38:	4b16      	ldr	r3, [pc, #88]	; (8005a94 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a3c:	4a15      	ldr	r2, [pc, #84]	; (8005a94 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005a3e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a42:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005a44:	e017      	b.n	8005a76 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	3304      	adds	r3, #4
 8005a4a:	2100      	movs	r1, #0
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	f001 fec9 	bl	80077e4 <RCCEx_PLL2_Config>
 8005a52:	4603      	mov	r3, r0
 8005a54:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8005a56:	e00e      	b.n	8005a76 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	3324      	adds	r3, #36	; 0x24
 8005a5c:	2100      	movs	r1, #0
 8005a5e:	4618      	mov	r0, r3
 8005a60:	f001 ff72 	bl	8007948 <RCCEx_PLL3_Config>
 8005a64:	4603      	mov	r3, r0
 8005a66:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005a68:	e005      	b.n	8005a76 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8005a6a:	2301      	movs	r3, #1
 8005a6c:	75fb      	strb	r3, [r7, #23]
      break;
 8005a6e:	e002      	b.n	8005a76 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8005a70:	bf00      	nop
 8005a72:	e000      	b.n	8005a76 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8005a74:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005a76:	7dfb      	ldrb	r3, [r7, #23]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d10d      	bne.n	8005a98 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005a7c:	4b05      	ldr	r3, [pc, #20]	; (8005a94 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005a7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a80:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005a8a:	4902      	ldr	r1, [pc, #8]	; (8005a94 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005a8c:	4313      	orrs	r3, r2
 8005a8e:	658b      	str	r3, [r1, #88]	; 0x58
 8005a90:	e004      	b.n	8005a9c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8005a92:	bf00      	nop
 8005a94:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a98:	7dfb      	ldrb	r3, [r7, #23]
 8005a9a:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d032      	beq.n	8005b0e <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005aac:	2b30      	cmp	r3, #48	; 0x30
 8005aae:	d01c      	beq.n	8005aea <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8005ab0:	2b30      	cmp	r3, #48	; 0x30
 8005ab2:	d817      	bhi.n	8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8005ab4:	2b20      	cmp	r3, #32
 8005ab6:	d00c      	beq.n	8005ad2 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8005ab8:	2b20      	cmp	r3, #32
 8005aba:	d813      	bhi.n	8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d016      	beq.n	8005aee <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8005ac0:	2b10      	cmp	r3, #16
 8005ac2:	d10f      	bne.n	8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ac4:	4baf      	ldr	r3, [pc, #700]	; (8005d84 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005ac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ac8:	4aae      	ldr	r2, [pc, #696]	; (8005d84 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005aca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005ace:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8005ad0:	e00e      	b.n	8005af0 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	3304      	adds	r3, #4
 8005ad6:	2102      	movs	r1, #2
 8005ad8:	4618      	mov	r0, r3
 8005ada:	f001 fe83 	bl	80077e4 <RCCEx_PLL2_Config>
 8005ade:	4603      	mov	r3, r0
 8005ae0:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8005ae2:	e005      	b.n	8005af0 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005ae4:	2301      	movs	r3, #1
 8005ae6:	75fb      	strb	r3, [r7, #23]
      break;
 8005ae8:	e002      	b.n	8005af0 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8005aea:	bf00      	nop
 8005aec:	e000      	b.n	8005af0 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8005aee:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005af0:	7dfb      	ldrb	r3, [r7, #23]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d109      	bne.n	8005b0a <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005af6:	4ba3      	ldr	r3, [pc, #652]	; (8005d84 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005af8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005afa:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b02:	49a0      	ldr	r1, [pc, #640]	; (8005d84 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005b04:	4313      	orrs	r3, r2
 8005b06:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005b08:	e001      	b.n	8005b0e <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b0a:	7dfb      	ldrb	r3, [r7, #23]
 8005b0c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d047      	beq.n	8005baa <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b1e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005b22:	d030      	beq.n	8005b86 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8005b24:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005b28:	d82a      	bhi.n	8005b80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8005b2a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005b2e:	d02c      	beq.n	8005b8a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8005b30:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005b34:	d824      	bhi.n	8005b80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8005b36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b3a:	d018      	beq.n	8005b6e <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8005b3c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b40:	d81e      	bhi.n	8005b80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d003      	beq.n	8005b4e <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8005b46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b4a:	d007      	beq.n	8005b5c <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8005b4c:	e018      	b.n	8005b80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b4e:	4b8d      	ldr	r3, [pc, #564]	; (8005d84 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005b50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b52:	4a8c      	ldr	r2, [pc, #560]	; (8005d84 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005b54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005b58:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005b5a:	e017      	b.n	8005b8c <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	3304      	adds	r3, #4
 8005b60:	2100      	movs	r1, #0
 8005b62:	4618      	mov	r0, r3
 8005b64:	f001 fe3e 	bl	80077e4 <RCCEx_PLL2_Config>
 8005b68:	4603      	mov	r3, r0
 8005b6a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005b6c:	e00e      	b.n	8005b8c <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	3324      	adds	r3, #36	; 0x24
 8005b72:	2100      	movs	r1, #0
 8005b74:	4618      	mov	r0, r3
 8005b76:	f001 fee7 	bl	8007948 <RCCEx_PLL3_Config>
 8005b7a:	4603      	mov	r3, r0
 8005b7c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005b7e:	e005      	b.n	8005b8c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005b80:	2301      	movs	r3, #1
 8005b82:	75fb      	strb	r3, [r7, #23]
      break;
 8005b84:	e002      	b.n	8005b8c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8005b86:	bf00      	nop
 8005b88:	e000      	b.n	8005b8c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8005b8a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005b8c:	7dfb      	ldrb	r3, [r7, #23]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d109      	bne.n	8005ba6 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005b92:	4b7c      	ldr	r3, [pc, #496]	; (8005d84 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005b94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b96:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b9e:	4979      	ldr	r1, [pc, #484]	; (8005d84 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005ba0:	4313      	orrs	r3, r2
 8005ba2:	650b      	str	r3, [r1, #80]	; 0x50
 8005ba4:	e001      	b.n	8005baa <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ba6:	7dfb      	ldrb	r3, [r7, #23]
 8005ba8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d049      	beq.n	8005c4a <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005bba:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005bbe:	d02e      	beq.n	8005c1e <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8005bc0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005bc4:	d828      	bhi.n	8005c18 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8005bc6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005bca:	d02a      	beq.n	8005c22 <HAL_RCCEx_PeriphCLKConfig+0x482>
 8005bcc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005bd0:	d822      	bhi.n	8005c18 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8005bd2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005bd6:	d026      	beq.n	8005c26 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8005bd8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005bdc:	d81c      	bhi.n	8005c18 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8005bde:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005be2:	d010      	beq.n	8005c06 <HAL_RCCEx_PeriphCLKConfig+0x466>
 8005be4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005be8:	d816      	bhi.n	8005c18 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d01d      	beq.n	8005c2a <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8005bee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005bf2:	d111      	bne.n	8005c18 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	3304      	adds	r3, #4
 8005bf8:	2101      	movs	r1, #1
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	f001 fdf2 	bl	80077e4 <RCCEx_PLL2_Config>
 8005c00:	4603      	mov	r3, r0
 8005c02:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8005c04:	e012      	b.n	8005c2c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	3324      	adds	r3, #36	; 0x24
 8005c0a:	2101      	movs	r1, #1
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	f001 fe9b 	bl	8007948 <RCCEx_PLL3_Config>
 8005c12:	4603      	mov	r3, r0
 8005c14:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8005c16:	e009      	b.n	8005c2c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005c18:	2301      	movs	r3, #1
 8005c1a:	75fb      	strb	r3, [r7, #23]
      break;
 8005c1c:	e006      	b.n	8005c2c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8005c1e:	bf00      	nop
 8005c20:	e004      	b.n	8005c2c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8005c22:	bf00      	nop
 8005c24:	e002      	b.n	8005c2c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8005c26:	bf00      	nop
 8005c28:	e000      	b.n	8005c2c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8005c2a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005c2c:	7dfb      	ldrb	r3, [r7, #23]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d109      	bne.n	8005c46 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005c32:	4b54      	ldr	r3, [pc, #336]	; (8005d84 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005c34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c36:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c3e:	4951      	ldr	r1, [pc, #324]	; (8005d84 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005c40:	4313      	orrs	r3, r2
 8005c42:	650b      	str	r3, [r1, #80]	; 0x50
 8005c44:	e001      	b.n	8005c4a <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c46:	7dfb      	ldrb	r3, [r7, #23]
 8005c48:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d04b      	beq.n	8005cee <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005c5c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005c60:	d02e      	beq.n	8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8005c62:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005c66:	d828      	bhi.n	8005cba <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8005c68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c6c:	d02a      	beq.n	8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8005c6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c72:	d822      	bhi.n	8005cba <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8005c74:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005c78:	d026      	beq.n	8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8005c7a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005c7e:	d81c      	bhi.n	8005cba <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8005c80:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005c84:	d010      	beq.n	8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8005c86:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005c8a:	d816      	bhi.n	8005cba <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d01d      	beq.n	8005ccc <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8005c90:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005c94:	d111      	bne.n	8005cba <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	3304      	adds	r3, #4
 8005c9a:	2101      	movs	r1, #1
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	f001 fda1 	bl	80077e4 <RCCEx_PLL2_Config>
 8005ca2:	4603      	mov	r3, r0
 8005ca4:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8005ca6:	e012      	b.n	8005cce <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	3324      	adds	r3, #36	; 0x24
 8005cac:	2101      	movs	r1, #1
 8005cae:	4618      	mov	r0, r3
 8005cb0:	f001 fe4a 	bl	8007948 <RCCEx_PLL3_Config>
 8005cb4:	4603      	mov	r3, r0
 8005cb6:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8005cb8:	e009      	b.n	8005cce <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8005cba:	2301      	movs	r3, #1
 8005cbc:	75fb      	strb	r3, [r7, #23]
      break;
 8005cbe:	e006      	b.n	8005cce <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8005cc0:	bf00      	nop
 8005cc2:	e004      	b.n	8005cce <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8005cc4:	bf00      	nop
 8005cc6:	e002      	b.n	8005cce <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8005cc8:	bf00      	nop
 8005cca:	e000      	b.n	8005cce <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8005ccc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005cce:	7dfb      	ldrb	r3, [r7, #23]
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d10a      	bne.n	8005cea <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005cd4:	4b2b      	ldr	r3, [pc, #172]	; (8005d84 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005cd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cd8:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005ce2:	4928      	ldr	r1, [pc, #160]	; (8005d84 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005ce4:	4313      	orrs	r3, r2
 8005ce6:	658b      	str	r3, [r1, #88]	; 0x58
 8005ce8:	e001      	b.n	8005cee <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cea:	7dfb      	ldrb	r3, [r7, #23]
 8005cec:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d02f      	beq.n	8005d5a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005cfe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005d02:	d00e      	beq.n	8005d22 <HAL_RCCEx_PeriphCLKConfig+0x582>
 8005d04:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005d08:	d814      	bhi.n	8005d34 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d015      	beq.n	8005d3a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8005d0e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005d12:	d10f      	bne.n	8005d34 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d14:	4b1b      	ldr	r3, [pc, #108]	; (8005d84 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d18:	4a1a      	ldr	r2, [pc, #104]	; (8005d84 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005d1a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005d1e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8005d20:	e00c      	b.n	8005d3c <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	3304      	adds	r3, #4
 8005d26:	2101      	movs	r1, #1
 8005d28:	4618      	mov	r0, r3
 8005d2a:	f001 fd5b 	bl	80077e4 <RCCEx_PLL2_Config>
 8005d2e:	4603      	mov	r3, r0
 8005d30:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8005d32:	e003      	b.n	8005d3c <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005d34:	2301      	movs	r3, #1
 8005d36:	75fb      	strb	r3, [r7, #23]
      break;
 8005d38:	e000      	b.n	8005d3c <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8005d3a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005d3c:	7dfb      	ldrb	r3, [r7, #23]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d109      	bne.n	8005d56 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005d42:	4b10      	ldr	r3, [pc, #64]	; (8005d84 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005d44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d46:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d4e:	490d      	ldr	r1, [pc, #52]	; (8005d84 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005d50:	4313      	orrs	r3, r2
 8005d52:	650b      	str	r3, [r1, #80]	; 0x50
 8005d54:	e001      	b.n	8005d5a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d56:	7dfb      	ldrb	r3, [r7, #23]
 8005d58:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d033      	beq.n	8005dce <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d6a:	2b03      	cmp	r3, #3
 8005d6c:	d81c      	bhi.n	8005da8 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8005d6e:	a201      	add	r2, pc, #4	; (adr r2, 8005d74 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8005d70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d74:	08005daf 	.word	0x08005daf
 8005d78:	08005d89 	.word	0x08005d89
 8005d7c:	08005d97 	.word	0x08005d97
 8005d80:	08005daf 	.word	0x08005daf
 8005d84:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d88:	4bb8      	ldr	r3, [pc, #736]	; (800606c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d8c:	4ab7      	ldr	r2, [pc, #732]	; (800606c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005d8e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005d92:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8005d94:	e00c      	b.n	8005db0 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	3304      	adds	r3, #4
 8005d9a:	2102      	movs	r1, #2
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	f001 fd21 	bl	80077e4 <RCCEx_PLL2_Config>
 8005da2:	4603      	mov	r3, r0
 8005da4:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8005da6:	e003      	b.n	8005db0 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005da8:	2301      	movs	r3, #1
 8005daa:	75fb      	strb	r3, [r7, #23]
      break;
 8005dac:	e000      	b.n	8005db0 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8005dae:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005db0:	7dfb      	ldrb	r3, [r7, #23]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d109      	bne.n	8005dca <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005db6:	4bad      	ldr	r3, [pc, #692]	; (800606c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005db8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005dba:	f023 0203 	bic.w	r2, r3, #3
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dc2:	49aa      	ldr	r1, [pc, #680]	; (800606c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005dc4:	4313      	orrs	r3, r2
 8005dc6:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005dc8:	e001      	b.n	8005dce <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005dca:	7dfb      	ldrb	r3, [r7, #23]
 8005dcc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	f000 8086 	beq.w	8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005ddc:	4ba4      	ldr	r3, [pc, #656]	; (8006070 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	4aa3      	ldr	r2, [pc, #652]	; (8006070 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8005de2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005de6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005de8:	f7fb faae 	bl	8001348 <HAL_GetTick>
 8005dec:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005dee:	e009      	b.n	8005e04 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005df0:	f7fb faaa 	bl	8001348 <HAL_GetTick>
 8005df4:	4602      	mov	r2, r0
 8005df6:	693b      	ldr	r3, [r7, #16]
 8005df8:	1ad3      	subs	r3, r2, r3
 8005dfa:	2b64      	cmp	r3, #100	; 0x64
 8005dfc:	d902      	bls.n	8005e04 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8005dfe:	2303      	movs	r3, #3
 8005e00:	75fb      	strb	r3, [r7, #23]
        break;
 8005e02:	e005      	b.n	8005e10 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005e04:	4b9a      	ldr	r3, [pc, #616]	; (8006070 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d0ef      	beq.n	8005df0 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8005e10:	7dfb      	ldrb	r3, [r7, #23]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d166      	bne.n	8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005e16:	4b95      	ldr	r3, [pc, #596]	; (800606c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005e18:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005e20:	4053      	eors	r3, r2
 8005e22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d013      	beq.n	8005e52 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005e2a:	4b90      	ldr	r3, [pc, #576]	; (800606c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005e2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e32:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005e34:	4b8d      	ldr	r3, [pc, #564]	; (800606c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005e36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e38:	4a8c      	ldr	r2, [pc, #560]	; (800606c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005e3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e3e:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005e40:	4b8a      	ldr	r3, [pc, #552]	; (800606c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005e42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e44:	4a89      	ldr	r2, [pc, #548]	; (800606c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005e46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e4a:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005e4c:	4a87      	ldr	r2, [pc, #540]	; (800606c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005e58:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e5c:	d115      	bne.n	8005e8a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e5e:	f7fb fa73 	bl	8001348 <HAL_GetTick>
 8005e62:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005e64:	e00b      	b.n	8005e7e <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e66:	f7fb fa6f 	bl	8001348 <HAL_GetTick>
 8005e6a:	4602      	mov	r2, r0
 8005e6c:	693b      	ldr	r3, [r7, #16]
 8005e6e:	1ad3      	subs	r3, r2, r3
 8005e70:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e74:	4293      	cmp	r3, r2
 8005e76:	d902      	bls.n	8005e7e <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8005e78:	2303      	movs	r3, #3
 8005e7a:	75fb      	strb	r3, [r7, #23]
            break;
 8005e7c:	e005      	b.n	8005e8a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005e7e:	4b7b      	ldr	r3, [pc, #492]	; (800606c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005e80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e82:	f003 0302 	and.w	r3, r3, #2
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d0ed      	beq.n	8005e66 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8005e8a:	7dfb      	ldrb	r3, [r7, #23]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d126      	bne.n	8005ede <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005e96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e9a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005e9e:	d10d      	bne.n	8005ebc <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8005ea0:	4b72      	ldr	r3, [pc, #456]	; (800606c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005ea2:	691b      	ldr	r3, [r3, #16]
 8005ea4:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005eae:	0919      	lsrs	r1, r3, #4
 8005eb0:	4b70      	ldr	r3, [pc, #448]	; (8006074 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8005eb2:	400b      	ands	r3, r1
 8005eb4:	496d      	ldr	r1, [pc, #436]	; (800606c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005eb6:	4313      	orrs	r3, r2
 8005eb8:	610b      	str	r3, [r1, #16]
 8005eba:	e005      	b.n	8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8005ebc:	4b6b      	ldr	r3, [pc, #428]	; (800606c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005ebe:	691b      	ldr	r3, [r3, #16]
 8005ec0:	4a6a      	ldr	r2, [pc, #424]	; (800606c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005ec2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005ec6:	6113      	str	r3, [r2, #16]
 8005ec8:	4b68      	ldr	r3, [pc, #416]	; (800606c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005eca:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005ed2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005ed6:	4965      	ldr	r1, [pc, #404]	; (800606c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005ed8:	4313      	orrs	r3, r2
 8005eda:	670b      	str	r3, [r1, #112]	; 0x70
 8005edc:	e004      	b.n	8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005ede:	7dfb      	ldrb	r3, [r7, #23]
 8005ee0:	75bb      	strb	r3, [r7, #22]
 8005ee2:	e001      	b.n	8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ee4:	7dfb      	ldrb	r3, [r7, #23]
 8005ee6:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f003 0301 	and.w	r3, r3, #1
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d07e      	beq.n	8005ff2 <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005ef8:	2b28      	cmp	r3, #40	; 0x28
 8005efa:	d867      	bhi.n	8005fcc <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8005efc:	a201      	add	r2, pc, #4	; (adr r2, 8005f04 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8005efe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f02:	bf00      	nop
 8005f04:	08005fd3 	.word	0x08005fd3
 8005f08:	08005fcd 	.word	0x08005fcd
 8005f0c:	08005fcd 	.word	0x08005fcd
 8005f10:	08005fcd 	.word	0x08005fcd
 8005f14:	08005fcd 	.word	0x08005fcd
 8005f18:	08005fcd 	.word	0x08005fcd
 8005f1c:	08005fcd 	.word	0x08005fcd
 8005f20:	08005fcd 	.word	0x08005fcd
 8005f24:	08005fa9 	.word	0x08005fa9
 8005f28:	08005fcd 	.word	0x08005fcd
 8005f2c:	08005fcd 	.word	0x08005fcd
 8005f30:	08005fcd 	.word	0x08005fcd
 8005f34:	08005fcd 	.word	0x08005fcd
 8005f38:	08005fcd 	.word	0x08005fcd
 8005f3c:	08005fcd 	.word	0x08005fcd
 8005f40:	08005fcd 	.word	0x08005fcd
 8005f44:	08005fbb 	.word	0x08005fbb
 8005f48:	08005fcd 	.word	0x08005fcd
 8005f4c:	08005fcd 	.word	0x08005fcd
 8005f50:	08005fcd 	.word	0x08005fcd
 8005f54:	08005fcd 	.word	0x08005fcd
 8005f58:	08005fcd 	.word	0x08005fcd
 8005f5c:	08005fcd 	.word	0x08005fcd
 8005f60:	08005fcd 	.word	0x08005fcd
 8005f64:	08005fd3 	.word	0x08005fd3
 8005f68:	08005fcd 	.word	0x08005fcd
 8005f6c:	08005fcd 	.word	0x08005fcd
 8005f70:	08005fcd 	.word	0x08005fcd
 8005f74:	08005fcd 	.word	0x08005fcd
 8005f78:	08005fcd 	.word	0x08005fcd
 8005f7c:	08005fcd 	.word	0x08005fcd
 8005f80:	08005fcd 	.word	0x08005fcd
 8005f84:	08005fd3 	.word	0x08005fd3
 8005f88:	08005fcd 	.word	0x08005fcd
 8005f8c:	08005fcd 	.word	0x08005fcd
 8005f90:	08005fcd 	.word	0x08005fcd
 8005f94:	08005fcd 	.word	0x08005fcd
 8005f98:	08005fcd 	.word	0x08005fcd
 8005f9c:	08005fcd 	.word	0x08005fcd
 8005fa0:	08005fcd 	.word	0x08005fcd
 8005fa4:	08005fd3 	.word	0x08005fd3
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	3304      	adds	r3, #4
 8005fac:	2101      	movs	r1, #1
 8005fae:	4618      	mov	r0, r3
 8005fb0:	f001 fc18 	bl	80077e4 <RCCEx_PLL2_Config>
 8005fb4:	4603      	mov	r3, r0
 8005fb6:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8005fb8:	e00c      	b.n	8005fd4 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	3324      	adds	r3, #36	; 0x24
 8005fbe:	2101      	movs	r1, #1
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	f001 fcc1 	bl	8007948 <RCCEx_PLL3_Config>
 8005fc6:	4603      	mov	r3, r0
 8005fc8:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8005fca:	e003      	b.n	8005fd4 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005fcc:	2301      	movs	r3, #1
 8005fce:	75fb      	strb	r3, [r7, #23]
      break;
 8005fd0:	e000      	b.n	8005fd4 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 8005fd2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005fd4:	7dfb      	ldrb	r3, [r7, #23]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d109      	bne.n	8005fee <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005fda:	4b24      	ldr	r3, [pc, #144]	; (800606c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005fdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fde:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005fe6:	4921      	ldr	r1, [pc, #132]	; (800606c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005fe8:	4313      	orrs	r3, r2
 8005fea:	654b      	str	r3, [r1, #84]	; 0x54
 8005fec:	e001      	b.n	8005ff2 <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fee:	7dfb      	ldrb	r3, [r7, #23]
 8005ff0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f003 0302 	and.w	r3, r3, #2
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d03e      	beq.n	800607c <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006002:	2b05      	cmp	r3, #5
 8006004:	d820      	bhi.n	8006048 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 8006006:	a201      	add	r2, pc, #4	; (adr r2, 800600c <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 8006008:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800600c:	0800604f 	.word	0x0800604f
 8006010:	08006025 	.word	0x08006025
 8006014:	08006037 	.word	0x08006037
 8006018:	0800604f 	.word	0x0800604f
 800601c:	0800604f 	.word	0x0800604f
 8006020:	0800604f 	.word	0x0800604f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	3304      	adds	r3, #4
 8006028:	2101      	movs	r1, #1
 800602a:	4618      	mov	r0, r3
 800602c:	f001 fbda 	bl	80077e4 <RCCEx_PLL2_Config>
 8006030:	4603      	mov	r3, r0
 8006032:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006034:	e00c      	b.n	8006050 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	3324      	adds	r3, #36	; 0x24
 800603a:	2101      	movs	r1, #1
 800603c:	4618      	mov	r0, r3
 800603e:	f001 fc83 	bl	8007948 <RCCEx_PLL3_Config>
 8006042:	4603      	mov	r3, r0
 8006044:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006046:	e003      	b.n	8006050 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006048:	2301      	movs	r3, #1
 800604a:	75fb      	strb	r3, [r7, #23]
      break;
 800604c:	e000      	b.n	8006050 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 800604e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006050:	7dfb      	ldrb	r3, [r7, #23]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d110      	bne.n	8006078 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006056:	4b05      	ldr	r3, [pc, #20]	; (800606c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006058:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800605a:	f023 0207 	bic.w	r2, r3, #7
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006062:	4902      	ldr	r1, [pc, #8]	; (800606c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006064:	4313      	orrs	r3, r2
 8006066:	654b      	str	r3, [r1, #84]	; 0x54
 8006068:	e008      	b.n	800607c <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 800606a:	bf00      	nop
 800606c:	58024400 	.word	0x58024400
 8006070:	58024800 	.word	0x58024800
 8006074:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006078:	7dfb      	ldrb	r3, [r7, #23]
 800607a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f003 0304 	and.w	r3, r3, #4
 8006084:	2b00      	cmp	r3, #0
 8006086:	d039      	beq.n	80060fc <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800608e:	2b05      	cmp	r3, #5
 8006090:	d820      	bhi.n	80060d4 <HAL_RCCEx_PeriphCLKConfig+0x934>
 8006092:	a201      	add	r2, pc, #4	; (adr r2, 8006098 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8006094:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006098:	080060db 	.word	0x080060db
 800609c:	080060b1 	.word	0x080060b1
 80060a0:	080060c3 	.word	0x080060c3
 80060a4:	080060db 	.word	0x080060db
 80060a8:	080060db 	.word	0x080060db
 80060ac:	080060db 	.word	0x080060db
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	3304      	adds	r3, #4
 80060b4:	2101      	movs	r1, #1
 80060b6:	4618      	mov	r0, r3
 80060b8:	f001 fb94 	bl	80077e4 <RCCEx_PLL2_Config>
 80060bc:	4603      	mov	r3, r0
 80060be:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80060c0:	e00c      	b.n	80060dc <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	3324      	adds	r3, #36	; 0x24
 80060c6:	2101      	movs	r1, #1
 80060c8:	4618      	mov	r0, r3
 80060ca:	f001 fc3d 	bl	8007948 <RCCEx_PLL3_Config>
 80060ce:	4603      	mov	r3, r0
 80060d0:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80060d2:	e003      	b.n	80060dc <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80060d4:	2301      	movs	r3, #1
 80060d6:	75fb      	strb	r3, [r7, #23]
      break;
 80060d8:	e000      	b.n	80060dc <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 80060da:	bf00      	nop
    }

    if(ret == HAL_OK)
 80060dc:	7dfb      	ldrb	r3, [r7, #23]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d10a      	bne.n	80060f8 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80060e2:	4bb7      	ldr	r3, [pc, #732]	; (80063c0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80060e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060e6:	f023 0207 	bic.w	r2, r3, #7
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060f0:	49b3      	ldr	r1, [pc, #716]	; (80063c0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80060f2:	4313      	orrs	r3, r2
 80060f4:	658b      	str	r3, [r1, #88]	; 0x58
 80060f6:	e001      	b.n	80060fc <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060f8:	7dfb      	ldrb	r3, [r7, #23]
 80060fa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f003 0320 	and.w	r3, r3, #32
 8006104:	2b00      	cmp	r3, #0
 8006106:	d04b      	beq.n	80061a0 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800610e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006112:	d02e      	beq.n	8006172 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8006114:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006118:	d828      	bhi.n	800616c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800611a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800611e:	d02a      	beq.n	8006176 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8006120:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006124:	d822      	bhi.n	800616c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8006126:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800612a:	d026      	beq.n	800617a <HAL_RCCEx_PeriphCLKConfig+0x9da>
 800612c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006130:	d81c      	bhi.n	800616c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8006132:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006136:	d010      	beq.n	800615a <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8006138:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800613c:	d816      	bhi.n	800616c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800613e:	2b00      	cmp	r3, #0
 8006140:	d01d      	beq.n	800617e <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8006142:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006146:	d111      	bne.n	800616c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	3304      	adds	r3, #4
 800614c:	2100      	movs	r1, #0
 800614e:	4618      	mov	r0, r3
 8006150:	f001 fb48 	bl	80077e4 <RCCEx_PLL2_Config>
 8006154:	4603      	mov	r3, r0
 8006156:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006158:	e012      	b.n	8006180 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	3324      	adds	r3, #36	; 0x24
 800615e:	2102      	movs	r1, #2
 8006160:	4618      	mov	r0, r3
 8006162:	f001 fbf1 	bl	8007948 <RCCEx_PLL3_Config>
 8006166:	4603      	mov	r3, r0
 8006168:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800616a:	e009      	b.n	8006180 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800616c:	2301      	movs	r3, #1
 800616e:	75fb      	strb	r3, [r7, #23]
      break;
 8006170:	e006      	b.n	8006180 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8006172:	bf00      	nop
 8006174:	e004      	b.n	8006180 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8006176:	bf00      	nop
 8006178:	e002      	b.n	8006180 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800617a:	bf00      	nop
 800617c:	e000      	b.n	8006180 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800617e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006180:	7dfb      	ldrb	r3, [r7, #23]
 8006182:	2b00      	cmp	r3, #0
 8006184:	d10a      	bne.n	800619c <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006186:	4b8e      	ldr	r3, [pc, #568]	; (80063c0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006188:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800618a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006194:	498a      	ldr	r1, [pc, #552]	; (80063c0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006196:	4313      	orrs	r3, r2
 8006198:	654b      	str	r3, [r1, #84]	; 0x54
 800619a:	e001      	b.n	80061a0 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800619c:	7dfb      	ldrb	r3, [r7, #23]
 800619e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d04b      	beq.n	8006244 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80061b2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80061b6:	d02e      	beq.n	8006216 <HAL_RCCEx_PeriphCLKConfig+0xa76>
 80061b8:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80061bc:	d828      	bhi.n	8006210 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80061be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061c2:	d02a      	beq.n	800621a <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 80061c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061c8:	d822      	bhi.n	8006210 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80061ca:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80061ce:	d026      	beq.n	800621e <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 80061d0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80061d4:	d81c      	bhi.n	8006210 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80061d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80061da:	d010      	beq.n	80061fe <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 80061dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80061e0:	d816      	bhi.n	8006210 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d01d      	beq.n	8006222 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 80061e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80061ea:	d111      	bne.n	8006210 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	3304      	adds	r3, #4
 80061f0:	2100      	movs	r1, #0
 80061f2:	4618      	mov	r0, r3
 80061f4:	f001 faf6 	bl	80077e4 <RCCEx_PLL2_Config>
 80061f8:	4603      	mov	r3, r0
 80061fa:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80061fc:	e012      	b.n	8006224 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	3324      	adds	r3, #36	; 0x24
 8006202:	2102      	movs	r1, #2
 8006204:	4618      	mov	r0, r3
 8006206:	f001 fb9f 	bl	8007948 <RCCEx_PLL3_Config>
 800620a:	4603      	mov	r3, r0
 800620c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800620e:	e009      	b.n	8006224 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006210:	2301      	movs	r3, #1
 8006212:	75fb      	strb	r3, [r7, #23]
      break;
 8006214:	e006      	b.n	8006224 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8006216:	bf00      	nop
 8006218:	e004      	b.n	8006224 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800621a:	bf00      	nop
 800621c:	e002      	b.n	8006224 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800621e:	bf00      	nop
 8006220:	e000      	b.n	8006224 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8006222:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006224:	7dfb      	ldrb	r3, [r7, #23]
 8006226:	2b00      	cmp	r3, #0
 8006228:	d10a      	bne.n	8006240 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800622a:	4b65      	ldr	r3, [pc, #404]	; (80063c0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800622c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800622e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006238:	4961      	ldr	r1, [pc, #388]	; (80063c0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800623a:	4313      	orrs	r3, r2
 800623c:	658b      	str	r3, [r1, #88]	; 0x58
 800623e:	e001      	b.n	8006244 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006240:	7dfb      	ldrb	r3, [r7, #23]
 8006242:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800624c:	2b00      	cmp	r3, #0
 800624e:	d04b      	beq.n	80062e8 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006256:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800625a:	d02e      	beq.n	80062ba <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 800625c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006260:	d828      	bhi.n	80062b4 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8006262:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006266:	d02a      	beq.n	80062be <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8006268:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800626c:	d822      	bhi.n	80062b4 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800626e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006272:	d026      	beq.n	80062c2 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8006274:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006278:	d81c      	bhi.n	80062b4 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800627a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800627e:	d010      	beq.n	80062a2 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8006280:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006284:	d816      	bhi.n	80062b4 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8006286:	2b00      	cmp	r3, #0
 8006288:	d01d      	beq.n	80062c6 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 800628a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800628e:	d111      	bne.n	80062b4 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	3304      	adds	r3, #4
 8006294:	2100      	movs	r1, #0
 8006296:	4618      	mov	r0, r3
 8006298:	f001 faa4 	bl	80077e4 <RCCEx_PLL2_Config>
 800629c:	4603      	mov	r3, r0
 800629e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80062a0:	e012      	b.n	80062c8 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	3324      	adds	r3, #36	; 0x24
 80062a6:	2102      	movs	r1, #2
 80062a8:	4618      	mov	r0, r3
 80062aa:	f001 fb4d 	bl	8007948 <RCCEx_PLL3_Config>
 80062ae:	4603      	mov	r3, r0
 80062b0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80062b2:	e009      	b.n	80062c8 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80062b4:	2301      	movs	r3, #1
 80062b6:	75fb      	strb	r3, [r7, #23]
      break;
 80062b8:	e006      	b.n	80062c8 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80062ba:	bf00      	nop
 80062bc:	e004      	b.n	80062c8 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80062be:	bf00      	nop
 80062c0:	e002      	b.n	80062c8 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80062c2:	bf00      	nop
 80062c4:	e000      	b.n	80062c8 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80062c6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80062c8:	7dfb      	ldrb	r3, [r7, #23]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d10a      	bne.n	80062e4 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80062ce:	4b3c      	ldr	r3, [pc, #240]	; (80063c0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80062d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062d2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80062dc:	4938      	ldr	r1, [pc, #224]	; (80063c0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80062de:	4313      	orrs	r3, r2
 80062e0:	658b      	str	r3, [r1, #88]	; 0x58
 80062e2:	e001      	b.n	80062e8 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062e4:	7dfb      	ldrb	r3, [r7, #23]
 80062e6:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f003 0308 	and.w	r3, r3, #8
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d01a      	beq.n	800632a <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80062fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062fe:	d10a      	bne.n	8006316 <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	3324      	adds	r3, #36	; 0x24
 8006304:	2102      	movs	r1, #2
 8006306:	4618      	mov	r0, r3
 8006308:	f001 fb1e 	bl	8007948 <RCCEx_PLL3_Config>
 800630c:	4603      	mov	r3, r0
 800630e:	2b00      	cmp	r3, #0
 8006310:	d001      	beq.n	8006316 <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8006312:	2301      	movs	r3, #1
 8006314:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006316:	4b2a      	ldr	r3, [pc, #168]	; (80063c0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006318:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800631a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006324:	4926      	ldr	r1, [pc, #152]	; (80063c0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006326:	4313      	orrs	r3, r2
 8006328:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	f003 0310 	and.w	r3, r3, #16
 8006332:	2b00      	cmp	r3, #0
 8006334:	d01a      	beq.n	800636c <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800633c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006340:	d10a      	bne.n	8006358 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	3324      	adds	r3, #36	; 0x24
 8006346:	2102      	movs	r1, #2
 8006348:	4618      	mov	r0, r3
 800634a:	f001 fafd 	bl	8007948 <RCCEx_PLL3_Config>
 800634e:	4603      	mov	r3, r0
 8006350:	2b00      	cmp	r3, #0
 8006352:	d001      	beq.n	8006358 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8006354:	2301      	movs	r3, #1
 8006356:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006358:	4b19      	ldr	r3, [pc, #100]	; (80063c0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800635a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800635c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006366:	4916      	ldr	r1, [pc, #88]	; (80063c0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006368:	4313      	orrs	r3, r2
 800636a:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006374:	2b00      	cmp	r3, #0
 8006376:	d036      	beq.n	80063e6 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800637e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006382:	d01f      	beq.n	80063c4 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8006384:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006388:	d817      	bhi.n	80063ba <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 800638a:	2b00      	cmp	r3, #0
 800638c:	d003      	beq.n	8006396 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 800638e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006392:	d009      	beq.n	80063a8 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8006394:	e011      	b.n	80063ba <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	3304      	adds	r3, #4
 800639a:	2100      	movs	r1, #0
 800639c:	4618      	mov	r0, r3
 800639e:	f001 fa21 	bl	80077e4 <RCCEx_PLL2_Config>
 80063a2:	4603      	mov	r3, r0
 80063a4:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80063a6:	e00e      	b.n	80063c6 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	3324      	adds	r3, #36	; 0x24
 80063ac:	2102      	movs	r1, #2
 80063ae:	4618      	mov	r0, r3
 80063b0:	f001 faca 	bl	8007948 <RCCEx_PLL3_Config>
 80063b4:	4603      	mov	r3, r0
 80063b6:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80063b8:	e005      	b.n	80063c6 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80063ba:	2301      	movs	r3, #1
 80063bc:	75fb      	strb	r3, [r7, #23]
      break;
 80063be:	e002      	b.n	80063c6 <HAL_RCCEx_PeriphCLKConfig+0xc26>
 80063c0:	58024400 	.word	0x58024400
      break;
 80063c4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80063c6:	7dfb      	ldrb	r3, [r7, #23]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d10a      	bne.n	80063e2 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80063cc:	4b93      	ldr	r3, [pc, #588]	; (800661c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80063ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063d0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80063da:	4990      	ldr	r1, [pc, #576]	; (800661c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80063dc:	4313      	orrs	r3, r2
 80063de:	658b      	str	r3, [r1, #88]	; 0x58
 80063e0:	e001      	b.n	80063e6 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063e2:	7dfb      	ldrb	r3, [r7, #23]
 80063e4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d033      	beq.n	800645a <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80063f8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80063fc:	d01c      	beq.n	8006438 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 80063fe:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006402:	d816      	bhi.n	8006432 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8006404:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006408:	d003      	beq.n	8006412 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 800640a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800640e:	d007      	beq.n	8006420 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8006410:	e00f      	b.n	8006432 <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006412:	4b82      	ldr	r3, [pc, #520]	; (800661c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006414:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006416:	4a81      	ldr	r2, [pc, #516]	; (800661c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006418:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800641c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800641e:	e00c      	b.n	800643a <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	3324      	adds	r3, #36	; 0x24
 8006424:	2101      	movs	r1, #1
 8006426:	4618      	mov	r0, r3
 8006428:	f001 fa8e 	bl	8007948 <RCCEx_PLL3_Config>
 800642c:	4603      	mov	r3, r0
 800642e:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8006430:	e003      	b.n	800643a <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006432:	2301      	movs	r3, #1
 8006434:	75fb      	strb	r3, [r7, #23]
      break;
 8006436:	e000      	b.n	800643a <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8006438:	bf00      	nop
    }

    if(ret == HAL_OK)
 800643a:	7dfb      	ldrb	r3, [r7, #23]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d10a      	bne.n	8006456 <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006440:	4b76      	ldr	r3, [pc, #472]	; (800661c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006442:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006444:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800644e:	4973      	ldr	r1, [pc, #460]	; (800661c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006450:	4313      	orrs	r3, r2
 8006452:	654b      	str	r3, [r1, #84]	; 0x54
 8006454:	e001      	b.n	800645a <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006456:	7dfb      	ldrb	r3, [r7, #23]
 8006458:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006462:	2b00      	cmp	r3, #0
 8006464:	d029      	beq.n	80064ba <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800646a:	2b00      	cmp	r3, #0
 800646c:	d003      	beq.n	8006476 <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 800646e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006472:	d007      	beq.n	8006484 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8006474:	e00f      	b.n	8006496 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006476:	4b69      	ldr	r3, [pc, #420]	; (800661c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006478:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800647a:	4a68      	ldr	r2, [pc, #416]	; (800661c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800647c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006480:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006482:	e00b      	b.n	800649c <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	3304      	adds	r3, #4
 8006488:	2102      	movs	r1, #2
 800648a:	4618      	mov	r0, r3
 800648c:	f001 f9aa 	bl	80077e4 <RCCEx_PLL2_Config>
 8006490:	4603      	mov	r3, r0
 8006492:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006494:	e002      	b.n	800649c <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 8006496:	2301      	movs	r3, #1
 8006498:	75fb      	strb	r3, [r7, #23]
      break;
 800649a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800649c:	7dfb      	ldrb	r3, [r7, #23]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d109      	bne.n	80064b6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80064a2:	4b5e      	ldr	r3, [pc, #376]	; (800661c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80064a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80064a6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80064ae:	495b      	ldr	r1, [pc, #364]	; (800661c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80064b0:	4313      	orrs	r3, r2
 80064b2:	64cb      	str	r3, [r1, #76]	; 0x4c
 80064b4:	e001      	b.n	80064ba <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064b6:	7dfb      	ldrb	r3, [r7, #23]
 80064b8:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d00a      	beq.n	80064dc <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	3324      	adds	r3, #36	; 0x24
 80064ca:	2102      	movs	r1, #2
 80064cc:	4618      	mov	r0, r3
 80064ce:	f001 fa3b 	bl	8007948 <RCCEx_PLL3_Config>
 80064d2:	4603      	mov	r3, r0
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d001      	beq.n	80064dc <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 80064d8:	2301      	movs	r3, #1
 80064da:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d030      	beq.n	800654a <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80064ec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80064f0:	d017      	beq.n	8006522 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 80064f2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80064f6:	d811      	bhi.n	800651c <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 80064f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80064fc:	d013      	beq.n	8006526 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 80064fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006502:	d80b      	bhi.n	800651c <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8006504:	2b00      	cmp	r3, #0
 8006506:	d010      	beq.n	800652a <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8006508:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800650c:	d106      	bne.n	800651c <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800650e:	4b43      	ldr	r3, [pc, #268]	; (800661c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006510:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006512:	4a42      	ldr	r2, [pc, #264]	; (800661c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006514:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006518:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800651a:	e007      	b.n	800652c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800651c:	2301      	movs	r3, #1
 800651e:	75fb      	strb	r3, [r7, #23]
      break;
 8006520:	e004      	b.n	800652c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8006522:	bf00      	nop
 8006524:	e002      	b.n	800652c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8006526:	bf00      	nop
 8006528:	e000      	b.n	800652c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800652a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800652c:	7dfb      	ldrb	r3, [r7, #23]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d109      	bne.n	8006546 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006532:	4b3a      	ldr	r3, [pc, #232]	; (800661c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006534:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006536:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800653e:	4937      	ldr	r1, [pc, #220]	; (800661c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006540:	4313      	orrs	r3, r2
 8006542:	654b      	str	r3, [r1, #84]	; 0x54
 8006544:	e001      	b.n	800654a <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006546:	7dfb      	ldrb	r3, [r7, #23]
 8006548:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006552:	2b00      	cmp	r3, #0
 8006554:	d008      	beq.n	8006568 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006556:	4b31      	ldr	r3, [pc, #196]	; (800661c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006558:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800655a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006562:	492e      	ldr	r1, [pc, #184]	; (800661c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006564:	4313      	orrs	r3, r2
 8006566:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006570:	2b00      	cmp	r3, #0
 8006572:	d009      	beq.n	8006588 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8006574:	4b29      	ldr	r3, [pc, #164]	; (800661c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006576:	691b      	ldr	r3, [r3, #16]
 8006578:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006582:	4926      	ldr	r1, [pc, #152]	; (800661c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006584:	4313      	orrs	r3, r2
 8006586:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006590:	2b00      	cmp	r3, #0
 8006592:	d008      	beq.n	80065a6 <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006594:	4b21      	ldr	r3, [pc, #132]	; (800661c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006596:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006598:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80065a0:	491e      	ldr	r1, [pc, #120]	; (800661c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80065a2:	4313      	orrs	r3, r2
 80065a4:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d00d      	beq.n	80065ce <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80065b2:	4b1a      	ldr	r3, [pc, #104]	; (800661c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80065b4:	691b      	ldr	r3, [r3, #16]
 80065b6:	4a19      	ldr	r2, [pc, #100]	; (800661c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80065b8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80065bc:	6113      	str	r3, [r2, #16]
 80065be:	4b17      	ldr	r3, [pc, #92]	; (800661c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80065c0:	691a      	ldr	r2, [r3, #16]
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80065c8:	4914      	ldr	r1, [pc, #80]	; (800661c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80065ca:	4313      	orrs	r3, r2
 80065cc:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	da08      	bge.n	80065e8 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80065d6:	4b11      	ldr	r3, [pc, #68]	; (800661c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80065d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80065da:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065e2:	490e      	ldr	r1, [pc, #56]	; (800661c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80065e4:	4313      	orrs	r3, r2
 80065e6:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d009      	beq.n	8006608 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80065f4:	4b09      	ldr	r3, [pc, #36]	; (800661c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80065f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065f8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006602:	4906      	ldr	r1, [pc, #24]	; (800661c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006604:	4313      	orrs	r3, r2
 8006606:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8006608:	7dbb      	ldrb	r3, [r7, #22]
 800660a:	2b00      	cmp	r3, #0
 800660c:	d101      	bne.n	8006612 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 800660e:	2300      	movs	r3, #0
 8006610:	e000      	b.n	8006614 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 8006612:	2301      	movs	r3, #1
}
 8006614:	4618      	mov	r0, r3
 8006616:	3718      	adds	r7, #24
 8006618:	46bd      	mov	sp, r7
 800661a:	bd80      	pop	{r7, pc}
 800661c:	58024400 	.word	0x58024400

08006620 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006620:	b580      	push	{r7, lr}
 8006622:	b090      	sub	sp, #64	; 0x40
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800662e:	f040 8095 	bne.w	800675c <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8006632:	4bae      	ldr	r3, [pc, #696]	; (80068ec <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8006634:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006636:	f003 0307 	and.w	r3, r3, #7
 800663a:	633b      	str	r3, [r7, #48]	; 0x30
 800663c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800663e:	2b04      	cmp	r3, #4
 8006640:	f200 8088 	bhi.w	8006754 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8006644:	a201      	add	r2, pc, #4	; (adr r2, 800664c <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 8006646:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800664a:	bf00      	nop
 800664c:	08006661 	.word	0x08006661
 8006650:	08006689 	.word	0x08006689
 8006654:	080066b1 	.word	0x080066b1
 8006658:	0800674d 	.word	0x0800674d
 800665c:	080066d9 	.word	0x080066d9

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006660:	4ba2      	ldr	r3, [pc, #648]	; (80068ec <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006668:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800666c:	d108      	bne.n	8006680 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800666e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006672:	4618      	mov	r0, r3
 8006674:	f000 ff64 	bl	8007540 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8006678:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800667a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800667c:	f000 bc95 	b.w	8006faa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8006680:	2300      	movs	r3, #0
 8006682:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006684:	f000 bc91 	b.w	8006faa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006688:	4b98      	ldr	r3, [pc, #608]	; (80068ec <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006690:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006694:	d108      	bne.n	80066a8 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006696:	f107 0318 	add.w	r3, r7, #24
 800669a:	4618      	mov	r0, r3
 800669c:	f000 fca8 	bl	8006ff0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80066a0:	69bb      	ldr	r3, [r7, #24]
 80066a2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80066a4:	f000 bc81 	b.w	8006faa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80066a8:	2300      	movs	r3, #0
 80066aa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80066ac:	f000 bc7d 	b.w	8006faa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80066b0:	4b8e      	ldr	r3, [pc, #568]	; (80068ec <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80066b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80066bc:	d108      	bne.n	80066d0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80066be:	f107 030c 	add.w	r3, r7, #12
 80066c2:	4618      	mov	r0, r3
 80066c4:	f000 fde8 	bl	8007298 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80066cc:	f000 bc6d 	b.w	8006faa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80066d0:	2300      	movs	r3, #0
 80066d2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80066d4:	f000 bc69 	b.w	8006faa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80066d8:	4b84      	ldr	r3, [pc, #528]	; (80068ec <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80066da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066dc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80066e0:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80066e2:	4b82      	ldr	r3, [pc, #520]	; (80068ec <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f003 0304 	and.w	r3, r3, #4
 80066ea:	2b04      	cmp	r3, #4
 80066ec:	d10c      	bne.n	8006708 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 80066ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d109      	bne.n	8006708 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80066f4:	4b7d      	ldr	r3, [pc, #500]	; (80068ec <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	08db      	lsrs	r3, r3, #3
 80066fa:	f003 0303 	and.w	r3, r3, #3
 80066fe:	4a7c      	ldr	r2, [pc, #496]	; (80068f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 8006700:	fa22 f303 	lsr.w	r3, r2, r3
 8006704:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006706:	e01f      	b.n	8006748 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006708:	4b78      	ldr	r3, [pc, #480]	; (80068ec <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006710:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006714:	d106      	bne.n	8006724 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 8006716:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006718:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800671c:	d102      	bne.n	8006724 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800671e:	4b75      	ldr	r3, [pc, #468]	; (80068f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8006720:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006722:	e011      	b.n	8006748 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006724:	4b71      	ldr	r3, [pc, #452]	; (80068ec <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800672c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006730:	d106      	bne.n	8006740 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 8006732:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006734:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006738:	d102      	bne.n	8006740 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800673a:	4b6f      	ldr	r3, [pc, #444]	; (80068f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 800673c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800673e:	e003      	b.n	8006748 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8006740:	2300      	movs	r3, #0
 8006742:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8006744:	f000 bc31 	b.w	8006faa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8006748:	f000 bc2f 	b.w	8006faa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800674c:	4b6b      	ldr	r3, [pc, #428]	; (80068fc <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 800674e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006750:	f000 bc2b 	b.w	8006faa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8006754:	2300      	movs	r3, #0
 8006756:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006758:	f000 bc27 	b.w	8006faa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006762:	f040 8095 	bne.w	8006890 <HAL_RCCEx_GetPeriphCLKFreq+0x270>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8006766:	4b61      	ldr	r3, [pc, #388]	; (80068ec <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8006768:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800676a:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800676e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8006770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006772:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006776:	d04d      	beq.n	8006814 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 8006778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800677a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800677e:	f200 8084 	bhi.w	800688a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8006782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006784:	2bc0      	cmp	r3, #192	; 0xc0
 8006786:	d07d      	beq.n	8006884 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8006788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800678a:	2bc0      	cmp	r3, #192	; 0xc0
 800678c:	d87d      	bhi.n	800688a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800678e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006790:	2b80      	cmp	r3, #128	; 0x80
 8006792:	d02d      	beq.n	80067f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 8006794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006796:	2b80      	cmp	r3, #128	; 0x80
 8006798:	d877      	bhi.n	800688a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800679a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800679c:	2b00      	cmp	r3, #0
 800679e:	d003      	beq.n	80067a8 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 80067a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067a2:	2b40      	cmp	r3, #64	; 0x40
 80067a4:	d012      	beq.n	80067cc <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 80067a6:	e070      	b.n	800688a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80067a8:	4b50      	ldr	r3, [pc, #320]	; (80068ec <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067b0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80067b4:	d107      	bne.n	80067c6 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80067b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80067ba:	4618      	mov	r0, r3
 80067bc:	f000 fec0 	bl	8007540 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80067c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067c2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80067c4:	e3f1      	b.n	8006faa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80067c6:	2300      	movs	r3, #0
 80067c8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80067ca:	e3ee      	b.n	8006faa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80067cc:	4b47      	ldr	r3, [pc, #284]	; (80068ec <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80067d4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80067d8:	d107      	bne.n	80067ea <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80067da:	f107 0318 	add.w	r3, r7, #24
 80067de:	4618      	mov	r0, r3
 80067e0:	f000 fc06 	bl	8006ff0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80067e4:	69bb      	ldr	r3, [r7, #24]
 80067e6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80067e8:	e3df      	b.n	8006faa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80067ea:	2300      	movs	r3, #0
 80067ec:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80067ee:	e3dc      	b.n	8006faa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80067f0:	4b3e      	ldr	r3, [pc, #248]	; (80068ec <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80067f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80067fc:	d107      	bne.n	800680e <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80067fe:	f107 030c 	add.w	r3, r7, #12
 8006802:	4618      	mov	r0, r3
 8006804:	f000 fd48 	bl	8007298 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800680c:	e3cd      	b.n	8006faa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800680e:	2300      	movs	r3, #0
 8006810:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006812:	e3ca      	b.n	8006faa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006814:	4b35      	ldr	r3, [pc, #212]	; (80068ec <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8006816:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006818:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800681c:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800681e:	4b33      	ldr	r3, [pc, #204]	; (80068ec <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	f003 0304 	and.w	r3, r3, #4
 8006826:	2b04      	cmp	r3, #4
 8006828:	d10c      	bne.n	8006844 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 800682a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800682c:	2b00      	cmp	r3, #0
 800682e:	d109      	bne.n	8006844 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006830:	4b2e      	ldr	r3, [pc, #184]	; (80068ec <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	08db      	lsrs	r3, r3, #3
 8006836:	f003 0303 	and.w	r3, r3, #3
 800683a:	4a2d      	ldr	r2, [pc, #180]	; (80068f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 800683c:	fa22 f303 	lsr.w	r3, r2, r3
 8006840:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006842:	e01e      	b.n	8006882 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006844:	4b29      	ldr	r3, [pc, #164]	; (80068ec <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800684c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006850:	d106      	bne.n	8006860 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 8006852:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006854:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006858:	d102      	bne.n	8006860 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800685a:	4b26      	ldr	r3, [pc, #152]	; (80068f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 800685c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800685e:	e010      	b.n	8006882 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006860:	4b22      	ldr	r3, [pc, #136]	; (80068ec <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006868:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800686c:	d106      	bne.n	800687c <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 800686e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006870:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006874:	d102      	bne.n	800687c <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8006876:	4b20      	ldr	r3, [pc, #128]	; (80068f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8006878:	63fb      	str	r3, [r7, #60]	; 0x3c
 800687a:	e002      	b.n	8006882 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800687c:	2300      	movs	r3, #0
 800687e:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8006880:	e393      	b.n	8006faa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8006882:	e392      	b.n	8006faa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8006884:	4b1d      	ldr	r3, [pc, #116]	; (80068fc <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8006886:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006888:	e38f      	b.n	8006faa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 800688a:	2300      	movs	r3, #0
 800688c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800688e:	e38c      	b.n	8006faa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006896:	f040 80a7 	bne.w	80069e8 <HAL_RCCEx_GetPeriphCLKFreq+0x3c8>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 800689a:	4b14      	ldr	r3, [pc, #80]	; (80068ec <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800689c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800689e:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 80068a2:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80068a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068a6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80068aa:	d05f      	beq.n	800696c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 80068ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068ae:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80068b2:	f200 8096 	bhi.w	80069e2 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 80068b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068b8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80068bc:	f000 808e 	beq.w	80069dc <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
 80068c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068c2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80068c6:	f200 808c 	bhi.w	80069e2 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 80068ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068cc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80068d0:	d03a      	beq.n	8006948 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 80068d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068d4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80068d8:	f200 8083 	bhi.w	80069e2 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 80068dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d00e      	beq.n	8006900 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>
 80068e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068e4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80068e8:	d01c      	beq.n	8006924 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 80068ea:	e07a      	b.n	80069e2 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 80068ec:	58024400 	.word	0x58024400
 80068f0:	03d09000 	.word	0x03d09000
 80068f4:	003d0900 	.word	0x003d0900
 80068f8:	007a1200 	.word	0x007a1200
 80068fc:	00bb8000 	.word	0x00bb8000
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006900:	4baa      	ldr	r3, [pc, #680]	; (8006bac <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006908:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800690c:	d107      	bne.n	800691e <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800690e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006912:	4618      	mov	r0, r3
 8006914:	f000 fe14 	bl	8007540 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006918:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800691a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800691c:	e345      	b.n	8006faa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800691e:	2300      	movs	r3, #0
 8006920:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006922:	e342      	b.n	8006faa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006924:	4ba1      	ldr	r3, [pc, #644]	; (8006bac <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800692c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006930:	d107      	bne.n	8006942 <HAL_RCCEx_GetPeriphCLKFreq+0x322>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006932:	f107 0318 	add.w	r3, r7, #24
 8006936:	4618      	mov	r0, r3
 8006938:	f000 fb5a 	bl	8006ff0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800693c:	69bb      	ldr	r3, [r7, #24]
 800693e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006940:	e333      	b.n	8006faa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8006942:	2300      	movs	r3, #0
 8006944:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006946:	e330      	b.n	8006faa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006948:	4b98      	ldr	r3, [pc, #608]	; (8006bac <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006950:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006954:	d107      	bne.n	8006966 <HAL_RCCEx_GetPeriphCLKFreq+0x346>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006956:	f107 030c 	add.w	r3, r7, #12
 800695a:	4618      	mov	r0, r3
 800695c:	f000 fc9c 	bl	8007298 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006964:	e321      	b.n	8006faa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8006966:	2300      	movs	r3, #0
 8006968:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800696a:	e31e      	b.n	8006faa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800696c:	4b8f      	ldr	r3, [pc, #572]	; (8006bac <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800696e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006970:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006974:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006976:	4b8d      	ldr	r3, [pc, #564]	; (8006bac <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	f003 0304 	and.w	r3, r3, #4
 800697e:	2b04      	cmp	r3, #4
 8006980:	d10c      	bne.n	800699c <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 8006982:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006984:	2b00      	cmp	r3, #0
 8006986:	d109      	bne.n	800699c <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006988:	4b88      	ldr	r3, [pc, #544]	; (8006bac <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	08db      	lsrs	r3, r3, #3
 800698e:	f003 0303 	and.w	r3, r3, #3
 8006992:	4a87      	ldr	r2, [pc, #540]	; (8006bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006994:	fa22 f303 	lsr.w	r3, r2, r3
 8006998:	63fb      	str	r3, [r7, #60]	; 0x3c
 800699a:	e01e      	b.n	80069da <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800699c:	4b83      	ldr	r3, [pc, #524]	; (8006bac <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80069a8:	d106      	bne.n	80069b8 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
 80069aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069ac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80069b0:	d102      	bne.n	80069b8 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80069b2:	4b80      	ldr	r3, [pc, #512]	; (8006bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 80069b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80069b6:	e010      	b.n	80069da <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80069b8:	4b7c      	ldr	r3, [pc, #496]	; (8006bac <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069c0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80069c4:	d106      	bne.n	80069d4 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
 80069c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80069cc:	d102      	bne.n	80069d4 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80069ce:	4b7a      	ldr	r3, [pc, #488]	; (8006bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80069d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80069d2:	e002      	b.n	80069da <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80069d4:	2300      	movs	r3, #0
 80069d6:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80069d8:	e2e7      	b.n	8006faa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80069da:	e2e6      	b.n	8006faa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80069dc:	4b77      	ldr	r3, [pc, #476]	; (8006bbc <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80069de:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80069e0:	e2e3      	b.n	8006faa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 80069e2:	2300      	movs	r3, #0
 80069e4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80069e6:	e2e0      	b.n	8006faa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80069ee:	f040 809c 	bne.w	8006b2a <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 80069f2:	4b6e      	ldr	r3, [pc, #440]	; (8006bac <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80069f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069f6:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80069fa:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80069fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069fe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006a02:	d054      	beq.n	8006aae <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 8006a04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a06:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006a0a:	f200 808b 	bhi.w	8006b24 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 8006a0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a10:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006a14:	f000 8083 	beq.w	8006b1e <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 8006a18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a1a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006a1e:	f200 8081 	bhi.w	8006b24 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 8006a22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a24:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006a28:	d02f      	beq.n	8006a8a <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 8006a2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a2c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006a30:	d878      	bhi.n	8006b24 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 8006a32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d004      	beq.n	8006a42 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8006a38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a3a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006a3e:	d012      	beq.n	8006a66 <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 8006a40:	e070      	b.n	8006b24 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006a42:	4b5a      	ldr	r3, [pc, #360]	; (8006bac <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a4a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006a4e:	d107      	bne.n	8006a60 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006a50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006a54:	4618      	mov	r0, r3
 8006a56:	f000 fd73 	bl	8007540 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006a5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a5c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006a5e:	e2a4      	b.n	8006faa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8006a60:	2300      	movs	r3, #0
 8006a62:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006a64:	e2a1      	b.n	8006faa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006a66:	4b51      	ldr	r3, [pc, #324]	; (8006bac <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006a6e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006a72:	d107      	bne.n	8006a84 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006a74:	f107 0318 	add.w	r3, r7, #24
 8006a78:	4618      	mov	r0, r3
 8006a7a:	f000 fab9 	bl	8006ff0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006a7e:	69bb      	ldr	r3, [r7, #24]
 8006a80:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 8006a82:	e292      	b.n	8006faa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8006a84:	2300      	movs	r3, #0
 8006a86:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006a88:	e28f      	b.n	8006faa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006a8a:	4b48      	ldr	r3, [pc, #288]	; (8006bac <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006a92:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006a96:	d107      	bne.n	8006aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006a98:	f107 030c 	add.w	r3, r7, #12
 8006a9c:	4618      	mov	r0, r3
 8006a9e:	f000 fbfb 	bl	8007298 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006aa6:	e280      	b.n	8006faa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8006aa8:	2300      	movs	r3, #0
 8006aaa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006aac:	e27d      	b.n	8006faa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006aae:	4b3f      	ldr	r3, [pc, #252]	; (8006bac <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006ab0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ab2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006ab6:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006ab8:	4b3c      	ldr	r3, [pc, #240]	; (8006bac <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	f003 0304 	and.w	r3, r3, #4
 8006ac0:	2b04      	cmp	r3, #4
 8006ac2:	d10c      	bne.n	8006ade <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 8006ac4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d109      	bne.n	8006ade <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006aca:	4b38      	ldr	r3, [pc, #224]	; (8006bac <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	08db      	lsrs	r3, r3, #3
 8006ad0:	f003 0303 	and.w	r3, r3, #3
 8006ad4:	4a36      	ldr	r2, [pc, #216]	; (8006bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006ad6:	fa22 f303 	lsr.w	r3, r2, r3
 8006ada:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006adc:	e01e      	b.n	8006b1c <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006ade:	4b33      	ldr	r3, [pc, #204]	; (8006bac <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ae6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006aea:	d106      	bne.n	8006afa <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 8006aec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006aee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006af2:	d102      	bne.n	8006afa <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8006af4:	4b2f      	ldr	r3, [pc, #188]	; (8006bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8006af6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006af8:	e010      	b.n	8006b1c <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006afa:	4b2c      	ldr	r3, [pc, #176]	; (8006bac <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b02:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006b06:	d106      	bne.n	8006b16 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 8006b08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b0a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006b0e:	d102      	bne.n	8006b16 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8006b10:	4b29      	ldr	r3, [pc, #164]	; (8006bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8006b12:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006b14:	e002      	b.n	8006b1c <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8006b16:	2300      	movs	r3, #0
 8006b18:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8006b1a:	e246      	b.n	8006faa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8006b1c:	e245      	b.n	8006faa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8006b1e:	4b27      	ldr	r3, [pc, #156]	; (8006bbc <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8006b20:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006b22:	e242      	b.n	8006faa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8006b24:	2300      	movs	r3, #0
 8006b26:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006b28:	e23f      	b.n	8006faa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b30:	f040 80a8 	bne.w	8006c84 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8006b34:	4b1d      	ldr	r3, [pc, #116]	; (8006bac <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006b36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b38:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8006b3c:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8006b3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b40:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006b44:	d060      	beq.n	8006c08 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
 8006b46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b48:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006b4c:	f200 8097 	bhi.w	8006c7e <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8006b50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b52:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006b56:	f000 808f 	beq.w	8006c78 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 8006b5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b5c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006b60:	f200 808d 	bhi.w	8006c7e <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8006b64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b6a:	d03b      	beq.n	8006be4 <HAL_RCCEx_GetPeriphCLKFreq+0x5c4>
 8006b6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b72:	f200 8084 	bhi.w	8006c7e <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8006b76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d004      	beq.n	8006b86 <HAL_RCCEx_GetPeriphCLKFreq+0x566>
 8006b7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b82:	d01d      	beq.n	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
 8006b84:	e07b      	b.n	8006c7e <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006b86:	4b09      	ldr	r3, [pc, #36]	; (8006bac <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b8e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006b92:	d107      	bne.n	8006ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x584>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006b94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006b98:	4618      	mov	r0, r3
 8006b9a:	f000 fcd1 	bl	8007540 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006b9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ba0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006ba2:	e202      	b.n	8006faa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8006ba4:	2300      	movs	r3, #0
 8006ba6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006ba8:	e1ff      	b.n	8006faa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8006baa:	bf00      	nop
 8006bac:	58024400 	.word	0x58024400
 8006bb0:	03d09000 	.word	0x03d09000
 8006bb4:	003d0900 	.word	0x003d0900
 8006bb8:	007a1200 	.word	0x007a1200
 8006bbc:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006bc0:	4ba3      	ldr	r3, [pc, #652]	; (8006e50 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006bc8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006bcc:	d107      	bne.n	8006bde <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006bce:	f107 0318 	add.w	r3, r7, #24
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	f000 fa0c 	bl	8006ff0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006bd8:	69bb      	ldr	r3, [r7, #24]
 8006bda:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006bdc:	e1e5      	b.n	8006faa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8006bde:	2300      	movs	r3, #0
 8006be0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006be2:	e1e2      	b.n	8006faa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006be4:	4b9a      	ldr	r3, [pc, #616]	; (8006e50 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006bec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006bf0:	d107      	bne.n	8006c02 <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006bf2:	f107 030c 	add.w	r3, r7, #12
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	f000 fb4e 	bl	8007298 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006c00:	e1d3      	b.n	8006faa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8006c02:	2300      	movs	r3, #0
 8006c04:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006c06:	e1d0      	b.n	8006faa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006c08:	4b91      	ldr	r3, [pc, #580]	; (8006e50 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006c0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c0c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006c10:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006c12:	4b8f      	ldr	r3, [pc, #572]	; (8006e50 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	f003 0304 	and.w	r3, r3, #4
 8006c1a:	2b04      	cmp	r3, #4
 8006c1c:	d10c      	bne.n	8006c38 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
 8006c1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d109      	bne.n	8006c38 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006c24:	4b8a      	ldr	r3, [pc, #552]	; (8006e50 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	08db      	lsrs	r3, r3, #3
 8006c2a:	f003 0303 	and.w	r3, r3, #3
 8006c2e:	4a89      	ldr	r2, [pc, #548]	; (8006e54 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006c30:	fa22 f303 	lsr.w	r3, r2, r3
 8006c34:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006c36:	e01e      	b.n	8006c76 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006c38:	4b85      	ldr	r3, [pc, #532]	; (8006e50 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c44:	d106      	bne.n	8006c54 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
 8006c46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c48:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006c4c:	d102      	bne.n	8006c54 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8006c4e:	4b82      	ldr	r3, [pc, #520]	; (8006e58 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8006c50:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006c52:	e010      	b.n	8006c76 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006c54:	4b7e      	ldr	r3, [pc, #504]	; (8006e50 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c5c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006c60:	d106      	bne.n	8006c70 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8006c62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c64:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006c68:	d102      	bne.n	8006c70 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8006c6a:	4b7c      	ldr	r3, [pc, #496]	; (8006e5c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006c6c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006c6e:	e002      	b.n	8006c76 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8006c70:	2300      	movs	r3, #0
 8006c72:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8006c74:	e199      	b.n	8006faa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8006c76:	e198      	b.n	8006faa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8006c78:	4b79      	ldr	r3, [pc, #484]	; (8006e60 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006c7a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006c7c:	e195      	b.n	8006faa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8006c7e:	2300      	movs	r3, #0
 8006c80:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006c82:	e192      	b.n	8006faa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006c8a:	d173      	bne.n	8006d74 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8006c8c:	4b70      	ldr	r3, [pc, #448]	; (8006e50 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006c8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c90:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006c94:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8006c96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c98:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006c9c:	d02f      	beq.n	8006cfe <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
 8006c9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ca0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006ca4:	d863      	bhi.n	8006d6e <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 8006ca6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d004      	beq.n	8006cb6 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 8006cac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006cb2:	d012      	beq.n	8006cda <HAL_RCCEx_GetPeriphCLKFreq+0x6ba>
 8006cb4:	e05b      	b.n	8006d6e <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006cb6:	4b66      	ldr	r3, [pc, #408]	; (8006e50 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006cbe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006cc2:	d107      	bne.n	8006cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006cc4:	f107 0318 	add.w	r3, r7, #24
 8006cc8:	4618      	mov	r0, r3
 8006cca:	f000 f991 	bl	8006ff0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006cce:	69bb      	ldr	r3, [r7, #24]
 8006cd0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006cd2:	e16a      	b.n	8006faa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006cd8:	e167      	b.n	8006faa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006cda:	4b5d      	ldr	r3, [pc, #372]	; (8006e50 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006ce2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006ce6:	d107      	bne.n	8006cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006ce8:	f107 030c 	add.w	r3, r7, #12
 8006cec:	4618      	mov	r0, r3
 8006cee:	f000 fad3 	bl	8007298 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006cf2:	697b      	ldr	r3, [r7, #20]
 8006cf4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006cf6:	e158      	b.n	8006faa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8006cf8:	2300      	movs	r3, #0
 8006cfa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006cfc:	e155      	b.n	8006faa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006cfe:	4b54      	ldr	r3, [pc, #336]	; (8006e50 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006d00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d02:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006d06:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006d08:	4b51      	ldr	r3, [pc, #324]	; (8006e50 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	f003 0304 	and.w	r3, r3, #4
 8006d10:	2b04      	cmp	r3, #4
 8006d12:	d10c      	bne.n	8006d2e <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
 8006d14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d109      	bne.n	8006d2e <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006d1a:	4b4d      	ldr	r3, [pc, #308]	; (8006e50 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	08db      	lsrs	r3, r3, #3
 8006d20:	f003 0303 	and.w	r3, r3, #3
 8006d24:	4a4b      	ldr	r2, [pc, #300]	; (8006e54 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006d26:	fa22 f303 	lsr.w	r3, r2, r3
 8006d2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006d2c:	e01e      	b.n	8006d6c <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006d2e:	4b48      	ldr	r3, [pc, #288]	; (8006e50 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d3a:	d106      	bne.n	8006d4a <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
 8006d3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d3e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006d42:	d102      	bne.n	8006d4a <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8006d44:	4b44      	ldr	r3, [pc, #272]	; (8006e58 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8006d46:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006d48:	e010      	b.n	8006d6c <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006d4a:	4b41      	ldr	r3, [pc, #260]	; (8006e50 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d52:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006d56:	d106      	bne.n	8006d66 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 8006d58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d5a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006d5e:	d102      	bne.n	8006d66 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8006d60:	4b3e      	ldr	r3, [pc, #248]	; (8006e5c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006d62:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006d64:	e002      	b.n	8006d6c <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8006d66:	2300      	movs	r3, #0
 8006d68:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8006d6a:	e11e      	b.n	8006faa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8006d6c:	e11d      	b.n	8006faa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8006d6e:	2300      	movs	r3, #0
 8006d70:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006d72:	e11a      	b.n	8006faa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d7a:	d133      	bne.n	8006de4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8006d7c:	4b34      	ldr	r3, [pc, #208]	; (8006e50 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006d7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006d84:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8006d86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d004      	beq.n	8006d96 <HAL_RCCEx_GetPeriphCLKFreq+0x776>
 8006d8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d92:	d012      	beq.n	8006dba <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
 8006d94:	e023      	b.n	8006dde <HAL_RCCEx_GetPeriphCLKFreq+0x7be>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006d96:	4b2e      	ldr	r3, [pc, #184]	; (8006e50 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d9e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006da2:	d107      	bne.n	8006db4 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006da4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006da8:	4618      	mov	r0, r3
 8006daa:	f000 fbc9 	bl	8007540 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006dae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006db0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006db2:	e0fa      	b.n	8006faa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006db4:	2300      	movs	r3, #0
 8006db6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006db8:	e0f7      	b.n	8006faa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006dba:	4b25      	ldr	r3, [pc, #148]	; (8006e50 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006dc2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006dc6:	d107      	bne.n	8006dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006dc8:	f107 0318 	add.w	r3, r7, #24
 8006dcc:	4618      	mov	r0, r3
 8006dce:	f000 f90f 	bl	8006ff0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8006dd2:	6a3b      	ldr	r3, [r7, #32]
 8006dd4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006dd6:	e0e8      	b.n	8006faa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006dd8:	2300      	movs	r3, #0
 8006dda:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006ddc:	e0e5      	b.n	8006faa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8006dde:	2300      	movs	r3, #0
 8006de0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006de2:	e0e2      	b.n	8006faa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006dea:	f040 808f 	bne.w	8006f0c <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8006dee:	4b18      	ldr	r3, [pc, #96]	; (8006e50 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006df0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006df2:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8006df6:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8006df8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dfa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006dfe:	d075      	beq.n	8006eec <HAL_RCCEx_GetPeriphCLKFreq+0x8cc>
 8006e00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e02:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006e06:	d87e      	bhi.n	8006f06 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8006e08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e0e:	d060      	beq.n	8006ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 8006e10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e16:	d876      	bhi.n	8006f06 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8006e18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e1a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006e1e:	d045      	beq.n	8006eac <HAL_RCCEx_GetPeriphCLKFreq+0x88c>
 8006e20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e22:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006e26:	d86e      	bhi.n	8006f06 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8006e28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e2a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006e2e:	d02b      	beq.n	8006e88 <HAL_RCCEx_GetPeriphCLKFreq+0x868>
 8006e30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e32:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006e36:	d866      	bhi.n	8006f06 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8006e38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d004      	beq.n	8006e48 <HAL_RCCEx_GetPeriphCLKFreq+0x828>
 8006e3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e40:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006e44:	d00e      	beq.n	8006e64 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8006e46:	e05e      	b.n	8006f06 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8006e48:	f000 f8bc 	bl	8006fc4 <HAL_RCCEx_GetD3PCLK1Freq>
 8006e4c:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8006e4e:	e0ac      	b.n	8006faa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8006e50:	58024400 	.word	0x58024400
 8006e54:	03d09000 	.word	0x03d09000
 8006e58:	003d0900 	.word	0x003d0900
 8006e5c:	007a1200 	.word	0x007a1200
 8006e60:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006e64:	4b53      	ldr	r3, [pc, #332]	; (8006fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006e6c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006e70:	d107      	bne.n	8006e82 <HAL_RCCEx_GetPeriphCLKFreq+0x862>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006e72:	f107 0318 	add.w	r3, r7, #24
 8006e76:	4618      	mov	r0, r3
 8006e78:	f000 f8ba 	bl	8006ff0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006e7c:	69fb      	ldr	r3, [r7, #28]
 8006e7e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006e80:	e093      	b.n	8006faa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006e82:	2300      	movs	r3, #0
 8006e84:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006e86:	e090      	b.n	8006faa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006e88:	4b4a      	ldr	r3, [pc, #296]	; (8006fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006e90:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006e94:	d107      	bne.n	8006ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006e96:	f107 030c 	add.w	r3, r7, #12
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	f000 f9fc 	bl	8007298 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006ea0:	693b      	ldr	r3, [r7, #16]
 8006ea2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006ea4:	e081      	b.n	8006faa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006eaa:	e07e      	b.n	8006faa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006eac:	4b41      	ldr	r3, [pc, #260]	; (8006fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	f003 0304 	and.w	r3, r3, #4
 8006eb4:	2b04      	cmp	r3, #4
 8006eb6:	d109      	bne.n	8006ecc <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006eb8:	4b3e      	ldr	r3, [pc, #248]	; (8006fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	08db      	lsrs	r3, r3, #3
 8006ebe:	f003 0303 	and.w	r3, r3, #3
 8006ec2:	4a3d      	ldr	r2, [pc, #244]	; (8006fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 8006ec4:	fa22 f303 	lsr.w	r3, r2, r3
 8006ec8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006eca:	e06e      	b.n	8006faa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006ecc:	2300      	movs	r3, #0
 8006ece:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006ed0:	e06b      	b.n	8006faa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8006ed2:	4b38      	ldr	r3, [pc, #224]	; (8006fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006eda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ede:	d102      	bne.n	8006ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
         {
          frequency = CSI_VALUE;
 8006ee0:	4b36      	ldr	r3, [pc, #216]	; (8006fbc <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8006ee2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006ee4:	e061      	b.n	8006faa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006eea:	e05e      	b.n	8006faa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006eec:	4b31      	ldr	r3, [pc, #196]	; (8006fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ef4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006ef8:	d102      	bne.n	8006f00 <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>
         {
          frequency = HSE_VALUE;
 8006efa:	4b31      	ldr	r3, [pc, #196]	; (8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8006efc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006efe:	e054      	b.n	8006faa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006f00:	2300      	movs	r3, #0
 8006f02:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006f04:	e051      	b.n	8006faa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8006f06:	2300      	movs	r3, #0
 8006f08:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006f0a:	e04e      	b.n	8006faa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f12:	d148      	bne.n	8006fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 8006f14:	4b27      	ldr	r3, [pc, #156]	; (8006fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006f16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f18:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006f1c:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8006f1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f20:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006f24:	d02a      	beq.n	8006f7c <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 8006f26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f28:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006f2c:	d838      	bhi.n	8006fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 8006f2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d004      	beq.n	8006f3e <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 8006f34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f36:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006f3a:	d00d      	beq.n	8006f58 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 8006f3c:	e030      	b.n	8006fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006f3e:	4b1d      	ldr	r3, [pc, #116]	; (8006fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f46:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006f4a:	d102      	bne.n	8006f52 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
         {
          frequency = HSE_VALUE;
 8006f4c:	4b1c      	ldr	r3, [pc, #112]	; (8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8006f4e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006f50:	e02b      	b.n	8006faa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006f52:	2300      	movs	r3, #0
 8006f54:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006f56:	e028      	b.n	8006faa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006f58:	4b16      	ldr	r3, [pc, #88]	; (8006fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f60:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006f64:	d107      	bne.n	8006f76 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006f66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	f000 fae8 	bl	8007540 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006f70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f72:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006f74:	e019      	b.n	8006faa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006f76:	2300      	movs	r3, #0
 8006f78:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006f7a:	e016      	b.n	8006faa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006f7c:	4b0d      	ldr	r3, [pc, #52]	; (8006fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006f84:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006f88:	d107      	bne.n	8006f9a <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006f8a:	f107 0318 	add.w	r3, r7, #24
 8006f8e:	4618      	mov	r0, r3
 8006f90:	f000 f82e 	bl	8006ff0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006f94:	69fb      	ldr	r3, [r7, #28]
 8006f96:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006f98:	e007      	b.n	8006faa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006f9e:	e004      	b.n	8006faa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8006fa0:	2300      	movs	r3, #0
 8006fa2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006fa4:	e001      	b.n	8006faa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else
    {
      frequency = 0;
 8006fa6:	2300      	movs	r3, #0
 8006fa8:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8006faa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006fac:	4618      	mov	r0, r3
 8006fae:	3740      	adds	r7, #64	; 0x40
 8006fb0:	46bd      	mov	sp, r7
 8006fb2:	bd80      	pop	{r7, pc}
 8006fb4:	58024400 	.word	0x58024400
 8006fb8:	03d09000 	.word	0x03d09000
 8006fbc:	003d0900 	.word	0x003d0900
 8006fc0:	007a1200 	.word	0x007a1200

08006fc4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006fc4:	b580      	push	{r7, lr}
 8006fc6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006fc8:	f7fe fb8e 	bl	80056e8 <HAL_RCC_GetHCLKFreq>
 8006fcc:	4602      	mov	r2, r0
 8006fce:	4b06      	ldr	r3, [pc, #24]	; (8006fe8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006fd0:	6a1b      	ldr	r3, [r3, #32]
 8006fd2:	091b      	lsrs	r3, r3, #4
 8006fd4:	f003 0307 	and.w	r3, r3, #7
 8006fd8:	4904      	ldr	r1, [pc, #16]	; (8006fec <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006fda:	5ccb      	ldrb	r3, [r1, r3]
 8006fdc:	f003 031f 	and.w	r3, r3, #31
 8006fe0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006fe4:	4618      	mov	r0, r3
 8006fe6:	bd80      	pop	{r7, pc}
 8006fe8:	58024400 	.word	0x58024400
 8006fec:	0800be58 	.word	0x0800be58

08006ff0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8006ff0:	b480      	push	{r7}
 8006ff2:	b089      	sub	sp, #36	; 0x24
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006ff8:	4ba1      	ldr	r3, [pc, #644]	; (8007280 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ffa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ffc:	f003 0303 	and.w	r3, r3, #3
 8007000:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8007002:	4b9f      	ldr	r3, [pc, #636]	; (8007280 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007004:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007006:	0b1b      	lsrs	r3, r3, #12
 8007008:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800700c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800700e:	4b9c      	ldr	r3, [pc, #624]	; (8007280 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007010:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007012:	091b      	lsrs	r3, r3, #4
 8007014:	f003 0301 	and.w	r3, r3, #1
 8007018:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800701a:	4b99      	ldr	r3, [pc, #612]	; (8007280 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800701c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800701e:	08db      	lsrs	r3, r3, #3
 8007020:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007024:	693a      	ldr	r2, [r7, #16]
 8007026:	fb02 f303 	mul.w	r3, r2, r3
 800702a:	ee07 3a90 	vmov	s15, r3
 800702e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007032:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8007036:	697b      	ldr	r3, [r7, #20]
 8007038:	2b00      	cmp	r3, #0
 800703a:	f000 8111 	beq.w	8007260 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800703e:	69bb      	ldr	r3, [r7, #24]
 8007040:	2b02      	cmp	r3, #2
 8007042:	f000 8083 	beq.w	800714c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8007046:	69bb      	ldr	r3, [r7, #24]
 8007048:	2b02      	cmp	r3, #2
 800704a:	f200 80a1 	bhi.w	8007190 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800704e:	69bb      	ldr	r3, [r7, #24]
 8007050:	2b00      	cmp	r3, #0
 8007052:	d003      	beq.n	800705c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8007054:	69bb      	ldr	r3, [r7, #24]
 8007056:	2b01      	cmp	r3, #1
 8007058:	d056      	beq.n	8007108 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800705a:	e099      	b.n	8007190 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800705c:	4b88      	ldr	r3, [pc, #544]	; (8007280 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	f003 0320 	and.w	r3, r3, #32
 8007064:	2b00      	cmp	r3, #0
 8007066:	d02d      	beq.n	80070c4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007068:	4b85      	ldr	r3, [pc, #532]	; (8007280 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	08db      	lsrs	r3, r3, #3
 800706e:	f003 0303 	and.w	r3, r3, #3
 8007072:	4a84      	ldr	r2, [pc, #528]	; (8007284 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8007074:	fa22 f303 	lsr.w	r3, r2, r3
 8007078:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800707a:	68bb      	ldr	r3, [r7, #8]
 800707c:	ee07 3a90 	vmov	s15, r3
 8007080:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007084:	697b      	ldr	r3, [r7, #20]
 8007086:	ee07 3a90 	vmov	s15, r3
 800708a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800708e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007092:	4b7b      	ldr	r3, [pc, #492]	; (8007280 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007094:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007096:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800709a:	ee07 3a90 	vmov	s15, r3
 800709e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80070a6:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007288 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80070aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80070ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80070b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80070b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80070ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070be:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80070c2:	e087      	b.n	80071d4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80070c4:	697b      	ldr	r3, [r7, #20]
 80070c6:	ee07 3a90 	vmov	s15, r3
 80070ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070ce:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800728c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80070d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80070d6:	4b6a      	ldr	r3, [pc, #424]	; (8007280 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80070d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070de:	ee07 3a90 	vmov	s15, r3
 80070e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80070ea:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007288 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80070ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80070f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80070f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80070fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80070fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007102:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007106:	e065      	b.n	80071d4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007108:	697b      	ldr	r3, [r7, #20]
 800710a:	ee07 3a90 	vmov	s15, r3
 800710e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007112:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007290 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007116:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800711a:	4b59      	ldr	r3, [pc, #356]	; (8007280 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800711c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800711e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007122:	ee07 3a90 	vmov	s15, r3
 8007126:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800712a:	ed97 6a03 	vldr	s12, [r7, #12]
 800712e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007288 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007132:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007136:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800713a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800713e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007142:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007146:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800714a:	e043      	b.n	80071d4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800714c:	697b      	ldr	r3, [r7, #20]
 800714e:	ee07 3a90 	vmov	s15, r3
 8007152:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007156:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007294 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800715a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800715e:	4b48      	ldr	r3, [pc, #288]	; (8007280 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007160:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007162:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007166:	ee07 3a90 	vmov	s15, r3
 800716a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800716e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007172:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007288 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007176:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800717a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800717e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007182:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007186:	ee67 7a27 	vmul.f32	s15, s14, s15
 800718a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800718e:	e021      	b.n	80071d4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007190:	697b      	ldr	r3, [r7, #20]
 8007192:	ee07 3a90 	vmov	s15, r3
 8007196:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800719a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007290 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800719e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071a2:	4b37      	ldr	r3, [pc, #220]	; (8007280 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80071a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071aa:	ee07 3a90 	vmov	s15, r3
 80071ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80071b6:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007288 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80071ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80071c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071ce:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80071d2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80071d4:	4b2a      	ldr	r3, [pc, #168]	; (8007280 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80071d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071d8:	0a5b      	lsrs	r3, r3, #9
 80071da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80071de:	ee07 3a90 	vmov	s15, r3
 80071e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071e6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80071ea:	ee37 7a87 	vadd.f32	s14, s15, s14
 80071ee:	edd7 6a07 	vldr	s13, [r7, #28]
 80071f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80071f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80071fa:	ee17 2a90 	vmov	r2, s15
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8007202:	4b1f      	ldr	r3, [pc, #124]	; (8007280 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007204:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007206:	0c1b      	lsrs	r3, r3, #16
 8007208:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800720c:	ee07 3a90 	vmov	s15, r3
 8007210:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007214:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007218:	ee37 7a87 	vadd.f32	s14, s15, s14
 800721c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007220:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007224:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007228:	ee17 2a90 	vmov	r2, s15
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8007230:	4b13      	ldr	r3, [pc, #76]	; (8007280 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007232:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007234:	0e1b      	lsrs	r3, r3, #24
 8007236:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800723a:	ee07 3a90 	vmov	s15, r3
 800723e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007242:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007246:	ee37 7a87 	vadd.f32	s14, s15, s14
 800724a:	edd7 6a07 	vldr	s13, [r7, #28]
 800724e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007252:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007256:	ee17 2a90 	vmov	r2, s15
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800725e:	e008      	b.n	8007272 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	2200      	movs	r2, #0
 8007264:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	2200      	movs	r2, #0
 800726a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	2200      	movs	r2, #0
 8007270:	609a      	str	r2, [r3, #8]
}
 8007272:	bf00      	nop
 8007274:	3724      	adds	r7, #36	; 0x24
 8007276:	46bd      	mov	sp, r7
 8007278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727c:	4770      	bx	lr
 800727e:	bf00      	nop
 8007280:	58024400 	.word	0x58024400
 8007284:	03d09000 	.word	0x03d09000
 8007288:	46000000 	.word	0x46000000
 800728c:	4c742400 	.word	0x4c742400
 8007290:	4a742400 	.word	0x4a742400
 8007294:	4af42400 	.word	0x4af42400

08007298 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8007298:	b480      	push	{r7}
 800729a:	b089      	sub	sp, #36	; 0x24
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80072a0:	4ba1      	ldr	r3, [pc, #644]	; (8007528 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80072a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072a4:	f003 0303 	and.w	r3, r3, #3
 80072a8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80072aa:	4b9f      	ldr	r3, [pc, #636]	; (8007528 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80072ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072ae:	0d1b      	lsrs	r3, r3, #20
 80072b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80072b4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80072b6:	4b9c      	ldr	r3, [pc, #624]	; (8007528 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80072b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072ba:	0a1b      	lsrs	r3, r3, #8
 80072bc:	f003 0301 	and.w	r3, r3, #1
 80072c0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80072c2:	4b99      	ldr	r3, [pc, #612]	; (8007528 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80072c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072c6:	08db      	lsrs	r3, r3, #3
 80072c8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80072cc:	693a      	ldr	r2, [r7, #16]
 80072ce:	fb02 f303 	mul.w	r3, r2, r3
 80072d2:	ee07 3a90 	vmov	s15, r3
 80072d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072da:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80072de:	697b      	ldr	r3, [r7, #20]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	f000 8111 	beq.w	8007508 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80072e6:	69bb      	ldr	r3, [r7, #24]
 80072e8:	2b02      	cmp	r3, #2
 80072ea:	f000 8083 	beq.w	80073f4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80072ee:	69bb      	ldr	r3, [r7, #24]
 80072f0:	2b02      	cmp	r3, #2
 80072f2:	f200 80a1 	bhi.w	8007438 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80072f6:	69bb      	ldr	r3, [r7, #24]
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d003      	beq.n	8007304 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80072fc:	69bb      	ldr	r3, [r7, #24]
 80072fe:	2b01      	cmp	r3, #1
 8007300:	d056      	beq.n	80073b0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8007302:	e099      	b.n	8007438 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007304:	4b88      	ldr	r3, [pc, #544]	; (8007528 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	f003 0320 	and.w	r3, r3, #32
 800730c:	2b00      	cmp	r3, #0
 800730e:	d02d      	beq.n	800736c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007310:	4b85      	ldr	r3, [pc, #532]	; (8007528 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	08db      	lsrs	r3, r3, #3
 8007316:	f003 0303 	and.w	r3, r3, #3
 800731a:	4a84      	ldr	r2, [pc, #528]	; (800752c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800731c:	fa22 f303 	lsr.w	r3, r2, r3
 8007320:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007322:	68bb      	ldr	r3, [r7, #8]
 8007324:	ee07 3a90 	vmov	s15, r3
 8007328:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800732c:	697b      	ldr	r3, [r7, #20]
 800732e:	ee07 3a90 	vmov	s15, r3
 8007332:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007336:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800733a:	4b7b      	ldr	r3, [pc, #492]	; (8007528 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800733c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800733e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007342:	ee07 3a90 	vmov	s15, r3
 8007346:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800734a:	ed97 6a03 	vldr	s12, [r7, #12]
 800734e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007530 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007352:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007356:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800735a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800735e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007362:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007366:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800736a:	e087      	b.n	800747c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800736c:	697b      	ldr	r3, [r7, #20]
 800736e:	ee07 3a90 	vmov	s15, r3
 8007372:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007376:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007534 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800737a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800737e:	4b6a      	ldr	r3, [pc, #424]	; (8007528 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007382:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007386:	ee07 3a90 	vmov	s15, r3
 800738a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800738e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007392:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007530 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007396:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800739a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800739e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80073a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80073a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80073aa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80073ae:	e065      	b.n	800747c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80073b0:	697b      	ldr	r3, [r7, #20]
 80073b2:	ee07 3a90 	vmov	s15, r3
 80073b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073ba:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007538 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80073be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80073c2:	4b59      	ldr	r3, [pc, #356]	; (8007528 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80073c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073ca:	ee07 3a90 	vmov	s15, r3
 80073ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80073d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80073d6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007530 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80073da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80073de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80073e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80073e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80073ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80073ee:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80073f2:	e043      	b.n	800747c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80073f4:	697b      	ldr	r3, [r7, #20]
 80073f6:	ee07 3a90 	vmov	s15, r3
 80073fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073fe:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800753c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8007402:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007406:	4b48      	ldr	r3, [pc, #288]	; (8007528 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800740a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800740e:	ee07 3a90 	vmov	s15, r3
 8007412:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007416:	ed97 6a03 	vldr	s12, [r7, #12]
 800741a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007530 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800741e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007422:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007426:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800742a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800742e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007432:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007436:	e021      	b.n	800747c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007438:	697b      	ldr	r3, [r7, #20]
 800743a:	ee07 3a90 	vmov	s15, r3
 800743e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007442:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007538 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007446:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800744a:	4b37      	ldr	r3, [pc, #220]	; (8007528 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800744c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800744e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007452:	ee07 3a90 	vmov	s15, r3
 8007456:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800745a:	ed97 6a03 	vldr	s12, [r7, #12]
 800745e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007530 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007462:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007466:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800746a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800746e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007472:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007476:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800747a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800747c:	4b2a      	ldr	r3, [pc, #168]	; (8007528 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800747e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007480:	0a5b      	lsrs	r3, r3, #9
 8007482:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007486:	ee07 3a90 	vmov	s15, r3
 800748a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800748e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007492:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007496:	edd7 6a07 	vldr	s13, [r7, #28]
 800749a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800749e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80074a2:	ee17 2a90 	vmov	r2, s15
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80074aa:	4b1f      	ldr	r3, [pc, #124]	; (8007528 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80074ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074ae:	0c1b      	lsrs	r3, r3, #16
 80074b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80074b4:	ee07 3a90 	vmov	s15, r3
 80074b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074bc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80074c0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80074c4:	edd7 6a07 	vldr	s13, [r7, #28]
 80074c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80074cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80074d0:	ee17 2a90 	vmov	r2, s15
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80074d8:	4b13      	ldr	r3, [pc, #76]	; (8007528 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80074da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074dc:	0e1b      	lsrs	r3, r3, #24
 80074de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80074e2:	ee07 3a90 	vmov	s15, r3
 80074e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074ea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80074ee:	ee37 7a87 	vadd.f32	s14, s15, s14
 80074f2:	edd7 6a07 	vldr	s13, [r7, #28]
 80074f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80074fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80074fe:	ee17 2a90 	vmov	r2, s15
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007506:	e008      	b.n	800751a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	2200      	movs	r2, #0
 800750c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	2200      	movs	r2, #0
 8007512:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	2200      	movs	r2, #0
 8007518:	609a      	str	r2, [r3, #8]
}
 800751a:	bf00      	nop
 800751c:	3724      	adds	r7, #36	; 0x24
 800751e:	46bd      	mov	sp, r7
 8007520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007524:	4770      	bx	lr
 8007526:	bf00      	nop
 8007528:	58024400 	.word	0x58024400
 800752c:	03d09000 	.word	0x03d09000
 8007530:	46000000 	.word	0x46000000
 8007534:	4c742400 	.word	0x4c742400
 8007538:	4a742400 	.word	0x4a742400
 800753c:	4af42400 	.word	0x4af42400

08007540 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8007540:	b480      	push	{r7}
 8007542:	b089      	sub	sp, #36	; 0x24
 8007544:	af00      	add	r7, sp, #0
 8007546:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007548:	4ba0      	ldr	r3, [pc, #640]	; (80077cc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800754a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800754c:	f003 0303 	and.w	r3, r3, #3
 8007550:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8007552:	4b9e      	ldr	r3, [pc, #632]	; (80077cc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007554:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007556:	091b      	lsrs	r3, r3, #4
 8007558:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800755c:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800755e:	4b9b      	ldr	r3, [pc, #620]	; (80077cc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007560:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007562:	f003 0301 	and.w	r3, r3, #1
 8007566:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8007568:	4b98      	ldr	r3, [pc, #608]	; (80077cc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800756a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800756c:	08db      	lsrs	r3, r3, #3
 800756e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007572:	693a      	ldr	r2, [r7, #16]
 8007574:	fb02 f303 	mul.w	r3, r2, r3
 8007578:	ee07 3a90 	vmov	s15, r3
 800757c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007580:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8007584:	697b      	ldr	r3, [r7, #20]
 8007586:	2b00      	cmp	r3, #0
 8007588:	f000 8111 	beq.w	80077ae <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800758c:	69bb      	ldr	r3, [r7, #24]
 800758e:	2b02      	cmp	r3, #2
 8007590:	f000 8083 	beq.w	800769a <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8007594:	69bb      	ldr	r3, [r7, #24]
 8007596:	2b02      	cmp	r3, #2
 8007598:	f200 80a1 	bhi.w	80076de <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800759c:	69bb      	ldr	r3, [r7, #24]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d003      	beq.n	80075aa <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 80075a2:	69bb      	ldr	r3, [r7, #24]
 80075a4:	2b01      	cmp	r3, #1
 80075a6:	d056      	beq.n	8007656 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 80075a8:	e099      	b.n	80076de <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80075aa:	4b88      	ldr	r3, [pc, #544]	; (80077cc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	f003 0320 	and.w	r3, r3, #32
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d02d      	beq.n	8007612 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80075b6:	4b85      	ldr	r3, [pc, #532]	; (80077cc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	08db      	lsrs	r3, r3, #3
 80075bc:	f003 0303 	and.w	r3, r3, #3
 80075c0:	4a83      	ldr	r2, [pc, #524]	; (80077d0 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 80075c2:	fa22 f303 	lsr.w	r3, r2, r3
 80075c6:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80075c8:	68bb      	ldr	r3, [r7, #8]
 80075ca:	ee07 3a90 	vmov	s15, r3
 80075ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075d2:	697b      	ldr	r3, [r7, #20]
 80075d4:	ee07 3a90 	vmov	s15, r3
 80075d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075dc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80075e0:	4b7a      	ldr	r3, [pc, #488]	; (80077cc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80075e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075e8:	ee07 3a90 	vmov	s15, r3
 80075ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075f0:	ed97 6a03 	vldr	s12, [r7, #12]
 80075f4:	eddf 5a77 	vldr	s11, [pc, #476]	; 80077d4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80075f8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80075fc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007600:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007604:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007608:	ee67 7a27 	vmul.f32	s15, s14, s15
 800760c:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007610:	e087      	b.n	8007722 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007612:	697b      	ldr	r3, [r7, #20]
 8007614:	ee07 3a90 	vmov	s15, r3
 8007618:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800761c:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80077d8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8007620:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007624:	4b69      	ldr	r3, [pc, #420]	; (80077cc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007626:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007628:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800762c:	ee07 3a90 	vmov	s15, r3
 8007630:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007634:	ed97 6a03 	vldr	s12, [r7, #12]
 8007638:	eddf 5a66 	vldr	s11, [pc, #408]	; 80077d4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800763c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007640:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007644:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007648:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800764c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007650:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007654:	e065      	b.n	8007722 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007656:	697b      	ldr	r3, [r7, #20]
 8007658:	ee07 3a90 	vmov	s15, r3
 800765c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007660:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80077dc <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8007664:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007668:	4b58      	ldr	r3, [pc, #352]	; (80077cc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800766a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800766c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007670:	ee07 3a90 	vmov	s15, r3
 8007674:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007678:	ed97 6a03 	vldr	s12, [r7, #12]
 800767c:	eddf 5a55 	vldr	s11, [pc, #340]	; 80077d4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007680:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007684:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007688:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800768c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007690:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007694:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007698:	e043      	b.n	8007722 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800769a:	697b      	ldr	r3, [r7, #20]
 800769c:	ee07 3a90 	vmov	s15, r3
 80076a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076a4:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80077e0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 80076a8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80076ac:	4b47      	ldr	r3, [pc, #284]	; (80077cc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80076ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076b4:	ee07 3a90 	vmov	s15, r3
 80076b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076bc:	ed97 6a03 	vldr	s12, [r7, #12]
 80076c0:	eddf 5a44 	vldr	s11, [pc, #272]	; 80077d4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80076c4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80076c8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80076cc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80076d0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80076d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076d8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80076dc:	e021      	b.n	8007722 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80076de:	697b      	ldr	r3, [r7, #20]
 80076e0:	ee07 3a90 	vmov	s15, r3
 80076e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076e8:	eddf 6a3b 	vldr	s13, [pc, #236]	; 80077d8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80076ec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80076f0:	4b36      	ldr	r3, [pc, #216]	; (80077cc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80076f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076f8:	ee07 3a90 	vmov	s15, r3
 80076fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007700:	ed97 6a03 	vldr	s12, [r7, #12]
 8007704:	eddf 5a33 	vldr	s11, [pc, #204]	; 80077d4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007708:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800770c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007710:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007714:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007718:	ee67 7a27 	vmul.f32	s15, s14, s15
 800771c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007720:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8007722:	4b2a      	ldr	r3, [pc, #168]	; (80077cc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007726:	0a5b      	lsrs	r3, r3, #9
 8007728:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800772c:	ee07 3a90 	vmov	s15, r3
 8007730:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007734:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007738:	ee37 7a87 	vadd.f32	s14, s15, s14
 800773c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007740:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007744:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007748:	ee17 2a90 	vmov	r2, s15
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8007750:	4b1e      	ldr	r3, [pc, #120]	; (80077cc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007752:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007754:	0c1b      	lsrs	r3, r3, #16
 8007756:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800775a:	ee07 3a90 	vmov	s15, r3
 800775e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007762:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007766:	ee37 7a87 	vadd.f32	s14, s15, s14
 800776a:	edd7 6a07 	vldr	s13, [r7, #28]
 800776e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007772:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007776:	ee17 2a90 	vmov	r2, s15
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800777e:	4b13      	ldr	r3, [pc, #76]	; (80077cc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007782:	0e1b      	lsrs	r3, r3, #24
 8007784:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007788:	ee07 3a90 	vmov	s15, r3
 800778c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007790:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007794:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007798:	edd7 6a07 	vldr	s13, [r7, #28]
 800779c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80077a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80077a4:	ee17 2a90 	vmov	r2, s15
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80077ac:	e008      	b.n	80077c0 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	2200      	movs	r2, #0
 80077b2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	2200      	movs	r2, #0
 80077b8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	2200      	movs	r2, #0
 80077be:	609a      	str	r2, [r3, #8]
}
 80077c0:	bf00      	nop
 80077c2:	3724      	adds	r7, #36	; 0x24
 80077c4:	46bd      	mov	sp, r7
 80077c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ca:	4770      	bx	lr
 80077cc:	58024400 	.word	0x58024400
 80077d0:	03d09000 	.word	0x03d09000
 80077d4:	46000000 	.word	0x46000000
 80077d8:	4c742400 	.word	0x4c742400
 80077dc:	4a742400 	.word	0x4a742400
 80077e0:	4af42400 	.word	0x4af42400

080077e4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80077e4:	b580      	push	{r7, lr}
 80077e6:	b084      	sub	sp, #16
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	6078      	str	r0, [r7, #4]
 80077ec:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80077ee:	2300      	movs	r3, #0
 80077f0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80077f2:	4b53      	ldr	r3, [pc, #332]	; (8007940 <RCCEx_PLL2_Config+0x15c>)
 80077f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077f6:	f003 0303 	and.w	r3, r3, #3
 80077fa:	2b03      	cmp	r3, #3
 80077fc:	d101      	bne.n	8007802 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80077fe:	2301      	movs	r3, #1
 8007800:	e099      	b.n	8007936 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007802:	4b4f      	ldr	r3, [pc, #316]	; (8007940 <RCCEx_PLL2_Config+0x15c>)
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	4a4e      	ldr	r2, [pc, #312]	; (8007940 <RCCEx_PLL2_Config+0x15c>)
 8007808:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800780c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800780e:	f7f9 fd9b 	bl	8001348 <HAL_GetTick>
 8007812:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007814:	e008      	b.n	8007828 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007816:	f7f9 fd97 	bl	8001348 <HAL_GetTick>
 800781a:	4602      	mov	r2, r0
 800781c:	68bb      	ldr	r3, [r7, #8]
 800781e:	1ad3      	subs	r3, r2, r3
 8007820:	2b02      	cmp	r3, #2
 8007822:	d901      	bls.n	8007828 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007824:	2303      	movs	r3, #3
 8007826:	e086      	b.n	8007936 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007828:	4b45      	ldr	r3, [pc, #276]	; (8007940 <RCCEx_PLL2_Config+0x15c>)
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007830:	2b00      	cmp	r3, #0
 8007832:	d1f0      	bne.n	8007816 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007834:	4b42      	ldr	r3, [pc, #264]	; (8007940 <RCCEx_PLL2_Config+0x15c>)
 8007836:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007838:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	031b      	lsls	r3, r3, #12
 8007842:	493f      	ldr	r1, [pc, #252]	; (8007940 <RCCEx_PLL2_Config+0x15c>)
 8007844:	4313      	orrs	r3, r2
 8007846:	628b      	str	r3, [r1, #40]	; 0x28
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	685b      	ldr	r3, [r3, #4]
 800784c:	3b01      	subs	r3, #1
 800784e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	689b      	ldr	r3, [r3, #8]
 8007856:	3b01      	subs	r3, #1
 8007858:	025b      	lsls	r3, r3, #9
 800785a:	b29b      	uxth	r3, r3
 800785c:	431a      	orrs	r2, r3
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	68db      	ldr	r3, [r3, #12]
 8007862:	3b01      	subs	r3, #1
 8007864:	041b      	lsls	r3, r3, #16
 8007866:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800786a:	431a      	orrs	r2, r3
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	691b      	ldr	r3, [r3, #16]
 8007870:	3b01      	subs	r3, #1
 8007872:	061b      	lsls	r3, r3, #24
 8007874:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007878:	4931      	ldr	r1, [pc, #196]	; (8007940 <RCCEx_PLL2_Config+0x15c>)
 800787a:	4313      	orrs	r3, r2
 800787c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800787e:	4b30      	ldr	r3, [pc, #192]	; (8007940 <RCCEx_PLL2_Config+0x15c>)
 8007880:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007882:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	695b      	ldr	r3, [r3, #20]
 800788a:	492d      	ldr	r1, [pc, #180]	; (8007940 <RCCEx_PLL2_Config+0x15c>)
 800788c:	4313      	orrs	r3, r2
 800788e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007890:	4b2b      	ldr	r3, [pc, #172]	; (8007940 <RCCEx_PLL2_Config+0x15c>)
 8007892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007894:	f023 0220 	bic.w	r2, r3, #32
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	699b      	ldr	r3, [r3, #24]
 800789c:	4928      	ldr	r1, [pc, #160]	; (8007940 <RCCEx_PLL2_Config+0x15c>)
 800789e:	4313      	orrs	r3, r2
 80078a0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80078a2:	4b27      	ldr	r3, [pc, #156]	; (8007940 <RCCEx_PLL2_Config+0x15c>)
 80078a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078a6:	4a26      	ldr	r2, [pc, #152]	; (8007940 <RCCEx_PLL2_Config+0x15c>)
 80078a8:	f023 0310 	bic.w	r3, r3, #16
 80078ac:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80078ae:	4b24      	ldr	r3, [pc, #144]	; (8007940 <RCCEx_PLL2_Config+0x15c>)
 80078b0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80078b2:	4b24      	ldr	r3, [pc, #144]	; (8007944 <RCCEx_PLL2_Config+0x160>)
 80078b4:	4013      	ands	r3, r2
 80078b6:	687a      	ldr	r2, [r7, #4]
 80078b8:	69d2      	ldr	r2, [r2, #28]
 80078ba:	00d2      	lsls	r2, r2, #3
 80078bc:	4920      	ldr	r1, [pc, #128]	; (8007940 <RCCEx_PLL2_Config+0x15c>)
 80078be:	4313      	orrs	r3, r2
 80078c0:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80078c2:	4b1f      	ldr	r3, [pc, #124]	; (8007940 <RCCEx_PLL2_Config+0x15c>)
 80078c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078c6:	4a1e      	ldr	r2, [pc, #120]	; (8007940 <RCCEx_PLL2_Config+0x15c>)
 80078c8:	f043 0310 	orr.w	r3, r3, #16
 80078cc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80078ce:	683b      	ldr	r3, [r7, #0]
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d106      	bne.n	80078e2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80078d4:	4b1a      	ldr	r3, [pc, #104]	; (8007940 <RCCEx_PLL2_Config+0x15c>)
 80078d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078d8:	4a19      	ldr	r2, [pc, #100]	; (8007940 <RCCEx_PLL2_Config+0x15c>)
 80078da:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80078de:	62d3      	str	r3, [r2, #44]	; 0x2c
 80078e0:	e00f      	b.n	8007902 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80078e2:	683b      	ldr	r3, [r7, #0]
 80078e4:	2b01      	cmp	r3, #1
 80078e6:	d106      	bne.n	80078f6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80078e8:	4b15      	ldr	r3, [pc, #84]	; (8007940 <RCCEx_PLL2_Config+0x15c>)
 80078ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078ec:	4a14      	ldr	r2, [pc, #80]	; (8007940 <RCCEx_PLL2_Config+0x15c>)
 80078ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80078f2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80078f4:	e005      	b.n	8007902 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80078f6:	4b12      	ldr	r3, [pc, #72]	; (8007940 <RCCEx_PLL2_Config+0x15c>)
 80078f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078fa:	4a11      	ldr	r2, [pc, #68]	; (8007940 <RCCEx_PLL2_Config+0x15c>)
 80078fc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007900:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007902:	4b0f      	ldr	r3, [pc, #60]	; (8007940 <RCCEx_PLL2_Config+0x15c>)
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	4a0e      	ldr	r2, [pc, #56]	; (8007940 <RCCEx_PLL2_Config+0x15c>)
 8007908:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800790c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800790e:	f7f9 fd1b 	bl	8001348 <HAL_GetTick>
 8007912:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007914:	e008      	b.n	8007928 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007916:	f7f9 fd17 	bl	8001348 <HAL_GetTick>
 800791a:	4602      	mov	r2, r0
 800791c:	68bb      	ldr	r3, [r7, #8]
 800791e:	1ad3      	subs	r3, r2, r3
 8007920:	2b02      	cmp	r3, #2
 8007922:	d901      	bls.n	8007928 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007924:	2303      	movs	r3, #3
 8007926:	e006      	b.n	8007936 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007928:	4b05      	ldr	r3, [pc, #20]	; (8007940 <RCCEx_PLL2_Config+0x15c>)
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007930:	2b00      	cmp	r3, #0
 8007932:	d0f0      	beq.n	8007916 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007934:	7bfb      	ldrb	r3, [r7, #15]
}
 8007936:	4618      	mov	r0, r3
 8007938:	3710      	adds	r7, #16
 800793a:	46bd      	mov	sp, r7
 800793c:	bd80      	pop	{r7, pc}
 800793e:	bf00      	nop
 8007940:	58024400 	.word	0x58024400
 8007944:	ffff0007 	.word	0xffff0007

08007948 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007948:	b580      	push	{r7, lr}
 800794a:	b084      	sub	sp, #16
 800794c:	af00      	add	r7, sp, #0
 800794e:	6078      	str	r0, [r7, #4]
 8007950:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007952:	2300      	movs	r3, #0
 8007954:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007956:	4b53      	ldr	r3, [pc, #332]	; (8007aa4 <RCCEx_PLL3_Config+0x15c>)
 8007958:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800795a:	f003 0303 	and.w	r3, r3, #3
 800795e:	2b03      	cmp	r3, #3
 8007960:	d101      	bne.n	8007966 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007962:	2301      	movs	r3, #1
 8007964:	e099      	b.n	8007a9a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007966:	4b4f      	ldr	r3, [pc, #316]	; (8007aa4 <RCCEx_PLL3_Config+0x15c>)
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	4a4e      	ldr	r2, [pc, #312]	; (8007aa4 <RCCEx_PLL3_Config+0x15c>)
 800796c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007970:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007972:	f7f9 fce9 	bl	8001348 <HAL_GetTick>
 8007976:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007978:	e008      	b.n	800798c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800797a:	f7f9 fce5 	bl	8001348 <HAL_GetTick>
 800797e:	4602      	mov	r2, r0
 8007980:	68bb      	ldr	r3, [r7, #8]
 8007982:	1ad3      	subs	r3, r2, r3
 8007984:	2b02      	cmp	r3, #2
 8007986:	d901      	bls.n	800798c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007988:	2303      	movs	r3, #3
 800798a:	e086      	b.n	8007a9a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800798c:	4b45      	ldr	r3, [pc, #276]	; (8007aa4 <RCCEx_PLL3_Config+0x15c>)
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007994:	2b00      	cmp	r3, #0
 8007996:	d1f0      	bne.n	800797a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007998:	4b42      	ldr	r3, [pc, #264]	; (8007aa4 <RCCEx_PLL3_Config+0x15c>)
 800799a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800799c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	051b      	lsls	r3, r3, #20
 80079a6:	493f      	ldr	r1, [pc, #252]	; (8007aa4 <RCCEx_PLL3_Config+0x15c>)
 80079a8:	4313      	orrs	r3, r2
 80079aa:	628b      	str	r3, [r1, #40]	; 0x28
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	685b      	ldr	r3, [r3, #4]
 80079b0:	3b01      	subs	r3, #1
 80079b2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	689b      	ldr	r3, [r3, #8]
 80079ba:	3b01      	subs	r3, #1
 80079bc:	025b      	lsls	r3, r3, #9
 80079be:	b29b      	uxth	r3, r3
 80079c0:	431a      	orrs	r2, r3
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	68db      	ldr	r3, [r3, #12]
 80079c6:	3b01      	subs	r3, #1
 80079c8:	041b      	lsls	r3, r3, #16
 80079ca:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80079ce:	431a      	orrs	r2, r3
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	691b      	ldr	r3, [r3, #16]
 80079d4:	3b01      	subs	r3, #1
 80079d6:	061b      	lsls	r3, r3, #24
 80079d8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80079dc:	4931      	ldr	r1, [pc, #196]	; (8007aa4 <RCCEx_PLL3_Config+0x15c>)
 80079de:	4313      	orrs	r3, r2
 80079e0:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80079e2:	4b30      	ldr	r3, [pc, #192]	; (8007aa4 <RCCEx_PLL3_Config+0x15c>)
 80079e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079e6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	695b      	ldr	r3, [r3, #20]
 80079ee:	492d      	ldr	r1, [pc, #180]	; (8007aa4 <RCCEx_PLL3_Config+0x15c>)
 80079f0:	4313      	orrs	r3, r2
 80079f2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80079f4:	4b2b      	ldr	r3, [pc, #172]	; (8007aa4 <RCCEx_PLL3_Config+0x15c>)
 80079f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079f8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	699b      	ldr	r3, [r3, #24]
 8007a00:	4928      	ldr	r1, [pc, #160]	; (8007aa4 <RCCEx_PLL3_Config+0x15c>)
 8007a02:	4313      	orrs	r3, r2
 8007a04:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007a06:	4b27      	ldr	r3, [pc, #156]	; (8007aa4 <RCCEx_PLL3_Config+0x15c>)
 8007a08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a0a:	4a26      	ldr	r2, [pc, #152]	; (8007aa4 <RCCEx_PLL3_Config+0x15c>)
 8007a0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007a10:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007a12:	4b24      	ldr	r3, [pc, #144]	; (8007aa4 <RCCEx_PLL3_Config+0x15c>)
 8007a14:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007a16:	4b24      	ldr	r3, [pc, #144]	; (8007aa8 <RCCEx_PLL3_Config+0x160>)
 8007a18:	4013      	ands	r3, r2
 8007a1a:	687a      	ldr	r2, [r7, #4]
 8007a1c:	69d2      	ldr	r2, [r2, #28]
 8007a1e:	00d2      	lsls	r2, r2, #3
 8007a20:	4920      	ldr	r1, [pc, #128]	; (8007aa4 <RCCEx_PLL3_Config+0x15c>)
 8007a22:	4313      	orrs	r3, r2
 8007a24:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007a26:	4b1f      	ldr	r3, [pc, #124]	; (8007aa4 <RCCEx_PLL3_Config+0x15c>)
 8007a28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a2a:	4a1e      	ldr	r2, [pc, #120]	; (8007aa4 <RCCEx_PLL3_Config+0x15c>)
 8007a2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007a30:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8007a32:	683b      	ldr	r3, [r7, #0]
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d106      	bne.n	8007a46 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007a38:	4b1a      	ldr	r3, [pc, #104]	; (8007aa4 <RCCEx_PLL3_Config+0x15c>)
 8007a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a3c:	4a19      	ldr	r2, [pc, #100]	; (8007aa4 <RCCEx_PLL3_Config+0x15c>)
 8007a3e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007a42:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007a44:	e00f      	b.n	8007a66 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8007a46:	683b      	ldr	r3, [r7, #0]
 8007a48:	2b01      	cmp	r3, #1
 8007a4a:	d106      	bne.n	8007a5a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007a4c:	4b15      	ldr	r3, [pc, #84]	; (8007aa4 <RCCEx_PLL3_Config+0x15c>)
 8007a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a50:	4a14      	ldr	r2, [pc, #80]	; (8007aa4 <RCCEx_PLL3_Config+0x15c>)
 8007a52:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007a56:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007a58:	e005      	b.n	8007a66 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007a5a:	4b12      	ldr	r3, [pc, #72]	; (8007aa4 <RCCEx_PLL3_Config+0x15c>)
 8007a5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a5e:	4a11      	ldr	r2, [pc, #68]	; (8007aa4 <RCCEx_PLL3_Config+0x15c>)
 8007a60:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007a64:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007a66:	4b0f      	ldr	r3, [pc, #60]	; (8007aa4 <RCCEx_PLL3_Config+0x15c>)
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	4a0e      	ldr	r2, [pc, #56]	; (8007aa4 <RCCEx_PLL3_Config+0x15c>)
 8007a6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007a70:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007a72:	f7f9 fc69 	bl	8001348 <HAL_GetTick>
 8007a76:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007a78:	e008      	b.n	8007a8c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8007a7a:	f7f9 fc65 	bl	8001348 <HAL_GetTick>
 8007a7e:	4602      	mov	r2, r0
 8007a80:	68bb      	ldr	r3, [r7, #8]
 8007a82:	1ad3      	subs	r3, r2, r3
 8007a84:	2b02      	cmp	r3, #2
 8007a86:	d901      	bls.n	8007a8c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007a88:	2303      	movs	r3, #3
 8007a8a:	e006      	b.n	8007a9a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007a8c:	4b05      	ldr	r3, [pc, #20]	; (8007aa4 <RCCEx_PLL3_Config+0x15c>)
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d0f0      	beq.n	8007a7a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007a98:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a9a:	4618      	mov	r0, r3
 8007a9c:	3710      	adds	r7, #16
 8007a9e:	46bd      	mov	sp, r7
 8007aa0:	bd80      	pop	{r7, pc}
 8007aa2:	bf00      	nop
 8007aa4:	58024400 	.word	0x58024400
 8007aa8:	ffff0007 	.word	0xffff0007

08007aac <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8007aac:	b580      	push	{r7, lr}
 8007aae:	b08a      	sub	sp, #40	; 0x28
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	6078      	str	r0, [r7, #4]
  uint32_t ckstr_bits;
  uint32_t syncen_bits;
  SAI_TypeDef *SaiBaseAddress;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d101      	bne.n	8007abe <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 8007aba:	2301      	movs	r3, #1
 8007abc:	e283      	b.n	8007fc6 <HAL_SAI_Init+0x51a>
  assert_param(IS_SAI_BLOCK_FIRST_BIT(hsai->Init.FirstBit));
  assert_param(IS_SAI_BLOCK_CLOCK_STROBING(hsai->Init.ClockStrobing));
  assert_param(IS_SAI_BLOCK_SYNCHRO(hsai->Init.Synchro));
#if defined(SAI_VER_V2_X) 
  /* SAI Peripheral version depends on STM32H7 device revision ID */
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 8007abe:	f7f9 fc4f 	bl	8001360 <HAL_GetREVID>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007ac8:	2b01      	cmp	r3, #1
 8007aca:	d113      	bne.n	8007af4 <HAL_SAI_Init+0x48>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 or SAI4 sub-block A, in master RX mode with free protocol */
#if defined(SAI4)
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	4a94      	ldr	r2, [pc, #592]	; (8007d24 <HAL_SAI_Init+0x278>)
 8007ad2:	4293      	cmp	r3, r2
 8007ad4:	d004      	beq.n	8007ae0 <HAL_SAI_Init+0x34>
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	4a93      	ldr	r2, [pc, #588]	; (8007d28 <HAL_SAI_Init+0x27c>)
 8007adc:	4293      	cmp	r3, r2
 8007ade:	d107      	bne.n	8007af0 <HAL_SAI_Init+0x44>
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	685b      	ldr	r3, [r3, #4]
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 8007ae4:	2b01      	cmp	r3, #1
 8007ae6:	d103      	bne.n	8007af0 <HAL_SAI_Init+0x44>
         (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d001      	beq.n	8007af4 <HAL_SAI_Init+0x48>
    {
      return HAL_ERROR;
 8007af0:	2301      	movs	r3, #1
 8007af2:	e268      	b.n	8007fc6 <HAL_SAI_Init+0x51a>
    }
#endif /* SAI4 */
  }

  /* Get the SAI base address according to the SAI handle */
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	4a8a      	ldr	r2, [pc, #552]	; (8007d24 <HAL_SAI_Init+0x278>)
 8007afa:	4293      	cmp	r3, r2
 8007afc:	d004      	beq.n	8007b08 <HAL_SAI_Init+0x5c>
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	4a8a      	ldr	r2, [pc, #552]	; (8007d2c <HAL_SAI_Init+0x280>)
 8007b04:	4293      	cmp	r3, r2
 8007b06:	d102      	bne.n	8007b0e <HAL_SAI_Init+0x62>
  {
    SaiBaseAddress = SAI1;
 8007b08:	4b89      	ldr	r3, [pc, #548]	; (8007d30 <HAL_SAI_Init+0x284>)
 8007b0a:	61bb      	str	r3, [r7, #24]
 8007b0c:	e028      	b.n	8007b60 <HAL_SAI_Init+0xb4>
  }
#if defined(SAI2)
  else if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	4a88      	ldr	r2, [pc, #544]	; (8007d34 <HAL_SAI_Init+0x288>)
 8007b14:	4293      	cmp	r3, r2
 8007b16:	d004      	beq.n	8007b22 <HAL_SAI_Init+0x76>
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	4a86      	ldr	r2, [pc, #536]	; (8007d38 <HAL_SAI_Init+0x28c>)
 8007b1e:	4293      	cmp	r3, r2
 8007b20:	d102      	bne.n	8007b28 <HAL_SAI_Init+0x7c>
  {
    SaiBaseAddress = SAI2;
 8007b22:	4b86      	ldr	r3, [pc, #536]	; (8007d3c <HAL_SAI_Init+0x290>)
 8007b24:	61bb      	str	r3, [r7, #24]
 8007b26:	e01b      	b.n	8007b60 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI2 */
#if defined(SAI3)
  else if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	4a84      	ldr	r2, [pc, #528]	; (8007d40 <HAL_SAI_Init+0x294>)
 8007b2e:	4293      	cmp	r3, r2
 8007b30:	d004      	beq.n	8007b3c <HAL_SAI_Init+0x90>
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	4a83      	ldr	r2, [pc, #524]	; (8007d44 <HAL_SAI_Init+0x298>)
 8007b38:	4293      	cmp	r3, r2
 8007b3a:	d102      	bne.n	8007b42 <HAL_SAI_Init+0x96>
  {
    SaiBaseAddress = SAI3;
 8007b3c:	4b82      	ldr	r3, [pc, #520]	; (8007d48 <HAL_SAI_Init+0x29c>)
 8007b3e:	61bb      	str	r3, [r7, #24]
 8007b40:	e00e      	b.n	8007b60 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI3 */
#if defined(SAI4)
  else if ((hsai->Instance == SAI4_Block_A) || (hsai->Instance == SAI4_Block_B))
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	4a78      	ldr	r2, [pc, #480]	; (8007d28 <HAL_SAI_Init+0x27c>)
 8007b48:	4293      	cmp	r3, r2
 8007b4a:	d004      	beq.n	8007b56 <HAL_SAI_Init+0xaa>
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	4a7e      	ldr	r2, [pc, #504]	; (8007d4c <HAL_SAI_Init+0x2a0>)
 8007b52:	4293      	cmp	r3, r2
 8007b54:	d102      	bne.n	8007b5c <HAL_SAI_Init+0xb0>
  {
    SaiBaseAddress = SAI4;
 8007b56:	4b7e      	ldr	r3, [pc, #504]	; (8007d50 <HAL_SAI_Init+0x2a4>)
 8007b58:	61bb      	str	r3, [r7, #24]
 8007b5a:	e001      	b.n	8007b60 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI4 */
  else
  {
    return HAL_ERROR;
 8007b5c:	2301      	movs	r3, #1
 8007b5e:	e232      	b.n	8007fc6 <HAL_SAI_Init+0x51a>
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 8007b66:	b2db      	uxtb	r3, r3
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d106      	bne.n	8007b7a <HAL_SAI_Init+0xce>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	2200      	movs	r2, #0
 8007b70:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8007b74:	6878      	ldr	r0, [r7, #4]
 8007b76:	f7f9 fa49 	bl	800100c <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if(SAI_Disable(hsai) != HAL_OK)
 8007b7a:	6878      	ldr	r0, [r7, #4]
 8007b7c:	f000 fb0c 	bl	8008198 <SAI_Disable>
 8007b80:	4603      	mov	r3, r0
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d001      	beq.n	8007b8a <HAL_SAI_Init+0xde>
  {
    return HAL_ERROR;
 8007b86:	2301      	movs	r3, #1
 8007b88:	e21d      	b.n	8007fc6 <HAL_SAI_Init+0x51a>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	2202      	movs	r2, #2
 8007b8e:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	68db      	ldr	r3, [r3, #12]
 8007b96:	2b02      	cmp	r3, #2
 8007b98:	d00c      	beq.n	8007bb4 <HAL_SAI_Init+0x108>
 8007b9a:	2b02      	cmp	r3, #2
 8007b9c:	d80d      	bhi.n	8007bba <HAL_SAI_Init+0x10e>
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d002      	beq.n	8007ba8 <HAL_SAI_Init+0xfc>
 8007ba2:	2b01      	cmp	r3, #1
 8007ba4:	d003      	beq.n	8007bae <HAL_SAI_Init+0x102>
 8007ba6:	e008      	b.n	8007bba <HAL_SAI_Init+0x10e>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 8007ba8:	2300      	movs	r3, #0
 8007baa:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8007bac:	e008      	b.n	8007bc0 <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8007bae:	2310      	movs	r3, #16
 8007bb0:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8007bb2:	e005      	b.n	8007bc0 <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8007bb4:	2320      	movs	r3, #32
 8007bb6:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8007bb8:	e002      	b.n	8007bc0 <HAL_SAI_Init+0x114>
    default:
      tmpregisterGCR = 0;
 8007bba:	2300      	movs	r3, #0
 8007bbc:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8007bbe:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	689b      	ldr	r3, [r3, #8]
 8007bc4:	2b05      	cmp	r3, #5
 8007bc6:	d832      	bhi.n	8007c2e <HAL_SAI_Init+0x182>
 8007bc8:	a201      	add	r2, pc, #4	; (adr r2, 8007bd0 <HAL_SAI_Init+0x124>)
 8007bca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bce:	bf00      	nop
 8007bd0:	08007be9 	.word	0x08007be9
 8007bd4:	08007bef 	.word	0x08007bef
 8007bd8:	08007bf7 	.word	0x08007bf7
 8007bdc:	08007bff 	.word	0x08007bff
 8007be0:	08007c0f 	.word	0x08007c0f
 8007be4:	08007c1f 	.word	0x08007c1f
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 8007be8:	2300      	movs	r3, #0
 8007bea:	61fb      	str	r3, [r7, #28]
      break;
 8007bec:	e022      	b.n	8007c34 <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8007bee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007bf2:	61fb      	str	r3, [r7, #28]
      break;
 8007bf4:	e01e      	b.n	8007c34 <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8007bf6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007bfa:	61fb      	str	r3, [r7, #28]
      break;
 8007bfc:	e01a      	b.n	8007c34 <HAL_SAI_Init+0x188>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8007bfe:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007c02:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8007c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c06:	f043 0301 	orr.w	r3, r3, #1
 8007c0a:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8007c0c:	e012      	b.n	8007c34 <HAL_SAI_Init+0x188>
#endif /* SAI2 */
#if defined(SAI3)
    case SAI_SYNCHRONOUS_EXT_SAI3 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8007c0e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007c12:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
 8007c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c16:	f043 0302 	orr.w	r3, r3, #2
 8007c1a:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8007c1c:	e00a      	b.n	8007c34 <HAL_SAI_Init+0x188>
#endif /* SAI3 */
#if defined(SAI4)
    case SAI_SYNCHRONOUS_EXT_SAI4 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8007c1e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007c22:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
 8007c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c26:	f043 0303 	orr.w	r3, r3, #3
 8007c2a:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8007c2c:	e002      	b.n	8007c34 <HAL_SAI_Init+0x188>
#endif /* SAI4 */
    default:
      syncen_bits = 0;
 8007c2e:	2300      	movs	r3, #0
 8007c30:	61fb      	str	r3, [r7, #28]
      break;
 8007c32:	bf00      	nop
  }

  /* Set the SAI Block Synchro Configuration */
  SaiBaseAddress->GCR = tmpregisterGCR;
 8007c34:	69bb      	ldr	r3, [r7, #24]
 8007c36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c38:	601a      	str	r2, [r3, #0]

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	6a1b      	ldr	r3, [r3, #32]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	f000 80ba 	beq.w	8007db8 <HAL_SAI_Init+0x30c>
  {
    uint32_t freq = 0;
 8007c44:	2300      	movs	r3, #0
 8007c46:	617b      	str	r3, [r7, #20]
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	4a35      	ldr	r2, [pc, #212]	; (8007d24 <HAL_SAI_Init+0x278>)
 8007c4e:	4293      	cmp	r3, r2
 8007c50:	d004      	beq.n	8007c5c <HAL_SAI_Init+0x1b0>
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	4a35      	ldr	r2, [pc, #212]	; (8007d2c <HAL_SAI_Init+0x280>)
 8007c58:	4293      	cmp	r3, r2
 8007c5a:	d104      	bne.n	8007c66 <HAL_SAI_Init+0x1ba>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8007c5c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8007c60:	f7fe fcde 	bl	8006620 <HAL_RCCEx_GetPeriphCLKFreq>
 8007c64:	6178      	str	r0, [r7, #20]
    }

#if defined(SAI2)
#if defined(RCC_PERIPHCLK_SAI2)
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	4a32      	ldr	r2, [pc, #200]	; (8007d34 <HAL_SAI_Init+0x288>)
 8007c6c:	4293      	cmp	r3, r2
 8007c6e:	d004      	beq.n	8007c7a <HAL_SAI_Init+0x1ce>
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	4a30      	ldr	r2, [pc, #192]	; (8007d38 <HAL_SAI_Init+0x28c>)
 8007c76:	4293      	cmp	r3, r2
 8007c78:	d104      	bne.n	8007c84 <HAL_SAI_Init+0x1d8>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8007c7a:	f44f 7000 	mov.w	r0, #512	; 0x200
 8007c7e:	f7fe fccf 	bl	8006620 <HAL_RCCEx_GetPeriphCLKFreq>
 8007c82:	6178      	str	r0, [r7, #20]
    }
#endif /* RCC_PERIPHCLK_SAI2 */
#endif /* SAI2 */

#if defined(SAI3)
    if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	4a2d      	ldr	r2, [pc, #180]	; (8007d40 <HAL_SAI_Init+0x294>)
 8007c8a:	4293      	cmp	r3, r2
 8007c8c:	d004      	beq.n	8007c98 <HAL_SAI_Init+0x1ec>
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	4a2c      	ldr	r2, [pc, #176]	; (8007d44 <HAL_SAI_Init+0x298>)
 8007c94:	4293      	cmp	r3, r2
 8007c96:	d104      	bne.n	8007ca2 <HAL_SAI_Init+0x1f6>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
 8007c98:	f44f 7000 	mov.w	r0, #512	; 0x200
 8007c9c:	f7fe fcc0 	bl	8006620 <HAL_RCCEx_GetPeriphCLKFreq>
 8007ca0:	6178      	str	r0, [r7, #20]
    }
#endif /* SAI3 */
#if defined(SAI4)
    if (hsai->Instance == SAI4_Block_A)
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	4a20      	ldr	r2, [pc, #128]	; (8007d28 <HAL_SAI_Init+0x27c>)
 8007ca8:	4293      	cmp	r3, r2
 8007caa:	d104      	bne.n	8007cb6 <HAL_SAI_Init+0x20a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
 8007cac:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8007cb0:	f7fe fcb6 	bl	8006620 <HAL_RCCEx_GetPeriphCLKFreq>
 8007cb4:	6178      	str	r0, [r7, #20]
    }
    if (hsai->Instance == SAI4_Block_B)
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	4a24      	ldr	r2, [pc, #144]	; (8007d4c <HAL_SAI_Init+0x2a0>)
 8007cbc:	4293      	cmp	r3, r2
 8007cbe:	d104      	bne.n	8007cca <HAL_SAI_Init+0x21e>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
 8007cc0:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8007cc4:	f7fe fcac 	bl	8006620 <HAL_RCCEx_GetPeriphCLKFreq>
 8007cc8:	6178      	str	r0, [r7, #20]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	699b      	ldr	r3, [r3, #24]
 8007cce:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007cd2:	d120      	bne.n	8007d16 <HAL_SAI_Init+0x26a>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007cd8:	2b04      	cmp	r3, #4
 8007cda:	d102      	bne.n	8007ce2 <HAL_SAI_Init+0x236>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = 64U;
 8007cdc:	2340      	movs	r3, #64	; 0x40
 8007cde:	60fb      	str	r3, [r7, #12]
 8007ce0:	e00a      	b.n	8007cf8 <HAL_SAI_Init+0x24c>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ce6:	2b08      	cmp	r3, #8
 8007ce8:	d103      	bne.n	8007cf2 <HAL_SAI_Init+0x246>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = 256U;
 8007cea:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007cee:	60fb      	str	r3, [r7, #12]
 8007cf0:	e002      	b.n	8007cf8 <HAL_SAI_Init+0x24c>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007cf6:	60fb      	str	r3, [r7, #12]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 8007cf8:	697a      	ldr	r2, [r7, #20]
 8007cfa:	4613      	mov	r3, r2
 8007cfc:	009b      	lsls	r3, r3, #2
 8007cfe:	4413      	add	r3, r2
 8007d00:	005b      	lsls	r3, r3, #1
 8007d02:	4619      	mov	r1, r3
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	6a1b      	ldr	r3, [r3, #32]
 8007d08:	68fa      	ldr	r2, [r7, #12]
 8007d0a:	fb02 f303 	mul.w	r3, r2, r3
 8007d0e:	fbb1 f3f3 	udiv	r3, r1, r3
 8007d12:	613b      	str	r3, [r7, #16]
 8007d14:	e02f      	b.n	8007d76 <HAL_SAI_Init+0x2ca>
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d1a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007d1e:	d119      	bne.n	8007d54 <HAL_SAI_Init+0x2a8>
 8007d20:	2302      	movs	r3, #2
 8007d22:	e018      	b.n	8007d56 <HAL_SAI_Init+0x2aa>
 8007d24:	40015804 	.word	0x40015804
 8007d28:	58005404 	.word	0x58005404
 8007d2c:	40015824 	.word	0x40015824
 8007d30:	40015800 	.word	0x40015800
 8007d34:	40015c04 	.word	0x40015c04
 8007d38:	40015c24 	.word	0x40015c24
 8007d3c:	40015c00 	.word	0x40015c00
 8007d40:	40016004 	.word	0x40016004
 8007d44:	40016024 	.word	0x40016024
 8007d48:	40016000 	.word	0x40016000
 8007d4c:	58005424 	.word	0x58005424
 8007d50:	58005400 	.word	0x58005400
 8007d54:	2301      	movs	r3, #1
 8007d56:	60bb      	str	r3, [r7, #8]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 8007d58:	697a      	ldr	r2, [r7, #20]
 8007d5a:	4613      	mov	r3, r2
 8007d5c:	009b      	lsls	r3, r3, #2
 8007d5e:	4413      	add	r3, r2
 8007d60:	005b      	lsls	r3, r3, #1
 8007d62:	4619      	mov	r1, r3
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	6a1b      	ldr	r3, [r3, #32]
 8007d68:	68ba      	ldr	r2, [r7, #8]
 8007d6a:	fb02 f303 	mul.w	r3, r2, r3
 8007d6e:	021b      	lsls	r3, r3, #8
 8007d70:	fbb1 f3f3 	udiv	r3, r1, r3
 8007d74:	613b      	str	r3, [r7, #16]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 8007d76:	693b      	ldr	r3, [r7, #16]
 8007d78:	4a95      	ldr	r2, [pc, #596]	; (8007fd0 <HAL_SAI_Init+0x524>)
 8007d7a:	fba2 2303 	umull	r2, r3, r2, r3
 8007d7e:	08da      	lsrs	r2, r3, #3
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	625a      	str	r2, [r3, #36]	; 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 8007d84:	6939      	ldr	r1, [r7, #16]
 8007d86:	4b92      	ldr	r3, [pc, #584]	; (8007fd0 <HAL_SAI_Init+0x524>)
 8007d88:	fba3 2301 	umull	r2, r3, r3, r1
 8007d8c:	08da      	lsrs	r2, r3, #3
 8007d8e:	4613      	mov	r3, r2
 8007d90:	009b      	lsls	r3, r3, #2
 8007d92:	4413      	add	r3, r2
 8007d94:	005b      	lsls	r3, r3, #1
 8007d96:	1aca      	subs	r2, r1, r3
 8007d98:	2a08      	cmp	r2, #8
 8007d9a:	d904      	bls.n	8007da6 <HAL_SAI_Init+0x2fa>
    {
      hsai->Init.Mckdiv += 1U;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007da0:	1c5a      	adds	r2, r3, #1
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007daa:	2b04      	cmp	r3, #4
 8007dac:	d104      	bne.n	8007db8 <HAL_SAI_Init+0x30c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007db2:	085a      	lsrs	r2, r3, #1
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	685b      	ldr	r3, [r3, #4]
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d003      	beq.n	8007dc8 <HAL_SAI_Init+0x31c>
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	685b      	ldr	r3, [r3, #4]
 8007dc4:	2b02      	cmp	r3, #2
 8007dc6:	d109      	bne.n	8007ddc <HAL_SAI_Init+0x330>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007dcc:	2b01      	cmp	r3, #1
 8007dce:	d101      	bne.n	8007dd4 <HAL_SAI_Init+0x328>
 8007dd0:	2300      	movs	r3, #0
 8007dd2:	e001      	b.n	8007dd8 <HAL_SAI_Init+0x32c>
 8007dd4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007dd8:	623b      	str	r3, [r7, #32]
 8007dda:	e008      	b.n	8007dee <HAL_SAI_Init+0x342>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007de0:	2b01      	cmp	r3, #1
 8007de2:	d102      	bne.n	8007dea <HAL_SAI_Init+0x33e>
 8007de4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007de8:	e000      	b.n	8007dec <HAL_SAI_Init+0x340>
 8007dea:	2300      	movs	r3, #0
 8007dec:	623b      	str	r3, [r7, #32]

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
#if defined(SAI_VER_V2_X) /* SAI Peripheral version depends on STM32H7 device revision ID */

  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 8007dee:	f7f9 fab7 	bl	8001360 <HAL_GetREVID>
 8007df2:	4603      	mov	r3, r0
 8007df4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007df8:	d331      	bcc.n	8007e5e <HAL_SAI_Init+0x3b2>
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	6819      	ldr	r1, [r3, #0]
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681a      	ldr	r2, [r3, #0]
 8007e04:	4b73      	ldr	r3, [pc, #460]	; (8007fd4 <HAL_SAI_Init+0x528>)
 8007e06:	400b      	ands	r3, r1
 8007e08:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                             SAI_xCR1_MCKEN);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	6819      	ldr	r1, [r3, #0]
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	685a      	ldr	r2, [r3, #4]
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e18:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007e1e:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e24:	431a      	orrs	r2, r3
 8007e26:	6a3b      	ldr	r3, [r7, #32]
 8007e28:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 8007e2a:	69fb      	ldr	r3, [r7, #28]
 8007e2c:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                            ckstr_bits | syncen_bits |                             \
 8007e32:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	695b      	ldr	r3, [r3, #20]
 8007e38:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8007e3e:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e44:	051b      	lsls	r3, r3, #20
 8007e46:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8007e4c:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	691b      	ldr	r3, [r3, #16]
 8007e52:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	430a      	orrs	r2, r1
 8007e5a:	601a      	str	r2, [r3, #0]
 8007e5c:	e02d      	b.n	8007eba <HAL_SAI_Init+0x40e>
  }
  else /* STM32H7xx Rev.Y */
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	6819      	ldr	r1, [r3, #0]
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681a      	ldr	r2, [r3, #0]
 8007e68:	4b5b      	ldr	r3, [pc, #364]	; (8007fd8 <HAL_SAI_Init+0x52c>)
 8007e6a:	400b      	ands	r3, r1
 8007e6c:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	6819      	ldr	r1, [r3, #0]
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	685a      	ldr	r2, [r3, #4]
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e7c:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007e82:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e88:	431a      	orrs	r2, r3
 8007e8a:	6a3b      	ldr	r3, [r7, #32]
 8007e8c:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 8007e8e:	69fb      	ldr	r3, [r7, #28]
 8007e90:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                            ckstr_bits | syncen_bits |                             \
 8007e96:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	695b      	ldr	r3, [r3, #20]
 8007e9c:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8007ea2:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ea8:	051b      	lsls	r3, r3, #20
 8007eaa:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling);
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8007eb0:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	430a      	orrs	r2, r1
 8007eb8:	601a      	str	r2, [r3, #0]
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
#endif /* SAI_VER_V2_X */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	6859      	ldr	r1, [r3, #4]
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681a      	ldr	r2, [r3, #0]
 8007ec4:	4b45      	ldr	r3, [pc, #276]	; (8007fdc <HAL_SAI_Init+0x530>)
 8007ec6:	400b      	ands	r3, r1
 8007ec8:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	6859      	ldr	r1, [r3, #4]
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	69da      	ldr	r2, [r3, #28]
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ed8:	431a      	orrs	r2, r3
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ede:	431a      	orrs	r2, r3
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	430a      	orrs	r2, r1
 8007ee6:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	6899      	ldr	r1, [r3, #8]
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681a      	ldr	r2, [r3, #0]
 8007ef2:	4b3b      	ldr	r3, [pc, #236]	; (8007fe0 <HAL_SAI_Init+0x534>)
 8007ef4:	400b      	ands	r3, r1
 8007ef6:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	6899      	ldr	r1, [r3, #8]
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f02:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8007f08:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                           hsai->FrameInit.FSOffset |
 8007f0e:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                           hsai->FrameInit.FSDefinition |
 8007f14:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f1a:	3b01      	subs	r3, #1
 8007f1c:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8007f1e:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	430a      	orrs	r2, r1
 8007f26:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	68d9      	ldr	r1, [r3, #12]
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681a      	ldr	r2, [r3, #0]
 8007f32:	f24f 0320 	movw	r3, #61472	; 0xf020
 8007f36:	400b      	ands	r3, r1
 8007f38:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	68d9      	ldr	r1, [r3, #12]
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007f48:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007f4e:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8007f50:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f56:	3b01      	subs	r3, #1
 8007f58:	021b      	lsls	r3, r3, #8
 8007f5a:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	430a      	orrs	r2, r1
 8007f62:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
#if defined(SAI4)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	4a1e      	ldr	r2, [pc, #120]	; (8007fe4 <HAL_SAI_Init+0x538>)
 8007f6a:	4293      	cmp	r3, r2
 8007f6c:	d004      	beq.n	8007f78 <HAL_SAI_Init+0x4cc>
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	4a1d      	ldr	r2, [pc, #116]	; (8007fe8 <HAL_SAI_Init+0x53c>)
 8007f74:	4293      	cmp	r3, r2
 8007f76:	d119      	bne.n	8007fac <HAL_SAI_Init+0x500>
#else
  if (hsai->Instance == SAI1_Block_A)
#endif /* SAI4 */
  {
    /* Disable PDM interface */
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 8007f78:	69bb      	ldr	r3, [r7, #24]
 8007f7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f7c:	f023 0201 	bic.w	r2, r3, #1
 8007f80:	69bb      	ldr	r3, [r7, #24]
 8007f82:	645a      	str	r2, [r3, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007f8a:	2b01      	cmp	r3, #1
 8007f8c:	d10e      	bne.n	8007fac <HAL_SAI_Init+0x500>
    {
      /* Configure and enable PDM interface */
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f96:	3b01      	subs	r3, #1
 8007f98:	011b      	lsls	r3, r3, #4
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8007f9a:	431a      	orrs	r2, r3
 8007f9c:	69bb      	ldr	r3, [r7, #24]
 8007f9e:	645a      	str	r2, [r3, #68]	; 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
 8007fa0:	69bb      	ldr	r3, [r7, #24]
 8007fa2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007fa4:	f043 0201 	orr.w	r2, r3, #1
 8007fa8:	69bb      	ldr	r3, [r7, #24]
 8007faa:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	2200      	movs	r2, #0
 8007fb0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	2201      	movs	r2, #1
 8007fb8:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	2200      	movs	r2, #0
 8007fc0:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

  return HAL_OK;
 8007fc4:	2300      	movs	r3, #0
}
 8007fc6:	4618      	mov	r0, r3
 8007fc8:	3728      	adds	r7, #40	; 0x28
 8007fca:	46bd      	mov	sp, r7
 8007fcc:	bd80      	pop	{r7, pc}
 8007fce:	bf00      	nop
 8007fd0:	cccccccd 	.word	0xcccccccd
 8007fd4:	f005c010 	.word	0xf005c010
 8007fd8:	f805c010 	.word	0xf805c010
 8007fdc:	ffff1ff0 	.word	0xffff1ff0
 8007fe0:	fff88000 	.word	0xfff88000
 8007fe4:	40015804 	.word	0x40015804
 8007fe8:	58005404 	.word	0x58005404

08007fec <HAL_SAI_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Receive_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 8007fec:	b580      	push	{r7, lr}
 8007fee:	b084      	sub	sp, #16
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	60f8      	str	r0, [r7, #12]
 8007ff4:	60b9      	str	r1, [r7, #8]
 8007ff6:	4613      	mov	r3, r2
 8007ff8:	80fb      	strh	r3, [r7, #6]

  if ((pData == NULL) || (Size == 0U))
 8007ffa:	68bb      	ldr	r3, [r7, #8]
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d002      	beq.n	8008006 <HAL_SAI_Receive_DMA+0x1a>
 8008000:	88fb      	ldrh	r3, [r7, #6]
 8008002:	2b00      	cmp	r3, #0
 8008004:	d101      	bne.n	800800a <HAL_SAI_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 8008006:	2301      	movs	r3, #1
 8008008:	e079      	b.n	80080fe <HAL_SAI_Receive_DMA+0x112>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 8008010:	b2db      	uxtb	r3, r3
 8008012:	2b01      	cmp	r3, #1
 8008014:	d172      	bne.n	80080fc <HAL_SAI_Receive_DMA+0x110>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800801c:	2b01      	cmp	r3, #1
 800801e:	d101      	bne.n	8008024 <HAL_SAI_Receive_DMA+0x38>
 8008020:	2302      	movs	r3, #2
 8008022:	e06c      	b.n	80080fe <HAL_SAI_Receive_DMA+0x112>
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	2201      	movs	r2, #1
 8008028:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    hsai->pBuffPtr = pData;
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	68ba      	ldr	r2, [r7, #8]
 8008030:	679a      	str	r2, [r3, #120]	; 0x78
    hsai->XferSize = Size;
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	88fa      	ldrh	r2, [r7, #6]
 8008036:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
    hsai->XferCount = Size;
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	88fa      	ldrh	r2, [r7, #6]
 800803e:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	2200      	movs	r2, #0
 8008046:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	2222      	movs	r2, #34	; 0x22
 800804e:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

    /* Set the SAI Rx DMA Half transfer complete callback */
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008058:	4a2b      	ldr	r2, [pc, #172]	; (8008108 <HAL_SAI_Receive_DMA+0x11c>)
 800805a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the SAI Rx DMA transfer complete callback */
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008062:	4a2a      	ldr	r2, [pc, #168]	; (800810c <HAL_SAI_Receive_DMA+0x120>)
 8008064:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800806c:	4a28      	ldr	r2, [pc, #160]	; (8008110 <HAL_SAI_Receive_DMA+0x124>)
 800806e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Rx abort callback */
    hsai->hdmarx->XferAbortCallback = NULL;
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008076:	2200      	movs	r2, #0
 8008078:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the Rx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	331c      	adds	r3, #28
 8008086:	4619      	mov	r1, r3
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800808c:	461a      	mov	r2, r3
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 8008094:	f7f9 fec6 	bl	8001e24 <HAL_DMA_Start_IT>
 8008098:	4603      	mov	r3, r0
 800809a:	2b00      	cmp	r3, #0
 800809c:	d005      	beq.n	80080aa <HAL_SAI_Receive_DMA+0xbe>
    {
      __HAL_UNLOCK(hsai);
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	2200      	movs	r2, #0
 80080a2:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      return  HAL_ERROR;
 80080a6:	2301      	movs	r3, #1
 80080a8:	e029      	b.n	80080fe <HAL_SAI_Receive_DMA+0x112>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 80080aa:	2100      	movs	r1, #0
 80080ac:	68f8      	ldr	r0, [r7, #12]
 80080ae:	f000 f83b 	bl	8008128 <SAI_InterruptFlag>
 80080b2:	4601      	mov	r1, r0
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	691a      	ldr	r2, [r3, #16]
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	430a      	orrs	r2, r1
 80080c0:	611a      	str	r2, [r3, #16]

    /* Enable SAI Rx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	681a      	ldr	r2, [r3, #0]
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80080d0:	601a      	str	r2, [r3, #0]

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d107      	bne.n	80080f0 <HAL_SAI_Receive_DMA+0x104>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	681a      	ldr	r2, [r3, #0]
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80080ee:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	2200      	movs	r2, #0
 80080f4:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    return HAL_OK;
 80080f8:	2300      	movs	r3, #0
 80080fa:	e000      	b.n	80080fe <HAL_SAI_Receive_DMA+0x112>
  }
  else
  {
    return HAL_BUSY;
 80080fc:	2302      	movs	r3, #2
  }
}
 80080fe:	4618      	mov	r0, r3
 8008100:	3710      	adds	r7, #16
 8008102:	46bd      	mov	sp, r7
 8008104:	bd80      	pop	{r7, pc}
 8008106:	bf00      	nop
 8008108:	0800826d 	.word	0x0800826d
 800810c:	0800820d 	.word	0x0800820d
 8008110:	08008289 	.word	0x08008289

08008114 <HAL_SAI_ErrorCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 8008114:	b480      	push	{r7}
 8008116:	b083      	sub	sp, #12
 8008118:	af00      	add	r7, sp, #0
 800811a:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_ErrorCallback could be implemented in the user file
   */
}
 800811c:	bf00      	nop
 800811e:	370c      	adds	r7, #12
 8008120:	46bd      	mov	sp, r7
 8008122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008126:	4770      	bx	lr

08008128 <SAI_InterruptFlag>:
  *              the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
  */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, SAI_ModeTypedef mode)
{
 8008128:	b480      	push	{r7}
 800812a:	b085      	sub	sp, #20
 800812c:	af00      	add	r7, sp, #0
 800812e:	6078      	str	r0, [r7, #4]
 8008130:	460b      	mov	r3, r1
 8008132:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 8008134:	2301      	movs	r3, #1
 8008136:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 8008138:	78fb      	ldrb	r3, [r7, #3]
 800813a:	2b01      	cmp	r3, #1
 800813c:	d103      	bne.n	8008146 <SAI_InterruptFlag+0x1e>
  {
    tmpIT |= SAI_IT_FREQ;
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	f043 0308 	orr.w	r3, r3, #8
 8008144:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800814a:	2b08      	cmp	r3, #8
 800814c:	d10b      	bne.n	8008166 <SAI_InterruptFlag+0x3e>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8008152:	2b03      	cmp	r3, #3
 8008154:	d003      	beq.n	800815e <SAI_InterruptFlag+0x36>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	685b      	ldr	r3, [r3, #4]
 800815a:	2b01      	cmp	r3, #1
 800815c:	d103      	bne.n	8008166 <SAI_InterruptFlag+0x3e>
  {
    tmpIT |= SAI_IT_CNRDY;
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	f043 0310 	orr.w	r3, r3, #16
 8008164:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	685b      	ldr	r3, [r3, #4]
 800816a:	2b03      	cmp	r3, #3
 800816c:	d003      	beq.n	8008176 <SAI_InterruptFlag+0x4e>
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	685b      	ldr	r3, [r3, #4]
 8008172:	2b02      	cmp	r3, #2
 8008174:	d104      	bne.n	8008180 <SAI_InterruptFlag+0x58>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800817c:	60fb      	str	r3, [r7, #12]
 800817e:	e003      	b.n	8008188 <SAI_InterruptFlag+0x60>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	f043 0304 	orr.w	r3, r3, #4
 8008186:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 8008188:	68fb      	ldr	r3, [r7, #12]
}
 800818a:	4618      	mov	r0, r3
 800818c:	3714      	adds	r7, #20
 800818e:	46bd      	mov	sp, r7
 8008190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008194:	4770      	bx	lr
	...

08008198 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8008198:	b480      	push	{r7}
 800819a:	b085      	sub	sp, #20
 800819c:	af00      	add	r7, sp, #0
 800819e:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 80081a0:	4b18      	ldr	r3, [pc, #96]	; (8008204 <SAI_Disable+0x6c>)
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	4a18      	ldr	r2, [pc, #96]	; (8008208 <SAI_Disable+0x70>)
 80081a6:	fba2 2303 	umull	r2, r3, r2, r3
 80081aa:	0b1b      	lsrs	r3, r3, #12
 80081ac:	009b      	lsls	r3, r3, #2
 80081ae:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 80081b0:	2300      	movs	r3, #0
 80081b2:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	681a      	ldr	r2, [r3, #0]
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80081c2:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d10a      	bne.n	80081e0 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80081d0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      status = HAL_TIMEOUT;
 80081da:	2303      	movs	r3, #3
 80081dc:	72fb      	strb	r3, [r7, #11]
      break;
 80081de:	e009      	b.n	80081f4 <SAI_Disable+0x5c>
    }
    count--;
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	3b01      	subs	r3, #1
 80081e4:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d1e7      	bne.n	80081c4 <SAI_Disable+0x2c>

  return status;
 80081f4:	7afb      	ldrb	r3, [r7, #11]
}
 80081f6:	4618      	mov	r0, r3
 80081f8:	3714      	adds	r7, #20
 80081fa:	46bd      	mov	sp, r7
 80081fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008200:	4770      	bx	lr
 8008202:	bf00      	nop
 8008204:	24000400 	.word	0x24000400
 8008208:	95cbec1b 	.word	0x95cbec1b

0800820c <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 800820c:	b580      	push	{r7, lr}
 800820e:	b084      	sub	sp, #16
 8008210:	af00      	add	r7, sp, #0
 8008212:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008218:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	69db      	ldr	r3, [r3, #28]
 800821e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008222:	d01c      	beq.n	800825e <SAI_DMARxCplt+0x52>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	681a      	ldr	r2, [r3, #0]
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8008232:	601a      	str	r2, [r3, #0]
    hsai->XferCount = 0;
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	2200      	movs	r2, #0
 8008238:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800823c:	2100      	movs	r1, #0
 800823e:	68f8      	ldr	r0, [r7, #12]
 8008240:	f7ff ff72 	bl	8008128 <SAI_InterruptFlag>
 8008244:	4603      	mov	r3, r0
 8008246:	43d9      	mvns	r1, r3
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	691a      	ldr	r2, [r3, #16]
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	400a      	ands	r2, r1
 8008254:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	2201      	movs	r2, #1
 800825a:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 800825e:	68f8      	ldr	r0, [r7, #12]
 8008260:	f7f8 fdb4 	bl	8000dcc <HAL_SAI_RxCpltCallback>
#endif
}
 8008264:	bf00      	nop
 8008266:	3710      	adds	r7, #16
 8008268:	46bd      	mov	sp, r7
 800826a:	bd80      	pop	{r7, pc}

0800826c <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800826c:	b580      	push	{r7, lr}
 800826e:	b084      	sub	sp, #16
 8008270:	af00      	add	r7, sp, #0
 8008272:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008278:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 800827a:	68f8      	ldr	r0, [r7, #12]
 800827c:	f7f8 fd96 	bl	8000dac <HAL_SAI_RxHalfCpltCallback>
#endif
}
 8008280:	bf00      	nop
 8008282:	3710      	adds	r7, #16
 8008284:	46bd      	mov	sp, r7
 8008286:	bd80      	pop	{r7, pc}

08008288 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 8008288:	b580      	push	{r7, lr}
 800828a:	b084      	sub	sp, #16
 800828c:	af00      	add	r7, sp, #0
 800828e:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008294:	60fb      	str	r3, [r7, #12]

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8008296:	6878      	ldr	r0, [r7, #4]
 8008298:	f7fb fcba 	bl	8003c10 <HAL_DMA_GetError>
 800829c:	4603      	mov	r3, r0
 800829e:	2b02      	cmp	r3, #2
 80082a0:	d01d      	beq.n	80082de <SAI_DMAError+0x56>
  {
    /* Set SAI error code */
    hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80082a8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	681a      	ldr	r2, [r3, #0]
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80082c0:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral */
    /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
    (void) SAI_Disable(hsai);
 80082c2:	68f8      	ldr	r0, [r7, #12]
 80082c4:	f7ff ff68 	bl	8008198 <SAI_Disable>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	2201      	movs	r2, #1
 80082cc:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	2200      	movs	r2, #0
 80082d4:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

    /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
    hsai->ErrorCallback(hsai);
#else
    HAL_SAI_ErrorCallback(hsai);
 80082d8:	68f8      	ldr	r0, [r7, #12]
 80082da:	f7ff ff1b 	bl	8008114 <HAL_SAI_ErrorCallback>
#endif
  }
}
 80082de:	bf00      	nop
 80082e0:	3710      	adds	r7, #16
 80082e2:	46bd      	mov	sp, r7
 80082e4:	bd80      	pop	{r7, pc}

080082e6 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80082e6:	b580      	push	{r7, lr}
 80082e8:	b082      	sub	sp, #8
 80082ea:	af00      	add	r7, sp, #0
 80082ec:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d101      	bne.n	80082f8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80082f4:	2301      	movs	r3, #1
 80082f6:	e042      	b.n	800837e <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d106      	bne.n	8008310 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	2200      	movs	r2, #0
 8008306:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800830a:	6878      	ldr	r0, [r7, #4]
 800830c:	f7f8 fdcc 	bl	8000ea8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	2224      	movs	r2, #36	; 0x24
 8008314:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	681a      	ldr	r2, [r3, #0]
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	f022 0201 	bic.w	r2, r2, #1
 8008326:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008328:	6878      	ldr	r0, [r7, #4]
 800832a:	f000 fb7d 	bl	8008a28 <UART_SetConfig>
 800832e:	4603      	mov	r3, r0
 8008330:	2b01      	cmp	r3, #1
 8008332:	d101      	bne.n	8008338 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8008334:	2301      	movs	r3, #1
 8008336:	e022      	b.n	800837e <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800833c:	2b00      	cmp	r3, #0
 800833e:	d002      	beq.n	8008346 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8008340:	6878      	ldr	r0, [r7, #4]
 8008342:	f001 f8d1 	bl	80094e8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	685a      	ldr	r2, [r3, #4]
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008354:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	689a      	ldr	r2, [r3, #8]
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008364:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	681a      	ldr	r2, [r3, #0]
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	f042 0201 	orr.w	r2, r2, #1
 8008374:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008376:	6878      	ldr	r0, [r7, #4]
 8008378:	f001 f958 	bl	800962c <UART_CheckIdleState>
 800837c:	4603      	mov	r3, r0
}
 800837e:	4618      	mov	r0, r3
 8008380:	3708      	adds	r7, #8
 8008382:	46bd      	mov	sp, r7
 8008384:	bd80      	pop	{r7, pc}
	...

08008388 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008388:	b580      	push	{r7, lr}
 800838a:	b084      	sub	sp, #16
 800838c:	af00      	add	r7, sp, #0
 800838e:	60f8      	str	r0, [r7, #12]
 8008390:	60b9      	str	r1, [r7, #8]
 8008392:	4613      	mov	r3, r2
 8008394:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800839c:	2b20      	cmp	r3, #32
 800839e:	d168      	bne.n	8008472 <HAL_UART_Transmit_DMA+0xea>
  {
    if ((pData == NULL) || (Size == 0U))
 80083a0:	68bb      	ldr	r3, [r7, #8]
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d002      	beq.n	80083ac <HAL_UART_Transmit_DMA+0x24>
 80083a6:	88fb      	ldrh	r3, [r7, #6]
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d101      	bne.n	80083b0 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 80083ac:	2301      	movs	r3, #1
 80083ae:	e061      	b.n	8008474 <HAL_UART_Transmit_DMA+0xec>
    }

    __HAL_LOCK(huart);
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80083b6:	2b01      	cmp	r3, #1
 80083b8:	d101      	bne.n	80083be <HAL_UART_Transmit_DMA+0x36>
 80083ba:	2302      	movs	r3, #2
 80083bc:	e05a      	b.n	8008474 <HAL_UART_Transmit_DMA+0xec>
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	2201      	movs	r2, #1
 80083c2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	68ba      	ldr	r2, [r7, #8]
 80083ca:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	88fa      	ldrh	r2, [r7, #6]
 80083d0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	88fa      	ldrh	r2, [r7, #6]
 80083d8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	2200      	movs	r2, #0
 80083e0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	2221      	movs	r2, #33	; 0x21
 80083e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d02c      	beq.n	800844e <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80083f8:	4a20      	ldr	r2, [pc, #128]	; (800847c <HAL_UART_Transmit_DMA+0xf4>)
 80083fa:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008400:	4a1f      	ldr	r2, [pc, #124]	; (8008480 <HAL_UART_Transmit_DMA+0xf8>)
 8008402:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008408:	4a1e      	ldr	r2, [pc, #120]	; (8008484 <HAL_UART_Transmit_DMA+0xfc>)
 800840a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008410:	2200      	movs	r2, #0
 8008412:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800841c:	4619      	mov	r1, r3
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	3328      	adds	r3, #40	; 0x28
 8008424:	461a      	mov	r2, r3
 8008426:	88fb      	ldrh	r3, [r7, #6]
 8008428:	f7f9 fcfc 	bl	8001e24 <HAL_DMA_Start_IT>
 800842c:	4603      	mov	r3, r0
 800842e:	2b00      	cmp	r3, #0
 8008430:	d00d      	beq.n	800844e <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	2210      	movs	r2, #16
 8008436:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	2200      	movs	r2, #0
 800843e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	2220      	movs	r2, #32
 8008446:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 800844a:	2301      	movs	r3, #1
 800844c:	e012      	b.n	8008474 <HAL_UART_Transmit_DMA+0xec>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	2240      	movs	r2, #64	; 0x40
 8008454:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	2200      	movs	r2, #0
 800845a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	689a      	ldr	r2, [r3, #8]
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800846c:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 800846e:	2300      	movs	r3, #0
 8008470:	e000      	b.n	8008474 <HAL_UART_Transmit_DMA+0xec>
  }
  else
  {
    return HAL_BUSY;
 8008472:	2302      	movs	r3, #2
  }
}
 8008474:	4618      	mov	r0, r3
 8008476:	3710      	adds	r7, #16
 8008478:	46bd      	mov	sp, r7
 800847a:	bd80      	pop	{r7, pc}
 800847c:	08009865 	.word	0x08009865
 8008480:	080098b5 	.word	0x080098b5
 8008484:	080098d1 	.word	0x080098d1

08008488 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008488:	b580      	push	{r7, lr}
 800848a:	b088      	sub	sp, #32
 800848c:	af00      	add	r7, sp, #0
 800848e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	69db      	ldr	r3, [r3, #28]
 8008496:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	689b      	ldr	r3, [r3, #8]
 80084a6:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80084a8:	69fa      	ldr	r2, [r7, #28]
 80084aa:	f640 030f 	movw	r3, #2063	; 0x80f
 80084ae:	4013      	ands	r3, r2
 80084b0:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80084b2:	693b      	ldr	r3, [r7, #16]
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d118      	bne.n	80084ea <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80084b8:	69fb      	ldr	r3, [r7, #28]
 80084ba:	f003 0320 	and.w	r3, r3, #32
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d013      	beq.n	80084ea <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80084c2:	69bb      	ldr	r3, [r7, #24]
 80084c4:	f003 0320 	and.w	r3, r3, #32
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d104      	bne.n	80084d6 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80084cc:	697b      	ldr	r3, [r7, #20]
 80084ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d009      	beq.n	80084ea <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084da:	2b00      	cmp	r3, #0
 80084dc:	f000 8282 	beq.w	80089e4 <HAL_UART_IRQHandler+0x55c>
      {
        huart->RxISR(huart);
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084e4:	6878      	ldr	r0, [r7, #4]
 80084e6:	4798      	blx	r3
      }
      return;
 80084e8:	e27c      	b.n	80089e4 <HAL_UART_IRQHandler+0x55c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80084ea:	693b      	ldr	r3, [r7, #16]
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	f000 80ef 	beq.w	80086d0 <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80084f2:	697a      	ldr	r2, [r7, #20]
 80084f4:	4b73      	ldr	r3, [pc, #460]	; (80086c4 <HAL_UART_IRQHandler+0x23c>)
 80084f6:	4013      	ands	r3, r2
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d105      	bne.n	8008508 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80084fc:	69ba      	ldr	r2, [r7, #24]
 80084fe:	4b72      	ldr	r3, [pc, #456]	; (80086c8 <HAL_UART_IRQHandler+0x240>)
 8008500:	4013      	ands	r3, r2
 8008502:	2b00      	cmp	r3, #0
 8008504:	f000 80e4 	beq.w	80086d0 <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008508:	69fb      	ldr	r3, [r7, #28]
 800850a:	f003 0301 	and.w	r3, r3, #1
 800850e:	2b00      	cmp	r3, #0
 8008510:	d010      	beq.n	8008534 <HAL_UART_IRQHandler+0xac>
 8008512:	69bb      	ldr	r3, [r7, #24]
 8008514:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008518:	2b00      	cmp	r3, #0
 800851a:	d00b      	beq.n	8008534 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	2201      	movs	r2, #1
 8008522:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800852a:	f043 0201 	orr.w	r2, r3, #1
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008534:	69fb      	ldr	r3, [r7, #28]
 8008536:	f003 0302 	and.w	r3, r3, #2
 800853a:	2b00      	cmp	r3, #0
 800853c:	d010      	beq.n	8008560 <HAL_UART_IRQHandler+0xd8>
 800853e:	697b      	ldr	r3, [r7, #20]
 8008540:	f003 0301 	and.w	r3, r3, #1
 8008544:	2b00      	cmp	r3, #0
 8008546:	d00b      	beq.n	8008560 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	2202      	movs	r2, #2
 800854e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008556:	f043 0204 	orr.w	r2, r3, #4
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008560:	69fb      	ldr	r3, [r7, #28]
 8008562:	f003 0304 	and.w	r3, r3, #4
 8008566:	2b00      	cmp	r3, #0
 8008568:	d010      	beq.n	800858c <HAL_UART_IRQHandler+0x104>
 800856a:	697b      	ldr	r3, [r7, #20]
 800856c:	f003 0301 	and.w	r3, r3, #1
 8008570:	2b00      	cmp	r3, #0
 8008572:	d00b      	beq.n	800858c <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	2204      	movs	r2, #4
 800857a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008582:	f043 0202 	orr.w	r2, r3, #2
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800858c:	69fb      	ldr	r3, [r7, #28]
 800858e:	f003 0308 	and.w	r3, r3, #8
 8008592:	2b00      	cmp	r3, #0
 8008594:	d015      	beq.n	80085c2 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008596:	69bb      	ldr	r3, [r7, #24]
 8008598:	f003 0320 	and.w	r3, r3, #32
 800859c:	2b00      	cmp	r3, #0
 800859e:	d104      	bne.n	80085aa <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80085a0:	697a      	ldr	r2, [r7, #20]
 80085a2:	4b48      	ldr	r3, [pc, #288]	; (80086c4 <HAL_UART_IRQHandler+0x23c>)
 80085a4:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d00b      	beq.n	80085c2 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	2208      	movs	r2, #8
 80085b0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80085b8:	f043 0208 	orr.w	r2, r3, #8
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80085c2:	69fb      	ldr	r3, [r7, #28]
 80085c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d011      	beq.n	80085f0 <HAL_UART_IRQHandler+0x168>
 80085cc:	69bb      	ldr	r3, [r7, #24]
 80085ce:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d00c      	beq.n	80085f0 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80085de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80085e6:	f043 0220 	orr.w	r2, r3, #32
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	f000 81f6 	beq.w	80089e8 <HAL_UART_IRQHandler+0x560>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80085fc:	69fb      	ldr	r3, [r7, #28]
 80085fe:	f003 0320 	and.w	r3, r3, #32
 8008602:	2b00      	cmp	r3, #0
 8008604:	d011      	beq.n	800862a <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008606:	69bb      	ldr	r3, [r7, #24]
 8008608:	f003 0320 	and.w	r3, r3, #32
 800860c:	2b00      	cmp	r3, #0
 800860e:	d104      	bne.n	800861a <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008610:	697b      	ldr	r3, [r7, #20]
 8008612:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008616:	2b00      	cmp	r3, #0
 8008618:	d007      	beq.n	800862a <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800861e:	2b00      	cmp	r3, #0
 8008620:	d003      	beq.n	800862a <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008626:	6878      	ldr	r0, [r7, #4]
 8008628:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008630:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	689b      	ldr	r3, [r3, #8]
 8008638:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800863c:	2b40      	cmp	r3, #64	; 0x40
 800863e:	d004      	beq.n	800864a <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008646:	2b00      	cmp	r3, #0
 8008648:	d031      	beq.n	80086ae <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800864a:	6878      	ldr	r0, [r7, #4]
 800864c:	f001 f8d8 	bl	8009800 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	689b      	ldr	r3, [r3, #8]
 8008656:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800865a:	2b40      	cmp	r3, #64	; 0x40
 800865c:	d123      	bne.n	80086a6 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	689a      	ldr	r2, [r3, #8]
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800866c:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008672:	2b00      	cmp	r3, #0
 8008674:	d013      	beq.n	800869e <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800867a:	4a14      	ldr	r2, [pc, #80]	; (80086cc <HAL_UART_IRQHandler+0x244>)
 800867c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008682:	4618      	mov	r0, r3
 8008684:	f7fa f956 	bl	8002934 <HAL_DMA_Abort_IT>
 8008688:	4603      	mov	r3, r0
 800868a:	2b00      	cmp	r3, #0
 800868c:	d017      	beq.n	80086be <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008692:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008694:	687a      	ldr	r2, [r7, #4]
 8008696:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8008698:	4610      	mov	r0, r2
 800869a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800869c:	e00f      	b.n	80086be <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800869e:	6878      	ldr	r0, [r7, #4]
 80086a0:	f000 f9ac 	bl	80089fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80086a4:	e00b      	b.n	80086be <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80086a6:	6878      	ldr	r0, [r7, #4]
 80086a8:	f000 f9a8 	bl	80089fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80086ac:	e007      	b.n	80086be <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80086ae:	6878      	ldr	r0, [r7, #4]
 80086b0:	f000 f9a4 	bl	80089fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	2200      	movs	r2, #0
 80086b8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 80086bc:	e194      	b.n	80089e8 <HAL_UART_IRQHandler+0x560>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80086be:	bf00      	nop
    return;
 80086c0:	e192      	b.n	80089e8 <HAL_UART_IRQHandler+0x560>
 80086c2:	bf00      	nop
 80086c4:	10000001 	.word	0x10000001
 80086c8:	04000120 	.word	0x04000120
 80086cc:	08009951 	.word	0x08009951

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80086d4:	2b01      	cmp	r3, #1
 80086d6:	f040 810f 	bne.w	80088f8 <HAL_UART_IRQHandler+0x470>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80086da:	69fb      	ldr	r3, [r7, #28]
 80086dc:	f003 0310 	and.w	r3, r3, #16
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	f000 8109 	beq.w	80088f8 <HAL_UART_IRQHandler+0x470>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80086e6:	69bb      	ldr	r3, [r7, #24]
 80086e8:	f003 0310 	and.w	r3, r3, #16
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	f000 8103 	beq.w	80088f8 <HAL_UART_IRQHandler+0x470>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	2210      	movs	r2, #16
 80086f8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	689b      	ldr	r3, [r3, #8]
 8008700:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008704:	2b40      	cmp	r3, #64	; 0x40
 8008706:	f040 80bb 	bne.w	8008880 <HAL_UART_IRQHandler+0x3f8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	4a96      	ldr	r2, [pc, #600]	; (800896c <HAL_UART_IRQHandler+0x4e4>)
 8008712:	4293      	cmp	r3, r2
 8008714:	d059      	beq.n	80087ca <HAL_UART_IRQHandler+0x342>
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	4a94      	ldr	r2, [pc, #592]	; (8008970 <HAL_UART_IRQHandler+0x4e8>)
 800871e:	4293      	cmp	r3, r2
 8008720:	d053      	beq.n	80087ca <HAL_UART_IRQHandler+0x342>
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	4a92      	ldr	r2, [pc, #584]	; (8008974 <HAL_UART_IRQHandler+0x4ec>)
 800872a:	4293      	cmp	r3, r2
 800872c:	d04d      	beq.n	80087ca <HAL_UART_IRQHandler+0x342>
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	4a90      	ldr	r2, [pc, #576]	; (8008978 <HAL_UART_IRQHandler+0x4f0>)
 8008736:	4293      	cmp	r3, r2
 8008738:	d047      	beq.n	80087ca <HAL_UART_IRQHandler+0x342>
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	4a8e      	ldr	r2, [pc, #568]	; (800897c <HAL_UART_IRQHandler+0x4f4>)
 8008742:	4293      	cmp	r3, r2
 8008744:	d041      	beq.n	80087ca <HAL_UART_IRQHandler+0x342>
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	4a8c      	ldr	r2, [pc, #560]	; (8008980 <HAL_UART_IRQHandler+0x4f8>)
 800874e:	4293      	cmp	r3, r2
 8008750:	d03b      	beq.n	80087ca <HAL_UART_IRQHandler+0x342>
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	4a8a      	ldr	r2, [pc, #552]	; (8008984 <HAL_UART_IRQHandler+0x4fc>)
 800875a:	4293      	cmp	r3, r2
 800875c:	d035      	beq.n	80087ca <HAL_UART_IRQHandler+0x342>
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	4a88      	ldr	r2, [pc, #544]	; (8008988 <HAL_UART_IRQHandler+0x500>)
 8008766:	4293      	cmp	r3, r2
 8008768:	d02f      	beq.n	80087ca <HAL_UART_IRQHandler+0x342>
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	4a86      	ldr	r2, [pc, #536]	; (800898c <HAL_UART_IRQHandler+0x504>)
 8008772:	4293      	cmp	r3, r2
 8008774:	d029      	beq.n	80087ca <HAL_UART_IRQHandler+0x342>
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	4a84      	ldr	r2, [pc, #528]	; (8008990 <HAL_UART_IRQHandler+0x508>)
 800877e:	4293      	cmp	r3, r2
 8008780:	d023      	beq.n	80087ca <HAL_UART_IRQHandler+0x342>
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	4a82      	ldr	r2, [pc, #520]	; (8008994 <HAL_UART_IRQHandler+0x50c>)
 800878a:	4293      	cmp	r3, r2
 800878c:	d01d      	beq.n	80087ca <HAL_UART_IRQHandler+0x342>
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	4a80      	ldr	r2, [pc, #512]	; (8008998 <HAL_UART_IRQHandler+0x510>)
 8008796:	4293      	cmp	r3, r2
 8008798:	d017      	beq.n	80087ca <HAL_UART_IRQHandler+0x342>
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	4a7e      	ldr	r2, [pc, #504]	; (800899c <HAL_UART_IRQHandler+0x514>)
 80087a2:	4293      	cmp	r3, r2
 80087a4:	d011      	beq.n	80087ca <HAL_UART_IRQHandler+0x342>
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	4a7c      	ldr	r2, [pc, #496]	; (80089a0 <HAL_UART_IRQHandler+0x518>)
 80087ae:	4293      	cmp	r3, r2
 80087b0:	d00b      	beq.n	80087ca <HAL_UART_IRQHandler+0x342>
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	4a7a      	ldr	r2, [pc, #488]	; (80089a4 <HAL_UART_IRQHandler+0x51c>)
 80087ba:	4293      	cmp	r3, r2
 80087bc:	d005      	beq.n	80087ca <HAL_UART_IRQHandler+0x342>
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	4a78      	ldr	r2, [pc, #480]	; (80089a8 <HAL_UART_IRQHandler+0x520>)
 80087c6:	4293      	cmp	r3, r2
 80087c8:	d105      	bne.n	80087d6 <HAL_UART_IRQHandler+0x34e>
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	685b      	ldr	r3, [r3, #4]
 80087d2:	b29b      	uxth	r3, r3
 80087d4:	e004      	b.n	80087e0 <HAL_UART_IRQHandler+0x358>
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	685b      	ldr	r3, [r3, #4]
 80087de:	b29b      	uxth	r3, r3
 80087e0:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 80087e2:	893b      	ldrh	r3, [r7, #8]
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	f000 8101 	beq.w	80089ec <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80087f0:	893a      	ldrh	r2, [r7, #8]
 80087f2:	429a      	cmp	r2, r3
 80087f4:	f080 80fa 	bcs.w	80089ec <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	893a      	ldrh	r2, [r7, #8]
 80087fc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008804:	69db      	ldr	r3, [r3, #28]
 8008806:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800880a:	d02b      	beq.n	8008864 <HAL_UART_IRQHandler+0x3dc>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	681a      	ldr	r2, [r3, #0]
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800881a:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	689a      	ldr	r2, [r3, #8]
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	f022 0201 	bic.w	r2, r2, #1
 800882a:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	689a      	ldr	r2, [r3, #8]
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800883a:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	2220      	movs	r2, #32
 8008840:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	2200      	movs	r2, #0
 8008848:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	681a      	ldr	r2, [r3, #0]
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	f022 0210 	bic.w	r2, r2, #16
 8008858:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800885e:	4618      	mov	r0, r3
 8008860:	f7f9 fd4a 	bl	80022f8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008870:	b29b      	uxth	r3, r3
 8008872:	1ad3      	subs	r3, r2, r3
 8008874:	b29b      	uxth	r3, r3
 8008876:	4619      	mov	r1, r3
 8008878:	6878      	ldr	r0, [r7, #4]
 800887a:	f000 f8c9 	bl	8008a10 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800887e:	e0b5      	b.n	80089ec <HAL_UART_IRQHandler+0x564>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800888c:	b29b      	uxth	r3, r3
 800888e:	1ad3      	subs	r3, r2, r3
 8008890:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008898:	b29b      	uxth	r3, r3
 800889a:	2b00      	cmp	r3, #0
 800889c:	f000 80a8 	beq.w	80089f0 <HAL_UART_IRQHandler+0x568>
          && (nb_rx_data > 0U))
 80088a0:	897b      	ldrh	r3, [r7, #10]
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	f000 80a4 	beq.w	80089f0 <HAL_UART_IRQHandler+0x568>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	681a      	ldr	r2, [r3, #0]
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80088b6:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	6899      	ldr	r1, [r3, #8]
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681a      	ldr	r2, [r3, #0]
 80088c2:	4b3a      	ldr	r3, [pc, #232]	; (80089ac <HAL_UART_IRQHandler+0x524>)
 80088c4:	400b      	ands	r3, r1
 80088c6:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	2220      	movs	r2, #32
 80088cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	2200      	movs	r2, #0
 80088d4:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	2200      	movs	r2, #0
 80088da:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	681a      	ldr	r2, [r3, #0]
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	f022 0210 	bic.w	r2, r2, #16
 80088ea:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80088ec:	897b      	ldrh	r3, [r7, #10]
 80088ee:	4619      	mov	r1, r3
 80088f0:	6878      	ldr	r0, [r7, #4]
 80088f2:	f000 f88d 	bl	8008a10 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80088f6:	e07b      	b.n	80089f0 <HAL_UART_IRQHandler+0x568>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80088f8:	69fb      	ldr	r3, [r7, #28]
 80088fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d00d      	beq.n	800891e <HAL_UART_IRQHandler+0x496>
 8008902:	697b      	ldr	r3, [r7, #20]
 8008904:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008908:	2b00      	cmp	r3, #0
 800890a:	d008      	beq.n	800891e <HAL_UART_IRQHandler+0x496>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8008914:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008916:	6878      	ldr	r0, [r7, #4]
 8008918:	f001 f84a 	bl	80099b0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800891c:	e06b      	b.n	80089f6 <HAL_UART_IRQHandler+0x56e>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800891e:	69fb      	ldr	r3, [r7, #28]
 8008920:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008924:	2b00      	cmp	r3, #0
 8008926:	d012      	beq.n	800894e <HAL_UART_IRQHandler+0x4c6>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8008928:	69bb      	ldr	r3, [r7, #24]
 800892a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800892e:	2b00      	cmp	r3, #0
 8008930:	d104      	bne.n	800893c <HAL_UART_IRQHandler+0x4b4>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008932:	697b      	ldr	r3, [r7, #20]
 8008934:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008938:	2b00      	cmp	r3, #0
 800893a:	d008      	beq.n	800894e <HAL_UART_IRQHandler+0x4c6>
  {
    if (huart->TxISR != NULL)
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008940:	2b00      	cmp	r3, #0
 8008942:	d057      	beq.n	80089f4 <HAL_UART_IRQHandler+0x56c>
    {
      huart->TxISR(huart);
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008948:	6878      	ldr	r0, [r7, #4]
 800894a:	4798      	blx	r3
    }
    return;
 800894c:	e052      	b.n	80089f4 <HAL_UART_IRQHandler+0x56c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800894e:	69fb      	ldr	r3, [r7, #28]
 8008950:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008954:	2b00      	cmp	r3, #0
 8008956:	d02b      	beq.n	80089b0 <HAL_UART_IRQHandler+0x528>
 8008958:	69bb      	ldr	r3, [r7, #24]
 800895a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800895e:	2b00      	cmp	r3, #0
 8008960:	d026      	beq.n	80089b0 <HAL_UART_IRQHandler+0x528>
  {
    UART_EndTransmit_IT(huart);
 8008962:	6878      	ldr	r0, [r7, #4]
 8008964:	f001 f80a 	bl	800997c <UART_EndTransmit_IT>
    return;
 8008968:	e045      	b.n	80089f6 <HAL_UART_IRQHandler+0x56e>
 800896a:	bf00      	nop
 800896c:	40020010 	.word	0x40020010
 8008970:	40020028 	.word	0x40020028
 8008974:	40020040 	.word	0x40020040
 8008978:	40020058 	.word	0x40020058
 800897c:	40020070 	.word	0x40020070
 8008980:	40020088 	.word	0x40020088
 8008984:	400200a0 	.word	0x400200a0
 8008988:	400200b8 	.word	0x400200b8
 800898c:	40020410 	.word	0x40020410
 8008990:	40020428 	.word	0x40020428
 8008994:	40020440 	.word	0x40020440
 8008998:	40020458 	.word	0x40020458
 800899c:	40020470 	.word	0x40020470
 80089a0:	40020488 	.word	0x40020488
 80089a4:	400204a0 	.word	0x400204a0
 80089a8:	400204b8 	.word	0x400204b8
 80089ac:	effffffe 	.word	0xeffffffe
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80089b0:	69fb      	ldr	r3, [r7, #28]
 80089b2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d008      	beq.n	80089cc <HAL_UART_IRQHandler+0x544>
 80089ba:	69bb      	ldr	r3, [r7, #24]
 80089bc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d003      	beq.n	80089cc <HAL_UART_IRQHandler+0x544>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80089c4:	6878      	ldr	r0, [r7, #4]
 80089c6:	f001 f807 	bl	80099d8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80089ca:	e014      	b.n	80089f6 <HAL_UART_IRQHandler+0x56e>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80089cc:	69fb      	ldr	r3, [r7, #28]
 80089ce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d00f      	beq.n	80089f6 <HAL_UART_IRQHandler+0x56e>
 80089d6:	69bb      	ldr	r3, [r7, #24]
 80089d8:	2b00      	cmp	r3, #0
 80089da:	da0c      	bge.n	80089f6 <HAL_UART_IRQHandler+0x56e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80089dc:	6878      	ldr	r0, [r7, #4]
 80089de:	f000 fff1 	bl	80099c4 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80089e2:	e008      	b.n	80089f6 <HAL_UART_IRQHandler+0x56e>
      return;
 80089e4:	bf00      	nop
 80089e6:	e006      	b.n	80089f6 <HAL_UART_IRQHandler+0x56e>
    return;
 80089e8:	bf00      	nop
 80089ea:	e004      	b.n	80089f6 <HAL_UART_IRQHandler+0x56e>
      return;
 80089ec:	bf00      	nop
 80089ee:	e002      	b.n	80089f6 <HAL_UART_IRQHandler+0x56e>
      return;
 80089f0:	bf00      	nop
 80089f2:	e000      	b.n	80089f6 <HAL_UART_IRQHandler+0x56e>
    return;
 80089f4:	bf00      	nop
  }
}
 80089f6:	3720      	adds	r7, #32
 80089f8:	46bd      	mov	sp, r7
 80089fa:	bd80      	pop	{r7, pc}

080089fc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80089fc:	b480      	push	{r7}
 80089fe:	b083      	sub	sp, #12
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008a04:	bf00      	nop
 8008a06:	370c      	adds	r7, #12
 8008a08:	46bd      	mov	sp, r7
 8008a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a0e:	4770      	bx	lr

08008a10 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008a10:	b480      	push	{r7}
 8008a12:	b083      	sub	sp, #12
 8008a14:	af00      	add	r7, sp, #0
 8008a16:	6078      	str	r0, [r7, #4]
 8008a18:	460b      	mov	r3, r1
 8008a1a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008a1c:	bf00      	nop
 8008a1e:	370c      	adds	r7, #12
 8008a20:	46bd      	mov	sp, r7
 8008a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a26:	4770      	bx	lr

08008a28 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008a28:	b5b0      	push	{r4, r5, r7, lr}
 8008a2a:	b08e      	sub	sp, #56	; 0x38
 8008a2c:	af00      	add	r7, sp, #0
 8008a2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008a30:	2300      	movs	r3, #0
 8008a32:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	689a      	ldr	r2, [r3, #8]
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	691b      	ldr	r3, [r3, #16]
 8008a3e:	431a      	orrs	r2, r3
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	695b      	ldr	r3, [r3, #20]
 8008a44:	431a      	orrs	r2, r3
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	69db      	ldr	r3, [r3, #28]
 8008a4a:	4313      	orrs	r3, r2
 8008a4c:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	681a      	ldr	r2, [r3, #0]
 8008a54:	4bbf      	ldr	r3, [pc, #764]	; (8008d54 <UART_SetConfig+0x32c>)
 8008a56:	4013      	ands	r3, r2
 8008a58:	687a      	ldr	r2, [r7, #4]
 8008a5a:	6812      	ldr	r2, [r2, #0]
 8008a5c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008a5e:	430b      	orrs	r3, r1
 8008a60:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	685b      	ldr	r3, [r3, #4]
 8008a68:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	68da      	ldr	r2, [r3, #12]
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	430a      	orrs	r2, r1
 8008a76:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	699b      	ldr	r3, [r3, #24]
 8008a7c:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	4ab5      	ldr	r2, [pc, #724]	; (8008d58 <UART_SetConfig+0x330>)
 8008a84:	4293      	cmp	r3, r2
 8008a86:	d004      	beq.n	8008a92 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	6a1b      	ldr	r3, [r3, #32]
 8008a8c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008a8e:	4313      	orrs	r3, r2
 8008a90:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	689a      	ldr	r2, [r3, #8]
 8008a98:	4bb0      	ldr	r3, [pc, #704]	; (8008d5c <UART_SetConfig+0x334>)
 8008a9a:	4013      	ands	r3, r2
 8008a9c:	687a      	ldr	r2, [r7, #4]
 8008a9e:	6812      	ldr	r2, [r2, #0]
 8008aa0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008aa2:	430b      	orrs	r3, r1
 8008aa4:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008aac:	f023 010f 	bic.w	r1, r3, #15
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	430a      	orrs	r2, r1
 8008aba:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	4aa7      	ldr	r2, [pc, #668]	; (8008d60 <UART_SetConfig+0x338>)
 8008ac2:	4293      	cmp	r3, r2
 8008ac4:	d176      	bne.n	8008bb4 <UART_SetConfig+0x18c>
 8008ac6:	4ba7      	ldr	r3, [pc, #668]	; (8008d64 <UART_SetConfig+0x33c>)
 8008ac8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008aca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008ace:	2b28      	cmp	r3, #40	; 0x28
 8008ad0:	d86c      	bhi.n	8008bac <UART_SetConfig+0x184>
 8008ad2:	a201      	add	r2, pc, #4	; (adr r2, 8008ad8 <UART_SetConfig+0xb0>)
 8008ad4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ad8:	08008b7d 	.word	0x08008b7d
 8008adc:	08008bad 	.word	0x08008bad
 8008ae0:	08008bad 	.word	0x08008bad
 8008ae4:	08008bad 	.word	0x08008bad
 8008ae8:	08008bad 	.word	0x08008bad
 8008aec:	08008bad 	.word	0x08008bad
 8008af0:	08008bad 	.word	0x08008bad
 8008af4:	08008bad 	.word	0x08008bad
 8008af8:	08008b85 	.word	0x08008b85
 8008afc:	08008bad 	.word	0x08008bad
 8008b00:	08008bad 	.word	0x08008bad
 8008b04:	08008bad 	.word	0x08008bad
 8008b08:	08008bad 	.word	0x08008bad
 8008b0c:	08008bad 	.word	0x08008bad
 8008b10:	08008bad 	.word	0x08008bad
 8008b14:	08008bad 	.word	0x08008bad
 8008b18:	08008b8d 	.word	0x08008b8d
 8008b1c:	08008bad 	.word	0x08008bad
 8008b20:	08008bad 	.word	0x08008bad
 8008b24:	08008bad 	.word	0x08008bad
 8008b28:	08008bad 	.word	0x08008bad
 8008b2c:	08008bad 	.word	0x08008bad
 8008b30:	08008bad 	.word	0x08008bad
 8008b34:	08008bad 	.word	0x08008bad
 8008b38:	08008b95 	.word	0x08008b95
 8008b3c:	08008bad 	.word	0x08008bad
 8008b40:	08008bad 	.word	0x08008bad
 8008b44:	08008bad 	.word	0x08008bad
 8008b48:	08008bad 	.word	0x08008bad
 8008b4c:	08008bad 	.word	0x08008bad
 8008b50:	08008bad 	.word	0x08008bad
 8008b54:	08008bad 	.word	0x08008bad
 8008b58:	08008b9d 	.word	0x08008b9d
 8008b5c:	08008bad 	.word	0x08008bad
 8008b60:	08008bad 	.word	0x08008bad
 8008b64:	08008bad 	.word	0x08008bad
 8008b68:	08008bad 	.word	0x08008bad
 8008b6c:	08008bad 	.word	0x08008bad
 8008b70:	08008bad 	.word	0x08008bad
 8008b74:	08008bad 	.word	0x08008bad
 8008b78:	08008ba5 	.word	0x08008ba5
 8008b7c:	2301      	movs	r3, #1
 8008b7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008b82:	e222      	b.n	8008fca <UART_SetConfig+0x5a2>
 8008b84:	2304      	movs	r3, #4
 8008b86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008b8a:	e21e      	b.n	8008fca <UART_SetConfig+0x5a2>
 8008b8c:	2308      	movs	r3, #8
 8008b8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008b92:	e21a      	b.n	8008fca <UART_SetConfig+0x5a2>
 8008b94:	2310      	movs	r3, #16
 8008b96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008b9a:	e216      	b.n	8008fca <UART_SetConfig+0x5a2>
 8008b9c:	2320      	movs	r3, #32
 8008b9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008ba2:	e212      	b.n	8008fca <UART_SetConfig+0x5a2>
 8008ba4:	2340      	movs	r3, #64	; 0x40
 8008ba6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008baa:	e20e      	b.n	8008fca <UART_SetConfig+0x5a2>
 8008bac:	2380      	movs	r3, #128	; 0x80
 8008bae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008bb2:	e20a      	b.n	8008fca <UART_SetConfig+0x5a2>
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	4a6b      	ldr	r2, [pc, #428]	; (8008d68 <UART_SetConfig+0x340>)
 8008bba:	4293      	cmp	r3, r2
 8008bbc:	d130      	bne.n	8008c20 <UART_SetConfig+0x1f8>
 8008bbe:	4b69      	ldr	r3, [pc, #420]	; (8008d64 <UART_SetConfig+0x33c>)
 8008bc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008bc2:	f003 0307 	and.w	r3, r3, #7
 8008bc6:	2b05      	cmp	r3, #5
 8008bc8:	d826      	bhi.n	8008c18 <UART_SetConfig+0x1f0>
 8008bca:	a201      	add	r2, pc, #4	; (adr r2, 8008bd0 <UART_SetConfig+0x1a8>)
 8008bcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bd0:	08008be9 	.word	0x08008be9
 8008bd4:	08008bf1 	.word	0x08008bf1
 8008bd8:	08008bf9 	.word	0x08008bf9
 8008bdc:	08008c01 	.word	0x08008c01
 8008be0:	08008c09 	.word	0x08008c09
 8008be4:	08008c11 	.word	0x08008c11
 8008be8:	2300      	movs	r3, #0
 8008bea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008bee:	e1ec      	b.n	8008fca <UART_SetConfig+0x5a2>
 8008bf0:	2304      	movs	r3, #4
 8008bf2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008bf6:	e1e8      	b.n	8008fca <UART_SetConfig+0x5a2>
 8008bf8:	2308      	movs	r3, #8
 8008bfa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008bfe:	e1e4      	b.n	8008fca <UART_SetConfig+0x5a2>
 8008c00:	2310      	movs	r3, #16
 8008c02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c06:	e1e0      	b.n	8008fca <UART_SetConfig+0x5a2>
 8008c08:	2320      	movs	r3, #32
 8008c0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c0e:	e1dc      	b.n	8008fca <UART_SetConfig+0x5a2>
 8008c10:	2340      	movs	r3, #64	; 0x40
 8008c12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c16:	e1d8      	b.n	8008fca <UART_SetConfig+0x5a2>
 8008c18:	2380      	movs	r3, #128	; 0x80
 8008c1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c1e:	e1d4      	b.n	8008fca <UART_SetConfig+0x5a2>
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	4a51      	ldr	r2, [pc, #324]	; (8008d6c <UART_SetConfig+0x344>)
 8008c26:	4293      	cmp	r3, r2
 8008c28:	d130      	bne.n	8008c8c <UART_SetConfig+0x264>
 8008c2a:	4b4e      	ldr	r3, [pc, #312]	; (8008d64 <UART_SetConfig+0x33c>)
 8008c2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c2e:	f003 0307 	and.w	r3, r3, #7
 8008c32:	2b05      	cmp	r3, #5
 8008c34:	d826      	bhi.n	8008c84 <UART_SetConfig+0x25c>
 8008c36:	a201      	add	r2, pc, #4	; (adr r2, 8008c3c <UART_SetConfig+0x214>)
 8008c38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c3c:	08008c55 	.word	0x08008c55
 8008c40:	08008c5d 	.word	0x08008c5d
 8008c44:	08008c65 	.word	0x08008c65
 8008c48:	08008c6d 	.word	0x08008c6d
 8008c4c:	08008c75 	.word	0x08008c75
 8008c50:	08008c7d 	.word	0x08008c7d
 8008c54:	2300      	movs	r3, #0
 8008c56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c5a:	e1b6      	b.n	8008fca <UART_SetConfig+0x5a2>
 8008c5c:	2304      	movs	r3, #4
 8008c5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c62:	e1b2      	b.n	8008fca <UART_SetConfig+0x5a2>
 8008c64:	2308      	movs	r3, #8
 8008c66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c6a:	e1ae      	b.n	8008fca <UART_SetConfig+0x5a2>
 8008c6c:	2310      	movs	r3, #16
 8008c6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c72:	e1aa      	b.n	8008fca <UART_SetConfig+0x5a2>
 8008c74:	2320      	movs	r3, #32
 8008c76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c7a:	e1a6      	b.n	8008fca <UART_SetConfig+0x5a2>
 8008c7c:	2340      	movs	r3, #64	; 0x40
 8008c7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c82:	e1a2      	b.n	8008fca <UART_SetConfig+0x5a2>
 8008c84:	2380      	movs	r3, #128	; 0x80
 8008c86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c8a:	e19e      	b.n	8008fca <UART_SetConfig+0x5a2>
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	4a37      	ldr	r2, [pc, #220]	; (8008d70 <UART_SetConfig+0x348>)
 8008c92:	4293      	cmp	r3, r2
 8008c94:	d130      	bne.n	8008cf8 <UART_SetConfig+0x2d0>
 8008c96:	4b33      	ldr	r3, [pc, #204]	; (8008d64 <UART_SetConfig+0x33c>)
 8008c98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c9a:	f003 0307 	and.w	r3, r3, #7
 8008c9e:	2b05      	cmp	r3, #5
 8008ca0:	d826      	bhi.n	8008cf0 <UART_SetConfig+0x2c8>
 8008ca2:	a201      	add	r2, pc, #4	; (adr r2, 8008ca8 <UART_SetConfig+0x280>)
 8008ca4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ca8:	08008cc1 	.word	0x08008cc1
 8008cac:	08008cc9 	.word	0x08008cc9
 8008cb0:	08008cd1 	.word	0x08008cd1
 8008cb4:	08008cd9 	.word	0x08008cd9
 8008cb8:	08008ce1 	.word	0x08008ce1
 8008cbc:	08008ce9 	.word	0x08008ce9
 8008cc0:	2300      	movs	r3, #0
 8008cc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008cc6:	e180      	b.n	8008fca <UART_SetConfig+0x5a2>
 8008cc8:	2304      	movs	r3, #4
 8008cca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008cce:	e17c      	b.n	8008fca <UART_SetConfig+0x5a2>
 8008cd0:	2308      	movs	r3, #8
 8008cd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008cd6:	e178      	b.n	8008fca <UART_SetConfig+0x5a2>
 8008cd8:	2310      	movs	r3, #16
 8008cda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008cde:	e174      	b.n	8008fca <UART_SetConfig+0x5a2>
 8008ce0:	2320      	movs	r3, #32
 8008ce2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008ce6:	e170      	b.n	8008fca <UART_SetConfig+0x5a2>
 8008ce8:	2340      	movs	r3, #64	; 0x40
 8008cea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008cee:	e16c      	b.n	8008fca <UART_SetConfig+0x5a2>
 8008cf0:	2380      	movs	r3, #128	; 0x80
 8008cf2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008cf6:	e168      	b.n	8008fca <UART_SetConfig+0x5a2>
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	4a1d      	ldr	r2, [pc, #116]	; (8008d74 <UART_SetConfig+0x34c>)
 8008cfe:	4293      	cmp	r3, r2
 8008d00:	d142      	bne.n	8008d88 <UART_SetConfig+0x360>
 8008d02:	4b18      	ldr	r3, [pc, #96]	; (8008d64 <UART_SetConfig+0x33c>)
 8008d04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d06:	f003 0307 	and.w	r3, r3, #7
 8008d0a:	2b05      	cmp	r3, #5
 8008d0c:	d838      	bhi.n	8008d80 <UART_SetConfig+0x358>
 8008d0e:	a201      	add	r2, pc, #4	; (adr r2, 8008d14 <UART_SetConfig+0x2ec>)
 8008d10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d14:	08008d2d 	.word	0x08008d2d
 8008d18:	08008d35 	.word	0x08008d35
 8008d1c:	08008d3d 	.word	0x08008d3d
 8008d20:	08008d45 	.word	0x08008d45
 8008d24:	08008d4d 	.word	0x08008d4d
 8008d28:	08008d79 	.word	0x08008d79
 8008d2c:	2300      	movs	r3, #0
 8008d2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008d32:	e14a      	b.n	8008fca <UART_SetConfig+0x5a2>
 8008d34:	2304      	movs	r3, #4
 8008d36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008d3a:	e146      	b.n	8008fca <UART_SetConfig+0x5a2>
 8008d3c:	2308      	movs	r3, #8
 8008d3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008d42:	e142      	b.n	8008fca <UART_SetConfig+0x5a2>
 8008d44:	2310      	movs	r3, #16
 8008d46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008d4a:	e13e      	b.n	8008fca <UART_SetConfig+0x5a2>
 8008d4c:	2320      	movs	r3, #32
 8008d4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008d52:	e13a      	b.n	8008fca <UART_SetConfig+0x5a2>
 8008d54:	cfff69f3 	.word	0xcfff69f3
 8008d58:	58000c00 	.word	0x58000c00
 8008d5c:	11fff4ff 	.word	0x11fff4ff
 8008d60:	40011000 	.word	0x40011000
 8008d64:	58024400 	.word	0x58024400
 8008d68:	40004400 	.word	0x40004400
 8008d6c:	40004800 	.word	0x40004800
 8008d70:	40004c00 	.word	0x40004c00
 8008d74:	40005000 	.word	0x40005000
 8008d78:	2340      	movs	r3, #64	; 0x40
 8008d7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008d7e:	e124      	b.n	8008fca <UART_SetConfig+0x5a2>
 8008d80:	2380      	movs	r3, #128	; 0x80
 8008d82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008d86:	e120      	b.n	8008fca <UART_SetConfig+0x5a2>
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	4acc      	ldr	r2, [pc, #816]	; (80090c0 <UART_SetConfig+0x698>)
 8008d8e:	4293      	cmp	r3, r2
 8008d90:	d176      	bne.n	8008e80 <UART_SetConfig+0x458>
 8008d92:	4bcc      	ldr	r3, [pc, #816]	; (80090c4 <UART_SetConfig+0x69c>)
 8008d94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d96:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008d9a:	2b28      	cmp	r3, #40	; 0x28
 8008d9c:	d86c      	bhi.n	8008e78 <UART_SetConfig+0x450>
 8008d9e:	a201      	add	r2, pc, #4	; (adr r2, 8008da4 <UART_SetConfig+0x37c>)
 8008da0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008da4:	08008e49 	.word	0x08008e49
 8008da8:	08008e79 	.word	0x08008e79
 8008dac:	08008e79 	.word	0x08008e79
 8008db0:	08008e79 	.word	0x08008e79
 8008db4:	08008e79 	.word	0x08008e79
 8008db8:	08008e79 	.word	0x08008e79
 8008dbc:	08008e79 	.word	0x08008e79
 8008dc0:	08008e79 	.word	0x08008e79
 8008dc4:	08008e51 	.word	0x08008e51
 8008dc8:	08008e79 	.word	0x08008e79
 8008dcc:	08008e79 	.word	0x08008e79
 8008dd0:	08008e79 	.word	0x08008e79
 8008dd4:	08008e79 	.word	0x08008e79
 8008dd8:	08008e79 	.word	0x08008e79
 8008ddc:	08008e79 	.word	0x08008e79
 8008de0:	08008e79 	.word	0x08008e79
 8008de4:	08008e59 	.word	0x08008e59
 8008de8:	08008e79 	.word	0x08008e79
 8008dec:	08008e79 	.word	0x08008e79
 8008df0:	08008e79 	.word	0x08008e79
 8008df4:	08008e79 	.word	0x08008e79
 8008df8:	08008e79 	.word	0x08008e79
 8008dfc:	08008e79 	.word	0x08008e79
 8008e00:	08008e79 	.word	0x08008e79
 8008e04:	08008e61 	.word	0x08008e61
 8008e08:	08008e79 	.word	0x08008e79
 8008e0c:	08008e79 	.word	0x08008e79
 8008e10:	08008e79 	.word	0x08008e79
 8008e14:	08008e79 	.word	0x08008e79
 8008e18:	08008e79 	.word	0x08008e79
 8008e1c:	08008e79 	.word	0x08008e79
 8008e20:	08008e79 	.word	0x08008e79
 8008e24:	08008e69 	.word	0x08008e69
 8008e28:	08008e79 	.word	0x08008e79
 8008e2c:	08008e79 	.word	0x08008e79
 8008e30:	08008e79 	.word	0x08008e79
 8008e34:	08008e79 	.word	0x08008e79
 8008e38:	08008e79 	.word	0x08008e79
 8008e3c:	08008e79 	.word	0x08008e79
 8008e40:	08008e79 	.word	0x08008e79
 8008e44:	08008e71 	.word	0x08008e71
 8008e48:	2301      	movs	r3, #1
 8008e4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008e4e:	e0bc      	b.n	8008fca <UART_SetConfig+0x5a2>
 8008e50:	2304      	movs	r3, #4
 8008e52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008e56:	e0b8      	b.n	8008fca <UART_SetConfig+0x5a2>
 8008e58:	2308      	movs	r3, #8
 8008e5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008e5e:	e0b4      	b.n	8008fca <UART_SetConfig+0x5a2>
 8008e60:	2310      	movs	r3, #16
 8008e62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008e66:	e0b0      	b.n	8008fca <UART_SetConfig+0x5a2>
 8008e68:	2320      	movs	r3, #32
 8008e6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008e6e:	e0ac      	b.n	8008fca <UART_SetConfig+0x5a2>
 8008e70:	2340      	movs	r3, #64	; 0x40
 8008e72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008e76:	e0a8      	b.n	8008fca <UART_SetConfig+0x5a2>
 8008e78:	2380      	movs	r3, #128	; 0x80
 8008e7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008e7e:	e0a4      	b.n	8008fca <UART_SetConfig+0x5a2>
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	4a90      	ldr	r2, [pc, #576]	; (80090c8 <UART_SetConfig+0x6a0>)
 8008e86:	4293      	cmp	r3, r2
 8008e88:	d130      	bne.n	8008eec <UART_SetConfig+0x4c4>
 8008e8a:	4b8e      	ldr	r3, [pc, #568]	; (80090c4 <UART_SetConfig+0x69c>)
 8008e8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e8e:	f003 0307 	and.w	r3, r3, #7
 8008e92:	2b05      	cmp	r3, #5
 8008e94:	d826      	bhi.n	8008ee4 <UART_SetConfig+0x4bc>
 8008e96:	a201      	add	r2, pc, #4	; (adr r2, 8008e9c <UART_SetConfig+0x474>)
 8008e98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e9c:	08008eb5 	.word	0x08008eb5
 8008ea0:	08008ebd 	.word	0x08008ebd
 8008ea4:	08008ec5 	.word	0x08008ec5
 8008ea8:	08008ecd 	.word	0x08008ecd
 8008eac:	08008ed5 	.word	0x08008ed5
 8008eb0:	08008edd 	.word	0x08008edd
 8008eb4:	2300      	movs	r3, #0
 8008eb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008eba:	e086      	b.n	8008fca <UART_SetConfig+0x5a2>
 8008ebc:	2304      	movs	r3, #4
 8008ebe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008ec2:	e082      	b.n	8008fca <UART_SetConfig+0x5a2>
 8008ec4:	2308      	movs	r3, #8
 8008ec6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008eca:	e07e      	b.n	8008fca <UART_SetConfig+0x5a2>
 8008ecc:	2310      	movs	r3, #16
 8008ece:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008ed2:	e07a      	b.n	8008fca <UART_SetConfig+0x5a2>
 8008ed4:	2320      	movs	r3, #32
 8008ed6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008eda:	e076      	b.n	8008fca <UART_SetConfig+0x5a2>
 8008edc:	2340      	movs	r3, #64	; 0x40
 8008ede:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008ee2:	e072      	b.n	8008fca <UART_SetConfig+0x5a2>
 8008ee4:	2380      	movs	r3, #128	; 0x80
 8008ee6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008eea:	e06e      	b.n	8008fca <UART_SetConfig+0x5a2>
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	4a76      	ldr	r2, [pc, #472]	; (80090cc <UART_SetConfig+0x6a4>)
 8008ef2:	4293      	cmp	r3, r2
 8008ef4:	d130      	bne.n	8008f58 <UART_SetConfig+0x530>
 8008ef6:	4b73      	ldr	r3, [pc, #460]	; (80090c4 <UART_SetConfig+0x69c>)
 8008ef8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008efa:	f003 0307 	and.w	r3, r3, #7
 8008efe:	2b05      	cmp	r3, #5
 8008f00:	d826      	bhi.n	8008f50 <UART_SetConfig+0x528>
 8008f02:	a201      	add	r2, pc, #4	; (adr r2, 8008f08 <UART_SetConfig+0x4e0>)
 8008f04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f08:	08008f21 	.word	0x08008f21
 8008f0c:	08008f29 	.word	0x08008f29
 8008f10:	08008f31 	.word	0x08008f31
 8008f14:	08008f39 	.word	0x08008f39
 8008f18:	08008f41 	.word	0x08008f41
 8008f1c:	08008f49 	.word	0x08008f49
 8008f20:	2300      	movs	r3, #0
 8008f22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008f26:	e050      	b.n	8008fca <UART_SetConfig+0x5a2>
 8008f28:	2304      	movs	r3, #4
 8008f2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008f2e:	e04c      	b.n	8008fca <UART_SetConfig+0x5a2>
 8008f30:	2308      	movs	r3, #8
 8008f32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008f36:	e048      	b.n	8008fca <UART_SetConfig+0x5a2>
 8008f38:	2310      	movs	r3, #16
 8008f3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008f3e:	e044      	b.n	8008fca <UART_SetConfig+0x5a2>
 8008f40:	2320      	movs	r3, #32
 8008f42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008f46:	e040      	b.n	8008fca <UART_SetConfig+0x5a2>
 8008f48:	2340      	movs	r3, #64	; 0x40
 8008f4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008f4e:	e03c      	b.n	8008fca <UART_SetConfig+0x5a2>
 8008f50:	2380      	movs	r3, #128	; 0x80
 8008f52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008f56:	e038      	b.n	8008fca <UART_SetConfig+0x5a2>
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	4a5c      	ldr	r2, [pc, #368]	; (80090d0 <UART_SetConfig+0x6a8>)
 8008f5e:	4293      	cmp	r3, r2
 8008f60:	d130      	bne.n	8008fc4 <UART_SetConfig+0x59c>
 8008f62:	4b58      	ldr	r3, [pc, #352]	; (80090c4 <UART_SetConfig+0x69c>)
 8008f64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f66:	f003 0307 	and.w	r3, r3, #7
 8008f6a:	2b05      	cmp	r3, #5
 8008f6c:	d826      	bhi.n	8008fbc <UART_SetConfig+0x594>
 8008f6e:	a201      	add	r2, pc, #4	; (adr r2, 8008f74 <UART_SetConfig+0x54c>)
 8008f70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f74:	08008f8d 	.word	0x08008f8d
 8008f78:	08008f95 	.word	0x08008f95
 8008f7c:	08008f9d 	.word	0x08008f9d
 8008f80:	08008fa5 	.word	0x08008fa5
 8008f84:	08008fad 	.word	0x08008fad
 8008f88:	08008fb5 	.word	0x08008fb5
 8008f8c:	2302      	movs	r3, #2
 8008f8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008f92:	e01a      	b.n	8008fca <UART_SetConfig+0x5a2>
 8008f94:	2304      	movs	r3, #4
 8008f96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008f9a:	e016      	b.n	8008fca <UART_SetConfig+0x5a2>
 8008f9c:	2308      	movs	r3, #8
 8008f9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008fa2:	e012      	b.n	8008fca <UART_SetConfig+0x5a2>
 8008fa4:	2310      	movs	r3, #16
 8008fa6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008faa:	e00e      	b.n	8008fca <UART_SetConfig+0x5a2>
 8008fac:	2320      	movs	r3, #32
 8008fae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008fb2:	e00a      	b.n	8008fca <UART_SetConfig+0x5a2>
 8008fb4:	2340      	movs	r3, #64	; 0x40
 8008fb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008fba:	e006      	b.n	8008fca <UART_SetConfig+0x5a2>
 8008fbc:	2380      	movs	r3, #128	; 0x80
 8008fbe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008fc2:	e002      	b.n	8008fca <UART_SetConfig+0x5a2>
 8008fc4:	2380      	movs	r3, #128	; 0x80
 8008fc6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	4a40      	ldr	r2, [pc, #256]	; (80090d0 <UART_SetConfig+0x6a8>)
 8008fd0:	4293      	cmp	r3, r2
 8008fd2:	f040 80ef 	bne.w	80091b4 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008fd6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008fda:	2b20      	cmp	r3, #32
 8008fdc:	dc46      	bgt.n	800906c <UART_SetConfig+0x644>
 8008fde:	2b02      	cmp	r3, #2
 8008fe0:	f2c0 8081 	blt.w	80090e6 <UART_SetConfig+0x6be>
 8008fe4:	3b02      	subs	r3, #2
 8008fe6:	2b1e      	cmp	r3, #30
 8008fe8:	d87d      	bhi.n	80090e6 <UART_SetConfig+0x6be>
 8008fea:	a201      	add	r2, pc, #4	; (adr r2, 8008ff0 <UART_SetConfig+0x5c8>)
 8008fec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ff0:	08009073 	.word	0x08009073
 8008ff4:	080090e7 	.word	0x080090e7
 8008ff8:	0800907b 	.word	0x0800907b
 8008ffc:	080090e7 	.word	0x080090e7
 8009000:	080090e7 	.word	0x080090e7
 8009004:	080090e7 	.word	0x080090e7
 8009008:	0800908b 	.word	0x0800908b
 800900c:	080090e7 	.word	0x080090e7
 8009010:	080090e7 	.word	0x080090e7
 8009014:	080090e7 	.word	0x080090e7
 8009018:	080090e7 	.word	0x080090e7
 800901c:	080090e7 	.word	0x080090e7
 8009020:	080090e7 	.word	0x080090e7
 8009024:	080090e7 	.word	0x080090e7
 8009028:	0800909b 	.word	0x0800909b
 800902c:	080090e7 	.word	0x080090e7
 8009030:	080090e7 	.word	0x080090e7
 8009034:	080090e7 	.word	0x080090e7
 8009038:	080090e7 	.word	0x080090e7
 800903c:	080090e7 	.word	0x080090e7
 8009040:	080090e7 	.word	0x080090e7
 8009044:	080090e7 	.word	0x080090e7
 8009048:	080090e7 	.word	0x080090e7
 800904c:	080090e7 	.word	0x080090e7
 8009050:	080090e7 	.word	0x080090e7
 8009054:	080090e7 	.word	0x080090e7
 8009058:	080090e7 	.word	0x080090e7
 800905c:	080090e7 	.word	0x080090e7
 8009060:	080090e7 	.word	0x080090e7
 8009064:	080090e7 	.word	0x080090e7
 8009068:	080090d9 	.word	0x080090d9
 800906c:	2b40      	cmp	r3, #64	; 0x40
 800906e:	d036      	beq.n	80090de <UART_SetConfig+0x6b6>
 8009070:	e039      	b.n	80090e6 <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8009072:	f7fd ffa7 	bl	8006fc4 <HAL_RCCEx_GetD3PCLK1Freq>
 8009076:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009078:	e03b      	b.n	80090f2 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800907a:	f107 0314 	add.w	r3, r7, #20
 800907e:	4618      	mov	r0, r3
 8009080:	f7fd ffb6 	bl	8006ff0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009084:	69bb      	ldr	r3, [r7, #24]
 8009086:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009088:	e033      	b.n	80090f2 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800908a:	f107 0308 	add.w	r3, r7, #8
 800908e:	4618      	mov	r0, r3
 8009090:	f7fe f902 	bl	8007298 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009098:	e02b      	b.n	80090f2 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800909a:	4b0a      	ldr	r3, [pc, #40]	; (80090c4 <UART_SetConfig+0x69c>)
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	f003 0320 	and.w	r3, r3, #32
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d009      	beq.n	80090ba <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80090a6:	4b07      	ldr	r3, [pc, #28]	; (80090c4 <UART_SetConfig+0x69c>)
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	08db      	lsrs	r3, r3, #3
 80090ac:	f003 0303 	and.w	r3, r3, #3
 80090b0:	4a08      	ldr	r2, [pc, #32]	; (80090d4 <UART_SetConfig+0x6ac>)
 80090b2:	fa22 f303 	lsr.w	r3, r2, r3
 80090b6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80090b8:	e01b      	b.n	80090f2 <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 80090ba:	4b06      	ldr	r3, [pc, #24]	; (80090d4 <UART_SetConfig+0x6ac>)
 80090bc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80090be:	e018      	b.n	80090f2 <UART_SetConfig+0x6ca>
 80090c0:	40011400 	.word	0x40011400
 80090c4:	58024400 	.word	0x58024400
 80090c8:	40007800 	.word	0x40007800
 80090cc:	40007c00 	.word	0x40007c00
 80090d0:	58000c00 	.word	0x58000c00
 80090d4:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80090d8:	4bc4      	ldr	r3, [pc, #784]	; (80093ec <UART_SetConfig+0x9c4>)
 80090da:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80090dc:	e009      	b.n	80090f2 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80090de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80090e2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80090e4:	e005      	b.n	80090f2 <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 80090e6:	2300      	movs	r3, #0
 80090e8:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80090ea:	2301      	movs	r3, #1
 80090ec:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80090f0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80090f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	f000 81da 	beq.w	80094ae <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090fe:	4abc      	ldr	r2, [pc, #752]	; (80093f0 <UART_SetConfig+0x9c8>)
 8009100:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009104:	461a      	mov	r2, r3
 8009106:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009108:	fbb3 f3f2 	udiv	r3, r3, r2
 800910c:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	685a      	ldr	r2, [r3, #4]
 8009112:	4613      	mov	r3, r2
 8009114:	005b      	lsls	r3, r3, #1
 8009116:	4413      	add	r3, r2
 8009118:	6a3a      	ldr	r2, [r7, #32]
 800911a:	429a      	cmp	r2, r3
 800911c:	d305      	bcc.n	800912a <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	685b      	ldr	r3, [r3, #4]
 8009122:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009124:	6a3a      	ldr	r2, [r7, #32]
 8009126:	429a      	cmp	r2, r3
 8009128:	d903      	bls.n	8009132 <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 800912a:	2301      	movs	r3, #1
 800912c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8009130:	e1bd      	b.n	80094ae <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009132:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009134:	4618      	mov	r0, r3
 8009136:	f04f 0100 	mov.w	r1, #0
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800913e:	4aac      	ldr	r2, [pc, #688]	; (80093f0 <UART_SetConfig+0x9c8>)
 8009140:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009144:	b29a      	uxth	r2, r3
 8009146:	f04f 0300 	mov.w	r3, #0
 800914a:	f7f7 f8c5 	bl	80002d8 <__aeabi_uldivmod>
 800914e:	4602      	mov	r2, r0
 8009150:	460b      	mov	r3, r1
 8009152:	4610      	mov	r0, r2
 8009154:	4619      	mov	r1, r3
 8009156:	f04f 0200 	mov.w	r2, #0
 800915a:	f04f 0300 	mov.w	r3, #0
 800915e:	020b      	lsls	r3, r1, #8
 8009160:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009164:	0202      	lsls	r2, r0, #8
 8009166:	6879      	ldr	r1, [r7, #4]
 8009168:	6849      	ldr	r1, [r1, #4]
 800916a:	0849      	lsrs	r1, r1, #1
 800916c:	4608      	mov	r0, r1
 800916e:	f04f 0100 	mov.w	r1, #0
 8009172:	1814      	adds	r4, r2, r0
 8009174:	eb43 0501 	adc.w	r5, r3, r1
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	685b      	ldr	r3, [r3, #4]
 800917c:	461a      	mov	r2, r3
 800917e:	f04f 0300 	mov.w	r3, #0
 8009182:	4620      	mov	r0, r4
 8009184:	4629      	mov	r1, r5
 8009186:	f7f7 f8a7 	bl	80002d8 <__aeabi_uldivmod>
 800918a:	4602      	mov	r2, r0
 800918c:	460b      	mov	r3, r1
 800918e:	4613      	mov	r3, r2
 8009190:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009194:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009198:	d308      	bcc.n	80091ac <UART_SetConfig+0x784>
 800919a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800919c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80091a0:	d204      	bcs.n	80091ac <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80091a8:	60da      	str	r2, [r3, #12]
 80091aa:	e180      	b.n	80094ae <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 80091ac:	2301      	movs	r3, #1
 80091ae:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80091b2:	e17c      	b.n	80094ae <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	69db      	ldr	r3, [r3, #28]
 80091b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80091bc:	f040 80bf 	bne.w	800933e <UART_SetConfig+0x916>
  {
    switch (clocksource)
 80091c0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80091c4:	2b20      	cmp	r3, #32
 80091c6:	dc49      	bgt.n	800925c <UART_SetConfig+0x834>
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	db7c      	blt.n	80092c6 <UART_SetConfig+0x89e>
 80091cc:	2b20      	cmp	r3, #32
 80091ce:	d87a      	bhi.n	80092c6 <UART_SetConfig+0x89e>
 80091d0:	a201      	add	r2, pc, #4	; (adr r2, 80091d8 <UART_SetConfig+0x7b0>)
 80091d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091d6:	bf00      	nop
 80091d8:	08009263 	.word	0x08009263
 80091dc:	0800926b 	.word	0x0800926b
 80091e0:	080092c7 	.word	0x080092c7
 80091e4:	080092c7 	.word	0x080092c7
 80091e8:	08009273 	.word	0x08009273
 80091ec:	080092c7 	.word	0x080092c7
 80091f0:	080092c7 	.word	0x080092c7
 80091f4:	080092c7 	.word	0x080092c7
 80091f8:	08009283 	.word	0x08009283
 80091fc:	080092c7 	.word	0x080092c7
 8009200:	080092c7 	.word	0x080092c7
 8009204:	080092c7 	.word	0x080092c7
 8009208:	080092c7 	.word	0x080092c7
 800920c:	080092c7 	.word	0x080092c7
 8009210:	080092c7 	.word	0x080092c7
 8009214:	080092c7 	.word	0x080092c7
 8009218:	08009293 	.word	0x08009293
 800921c:	080092c7 	.word	0x080092c7
 8009220:	080092c7 	.word	0x080092c7
 8009224:	080092c7 	.word	0x080092c7
 8009228:	080092c7 	.word	0x080092c7
 800922c:	080092c7 	.word	0x080092c7
 8009230:	080092c7 	.word	0x080092c7
 8009234:	080092c7 	.word	0x080092c7
 8009238:	080092c7 	.word	0x080092c7
 800923c:	080092c7 	.word	0x080092c7
 8009240:	080092c7 	.word	0x080092c7
 8009244:	080092c7 	.word	0x080092c7
 8009248:	080092c7 	.word	0x080092c7
 800924c:	080092c7 	.word	0x080092c7
 8009250:	080092c7 	.word	0x080092c7
 8009254:	080092c7 	.word	0x080092c7
 8009258:	080092b9 	.word	0x080092b9
 800925c:	2b40      	cmp	r3, #64	; 0x40
 800925e:	d02e      	beq.n	80092be <UART_SetConfig+0x896>
 8009260:	e031      	b.n	80092c6 <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009262:	f7fc fa71 	bl	8005748 <HAL_RCC_GetPCLK1Freq>
 8009266:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009268:	e033      	b.n	80092d2 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800926a:	f7fc fa83 	bl	8005774 <HAL_RCC_GetPCLK2Freq>
 800926e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009270:	e02f      	b.n	80092d2 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009272:	f107 0314 	add.w	r3, r7, #20
 8009276:	4618      	mov	r0, r3
 8009278:	f7fd feba 	bl	8006ff0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800927c:	69bb      	ldr	r3, [r7, #24]
 800927e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009280:	e027      	b.n	80092d2 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009282:	f107 0308 	add.w	r3, r7, #8
 8009286:	4618      	mov	r0, r3
 8009288:	f7fe f806 	bl	8007298 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009290:	e01f      	b.n	80092d2 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009292:	4b58      	ldr	r3, [pc, #352]	; (80093f4 <UART_SetConfig+0x9cc>)
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	f003 0320 	and.w	r3, r3, #32
 800929a:	2b00      	cmp	r3, #0
 800929c:	d009      	beq.n	80092b2 <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800929e:	4b55      	ldr	r3, [pc, #340]	; (80093f4 <UART_SetConfig+0x9cc>)
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	08db      	lsrs	r3, r3, #3
 80092a4:	f003 0303 	and.w	r3, r3, #3
 80092a8:	4a53      	ldr	r2, [pc, #332]	; (80093f8 <UART_SetConfig+0x9d0>)
 80092aa:	fa22 f303 	lsr.w	r3, r2, r3
 80092ae:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80092b0:	e00f      	b.n	80092d2 <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 80092b2:	4b51      	ldr	r3, [pc, #324]	; (80093f8 <UART_SetConfig+0x9d0>)
 80092b4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80092b6:	e00c      	b.n	80092d2 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80092b8:	4b4c      	ldr	r3, [pc, #304]	; (80093ec <UART_SetConfig+0x9c4>)
 80092ba:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80092bc:	e009      	b.n	80092d2 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80092be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80092c2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80092c4:	e005      	b.n	80092d2 <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 80092c6:	2300      	movs	r3, #0
 80092c8:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80092ca:	2301      	movs	r3, #1
 80092cc:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80092d0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80092d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	f000 80ea 	beq.w	80094ae <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092de:	4a44      	ldr	r2, [pc, #272]	; (80093f0 <UART_SetConfig+0x9c8>)
 80092e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80092e4:	461a      	mov	r2, r3
 80092e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092e8:	fbb3 f3f2 	udiv	r3, r3, r2
 80092ec:	005a      	lsls	r2, r3, #1
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	685b      	ldr	r3, [r3, #4]
 80092f2:	085b      	lsrs	r3, r3, #1
 80092f4:	441a      	add	r2, r3
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	685b      	ldr	r3, [r3, #4]
 80092fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80092fe:	b29b      	uxth	r3, r3
 8009300:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009302:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009304:	2b0f      	cmp	r3, #15
 8009306:	d916      	bls.n	8009336 <UART_SetConfig+0x90e>
 8009308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800930a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800930e:	d212      	bcs.n	8009336 <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009312:	b29b      	uxth	r3, r3
 8009314:	f023 030f 	bic.w	r3, r3, #15
 8009318:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800931a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800931c:	085b      	lsrs	r3, r3, #1
 800931e:	b29b      	uxth	r3, r3
 8009320:	f003 0307 	and.w	r3, r3, #7
 8009324:	b29a      	uxth	r2, r3
 8009326:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009328:	4313      	orrs	r3, r2
 800932a:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8009332:	60da      	str	r2, [r3, #12]
 8009334:	e0bb      	b.n	80094ae <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8009336:	2301      	movs	r3, #1
 8009338:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800933c:	e0b7      	b.n	80094ae <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 800933e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009342:	2b20      	cmp	r3, #32
 8009344:	dc4a      	bgt.n	80093dc <UART_SetConfig+0x9b4>
 8009346:	2b00      	cmp	r3, #0
 8009348:	f2c0 8086 	blt.w	8009458 <UART_SetConfig+0xa30>
 800934c:	2b20      	cmp	r3, #32
 800934e:	f200 8083 	bhi.w	8009458 <UART_SetConfig+0xa30>
 8009352:	a201      	add	r2, pc, #4	; (adr r2, 8009358 <UART_SetConfig+0x930>)
 8009354:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009358:	080093e3 	.word	0x080093e3
 800935c:	080093fd 	.word	0x080093fd
 8009360:	08009459 	.word	0x08009459
 8009364:	08009459 	.word	0x08009459
 8009368:	08009405 	.word	0x08009405
 800936c:	08009459 	.word	0x08009459
 8009370:	08009459 	.word	0x08009459
 8009374:	08009459 	.word	0x08009459
 8009378:	08009415 	.word	0x08009415
 800937c:	08009459 	.word	0x08009459
 8009380:	08009459 	.word	0x08009459
 8009384:	08009459 	.word	0x08009459
 8009388:	08009459 	.word	0x08009459
 800938c:	08009459 	.word	0x08009459
 8009390:	08009459 	.word	0x08009459
 8009394:	08009459 	.word	0x08009459
 8009398:	08009425 	.word	0x08009425
 800939c:	08009459 	.word	0x08009459
 80093a0:	08009459 	.word	0x08009459
 80093a4:	08009459 	.word	0x08009459
 80093a8:	08009459 	.word	0x08009459
 80093ac:	08009459 	.word	0x08009459
 80093b0:	08009459 	.word	0x08009459
 80093b4:	08009459 	.word	0x08009459
 80093b8:	08009459 	.word	0x08009459
 80093bc:	08009459 	.word	0x08009459
 80093c0:	08009459 	.word	0x08009459
 80093c4:	08009459 	.word	0x08009459
 80093c8:	08009459 	.word	0x08009459
 80093cc:	08009459 	.word	0x08009459
 80093d0:	08009459 	.word	0x08009459
 80093d4:	08009459 	.word	0x08009459
 80093d8:	0800944b 	.word	0x0800944b
 80093dc:	2b40      	cmp	r3, #64	; 0x40
 80093de:	d037      	beq.n	8009450 <UART_SetConfig+0xa28>
 80093e0:	e03a      	b.n	8009458 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80093e2:	f7fc f9b1 	bl	8005748 <HAL_RCC_GetPCLK1Freq>
 80093e6:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80093e8:	e03c      	b.n	8009464 <UART_SetConfig+0xa3c>
 80093ea:	bf00      	nop
 80093ec:	003d0900 	.word	0x003d0900
 80093f0:	0800be70 	.word	0x0800be70
 80093f4:	58024400 	.word	0x58024400
 80093f8:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80093fc:	f7fc f9ba 	bl	8005774 <HAL_RCC_GetPCLK2Freq>
 8009400:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009402:	e02f      	b.n	8009464 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009404:	f107 0314 	add.w	r3, r7, #20
 8009408:	4618      	mov	r0, r3
 800940a:	f7fd fdf1 	bl	8006ff0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800940e:	69bb      	ldr	r3, [r7, #24]
 8009410:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009412:	e027      	b.n	8009464 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009414:	f107 0308 	add.w	r3, r7, #8
 8009418:	4618      	mov	r0, r3
 800941a:	f7fd ff3d 	bl	8007298 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009422:	e01f      	b.n	8009464 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009424:	4b2c      	ldr	r3, [pc, #176]	; (80094d8 <UART_SetConfig+0xab0>)
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	f003 0320 	and.w	r3, r3, #32
 800942c:	2b00      	cmp	r3, #0
 800942e:	d009      	beq.n	8009444 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009430:	4b29      	ldr	r3, [pc, #164]	; (80094d8 <UART_SetConfig+0xab0>)
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	08db      	lsrs	r3, r3, #3
 8009436:	f003 0303 	and.w	r3, r3, #3
 800943a:	4a28      	ldr	r2, [pc, #160]	; (80094dc <UART_SetConfig+0xab4>)
 800943c:	fa22 f303 	lsr.w	r3, r2, r3
 8009440:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009442:	e00f      	b.n	8009464 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 8009444:	4b25      	ldr	r3, [pc, #148]	; (80094dc <UART_SetConfig+0xab4>)
 8009446:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009448:	e00c      	b.n	8009464 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800944a:	4b25      	ldr	r3, [pc, #148]	; (80094e0 <UART_SetConfig+0xab8>)
 800944c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800944e:	e009      	b.n	8009464 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009450:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009454:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009456:	e005      	b.n	8009464 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 8009458:	2300      	movs	r3, #0
 800945a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800945c:	2301      	movs	r3, #1
 800945e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8009462:	bf00      	nop
    }

    if (pclk != 0U)
 8009464:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009466:	2b00      	cmp	r3, #0
 8009468:	d021      	beq.n	80094ae <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800946e:	4a1d      	ldr	r2, [pc, #116]	; (80094e4 <UART_SetConfig+0xabc>)
 8009470:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009474:	461a      	mov	r2, r3
 8009476:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009478:	fbb3 f2f2 	udiv	r2, r3, r2
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	685b      	ldr	r3, [r3, #4]
 8009480:	085b      	lsrs	r3, r3, #1
 8009482:	441a      	add	r2, r3
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	685b      	ldr	r3, [r3, #4]
 8009488:	fbb2 f3f3 	udiv	r3, r2, r3
 800948c:	b29b      	uxth	r3, r3
 800948e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009492:	2b0f      	cmp	r3, #15
 8009494:	d908      	bls.n	80094a8 <UART_SetConfig+0xa80>
 8009496:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009498:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800949c:	d204      	bcs.n	80094a8 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80094a4:	60da      	str	r2, [r3, #12]
 80094a6:	e002      	b.n	80094ae <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 80094a8:	2301      	movs	r3, #1
 80094aa:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	2201      	movs	r2, #1
 80094b2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	2201      	movs	r2, #1
 80094ba:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	2200      	movs	r2, #0
 80094c2:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	2200      	movs	r2, #0
 80094c8:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80094ca:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 80094ce:	4618      	mov	r0, r3
 80094d0:	3738      	adds	r7, #56	; 0x38
 80094d2:	46bd      	mov	sp, r7
 80094d4:	bdb0      	pop	{r4, r5, r7, pc}
 80094d6:	bf00      	nop
 80094d8:	58024400 	.word	0x58024400
 80094dc:	03d09000 	.word	0x03d09000
 80094e0:	003d0900 	.word	0x003d0900
 80094e4:	0800be70 	.word	0x0800be70

080094e8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80094e8:	b480      	push	{r7}
 80094ea:	b083      	sub	sp, #12
 80094ec:	af00      	add	r7, sp, #0
 80094ee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094f4:	f003 0301 	and.w	r3, r3, #1
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d00a      	beq.n	8009512 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	685b      	ldr	r3, [r3, #4]
 8009502:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	430a      	orrs	r2, r1
 8009510:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009516:	f003 0302 	and.w	r3, r3, #2
 800951a:	2b00      	cmp	r3, #0
 800951c:	d00a      	beq.n	8009534 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	685b      	ldr	r3, [r3, #4]
 8009524:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	430a      	orrs	r2, r1
 8009532:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009538:	f003 0304 	and.w	r3, r3, #4
 800953c:	2b00      	cmp	r3, #0
 800953e:	d00a      	beq.n	8009556 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	685b      	ldr	r3, [r3, #4]
 8009546:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	430a      	orrs	r2, r1
 8009554:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800955a:	f003 0308 	and.w	r3, r3, #8
 800955e:	2b00      	cmp	r3, #0
 8009560:	d00a      	beq.n	8009578 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	685b      	ldr	r3, [r3, #4]
 8009568:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	430a      	orrs	r2, r1
 8009576:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800957c:	f003 0310 	and.w	r3, r3, #16
 8009580:	2b00      	cmp	r3, #0
 8009582:	d00a      	beq.n	800959a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	689b      	ldr	r3, [r3, #8]
 800958a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	430a      	orrs	r2, r1
 8009598:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800959e:	f003 0320 	and.w	r3, r3, #32
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d00a      	beq.n	80095bc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	689b      	ldr	r3, [r3, #8]
 80095ac:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	430a      	orrs	r2, r1
 80095ba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d01a      	beq.n	80095fe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	685b      	ldr	r3, [r3, #4]
 80095ce:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	430a      	orrs	r2, r1
 80095dc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80095e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80095e6:	d10a      	bne.n	80095fe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	685b      	ldr	r3, [r3, #4]
 80095ee:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	430a      	orrs	r2, r1
 80095fc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009602:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009606:	2b00      	cmp	r3, #0
 8009608:	d00a      	beq.n	8009620 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	685b      	ldr	r3, [r3, #4]
 8009610:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	430a      	orrs	r2, r1
 800961e:	605a      	str	r2, [r3, #4]
  }
}
 8009620:	bf00      	nop
 8009622:	370c      	adds	r7, #12
 8009624:	46bd      	mov	sp, r7
 8009626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800962a:	4770      	bx	lr

0800962c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800962c:	b580      	push	{r7, lr}
 800962e:	b086      	sub	sp, #24
 8009630:	af02      	add	r7, sp, #8
 8009632:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	2200      	movs	r2, #0
 8009638:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800963c:	f7f7 fe84 	bl	8001348 <HAL_GetTick>
 8009640:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	f003 0308 	and.w	r3, r3, #8
 800964c:	2b08      	cmp	r3, #8
 800964e:	d10e      	bne.n	800966e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009650:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009654:	9300      	str	r3, [sp, #0]
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	2200      	movs	r2, #0
 800965a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800965e:	6878      	ldr	r0, [r7, #4]
 8009660:	f000 f82f 	bl	80096c2 <UART_WaitOnFlagUntilTimeout>
 8009664:	4603      	mov	r3, r0
 8009666:	2b00      	cmp	r3, #0
 8009668:	d001      	beq.n	800966e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800966a:	2303      	movs	r3, #3
 800966c:	e025      	b.n	80096ba <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	f003 0304 	and.w	r3, r3, #4
 8009678:	2b04      	cmp	r3, #4
 800967a:	d10e      	bne.n	800969a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800967c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009680:	9300      	str	r3, [sp, #0]
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	2200      	movs	r2, #0
 8009686:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800968a:	6878      	ldr	r0, [r7, #4]
 800968c:	f000 f819 	bl	80096c2 <UART_WaitOnFlagUntilTimeout>
 8009690:	4603      	mov	r3, r0
 8009692:	2b00      	cmp	r3, #0
 8009694:	d001      	beq.n	800969a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009696:	2303      	movs	r3, #3
 8009698:	e00f      	b.n	80096ba <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	2220      	movs	r2, #32
 800969e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	2220      	movs	r2, #32
 80096a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	2200      	movs	r2, #0
 80096ae:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	2200      	movs	r2, #0
 80096b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80096b8:	2300      	movs	r3, #0
}
 80096ba:	4618      	mov	r0, r3
 80096bc:	3710      	adds	r7, #16
 80096be:	46bd      	mov	sp, r7
 80096c0:	bd80      	pop	{r7, pc}

080096c2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80096c2:	b580      	push	{r7, lr}
 80096c4:	b084      	sub	sp, #16
 80096c6:	af00      	add	r7, sp, #0
 80096c8:	60f8      	str	r0, [r7, #12]
 80096ca:	60b9      	str	r1, [r7, #8]
 80096cc:	603b      	str	r3, [r7, #0]
 80096ce:	4613      	mov	r3, r2
 80096d0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80096d2:	e062      	b.n	800979a <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80096d4:	69bb      	ldr	r3, [r7, #24]
 80096d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096da:	d05e      	beq.n	800979a <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80096dc:	f7f7 fe34 	bl	8001348 <HAL_GetTick>
 80096e0:	4602      	mov	r2, r0
 80096e2:	683b      	ldr	r3, [r7, #0]
 80096e4:	1ad3      	subs	r3, r2, r3
 80096e6:	69ba      	ldr	r2, [r7, #24]
 80096e8:	429a      	cmp	r2, r3
 80096ea:	d302      	bcc.n	80096f2 <UART_WaitOnFlagUntilTimeout+0x30>
 80096ec:	69bb      	ldr	r3, [r7, #24]
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d11d      	bne.n	800972e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	681a      	ldr	r2, [r3, #0]
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009700:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	689a      	ldr	r2, [r3, #8]
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	f022 0201 	bic.w	r2, r2, #1
 8009710:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	2220      	movs	r2, #32
 8009716:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	2220      	movs	r2, #32
 800971e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	2200      	movs	r2, #0
 8009726:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800972a:	2303      	movs	r3, #3
 800972c:	e045      	b.n	80097ba <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	f003 0304 	and.w	r3, r3, #4
 8009738:	2b00      	cmp	r3, #0
 800973a:	d02e      	beq.n	800979a <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	69db      	ldr	r3, [r3, #28]
 8009742:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009746:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800974a:	d126      	bne.n	800979a <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009754:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	681a      	ldr	r2, [r3, #0]
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009764:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	689a      	ldr	r2, [r3, #8]
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	f022 0201 	bic.w	r2, r2, #1
 8009774:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	2220      	movs	r2, #32
 800977a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	2220      	movs	r2, #32
 8009782:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	2220      	movs	r2, #32
 800978a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	2200      	movs	r2, #0
 8009792:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8009796:	2303      	movs	r3, #3
 8009798:	e00f      	b.n	80097ba <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	69da      	ldr	r2, [r3, #28]
 80097a0:	68bb      	ldr	r3, [r7, #8]
 80097a2:	4013      	ands	r3, r2
 80097a4:	68ba      	ldr	r2, [r7, #8]
 80097a6:	429a      	cmp	r2, r3
 80097a8:	bf0c      	ite	eq
 80097aa:	2301      	moveq	r3, #1
 80097ac:	2300      	movne	r3, #0
 80097ae:	b2db      	uxtb	r3, r3
 80097b0:	461a      	mov	r2, r3
 80097b2:	79fb      	ldrb	r3, [r7, #7]
 80097b4:	429a      	cmp	r2, r3
 80097b6:	d08d      	beq.n	80096d4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80097b8:	2300      	movs	r3, #0
}
 80097ba:	4618      	mov	r0, r3
 80097bc:	3710      	adds	r7, #16
 80097be:	46bd      	mov	sp, r7
 80097c0:	bd80      	pop	{r7, pc}

080097c2 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80097c2:	b480      	push	{r7}
 80097c4:	b083      	sub	sp, #12
 80097c6:	af00      	add	r7, sp, #0
 80097c8:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	681a      	ldr	r2, [r3, #0]
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80097d8:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	689a      	ldr	r2, [r3, #8]
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 80097e8:	609a      	str	r2, [r3, #8]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	2220      	movs	r2, #32
 80097ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 80097f2:	bf00      	nop
 80097f4:	370c      	adds	r7, #12
 80097f6:	46bd      	mov	sp, r7
 80097f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097fc:	4770      	bx	lr
	...

08009800 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009800:	b480      	push	{r7}
 8009802:	b083      	sub	sp, #12
 8009804:	af00      	add	r7, sp, #0
 8009806:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	681a      	ldr	r2, [r3, #0]
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8009816:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	6899      	ldr	r1, [r3, #8]
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	681a      	ldr	r2, [r3, #0]
 8009822:	4b0f      	ldr	r3, [pc, #60]	; (8009860 <UART_EndRxTransfer+0x60>)
 8009824:	400b      	ands	r3, r1
 8009826:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800982c:	2b01      	cmp	r3, #1
 800982e:	d107      	bne.n	8009840 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	681a      	ldr	r2, [r3, #0]
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	f022 0210 	bic.w	r2, r2, #16
 800983e:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	2220      	movs	r2, #32
 8009844:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	2200      	movs	r2, #0
 800984c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	2200      	movs	r2, #0
 8009852:	671a      	str	r2, [r3, #112]	; 0x70
}
 8009854:	bf00      	nop
 8009856:	370c      	adds	r7, #12
 8009858:	46bd      	mov	sp, r7
 800985a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800985e:	4770      	bx	lr
 8009860:	effffffe 	.word	0xeffffffe

08009864 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009864:	b580      	push	{r7, lr}
 8009866:	b084      	sub	sp, #16
 8009868:	af00      	add	r7, sp, #0
 800986a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009870:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	69db      	ldr	r3, [r3, #28]
 8009876:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800987a:	d014      	beq.n	80098a6 <UART_DMATransmitCplt+0x42>
  {
    huart->TxXferCount = 0U;
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	2200      	movs	r2, #0
 8009880:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	689a      	ldr	r2, [r3, #8]
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009892:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	681a      	ldr	r2, [r3, #0]
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80098a2:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80098a4:	e002      	b.n	80098ac <UART_DMATransmitCplt+0x48>
    HAL_UART_TxCpltCallback(huart);
 80098a6:	68f8      	ldr	r0, [r7, #12]
 80098a8:	f7f7 faac 	bl	8000e04 <HAL_UART_TxCpltCallback>
}
 80098ac:	bf00      	nop
 80098ae:	3710      	adds	r7, #16
 80098b0:	46bd      	mov	sp, r7
 80098b2:	bd80      	pop	{r7, pc}

080098b4 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80098b4:	b580      	push	{r7, lr}
 80098b6:	b084      	sub	sp, #16
 80098b8:	af00      	add	r7, sp, #0
 80098ba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098c0:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80098c2:	68f8      	ldr	r0, [r7, #12]
 80098c4:	f7f7 fa92 	bl	8000dec <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80098c8:	bf00      	nop
 80098ca:	3710      	adds	r7, #16
 80098cc:	46bd      	mov	sp, r7
 80098ce:	bd80      	pop	{r7, pc}

080098d0 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80098d0:	b580      	push	{r7, lr}
 80098d2:	b086      	sub	sp, #24
 80098d4:	af00      	add	r7, sp, #0
 80098d6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098dc:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80098de:	697b      	ldr	r3, [r7, #20]
 80098e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80098e4:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80098e6:	697b      	ldr	r3, [r7, #20]
 80098e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80098ec:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80098ee:	697b      	ldr	r3, [r7, #20]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	689b      	ldr	r3, [r3, #8]
 80098f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80098f8:	2b80      	cmp	r3, #128	; 0x80
 80098fa:	d109      	bne.n	8009910 <UART_DMAError+0x40>
 80098fc:	693b      	ldr	r3, [r7, #16]
 80098fe:	2b21      	cmp	r3, #33	; 0x21
 8009900:	d106      	bne.n	8009910 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8009902:	697b      	ldr	r3, [r7, #20]
 8009904:	2200      	movs	r2, #0
 8009906:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800990a:	6978      	ldr	r0, [r7, #20]
 800990c:	f7ff ff59 	bl	80097c2 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8009910:	697b      	ldr	r3, [r7, #20]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	689b      	ldr	r3, [r3, #8]
 8009916:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800991a:	2b40      	cmp	r3, #64	; 0x40
 800991c:	d109      	bne.n	8009932 <UART_DMAError+0x62>
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	2b22      	cmp	r3, #34	; 0x22
 8009922:	d106      	bne.n	8009932 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8009924:	697b      	ldr	r3, [r7, #20]
 8009926:	2200      	movs	r2, #0
 8009928:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800992c:	6978      	ldr	r0, [r7, #20]
 800992e:	f7ff ff67 	bl	8009800 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009932:	697b      	ldr	r3, [r7, #20]
 8009934:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009938:	f043 0210 	orr.w	r2, r3, #16
 800993c:	697b      	ldr	r3, [r7, #20]
 800993e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009942:	6978      	ldr	r0, [r7, #20]
 8009944:	f7ff f85a 	bl	80089fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009948:	bf00      	nop
 800994a:	3718      	adds	r7, #24
 800994c:	46bd      	mov	sp, r7
 800994e:	bd80      	pop	{r7, pc}

08009950 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009950:	b580      	push	{r7, lr}
 8009952:	b084      	sub	sp, #16
 8009954:	af00      	add	r7, sp, #0
 8009956:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800995c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	2200      	movs	r2, #0
 8009962:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	2200      	movs	r2, #0
 800996a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800996e:	68f8      	ldr	r0, [r7, #12]
 8009970:	f7ff f844 	bl	80089fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009974:	bf00      	nop
 8009976:	3710      	adds	r7, #16
 8009978:	46bd      	mov	sp, r7
 800997a:	bd80      	pop	{r7, pc}

0800997c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800997c:	b580      	push	{r7, lr}
 800997e:	b082      	sub	sp, #8
 8009980:	af00      	add	r7, sp, #0
 8009982:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	681a      	ldr	r2, [r3, #0]
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009992:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	2220      	movs	r2, #32
 8009998:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	2200      	movs	r2, #0
 80099a0:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80099a2:	6878      	ldr	r0, [r7, #4]
 80099a4:	f7f7 fa2e 	bl	8000e04 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80099a8:	bf00      	nop
 80099aa:	3708      	adds	r7, #8
 80099ac:	46bd      	mov	sp, r7
 80099ae:	bd80      	pop	{r7, pc}

080099b0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80099b0:	b480      	push	{r7}
 80099b2:	b083      	sub	sp, #12
 80099b4:	af00      	add	r7, sp, #0
 80099b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80099b8:	bf00      	nop
 80099ba:	370c      	adds	r7, #12
 80099bc:	46bd      	mov	sp, r7
 80099be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c2:	4770      	bx	lr

080099c4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80099c4:	b480      	push	{r7}
 80099c6:	b083      	sub	sp, #12
 80099c8:	af00      	add	r7, sp, #0
 80099ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80099cc:	bf00      	nop
 80099ce:	370c      	adds	r7, #12
 80099d0:	46bd      	mov	sp, r7
 80099d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d6:	4770      	bx	lr

080099d8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80099d8:	b480      	push	{r7}
 80099da:	b083      	sub	sp, #12
 80099dc:	af00      	add	r7, sp, #0
 80099de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80099e0:	bf00      	nop
 80099e2:	370c      	adds	r7, #12
 80099e4:	46bd      	mov	sp, r7
 80099e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ea:	4770      	bx	lr

080099ec <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80099ec:	b480      	push	{r7}
 80099ee:	b085      	sub	sp, #20
 80099f0:	af00      	add	r7, sp, #0
 80099f2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80099fa:	2b01      	cmp	r3, #1
 80099fc:	d101      	bne.n	8009a02 <HAL_UARTEx_DisableFifoMode+0x16>
 80099fe:	2302      	movs	r3, #2
 8009a00:	e027      	b.n	8009a52 <HAL_UARTEx_DisableFifoMode+0x66>
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	2201      	movs	r2, #1
 8009a06:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	2224      	movs	r2, #36	; 0x24
 8009a0e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	681a      	ldr	r2, [r3, #0]
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	f022 0201 	bic.w	r2, r2, #1
 8009a28:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009a30:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	2200      	movs	r2, #0
 8009a36:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	68fa      	ldr	r2, [r7, #12]
 8009a3e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	2220      	movs	r2, #32
 8009a44:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	2200      	movs	r2, #0
 8009a4c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009a50:	2300      	movs	r3, #0
}
 8009a52:	4618      	mov	r0, r3
 8009a54:	3714      	adds	r7, #20
 8009a56:	46bd      	mov	sp, r7
 8009a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a5c:	4770      	bx	lr

08009a5e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009a5e:	b580      	push	{r7, lr}
 8009a60:	b084      	sub	sp, #16
 8009a62:	af00      	add	r7, sp, #0
 8009a64:	6078      	str	r0, [r7, #4]
 8009a66:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009a6e:	2b01      	cmp	r3, #1
 8009a70:	d101      	bne.n	8009a76 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009a72:	2302      	movs	r3, #2
 8009a74:	e02d      	b.n	8009ad2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	2201      	movs	r2, #1
 8009a7a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	2224      	movs	r2, #36	; 0x24
 8009a82:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	681a      	ldr	r2, [r3, #0]
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	f022 0201 	bic.w	r2, r2, #1
 8009a9c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	689b      	ldr	r3, [r3, #8]
 8009aa4:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	683a      	ldr	r2, [r7, #0]
 8009aae:	430a      	orrs	r2, r1
 8009ab0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009ab2:	6878      	ldr	r0, [r7, #4]
 8009ab4:	f000 f850 	bl	8009b58 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	68fa      	ldr	r2, [r7, #12]
 8009abe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	2220      	movs	r2, #32
 8009ac4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	2200      	movs	r2, #0
 8009acc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009ad0:	2300      	movs	r3, #0
}
 8009ad2:	4618      	mov	r0, r3
 8009ad4:	3710      	adds	r7, #16
 8009ad6:	46bd      	mov	sp, r7
 8009ad8:	bd80      	pop	{r7, pc}

08009ada <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009ada:	b580      	push	{r7, lr}
 8009adc:	b084      	sub	sp, #16
 8009ade:	af00      	add	r7, sp, #0
 8009ae0:	6078      	str	r0, [r7, #4]
 8009ae2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009aea:	2b01      	cmp	r3, #1
 8009aec:	d101      	bne.n	8009af2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009aee:	2302      	movs	r3, #2
 8009af0:	e02d      	b.n	8009b4e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	2201      	movs	r2, #1
 8009af6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	2224      	movs	r2, #36	; 0x24
 8009afe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	681a      	ldr	r2, [r3, #0]
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	f022 0201 	bic.w	r2, r2, #1
 8009b18:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	689b      	ldr	r3, [r3, #8]
 8009b20:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	683a      	ldr	r2, [r7, #0]
 8009b2a:	430a      	orrs	r2, r1
 8009b2c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009b2e:	6878      	ldr	r0, [r7, #4]
 8009b30:	f000 f812 	bl	8009b58 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	68fa      	ldr	r2, [r7, #12]
 8009b3a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	2220      	movs	r2, #32
 8009b40:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	2200      	movs	r2, #0
 8009b48:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009b4c:	2300      	movs	r3, #0
}
 8009b4e:	4618      	mov	r0, r3
 8009b50:	3710      	adds	r7, #16
 8009b52:	46bd      	mov	sp, r7
 8009b54:	bd80      	pop	{r7, pc}
	...

08009b58 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009b58:	b480      	push	{r7}
 8009b5a:	b085      	sub	sp, #20
 8009b5c:	af00      	add	r7, sp, #0
 8009b5e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d108      	bne.n	8009b7a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	2201      	movs	r2, #1
 8009b6c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	2201      	movs	r2, #1
 8009b74:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009b78:	e031      	b.n	8009bde <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009b7a:	2310      	movs	r3, #16
 8009b7c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009b7e:	2310      	movs	r3, #16
 8009b80:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	689b      	ldr	r3, [r3, #8]
 8009b88:	0e5b      	lsrs	r3, r3, #25
 8009b8a:	b2db      	uxtb	r3, r3
 8009b8c:	f003 0307 	and.w	r3, r3, #7
 8009b90:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	689b      	ldr	r3, [r3, #8]
 8009b98:	0f5b      	lsrs	r3, r3, #29
 8009b9a:	b2db      	uxtb	r3, r3
 8009b9c:	f003 0307 	and.w	r3, r3, #7
 8009ba0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009ba2:	7bbb      	ldrb	r3, [r7, #14]
 8009ba4:	7b3a      	ldrb	r2, [r7, #12]
 8009ba6:	4911      	ldr	r1, [pc, #68]	; (8009bec <UARTEx_SetNbDataToProcess+0x94>)
 8009ba8:	5c8a      	ldrb	r2, [r1, r2]
 8009baa:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009bae:	7b3a      	ldrb	r2, [r7, #12]
 8009bb0:	490f      	ldr	r1, [pc, #60]	; (8009bf0 <UARTEx_SetNbDataToProcess+0x98>)
 8009bb2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009bb4:	fb93 f3f2 	sdiv	r3, r3, r2
 8009bb8:	b29a      	uxth	r2, r3
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009bc0:	7bfb      	ldrb	r3, [r7, #15]
 8009bc2:	7b7a      	ldrb	r2, [r7, #13]
 8009bc4:	4909      	ldr	r1, [pc, #36]	; (8009bec <UARTEx_SetNbDataToProcess+0x94>)
 8009bc6:	5c8a      	ldrb	r2, [r1, r2]
 8009bc8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009bcc:	7b7a      	ldrb	r2, [r7, #13]
 8009bce:	4908      	ldr	r1, [pc, #32]	; (8009bf0 <UARTEx_SetNbDataToProcess+0x98>)
 8009bd0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009bd2:	fb93 f3f2 	sdiv	r3, r3, r2
 8009bd6:	b29a      	uxth	r2, r3
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8009bde:	bf00      	nop
 8009be0:	3714      	adds	r7, #20
 8009be2:	46bd      	mov	sp, r7
 8009be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009be8:	4770      	bx	lr
 8009bea:	bf00      	nop
 8009bec:	0800be88 	.word	0x0800be88
 8009bf0:	0800be90 	.word	0x0800be90

08009bf4 <MX_PDM2PCM_Init>:
/* USER CODE BEGIN 1 */
/* USER CODE END 1 */

/* PDM2PCM init function */
void MX_PDM2PCM_Init(void)
{
 8009bf4:	b580      	push	{r7, lr}
 8009bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

   /**
  */
  PDM1_filter_handler.bit_order = PDM_FILTER_BIT_ORDER_MSB;
 8009bf8:	4b1f      	ldr	r3, [pc, #124]	; (8009c78 <MX_PDM2PCM_Init+0x84>)
 8009bfa:	2201      	movs	r2, #1
 8009bfc:	801a      	strh	r2, [r3, #0]
  PDM1_filter_handler.endianness = PDM_FILTER_ENDIANNESS_LE;
 8009bfe:	4b1e      	ldr	r3, [pc, #120]	; (8009c78 <MX_PDM2PCM_Init+0x84>)
 8009c00:	2200      	movs	r2, #0
 8009c02:	805a      	strh	r2, [r3, #2]
  PDM1_filter_handler.high_pass_tap = 2104533974;
 8009c04:	4b1c      	ldr	r3, [pc, #112]	; (8009c78 <MX_PDM2PCM_Init+0x84>)
 8009c06:	4a1d      	ldr	r2, [pc, #116]	; (8009c7c <MX_PDM2PCM_Init+0x88>)
 8009c08:	605a      	str	r2, [r3, #4]
  PDM1_filter_handler.in_ptr_channels = 2;
 8009c0a:	4b1b      	ldr	r3, [pc, #108]	; (8009c78 <MX_PDM2PCM_Init+0x84>)
 8009c0c:	2202      	movs	r2, #2
 8009c0e:	811a      	strh	r2, [r3, #8]
  PDM1_filter_handler.out_ptr_channels = 2;
 8009c10:	4b19      	ldr	r3, [pc, #100]	; (8009c78 <MX_PDM2PCM_Init+0x84>)
 8009c12:	2202      	movs	r2, #2
 8009c14:	815a      	strh	r2, [r3, #10]
  PDM_Filter_Init(&PDM1_filter_handler);
 8009c16:	4818      	ldr	r0, [pc, #96]	; (8009c78 <MX_PDM2PCM_Init+0x84>)
 8009c18:	f001 fd1a 	bl	800b650 <PDM_Filter_Init>

  PDM1_filter_config.decimation_factor = PDM_FILTER_DEC_FACTOR_64;
 8009c1c:	4b18      	ldr	r3, [pc, #96]	; (8009c80 <MX_PDM2PCM_Init+0x8c>)
 8009c1e:	2202      	movs	r2, #2
 8009c20:	801a      	strh	r2, [r3, #0]
  PDM1_filter_config.output_samples_number = 16;
 8009c22:	4b17      	ldr	r3, [pc, #92]	; (8009c80 <MX_PDM2PCM_Init+0x8c>)
 8009c24:	2210      	movs	r2, #16
 8009c26:	805a      	strh	r2, [r3, #2]
  PDM1_filter_config.mic_gain = 4;
 8009c28:	4b15      	ldr	r3, [pc, #84]	; (8009c80 <MX_PDM2PCM_Init+0x8c>)
 8009c2a:	2204      	movs	r2, #4
 8009c2c:	809a      	strh	r2, [r3, #4]
  PDM_Filter_setConfig(&PDM1_filter_handler, &PDM1_filter_config);
 8009c2e:	4914      	ldr	r1, [pc, #80]	; (8009c80 <MX_PDM2PCM_Init+0x8c>)
 8009c30:	4811      	ldr	r0, [pc, #68]	; (8009c78 <MX_PDM2PCM_Init+0x84>)
 8009c32:	f001 fddd 	bl	800b7f0 <PDM_Filter_setConfig>

  PDM2_filter_handler.bit_order = PDM_FILTER_BIT_ORDER_MSB;
 8009c36:	4b13      	ldr	r3, [pc, #76]	; (8009c84 <MX_PDM2PCM_Init+0x90>)
 8009c38:	2201      	movs	r2, #1
 8009c3a:	801a      	strh	r2, [r3, #0]
  PDM2_filter_handler.endianness = PDM_FILTER_ENDIANNESS_LE;
 8009c3c:	4b11      	ldr	r3, [pc, #68]	; (8009c84 <MX_PDM2PCM_Init+0x90>)
 8009c3e:	2200      	movs	r2, #0
 8009c40:	805a      	strh	r2, [r3, #2]
  PDM2_filter_handler.high_pass_tap = 2104533974;
 8009c42:	4b10      	ldr	r3, [pc, #64]	; (8009c84 <MX_PDM2PCM_Init+0x90>)
 8009c44:	4a0d      	ldr	r2, [pc, #52]	; (8009c7c <MX_PDM2PCM_Init+0x88>)
 8009c46:	605a      	str	r2, [r3, #4]
  PDM2_filter_handler.in_ptr_channels = 2;
 8009c48:	4b0e      	ldr	r3, [pc, #56]	; (8009c84 <MX_PDM2PCM_Init+0x90>)
 8009c4a:	2202      	movs	r2, #2
 8009c4c:	811a      	strh	r2, [r3, #8]
  PDM2_filter_handler.out_ptr_channels = 2;
 8009c4e:	4b0d      	ldr	r3, [pc, #52]	; (8009c84 <MX_PDM2PCM_Init+0x90>)
 8009c50:	2202      	movs	r2, #2
 8009c52:	815a      	strh	r2, [r3, #10]
  PDM_Filter_Init(&PDM2_filter_handler);
 8009c54:	480b      	ldr	r0, [pc, #44]	; (8009c84 <MX_PDM2PCM_Init+0x90>)
 8009c56:	f001 fcfb 	bl	800b650 <PDM_Filter_Init>

  PDM2_filter_config.decimation_factor = PDM_FILTER_DEC_FACTOR_64;
 8009c5a:	4b0b      	ldr	r3, [pc, #44]	; (8009c88 <MX_PDM2PCM_Init+0x94>)
 8009c5c:	2202      	movs	r2, #2
 8009c5e:	801a      	strh	r2, [r3, #0]
  PDM2_filter_config.output_samples_number = 16;
 8009c60:	4b09      	ldr	r3, [pc, #36]	; (8009c88 <MX_PDM2PCM_Init+0x94>)
 8009c62:	2210      	movs	r2, #16
 8009c64:	805a      	strh	r2, [r3, #2]
  PDM2_filter_config.mic_gain = 4;
 8009c66:	4b08      	ldr	r3, [pc, #32]	; (8009c88 <MX_PDM2PCM_Init+0x94>)
 8009c68:	2204      	movs	r2, #4
 8009c6a:	809a      	strh	r2, [r3, #4]
  PDM_Filter_setConfig(&PDM2_filter_handler, &PDM2_filter_config);
 8009c6c:	4906      	ldr	r1, [pc, #24]	; (8009c88 <MX_PDM2PCM_Init+0x94>)
 8009c6e:	4805      	ldr	r0, [pc, #20]	; (8009c84 <MX_PDM2PCM_Init+0x90>)
 8009c70:	f001 fdbe 	bl	800b7f0 <PDM_Filter_setConfig>

  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */

}
 8009c74:	bf00      	nop
 8009c76:	bd80      	pop	{r7, pc}
 8009c78:	240007dc 	.word	0x240007dc
 8009c7c:	7d70a3d6 	.word	0x7d70a3d6
 8009c80:	24000788 	.word	0x24000788
 8009c84:	24000790 	.word	0x24000790
 8009c88:	24000780 	.word	0x24000780

08009c8c <D16_GENERIC>:
 8009c8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c90:	b089      	sub	sp, #36	; 0x24
 8009c92:	6993      	ldr	r3, [r2, #24]
 8009c94:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 8009c96:	9103      	str	r1, [sp, #12]
 8009c98:	9307      	str	r3, [sp, #28]
 8009c9a:	69d3      	ldr	r3, [r2, #28]
 8009c9c:	e9d2 c102 	ldrd	ip, r1, [r2, #8]
 8009ca0:	e9d2 4a04 	ldrd	r4, sl, [r2, #16]
 8009ca4:	9106      	str	r1, [sp, #24]
 8009ca6:	e9d2 810c 	ldrd	r8, r1, [r2, #48]	; 0x30
 8009caa:	2d00      	cmp	r5, #0
 8009cac:	d063      	beq.n	8009d76 <D16_GENERIC+0xea>
 8009cae:	f001 0520 	and.w	r5, r1, #32
 8009cb2:	f001 0110 	and.w	r1, r1, #16
 8009cb6:	f8df e0e0 	ldr.w	lr, [pc, #224]	; 8009d98 <D16_GENERIC+0x10c>
 8009cba:	46c1      	mov	r9, r8
 8009cbc:	9104      	str	r1, [sp, #16]
 8009cbe:	2100      	movs	r1, #0
 8009cc0:	9505      	str	r5, [sp, #20]
 8009cc2:	e04d      	b.n	8009d60 <D16_GENERIC+0xd4>
 8009cc4:	5d87      	ldrb	r7, [r0, r6]
 8009cc6:	7805      	ldrb	r5, [r0, #0]
 8009cc8:	eb00 0046 	add.w	r0, r0, r6, lsl #1
 8009ccc:	eb05 2707 	add.w	r7, r5, r7, lsl #8
 8009cd0:	b2fe      	uxtb	r6, r7
 8009cd2:	f3c7 2707 	ubfx	r7, r7, #8, #8
 8009cd6:	f85e 5026 	ldr.w	r5, [lr, r6, lsl #2]
 8009cda:	f85e 6027 	ldr.w	r6, [lr, r7, lsl #2]
 8009cde:	441d      	add	r5, r3
 8009ce0:	eb06 2395 	add.w	r3, r6, r5, lsr #10
 8009ce4:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8009ce8:	f3c3 0609 	ubfx	r6, r3, #0, #10
 8009cec:	0a9b      	lsrs	r3, r3, #10
 8009cee:	ea46 4605 	orr.w	r6, r6, r5, lsl #16
 8009cf2:	4d27      	ldr	r5, [pc, #156]	; (8009d90 <D16_GENERIC+0x104>)
 8009cf4:	fb26 c505 	smlad	r5, r6, r5, ip
 8009cf8:	4f26      	ldr	r7, [pc, #152]	; (8009d94 <D16_GENERIC+0x108>)
 8009cfa:	fb26 fc07 	smuad	ip, r6, r7
 8009cfe:	9e04      	ldr	r6, [sp, #16]
 8009d00:	f101 0801 	add.w	r8, r1, #1
 8009d04:	f5a5 6500 	sub.w	r5, r5, #2048	; 0x800
 8009d08:	b1ae      	cbz	r6, 8009d36 <D16_GENERIC+0xaa>
 8009d0a:	442c      	add	r4, r5
 8009d0c:	f8d2 b020 	ldr.w	fp, [r2, #32]
 8009d10:	eba4 040a 	sub.w	r4, r4, sl
 8009d14:	46aa      	mov	sl, r5
 8009d16:	17e7      	asrs	r7, r4, #31
 8009d18:	fba4 450b 	umull	r4, r5, r4, fp
 8009d1c:	e9cd 4500 	strd	r4, r5, [sp]
 8009d20:	fb0b 5407 	mla	r4, fp, r7, r5
 8009d24:	9401      	str	r4, [sp, #4]
 8009d26:	e9dd 4500 	ldrd	r4, r5, [sp]
 8009d2a:	f114 4400 	adds.w	r4, r4, #2147483648	; 0x80000000
 8009d2e:	f145 0500 	adc.w	r5, r5, #0
 8009d32:	006c      	lsls	r4, r5, #1
 8009d34:	4625      	mov	r5, r4
 8009d36:	f8b2 b028 	ldrh.w	fp, [r2, #40]	; 0x28
 8009d3a:	042d      	lsls	r5, r5, #16
 8009d3c:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8009d40:	2700      	movs	r7, #0
 8009d42:	fb01 fb0b 	mul.w	fp, r1, fp
 8009d46:	fa1f f188 	uxth.w	r1, r8
 8009d4a:	fbc9 6705 	smlal	r6, r7, r9, r5
 8009d4e:	9e03      	ldr	r6, [sp, #12]
 8009d50:	10bd      	asrs	r5, r7, #2
 8009d52:	f305 050f 	ssat	r5, #16, r5
 8009d56:	f826 501b 	strh.w	r5, [r6, fp, lsl #1]
 8009d5a:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 8009d5c:	428d      	cmp	r5, r1
 8009d5e:	d90a      	bls.n	8009d76 <D16_GENERIC+0xea>
 8009d60:	8d55      	ldrh	r5, [r2, #42]	; 0x2a
 8009d62:	2d01      	cmp	r5, #1
 8009d64:	b2ee      	uxtb	r6, r5
 8009d66:	d1ad      	bne.n	8009cc4 <D16_GENERIC+0x38>
 8009d68:	9d05      	ldr	r5, [sp, #20]
 8009d6a:	f850 7b02 	ldr.w	r7, [r0], #2
 8009d6e:	2d00      	cmp	r5, #0
 8009d70:	d0ae      	beq.n	8009cd0 <D16_GENERIC+0x44>
 8009d72:	ba7f      	rev16	r7, r7
 8009d74:	e7ac      	b.n	8009cd0 <D16_GENERIC+0x44>
 8009d76:	2000      	movs	r0, #0
 8009d78:	9906      	ldr	r1, [sp, #24]
 8009d7a:	61d3      	str	r3, [r2, #28]
 8009d7c:	9b07      	ldr	r3, [sp, #28]
 8009d7e:	f8c2 c008 	str.w	ip, [r2, #8]
 8009d82:	60d1      	str	r1, [r2, #12]
 8009d84:	6193      	str	r3, [r2, #24]
 8009d86:	e9c2 4a04 	strd	r4, sl, [r2, #16]
 8009d8a:	b009      	add	sp, #36	; 0x24
 8009d8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d90:	00030001 	.word	0x00030001
 8009d94:	00010003 	.word	0x00010003
 8009d98:	24000000 	.word	0x24000000

08009d9c <D24_GENERIC>:
 8009d9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009da0:	e9d2 4304 	ldrd	r4, r3, [r2, #16]
 8009da4:	b089      	sub	sp, #36	; 0x24
 8009da6:	8cd6      	ldrh	r6, [r2, #38]	; 0x26
 8009da8:	9303      	str	r3, [sp, #12]
 8009daa:	6993      	ldr	r3, [r2, #24]
 8009dac:	9104      	str	r1, [sp, #16]
 8009dae:	9307      	str	r3, [sp, #28]
 8009db0:	69d1      	ldr	r1, [r2, #28]
 8009db2:	e9d2 3802 	ldrd	r3, r8, [r2, #8]
 8009db6:	e9d2 a50c 	ldrd	sl, r5, [r2, #48]	; 0x30
 8009dba:	2e00      	cmp	r6, #0
 8009dbc:	f000 8088 	beq.w	8009ed0 <D24_GENERIC+0x134>
 8009dc0:	f005 0620 	and.w	r6, r5, #32
 8009dc4:	f005 0510 	and.w	r5, r5, #16
 8009dc8:	f04f 0c00 	mov.w	ip, #0
 8009dcc:	f8df e140 	ldr.w	lr, [pc, #320]	; 8009f10 <D24_GENERIC+0x174>
 8009dd0:	9606      	str	r6, [sp, #24]
 8009dd2:	9505      	str	r5, [sp, #20]
 8009dd4:	e064      	b.n	8009ea0 <D24_GENERIC+0x104>
 8009dd6:	f810 5016 	ldrb.w	r5, [r0, r6, lsl #1]
 8009dda:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 8009dde:	f810 b007 	ldrb.w	fp, [r0, r7]
 8009de2:	042d      	lsls	r5, r5, #16
 8009de4:	19f0      	adds	r0, r6, r7
 8009de6:	eb05 250b 	add.w	r5, r5, fp, lsl #8
 8009dea:	44a9      	add	r9, r5
 8009dec:	fa5f f689 	uxtb.w	r6, r9
 8009df0:	f3c9 2707 	ubfx	r7, r9, #8, #8
 8009df4:	ea4f 4919 	mov.w	r9, r9, lsr #16
 8009df8:	f85e 6026 	ldr.w	r6, [lr, r6, lsl #2]
 8009dfc:	f85e 7027 	ldr.w	r7, [lr, r7, lsl #2]
 8009e00:	eb06 2691 	add.w	r6, r6, r1, lsr #10
 8009e04:	f85e 1029 	ldr.w	r1, [lr, r9, lsl #2]
 8009e08:	eb07 2796 	add.w	r7, r7, r6, lsr #10
 8009e0c:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8009e10:	f3c7 0509 	ubfx	r5, r7, #0, #10
 8009e14:	eb01 2197 	add.w	r1, r1, r7, lsr #10
 8009e18:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
 8009e1c:	4d3a      	ldr	r5, [pc, #232]	; (8009f08 <D24_GENERIC+0x16c>)
 8009e1e:	fb26 8705 	smlad	r7, r6, r5, r8
 8009e22:	4d3a      	ldr	r5, [pc, #232]	; (8009f0c <D24_GENERIC+0x170>)
 8009e24:	fb26 3805 	smlad	r8, r6, r5, r3
 8009e28:	f3c1 0309 	ubfx	r3, r1, #0, #10
 8009e2c:	eb03 0b43 	add.w	fp, r3, r3, lsl #1
 8009e30:	2301      	movs	r3, #1
 8009e32:	eb08 084b 	add.w	r8, r8, fp, lsl #1
 8009e36:	fb26 f603 	smuad	r6, r6, r3
 8009e3a:	eb0c 0903 	add.w	r9, ip, r3
 8009e3e:	eb0b 0306 	add.w	r3, fp, r6
 8009e42:	9e05      	ldr	r6, [sp, #20]
 8009e44:	f5a7 55d8 	sub.w	r5, r7, #6912	; 0x1b00
 8009e48:	b1ae      	cbz	r6, 8009e76 <D24_GENERIC+0xda>
 8009e4a:	442c      	add	r4, r5
 8009e4c:	9e03      	ldr	r6, [sp, #12]
 8009e4e:	f8d2 b020 	ldr.w	fp, [r2, #32]
 8009e52:	1ba4      	subs	r4, r4, r6
 8009e54:	9503      	str	r5, [sp, #12]
 8009e56:	17e7      	asrs	r7, r4, #31
 8009e58:	fba4 450b 	umull	r4, r5, r4, fp
 8009e5c:	e9cd 4500 	strd	r4, r5, [sp]
 8009e60:	fb0b 5407 	mla	r4, fp, r7, r5
 8009e64:	9401      	str	r4, [sp, #4]
 8009e66:	e9dd 4500 	ldrd	r4, r5, [sp]
 8009e6a:	f114 4400 	adds.w	r4, r4, #2147483648	; 0x80000000
 8009e6e:	f145 0500 	adc.w	r5, r5, #0
 8009e72:	006c      	lsls	r4, r5, #1
 8009e74:	4625      	mov	r5, r4
 8009e76:	f8b2 b028 	ldrh.w	fp, [r2, #40]	; 0x28
 8009e7a:	03ad      	lsls	r5, r5, #14
 8009e7c:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8009e80:	2700      	movs	r7, #0
 8009e82:	fb0c fb0b 	mul.w	fp, ip, fp
 8009e86:	fa1f fc89 	uxth.w	ip, r9
 8009e8a:	fbca 6705 	smlal	r6, r7, sl, r5
 8009e8e:	9e04      	ldr	r6, [sp, #16]
 8009e90:	10bd      	asrs	r5, r7, #2
 8009e92:	f305 050f 	ssat	r5, #16, r5
 8009e96:	f826 501b 	strh.w	r5, [r6, fp, lsl #1]
 8009e9a:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 8009e9c:	4565      	cmp	r5, ip
 8009e9e:	d917      	bls.n	8009ed0 <D24_GENERIC+0x134>
 8009ea0:	8d55      	ldrh	r5, [r2, #42]	; 0x2a
 8009ea2:	f890 9000 	ldrb.w	r9, [r0]
 8009ea6:	b2ef      	uxtb	r7, r5
 8009ea8:	2d01      	cmp	r5, #1
 8009eaa:	b23e      	sxth	r6, r7
 8009eac:	d193      	bne.n	8009dd6 <D24_GENERIC+0x3a>
 8009eae:	9d06      	ldr	r5, [sp, #24]
 8009eb0:	b1dd      	cbz	r5, 8009eea <D24_GENERIC+0x14e>
 8009eb2:	78c7      	ldrb	r7, [r0, #3]
 8009eb4:	ea4f 2609 	mov.w	r6, r9, lsl #8
 8009eb8:	f01c 0f01 	tst.w	ip, #1
 8009ebc:	ea4f 2507 	mov.w	r5, r7, lsl #8
 8009ec0:	eb06 4607 	add.w	r6, r6, r7, lsl #16
 8009ec4:	d11a      	bne.n	8009efc <D24_GENERIC+0x160>
 8009ec6:	f890 9001 	ldrb.w	r9, [r0, #1]
 8009eca:	3002      	adds	r0, #2
 8009ecc:	44b1      	add	r9, r6
 8009ece:	e78d      	b.n	8009dec <D24_GENERIC+0x50>
 8009ed0:	6093      	str	r3, [r2, #8]
 8009ed2:	2000      	movs	r0, #0
 8009ed4:	9b03      	ldr	r3, [sp, #12]
 8009ed6:	f8c2 800c 	str.w	r8, [r2, #12]
 8009eda:	6153      	str	r3, [r2, #20]
 8009edc:	9b07      	ldr	r3, [sp, #28]
 8009ede:	61d1      	str	r1, [r2, #28]
 8009ee0:	6114      	str	r4, [r2, #16]
 8009ee2:	6193      	str	r3, [r2, #24]
 8009ee4:	b009      	add	sp, #36	; 0x24
 8009ee6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009eea:	7845      	ldrb	r5, [r0, #1]
 8009eec:	3003      	adds	r0, #3
 8009eee:	f810 6c01 	ldrb.w	r6, [r0, #-1]
 8009ef2:	022d      	lsls	r5, r5, #8
 8009ef4:	eb05 4506 	add.w	r5, r5, r6, lsl #16
 8009ef8:	44a9      	add	r9, r5
 8009efa:	e777      	b.n	8009dec <D24_GENERIC+0x50>
 8009efc:	7886      	ldrb	r6, [r0, #2]
 8009efe:	3004      	adds	r0, #4
 8009f00:	eb05 4506 	add.w	r5, r5, r6, lsl #16
 8009f04:	44a9      	add	r9, r5
 8009f06:	e771      	b.n	8009dec <D24_GENERIC+0x50>
 8009f08:	00030001 	.word	0x00030001
 8009f0c:	00060007 	.word	0x00060007
 8009f10:	24000000 	.word	0x24000000

08009f14 <D32_GENERIC>:
 8009f14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f18:	e9d2 4304 	ldrd	r4, r3, [r2, #16]
 8009f1c:	b089      	sub	sp, #36	; 0x24
 8009f1e:	6b15      	ldr	r5, [r2, #48]	; 0x30
 8009f20:	8cd6      	ldrh	r6, [r2, #38]	; 0x26
 8009f22:	9302      	str	r3, [sp, #8]
 8009f24:	6993      	ldr	r3, [r2, #24]
 8009f26:	9104      	str	r1, [sp, #16]
 8009f28:	9307      	str	r3, [sp, #28]
 8009f2a:	9503      	str	r5, [sp, #12]
 8009f2c:	69d1      	ldr	r1, [r2, #28]
 8009f2e:	6b55      	ldr	r5, [r2, #52]	; 0x34
 8009f30:	e9d2 3802 	ldrd	r3, r8, [r2, #8]
 8009f34:	2e00      	cmp	r6, #0
 8009f36:	f000 8097 	beq.w	800a068 <D32_GENERIC+0x154>
 8009f3a:	f005 0620 	and.w	r6, r5, #32
 8009f3e:	f005 0510 	and.w	r5, r5, #16
 8009f42:	f04f 0e00 	mov.w	lr, #0
 8009f46:	f8df c150 	ldr.w	ip, [pc, #336]	; 800a098 <D32_GENERIC+0x184>
 8009f4a:	9606      	str	r6, [sp, #24]
 8009f4c:	9505      	str	r5, [sp, #20]
 8009f4e:	e079      	b.n	800a044 <D32_GENERIC+0x130>
 8009f50:	783d      	ldrb	r5, [r7, #0]
 8009f52:	f810 b009 	ldrb.w	fp, [r0, r9]
 8009f56:	042d      	lsls	r5, r5, #16
 8009f58:	f810 a006 	ldrb.w	sl, [r0, r6]
 8009f5c:	f890 9000 	ldrb.w	r9, [r0]
 8009f60:	eb07 0046 	add.w	r0, r7, r6, lsl #1
 8009f64:	eb05 650b 	add.w	r5, r5, fp, lsl #24
 8009f68:	eb05 250a 	add.w	r5, r5, sl, lsl #8
 8009f6c:	44a9      	add	r9, r5
 8009f6e:	fa5f f789 	uxtb.w	r7, r9
 8009f72:	f3c9 2507 	ubfx	r5, r9, #8, #8
 8009f76:	f3c9 4607 	ubfx	r6, r9, #16, #8
 8009f7a:	ea4f 6919 	mov.w	r9, r9, lsr #24
 8009f7e:	f85c 7027 	ldr.w	r7, [ip, r7, lsl #2]
 8009f82:	f85c 5025 	ldr.w	r5, [ip, r5, lsl #2]
 8009f86:	eb07 2191 	add.w	r1, r7, r1, lsr #10
 8009f8a:	f85c 6026 	ldr.w	r6, [ip, r6, lsl #2]
 8009f8e:	f85c 7029 	ldr.w	r7, [ip, r9, lsl #2]
 8009f92:	eb05 2591 	add.w	r5, r5, r1, lsr #10
 8009f96:	f3c1 0909 	ubfx	r9, r1, #0, #10
 8009f9a:	eb06 2695 	add.w	r6, r6, r5, lsr #10
 8009f9e:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8009fa2:	eb07 2196 	add.w	r1, r7, r6, lsr #10
 8009fa6:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8009faa:	ea45 4909 	orr.w	r9, r5, r9, lsl #16
 8009fae:	f3c1 0509 	ubfx	r5, r1, #0, #10
 8009fb2:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
 8009fb6:	4d34      	ldr	r5, [pc, #208]	; (800a088 <D32_GENERIC+0x174>)
 8009fb8:	fb29 8805 	smlad	r8, r9, r5, r8
 8009fbc:	f44f 3580 	mov.w	r5, #65536	; 0x10000
 8009fc0:	fb26 8705 	smlad	r7, r6, r5, r8
 8009fc4:	4d31      	ldr	r5, [pc, #196]	; (800a08c <D32_GENERIC+0x178>)
 8009fc6:	fb29 3305 	smlad	r3, r9, r5, r3
 8009fca:	4d31      	ldr	r5, [pc, #196]	; (800a090 <D32_GENERIC+0x17c>)
 8009fcc:	fb26 3805 	smlad	r8, r6, r5, r3
 8009fd0:	2301      	movs	r3, #1
 8009fd2:	fb29 f903 	smuad	r9, r9, r3
 8009fd6:	4b2f      	ldr	r3, [pc, #188]	; (800a094 <D32_GENERIC+0x180>)
 8009fd8:	fb26 9303 	smlad	r3, r6, r3, r9
 8009fdc:	9e05      	ldr	r6, [sp, #20]
 8009fde:	f10e 0901 	add.w	r9, lr, #1
 8009fe2:	f5a7 4580 	sub.w	r5, r7, #16384	; 0x4000
 8009fe6:	b1ae      	cbz	r6, 800a014 <D32_GENERIC+0x100>
 8009fe8:	442c      	add	r4, r5
 8009fea:	9e02      	ldr	r6, [sp, #8]
 8009fec:	f8d2 a020 	ldr.w	sl, [r2, #32]
 8009ff0:	1ba4      	subs	r4, r4, r6
 8009ff2:	9502      	str	r5, [sp, #8]
 8009ff4:	17e7      	asrs	r7, r4, #31
 8009ff6:	fba4 450a 	umull	r4, r5, r4, sl
 8009ffa:	e9cd 4500 	strd	r4, r5, [sp]
 8009ffe:	fb0a 5407 	mla	r4, sl, r7, r5
 800a002:	9401      	str	r4, [sp, #4]
 800a004:	e9dd 4500 	ldrd	r4, r5, [sp]
 800a008:	f114 4400 	adds.w	r4, r4, #2147483648	; 0x80000000
 800a00c:	f145 0500 	adc.w	r5, r5, #0
 800a010:	006c      	lsls	r4, r5, #1
 800a012:	4625      	mov	r5, r4
 800a014:	f8b2 a028 	ldrh.w	sl, [r2, #40]	; 0x28
 800a018:	036d      	lsls	r5, r5, #13
 800a01a:	9f03      	ldr	r7, [sp, #12]
 800a01c:	fb0e fb0a 	mul.w	fp, lr, sl
 800a020:	fa1f fe89 	uxth.w	lr, r9
 800a024:	f04f 0a00 	mov.w	sl, #0
 800a028:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
 800a02c:	9e04      	ldr	r6, [sp, #16]
 800a02e:	fbc7 9a05 	smlal	r9, sl, r7, r5
 800a032:	4657      	mov	r7, sl
 800a034:	10bd      	asrs	r5, r7, #2
 800a036:	f305 050f 	ssat	r5, #16, r5
 800a03a:	f826 501b 	strh.w	r5, [r6, fp, lsl #1]
 800a03e:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 800a040:	4575      	cmp	r5, lr
 800a042:	d911      	bls.n	800a068 <D32_GENERIC+0x154>
 800a044:	8d55      	ldrh	r5, [r2, #42]	; 0x2a
 800a046:	b2ee      	uxtb	r6, r5
 800a048:	2d01      	cmp	r5, #1
 800a04a:	eb00 0746 	add.w	r7, r0, r6, lsl #1
 800a04e:	eb06 0946 	add.w	r9, r6, r6, lsl #1
 800a052:	f47f af7d 	bne.w	8009f50 <D32_GENERIC+0x3c>
 800a056:	1d05      	adds	r5, r0, #4
 800a058:	f8d0 9000 	ldr.w	r9, [r0]
 800a05c:	9806      	ldr	r0, [sp, #24]
 800a05e:	b180      	cbz	r0, 800a082 <D32_GENERIC+0x16e>
 800a060:	fa99 f999 	rev16.w	r9, r9
 800a064:	4628      	mov	r0, r5
 800a066:	e782      	b.n	8009f6e <D32_GENERIC+0x5a>
 800a068:	6093      	str	r3, [r2, #8]
 800a06a:	2000      	movs	r0, #0
 800a06c:	9b02      	ldr	r3, [sp, #8]
 800a06e:	f8c2 800c 	str.w	r8, [r2, #12]
 800a072:	6153      	str	r3, [r2, #20]
 800a074:	9b07      	ldr	r3, [sp, #28]
 800a076:	61d1      	str	r1, [r2, #28]
 800a078:	6114      	str	r4, [r2, #16]
 800a07a:	6193      	str	r3, [r2, #24]
 800a07c:	b009      	add	sp, #36	; 0x24
 800a07e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a082:	4628      	mov	r0, r5
 800a084:	e773      	b.n	8009f6e <D32_GENERIC+0x5a>
 800a086:	bf00      	nop
 800a088:	00060003 	.word	0x00060003
 800a08c:	000a000c 	.word	0x000a000c
 800a090:	000c000a 	.word	0x000c000a
 800a094:	00030006 	.word	0x00030006
 800a098:	24000000 	.word	0x24000000

0800a09c <D48_GENERIC>:
 800a09c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0a0:	6913      	ldr	r3, [r2, #16]
 800a0a2:	b089      	sub	sp, #36	; 0x24
 800a0a4:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 800a0a6:	9301      	str	r3, [sp, #4]
 800a0a8:	6953      	ldr	r3, [r2, #20]
 800a0aa:	9104      	str	r1, [sp, #16]
 800a0ac:	9302      	str	r3, [sp, #8]
 800a0ae:	6993      	ldr	r3, [r2, #24]
 800a0b0:	f8d2 c01c 	ldr.w	ip, [r2, #28]
 800a0b4:	9307      	str	r3, [sp, #28]
 800a0b6:	e9d2 3102 	ldrd	r3, r1, [r2, #8]
 800a0ba:	9100      	str	r1, [sp, #0]
 800a0bc:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800a0be:	9103      	str	r1, [sp, #12]
 800a0c0:	6b51      	ldr	r1, [r2, #52]	; 0x34
 800a0c2:	2c00      	cmp	r4, #0
 800a0c4:	f000 80be 	beq.w	800a244 <D48_GENERIC+0x1a8>
 800a0c8:	f001 0420 	and.w	r4, r1, #32
 800a0cc:	f001 0110 	and.w	r1, r1, #16
 800a0d0:	f04f 0e00 	mov.w	lr, #0
 800a0d4:	9105      	str	r1, [sp, #20]
 800a0d6:	9406      	str	r4, [sp, #24]
 800a0d8:	4962      	ldr	r1, [pc, #392]	; (800a264 <D48_GENERIC+0x1c8>)
 800a0da:	e0a0      	b.n	800a21e <D48_GENERIC+0x182>
 800a0dc:	eb00 0608 	add.w	r6, r0, r8
 800a0e0:	f810 a008 	ldrb.w	sl, [r0, r8]
 800a0e4:	f810 9005 	ldrb.w	r9, [r0, r5]
 800a0e8:	5df4      	ldrb	r4, [r6, r7]
 800a0ea:	443e      	add	r6, r7
 800a0ec:	f890 b000 	ldrb.w	fp, [r0]
 800a0f0:	0420      	lsls	r0, r4, #16
 800a0f2:	eb06 0408 	add.w	r4, r6, r8
 800a0f6:	f816 6008 	ldrb.w	r6, [r6, r8]
 800a0fa:	eb00 6a0a 	add.w	sl, r0, sl, lsl #24
 800a0fe:	f814 8007 	ldrb.w	r8, [r4, r7]
 800a102:	4427      	add	r7, r4
 800a104:	eb0a 2a09 	add.w	sl, sl, r9, lsl #8
 800a108:	eb08 2606 	add.w	r6, r8, r6, lsl #8
 800a10c:	eb0a 040b 	add.w	r4, sl, fp
 800a110:	eb07 0045 	add.w	r0, r7, r5, lsl #1
 800a114:	f3c6 2807 	ubfx	r8, r6, #8, #8
 800a118:	b2f7      	uxtb	r7, r6
 800a11a:	b2e6      	uxtb	r6, r4
 800a11c:	f3c4 2507 	ubfx	r5, r4, #8, #8
 800a120:	f3c4 4907 	ubfx	r9, r4, #16, #8
 800a124:	ea4f 6b14 	mov.w	fp, r4, lsr #24
 800a128:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 800a12c:	f851 5025 	ldr.w	r5, [r1, r5, lsl #2]
 800a130:	eb06 269c 	add.w	r6, r6, ip, lsr #10
 800a134:	f851 9029 	ldr.w	r9, [r1, r9, lsl #2]
 800a138:	f851 402b 	ldr.w	r4, [r1, fp, lsl #2]
 800a13c:	eb05 2596 	add.w	r5, r5, r6, lsr #10
 800a140:	f851 7027 	ldr.w	r7, [r1, r7, lsl #2]
 800a144:	f851 c028 	ldr.w	ip, [r1, r8, lsl #2]
 800a148:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800a14c:	eb09 2995 	add.w	r9, r9, r5, lsr #10
 800a150:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800a154:	eb04 2499 	add.w	r4, r4, r9, lsr #10
 800a158:	f3c9 0909 	ubfx	r9, r9, #0, #10
 800a15c:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
 800a160:	9d00      	ldr	r5, [sp, #0]
 800a162:	eb07 2794 	add.w	r7, r7, r4, lsr #10
 800a166:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800a16a:	eb0c 2c97 	add.w	ip, ip, r7, lsr #10
 800a16e:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800a172:	ea44 4909 	orr.w	r9, r4, r9, lsl #16
 800a176:	f3cc 0409 	ubfx	r4, ip, #0, #10
 800a17a:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 800a17e:	4c3a      	ldr	r4, [pc, #232]	; (800a268 <D48_GENERIC+0x1cc>)
 800a180:	fb26 5a04 	smlad	sl, r6, r4, r5
 800a184:	4c39      	ldr	r4, [pc, #228]	; (800a26c <D48_GENERIC+0x1d0>)
 800a186:	fb29 aa04 	smlad	sl, r9, r4, sl
 800a18a:	f44f 3480 	mov.w	r4, #65536	; 0x10000
 800a18e:	fb27 aa04 	smlad	sl, r7, r4, sl
 800a192:	4c37      	ldr	r4, [pc, #220]	; (800a270 <D48_GENERIC+0x1d4>)
 800a194:	fb26 3304 	smlad	r3, r6, r4, r3
 800a198:	f04f 141b 	mov.w	r4, #1769499	; 0x1b001b
 800a19c:	fb29 3304 	smlad	r3, r9, r4, r3
 800a1a0:	4c34      	ldr	r4, [pc, #208]	; (800a274 <D48_GENERIC+0x1d8>)
 800a1a2:	fb27 3304 	smlad	r3, r7, r4, r3
 800a1a6:	2501      	movs	r5, #1
 800a1a8:	9300      	str	r3, [sp, #0]
 800a1aa:	fb26 f605 	smuad	r6, r6, r5
 800a1ae:	4b32      	ldr	r3, [pc, #200]	; (800a278 <D48_GENERIC+0x1dc>)
 800a1b0:	fb29 6903 	smlad	r9, r9, r3, r6
 800a1b4:	4b31      	ldr	r3, [pc, #196]	; (800a27c <D48_GENERIC+0x1e0>)
 800a1b6:	fb27 9303 	smlad	r3, r7, r3, r9
 800a1ba:	9c05      	ldr	r4, [sp, #20]
 800a1bc:	eb0e 0805 	add.w	r8, lr, r5
 800a1c0:	f5aa 4a58 	sub.w	sl, sl, #55296	; 0xd800
 800a1c4:	b19c      	cbz	r4, 800a1ee <D48_GENERIC+0x152>
 800a1c6:	9c01      	ldr	r4, [sp, #4]
 800a1c8:	9d02      	ldr	r5, [sp, #8]
 800a1ca:	4454      	add	r4, sl
 800a1cc:	f8d2 9020 	ldr.w	r9, [r2, #32]
 800a1d0:	f8cd a008 	str.w	sl, [sp, #8]
 800a1d4:	1b64      	subs	r4, r4, r5
 800a1d6:	fba4 ab09 	umull	sl, fp, r4, r9
 800a1da:	17e7      	asrs	r7, r4, #31
 800a1dc:	f11a 4400 	adds.w	r4, sl, #2147483648	; 0x80000000
 800a1e0:	fb09 bb07 	mla	fp, r9, r7, fp
 800a1e4:	f14b 0500 	adc.w	r5, fp, #0
 800a1e8:	006c      	lsls	r4, r5, #1
 800a1ea:	46a2      	mov	sl, r4
 800a1ec:	9401      	str	r4, [sp, #4]
 800a1ee:	8d16      	ldrh	r6, [r2, #40]	; 0x28
 800a1f0:	ea4f 2aca 	mov.w	sl, sl, lsl #11
 800a1f4:	9d03      	ldr	r5, [sp, #12]
 800a1f6:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 800a1fa:	fb0e f606 	mul.w	r6, lr, r6
 800a1fe:	fa1f fe88 	uxth.w	lr, r8
 800a202:	f04f 0800 	mov.w	r8, #0
 800a206:	fbc5 780a 	smlal	r7, r8, r5, sl
 800a20a:	4645      	mov	r5, r8
 800a20c:	10ac      	asrs	r4, r5, #2
 800a20e:	9d04      	ldr	r5, [sp, #16]
 800a210:	f304 040f 	ssat	r4, #16, r4
 800a214:	f825 4016 	strh.w	r4, [r5, r6, lsl #1]
 800a218:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 800a21a:	4574      	cmp	r4, lr
 800a21c:	d912      	bls.n	800a244 <D48_GENERIC+0x1a8>
 800a21e:	8d54      	ldrh	r4, [r2, #42]	; 0x2a
 800a220:	b2e5      	uxtb	r5, r4
 800a222:	2c01      	cmp	r4, #1
 800a224:	eb05 0845 	add.w	r8, r5, r5, lsl #1
 800a228:	f1c5 0700 	rsb	r7, r5, #0
 800a22c:	f47f af56 	bne.w	800a0dc <D48_GENERIC+0x40>
 800a230:	9d06      	ldr	r5, [sp, #24]
 800a232:	e9d0 4600 	ldrd	r4, r6, [r0]
 800a236:	3006      	adds	r0, #6
 800a238:	2d00      	cmp	r5, #0
 800a23a:	f43f af6b 	beq.w	800a114 <D48_GENERIC+0x78>
 800a23e:	ba64      	rev16	r4, r4
 800a240:	ba76      	rev16	r6, r6
 800a242:	e767      	b.n	800a114 <D48_GENERIC+0x78>
 800a244:	6093      	str	r3, [r2, #8]
 800a246:	2000      	movs	r0, #0
 800a248:	9b00      	ldr	r3, [sp, #0]
 800a24a:	f8c2 c01c 	str.w	ip, [r2, #28]
 800a24e:	60d3      	str	r3, [r2, #12]
 800a250:	9b01      	ldr	r3, [sp, #4]
 800a252:	6113      	str	r3, [r2, #16]
 800a254:	9b02      	ldr	r3, [sp, #8]
 800a256:	6153      	str	r3, [r2, #20]
 800a258:	9b07      	ldr	r3, [sp, #28]
 800a25a:	6193      	str	r3, [r2, #24]
 800a25c:	b009      	add	sp, #36	; 0x24
 800a25e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a262:	bf00      	nop
 800a264:	24000000 	.word	0x24000000
 800a268:	000f000a 	.word	0x000f000a
 800a26c:	00060003 	.word	0x00060003
 800a270:	00150019 	.word	0x00150019
 800a274:	00190015 	.word	0x00190015
 800a278:	00030006 	.word	0x00030006
 800a27c:	000a000f 	.word	0x000a000f

0800a280 <D64_GENERIC>:
 800a280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a284:	6913      	ldr	r3, [r2, #16]
 800a286:	b089      	sub	sp, #36	; 0x24
 800a288:	6b15      	ldr	r5, [r2, #48]	; 0x30
 800a28a:	9300      	str	r3, [sp, #0]
 800a28c:	6953      	ldr	r3, [r2, #20]
 800a28e:	9105      	str	r1, [sp, #20]
 800a290:	9303      	str	r3, [sp, #12]
 800a292:	8cd1      	ldrh	r1, [r2, #38]	; 0x26
 800a294:	6993      	ldr	r3, [r2, #24]
 800a296:	69d4      	ldr	r4, [r2, #28]
 800a298:	9307      	str	r3, [sp, #28]
 800a29a:	9504      	str	r5, [sp, #16]
 800a29c:	e9d2 3602 	ldrd	r3, r6, [r2, #8]
 800a2a0:	2900      	cmp	r1, #0
 800a2a2:	f000 80e8 	beq.w	800a476 <D64_GENERIC+0x1f6>
 800a2a6:	6a11      	ldr	r1, [r2, #32]
 800a2a8:	2500      	movs	r5, #0
 800a2aa:	46b3      	mov	fp, r6
 800a2ac:	9302      	str	r3, [sp, #8]
 800a2ae:	9106      	str	r1, [sp, #24]
 800a2b0:	4978      	ldr	r1, [pc, #480]	; (800a494 <D64_GENERIC+0x214>)
 800a2b2:	e0cc      	b.n	800a44e <D64_GENERIC+0x1ce>
 800a2b4:	eb0e 084e 	add.w	r8, lr, lr, lsl #1
 800a2b8:	f1ce 0c00 	rsb	ip, lr, #0
 800a2bc:	f890 9000 	ldrb.w	r9, [r0]
 800a2c0:	eb00 0708 	add.w	r7, r0, r8
 800a2c4:	f810 6008 	ldrb.w	r6, [r0, r8]
 800a2c8:	eb07 0a4c 	add.w	sl, r7, ip, lsl #1
 800a2cc:	f817 000c 	ldrb.w	r0, [r7, ip]
 800a2d0:	f817 301c 	ldrb.w	r3, [r7, ip, lsl #1]
 800a2d4:	eb0a 0748 	add.w	r7, sl, r8, lsl #1
 800a2d8:	f81a a018 	ldrb.w	sl, [sl, r8, lsl #1]
 800a2dc:	ea4f 4800 	mov.w	r8, r0, lsl #16
 800a2e0:	f817 000c 	ldrb.w	r0, [r7, ip]
 800a2e4:	eb08 6606 	add.w	r6, r8, r6, lsl #24
 800a2e8:	f817 801c 	ldrb.w	r8, [r7, ip, lsl #1]
 800a2ec:	0400      	lsls	r0, r0, #16
 800a2ee:	4467      	add	r7, ip
 800a2f0:	eb06 2603 	add.w	r6, r6, r3, lsl #8
 800a2f4:	eb00 600a 	add.w	r0, r0, sl, lsl #24
 800a2f8:	f817 a01c 	ldrb.w	sl, [r7, ip, lsl #1]
 800a2fc:	eb07 074c 	add.w	r7, r7, ip, lsl #1
 800a300:	444e      	add	r6, r9
 800a302:	eb00 2808 	add.w	r8, r0, r8, lsl #8
 800a306:	eb07 008e 	add.w	r0, r7, lr, lsl #2
 800a30a:	44c2      	add	sl, r8
 800a30c:	b2f7      	uxtb	r7, r6
 800a30e:	f3c6 2807 	ubfx	r8, r6, #8, #8
 800a312:	f3c6 4e07 	ubfx	lr, r6, #16, #8
 800a316:	0e36      	lsrs	r6, r6, #24
 800a318:	f851 7027 	ldr.w	r7, [r1, r7, lsl #2]
 800a31c:	fa5f fc8a 	uxtb.w	ip, sl
 800a320:	f851 8028 	ldr.w	r8, [r1, r8, lsl #2]
 800a324:	f3ca 2907 	ubfx	r9, sl, #8, #8
 800a328:	443c      	add	r4, r7
 800a32a:	f851 702e 	ldr.w	r7, [r1, lr, lsl #2]
 800a32e:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 800a332:	eb08 2894 	add.w	r8, r8, r4, lsr #10
 800a336:	f851 c02c 	ldr.w	ip, [r1, ip, lsl #2]
 800a33a:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800a33e:	4b56      	ldr	r3, [pc, #344]	; (800a498 <D64_GENERIC+0x218>)
 800a340:	eb07 2e98 	add.w	lr, r7, r8, lsr #10
 800a344:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800a348:	f851 7029 	ldr.w	r7, [r1, r9, lsl #2]
 800a34c:	eb06 269e 	add.w	r6, r6, lr, lsr #10
 800a350:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800a354:	ea48 4804 	orr.w	r8, r8, r4, lsl #16
 800a358:	f3ca 4407 	ubfx	r4, sl, #16, #8
 800a35c:	eb0c 2c96 	add.w	ip, ip, r6, lsr #10
 800a360:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800a364:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 800a368:	ea4f 6a1a 	mov.w	sl, sl, lsr #24
 800a36c:	eb07 279c 	add.w	r7, r7, ip, lsr #10
 800a370:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 800a374:	f851 902a 	ldr.w	r9, [r1, sl, lsl #2]
 800a378:	ea46 460e 	orr.w	r6, r6, lr, lsl #16
 800a37c:	eb04 2a97 	add.w	sl, r4, r7, lsr #10
 800a380:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800a384:	eb09 299a 	add.w	r9, r9, sl, lsr #10
 800a388:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 800a38c:	ea47 4c0c 	orr.w	ip, r7, ip, lsl #16
 800a390:	f3c9 0709 	ubfx	r7, r9, #0, #10
 800a394:	ea4f 2499 	mov.w	r4, r9, lsr #10
 800a398:	ea47 4a0a 	orr.w	sl, r7, sl, lsl #16
 800a39c:	fb28 b903 	smlad	r9, r8, r3, fp
 800a3a0:	4b3e      	ldr	r3, [pc, #248]	; (800a49c <D64_GENERIC+0x21c>)
 800a3a2:	fb26 9903 	smlad	r9, r6, r3, r9
 800a3a6:	4b3e      	ldr	r3, [pc, #248]	; (800a4a0 <D64_GENERIC+0x220>)
 800a3a8:	fb2c 9703 	smlad	r7, ip, r3, r9
 800a3ac:	f44f 3980 	mov.w	r9, #65536	; 0x10000
 800a3b0:	fb2a 7909 	smlad	r9, sl, r9, r7
 800a3b4:	4f3b      	ldr	r7, [pc, #236]	; (800a4a4 <D64_GENERIC+0x224>)
 800a3b6:	9b02      	ldr	r3, [sp, #8]
 800a3b8:	fb28 3307 	smlad	r3, r8, r7, r3
 800a3bc:	fb2a 3317 	smladx	r3, sl, r7, r3
 800a3c0:	4f39      	ldr	r7, [pc, #228]	; (800a4a8 <D64_GENERIC+0x228>)
 800a3c2:	fb26 3307 	smlad	r3, r6, r7, r3
 800a3c6:	fb2c 3b17 	smladx	fp, ip, r7, r3
 800a3ca:	f04f 0e01 	mov.w	lr, #1
 800a3ce:	fb28 f80e 	smuad	r8, r8, lr
 800a3d2:	4b36      	ldr	r3, [pc, #216]	; (800a4ac <D64_GENERIC+0x22c>)
 800a3d4:	fb26 8603 	smlad	r6, r6, r3, r8
 800a3d8:	4b35      	ldr	r3, [pc, #212]	; (800a4b0 <D64_GENERIC+0x230>)
 800a3da:	fb2c 6c03 	smlad	ip, ip, r3, r6
 800a3de:	4b35      	ldr	r3, [pc, #212]	; (800a4b4 <D64_GENERIC+0x234>)
 800a3e0:	fb2a c303 	smlad	r3, sl, r3, ip
 800a3e4:	9f06      	ldr	r7, [sp, #24]
 800a3e6:	f5a9 3900 	sub.w	r9, r9, #131072	; 0x20000
 800a3ea:	9302      	str	r3, [sp, #8]
 800a3ec:	b1cf      	cbz	r7, 800a422 <D64_GENERIC+0x1a2>
 800a3ee:	9b00      	ldr	r3, [sp, #0]
 800a3f0:	444b      	add	r3, r9
 800a3f2:	461e      	mov	r6, r3
 800a3f4:	9b03      	ldr	r3, [sp, #12]
 800a3f6:	f8cd 900c 	str.w	r9, [sp, #12]
 800a3fa:	1af6      	subs	r6, r6, r3
 800a3fc:	46b0      	mov	r8, r6
 800a3fe:	ea4f 79e6 	mov.w	r9, r6, asr #31
 800a402:	e9cd 8900 	strd	r8, r9, [sp]
 800a406:	fba6 8907 	umull	r8, r9, r6, r7
 800a40a:	9e01      	ldr	r6, [sp, #4]
 800a40c:	fb07 9306 	mla	r3, r7, r6, r9
 800a410:	4646      	mov	r6, r8
 800a412:	f116 4600 	adds.w	r6, r6, #2147483648	; 0x80000000
 800a416:	f143 0700 	adc.w	r7, r3, #0
 800a41a:	fa07 f30e 	lsl.w	r3, r7, lr
 800a41e:	4699      	mov	r9, r3
 800a420:	9300      	str	r3, [sp, #0]
 800a422:	f8b2 c028 	ldrh.w	ip, [r2, #40]	; 0x28
 800a426:	ea4f 2989 	mov.w	r9, r9, lsl #10
 800a42a:	9b04      	ldr	r3, [sp, #16]
 800a42c:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800a430:	2700      	movs	r7, #0
 800a432:	fb05 fc0c 	mul.w	ip, r5, ip
 800a436:	3501      	adds	r5, #1
 800a438:	fbc3 6709 	smlal	r6, r7, r3, r9
 800a43c:	9b05      	ldr	r3, [sp, #20]
 800a43e:	10be      	asrs	r6, r7, #2
 800a440:	f306 060f 	ssat	r6, #16, r6
 800a444:	f823 601c 	strh.w	r6, [r3, ip, lsl #1]
 800a448:	8cd6      	ldrh	r6, [r2, #38]	; 0x26
 800a44a:	42ae      	cmp	r6, r5
 800a44c:	dd11      	ble.n	800a472 <D64_GENERIC+0x1f2>
 800a44e:	f8b2 e02a 	ldrh.w	lr, [r2, #42]	; 0x2a
 800a452:	f1be 0f01 	cmp.w	lr, #1
 800a456:	f47f af2d 	bne.w	800a2b4 <D64_GENERIC+0x34>
 800a45a:	6b57      	ldr	r7, [r2, #52]	; 0x34
 800a45c:	f100 0c08 	add.w	ip, r0, #8
 800a460:	06bb      	lsls	r3, r7, #26
 800a462:	e9d0 6a00 	ldrd	r6, sl, [r0]
 800a466:	d513      	bpl.n	800a490 <D64_GENERIC+0x210>
 800a468:	ba76      	rev16	r6, r6
 800a46a:	fa9a fa9a 	rev16.w	sl, sl
 800a46e:	4660      	mov	r0, ip
 800a470:	e74c      	b.n	800a30c <D64_GENERIC+0x8c>
 800a472:	465e      	mov	r6, fp
 800a474:	9b02      	ldr	r3, [sp, #8]
 800a476:	6093      	str	r3, [r2, #8]
 800a478:	2000      	movs	r0, #0
 800a47a:	9b00      	ldr	r3, [sp, #0]
 800a47c:	60d6      	str	r6, [r2, #12]
 800a47e:	6113      	str	r3, [r2, #16]
 800a480:	9b03      	ldr	r3, [sp, #12]
 800a482:	61d4      	str	r4, [r2, #28]
 800a484:	6153      	str	r3, [r2, #20]
 800a486:	9b07      	ldr	r3, [sp, #28]
 800a488:	6193      	str	r3, [r2, #24]
 800a48a:	b009      	add	sp, #36	; 0x24
 800a48c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a490:	4660      	mov	r0, ip
 800a492:	e73b      	b.n	800a30c <D64_GENERIC+0x8c>
 800a494:	24000000 	.word	0x24000000
 800a498:	001c0015 	.word	0x001c0015
 800a49c:	000f000a 	.word	0x000f000a
 800a4a0:	00060003 	.word	0x00060003
 800a4a4:	0024002a 	.word	0x0024002a
 800a4a8:	002e0030 	.word	0x002e0030
 800a4ac:	00030006 	.word	0x00030006
 800a4b0:	000a000f 	.word	0x000a000f
 800a4b4:	0015001c 	.word	0x0015001c

0800a4b8 <D80_GENERIC>:
 800a4b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4bc:	b08b      	sub	sp, #44	; 0x2c
 800a4be:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 800a4c0:	9107      	str	r1, [sp, #28]
 800a4c2:	6911      	ldr	r1, [r2, #16]
 800a4c4:	9104      	str	r1, [sp, #16]
 800a4c6:	6951      	ldr	r1, [r2, #20]
 800a4c8:	9105      	str	r1, [sp, #20]
 800a4ca:	6991      	ldr	r1, [r2, #24]
 800a4cc:	9109      	str	r1, [sp, #36]	; 0x24
 800a4ce:	69d1      	ldr	r1, [r2, #28]
 800a4d0:	9102      	str	r1, [sp, #8]
 800a4d2:	6891      	ldr	r1, [r2, #8]
 800a4d4:	9103      	str	r1, [sp, #12]
 800a4d6:	68d1      	ldr	r1, [r2, #12]
 800a4d8:	9101      	str	r1, [sp, #4]
 800a4da:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800a4dc:	9106      	str	r1, [sp, #24]
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	f000 810b 	beq.w	800a6fa <D80_GENERIC+0x242>
 800a4e4:	6a13      	ldr	r3, [r2, #32]
 800a4e6:	f04f 0800 	mov.w	r8, #0
 800a4ea:	f8df c260 	ldr.w	ip, [pc, #608]	; 800a74c <D80_GENERIC+0x294>
 800a4ee:	9308      	str	r3, [sp, #32]
 800a4f0:	9200      	str	r2, [sp, #0]
 800a4f2:	e0ee      	b.n	800a6d2 <D80_GENERIC+0x21a>
 800a4f4:	b2db      	uxtb	r3, r3
 800a4f6:	f890 e000 	ldrb.w	lr, [r0]
 800a4fa:	b219      	sxth	r1, r3
 800a4fc:	425c      	negs	r4, r3
 800a4fe:	f810 9003 	ldrb.w	r9, [r0, r3]
 800a502:	004e      	lsls	r6, r1, #1
 800a504:	eb01 0581 	add.w	r5, r1, r1, lsl #2
 800a508:	4431      	add	r1, r6
 800a50a:	1843      	adds	r3, r0, r1
 800a50c:	f810 b001 	ldrb.w	fp, [r0, r1]
 800a510:	1919      	adds	r1, r3, r4
 800a512:	5d1b      	ldrb	r3, [r3, r4]
 800a514:	1948      	adds	r0, r1, r5
 800a516:	f811 a005 	ldrb.w	sl, [r1, r5]
 800a51a:	041b      	lsls	r3, r3, #16
 800a51c:	1907      	adds	r7, r0, r4
 800a51e:	5d01      	ldrb	r1, [r0, r4]
 800a520:	eb03 630b 	add.w	r3, r3, fp, lsl #24
 800a524:	f810 0014 	ldrb.w	r0, [r0, r4, lsl #1]
 800a528:	eb07 0b44 	add.w	fp, r7, r4, lsl #1
 800a52c:	f817 7014 	ldrb.w	r7, [r7, r4, lsl #1]
 800a530:	0409      	lsls	r1, r1, #16
 800a532:	eb03 2309 	add.w	r3, r3, r9, lsl #8
 800a536:	eb0b 0905 	add.w	r9, fp, r5
 800a53a:	eb01 610a 	add.w	r1, r1, sl, lsl #24
 800a53e:	f81b 5005 	ldrb.w	r5, [fp, r5]
 800a542:	eb09 0b04 	add.w	fp, r9, r4
 800a546:	f819 4004 	ldrb.w	r4, [r9, r4]
 800a54a:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 800a54e:	4473      	add	r3, lr
 800a550:	eb0b 0006 	add.w	r0, fp, r6
 800a554:	eb04 2505 	add.w	r5, r4, r5, lsl #8
 800a558:	4439      	add	r1, r7
 800a55a:	f3c3 2407 	ubfx	r4, r3, #8, #8
 800a55e:	b2df      	uxtb	r7, r3
 800a560:	f3c3 4607 	ubfx	r6, r3, #16, #8
 800a564:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 800a568:	f85c 3027 	ldr.w	r3, [ip, r7, lsl #2]
 800a56c:	fa5f fa81 	uxtb.w	sl, r1
 800a570:	f85c 7024 	ldr.w	r7, [ip, r4, lsl #2]
 800a574:	9c02      	ldr	r4, [sp, #8]
 800a576:	f85c 9026 	ldr.w	r9, [ip, r6, lsl #2]
 800a57a:	441c      	add	r4, r3
 800a57c:	f85c 602e 	ldr.w	r6, [ip, lr, lsl #2]
 800a580:	f85c e02a 	ldr.w	lr, [ip, sl, lsl #2]
 800a584:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 800a588:	eb07 2794 	add.w	r7, r7, r4, lsr #10
 800a58c:	f3c4 0309 	ubfx	r3, r4, #0, #10
 800a590:	f3c1 2407 	ubfx	r4, r1, #8, #8
 800a594:	b2ed      	uxtb	r5, r5
 800a596:	eb09 2997 	add.w	r9, r9, r7, lsr #10
 800a59a:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800a59e:	f85c 4024 	ldr.w	r4, [ip, r4, lsl #2]
 800a5a2:	eb06 2699 	add.w	r6, r6, r9, lsr #10
 800a5a6:	f85c 5025 	ldr.w	r5, [ip, r5, lsl #2]
 800a5aa:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
 800a5ae:	f3c1 4707 	ubfx	r7, r1, #16, #8
 800a5b2:	eb0e 2e96 	add.w	lr, lr, r6, lsr #10
 800a5b6:	f85c a02a 	ldr.w	sl, [ip, sl, lsl #2]
 800a5ba:	f85c 7027 	ldr.w	r7, [ip, r7, lsl #2]
 800a5be:	0e09      	lsrs	r1, r1, #24
 800a5c0:	eb04 249e 	add.w	r4, r4, lr, lsr #10
 800a5c4:	f3c9 0909 	ubfx	r9, r9, #0, #10
 800a5c8:	f85c 1021 	ldr.w	r1, [ip, r1, lsl #2]
 800a5cc:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800a5d0:	eb07 2794 	add.w	r7, r7, r4, lsr #10
 800a5d4:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800a5d8:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800a5dc:	eb01 2197 	add.w	r1, r1, r7, lsr #10
 800a5e0:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800a5e4:	ea46 4609 	orr.w	r6, r6, r9, lsl #16
 800a5e8:	eb05 2591 	add.w	r5, r5, r1, lsr #10
 800a5ec:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800a5f0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 800a5f4:	eb0a 2a95 	add.w	sl, sl, r5, lsr #10
 800a5f8:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800a5fc:	ea41 4107 	orr.w	r1, r1, r7, lsl #16
 800a600:	ea4f 229a 	mov.w	r2, sl, lsr #10
 800a604:	f3ca 0709 	ubfx	r7, sl, #0, #10
 800a608:	9202      	str	r2, [sp, #8]
 800a60a:	ea47 4505 	orr.w	r5, r7, r5, lsl #16
 800a60e:	4a43      	ldr	r2, [pc, #268]	; (800a71c <D80_GENERIC+0x264>)
 800a610:	9f01      	ldr	r7, [sp, #4]
 800a612:	fb23 7a02 	smlad	sl, r3, r2, r7
 800a616:	4a42      	ldr	r2, [pc, #264]	; (800a720 <D80_GENERIC+0x268>)
 800a618:	fb26 aa02 	smlad	sl, r6, r2, sl
 800a61c:	4a41      	ldr	r2, [pc, #260]	; (800a724 <D80_GENERIC+0x26c>)
 800a61e:	fb24 aa02 	smlad	sl, r4, r2, sl
 800a622:	4a41      	ldr	r2, [pc, #260]	; (800a728 <D80_GENERIC+0x270>)
 800a624:	fb21 a702 	smlad	r7, r1, r2, sl
 800a628:	f44f 3a80 	mov.w	sl, #65536	; 0x10000
 800a62c:	fb25 7a0a 	smlad	sl, r5, sl, r7
 800a630:	4a3e      	ldr	r2, [pc, #248]	; (800a72c <D80_GENERIC+0x274>)
 800a632:	9f03      	ldr	r7, [sp, #12]
 800a634:	fb23 7e02 	smlad	lr, r3, r2, r7
 800a638:	4a3d      	ldr	r2, [pc, #244]	; (800a730 <D80_GENERIC+0x278>)
 800a63a:	fb26 ee02 	smlad	lr, r6, r2, lr
 800a63e:	f04f 174b 	mov.w	r7, #4915275	; 0x4b004b
 800a642:	fb24 e707 	smlad	r7, r4, r7, lr
 800a646:	4a3b      	ldr	r2, [pc, #236]	; (800a734 <D80_GENERIC+0x27c>)
 800a648:	fb21 7702 	smlad	r7, r1, r2, r7
 800a64c:	4a3a      	ldr	r2, [pc, #232]	; (800a738 <D80_GENERIC+0x280>)
 800a64e:	fb25 7202 	smlad	r2, r5, r2, r7
 800a652:	f04f 0901 	mov.w	r9, #1
 800a656:	9201      	str	r2, [sp, #4]
 800a658:	fb23 f909 	smuad	r9, r3, r9
 800a65c:	4b37      	ldr	r3, [pc, #220]	; (800a73c <D80_GENERIC+0x284>)
 800a65e:	fb26 9603 	smlad	r6, r6, r3, r9
 800a662:	4f37      	ldr	r7, [pc, #220]	; (800a740 <D80_GENERIC+0x288>)
 800a664:	fb24 6407 	smlad	r4, r4, r7, r6
 800a668:	4f36      	ldr	r7, [pc, #216]	; (800a744 <D80_GENERIC+0x28c>)
 800a66a:	fb21 4707 	smlad	r7, r1, r7, r4
 800a66e:	4936      	ldr	r1, [pc, #216]	; (800a748 <D80_GENERIC+0x290>)
 800a670:	fb25 7301 	smlad	r3, r5, r1, r7
 800a674:	9303      	str	r3, [sp, #12]
 800a676:	f5aa 3a7a 	sub.w	sl, sl, #256000	; 0x3e800
 800a67a:	9b08      	ldr	r3, [sp, #32]
 800a67c:	b193      	cbz	r3, 800a6a4 <D80_GENERIC+0x1ec>
 800a67e:	9a04      	ldr	r2, [sp, #16]
 800a680:	4452      	add	r2, sl
 800a682:	4614      	mov	r4, r2
 800a684:	9a05      	ldr	r2, [sp, #20]
 800a686:	f8cd a014 	str.w	sl, [sp, #20]
 800a68a:	1aa4      	subs	r4, r4, r2
 800a68c:	fba4 1203 	umull	r1, r2, r4, r3
 800a690:	17e7      	asrs	r7, r4, #31
 800a692:	f111 4400 	adds.w	r4, r1, #2147483648	; 0x80000000
 800a696:	fb03 2207 	mla	r2, r3, r7, r2
 800a69a:	f142 0500 	adc.w	r5, r2, #0
 800a69e:	006b      	lsls	r3, r5, #1
 800a6a0:	469a      	mov	sl, r3
 800a6a2:	9304      	str	r3, [sp, #16]
 800a6a4:	9e00      	ldr	r6, [sp, #0]
 800a6a6:	ea4f 2a4a 	mov.w	sl, sl, lsl #9
 800a6aa:	9a06      	ldr	r2, [sp, #24]
 800a6ac:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800a6b0:	8d33      	ldrh	r3, [r6, #40]	; 0x28
 800a6b2:	2500      	movs	r5, #0
 800a6b4:	fb08 f303 	mul.w	r3, r8, r3
 800a6b8:	fbc2 450a 	smlal	r4, r5, r2, sl
 800a6bc:	9a07      	ldr	r2, [sp, #28]
 800a6be:	f108 0801 	add.w	r8, r8, #1
 800a6c2:	10a9      	asrs	r1, r5, #2
 800a6c4:	f301 010f 	ssat	r1, #16, r1
 800a6c8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800a6cc:	8cf3      	ldrh	r3, [r6, #38]	; 0x26
 800a6ce:	4543      	cmp	r3, r8
 800a6d0:	dd12      	ble.n	800a6f8 <D80_GENERIC+0x240>
 800a6d2:	9b00      	ldr	r3, [sp, #0]
 800a6d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a6d6:	2b01      	cmp	r3, #1
 800a6d8:	f47f af0c 	bne.w	800a4f4 <D80_GENERIC+0x3c>
 800a6dc:	9b00      	ldr	r3, [sp, #0]
 800a6de:	6885      	ldr	r5, [r0, #8]
 800a6e0:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 800a6e2:	06b2      	lsls	r2, r6, #26
 800a6e4:	e9d0 3100 	ldrd	r3, r1, [r0]
 800a6e8:	f100 000a 	add.w	r0, r0, #10
 800a6ec:	f57f af35 	bpl.w	800a55a <D80_GENERIC+0xa2>
 800a6f0:	ba5b      	rev16	r3, r3
 800a6f2:	ba49      	rev16	r1, r1
 800a6f4:	ba6d      	rev16	r5, r5
 800a6f6:	e730      	b.n	800a55a <D80_GENERIC+0xa2>
 800a6f8:	4632      	mov	r2, r6
 800a6fa:	9b03      	ldr	r3, [sp, #12]
 800a6fc:	2000      	movs	r0, #0
 800a6fe:	6093      	str	r3, [r2, #8]
 800a700:	9b01      	ldr	r3, [sp, #4]
 800a702:	60d3      	str	r3, [r2, #12]
 800a704:	9b02      	ldr	r3, [sp, #8]
 800a706:	61d3      	str	r3, [r2, #28]
 800a708:	9b04      	ldr	r3, [sp, #16]
 800a70a:	6113      	str	r3, [r2, #16]
 800a70c:	9b05      	ldr	r3, [sp, #20]
 800a70e:	6153      	str	r3, [r2, #20]
 800a710:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a712:	6193      	str	r3, [r2, #24]
 800a714:	b00b      	add	sp, #44	; 0x2c
 800a716:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a71a:	bf00      	nop
 800a71c:	002d0024 	.word	0x002d0024
 800a720:	001c0015 	.word	0x001c0015
 800a724:	000f000a 	.word	0x000f000a
 800a728:	00060003 	.word	0x00060003
 800a72c:	0037003f 	.word	0x0037003f
 800a730:	00450049 	.word	0x00450049
 800a734:	00490045 	.word	0x00490045
 800a738:	003f0037 	.word	0x003f0037
 800a73c:	00030006 	.word	0x00030006
 800a740:	000a000f 	.word	0x000a000f
 800a744:	0015001c 	.word	0x0015001c
 800a748:	0024002d 	.word	0x0024002d
 800a74c:	24000000 	.word	0x24000000

0800a750 <D128_GENERIC>:
 800a750:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a754:	b08d      	sub	sp, #52	; 0x34
 800a756:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 800a758:	f8d2 a01c 	ldr.w	sl, [r2, #28]
 800a75c:	9109      	str	r1, [sp, #36]	; 0x24
 800a75e:	6911      	ldr	r1, [r2, #16]
 800a760:	9201      	str	r2, [sp, #4]
 800a762:	9106      	str	r1, [sp, #24]
 800a764:	6951      	ldr	r1, [r2, #20]
 800a766:	9107      	str	r1, [sp, #28]
 800a768:	6991      	ldr	r1, [r2, #24]
 800a76a:	910b      	str	r1, [sp, #44]	; 0x2c
 800a76c:	6891      	ldr	r1, [r2, #8]
 800a76e:	9103      	str	r1, [sp, #12]
 800a770:	68d1      	ldr	r1, [r2, #12]
 800a772:	9102      	str	r1, [sp, #8]
 800a774:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800a776:	9108      	str	r1, [sp, #32]
 800a778:	2b00      	cmp	r3, #0
 800a77a:	f000 8183 	beq.w	800aa84 <D128_GENERIC+0x334>
 800a77e:	2300      	movs	r3, #0
 800a780:	6a12      	ldr	r2, [r2, #32]
 800a782:	4681      	mov	r9, r0
 800a784:	920a      	str	r2, [sp, #40]	; 0x28
 800a786:	e9cd a304 	strd	sl, r3, [sp, #16]
 800a78a:	e165      	b.n	800aa58 <D128_GENERIC+0x308>
 800a78c:	b2d2      	uxtb	r2, r2
 800a78e:	f899 b000 	ldrb.w	fp, [r9]
 800a792:	b213      	sxth	r3, r2
 800a794:	4255      	negs	r5, r2
 800a796:	f819 0002 	ldrb.w	r0, [r9, r2]
 800a79a:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 800a79e:	009f      	lsls	r7, r3, #2
 800a7a0:	eb09 0402 	add.w	r4, r9, r2
 800a7a4:	ebc3 06c3 	rsb	r6, r3, r3, lsl #3
 800a7a8:	f819 8002 	ldrb.w	r8, [r9, r2]
 800a7ac:	443b      	add	r3, r7
 800a7ae:	1962      	adds	r2, r4, r5
 800a7b0:	5d64      	ldrb	r4, [r4, r5]
 800a7b2:	eb02 0c03 	add.w	ip, r2, r3
 800a7b6:	0424      	lsls	r4, r4, #16
 800a7b8:	5cd3      	ldrb	r3, [r2, r3]
 800a7ba:	eb0c 0e05 	add.w	lr, ip, r5
 800a7be:	f81c 9015 	ldrb.w	r9, [ip, r5, lsl #1]
 800a7c2:	f81c 2005 	ldrb.w	r2, [ip, r5]
 800a7c6:	eb04 6408 	add.w	r4, r4, r8, lsl #24
 800a7ca:	eb0e 0c45 	add.w	ip, lr, r5, lsl #1
 800a7ce:	f81e 8015 	ldrb.w	r8, [lr, r5, lsl #1]
 800a7d2:	eb04 2400 	add.w	r4, r4, r0, lsl #8
 800a7d6:	eb0c 0e06 	add.w	lr, ip, r6
 800a7da:	f81c a006 	ldrb.w	sl, [ip, r6]
 800a7de:	0412      	lsls	r2, r2, #16
 800a7e0:	445c      	add	r4, fp
 800a7e2:	eb0e 0c05 	add.w	ip, lr, r5
 800a7e6:	eb02 6203 	add.w	r2, r2, r3, lsl #24
 800a7ea:	f81e 3005 	ldrb.w	r3, [lr, r5]
 800a7ee:	eb0c 0045 	add.w	r0, ip, r5, lsl #1
 800a7f2:	f81e e015 	ldrb.w	lr, [lr, r5, lsl #1]
 800a7f6:	041b      	lsls	r3, r3, #16
 800a7f8:	f81c c015 	ldrb.w	ip, [ip, r5, lsl #1]
 800a7fc:	eb00 0b06 	add.w	fp, r0, r6
 800a800:	5d80      	ldrb	r0, [r0, r6]
 800a802:	eb03 630a 	add.w	r3, r3, sl, lsl #24
 800a806:	f81b 6005 	ldrb.w	r6, [fp, r5]
 800a80a:	eb0b 0a05 	add.w	sl, fp, r5
 800a80e:	eb02 2209 	add.w	r2, r2, r9, lsl #8
 800a812:	f81b b015 	ldrb.w	fp, [fp, r5, lsl #1]
 800a816:	0436      	lsls	r6, r6, #16
 800a818:	eb0a 0945 	add.w	r9, sl, r5, lsl #1
 800a81c:	4442      	add	r2, r8
 800a81e:	eb06 6600 	add.w	r6, r6, r0, lsl #24
 800a822:	f81a 8015 	ldrb.w	r8, [sl, r5, lsl #1]
 800a826:	eb03 230e 	add.w	r3, r3, lr, lsl #8
 800a82a:	44b9      	add	r9, r7
 800a82c:	eb06 260b 	add.w	r6, r6, fp, lsl #8
 800a830:	4463      	add	r3, ip
 800a832:	eb06 0508 	add.w	r5, r6, r8
 800a836:	b2e7      	uxtb	r7, r4
 800a838:	f3c4 2607 	ubfx	r6, r4, #8, #8
 800a83c:	499b      	ldr	r1, [pc, #620]	; (800aaac <D128_GENERIC+0x35c>)
 800a83e:	f3c4 4007 	ubfx	r0, r4, #16, #8
 800a842:	0e24      	lsrs	r4, r4, #24
 800a844:	f851 c027 	ldr.w	ip, [r1, r7, lsl #2]
 800a848:	b2d7      	uxtb	r7, r2
 800a84a:	f851 b026 	ldr.w	fp, [r1, r6, lsl #2]
 800a84e:	f3c2 2607 	ubfx	r6, r2, #8, #8
 800a852:	9904      	ldr	r1, [sp, #16]
 800a854:	4461      	add	r1, ip
 800a856:	468c      	mov	ip, r1
 800a858:	4994      	ldr	r1, [pc, #592]	; (800aaac <D128_GENERIC+0x35c>)
 800a85a:	eb0b 2b9c 	add.w	fp, fp, ip, lsr #10
 800a85e:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 800a862:	f851 8024 	ldr.w	r8, [r1, r4, lsl #2]
 800a866:	f3c2 4407 	ubfx	r4, r2, #16, #8
 800a86a:	eb00 209b 	add.w	r0, r0, fp, lsr #10
 800a86e:	f851 e027 	ldr.w	lr, [r1, r7, lsl #2]
 800a872:	f851 7026 	ldr.w	r7, [r1, r6, lsl #2]
 800a876:	0e12      	lsrs	r2, r2, #24
 800a878:	eb08 2890 	add.w	r8, r8, r0, lsr #10
 800a87c:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 800a880:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 800a884:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800a888:	eb0e 2e98 	add.w	lr, lr, r8, lsr #10
 800a88c:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800a890:	b2da      	uxtb	r2, r3
 800a892:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 800a896:	eb07 279e 	add.w	r7, r7, lr, lsr #10
 800a89a:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 800a89e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800a8a2:	ea48 4800 	orr.w	r8, r8, r0, lsl #16
 800a8a6:	eb04 2a97 	add.w	sl, r4, r7, lsr #10
 800a8aa:	f3c3 2007 	ubfx	r0, r3, #8, #8
 800a8ae:	ea4b 4b0c 	orr.w	fp, fp, ip, lsl #16
 800a8b2:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800a8b6:	eb06 269a 	add.w	r6, r6, sl, lsr #10
 800a8ba:	f851 c020 	ldr.w	ip, [r1, r0, lsl #2]
 800a8be:	f3c3 4007 	ubfx	r0, r3, #16, #8
 800a8c2:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800a8c6:	eb02 2296 	add.w	r2, r2, r6, lsr #10
 800a8ca:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 800a8ce:	f851 4020 	ldr.w	r4, [r1, r0, lsl #2]
 800a8d2:	0e1b      	lsrs	r3, r3, #24
 800a8d4:	eb0c 2c92 	add.w	ip, ip, r2, lsr #10
 800a8d8:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800a8dc:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
 800a8e0:	ea47 470e 	orr.w	r7, r7, lr, lsl #16
 800a8e4:	b2eb      	uxtb	r3, r5
 800a8e6:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800a8ea:	eb04 2e9c 	add.w	lr, r4, ip, lsr #10
 800a8ee:	f3cc 0409 	ubfx	r4, ip, #0, #10
 800a8f2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800a8f6:	ea46 460a 	orr.w	r6, r6, sl, lsl #16
 800a8fa:	eb00 209e 	add.w	r0, r0, lr, lsr #10
 800a8fe:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 800a902:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800a906:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800a90a:	eb03 2c90 	add.w	ip, r3, r0, lsr #10
 800a90e:	f851 202a 	ldr.w	r2, [r1, sl, lsl #2]
 800a912:	f3c5 4307 	ubfx	r3, r5, #16, #8
 800a916:	ea4f 6a15 	mov.w	sl, r5, lsr #24
 800a91a:	eb02 229c 	add.w	r2, r2, ip, lsr #10
 800a91e:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800a922:	f851 5023 	ldr.w	r5, [r1, r3, lsl #2]
 800a926:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 800a92a:	f851 302a 	ldr.w	r3, [r1, sl, lsl #2]
 800a92e:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 800a932:	eb05 2592 	add.w	r5, r5, r2, lsr #10
 800a936:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800a93a:	eb03 2e95 	add.w	lr, r3, r5, lsr #10
 800a93e:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800a942:	ea42 430c 	orr.w	r3, r2, ip, lsl #16
 800a946:	ea4f 219e 	mov.w	r1, lr, lsr #10
 800a94a:	f3ce 0209 	ubfx	r2, lr, #0, #10
 800a94e:	9104      	str	r1, [sp, #16]
 800a950:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 800a954:	9902      	ldr	r1, [sp, #8]
 800a956:	4a56      	ldr	r2, [pc, #344]	; (800aab0 <D128_GENERIC+0x360>)
 800a958:	fb2b 1202 	smlad	r2, fp, r2, r1
 800a95c:	4955      	ldr	r1, [pc, #340]	; (800aab4 <D128_GENERIC+0x364>)
 800a95e:	fb28 2201 	smlad	r2, r8, r1, r2
 800a962:	4955      	ldr	r1, [pc, #340]	; (800aab8 <D128_GENERIC+0x368>)
 800a964:	fb27 2201 	smlad	r2, r7, r1, r2
 800a968:	4954      	ldr	r1, [pc, #336]	; (800aabc <D128_GENERIC+0x36c>)
 800a96a:	fb26 2201 	smlad	r2, r6, r1, r2
 800a96e:	4954      	ldr	r1, [pc, #336]	; (800aac0 <D128_GENERIC+0x370>)
 800a970:	fb24 2201 	smlad	r2, r4, r1, r2
 800a974:	4953      	ldr	r1, [pc, #332]	; (800aac4 <D128_GENERIC+0x374>)
 800a976:	fb20 2201 	smlad	r2, r0, r1, r2
 800a97a:	4953      	ldr	r1, [pc, #332]	; (800aac8 <D128_GENERIC+0x378>)
 800a97c:	fb23 2201 	smlad	r2, r3, r1, r2
 800a980:	f44f 3c80 	mov.w	ip, #65536	; 0x10000
 800a984:	fb25 2a0c 	smlad	sl, r5, ip, r2
 800a988:	4950      	ldr	r1, [pc, #320]	; (800aacc <D128_GENERIC+0x37c>)
 800a98a:	9a03      	ldr	r2, [sp, #12]
 800a98c:	fb2b 2c01 	smlad	ip, fp, r1, r2
 800a990:	4a4f      	ldr	r2, [pc, #316]	; (800aad0 <D128_GENERIC+0x380>)
 800a992:	fb28 ce02 	smlad	lr, r8, r2, ip
 800a996:	f8df c150 	ldr.w	ip, [pc, #336]	; 800aae8 <D128_GENERIC+0x398>
 800a99a:	fb27 ec0c 	smlad	ip, r7, ip, lr
 800a99e:	f8df e14c 	ldr.w	lr, [pc, #332]	; 800aaec <D128_GENERIC+0x39c>
 800a9a2:	fb26 cc0e 	smlad	ip, r6, lr, ip
 800a9a6:	f8df e148 	ldr.w	lr, [pc, #328]	; 800aaf0 <D128_GENERIC+0x3a0>
 800a9aa:	fb24 ce0e 	smlad	lr, r4, lr, ip
 800a9ae:	f8df c144 	ldr.w	ip, [pc, #324]	; 800aaf4 <D128_GENERIC+0x3a4>
 800a9b2:	fb20 ee0c 	smlad	lr, r0, ip, lr
 800a9b6:	f8df c140 	ldr.w	ip, [pc, #320]	; 800aaf8 <D128_GENERIC+0x3a8>
 800a9ba:	fb23 ec0c 	smlad	ip, r3, ip, lr
 800a9be:	f8df e13c 	ldr.w	lr, [pc, #316]	; 800aafc <D128_GENERIC+0x3ac>
 800a9c2:	fb25 c20e 	smlad	r2, r5, lr, ip
 800a9c6:	f04f 0c01 	mov.w	ip, #1
 800a9ca:	9202      	str	r2, [sp, #8]
 800a9cc:	fb2b fb0c 	smuad	fp, fp, ip
 800a9d0:	f8df c12c 	ldr.w	ip, [pc, #300]	; 800ab00 <D128_GENERIC+0x3b0>
 800a9d4:	fb28 bb0c 	smlad	fp, r8, ip, fp
 800a9d8:	f8df c128 	ldr.w	ip, [pc, #296]	; 800ab04 <D128_GENERIC+0x3b4>
 800a9dc:	fb27 bb0c 	smlad	fp, r7, ip, fp
 800a9e0:	4f3c      	ldr	r7, [pc, #240]	; (800aad4 <D128_GENERIC+0x384>)
 800a9e2:	fb26 bb07 	smlad	fp, r6, r7, fp
 800a9e6:	4f3c      	ldr	r7, [pc, #240]	; (800aad8 <D128_GENERIC+0x388>)
 800a9e8:	fb24 bb07 	smlad	fp, r4, r7, fp
 800a9ec:	4f3b      	ldr	r7, [pc, #236]	; (800aadc <D128_GENERIC+0x38c>)
 800a9ee:	fb20 bb07 	smlad	fp, r0, r7, fp
 800a9f2:	4f3b      	ldr	r7, [pc, #236]	; (800aae0 <D128_GENERIC+0x390>)
 800a9f4:	fb23 bb07 	smlad	fp, r3, r7, fp
 800a9f8:	4b3a      	ldr	r3, [pc, #232]	; (800aae4 <D128_GENERIC+0x394>)
 800a9fa:	fb25 b303 	smlad	r3, r5, r3, fp
 800a9fe:	9303      	str	r3, [sp, #12]
 800aa00:	f5aa 1480 	sub.w	r4, sl, #1048576	; 0x100000
 800aa04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aa06:	b183      	cbz	r3, 800aa2a <D128_GENERIC+0x2da>
 800aa08:	9a06      	ldr	r2, [sp, #24]
 800aa0a:	9907      	ldr	r1, [sp, #28]
 800aa0c:	4422      	add	r2, r4
 800aa0e:	9407      	str	r4, [sp, #28]
 800aa10:	1a52      	subs	r2, r2, r1
 800aa12:	fba2 0103 	umull	r0, r1, r2, r3
 800aa16:	17d5      	asrs	r5, r2, #31
 800aa18:	f110 4200 	adds.w	r2, r0, #2147483648	; 0x80000000
 800aa1c:	fb03 1105 	mla	r1, r3, r5, r1
 800aa20:	f141 0300 	adc.w	r3, r1, #0
 800aa24:	005b      	lsls	r3, r3, #1
 800aa26:	461c      	mov	r4, r3
 800aa28:	9306      	str	r3, [sp, #24]
 800aa2a:	9d01      	ldr	r5, [sp, #4]
 800aa2c:	01e4      	lsls	r4, r4, #7
 800aa2e:	9e05      	ldr	r6, [sp, #20]
 800aa30:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800aa34:	8d28      	ldrh	r0, [r5, #40]	; 0x28
 800aa36:	2300      	movs	r3, #0
 800aa38:	9908      	ldr	r1, [sp, #32]
 800aa3a:	fb06 f000 	mul.w	r0, r6, r0
 800aa3e:	3601      	adds	r6, #1
 800aa40:	fbc1 2304 	smlal	r2, r3, r1, r4
 800aa44:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aa46:	109b      	asrs	r3, r3, #2
 800aa48:	9605      	str	r6, [sp, #20]
 800aa4a:	f303 030f 	ssat	r3, #16, r3
 800aa4e:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
 800aa52:	8ceb      	ldrh	r3, [r5, #38]	; 0x26
 800aa54:	42b3      	cmp	r3, r6
 800aa56:	dd13      	ble.n	800aa80 <D128_GENERIC+0x330>
 800aa58:	9b01      	ldr	r3, [sp, #4]
 800aa5a:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800aa5c:	2a01      	cmp	r2, #1
 800aa5e:	f47f ae95 	bne.w	800a78c <D128_GENERIC+0x3c>
 800aa62:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800aa64:	f109 0610 	add.w	r6, r9, #16
 800aa68:	0681      	lsls	r1, r0, #26
 800aa6a:	e9d9 4200 	ldrd	r4, r2, [r9]
 800aa6e:	e9d9 3502 	ldrd	r3, r5, [r9, #8]
 800aa72:	d518      	bpl.n	800aaa6 <D128_GENERIC+0x356>
 800aa74:	ba64      	rev16	r4, r4
 800aa76:	ba52      	rev16	r2, r2
 800aa78:	ba5b      	rev16	r3, r3
 800aa7a:	ba6d      	rev16	r5, r5
 800aa7c:	46b1      	mov	r9, r6
 800aa7e:	e6da      	b.n	800a836 <D128_GENERIC+0xe6>
 800aa80:	f8dd a010 	ldr.w	sl, [sp, #16]
 800aa84:	9b01      	ldr	r3, [sp, #4]
 800aa86:	2000      	movs	r0, #0
 800aa88:	9903      	ldr	r1, [sp, #12]
 800aa8a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800aa8c:	6099      	str	r1, [r3, #8]
 800aa8e:	9902      	ldr	r1, [sp, #8]
 800aa90:	f8c3 a01c 	str.w	sl, [r3, #28]
 800aa94:	60d9      	str	r1, [r3, #12]
 800aa96:	9906      	ldr	r1, [sp, #24]
 800aa98:	619a      	str	r2, [r3, #24]
 800aa9a:	6119      	str	r1, [r3, #16]
 800aa9c:	9907      	ldr	r1, [sp, #28]
 800aa9e:	6159      	str	r1, [r3, #20]
 800aaa0:	b00d      	add	sp, #52	; 0x34
 800aaa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aaa6:	46b1      	mov	r9, r6
 800aaa8:	e6c5      	b.n	800a836 <D128_GENERIC+0xe6>
 800aaaa:	bf00      	nop
 800aaac:	24000000 	.word	0x24000000
 800aab0:	00780069 	.word	0x00780069
 800aab4:	005b004e 	.word	0x005b004e
 800aab8:	00420037 	.word	0x00420037
 800aabc:	002d0024 	.word	0x002d0024
 800aac0:	001c0015 	.word	0x001c0015
 800aac4:	000f000a 	.word	0x000f000a
 800aac8:	00060003 	.word	0x00060003
 800aacc:	00880096 	.word	0x00880096
 800aad0:	00a200ac 	.word	0x00a200ac
 800aad4:	0015001c 	.word	0x0015001c
 800aad8:	0024002d 	.word	0x0024002d
 800aadc:	00370042 	.word	0x00370042
 800aae0:	004e005b 	.word	0x004e005b
 800aae4:	00690078 	.word	0x00690078
 800aae8:	00b400ba 	.word	0x00b400ba
 800aaec:	00be00c0 	.word	0x00be00c0
 800aaf0:	00c000be 	.word	0x00c000be
 800aaf4:	00ba00b4 	.word	0x00ba00b4
 800aaf8:	00ac00a2 	.word	0x00ac00a2
 800aafc:	00960088 	.word	0x00960088
 800ab00:	00030006 	.word	0x00030006
 800ab04:	000a000f 	.word	0x000a000f

0800ab08 <D16_1CH_HTONS_VOL_HP>:
 800ab08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab0c:	6993      	ldr	r3, [r2, #24]
 800ab0e:	b087      	sub	sp, #28
 800ab10:	4682      	mov	sl, r0
 800ab12:	8cd0      	ldrh	r0, [r2, #38]	; 0x26
 800ab14:	9304      	str	r3, [sp, #16]
 800ab16:	f8d2 b030 	ldr.w	fp, [r2, #48]	; 0x30
 800ab1a:	69d3      	ldr	r3, [r2, #28]
 800ab1c:	f8d2 e020 	ldr.w	lr, [r2, #32]
 800ab20:	e9d2 5402 	ldrd	r5, r4, [r2, #8]
 800ab24:	e9d2 6c04 	ldrd	r6, ip, [r2, #16]
 800ab28:	9403      	str	r4, [sp, #12]
 800ab2a:	2800      	cmp	r0, #0
 800ab2c:	d054      	beq.n	800abd8 <D16_1CH_HTONS_VOL_HP+0xd0>
 800ab2e:	f1a1 0902 	sub.w	r9, r1, #2
 800ab32:	eb0a 0140 	add.w	r1, sl, r0, lsl #1
 800ab36:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 800abe4 <D16_1CH_HTONS_VOL_HP+0xdc>
 800ab3a:	4650      	mov	r0, sl
 800ab3c:	9101      	str	r1, [sp, #4]
 800ab3e:	4619      	mov	r1, r3
 800ab40:	f8cd b008 	str.w	fp, [sp, #8]
 800ab44:	9205      	str	r2, [sp, #20]
 800ab46:	f850 3b02 	ldr.w	r3, [r0], #2
 800ab4a:	ba5b      	rev16	r3, r3
 800ab4c:	b2dc      	uxtb	r4, r3
 800ab4e:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800ab52:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ab56:	f858 4022 	ldr.w	r4, [r8, r2, lsl #2]
 800ab5a:	4419      	add	r1, r3
 800ab5c:	eb04 2491 	add.w	r4, r4, r1, lsr #10
 800ab60:	f3c1 0309 	ubfx	r3, r1, #0, #10
 800ab64:	f3c4 0209 	ubfx	r2, r4, #0, #10
 800ab68:	0aa1      	lsrs	r1, r4, #10
 800ab6a:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 800ab6e:	4a1b      	ldr	r2, [pc, #108]	; (800abdc <D16_1CH_HTONS_VOL_HP+0xd4>)
 800ab70:	fb23 5402 	smlad	r4, r3, r2, r5
 800ab74:	4a1a      	ldr	r2, [pc, #104]	; (800abe0 <D16_1CH_HTONS_VOL_HP+0xd8>)
 800ab76:	fb23 f502 	smuad	r5, r3, r2
 800ab7a:	f5a4 6400 	sub.w	r4, r4, #2048	; 0x800
 800ab7e:	f04f 4a00 	mov.w	sl, #2147483648	; 0x80000000
 800ab82:	f04f 0b00 	mov.w	fp, #0
 800ab86:	19a2      	adds	r2, r4, r6
 800ab88:	eba2 020c 	sub.w	r2, r2, ip
 800ab8c:	46a4      	mov	ip, r4
 800ab8e:	17d7      	asrs	r7, r2, #31
 800ab90:	fba2 230e 	umull	r2, r3, r2, lr
 800ab94:	f112 4600 	adds.w	r6, r2, #2147483648	; 0x80000000
 800ab98:	fb0e 3307 	mla	r3, lr, r7, r3
 800ab9c:	f143 0700 	adc.w	r7, r3, #0
 800aba0:	9b02      	ldr	r3, [sp, #8]
 800aba2:	047a      	lsls	r2, r7, #17
 800aba4:	007e      	lsls	r6, r7, #1
 800aba6:	fbc3 ab02 	smlal	sl, fp, r3, r2
 800abaa:	ea4f 03ab 	mov.w	r3, fp, asr #2
 800abae:	f303 030f 	ssat	r3, #16, r3
 800abb2:	f829 3f02 	strh.w	r3, [r9, #2]!
 800abb6:	9b01      	ldr	r3, [sp, #4]
 800abb8:	4298      	cmp	r0, r3
 800abba:	d1c4      	bne.n	800ab46 <D16_1CH_HTONS_VOL_HP+0x3e>
 800abbc:	460b      	mov	r3, r1
 800abbe:	9a05      	ldr	r2, [sp, #20]
 800abc0:	2000      	movs	r0, #0
 800abc2:	9903      	ldr	r1, [sp, #12]
 800abc4:	61d3      	str	r3, [r2, #28]
 800abc6:	9b04      	ldr	r3, [sp, #16]
 800abc8:	6095      	str	r5, [r2, #8]
 800abca:	60d1      	str	r1, [r2, #12]
 800abcc:	6193      	str	r3, [r2, #24]
 800abce:	e9c2 6404 	strd	r6, r4, [r2, #16]
 800abd2:	b007      	add	sp, #28
 800abd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800abd8:	4664      	mov	r4, ip
 800abda:	e7f1      	b.n	800abc0 <D16_1CH_HTONS_VOL_HP+0xb8>
 800abdc:	00030001 	.word	0x00030001
 800abe0:	00010003 	.word	0x00010003
 800abe4:	24000000 	.word	0x24000000

0800abe8 <D24_1CH_HTONS_VOL_HP>:
 800abe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abec:	6b16      	ldr	r6, [r2, #48]	; 0x30
 800abee:	b089      	sub	sp, #36	; 0x24
 800abf0:	6993      	ldr	r3, [r2, #24]
 800abf2:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 800abf4:	9604      	str	r6, [sp, #16]
 800abf6:	6a16      	ldr	r6, [r2, #32]
 800abf8:	9306      	str	r3, [sp, #24]
 800abfa:	9505      	str	r5, [sp, #20]
 800abfc:	69d3      	ldr	r3, [r2, #28]
 800abfe:	9600      	str	r6, [sp, #0]
 800ac00:	e9d2 4a04 	ldrd	r4, sl, [r2, #16]
 800ac04:	e9d2 ce02 	ldrd	ip, lr, [r2, #8]
 800ac08:	2d00      	cmp	r5, #0
 800ac0a:	f000 8083 	beq.w	800ad14 <D24_1CH_HTONS_VOL_HP+0x12c>
 800ac0e:	9207      	str	r2, [sp, #28]
 800ac10:	2600      	movs	r6, #0
 800ac12:	4622      	mov	r2, r4
 800ac14:	f1a1 0b02 	sub.w	fp, r1, #2
 800ac18:	4f3f      	ldr	r7, [pc, #252]	; (800ad18 <D24_1CH_HTONS_VOL_HP+0x130>)
 800ac1a:	461d      	mov	r5, r3
 800ac1c:	f8cd a00c 	str.w	sl, [sp, #12]
 800ac20:	9c00      	ldr	r4, [sp, #0]
 800ac22:	e056      	b.n	800acd2 <D24_1CH_HTONS_VOL_HP+0xea>
 800ac24:	7841      	ldrb	r1, [r0, #1]
 800ac26:	eb08 4809 	add.w	r8, r8, r9, lsl #16
 800ac2a:	3002      	adds	r0, #2
 800ac2c:	4488      	add	r8, r1
 800ac2e:	fa5f f388 	uxtb.w	r3, r8
 800ac32:	f3c8 2907 	ubfx	r9, r8, #8, #8
 800ac36:	ea4f 4818 	mov.w	r8, r8, lsr #16
 800ac3a:	f857 1023 	ldr.w	r1, [r7, r3, lsl #2]
 800ac3e:	f857 3029 	ldr.w	r3, [r7, r9, lsl #2]
 800ac42:	eb01 2195 	add.w	r1, r1, r5, lsr #10
 800ac46:	f857 5028 	ldr.w	r5, [r7, r8, lsl #2]
 800ac4a:	eb03 2891 	add.w	r8, r3, r1, lsr #10
 800ac4e:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800ac52:	f3c8 0309 	ubfx	r3, r8, #0, #10
 800ac56:	eb05 2598 	add.w	r5, r5, r8, lsr #10
 800ac5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800ac5e:	492f      	ldr	r1, [pc, #188]	; (800ad1c <D24_1CH_HTONS_VOL_HP+0x134>)
 800ac60:	fb23 e901 	smlad	r9, r3, r1, lr
 800ac64:	492e      	ldr	r1, [pc, #184]	; (800ad20 <D24_1CH_HTONS_VOL_HP+0x138>)
 800ac66:	fb23 ce01 	smlad	lr, r3, r1, ip
 800ac6a:	f3c5 0c09 	ubfx	ip, r5, #0, #10
 800ac6e:	2101      	movs	r1, #1
 800ac70:	eb0c 084c 	add.w	r8, ip, ip, lsl #1
 800ac74:	eb0e 0e48 	add.w	lr, lr, r8, lsl #1
 800ac78:	fb23 f301 	smuad	r3, r3, r1
 800ac7c:	f5a9 51d8 	sub.w	r1, r9, #6912	; 0x1b00
 800ac80:	eb08 0c03 	add.w	ip, r8, r3
 800ac84:	9b03      	ldr	r3, [sp, #12]
 800ac86:	f04f 0a00 	mov.w	sl, #0
 800ac8a:	440a      	add	r2, r1
 800ac8c:	3601      	adds	r6, #1
 800ac8e:	9103      	str	r1, [sp, #12]
 800ac90:	1ad2      	subs	r2, r2, r3
 800ac92:	ea4f 79e2 	mov.w	r9, r2, asr #31
 800ac96:	fba2 2304 	umull	r2, r3, r2, r4
 800ac9a:	e9cd 2300 	strd	r2, r3, [sp]
 800ac9e:	fb04 3309 	mla	r3, r4, r9, r3
 800aca2:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
 800aca6:	9301      	str	r3, [sp, #4]
 800aca8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800acac:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 800acb0:	f143 0300 	adc.w	r3, r3, #0
 800acb4:	ea4f 38c3 	mov.w	r8, r3, lsl #15
 800acb8:	005a      	lsls	r2, r3, #1
 800acba:	9b04      	ldr	r3, [sp, #16]
 800acbc:	fbc3 9a08 	smlal	r9, sl, r3, r8
 800acc0:	ea4f 03aa 	mov.w	r3, sl, asr #2
 800acc4:	f303 030f 	ssat	r3, #16, r3
 800acc8:	f82b 3f02 	strh.w	r3, [fp, #2]!
 800accc:	9b05      	ldr	r3, [sp, #20]
 800acce:	429e      	cmp	r6, r3
 800acd0:	d010      	beq.n	800acf4 <D24_1CH_HTONS_VOL_HP+0x10c>
 800acd2:	f890 9003 	ldrb.w	r9, [r0, #3]
 800acd6:	f016 0f01 	tst.w	r6, #1
 800acda:	7801      	ldrb	r1, [r0, #0]
 800acdc:	ea4f 2309 	mov.w	r3, r9, lsl #8
 800ace0:	ea4f 2801 	mov.w	r8, r1, lsl #8
 800ace4:	d09e      	beq.n	800ac24 <D24_1CH_HTONS_VOL_HP+0x3c>
 800ace6:	f890 8002 	ldrb.w	r8, [r0, #2]
 800acea:	3004      	adds	r0, #4
 800acec:	eb03 4808 	add.w	r8, r3, r8, lsl #16
 800acf0:	4488      	add	r8, r1
 800acf2:	e79c      	b.n	800ac2e <D24_1CH_HTONS_VOL_HP+0x46>
 800acf4:	4614      	mov	r4, r2
 800acf6:	462b      	mov	r3, r5
 800acf8:	9a07      	ldr	r2, [sp, #28]
 800acfa:	2000      	movs	r0, #0
 800acfc:	61d3      	str	r3, [r2, #28]
 800acfe:	9b06      	ldr	r3, [sp, #24]
 800ad00:	f8c2 c008 	str.w	ip, [r2, #8]
 800ad04:	f8c2 e00c 	str.w	lr, [r2, #12]
 800ad08:	6193      	str	r3, [r2, #24]
 800ad0a:	e9c2 4104 	strd	r4, r1, [r2, #16]
 800ad0e:	b009      	add	sp, #36	; 0x24
 800ad10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad14:	4651      	mov	r1, sl
 800ad16:	e7f0      	b.n	800acfa <D24_1CH_HTONS_VOL_HP+0x112>
 800ad18:	24000000 	.word	0x24000000
 800ad1c:	00030001 	.word	0x00030001
 800ad20:	00060007 	.word	0x00060007

0800ad24 <D32_1CH_HTONS_VOL_HP>:
 800ad24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad28:	6993      	ldr	r3, [r2, #24]
 800ad2a:	b087      	sub	sp, #28
 800ad2c:	4683      	mov	fp, r0
 800ad2e:	8cd0      	ldrh	r0, [r2, #38]	; 0x26
 800ad30:	9304      	str	r3, [sp, #16]
 800ad32:	69d5      	ldr	r5, [r2, #28]
 800ad34:	6b14      	ldr	r4, [r2, #48]	; 0x30
 800ad36:	f8d2 a020 	ldr.w	sl, [r2, #32]
 800ad3a:	e9d2 8e04 	ldrd	r8, lr, [r2, #16]
 800ad3e:	e9d2 3c02 	ldrd	r3, ip, [r2, #8]
 800ad42:	2800      	cmp	r0, #0
 800ad44:	d077      	beq.n	800ae36 <D32_1CH_HTONS_VOL_HP+0x112>
 800ad46:	460f      	mov	r7, r1
 800ad48:	46f1      	mov	r9, lr
 800ad4a:	eb01 0140 	add.w	r1, r1, r0, lsl #1
 800ad4e:	f8cd 8000 	str.w	r8, [sp]
 800ad52:	4e3a      	ldr	r6, [pc, #232]	; (800ae3c <D32_1CH_HTONS_VOL_HP+0x118>)
 800ad54:	469e      	mov	lr, r3
 800ad56:	46a0      	mov	r8, r4
 800ad58:	9103      	str	r1, [sp, #12]
 800ad5a:	9205      	str	r2, [sp, #20]
 800ad5c:	f85b 4b04 	ldr.w	r4, [fp], #4
 800ad60:	ba64      	rev16	r4, r4
 800ad62:	b2e0      	uxtb	r0, r4
 800ad64:	f3c4 2307 	ubfx	r3, r4, #8, #8
 800ad68:	f3c4 4107 	ubfx	r1, r4, #16, #8
 800ad6c:	0e24      	lsrs	r4, r4, #24
 800ad6e:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 800ad72:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 800ad76:	eb00 2095 	add.w	r0, r0, r5, lsr #10
 800ad7a:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 800ad7e:	f856 5024 	ldr.w	r5, [r6, r4, lsl #2]
 800ad82:	eb03 2390 	add.w	r3, r3, r0, lsr #10
 800ad86:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800ad8a:	eb01 2193 	add.w	r1, r1, r3, lsr #10
 800ad8e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ad92:	eb05 2591 	add.w	r5, r5, r1, lsr #10
 800ad96:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800ad9a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800ad9e:	f3c5 0009 	ubfx	r0, r5, #0, #10
 800ada2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800ada6:	4826      	ldr	r0, [pc, #152]	; (800ae40 <D32_1CH_HTONS_VOL_HP+0x11c>)
 800ada8:	fb23 c400 	smlad	r4, r3, r0, ip
 800adac:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800adb0:	fb21 4402 	smlad	r4, r1, r2, r4
 800adb4:	4823      	ldr	r0, [pc, #140]	; (800ae44 <D32_1CH_HTONS_VOL_HP+0x120>)
 800adb6:	fb23 ec00 	smlad	ip, r3, r0, lr
 800adba:	4823      	ldr	r0, [pc, #140]	; (800ae48 <D32_1CH_HTONS_VOL_HP+0x124>)
 800adbc:	fb21 cc00 	smlad	ip, r1, r0, ip
 800adc0:	2201      	movs	r2, #1
 800adc2:	fb23 f302 	smuad	r3, r3, r2
 800adc6:	4821      	ldr	r0, [pc, #132]	; (800ae4c <D32_1CH_HTONS_VOL_HP+0x128>)
 800adc8:	fb21 3e00 	smlad	lr, r1, r0, r3
 800adcc:	9b00      	ldr	r3, [sp, #0]
 800adce:	f5a4 4480 	sub.w	r4, r4, #16384	; 0x4000
 800add2:	4423      	add	r3, r4
 800add4:	eba3 0209 	sub.w	r2, r3, r9
 800add8:	46a1      	mov	r9, r4
 800adda:	17d1      	asrs	r1, r2, #31
 800addc:	fba2 230a 	umull	r2, r3, r2, sl
 800ade0:	e9cd 2300 	strd	r2, r3, [sp]
 800ade4:	fb0a 3301 	mla	r3, sl, r1, r3
 800ade8:	9301      	str	r3, [sp, #4]
 800adea:	e9dd 2300 	ldrd	r2, r3, [sp]
 800adee:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 800adf2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800adf6:	f143 0300 	adc.w	r3, r3, #0
 800adfa:	0399      	lsls	r1, r3, #14
 800adfc:	005b      	lsls	r3, r3, #1
 800adfe:	9300      	str	r3, [sp, #0]
 800ae00:	2300      	movs	r3, #0
 800ae02:	fbc8 2301 	smlal	r2, r3, r8, r1
 800ae06:	109b      	asrs	r3, r3, #2
 800ae08:	f303 030f 	ssat	r3, #16, r3
 800ae0c:	f827 3b02 	strh.w	r3, [r7], #2
 800ae10:	9b03      	ldr	r3, [sp, #12]
 800ae12:	429f      	cmp	r7, r3
 800ae14:	d1a2      	bne.n	800ad5c <D32_1CH_HTONS_VOL_HP+0x38>
 800ae16:	4673      	mov	r3, lr
 800ae18:	f8dd 8000 	ldr.w	r8, [sp]
 800ae1c:	9a05      	ldr	r2, [sp, #20]
 800ae1e:	6093      	str	r3, [r2, #8]
 800ae20:	2000      	movs	r0, #0
 800ae22:	9b04      	ldr	r3, [sp, #16]
 800ae24:	f8c2 c00c 	str.w	ip, [r2, #12]
 800ae28:	61d5      	str	r5, [r2, #28]
 800ae2a:	6193      	str	r3, [r2, #24]
 800ae2c:	e9c2 8404 	strd	r8, r4, [r2, #16]
 800ae30:	b007      	add	sp, #28
 800ae32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae36:	4674      	mov	r4, lr
 800ae38:	e7f1      	b.n	800ae1e <D32_1CH_HTONS_VOL_HP+0xfa>
 800ae3a:	bf00      	nop
 800ae3c:	24000000 	.word	0x24000000
 800ae40:	00060003 	.word	0x00060003
 800ae44:	000a000c 	.word	0x000a000c
 800ae48:	000c000a 	.word	0x000c000a
 800ae4c:	00030006 	.word	0x00030006

0800ae50 <D48_1CH_HTONS_VOL_HP>:
 800ae50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae54:	6b17      	ldr	r7, [r2, #48]	; 0x30
 800ae56:	b087      	sub	sp, #28
 800ae58:	6993      	ldr	r3, [r2, #24]
 800ae5a:	9701      	str	r7, [sp, #4]
 800ae5c:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 800ae5e:	6a17      	ldr	r7, [r2, #32]
 800ae60:	9304      	str	r3, [sp, #16]
 800ae62:	69d6      	ldr	r6, [r2, #28]
 800ae64:	9702      	str	r7, [sp, #8]
 800ae66:	e9d2 4e04 	ldrd	r4, lr, [r2, #16]
 800ae6a:	e9d2 3c02 	ldrd	r3, ip, [r2, #8]
 800ae6e:	2d00      	cmp	r5, #0
 800ae70:	f000 8093 	beq.w	800af9a <D48_1CH_HTONS_VOL_HP+0x14a>
 800ae74:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ae78:	f1a1 0b02 	sub.w	fp, r1, #2
 800ae7c:	46f2      	mov	sl, lr
 800ae7e:	4f48      	ldr	r7, [pc, #288]	; (800afa0 <D48_1CH_HTONS_VOL_HP+0x150>)
 800ae80:	eb00 0145 	add.w	r1, r0, r5, lsl #1
 800ae84:	469e      	mov	lr, r3
 800ae86:	9205      	str	r2, [sp, #20]
 800ae88:	9103      	str	r1, [sp, #12]
 800ae8a:	e9d0 3200 	ldrd	r3, r2, [r0]
 800ae8e:	3006      	adds	r0, #6
 800ae90:	ba5b      	rev16	r3, r3
 800ae92:	fa92 f992 	rev16.w	r9, r2
 800ae96:	b2dd      	uxtb	r5, r3
 800ae98:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800ae9c:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800aea0:	0e1b      	lsrs	r3, r3, #24
 800aea2:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 800aea6:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 800aeaa:	eb05 2696 	add.w	r6, r5, r6, lsr #10
 800aeae:	f857 5022 	ldr.w	r5, [r7, r2, lsl #2]
 800aeb2:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 800aeb6:	fa5f f289 	uxtb.w	r2, r9
 800aeba:	eb01 2196 	add.w	r1, r1, r6, lsr #10
 800aebe:	f3c9 2907 	ubfx	r9, r9, #8, #8
 800aec2:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 800aec6:	f3c6 0809 	ubfx	r8, r6, #0, #10
 800aeca:	eb05 2591 	add.w	r5, r5, r1, lsr #10
 800aece:	f857 6029 	ldr.w	r6, [r7, r9, lsl #2]
 800aed2:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800aed6:	eb03 2395 	add.w	r3, r3, r5, lsr #10
 800aeda:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800aede:	ea41 4808 	orr.w	r8, r1, r8, lsl #16
 800aee2:	eb02 2293 	add.w	r2, r2, r3, lsr #10
 800aee6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800aeea:	eb06 2692 	add.w	r6, r6, r2, lsr #10
 800aeee:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800aef2:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
 800aef6:	f3c6 0309 	ubfx	r3, r6, #0, #10
 800aefa:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 800aefe:	4b29      	ldr	r3, [pc, #164]	; (800afa4 <D48_1CH_HTONS_VOL_HP+0x154>)
 800af00:	fb28 c103 	smlad	r1, r8, r3, ip
 800af04:	4b28      	ldr	r3, [pc, #160]	; (800afa8 <D48_1CH_HTONS_VOL_HP+0x158>)
 800af06:	fb25 1103 	smlad	r1, r5, r3, r1
 800af0a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800af0e:	fb22 1903 	smlad	r9, r2, r3, r1
 800af12:	4b26      	ldr	r3, [pc, #152]	; (800afac <D48_1CH_HTONS_VOL_HP+0x15c>)
 800af14:	fb28 ec03 	smlad	ip, r8, r3, lr
 800af18:	f04f 131b 	mov.w	r3, #1769499	; 0x1b001b
 800af1c:	fb25 cc03 	smlad	ip, r5, r3, ip
 800af20:	4b23      	ldr	r3, [pc, #140]	; (800afb0 <D48_1CH_HTONS_VOL_HP+0x160>)
 800af22:	fb22 cc03 	smlad	ip, r2, r3, ip
 800af26:	2101      	movs	r1, #1
 800af28:	fb28 f801 	smuad	r8, r8, r1
 800af2c:	4b21      	ldr	r3, [pc, #132]	; (800afb4 <D48_1CH_HTONS_VOL_HP+0x164>)
 800af2e:	fb25 8503 	smlad	r5, r5, r3, r8
 800af32:	4b21      	ldr	r3, [pc, #132]	; (800afb8 <D48_1CH_HTONS_VOL_HP+0x168>)
 800af34:	fb22 5e03 	smlad	lr, r2, r3, r5
 800af38:	f5a9 4158 	sub.w	r1, r9, #55296	; 0xd800
 800af3c:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 800af40:	190a      	adds	r2, r1, r4
 800af42:	9c02      	ldr	r4, [sp, #8]
 800af44:	eba2 020a 	sub.w	r2, r2, sl
 800af48:	468a      	mov	sl, r1
 800af4a:	ea4f 79e2 	mov.w	r9, r2, asr #31
 800af4e:	fba2 2304 	umull	r2, r3, r2, r4
 800af52:	fb04 3309 	mla	r3, r4, r9, r3
 800af56:	f112 4400 	adds.w	r4, r2, #2147483648	; 0x80000000
 800af5a:	f04f 0900 	mov.w	r9, #0
 800af5e:	f143 0500 	adc.w	r5, r3, #0
 800af62:	9b01      	ldr	r3, [sp, #4]
 800af64:	032a      	lsls	r2, r5, #12
 800af66:	006c      	lsls	r4, r5, #1
 800af68:	fbc3 8902 	smlal	r8, r9, r3, r2
 800af6c:	ea4f 03a9 	mov.w	r3, r9, asr #2
 800af70:	f303 030f 	ssat	r3, #16, r3
 800af74:	f82b 3f02 	strh.w	r3, [fp, #2]!
 800af78:	9b03      	ldr	r3, [sp, #12]
 800af7a:	4283      	cmp	r3, r0
 800af7c:	d185      	bne.n	800ae8a <D48_1CH_HTONS_VOL_HP+0x3a>
 800af7e:	4673      	mov	r3, lr
 800af80:	9a05      	ldr	r2, [sp, #20]
 800af82:	6093      	str	r3, [r2, #8]
 800af84:	2000      	movs	r0, #0
 800af86:	9b04      	ldr	r3, [sp, #16]
 800af88:	f8c2 c00c 	str.w	ip, [r2, #12]
 800af8c:	61d6      	str	r6, [r2, #28]
 800af8e:	6193      	str	r3, [r2, #24]
 800af90:	e9c2 4104 	strd	r4, r1, [r2, #16]
 800af94:	b007      	add	sp, #28
 800af96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af9a:	4671      	mov	r1, lr
 800af9c:	e7f1      	b.n	800af82 <D48_1CH_HTONS_VOL_HP+0x132>
 800af9e:	bf00      	nop
 800afa0:	24000000 	.word	0x24000000
 800afa4:	000f000a 	.word	0x000f000a
 800afa8:	00060003 	.word	0x00060003
 800afac:	00150019 	.word	0x00150019
 800afb0:	00190015 	.word	0x00190015
 800afb4:	00030006 	.word	0x00030006
 800afb8:	000a000f 	.word	0x000a000f

0800afbc <D64_1CH_HTONS_VOL_HP>:
 800afbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afc0:	6b15      	ldr	r5, [r2, #48]	; 0x30
 800afc2:	b089      	sub	sp, #36	; 0x24
 800afc4:	6993      	ldr	r3, [r2, #24]
 800afc6:	4686      	mov	lr, r0
 800afc8:	9503      	str	r5, [sp, #12]
 800afca:	8cd0      	ldrh	r0, [r2, #38]	; 0x26
 800afcc:	6a15      	ldr	r5, [r2, #32]
 800afce:	9306      	str	r3, [sp, #24]
 800afd0:	69d6      	ldr	r6, [r2, #28]
 800afd2:	9504      	str	r5, [sp, #16]
 800afd4:	e9d2 8404 	ldrd	r8, r4, [r2, #16]
 800afd8:	e9d2 3c02 	ldrd	r3, ip, [r2, #8]
 800afdc:	2800      	cmp	r0, #0
 800afde:	f000 80a4 	beq.w	800b12a <D64_1CH_HTONS_VOL_HP+0x16e>
 800afe2:	460f      	mov	r7, r1
 800afe4:	46f1      	mov	r9, lr
 800afe6:	eb01 0140 	add.w	r1, r1, r0, lsl #1
 800afea:	4d56      	ldr	r5, [pc, #344]	; (800b144 <D64_1CH_HTONS_VOL_HP+0x188>)
 800afec:	46a2      	mov	sl, r4
 800afee:	469e      	mov	lr, r3
 800aff0:	9105      	str	r1, [sp, #20]
 800aff2:	9207      	str	r2, [sp, #28]
 800aff4:	f859 1b08 	ldr.w	r1, [r9], #8
 800aff8:	f859 3c04 	ldr.w	r3, [r9, #-4]
 800affc:	ba49      	rev16	r1, r1
 800affe:	fa93 fb93 	rev16.w	fp, r3
 800b002:	b2cb      	uxtb	r3, r1
 800b004:	f3c1 2207 	ubfx	r2, r1, #8, #8
 800b008:	f3c1 4007 	ubfx	r0, r1, #16, #8
 800b00c:	0e09      	lsrs	r1, r1, #24
 800b00e:	f855 4023 	ldr.w	r4, [r5, r3, lsl #2]
 800b012:	fa5f f38b 	uxtb.w	r3, fp
 800b016:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 800b01a:	4426      	add	r6, r4
 800b01c:	f855 4020 	ldr.w	r4, [r5, r0, lsl #2]
 800b020:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 800b024:	eb02 2296 	add.w	r2, r2, r6, lsr #10
 800b028:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
 800b02c:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800b030:	f3cb 2307 	ubfx	r3, fp, #8, #8
 800b034:	eb04 2492 	add.w	r4, r4, r2, lsr #10
 800b038:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800b03c:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 800b040:	eb01 2194 	add.w	r1, r1, r4, lsr #10
 800b044:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800b048:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 800b04c:	f3cb 4607 	ubfx	r6, fp, #16, #8
 800b050:	eb00 2091 	add.w	r0, r0, r1, lsr #10
 800b054:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800b058:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 800b05c:	ea4f 6b1b 	mov.w	fp, fp, lsr #24
 800b060:	eb03 2390 	add.w	r3, r3, r0, lsr #10
 800b064:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800b068:	f855 b02b 	ldr.w	fp, [r5, fp, lsl #2]
 800b06c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800b070:	eb06 2693 	add.w	r6, r6, r3, lsr #10
 800b074:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b078:	eb0b 2b96 	add.w	fp, fp, r6, lsr #10
 800b07c:	f3c6 0409 	ubfx	r4, r6, #0, #10
 800b080:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800b084:	f3cb 0009 	ubfx	r0, fp, #0, #10
 800b088:	ea4f 269b 	mov.w	r6, fp, lsr #10
 800b08c:	ea40 4b04 	orr.w	fp, r0, r4, lsl #16
 800b090:	482d      	ldr	r0, [pc, #180]	; (800b148 <D64_1CH_HTONS_VOL_HP+0x18c>)
 800b092:	fb22 cc00 	smlad	ip, r2, r0, ip
 800b096:	482d      	ldr	r0, [pc, #180]	; (800b14c <D64_1CH_HTONS_VOL_HP+0x190>)
 800b098:	fb21 cc00 	smlad	ip, r1, r0, ip
 800b09c:	482c      	ldr	r0, [pc, #176]	; (800b150 <D64_1CH_HTONS_VOL_HP+0x194>)
 800b09e:	fb23 cc00 	smlad	ip, r3, r0, ip
 800b0a2:	f44f 3480 	mov.w	r4, #65536	; 0x10000
 800b0a6:	fb2b c404 	smlad	r4, fp, r4, ip
 800b0aa:	482a      	ldr	r0, [pc, #168]	; (800b154 <D64_1CH_HTONS_VOL_HP+0x198>)
 800b0ac:	fb22 ec00 	smlad	ip, r2, r0, lr
 800b0b0:	fb2b cc10 	smladx	ip, fp, r0, ip
 800b0b4:	4828      	ldr	r0, [pc, #160]	; (800b158 <D64_1CH_HTONS_VOL_HP+0x19c>)
 800b0b6:	fb21 cc00 	smlad	ip, r1, r0, ip
 800b0ba:	fb23 cc10 	smladx	ip, r3, r0, ip
 800b0be:	f04f 0e01 	mov.w	lr, #1
 800b0c2:	fb22 f20e 	smuad	r2, r2, lr
 800b0c6:	4825      	ldr	r0, [pc, #148]	; (800b15c <D64_1CH_HTONS_VOL_HP+0x1a0>)
 800b0c8:	fb21 2100 	smlad	r1, r1, r0, r2
 800b0cc:	4a24      	ldr	r2, [pc, #144]	; (800b160 <D64_1CH_HTONS_VOL_HP+0x1a4>)
 800b0ce:	fb23 1302 	smlad	r3, r3, r2, r1
 800b0d2:	4a24      	ldr	r2, [pc, #144]	; (800b164 <D64_1CH_HTONS_VOL_HP+0x1a8>)
 800b0d4:	fb2b 3e02 	smlad	lr, fp, r2, r3
 800b0d8:	f5a4 3400 	sub.w	r4, r4, #131072	; 0x20000
 800b0dc:	eb04 0208 	add.w	r2, r4, r8
 800b0e0:	eba2 020a 	sub.w	r2, r2, sl
 800b0e4:	46a2      	mov	sl, r4
 800b0e6:	4610      	mov	r0, r2
 800b0e8:	17d1      	asrs	r1, r2, #31
 800b0ea:	e9cd 0100 	strd	r0, r1, [sp]
 800b0ee:	9904      	ldr	r1, [sp, #16]
 800b0f0:	9801      	ldr	r0, [sp, #4]
 800b0f2:	fba2 2301 	umull	r2, r3, r2, r1
 800b0f6:	fb01 3300 	mla	r3, r1, r0, r3
 800b0fa:	f112 4000 	adds.w	r0, r2, #2147483648	; 0x80000000
 800b0fe:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800b102:	f143 0100 	adc.w	r1, r3, #0
 800b106:	9b03      	ldr	r3, [sp, #12]
 800b108:	02ca      	lsls	r2, r1, #11
 800b10a:	ea4f 0841 	mov.w	r8, r1, lsl #1
 800b10e:	2100      	movs	r1, #0
 800b110:	fbc3 0102 	smlal	r0, r1, r3, r2
 800b114:	108b      	asrs	r3, r1, #2
 800b116:	f303 030f 	ssat	r3, #16, r3
 800b11a:	f827 3b02 	strh.w	r3, [r7], #2
 800b11e:	9b05      	ldr	r3, [sp, #20]
 800b120:	429f      	cmp	r7, r3
 800b122:	f47f af67 	bne.w	800aff4 <D64_1CH_HTONS_VOL_HP+0x38>
 800b126:	4673      	mov	r3, lr
 800b128:	9a07      	ldr	r2, [sp, #28]
 800b12a:	6093      	str	r3, [r2, #8]
 800b12c:	2000      	movs	r0, #0
 800b12e:	9b06      	ldr	r3, [sp, #24]
 800b130:	f8c2 c00c 	str.w	ip, [r2, #12]
 800b134:	61d6      	str	r6, [r2, #28]
 800b136:	6193      	str	r3, [r2, #24]
 800b138:	e9c2 8404 	strd	r8, r4, [r2, #16]
 800b13c:	b009      	add	sp, #36	; 0x24
 800b13e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b142:	bf00      	nop
 800b144:	24000000 	.word	0x24000000
 800b148:	001c0015 	.word	0x001c0015
 800b14c:	000f000a 	.word	0x000f000a
 800b150:	00060003 	.word	0x00060003
 800b154:	0024002a 	.word	0x0024002a
 800b158:	002e0030 	.word	0x002e0030
 800b15c:	00030006 	.word	0x00030006
 800b160:	000a000f 	.word	0x000a000f
 800b164:	0015001c 	.word	0x0015001c

0800b168 <D80_1CH_HTONS_VOL_HP>:
 800b168:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b16c:	6913      	ldr	r3, [r2, #16]
 800b16e:	b089      	sub	sp, #36	; 0x24
 800b170:	6b16      	ldr	r6, [r2, #48]	; 0x30
 800b172:	9301      	str	r3, [sp, #4]
 800b174:	9603      	str	r6, [sp, #12]
 800b176:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 800b178:	6a16      	ldr	r6, [r2, #32]
 800b17a:	e9d2 5305 	ldrd	r5, r3, [r2, #20]
 800b17e:	e9d2 7c02 	ldrd	r7, ip, [r2, #8]
 800b182:	9306      	str	r3, [sp, #24]
 800b184:	9604      	str	r6, [sp, #16]
 800b186:	69d3      	ldr	r3, [r2, #28]
 800b188:	2c00      	cmp	r4, #0
 800b18a:	f000 80ce 	beq.w	800b32a <D80_1CH_HTONS_VOL_HP+0x1c2>
 800b18e:	3902      	subs	r1, #2
 800b190:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 800b194:	4e66      	ldr	r6, [pc, #408]	; (800b330 <D80_1CH_HTONS_VOL_HP+0x1c8>)
 800b196:	469e      	mov	lr, r3
 800b198:	9102      	str	r1, [sp, #8]
 800b19a:	46aa      	mov	sl, r5
 800b19c:	eb00 0144 	add.w	r1, r0, r4, lsl #1
 800b1a0:	9207      	str	r2, [sp, #28]
 800b1a2:	9105      	str	r1, [sp, #20]
 800b1a4:	6883      	ldr	r3, [r0, #8]
 800b1a6:	e9d0 4200 	ldrd	r4, r2, [r0]
 800b1aa:	300a      	adds	r0, #10
 800b1ac:	ba64      	rev16	r4, r4
 800b1ae:	ba52      	rev16	r2, r2
 800b1b0:	fa93 fb93 	rev16.w	fp, r3
 800b1b4:	b2e5      	uxtb	r5, r4
 800b1b6:	f3c4 2307 	ubfx	r3, r4, #8, #8
 800b1ba:	f3c4 4107 	ubfx	r1, r4, #16, #8
 800b1be:	0e24      	lsrs	r4, r4, #24
 800b1c0:	f856 8025 	ldr.w	r8, [r6, r5, lsl #2]
 800b1c4:	b2d5      	uxtb	r5, r2
 800b1c6:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 800b1ca:	44c6      	add	lr, r8
 800b1cc:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 800b1d0:	f856 4024 	ldr.w	r4, [r6, r4, lsl #2]
 800b1d4:	eb03 239e 	add.w	r3, r3, lr, lsr #10
 800b1d8:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
 800b1dc:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800b1e0:	eb01 2993 	add.w	r9, r1, r3, lsr #10
 800b1e4:	f3c2 2107 	ubfx	r1, r2, #8, #8
 800b1e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b1ec:	eb04 2499 	add.w	r4, r4, r9, lsr #10
 800b1f0:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 800b1f4:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 800b1f8:	f3cb 2e07 	ubfx	lr, fp, #8, #8
 800b1fc:	eb05 2894 	add.w	r8, r5, r4, lsr #10
 800b200:	f3c2 4507 	ubfx	r5, r2, #16, #8
 800b204:	0e12      	lsrs	r2, r2, #24
 800b206:	f856 e02e 	ldr.w	lr, [r6, lr, lsl #2]
 800b20a:	eb01 2198 	add.w	r1, r1, r8, lsr #10
 800b20e:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
 800b212:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
 800b216:	fa5f fb8b 	uxtb.w	fp, fp
 800b21a:	eb05 2591 	add.w	r5, r5, r1, lsr #10
 800b21e:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800b222:	f856 b02b 	ldr.w	fp, [r6, fp, lsl #2]
 800b226:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800b22a:	eb02 2295 	add.w	r2, r2, r5, lsr #10
 800b22e:	f3c9 0909 	ubfx	r9, r9, #0, #10
 800b232:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800b236:	ea41 4808 	orr.w	r8, r1, r8, lsl #16
 800b23a:	eb0b 2b92 	add.w	fp, fp, r2, lsr #10
 800b23e:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800b242:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800b246:	eb0e 2e9b 	add.w	lr, lr, fp, lsr #10
 800b24a:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 800b24e:	ea44 4409 	orr.w	r4, r4, r9, lsl #16
 800b252:	f3ce 0109 	ubfx	r1, lr, #0, #10
 800b256:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
 800b25a:	ea4f 2e9e 	mov.w	lr, lr, lsr #10
 800b25e:	ea41 4b0b 	orr.w	fp, r1, fp, lsl #16
 800b262:	4934      	ldr	r1, [pc, #208]	; (800b334 <D80_1CH_HTONS_VOL_HP+0x1cc>)
 800b264:	fb23 cc01 	smlad	ip, r3, r1, ip
 800b268:	4933      	ldr	r1, [pc, #204]	; (800b338 <D80_1CH_HTONS_VOL_HP+0x1d0>)
 800b26a:	fb24 cc01 	smlad	ip, r4, r1, ip
 800b26e:	4933      	ldr	r1, [pc, #204]	; (800b33c <D80_1CH_HTONS_VOL_HP+0x1d4>)
 800b270:	fb28 cc01 	smlad	ip, r8, r1, ip
 800b274:	4932      	ldr	r1, [pc, #200]	; (800b340 <D80_1CH_HTONS_VOL_HP+0x1d8>)
 800b276:	fb22 cc01 	smlad	ip, r2, r1, ip
 800b27a:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800b27e:	fb2b c901 	smlad	r9, fp, r1, ip
 800b282:	4930      	ldr	r1, [pc, #192]	; (800b344 <D80_1CH_HTONS_VOL_HP+0x1dc>)
 800b284:	fb23 7701 	smlad	r7, r3, r1, r7
 800b288:	492f      	ldr	r1, [pc, #188]	; (800b348 <D80_1CH_HTONS_VOL_HP+0x1e0>)
 800b28a:	fb24 7701 	smlad	r7, r4, r1, r7
 800b28e:	f04f 1c4b 	mov.w	ip, #4915275	; 0x4b004b
 800b292:	fb28 7c0c 	smlad	ip, r8, ip, r7
 800b296:	492d      	ldr	r1, [pc, #180]	; (800b34c <D80_1CH_HTONS_VOL_HP+0x1e4>)
 800b298:	fb22 cc01 	smlad	ip, r2, r1, ip
 800b29c:	492c      	ldr	r1, [pc, #176]	; (800b350 <D80_1CH_HTONS_VOL_HP+0x1e8>)
 800b29e:	fb2b cc01 	smlad	ip, fp, r1, ip
 800b2a2:	2101      	movs	r1, #1
 800b2a4:	fb23 f301 	smuad	r3, r3, r1
 800b2a8:	492a      	ldr	r1, [pc, #168]	; (800b354 <D80_1CH_HTONS_VOL_HP+0x1ec>)
 800b2aa:	fb24 3401 	smlad	r4, r4, r1, r3
 800b2ae:	492a      	ldr	r1, [pc, #168]	; (800b358 <D80_1CH_HTONS_VOL_HP+0x1f0>)
 800b2b0:	fb28 4101 	smlad	r1, r8, r1, r4
 800b2b4:	4f29      	ldr	r7, [pc, #164]	; (800b35c <D80_1CH_HTONS_VOL_HP+0x1f4>)
 800b2b6:	fb22 1207 	smlad	r2, r2, r7, r1
 800b2ba:	4f29      	ldr	r7, [pc, #164]	; (800b360 <D80_1CH_HTONS_VOL_HP+0x1f8>)
 800b2bc:	fb2b 2707 	smlad	r7, fp, r7, r2
 800b2c0:	f5a9 317a 	sub.w	r1, r9, #256000	; 0x3e800
 800b2c4:	9b01      	ldr	r3, [sp, #4]
 800b2c6:	9c04      	ldr	r4, [sp, #16]
 800b2c8:	440b      	add	r3, r1
 800b2ca:	eba3 020a 	sub.w	r2, r3, sl
 800b2ce:	468a      	mov	sl, r1
 800b2d0:	ea4f 79e2 	mov.w	r9, r2, asr #31
 800b2d4:	fba2 2304 	umull	r2, r3, r2, r4
 800b2d8:	fb04 3309 	mla	r3, r4, r9, r3
 800b2dc:	f112 4400 	adds.w	r4, r2, #2147483648	; 0x80000000
 800b2e0:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800b2e4:	f143 0500 	adc.w	r5, r3, #0
 800b2e8:	006b      	lsls	r3, r5, #1
 800b2ea:	02aa      	lsls	r2, r5, #10
 800b2ec:	2500      	movs	r5, #0
 800b2ee:	9301      	str	r3, [sp, #4]
 800b2f0:	9b03      	ldr	r3, [sp, #12]
 800b2f2:	fbc3 4502 	smlal	r4, r5, r3, r2
 800b2f6:	9a02      	ldr	r2, [sp, #8]
 800b2f8:	10ab      	asrs	r3, r5, #2
 800b2fa:	f303 030f 	ssat	r3, #16, r3
 800b2fe:	f822 3f02 	strh.w	r3, [r2, #2]!
 800b302:	9b05      	ldr	r3, [sp, #20]
 800b304:	9202      	str	r2, [sp, #8]
 800b306:	4298      	cmp	r0, r3
 800b308:	f47f af4c 	bne.w	800b1a4 <D80_1CH_HTONS_VOL_HP+0x3c>
 800b30c:	4673      	mov	r3, lr
 800b30e:	9a07      	ldr	r2, [sp, #28]
 800b310:	61d3      	str	r3, [r2, #28]
 800b312:	2000      	movs	r0, #0
 800b314:	9b01      	ldr	r3, [sp, #4]
 800b316:	6097      	str	r7, [r2, #8]
 800b318:	f8c2 c00c 	str.w	ip, [r2, #12]
 800b31c:	e9c2 3104 	strd	r3, r1, [r2, #16]
 800b320:	9b06      	ldr	r3, [sp, #24]
 800b322:	6193      	str	r3, [r2, #24]
 800b324:	b009      	add	sp, #36	; 0x24
 800b326:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b32a:	4629      	mov	r1, r5
 800b32c:	e7f0      	b.n	800b310 <D80_1CH_HTONS_VOL_HP+0x1a8>
 800b32e:	bf00      	nop
 800b330:	24000000 	.word	0x24000000
 800b334:	002d0024 	.word	0x002d0024
 800b338:	001c0015 	.word	0x001c0015
 800b33c:	000f000a 	.word	0x000f000a
 800b340:	00060003 	.word	0x00060003
 800b344:	0037003f 	.word	0x0037003f
 800b348:	00450049 	.word	0x00450049
 800b34c:	00490045 	.word	0x00490045
 800b350:	003f0037 	.word	0x003f0037
 800b354:	00030006 	.word	0x00030006
 800b358:	000a000f 	.word	0x000a000f
 800b35c:	0015001c 	.word	0x0015001c
 800b360:	0024002d 	.word	0x0024002d

0800b364 <D128_1CH_HTONS_VOL_HP>:
 800b364:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b368:	6914      	ldr	r4, [r2, #16]
 800b36a:	b08d      	sub	sp, #52	; 0x34
 800b36c:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 800b36e:	9404      	str	r4, [sp, #16]
 800b370:	6954      	ldr	r4, [r2, #20]
 800b372:	920b      	str	r2, [sp, #44]	; 0x2c
 800b374:	9405      	str	r4, [sp, #20]
 800b376:	6994      	ldr	r4, [r2, #24]
 800b378:	f8d2 c01c 	ldr.w	ip, [r2, #28]
 800b37c:	940a      	str	r4, [sp, #40]	; 0x28
 800b37e:	6894      	ldr	r4, [r2, #8]
 800b380:	9403      	str	r4, [sp, #12]
 800b382:	68d4      	ldr	r4, [r2, #12]
 800b384:	9402      	str	r4, [sp, #8]
 800b386:	6b14      	ldr	r4, [r2, #48]	; 0x30
 800b388:	6a12      	ldr	r2, [r2, #32]
 800b38a:	9407      	str	r4, [sp, #28]
 800b38c:	9208      	str	r2, [sp, #32]
 800b38e:	2b00      	cmp	r3, #0
 800b390:	f000 812e 	beq.w	800b5f0 <D128_1CH_HTONS_VOL_HP+0x28c>
 800b394:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 800b398:	f100 0b10 	add.w	fp, r0, #16
 800b39c:	f8df 9290 	ldr.w	r9, [pc, #656]	; 800b630 <D128_1CH_HTONS_VOL_HP+0x2cc>
 800b3a0:	9106      	str	r1, [sp, #24]
 800b3a2:	9309      	str	r3, [sp, #36]	; 0x24
 800b3a4:	e95b 0204 	ldrd	r0, r2, [fp, #-16]
 800b3a8:	e95b 3602 	ldrd	r3, r6, [fp, #-8]
 800b3ac:	ba40      	rev16	r0, r0
 800b3ae:	ba52      	rev16	r2, r2
 800b3b0:	ba5b      	rev16	r3, r3
 800b3b2:	ba76      	rev16	r6, r6
 800b3b4:	b2c5      	uxtb	r5, r0
 800b3b6:	f3c0 2407 	ubfx	r4, r0, #8, #8
 800b3ba:	f3c0 4107 	ubfx	r1, r0, #16, #8
 800b3be:	0e00      	lsrs	r0, r0, #24
 800b3c0:	f859 7025 	ldr.w	r7, [r9, r5, lsl #2]
 800b3c4:	b2d5      	uxtb	r5, r2
 800b3c6:	f859 e024 	ldr.w	lr, [r9, r4, lsl #2]
 800b3ca:	f3c2 2407 	ubfx	r4, r2, #8, #8
 800b3ce:	44bc      	add	ip, r7
 800b3d0:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800b3d4:	f859 7020 	ldr.w	r7, [r9, r0, lsl #2]
 800b3d8:	f3c2 4007 	ubfx	r0, r2, #16, #8
 800b3dc:	eb0e 2e9c 	add.w	lr, lr, ip, lsr #10
 800b3e0:	f859 a025 	ldr.w	sl, [r9, r5, lsl #2]
 800b3e4:	f859 5024 	ldr.w	r5, [r9, r4, lsl #2]
 800b3e8:	0e12      	lsrs	r2, r2, #24
 800b3ea:	eb01 219e 	add.w	r1, r1, lr, lsr #10
 800b3ee:	f859 0020 	ldr.w	r0, [r9, r0, lsl #2]
 800b3f2:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 800b3f6:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800b3fa:	eb07 2791 	add.w	r7, r7, r1, lsr #10
 800b3fe:	f859 4022 	ldr.w	r4, [r9, r2, lsl #2]
 800b402:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800b406:	b2da      	uxtb	r2, r3
 800b408:	eb0a 2a97 	add.w	sl, sl, r7, lsr #10
 800b40c:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800b410:	ea4e 4e0c 	orr.w	lr, lr, ip, lsl #16
 800b414:	f859 2022 	ldr.w	r2, [r9, r2, lsl #2]
 800b418:	eb05 259a 	add.w	r5, r5, sl, lsr #10
 800b41c:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 800b420:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800b424:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800b428:	eb00 2c95 	add.w	ip, r0, r5, lsr #10
 800b42c:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800b430:	f859 8021 	ldr.w	r8, [r9, r1, lsl #2]
 800b434:	f3c3 4107 	ubfx	r1, r3, #16, #8
 800b438:	eb04 249c 	add.w	r4, r4, ip, lsr #10
 800b43c:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 800b440:	f859 0021 	ldr.w	r0, [r9, r1, lsl #2]
 800b444:	0e1b      	lsrs	r3, r3, #24
 800b446:	eb02 2294 	add.w	r2, r2, r4, lsr #10
 800b44a:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800b44e:	f859 1023 	ldr.w	r1, [r9, r3, lsl #2]
 800b452:	ea45 450a 	orr.w	r5, r5, sl, lsl #16
 800b456:	eb08 2892 	add.w	r8, r8, r2, lsr #10
 800b45a:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800b45e:	b2f3      	uxtb	r3, r6
 800b460:	eb00 2a98 	add.w	sl, r0, r8, lsr #10
 800b464:	f3c8 0009 	ubfx	r0, r8, #0, #10
 800b468:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800b46c:	ea44 440c 	orr.w	r4, r4, ip, lsl #16
 800b470:	eb01 219a 	add.w	r1, r1, sl, lsr #10
 800b474:	f3c6 2c07 	ubfx	ip, r6, #8, #8
 800b478:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 800b47c:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 800b480:	eb03 2891 	add.w	r8, r3, r1, lsr #10
 800b484:	f859 202c 	ldr.w	r2, [r9, ip, lsl #2]
 800b488:	f3c6 4c07 	ubfx	ip, r6, #16, #8
 800b48c:	0e36      	lsrs	r6, r6, #24
 800b48e:	eb02 2298 	add.w	r2, r2, r8, lsr #10
 800b492:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800b496:	f859 302c 	ldr.w	r3, [r9, ip, lsl #2]
 800b49a:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800b49e:	f859 c026 	ldr.w	ip, [r9, r6, lsl #2]
 800b4a2:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800b4a6:	eb03 2692 	add.w	r6, r3, r2, lsr #10
 800b4aa:	f3c2 0309 	ubfx	r3, r2, #0, #10
 800b4ae:	9101      	str	r1, [sp, #4]
 800b4b0:	ea43 4208 	orr.w	r2, r3, r8, lsl #16
 800b4b4:	9b02      	ldr	r3, [sp, #8]
 800b4b6:	eb0c 2c96 	add.w	ip, ip, r6, lsr #10
 800b4ba:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800b4be:	4611      	mov	r1, r2
 800b4c0:	f3cc 0209 	ubfx	r2, ip, #0, #10
 800b4c4:	ea4f 2c9c 	mov.w	ip, ip, lsr #10
 800b4c8:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
 800b4cc:	4a49      	ldr	r2, [pc, #292]	; (800b5f4 <D128_1CH_HTONS_VOL_HP+0x290>)
 800b4ce:	fb2e 3202 	smlad	r2, lr, r2, r3
 800b4d2:	4b49      	ldr	r3, [pc, #292]	; (800b5f8 <D128_1CH_HTONS_VOL_HP+0x294>)
 800b4d4:	fb27 2203 	smlad	r2, r7, r3, r2
 800b4d8:	4b48      	ldr	r3, [pc, #288]	; (800b5fc <D128_1CH_HTONS_VOL_HP+0x298>)
 800b4da:	fb25 2203 	smlad	r2, r5, r3, r2
 800b4de:	4b48      	ldr	r3, [pc, #288]	; (800b600 <D128_1CH_HTONS_VOL_HP+0x29c>)
 800b4e0:	fb24 2203 	smlad	r2, r4, r3, r2
 800b4e4:	4b47      	ldr	r3, [pc, #284]	; (800b604 <D128_1CH_HTONS_VOL_HP+0x2a0>)
 800b4e6:	fb20 2803 	smlad	r8, r0, r3, r2
 800b4ea:	4b47      	ldr	r3, [pc, #284]	; (800b608 <D128_1CH_HTONS_VOL_HP+0x2a4>)
 800b4ec:	9a01      	ldr	r2, [sp, #4]
 800b4ee:	fb22 8203 	smlad	r2, r2, r3, r8
 800b4f2:	4b46      	ldr	r3, [pc, #280]	; (800b60c <D128_1CH_HTONS_VOL_HP+0x2a8>)
 800b4f4:	9102      	str	r1, [sp, #8]
 800b4f6:	fb21 2203 	smlad	r2, r1, r3, r2
 800b4fa:	f44f 3880 	mov.w	r8, #65536	; 0x10000
 800b4fe:	fb26 2308 	smlad	r3, r6, r8, r2
 800b502:	4619      	mov	r1, r3
 800b504:	9a03      	ldr	r2, [sp, #12]
 800b506:	4b42      	ldr	r3, [pc, #264]	; (800b610 <D128_1CH_HTONS_VOL_HP+0x2ac>)
 800b508:	fb2e 2803 	smlad	r8, lr, r3, r2
 800b50c:	4b41      	ldr	r3, [pc, #260]	; (800b614 <D128_1CH_HTONS_VOL_HP+0x2b0>)
 800b50e:	fb27 8a03 	smlad	sl, r7, r3, r8
 800b512:	f8df 8120 	ldr.w	r8, [pc, #288]	; 800b634 <D128_1CH_HTONS_VOL_HP+0x2d0>
 800b516:	fb25 a808 	smlad	r8, r5, r8, sl
 800b51a:	f8df a11c 	ldr.w	sl, [pc, #284]	; 800b638 <D128_1CH_HTONS_VOL_HP+0x2d4>
 800b51e:	fb24 880a 	smlad	r8, r4, sl, r8
 800b522:	f8df a118 	ldr.w	sl, [pc, #280]	; 800b63c <D128_1CH_HTONS_VOL_HP+0x2d8>
 800b526:	fb20 8a0a 	smlad	sl, r0, sl, r8
 800b52a:	f8df 8114 	ldr.w	r8, [pc, #276]	; 800b640 <D128_1CH_HTONS_VOL_HP+0x2dc>
 800b52e:	9b01      	ldr	r3, [sp, #4]
 800b530:	fb23 aa08 	smlad	sl, r3, r8, sl
 800b534:	f8df 810c 	ldr.w	r8, [pc, #268]	; 800b644 <D128_1CH_HTONS_VOL_HP+0x2e0>
 800b538:	9a02      	ldr	r2, [sp, #8]
 800b53a:	fb22 a808 	smlad	r8, r2, r8, sl
 800b53e:	f8df a108 	ldr.w	sl, [pc, #264]	; 800b648 <D128_1CH_HTONS_VOL_HP+0x2e4>
 800b542:	fb26 830a 	smlad	r3, r6, sl, r8
 800b546:	f04f 0801 	mov.w	r8, #1
 800b54a:	9302      	str	r3, [sp, #8]
 800b54c:	fb2e fe08 	smuad	lr, lr, r8
 800b550:	f8df 80f8 	ldr.w	r8, [pc, #248]	; 800b64c <D128_1CH_HTONS_VOL_HP+0x2e8>
 800b554:	fb27 ee08 	smlad	lr, r7, r8, lr
 800b558:	4f2f      	ldr	r7, [pc, #188]	; (800b618 <D128_1CH_HTONS_VOL_HP+0x2b4>)
 800b55a:	fb25 ee07 	smlad	lr, r5, r7, lr
 800b55e:	4f2f      	ldr	r7, [pc, #188]	; (800b61c <D128_1CH_HTONS_VOL_HP+0x2b8>)
 800b560:	fb24 ee07 	smlad	lr, r4, r7, lr
 800b564:	4f2e      	ldr	r7, [pc, #184]	; (800b620 <D128_1CH_HTONS_VOL_HP+0x2bc>)
 800b566:	fb20 ee07 	smlad	lr, r0, r7, lr
 800b56a:	4f2e      	ldr	r7, [pc, #184]	; (800b624 <D128_1CH_HTONS_VOL_HP+0x2c0>)
 800b56c:	9b01      	ldr	r3, [sp, #4]
 800b56e:	fb23 ee07 	smlad	lr, r3, r7, lr
 800b572:	4f2d      	ldr	r7, [pc, #180]	; (800b628 <D128_1CH_HTONS_VOL_HP+0x2c4>)
 800b574:	fb22 e707 	smlad	r7, r2, r7, lr
 800b578:	4b2c      	ldr	r3, [pc, #176]	; (800b62c <D128_1CH_HTONS_VOL_HP+0x2c8>)
 800b57a:	fb26 7303 	smlad	r3, r6, r3, r7
 800b57e:	f5a1 1680 	sub.w	r6, r1, #1048576	; 0x100000
 800b582:	9303      	str	r3, [sp, #12]
 800b584:	9b04      	ldr	r3, [sp, #16]
 800b586:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800b58a:	9f08      	ldr	r7, [sp, #32]
 800b58c:	2100      	movs	r1, #0
 800b58e:	4433      	add	r3, r6
 800b590:	f10b 0b10 	add.w	fp, fp, #16
 800b594:	461a      	mov	r2, r3
 800b596:	9b05      	ldr	r3, [sp, #20]
 800b598:	9605      	str	r6, [sp, #20]
 800b59a:	1ad2      	subs	r2, r2, r3
 800b59c:	17d5      	asrs	r5, r2, #31
 800b59e:	fba2 2307 	umull	r2, r3, r2, r7
 800b5a2:	1814      	adds	r4, r2, r0
 800b5a4:	fb07 3305 	mla	r3, r7, r5, r3
 800b5a8:	eb43 0501 	adc.w	r5, r3, r1
 800b5ac:	006b      	lsls	r3, r5, #1
 800b5ae:	022a      	lsls	r2, r5, #8
 800b5b0:	9304      	str	r3, [sp, #16]
 800b5b2:	9b07      	ldr	r3, [sp, #28]
 800b5b4:	fbc3 0102 	smlal	r0, r1, r3, r2
 800b5b8:	9a06      	ldr	r2, [sp, #24]
 800b5ba:	108b      	asrs	r3, r1, #2
 800b5bc:	f303 030f 	ssat	r3, #16, r3
 800b5c0:	f822 3b02 	strh.w	r3, [r2], #2
 800b5c4:	4613      	mov	r3, r2
 800b5c6:	9206      	str	r2, [sp, #24]
 800b5c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b5ca:	4293      	cmp	r3, r2
 800b5cc:	f47f aeea 	bne.w	800b3a4 <D128_1CH_HTONS_VOL_HP+0x40>
 800b5d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b5d2:	2000      	movs	r0, #0
 800b5d4:	9903      	ldr	r1, [sp, #12]
 800b5d6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b5d8:	6099      	str	r1, [r3, #8]
 800b5da:	9902      	ldr	r1, [sp, #8]
 800b5dc:	f8c3 c01c 	str.w	ip, [r3, #28]
 800b5e0:	60d9      	str	r1, [r3, #12]
 800b5e2:	9904      	ldr	r1, [sp, #16]
 800b5e4:	619a      	str	r2, [r3, #24]
 800b5e6:	e9c3 1604 	strd	r1, r6, [r3, #16]
 800b5ea:	b00d      	add	sp, #52	; 0x34
 800b5ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b5f0:	9e05      	ldr	r6, [sp, #20]
 800b5f2:	e7ed      	b.n	800b5d0 <D128_1CH_HTONS_VOL_HP+0x26c>
 800b5f4:	00780069 	.word	0x00780069
 800b5f8:	005b004e 	.word	0x005b004e
 800b5fc:	00420037 	.word	0x00420037
 800b600:	002d0024 	.word	0x002d0024
 800b604:	001c0015 	.word	0x001c0015
 800b608:	000f000a 	.word	0x000f000a
 800b60c:	00060003 	.word	0x00060003
 800b610:	00880096 	.word	0x00880096
 800b614:	00a200ac 	.word	0x00a200ac
 800b618:	000a000f 	.word	0x000a000f
 800b61c:	0015001c 	.word	0x0015001c
 800b620:	0024002d 	.word	0x0024002d
 800b624:	00370042 	.word	0x00370042
 800b628:	004e005b 	.word	0x004e005b
 800b62c:	00690078 	.word	0x00690078
 800b630:	24000000 	.word	0x24000000
 800b634:	00b400ba 	.word	0x00b400ba
 800b638:	00be00c0 	.word	0x00be00c0
 800b63c:	00c000be 	.word	0x00c000be
 800b640:	00ba00b4 	.word	0x00ba00b4
 800b644:	00ac00a2 	.word	0x00ac00a2
 800b648:	00960088 	.word	0x00960088
 800b64c:	00030006 	.word	0x00030006

0800b650 <PDM_Filter_Init>:
 800b650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b652:	2240      	movs	r2, #64	; 0x40
 800b654:	2100      	movs	r1, #0
 800b656:	4604      	mov	r4, r0
 800b658:	300c      	adds	r0, #12
 800b65a:	f000 fa07 	bl	800ba6c <memset>
 800b65e:	4a56      	ldr	r2, [pc, #344]	; (800b7b8 <PDM_Filter_Init+0x168>)
 800b660:	4856      	ldr	r0, [pc, #344]	; (800b7bc <PDM_Filter_Init+0x16c>)
 800b662:	f64f 71f0 	movw	r1, #65520	; 0xfff0
 800b666:	6813      	ldr	r3, [r2, #0]
 800b668:	f24c 2540 	movw	r5, #49728	; 0xc240
 800b66c:	f023 0301 	bic.w	r3, r3, #1
 800b670:	6013      	str	r3, [r2, #0]
 800b672:	6803      	ldr	r3, [r0, #0]
 800b674:	400b      	ands	r3, r1
 800b676:	42ab      	cmp	r3, r5
 800b678:	d040      	beq.n	800b6fc <PDM_Filter_Init+0xac>
 800b67a:	6803      	ldr	r3, [r0, #0]
 800b67c:	f24c 2270 	movw	r2, #49776	; 0xc270
 800b680:	4019      	ands	r1, r3
 800b682:	4291      	cmp	r1, r2
 800b684:	d03a      	beq.n	800b6fc <PDM_Filter_Init+0xac>
 800b686:	4b4e      	ldr	r3, [pc, #312]	; (800b7c0 <PDM_Filter_Init+0x170>)
 800b688:	2101      	movs	r1, #1
 800b68a:	461a      	mov	r2, r3
 800b68c:	6019      	str	r1, [r3, #0]
 800b68e:	6813      	ldr	r3, [r2, #0]
 800b690:	2b00      	cmp	r3, #0
 800b692:	d1fc      	bne.n	800b68e <PDM_Filter_Init+0x3e>
 800b694:	4b4b      	ldr	r3, [pc, #300]	; (800b7c4 <PDM_Filter_Init+0x174>)
 800b696:	494c      	ldr	r1, [pc, #304]	; (800b7c8 <PDM_Filter_Init+0x178>)
 800b698:	4a4c      	ldr	r2, [pc, #304]	; (800b7cc <PDM_Filter_Init+0x17c>)
 800b69a:	6019      	str	r1, [r3, #0]
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	8820      	ldrh	r0, [r4, #0]
 800b6a0:	4293      	cmp	r3, r2
 800b6a2:	8961      	ldrh	r1, [r4, #10]
 800b6a4:	f04f 0300 	mov.w	r3, #0
 800b6a8:	8922      	ldrh	r2, [r4, #8]
 800b6aa:	bf14      	ite	ne
 800b6ac:	2500      	movne	r5, #0
 800b6ae:	4d47      	ldreq	r5, [pc, #284]	; (800b7cc <PDM_Filter_Init+0x17c>)
 800b6b0:	2801      	cmp	r0, #1
 800b6b2:	61a3      	str	r3, [r4, #24]
 800b6b4:	6465      	str	r5, [r4, #68]	; 0x44
 800b6b6:	60e3      	str	r3, [r4, #12]
 800b6b8:	6263      	str	r3, [r4, #36]	; 0x24
 800b6ba:	6423      	str	r3, [r4, #64]	; 0x40
 800b6bc:	86a1      	strh	r1, [r4, #52]	; 0x34
 800b6be:	86e2      	strh	r2, [r4, #54]	; 0x36
 800b6c0:	e9c4 3304 	strd	r3, r3, [r4, #16]
 800b6c4:	e9c4 3307 	strd	r3, r3, [r4, #28]
 800b6c8:	d936      	bls.n	800b738 <PDM_Filter_Init+0xe8>
 800b6ca:	2003      	movs	r0, #3
 800b6cc:	2302      	movs	r3, #2
 800b6ce:	8862      	ldrh	r2, [r4, #2]
 800b6d0:	2a01      	cmp	r2, #1
 800b6d2:	d92e      	bls.n	800b732 <PDM_Filter_Init+0xe2>
 800b6d4:	2140      	movs	r1, #64	; 0x40
 800b6d6:	2300      	movs	r3, #0
 800b6d8:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800b6da:	f1b2 1f01 	cmp.w	r2, #65537	; 0x10001
 800b6de:	d101      	bne.n	800b6e4 <PDM_Filter_Init+0x94>
 800b6e0:	460b      	mov	r3, r1
 800b6e2:	6421      	str	r1, [r4, #64]	; 0x40
 800b6e4:	6862      	ldr	r2, [r4, #4]
 800b6e6:	b11a      	cbz	r2, 800b6f0 <PDM_Filter_Init+0xa0>
 800b6e8:	f043 0310 	orr.w	r3, r3, #16
 800b6ec:	62e2      	str	r2, [r4, #44]	; 0x2c
 800b6ee:	6423      	str	r3, [r4, #64]	; 0x40
 800b6f0:	2200      	movs	r2, #0
 800b6f2:	8722      	strh	r2, [r4, #56]	; 0x38
 800b6f4:	b908      	cbnz	r0, 800b6fa <PDM_Filter_Init+0xaa>
 800b6f6:	3380      	adds	r3, #128	; 0x80
 800b6f8:	6423      	str	r3, [r4, #64]	; 0x40
 800b6fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b6fc:	4b34      	ldr	r3, [pc, #208]	; (800b7d0 <PDM_Filter_Init+0x180>)
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	2b00      	cmp	r3, #0
 800b702:	d1c0      	bne.n	800b686 <PDM_Filter_Init+0x36>
 800b704:	4a33      	ldr	r2, [pc, #204]	; (800b7d4 <PDM_Filter_Init+0x184>)
 800b706:	6813      	ldr	r3, [r2, #0]
 800b708:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b70c:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800b710:	d006      	beq.n	800b720 <PDM_Filter_Init+0xd0>
 800b712:	6813      	ldr	r3, [r2, #0]
 800b714:	f240 4283 	movw	r2, #1155	; 0x483
 800b718:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b71c:	4293      	cmp	r3, r2
 800b71e:	d1b2      	bne.n	800b686 <PDM_Filter_Init+0x36>
 800b720:	4b2d      	ldr	r3, [pc, #180]	; (800b7d8 <PDM_Filter_Init+0x188>)
 800b722:	2101      	movs	r1, #1
 800b724:	461a      	mov	r2, r3
 800b726:	6019      	str	r1, [r3, #0]
 800b728:	6813      	ldr	r3, [r2, #0]
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d1fc      	bne.n	800b728 <PDM_Filter_Init+0xd8>
 800b72e:	4b2b      	ldr	r3, [pc, #172]	; (800b7dc <PDM_Filter_Init+0x18c>)
 800b730:	e7b1      	b.n	800b696 <PDM_Filter_Init+0x46>
 800b732:	d03a      	beq.n	800b7aa <PDM_Filter_Init+0x15a>
 800b734:	4618      	mov	r0, r3
 800b736:	e7cd      	b.n	800b6d4 <PDM_Filter_Init+0x84>
 800b738:	4d29      	ldr	r5, [pc, #164]	; (800b7e0 <PDM_Filter_Init+0x190>)
 800b73a:	782a      	ldrb	r2, [r5, #0]
 800b73c:	d01b      	beq.n	800b776 <PDM_Filter_Init+0x126>
 800b73e:	2a01      	cmp	r2, #1
 800b740:	d001      	beq.n	800b746 <PDM_Filter_Init+0xf6>
 800b742:	2001      	movs	r0, #1
 800b744:	e7c3      	b.n	800b6ce <PDM_Filter_Init+0x7e>
 800b746:	4927      	ldr	r1, [pc, #156]	; (800b7e4 <PDM_Filter_Init+0x194>)
 800b748:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 800b7ec <PDM_Filter_Init+0x19c>
 800b74c:	f501 6780 	add.w	r7, r1, #1024	; 0x400
 800b750:	4e25      	ldr	r6, [pc, #148]	; (800b7e8 <PDM_Filter_Init+0x198>)
 800b752:	f851 2f04 	ldr.w	r2, [r1, #4]!
 800b756:	ea0c 5302 	and.w	r3, ip, r2, lsl #20
 800b75a:	ea02 0006 	and.w	r0, r2, r6
 800b75e:	f3c2 5209 	ubfx	r2, r2, #20, #10
 800b762:	428f      	cmp	r7, r1
 800b764:	ea43 0300 	orr.w	r3, r3, r0
 800b768:	4413      	add	r3, r2
 800b76a:	600b      	str	r3, [r1, #0]
 800b76c:	d1f1      	bne.n	800b752 <PDM_Filter_Init+0x102>
 800b76e:	2300      	movs	r3, #0
 800b770:	2001      	movs	r0, #1
 800b772:	702b      	strb	r3, [r5, #0]
 800b774:	e7ab      	b.n	800b6ce <PDM_Filter_Init+0x7e>
 800b776:	2a00      	cmp	r2, #0
 800b778:	d1a9      	bne.n	800b6ce <PDM_Filter_Init+0x7e>
 800b77a:	491a      	ldr	r1, [pc, #104]	; (800b7e4 <PDM_Filter_Init+0x194>)
 800b77c:	f8df c06c 	ldr.w	ip, [pc, #108]	; 800b7ec <PDM_Filter_Init+0x19c>
 800b780:	f501 6780 	add.w	r7, r1, #1024	; 0x400
 800b784:	4e18      	ldr	r6, [pc, #96]	; (800b7e8 <PDM_Filter_Init+0x198>)
 800b786:	f851 2f04 	ldr.w	r2, [r1, #4]!
 800b78a:	ea0c 5302 	and.w	r3, ip, r2, lsl #20
 800b78e:	ea02 0006 	and.w	r0, r2, r6
 800b792:	f3c2 5209 	ubfx	r2, r2, #20, #10
 800b796:	428f      	cmp	r7, r1
 800b798:	ea43 0300 	orr.w	r3, r3, r0
 800b79c:	4413      	add	r3, r2
 800b79e:	600b      	str	r3, [r1, #0]
 800b7a0:	d1f1      	bne.n	800b786 <PDM_Filter_Init+0x136>
 800b7a2:	2001      	movs	r0, #1
 800b7a4:	2300      	movs	r3, #0
 800b7a6:	7028      	strb	r0, [r5, #0]
 800b7a8:	e791      	b.n	800b6ce <PDM_Filter_Init+0x7e>
 800b7aa:	2220      	movs	r2, #32
 800b7ac:	4618      	mov	r0, r3
 800b7ae:	2160      	movs	r1, #96	; 0x60
 800b7b0:	6422      	str	r2, [r4, #64]	; 0x40
 800b7b2:	4613      	mov	r3, r2
 800b7b4:	e790      	b.n	800b6d8 <PDM_Filter_Init+0x88>
 800b7b6:	bf00      	nop
 800b7b8:	e0002000 	.word	0xe0002000
 800b7bc:	e000ed00 	.word	0xe000ed00
 800b7c0:	40023008 	.word	0x40023008
 800b7c4:	40023000 	.word	0x40023000
 800b7c8:	f407a5c2 	.word	0xf407a5c2
 800b7cc:	b5e8b5cd 	.word	0xb5e8b5cd
 800b7d0:	e0042000 	.word	0xe0042000
 800b7d4:	5c001000 	.word	0x5c001000
 800b7d8:	58024c08 	.word	0x58024c08
 800b7dc:	58024c00 	.word	0x58024c00
 800b7e0:	24000494 	.word	0x24000494
 800b7e4:	23fffffc 	.word	0x23fffffc
 800b7e8:	000ffc00 	.word	0x000ffc00
 800b7ec:	3ff00000 	.word	0x3ff00000

0800b7f0 <PDM_Filter_setConfig>:
 800b7f0:	4b67      	ldr	r3, [pc, #412]	; (800b990 <PDM_Filter_setConfig+0x1a0>)
 800b7f2:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b7f4:	429a      	cmp	r2, r3
 800b7f6:	d128      	bne.n	800b84a <PDM_Filter_setConfig+0x5a>
 800b7f8:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800b7fa:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b7fc:	880e      	ldrh	r6, [r1, #0]
 800b7fe:	460d      	mov	r5, r1
 800b800:	4604      	mov	r4, r0
 800b802:	f422 7180 	bic.w	r1, r2, #256	; 0x100
 800b806:	1e73      	subs	r3, r6, #1
 800b808:	f9b5 7004 	ldrsh.w	r7, [r5, #4]
 800b80c:	f9b0 0038 	ldrsh.w	r0, [r0, #56]	; 0x38
 800b810:	2b06      	cmp	r3, #6
 800b812:	ed2d 8b02 	vpush	{d8}
 800b816:	6421      	str	r1, [r4, #64]	; 0x40
 800b818:	b083      	sub	sp, #12
 800b81a:	d820      	bhi.n	800b85e <PDM_Filter_setConfig+0x6e>
 800b81c:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 800b81e:	42b3      	cmp	r3, r6
 800b820:	d03d      	beq.n	800b89e <PDM_Filter_setConfig+0xae>
 800b822:	4b5c      	ldr	r3, [pc, #368]	; (800b994 <PDM_Filter_setConfig+0x1a4>)
 800b824:	4013      	ands	r3, r2
 800b826:	4333      	orrs	r3, r6
 800b828:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800b82c:	6423      	str	r3, [r4, #64]	; 0x40
 800b82e:	f003 030f 	and.w	r3, r3, #15
 800b832:	2a70      	cmp	r2, #112	; 0x70
 800b834:	f103 33ff 	add.w	r3, r3, #4294967295
 800b838:	d009      	beq.n	800b84e <PDM_Filter_setConfig+0x5e>
 800b83a:	2b06      	cmp	r3, #6
 800b83c:	d824      	bhi.n	800b888 <PDM_Filter_setConfig+0x98>
 800b83e:	e8df f003 	tbb	[pc, r3]
 800b842:	878a      	.short	0x878a
 800b844:	7b7e8184 	.word	0x7b7e8184
 800b848:	78          	.byte	0x78
 800b849:	00          	.byte	0x00
 800b84a:	2004      	movs	r0, #4
 800b84c:	4770      	bx	lr
 800b84e:	2b06      	cmp	r3, #6
 800b850:	d81a      	bhi.n	800b888 <PDM_Filter_setConfig+0x98>
 800b852:	e8df f003 	tbb	[pc, r3]
 800b856:	8f92      	.short	0x8f92
 800b858:	8617898c 	.word	0x8617898c
 800b85c:	83          	.byte	0x83
 800b85d:	00          	.byte	0x00
 800b85e:	4287      	cmp	r7, r0
 800b860:	f000 808e 	beq.w	800b980 <PDM_Filter_setConfig+0x190>
 800b864:	f117 0f0c 	cmn.w	r7, #12
 800b868:	f04f 0008 	mov.w	r0, #8
 800b86c:	da11      	bge.n	800b892 <PDM_Filter_setConfig+0xa2>
 800b86e:	f64f 73f4 	movw	r3, #65524	; 0xfff4
 800b872:	3040      	adds	r0, #64	; 0x40
 800b874:	80ab      	strh	r3, [r5, #4]
 800b876:	886b      	ldrh	r3, [r5, #2]
 800b878:	8626      	strh	r6, [r4, #48]	; 0x30
 800b87a:	8663      	strh	r3, [r4, #50]	; 0x32
 800b87c:	b003      	add	sp, #12
 800b87e:	ecbd 8b02 	vpop	{d8}
 800b882:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b884:	4b44      	ldr	r3, [pc, #272]	; (800b998 <PDM_Filter_setConfig+0x1a8>)
 800b886:	64a3      	str	r3, [r4, #72]	; 0x48
 800b888:	f117 0f0c 	cmn.w	r7, #12
 800b88c:	f04f 0000 	mov.w	r0, #0
 800b890:	dbed      	blt.n	800b86e <PDM_Filter_setConfig+0x7e>
 800b892:	2f33      	cmp	r7, #51	; 0x33
 800b894:	dd10      	ble.n	800b8b8 <PDM_Filter_setConfig+0xc8>
 800b896:	2333      	movs	r3, #51	; 0x33
 800b898:	3040      	adds	r0, #64	; 0x40
 800b89a:	80ab      	strh	r3, [r5, #4]
 800b89c:	e7eb      	b.n	800b876 <PDM_Filter_setConfig+0x86>
 800b89e:	4287      	cmp	r7, r0
 800b8a0:	d1f2      	bne.n	800b888 <PDM_Filter_setConfig+0x98>
 800b8a2:	886b      	ldrh	r3, [r5, #2]
 800b8a4:	8663      	strh	r3, [r4, #50]	; 0x32
 800b8a6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b8a8:	2000      	movs	r0, #0
 800b8aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b8ae:	6423      	str	r3, [r4, #64]	; 0x40
 800b8b0:	b003      	add	sp, #12
 800b8b2:	ecbd 8b02 	vpop	{d8}
 800b8b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b8b8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b8ba:	f003 030f 	and.w	r3, r3, #15
 800b8be:	3b01      	subs	r3, #1
 800b8c0:	2b06      	cmp	r3, #6
 800b8c2:	d831      	bhi.n	800b928 <PDM_Filter_setConfig+0x138>
 800b8c4:	4a35      	ldr	r2, [pc, #212]	; (800b99c <PDM_Filter_setConfig+0x1ac>)
 800b8c6:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 800b8ca:	eddf 0a35 	vldr	s1, [pc, #212]	; 800b9a0 <PDM_Filter_setConfig+0x1b0>
 800b8ce:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b8d2:	9001      	str	r0, [sp, #4]
 800b8d4:	edd3 7a07 	vldr	s15, [r3, #28]
 800b8d8:	ed93 8a00 	vldr	s16, [r3]
 800b8dc:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800b8e0:	f000 f8e6 	bl	800bab0 <powf>
 800b8e4:	eef0 8a40 	vmov.f32	s17, s0
 800b8e8:	9801      	ldr	r0, [sp, #4]
 800b8ea:	ee07 7a90 	vmov	s15, r7
 800b8ee:	ee28 8a28 	vmul.f32	s16, s16, s17
 800b8f2:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 800b8f6:	9001      	str	r0, [sp, #4]
 800b8f8:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 800b8fc:	eddf 7a29 	vldr	s15, [pc, #164]	; 800b9a4 <PDM_Filter_setConfig+0x1b4>
 800b900:	ee60 0aa7 	vmul.f32	s1, s1, s15
 800b904:	f000 f8d4 	bl	800bab0 <powf>
 800b908:	ee28 8a00 	vmul.f32	s16, s16, s0
 800b90c:	886b      	ldrh	r3, [r5, #2]
 800b90e:	9801      	ldr	r0, [sp, #4]
 800b910:	feb8 8a48 	vrinta.f32	s16, s16
 800b914:	eebc 8ac8 	vcvt.u32.f32	s16, s16
 800b918:	8727      	strh	r7, [r4, #56]	; 0x38
 800b91a:	8663      	strh	r3, [r4, #50]	; 0x32
 800b91c:	8626      	strh	r6, [r4, #48]	; 0x30
 800b91e:	ed84 8a0f 	vstr	s16, [r4, #60]	; 0x3c
 800b922:	2800      	cmp	r0, #0
 800b924:	d0bf      	beq.n	800b8a6 <PDM_Filter_setConfig+0xb6>
 800b926:	e7a9      	b.n	800b87c <PDM_Filter_setConfig+0x8c>
 800b928:	eddf 8a1f 	vldr	s17, [pc, #124]	; 800b9a8 <PDM_Filter_setConfig+0x1b8>
 800b92c:	ed9f 8a1f 	vldr	s16, [pc, #124]	; 800b9ac <PDM_Filter_setConfig+0x1bc>
 800b930:	e7db      	b.n	800b8ea <PDM_Filter_setConfig+0xfa>
 800b932:	4b1f      	ldr	r3, [pc, #124]	; (800b9b0 <PDM_Filter_setConfig+0x1c0>)
 800b934:	64a3      	str	r3, [r4, #72]	; 0x48
 800b936:	e7a7      	b.n	800b888 <PDM_Filter_setConfig+0x98>
 800b938:	4b1e      	ldr	r3, [pc, #120]	; (800b9b4 <PDM_Filter_setConfig+0x1c4>)
 800b93a:	64a3      	str	r3, [r4, #72]	; 0x48
 800b93c:	e7a4      	b.n	800b888 <PDM_Filter_setConfig+0x98>
 800b93e:	4b1e      	ldr	r3, [pc, #120]	; (800b9b8 <PDM_Filter_setConfig+0x1c8>)
 800b940:	64a3      	str	r3, [r4, #72]	; 0x48
 800b942:	e7a1      	b.n	800b888 <PDM_Filter_setConfig+0x98>
 800b944:	4b1d      	ldr	r3, [pc, #116]	; (800b9bc <PDM_Filter_setConfig+0x1cc>)
 800b946:	64a3      	str	r3, [r4, #72]	; 0x48
 800b948:	e79e      	b.n	800b888 <PDM_Filter_setConfig+0x98>
 800b94a:	4b1d      	ldr	r3, [pc, #116]	; (800b9c0 <PDM_Filter_setConfig+0x1d0>)
 800b94c:	64a3      	str	r3, [r4, #72]	; 0x48
 800b94e:	e79b      	b.n	800b888 <PDM_Filter_setConfig+0x98>
 800b950:	4b1c      	ldr	r3, [pc, #112]	; (800b9c4 <PDM_Filter_setConfig+0x1d4>)
 800b952:	64a3      	str	r3, [r4, #72]	; 0x48
 800b954:	e798      	b.n	800b888 <PDM_Filter_setConfig+0x98>
 800b956:	4b1c      	ldr	r3, [pc, #112]	; (800b9c8 <PDM_Filter_setConfig+0x1d8>)
 800b958:	64a3      	str	r3, [r4, #72]	; 0x48
 800b95a:	e795      	b.n	800b888 <PDM_Filter_setConfig+0x98>
 800b95c:	4b1b      	ldr	r3, [pc, #108]	; (800b9cc <PDM_Filter_setConfig+0x1dc>)
 800b95e:	64a3      	str	r3, [r4, #72]	; 0x48
 800b960:	e792      	b.n	800b888 <PDM_Filter_setConfig+0x98>
 800b962:	4b1b      	ldr	r3, [pc, #108]	; (800b9d0 <PDM_Filter_setConfig+0x1e0>)
 800b964:	64a3      	str	r3, [r4, #72]	; 0x48
 800b966:	e78f      	b.n	800b888 <PDM_Filter_setConfig+0x98>
 800b968:	4b1a      	ldr	r3, [pc, #104]	; (800b9d4 <PDM_Filter_setConfig+0x1e4>)
 800b96a:	64a3      	str	r3, [r4, #72]	; 0x48
 800b96c:	e78c      	b.n	800b888 <PDM_Filter_setConfig+0x98>
 800b96e:	4b1a      	ldr	r3, [pc, #104]	; (800b9d8 <PDM_Filter_setConfig+0x1e8>)
 800b970:	64a3      	str	r3, [r4, #72]	; 0x48
 800b972:	e789      	b.n	800b888 <PDM_Filter_setConfig+0x98>
 800b974:	4b19      	ldr	r3, [pc, #100]	; (800b9dc <PDM_Filter_setConfig+0x1ec>)
 800b976:	64a3      	str	r3, [r4, #72]	; 0x48
 800b978:	e786      	b.n	800b888 <PDM_Filter_setConfig+0x98>
 800b97a:	4b19      	ldr	r3, [pc, #100]	; (800b9e0 <PDM_Filter_setConfig+0x1f0>)
 800b97c:	64a3      	str	r3, [r4, #72]	; 0x48
 800b97e:	e783      	b.n	800b888 <PDM_Filter_setConfig+0x98>
 800b980:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 800b982:	42b3      	cmp	r3, r6
 800b984:	f47f af6e 	bne.w	800b864 <PDM_Filter_setConfig+0x74>
 800b988:	886b      	ldrh	r3, [r5, #2]
 800b98a:	2008      	movs	r0, #8
 800b98c:	8663      	strh	r3, [r4, #50]	; 0x32
 800b98e:	e775      	b.n	800b87c <PDM_Filter_setConfig+0x8c>
 800b990:	b5e8b5cd 	.word	0xb5e8b5cd
 800b994:	fffffef0 	.word	0xfffffef0
 800b998:	0800ab09 	.word	0x0800ab09
 800b99c:	0800be20 	.word	0x0800be20
 800b9a0:	42000000 	.word	0x42000000
 800b9a4:	3d4ccccd 	.word	0x3d4ccccd
 800b9a8:	4f800000 	.word	0x4f800000
 800b9ac:	00000000 	.word	0x00000000
 800b9b0:	08009f15 	.word	0x08009f15
 800b9b4:	08009d9d 	.word	0x08009d9d
 800b9b8:	08009c8d 	.word	0x08009c8d
 800b9bc:	0800a751 	.word	0x0800a751
 800b9c0:	0800a4b9 	.word	0x0800a4b9
 800b9c4:	0800a281 	.word	0x0800a281
 800b9c8:	0800a09d 	.word	0x0800a09d
 800b9cc:	0800ad25 	.word	0x0800ad25
 800b9d0:	0800abe9 	.word	0x0800abe9
 800b9d4:	0800b365 	.word	0x0800b365
 800b9d8:	0800b169 	.word	0x0800b169
 800b9dc:	0800afbd 	.word	0x0800afbd
 800b9e0:	0800ae51 	.word	0x0800ae51

0800b9e4 <PDM_Filter>:
 800b9e4:	b410      	push	{r4}
 800b9e6:	4b0b      	ldr	r3, [pc, #44]	; (800ba14 <PDM_Filter+0x30>)
 800b9e8:	6c54      	ldr	r4, [r2, #68]	; 0x44
 800b9ea:	429c      	cmp	r4, r3
 800b9ec:	d107      	bne.n	800b9fe <PDM_Filter+0x1a>
 800b9ee:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800b9f0:	05dc      	lsls	r4, r3, #23
 800b9f2:	d508      	bpl.n	800ba06 <PDM_Filter+0x22>
 800b9f4:	6c93      	ldr	r3, [r2, #72]	; 0x48
 800b9f6:	320c      	adds	r2, #12
 800b9f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b9fc:	4718      	bx	r3
 800b9fe:	2004      	movs	r0, #4
 800ba00:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ba04:	4770      	bx	lr
 800ba06:	f013 0f80 	tst.w	r3, #128	; 0x80
 800ba0a:	bf14      	ite	ne
 800ba0c:	2020      	movne	r0, #32
 800ba0e:	2030      	moveq	r0, #48	; 0x30
 800ba10:	e7f6      	b.n	800ba00 <PDM_Filter+0x1c>
 800ba12:	bf00      	nop
 800ba14:	b5e8b5cd 	.word	0xb5e8b5cd

0800ba18 <__errno>:
 800ba18:	4b01      	ldr	r3, [pc, #4]	; (800ba20 <__errno+0x8>)
 800ba1a:	6818      	ldr	r0, [r3, #0]
 800ba1c:	4770      	bx	lr
 800ba1e:	bf00      	nop
 800ba20:	24000414 	.word	0x24000414

0800ba24 <__libc_init_array>:
 800ba24:	b570      	push	{r4, r5, r6, lr}
 800ba26:	4d0d      	ldr	r5, [pc, #52]	; (800ba5c <__libc_init_array+0x38>)
 800ba28:	4c0d      	ldr	r4, [pc, #52]	; (800ba60 <__libc_init_array+0x3c>)
 800ba2a:	1b64      	subs	r4, r4, r5
 800ba2c:	10a4      	asrs	r4, r4, #2
 800ba2e:	2600      	movs	r6, #0
 800ba30:	42a6      	cmp	r6, r4
 800ba32:	d109      	bne.n	800ba48 <__libc_init_array+0x24>
 800ba34:	4d0b      	ldr	r5, [pc, #44]	; (800ba64 <__libc_init_array+0x40>)
 800ba36:	4c0c      	ldr	r4, [pc, #48]	; (800ba68 <__libc_init_array+0x44>)
 800ba38:	f000 f9e6 	bl	800be08 <_init>
 800ba3c:	1b64      	subs	r4, r4, r5
 800ba3e:	10a4      	asrs	r4, r4, #2
 800ba40:	2600      	movs	r6, #0
 800ba42:	42a6      	cmp	r6, r4
 800ba44:	d105      	bne.n	800ba52 <__libc_init_array+0x2e>
 800ba46:	bd70      	pop	{r4, r5, r6, pc}
 800ba48:	f855 3b04 	ldr.w	r3, [r5], #4
 800ba4c:	4798      	blx	r3
 800ba4e:	3601      	adds	r6, #1
 800ba50:	e7ee      	b.n	800ba30 <__libc_init_array+0xc>
 800ba52:	f855 3b04 	ldr.w	r3, [r5], #4
 800ba56:	4798      	blx	r3
 800ba58:	3601      	adds	r6, #1
 800ba5a:	e7f2      	b.n	800ba42 <__libc_init_array+0x1e>
 800ba5c:	0800c110 	.word	0x0800c110
 800ba60:	0800c110 	.word	0x0800c110
 800ba64:	0800c110 	.word	0x0800c110
 800ba68:	0800c114 	.word	0x0800c114

0800ba6c <memset>:
 800ba6c:	4402      	add	r2, r0
 800ba6e:	4603      	mov	r3, r0
 800ba70:	4293      	cmp	r3, r2
 800ba72:	d100      	bne.n	800ba76 <memset+0xa>
 800ba74:	4770      	bx	lr
 800ba76:	f803 1b01 	strb.w	r1, [r3], #1
 800ba7a:	e7f9      	b.n	800ba70 <memset+0x4>

0800ba7c <checkint>:
 800ba7c:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800ba80:	2b7e      	cmp	r3, #126	; 0x7e
 800ba82:	dd10      	ble.n	800baa6 <checkint+0x2a>
 800ba84:	2b96      	cmp	r3, #150	; 0x96
 800ba86:	dc0c      	bgt.n	800baa2 <checkint+0x26>
 800ba88:	2201      	movs	r2, #1
 800ba8a:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 800ba8e:	fa02 f303 	lsl.w	r3, r2, r3
 800ba92:	1e5a      	subs	r2, r3, #1
 800ba94:	4202      	tst	r2, r0
 800ba96:	d106      	bne.n	800baa6 <checkint+0x2a>
 800ba98:	4203      	tst	r3, r0
 800ba9a:	bf0c      	ite	eq
 800ba9c:	2002      	moveq	r0, #2
 800ba9e:	2001      	movne	r0, #1
 800baa0:	4770      	bx	lr
 800baa2:	2002      	movs	r0, #2
 800baa4:	4770      	bx	lr
 800baa6:	2000      	movs	r0, #0
 800baa8:	4770      	bx	lr
 800baaa:	0000      	movs	r0, r0
 800baac:	0000      	movs	r0, r0
	...

0800bab0 <powf>:
 800bab0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bab2:	ee10 1a10 	vmov	r1, s0
 800bab6:	ee10 6a90 	vmov	r6, s1
 800baba:	f5a1 0300 	sub.w	r3, r1, #8388608	; 0x800000
 800babe:	0072      	lsls	r2, r6, #1
 800bac0:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 800bac4:	b085      	sub	sp, #20
 800bac6:	f102 30ff 	add.w	r0, r2, #4294967295
 800baca:	f06f 7380 	mvn.w	r3, #16777216	; 0x1000000
 800bace:	d256      	bcs.n	800bb7e <powf+0xce>
 800bad0:	4298      	cmp	r0, r3
 800bad2:	d256      	bcs.n	800bb82 <powf+0xd2>
 800bad4:	2000      	movs	r0, #0
 800bad6:	f101 4240 	add.w	r2, r1, #3221225472	; 0xc0000000
 800bada:	4ea3      	ldr	r6, [pc, #652]	; (800bd68 <powf+0x2b8>)
 800badc:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 800bae0:	f502 024d 	add.w	r2, r2, #13434880	; 0xcd0000
 800bae4:	f3c2 47c3 	ubfx	r7, r2, #19, #4
 800bae8:	0dd2      	lsrs	r2, r2, #23
 800baea:	eb06 1707 	add.w	r7, r6, r7, lsl #4
 800baee:	05d2      	lsls	r2, r2, #23
 800baf0:	1a8b      	subs	r3, r1, r2
 800baf2:	ed97 5b00 	vldr	d5, [r7]
 800baf6:	ee07 3a90 	vmov	s15, r3
 800bafa:	15d2      	asrs	r2, r2, #23
 800bafc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800bb00:	eea5 6b07 	vfma.f64	d6, d5, d7
 800bb04:	ed97 5b02 	vldr	d5, [r7, #8]
 800bb08:	ee26 2b06 	vmul.f64	d2, d6, d6
 800bb0c:	ee22 1b02 	vmul.f64	d1, d2, d2
 800bb10:	ee07 2a90 	vmov	s15, r2
 800bb14:	ed96 4b40 	vldr	d4, [r6, #256]	; 0x100
 800bb18:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800bb1c:	ee37 7b05 	vadd.f64	d7, d7, d5
 800bb20:	ed96 5b42 	vldr	d5, [r6, #264]	; 0x108
 800bb24:	ed96 3b44 	vldr	d3, [r6, #272]	; 0x110
 800bb28:	eea6 5b04 	vfma.f64	d5, d6, d4
 800bb2c:	ed96 4b46 	vldr	d4, [r6, #280]	; 0x118
 800bb30:	eea6 4b03 	vfma.f64	d4, d6, d3
 800bb34:	ed96 3b48 	vldr	d3, [r6, #288]	; 0x120
 800bb38:	eeb7 0ae0 	vcvt.f64.f32	d0, s1
 800bb3c:	eea6 7b03 	vfma.f64	d7, d6, d3
 800bb40:	eea2 7b04 	vfma.f64	d7, d2, d4
 800bb44:	eea5 7b01 	vfma.f64	d7, d5, d1
 800bb48:	ee20 0b07 	vmul.f64	d0, d0, d7
 800bb4c:	ee10 1a90 	vmov	r1, s1
 800bb50:	2300      	movs	r3, #0
 800bb52:	2700      	movs	r7, #0
 800bb54:	f3c1 32cf 	ubfx	r2, r1, #15, #16
 800bb58:	f248 06be 	movw	r6, #32958	; 0x80be
 800bb5c:	429f      	cmp	r7, r3
 800bb5e:	bf08      	it	eq
 800bb60:	4296      	cmpeq	r6, r2
 800bb62:	f080 80b1 	bcs.w	800bcc8 <powf+0x218>
 800bb66:	ed9f 7b78 	vldr	d7, [pc, #480]	; 800bd48 <powf+0x298>
 800bb6a:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800bb6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb72:	dd79      	ble.n	800bc68 <powf+0x1b8>
 800bb74:	b005      	add	sp, #20
 800bb76:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800bb7a:	f000 b91f 	b.w	800bdbc <__math_oflowf>
 800bb7e:	4298      	cmp	r0, r3
 800bb80:	d32d      	bcc.n	800bbde <powf+0x12e>
 800bb82:	b952      	cbnz	r2, 800bb9a <powf+0xea>
 800bb84:	f481 0380 	eor.w	r3, r1, #4194304	; 0x400000
 800bb88:	005b      	lsls	r3, r3, #1
 800bb8a:	f513 0f00 	cmn.w	r3, #8388608	; 0x800000
 800bb8e:	f240 80cd 	bls.w	800bd2c <powf+0x27c>
 800bb92:	ee30 0a20 	vadd.f32	s0, s0, s1
 800bb96:	b005      	add	sp, #20
 800bb98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bb9a:	f1b1 5f7e 	cmp.w	r1, #1065353216	; 0x3f800000
 800bb9e:	d105      	bne.n	800bbac <powf+0xfc>
 800bba0:	f486 0680 	eor.w	r6, r6, #4194304	; 0x400000
 800bba4:	0076      	lsls	r6, r6, #1
 800bba6:	f516 0f00 	cmn.w	r6, #8388608	; 0x800000
 800bbaa:	e7f0      	b.n	800bb8e <powf+0xde>
 800bbac:	004b      	lsls	r3, r1, #1
 800bbae:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
 800bbb2:	d8ee      	bhi.n	800bb92 <powf+0xe2>
 800bbb4:	f1b2 4f7f 	cmp.w	r2, #4278190080	; 0xff000000
 800bbb8:	d1eb      	bne.n	800bb92 <powf+0xe2>
 800bbba:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 800bbbe:	f000 80b5 	beq.w	800bd2c <powf+0x27c>
 800bbc2:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 800bbc6:	ea6f 0606 	mvn.w	r6, r6
 800bbca:	bf34      	ite	cc
 800bbcc:	2300      	movcc	r3, #0
 800bbce:	2301      	movcs	r3, #1
 800bbd0:	0ff6      	lsrs	r6, r6, #31
 800bbd2:	42b3      	cmp	r3, r6
 800bbd4:	f040 80ad 	bne.w	800bd32 <powf+0x282>
 800bbd8:	ee20 0aa0 	vmul.f32	s0, s1, s1
 800bbdc:	e7db      	b.n	800bb96 <powf+0xe6>
 800bbde:	004f      	lsls	r7, r1, #1
 800bbe0:	1e7a      	subs	r2, r7, #1
 800bbe2:	429a      	cmp	r2, r3
 800bbe4:	d31c      	bcc.n	800bc20 <powf+0x170>
 800bbe6:	2900      	cmp	r1, #0
 800bbe8:	ee20 0a00 	vmul.f32	s0, s0, s0
 800bbec:	da0f      	bge.n	800bc0e <powf+0x15e>
 800bbee:	ee10 0a90 	vmov	r0, s1
 800bbf2:	f7ff ff43 	bl	800ba7c <checkint>
 800bbf6:	2801      	cmp	r0, #1
 800bbf8:	d109      	bne.n	800bc0e <powf+0x15e>
 800bbfa:	eeb1 0a40 	vneg.f32	s0, s0
 800bbfe:	b947      	cbnz	r7, 800bc12 <powf+0x162>
 800bc00:	2e00      	cmp	r6, #0
 800bc02:	dac8      	bge.n	800bb96 <powf+0xe6>
 800bc04:	b005      	add	sp, #20
 800bc06:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800bc0a:	f000 b8dd 	b.w	800bdc8 <__math_divzerof>
 800bc0e:	2000      	movs	r0, #0
 800bc10:	e7f5      	b.n	800bbfe <powf+0x14e>
 800bc12:	2e00      	cmp	r6, #0
 800bc14:	dabf      	bge.n	800bb96 <powf+0xe6>
 800bc16:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800bc1a:	ee87 0a80 	vdiv.f32	s0, s15, s0
 800bc1e:	e7ba      	b.n	800bb96 <powf+0xe6>
 800bc20:	2900      	cmp	r1, #0
 800bc22:	da1f      	bge.n	800bc64 <powf+0x1b4>
 800bc24:	ee10 0a90 	vmov	r0, s1
 800bc28:	f7ff ff28 	bl	800ba7c <checkint>
 800bc2c:	b920      	cbnz	r0, 800bc38 <powf+0x188>
 800bc2e:	b005      	add	sp, #20
 800bc30:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800bc34:	f000 b8d8 	b.w	800bde8 <__math_invalidf>
 800bc38:	2801      	cmp	r0, #1
 800bc3a:	bf14      	ite	ne
 800bc3c:	2000      	movne	r0, #0
 800bc3e:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 800bc42:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800bc46:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 800bc4a:	f4bf af44 	bcs.w	800bad6 <powf+0x26>
 800bc4e:	eddf 7a47 	vldr	s15, [pc, #284]	; 800bd6c <powf+0x2bc>
 800bc52:	ee20 0a27 	vmul.f32	s0, s0, s15
 800bc56:	ee10 3a10 	vmov	r3, s0
 800bc5a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bc5e:	f1a3 6138 	sub.w	r1, r3, #192937984	; 0xb800000
 800bc62:	e738      	b.n	800bad6 <powf+0x26>
 800bc64:	2000      	movs	r0, #0
 800bc66:	e7ee      	b.n	800bc46 <powf+0x196>
 800bc68:	ed9f 7b39 	vldr	d7, [pc, #228]	; 800bd50 <powf+0x2a0>
 800bc6c:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800bc70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc74:	dd10      	ble.n	800bc98 <powf+0x1e8>
 800bc76:	f04f 534c 	mov.w	r3, #855638016	; 0x33000000
 800bc7a:	2800      	cmp	r0, #0
 800bc7c:	d15c      	bne.n	800bd38 <powf+0x288>
 800bc7e:	9302      	str	r3, [sp, #8]
 800bc80:	eddd 7a02 	vldr	s15, [sp, #8]
 800bc84:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bc88:	ee77 7a87 	vadd.f32	s15, s15, s14
 800bc8c:	eef4 7a47 	vcmp.f32	s15, s14
 800bc90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc94:	f47f af6e 	bne.w	800bb74 <powf+0xc4>
 800bc98:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 800bd58 <powf+0x2a8>
 800bc9c:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800bca0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bca4:	d804      	bhi.n	800bcb0 <powf+0x200>
 800bca6:	b005      	add	sp, #20
 800bca8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800bcac:	f000 b87a 	b.w	800bda4 <__math_uflowf>
 800bcb0:	ed9f 7b2b 	vldr	d7, [pc, #172]	; 800bd60 <powf+0x2b0>
 800bcb4:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800bcb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bcbc:	d504      	bpl.n	800bcc8 <powf+0x218>
 800bcbe:	b005      	add	sp, #20
 800bcc0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800bcc4:	f000 b874 	b.w	800bdb0 <__math_may_uflowf>
 800bcc8:	4b29      	ldr	r3, [pc, #164]	; (800bd70 <powf+0x2c0>)
 800bcca:	ed93 7b40 	vldr	d7, [r3, #256]	; 0x100
 800bcce:	ee30 6b07 	vadd.f64	d6, d0, d7
 800bcd2:	ed8d 6b00 	vstr	d6, [sp]
 800bcd6:	ee36 7b47 	vsub.f64	d7, d6, d7
 800bcda:	ee30 7b47 	vsub.f64	d7, d0, d7
 800bcde:	e9dd 6700 	ldrd	r6, r7, [sp]
 800bce2:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800bce6:	f006 011f 	and.w	r1, r6, #31
 800bcea:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800bcee:	e9d1 ce00 	ldrd	ip, lr, [r1]
 800bcf2:	ed93 5b42 	vldr	d5, [r3, #264]	; 0x108
 800bcf6:	ed93 6b44 	vldr	d6, [r3, #272]	; 0x110
 800bcfa:	ed93 4b46 	vldr	d4, [r3, #280]	; 0x118
 800bcfe:	eea7 6b05 	vfma.f64	d6, d7, d5
 800bd02:	ee27 5b07 	vmul.f64	d5, d7, d7
 800bd06:	1836      	adds	r6, r6, r0
 800bd08:	2300      	movs	r3, #0
 800bd0a:	eb13 040c 	adds.w	r4, r3, ip
 800bd0e:	ea4f 31c6 	mov.w	r1, r6, lsl #15
 800bd12:	eb41 050e 	adc.w	r5, r1, lr
 800bd16:	eea7 0b04 	vfma.f64	d0, d7, d4
 800bd1a:	ec45 4b17 	vmov	d7, r4, r5
 800bd1e:	eea6 0b05 	vfma.f64	d0, d6, d5
 800bd22:	ee20 0b07 	vmul.f64	d0, d0, d7
 800bd26:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800bd2a:	e734      	b.n	800bb96 <powf+0xe6>
 800bd2c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800bd30:	e731      	b.n	800bb96 <powf+0xe6>
 800bd32:	ed9f 0a10 	vldr	s0, [pc, #64]	; 800bd74 <powf+0x2c4>
 800bd36:	e72e      	b.n	800bb96 <powf+0xe6>
 800bd38:	9303      	str	r3, [sp, #12]
 800bd3a:	eddd 7a03 	vldr	s15, [sp, #12]
 800bd3e:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800bd42:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bd46:	e7a1      	b.n	800bc8c <powf+0x1dc>
 800bd48:	ffd1d571 	.word	0xffd1d571
 800bd4c:	405fffff 	.word	0x405fffff
 800bd50:	ffa3aae2 	.word	0xffa3aae2
 800bd54:	405fffff 	.word	0x405fffff
 800bd58:	00000000 	.word	0x00000000
 800bd5c:	c062c000 	.word	0xc062c000
 800bd60:	00000000 	.word	0x00000000
 800bd64:	c062a000 	.word	0xc062a000
 800bd68:	0800be98 	.word	0x0800be98
 800bd6c:	4b000000 	.word	0x4b000000
 800bd70:	0800bfc0 	.word	0x0800bfc0
 800bd74:	00000000 	.word	0x00000000

0800bd78 <with_errnof>:
 800bd78:	b513      	push	{r0, r1, r4, lr}
 800bd7a:	4604      	mov	r4, r0
 800bd7c:	ed8d 0a01 	vstr	s0, [sp, #4]
 800bd80:	f7ff fe4a 	bl	800ba18 <__errno>
 800bd84:	ed9d 0a01 	vldr	s0, [sp, #4]
 800bd88:	6004      	str	r4, [r0, #0]
 800bd8a:	b002      	add	sp, #8
 800bd8c:	bd10      	pop	{r4, pc}

0800bd8e <xflowf>:
 800bd8e:	b130      	cbz	r0, 800bd9e <xflowf+0x10>
 800bd90:	eef1 7a40 	vneg.f32	s15, s0
 800bd94:	ee27 0a80 	vmul.f32	s0, s15, s0
 800bd98:	2022      	movs	r0, #34	; 0x22
 800bd9a:	f7ff bfed 	b.w	800bd78 <with_errnof>
 800bd9e:	eef0 7a40 	vmov.f32	s15, s0
 800bda2:	e7f7      	b.n	800bd94 <xflowf+0x6>

0800bda4 <__math_uflowf>:
 800bda4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800bdac <__math_uflowf+0x8>
 800bda8:	f7ff bff1 	b.w	800bd8e <xflowf>
 800bdac:	10000000 	.word	0x10000000

0800bdb0 <__math_may_uflowf>:
 800bdb0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800bdb8 <__math_may_uflowf+0x8>
 800bdb4:	f7ff bfeb 	b.w	800bd8e <xflowf>
 800bdb8:	1a200000 	.word	0x1a200000

0800bdbc <__math_oflowf>:
 800bdbc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800bdc4 <__math_oflowf+0x8>
 800bdc0:	f7ff bfe5 	b.w	800bd8e <xflowf>
 800bdc4:	70000000 	.word	0x70000000

0800bdc8 <__math_divzerof>:
 800bdc8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800bdcc:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 800bdd0:	2800      	cmp	r0, #0
 800bdd2:	fe40 7a27 	vseleq.f32	s15, s0, s15
 800bdd6:	ed9f 0a03 	vldr	s0, [pc, #12]	; 800bde4 <__math_divzerof+0x1c>
 800bdda:	2022      	movs	r0, #34	; 0x22
 800bddc:	ee87 0a80 	vdiv.f32	s0, s15, s0
 800bde0:	f7ff bfca 	b.w	800bd78 <with_errnof>
 800bde4:	00000000 	.word	0x00000000

0800bde8 <__math_invalidf>:
 800bde8:	eef0 7a40 	vmov.f32	s15, s0
 800bdec:	ee30 7a40 	vsub.f32	s14, s0, s0
 800bdf0:	eef4 7a67 	vcmp.f32	s15, s15
 800bdf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bdf8:	ee87 0a07 	vdiv.f32	s0, s14, s14
 800bdfc:	d602      	bvs.n	800be04 <__math_invalidf+0x1c>
 800bdfe:	2021      	movs	r0, #33	; 0x21
 800be00:	f7ff bfba 	b.w	800bd78 <with_errnof>
 800be04:	4770      	bx	lr
	...

0800be08 <_init>:
 800be08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be0a:	bf00      	nop
 800be0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800be0e:	bc08      	pop	{r3}
 800be10:	469e      	mov	lr, r3
 800be12:	4770      	bx	lr

0800be14 <_fini>:
 800be14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be16:	bf00      	nop
 800be18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800be1a:	bc08      	pop	{r3}
 800be1c:	469e      	mov	lr, r3
 800be1e:	4770      	bx	lr
