
microphone_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ccd8  08000298  08000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004d0  0800cf70  0800cf70  0001cf70  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d440  0800d440  00020474  2**0
                  CONTENTS
  4 .ARM          00000008  0800d440  0800d440  0001d440  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d448  0800d448  00020474  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d448  0800d448  0001d448  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d44c  0800d44c  0001d44c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000474  24000000  0800d450  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000f34  24000474  0800d8c4  00020474  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  240013a8  0800d8c4  000213a8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020474  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003d59f  00000000  00000000  000204a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000049cc  00000000  00000000  0005da41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a10  00000000  00000000  00062410  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000018d0  00000000  00000000  00063e20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003cbde  00000000  00000000  000656f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002c99f  00000000  00000000  000a22ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0018ccc4  00000000  00000000  000cec6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000d1  00000000  00000000  0025b931  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007470  00000000  00000000  0025ba04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000474 	.word	0x24000474
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800cf58 	.word	0x0800cf58

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000478 	.word	0x24000478
 80002d4:	0800cf58 	.word	0x0800cf58

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96e 	b.w	80005cc <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468c      	mov	ip, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	f040 8083 	bne.w	800041e <__udivmoddi4+0x116>
 8000318:	428a      	cmp	r2, r1
 800031a:	4617      	mov	r7, r2
 800031c:	d947      	bls.n	80003ae <__udivmoddi4+0xa6>
 800031e:	fab2 f282 	clz	r2, r2
 8000322:	b142      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000324:	f1c2 0020 	rsb	r0, r2, #32
 8000328:	fa24 f000 	lsr.w	r0, r4, r0
 800032c:	4091      	lsls	r1, r2
 800032e:	4097      	lsls	r7, r2
 8000330:	ea40 0c01 	orr.w	ip, r0, r1
 8000334:	4094      	lsls	r4, r2
 8000336:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fbbc f6f8 	udiv	r6, ip, r8
 8000340:	fa1f fe87 	uxth.w	lr, r7
 8000344:	fb08 c116 	mls	r1, r8, r6, ip
 8000348:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034c:	fb06 f10e 	mul.w	r1, r6, lr
 8000350:	4299      	cmp	r1, r3
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x60>
 8000354:	18fb      	adds	r3, r7, r3
 8000356:	f106 30ff 	add.w	r0, r6, #4294967295
 800035a:	f080 8119 	bcs.w	8000590 <__udivmoddi4+0x288>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 8116 	bls.w	8000590 <__udivmoddi4+0x288>
 8000364:	3e02      	subs	r6, #2
 8000366:	443b      	add	r3, r7
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000370:	fb08 3310 	mls	r3, r8, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 fe0e 	mul.w	lr, r0, lr
 800037c:	45a6      	cmp	lr, r4
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x8c>
 8000380:	193c      	adds	r4, r7, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	f080 8105 	bcs.w	8000594 <__udivmoddi4+0x28c>
 800038a:	45a6      	cmp	lr, r4
 800038c:	f240 8102 	bls.w	8000594 <__udivmoddi4+0x28c>
 8000390:	3802      	subs	r0, #2
 8000392:	443c      	add	r4, r7
 8000394:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	2600      	movs	r6, #0
 800039e:	b11d      	cbz	r5, 80003a8 <__udivmoddi4+0xa0>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c5 4300 	strd	r4, r3, [r5]
 80003a8:	4631      	mov	r1, r6
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	b902      	cbnz	r2, 80003b2 <__udivmoddi4+0xaa>
 80003b0:	deff      	udf	#255	; 0xff
 80003b2:	fab2 f282 	clz	r2, r2
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d150      	bne.n	800045c <__udivmoddi4+0x154>
 80003ba:	1bcb      	subs	r3, r1, r7
 80003bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c0:	fa1f f887 	uxth.w	r8, r7
 80003c4:	2601      	movs	r6, #1
 80003c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80003ca:	0c21      	lsrs	r1, r4, #16
 80003cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003d4:	fb08 f30c 	mul.w	r3, r8, ip
 80003d8:	428b      	cmp	r3, r1
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0xe4>
 80003dc:	1879      	adds	r1, r7, r1
 80003de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0xe2>
 80003e4:	428b      	cmp	r3, r1
 80003e6:	f200 80e9 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 80003ea:	4684      	mov	ip, r0
 80003ec:	1ac9      	subs	r1, r1, r3
 80003ee:	b2a3      	uxth	r3, r4
 80003f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80003f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80003f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003fc:	fb08 f800 	mul.w	r8, r8, r0
 8000400:	45a0      	cmp	r8, r4
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x10c>
 8000404:	193c      	adds	r4, r7, r4
 8000406:	f100 33ff 	add.w	r3, r0, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x10a>
 800040c:	45a0      	cmp	r8, r4
 800040e:	f200 80d9 	bhi.w	80005c4 <__udivmoddi4+0x2bc>
 8000412:	4618      	mov	r0, r3
 8000414:	eba4 0408 	sub.w	r4, r4, r8
 8000418:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800041c:	e7bf      	b.n	800039e <__udivmoddi4+0x96>
 800041e:	428b      	cmp	r3, r1
 8000420:	d909      	bls.n	8000436 <__udivmoddi4+0x12e>
 8000422:	2d00      	cmp	r5, #0
 8000424:	f000 80b1 	beq.w	800058a <__udivmoddi4+0x282>
 8000428:	2600      	movs	r6, #0
 800042a:	e9c5 0100 	strd	r0, r1, [r5]
 800042e:	4630      	mov	r0, r6
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	fab3 f683 	clz	r6, r3
 800043a:	2e00      	cmp	r6, #0
 800043c:	d14a      	bne.n	80004d4 <__udivmoddi4+0x1cc>
 800043e:	428b      	cmp	r3, r1
 8000440:	d302      	bcc.n	8000448 <__udivmoddi4+0x140>
 8000442:	4282      	cmp	r2, r0
 8000444:	f200 80b8 	bhi.w	80005b8 <__udivmoddi4+0x2b0>
 8000448:	1a84      	subs	r4, r0, r2
 800044a:	eb61 0103 	sbc.w	r1, r1, r3
 800044e:	2001      	movs	r0, #1
 8000450:	468c      	mov	ip, r1
 8000452:	2d00      	cmp	r5, #0
 8000454:	d0a8      	beq.n	80003a8 <__udivmoddi4+0xa0>
 8000456:	e9c5 4c00 	strd	r4, ip, [r5]
 800045a:	e7a5      	b.n	80003a8 <__udivmoddi4+0xa0>
 800045c:	f1c2 0320 	rsb	r3, r2, #32
 8000460:	fa20 f603 	lsr.w	r6, r0, r3
 8000464:	4097      	lsls	r7, r2
 8000466:	fa01 f002 	lsl.w	r0, r1, r2
 800046a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800046e:	40d9      	lsrs	r1, r3
 8000470:	4330      	orrs	r0, r6
 8000472:	0c03      	lsrs	r3, r0, #16
 8000474:	fbb1 f6fe 	udiv	r6, r1, lr
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000480:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000484:	fb06 f108 	mul.w	r1, r6, r8
 8000488:	4299      	cmp	r1, r3
 800048a:	fa04 f402 	lsl.w	r4, r4, r2
 800048e:	d909      	bls.n	80004a4 <__udivmoddi4+0x19c>
 8000490:	18fb      	adds	r3, r7, r3
 8000492:	f106 3cff 	add.w	ip, r6, #4294967295
 8000496:	f080 808d 	bcs.w	80005b4 <__udivmoddi4+0x2ac>
 800049a:	4299      	cmp	r1, r3
 800049c:	f240 808a 	bls.w	80005b4 <__udivmoddi4+0x2ac>
 80004a0:	3e02      	subs	r6, #2
 80004a2:	443b      	add	r3, r7
 80004a4:	1a5b      	subs	r3, r3, r1
 80004a6:	b281      	uxth	r1, r0
 80004a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80004ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b4:	fb00 f308 	mul.w	r3, r0, r8
 80004b8:	428b      	cmp	r3, r1
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x1c4>
 80004bc:	1879      	adds	r1, r7, r1
 80004be:	f100 3cff 	add.w	ip, r0, #4294967295
 80004c2:	d273      	bcs.n	80005ac <__udivmoddi4+0x2a4>
 80004c4:	428b      	cmp	r3, r1
 80004c6:	d971      	bls.n	80005ac <__udivmoddi4+0x2a4>
 80004c8:	3802      	subs	r0, #2
 80004ca:	4439      	add	r1, r7
 80004cc:	1acb      	subs	r3, r1, r3
 80004ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004d2:	e778      	b.n	80003c6 <__udivmoddi4+0xbe>
 80004d4:	f1c6 0c20 	rsb	ip, r6, #32
 80004d8:	fa03 f406 	lsl.w	r4, r3, r6
 80004dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e0:	431c      	orrs	r4, r3
 80004e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80004e6:	fa01 f306 	lsl.w	r3, r1, r6
 80004ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80004f2:	431f      	orrs	r7, r3
 80004f4:	0c3b      	lsrs	r3, r7, #16
 80004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fa:	fa1f f884 	uxth.w	r8, r4
 80004fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000502:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000506:	fb09 fa08 	mul.w	sl, r9, r8
 800050a:	458a      	cmp	sl, r1
 800050c:	fa02 f206 	lsl.w	r2, r2, r6
 8000510:	fa00 f306 	lsl.w	r3, r0, r6
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x220>
 8000516:	1861      	adds	r1, r4, r1
 8000518:	f109 30ff 	add.w	r0, r9, #4294967295
 800051c:	d248      	bcs.n	80005b0 <__udivmoddi4+0x2a8>
 800051e:	458a      	cmp	sl, r1
 8000520:	d946      	bls.n	80005b0 <__udivmoddi4+0x2a8>
 8000522:	f1a9 0902 	sub.w	r9, r9, #2
 8000526:	4421      	add	r1, r4
 8000528:	eba1 010a 	sub.w	r1, r1, sl
 800052c:	b2bf      	uxth	r7, r7
 800052e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000532:	fb0e 1110 	mls	r1, lr, r0, r1
 8000536:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800053a:	fb00 f808 	mul.w	r8, r0, r8
 800053e:	45b8      	cmp	r8, r7
 8000540:	d907      	bls.n	8000552 <__udivmoddi4+0x24a>
 8000542:	19e7      	adds	r7, r4, r7
 8000544:	f100 31ff 	add.w	r1, r0, #4294967295
 8000548:	d22e      	bcs.n	80005a8 <__udivmoddi4+0x2a0>
 800054a:	45b8      	cmp	r8, r7
 800054c:	d92c      	bls.n	80005a8 <__udivmoddi4+0x2a0>
 800054e:	3802      	subs	r0, #2
 8000550:	4427      	add	r7, r4
 8000552:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000556:	eba7 0708 	sub.w	r7, r7, r8
 800055a:	fba0 8902 	umull	r8, r9, r0, r2
 800055e:	454f      	cmp	r7, r9
 8000560:	46c6      	mov	lr, r8
 8000562:	4649      	mov	r1, r9
 8000564:	d31a      	bcc.n	800059c <__udivmoddi4+0x294>
 8000566:	d017      	beq.n	8000598 <__udivmoddi4+0x290>
 8000568:	b15d      	cbz	r5, 8000582 <__udivmoddi4+0x27a>
 800056a:	ebb3 020e 	subs.w	r2, r3, lr
 800056e:	eb67 0701 	sbc.w	r7, r7, r1
 8000572:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000576:	40f2      	lsrs	r2, r6
 8000578:	ea4c 0202 	orr.w	r2, ip, r2
 800057c:	40f7      	lsrs	r7, r6
 800057e:	e9c5 2700 	strd	r2, r7, [r5]
 8000582:	2600      	movs	r6, #0
 8000584:	4631      	mov	r1, r6
 8000586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800058a:	462e      	mov	r6, r5
 800058c:	4628      	mov	r0, r5
 800058e:	e70b      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000590:	4606      	mov	r6, r0
 8000592:	e6e9      	b.n	8000368 <__udivmoddi4+0x60>
 8000594:	4618      	mov	r0, r3
 8000596:	e6fd      	b.n	8000394 <__udivmoddi4+0x8c>
 8000598:	4543      	cmp	r3, r8
 800059a:	d2e5      	bcs.n	8000568 <__udivmoddi4+0x260>
 800059c:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a0:	eb69 0104 	sbc.w	r1, r9, r4
 80005a4:	3801      	subs	r0, #1
 80005a6:	e7df      	b.n	8000568 <__udivmoddi4+0x260>
 80005a8:	4608      	mov	r0, r1
 80005aa:	e7d2      	b.n	8000552 <__udivmoddi4+0x24a>
 80005ac:	4660      	mov	r0, ip
 80005ae:	e78d      	b.n	80004cc <__udivmoddi4+0x1c4>
 80005b0:	4681      	mov	r9, r0
 80005b2:	e7b9      	b.n	8000528 <__udivmoddi4+0x220>
 80005b4:	4666      	mov	r6, ip
 80005b6:	e775      	b.n	80004a4 <__udivmoddi4+0x19c>
 80005b8:	4630      	mov	r0, r6
 80005ba:	e74a      	b.n	8000452 <__udivmoddi4+0x14a>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	4439      	add	r1, r7
 80005c2:	e713      	b.n	80003ec <__udivmoddi4+0xe4>
 80005c4:	3802      	subs	r0, #2
 80005c6:	443c      	add	r4, r7
 80005c8:	e724      	b.n	8000414 <__udivmoddi4+0x10c>
 80005ca:	bf00      	nop

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005d0:	b480      	push	{r7}
 80005d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005d4:	4b3f      	ldr	r3, [pc, #252]	; (80006d4 <SystemInit+0x104>)
 80005d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005da:	4a3e      	ldr	r2, [pc, #248]	; (80006d4 <SystemInit+0x104>)
 80005dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80005e4:	4b3b      	ldr	r3, [pc, #236]	; (80006d4 <SystemInit+0x104>)
 80005e6:	691b      	ldr	r3, [r3, #16]
 80005e8:	4a3a      	ldr	r2, [pc, #232]	; (80006d4 <SystemInit+0x104>)
 80005ea:	f043 0310 	orr.w	r3, r3, #16
 80005ee:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005f0:	4b39      	ldr	r3, [pc, #228]	; (80006d8 <SystemInit+0x108>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	f003 030f 	and.w	r3, r3, #15
 80005f8:	2b06      	cmp	r3, #6
 80005fa:	d807      	bhi.n	800060c <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80005fc:	4b36      	ldr	r3, [pc, #216]	; (80006d8 <SystemInit+0x108>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	f023 030f 	bic.w	r3, r3, #15
 8000604:	4a34      	ldr	r2, [pc, #208]	; (80006d8 <SystemInit+0x108>)
 8000606:	f043 0307 	orr.w	r3, r3, #7
 800060a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800060c:	4b33      	ldr	r3, [pc, #204]	; (80006dc <SystemInit+0x10c>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	4a32      	ldr	r2, [pc, #200]	; (80006dc <SystemInit+0x10c>)
 8000612:	f043 0301 	orr.w	r3, r3, #1
 8000616:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000618:	4b30      	ldr	r3, [pc, #192]	; (80006dc <SystemInit+0x10c>)
 800061a:	2200      	movs	r2, #0
 800061c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800061e:	4b2f      	ldr	r3, [pc, #188]	; (80006dc <SystemInit+0x10c>)
 8000620:	681a      	ldr	r2, [r3, #0]
 8000622:	492e      	ldr	r1, [pc, #184]	; (80006dc <SystemInit+0x10c>)
 8000624:	4b2e      	ldr	r3, [pc, #184]	; (80006e0 <SystemInit+0x110>)
 8000626:	4013      	ands	r3, r2
 8000628:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800062a:	4b2b      	ldr	r3, [pc, #172]	; (80006d8 <SystemInit+0x108>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	f003 0308 	and.w	r3, r3, #8
 8000632:	2b00      	cmp	r3, #0
 8000634:	d007      	beq.n	8000646 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000636:	4b28      	ldr	r3, [pc, #160]	; (80006d8 <SystemInit+0x108>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	f023 030f 	bic.w	r3, r3, #15
 800063e:	4a26      	ldr	r2, [pc, #152]	; (80006d8 <SystemInit+0x108>)
 8000640:	f043 0307 	orr.w	r3, r3, #7
 8000644:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000646:	4b25      	ldr	r3, [pc, #148]	; (80006dc <SystemInit+0x10c>)
 8000648:	2200      	movs	r2, #0
 800064a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800064c:	4b23      	ldr	r3, [pc, #140]	; (80006dc <SystemInit+0x10c>)
 800064e:	2200      	movs	r2, #0
 8000650:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000652:	4b22      	ldr	r3, [pc, #136]	; (80006dc <SystemInit+0x10c>)
 8000654:	2200      	movs	r2, #0
 8000656:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000658:	4b20      	ldr	r3, [pc, #128]	; (80006dc <SystemInit+0x10c>)
 800065a:	4a22      	ldr	r2, [pc, #136]	; (80006e4 <SystemInit+0x114>)
 800065c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800065e:	4b1f      	ldr	r3, [pc, #124]	; (80006dc <SystemInit+0x10c>)
 8000660:	4a21      	ldr	r2, [pc, #132]	; (80006e8 <SystemInit+0x118>)
 8000662:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000664:	4b1d      	ldr	r3, [pc, #116]	; (80006dc <SystemInit+0x10c>)
 8000666:	4a21      	ldr	r2, [pc, #132]	; (80006ec <SystemInit+0x11c>)
 8000668:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800066a:	4b1c      	ldr	r3, [pc, #112]	; (80006dc <SystemInit+0x10c>)
 800066c:	2200      	movs	r2, #0
 800066e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000670:	4b1a      	ldr	r3, [pc, #104]	; (80006dc <SystemInit+0x10c>)
 8000672:	4a1e      	ldr	r2, [pc, #120]	; (80006ec <SystemInit+0x11c>)
 8000674:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000676:	4b19      	ldr	r3, [pc, #100]	; (80006dc <SystemInit+0x10c>)
 8000678:	2200      	movs	r2, #0
 800067a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800067c:	4b17      	ldr	r3, [pc, #92]	; (80006dc <SystemInit+0x10c>)
 800067e:	4a1b      	ldr	r2, [pc, #108]	; (80006ec <SystemInit+0x11c>)
 8000680:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000682:	4b16      	ldr	r3, [pc, #88]	; (80006dc <SystemInit+0x10c>)
 8000684:	2200      	movs	r2, #0
 8000686:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000688:	4b14      	ldr	r3, [pc, #80]	; (80006dc <SystemInit+0x10c>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	4a13      	ldr	r2, [pc, #76]	; (80006dc <SystemInit+0x10c>)
 800068e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000692:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000694:	4b11      	ldr	r3, [pc, #68]	; (80006dc <SystemInit+0x10c>)
 8000696:	2200      	movs	r2, #0
 8000698:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800069a:	4b15      	ldr	r3, [pc, #84]	; (80006f0 <SystemInit+0x120>)
 800069c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800069e:	4a14      	ldr	r2, [pc, #80]	; (80006f0 <SystemInit+0x120>)
 80006a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006a4:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80006a6:	4b13      	ldr	r3, [pc, #76]	; (80006f4 <SystemInit+0x124>)
 80006a8:	681a      	ldr	r2, [r3, #0]
 80006aa:	4b13      	ldr	r3, [pc, #76]	; (80006f8 <SystemInit+0x128>)
 80006ac:	4013      	ands	r3, r2
 80006ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80006b2:	d202      	bcs.n	80006ba <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006b4:	4b11      	ldr	r3, [pc, #68]	; (80006fc <SystemInit+0x12c>)
 80006b6:	2201      	movs	r2, #1
 80006b8:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006ba:	4b11      	ldr	r3, [pc, #68]	; (8000700 <SystemInit+0x130>)
 80006bc:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80006c0:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 80006c2:	4b04      	ldr	r3, [pc, #16]	; (80006d4 <SystemInit+0x104>)
 80006c4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80006c8:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 80006ca:	bf00      	nop
 80006cc:	46bd      	mov	sp, r7
 80006ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d2:	4770      	bx	lr
 80006d4:	e000ed00 	.word	0xe000ed00
 80006d8:	52002000 	.word	0x52002000
 80006dc:	58024400 	.word	0x58024400
 80006e0:	eaf6ed7f 	.word	0xeaf6ed7f
 80006e4:	02020200 	.word	0x02020200
 80006e8:	01ff0000 	.word	0x01ff0000
 80006ec:	01010280 	.word	0x01010280
 80006f0:	580000c0 	.word	0x580000c0
 80006f4:	5c001000 	.word	0x5c001000
 80006f8:	ffff0000 	.word	0xffff0000
 80006fc:	51008108 	.word	0x51008108
 8000700:	52004000 	.word	0x52004000

08000704 <matrix_init>:
#include "dsp.h"


static const float coeff[TAPS+1] = {0.000000e+00,-1.536484e-04,-5.953882e-04,-1.193288e-03,-1.714456e-03,-1.913206e-03,-1.640422e-03,-9.272316e-04,5.751529e-13,7.918088e-04,1.116142e-03,8.138348e-04,-1.013718e-12,-9.439722e-04,-1.501693e-03,-1.235811e-03,8.812162e-13,1.948136e-03,3.999894e-03,5.415191e-03,5.634462e-03,4.554894e-03,2.640536e-03,7.920460e-04,0.000000e+00,9.070425e-04,3.463250e-03,6.843206e-03,9.699217e-03,1.068449e-02,9.049776e-03,5.057021e-03,-1.671206e-12,-4.231486e-03,-5.912910e-03,-4.278546e-03,2.647524e-12,4.905358e-03,7.774576e-03,6.384466e-03,-2.068622e-12,-1.007746e-02,-2.077116e-02,-2.830109e-02,-2.972115e-02,-2.433009e-02,-1.433701e-02,-4.390747e-03,-3.184622e-18,-5.329302e-03,-2.117136e-02,-4.392744e-02,-6.613334e-02,-7.853441e-02,-7.312556e-02,-4.615331e-02,2.560531e-12,5.681373e-02,1.116558e-01,1.512835e-01,1.657257e-01,1.512835e-01,1.116558e-01,5.681373e-02,2.560531e-12,-4.615331e-02,-7.312556e-02,-7.853441e-02,-6.613334e-02,-4.392744e-02,-2.117136e-02,-5.329302e-03,-3.184622e-18,-4.390747e-03,-1.433701e-02,-2.433009e-02,-2.972115e-02,-2.830109e-02,-2.077116e-02,-1.007746e-02,-2.068622e-12,6.384466e-03,7.774576e-03,4.905358e-03,2.647524e-12,-4.278546e-03,-5.912910e-03,-4.231486e-03,-1.671206e-12,5.057021e-03,9.049776e-03,1.068449e-02,9.699217e-03,6.843206e-03,3.463250e-03,9.070425e-04,0.000000e+00,7.920460e-04,2.640536e-03,4.554894e-03,5.634462e-03,5.415191e-03,3.999894e-03,1.948136e-03,8.812162e-13,-1.235811e-03,-1.501693e-03,-9.439722e-04,-1.013718e-12,8.138348e-04,1.116142e-03,7.918088e-04,5.751529e-13,-9.272316e-04,-1.640422e-03,-1.913206e-03,-1.714456e-03,-1.193288e-03,-5.953882e-04,-1.536484e-04,0.000000e+00};

void matrix_init(uint32_t numRow, uint32_t numCol, uint16_t* matrix, arm_matrix_instance_q15* instance, uint32_t offset){
 8000704:	b590      	push	{r4, r7, lr}
 8000706:	b087      	sub	sp, #28
 8000708:	af00      	add	r7, sp, #0
 800070a:	60f8      	str	r0, [r7, #12]
 800070c:	60b9      	str	r1, [r7, #8]
 800070e:	607a      	str	r2, [r7, #4]
 8000710:	603b      	str	r3, [r7, #0]

	for(uint32_t i = 0; i < 2; i++){
 8000712:	2300      	movs	r3, #0
 8000714:	617b      	str	r3, [r7, #20]
 8000716:	e014      	b.n	8000742 <matrix_init+0x3e>
		arm_mat_init_q15(&instance[i], numRow, numCol, (q15_t*)&matrix[offset*i]);
 8000718:	697b      	ldr	r3, [r7, #20]
 800071a:	00db      	lsls	r3, r3, #3
 800071c:	683a      	ldr	r2, [r7, #0]
 800071e:	18d0      	adds	r0, r2, r3
 8000720:	68fb      	ldr	r3, [r7, #12]
 8000722:	b299      	uxth	r1, r3
 8000724:	68bb      	ldr	r3, [r7, #8]
 8000726:	b29c      	uxth	r4, r3
 8000728:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800072a:	697a      	ldr	r2, [r7, #20]
 800072c:	fb02 f303 	mul.w	r3, r2, r3
 8000730:	005b      	lsls	r3, r3, #1
 8000732:	687a      	ldr	r2, [r7, #4]
 8000734:	4413      	add	r3, r2
 8000736:	4622      	mov	r2, r4
 8000738:	f00a fa97 	bl	800ac6a <arm_mat_init_q15>
	for(uint32_t i = 0; i < 2; i++){
 800073c:	697b      	ldr	r3, [r7, #20]
 800073e:	3301      	adds	r3, #1
 8000740:	617b      	str	r3, [r7, #20]
 8000742:	697b      	ldr	r3, [r7, #20]
 8000744:	2b01      	cmp	r3, #1
 8000746:	d9e7      	bls.n	8000718 <matrix_init+0x14>
	}
}
 8000748:	bf00      	nop
 800074a:	bf00      	nop
 800074c:	371c      	adds	r7, #28
 800074e:	46bd      	mov	sp, r7
 8000750:	bd90      	pop	{r4, r7, pc}
	...

08000754 <FIR_Filter_Init>:

void FIR_Filter_Init(dsp_buffer_t* buff, uint32_t channelNumber){
 8000754:	b580      	push	{r7, lr}
 8000756:	b086      	sub	sp, #24
 8000758:	af02      	add	r7, sp, #8
 800075a:	6078      	str	r0, [r7, #4]
 800075c:	6039      	str	r1, [r7, #0]
	for(uint32_t i = 0; i < channelNumber; i++){
 800075e:	2300      	movs	r3, #0
 8000760:	60fb      	str	r3, [r7, #12]
 8000762:	e019      	b.n	8000798 <FIR_Filter_Init+0x44>
		arm_fir_init_f32(buff[i].lpFilter_inst, TAPS, &coeff[0], buff[i].state, BLOCK_SIZE);
 8000764:	68fb      	ldr	r3, [r7, #12]
 8000766:	f44f 62bc 	mov.w	r2, #1504	; 0x5e0
 800076a:	fb02 f303 	mul.w	r3, r2, r3
 800076e:	687a      	ldr	r2, [r7, #4]
 8000770:	4413      	add	r3, r2
 8000772:	6818      	ldr	r0, [r3, #0]
 8000774:	68fb      	ldr	r3, [r7, #12]
 8000776:	f44f 62bc 	mov.w	r2, #1504	; 0x5e0
 800077a:	fb02 f303 	mul.w	r3, r2, r3
 800077e:	687a      	ldr	r2, [r7, #4]
 8000780:	4413      	add	r3, r2
 8000782:	3304      	adds	r3, #4
 8000784:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000788:	9200      	str	r2, [sp, #0]
 800078a:	4a08      	ldr	r2, [pc, #32]	; (80007ac <FIR_Filter_Init+0x58>)
 800078c:	2178      	movs	r1, #120	; 0x78
 800078e:	f00a fa4d 	bl	800ac2c <arm_fir_init_f32>
	for(uint32_t i = 0; i < channelNumber; i++){
 8000792:	68fb      	ldr	r3, [r7, #12]
 8000794:	3301      	adds	r3, #1
 8000796:	60fb      	str	r3, [r7, #12]
 8000798:	68fa      	ldr	r2, [r7, #12]
 800079a:	683b      	ldr	r3, [r7, #0]
 800079c:	429a      	cmp	r2, r3
 800079e:	d3e1      	bcc.n	8000764 <FIR_Filter_Init+0x10>
	}
}
 80007a0:	bf00      	nop
 80007a2:	bf00      	nop
 80007a4:	3710      	adds	r7, #16
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	0800cfb8 	.word	0x0800cfb8

080007b0 <FIR_Filter>:

void FIR_Filter(dsp_buffer_t* dsp, float (*input)[BLOCK_SIZE], float (*output)[BLOCK_SIZE] , uint32_t channelNumber){
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b086      	sub	sp, #24
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	60f8      	str	r0, [r7, #12]
 80007b8:	60b9      	str	r1, [r7, #8]
 80007ba:	607a      	str	r2, [r7, #4]
 80007bc:	603b      	str	r3, [r7, #0]
	for(uint32_t i = 0; i < channelNumber; i++){
 80007be:	2300      	movs	r3, #0
 80007c0:	617b      	str	r3, [r7, #20]
 80007c2:	e018      	b.n	80007f6 <FIR_Filter+0x46>
		arm_fir_f32(dsp[i].lpFilter_inst, &input[i][0], &output[i][0], BLOCK_SIZE);
 80007c4:	697b      	ldr	r3, [r7, #20]
 80007c6:	f44f 62bc 	mov.w	r2, #1504	; 0x5e0
 80007ca:	fb02 f303 	mul.w	r3, r2, r3
 80007ce:	68fa      	ldr	r2, [r7, #12]
 80007d0:	4413      	add	r3, r2
 80007d2:	6818      	ldr	r0, [r3, #0]
 80007d4:	697b      	ldr	r3, [r7, #20]
 80007d6:	029b      	lsls	r3, r3, #10
 80007d8:	68ba      	ldr	r2, [r7, #8]
 80007da:	4413      	add	r3, r2
 80007dc:	4619      	mov	r1, r3
 80007de:	697b      	ldr	r3, [r7, #20]
 80007e0:	029b      	lsls	r3, r3, #10
 80007e2:	687a      	ldr	r2, [r7, #4]
 80007e4:	4413      	add	r3, r2
 80007e6:	461a      	mov	r2, r3
 80007e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80007ec:	f00a f9ae 	bl	800ab4c <arm_fir_f32>
	for(uint32_t i = 0; i < channelNumber; i++){
 80007f0:	697b      	ldr	r3, [r7, #20]
 80007f2:	3301      	adds	r3, #1
 80007f4:	617b      	str	r3, [r7, #20]
 80007f6:	697a      	ldr	r2, [r7, #20]
 80007f8:	683b      	ldr	r3, [r7, #0]
 80007fa:	429a      	cmp	r2, r3
 80007fc:	d3e2      	bcc.n	80007c4 <FIR_Filter+0x14>
	}
}
 80007fe:	bf00      	nop
 8000800:	bf00      	nop
 8000802:	3718      	adds	r7, #24
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}

08000808 <Q15_To_Float>:
	for(uint32_t i = 0; i < channelNumber; i++){
		arm_rfft_fast_init_f32(&fft_instance[i], FFT_LEN);
	}
}

void Q15_To_Float(q15_t (*q15)[Q15_FLOAT_LEN], float (*flt)[Q15_FLOAT_LEN], uint32_t channelNumber){
 8000808:	b580      	push	{r7, lr}
 800080a:	b086      	sub	sp, #24
 800080c:	af00      	add	r7, sp, #0
 800080e:	60f8      	str	r0, [r7, #12]
 8000810:	60b9      	str	r1, [r7, #8]
 8000812:	607a      	str	r2, [r7, #4]
	for(uint32_t i = 0; i < channelNumber; i++){
 8000814:	2300      	movs	r3, #0
 8000816:	617b      	str	r3, [r7, #20]
 8000818:	e010      	b.n	800083c <Q15_To_Float+0x34>
		arm_q15_to_float(&q15[i][0], &flt[i][0], Q15_FLOAT_LEN);
 800081a:	697b      	ldr	r3, [r7, #20]
 800081c:	025b      	lsls	r3, r3, #9
 800081e:	68fa      	ldr	r2, [r7, #12]
 8000820:	4413      	add	r3, r2
 8000822:	4618      	mov	r0, r3
 8000824:	697b      	ldr	r3, [r7, #20]
 8000826:	029b      	lsls	r3, r3, #10
 8000828:	68ba      	ldr	r2, [r7, #8]
 800082a:	4413      	add	r3, r2
 800082c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000830:	4619      	mov	r1, r3
 8000832:	f00a faa7 	bl	800ad84 <arm_q15_to_float>
	for(uint32_t i = 0; i < channelNumber; i++){
 8000836:	697b      	ldr	r3, [r7, #20]
 8000838:	3301      	adds	r3, #1
 800083a:	617b      	str	r3, [r7, #20]
 800083c:	697a      	ldr	r2, [r7, #20]
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	429a      	cmp	r2, r3
 8000842:	d3ea      	bcc.n	800081a <Q15_To_Float+0x12>
	}
}
 8000844:	bf00      	nop
 8000846:	bf00      	nop
 8000848:	3718      	adds	r7, #24
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}

0800084e <Float_To_Q15>:

void Float_To_Q15(float (*flt)[Q15_FLOAT_LEN], q15_t (*q15)[Q15_FLOAT_LEN], uint32_t channelNumber){
 800084e:	b580      	push	{r7, lr}
 8000850:	b086      	sub	sp, #24
 8000852:	af00      	add	r7, sp, #0
 8000854:	60f8      	str	r0, [r7, #12]
 8000856:	60b9      	str	r1, [r7, #8]
 8000858:	607a      	str	r2, [r7, #4]
	for(uint32_t i = 0; i < channelNumber; i++){
 800085a:	2300      	movs	r3, #0
 800085c:	617b      	str	r3, [r7, #20]
 800085e:	e010      	b.n	8000882 <Float_To_Q15+0x34>
		arm_float_to_q15(&flt[i][0], &q15[i][0], Q15_FLOAT_LEN);
 8000860:	697b      	ldr	r3, [r7, #20]
 8000862:	029b      	lsls	r3, r3, #10
 8000864:	68fa      	ldr	r2, [r7, #12]
 8000866:	4413      	add	r3, r2
 8000868:	4618      	mov	r0, r3
 800086a:	697b      	ldr	r3, [r7, #20]
 800086c:	025b      	lsls	r3, r3, #9
 800086e:	68ba      	ldr	r2, [r7, #8]
 8000870:	4413      	add	r3, r2
 8000872:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000876:	4619      	mov	r1, r3
 8000878:	f00a fa52 	bl	800ad20 <arm_float_to_q15>
	for(uint32_t i = 0; i < channelNumber; i++){
 800087c:	697b      	ldr	r3, [r7, #20]
 800087e:	3301      	adds	r3, #1
 8000880:	617b      	str	r3, [r7, #20]
 8000882:	697a      	ldr	r2, [r7, #20]
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	429a      	cmp	r2, r3
 8000888:	d3ea      	bcc.n	8000860 <Float_To_Q15+0x12>
	}
}
 800088a:	bf00      	nop
 800088c:	bf00      	nop
 800088e:	3718      	adds	r7, #24
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}

08000894 <pdm_to_pcm_init>:
 */


#include "pdm_to_pcm.h"

void pdm_to_pcm_init(PDM_Filter_Handler_t* PDM_FilterHandler, PDM_Filter_Config_t* PDM_FilterConfig, uint32_t channelNumber){
 8000894:	b580      	push	{r7, lr}
 8000896:	b086      	sub	sp, #24
 8000898:	af00      	add	r7, sp, #0
 800089a:	60f8      	str	r0, [r7, #12]
 800089c:	60b9      	str	r1, [r7, #8]
 800089e:	607a      	str	r2, [r7, #4]

	  for(uint32_t index = 0; index < channelNumber; index++)
 80008a0:	2300      	movs	r3, #0
 80008a2:	617b      	str	r3, [r7, #20]
 80008a4:	e064      	b.n	8000970 <pdm_to_pcm_init+0xdc>
	  {
	    /* Init PDM filters */
	    PDM_FilterHandler[index].bit_order  = PDM_FILTER_BIT_ORDER_MSB;
 80008a6:	697b      	ldr	r3, [r7, #20]
 80008a8:	224c      	movs	r2, #76	; 0x4c
 80008aa:	fb02 f303 	mul.w	r3, r2, r3
 80008ae:	68fa      	ldr	r2, [r7, #12]
 80008b0:	4413      	add	r3, r2
 80008b2:	2201      	movs	r2, #1
 80008b4:	801a      	strh	r2, [r3, #0]
	    PDM_FilterHandler[index].endianness = PDM_FILTER_ENDIANNESS_LE;
 80008b6:	697b      	ldr	r3, [r7, #20]
 80008b8:	224c      	movs	r2, #76	; 0x4c
 80008ba:	fb02 f303 	mul.w	r3, r2, r3
 80008be:	68fa      	ldr	r2, [r7, #12]
 80008c0:	4413      	add	r3, r2
 80008c2:	2200      	movs	r2, #0
 80008c4:	805a      	strh	r2, [r3, #2]
	    PDM_FilterHandler[index].high_pass_tap = HIGH_PASS;
 80008c6:	697b      	ldr	r3, [r7, #20]
 80008c8:	224c      	movs	r2, #76	; 0x4c
 80008ca:	fb02 f303 	mul.w	r3, r2, r3
 80008ce:	68fa      	ldr	r2, [r7, #12]
 80008d0:	4413      	add	r3, r2
 80008d2:	2200      	movs	r2, #0
 80008d4:	605a      	str	r2, [r3, #4]
	    PDM_FilterHandler[index].out_ptr_channels = 1;
 80008d6:	697b      	ldr	r3, [r7, #20]
 80008d8:	224c      	movs	r2, #76	; 0x4c
 80008da:	fb02 f303 	mul.w	r3, r2, r3
 80008de:	68fa      	ldr	r2, [r7, #12]
 80008e0:	4413      	add	r3, r2
 80008e2:	2201      	movs	r2, #1
 80008e4:	815a      	strh	r2, [r3, #10]
	    PDM_FilterHandler[index].in_ptr_channels  = channelNumber;
 80008e6:	697b      	ldr	r3, [r7, #20]
 80008e8:	224c      	movs	r2, #76	; 0x4c
 80008ea:	fb02 f303 	mul.w	r3, r2, r3
 80008ee:	68fa      	ldr	r2, [r7, #12]
 80008f0:	4413      	add	r3, r2
 80008f2:	687a      	ldr	r2, [r7, #4]
 80008f4:	b292      	uxth	r2, r2
 80008f6:	811a      	strh	r2, [r3, #8]
	    PDM_Filter_Init((PDM_Filter_Handler_t *)(&PDM_FilterHandler[index]));
 80008f8:	697b      	ldr	r3, [r7, #20]
 80008fa:	224c      	movs	r2, #76	; 0x4c
 80008fc:	fb02 f303 	mul.w	r3, r2, r3
 8000900:	68fa      	ldr	r2, [r7, #12]
 8000902:	4413      	add	r3, r2
 8000904:	4618      	mov	r0, r3
 8000906:	f00b ff4b 	bl	800c7a0 <PDM_Filter_Init>

	    /* Configure PDM filters */
	    PDM_FilterConfig[index].output_samples_number = PCM_CHUNK_SIZE;
 800090a:	697a      	ldr	r2, [r7, #20]
 800090c:	4613      	mov	r3, r2
 800090e:	005b      	lsls	r3, r3, #1
 8000910:	4413      	add	r3, r2
 8000912:	005b      	lsls	r3, r3, #1
 8000914:	461a      	mov	r2, r3
 8000916:	68bb      	ldr	r3, [r7, #8]
 8000918:	4413      	add	r3, r2
 800091a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800091e:	805a      	strh	r2, [r3, #2]
	    PDM_FilterConfig[index].mic_gain = MIC_GAIN;
 8000920:	697a      	ldr	r2, [r7, #20]
 8000922:	4613      	mov	r3, r2
 8000924:	005b      	lsls	r3, r3, #1
 8000926:	4413      	add	r3, r2
 8000928:	005b      	lsls	r3, r3, #1
 800092a:	461a      	mov	r2, r3
 800092c:	68bb      	ldr	r3, [r7, #8]
 800092e:	4413      	add	r3, r2
 8000930:	2214      	movs	r2, #20
 8000932:	809a      	strh	r2, [r3, #4]
	    PDM_FilterConfig[index].decimation_factor = DECIMATION;
 8000934:	697a      	ldr	r2, [r7, #20]
 8000936:	4613      	mov	r3, r2
 8000938:	005b      	lsls	r3, r3, #1
 800093a:	4413      	add	r3, r2
 800093c:	005b      	lsls	r3, r3, #1
 800093e:	461a      	mov	r2, r3
 8000940:	68bb      	ldr	r3, [r7, #8]
 8000942:	4413      	add	r3, r2
 8000944:	2202      	movs	r2, #2
 8000946:	801a      	strh	r2, [r3, #0]
	    PDM_Filter_setConfig((PDM_Filter_Handler_t*)&PDM_FilterHandler[index], (PDM_Filter_Config_t*)&PDM_FilterConfig[index]);
 8000948:	697b      	ldr	r3, [r7, #20]
 800094a:	224c      	movs	r2, #76	; 0x4c
 800094c:	fb02 f303 	mul.w	r3, r2, r3
 8000950:	68fa      	ldr	r2, [r7, #12]
 8000952:	18d0      	adds	r0, r2, r3
 8000954:	697a      	ldr	r2, [r7, #20]
 8000956:	4613      	mov	r3, r2
 8000958:	005b      	lsls	r3, r3, #1
 800095a:	4413      	add	r3, r2
 800095c:	005b      	lsls	r3, r3, #1
 800095e:	461a      	mov	r2, r3
 8000960:	68bb      	ldr	r3, [r7, #8]
 8000962:	4413      	add	r3, r2
 8000964:	4619      	mov	r1, r3
 8000966:	f00b ffeb 	bl	800c940 <PDM_Filter_setConfig>
	  for(uint32_t index = 0; index < channelNumber; index++)
 800096a:	697b      	ldr	r3, [r7, #20]
 800096c:	3301      	adds	r3, #1
 800096e:	617b      	str	r3, [r7, #20]
 8000970:	697a      	ldr	r2, [r7, #20]
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	429a      	cmp	r2, r3
 8000976:	d396      	bcc.n	80008a6 <pdm_to_pcm_init+0x12>
	  }
}
 8000978:	bf00      	nop
 800097a:	bf00      	nop
 800097c:	3718      	adds	r7, #24
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}
	...

08000984 <pdm_to_pcm>:

void pdm_to_pcm(PDM_Filter_Handler_t* PDM_FilterHandler, uint8_t *pdm, uint16_t (*pcm)[PCM_CHUNK_SIZE],  uint32_t channelNumber){
 8000984:	b580      	push	{r7, lr}
 8000986:	b08a      	sub	sp, #40	; 0x28
 8000988:	af00      	add	r7, sp, #0
 800098a:	60f8      	str	r0, [r7, #12]
 800098c:	60b9      	str	r1, [r7, #8]
 800098e:	607a      	str	r2, [r7, #4]
 8000990:	603b      	str	r3, [r7, #0]
 8000992:	68bb      	ldr	r3, [r7, #8]
 8000994:	623b      	str	r3, [r7, #32]
 8000996:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800099a:	61fb      	str	r3, [r7, #28]
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_InvalidateDCache_by_Addr (void *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 800099c:	69fb      	ldr	r3, [r7, #28]
 800099e:	2b00      	cmp	r3, #0
 80009a0:	dd1d      	ble.n	80009de <pdm_to_pcm+0x5a>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 80009a2:	6a3b      	ldr	r3, [r7, #32]
 80009a4:	f003 021f 	and.w	r2, r3, #31
 80009a8:	69fb      	ldr	r3, [r7, #28]
 80009aa:	4413      	add	r3, r2
 80009ac:	61bb      	str	r3, [r7, #24]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 80009ae:	6a3b      	ldr	r3, [r7, #32]
 80009b0:	617b      	str	r3, [r7, #20]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80009b2:	f3bf 8f4f 	dsb	sy
}
 80009b6:	bf00      	nop
    
      __DSB();

      do {
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 80009b8:	4a19      	ldr	r2, [pc, #100]	; (8000a20 <pdm_to_pcm+0x9c>)
 80009ba:	697b      	ldr	r3, [r7, #20]
 80009bc:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 80009c0:	697b      	ldr	r3, [r7, #20]
 80009c2:	3320      	adds	r3, #32
 80009c4:	617b      	str	r3, [r7, #20]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 80009c6:	69bb      	ldr	r3, [r7, #24]
 80009c8:	3b20      	subs	r3, #32
 80009ca:	61bb      	str	r3, [r7, #24]
      } while ( op_size > 0 );
 80009cc:	69bb      	ldr	r3, [r7, #24]
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	dcf2      	bgt.n	80009b8 <pdm_to_pcm+0x34>
  __ASM volatile ("dsb 0xF":::"memory");
 80009d2:	f3bf 8f4f 	dsb	sy
}
 80009d6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80009d8:	f3bf 8f6f 	isb	sy
}
 80009dc:	bf00      	nop

      __DSB();
      __ISB();
    }
  #endif
}
 80009de:	bf00      	nop

	SCB_InvalidateDCache_by_Addr((uint32_t*)&pdm[0], (uint32_t)((float)BUFFER_SIZE*((float)CHANNEL_NUMBER/2.0)));

	for(uint32_t i = 0; i < channelNumber; i++){
 80009e0:	2300      	movs	r3, #0
 80009e2:	627b      	str	r3, [r7, #36]	; 0x24
 80009e4:	e013      	b.n	8000a0e <pdm_to_pcm+0x8a>
		PDM_Filter(&pdm[i], &pcm[i][0], &PDM_FilterHandler[i]);
 80009e6:	68ba      	ldr	r2, [r7, #8]
 80009e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009ea:	18d0      	adds	r0, r2, r3
 80009ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009ee:	025b      	lsls	r3, r3, #9
 80009f0:	687a      	ldr	r2, [r7, #4]
 80009f2:	4413      	add	r3, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009f8:	224c      	movs	r2, #76	; 0x4c
 80009fa:	fb02 f303 	mul.w	r3, r2, r3
 80009fe:	68fa      	ldr	r2, [r7, #12]
 8000a00:	4413      	add	r3, r2
 8000a02:	461a      	mov	r2, r3
 8000a04:	f00c f896 	bl	800cb34 <PDM_Filter>
	for(uint32_t i = 0; i < channelNumber; i++){
 8000a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a0a:	3301      	adds	r3, #1
 8000a0c:	627b      	str	r3, [r7, #36]	; 0x24
 8000a0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a10:	683b      	ldr	r3, [r7, #0]
 8000a12:	429a      	cmp	r2, r3
 8000a14:	d3e7      	bcc.n	80009e6 <pdm_to_pcm+0x62>
	}


}
 8000a16:	bf00      	nop
 8000a18:	bf00      	nop
 8000a1a:	3728      	adds	r7, #40	; 0x28
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	e000ed00 	.word	0xe000ed00

08000a24 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b088      	sub	sp, #32
 8000a28:	af02      	add	r7, sp, #8
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000a2a:	4ba9      	ldr	r3, [pc, #676]	; (8000cd0 <main+0x2ac>)
 8000a2c:	695b      	ldr	r3, [r3, #20]
 8000a2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d11b      	bne.n	8000a6e <main+0x4a>
  __ASM volatile ("dsb 0xF":::"memory");
 8000a36:	f3bf 8f4f 	dsb	sy
}
 8000a3a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000a3c:	f3bf 8f6f 	isb	sy
}
 8000a40:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000a42:	4ba3      	ldr	r3, [pc, #652]	; (8000cd0 <main+0x2ac>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000a4a:	f3bf 8f4f 	dsb	sy
}
 8000a4e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000a50:	f3bf 8f6f 	isb	sy
}
 8000a54:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000a56:	4b9e      	ldr	r3, [pc, #632]	; (8000cd0 <main+0x2ac>)
 8000a58:	695b      	ldr	r3, [r3, #20]
 8000a5a:	4a9d      	ldr	r2, [pc, #628]	; (8000cd0 <main+0x2ac>)
 8000a5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a60:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000a62:	f3bf 8f4f 	dsb	sy
}
 8000a66:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000a68:	f3bf 8f6f 	isb	sy
}
 8000a6c:	e000      	b.n	8000a70 <main+0x4c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000a6e:	bf00      	nop
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000a70:	4b97      	ldr	r3, [pc, #604]	; (8000cd0 <main+0x2ac>)
 8000a72:	695b      	ldr	r3, [r3, #20]
 8000a74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d138      	bne.n	8000aee <main+0xca>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000a7c:	4b94      	ldr	r3, [pc, #592]	; (8000cd0 <main+0x2ac>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000a84:	f3bf 8f4f 	dsb	sy
}
 8000a88:	bf00      	nop
    ccsidr = SCB->CCSIDR;
 8000a8a:	4b91      	ldr	r3, [pc, #580]	; (8000cd0 <main+0x2ac>)
 8000a8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000a90:	613b      	str	r3, [r7, #16]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000a92:	693b      	ldr	r3, [r7, #16]
 8000a94:	0b5b      	lsrs	r3, r3, #13
 8000a96:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000a9a:	60fb      	str	r3, [r7, #12]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000a9c:	693b      	ldr	r3, [r7, #16]
 8000a9e:	08db      	lsrs	r3, r3, #3
 8000aa0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000aa4:	60bb      	str	r3, [r7, #8]
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000aa6:	68fb      	ldr	r3, [r7, #12]
 8000aa8:	015a      	lsls	r2, r3, #5
 8000aaa:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000aae:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000ab0:	68ba      	ldr	r2, [r7, #8]
 8000ab2:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000ab4:	4986      	ldr	r1, [pc, #536]	; (8000cd0 <main+0x2ac>)
 8000ab6:	4313      	orrs	r3, r2
 8000ab8:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
      } while (ways-- != 0U);
 8000abc:	68bb      	ldr	r3, [r7, #8]
 8000abe:	1e5a      	subs	r2, r3, #1
 8000ac0:	60ba      	str	r2, [r7, #8]
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d1ef      	bne.n	8000aa6 <main+0x82>
    } while(sets-- != 0U);
 8000ac6:	68fb      	ldr	r3, [r7, #12]
 8000ac8:	1e5a      	subs	r2, r3, #1
 8000aca:	60fa      	str	r2, [r7, #12]
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d1e5      	bne.n	8000a9c <main+0x78>
  __ASM volatile ("dsb 0xF":::"memory");
 8000ad0:	f3bf 8f4f 	dsb	sy
}
 8000ad4:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000ad6:	4b7e      	ldr	r3, [pc, #504]	; (8000cd0 <main+0x2ac>)
 8000ad8:	695b      	ldr	r3, [r3, #20]
 8000ada:	4a7d      	ldr	r2, [pc, #500]	; (8000cd0 <main+0x2ac>)
 8000adc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ae0:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000ae2:	f3bf 8f4f 	dsb	sy
}
 8000ae6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000ae8:	f3bf 8f6f 	isb	sy
}
 8000aec:	e000      	b.n	8000af0 <main+0xcc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000aee:	bf00      	nop

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000af0:	f000 fe0a 	bl	8001708 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000af4:	f000 f90a 	bl	8000d0c <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000af8:	4b76      	ldr	r3, [pc, #472]	; (8000cd4 <main+0x2b0>)
 8000afa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000afe:	4a75      	ldr	r2, [pc, #468]	; (8000cd4 <main+0x2b0>)
 8000b00:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000b04:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b08:	4b72      	ldr	r3, [pc, #456]	; (8000cd4 <main+0x2b0>)
 8000b0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000b12:	607b      	str	r3, [r7, #4]
 8000b14:	687b      	ldr	r3, [r7, #4]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000b16:	2000      	movs	r0, #0
 8000b18:	f004 f8a8 	bl	8004c6c <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000b1c:	2100      	movs	r1, #0
 8000b1e:	2000      	movs	r0, #0
 8000b20:	f004 f8be 	bl	8004ca0 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000b24:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000b28:	617b      	str	r3, [r7, #20]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000b2a:	bf00      	nop
 8000b2c:	4b69      	ldr	r3, [pc, #420]	; (8000cd4 <main+0x2b0>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d104      	bne.n	8000b42 <main+0x11e>
 8000b38:	697b      	ldr	r3, [r7, #20]
 8000b3a:	1e5a      	subs	r2, r3, #1
 8000b3c:	617a      	str	r2, [r7, #20]
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	dcf4      	bgt.n	8000b2c <main+0x108>
if ( timeout < 0 )
 8000b42:	697b      	ldr	r3, [r7, #20]
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	da01      	bge.n	8000b4c <main+0x128>
{
Error_Handler();
 8000b48:	f000 fb78 	bl	800123c <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b4c:	f000 fac0 	bl	80010d0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000b50:	f000 fa96 	bl	8001080 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8000b54:	f000 fa44 	bl	8000fe0 <MX_USART3_UART_Init>
  MX_CRC_Init();
 8000b58:	f000 f95c 	bl	8000e14 <MX_CRC_Init>
  MX_SAI1_Init();
 8000b5c:	f000 f984 	bl	8000e68 <MX_SAI1_Init>
  MX_TIM1_Init();
 8000b60:	f000 f9e4 	bl	8000f2c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  matrix_init(CHANNEL_NUMBER, PCM_CHUNK_SIZE, (uint16_t*)&buffer->pcmBuffer[0][0], &pcmMatrix[0], PCM_CHUNK_SIZE*CHANNEL_NUMBER);
 8000b64:	4b5c      	ldr	r3, [pc, #368]	; (8000cd8 <main+0x2b4>)
 8000b66:	f503 5200 	add.w	r2, r3, #8192	; 0x2000
 8000b6a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b6e:	9300      	str	r3, [sp, #0]
 8000b70:	4b5a      	ldr	r3, [pc, #360]	; (8000cdc <main+0x2b8>)
 8000b72:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b76:	2002      	movs	r0, #2
 8000b78:	f7ff fdc4 	bl	8000704 <matrix_init>
  matrix_init(PCM_CHUNK_SIZE, CHANNEL_NUMBER, (uint16_t*)&buffer->pcmBuffer_Trans[0][0], &pcmMatrix_Trans[0], PCM_CHUNK_SIZE*CHANNEL_NUMBER);
 8000b7c:	4b56      	ldr	r3, [pc, #344]	; (8000cd8 <main+0x2b4>)
 8000b7e:	f503 5220 	add.w	r2, r3, #10240	; 0x2800
 8000b82:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b86:	9300      	str	r3, [sp, #0]
 8000b88:	4b55      	ldr	r3, [pc, #340]	; (8000ce0 <main+0x2bc>)
 8000b8a:	2102      	movs	r1, #2
 8000b8c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000b90:	f7ff fdb8 	bl	8000704 <matrix_init>

  FIR_Filter_Init(&dsp[0], CHANNEL_NUMBER);
 8000b94:	2102      	movs	r1, #2
 8000b96:	4853      	ldr	r0, [pc, #332]	; (8000ce4 <main+0x2c0>)
 8000b98:	f7ff fddc 	bl	8000754 <FIR_Filter_Init>

  pdm_to_pcm_init((PDM_Filter_Handler_t*)&PDM_FilterHandler[0], (PDM_Filter_Config_t*)&PDM_FilterConfig[0], CHANNEL_NUMBER);
 8000b9c:	2202      	movs	r2, #2
 8000b9e:	4952      	ldr	r1, [pc, #328]	; (8000ce8 <main+0x2c4>)
 8000ba0:	4852      	ldr	r0, [pc, #328]	; (8000cec <main+0x2c8>)
 8000ba2:	f7ff fe77 	bl	8000894 <pdm_to_pcm_init>

  timFlag = NONE;
 8000ba6:	4b52      	ldr	r3, [pc, #328]	; (8000cf0 <main+0x2cc>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  HAL_SAI_Receive_DMA(&hsai_BlockA1, (uint8_t*)&buffer->pdmBuffer[0], BUFFER_SIZE);
 8000bac:	4b4a      	ldr	r3, [pc, #296]	; (8000cd8 <main+0x2b4>)
 8000bae:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	484f      	ldr	r0, [pc, #316]	; (8000cf4 <main+0x2d0>)
 8000bb6:	f007 fca3 	bl	8008500 <HAL_SAI_Receive_DMA>

  HAL_Delay(2000);
 8000bba:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000bbe:	f000 fe35 	bl	800182c <HAL_Delay>

  HAL_TIM_Base_Start_IT(&htim1);
 8000bc2:	484d      	ldr	r0, [pc, #308]	; (8000cf8 <main+0x2d4>)
 8000bc4:	f007 fe70 	bl	80088a8 <HAL_TIM_Base_Start_IT>

  while (timFlag != DONE){
 8000bc8:	e07a      	b.n	8000cc0 <main+0x29c>

	  //================
	  //Wait for Half of the buffer to be filled
	  while(dmaFlag != HALF){}
 8000bca:	bf00      	nop
 8000bcc:	4b4b      	ldr	r3, [pc, #300]	; (8000cfc <main+0x2d8>)
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	b2db      	uxtb	r3, r3
 8000bd2:	2b04      	cmp	r3, #4
 8000bd4:	d1fa      	bne.n	8000bcc <main+0x1a8>
	  //Reset Flag
	  dmaFlag = NONE;
 8000bd6:	4b49      	ldr	r3, [pc, #292]	; (8000cfc <main+0x2d8>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	701a      	strb	r2, [r3, #0]
	  //Filter PDM to PCM
	  pdm_to_pcm(&PDM_FilterHandler[0],	(uint8_t*)&buffer->pdmBuffer[0], (uint16_t(*)[PCM_CHUNK_SIZE])&buffer->pcmBuffer[0][0], CHANNEL_NUMBER);
 8000bdc:	4b3e      	ldr	r3, [pc, #248]	; (8000cd8 <main+0x2b4>)
 8000bde:	4619      	mov	r1, r3
 8000be0:	4b3d      	ldr	r3, [pc, #244]	; (8000cd8 <main+0x2b4>)
 8000be2:	f503 5200 	add.w	r2, r3, #8192	; 0x2000
 8000be6:	2302      	movs	r3, #2
 8000be8:	4840      	ldr	r0, [pc, #256]	; (8000cec <main+0x2c8>)
 8000bea:	f7ff fecb 	bl	8000984 <pdm_to_pcm>
	  //Q15 to Float
	  Q15_To_Float((q15_t(*)[PCM_CHUNK_SIZE])&buffer->pcmBuffer[0][0], (float(*)[PCM_CHUNK_SIZE])&buffer->pcmBuffer_flt[0][0], CHANNEL_NUMBER);
 8000bee:	4b3a      	ldr	r3, [pc, #232]	; (8000cd8 <main+0x2b4>)
 8000bf0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8000bf4:	4a38      	ldr	r2, [pc, #224]	; (8000cd8 <main+0x2b4>)
 8000bf6:	f502 5140 	add.w	r1, r2, #12288	; 0x3000
 8000bfa:	2202      	movs	r2, #2
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	f7ff fe03 	bl	8000808 <Q15_To_Float>
	  //FIR Filter
	  FIR_Filter(&dsp[0], (float(*)[PCM_CHUNK_SIZE])&buffer->pcmBuffer_flt[0][0], (float(*)[PCM_CHUNK_SIZE])&buffer->pcmBuffer_flt[0][0], CHANNEL_NUMBER);
 8000c02:	4b35      	ldr	r3, [pc, #212]	; (8000cd8 <main+0x2b4>)
 8000c04:	f503 5140 	add.w	r1, r3, #12288	; 0x3000
 8000c08:	4b33      	ldr	r3, [pc, #204]	; (8000cd8 <main+0x2b4>)
 8000c0a:	f503 5240 	add.w	r2, r3, #12288	; 0x3000
 8000c0e:	2302      	movs	r3, #2
 8000c10:	4834      	ldr	r0, [pc, #208]	; (8000ce4 <main+0x2c0>)
 8000c12:	f7ff fdcd 	bl	80007b0 <FIR_Filter>
	  //Float To Q15
	  Float_To_Q15((float(*)[PCM_CHUNK_SIZE])&buffer->pcmBuffer_flt[0][0], (q15_t(*)[PCM_CHUNK_SIZE])&buffer->pcmBuffer[0][0], CHANNEL_NUMBER);
 8000c16:	4b30      	ldr	r3, [pc, #192]	; (8000cd8 <main+0x2b4>)
 8000c18:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8000c1c:	4a2e      	ldr	r2, [pc, #184]	; (8000cd8 <main+0x2b4>)
 8000c1e:	f502 5100 	add.w	r1, r2, #8192	; 0x2000
 8000c22:	2202      	movs	r2, #2
 8000c24:	4618      	mov	r0, r3
 8000c26:	f7ff fe12 	bl	800084e <Float_To_Q15>
	  //Transpose
	  Transpose_Clean(&pcmMatrix[0], &pcmMatrix_Trans[0]);
 8000c2a:	492d      	ldr	r1, [pc, #180]	; (8000ce0 <main+0x2bc>)
 8000c2c:	482b      	ldr	r0, [pc, #172]	; (8000cdc <main+0x2b8>)
 8000c2e:	f000 fa97 	bl	8001160 <Transpose_Clean>
	  //Transmit PCM
	  HAL_UART_Transmit_DMA(&huart3, (uint8_t*)&buffer->pcmBuffer_Trans[0][0], 2*PCM_CHUNK_SIZE*CHANNEL_NUMBER);
 8000c32:	4b29      	ldr	r3, [pc, #164]	; (8000cd8 <main+0x2b4>)
 8000c34:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8000c38:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	4830      	ldr	r0, [pc, #192]	; (8000d00 <main+0x2dc>)
 8000c40:	f008 fb3a 	bl	80092b8 <HAL_UART_Transmit_DMA>
	  //================

	  //================
	  //Wait for the second Half of the buffer to be filled
	  while(dmaFlag != FULL){}
 8000c44:	bf00      	nop
 8000c46:	4b2d      	ldr	r3, [pc, #180]	; (8000cfc <main+0x2d8>)
 8000c48:	781b      	ldrb	r3, [r3, #0]
 8000c4a:	b2db      	uxtb	r3, r3
 8000c4c:	2b05      	cmp	r3, #5
 8000c4e:	d1fa      	bne.n	8000c46 <main+0x222>
	  //Reset Flag
	  dmaFlag = NONE;
 8000c50:	4b2a      	ldr	r3, [pc, #168]	; (8000cfc <main+0x2d8>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	701a      	strb	r2, [r3, #0]
	  //Filter PDM to PCM
	  pdm_to_pcm(&PDM_FilterHandler[0],	(uint8_t*)&buffer->pdmBuffer[BUFFER_SIZE/2], (uint16_t(*)[PCM_CHUNK_SIZE])&buffer->pcmBuffer[CHANNEL_NUMBER][0], CHANNEL_NUMBER);
 8000c56:	4b20      	ldr	r3, [pc, #128]	; (8000cd8 <main+0x2b4>)
 8000c58:	f503 5180 	add.w	r1, r3, #4096	; 0x1000
 8000c5c:	4b1e      	ldr	r3, [pc, #120]	; (8000cd8 <main+0x2b4>)
 8000c5e:	f503 5210 	add.w	r2, r3, #9216	; 0x2400
 8000c62:	2302      	movs	r3, #2
 8000c64:	4821      	ldr	r0, [pc, #132]	; (8000cec <main+0x2c8>)
 8000c66:	f7ff fe8d 	bl	8000984 <pdm_to_pcm>
	  //Q15 to Float
	  Q15_To_Float((q15_t(*)[PCM_CHUNK_SIZE])&buffer->pcmBuffer[CHANNEL_NUMBER][0], (float(*)[PCM_CHUNK_SIZE])&buffer->pcmBuffer_flt[CHANNEL_NUMBER][0], CHANNEL_NUMBER);
 8000c6a:	4b1b      	ldr	r3, [pc, #108]	; (8000cd8 <main+0x2b4>)
 8000c6c:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8000c70:	4a19      	ldr	r2, [pc, #100]	; (8000cd8 <main+0x2b4>)
 8000c72:	f502 5160 	add.w	r1, r2, #14336	; 0x3800
 8000c76:	2202      	movs	r2, #2
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f7ff fdc5 	bl	8000808 <Q15_To_Float>
	  //FIR Filter
	  FIR_Filter(&dsp[0], (float(*)[PCM_CHUNK_SIZE])&buffer->pcmBuffer_flt[CHANNEL_NUMBER][0], (float(*)[PCM_CHUNK_SIZE])&buffer->pcmBuffer_flt[CHANNEL_NUMBER][0], CHANNEL_NUMBER);
 8000c7e:	4b16      	ldr	r3, [pc, #88]	; (8000cd8 <main+0x2b4>)
 8000c80:	f503 5160 	add.w	r1, r3, #14336	; 0x3800
 8000c84:	4b14      	ldr	r3, [pc, #80]	; (8000cd8 <main+0x2b4>)
 8000c86:	f503 5260 	add.w	r2, r3, #14336	; 0x3800
 8000c8a:	2302      	movs	r3, #2
 8000c8c:	4815      	ldr	r0, [pc, #84]	; (8000ce4 <main+0x2c0>)
 8000c8e:	f7ff fd8f 	bl	80007b0 <FIR_Filter>
	  //Float To Q15
	  Float_To_Q15((float(*)[PCM_CHUNK_SIZE])&buffer->pcmBuffer_flt[CHANNEL_NUMBER][0], (q15_t(*)[PCM_CHUNK_SIZE])&buffer->pcmBuffer[CHANNEL_NUMBER][0], CHANNEL_NUMBER);
 8000c92:	4b11      	ldr	r3, [pc, #68]	; (8000cd8 <main+0x2b4>)
 8000c94:	f503 5360 	add.w	r3, r3, #14336	; 0x3800
 8000c98:	4a0f      	ldr	r2, [pc, #60]	; (8000cd8 <main+0x2b4>)
 8000c9a:	f502 5110 	add.w	r1, r2, #9216	; 0x2400
 8000c9e:	2202      	movs	r2, #2
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f7ff fdd4 	bl	800084e <Float_To_Q15>
	  //Transpose
	  Transpose_Clean(&pcmMatrix[1], &pcmMatrix_Trans[1]);
 8000ca6:	4917      	ldr	r1, [pc, #92]	; (8000d04 <main+0x2e0>)
 8000ca8:	4817      	ldr	r0, [pc, #92]	; (8000d08 <main+0x2e4>)
 8000caa:	f000 fa59 	bl	8001160 <Transpose_Clean>
	  //Transmit PCM
	  HAL_UART_Transmit_DMA(&huart3, (uint8_t*)&buffer->pcmBuffer_Trans[PCM_CHUNK_SIZE][0], 2*PCM_CHUNK_SIZE*CHANNEL_NUMBER);
 8000cae:	4b0a      	ldr	r3, [pc, #40]	; (8000cd8 <main+0x2b4>)
 8000cb0:	f503 5330 	add.w	r3, r3, #11264	; 0x2c00
 8000cb4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000cb8:	4619      	mov	r1, r3
 8000cba:	4811      	ldr	r0, [pc, #68]	; (8000d00 <main+0x2dc>)
 8000cbc:	f008 fafc 	bl	80092b8 <HAL_UART_Transmit_DMA>
  while (timFlag != DONE){
 8000cc0:	4b0b      	ldr	r3, [pc, #44]	; (8000cf0 <main+0x2cc>)
 8000cc2:	781b      	ldrb	r3, [r3, #0]
 8000cc4:	b2db      	uxtb	r3, r3
 8000cc6:	2b03      	cmp	r3, #3
 8000cc8:	f47f af7f 	bne.w	8000bca <main+0x1a6>

    /* USER CODE BEGIN 3 */
  }


  while(1){}
 8000ccc:	e7fe      	b.n	8000ccc <main+0x2a8>
 8000cce:	bf00      	nop
 8000cd0:	e000ed00 	.word	0xe000ed00
 8000cd4:	58024400 	.word	0x58024400
 8000cd8:	30040000 	.word	0x30040000
 8000cdc:	24000494 	.word	0x24000494
 8000ce0:	240004a4 	.word	0x240004a4
 8000ce4:	240004b4 	.word	0x240004b4
 8000ce8:	24001078 	.word	0x24001078
 8000cec:	24001084 	.word	0x24001084
 8000cf0:	24000492 	.word	0x24000492
 8000cf4:	2400130c 	.word	0x2400130c
 8000cf8:	240012c0 	.word	0x240012c0
 8000cfc:	24000491 	.word	0x24000491
 8000d00:	2400111c 	.word	0x2400111c
 8000d04:	240004ac 	.word	0x240004ac
 8000d08:	2400049c 	.word	0x2400049c

08000d0c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b09c      	sub	sp, #112	; 0x70
 8000d10:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d16:	224c      	movs	r2, #76	; 0x4c
 8000d18:	2100      	movs	r1, #0
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f00b ff4e 	bl	800cbbc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d20:	1d3b      	adds	r3, r7, #4
 8000d22:	2220      	movs	r2, #32
 8000d24:	2100      	movs	r1, #0
 8000d26:	4618      	mov	r0, r3
 8000d28:	f00b ff48 	bl	800cbbc <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000d2c:	2004      	movs	r0, #4
 8000d2e:	f003 ffcb 	bl	8004cc8 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000d32:	2300      	movs	r3, #0
 8000d34:	603b      	str	r3, [r7, #0]
 8000d36:	4b34      	ldr	r3, [pc, #208]	; (8000e08 <SystemClock_Config+0xfc>)
 8000d38:	699b      	ldr	r3, [r3, #24]
 8000d3a:	4a33      	ldr	r2, [pc, #204]	; (8000e08 <SystemClock_Config+0xfc>)
 8000d3c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000d40:	6193      	str	r3, [r2, #24]
 8000d42:	4b31      	ldr	r3, [pc, #196]	; (8000e08 <SystemClock_Config+0xfc>)
 8000d44:	699b      	ldr	r3, [r3, #24]
 8000d46:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000d4a:	603b      	str	r3, [r7, #0]
 8000d4c:	4b2f      	ldr	r3, [pc, #188]	; (8000e0c <SystemClock_Config+0x100>)
 8000d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d50:	4a2e      	ldr	r2, [pc, #184]	; (8000e0c <SystemClock_Config+0x100>)
 8000d52:	f043 0301 	orr.w	r3, r3, #1
 8000d56:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000d58:	4b2c      	ldr	r3, [pc, #176]	; (8000e0c <SystemClock_Config+0x100>)
 8000d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d5c:	f003 0301 	and.w	r3, r3, #1
 8000d60:	603b      	str	r3, [r7, #0]
 8000d62:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000d64:	bf00      	nop
 8000d66:	4b28      	ldr	r3, [pc, #160]	; (8000e08 <SystemClock_Config+0xfc>)
 8000d68:	699b      	ldr	r3, [r3, #24]
 8000d6a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000d6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000d72:	d1f8      	bne.n	8000d66 <SystemClock_Config+0x5a>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000d74:	4b26      	ldr	r3, [pc, #152]	; (8000e10 <SystemClock_Config+0x104>)
 8000d76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d78:	f023 0303 	bic.w	r3, r3, #3
 8000d7c:	4a24      	ldr	r2, [pc, #144]	; (8000e10 <SystemClock_Config+0x104>)
 8000d7e:	f043 0302 	orr.w	r3, r3, #2
 8000d82:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d84:	2301      	movs	r3, #1
 8000d86:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000d88:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000d8c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d8e:	2302      	movs	r3, #2
 8000d90:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d92:	2302      	movs	r3, #2
 8000d94:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000d96:	2301      	movs	r3, #1
 8000d98:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 120;
 8000d9a:	2378      	movs	r3, #120	; 0x78
 8000d9c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000d9e:	2302      	movs	r3, #2
 8000da0:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000da2:	2304      	movs	r3, #4
 8000da4:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000da6:	2302      	movs	r3, #2
 8000da8:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000daa:	230c      	movs	r3, #12
 8000dac:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000dae:	2300      	movs	r3, #0
 8000db0:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000db2:	2300      	movs	r3, #0
 8000db4:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000db6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f003 ffde 	bl	8004d7c <HAL_RCC_OscConfig>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d001      	beq.n	8000dca <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8000dc6:	f000 fa39 	bl	800123c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dca:	233f      	movs	r3, #63	; 0x3f
 8000dcc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000dce:	2303      	movs	r3, #3
 8000dd0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000dd6:	2308      	movs	r3, #8
 8000dd8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV4;
 8000dda:	2350      	movs	r3, #80	; 0x50
 8000ddc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV4;
 8000dde:	2350      	movs	r3, #80	; 0x50
 8000de0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV4;
 8000de2:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8000de6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV4;
 8000de8:	2350      	movs	r3, #80	; 0x50
 8000dea:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000dec:	1d3b      	adds	r3, r7, #4
 8000dee:	2104      	movs	r1, #4
 8000df0:	4618      	mov	r0, r3
 8000df2:	f004 fbd3 	bl	800559c <HAL_RCC_ClockConfig>
 8000df6:	4603      	mov	r3, r0
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d001      	beq.n	8000e00 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8000dfc:	f000 fa1e 	bl	800123c <Error_Handler>
  }
}
 8000e00:	bf00      	nop
 8000e02:	3770      	adds	r7, #112	; 0x70
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bd80      	pop	{r7, pc}
 8000e08:	58024800 	.word	0x58024800
 8000e0c:	58000400 	.word	0x58000400
 8000e10:	58024400 	.word	0x58024400

08000e14 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000e18:	4b11      	ldr	r3, [pc, #68]	; (8000e60 <MX_CRC_Init+0x4c>)
 8000e1a:	4a12      	ldr	r2, [pc, #72]	; (8000e64 <MX_CRC_Init+0x50>)
 8000e1c:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000e1e:	4b10      	ldr	r3, [pc, #64]	; (8000e60 <MX_CRC_Init+0x4c>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000e24:	4b0e      	ldr	r3, [pc, #56]	; (8000e60 <MX_CRC_Init+0x4c>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000e2a:	4b0d      	ldr	r3, [pc, #52]	; (8000e60 <MX_CRC_Init+0x4c>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000e30:	4b0b      	ldr	r3, [pc, #44]	; (8000e60 <MX_CRC_Init+0x4c>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000e36:	4b0a      	ldr	r3, [pc, #40]	; (8000e60 <MX_CRC_Init+0x4c>)
 8000e38:	2201      	movs	r2, #1
 8000e3a:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000e3c:	4808      	ldr	r0, [pc, #32]	; (8000e60 <MX_CRC_Init+0x4c>)
 8000e3e:	f000 fe35 	bl	8001aac <HAL_CRC_Init>
 8000e42:	4603      	mov	r3, r0
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d001      	beq.n	8000e4c <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000e48:	f000 f9f8 	bl	800123c <Error_Handler>
  }
  __HAL_CRC_DR_RESET(&hcrc);
 8000e4c:	4b04      	ldr	r3, [pc, #16]	; (8000e60 <MX_CRC_Init+0x4c>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	689a      	ldr	r2, [r3, #8]
 8000e52:	4b03      	ldr	r3, [pc, #12]	; (8000e60 <MX_CRC_Init+0x4c>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	f042 0201 	orr.w	r2, r2, #1
 8000e5a:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000e5c:	bf00      	nop
 8000e5e:	bd80      	pop	{r7, pc}
 8000e60:	240011ac 	.word	0x240011ac
 8000e64:	58024c00 	.word	0x58024c00

08000e68 <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockA1.Instance = SAI1_Block_A;
 8000e6c:	4b2d      	ldr	r3, [pc, #180]	; (8000f24 <MX_SAI1_Init+0xbc>)
 8000e6e:	4a2e      	ldr	r2, [pc, #184]	; (8000f28 <MX_SAI1_Init+0xc0>)
 8000e70:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
 8000e72:	4b2c      	ldr	r3, [pc, #176]	; (8000f24 <MX_SAI1_Init+0xbc>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_RX;
 8000e78:	4b2a      	ldr	r3, [pc, #168]	; (8000f24 <MX_SAI1_Init+0xbc>)
 8000e7a:	2201      	movs	r2, #1
 8000e7c:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.DataSize = SAI_DATASIZE_16;
 8000e7e:	4b29      	ldr	r3, [pc, #164]	; (8000f24 <MX_SAI1_Init+0xbc>)
 8000e80:	2280      	movs	r2, #128	; 0x80
 8000e82:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000e84:	4b27      	ldr	r3, [pc, #156]	; (8000f24 <MX_SAI1_Init+0xbc>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000e8a:	4b26      	ldr	r3, [pc, #152]	; (8000f24 <MX_SAI1_Init+0xbc>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8000e90:	4b24      	ldr	r3, [pc, #144]	; (8000f24 <MX_SAI1_Init+0xbc>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000e96:	4b23      	ldr	r3, [pc, #140]	; (8000f24 <MX_SAI1_Init+0xbc>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_DISABLE;
 8000e9c:	4b21      	ldr	r3, [pc, #132]	; (8000f24 <MX_SAI1_Init+0xbc>)
 8000e9e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000ea2:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_FULL;
 8000ea4:	4b1f      	ldr	r3, [pc, #124]	; (8000f24 <MX_SAI1_Init+0xbc>)
 8000ea6:	2204      	movs	r2, #4
 8000ea8:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_MCKDIV;
 8000eaa:	4b1e      	ldr	r3, [pc, #120]	; (8000f24 <MX_SAI1_Init+0xbc>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	621a      	str	r2, [r3, #32]
  hsai_BlockA1.Init.Mckdiv = 0;
 8000eb0:	4b1c      	ldr	r3, [pc, #112]	; (8000f24 <MX_SAI1_Init+0xbc>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8000eb6:	4b1b      	ldr	r3, [pc, #108]	; (8000f24 <MX_SAI1_Init+0xbc>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8000ebc:	4b19      	ldr	r3, [pc, #100]	; (8000f24 <MX_SAI1_Init+0xbc>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA1.Init.PdmInit.Activation = ENABLE;
 8000ec2:	4b18      	ldr	r3, [pc, #96]	; (8000f24 <MX_SAI1_Init+0xbc>)
 8000ec4:	2201      	movs	r2, #1
 8000ec6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hsai_BlockA1.Init.PdmInit.MicPairsNbr = 1;
 8000eca:	4b16      	ldr	r3, [pc, #88]	; (8000f24 <MX_SAI1_Init+0xbc>)
 8000ecc:	2201      	movs	r2, #1
 8000ece:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA1.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE | SAI_PDM_CLOCK2_ENABLE;
 8000ed0:	4b14      	ldr	r3, [pc, #80]	; (8000f24 <MX_SAI1_Init+0xbc>)
 8000ed2:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000ed6:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA1.FrameInit.FrameLength = 16;
 8000ed8:	4b12      	ldr	r3, [pc, #72]	; (8000f24 <MX_SAI1_Init+0xbc>)
 8000eda:	2210      	movs	r2, #16
 8000edc:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA1.FrameInit.ActiveFrameLength = 1;
 8000ede:	4b11      	ldr	r3, [pc, #68]	; (8000f24 <MX_SAI1_Init+0xbc>)
 8000ee0:	2201      	movs	r2, #1
 8000ee2:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8000ee4:	4b0f      	ldr	r3, [pc, #60]	; (8000f24 <MX_SAI1_Init+0xbc>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA1.FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 8000eea:	4b0e      	ldr	r3, [pc, #56]	; (8000f24 <MX_SAI1_Init+0xbc>)
 8000eec:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000ef0:	661a      	str	r2, [r3, #96]	; 0x60
  hsai_BlockA1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8000ef2:	4b0c      	ldr	r3, [pc, #48]	; (8000f24 <MX_SAI1_Init+0xbc>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	665a      	str	r2, [r3, #100]	; 0x64
  hsai_BlockA1.SlotInit.FirstBitOffset = 0;
 8000ef8:	4b0a      	ldr	r3, [pc, #40]	; (8000f24 <MX_SAI1_Init+0xbc>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	669a      	str	r2, [r3, #104]	; 0x68
  hsai_BlockA1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8000efe:	4b09      	ldr	r3, [pc, #36]	; (8000f24 <MX_SAI1_Init+0xbc>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai_BlockA1.SlotInit.SlotNumber = 1;
 8000f04:	4b07      	ldr	r3, [pc, #28]	; (8000f24 <MX_SAI1_Init+0xbc>)
 8000f06:	2201      	movs	r2, #1
 8000f08:	671a      	str	r2, [r3, #112]	; 0x70
  hsai_BlockA1.SlotInit.SlotActive = 0x00000001;
 8000f0a:	4b06      	ldr	r3, [pc, #24]	; (8000f24 <MX_SAI1_Init+0xbc>)
 8000f0c:	2201      	movs	r2, #1
 8000f0e:	675a      	str	r2, [r3, #116]	; 0x74
  if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
 8000f10:	4804      	ldr	r0, [pc, #16]	; (8000f24 <MX_SAI1_Init+0xbc>)
 8000f12:	f007 f855 	bl	8007fc0 <HAL_SAI_Init>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d001      	beq.n	8000f20 <MX_SAI1_Init+0xb8>
  {
    Error_Handler();
 8000f1c:	f000 f98e 	bl	800123c <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8000f20:	bf00      	nop
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	2400130c 	.word	0x2400130c
 8000f28:	40015804 	.word	0x40015804

08000f2c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b088      	sub	sp, #32
 8000f30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f32:	f107 0310 	add.w	r3, r7, #16
 8000f36:	2200      	movs	r2, #0
 8000f38:	601a      	str	r2, [r3, #0]
 8000f3a:	605a      	str	r2, [r3, #4]
 8000f3c:	609a      	str	r2, [r3, #8]
 8000f3e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f40:	1d3b      	adds	r3, r7, #4
 8000f42:	2200      	movs	r2, #0
 8000f44:	601a      	str	r2, [r3, #0]
 8000f46:	605a      	str	r2, [r3, #4]
 8000f48:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000f4a:	4b23      	ldr	r3, [pc, #140]	; (8000fd8 <MX_TIM1_Init+0xac>)
 8000f4c:	4a23      	ldr	r2, [pc, #140]	; (8000fdc <MX_TIM1_Init+0xb0>)
 8000f4e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 20000;
 8000f50:	4b21      	ldr	r3, [pc, #132]	; (8000fd8 <MX_TIM1_Init+0xac>)
 8000f52:	f644 6220 	movw	r2, #20000	; 0x4e20
 8000f56:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f58:	4b1f      	ldr	r3, [pc, #124]	; (8000fd8 <MX_TIM1_Init+0xac>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 60000;
 8000f5e:	4b1e      	ldr	r3, [pc, #120]	; (8000fd8 <MX_TIM1_Init+0xac>)
 8000f60:	f64e 2260 	movw	r2, #60000	; 0xea60
 8000f64:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f66:	4b1c      	ldr	r3, [pc, #112]	; (8000fd8 <MX_TIM1_Init+0xac>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000f6c:	4b1a      	ldr	r3, [pc, #104]	; (8000fd8 <MX_TIM1_Init+0xac>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f72:	4b19      	ldr	r3, [pc, #100]	; (8000fd8 <MX_TIM1_Init+0xac>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000f78:	4817      	ldr	r0, [pc, #92]	; (8000fd8 <MX_TIM1_Init+0xac>)
 8000f7a:	f007 fc3e 	bl	80087fa <HAL_TIM_Base_Init>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d001      	beq.n	8000f88 <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 8000f84:	f000 f95a 	bl	800123c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f8c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000f8e:	f107 0310 	add.w	r3, r7, #16
 8000f92:	4619      	mov	r1, r3
 8000f94:	4810      	ldr	r0, [pc, #64]	; (8000fd8 <MX_TIM1_Init+0xac>)
 8000f96:	f007 fe45 	bl	8008c24 <HAL_TIM_ConfigClockSource>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d001      	beq.n	8000fa4 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8000fa0:	f000 f94c 	bl	800123c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fac:	2300      	movs	r3, #0
 8000fae:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000fb0:	1d3b      	adds	r3, r7, #4
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	4808      	ldr	r0, [pc, #32]	; (8000fd8 <MX_TIM1_Init+0xac>)
 8000fb6:	f008 f889 	bl	80090cc <HAL_TIMEx_MasterConfigSynchronization>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d001      	beq.n	8000fc4 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000fc0:	f000 f93c 	bl	800123c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  __HAL_TIM_CLEAR_IT(&htim1, TIM_FLAG_UPDATE);
 8000fc4:	4b04      	ldr	r3, [pc, #16]	; (8000fd8 <MX_TIM1_Init+0xac>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	f06f 0201 	mvn.w	r2, #1
 8000fcc:	611a      	str	r2, [r3, #16]
  /* USER CODE END TIM1_Init 2 */

}
 8000fce:	bf00      	nop
 8000fd0:	3720      	adds	r7, #32
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	240012c0 	.word	0x240012c0
 8000fdc:	40010000 	.word	0x40010000

08000fe0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000fe4:	4b23      	ldr	r3, [pc, #140]	; (8001074 <MX_USART3_UART_Init+0x94>)
 8000fe6:	4a24      	ldr	r2, [pc, #144]	; (8001078 <MX_USART3_UART_Init+0x98>)
 8000fe8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 4000000;
 8000fea:	4b22      	ldr	r3, [pc, #136]	; (8001074 <MX_USART3_UART_Init+0x94>)
 8000fec:	4a23      	ldr	r2, [pc, #140]	; (800107c <MX_USART3_UART_Init+0x9c>)
 8000fee:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000ff0:	4b20      	ldr	r3, [pc, #128]	; (8001074 <MX_USART3_UART_Init+0x94>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000ff6:	4b1f      	ldr	r3, [pc, #124]	; (8001074 <MX_USART3_UART_Init+0x94>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000ffc:	4b1d      	ldr	r3, [pc, #116]	; (8001074 <MX_USART3_UART_Init+0x94>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001002:	4b1c      	ldr	r3, [pc, #112]	; (8001074 <MX_USART3_UART_Init+0x94>)
 8001004:	220c      	movs	r2, #12
 8001006:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001008:	4b1a      	ldr	r3, [pc, #104]	; (8001074 <MX_USART3_UART_Init+0x94>)
 800100a:	2200      	movs	r2, #0
 800100c:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800100e:	4b19      	ldr	r3, [pc, #100]	; (8001074 <MX_USART3_UART_Init+0x94>)
 8001010:	2200      	movs	r2, #0
 8001012:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001014:	4b17      	ldr	r3, [pc, #92]	; (8001074 <MX_USART3_UART_Init+0x94>)
 8001016:	2200      	movs	r2, #0
 8001018:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800101a:	4b16      	ldr	r3, [pc, #88]	; (8001074 <MX_USART3_UART_Init+0x94>)
 800101c:	2200      	movs	r2, #0
 800101e:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001020:	4b14      	ldr	r3, [pc, #80]	; (8001074 <MX_USART3_UART_Init+0x94>)
 8001022:	2200      	movs	r2, #0
 8001024:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001026:	4813      	ldr	r0, [pc, #76]	; (8001074 <MX_USART3_UART_Init+0x94>)
 8001028:	f008 f8f6 	bl	8009218 <HAL_UART_Init>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d001      	beq.n	8001036 <MX_USART3_UART_Init+0x56>
  {
    Error_Handler();
 8001032:	f000 f903 	bl	800123c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_8_8) != HAL_OK)
 8001036:	f04f 4120 	mov.w	r1, #2684354560	; 0xa0000000
 800103a:	480e      	ldr	r0, [pc, #56]	; (8001074 <MX_USART3_UART_Init+0x94>)
 800103c:	f009 fcbb 	bl	800a9b6 <HAL_UARTEx_SetTxFifoThreshold>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	d001      	beq.n	800104a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001046:	f000 f8f9 	bl	800123c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_8_8) != HAL_OK)
 800104a:	f04f 6120 	mov.w	r1, #167772160	; 0xa000000
 800104e:	4809      	ldr	r0, [pc, #36]	; (8001074 <MX_USART3_UART_Init+0x94>)
 8001050:	f009 fcef 	bl	800aa32 <HAL_UARTEx_SetRxFifoThreshold>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d001      	beq.n	800105e <MX_USART3_UART_Init+0x7e>
  {
    Error_Handler();
 800105a:	f000 f8ef 	bl	800123c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800105e:	4805      	ldr	r0, [pc, #20]	; (8001074 <MX_USART3_UART_Init+0x94>)
 8001060:	f009 fc70 	bl	800a944 <HAL_UARTEx_DisableFifoMode>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	d001      	beq.n	800106e <MX_USART3_UART_Init+0x8e>
  {
    Error_Handler();
 800106a:	f000 f8e7 	bl	800123c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800106e:	bf00      	nop
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	2400111c 	.word	0x2400111c
 8001078:	40004800 	.word	0x40004800
 800107c:	003d0900 	.word	0x003d0900

08001080 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001086:	4b11      	ldr	r3, [pc, #68]	; (80010cc <MX_DMA_Init+0x4c>)
 8001088:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800108c:	4a0f      	ldr	r2, [pc, #60]	; (80010cc <MX_DMA_Init+0x4c>)
 800108e:	f043 0301 	orr.w	r3, r3, #1
 8001092:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001096:	4b0d      	ldr	r3, [pc, #52]	; (80010cc <MX_DMA_Init+0x4c>)
 8001098:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800109c:	f003 0301 	and.w	r3, r3, #1
 80010a0:	607b      	str	r3, [r7, #4]
 80010a2:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80010a4:	2200      	movs	r2, #0
 80010a6:	2100      	movs	r1, #0
 80010a8:	200b      	movs	r0, #11
 80010aa:	f000 fcca 	bl	8001a42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80010ae:	200b      	movs	r0, #11
 80010b0:	f000 fce1 	bl	8001a76 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80010b4:	2200      	movs	r2, #0
 80010b6:	2100      	movs	r1, #0
 80010b8:	200c      	movs	r0, #12
 80010ba:	f000 fcc2 	bl	8001a42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80010be:	200c      	movs	r0, #12
 80010c0:	f000 fcd9 	bl	8001a76 <HAL_NVIC_EnableIRQ>

}
 80010c4:	bf00      	nop
 80010c6:	3708      	adds	r7, #8
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	58024400 	.word	0x58024400

080010d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b085      	sub	sp, #20
 80010d4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80010d6:	4b21      	ldr	r3, [pc, #132]	; (800115c <MX_GPIO_Init+0x8c>)
 80010d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010dc:	4a1f      	ldr	r2, [pc, #124]	; (800115c <MX_GPIO_Init+0x8c>)
 80010de:	f043 0310 	orr.w	r3, r3, #16
 80010e2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010e6:	4b1d      	ldr	r3, [pc, #116]	; (800115c <MX_GPIO_Init+0x8c>)
 80010e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010ec:	f003 0310 	and.w	r3, r3, #16
 80010f0:	60fb      	str	r3, [r7, #12]
 80010f2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010f4:	4b19      	ldr	r3, [pc, #100]	; (800115c <MX_GPIO_Init+0x8c>)
 80010f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010fa:	4a18      	ldr	r2, [pc, #96]	; (800115c <MX_GPIO_Init+0x8c>)
 80010fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001100:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001104:	4b15      	ldr	r3, [pc, #84]	; (800115c <MX_GPIO_Init+0x8c>)
 8001106:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800110a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800110e:	60bb      	str	r3, [r7, #8]
 8001110:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001112:	4b12      	ldr	r3, [pc, #72]	; (800115c <MX_GPIO_Init+0x8c>)
 8001114:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001118:	4a10      	ldr	r2, [pc, #64]	; (800115c <MX_GPIO_Init+0x8c>)
 800111a:	f043 0304 	orr.w	r3, r3, #4
 800111e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001122:	4b0e      	ldr	r3, [pc, #56]	; (800115c <MX_GPIO_Init+0x8c>)
 8001124:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001128:	f003 0304 	and.w	r3, r3, #4
 800112c:	607b      	str	r3, [r7, #4]
 800112e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001130:	4b0a      	ldr	r3, [pc, #40]	; (800115c <MX_GPIO_Init+0x8c>)
 8001132:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001136:	4a09      	ldr	r2, [pc, #36]	; (800115c <MX_GPIO_Init+0x8c>)
 8001138:	f043 0308 	orr.w	r3, r3, #8
 800113c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001140:	4b06      	ldr	r3, [pc, #24]	; (800115c <MX_GPIO_Init+0x8c>)
 8001142:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001146:	f003 0308 	and.w	r3, r3, #8
 800114a:	603b      	str	r3, [r7, #0]
 800114c:	683b      	ldr	r3, [r7, #0]

}
 800114e:	bf00      	nop
 8001150:	3714      	adds	r7, #20
 8001152:	46bd      	mov	sp, r7
 8001154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001158:	4770      	bx	lr
 800115a:	bf00      	nop
 800115c:	58024400 	.word	0x58024400

08001160 <Transpose_Clean>:

/* USER CODE BEGIN 4 */

static void Transpose_Clean(arm_matrix_instance_q15* m1, arm_matrix_instance_q15* m2){
 8001160:	b580      	push	{r7, lr}
 8001162:	b086      	sub	sp, #24
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
 8001168:	6039      	str	r1, [r7, #0]
	arm_mat_trans_q15(&m1[0], &m2[0]);
 800116a:	6839      	ldr	r1, [r7, #0]
 800116c:	6878      	ldr	r0, [r7, #4]
 800116e:	f009 fd94 	bl	800ac9a <arm_mat_trans_q15>
	SCB_CleanDCache_by_Addr((uint32_t*)m2->pData, 2*CHANNEL_NUMBER*PCM_CHUNK_SIZE);
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	617b      	str	r3, [r7, #20]
 8001178:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800117c:	613b      	str	r3, [r7, #16]
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_CleanDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 800117e:	693b      	ldr	r3, [r7, #16]
 8001180:	2b00      	cmp	r3, #0
 8001182:	dd1d      	ble.n	80011c0 <Transpose_Clean+0x60>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	f003 021f 	and.w	r2, r3, #31
 800118a:	693b      	ldr	r3, [r7, #16]
 800118c:	4413      	add	r3, r2
 800118e:	60fb      	str	r3, [r7, #12]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8001190:	697b      	ldr	r3, [r7, #20]
 8001192:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("dsb 0xF":::"memory");
 8001194:	f3bf 8f4f 	dsb	sy
}
 8001198:	bf00      	nop
    
      __DSB();

      do {
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 800119a:	4a0c      	ldr	r2, [pc, #48]	; (80011cc <Transpose_Clean+0x6c>)
 800119c:	68bb      	ldr	r3, [r7, #8]
 800119e:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 80011a2:	68bb      	ldr	r3, [r7, #8]
 80011a4:	3320      	adds	r3, #32
 80011a6:	60bb      	str	r3, [r7, #8]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	3b20      	subs	r3, #32
 80011ac:	60fb      	str	r3, [r7, #12]
      } while ( op_size > 0 );
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	dcf2      	bgt.n	800119a <Transpose_Clean+0x3a>
  __ASM volatile ("dsb 0xF":::"memory");
 80011b4:	f3bf 8f4f 	dsb	sy
}
 80011b8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80011ba:	f3bf 8f6f 	isb	sy
}
 80011be:	bf00      	nop

      __DSB();
      __ISB();
    }
  #endif
}
 80011c0:	bf00      	nop
}
 80011c2:	bf00      	nop
 80011c4:	3718      	adds	r7, #24
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	e000ed00 	.word	0xe000ed00

080011d0 <HAL_SAI_RxHalfCpltCallback>:

void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai){
 80011d0:	b480      	push	{r7}
 80011d2:	b083      	sub	sp, #12
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
	dmaFlag = HALF;
 80011d8:	4b04      	ldr	r3, [pc, #16]	; (80011ec <HAL_SAI_RxHalfCpltCallback+0x1c>)
 80011da:	2204      	movs	r2, #4
 80011dc:	701a      	strb	r2, [r3, #0]
}
 80011de:	bf00      	nop
 80011e0:	370c      	adds	r7, #12
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr
 80011ea:	bf00      	nop
 80011ec:	24000491 	.word	0x24000491

080011f0 <HAL_SAI_RxCpltCallback>:

void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai){
 80011f0:	b480      	push	{r7}
 80011f2:	b083      	sub	sp, #12
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
	dmaFlag = FULL;
 80011f8:	4b04      	ldr	r3, [pc, #16]	; (800120c <HAL_SAI_RxCpltCallback+0x1c>)
 80011fa:	2205      	movs	r2, #5
 80011fc:	701a      	strb	r2, [r3, #0]
}
 80011fe:	bf00      	nop
 8001200:	370c      	adds	r7, #12
 8001202:	46bd      	mov	sp, r7
 8001204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001208:	4770      	bx	lr
 800120a:	bf00      	nop
 800120c:	24000491 	.word	0x24000491

08001210 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b082      	sub	sp, #8
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  if(htim == &htim1){
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	4a06      	ldr	r2, [pc, #24]	; (8001234 <HAL_TIM_PeriodElapsedCallback+0x24>)
 800121c:	4293      	cmp	r3, r2
 800121e:	d105      	bne.n	800122c <HAL_TIM_PeriodElapsedCallback+0x1c>
	  HAL_TIM_Base_Stop_IT(htim);
 8001220:	6878      	ldr	r0, [r7, #4]
 8001222:	f007 fbb1 	bl	8008988 <HAL_TIM_Base_Stop_IT>
	  timFlag = DONE;
 8001226:	4b04      	ldr	r3, [pc, #16]	; (8001238 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8001228:	2203      	movs	r2, #3
 800122a:	701a      	strb	r2, [r3, #0]
  }
}
 800122c:	bf00      	nop
 800122e:	3708      	adds	r7, #8
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}
 8001234:	240012c0 	.word	0x240012c0
 8001238:	24000492 	.word	0x24000492

0800123c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001240:	b672      	cpsid	i
}
 8001242:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001244:	e7fe      	b.n	8001244 <Error_Handler+0x8>
	...

08001248 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001248:	b480      	push	{r7}
 800124a:	b083      	sub	sp, #12
 800124c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800124e:	4b0a      	ldr	r3, [pc, #40]	; (8001278 <HAL_MspInit+0x30>)
 8001250:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001254:	4a08      	ldr	r2, [pc, #32]	; (8001278 <HAL_MspInit+0x30>)
 8001256:	f043 0302 	orr.w	r3, r3, #2
 800125a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800125e:	4b06      	ldr	r3, [pc, #24]	; (8001278 <HAL_MspInit+0x30>)
 8001260:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001264:	f003 0302 	and.w	r3, r3, #2
 8001268:	607b      	str	r3, [r7, #4]
 800126a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800126c:	bf00      	nop
 800126e:	370c      	adds	r7, #12
 8001270:	46bd      	mov	sp, r7
 8001272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001276:	4770      	bx	lr
 8001278:	58024400 	.word	0x58024400

0800127c <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 800127c:	b480      	push	{r7}
 800127e:	b085      	sub	sp, #20
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4a0b      	ldr	r2, [pc, #44]	; (80012b8 <HAL_CRC_MspInit+0x3c>)
 800128a:	4293      	cmp	r3, r2
 800128c:	d10e      	bne.n	80012ac <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800128e:	4b0b      	ldr	r3, [pc, #44]	; (80012bc <HAL_CRC_MspInit+0x40>)
 8001290:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001294:	4a09      	ldr	r2, [pc, #36]	; (80012bc <HAL_CRC_MspInit+0x40>)
 8001296:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800129a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800129e:	4b07      	ldr	r3, [pc, #28]	; (80012bc <HAL_CRC_MspInit+0x40>)
 80012a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012a4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80012a8:	60fb      	str	r3, [r7, #12]
 80012aa:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80012ac:	bf00      	nop
 80012ae:	3714      	adds	r7, #20
 80012b0:	46bd      	mov	sp, r7
 80012b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b6:	4770      	bx	lr
 80012b8:	58024c00 	.word	0x58024c00
 80012bc:	58024400 	.word	0x58024400

080012c0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b084      	sub	sp, #16
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4a0e      	ldr	r2, [pc, #56]	; (8001308 <HAL_TIM_Base_MspInit+0x48>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d116      	bne.n	8001300 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80012d2:	4b0e      	ldr	r3, [pc, #56]	; (800130c <HAL_TIM_Base_MspInit+0x4c>)
 80012d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80012d8:	4a0c      	ldr	r2, [pc, #48]	; (800130c <HAL_TIM_Base_MspInit+0x4c>)
 80012da:	f043 0301 	orr.w	r3, r3, #1
 80012de:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80012e2:	4b0a      	ldr	r3, [pc, #40]	; (800130c <HAL_TIM_Base_MspInit+0x4c>)
 80012e4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80012e8:	f003 0301 	and.w	r3, r3, #1
 80012ec:	60fb      	str	r3, [r7, #12]
 80012ee:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 80012f0:	2200      	movs	r2, #0
 80012f2:	2100      	movs	r1, #0
 80012f4:	2019      	movs	r0, #25
 80012f6:	f000 fba4 	bl	8001a42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80012fa:	2019      	movs	r0, #25
 80012fc:	f000 fbbb 	bl	8001a76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001300:	bf00      	nop
 8001302:	3710      	adds	r7, #16
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}
 8001308:	40010000 	.word	0x40010000
 800130c:	58024400 	.word	0x58024400

08001310 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b0b8      	sub	sp, #224	; 0xe0
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001318:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800131c:	2200      	movs	r2, #0
 800131e:	601a      	str	r2, [r3, #0]
 8001320:	605a      	str	r2, [r3, #4]
 8001322:	609a      	str	r2, [r3, #8]
 8001324:	60da      	str	r2, [r3, #12]
 8001326:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001328:	f107 0310 	add.w	r3, r7, #16
 800132c:	22bc      	movs	r2, #188	; 0xbc
 800132e:	2100      	movs	r1, #0
 8001330:	4618      	mov	r0, r3
 8001332:	f00b fc43 	bl	800cbbc <memset>
  if(huart->Instance==USART3)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	4a49      	ldr	r2, [pc, #292]	; (8001460 <HAL_UART_MspInit+0x150>)
 800133c:	4293      	cmp	r3, r2
 800133e:	f040 808b 	bne.w	8001458 <HAL_UART_MspInit+0x148>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001342:	2302      	movs	r3, #2
 8001344:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 1;
 8001346:	2301      	movs	r3, #1
 8001348:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL3.PLL3N = 19;
 800134a:	2313      	movs	r3, #19
 800134c:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 800134e:	2302      	movs	r3, #2
 8001350:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8001352:	2302      	movs	r3, #2
 8001354:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 8001356:	2302      	movs	r3, #2
 8001358:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 800135a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800135e:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
 8001360:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001364:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8001366:	2300      	movs	r3, #0
 8001368:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_PLL3;
 800136a:	2302      	movs	r3, #2
 800136c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001370:	f107 0310 	add.w	r3, r7, #16
 8001374:	4618      	mov	r0, r3
 8001376:	f004 fc9d 	bl	8005cb4 <HAL_RCCEx_PeriphCLKConfig>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d001      	beq.n	8001384 <HAL_UART_MspInit+0x74>
    {
      Error_Handler();
 8001380:	f7ff ff5c 	bl	800123c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001384:	4b37      	ldr	r3, [pc, #220]	; (8001464 <HAL_UART_MspInit+0x154>)
 8001386:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800138a:	4a36      	ldr	r2, [pc, #216]	; (8001464 <HAL_UART_MspInit+0x154>)
 800138c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001390:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001394:	4b33      	ldr	r3, [pc, #204]	; (8001464 <HAL_UART_MspInit+0x154>)
 8001396:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800139a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800139e:	60fb      	str	r3, [r7, #12]
 80013a0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80013a2:	4b30      	ldr	r3, [pc, #192]	; (8001464 <HAL_UART_MspInit+0x154>)
 80013a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013a8:	4a2e      	ldr	r2, [pc, #184]	; (8001464 <HAL_UART_MspInit+0x154>)
 80013aa:	f043 0308 	orr.w	r3, r3, #8
 80013ae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013b2:	4b2c      	ldr	r3, [pc, #176]	; (8001464 <HAL_UART_MspInit+0x154>)
 80013b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013b8:	f003 0308 	and.w	r3, r3, #8
 80013bc:	60bb      	str	r3, [r7, #8]
 80013be:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80013c0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80013c4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013c8:	2302      	movs	r3, #2
 80013ca:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ce:	2300      	movs	r3, #0
 80013d0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013d4:	2300      	movs	r3, #0
 80013d6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80013da:	2307      	movs	r3, #7
 80013dc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013e0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80013e4:	4619      	mov	r1, r3
 80013e6:	4820      	ldr	r0, [pc, #128]	; (8001468 <HAL_UART_MspInit+0x158>)
 80013e8:	f003 fa90 	bl	800490c <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream1;
 80013ec:	4b1f      	ldr	r3, [pc, #124]	; (800146c <HAL_UART_MspInit+0x15c>)
 80013ee:	4a20      	ldr	r2, [pc, #128]	; (8001470 <HAL_UART_MspInit+0x160>)
 80013f0:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 80013f2:	4b1e      	ldr	r3, [pc, #120]	; (800146c <HAL_UART_MspInit+0x15c>)
 80013f4:	222e      	movs	r2, #46	; 0x2e
 80013f6:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80013f8:	4b1c      	ldr	r3, [pc, #112]	; (800146c <HAL_UART_MspInit+0x15c>)
 80013fa:	2240      	movs	r2, #64	; 0x40
 80013fc:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80013fe:	4b1b      	ldr	r3, [pc, #108]	; (800146c <HAL_UART_MspInit+0x15c>)
 8001400:	2200      	movs	r2, #0
 8001402:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001404:	4b19      	ldr	r3, [pc, #100]	; (800146c <HAL_UART_MspInit+0x15c>)
 8001406:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800140a:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800140c:	4b17      	ldr	r3, [pc, #92]	; (800146c <HAL_UART_MspInit+0x15c>)
 800140e:	2200      	movs	r2, #0
 8001410:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001412:	4b16      	ldr	r3, [pc, #88]	; (800146c <HAL_UART_MspInit+0x15c>)
 8001414:	2200      	movs	r2, #0
 8001416:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8001418:	4b14      	ldr	r3, [pc, #80]	; (800146c <HAL_UART_MspInit+0x15c>)
 800141a:	2200      	movs	r2, #0
 800141c:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_HIGH;
 800141e:	4b13      	ldr	r3, [pc, #76]	; (800146c <HAL_UART_MspInit+0x15c>)
 8001420:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001424:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001426:	4b11      	ldr	r3, [pc, #68]	; (800146c <HAL_UART_MspInit+0x15c>)
 8001428:	2200      	movs	r2, #0
 800142a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 800142c:	480f      	ldr	r0, [pc, #60]	; (800146c <HAL_UART_MspInit+0x15c>)
 800142e:	f000 fc27 	bl	8001c80 <HAL_DMA_Init>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d001      	beq.n	800143c <HAL_UART_MspInit+0x12c>
    {
      Error_Handler();
 8001438:	f7ff ff00 	bl	800123c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	4a0b      	ldr	r2, [pc, #44]	; (800146c <HAL_UART_MspInit+0x15c>)
 8001440:	679a      	str	r2, [r3, #120]	; 0x78
 8001442:	4a0a      	ldr	r2, [pc, #40]	; (800146c <HAL_UART_MspInit+0x15c>)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001448:	2200      	movs	r2, #0
 800144a:	2100      	movs	r1, #0
 800144c:	2027      	movs	r0, #39	; 0x27
 800144e:	f000 faf8 	bl	8001a42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001452:	2027      	movs	r0, #39	; 0x27
 8001454:	f000 fb0f 	bl	8001a76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001458:	bf00      	nop
 800145a:	37e0      	adds	r7, #224	; 0xe0
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}
 8001460:	40004800 	.word	0x40004800
 8001464:	58024400 	.word	0x58024400
 8001468:	58020c00 	.word	0x58020c00
 800146c:	240011d0 	.word	0x240011d0
 8001470:	40020028 	.word	0x40020028

08001474 <HAL_SAI_MspInit>:
extern DMA_HandleTypeDef hdma_sai1_a;

static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b0b8      	sub	sp, #224	; 0xe0
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800147c:	f107 0310 	add.w	r3, r7, #16
 8001480:	22bc      	movs	r2, #188	; 0xbc
 8001482:	2100      	movs	r1, #0
 8001484:	4618      	mov	r0, r3
 8001486:	f00b fb99 	bl	800cbbc <memset>
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	4a55      	ldr	r2, [pc, #340]	; (80015e4 <HAL_SAI_MspInit+0x170>)
 8001490:	4293      	cmp	r3, r2
 8001492:	f040 80a2 	bne.w	80015da <HAL_SAI_MspInit+0x166>
    {
    /* Peripheral clock enable */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 8001496:	f44f 7380 	mov.w	r3, #256	; 0x100
 800149a:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 5;
 800149c:	2305      	movs	r3, #5
 800149e:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLL2.PLL2N = 192;
 80014a0:	23c0      	movs	r3, #192	; 0xc0
 80014a2:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2P = 50;
 80014a4:	2332      	movs	r3, #50	; 0x32
 80014a6:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80014a8:	2302      	movs	r3, #2
 80014aa:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 80014ac:	2302      	movs	r3, #2
 80014ae:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_0;
 80014b0:	2300      	movs	r3, #0
 80014b2:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 80014b4:	2300      	movs	r3, #0
 80014b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80014b8:	2300      	movs	r3, #0
 80014ba:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL2;
 80014bc:	2301      	movs	r3, #1
 80014be:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014c0:	f107 0310 	add.w	r3, r7, #16
 80014c4:	4618      	mov	r0, r3
 80014c6:	f004 fbf5 	bl	8005cb4 <HAL_RCCEx_PeriphCLKConfig>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d001      	beq.n	80014d4 <HAL_SAI_MspInit+0x60>
    {
      Error_Handler();
 80014d0:	f7ff feb4 	bl	800123c <Error_Handler>
    }

    if (SAI1_client == 0)
 80014d4:	4b44      	ldr	r3, [pc, #272]	; (80015e8 <HAL_SAI_MspInit+0x174>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d116      	bne.n	800150a <HAL_SAI_MspInit+0x96>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 80014dc:	4b43      	ldr	r3, [pc, #268]	; (80015ec <HAL_SAI_MspInit+0x178>)
 80014de:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80014e2:	4a42      	ldr	r2, [pc, #264]	; (80015ec <HAL_SAI_MspInit+0x178>)
 80014e4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80014e8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80014ec:	4b3f      	ldr	r3, [pc, #252]	; (80015ec <HAL_SAI_MspInit+0x178>)
 80014ee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80014f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014f6:	60fb      	str	r3, [r7, #12]
 80014f8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(SAI1_IRQn, 0, 0);
 80014fa:	2200      	movs	r2, #0
 80014fc:	2100      	movs	r1, #0
 80014fe:	2057      	movs	r0, #87	; 0x57
 8001500:	f000 fa9f 	bl	8001a42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SAI1_IRQn);
 8001504:	2057      	movs	r0, #87	; 0x57
 8001506:	f000 fab6 	bl	8001a76 <HAL_NVIC_EnableIRQ>
    }
    SAI1_client ++;
 800150a:	4b37      	ldr	r3, [pc, #220]	; (80015e8 <HAL_SAI_MspInit+0x174>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	3301      	adds	r3, #1
 8001510:	4a35      	ldr	r2, [pc, #212]	; (80015e8 <HAL_SAI_MspInit+0x174>)
 8001512:	6013      	str	r3, [r2, #0]
    /**SAI1_A_Block_A GPIO Configuration
    PE2     ------> SAI1_CK1
    PE5     ------> SAI1_CK2
    PC1     ------> SAI1_D1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5;
 8001514:	2324      	movs	r3, #36	; 0x24
 8001516:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800151a:	2302      	movs	r3, #2
 800151c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001520:	2300      	movs	r3, #0
 8001522:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001526:	2300      	movs	r3, #0
 8001528:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF2_SAI1;
 800152c:	2302      	movs	r3, #2
 800152e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001532:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001536:	4619      	mov	r1, r3
 8001538:	482d      	ldr	r0, [pc, #180]	; (80015f0 <HAL_SAI_MspInit+0x17c>)
 800153a:	f003 f9e7 	bl	800490c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800153e:	2302      	movs	r3, #2
 8001540:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001544:	2302      	movs	r3, #2
 8001546:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154a:	2300      	movs	r3, #0
 800154c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001550:	2300      	movs	r3, #0
 8001552:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF2_SAI1;
 8001556:	2302      	movs	r3, #2
 8001558:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800155c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001560:	4619      	mov	r1, r3
 8001562:	4824      	ldr	r0, [pc, #144]	; (80015f4 <HAL_SAI_MspInit+0x180>)
 8001564:	f003 f9d2 	bl	800490c <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai1_a.Instance = DMA1_Stream0;
 8001568:	4b23      	ldr	r3, [pc, #140]	; (80015f8 <HAL_SAI_MspInit+0x184>)
 800156a:	4a24      	ldr	r2, [pc, #144]	; (80015fc <HAL_SAI_MspInit+0x188>)
 800156c:	601a      	str	r2, [r3, #0]
    hdma_sai1_a.Init.Request = DMA_REQUEST_SAI1_A;
 800156e:	4b22      	ldr	r3, [pc, #136]	; (80015f8 <HAL_SAI_MspInit+0x184>)
 8001570:	2257      	movs	r2, #87	; 0x57
 8001572:	605a      	str	r2, [r3, #4]
    hdma_sai1_a.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001574:	4b20      	ldr	r3, [pc, #128]	; (80015f8 <HAL_SAI_MspInit+0x184>)
 8001576:	2200      	movs	r2, #0
 8001578:	609a      	str	r2, [r3, #8]
    hdma_sai1_a.Init.PeriphInc = DMA_PINC_DISABLE;
 800157a:	4b1f      	ldr	r3, [pc, #124]	; (80015f8 <HAL_SAI_MspInit+0x184>)
 800157c:	2200      	movs	r2, #0
 800157e:	60da      	str	r2, [r3, #12]
    hdma_sai1_a.Init.MemInc = DMA_MINC_ENABLE;
 8001580:	4b1d      	ldr	r3, [pc, #116]	; (80015f8 <HAL_SAI_MspInit+0x184>)
 8001582:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001586:	611a      	str	r2, [r3, #16]
    hdma_sai1_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001588:	4b1b      	ldr	r3, [pc, #108]	; (80015f8 <HAL_SAI_MspInit+0x184>)
 800158a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800158e:	615a      	str	r2, [r3, #20]
    hdma_sai1_a.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001590:	4b19      	ldr	r3, [pc, #100]	; (80015f8 <HAL_SAI_MspInit+0x184>)
 8001592:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001596:	619a      	str	r2, [r3, #24]
    hdma_sai1_a.Init.Mode = DMA_CIRCULAR;
 8001598:	4b17      	ldr	r3, [pc, #92]	; (80015f8 <HAL_SAI_MspInit+0x184>)
 800159a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800159e:	61da      	str	r2, [r3, #28]
    hdma_sai1_a.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80015a0:	4b15      	ldr	r3, [pc, #84]	; (80015f8 <HAL_SAI_MspInit+0x184>)
 80015a2:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80015a6:	621a      	str	r2, [r3, #32]
    hdma_sai1_a.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80015a8:	4b13      	ldr	r3, [pc, #76]	; (80015f8 <HAL_SAI_MspInit+0x184>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
 80015ae:	4812      	ldr	r0, [pc, #72]	; (80015f8 <HAL_SAI_MspInit+0x184>)
 80015b0:	f000 fb66 	bl	8001c80 <HAL_DMA_Init>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d001      	beq.n	80015be <HAL_SAI_MspInit+0x14a>
    {
      Error_Handler();
 80015ba:	f7ff fe3f 	bl	800123c <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_a);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	4a0d      	ldr	r2, [pc, #52]	; (80015f8 <HAL_SAI_MspInit+0x184>)
 80015c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 80015c6:	4a0c      	ldr	r2, [pc, #48]	; (80015f8 <HAL_SAI_MspInit+0x184>)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6393      	str	r3, [r2, #56]	; 0x38

    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_a);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	4a0a      	ldr	r2, [pc, #40]	; (80015f8 <HAL_SAI_MspInit+0x184>)
 80015d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 80015d4:	4a08      	ldr	r2, [pc, #32]	; (80015f8 <HAL_SAI_MspInit+0x184>)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6393      	str	r3, [r2, #56]	; 0x38

    }
}
 80015da:	bf00      	nop
 80015dc:	37e0      	adds	r7, #224	; 0xe0
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	40015804 	.word	0x40015804
 80015e8:	24001074 	.word	0x24001074
 80015ec:	58024400 	.word	0x58024400
 80015f0:	58021000 	.word	0x58021000
 80015f4:	58020800 	.word	0x58020800
 80015f8:	24001248 	.word	0x24001248
 80015fc:	40020010 	.word	0x40020010

08001600 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001600:	b480      	push	{r7}
 8001602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001604:	e7fe      	b.n	8001604 <NMI_Handler+0x4>

08001606 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001606:	b480      	push	{r7}
 8001608:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800160a:	e7fe      	b.n	800160a <HardFault_Handler+0x4>

0800160c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800160c:	b480      	push	{r7}
 800160e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001610:	e7fe      	b.n	8001610 <MemManage_Handler+0x4>

08001612 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001612:	b480      	push	{r7}
 8001614:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001616:	e7fe      	b.n	8001616 <BusFault_Handler+0x4>

08001618 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001618:	b480      	push	{r7}
 800161a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800161c:	e7fe      	b.n	800161c <UsageFault_Handler+0x4>

0800161e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800161e:	b480      	push	{r7}
 8001620:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001622:	bf00      	nop
 8001624:	46bd      	mov	sp, r7
 8001626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162a:	4770      	bx	lr

0800162c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001630:	bf00      	nop
 8001632:	46bd      	mov	sp, r7
 8001634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001638:	4770      	bx	lr

0800163a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800163a:	b480      	push	{r7}
 800163c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800163e:	bf00      	nop
 8001640:	46bd      	mov	sp, r7
 8001642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001646:	4770      	bx	lr

08001648 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800164c:	f000 f8ce 	bl	80017ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001650:	bf00      	nop
 8001652:	bd80      	pop	{r7, pc}

08001654 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_a);
 8001658:	4802      	ldr	r0, [pc, #8]	; (8001664 <DMA1_Stream0_IRQHandler+0x10>)
 800165a:	f001 fe39 	bl	80032d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800165e:	bf00      	nop
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	24001248 	.word	0x24001248

08001668 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 800166c:	4802      	ldr	r0, [pc, #8]	; (8001678 <DMA1_Stream1_IRQHandler+0x10>)
 800166e:	f001 fe2f 	bl	80032d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001672:	bf00      	nop
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	240011d0 	.word	0x240011d0

0800167c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001680:	4802      	ldr	r0, [pc, #8]	; (800168c <TIM1_UP_IRQHandler+0x10>)
 8001682:	f007 f9b0 	bl	80089e6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001686:	bf00      	nop
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	240012c0 	.word	0x240012c0

08001690 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001694:	4802      	ldr	r0, [pc, #8]	; (80016a0 <USART3_IRQHandler+0x10>)
 8001696:	f007 fe8f 	bl	80093b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800169a:	bf00      	nop
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	2400111c 	.word	0x2400111c

080016a4 <SAI1_IRQHandler>:

/**
  * @brief This function handles SAI1 global interrupt.
  */
void SAI1_IRQHandler(void)
{
 80016a4:	b480      	push	{r7}
 80016a6:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_IRQn 0 */

  /* USER CODE BEGIN SAI1_IRQn 1 */

  /* USER CODE END SAI1_IRQn 1 */
}
 80016a8:	bf00      	nop
 80016aa:	46bd      	mov	sp, r7
 80016ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b0:	4770      	bx	lr
	...

080016b4 <Reset_Handler>:
*/

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  ldr   sp, =_estack      /* set stack pointer */
 80016b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016ec <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80016b8:	f7fe ff8a 	bl	80005d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80016bc:	480c      	ldr	r0, [pc, #48]	; (80016f0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80016be:	490d      	ldr	r1, [pc, #52]	; (80016f4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80016c0:	4a0d      	ldr	r2, [pc, #52]	; (80016f8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80016c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016c4:	e002      	b.n	80016cc <LoopCopyDataInit>

080016c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016ca:	3304      	adds	r3, #4

080016cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016d0:	d3f9      	bcc.n	80016c6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016d2:	4a0a      	ldr	r2, [pc, #40]	; (80016fc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80016d4:	4c0a      	ldr	r4, [pc, #40]	; (8001700 <LoopFillZerobss+0x22>)
  movs r3, #0
 80016d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016d8:	e001      	b.n	80016de <LoopFillZerobss>

080016da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016dc:	3204      	adds	r2, #4

080016de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016e0:	d3fb      	bcc.n	80016da <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80016e2:	f00b fa47 	bl	800cb74 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016e6:	f7ff f99d 	bl	8000a24 <main>
  bx  lr
 80016ea:	4770      	bx	lr
Reset_Handler:  ldr   sp, =_estack      /* set stack pointer */
 80016ec:	24040000 	.word	0x24040000
  ldr r0, =_sdata
 80016f0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80016f4:	24000474 	.word	0x24000474
  ldr r2, =_sidata
 80016f8:	0800d450 	.word	0x0800d450
  ldr r2, =_sbss
 80016fc:	24000474 	.word	0x24000474
  ldr r4, =_ebss
 8001700:	240013a8 	.word	0x240013a8

08001704 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001704:	e7fe      	b.n	8001704 <ADC3_IRQHandler>
	...

08001708 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b082      	sub	sp, #8
 800170c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800170e:	2003      	movs	r0, #3
 8001710:	f000 f98c 	bl	8001a2c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001714:	f004 f8f8 	bl	8005908 <HAL_RCC_GetSysClockFreq>
 8001718:	4602      	mov	r2, r0
 800171a:	4b15      	ldr	r3, [pc, #84]	; (8001770 <HAL_Init+0x68>)
 800171c:	699b      	ldr	r3, [r3, #24]
 800171e:	0a1b      	lsrs	r3, r3, #8
 8001720:	f003 030f 	and.w	r3, r3, #15
 8001724:	4913      	ldr	r1, [pc, #76]	; (8001774 <HAL_Init+0x6c>)
 8001726:	5ccb      	ldrb	r3, [r1, r3]
 8001728:	f003 031f 	and.w	r3, r3, #31
 800172c:	fa22 f303 	lsr.w	r3, r2, r3
 8001730:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001732:	4b0f      	ldr	r3, [pc, #60]	; (8001770 <HAL_Init+0x68>)
 8001734:	699b      	ldr	r3, [r3, #24]
 8001736:	f003 030f 	and.w	r3, r3, #15
 800173a:	4a0e      	ldr	r2, [pc, #56]	; (8001774 <HAL_Init+0x6c>)
 800173c:	5cd3      	ldrb	r3, [r2, r3]
 800173e:	f003 031f 	and.w	r3, r3, #31
 8001742:	687a      	ldr	r2, [r7, #4]
 8001744:	fa22 f303 	lsr.w	r3, r2, r3
 8001748:	4a0b      	ldr	r2, [pc, #44]	; (8001778 <HAL_Init+0x70>)
 800174a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800174c:	4a0b      	ldr	r2, [pc, #44]	; (800177c <HAL_Init+0x74>)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001752:	2000      	movs	r0, #0
 8001754:	f000 f814 	bl	8001780 <HAL_InitTick>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	d001      	beq.n	8001762 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800175e:	2301      	movs	r3, #1
 8001760:	e002      	b.n	8001768 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001762:	f7ff fd71 	bl	8001248 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001766:	2300      	movs	r3, #0
}
 8001768:	4618      	mov	r0, r3
 800176a:	3708      	adds	r7, #8
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}
 8001770:	58024400 	.word	0x58024400
 8001774:	0800cfa8 	.word	0x0800cfa8
 8001778:	24000404 	.word	0x24000404
 800177c:	24000400 	.word	0x24000400

08001780 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b082      	sub	sp, #8
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001788:	4b15      	ldr	r3, [pc, #84]	; (80017e0 <HAL_InitTick+0x60>)
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d101      	bne.n	8001794 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001790:	2301      	movs	r3, #1
 8001792:	e021      	b.n	80017d8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001794:	4b13      	ldr	r3, [pc, #76]	; (80017e4 <HAL_InitTick+0x64>)
 8001796:	681a      	ldr	r2, [r3, #0]
 8001798:	4b11      	ldr	r3, [pc, #68]	; (80017e0 <HAL_InitTick+0x60>)
 800179a:	781b      	ldrb	r3, [r3, #0]
 800179c:	4619      	mov	r1, r3
 800179e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80017a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80017aa:	4618      	mov	r0, r3
 80017ac:	f000 f971 	bl	8001a92 <HAL_SYSTICK_Config>
 80017b0:	4603      	mov	r3, r0
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d001      	beq.n	80017ba <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80017b6:	2301      	movs	r3, #1
 80017b8:	e00e      	b.n	80017d8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	2b0f      	cmp	r3, #15
 80017be:	d80a      	bhi.n	80017d6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017c0:	2200      	movs	r2, #0
 80017c2:	6879      	ldr	r1, [r7, #4]
 80017c4:	f04f 30ff 	mov.w	r0, #4294967295
 80017c8:	f000 f93b 	bl	8001a42 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017cc:	4a06      	ldr	r2, [pc, #24]	; (80017e8 <HAL_InitTick+0x68>)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017d2:	2300      	movs	r3, #0
 80017d4:	e000      	b.n	80017d8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80017d6:	2301      	movs	r3, #1
}
 80017d8:	4618      	mov	r0, r3
 80017da:	3708      	adds	r7, #8
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}
 80017e0:	2400040c 	.word	0x2400040c
 80017e4:	24000400 	.word	0x24000400
 80017e8:	24000408 	.word	0x24000408

080017ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80017f0:	4b06      	ldr	r3, [pc, #24]	; (800180c <HAL_IncTick+0x20>)
 80017f2:	781b      	ldrb	r3, [r3, #0]
 80017f4:	461a      	mov	r2, r3
 80017f6:	4b06      	ldr	r3, [pc, #24]	; (8001810 <HAL_IncTick+0x24>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4413      	add	r3, r2
 80017fc:	4a04      	ldr	r2, [pc, #16]	; (8001810 <HAL_IncTick+0x24>)
 80017fe:	6013      	str	r3, [r2, #0]
}
 8001800:	bf00      	nop
 8001802:	46bd      	mov	sp, r7
 8001804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001808:	4770      	bx	lr
 800180a:	bf00      	nop
 800180c:	2400040c 	.word	0x2400040c
 8001810:	240013a4 	.word	0x240013a4

08001814 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001814:	b480      	push	{r7}
 8001816:	af00      	add	r7, sp, #0
  return uwTick;
 8001818:	4b03      	ldr	r3, [pc, #12]	; (8001828 <HAL_GetTick+0x14>)
 800181a:	681b      	ldr	r3, [r3, #0]
}
 800181c:	4618      	mov	r0, r3
 800181e:	46bd      	mov	sp, r7
 8001820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001824:	4770      	bx	lr
 8001826:	bf00      	nop
 8001828:	240013a4 	.word	0x240013a4

0800182c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b084      	sub	sp, #16
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001834:	f7ff ffee 	bl	8001814 <HAL_GetTick>
 8001838:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001844:	d005      	beq.n	8001852 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001846:	4b0a      	ldr	r3, [pc, #40]	; (8001870 <HAL_Delay+0x44>)
 8001848:	781b      	ldrb	r3, [r3, #0]
 800184a:	461a      	mov	r2, r3
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	4413      	add	r3, r2
 8001850:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001852:	bf00      	nop
 8001854:	f7ff ffde 	bl	8001814 <HAL_GetTick>
 8001858:	4602      	mov	r2, r0
 800185a:	68bb      	ldr	r3, [r7, #8]
 800185c:	1ad3      	subs	r3, r2, r3
 800185e:	68fa      	ldr	r2, [r7, #12]
 8001860:	429a      	cmp	r2, r3
 8001862:	d8f7      	bhi.n	8001854 <HAL_Delay+0x28>
  {
  }
}
 8001864:	bf00      	nop
 8001866:	bf00      	nop
 8001868:	3710      	adds	r7, #16
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	2400040c 	.word	0x2400040c

08001874 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001874:	b480      	push	{r7}
 8001876:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001878:	4b03      	ldr	r3, [pc, #12]	; (8001888 <HAL_GetREVID+0x14>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	0c1b      	lsrs	r3, r3, #16
}
 800187e:	4618      	mov	r0, r3
 8001880:	46bd      	mov	sp, r7
 8001882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001886:	4770      	bx	lr
 8001888:	5c001000 	.word	0x5c001000

0800188c <__NVIC_SetPriorityGrouping>:
{
 800188c:	b480      	push	{r7}
 800188e:	b085      	sub	sp, #20
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	f003 0307 	and.w	r3, r3, #7
 800189a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800189c:	4b0b      	ldr	r3, [pc, #44]	; (80018cc <__NVIC_SetPriorityGrouping+0x40>)
 800189e:	68db      	ldr	r3, [r3, #12]
 80018a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018a2:	68ba      	ldr	r2, [r7, #8]
 80018a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018a8:	4013      	ands	r3, r2
 80018aa:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018b0:	68bb      	ldr	r3, [r7, #8]
 80018b2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80018b4:	4b06      	ldr	r3, [pc, #24]	; (80018d0 <__NVIC_SetPriorityGrouping+0x44>)
 80018b6:	4313      	orrs	r3, r2
 80018b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018ba:	4a04      	ldr	r2, [pc, #16]	; (80018cc <__NVIC_SetPriorityGrouping+0x40>)
 80018bc:	68bb      	ldr	r3, [r7, #8]
 80018be:	60d3      	str	r3, [r2, #12]
}
 80018c0:	bf00      	nop
 80018c2:	3714      	adds	r7, #20
 80018c4:	46bd      	mov	sp, r7
 80018c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ca:	4770      	bx	lr
 80018cc:	e000ed00 	.word	0xe000ed00
 80018d0:	05fa0000 	.word	0x05fa0000

080018d4 <__NVIC_GetPriorityGrouping>:
{
 80018d4:	b480      	push	{r7}
 80018d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018d8:	4b04      	ldr	r3, [pc, #16]	; (80018ec <__NVIC_GetPriorityGrouping+0x18>)
 80018da:	68db      	ldr	r3, [r3, #12]
 80018dc:	0a1b      	lsrs	r3, r3, #8
 80018de:	f003 0307 	and.w	r3, r3, #7
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	46bd      	mov	sp, r7
 80018e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ea:	4770      	bx	lr
 80018ec:	e000ed00 	.word	0xe000ed00

080018f0 <__NVIC_EnableIRQ>:
{
 80018f0:	b480      	push	{r7}
 80018f2:	b083      	sub	sp, #12
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	4603      	mov	r3, r0
 80018f8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80018fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	db0b      	blt.n	800191a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001902:	88fb      	ldrh	r3, [r7, #6]
 8001904:	f003 021f 	and.w	r2, r3, #31
 8001908:	4907      	ldr	r1, [pc, #28]	; (8001928 <__NVIC_EnableIRQ+0x38>)
 800190a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800190e:	095b      	lsrs	r3, r3, #5
 8001910:	2001      	movs	r0, #1
 8001912:	fa00 f202 	lsl.w	r2, r0, r2
 8001916:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800191a:	bf00      	nop
 800191c:	370c      	adds	r7, #12
 800191e:	46bd      	mov	sp, r7
 8001920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001924:	4770      	bx	lr
 8001926:	bf00      	nop
 8001928:	e000e100 	.word	0xe000e100

0800192c <__NVIC_SetPriority>:
{
 800192c:	b480      	push	{r7}
 800192e:	b083      	sub	sp, #12
 8001930:	af00      	add	r7, sp, #0
 8001932:	4603      	mov	r3, r0
 8001934:	6039      	str	r1, [r7, #0]
 8001936:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001938:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800193c:	2b00      	cmp	r3, #0
 800193e:	db0a      	blt.n	8001956 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	b2da      	uxtb	r2, r3
 8001944:	490c      	ldr	r1, [pc, #48]	; (8001978 <__NVIC_SetPriority+0x4c>)
 8001946:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800194a:	0112      	lsls	r2, r2, #4
 800194c:	b2d2      	uxtb	r2, r2
 800194e:	440b      	add	r3, r1
 8001950:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001954:	e00a      	b.n	800196c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	b2da      	uxtb	r2, r3
 800195a:	4908      	ldr	r1, [pc, #32]	; (800197c <__NVIC_SetPriority+0x50>)
 800195c:	88fb      	ldrh	r3, [r7, #6]
 800195e:	f003 030f 	and.w	r3, r3, #15
 8001962:	3b04      	subs	r3, #4
 8001964:	0112      	lsls	r2, r2, #4
 8001966:	b2d2      	uxtb	r2, r2
 8001968:	440b      	add	r3, r1
 800196a:	761a      	strb	r2, [r3, #24]
}
 800196c:	bf00      	nop
 800196e:	370c      	adds	r7, #12
 8001970:	46bd      	mov	sp, r7
 8001972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001976:	4770      	bx	lr
 8001978:	e000e100 	.word	0xe000e100
 800197c:	e000ed00 	.word	0xe000ed00

08001980 <NVIC_EncodePriority>:
{
 8001980:	b480      	push	{r7}
 8001982:	b089      	sub	sp, #36	; 0x24
 8001984:	af00      	add	r7, sp, #0
 8001986:	60f8      	str	r0, [r7, #12]
 8001988:	60b9      	str	r1, [r7, #8]
 800198a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	f003 0307 	and.w	r3, r3, #7
 8001992:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001994:	69fb      	ldr	r3, [r7, #28]
 8001996:	f1c3 0307 	rsb	r3, r3, #7
 800199a:	2b04      	cmp	r3, #4
 800199c:	bf28      	it	cs
 800199e:	2304      	movcs	r3, #4
 80019a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019a2:	69fb      	ldr	r3, [r7, #28]
 80019a4:	3304      	adds	r3, #4
 80019a6:	2b06      	cmp	r3, #6
 80019a8:	d902      	bls.n	80019b0 <NVIC_EncodePriority+0x30>
 80019aa:	69fb      	ldr	r3, [r7, #28]
 80019ac:	3b03      	subs	r3, #3
 80019ae:	e000      	b.n	80019b2 <NVIC_EncodePriority+0x32>
 80019b0:	2300      	movs	r3, #0
 80019b2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019b4:	f04f 32ff 	mov.w	r2, #4294967295
 80019b8:	69bb      	ldr	r3, [r7, #24]
 80019ba:	fa02 f303 	lsl.w	r3, r2, r3
 80019be:	43da      	mvns	r2, r3
 80019c0:	68bb      	ldr	r3, [r7, #8]
 80019c2:	401a      	ands	r2, r3
 80019c4:	697b      	ldr	r3, [r7, #20]
 80019c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019c8:	f04f 31ff 	mov.w	r1, #4294967295
 80019cc:	697b      	ldr	r3, [r7, #20]
 80019ce:	fa01 f303 	lsl.w	r3, r1, r3
 80019d2:	43d9      	mvns	r1, r3
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019d8:	4313      	orrs	r3, r2
}
 80019da:	4618      	mov	r0, r3
 80019dc:	3724      	adds	r7, #36	; 0x24
 80019de:	46bd      	mov	sp, r7
 80019e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e4:	4770      	bx	lr
	...

080019e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b082      	sub	sp, #8
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	3b01      	subs	r3, #1
 80019f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019f8:	d301      	bcc.n	80019fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019fa:	2301      	movs	r3, #1
 80019fc:	e00f      	b.n	8001a1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019fe:	4a0a      	ldr	r2, [pc, #40]	; (8001a28 <SysTick_Config+0x40>)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	3b01      	subs	r3, #1
 8001a04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a06:	210f      	movs	r1, #15
 8001a08:	f04f 30ff 	mov.w	r0, #4294967295
 8001a0c:	f7ff ff8e 	bl	800192c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a10:	4b05      	ldr	r3, [pc, #20]	; (8001a28 <SysTick_Config+0x40>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a16:	4b04      	ldr	r3, [pc, #16]	; (8001a28 <SysTick_Config+0x40>)
 8001a18:	2207      	movs	r2, #7
 8001a1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a1c:	2300      	movs	r3, #0
}
 8001a1e:	4618      	mov	r0, r3
 8001a20:	3708      	adds	r7, #8
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	e000e010 	.word	0xe000e010

08001a2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b082      	sub	sp, #8
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a34:	6878      	ldr	r0, [r7, #4]
 8001a36:	f7ff ff29 	bl	800188c <__NVIC_SetPriorityGrouping>
}
 8001a3a:	bf00      	nop
 8001a3c:	3708      	adds	r7, #8
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}

08001a42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a42:	b580      	push	{r7, lr}
 8001a44:	b086      	sub	sp, #24
 8001a46:	af00      	add	r7, sp, #0
 8001a48:	4603      	mov	r3, r0
 8001a4a:	60b9      	str	r1, [r7, #8]
 8001a4c:	607a      	str	r2, [r7, #4]
 8001a4e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001a50:	f7ff ff40 	bl	80018d4 <__NVIC_GetPriorityGrouping>
 8001a54:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a56:	687a      	ldr	r2, [r7, #4]
 8001a58:	68b9      	ldr	r1, [r7, #8]
 8001a5a:	6978      	ldr	r0, [r7, #20]
 8001a5c:	f7ff ff90 	bl	8001980 <NVIC_EncodePriority>
 8001a60:	4602      	mov	r2, r0
 8001a62:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001a66:	4611      	mov	r1, r2
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f7ff ff5f 	bl	800192c <__NVIC_SetPriority>
}
 8001a6e:	bf00      	nop
 8001a70:	3718      	adds	r7, #24
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}

08001a76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a76:	b580      	push	{r7, lr}
 8001a78:	b082      	sub	sp, #8
 8001a7a:	af00      	add	r7, sp, #0
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a80:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a84:	4618      	mov	r0, r3
 8001a86:	f7ff ff33 	bl	80018f0 <__NVIC_EnableIRQ>
}
 8001a8a:	bf00      	nop
 8001a8c:	3708      	adds	r7, #8
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}

08001a92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a92:	b580      	push	{r7, lr}
 8001a94:	b082      	sub	sp, #8
 8001a96:	af00      	add	r7, sp, #0
 8001a98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a9a:	6878      	ldr	r0, [r7, #4]
 8001a9c:	f7ff ffa4 	bl	80019e8 <SysTick_Config>
 8001aa0:	4603      	mov	r3, r0
}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	3708      	adds	r7, #8
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}
	...

08001aac <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b082      	sub	sp, #8
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d101      	bne.n	8001abe <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001aba:	2301      	movs	r3, #1
 8001abc:	e054      	b.n	8001b68 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	7f5b      	ldrb	r3, [r3, #29]
 8001ac2:	b2db      	uxtb	r3, r3
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d105      	bne.n	8001ad4 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2200      	movs	r2, #0
 8001acc:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001ace:	6878      	ldr	r0, [r7, #4]
 8001ad0:	f7ff fbd4 	bl	800127c <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2202      	movs	r2, #2
 8001ad8:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	791b      	ldrb	r3, [r3, #4]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d10c      	bne.n	8001afc <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4a22      	ldr	r2, [pc, #136]	; (8001b70 <HAL_CRC_Init+0xc4>)
 8001ae8:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	689a      	ldr	r2, [r3, #8]
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f022 0218 	bic.w	r2, r2, #24
 8001af8:	609a      	str	r2, [r3, #8]
 8001afa:	e00c      	b.n	8001b16 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6899      	ldr	r1, [r3, #8]
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	68db      	ldr	r3, [r3, #12]
 8001b04:	461a      	mov	r2, r3
 8001b06:	6878      	ldr	r0, [r7, #4]
 8001b08:	f000 f834 	bl	8001b74 <HAL_CRCEx_Polynomial_Set>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d001      	beq.n	8001b16 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8001b12:	2301      	movs	r3, #1
 8001b14:	e028      	b.n	8001b68 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	795b      	ldrb	r3, [r3, #5]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d105      	bne.n	8001b2a <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f04f 32ff 	mov.w	r2, #4294967295
 8001b26:	611a      	str	r2, [r3, #16]
 8001b28:	e004      	b.n	8001b34 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	687a      	ldr	r2, [r7, #4]
 8001b30:	6912      	ldr	r2, [r2, #16]
 8001b32:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	689b      	ldr	r3, [r3, #8]
 8001b3a:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	695a      	ldr	r2, [r3, #20]
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	430a      	orrs	r2, r1
 8001b48:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	689b      	ldr	r3, [r3, #8]
 8001b50:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	699a      	ldr	r2, [r3, #24]
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	430a      	orrs	r2, r1
 8001b5e:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2201      	movs	r2, #1
 8001b64:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8001b66:	2300      	movs	r3, #0
}
 8001b68:	4618      	mov	r0, r3
 8001b6a:	3708      	adds	r7, #8
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}
 8001b70:	04c11db7 	.word	0x04c11db7

08001b74 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b087      	sub	sp, #28
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	60f8      	str	r0, [r7, #12]
 8001b7c:	60b9      	str	r1, [r7, #8]
 8001b7e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b80:	2300      	movs	r3, #0
 8001b82:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8001b84:	231f      	movs	r3, #31
 8001b86:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8001b88:	bf00      	nop
 8001b8a:	693b      	ldr	r3, [r7, #16]
 8001b8c:	1e5a      	subs	r2, r3, #1
 8001b8e:	613a      	str	r2, [r7, #16]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d009      	beq.n	8001ba8 <HAL_CRCEx_Polynomial_Set+0x34>
 8001b94:	693b      	ldr	r3, [r7, #16]
 8001b96:	f003 031f 	and.w	r3, r3, #31
 8001b9a:	68ba      	ldr	r2, [r7, #8]
 8001b9c:	fa22 f303 	lsr.w	r3, r2, r3
 8001ba0:	f003 0301 	and.w	r3, r3, #1
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d0f0      	beq.n	8001b8a <HAL_CRCEx_Polynomial_Set+0x16>
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2b18      	cmp	r3, #24
 8001bac:	d846      	bhi.n	8001c3c <HAL_CRCEx_Polynomial_Set+0xc8>
 8001bae:	a201      	add	r2, pc, #4	; (adr r2, 8001bb4 <HAL_CRCEx_Polynomial_Set+0x40>)
 8001bb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bb4:	08001c43 	.word	0x08001c43
 8001bb8:	08001c3d 	.word	0x08001c3d
 8001bbc:	08001c3d 	.word	0x08001c3d
 8001bc0:	08001c3d 	.word	0x08001c3d
 8001bc4:	08001c3d 	.word	0x08001c3d
 8001bc8:	08001c3d 	.word	0x08001c3d
 8001bcc:	08001c3d 	.word	0x08001c3d
 8001bd0:	08001c3d 	.word	0x08001c3d
 8001bd4:	08001c31 	.word	0x08001c31
 8001bd8:	08001c3d 	.word	0x08001c3d
 8001bdc:	08001c3d 	.word	0x08001c3d
 8001be0:	08001c3d 	.word	0x08001c3d
 8001be4:	08001c3d 	.word	0x08001c3d
 8001be8:	08001c3d 	.word	0x08001c3d
 8001bec:	08001c3d 	.word	0x08001c3d
 8001bf0:	08001c3d 	.word	0x08001c3d
 8001bf4:	08001c25 	.word	0x08001c25
 8001bf8:	08001c3d 	.word	0x08001c3d
 8001bfc:	08001c3d 	.word	0x08001c3d
 8001c00:	08001c3d 	.word	0x08001c3d
 8001c04:	08001c3d 	.word	0x08001c3d
 8001c08:	08001c3d 	.word	0x08001c3d
 8001c0c:	08001c3d 	.word	0x08001c3d
 8001c10:	08001c3d 	.word	0x08001c3d
 8001c14:	08001c19 	.word	0x08001c19
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8001c18:	693b      	ldr	r3, [r7, #16]
 8001c1a:	2b06      	cmp	r3, #6
 8001c1c:	d913      	bls.n	8001c46 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8001c22:	e010      	b.n	8001c46 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8001c24:	693b      	ldr	r3, [r7, #16]
 8001c26:	2b07      	cmp	r3, #7
 8001c28:	d90f      	bls.n	8001c4a <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8001c2e:	e00c      	b.n	8001c4a <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8001c30:	693b      	ldr	r3, [r7, #16]
 8001c32:	2b0f      	cmp	r3, #15
 8001c34:	d90b      	bls.n	8001c4e <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8001c36:	2301      	movs	r3, #1
 8001c38:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8001c3a:	e008      	b.n	8001c4e <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	75fb      	strb	r3, [r7, #23]
      break;
 8001c40:	e006      	b.n	8001c50 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001c42:	bf00      	nop
 8001c44:	e004      	b.n	8001c50 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001c46:	bf00      	nop
 8001c48:	e002      	b.n	8001c50 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001c4a:	bf00      	nop
 8001c4c:	e000      	b.n	8001c50 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001c4e:	bf00      	nop
  }
  if (status == HAL_OK)
 8001c50:	7dfb      	ldrb	r3, [r7, #23]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d10d      	bne.n	8001c72 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	68ba      	ldr	r2, [r7, #8]
 8001c5c:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	689b      	ldr	r3, [r3, #8]
 8001c64:	f023 0118 	bic.w	r1, r3, #24
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	687a      	ldr	r2, [r7, #4]
 8001c6e:	430a      	orrs	r2, r1
 8001c70:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8001c72:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c74:	4618      	mov	r0, r3
 8001c76:	371c      	adds	r7, #28
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7e:	4770      	bx	lr

08001c80 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b086      	sub	sp, #24
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001c88:	f7ff fdc4 	bl	8001814 <HAL_GetTick>
 8001c8c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d101      	bne.n	8001c98 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001c94:	2301      	movs	r3, #1
 8001c96:	e316      	b.n	80022c6 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a66      	ldr	r2, [pc, #408]	; (8001e38 <HAL_DMA_Init+0x1b8>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d04a      	beq.n	8001d38 <HAL_DMA_Init+0xb8>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4a65      	ldr	r2, [pc, #404]	; (8001e3c <HAL_DMA_Init+0x1bc>)
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d045      	beq.n	8001d38 <HAL_DMA_Init+0xb8>
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a63      	ldr	r2, [pc, #396]	; (8001e40 <HAL_DMA_Init+0x1c0>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d040      	beq.n	8001d38 <HAL_DMA_Init+0xb8>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4a62      	ldr	r2, [pc, #392]	; (8001e44 <HAL_DMA_Init+0x1c4>)
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d03b      	beq.n	8001d38 <HAL_DMA_Init+0xb8>
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a60      	ldr	r2, [pc, #384]	; (8001e48 <HAL_DMA_Init+0x1c8>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d036      	beq.n	8001d38 <HAL_DMA_Init+0xb8>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4a5f      	ldr	r2, [pc, #380]	; (8001e4c <HAL_DMA_Init+0x1cc>)
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	d031      	beq.n	8001d38 <HAL_DMA_Init+0xb8>
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a5d      	ldr	r2, [pc, #372]	; (8001e50 <HAL_DMA_Init+0x1d0>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d02c      	beq.n	8001d38 <HAL_DMA_Init+0xb8>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4a5c      	ldr	r2, [pc, #368]	; (8001e54 <HAL_DMA_Init+0x1d4>)
 8001ce4:	4293      	cmp	r3, r2
 8001ce6:	d027      	beq.n	8001d38 <HAL_DMA_Init+0xb8>
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a5a      	ldr	r2, [pc, #360]	; (8001e58 <HAL_DMA_Init+0x1d8>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d022      	beq.n	8001d38 <HAL_DMA_Init+0xb8>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4a59      	ldr	r2, [pc, #356]	; (8001e5c <HAL_DMA_Init+0x1dc>)
 8001cf8:	4293      	cmp	r3, r2
 8001cfa:	d01d      	beq.n	8001d38 <HAL_DMA_Init+0xb8>
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a57      	ldr	r2, [pc, #348]	; (8001e60 <HAL_DMA_Init+0x1e0>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d018      	beq.n	8001d38 <HAL_DMA_Init+0xb8>
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4a56      	ldr	r2, [pc, #344]	; (8001e64 <HAL_DMA_Init+0x1e4>)
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d013      	beq.n	8001d38 <HAL_DMA_Init+0xb8>
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a54      	ldr	r2, [pc, #336]	; (8001e68 <HAL_DMA_Init+0x1e8>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d00e      	beq.n	8001d38 <HAL_DMA_Init+0xb8>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4a53      	ldr	r2, [pc, #332]	; (8001e6c <HAL_DMA_Init+0x1ec>)
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d009      	beq.n	8001d38 <HAL_DMA_Init+0xb8>
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4a51      	ldr	r2, [pc, #324]	; (8001e70 <HAL_DMA_Init+0x1f0>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d004      	beq.n	8001d38 <HAL_DMA_Init+0xb8>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4a50      	ldr	r2, [pc, #320]	; (8001e74 <HAL_DMA_Init+0x1f4>)
 8001d34:	4293      	cmp	r3, r2
 8001d36:	d101      	bne.n	8001d3c <HAL_DMA_Init+0xbc>
 8001d38:	2301      	movs	r3, #1
 8001d3a:	e000      	b.n	8001d3e <HAL_DMA_Init+0xbe>
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	f000 813b 	beq.w	8001fba <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2200      	movs	r2, #0
 8001d48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2202      	movs	r2, #2
 8001d50:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a37      	ldr	r2, [pc, #220]	; (8001e38 <HAL_DMA_Init+0x1b8>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d04a      	beq.n	8001df4 <HAL_DMA_Init+0x174>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4a36      	ldr	r2, [pc, #216]	; (8001e3c <HAL_DMA_Init+0x1bc>)
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d045      	beq.n	8001df4 <HAL_DMA_Init+0x174>
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a34      	ldr	r2, [pc, #208]	; (8001e40 <HAL_DMA_Init+0x1c0>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d040      	beq.n	8001df4 <HAL_DMA_Init+0x174>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4a33      	ldr	r2, [pc, #204]	; (8001e44 <HAL_DMA_Init+0x1c4>)
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d03b      	beq.n	8001df4 <HAL_DMA_Init+0x174>
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a31      	ldr	r2, [pc, #196]	; (8001e48 <HAL_DMA_Init+0x1c8>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d036      	beq.n	8001df4 <HAL_DMA_Init+0x174>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4a30      	ldr	r2, [pc, #192]	; (8001e4c <HAL_DMA_Init+0x1cc>)
 8001d8c:	4293      	cmp	r3, r2
 8001d8e:	d031      	beq.n	8001df4 <HAL_DMA_Init+0x174>
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a2e      	ldr	r2, [pc, #184]	; (8001e50 <HAL_DMA_Init+0x1d0>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d02c      	beq.n	8001df4 <HAL_DMA_Init+0x174>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4a2d      	ldr	r2, [pc, #180]	; (8001e54 <HAL_DMA_Init+0x1d4>)
 8001da0:	4293      	cmp	r3, r2
 8001da2:	d027      	beq.n	8001df4 <HAL_DMA_Init+0x174>
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a2b      	ldr	r2, [pc, #172]	; (8001e58 <HAL_DMA_Init+0x1d8>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d022      	beq.n	8001df4 <HAL_DMA_Init+0x174>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4a2a      	ldr	r2, [pc, #168]	; (8001e5c <HAL_DMA_Init+0x1dc>)
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d01d      	beq.n	8001df4 <HAL_DMA_Init+0x174>
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a28      	ldr	r2, [pc, #160]	; (8001e60 <HAL_DMA_Init+0x1e0>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d018      	beq.n	8001df4 <HAL_DMA_Init+0x174>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4a27      	ldr	r2, [pc, #156]	; (8001e64 <HAL_DMA_Init+0x1e4>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d013      	beq.n	8001df4 <HAL_DMA_Init+0x174>
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4a25      	ldr	r2, [pc, #148]	; (8001e68 <HAL_DMA_Init+0x1e8>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d00e      	beq.n	8001df4 <HAL_DMA_Init+0x174>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4a24      	ldr	r2, [pc, #144]	; (8001e6c <HAL_DMA_Init+0x1ec>)
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d009      	beq.n	8001df4 <HAL_DMA_Init+0x174>
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a22      	ldr	r2, [pc, #136]	; (8001e70 <HAL_DMA_Init+0x1f0>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d004      	beq.n	8001df4 <HAL_DMA_Init+0x174>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4a21      	ldr	r2, [pc, #132]	; (8001e74 <HAL_DMA_Init+0x1f4>)
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d108      	bne.n	8001e06 <HAL_DMA_Init+0x186>
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	681a      	ldr	r2, [r3, #0]
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f022 0201 	bic.w	r2, r2, #1
 8001e02:	601a      	str	r2, [r3, #0]
 8001e04:	e007      	b.n	8001e16 <HAL_DMA_Init+0x196>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	681a      	ldr	r2, [r3, #0]
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f022 0201 	bic.w	r2, r2, #1
 8001e14:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001e16:	e02f      	b.n	8001e78 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001e18:	f7ff fcfc 	bl	8001814 <HAL_GetTick>
 8001e1c:	4602      	mov	r2, r0
 8001e1e:	693b      	ldr	r3, [r7, #16]
 8001e20:	1ad3      	subs	r3, r2, r3
 8001e22:	2b05      	cmp	r3, #5
 8001e24:	d928      	bls.n	8001e78 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2220      	movs	r2, #32
 8001e2a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2203      	movs	r2, #3
 8001e30:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8001e34:	2301      	movs	r3, #1
 8001e36:	e246      	b.n	80022c6 <HAL_DMA_Init+0x646>
 8001e38:	40020010 	.word	0x40020010
 8001e3c:	40020028 	.word	0x40020028
 8001e40:	40020040 	.word	0x40020040
 8001e44:	40020058 	.word	0x40020058
 8001e48:	40020070 	.word	0x40020070
 8001e4c:	40020088 	.word	0x40020088
 8001e50:	400200a0 	.word	0x400200a0
 8001e54:	400200b8 	.word	0x400200b8
 8001e58:	40020410 	.word	0x40020410
 8001e5c:	40020428 	.word	0x40020428
 8001e60:	40020440 	.word	0x40020440
 8001e64:	40020458 	.word	0x40020458
 8001e68:	40020470 	.word	0x40020470
 8001e6c:	40020488 	.word	0x40020488
 8001e70:	400204a0 	.word	0x400204a0
 8001e74:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f003 0301 	and.w	r3, r3, #1
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d1c8      	bne.n	8001e18 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001e8e:	697a      	ldr	r2, [r7, #20]
 8001e90:	4b83      	ldr	r3, [pc, #524]	; (80020a0 <HAL_DMA_Init+0x420>)
 8001e92:	4013      	ands	r3, r2
 8001e94:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8001e9e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	691b      	ldr	r3, [r3, #16]
 8001ea4:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001eaa:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	699b      	ldr	r3, [r3, #24]
 8001eb0:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001eb6:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6a1b      	ldr	r3, [r3, #32]
 8001ebc:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8001ebe:	697a      	ldr	r2, [r7, #20]
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ec8:	2b04      	cmp	r3, #4
 8001eca:	d107      	bne.n	8001edc <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ed4:	4313      	orrs	r3, r2
 8001ed6:	697a      	ldr	r2, [r7, #20]
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8001edc:	4b71      	ldr	r3, [pc, #452]	; (80020a4 <HAL_DMA_Init+0x424>)
 8001ede:	681a      	ldr	r2, [r3, #0]
 8001ee0:	4b71      	ldr	r3, [pc, #452]	; (80020a8 <HAL_DMA_Init+0x428>)
 8001ee2:	4013      	ands	r3, r2
 8001ee4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001ee8:	d328      	bcc.n	8001f3c <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	2b28      	cmp	r3, #40	; 0x28
 8001ef0:	d903      	bls.n	8001efa <HAL_DMA_Init+0x27a>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	2b2e      	cmp	r3, #46	; 0x2e
 8001ef8:	d917      	bls.n	8001f2a <HAL_DMA_Init+0x2aa>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	2b3e      	cmp	r3, #62	; 0x3e
 8001f00:	d903      	bls.n	8001f0a <HAL_DMA_Init+0x28a>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	2b42      	cmp	r3, #66	; 0x42
 8001f08:	d90f      	bls.n	8001f2a <HAL_DMA_Init+0x2aa>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	2b46      	cmp	r3, #70	; 0x46
 8001f10:	d903      	bls.n	8001f1a <HAL_DMA_Init+0x29a>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	2b48      	cmp	r3, #72	; 0x48
 8001f18:	d907      	bls.n	8001f2a <HAL_DMA_Init+0x2aa>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	2b4e      	cmp	r3, #78	; 0x4e
 8001f20:	d905      	bls.n	8001f2e <HAL_DMA_Init+0x2ae>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	2b52      	cmp	r3, #82	; 0x52
 8001f28:	d801      	bhi.n	8001f2e <HAL_DMA_Init+0x2ae>
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	e000      	b.n	8001f30 <HAL_DMA_Init+0x2b0>
 8001f2e:	2300      	movs	r3, #0
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d003      	beq.n	8001f3c <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8001f34:	697b      	ldr	r3, [r7, #20]
 8001f36:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001f3a:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	697a      	ldr	r2, [r7, #20]
 8001f42:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	695b      	ldr	r3, [r3, #20]
 8001f4a:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001f4c:	697b      	ldr	r3, [r7, #20]
 8001f4e:	f023 0307 	bic.w	r3, r3, #7
 8001f52:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f58:	697a      	ldr	r2, [r7, #20]
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f62:	2b04      	cmp	r3, #4
 8001f64:	d117      	bne.n	8001f96 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f6a:	697a      	ldr	r2, [r7, #20]
 8001f6c:	4313      	orrs	r3, r2
 8001f6e:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d00e      	beq.n	8001f96 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001f78:	6878      	ldr	r0, [r7, #4]
 8001f7a:	f002 fb3d 	bl	80045f8 <DMA_CheckFifoParam>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d008      	beq.n	8001f96 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2240      	movs	r2, #64	; 0x40
 8001f88:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2201      	movs	r2, #1
 8001f8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8001f92:	2301      	movs	r3, #1
 8001f94:	e197      	b.n	80022c6 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	697a      	ldr	r2, [r7, #20]
 8001f9c:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001f9e:	6878      	ldr	r0, [r7, #4]
 8001fa0:	f002 fa78 	bl	8004494 <DMA_CalcBaseAndBitshift>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fac:	f003 031f 	and.w	r3, r3, #31
 8001fb0:	223f      	movs	r2, #63	; 0x3f
 8001fb2:	409a      	lsls	r2, r3
 8001fb4:	68bb      	ldr	r3, [r7, #8]
 8001fb6:	609a      	str	r2, [r3, #8]
 8001fb8:	e0cd      	b.n	8002156 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4a3b      	ldr	r2, [pc, #236]	; (80020ac <HAL_DMA_Init+0x42c>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d022      	beq.n	800200a <HAL_DMA_Init+0x38a>
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a39      	ldr	r2, [pc, #228]	; (80020b0 <HAL_DMA_Init+0x430>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d01d      	beq.n	800200a <HAL_DMA_Init+0x38a>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4a38      	ldr	r2, [pc, #224]	; (80020b4 <HAL_DMA_Init+0x434>)
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d018      	beq.n	800200a <HAL_DMA_Init+0x38a>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a36      	ldr	r2, [pc, #216]	; (80020b8 <HAL_DMA_Init+0x438>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d013      	beq.n	800200a <HAL_DMA_Init+0x38a>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4a35      	ldr	r2, [pc, #212]	; (80020bc <HAL_DMA_Init+0x43c>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d00e      	beq.n	800200a <HAL_DMA_Init+0x38a>
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4a33      	ldr	r2, [pc, #204]	; (80020c0 <HAL_DMA_Init+0x440>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d009      	beq.n	800200a <HAL_DMA_Init+0x38a>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4a32      	ldr	r2, [pc, #200]	; (80020c4 <HAL_DMA_Init+0x444>)
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d004      	beq.n	800200a <HAL_DMA_Init+0x38a>
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a30      	ldr	r2, [pc, #192]	; (80020c8 <HAL_DMA_Init+0x448>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d101      	bne.n	800200e <HAL_DMA_Init+0x38e>
 800200a:	2301      	movs	r3, #1
 800200c:	e000      	b.n	8002010 <HAL_DMA_Init+0x390>
 800200e:	2300      	movs	r3, #0
 8002010:	2b00      	cmp	r3, #0
 8002012:	f000 8097 	beq.w	8002144 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4a24      	ldr	r2, [pc, #144]	; (80020ac <HAL_DMA_Init+0x42c>)
 800201c:	4293      	cmp	r3, r2
 800201e:	d021      	beq.n	8002064 <HAL_DMA_Init+0x3e4>
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a22      	ldr	r2, [pc, #136]	; (80020b0 <HAL_DMA_Init+0x430>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d01c      	beq.n	8002064 <HAL_DMA_Init+0x3e4>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4a21      	ldr	r2, [pc, #132]	; (80020b4 <HAL_DMA_Init+0x434>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d017      	beq.n	8002064 <HAL_DMA_Init+0x3e4>
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a1f      	ldr	r2, [pc, #124]	; (80020b8 <HAL_DMA_Init+0x438>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d012      	beq.n	8002064 <HAL_DMA_Init+0x3e4>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4a1e      	ldr	r2, [pc, #120]	; (80020bc <HAL_DMA_Init+0x43c>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d00d      	beq.n	8002064 <HAL_DMA_Init+0x3e4>
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a1c      	ldr	r2, [pc, #112]	; (80020c0 <HAL_DMA_Init+0x440>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d008      	beq.n	8002064 <HAL_DMA_Init+0x3e4>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4a1b      	ldr	r2, [pc, #108]	; (80020c4 <HAL_DMA_Init+0x444>)
 8002058:	4293      	cmp	r3, r2
 800205a:	d003      	beq.n	8002064 <HAL_DMA_Init+0x3e4>
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4a19      	ldr	r2, [pc, #100]	; (80020c8 <HAL_DMA_Init+0x448>)
 8002062:	4293      	cmp	r3, r2
 8002064:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2200      	movs	r2, #0
 800206a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2202      	movs	r2, #2
 8002072:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800207e:	697a      	ldr	r2, [r7, #20]
 8002080:	4b12      	ldr	r3, [pc, #72]	; (80020cc <HAL_DMA_Init+0x44c>)
 8002082:	4013      	ands	r3, r2
 8002084:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	689b      	ldr	r3, [r3, #8]
 800208a:	2b40      	cmp	r3, #64	; 0x40
 800208c:	d020      	beq.n	80020d0 <HAL_DMA_Init+0x450>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	689b      	ldr	r3, [r3, #8]
 8002092:	2b80      	cmp	r3, #128	; 0x80
 8002094:	d102      	bne.n	800209c <HAL_DMA_Init+0x41c>
 8002096:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800209a:	e01a      	b.n	80020d2 <HAL_DMA_Init+0x452>
 800209c:	2300      	movs	r3, #0
 800209e:	e018      	b.n	80020d2 <HAL_DMA_Init+0x452>
 80020a0:	fe10803f 	.word	0xfe10803f
 80020a4:	5c001000 	.word	0x5c001000
 80020a8:	ffff0000 	.word	0xffff0000
 80020ac:	58025408 	.word	0x58025408
 80020b0:	5802541c 	.word	0x5802541c
 80020b4:	58025430 	.word	0x58025430
 80020b8:	58025444 	.word	0x58025444
 80020bc:	58025458 	.word	0x58025458
 80020c0:	5802546c 	.word	0x5802546c
 80020c4:	58025480 	.word	0x58025480
 80020c8:	58025494 	.word	0x58025494
 80020cc:	fffe000f 	.word	0xfffe000f
 80020d0:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80020d2:	687a      	ldr	r2, [r7, #4]
 80020d4:	68d2      	ldr	r2, [r2, #12]
 80020d6:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80020d8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	691b      	ldr	r3, [r3, #16]
 80020de:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80020e0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	695b      	ldr	r3, [r3, #20]
 80020e6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80020e8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	699b      	ldr	r3, [r3, #24]
 80020ee:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80020f0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	69db      	ldr	r3, [r3, #28]
 80020f6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80020f8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6a1b      	ldr	r3, [r3, #32]
 80020fe:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002100:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002102:	697a      	ldr	r2, [r7, #20]
 8002104:	4313      	orrs	r3, r2
 8002106:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	697a      	ldr	r2, [r7, #20]
 800210e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	461a      	mov	r2, r3
 8002116:	4b6e      	ldr	r3, [pc, #440]	; (80022d0 <HAL_DMA_Init+0x650>)
 8002118:	4413      	add	r3, r2
 800211a:	4a6e      	ldr	r2, [pc, #440]	; (80022d4 <HAL_DMA_Init+0x654>)
 800211c:	fba2 2303 	umull	r2, r3, r2, r3
 8002120:	091b      	lsrs	r3, r3, #4
 8002122:	009a      	lsls	r2, r3, #2
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002128:	6878      	ldr	r0, [r7, #4]
 800212a:	f002 f9b3 	bl	8004494 <DMA_CalcBaseAndBitshift>
 800212e:	4603      	mov	r3, r0
 8002130:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002136:	f003 031f 	and.w	r3, r3, #31
 800213a:	2201      	movs	r2, #1
 800213c:	409a      	lsls	r2, r3
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	605a      	str	r2, [r3, #4]
 8002142:	e008      	b.n	8002156 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2240      	movs	r2, #64	; 0x40
 8002148:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2203      	movs	r2, #3
 800214e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8002152:	2301      	movs	r3, #1
 8002154:	e0b7      	b.n	80022c6 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4a5f      	ldr	r2, [pc, #380]	; (80022d8 <HAL_DMA_Init+0x658>)
 800215c:	4293      	cmp	r3, r2
 800215e:	d072      	beq.n	8002246 <HAL_DMA_Init+0x5c6>
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a5d      	ldr	r2, [pc, #372]	; (80022dc <HAL_DMA_Init+0x65c>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d06d      	beq.n	8002246 <HAL_DMA_Init+0x5c6>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4a5c      	ldr	r2, [pc, #368]	; (80022e0 <HAL_DMA_Init+0x660>)
 8002170:	4293      	cmp	r3, r2
 8002172:	d068      	beq.n	8002246 <HAL_DMA_Init+0x5c6>
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a5a      	ldr	r2, [pc, #360]	; (80022e4 <HAL_DMA_Init+0x664>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d063      	beq.n	8002246 <HAL_DMA_Init+0x5c6>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4a59      	ldr	r2, [pc, #356]	; (80022e8 <HAL_DMA_Init+0x668>)
 8002184:	4293      	cmp	r3, r2
 8002186:	d05e      	beq.n	8002246 <HAL_DMA_Init+0x5c6>
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a57      	ldr	r2, [pc, #348]	; (80022ec <HAL_DMA_Init+0x66c>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d059      	beq.n	8002246 <HAL_DMA_Init+0x5c6>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4a56      	ldr	r2, [pc, #344]	; (80022f0 <HAL_DMA_Init+0x670>)
 8002198:	4293      	cmp	r3, r2
 800219a:	d054      	beq.n	8002246 <HAL_DMA_Init+0x5c6>
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a54      	ldr	r2, [pc, #336]	; (80022f4 <HAL_DMA_Init+0x674>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d04f      	beq.n	8002246 <HAL_DMA_Init+0x5c6>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4a53      	ldr	r2, [pc, #332]	; (80022f8 <HAL_DMA_Init+0x678>)
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d04a      	beq.n	8002246 <HAL_DMA_Init+0x5c6>
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a51      	ldr	r2, [pc, #324]	; (80022fc <HAL_DMA_Init+0x67c>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d045      	beq.n	8002246 <HAL_DMA_Init+0x5c6>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4a50      	ldr	r2, [pc, #320]	; (8002300 <HAL_DMA_Init+0x680>)
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d040      	beq.n	8002246 <HAL_DMA_Init+0x5c6>
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a4e      	ldr	r2, [pc, #312]	; (8002304 <HAL_DMA_Init+0x684>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d03b      	beq.n	8002246 <HAL_DMA_Init+0x5c6>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4a4d      	ldr	r2, [pc, #308]	; (8002308 <HAL_DMA_Init+0x688>)
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d036      	beq.n	8002246 <HAL_DMA_Init+0x5c6>
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a4b      	ldr	r2, [pc, #300]	; (800230c <HAL_DMA_Init+0x68c>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d031      	beq.n	8002246 <HAL_DMA_Init+0x5c6>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4a4a      	ldr	r2, [pc, #296]	; (8002310 <HAL_DMA_Init+0x690>)
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d02c      	beq.n	8002246 <HAL_DMA_Init+0x5c6>
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a48      	ldr	r2, [pc, #288]	; (8002314 <HAL_DMA_Init+0x694>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d027      	beq.n	8002246 <HAL_DMA_Init+0x5c6>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4a47      	ldr	r2, [pc, #284]	; (8002318 <HAL_DMA_Init+0x698>)
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d022      	beq.n	8002246 <HAL_DMA_Init+0x5c6>
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a45      	ldr	r2, [pc, #276]	; (800231c <HAL_DMA_Init+0x69c>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d01d      	beq.n	8002246 <HAL_DMA_Init+0x5c6>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4a44      	ldr	r2, [pc, #272]	; (8002320 <HAL_DMA_Init+0x6a0>)
 8002210:	4293      	cmp	r3, r2
 8002212:	d018      	beq.n	8002246 <HAL_DMA_Init+0x5c6>
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a42      	ldr	r2, [pc, #264]	; (8002324 <HAL_DMA_Init+0x6a4>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d013      	beq.n	8002246 <HAL_DMA_Init+0x5c6>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4a41      	ldr	r2, [pc, #260]	; (8002328 <HAL_DMA_Init+0x6a8>)
 8002224:	4293      	cmp	r3, r2
 8002226:	d00e      	beq.n	8002246 <HAL_DMA_Init+0x5c6>
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a3f      	ldr	r2, [pc, #252]	; (800232c <HAL_DMA_Init+0x6ac>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d009      	beq.n	8002246 <HAL_DMA_Init+0x5c6>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4a3e      	ldr	r2, [pc, #248]	; (8002330 <HAL_DMA_Init+0x6b0>)
 8002238:	4293      	cmp	r3, r2
 800223a:	d004      	beq.n	8002246 <HAL_DMA_Init+0x5c6>
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4a3c      	ldr	r2, [pc, #240]	; (8002334 <HAL_DMA_Init+0x6b4>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d101      	bne.n	800224a <HAL_DMA_Init+0x5ca>
 8002246:	2301      	movs	r3, #1
 8002248:	e000      	b.n	800224c <HAL_DMA_Init+0x5cc>
 800224a:	2300      	movs	r3, #0
 800224c:	2b00      	cmp	r3, #0
 800224e:	d032      	beq.n	80022b6 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002250:	6878      	ldr	r0, [r7, #4]
 8002252:	f002 fa4d 	bl	80046f0 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	689b      	ldr	r3, [r3, #8]
 800225a:	2b80      	cmp	r3, #128	; 0x80
 800225c:	d102      	bne.n	8002264 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2200      	movs	r2, #0
 8002262:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	685a      	ldr	r2, [r3, #4]
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800226c:	b2d2      	uxtb	r2, r2
 800226e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002274:	687a      	ldr	r2, [r7, #4]
 8002276:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002278:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d010      	beq.n	80022a4 <HAL_DMA_Init+0x624>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	2b08      	cmp	r3, #8
 8002288:	d80c      	bhi.n	80022a4 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800228a:	6878      	ldr	r0, [r7, #4]
 800228c:	f002 faca 	bl	8004824 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002294:	2200      	movs	r2, #0
 8002296:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800229c:	687a      	ldr	r2, [r7, #4]
 800229e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80022a0:	605a      	str	r2, [r3, #4]
 80022a2:	e008      	b.n	80022b6 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2200      	movs	r2, #0
 80022a8:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2200      	movs	r2, #0
 80022ae:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2200      	movs	r2, #0
 80022b4:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2200      	movs	r2, #0
 80022ba:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2201      	movs	r2, #1
 80022c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80022c4:	2300      	movs	r3, #0
}
 80022c6:	4618      	mov	r0, r3
 80022c8:	3718      	adds	r7, #24
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}
 80022ce:	bf00      	nop
 80022d0:	a7fdabf8 	.word	0xa7fdabf8
 80022d4:	cccccccd 	.word	0xcccccccd
 80022d8:	40020010 	.word	0x40020010
 80022dc:	40020028 	.word	0x40020028
 80022e0:	40020040 	.word	0x40020040
 80022e4:	40020058 	.word	0x40020058
 80022e8:	40020070 	.word	0x40020070
 80022ec:	40020088 	.word	0x40020088
 80022f0:	400200a0 	.word	0x400200a0
 80022f4:	400200b8 	.word	0x400200b8
 80022f8:	40020410 	.word	0x40020410
 80022fc:	40020428 	.word	0x40020428
 8002300:	40020440 	.word	0x40020440
 8002304:	40020458 	.word	0x40020458
 8002308:	40020470 	.word	0x40020470
 800230c:	40020488 	.word	0x40020488
 8002310:	400204a0 	.word	0x400204a0
 8002314:	400204b8 	.word	0x400204b8
 8002318:	58025408 	.word	0x58025408
 800231c:	5802541c 	.word	0x5802541c
 8002320:	58025430 	.word	0x58025430
 8002324:	58025444 	.word	0x58025444
 8002328:	58025458 	.word	0x58025458
 800232c:	5802546c 	.word	0x5802546c
 8002330:	58025480 	.word	0x58025480
 8002334:	58025494 	.word	0x58025494

08002338 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b086      	sub	sp, #24
 800233c:	af00      	add	r7, sp, #0
 800233e:	60f8      	str	r0, [r7, #12]
 8002340:	60b9      	str	r1, [r7, #8]
 8002342:	607a      	str	r2, [r7, #4]
 8002344:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002346:	2300      	movs	r3, #0
 8002348:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d101      	bne.n	8002354 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8002350:	2301      	movs	r3, #1
 8002352:	e226      	b.n	80027a2 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800235a:	2b01      	cmp	r3, #1
 800235c:	d101      	bne.n	8002362 <HAL_DMA_Start_IT+0x2a>
 800235e:	2302      	movs	r3, #2
 8002360:	e21f      	b.n	80027a2 <HAL_DMA_Start_IT+0x46a>
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	2201      	movs	r2, #1
 8002366:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002370:	b2db      	uxtb	r3, r3
 8002372:	2b01      	cmp	r3, #1
 8002374:	f040 820a 	bne.w	800278c <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	2202      	movs	r2, #2
 800237c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	2200      	movs	r2, #0
 8002384:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4a68      	ldr	r2, [pc, #416]	; (800252c <HAL_DMA_Start_IT+0x1f4>)
 800238c:	4293      	cmp	r3, r2
 800238e:	d04a      	beq.n	8002426 <HAL_DMA_Start_IT+0xee>
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a66      	ldr	r2, [pc, #408]	; (8002530 <HAL_DMA_Start_IT+0x1f8>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d045      	beq.n	8002426 <HAL_DMA_Start_IT+0xee>
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4a65      	ldr	r2, [pc, #404]	; (8002534 <HAL_DMA_Start_IT+0x1fc>)
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d040      	beq.n	8002426 <HAL_DMA_Start_IT+0xee>
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a63      	ldr	r2, [pc, #396]	; (8002538 <HAL_DMA_Start_IT+0x200>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d03b      	beq.n	8002426 <HAL_DMA_Start_IT+0xee>
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4a62      	ldr	r2, [pc, #392]	; (800253c <HAL_DMA_Start_IT+0x204>)
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d036      	beq.n	8002426 <HAL_DMA_Start_IT+0xee>
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a60      	ldr	r2, [pc, #384]	; (8002540 <HAL_DMA_Start_IT+0x208>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d031      	beq.n	8002426 <HAL_DMA_Start_IT+0xee>
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4a5f      	ldr	r2, [pc, #380]	; (8002544 <HAL_DMA_Start_IT+0x20c>)
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d02c      	beq.n	8002426 <HAL_DMA_Start_IT+0xee>
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a5d      	ldr	r2, [pc, #372]	; (8002548 <HAL_DMA_Start_IT+0x210>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d027      	beq.n	8002426 <HAL_DMA_Start_IT+0xee>
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4a5c      	ldr	r2, [pc, #368]	; (800254c <HAL_DMA_Start_IT+0x214>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	d022      	beq.n	8002426 <HAL_DMA_Start_IT+0xee>
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a5a      	ldr	r2, [pc, #360]	; (8002550 <HAL_DMA_Start_IT+0x218>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d01d      	beq.n	8002426 <HAL_DMA_Start_IT+0xee>
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4a59      	ldr	r2, [pc, #356]	; (8002554 <HAL_DMA_Start_IT+0x21c>)
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d018      	beq.n	8002426 <HAL_DMA_Start_IT+0xee>
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a57      	ldr	r2, [pc, #348]	; (8002558 <HAL_DMA_Start_IT+0x220>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d013      	beq.n	8002426 <HAL_DMA_Start_IT+0xee>
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a56      	ldr	r2, [pc, #344]	; (800255c <HAL_DMA_Start_IT+0x224>)
 8002404:	4293      	cmp	r3, r2
 8002406:	d00e      	beq.n	8002426 <HAL_DMA_Start_IT+0xee>
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a54      	ldr	r2, [pc, #336]	; (8002560 <HAL_DMA_Start_IT+0x228>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d009      	beq.n	8002426 <HAL_DMA_Start_IT+0xee>
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a53      	ldr	r2, [pc, #332]	; (8002564 <HAL_DMA_Start_IT+0x22c>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d004      	beq.n	8002426 <HAL_DMA_Start_IT+0xee>
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a51      	ldr	r2, [pc, #324]	; (8002568 <HAL_DMA_Start_IT+0x230>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d108      	bne.n	8002438 <HAL_DMA_Start_IT+0x100>
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	681a      	ldr	r2, [r3, #0]
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f022 0201 	bic.w	r2, r2, #1
 8002434:	601a      	str	r2, [r3, #0]
 8002436:	e007      	b.n	8002448 <HAL_DMA_Start_IT+0x110>
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	681a      	ldr	r2, [r3, #0]
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f022 0201 	bic.w	r2, r2, #1
 8002446:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	687a      	ldr	r2, [r7, #4]
 800244c:	68b9      	ldr	r1, [r7, #8]
 800244e:	68f8      	ldr	r0, [r7, #12]
 8002450:	f001 fe74 	bl	800413c <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a34      	ldr	r2, [pc, #208]	; (800252c <HAL_DMA_Start_IT+0x1f4>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d04a      	beq.n	80024f4 <HAL_DMA_Start_IT+0x1bc>
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4a33      	ldr	r2, [pc, #204]	; (8002530 <HAL_DMA_Start_IT+0x1f8>)
 8002464:	4293      	cmp	r3, r2
 8002466:	d045      	beq.n	80024f4 <HAL_DMA_Start_IT+0x1bc>
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a31      	ldr	r2, [pc, #196]	; (8002534 <HAL_DMA_Start_IT+0x1fc>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d040      	beq.n	80024f4 <HAL_DMA_Start_IT+0x1bc>
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4a30      	ldr	r2, [pc, #192]	; (8002538 <HAL_DMA_Start_IT+0x200>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d03b      	beq.n	80024f4 <HAL_DMA_Start_IT+0x1bc>
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a2e      	ldr	r2, [pc, #184]	; (800253c <HAL_DMA_Start_IT+0x204>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d036      	beq.n	80024f4 <HAL_DMA_Start_IT+0x1bc>
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a2d      	ldr	r2, [pc, #180]	; (8002540 <HAL_DMA_Start_IT+0x208>)
 800248c:	4293      	cmp	r3, r2
 800248e:	d031      	beq.n	80024f4 <HAL_DMA_Start_IT+0x1bc>
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a2b      	ldr	r2, [pc, #172]	; (8002544 <HAL_DMA_Start_IT+0x20c>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d02c      	beq.n	80024f4 <HAL_DMA_Start_IT+0x1bc>
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4a2a      	ldr	r2, [pc, #168]	; (8002548 <HAL_DMA_Start_IT+0x210>)
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d027      	beq.n	80024f4 <HAL_DMA_Start_IT+0x1bc>
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4a28      	ldr	r2, [pc, #160]	; (800254c <HAL_DMA_Start_IT+0x214>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d022      	beq.n	80024f4 <HAL_DMA_Start_IT+0x1bc>
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4a27      	ldr	r2, [pc, #156]	; (8002550 <HAL_DMA_Start_IT+0x218>)
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d01d      	beq.n	80024f4 <HAL_DMA_Start_IT+0x1bc>
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a25      	ldr	r2, [pc, #148]	; (8002554 <HAL_DMA_Start_IT+0x21c>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d018      	beq.n	80024f4 <HAL_DMA_Start_IT+0x1bc>
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4a24      	ldr	r2, [pc, #144]	; (8002558 <HAL_DMA_Start_IT+0x220>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d013      	beq.n	80024f4 <HAL_DMA_Start_IT+0x1bc>
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a22      	ldr	r2, [pc, #136]	; (800255c <HAL_DMA_Start_IT+0x224>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d00e      	beq.n	80024f4 <HAL_DMA_Start_IT+0x1bc>
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4a21      	ldr	r2, [pc, #132]	; (8002560 <HAL_DMA_Start_IT+0x228>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	d009      	beq.n	80024f4 <HAL_DMA_Start_IT+0x1bc>
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a1f      	ldr	r2, [pc, #124]	; (8002564 <HAL_DMA_Start_IT+0x22c>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d004      	beq.n	80024f4 <HAL_DMA_Start_IT+0x1bc>
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4a1e      	ldr	r2, [pc, #120]	; (8002568 <HAL_DMA_Start_IT+0x230>)
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d101      	bne.n	80024f8 <HAL_DMA_Start_IT+0x1c0>
 80024f4:	2301      	movs	r3, #1
 80024f6:	e000      	b.n	80024fa <HAL_DMA_Start_IT+0x1c2>
 80024f8:	2300      	movs	r3, #0
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d036      	beq.n	800256c <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f023 021e 	bic.w	r2, r3, #30
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f042 0216 	orr.w	r2, r2, #22
 8002510:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002516:	2b00      	cmp	r3, #0
 8002518:	d03e      	beq.n	8002598 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	681a      	ldr	r2, [r3, #0]
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f042 0208 	orr.w	r2, r2, #8
 8002528:	601a      	str	r2, [r3, #0]
 800252a:	e035      	b.n	8002598 <HAL_DMA_Start_IT+0x260>
 800252c:	40020010 	.word	0x40020010
 8002530:	40020028 	.word	0x40020028
 8002534:	40020040 	.word	0x40020040
 8002538:	40020058 	.word	0x40020058
 800253c:	40020070 	.word	0x40020070
 8002540:	40020088 	.word	0x40020088
 8002544:	400200a0 	.word	0x400200a0
 8002548:	400200b8 	.word	0x400200b8
 800254c:	40020410 	.word	0x40020410
 8002550:	40020428 	.word	0x40020428
 8002554:	40020440 	.word	0x40020440
 8002558:	40020458 	.word	0x40020458
 800255c:	40020470 	.word	0x40020470
 8002560:	40020488 	.word	0x40020488
 8002564:	400204a0 	.word	0x400204a0
 8002568:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f023 020e 	bic.w	r2, r3, #14
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f042 020a 	orr.w	r2, r2, #10
 800257e:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002584:	2b00      	cmp	r3, #0
 8002586:	d007      	beq.n	8002598 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	681a      	ldr	r2, [r3, #0]
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f042 0204 	orr.w	r2, r2, #4
 8002596:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a83      	ldr	r2, [pc, #524]	; (80027ac <HAL_DMA_Start_IT+0x474>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d072      	beq.n	8002688 <HAL_DMA_Start_IT+0x350>
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4a82      	ldr	r2, [pc, #520]	; (80027b0 <HAL_DMA_Start_IT+0x478>)
 80025a8:	4293      	cmp	r3, r2
 80025aa:	d06d      	beq.n	8002688 <HAL_DMA_Start_IT+0x350>
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a80      	ldr	r2, [pc, #512]	; (80027b4 <HAL_DMA_Start_IT+0x47c>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d068      	beq.n	8002688 <HAL_DMA_Start_IT+0x350>
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4a7f      	ldr	r2, [pc, #508]	; (80027b8 <HAL_DMA_Start_IT+0x480>)
 80025bc:	4293      	cmp	r3, r2
 80025be:	d063      	beq.n	8002688 <HAL_DMA_Start_IT+0x350>
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a7d      	ldr	r2, [pc, #500]	; (80027bc <HAL_DMA_Start_IT+0x484>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d05e      	beq.n	8002688 <HAL_DMA_Start_IT+0x350>
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4a7c      	ldr	r2, [pc, #496]	; (80027c0 <HAL_DMA_Start_IT+0x488>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d059      	beq.n	8002688 <HAL_DMA_Start_IT+0x350>
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a7a      	ldr	r2, [pc, #488]	; (80027c4 <HAL_DMA_Start_IT+0x48c>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d054      	beq.n	8002688 <HAL_DMA_Start_IT+0x350>
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4a79      	ldr	r2, [pc, #484]	; (80027c8 <HAL_DMA_Start_IT+0x490>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d04f      	beq.n	8002688 <HAL_DMA_Start_IT+0x350>
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a77      	ldr	r2, [pc, #476]	; (80027cc <HAL_DMA_Start_IT+0x494>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d04a      	beq.n	8002688 <HAL_DMA_Start_IT+0x350>
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4a76      	ldr	r2, [pc, #472]	; (80027d0 <HAL_DMA_Start_IT+0x498>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d045      	beq.n	8002688 <HAL_DMA_Start_IT+0x350>
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a74      	ldr	r2, [pc, #464]	; (80027d4 <HAL_DMA_Start_IT+0x49c>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d040      	beq.n	8002688 <HAL_DMA_Start_IT+0x350>
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4a73      	ldr	r2, [pc, #460]	; (80027d8 <HAL_DMA_Start_IT+0x4a0>)
 800260c:	4293      	cmp	r3, r2
 800260e:	d03b      	beq.n	8002688 <HAL_DMA_Start_IT+0x350>
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a71      	ldr	r2, [pc, #452]	; (80027dc <HAL_DMA_Start_IT+0x4a4>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d036      	beq.n	8002688 <HAL_DMA_Start_IT+0x350>
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4a70      	ldr	r2, [pc, #448]	; (80027e0 <HAL_DMA_Start_IT+0x4a8>)
 8002620:	4293      	cmp	r3, r2
 8002622:	d031      	beq.n	8002688 <HAL_DMA_Start_IT+0x350>
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a6e      	ldr	r2, [pc, #440]	; (80027e4 <HAL_DMA_Start_IT+0x4ac>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d02c      	beq.n	8002688 <HAL_DMA_Start_IT+0x350>
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4a6d      	ldr	r2, [pc, #436]	; (80027e8 <HAL_DMA_Start_IT+0x4b0>)
 8002634:	4293      	cmp	r3, r2
 8002636:	d027      	beq.n	8002688 <HAL_DMA_Start_IT+0x350>
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a6b      	ldr	r2, [pc, #428]	; (80027ec <HAL_DMA_Start_IT+0x4b4>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d022      	beq.n	8002688 <HAL_DMA_Start_IT+0x350>
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4a6a      	ldr	r2, [pc, #424]	; (80027f0 <HAL_DMA_Start_IT+0x4b8>)
 8002648:	4293      	cmp	r3, r2
 800264a:	d01d      	beq.n	8002688 <HAL_DMA_Start_IT+0x350>
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a68      	ldr	r2, [pc, #416]	; (80027f4 <HAL_DMA_Start_IT+0x4bc>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d018      	beq.n	8002688 <HAL_DMA_Start_IT+0x350>
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4a67      	ldr	r2, [pc, #412]	; (80027f8 <HAL_DMA_Start_IT+0x4c0>)
 800265c:	4293      	cmp	r3, r2
 800265e:	d013      	beq.n	8002688 <HAL_DMA_Start_IT+0x350>
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a65      	ldr	r2, [pc, #404]	; (80027fc <HAL_DMA_Start_IT+0x4c4>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d00e      	beq.n	8002688 <HAL_DMA_Start_IT+0x350>
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4a64      	ldr	r2, [pc, #400]	; (8002800 <HAL_DMA_Start_IT+0x4c8>)
 8002670:	4293      	cmp	r3, r2
 8002672:	d009      	beq.n	8002688 <HAL_DMA_Start_IT+0x350>
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4a62      	ldr	r2, [pc, #392]	; (8002804 <HAL_DMA_Start_IT+0x4cc>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d004      	beq.n	8002688 <HAL_DMA_Start_IT+0x350>
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4a61      	ldr	r2, [pc, #388]	; (8002808 <HAL_DMA_Start_IT+0x4d0>)
 8002684:	4293      	cmp	r3, r2
 8002686:	d101      	bne.n	800268c <HAL_DMA_Start_IT+0x354>
 8002688:	2301      	movs	r3, #1
 800268a:	e000      	b.n	800268e <HAL_DMA_Start_IT+0x356>
 800268c:	2300      	movs	r3, #0
 800268e:	2b00      	cmp	r3, #0
 8002690:	d01a      	beq.n	80026c8 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800269c:	2b00      	cmp	r3, #0
 800269e:	d007      	beq.n	80026b0 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026a4:	681a      	ldr	r2, [r3, #0]
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026aa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80026ae:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d007      	beq.n	80026c8 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80026bc:	681a      	ldr	r2, [r3, #0]
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80026c2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80026c6:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a37      	ldr	r2, [pc, #220]	; (80027ac <HAL_DMA_Start_IT+0x474>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d04a      	beq.n	8002768 <HAL_DMA_Start_IT+0x430>
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4a36      	ldr	r2, [pc, #216]	; (80027b0 <HAL_DMA_Start_IT+0x478>)
 80026d8:	4293      	cmp	r3, r2
 80026da:	d045      	beq.n	8002768 <HAL_DMA_Start_IT+0x430>
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a34      	ldr	r2, [pc, #208]	; (80027b4 <HAL_DMA_Start_IT+0x47c>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d040      	beq.n	8002768 <HAL_DMA_Start_IT+0x430>
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4a33      	ldr	r2, [pc, #204]	; (80027b8 <HAL_DMA_Start_IT+0x480>)
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d03b      	beq.n	8002768 <HAL_DMA_Start_IT+0x430>
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a31      	ldr	r2, [pc, #196]	; (80027bc <HAL_DMA_Start_IT+0x484>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d036      	beq.n	8002768 <HAL_DMA_Start_IT+0x430>
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4a30      	ldr	r2, [pc, #192]	; (80027c0 <HAL_DMA_Start_IT+0x488>)
 8002700:	4293      	cmp	r3, r2
 8002702:	d031      	beq.n	8002768 <HAL_DMA_Start_IT+0x430>
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a2e      	ldr	r2, [pc, #184]	; (80027c4 <HAL_DMA_Start_IT+0x48c>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d02c      	beq.n	8002768 <HAL_DMA_Start_IT+0x430>
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a2d      	ldr	r2, [pc, #180]	; (80027c8 <HAL_DMA_Start_IT+0x490>)
 8002714:	4293      	cmp	r3, r2
 8002716:	d027      	beq.n	8002768 <HAL_DMA_Start_IT+0x430>
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a2b      	ldr	r2, [pc, #172]	; (80027cc <HAL_DMA_Start_IT+0x494>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d022      	beq.n	8002768 <HAL_DMA_Start_IT+0x430>
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4a2a      	ldr	r2, [pc, #168]	; (80027d0 <HAL_DMA_Start_IT+0x498>)
 8002728:	4293      	cmp	r3, r2
 800272a:	d01d      	beq.n	8002768 <HAL_DMA_Start_IT+0x430>
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a28      	ldr	r2, [pc, #160]	; (80027d4 <HAL_DMA_Start_IT+0x49c>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d018      	beq.n	8002768 <HAL_DMA_Start_IT+0x430>
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4a27      	ldr	r2, [pc, #156]	; (80027d8 <HAL_DMA_Start_IT+0x4a0>)
 800273c:	4293      	cmp	r3, r2
 800273e:	d013      	beq.n	8002768 <HAL_DMA_Start_IT+0x430>
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a25      	ldr	r2, [pc, #148]	; (80027dc <HAL_DMA_Start_IT+0x4a4>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d00e      	beq.n	8002768 <HAL_DMA_Start_IT+0x430>
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4a24      	ldr	r2, [pc, #144]	; (80027e0 <HAL_DMA_Start_IT+0x4a8>)
 8002750:	4293      	cmp	r3, r2
 8002752:	d009      	beq.n	8002768 <HAL_DMA_Start_IT+0x430>
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a22      	ldr	r2, [pc, #136]	; (80027e4 <HAL_DMA_Start_IT+0x4ac>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d004      	beq.n	8002768 <HAL_DMA_Start_IT+0x430>
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4a21      	ldr	r2, [pc, #132]	; (80027e8 <HAL_DMA_Start_IT+0x4b0>)
 8002764:	4293      	cmp	r3, r2
 8002766:	d108      	bne.n	800277a <HAL_DMA_Start_IT+0x442>
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	681a      	ldr	r2, [r3, #0]
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f042 0201 	orr.w	r2, r2, #1
 8002776:	601a      	str	r2, [r3, #0]
 8002778:	e012      	b.n	80027a0 <HAL_DMA_Start_IT+0x468>
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	681a      	ldr	r2, [r3, #0]
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f042 0201 	orr.w	r2, r2, #1
 8002788:	601a      	str	r2, [r3, #0]
 800278a:	e009      	b.n	80027a0 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	2200      	movs	r2, #0
 8002790:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800279a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 800279c:	2301      	movs	r3, #1
 800279e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80027a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80027a2:	4618      	mov	r0, r3
 80027a4:	3718      	adds	r7, #24
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}
 80027aa:	bf00      	nop
 80027ac:	40020010 	.word	0x40020010
 80027b0:	40020028 	.word	0x40020028
 80027b4:	40020040 	.word	0x40020040
 80027b8:	40020058 	.word	0x40020058
 80027bc:	40020070 	.word	0x40020070
 80027c0:	40020088 	.word	0x40020088
 80027c4:	400200a0 	.word	0x400200a0
 80027c8:	400200b8 	.word	0x400200b8
 80027cc:	40020410 	.word	0x40020410
 80027d0:	40020428 	.word	0x40020428
 80027d4:	40020440 	.word	0x40020440
 80027d8:	40020458 	.word	0x40020458
 80027dc:	40020470 	.word	0x40020470
 80027e0:	40020488 	.word	0x40020488
 80027e4:	400204a0 	.word	0x400204a0
 80027e8:	400204b8 	.word	0x400204b8
 80027ec:	58025408 	.word	0x58025408
 80027f0:	5802541c 	.word	0x5802541c
 80027f4:	58025430 	.word	0x58025430
 80027f8:	58025444 	.word	0x58025444
 80027fc:	58025458 	.word	0x58025458
 8002800:	5802546c 	.word	0x5802546c
 8002804:	58025480 	.word	0x58025480
 8002808:	58025494 	.word	0x58025494

0800280c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b086      	sub	sp, #24
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8002814:	f7fe fffe 	bl	8001814 <HAL_GetTick>
 8002818:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d101      	bne.n	8002824 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002820:	2301      	movs	r3, #1
 8002822:	e2dc      	b.n	8002dde <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800282a:	b2db      	uxtb	r3, r3
 800282c:	2b02      	cmp	r3, #2
 800282e:	d008      	beq.n	8002842 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2280      	movs	r2, #128	; 0x80
 8002834:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2200      	movs	r2, #0
 800283a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 800283e:	2301      	movs	r3, #1
 8002840:	e2cd      	b.n	8002dde <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4a76      	ldr	r2, [pc, #472]	; (8002a20 <HAL_DMA_Abort+0x214>)
 8002848:	4293      	cmp	r3, r2
 800284a:	d04a      	beq.n	80028e2 <HAL_DMA_Abort+0xd6>
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a74      	ldr	r2, [pc, #464]	; (8002a24 <HAL_DMA_Abort+0x218>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d045      	beq.n	80028e2 <HAL_DMA_Abort+0xd6>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4a73      	ldr	r2, [pc, #460]	; (8002a28 <HAL_DMA_Abort+0x21c>)
 800285c:	4293      	cmp	r3, r2
 800285e:	d040      	beq.n	80028e2 <HAL_DMA_Abort+0xd6>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a71      	ldr	r2, [pc, #452]	; (8002a2c <HAL_DMA_Abort+0x220>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d03b      	beq.n	80028e2 <HAL_DMA_Abort+0xd6>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4a70      	ldr	r2, [pc, #448]	; (8002a30 <HAL_DMA_Abort+0x224>)
 8002870:	4293      	cmp	r3, r2
 8002872:	d036      	beq.n	80028e2 <HAL_DMA_Abort+0xd6>
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a6e      	ldr	r2, [pc, #440]	; (8002a34 <HAL_DMA_Abort+0x228>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d031      	beq.n	80028e2 <HAL_DMA_Abort+0xd6>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4a6d      	ldr	r2, [pc, #436]	; (8002a38 <HAL_DMA_Abort+0x22c>)
 8002884:	4293      	cmp	r3, r2
 8002886:	d02c      	beq.n	80028e2 <HAL_DMA_Abort+0xd6>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a6b      	ldr	r2, [pc, #428]	; (8002a3c <HAL_DMA_Abort+0x230>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d027      	beq.n	80028e2 <HAL_DMA_Abort+0xd6>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4a6a      	ldr	r2, [pc, #424]	; (8002a40 <HAL_DMA_Abort+0x234>)
 8002898:	4293      	cmp	r3, r2
 800289a:	d022      	beq.n	80028e2 <HAL_DMA_Abort+0xd6>
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a68      	ldr	r2, [pc, #416]	; (8002a44 <HAL_DMA_Abort+0x238>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d01d      	beq.n	80028e2 <HAL_DMA_Abort+0xd6>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4a67      	ldr	r2, [pc, #412]	; (8002a48 <HAL_DMA_Abort+0x23c>)
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d018      	beq.n	80028e2 <HAL_DMA_Abort+0xd6>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a65      	ldr	r2, [pc, #404]	; (8002a4c <HAL_DMA_Abort+0x240>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d013      	beq.n	80028e2 <HAL_DMA_Abort+0xd6>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4a64      	ldr	r2, [pc, #400]	; (8002a50 <HAL_DMA_Abort+0x244>)
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d00e      	beq.n	80028e2 <HAL_DMA_Abort+0xd6>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a62      	ldr	r2, [pc, #392]	; (8002a54 <HAL_DMA_Abort+0x248>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d009      	beq.n	80028e2 <HAL_DMA_Abort+0xd6>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4a61      	ldr	r2, [pc, #388]	; (8002a58 <HAL_DMA_Abort+0x24c>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d004      	beq.n	80028e2 <HAL_DMA_Abort+0xd6>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a5f      	ldr	r2, [pc, #380]	; (8002a5c <HAL_DMA_Abort+0x250>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d101      	bne.n	80028e6 <HAL_DMA_Abort+0xda>
 80028e2:	2301      	movs	r3, #1
 80028e4:	e000      	b.n	80028e8 <HAL_DMA_Abort+0xdc>
 80028e6:	2300      	movs	r3, #0
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d013      	beq.n	8002914 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	681a      	ldr	r2, [r3, #0]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f022 021e 	bic.w	r2, r2, #30
 80028fa:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	695a      	ldr	r2, [r3, #20]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800290a:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	617b      	str	r3, [r7, #20]
 8002912:	e00a      	b.n	800292a <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	681a      	ldr	r2, [r3, #0]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f022 020e 	bic.w	r2, r2, #14
 8002922:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4a3c      	ldr	r2, [pc, #240]	; (8002a20 <HAL_DMA_Abort+0x214>)
 8002930:	4293      	cmp	r3, r2
 8002932:	d072      	beq.n	8002a1a <HAL_DMA_Abort+0x20e>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a3a      	ldr	r2, [pc, #232]	; (8002a24 <HAL_DMA_Abort+0x218>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d06d      	beq.n	8002a1a <HAL_DMA_Abort+0x20e>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4a39      	ldr	r2, [pc, #228]	; (8002a28 <HAL_DMA_Abort+0x21c>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d068      	beq.n	8002a1a <HAL_DMA_Abort+0x20e>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4a37      	ldr	r2, [pc, #220]	; (8002a2c <HAL_DMA_Abort+0x220>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d063      	beq.n	8002a1a <HAL_DMA_Abort+0x20e>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4a36      	ldr	r2, [pc, #216]	; (8002a30 <HAL_DMA_Abort+0x224>)
 8002958:	4293      	cmp	r3, r2
 800295a:	d05e      	beq.n	8002a1a <HAL_DMA_Abort+0x20e>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a34      	ldr	r2, [pc, #208]	; (8002a34 <HAL_DMA_Abort+0x228>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d059      	beq.n	8002a1a <HAL_DMA_Abort+0x20e>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4a33      	ldr	r2, [pc, #204]	; (8002a38 <HAL_DMA_Abort+0x22c>)
 800296c:	4293      	cmp	r3, r2
 800296e:	d054      	beq.n	8002a1a <HAL_DMA_Abort+0x20e>
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a31      	ldr	r2, [pc, #196]	; (8002a3c <HAL_DMA_Abort+0x230>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d04f      	beq.n	8002a1a <HAL_DMA_Abort+0x20e>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4a30      	ldr	r2, [pc, #192]	; (8002a40 <HAL_DMA_Abort+0x234>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d04a      	beq.n	8002a1a <HAL_DMA_Abort+0x20e>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a2e      	ldr	r2, [pc, #184]	; (8002a44 <HAL_DMA_Abort+0x238>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d045      	beq.n	8002a1a <HAL_DMA_Abort+0x20e>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4a2d      	ldr	r2, [pc, #180]	; (8002a48 <HAL_DMA_Abort+0x23c>)
 8002994:	4293      	cmp	r3, r2
 8002996:	d040      	beq.n	8002a1a <HAL_DMA_Abort+0x20e>
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a2b      	ldr	r2, [pc, #172]	; (8002a4c <HAL_DMA_Abort+0x240>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d03b      	beq.n	8002a1a <HAL_DMA_Abort+0x20e>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4a2a      	ldr	r2, [pc, #168]	; (8002a50 <HAL_DMA_Abort+0x244>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d036      	beq.n	8002a1a <HAL_DMA_Abort+0x20e>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a28      	ldr	r2, [pc, #160]	; (8002a54 <HAL_DMA_Abort+0x248>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d031      	beq.n	8002a1a <HAL_DMA_Abort+0x20e>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a27      	ldr	r2, [pc, #156]	; (8002a58 <HAL_DMA_Abort+0x24c>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d02c      	beq.n	8002a1a <HAL_DMA_Abort+0x20e>
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a25      	ldr	r2, [pc, #148]	; (8002a5c <HAL_DMA_Abort+0x250>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d027      	beq.n	8002a1a <HAL_DMA_Abort+0x20e>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4a24      	ldr	r2, [pc, #144]	; (8002a60 <HAL_DMA_Abort+0x254>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d022      	beq.n	8002a1a <HAL_DMA_Abort+0x20e>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a22      	ldr	r2, [pc, #136]	; (8002a64 <HAL_DMA_Abort+0x258>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d01d      	beq.n	8002a1a <HAL_DMA_Abort+0x20e>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4a21      	ldr	r2, [pc, #132]	; (8002a68 <HAL_DMA_Abort+0x25c>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d018      	beq.n	8002a1a <HAL_DMA_Abort+0x20e>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a1f      	ldr	r2, [pc, #124]	; (8002a6c <HAL_DMA_Abort+0x260>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d013      	beq.n	8002a1a <HAL_DMA_Abort+0x20e>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4a1e      	ldr	r2, [pc, #120]	; (8002a70 <HAL_DMA_Abort+0x264>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d00e      	beq.n	8002a1a <HAL_DMA_Abort+0x20e>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a1c      	ldr	r2, [pc, #112]	; (8002a74 <HAL_DMA_Abort+0x268>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d009      	beq.n	8002a1a <HAL_DMA_Abort+0x20e>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a1b      	ldr	r2, [pc, #108]	; (8002a78 <HAL_DMA_Abort+0x26c>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d004      	beq.n	8002a1a <HAL_DMA_Abort+0x20e>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a19      	ldr	r2, [pc, #100]	; (8002a7c <HAL_DMA_Abort+0x270>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d132      	bne.n	8002a80 <HAL_DMA_Abort+0x274>
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	e031      	b.n	8002a82 <HAL_DMA_Abort+0x276>
 8002a1e:	bf00      	nop
 8002a20:	40020010 	.word	0x40020010
 8002a24:	40020028 	.word	0x40020028
 8002a28:	40020040 	.word	0x40020040
 8002a2c:	40020058 	.word	0x40020058
 8002a30:	40020070 	.word	0x40020070
 8002a34:	40020088 	.word	0x40020088
 8002a38:	400200a0 	.word	0x400200a0
 8002a3c:	400200b8 	.word	0x400200b8
 8002a40:	40020410 	.word	0x40020410
 8002a44:	40020428 	.word	0x40020428
 8002a48:	40020440 	.word	0x40020440
 8002a4c:	40020458 	.word	0x40020458
 8002a50:	40020470 	.word	0x40020470
 8002a54:	40020488 	.word	0x40020488
 8002a58:	400204a0 	.word	0x400204a0
 8002a5c:	400204b8 	.word	0x400204b8
 8002a60:	58025408 	.word	0x58025408
 8002a64:	5802541c 	.word	0x5802541c
 8002a68:	58025430 	.word	0x58025430
 8002a6c:	58025444 	.word	0x58025444
 8002a70:	58025458 	.word	0x58025458
 8002a74:	5802546c 	.word	0x5802546c
 8002a78:	58025480 	.word	0x58025480
 8002a7c:	58025494 	.word	0x58025494
 8002a80:	2300      	movs	r3, #0
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d007      	beq.n	8002a96 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a8a:	681a      	ldr	r2, [r3, #0]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a90:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002a94:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4a6d      	ldr	r2, [pc, #436]	; (8002c50 <HAL_DMA_Abort+0x444>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d04a      	beq.n	8002b36 <HAL_DMA_Abort+0x32a>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a6b      	ldr	r2, [pc, #428]	; (8002c54 <HAL_DMA_Abort+0x448>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d045      	beq.n	8002b36 <HAL_DMA_Abort+0x32a>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4a6a      	ldr	r2, [pc, #424]	; (8002c58 <HAL_DMA_Abort+0x44c>)
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d040      	beq.n	8002b36 <HAL_DMA_Abort+0x32a>
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a68      	ldr	r2, [pc, #416]	; (8002c5c <HAL_DMA_Abort+0x450>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d03b      	beq.n	8002b36 <HAL_DMA_Abort+0x32a>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4a67      	ldr	r2, [pc, #412]	; (8002c60 <HAL_DMA_Abort+0x454>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d036      	beq.n	8002b36 <HAL_DMA_Abort+0x32a>
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a65      	ldr	r2, [pc, #404]	; (8002c64 <HAL_DMA_Abort+0x458>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d031      	beq.n	8002b36 <HAL_DMA_Abort+0x32a>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4a64      	ldr	r2, [pc, #400]	; (8002c68 <HAL_DMA_Abort+0x45c>)
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d02c      	beq.n	8002b36 <HAL_DMA_Abort+0x32a>
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a62      	ldr	r2, [pc, #392]	; (8002c6c <HAL_DMA_Abort+0x460>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d027      	beq.n	8002b36 <HAL_DMA_Abort+0x32a>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4a61      	ldr	r2, [pc, #388]	; (8002c70 <HAL_DMA_Abort+0x464>)
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d022      	beq.n	8002b36 <HAL_DMA_Abort+0x32a>
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a5f      	ldr	r2, [pc, #380]	; (8002c74 <HAL_DMA_Abort+0x468>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d01d      	beq.n	8002b36 <HAL_DMA_Abort+0x32a>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4a5e      	ldr	r2, [pc, #376]	; (8002c78 <HAL_DMA_Abort+0x46c>)
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d018      	beq.n	8002b36 <HAL_DMA_Abort+0x32a>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a5c      	ldr	r2, [pc, #368]	; (8002c7c <HAL_DMA_Abort+0x470>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d013      	beq.n	8002b36 <HAL_DMA_Abort+0x32a>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a5b      	ldr	r2, [pc, #364]	; (8002c80 <HAL_DMA_Abort+0x474>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d00e      	beq.n	8002b36 <HAL_DMA_Abort+0x32a>
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4a59      	ldr	r2, [pc, #356]	; (8002c84 <HAL_DMA_Abort+0x478>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d009      	beq.n	8002b36 <HAL_DMA_Abort+0x32a>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4a58      	ldr	r2, [pc, #352]	; (8002c88 <HAL_DMA_Abort+0x47c>)
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d004      	beq.n	8002b36 <HAL_DMA_Abort+0x32a>
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a56      	ldr	r2, [pc, #344]	; (8002c8c <HAL_DMA_Abort+0x480>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d108      	bne.n	8002b48 <HAL_DMA_Abort+0x33c>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	681a      	ldr	r2, [r3, #0]
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f022 0201 	bic.w	r2, r2, #1
 8002b44:	601a      	str	r2, [r3, #0]
 8002b46:	e007      	b.n	8002b58 <HAL_DMA_Abort+0x34c>
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	681a      	ldr	r2, [r3, #0]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f022 0201 	bic.w	r2, r2, #1
 8002b56:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002b58:	e013      	b.n	8002b82 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002b5a:	f7fe fe5b 	bl	8001814 <HAL_GetTick>
 8002b5e:	4602      	mov	r2, r0
 8002b60:	693b      	ldr	r3, [r7, #16]
 8002b62:	1ad3      	subs	r3, r2, r3
 8002b64:	2b05      	cmp	r3, #5
 8002b66:	d90c      	bls.n	8002b82 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2220      	movs	r2, #32
 8002b6c:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2200      	movs	r2, #0
 8002b72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2203      	movs	r2, #3
 8002b7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	e12d      	b.n	8002dde <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f003 0301 	and.w	r3, r3, #1
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d1e5      	bne.n	8002b5a <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4a2f      	ldr	r2, [pc, #188]	; (8002c50 <HAL_DMA_Abort+0x444>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d04a      	beq.n	8002c2e <HAL_DMA_Abort+0x422>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a2d      	ldr	r2, [pc, #180]	; (8002c54 <HAL_DMA_Abort+0x448>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d045      	beq.n	8002c2e <HAL_DMA_Abort+0x422>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4a2c      	ldr	r2, [pc, #176]	; (8002c58 <HAL_DMA_Abort+0x44c>)
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d040      	beq.n	8002c2e <HAL_DMA_Abort+0x422>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4a2a      	ldr	r2, [pc, #168]	; (8002c5c <HAL_DMA_Abort+0x450>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d03b      	beq.n	8002c2e <HAL_DMA_Abort+0x422>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4a29      	ldr	r2, [pc, #164]	; (8002c60 <HAL_DMA_Abort+0x454>)
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d036      	beq.n	8002c2e <HAL_DMA_Abort+0x422>
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a27      	ldr	r2, [pc, #156]	; (8002c64 <HAL_DMA_Abort+0x458>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d031      	beq.n	8002c2e <HAL_DMA_Abort+0x422>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4a26      	ldr	r2, [pc, #152]	; (8002c68 <HAL_DMA_Abort+0x45c>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d02c      	beq.n	8002c2e <HAL_DMA_Abort+0x422>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a24      	ldr	r2, [pc, #144]	; (8002c6c <HAL_DMA_Abort+0x460>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d027      	beq.n	8002c2e <HAL_DMA_Abort+0x422>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4a23      	ldr	r2, [pc, #140]	; (8002c70 <HAL_DMA_Abort+0x464>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d022      	beq.n	8002c2e <HAL_DMA_Abort+0x422>
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4a21      	ldr	r2, [pc, #132]	; (8002c74 <HAL_DMA_Abort+0x468>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d01d      	beq.n	8002c2e <HAL_DMA_Abort+0x422>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4a20      	ldr	r2, [pc, #128]	; (8002c78 <HAL_DMA_Abort+0x46c>)
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d018      	beq.n	8002c2e <HAL_DMA_Abort+0x422>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a1e      	ldr	r2, [pc, #120]	; (8002c7c <HAL_DMA_Abort+0x470>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d013      	beq.n	8002c2e <HAL_DMA_Abort+0x422>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4a1d      	ldr	r2, [pc, #116]	; (8002c80 <HAL_DMA_Abort+0x474>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d00e      	beq.n	8002c2e <HAL_DMA_Abort+0x422>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a1b      	ldr	r2, [pc, #108]	; (8002c84 <HAL_DMA_Abort+0x478>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d009      	beq.n	8002c2e <HAL_DMA_Abort+0x422>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4a1a      	ldr	r2, [pc, #104]	; (8002c88 <HAL_DMA_Abort+0x47c>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d004      	beq.n	8002c2e <HAL_DMA_Abort+0x422>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a18      	ldr	r2, [pc, #96]	; (8002c8c <HAL_DMA_Abort+0x480>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d101      	bne.n	8002c32 <HAL_DMA_Abort+0x426>
 8002c2e:	2301      	movs	r3, #1
 8002c30:	e000      	b.n	8002c34 <HAL_DMA_Abort+0x428>
 8002c32:	2300      	movs	r3, #0
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d02b      	beq.n	8002c90 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c3c:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c42:	f003 031f 	and.w	r3, r3, #31
 8002c46:	223f      	movs	r2, #63	; 0x3f
 8002c48:	409a      	lsls	r2, r3
 8002c4a:	68bb      	ldr	r3, [r7, #8]
 8002c4c:	609a      	str	r2, [r3, #8]
 8002c4e:	e02a      	b.n	8002ca6 <HAL_DMA_Abort+0x49a>
 8002c50:	40020010 	.word	0x40020010
 8002c54:	40020028 	.word	0x40020028
 8002c58:	40020040 	.word	0x40020040
 8002c5c:	40020058 	.word	0x40020058
 8002c60:	40020070 	.word	0x40020070
 8002c64:	40020088 	.word	0x40020088
 8002c68:	400200a0 	.word	0x400200a0
 8002c6c:	400200b8 	.word	0x400200b8
 8002c70:	40020410 	.word	0x40020410
 8002c74:	40020428 	.word	0x40020428
 8002c78:	40020440 	.word	0x40020440
 8002c7c:	40020458 	.word	0x40020458
 8002c80:	40020470 	.word	0x40020470
 8002c84:	40020488 	.word	0x40020488
 8002c88:	400204a0 	.word	0x400204a0
 8002c8c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c94:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c9a:	f003 031f 	and.w	r3, r3, #31
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	409a      	lsls	r2, r3
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4a4f      	ldr	r2, [pc, #316]	; (8002de8 <HAL_DMA_Abort+0x5dc>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d072      	beq.n	8002d96 <HAL_DMA_Abort+0x58a>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a4d      	ldr	r2, [pc, #308]	; (8002dec <HAL_DMA_Abort+0x5e0>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d06d      	beq.n	8002d96 <HAL_DMA_Abort+0x58a>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a4c      	ldr	r2, [pc, #304]	; (8002df0 <HAL_DMA_Abort+0x5e4>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d068      	beq.n	8002d96 <HAL_DMA_Abort+0x58a>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4a4a      	ldr	r2, [pc, #296]	; (8002df4 <HAL_DMA_Abort+0x5e8>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d063      	beq.n	8002d96 <HAL_DMA_Abort+0x58a>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4a49      	ldr	r2, [pc, #292]	; (8002df8 <HAL_DMA_Abort+0x5ec>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d05e      	beq.n	8002d96 <HAL_DMA_Abort+0x58a>
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a47      	ldr	r2, [pc, #284]	; (8002dfc <HAL_DMA_Abort+0x5f0>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d059      	beq.n	8002d96 <HAL_DMA_Abort+0x58a>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4a46      	ldr	r2, [pc, #280]	; (8002e00 <HAL_DMA_Abort+0x5f4>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d054      	beq.n	8002d96 <HAL_DMA_Abort+0x58a>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4a44      	ldr	r2, [pc, #272]	; (8002e04 <HAL_DMA_Abort+0x5f8>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d04f      	beq.n	8002d96 <HAL_DMA_Abort+0x58a>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4a43      	ldr	r2, [pc, #268]	; (8002e08 <HAL_DMA_Abort+0x5fc>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d04a      	beq.n	8002d96 <HAL_DMA_Abort+0x58a>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a41      	ldr	r2, [pc, #260]	; (8002e0c <HAL_DMA_Abort+0x600>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d045      	beq.n	8002d96 <HAL_DMA_Abort+0x58a>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4a40      	ldr	r2, [pc, #256]	; (8002e10 <HAL_DMA_Abort+0x604>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d040      	beq.n	8002d96 <HAL_DMA_Abort+0x58a>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a3e      	ldr	r2, [pc, #248]	; (8002e14 <HAL_DMA_Abort+0x608>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d03b      	beq.n	8002d96 <HAL_DMA_Abort+0x58a>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4a3d      	ldr	r2, [pc, #244]	; (8002e18 <HAL_DMA_Abort+0x60c>)
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d036      	beq.n	8002d96 <HAL_DMA_Abort+0x58a>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a3b      	ldr	r2, [pc, #236]	; (8002e1c <HAL_DMA_Abort+0x610>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d031      	beq.n	8002d96 <HAL_DMA_Abort+0x58a>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4a3a      	ldr	r2, [pc, #232]	; (8002e20 <HAL_DMA_Abort+0x614>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d02c      	beq.n	8002d96 <HAL_DMA_Abort+0x58a>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a38      	ldr	r2, [pc, #224]	; (8002e24 <HAL_DMA_Abort+0x618>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d027      	beq.n	8002d96 <HAL_DMA_Abort+0x58a>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4a37      	ldr	r2, [pc, #220]	; (8002e28 <HAL_DMA_Abort+0x61c>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d022      	beq.n	8002d96 <HAL_DMA_Abort+0x58a>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a35      	ldr	r2, [pc, #212]	; (8002e2c <HAL_DMA_Abort+0x620>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d01d      	beq.n	8002d96 <HAL_DMA_Abort+0x58a>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4a34      	ldr	r2, [pc, #208]	; (8002e30 <HAL_DMA_Abort+0x624>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d018      	beq.n	8002d96 <HAL_DMA_Abort+0x58a>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a32      	ldr	r2, [pc, #200]	; (8002e34 <HAL_DMA_Abort+0x628>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d013      	beq.n	8002d96 <HAL_DMA_Abort+0x58a>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a31      	ldr	r2, [pc, #196]	; (8002e38 <HAL_DMA_Abort+0x62c>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d00e      	beq.n	8002d96 <HAL_DMA_Abort+0x58a>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a2f      	ldr	r2, [pc, #188]	; (8002e3c <HAL_DMA_Abort+0x630>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d009      	beq.n	8002d96 <HAL_DMA_Abort+0x58a>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a2e      	ldr	r2, [pc, #184]	; (8002e40 <HAL_DMA_Abort+0x634>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d004      	beq.n	8002d96 <HAL_DMA_Abort+0x58a>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a2c      	ldr	r2, [pc, #176]	; (8002e44 <HAL_DMA_Abort+0x638>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d101      	bne.n	8002d9a <HAL_DMA_Abort+0x58e>
 8002d96:	2301      	movs	r3, #1
 8002d98:	e000      	b.n	8002d9c <HAL_DMA_Abort+0x590>
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d015      	beq.n	8002dcc <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002da4:	687a      	ldr	r2, [r7, #4]
 8002da6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002da8:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d00c      	beq.n	8002dcc <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002db6:	681a      	ldr	r2, [r3, #0]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002dbc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002dc0:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dc6:	687a      	ldr	r2, [r7, #4]
 8002dc8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002dca:	605a      	str	r2, [r3, #4]
      }
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2200      	movs	r2, #0
 8002dd0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2201      	movs	r2, #1
 8002dd8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }

  return HAL_OK;
 8002ddc:	2300      	movs	r3, #0
}
 8002dde:	4618      	mov	r0, r3
 8002de0:	3718      	adds	r7, #24
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}
 8002de6:	bf00      	nop
 8002de8:	40020010 	.word	0x40020010
 8002dec:	40020028 	.word	0x40020028
 8002df0:	40020040 	.word	0x40020040
 8002df4:	40020058 	.word	0x40020058
 8002df8:	40020070 	.word	0x40020070
 8002dfc:	40020088 	.word	0x40020088
 8002e00:	400200a0 	.word	0x400200a0
 8002e04:	400200b8 	.word	0x400200b8
 8002e08:	40020410 	.word	0x40020410
 8002e0c:	40020428 	.word	0x40020428
 8002e10:	40020440 	.word	0x40020440
 8002e14:	40020458 	.word	0x40020458
 8002e18:	40020470 	.word	0x40020470
 8002e1c:	40020488 	.word	0x40020488
 8002e20:	400204a0 	.word	0x400204a0
 8002e24:	400204b8 	.word	0x400204b8
 8002e28:	58025408 	.word	0x58025408
 8002e2c:	5802541c 	.word	0x5802541c
 8002e30:	58025430 	.word	0x58025430
 8002e34:	58025444 	.word	0x58025444
 8002e38:	58025458 	.word	0x58025458
 8002e3c:	5802546c 	.word	0x5802546c
 8002e40:	58025480 	.word	0x58025480
 8002e44:	58025494 	.word	0x58025494

08002e48 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b084      	sub	sp, #16
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d101      	bne.n	8002e5a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8002e56:	2301      	movs	r3, #1
 8002e58:	e205      	b.n	8003266 <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e60:	b2db      	uxtb	r3, r3
 8002e62:	2b02      	cmp	r3, #2
 8002e64:	d004      	beq.n	8002e70 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2280      	movs	r2, #128	; 0x80
 8002e6a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	e1fa      	b.n	8003266 <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4a8c      	ldr	r2, [pc, #560]	; (80030a8 <HAL_DMA_Abort_IT+0x260>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d04a      	beq.n	8002f10 <HAL_DMA_Abort_IT+0xc8>
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4a8b      	ldr	r2, [pc, #556]	; (80030ac <HAL_DMA_Abort_IT+0x264>)
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d045      	beq.n	8002f10 <HAL_DMA_Abort_IT+0xc8>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4a89      	ldr	r2, [pc, #548]	; (80030b0 <HAL_DMA_Abort_IT+0x268>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d040      	beq.n	8002f10 <HAL_DMA_Abort_IT+0xc8>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4a88      	ldr	r2, [pc, #544]	; (80030b4 <HAL_DMA_Abort_IT+0x26c>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d03b      	beq.n	8002f10 <HAL_DMA_Abort_IT+0xc8>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a86      	ldr	r2, [pc, #536]	; (80030b8 <HAL_DMA_Abort_IT+0x270>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d036      	beq.n	8002f10 <HAL_DMA_Abort_IT+0xc8>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a85      	ldr	r2, [pc, #532]	; (80030bc <HAL_DMA_Abort_IT+0x274>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d031      	beq.n	8002f10 <HAL_DMA_Abort_IT+0xc8>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a83      	ldr	r2, [pc, #524]	; (80030c0 <HAL_DMA_Abort_IT+0x278>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d02c      	beq.n	8002f10 <HAL_DMA_Abort_IT+0xc8>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4a82      	ldr	r2, [pc, #520]	; (80030c4 <HAL_DMA_Abort_IT+0x27c>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d027      	beq.n	8002f10 <HAL_DMA_Abort_IT+0xc8>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a80      	ldr	r2, [pc, #512]	; (80030c8 <HAL_DMA_Abort_IT+0x280>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d022      	beq.n	8002f10 <HAL_DMA_Abort_IT+0xc8>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4a7f      	ldr	r2, [pc, #508]	; (80030cc <HAL_DMA_Abort_IT+0x284>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d01d      	beq.n	8002f10 <HAL_DMA_Abort_IT+0xc8>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a7d      	ldr	r2, [pc, #500]	; (80030d0 <HAL_DMA_Abort_IT+0x288>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d018      	beq.n	8002f10 <HAL_DMA_Abort_IT+0xc8>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a7c      	ldr	r2, [pc, #496]	; (80030d4 <HAL_DMA_Abort_IT+0x28c>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d013      	beq.n	8002f10 <HAL_DMA_Abort_IT+0xc8>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a7a      	ldr	r2, [pc, #488]	; (80030d8 <HAL_DMA_Abort_IT+0x290>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d00e      	beq.n	8002f10 <HAL_DMA_Abort_IT+0xc8>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a79      	ldr	r2, [pc, #484]	; (80030dc <HAL_DMA_Abort_IT+0x294>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d009      	beq.n	8002f10 <HAL_DMA_Abort_IT+0xc8>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a77      	ldr	r2, [pc, #476]	; (80030e0 <HAL_DMA_Abort_IT+0x298>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d004      	beq.n	8002f10 <HAL_DMA_Abort_IT+0xc8>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a76      	ldr	r2, [pc, #472]	; (80030e4 <HAL_DMA_Abort_IT+0x29c>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d101      	bne.n	8002f14 <HAL_DMA_Abort_IT+0xcc>
 8002f10:	2301      	movs	r3, #1
 8002f12:	e000      	b.n	8002f16 <HAL_DMA_Abort_IT+0xce>
 8002f14:	2300      	movs	r3, #0
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d065      	beq.n	8002fe6 <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2204      	movs	r2, #4
 8002f1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4a60      	ldr	r2, [pc, #384]	; (80030a8 <HAL_DMA_Abort_IT+0x260>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d04a      	beq.n	8002fc2 <HAL_DMA_Abort_IT+0x17a>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a5e      	ldr	r2, [pc, #376]	; (80030ac <HAL_DMA_Abort_IT+0x264>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d045      	beq.n	8002fc2 <HAL_DMA_Abort_IT+0x17a>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4a5d      	ldr	r2, [pc, #372]	; (80030b0 <HAL_DMA_Abort_IT+0x268>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d040      	beq.n	8002fc2 <HAL_DMA_Abort_IT+0x17a>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a5b      	ldr	r2, [pc, #364]	; (80030b4 <HAL_DMA_Abort_IT+0x26c>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d03b      	beq.n	8002fc2 <HAL_DMA_Abort_IT+0x17a>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a5a      	ldr	r2, [pc, #360]	; (80030b8 <HAL_DMA_Abort_IT+0x270>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d036      	beq.n	8002fc2 <HAL_DMA_Abort_IT+0x17a>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a58      	ldr	r2, [pc, #352]	; (80030bc <HAL_DMA_Abort_IT+0x274>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d031      	beq.n	8002fc2 <HAL_DMA_Abort_IT+0x17a>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4a57      	ldr	r2, [pc, #348]	; (80030c0 <HAL_DMA_Abort_IT+0x278>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d02c      	beq.n	8002fc2 <HAL_DMA_Abort_IT+0x17a>
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4a55      	ldr	r2, [pc, #340]	; (80030c4 <HAL_DMA_Abort_IT+0x27c>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d027      	beq.n	8002fc2 <HAL_DMA_Abort_IT+0x17a>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4a54      	ldr	r2, [pc, #336]	; (80030c8 <HAL_DMA_Abort_IT+0x280>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d022      	beq.n	8002fc2 <HAL_DMA_Abort_IT+0x17a>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a52      	ldr	r2, [pc, #328]	; (80030cc <HAL_DMA_Abort_IT+0x284>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d01d      	beq.n	8002fc2 <HAL_DMA_Abort_IT+0x17a>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4a51      	ldr	r2, [pc, #324]	; (80030d0 <HAL_DMA_Abort_IT+0x288>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d018      	beq.n	8002fc2 <HAL_DMA_Abort_IT+0x17a>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a4f      	ldr	r2, [pc, #316]	; (80030d4 <HAL_DMA_Abort_IT+0x28c>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d013      	beq.n	8002fc2 <HAL_DMA_Abort_IT+0x17a>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4a4e      	ldr	r2, [pc, #312]	; (80030d8 <HAL_DMA_Abort_IT+0x290>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d00e      	beq.n	8002fc2 <HAL_DMA_Abort_IT+0x17a>
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a4c      	ldr	r2, [pc, #304]	; (80030dc <HAL_DMA_Abort_IT+0x294>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d009      	beq.n	8002fc2 <HAL_DMA_Abort_IT+0x17a>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4a4b      	ldr	r2, [pc, #300]	; (80030e0 <HAL_DMA_Abort_IT+0x298>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d004      	beq.n	8002fc2 <HAL_DMA_Abort_IT+0x17a>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a49      	ldr	r2, [pc, #292]	; (80030e4 <HAL_DMA_Abort_IT+0x29c>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d108      	bne.n	8002fd4 <HAL_DMA_Abort_IT+0x18c>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	681a      	ldr	r2, [r3, #0]
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f022 0201 	bic.w	r2, r2, #1
 8002fd0:	601a      	str	r2, [r3, #0]
 8002fd2:	e147      	b.n	8003264 <HAL_DMA_Abort_IT+0x41c>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	681a      	ldr	r2, [r3, #0]
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f022 0201 	bic.w	r2, r2, #1
 8002fe2:	601a      	str	r2, [r3, #0]
 8002fe4:	e13e      	b.n	8003264 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	681a      	ldr	r2, [r3, #0]
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f022 020e 	bic.w	r2, r2, #14
 8002ff4:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4a2b      	ldr	r2, [pc, #172]	; (80030a8 <HAL_DMA_Abort_IT+0x260>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d04a      	beq.n	8003096 <HAL_DMA_Abort_IT+0x24e>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a29      	ldr	r2, [pc, #164]	; (80030ac <HAL_DMA_Abort_IT+0x264>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d045      	beq.n	8003096 <HAL_DMA_Abort_IT+0x24e>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4a28      	ldr	r2, [pc, #160]	; (80030b0 <HAL_DMA_Abort_IT+0x268>)
 8003010:	4293      	cmp	r3, r2
 8003012:	d040      	beq.n	8003096 <HAL_DMA_Abort_IT+0x24e>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4a26      	ldr	r2, [pc, #152]	; (80030b4 <HAL_DMA_Abort_IT+0x26c>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d03b      	beq.n	8003096 <HAL_DMA_Abort_IT+0x24e>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4a25      	ldr	r2, [pc, #148]	; (80030b8 <HAL_DMA_Abort_IT+0x270>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d036      	beq.n	8003096 <HAL_DMA_Abort_IT+0x24e>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4a23      	ldr	r2, [pc, #140]	; (80030bc <HAL_DMA_Abort_IT+0x274>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d031      	beq.n	8003096 <HAL_DMA_Abort_IT+0x24e>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4a22      	ldr	r2, [pc, #136]	; (80030c0 <HAL_DMA_Abort_IT+0x278>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d02c      	beq.n	8003096 <HAL_DMA_Abort_IT+0x24e>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a20      	ldr	r2, [pc, #128]	; (80030c4 <HAL_DMA_Abort_IT+0x27c>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d027      	beq.n	8003096 <HAL_DMA_Abort_IT+0x24e>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a1f      	ldr	r2, [pc, #124]	; (80030c8 <HAL_DMA_Abort_IT+0x280>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d022      	beq.n	8003096 <HAL_DMA_Abort_IT+0x24e>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a1d      	ldr	r2, [pc, #116]	; (80030cc <HAL_DMA_Abort_IT+0x284>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d01d      	beq.n	8003096 <HAL_DMA_Abort_IT+0x24e>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a1c      	ldr	r2, [pc, #112]	; (80030d0 <HAL_DMA_Abort_IT+0x288>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d018      	beq.n	8003096 <HAL_DMA_Abort_IT+0x24e>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a1a      	ldr	r2, [pc, #104]	; (80030d4 <HAL_DMA_Abort_IT+0x28c>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d013      	beq.n	8003096 <HAL_DMA_Abort_IT+0x24e>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4a19      	ldr	r2, [pc, #100]	; (80030d8 <HAL_DMA_Abort_IT+0x290>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d00e      	beq.n	8003096 <HAL_DMA_Abort_IT+0x24e>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4a17      	ldr	r2, [pc, #92]	; (80030dc <HAL_DMA_Abort_IT+0x294>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d009      	beq.n	8003096 <HAL_DMA_Abort_IT+0x24e>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4a16      	ldr	r2, [pc, #88]	; (80030e0 <HAL_DMA_Abort_IT+0x298>)
 8003088:	4293      	cmp	r3, r2
 800308a:	d004      	beq.n	8003096 <HAL_DMA_Abort_IT+0x24e>
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a14      	ldr	r2, [pc, #80]	; (80030e4 <HAL_DMA_Abort_IT+0x29c>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d128      	bne.n	80030e8 <HAL_DMA_Abort_IT+0x2a0>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	681a      	ldr	r2, [r3, #0]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f022 0201 	bic.w	r2, r2, #1
 80030a4:	601a      	str	r2, [r3, #0]
 80030a6:	e027      	b.n	80030f8 <HAL_DMA_Abort_IT+0x2b0>
 80030a8:	40020010 	.word	0x40020010
 80030ac:	40020028 	.word	0x40020028
 80030b0:	40020040 	.word	0x40020040
 80030b4:	40020058 	.word	0x40020058
 80030b8:	40020070 	.word	0x40020070
 80030bc:	40020088 	.word	0x40020088
 80030c0:	400200a0 	.word	0x400200a0
 80030c4:	400200b8 	.word	0x400200b8
 80030c8:	40020410 	.word	0x40020410
 80030cc:	40020428 	.word	0x40020428
 80030d0:	40020440 	.word	0x40020440
 80030d4:	40020458 	.word	0x40020458
 80030d8:	40020470 	.word	0x40020470
 80030dc:	40020488 	.word	0x40020488
 80030e0:	400204a0 	.word	0x400204a0
 80030e4:	400204b8 	.word	0x400204b8
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	681a      	ldr	r2, [r3, #0]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f022 0201 	bic.w	r2, r2, #1
 80030f6:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a5c      	ldr	r2, [pc, #368]	; (8003270 <HAL_DMA_Abort_IT+0x428>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d072      	beq.n	80031e8 <HAL_DMA_Abort_IT+0x3a0>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a5b      	ldr	r2, [pc, #364]	; (8003274 <HAL_DMA_Abort_IT+0x42c>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d06d      	beq.n	80031e8 <HAL_DMA_Abort_IT+0x3a0>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a59      	ldr	r2, [pc, #356]	; (8003278 <HAL_DMA_Abort_IT+0x430>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d068      	beq.n	80031e8 <HAL_DMA_Abort_IT+0x3a0>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4a58      	ldr	r2, [pc, #352]	; (800327c <HAL_DMA_Abort_IT+0x434>)
 800311c:	4293      	cmp	r3, r2
 800311e:	d063      	beq.n	80031e8 <HAL_DMA_Abort_IT+0x3a0>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4a56      	ldr	r2, [pc, #344]	; (8003280 <HAL_DMA_Abort_IT+0x438>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d05e      	beq.n	80031e8 <HAL_DMA_Abort_IT+0x3a0>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4a55      	ldr	r2, [pc, #340]	; (8003284 <HAL_DMA_Abort_IT+0x43c>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d059      	beq.n	80031e8 <HAL_DMA_Abort_IT+0x3a0>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a53      	ldr	r2, [pc, #332]	; (8003288 <HAL_DMA_Abort_IT+0x440>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d054      	beq.n	80031e8 <HAL_DMA_Abort_IT+0x3a0>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4a52      	ldr	r2, [pc, #328]	; (800328c <HAL_DMA_Abort_IT+0x444>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d04f      	beq.n	80031e8 <HAL_DMA_Abort_IT+0x3a0>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a50      	ldr	r2, [pc, #320]	; (8003290 <HAL_DMA_Abort_IT+0x448>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d04a      	beq.n	80031e8 <HAL_DMA_Abort_IT+0x3a0>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4a4f      	ldr	r2, [pc, #316]	; (8003294 <HAL_DMA_Abort_IT+0x44c>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d045      	beq.n	80031e8 <HAL_DMA_Abort_IT+0x3a0>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a4d      	ldr	r2, [pc, #308]	; (8003298 <HAL_DMA_Abort_IT+0x450>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d040      	beq.n	80031e8 <HAL_DMA_Abort_IT+0x3a0>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4a4c      	ldr	r2, [pc, #304]	; (800329c <HAL_DMA_Abort_IT+0x454>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d03b      	beq.n	80031e8 <HAL_DMA_Abort_IT+0x3a0>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a4a      	ldr	r2, [pc, #296]	; (80032a0 <HAL_DMA_Abort_IT+0x458>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d036      	beq.n	80031e8 <HAL_DMA_Abort_IT+0x3a0>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a49      	ldr	r2, [pc, #292]	; (80032a4 <HAL_DMA_Abort_IT+0x45c>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d031      	beq.n	80031e8 <HAL_DMA_Abort_IT+0x3a0>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a47      	ldr	r2, [pc, #284]	; (80032a8 <HAL_DMA_Abort_IT+0x460>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d02c      	beq.n	80031e8 <HAL_DMA_Abort_IT+0x3a0>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4a46      	ldr	r2, [pc, #280]	; (80032ac <HAL_DMA_Abort_IT+0x464>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d027      	beq.n	80031e8 <HAL_DMA_Abort_IT+0x3a0>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a44      	ldr	r2, [pc, #272]	; (80032b0 <HAL_DMA_Abort_IT+0x468>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d022      	beq.n	80031e8 <HAL_DMA_Abort_IT+0x3a0>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4a43      	ldr	r2, [pc, #268]	; (80032b4 <HAL_DMA_Abort_IT+0x46c>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d01d      	beq.n	80031e8 <HAL_DMA_Abort_IT+0x3a0>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a41      	ldr	r2, [pc, #260]	; (80032b8 <HAL_DMA_Abort_IT+0x470>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d018      	beq.n	80031e8 <HAL_DMA_Abort_IT+0x3a0>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a40      	ldr	r2, [pc, #256]	; (80032bc <HAL_DMA_Abort_IT+0x474>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d013      	beq.n	80031e8 <HAL_DMA_Abort_IT+0x3a0>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a3e      	ldr	r2, [pc, #248]	; (80032c0 <HAL_DMA_Abort_IT+0x478>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d00e      	beq.n	80031e8 <HAL_DMA_Abort_IT+0x3a0>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a3d      	ldr	r2, [pc, #244]	; (80032c4 <HAL_DMA_Abort_IT+0x47c>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d009      	beq.n	80031e8 <HAL_DMA_Abort_IT+0x3a0>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a3b      	ldr	r2, [pc, #236]	; (80032c8 <HAL_DMA_Abort_IT+0x480>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d004      	beq.n	80031e8 <HAL_DMA_Abort_IT+0x3a0>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4a3a      	ldr	r2, [pc, #232]	; (80032cc <HAL_DMA_Abort_IT+0x484>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d101      	bne.n	80031ec <HAL_DMA_Abort_IT+0x3a4>
 80031e8:	2301      	movs	r3, #1
 80031ea:	e000      	b.n	80031ee <HAL_DMA_Abort_IT+0x3a6>
 80031ec:	2300      	movs	r3, #0
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d028      	beq.n	8003244 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031f6:	681a      	ldr	r2, [r3, #0]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031fc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003200:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003206:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800320c:	f003 031f 	and.w	r3, r3, #31
 8003210:	2201      	movs	r2, #1
 8003212:	409a      	lsls	r2, r3
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800321c:	687a      	ldr	r2, [r7, #4]
 800321e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003220:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003226:	2b00      	cmp	r3, #0
 8003228:	d00c      	beq.n	8003244 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800322e:	681a      	ldr	r2, [r3, #0]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003234:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003238:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800323e:	687a      	ldr	r2, [r7, #4]
 8003240:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003242:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2200      	movs	r2, #0
 8003248:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2201      	movs	r2, #1
 8003250:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003258:	2b00      	cmp	r3, #0
 800325a:	d003      	beq.n	8003264 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003260:	6878      	ldr	r0, [r7, #4]
 8003262:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8003264:	2300      	movs	r3, #0
}
 8003266:	4618      	mov	r0, r3
 8003268:	3710      	adds	r7, #16
 800326a:	46bd      	mov	sp, r7
 800326c:	bd80      	pop	{r7, pc}
 800326e:	bf00      	nop
 8003270:	40020010 	.word	0x40020010
 8003274:	40020028 	.word	0x40020028
 8003278:	40020040 	.word	0x40020040
 800327c:	40020058 	.word	0x40020058
 8003280:	40020070 	.word	0x40020070
 8003284:	40020088 	.word	0x40020088
 8003288:	400200a0 	.word	0x400200a0
 800328c:	400200b8 	.word	0x400200b8
 8003290:	40020410 	.word	0x40020410
 8003294:	40020428 	.word	0x40020428
 8003298:	40020440 	.word	0x40020440
 800329c:	40020458 	.word	0x40020458
 80032a0:	40020470 	.word	0x40020470
 80032a4:	40020488 	.word	0x40020488
 80032a8:	400204a0 	.word	0x400204a0
 80032ac:	400204b8 	.word	0x400204b8
 80032b0:	58025408 	.word	0x58025408
 80032b4:	5802541c 	.word	0x5802541c
 80032b8:	58025430 	.word	0x58025430
 80032bc:	58025444 	.word	0x58025444
 80032c0:	58025458 	.word	0x58025458
 80032c4:	5802546c 	.word	0x5802546c
 80032c8:	58025480 	.word	0x58025480
 80032cc:	58025494 	.word	0x58025494

080032d0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b08a      	sub	sp, #40	; 0x28
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80032d8:	2300      	movs	r3, #0
 80032da:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80032dc:	4b67      	ldr	r3, [pc, #412]	; (800347c <HAL_DMA_IRQHandler+0x1ac>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a67      	ldr	r2, [pc, #412]	; (8003480 <HAL_DMA_IRQHandler+0x1b0>)
 80032e2:	fba2 2303 	umull	r2, r3, r2, r3
 80032e6:	0a9b      	lsrs	r3, r3, #10
 80032e8:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032ee:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032f4:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80032f6:	6a3b      	ldr	r3, [r7, #32]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80032fc:	69fb      	ldr	r3, [r7, #28]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4a5f      	ldr	r2, [pc, #380]	; (8003484 <HAL_DMA_IRQHandler+0x1b4>)
 8003308:	4293      	cmp	r3, r2
 800330a:	d04a      	beq.n	80033a2 <HAL_DMA_IRQHandler+0xd2>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4a5d      	ldr	r2, [pc, #372]	; (8003488 <HAL_DMA_IRQHandler+0x1b8>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d045      	beq.n	80033a2 <HAL_DMA_IRQHandler+0xd2>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4a5c      	ldr	r2, [pc, #368]	; (800348c <HAL_DMA_IRQHandler+0x1bc>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d040      	beq.n	80033a2 <HAL_DMA_IRQHandler+0xd2>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4a5a      	ldr	r2, [pc, #360]	; (8003490 <HAL_DMA_IRQHandler+0x1c0>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d03b      	beq.n	80033a2 <HAL_DMA_IRQHandler+0xd2>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4a59      	ldr	r2, [pc, #356]	; (8003494 <HAL_DMA_IRQHandler+0x1c4>)
 8003330:	4293      	cmp	r3, r2
 8003332:	d036      	beq.n	80033a2 <HAL_DMA_IRQHandler+0xd2>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a57      	ldr	r2, [pc, #348]	; (8003498 <HAL_DMA_IRQHandler+0x1c8>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d031      	beq.n	80033a2 <HAL_DMA_IRQHandler+0xd2>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a56      	ldr	r2, [pc, #344]	; (800349c <HAL_DMA_IRQHandler+0x1cc>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d02c      	beq.n	80033a2 <HAL_DMA_IRQHandler+0xd2>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4a54      	ldr	r2, [pc, #336]	; (80034a0 <HAL_DMA_IRQHandler+0x1d0>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d027      	beq.n	80033a2 <HAL_DMA_IRQHandler+0xd2>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4a53      	ldr	r2, [pc, #332]	; (80034a4 <HAL_DMA_IRQHandler+0x1d4>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d022      	beq.n	80033a2 <HAL_DMA_IRQHandler+0xd2>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a51      	ldr	r2, [pc, #324]	; (80034a8 <HAL_DMA_IRQHandler+0x1d8>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d01d      	beq.n	80033a2 <HAL_DMA_IRQHandler+0xd2>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4a50      	ldr	r2, [pc, #320]	; (80034ac <HAL_DMA_IRQHandler+0x1dc>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d018      	beq.n	80033a2 <HAL_DMA_IRQHandler+0xd2>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4a4e      	ldr	r2, [pc, #312]	; (80034b0 <HAL_DMA_IRQHandler+0x1e0>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d013      	beq.n	80033a2 <HAL_DMA_IRQHandler+0xd2>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4a4d      	ldr	r2, [pc, #308]	; (80034b4 <HAL_DMA_IRQHandler+0x1e4>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d00e      	beq.n	80033a2 <HAL_DMA_IRQHandler+0xd2>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a4b      	ldr	r2, [pc, #300]	; (80034b8 <HAL_DMA_IRQHandler+0x1e8>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d009      	beq.n	80033a2 <HAL_DMA_IRQHandler+0xd2>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4a4a      	ldr	r2, [pc, #296]	; (80034bc <HAL_DMA_IRQHandler+0x1ec>)
 8003394:	4293      	cmp	r3, r2
 8003396:	d004      	beq.n	80033a2 <HAL_DMA_IRQHandler+0xd2>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a48      	ldr	r2, [pc, #288]	; (80034c0 <HAL_DMA_IRQHandler+0x1f0>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d101      	bne.n	80033a6 <HAL_DMA_IRQHandler+0xd6>
 80033a2:	2301      	movs	r3, #1
 80033a4:	e000      	b.n	80033a8 <HAL_DMA_IRQHandler+0xd8>
 80033a6:	2300      	movs	r3, #0
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	f000 842b 	beq.w	8003c04 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033b2:	f003 031f 	and.w	r3, r3, #31
 80033b6:	2208      	movs	r2, #8
 80033b8:	409a      	lsls	r2, r3
 80033ba:	69bb      	ldr	r3, [r7, #24]
 80033bc:	4013      	ands	r3, r2
 80033be:	2b00      	cmp	r3, #0
 80033c0:	f000 80a2 	beq.w	8003508 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a2e      	ldr	r2, [pc, #184]	; (8003484 <HAL_DMA_IRQHandler+0x1b4>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d04a      	beq.n	8003464 <HAL_DMA_IRQHandler+0x194>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a2d      	ldr	r2, [pc, #180]	; (8003488 <HAL_DMA_IRQHandler+0x1b8>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d045      	beq.n	8003464 <HAL_DMA_IRQHandler+0x194>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a2b      	ldr	r2, [pc, #172]	; (800348c <HAL_DMA_IRQHandler+0x1bc>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d040      	beq.n	8003464 <HAL_DMA_IRQHandler+0x194>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4a2a      	ldr	r2, [pc, #168]	; (8003490 <HAL_DMA_IRQHandler+0x1c0>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d03b      	beq.n	8003464 <HAL_DMA_IRQHandler+0x194>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a28      	ldr	r2, [pc, #160]	; (8003494 <HAL_DMA_IRQHandler+0x1c4>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d036      	beq.n	8003464 <HAL_DMA_IRQHandler+0x194>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4a27      	ldr	r2, [pc, #156]	; (8003498 <HAL_DMA_IRQHandler+0x1c8>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d031      	beq.n	8003464 <HAL_DMA_IRQHandler+0x194>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4a25      	ldr	r2, [pc, #148]	; (800349c <HAL_DMA_IRQHandler+0x1cc>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d02c      	beq.n	8003464 <HAL_DMA_IRQHandler+0x194>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4a24      	ldr	r2, [pc, #144]	; (80034a0 <HAL_DMA_IRQHandler+0x1d0>)
 8003410:	4293      	cmp	r3, r2
 8003412:	d027      	beq.n	8003464 <HAL_DMA_IRQHandler+0x194>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a22      	ldr	r2, [pc, #136]	; (80034a4 <HAL_DMA_IRQHandler+0x1d4>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d022      	beq.n	8003464 <HAL_DMA_IRQHandler+0x194>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4a21      	ldr	r2, [pc, #132]	; (80034a8 <HAL_DMA_IRQHandler+0x1d8>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d01d      	beq.n	8003464 <HAL_DMA_IRQHandler+0x194>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a1f      	ldr	r2, [pc, #124]	; (80034ac <HAL_DMA_IRQHandler+0x1dc>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d018      	beq.n	8003464 <HAL_DMA_IRQHandler+0x194>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a1e      	ldr	r2, [pc, #120]	; (80034b0 <HAL_DMA_IRQHandler+0x1e0>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d013      	beq.n	8003464 <HAL_DMA_IRQHandler+0x194>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a1c      	ldr	r2, [pc, #112]	; (80034b4 <HAL_DMA_IRQHandler+0x1e4>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d00e      	beq.n	8003464 <HAL_DMA_IRQHandler+0x194>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4a1b      	ldr	r2, [pc, #108]	; (80034b8 <HAL_DMA_IRQHandler+0x1e8>)
 800344c:	4293      	cmp	r3, r2
 800344e:	d009      	beq.n	8003464 <HAL_DMA_IRQHandler+0x194>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a19      	ldr	r2, [pc, #100]	; (80034bc <HAL_DMA_IRQHandler+0x1ec>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d004      	beq.n	8003464 <HAL_DMA_IRQHandler+0x194>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4a18      	ldr	r2, [pc, #96]	; (80034c0 <HAL_DMA_IRQHandler+0x1f0>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d12f      	bne.n	80034c4 <HAL_DMA_IRQHandler+0x1f4>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f003 0304 	and.w	r3, r3, #4
 800346e:	2b00      	cmp	r3, #0
 8003470:	bf14      	ite	ne
 8003472:	2301      	movne	r3, #1
 8003474:	2300      	moveq	r3, #0
 8003476:	b2db      	uxtb	r3, r3
 8003478:	e02e      	b.n	80034d8 <HAL_DMA_IRQHandler+0x208>
 800347a:	bf00      	nop
 800347c:	24000400 	.word	0x24000400
 8003480:	1b4e81b5 	.word	0x1b4e81b5
 8003484:	40020010 	.word	0x40020010
 8003488:	40020028 	.word	0x40020028
 800348c:	40020040 	.word	0x40020040
 8003490:	40020058 	.word	0x40020058
 8003494:	40020070 	.word	0x40020070
 8003498:	40020088 	.word	0x40020088
 800349c:	400200a0 	.word	0x400200a0
 80034a0:	400200b8 	.word	0x400200b8
 80034a4:	40020410 	.word	0x40020410
 80034a8:	40020428 	.word	0x40020428
 80034ac:	40020440 	.word	0x40020440
 80034b0:	40020458 	.word	0x40020458
 80034b4:	40020470 	.word	0x40020470
 80034b8:	40020488 	.word	0x40020488
 80034bc:	400204a0 	.word	0x400204a0
 80034c0:	400204b8 	.word	0x400204b8
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f003 0308 	and.w	r3, r3, #8
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	bf14      	ite	ne
 80034d2:	2301      	movne	r3, #1
 80034d4:	2300      	moveq	r3, #0
 80034d6:	b2db      	uxtb	r3, r3
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d015      	beq.n	8003508 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	681a      	ldr	r2, [r3, #0]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f022 0204 	bic.w	r2, r2, #4
 80034ea:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034f0:	f003 031f 	and.w	r3, r3, #31
 80034f4:	2208      	movs	r2, #8
 80034f6:	409a      	lsls	r2, r3
 80034f8:	6a3b      	ldr	r3, [r7, #32]
 80034fa:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003500:	f043 0201 	orr.w	r2, r3, #1
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800350c:	f003 031f 	and.w	r3, r3, #31
 8003510:	69ba      	ldr	r2, [r7, #24]
 8003512:	fa22 f303 	lsr.w	r3, r2, r3
 8003516:	f003 0301 	and.w	r3, r3, #1
 800351a:	2b00      	cmp	r3, #0
 800351c:	d06e      	beq.n	80035fc <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4a69      	ldr	r2, [pc, #420]	; (80036c8 <HAL_DMA_IRQHandler+0x3f8>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d04a      	beq.n	80035be <HAL_DMA_IRQHandler+0x2ee>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a67      	ldr	r2, [pc, #412]	; (80036cc <HAL_DMA_IRQHandler+0x3fc>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d045      	beq.n	80035be <HAL_DMA_IRQHandler+0x2ee>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4a66      	ldr	r2, [pc, #408]	; (80036d0 <HAL_DMA_IRQHandler+0x400>)
 8003538:	4293      	cmp	r3, r2
 800353a:	d040      	beq.n	80035be <HAL_DMA_IRQHandler+0x2ee>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a64      	ldr	r2, [pc, #400]	; (80036d4 <HAL_DMA_IRQHandler+0x404>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d03b      	beq.n	80035be <HAL_DMA_IRQHandler+0x2ee>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4a63      	ldr	r2, [pc, #396]	; (80036d8 <HAL_DMA_IRQHandler+0x408>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d036      	beq.n	80035be <HAL_DMA_IRQHandler+0x2ee>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a61      	ldr	r2, [pc, #388]	; (80036dc <HAL_DMA_IRQHandler+0x40c>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d031      	beq.n	80035be <HAL_DMA_IRQHandler+0x2ee>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4a60      	ldr	r2, [pc, #384]	; (80036e0 <HAL_DMA_IRQHandler+0x410>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d02c      	beq.n	80035be <HAL_DMA_IRQHandler+0x2ee>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4a5e      	ldr	r2, [pc, #376]	; (80036e4 <HAL_DMA_IRQHandler+0x414>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d027      	beq.n	80035be <HAL_DMA_IRQHandler+0x2ee>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4a5d      	ldr	r2, [pc, #372]	; (80036e8 <HAL_DMA_IRQHandler+0x418>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d022      	beq.n	80035be <HAL_DMA_IRQHandler+0x2ee>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a5b      	ldr	r2, [pc, #364]	; (80036ec <HAL_DMA_IRQHandler+0x41c>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d01d      	beq.n	80035be <HAL_DMA_IRQHandler+0x2ee>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4a5a      	ldr	r2, [pc, #360]	; (80036f0 <HAL_DMA_IRQHandler+0x420>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d018      	beq.n	80035be <HAL_DMA_IRQHandler+0x2ee>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a58      	ldr	r2, [pc, #352]	; (80036f4 <HAL_DMA_IRQHandler+0x424>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d013      	beq.n	80035be <HAL_DMA_IRQHandler+0x2ee>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4a57      	ldr	r2, [pc, #348]	; (80036f8 <HAL_DMA_IRQHandler+0x428>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d00e      	beq.n	80035be <HAL_DMA_IRQHandler+0x2ee>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a55      	ldr	r2, [pc, #340]	; (80036fc <HAL_DMA_IRQHandler+0x42c>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d009      	beq.n	80035be <HAL_DMA_IRQHandler+0x2ee>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a54      	ldr	r2, [pc, #336]	; (8003700 <HAL_DMA_IRQHandler+0x430>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d004      	beq.n	80035be <HAL_DMA_IRQHandler+0x2ee>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a52      	ldr	r2, [pc, #328]	; (8003704 <HAL_DMA_IRQHandler+0x434>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d10a      	bne.n	80035d4 <HAL_DMA_IRQHandler+0x304>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	695b      	ldr	r3, [r3, #20]
 80035c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	bf14      	ite	ne
 80035cc:	2301      	movne	r3, #1
 80035ce:	2300      	moveq	r3, #0
 80035d0:	b2db      	uxtb	r3, r3
 80035d2:	e003      	b.n	80035dc <HAL_DMA_IRQHandler+0x30c>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	2300      	movs	r3, #0
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d00d      	beq.n	80035fc <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035e4:	f003 031f 	and.w	r3, r3, #31
 80035e8:	2201      	movs	r2, #1
 80035ea:	409a      	lsls	r2, r3
 80035ec:	6a3b      	ldr	r3, [r7, #32]
 80035ee:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035f4:	f043 0202 	orr.w	r2, r3, #2
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003600:	f003 031f 	and.w	r3, r3, #31
 8003604:	2204      	movs	r2, #4
 8003606:	409a      	lsls	r2, r3
 8003608:	69bb      	ldr	r3, [r7, #24]
 800360a:	4013      	ands	r3, r2
 800360c:	2b00      	cmp	r3, #0
 800360e:	f000 808f 	beq.w	8003730 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4a2c      	ldr	r2, [pc, #176]	; (80036c8 <HAL_DMA_IRQHandler+0x3f8>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d04a      	beq.n	80036b2 <HAL_DMA_IRQHandler+0x3e2>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a2a      	ldr	r2, [pc, #168]	; (80036cc <HAL_DMA_IRQHandler+0x3fc>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d045      	beq.n	80036b2 <HAL_DMA_IRQHandler+0x3e2>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a29      	ldr	r2, [pc, #164]	; (80036d0 <HAL_DMA_IRQHandler+0x400>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d040      	beq.n	80036b2 <HAL_DMA_IRQHandler+0x3e2>
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a27      	ldr	r2, [pc, #156]	; (80036d4 <HAL_DMA_IRQHandler+0x404>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d03b      	beq.n	80036b2 <HAL_DMA_IRQHandler+0x3e2>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4a26      	ldr	r2, [pc, #152]	; (80036d8 <HAL_DMA_IRQHandler+0x408>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d036      	beq.n	80036b2 <HAL_DMA_IRQHandler+0x3e2>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a24      	ldr	r2, [pc, #144]	; (80036dc <HAL_DMA_IRQHandler+0x40c>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d031      	beq.n	80036b2 <HAL_DMA_IRQHandler+0x3e2>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4a23      	ldr	r2, [pc, #140]	; (80036e0 <HAL_DMA_IRQHandler+0x410>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d02c      	beq.n	80036b2 <HAL_DMA_IRQHandler+0x3e2>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4a21      	ldr	r2, [pc, #132]	; (80036e4 <HAL_DMA_IRQHandler+0x414>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d027      	beq.n	80036b2 <HAL_DMA_IRQHandler+0x3e2>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4a20      	ldr	r2, [pc, #128]	; (80036e8 <HAL_DMA_IRQHandler+0x418>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d022      	beq.n	80036b2 <HAL_DMA_IRQHandler+0x3e2>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4a1e      	ldr	r2, [pc, #120]	; (80036ec <HAL_DMA_IRQHandler+0x41c>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d01d      	beq.n	80036b2 <HAL_DMA_IRQHandler+0x3e2>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a1d      	ldr	r2, [pc, #116]	; (80036f0 <HAL_DMA_IRQHandler+0x420>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d018      	beq.n	80036b2 <HAL_DMA_IRQHandler+0x3e2>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a1b      	ldr	r2, [pc, #108]	; (80036f4 <HAL_DMA_IRQHandler+0x424>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d013      	beq.n	80036b2 <HAL_DMA_IRQHandler+0x3e2>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4a1a      	ldr	r2, [pc, #104]	; (80036f8 <HAL_DMA_IRQHandler+0x428>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d00e      	beq.n	80036b2 <HAL_DMA_IRQHandler+0x3e2>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4a18      	ldr	r2, [pc, #96]	; (80036fc <HAL_DMA_IRQHandler+0x42c>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d009      	beq.n	80036b2 <HAL_DMA_IRQHandler+0x3e2>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4a17      	ldr	r2, [pc, #92]	; (8003700 <HAL_DMA_IRQHandler+0x430>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d004      	beq.n	80036b2 <HAL_DMA_IRQHandler+0x3e2>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a15      	ldr	r2, [pc, #84]	; (8003704 <HAL_DMA_IRQHandler+0x434>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d12a      	bne.n	8003708 <HAL_DMA_IRQHandler+0x438>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f003 0302 	and.w	r3, r3, #2
 80036bc:	2b00      	cmp	r3, #0
 80036be:	bf14      	ite	ne
 80036c0:	2301      	movne	r3, #1
 80036c2:	2300      	moveq	r3, #0
 80036c4:	b2db      	uxtb	r3, r3
 80036c6:	e023      	b.n	8003710 <HAL_DMA_IRQHandler+0x440>
 80036c8:	40020010 	.word	0x40020010
 80036cc:	40020028 	.word	0x40020028
 80036d0:	40020040 	.word	0x40020040
 80036d4:	40020058 	.word	0x40020058
 80036d8:	40020070 	.word	0x40020070
 80036dc:	40020088 	.word	0x40020088
 80036e0:	400200a0 	.word	0x400200a0
 80036e4:	400200b8 	.word	0x400200b8
 80036e8:	40020410 	.word	0x40020410
 80036ec:	40020428 	.word	0x40020428
 80036f0:	40020440 	.word	0x40020440
 80036f4:	40020458 	.word	0x40020458
 80036f8:	40020470 	.word	0x40020470
 80036fc:	40020488 	.word	0x40020488
 8003700:	400204a0 	.word	0x400204a0
 8003704:	400204b8 	.word	0x400204b8
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	2300      	movs	r3, #0
 8003710:	2b00      	cmp	r3, #0
 8003712:	d00d      	beq.n	8003730 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003718:	f003 031f 	and.w	r3, r3, #31
 800371c:	2204      	movs	r2, #4
 800371e:	409a      	lsls	r2, r3
 8003720:	6a3b      	ldr	r3, [r7, #32]
 8003722:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003728:	f043 0204 	orr.w	r2, r3, #4
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003734:	f003 031f 	and.w	r3, r3, #31
 8003738:	2210      	movs	r2, #16
 800373a:	409a      	lsls	r2, r3
 800373c:	69bb      	ldr	r3, [r7, #24]
 800373e:	4013      	ands	r3, r2
 8003740:	2b00      	cmp	r3, #0
 8003742:	f000 80a6 	beq.w	8003892 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4a85      	ldr	r2, [pc, #532]	; (8003960 <HAL_DMA_IRQHandler+0x690>)
 800374c:	4293      	cmp	r3, r2
 800374e:	d04a      	beq.n	80037e6 <HAL_DMA_IRQHandler+0x516>
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4a83      	ldr	r2, [pc, #524]	; (8003964 <HAL_DMA_IRQHandler+0x694>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d045      	beq.n	80037e6 <HAL_DMA_IRQHandler+0x516>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4a82      	ldr	r2, [pc, #520]	; (8003968 <HAL_DMA_IRQHandler+0x698>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d040      	beq.n	80037e6 <HAL_DMA_IRQHandler+0x516>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4a80      	ldr	r2, [pc, #512]	; (800396c <HAL_DMA_IRQHandler+0x69c>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d03b      	beq.n	80037e6 <HAL_DMA_IRQHandler+0x516>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4a7f      	ldr	r2, [pc, #508]	; (8003970 <HAL_DMA_IRQHandler+0x6a0>)
 8003774:	4293      	cmp	r3, r2
 8003776:	d036      	beq.n	80037e6 <HAL_DMA_IRQHandler+0x516>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a7d      	ldr	r2, [pc, #500]	; (8003974 <HAL_DMA_IRQHandler+0x6a4>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d031      	beq.n	80037e6 <HAL_DMA_IRQHandler+0x516>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4a7c      	ldr	r2, [pc, #496]	; (8003978 <HAL_DMA_IRQHandler+0x6a8>)
 8003788:	4293      	cmp	r3, r2
 800378a:	d02c      	beq.n	80037e6 <HAL_DMA_IRQHandler+0x516>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4a7a      	ldr	r2, [pc, #488]	; (800397c <HAL_DMA_IRQHandler+0x6ac>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d027      	beq.n	80037e6 <HAL_DMA_IRQHandler+0x516>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4a79      	ldr	r2, [pc, #484]	; (8003980 <HAL_DMA_IRQHandler+0x6b0>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d022      	beq.n	80037e6 <HAL_DMA_IRQHandler+0x516>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a77      	ldr	r2, [pc, #476]	; (8003984 <HAL_DMA_IRQHandler+0x6b4>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d01d      	beq.n	80037e6 <HAL_DMA_IRQHandler+0x516>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4a76      	ldr	r2, [pc, #472]	; (8003988 <HAL_DMA_IRQHandler+0x6b8>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d018      	beq.n	80037e6 <HAL_DMA_IRQHandler+0x516>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a74      	ldr	r2, [pc, #464]	; (800398c <HAL_DMA_IRQHandler+0x6bc>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d013      	beq.n	80037e6 <HAL_DMA_IRQHandler+0x516>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4a73      	ldr	r2, [pc, #460]	; (8003990 <HAL_DMA_IRQHandler+0x6c0>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d00e      	beq.n	80037e6 <HAL_DMA_IRQHandler+0x516>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4a71      	ldr	r2, [pc, #452]	; (8003994 <HAL_DMA_IRQHandler+0x6c4>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d009      	beq.n	80037e6 <HAL_DMA_IRQHandler+0x516>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4a70      	ldr	r2, [pc, #448]	; (8003998 <HAL_DMA_IRQHandler+0x6c8>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	d004      	beq.n	80037e6 <HAL_DMA_IRQHandler+0x516>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a6e      	ldr	r2, [pc, #440]	; (800399c <HAL_DMA_IRQHandler+0x6cc>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d10a      	bne.n	80037fc <HAL_DMA_IRQHandler+0x52c>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f003 0308 	and.w	r3, r3, #8
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	bf14      	ite	ne
 80037f4:	2301      	movne	r3, #1
 80037f6:	2300      	moveq	r3, #0
 80037f8:	b2db      	uxtb	r3, r3
 80037fa:	e009      	b.n	8003810 <HAL_DMA_IRQHandler+0x540>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f003 0304 	and.w	r3, r3, #4
 8003806:	2b00      	cmp	r3, #0
 8003808:	bf14      	ite	ne
 800380a:	2301      	movne	r3, #1
 800380c:	2300      	moveq	r3, #0
 800380e:	b2db      	uxtb	r3, r3
 8003810:	2b00      	cmp	r3, #0
 8003812:	d03e      	beq.n	8003892 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003818:	f003 031f 	and.w	r3, r3, #31
 800381c:	2210      	movs	r2, #16
 800381e:	409a      	lsls	r2, r3
 8003820:	6a3b      	ldr	r3, [r7, #32]
 8003822:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800382e:	2b00      	cmp	r3, #0
 8003830:	d018      	beq.n	8003864 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800383c:	2b00      	cmp	r3, #0
 800383e:	d108      	bne.n	8003852 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003844:	2b00      	cmp	r3, #0
 8003846:	d024      	beq.n	8003892 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800384c:	6878      	ldr	r0, [r7, #4]
 800384e:	4798      	blx	r3
 8003850:	e01f      	b.n	8003892 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003856:	2b00      	cmp	r3, #0
 8003858:	d01b      	beq.n	8003892 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800385e:	6878      	ldr	r0, [r7, #4]
 8003860:	4798      	blx	r3
 8003862:	e016      	b.n	8003892 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800386e:	2b00      	cmp	r3, #0
 8003870:	d107      	bne.n	8003882 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	681a      	ldr	r2, [r3, #0]
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f022 0208 	bic.w	r2, r2, #8
 8003880:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003886:	2b00      	cmp	r3, #0
 8003888:	d003      	beq.n	8003892 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800388e:	6878      	ldr	r0, [r7, #4]
 8003890:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003896:	f003 031f 	and.w	r3, r3, #31
 800389a:	2220      	movs	r2, #32
 800389c:	409a      	lsls	r2, r3
 800389e:	69bb      	ldr	r3, [r7, #24]
 80038a0:	4013      	ands	r3, r2
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	f000 8110 	beq.w	8003ac8 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a2c      	ldr	r2, [pc, #176]	; (8003960 <HAL_DMA_IRQHandler+0x690>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d04a      	beq.n	8003948 <HAL_DMA_IRQHandler+0x678>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4a2b      	ldr	r2, [pc, #172]	; (8003964 <HAL_DMA_IRQHandler+0x694>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d045      	beq.n	8003948 <HAL_DMA_IRQHandler+0x678>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a29      	ldr	r2, [pc, #164]	; (8003968 <HAL_DMA_IRQHandler+0x698>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d040      	beq.n	8003948 <HAL_DMA_IRQHandler+0x678>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4a28      	ldr	r2, [pc, #160]	; (800396c <HAL_DMA_IRQHandler+0x69c>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d03b      	beq.n	8003948 <HAL_DMA_IRQHandler+0x678>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a26      	ldr	r2, [pc, #152]	; (8003970 <HAL_DMA_IRQHandler+0x6a0>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d036      	beq.n	8003948 <HAL_DMA_IRQHandler+0x678>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4a25      	ldr	r2, [pc, #148]	; (8003974 <HAL_DMA_IRQHandler+0x6a4>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d031      	beq.n	8003948 <HAL_DMA_IRQHandler+0x678>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4a23      	ldr	r2, [pc, #140]	; (8003978 <HAL_DMA_IRQHandler+0x6a8>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d02c      	beq.n	8003948 <HAL_DMA_IRQHandler+0x678>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4a22      	ldr	r2, [pc, #136]	; (800397c <HAL_DMA_IRQHandler+0x6ac>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d027      	beq.n	8003948 <HAL_DMA_IRQHandler+0x678>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a20      	ldr	r2, [pc, #128]	; (8003980 <HAL_DMA_IRQHandler+0x6b0>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d022      	beq.n	8003948 <HAL_DMA_IRQHandler+0x678>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4a1f      	ldr	r2, [pc, #124]	; (8003984 <HAL_DMA_IRQHandler+0x6b4>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d01d      	beq.n	8003948 <HAL_DMA_IRQHandler+0x678>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a1d      	ldr	r2, [pc, #116]	; (8003988 <HAL_DMA_IRQHandler+0x6b8>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d018      	beq.n	8003948 <HAL_DMA_IRQHandler+0x678>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4a1c      	ldr	r2, [pc, #112]	; (800398c <HAL_DMA_IRQHandler+0x6bc>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d013      	beq.n	8003948 <HAL_DMA_IRQHandler+0x678>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a1a      	ldr	r2, [pc, #104]	; (8003990 <HAL_DMA_IRQHandler+0x6c0>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d00e      	beq.n	8003948 <HAL_DMA_IRQHandler+0x678>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4a19      	ldr	r2, [pc, #100]	; (8003994 <HAL_DMA_IRQHandler+0x6c4>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d009      	beq.n	8003948 <HAL_DMA_IRQHandler+0x678>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4a17      	ldr	r2, [pc, #92]	; (8003998 <HAL_DMA_IRQHandler+0x6c8>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d004      	beq.n	8003948 <HAL_DMA_IRQHandler+0x678>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4a16      	ldr	r2, [pc, #88]	; (800399c <HAL_DMA_IRQHandler+0x6cc>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d12b      	bne.n	80039a0 <HAL_DMA_IRQHandler+0x6d0>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f003 0310 	and.w	r3, r3, #16
 8003952:	2b00      	cmp	r3, #0
 8003954:	bf14      	ite	ne
 8003956:	2301      	movne	r3, #1
 8003958:	2300      	moveq	r3, #0
 800395a:	b2db      	uxtb	r3, r3
 800395c:	e02a      	b.n	80039b4 <HAL_DMA_IRQHandler+0x6e4>
 800395e:	bf00      	nop
 8003960:	40020010 	.word	0x40020010
 8003964:	40020028 	.word	0x40020028
 8003968:	40020040 	.word	0x40020040
 800396c:	40020058 	.word	0x40020058
 8003970:	40020070 	.word	0x40020070
 8003974:	40020088 	.word	0x40020088
 8003978:	400200a0 	.word	0x400200a0
 800397c:	400200b8 	.word	0x400200b8
 8003980:	40020410 	.word	0x40020410
 8003984:	40020428 	.word	0x40020428
 8003988:	40020440 	.word	0x40020440
 800398c:	40020458 	.word	0x40020458
 8003990:	40020470 	.word	0x40020470
 8003994:	40020488 	.word	0x40020488
 8003998:	400204a0 	.word	0x400204a0
 800399c:	400204b8 	.word	0x400204b8
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f003 0302 	and.w	r3, r3, #2
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	bf14      	ite	ne
 80039ae:	2301      	movne	r3, #1
 80039b0:	2300      	moveq	r3, #0
 80039b2:	b2db      	uxtb	r3, r3
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	f000 8087 	beq.w	8003ac8 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039be:	f003 031f 	and.w	r3, r3, #31
 80039c2:	2220      	movs	r2, #32
 80039c4:	409a      	lsls	r2, r3
 80039c6:	6a3b      	ldr	r3, [r7, #32]
 80039c8:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80039d0:	b2db      	uxtb	r3, r3
 80039d2:	2b04      	cmp	r3, #4
 80039d4:	d139      	bne.n	8003a4a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	681a      	ldr	r2, [r3, #0]
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f022 0216 	bic.w	r2, r2, #22
 80039e4:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	695a      	ldr	r2, [r3, #20]
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80039f4:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d103      	bne.n	8003a06 <HAL_DMA_IRQHandler+0x736>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d007      	beq.n	8003a16 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	681a      	ldr	r2, [r3, #0]
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f022 0208 	bic.w	r2, r2, #8
 8003a14:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a1a:	f003 031f 	and.w	r3, r3, #31
 8003a1e:	223f      	movs	r2, #63	; 0x3f
 8003a20:	409a      	lsls	r2, r3
 8003a22:	6a3b      	ldr	r3, [r7, #32]
 8003a24:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2200      	movs	r2, #0
 8003a2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2201      	movs	r2, #1
 8003a32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	f000 834a 	beq.w	80040d4 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a44:	6878      	ldr	r0, [r7, #4]
 8003a46:	4798      	blx	r3
          }
          return;
 8003a48:	e344      	b.n	80040d4 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d018      	beq.n	8003a8a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d108      	bne.n	8003a78 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d02c      	beq.n	8003ac8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a72:	6878      	ldr	r0, [r7, #4]
 8003a74:	4798      	blx	r3
 8003a76:	e027      	b.n	8003ac8 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d023      	beq.n	8003ac8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a84:	6878      	ldr	r0, [r7, #4]
 8003a86:	4798      	blx	r3
 8003a88:	e01e      	b.n	8003ac8 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d10f      	bne.n	8003ab8 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	681a      	ldr	r2, [r3, #0]
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f022 0210 	bic.w	r2, r2, #16
 8003aa6:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2200      	movs	r2, #0
 8003aac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2201      	movs	r2, #1
 8003ab4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d003      	beq.n	8003ac8 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ac4:	6878      	ldr	r0, [r7, #4]
 8003ac6:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	f000 8306 	beq.w	80040de <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ad6:	f003 0301 	and.w	r3, r3, #1
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	f000 8088 	beq.w	8003bf0 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2204      	movs	r2, #4
 8003ae4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a7a      	ldr	r2, [pc, #488]	; (8003cd8 <HAL_DMA_IRQHandler+0xa08>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d04a      	beq.n	8003b88 <HAL_DMA_IRQHandler+0x8b8>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4a79      	ldr	r2, [pc, #484]	; (8003cdc <HAL_DMA_IRQHandler+0xa0c>)
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d045      	beq.n	8003b88 <HAL_DMA_IRQHandler+0x8b8>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4a77      	ldr	r2, [pc, #476]	; (8003ce0 <HAL_DMA_IRQHandler+0xa10>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d040      	beq.n	8003b88 <HAL_DMA_IRQHandler+0x8b8>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4a76      	ldr	r2, [pc, #472]	; (8003ce4 <HAL_DMA_IRQHandler+0xa14>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d03b      	beq.n	8003b88 <HAL_DMA_IRQHandler+0x8b8>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a74      	ldr	r2, [pc, #464]	; (8003ce8 <HAL_DMA_IRQHandler+0xa18>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d036      	beq.n	8003b88 <HAL_DMA_IRQHandler+0x8b8>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4a73      	ldr	r2, [pc, #460]	; (8003cec <HAL_DMA_IRQHandler+0xa1c>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d031      	beq.n	8003b88 <HAL_DMA_IRQHandler+0x8b8>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a71      	ldr	r2, [pc, #452]	; (8003cf0 <HAL_DMA_IRQHandler+0xa20>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d02c      	beq.n	8003b88 <HAL_DMA_IRQHandler+0x8b8>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4a70      	ldr	r2, [pc, #448]	; (8003cf4 <HAL_DMA_IRQHandler+0xa24>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d027      	beq.n	8003b88 <HAL_DMA_IRQHandler+0x8b8>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a6e      	ldr	r2, [pc, #440]	; (8003cf8 <HAL_DMA_IRQHandler+0xa28>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d022      	beq.n	8003b88 <HAL_DMA_IRQHandler+0x8b8>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4a6d      	ldr	r2, [pc, #436]	; (8003cfc <HAL_DMA_IRQHandler+0xa2c>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d01d      	beq.n	8003b88 <HAL_DMA_IRQHandler+0x8b8>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a6b      	ldr	r2, [pc, #428]	; (8003d00 <HAL_DMA_IRQHandler+0xa30>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d018      	beq.n	8003b88 <HAL_DMA_IRQHandler+0x8b8>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4a6a      	ldr	r2, [pc, #424]	; (8003d04 <HAL_DMA_IRQHandler+0xa34>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d013      	beq.n	8003b88 <HAL_DMA_IRQHandler+0x8b8>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a68      	ldr	r2, [pc, #416]	; (8003d08 <HAL_DMA_IRQHandler+0xa38>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d00e      	beq.n	8003b88 <HAL_DMA_IRQHandler+0x8b8>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4a67      	ldr	r2, [pc, #412]	; (8003d0c <HAL_DMA_IRQHandler+0xa3c>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d009      	beq.n	8003b88 <HAL_DMA_IRQHandler+0x8b8>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4a65      	ldr	r2, [pc, #404]	; (8003d10 <HAL_DMA_IRQHandler+0xa40>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d004      	beq.n	8003b88 <HAL_DMA_IRQHandler+0x8b8>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4a64      	ldr	r2, [pc, #400]	; (8003d14 <HAL_DMA_IRQHandler+0xa44>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d108      	bne.n	8003b9a <HAL_DMA_IRQHandler+0x8ca>
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	681a      	ldr	r2, [r3, #0]
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f022 0201 	bic.w	r2, r2, #1
 8003b96:	601a      	str	r2, [r3, #0]
 8003b98:	e007      	b.n	8003baa <HAL_DMA_IRQHandler+0x8da>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	681a      	ldr	r2, [r3, #0]
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f022 0201 	bic.w	r2, r2, #1
 8003ba8:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	3301      	adds	r3, #1
 8003bae:	60fb      	str	r3, [r7, #12]
 8003bb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bb2:	429a      	cmp	r2, r3
 8003bb4:	d307      	bcc.n	8003bc6 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f003 0301 	and.w	r3, r3, #1
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d1f2      	bne.n	8003baa <HAL_DMA_IRQHandler+0x8da>
 8003bc4:	e000      	b.n	8003bc8 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8003bc6:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2200      	movs	r2, #0
 8003bcc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f003 0301 	and.w	r3, r3, #1
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d004      	beq.n	8003be8 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2203      	movs	r2, #3
 8003be2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8003be6:	e003      	b.n	8003bf0 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2201      	movs	r2, #1
 8003bec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	f000 8272 	beq.w	80040de <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bfe:	6878      	ldr	r0, [r7, #4]
 8003c00:	4798      	blx	r3
 8003c02:	e26c      	b.n	80040de <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a43      	ldr	r2, [pc, #268]	; (8003d18 <HAL_DMA_IRQHandler+0xa48>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d022      	beq.n	8003c54 <HAL_DMA_IRQHandler+0x984>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4a42      	ldr	r2, [pc, #264]	; (8003d1c <HAL_DMA_IRQHandler+0xa4c>)
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d01d      	beq.n	8003c54 <HAL_DMA_IRQHandler+0x984>
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4a40      	ldr	r2, [pc, #256]	; (8003d20 <HAL_DMA_IRQHandler+0xa50>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d018      	beq.n	8003c54 <HAL_DMA_IRQHandler+0x984>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4a3f      	ldr	r2, [pc, #252]	; (8003d24 <HAL_DMA_IRQHandler+0xa54>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d013      	beq.n	8003c54 <HAL_DMA_IRQHandler+0x984>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a3d      	ldr	r2, [pc, #244]	; (8003d28 <HAL_DMA_IRQHandler+0xa58>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d00e      	beq.n	8003c54 <HAL_DMA_IRQHandler+0x984>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4a3c      	ldr	r2, [pc, #240]	; (8003d2c <HAL_DMA_IRQHandler+0xa5c>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d009      	beq.n	8003c54 <HAL_DMA_IRQHandler+0x984>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4a3a      	ldr	r2, [pc, #232]	; (8003d30 <HAL_DMA_IRQHandler+0xa60>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d004      	beq.n	8003c54 <HAL_DMA_IRQHandler+0x984>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4a39      	ldr	r2, [pc, #228]	; (8003d34 <HAL_DMA_IRQHandler+0xa64>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d101      	bne.n	8003c58 <HAL_DMA_IRQHandler+0x988>
 8003c54:	2301      	movs	r3, #1
 8003c56:	e000      	b.n	8003c5a <HAL_DMA_IRQHandler+0x98a>
 8003c58:	2300      	movs	r3, #0
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	f000 823f 	beq.w	80040de <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c6c:	f003 031f 	and.w	r3, r3, #31
 8003c70:	2204      	movs	r2, #4
 8003c72:	409a      	lsls	r2, r3
 8003c74:	697b      	ldr	r3, [r7, #20]
 8003c76:	4013      	ands	r3, r2
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	f000 80cd 	beq.w	8003e18 <HAL_DMA_IRQHandler+0xb48>
 8003c7e:	693b      	ldr	r3, [r7, #16]
 8003c80:	f003 0304 	and.w	r3, r3, #4
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	f000 80c7 	beq.w	8003e18 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c8e:	f003 031f 	and.w	r3, r3, #31
 8003c92:	2204      	movs	r2, #4
 8003c94:	409a      	lsls	r2, r3
 8003c96:	69fb      	ldr	r3, [r7, #28]
 8003c98:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003c9a:	693b      	ldr	r3, [r7, #16]
 8003c9c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d049      	beq.n	8003d38 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003ca4:	693b      	ldr	r3, [r7, #16]
 8003ca6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d109      	bne.n	8003cc2 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	f000 8210 	beq.w	80040d8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cbc:	6878      	ldr	r0, [r7, #4]
 8003cbe:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003cc0:	e20a      	b.n	80040d8 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	f000 8206 	beq.w	80040d8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cd0:	6878      	ldr	r0, [r7, #4]
 8003cd2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003cd4:	e200      	b.n	80040d8 <HAL_DMA_IRQHandler+0xe08>
 8003cd6:	bf00      	nop
 8003cd8:	40020010 	.word	0x40020010
 8003cdc:	40020028 	.word	0x40020028
 8003ce0:	40020040 	.word	0x40020040
 8003ce4:	40020058 	.word	0x40020058
 8003ce8:	40020070 	.word	0x40020070
 8003cec:	40020088 	.word	0x40020088
 8003cf0:	400200a0 	.word	0x400200a0
 8003cf4:	400200b8 	.word	0x400200b8
 8003cf8:	40020410 	.word	0x40020410
 8003cfc:	40020428 	.word	0x40020428
 8003d00:	40020440 	.word	0x40020440
 8003d04:	40020458 	.word	0x40020458
 8003d08:	40020470 	.word	0x40020470
 8003d0c:	40020488 	.word	0x40020488
 8003d10:	400204a0 	.word	0x400204a0
 8003d14:	400204b8 	.word	0x400204b8
 8003d18:	58025408 	.word	0x58025408
 8003d1c:	5802541c 	.word	0x5802541c
 8003d20:	58025430 	.word	0x58025430
 8003d24:	58025444 	.word	0x58025444
 8003d28:	58025458 	.word	0x58025458
 8003d2c:	5802546c 	.word	0x5802546c
 8003d30:	58025480 	.word	0x58025480
 8003d34:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003d38:	693b      	ldr	r3, [r7, #16]
 8003d3a:	f003 0320 	and.w	r3, r3, #32
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d160      	bne.n	8003e04 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4a8c      	ldr	r2, [pc, #560]	; (8003f78 <HAL_DMA_IRQHandler+0xca8>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d04a      	beq.n	8003de2 <HAL_DMA_IRQHandler+0xb12>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a8a      	ldr	r2, [pc, #552]	; (8003f7c <HAL_DMA_IRQHandler+0xcac>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d045      	beq.n	8003de2 <HAL_DMA_IRQHandler+0xb12>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4a89      	ldr	r2, [pc, #548]	; (8003f80 <HAL_DMA_IRQHandler+0xcb0>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d040      	beq.n	8003de2 <HAL_DMA_IRQHandler+0xb12>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4a87      	ldr	r2, [pc, #540]	; (8003f84 <HAL_DMA_IRQHandler+0xcb4>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d03b      	beq.n	8003de2 <HAL_DMA_IRQHandler+0xb12>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4a86      	ldr	r2, [pc, #536]	; (8003f88 <HAL_DMA_IRQHandler+0xcb8>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d036      	beq.n	8003de2 <HAL_DMA_IRQHandler+0xb12>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4a84      	ldr	r2, [pc, #528]	; (8003f8c <HAL_DMA_IRQHandler+0xcbc>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d031      	beq.n	8003de2 <HAL_DMA_IRQHandler+0xb12>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4a83      	ldr	r2, [pc, #524]	; (8003f90 <HAL_DMA_IRQHandler+0xcc0>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d02c      	beq.n	8003de2 <HAL_DMA_IRQHandler+0xb12>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4a81      	ldr	r2, [pc, #516]	; (8003f94 <HAL_DMA_IRQHandler+0xcc4>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d027      	beq.n	8003de2 <HAL_DMA_IRQHandler+0xb12>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4a80      	ldr	r2, [pc, #512]	; (8003f98 <HAL_DMA_IRQHandler+0xcc8>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d022      	beq.n	8003de2 <HAL_DMA_IRQHandler+0xb12>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4a7e      	ldr	r2, [pc, #504]	; (8003f9c <HAL_DMA_IRQHandler+0xccc>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d01d      	beq.n	8003de2 <HAL_DMA_IRQHandler+0xb12>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4a7d      	ldr	r2, [pc, #500]	; (8003fa0 <HAL_DMA_IRQHandler+0xcd0>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d018      	beq.n	8003de2 <HAL_DMA_IRQHandler+0xb12>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a7b      	ldr	r2, [pc, #492]	; (8003fa4 <HAL_DMA_IRQHandler+0xcd4>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d013      	beq.n	8003de2 <HAL_DMA_IRQHandler+0xb12>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4a7a      	ldr	r2, [pc, #488]	; (8003fa8 <HAL_DMA_IRQHandler+0xcd8>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d00e      	beq.n	8003de2 <HAL_DMA_IRQHandler+0xb12>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4a78      	ldr	r2, [pc, #480]	; (8003fac <HAL_DMA_IRQHandler+0xcdc>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d009      	beq.n	8003de2 <HAL_DMA_IRQHandler+0xb12>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4a77      	ldr	r2, [pc, #476]	; (8003fb0 <HAL_DMA_IRQHandler+0xce0>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d004      	beq.n	8003de2 <HAL_DMA_IRQHandler+0xb12>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4a75      	ldr	r2, [pc, #468]	; (8003fb4 <HAL_DMA_IRQHandler+0xce4>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d108      	bne.n	8003df4 <HAL_DMA_IRQHandler+0xb24>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	681a      	ldr	r2, [r3, #0]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f022 0208 	bic.w	r2, r2, #8
 8003df0:	601a      	str	r2, [r3, #0]
 8003df2:	e007      	b.n	8003e04 <HAL_DMA_IRQHandler+0xb34>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	681a      	ldr	r2, [r3, #0]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f022 0204 	bic.w	r2, r2, #4
 8003e02:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	f000 8165 	beq.w	80040d8 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e12:	6878      	ldr	r0, [r7, #4]
 8003e14:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003e16:	e15f      	b.n	80040d8 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e1c:	f003 031f 	and.w	r3, r3, #31
 8003e20:	2202      	movs	r2, #2
 8003e22:	409a      	lsls	r2, r3
 8003e24:	697b      	ldr	r3, [r7, #20]
 8003e26:	4013      	ands	r3, r2
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	f000 80c5 	beq.w	8003fb8 <HAL_DMA_IRQHandler+0xce8>
 8003e2e:	693b      	ldr	r3, [r7, #16]
 8003e30:	f003 0302 	and.w	r3, r3, #2
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	f000 80bf 	beq.w	8003fb8 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e3e:	f003 031f 	and.w	r3, r3, #31
 8003e42:	2202      	movs	r2, #2
 8003e44:	409a      	lsls	r2, r3
 8003e46:	69fb      	ldr	r3, [r7, #28]
 8003e48:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003e4a:	693b      	ldr	r3, [r7, #16]
 8003e4c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d018      	beq.n	8003e86 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003e54:	693b      	ldr	r3, [r7, #16]
 8003e56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d109      	bne.n	8003e72 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	f000 813a 	beq.w	80040dc <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e6c:	6878      	ldr	r0, [r7, #4]
 8003e6e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003e70:	e134      	b.n	80040dc <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	f000 8130 	beq.w	80040dc <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e80:	6878      	ldr	r0, [r7, #4]
 8003e82:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003e84:	e12a      	b.n	80040dc <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003e86:	693b      	ldr	r3, [r7, #16]
 8003e88:	f003 0320 	and.w	r3, r3, #32
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d168      	bne.n	8003f62 <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4a38      	ldr	r2, [pc, #224]	; (8003f78 <HAL_DMA_IRQHandler+0xca8>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d04a      	beq.n	8003f30 <HAL_DMA_IRQHandler+0xc60>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4a37      	ldr	r2, [pc, #220]	; (8003f7c <HAL_DMA_IRQHandler+0xcac>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d045      	beq.n	8003f30 <HAL_DMA_IRQHandler+0xc60>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4a35      	ldr	r2, [pc, #212]	; (8003f80 <HAL_DMA_IRQHandler+0xcb0>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d040      	beq.n	8003f30 <HAL_DMA_IRQHandler+0xc60>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4a34      	ldr	r2, [pc, #208]	; (8003f84 <HAL_DMA_IRQHandler+0xcb4>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d03b      	beq.n	8003f30 <HAL_DMA_IRQHandler+0xc60>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4a32      	ldr	r2, [pc, #200]	; (8003f88 <HAL_DMA_IRQHandler+0xcb8>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d036      	beq.n	8003f30 <HAL_DMA_IRQHandler+0xc60>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4a31      	ldr	r2, [pc, #196]	; (8003f8c <HAL_DMA_IRQHandler+0xcbc>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d031      	beq.n	8003f30 <HAL_DMA_IRQHandler+0xc60>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4a2f      	ldr	r2, [pc, #188]	; (8003f90 <HAL_DMA_IRQHandler+0xcc0>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d02c      	beq.n	8003f30 <HAL_DMA_IRQHandler+0xc60>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4a2e      	ldr	r2, [pc, #184]	; (8003f94 <HAL_DMA_IRQHandler+0xcc4>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d027      	beq.n	8003f30 <HAL_DMA_IRQHandler+0xc60>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4a2c      	ldr	r2, [pc, #176]	; (8003f98 <HAL_DMA_IRQHandler+0xcc8>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d022      	beq.n	8003f30 <HAL_DMA_IRQHandler+0xc60>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a2b      	ldr	r2, [pc, #172]	; (8003f9c <HAL_DMA_IRQHandler+0xccc>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d01d      	beq.n	8003f30 <HAL_DMA_IRQHandler+0xc60>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a29      	ldr	r2, [pc, #164]	; (8003fa0 <HAL_DMA_IRQHandler+0xcd0>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d018      	beq.n	8003f30 <HAL_DMA_IRQHandler+0xc60>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4a28      	ldr	r2, [pc, #160]	; (8003fa4 <HAL_DMA_IRQHandler+0xcd4>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d013      	beq.n	8003f30 <HAL_DMA_IRQHandler+0xc60>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a26      	ldr	r2, [pc, #152]	; (8003fa8 <HAL_DMA_IRQHandler+0xcd8>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d00e      	beq.n	8003f30 <HAL_DMA_IRQHandler+0xc60>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4a25      	ldr	r2, [pc, #148]	; (8003fac <HAL_DMA_IRQHandler+0xcdc>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d009      	beq.n	8003f30 <HAL_DMA_IRQHandler+0xc60>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a23      	ldr	r2, [pc, #140]	; (8003fb0 <HAL_DMA_IRQHandler+0xce0>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d004      	beq.n	8003f30 <HAL_DMA_IRQHandler+0xc60>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4a22      	ldr	r2, [pc, #136]	; (8003fb4 <HAL_DMA_IRQHandler+0xce4>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d108      	bne.n	8003f42 <HAL_DMA_IRQHandler+0xc72>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	681a      	ldr	r2, [r3, #0]
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f022 0214 	bic.w	r2, r2, #20
 8003f3e:	601a      	str	r2, [r3, #0]
 8003f40:	e007      	b.n	8003f52 <HAL_DMA_IRQHandler+0xc82>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	681a      	ldr	r2, [r3, #0]
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f022 020a 	bic.w	r2, r2, #10
 8003f50:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2200      	movs	r2, #0
 8003f56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2201      	movs	r2, #1
 8003f5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	f000 80b8 	beq.w	80040dc <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f70:	6878      	ldr	r0, [r7, #4]
 8003f72:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003f74:	e0b2      	b.n	80040dc <HAL_DMA_IRQHandler+0xe0c>
 8003f76:	bf00      	nop
 8003f78:	40020010 	.word	0x40020010
 8003f7c:	40020028 	.word	0x40020028
 8003f80:	40020040 	.word	0x40020040
 8003f84:	40020058 	.word	0x40020058
 8003f88:	40020070 	.word	0x40020070
 8003f8c:	40020088 	.word	0x40020088
 8003f90:	400200a0 	.word	0x400200a0
 8003f94:	400200b8 	.word	0x400200b8
 8003f98:	40020410 	.word	0x40020410
 8003f9c:	40020428 	.word	0x40020428
 8003fa0:	40020440 	.word	0x40020440
 8003fa4:	40020458 	.word	0x40020458
 8003fa8:	40020470 	.word	0x40020470
 8003fac:	40020488 	.word	0x40020488
 8003fb0:	400204a0 	.word	0x400204a0
 8003fb4:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fbc:	f003 031f 	and.w	r3, r3, #31
 8003fc0:	2208      	movs	r2, #8
 8003fc2:	409a      	lsls	r2, r3
 8003fc4:	697b      	ldr	r3, [r7, #20]
 8003fc6:	4013      	ands	r3, r2
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	f000 8088 	beq.w	80040de <HAL_DMA_IRQHandler+0xe0e>
 8003fce:	693b      	ldr	r3, [r7, #16]
 8003fd0:	f003 0308 	and.w	r3, r3, #8
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	f000 8082 	beq.w	80040de <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4a41      	ldr	r2, [pc, #260]	; (80040e4 <HAL_DMA_IRQHandler+0xe14>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d04a      	beq.n	800407a <HAL_DMA_IRQHandler+0xdaa>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4a3f      	ldr	r2, [pc, #252]	; (80040e8 <HAL_DMA_IRQHandler+0xe18>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d045      	beq.n	800407a <HAL_DMA_IRQHandler+0xdaa>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	4a3e      	ldr	r2, [pc, #248]	; (80040ec <HAL_DMA_IRQHandler+0xe1c>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d040      	beq.n	800407a <HAL_DMA_IRQHandler+0xdaa>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4a3c      	ldr	r2, [pc, #240]	; (80040f0 <HAL_DMA_IRQHandler+0xe20>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d03b      	beq.n	800407a <HAL_DMA_IRQHandler+0xdaa>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4a3b      	ldr	r2, [pc, #236]	; (80040f4 <HAL_DMA_IRQHandler+0xe24>)
 8004008:	4293      	cmp	r3, r2
 800400a:	d036      	beq.n	800407a <HAL_DMA_IRQHandler+0xdaa>
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4a39      	ldr	r2, [pc, #228]	; (80040f8 <HAL_DMA_IRQHandler+0xe28>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d031      	beq.n	800407a <HAL_DMA_IRQHandler+0xdaa>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4a38      	ldr	r2, [pc, #224]	; (80040fc <HAL_DMA_IRQHandler+0xe2c>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d02c      	beq.n	800407a <HAL_DMA_IRQHandler+0xdaa>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4a36      	ldr	r2, [pc, #216]	; (8004100 <HAL_DMA_IRQHandler+0xe30>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d027      	beq.n	800407a <HAL_DMA_IRQHandler+0xdaa>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4a35      	ldr	r2, [pc, #212]	; (8004104 <HAL_DMA_IRQHandler+0xe34>)
 8004030:	4293      	cmp	r3, r2
 8004032:	d022      	beq.n	800407a <HAL_DMA_IRQHandler+0xdaa>
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4a33      	ldr	r2, [pc, #204]	; (8004108 <HAL_DMA_IRQHandler+0xe38>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d01d      	beq.n	800407a <HAL_DMA_IRQHandler+0xdaa>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4a32      	ldr	r2, [pc, #200]	; (800410c <HAL_DMA_IRQHandler+0xe3c>)
 8004044:	4293      	cmp	r3, r2
 8004046:	d018      	beq.n	800407a <HAL_DMA_IRQHandler+0xdaa>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4a30      	ldr	r2, [pc, #192]	; (8004110 <HAL_DMA_IRQHandler+0xe40>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d013      	beq.n	800407a <HAL_DMA_IRQHandler+0xdaa>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4a2f      	ldr	r2, [pc, #188]	; (8004114 <HAL_DMA_IRQHandler+0xe44>)
 8004058:	4293      	cmp	r3, r2
 800405a:	d00e      	beq.n	800407a <HAL_DMA_IRQHandler+0xdaa>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4a2d      	ldr	r2, [pc, #180]	; (8004118 <HAL_DMA_IRQHandler+0xe48>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d009      	beq.n	800407a <HAL_DMA_IRQHandler+0xdaa>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4a2c      	ldr	r2, [pc, #176]	; (800411c <HAL_DMA_IRQHandler+0xe4c>)
 800406c:	4293      	cmp	r3, r2
 800406e:	d004      	beq.n	800407a <HAL_DMA_IRQHandler+0xdaa>
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4a2a      	ldr	r2, [pc, #168]	; (8004120 <HAL_DMA_IRQHandler+0xe50>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d108      	bne.n	800408c <HAL_DMA_IRQHandler+0xdbc>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	681a      	ldr	r2, [r3, #0]
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f022 021c 	bic.w	r2, r2, #28
 8004088:	601a      	str	r2, [r3, #0]
 800408a:	e007      	b.n	800409c <HAL_DMA_IRQHandler+0xdcc>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	681a      	ldr	r2, [r3, #0]
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f022 020e 	bic.w	r2, r2, #14
 800409a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040a0:	f003 031f 	and.w	r3, r3, #31
 80040a4:	2201      	movs	r2, #1
 80040a6:	409a      	lsls	r2, r3
 80040a8:	69fb      	ldr	r3, [r7, #28]
 80040aa:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2201      	movs	r2, #1
 80040b0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2200      	movs	r2, #0
 80040b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2201      	movs	r2, #1
 80040be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d009      	beq.n	80040de <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040ce:	6878      	ldr	r0, [r7, #4]
 80040d0:	4798      	blx	r3
 80040d2:	e004      	b.n	80040de <HAL_DMA_IRQHandler+0xe0e>
          return;
 80040d4:	bf00      	nop
 80040d6:	e002      	b.n	80040de <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80040d8:	bf00      	nop
 80040da:	e000      	b.n	80040de <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80040dc:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80040de:	3728      	adds	r7, #40	; 0x28
 80040e0:	46bd      	mov	sp, r7
 80040e2:	bd80      	pop	{r7, pc}
 80040e4:	40020010 	.word	0x40020010
 80040e8:	40020028 	.word	0x40020028
 80040ec:	40020040 	.word	0x40020040
 80040f0:	40020058 	.word	0x40020058
 80040f4:	40020070 	.word	0x40020070
 80040f8:	40020088 	.word	0x40020088
 80040fc:	400200a0 	.word	0x400200a0
 8004100:	400200b8 	.word	0x400200b8
 8004104:	40020410 	.word	0x40020410
 8004108:	40020428 	.word	0x40020428
 800410c:	40020440 	.word	0x40020440
 8004110:	40020458 	.word	0x40020458
 8004114:	40020470 	.word	0x40020470
 8004118:	40020488 	.word	0x40020488
 800411c:	400204a0 	.word	0x400204a0
 8004120:	400204b8 	.word	0x400204b8

08004124 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8004124:	b480      	push	{r7}
 8004126:	b083      	sub	sp, #12
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8004130:	4618      	mov	r0, r3
 8004132:	370c      	adds	r7, #12
 8004134:	46bd      	mov	sp, r7
 8004136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413a:	4770      	bx	lr

0800413c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800413c:	b480      	push	{r7}
 800413e:	b087      	sub	sp, #28
 8004140:	af00      	add	r7, sp, #0
 8004142:	60f8      	str	r0, [r7, #12]
 8004144:	60b9      	str	r1, [r7, #8]
 8004146:	607a      	str	r2, [r7, #4]
 8004148:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800414e:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004154:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4a84      	ldr	r2, [pc, #528]	; (800436c <DMA_SetConfig+0x230>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d072      	beq.n	8004246 <DMA_SetConfig+0x10a>
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4a82      	ldr	r2, [pc, #520]	; (8004370 <DMA_SetConfig+0x234>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d06d      	beq.n	8004246 <DMA_SetConfig+0x10a>
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	4a81      	ldr	r2, [pc, #516]	; (8004374 <DMA_SetConfig+0x238>)
 8004170:	4293      	cmp	r3, r2
 8004172:	d068      	beq.n	8004246 <DMA_SetConfig+0x10a>
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4a7f      	ldr	r2, [pc, #508]	; (8004378 <DMA_SetConfig+0x23c>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d063      	beq.n	8004246 <DMA_SetConfig+0x10a>
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4a7e      	ldr	r2, [pc, #504]	; (800437c <DMA_SetConfig+0x240>)
 8004184:	4293      	cmp	r3, r2
 8004186:	d05e      	beq.n	8004246 <DMA_SetConfig+0x10a>
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4a7c      	ldr	r2, [pc, #496]	; (8004380 <DMA_SetConfig+0x244>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d059      	beq.n	8004246 <DMA_SetConfig+0x10a>
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4a7b      	ldr	r2, [pc, #492]	; (8004384 <DMA_SetConfig+0x248>)
 8004198:	4293      	cmp	r3, r2
 800419a:	d054      	beq.n	8004246 <DMA_SetConfig+0x10a>
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4a79      	ldr	r2, [pc, #484]	; (8004388 <DMA_SetConfig+0x24c>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d04f      	beq.n	8004246 <DMA_SetConfig+0x10a>
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4a78      	ldr	r2, [pc, #480]	; (800438c <DMA_SetConfig+0x250>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d04a      	beq.n	8004246 <DMA_SetConfig+0x10a>
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4a76      	ldr	r2, [pc, #472]	; (8004390 <DMA_SetConfig+0x254>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d045      	beq.n	8004246 <DMA_SetConfig+0x10a>
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	4a75      	ldr	r2, [pc, #468]	; (8004394 <DMA_SetConfig+0x258>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d040      	beq.n	8004246 <DMA_SetConfig+0x10a>
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4a73      	ldr	r2, [pc, #460]	; (8004398 <DMA_SetConfig+0x25c>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d03b      	beq.n	8004246 <DMA_SetConfig+0x10a>
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	4a72      	ldr	r2, [pc, #456]	; (800439c <DMA_SetConfig+0x260>)
 80041d4:	4293      	cmp	r3, r2
 80041d6:	d036      	beq.n	8004246 <DMA_SetConfig+0x10a>
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4a70      	ldr	r2, [pc, #448]	; (80043a0 <DMA_SetConfig+0x264>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d031      	beq.n	8004246 <DMA_SetConfig+0x10a>
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	4a6f      	ldr	r2, [pc, #444]	; (80043a4 <DMA_SetConfig+0x268>)
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d02c      	beq.n	8004246 <DMA_SetConfig+0x10a>
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4a6d      	ldr	r2, [pc, #436]	; (80043a8 <DMA_SetConfig+0x26c>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d027      	beq.n	8004246 <DMA_SetConfig+0x10a>
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4a6c      	ldr	r2, [pc, #432]	; (80043ac <DMA_SetConfig+0x270>)
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d022      	beq.n	8004246 <DMA_SetConfig+0x10a>
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4a6a      	ldr	r2, [pc, #424]	; (80043b0 <DMA_SetConfig+0x274>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d01d      	beq.n	8004246 <DMA_SetConfig+0x10a>
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4a69      	ldr	r2, [pc, #420]	; (80043b4 <DMA_SetConfig+0x278>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d018      	beq.n	8004246 <DMA_SetConfig+0x10a>
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4a67      	ldr	r2, [pc, #412]	; (80043b8 <DMA_SetConfig+0x27c>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d013      	beq.n	8004246 <DMA_SetConfig+0x10a>
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4a66      	ldr	r2, [pc, #408]	; (80043bc <DMA_SetConfig+0x280>)
 8004224:	4293      	cmp	r3, r2
 8004226:	d00e      	beq.n	8004246 <DMA_SetConfig+0x10a>
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4a64      	ldr	r2, [pc, #400]	; (80043c0 <DMA_SetConfig+0x284>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d009      	beq.n	8004246 <DMA_SetConfig+0x10a>
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4a63      	ldr	r2, [pc, #396]	; (80043c4 <DMA_SetConfig+0x288>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d004      	beq.n	8004246 <DMA_SetConfig+0x10a>
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4a61      	ldr	r2, [pc, #388]	; (80043c8 <DMA_SetConfig+0x28c>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d101      	bne.n	800424a <DMA_SetConfig+0x10e>
 8004246:	2301      	movs	r3, #1
 8004248:	e000      	b.n	800424c <DMA_SetConfig+0x110>
 800424a:	2300      	movs	r3, #0
 800424c:	2b00      	cmp	r3, #0
 800424e:	d00d      	beq.n	800426c <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004254:	68fa      	ldr	r2, [r7, #12]
 8004256:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004258:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800425e:	2b00      	cmp	r3, #0
 8004260:	d004      	beq.n	800426c <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004266:	68fa      	ldr	r2, [r7, #12]
 8004268:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800426a:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4a3e      	ldr	r2, [pc, #248]	; (800436c <DMA_SetConfig+0x230>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d04a      	beq.n	800430c <DMA_SetConfig+0x1d0>
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4a3d      	ldr	r2, [pc, #244]	; (8004370 <DMA_SetConfig+0x234>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d045      	beq.n	800430c <DMA_SetConfig+0x1d0>
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4a3b      	ldr	r2, [pc, #236]	; (8004374 <DMA_SetConfig+0x238>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d040      	beq.n	800430c <DMA_SetConfig+0x1d0>
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4a3a      	ldr	r2, [pc, #232]	; (8004378 <DMA_SetConfig+0x23c>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d03b      	beq.n	800430c <DMA_SetConfig+0x1d0>
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4a38      	ldr	r2, [pc, #224]	; (800437c <DMA_SetConfig+0x240>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d036      	beq.n	800430c <DMA_SetConfig+0x1d0>
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4a37      	ldr	r2, [pc, #220]	; (8004380 <DMA_SetConfig+0x244>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d031      	beq.n	800430c <DMA_SetConfig+0x1d0>
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4a35      	ldr	r2, [pc, #212]	; (8004384 <DMA_SetConfig+0x248>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d02c      	beq.n	800430c <DMA_SetConfig+0x1d0>
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	4a34      	ldr	r2, [pc, #208]	; (8004388 <DMA_SetConfig+0x24c>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d027      	beq.n	800430c <DMA_SetConfig+0x1d0>
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a32      	ldr	r2, [pc, #200]	; (800438c <DMA_SetConfig+0x250>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d022      	beq.n	800430c <DMA_SetConfig+0x1d0>
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4a31      	ldr	r2, [pc, #196]	; (8004390 <DMA_SetConfig+0x254>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d01d      	beq.n	800430c <DMA_SetConfig+0x1d0>
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4a2f      	ldr	r2, [pc, #188]	; (8004394 <DMA_SetConfig+0x258>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d018      	beq.n	800430c <DMA_SetConfig+0x1d0>
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4a2e      	ldr	r2, [pc, #184]	; (8004398 <DMA_SetConfig+0x25c>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d013      	beq.n	800430c <DMA_SetConfig+0x1d0>
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4a2c      	ldr	r2, [pc, #176]	; (800439c <DMA_SetConfig+0x260>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d00e      	beq.n	800430c <DMA_SetConfig+0x1d0>
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4a2b      	ldr	r2, [pc, #172]	; (80043a0 <DMA_SetConfig+0x264>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d009      	beq.n	800430c <DMA_SetConfig+0x1d0>
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4a29      	ldr	r2, [pc, #164]	; (80043a4 <DMA_SetConfig+0x268>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d004      	beq.n	800430c <DMA_SetConfig+0x1d0>
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4a28      	ldr	r2, [pc, #160]	; (80043a8 <DMA_SetConfig+0x26c>)
 8004308:	4293      	cmp	r3, r2
 800430a:	d101      	bne.n	8004310 <DMA_SetConfig+0x1d4>
 800430c:	2301      	movs	r3, #1
 800430e:	e000      	b.n	8004312 <DMA_SetConfig+0x1d6>
 8004310:	2300      	movs	r3, #0
 8004312:	2b00      	cmp	r3, #0
 8004314:	d05a      	beq.n	80043cc <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800431a:	f003 031f 	and.w	r3, r3, #31
 800431e:	223f      	movs	r2, #63	; 0x3f
 8004320:	409a      	lsls	r2, r3
 8004322:	697b      	ldr	r3, [r7, #20]
 8004324:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	681a      	ldr	r2, [r3, #0]
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004334:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	683a      	ldr	r2, [r7, #0]
 800433c:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	689b      	ldr	r3, [r3, #8]
 8004342:	2b40      	cmp	r3, #64	; 0x40
 8004344:	d108      	bne.n	8004358 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	687a      	ldr	r2, [r7, #4]
 800434c:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	68ba      	ldr	r2, [r7, #8]
 8004354:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004356:	e087      	b.n	8004468 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	68ba      	ldr	r2, [r7, #8]
 800435e:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	687a      	ldr	r2, [r7, #4]
 8004366:	60da      	str	r2, [r3, #12]
}
 8004368:	e07e      	b.n	8004468 <DMA_SetConfig+0x32c>
 800436a:	bf00      	nop
 800436c:	40020010 	.word	0x40020010
 8004370:	40020028 	.word	0x40020028
 8004374:	40020040 	.word	0x40020040
 8004378:	40020058 	.word	0x40020058
 800437c:	40020070 	.word	0x40020070
 8004380:	40020088 	.word	0x40020088
 8004384:	400200a0 	.word	0x400200a0
 8004388:	400200b8 	.word	0x400200b8
 800438c:	40020410 	.word	0x40020410
 8004390:	40020428 	.word	0x40020428
 8004394:	40020440 	.word	0x40020440
 8004398:	40020458 	.word	0x40020458
 800439c:	40020470 	.word	0x40020470
 80043a0:	40020488 	.word	0x40020488
 80043a4:	400204a0 	.word	0x400204a0
 80043a8:	400204b8 	.word	0x400204b8
 80043ac:	58025408 	.word	0x58025408
 80043b0:	5802541c 	.word	0x5802541c
 80043b4:	58025430 	.word	0x58025430
 80043b8:	58025444 	.word	0x58025444
 80043bc:	58025458 	.word	0x58025458
 80043c0:	5802546c 	.word	0x5802546c
 80043c4:	58025480 	.word	0x58025480
 80043c8:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	4a28      	ldr	r2, [pc, #160]	; (8004474 <DMA_SetConfig+0x338>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d022      	beq.n	800441c <DMA_SetConfig+0x2e0>
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4a27      	ldr	r2, [pc, #156]	; (8004478 <DMA_SetConfig+0x33c>)
 80043dc:	4293      	cmp	r3, r2
 80043de:	d01d      	beq.n	800441c <DMA_SetConfig+0x2e0>
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4a25      	ldr	r2, [pc, #148]	; (800447c <DMA_SetConfig+0x340>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d018      	beq.n	800441c <DMA_SetConfig+0x2e0>
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	4a24      	ldr	r2, [pc, #144]	; (8004480 <DMA_SetConfig+0x344>)
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d013      	beq.n	800441c <DMA_SetConfig+0x2e0>
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4a22      	ldr	r2, [pc, #136]	; (8004484 <DMA_SetConfig+0x348>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d00e      	beq.n	800441c <DMA_SetConfig+0x2e0>
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	4a21      	ldr	r2, [pc, #132]	; (8004488 <DMA_SetConfig+0x34c>)
 8004404:	4293      	cmp	r3, r2
 8004406:	d009      	beq.n	800441c <DMA_SetConfig+0x2e0>
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4a1f      	ldr	r2, [pc, #124]	; (800448c <DMA_SetConfig+0x350>)
 800440e:	4293      	cmp	r3, r2
 8004410:	d004      	beq.n	800441c <DMA_SetConfig+0x2e0>
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4a1e      	ldr	r2, [pc, #120]	; (8004490 <DMA_SetConfig+0x354>)
 8004418:	4293      	cmp	r3, r2
 800441a:	d101      	bne.n	8004420 <DMA_SetConfig+0x2e4>
 800441c:	2301      	movs	r3, #1
 800441e:	e000      	b.n	8004422 <DMA_SetConfig+0x2e6>
 8004420:	2300      	movs	r3, #0
 8004422:	2b00      	cmp	r3, #0
 8004424:	d020      	beq.n	8004468 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800442a:	f003 031f 	and.w	r3, r3, #31
 800442e:	2201      	movs	r2, #1
 8004430:	409a      	lsls	r2, r3
 8004432:	693b      	ldr	r3, [r7, #16]
 8004434:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	683a      	ldr	r2, [r7, #0]
 800443c:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	689b      	ldr	r3, [r3, #8]
 8004442:	2b40      	cmp	r3, #64	; 0x40
 8004444:	d108      	bne.n	8004458 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	687a      	ldr	r2, [r7, #4]
 800444c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	68ba      	ldr	r2, [r7, #8]
 8004454:	60da      	str	r2, [r3, #12]
}
 8004456:	e007      	b.n	8004468 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	68ba      	ldr	r2, [r7, #8]
 800445e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	687a      	ldr	r2, [r7, #4]
 8004466:	60da      	str	r2, [r3, #12]
}
 8004468:	bf00      	nop
 800446a:	371c      	adds	r7, #28
 800446c:	46bd      	mov	sp, r7
 800446e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004472:	4770      	bx	lr
 8004474:	58025408 	.word	0x58025408
 8004478:	5802541c 	.word	0x5802541c
 800447c:	58025430 	.word	0x58025430
 8004480:	58025444 	.word	0x58025444
 8004484:	58025458 	.word	0x58025458
 8004488:	5802546c 	.word	0x5802546c
 800448c:	58025480 	.word	0x58025480
 8004490:	58025494 	.word	0x58025494

08004494 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004494:	b480      	push	{r7}
 8004496:	b085      	sub	sp, #20
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4a42      	ldr	r2, [pc, #264]	; (80045ac <DMA_CalcBaseAndBitshift+0x118>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d04a      	beq.n	800453c <DMA_CalcBaseAndBitshift+0xa8>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4a41      	ldr	r2, [pc, #260]	; (80045b0 <DMA_CalcBaseAndBitshift+0x11c>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d045      	beq.n	800453c <DMA_CalcBaseAndBitshift+0xa8>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4a3f      	ldr	r2, [pc, #252]	; (80045b4 <DMA_CalcBaseAndBitshift+0x120>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d040      	beq.n	800453c <DMA_CalcBaseAndBitshift+0xa8>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4a3e      	ldr	r2, [pc, #248]	; (80045b8 <DMA_CalcBaseAndBitshift+0x124>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d03b      	beq.n	800453c <DMA_CalcBaseAndBitshift+0xa8>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4a3c      	ldr	r2, [pc, #240]	; (80045bc <DMA_CalcBaseAndBitshift+0x128>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d036      	beq.n	800453c <DMA_CalcBaseAndBitshift+0xa8>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4a3b      	ldr	r2, [pc, #236]	; (80045c0 <DMA_CalcBaseAndBitshift+0x12c>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d031      	beq.n	800453c <DMA_CalcBaseAndBitshift+0xa8>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4a39      	ldr	r2, [pc, #228]	; (80045c4 <DMA_CalcBaseAndBitshift+0x130>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d02c      	beq.n	800453c <DMA_CalcBaseAndBitshift+0xa8>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4a38      	ldr	r2, [pc, #224]	; (80045c8 <DMA_CalcBaseAndBitshift+0x134>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d027      	beq.n	800453c <DMA_CalcBaseAndBitshift+0xa8>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4a36      	ldr	r2, [pc, #216]	; (80045cc <DMA_CalcBaseAndBitshift+0x138>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d022      	beq.n	800453c <DMA_CalcBaseAndBitshift+0xa8>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4a35      	ldr	r2, [pc, #212]	; (80045d0 <DMA_CalcBaseAndBitshift+0x13c>)
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d01d      	beq.n	800453c <DMA_CalcBaseAndBitshift+0xa8>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4a33      	ldr	r2, [pc, #204]	; (80045d4 <DMA_CalcBaseAndBitshift+0x140>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d018      	beq.n	800453c <DMA_CalcBaseAndBitshift+0xa8>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4a32      	ldr	r2, [pc, #200]	; (80045d8 <DMA_CalcBaseAndBitshift+0x144>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d013      	beq.n	800453c <DMA_CalcBaseAndBitshift+0xa8>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	4a30      	ldr	r2, [pc, #192]	; (80045dc <DMA_CalcBaseAndBitshift+0x148>)
 800451a:	4293      	cmp	r3, r2
 800451c:	d00e      	beq.n	800453c <DMA_CalcBaseAndBitshift+0xa8>
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4a2f      	ldr	r2, [pc, #188]	; (80045e0 <DMA_CalcBaseAndBitshift+0x14c>)
 8004524:	4293      	cmp	r3, r2
 8004526:	d009      	beq.n	800453c <DMA_CalcBaseAndBitshift+0xa8>
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4a2d      	ldr	r2, [pc, #180]	; (80045e4 <DMA_CalcBaseAndBitshift+0x150>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d004      	beq.n	800453c <DMA_CalcBaseAndBitshift+0xa8>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4a2c      	ldr	r2, [pc, #176]	; (80045e8 <DMA_CalcBaseAndBitshift+0x154>)
 8004538:	4293      	cmp	r3, r2
 800453a:	d101      	bne.n	8004540 <DMA_CalcBaseAndBitshift+0xac>
 800453c:	2301      	movs	r3, #1
 800453e:	e000      	b.n	8004542 <DMA_CalcBaseAndBitshift+0xae>
 8004540:	2300      	movs	r3, #0
 8004542:	2b00      	cmp	r3, #0
 8004544:	d024      	beq.n	8004590 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	b2db      	uxtb	r3, r3
 800454c:	3b10      	subs	r3, #16
 800454e:	4a27      	ldr	r2, [pc, #156]	; (80045ec <DMA_CalcBaseAndBitshift+0x158>)
 8004550:	fba2 2303 	umull	r2, r3, r2, r3
 8004554:	091b      	lsrs	r3, r3, #4
 8004556:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	f003 0307 	and.w	r3, r3, #7
 800455e:	4a24      	ldr	r2, [pc, #144]	; (80045f0 <DMA_CalcBaseAndBitshift+0x15c>)
 8004560:	5cd3      	ldrb	r3, [r2, r3]
 8004562:	461a      	mov	r2, r3
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	2b03      	cmp	r3, #3
 800456c:	d908      	bls.n	8004580 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	461a      	mov	r2, r3
 8004574:	4b1f      	ldr	r3, [pc, #124]	; (80045f4 <DMA_CalcBaseAndBitshift+0x160>)
 8004576:	4013      	ands	r3, r2
 8004578:	1d1a      	adds	r2, r3, #4
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	659a      	str	r2, [r3, #88]	; 0x58
 800457e:	e00d      	b.n	800459c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	461a      	mov	r2, r3
 8004586:	4b1b      	ldr	r3, [pc, #108]	; (80045f4 <DMA_CalcBaseAndBitshift+0x160>)
 8004588:	4013      	ands	r3, r2
 800458a:	687a      	ldr	r2, [r7, #4]
 800458c:	6593      	str	r3, [r2, #88]	; 0x58
 800458e:	e005      	b.n	800459c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80045a0:	4618      	mov	r0, r3
 80045a2:	3714      	adds	r7, #20
 80045a4:	46bd      	mov	sp, r7
 80045a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045aa:	4770      	bx	lr
 80045ac:	40020010 	.word	0x40020010
 80045b0:	40020028 	.word	0x40020028
 80045b4:	40020040 	.word	0x40020040
 80045b8:	40020058 	.word	0x40020058
 80045bc:	40020070 	.word	0x40020070
 80045c0:	40020088 	.word	0x40020088
 80045c4:	400200a0 	.word	0x400200a0
 80045c8:	400200b8 	.word	0x400200b8
 80045cc:	40020410 	.word	0x40020410
 80045d0:	40020428 	.word	0x40020428
 80045d4:	40020440 	.word	0x40020440
 80045d8:	40020458 	.word	0x40020458
 80045dc:	40020470 	.word	0x40020470
 80045e0:	40020488 	.word	0x40020488
 80045e4:	400204a0 	.word	0x400204a0
 80045e8:	400204b8 	.word	0x400204b8
 80045ec:	aaaaaaab 	.word	0xaaaaaaab
 80045f0:	0800d19c 	.word	0x0800d19c
 80045f4:	fffffc00 	.word	0xfffffc00

080045f8 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80045f8:	b480      	push	{r7}
 80045fa:	b085      	sub	sp, #20
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004600:	2300      	movs	r3, #0
 8004602:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	699b      	ldr	r3, [r3, #24]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d120      	bne.n	800464e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004610:	2b03      	cmp	r3, #3
 8004612:	d858      	bhi.n	80046c6 <DMA_CheckFifoParam+0xce>
 8004614:	a201      	add	r2, pc, #4	; (adr r2, 800461c <DMA_CheckFifoParam+0x24>)
 8004616:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800461a:	bf00      	nop
 800461c:	0800462d 	.word	0x0800462d
 8004620:	0800463f 	.word	0x0800463f
 8004624:	0800462d 	.word	0x0800462d
 8004628:	080046c7 	.word	0x080046c7
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004630:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004634:	2b00      	cmp	r3, #0
 8004636:	d048      	beq.n	80046ca <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004638:	2301      	movs	r3, #1
 800463a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800463c:	e045      	b.n	80046ca <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004642:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004646:	d142      	bne.n	80046ce <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004648:	2301      	movs	r3, #1
 800464a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800464c:	e03f      	b.n	80046ce <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	699b      	ldr	r3, [r3, #24]
 8004652:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004656:	d123      	bne.n	80046a0 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800465c:	2b03      	cmp	r3, #3
 800465e:	d838      	bhi.n	80046d2 <DMA_CheckFifoParam+0xda>
 8004660:	a201      	add	r2, pc, #4	; (adr r2, 8004668 <DMA_CheckFifoParam+0x70>)
 8004662:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004666:	bf00      	nop
 8004668:	08004679 	.word	0x08004679
 800466c:	0800467f 	.word	0x0800467f
 8004670:	08004679 	.word	0x08004679
 8004674:	08004691 	.word	0x08004691
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004678:	2301      	movs	r3, #1
 800467a:	73fb      	strb	r3, [r7, #15]
        break;
 800467c:	e030      	b.n	80046e0 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004682:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004686:	2b00      	cmp	r3, #0
 8004688:	d025      	beq.n	80046d6 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800468a:	2301      	movs	r3, #1
 800468c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800468e:	e022      	b.n	80046d6 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004694:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004698:	d11f      	bne.n	80046da <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800469a:	2301      	movs	r3, #1
 800469c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800469e:	e01c      	b.n	80046da <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046a4:	2b02      	cmp	r3, #2
 80046a6:	d902      	bls.n	80046ae <DMA_CheckFifoParam+0xb6>
 80046a8:	2b03      	cmp	r3, #3
 80046aa:	d003      	beq.n	80046b4 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80046ac:	e018      	b.n	80046e0 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80046ae:	2301      	movs	r3, #1
 80046b0:	73fb      	strb	r3, [r7, #15]
        break;
 80046b2:	e015      	b.n	80046e0 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d00e      	beq.n	80046de <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80046c0:	2301      	movs	r3, #1
 80046c2:	73fb      	strb	r3, [r7, #15]
    break;
 80046c4:	e00b      	b.n	80046de <DMA_CheckFifoParam+0xe6>
        break;
 80046c6:	bf00      	nop
 80046c8:	e00a      	b.n	80046e0 <DMA_CheckFifoParam+0xe8>
        break;
 80046ca:	bf00      	nop
 80046cc:	e008      	b.n	80046e0 <DMA_CheckFifoParam+0xe8>
        break;
 80046ce:	bf00      	nop
 80046d0:	e006      	b.n	80046e0 <DMA_CheckFifoParam+0xe8>
        break;
 80046d2:	bf00      	nop
 80046d4:	e004      	b.n	80046e0 <DMA_CheckFifoParam+0xe8>
        break;
 80046d6:	bf00      	nop
 80046d8:	e002      	b.n	80046e0 <DMA_CheckFifoParam+0xe8>
        break;
 80046da:	bf00      	nop
 80046dc:	e000      	b.n	80046e0 <DMA_CheckFifoParam+0xe8>
    break;
 80046de:	bf00      	nop
    }
  }

  return status;
 80046e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80046e2:	4618      	mov	r0, r3
 80046e4:	3714      	adds	r7, #20
 80046e6:	46bd      	mov	sp, r7
 80046e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ec:	4770      	bx	lr
 80046ee:	bf00      	nop

080046f0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80046f0:	b480      	push	{r7}
 80046f2:	b085      	sub	sp, #20
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4a38      	ldr	r2, [pc, #224]	; (80047e4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d022      	beq.n	800474e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4a36      	ldr	r2, [pc, #216]	; (80047e8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d01d      	beq.n	800474e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4a35      	ldr	r2, [pc, #212]	; (80047ec <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d018      	beq.n	800474e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4a33      	ldr	r2, [pc, #204]	; (80047f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d013      	beq.n	800474e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4a32      	ldr	r2, [pc, #200]	; (80047f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800472c:	4293      	cmp	r3, r2
 800472e:	d00e      	beq.n	800474e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4a30      	ldr	r2, [pc, #192]	; (80047f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d009      	beq.n	800474e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	4a2f      	ldr	r2, [pc, #188]	; (80047fc <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004740:	4293      	cmp	r3, r2
 8004742:	d004      	beq.n	800474e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4a2d      	ldr	r2, [pc, #180]	; (8004800 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d101      	bne.n	8004752 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800474e:	2301      	movs	r3, #1
 8004750:	e000      	b.n	8004754 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8004752:	2300      	movs	r3, #0
 8004754:	2b00      	cmp	r3, #0
 8004756:	d01a      	beq.n	800478e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	b2db      	uxtb	r3, r3
 800475e:	3b08      	subs	r3, #8
 8004760:	4a28      	ldr	r2, [pc, #160]	; (8004804 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8004762:	fba2 2303 	umull	r2, r3, r2, r3
 8004766:	091b      	lsrs	r3, r3, #4
 8004768:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800476a:	68fa      	ldr	r2, [r7, #12]
 800476c:	4b26      	ldr	r3, [pc, #152]	; (8004808 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800476e:	4413      	add	r3, r2
 8004770:	009b      	lsls	r3, r3, #2
 8004772:	461a      	mov	r2, r3
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	4a24      	ldr	r2, [pc, #144]	; (800480c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800477c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	f003 031f 	and.w	r3, r3, #31
 8004784:	2201      	movs	r2, #1
 8004786:	409a      	lsls	r2, r3
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800478c:	e024      	b.n	80047d8 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	b2db      	uxtb	r3, r3
 8004794:	3b10      	subs	r3, #16
 8004796:	4a1e      	ldr	r2, [pc, #120]	; (8004810 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004798:	fba2 2303 	umull	r2, r3, r2, r3
 800479c:	091b      	lsrs	r3, r3, #4
 800479e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	4a1c      	ldr	r2, [pc, #112]	; (8004814 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d806      	bhi.n	80047b6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	4a1b      	ldr	r2, [pc, #108]	; (8004818 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d902      	bls.n	80047b6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	3308      	adds	r3, #8
 80047b4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80047b6:	68fa      	ldr	r2, [r7, #12]
 80047b8:	4b18      	ldr	r3, [pc, #96]	; (800481c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80047ba:	4413      	add	r3, r2
 80047bc:	009b      	lsls	r3, r3, #2
 80047be:	461a      	mov	r2, r3
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	4a16      	ldr	r2, [pc, #88]	; (8004820 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80047c8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	f003 031f 	and.w	r3, r3, #31
 80047d0:	2201      	movs	r2, #1
 80047d2:	409a      	lsls	r2, r3
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	669a      	str	r2, [r3, #104]	; 0x68
}
 80047d8:	bf00      	nop
 80047da:	3714      	adds	r7, #20
 80047dc:	46bd      	mov	sp, r7
 80047de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e2:	4770      	bx	lr
 80047e4:	58025408 	.word	0x58025408
 80047e8:	5802541c 	.word	0x5802541c
 80047ec:	58025430 	.word	0x58025430
 80047f0:	58025444 	.word	0x58025444
 80047f4:	58025458 	.word	0x58025458
 80047f8:	5802546c 	.word	0x5802546c
 80047fc:	58025480 	.word	0x58025480
 8004800:	58025494 	.word	0x58025494
 8004804:	cccccccd 	.word	0xcccccccd
 8004808:	16009600 	.word	0x16009600
 800480c:	58025880 	.word	0x58025880
 8004810:	aaaaaaab 	.word	0xaaaaaaab
 8004814:	400204b8 	.word	0x400204b8
 8004818:	4002040f 	.word	0x4002040f
 800481c:	10008200 	.word	0x10008200
 8004820:	40020880 	.word	0x40020880

08004824 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004824:	b480      	push	{r7}
 8004826:	b085      	sub	sp, #20
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	685b      	ldr	r3, [r3, #4]
 8004830:	b2db      	uxtb	r3, r3
 8004832:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d04a      	beq.n	80048d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	2b08      	cmp	r3, #8
 800483e:	d847      	bhi.n	80048d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4a25      	ldr	r2, [pc, #148]	; (80048dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d022      	beq.n	8004890 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	4a24      	ldr	r2, [pc, #144]	; (80048e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004850:	4293      	cmp	r3, r2
 8004852:	d01d      	beq.n	8004890 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4a22      	ldr	r2, [pc, #136]	; (80048e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d018      	beq.n	8004890 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	4a21      	ldr	r2, [pc, #132]	; (80048e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004864:	4293      	cmp	r3, r2
 8004866:	d013      	beq.n	8004890 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	4a1f      	ldr	r2, [pc, #124]	; (80048ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d00e      	beq.n	8004890 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	4a1e      	ldr	r2, [pc, #120]	; (80048f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004878:	4293      	cmp	r3, r2
 800487a:	d009      	beq.n	8004890 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	4a1c      	ldr	r2, [pc, #112]	; (80048f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d004      	beq.n	8004890 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	4a1b      	ldr	r2, [pc, #108]	; (80048f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800488c:	4293      	cmp	r3, r2
 800488e:	d101      	bne.n	8004894 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8004890:	2301      	movs	r3, #1
 8004892:	e000      	b.n	8004896 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004894:	2300      	movs	r3, #0
 8004896:	2b00      	cmp	r3, #0
 8004898:	d00a      	beq.n	80048b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800489a:	68fa      	ldr	r2, [r7, #12]
 800489c:	4b17      	ldr	r3, [pc, #92]	; (80048fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800489e:	4413      	add	r3, r2
 80048a0:	009b      	lsls	r3, r3, #2
 80048a2:	461a      	mov	r2, r3
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	4a15      	ldr	r2, [pc, #84]	; (8004900 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80048ac:	671a      	str	r2, [r3, #112]	; 0x70
 80048ae:	e009      	b.n	80048c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80048b0:	68fa      	ldr	r2, [r7, #12]
 80048b2:	4b14      	ldr	r3, [pc, #80]	; (8004904 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80048b4:	4413      	add	r3, r2
 80048b6:	009b      	lsls	r3, r3, #2
 80048b8:	461a      	mov	r2, r3
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	4a11      	ldr	r2, [pc, #68]	; (8004908 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80048c2:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	3b01      	subs	r3, #1
 80048c8:	2201      	movs	r2, #1
 80048ca:	409a      	lsls	r2, r3
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80048d0:	bf00      	nop
 80048d2:	3714      	adds	r7, #20
 80048d4:	46bd      	mov	sp, r7
 80048d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048da:	4770      	bx	lr
 80048dc:	58025408 	.word	0x58025408
 80048e0:	5802541c 	.word	0x5802541c
 80048e4:	58025430 	.word	0x58025430
 80048e8:	58025444 	.word	0x58025444
 80048ec:	58025458 	.word	0x58025458
 80048f0:	5802546c 	.word	0x5802546c
 80048f4:	58025480 	.word	0x58025480
 80048f8:	58025494 	.word	0x58025494
 80048fc:	1600963f 	.word	0x1600963f
 8004900:	58025940 	.word	0x58025940
 8004904:	1000823f 	.word	0x1000823f
 8004908:	40020940 	.word	0x40020940

0800490c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800490c:	b480      	push	{r7}
 800490e:	b089      	sub	sp, #36	; 0x24
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
 8004914:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004916:	2300      	movs	r3, #0
 8004918:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800491a:	4b89      	ldr	r3, [pc, #548]	; (8004b40 <HAL_GPIO_Init+0x234>)
 800491c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800491e:	e194      	b.n	8004c4a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	681a      	ldr	r2, [r3, #0]
 8004924:	2101      	movs	r1, #1
 8004926:	69fb      	ldr	r3, [r7, #28]
 8004928:	fa01 f303 	lsl.w	r3, r1, r3
 800492c:	4013      	ands	r3, r2
 800492e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004930:	693b      	ldr	r3, [r7, #16]
 8004932:	2b00      	cmp	r3, #0
 8004934:	f000 8186 	beq.w	8004c44 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	685b      	ldr	r3, [r3, #4]
 800493c:	2b01      	cmp	r3, #1
 800493e:	d00b      	beq.n	8004958 <HAL_GPIO_Init+0x4c>
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	685b      	ldr	r3, [r3, #4]
 8004944:	2b02      	cmp	r3, #2
 8004946:	d007      	beq.n	8004958 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800494c:	2b11      	cmp	r3, #17
 800494e:	d003      	beq.n	8004958 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	685b      	ldr	r3, [r3, #4]
 8004954:	2b12      	cmp	r3, #18
 8004956:	d130      	bne.n	80049ba <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	689b      	ldr	r3, [r3, #8]
 800495c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800495e:	69fb      	ldr	r3, [r7, #28]
 8004960:	005b      	lsls	r3, r3, #1
 8004962:	2203      	movs	r2, #3
 8004964:	fa02 f303 	lsl.w	r3, r2, r3
 8004968:	43db      	mvns	r3, r3
 800496a:	69ba      	ldr	r2, [r7, #24]
 800496c:	4013      	ands	r3, r2
 800496e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	68da      	ldr	r2, [r3, #12]
 8004974:	69fb      	ldr	r3, [r7, #28]
 8004976:	005b      	lsls	r3, r3, #1
 8004978:	fa02 f303 	lsl.w	r3, r2, r3
 800497c:	69ba      	ldr	r2, [r7, #24]
 800497e:	4313      	orrs	r3, r2
 8004980:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	69ba      	ldr	r2, [r7, #24]
 8004986:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	685b      	ldr	r3, [r3, #4]
 800498c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800498e:	2201      	movs	r2, #1
 8004990:	69fb      	ldr	r3, [r7, #28]
 8004992:	fa02 f303 	lsl.w	r3, r2, r3
 8004996:	43db      	mvns	r3, r3
 8004998:	69ba      	ldr	r2, [r7, #24]
 800499a:	4013      	ands	r3, r2
 800499c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	685b      	ldr	r3, [r3, #4]
 80049a2:	091b      	lsrs	r3, r3, #4
 80049a4:	f003 0201 	and.w	r2, r3, #1
 80049a8:	69fb      	ldr	r3, [r7, #28]
 80049aa:	fa02 f303 	lsl.w	r3, r2, r3
 80049ae:	69ba      	ldr	r2, [r7, #24]
 80049b0:	4313      	orrs	r3, r2
 80049b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	69ba      	ldr	r2, [r7, #24]
 80049b8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	68db      	ldr	r3, [r3, #12]
 80049be:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80049c0:	69fb      	ldr	r3, [r7, #28]
 80049c2:	005b      	lsls	r3, r3, #1
 80049c4:	2203      	movs	r2, #3
 80049c6:	fa02 f303 	lsl.w	r3, r2, r3
 80049ca:	43db      	mvns	r3, r3
 80049cc:	69ba      	ldr	r2, [r7, #24]
 80049ce:	4013      	ands	r3, r2
 80049d0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	689a      	ldr	r2, [r3, #8]
 80049d6:	69fb      	ldr	r3, [r7, #28]
 80049d8:	005b      	lsls	r3, r3, #1
 80049da:	fa02 f303 	lsl.w	r3, r2, r3
 80049de:	69ba      	ldr	r2, [r7, #24]
 80049e0:	4313      	orrs	r3, r2
 80049e2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	69ba      	ldr	r2, [r7, #24]
 80049e8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	685b      	ldr	r3, [r3, #4]
 80049ee:	2b02      	cmp	r3, #2
 80049f0:	d003      	beq.n	80049fa <HAL_GPIO_Init+0xee>
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	685b      	ldr	r3, [r3, #4]
 80049f6:	2b12      	cmp	r3, #18
 80049f8:	d123      	bne.n	8004a42 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80049fa:	69fb      	ldr	r3, [r7, #28]
 80049fc:	08da      	lsrs	r2, r3, #3
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	3208      	adds	r2, #8
 8004a02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a06:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004a08:	69fb      	ldr	r3, [r7, #28]
 8004a0a:	f003 0307 	and.w	r3, r3, #7
 8004a0e:	009b      	lsls	r3, r3, #2
 8004a10:	220f      	movs	r2, #15
 8004a12:	fa02 f303 	lsl.w	r3, r2, r3
 8004a16:	43db      	mvns	r3, r3
 8004a18:	69ba      	ldr	r2, [r7, #24]
 8004a1a:	4013      	ands	r3, r2
 8004a1c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	691a      	ldr	r2, [r3, #16]
 8004a22:	69fb      	ldr	r3, [r7, #28]
 8004a24:	f003 0307 	and.w	r3, r3, #7
 8004a28:	009b      	lsls	r3, r3, #2
 8004a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8004a2e:	69ba      	ldr	r2, [r7, #24]
 8004a30:	4313      	orrs	r3, r2
 8004a32:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004a34:	69fb      	ldr	r3, [r7, #28]
 8004a36:	08da      	lsrs	r2, r3, #3
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	3208      	adds	r2, #8
 8004a3c:	69b9      	ldr	r1, [r7, #24]
 8004a3e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004a48:	69fb      	ldr	r3, [r7, #28]
 8004a4a:	005b      	lsls	r3, r3, #1
 8004a4c:	2203      	movs	r2, #3
 8004a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8004a52:	43db      	mvns	r3, r3
 8004a54:	69ba      	ldr	r2, [r7, #24]
 8004a56:	4013      	ands	r3, r2
 8004a58:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	685b      	ldr	r3, [r3, #4]
 8004a5e:	f003 0203 	and.w	r2, r3, #3
 8004a62:	69fb      	ldr	r3, [r7, #28]
 8004a64:	005b      	lsls	r3, r3, #1
 8004a66:	fa02 f303 	lsl.w	r3, r2, r3
 8004a6a:	69ba      	ldr	r2, [r7, #24]
 8004a6c:	4313      	orrs	r3, r2
 8004a6e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	69ba      	ldr	r2, [r7, #24]
 8004a74:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	685b      	ldr	r3, [r3, #4]
 8004a7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	f000 80e0 	beq.w	8004c44 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004a84:	4b2f      	ldr	r3, [pc, #188]	; (8004b44 <HAL_GPIO_Init+0x238>)
 8004a86:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004a8a:	4a2e      	ldr	r2, [pc, #184]	; (8004b44 <HAL_GPIO_Init+0x238>)
 8004a8c:	f043 0302 	orr.w	r3, r3, #2
 8004a90:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004a94:	4b2b      	ldr	r3, [pc, #172]	; (8004b44 <HAL_GPIO_Init+0x238>)
 8004a96:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004a9a:	f003 0302 	and.w	r3, r3, #2
 8004a9e:	60fb      	str	r3, [r7, #12]
 8004aa0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004aa2:	4a29      	ldr	r2, [pc, #164]	; (8004b48 <HAL_GPIO_Init+0x23c>)
 8004aa4:	69fb      	ldr	r3, [r7, #28]
 8004aa6:	089b      	lsrs	r3, r3, #2
 8004aa8:	3302      	adds	r3, #2
 8004aaa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004aae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004ab0:	69fb      	ldr	r3, [r7, #28]
 8004ab2:	f003 0303 	and.w	r3, r3, #3
 8004ab6:	009b      	lsls	r3, r3, #2
 8004ab8:	220f      	movs	r2, #15
 8004aba:	fa02 f303 	lsl.w	r3, r2, r3
 8004abe:	43db      	mvns	r3, r3
 8004ac0:	69ba      	ldr	r2, [r7, #24]
 8004ac2:	4013      	ands	r3, r2
 8004ac4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	4a20      	ldr	r2, [pc, #128]	; (8004b4c <HAL_GPIO_Init+0x240>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d052      	beq.n	8004b74 <HAL_GPIO_Init+0x268>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	4a1f      	ldr	r2, [pc, #124]	; (8004b50 <HAL_GPIO_Init+0x244>)
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d031      	beq.n	8004b3a <HAL_GPIO_Init+0x22e>
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	4a1e      	ldr	r2, [pc, #120]	; (8004b54 <HAL_GPIO_Init+0x248>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d02b      	beq.n	8004b36 <HAL_GPIO_Init+0x22a>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	4a1d      	ldr	r2, [pc, #116]	; (8004b58 <HAL_GPIO_Init+0x24c>)
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d025      	beq.n	8004b32 <HAL_GPIO_Init+0x226>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	4a1c      	ldr	r2, [pc, #112]	; (8004b5c <HAL_GPIO_Init+0x250>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d01f      	beq.n	8004b2e <HAL_GPIO_Init+0x222>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	4a1b      	ldr	r2, [pc, #108]	; (8004b60 <HAL_GPIO_Init+0x254>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d019      	beq.n	8004b2a <HAL_GPIO_Init+0x21e>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	4a1a      	ldr	r2, [pc, #104]	; (8004b64 <HAL_GPIO_Init+0x258>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d013      	beq.n	8004b26 <HAL_GPIO_Init+0x21a>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	4a19      	ldr	r2, [pc, #100]	; (8004b68 <HAL_GPIO_Init+0x25c>)
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d00d      	beq.n	8004b22 <HAL_GPIO_Init+0x216>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	4a18      	ldr	r2, [pc, #96]	; (8004b6c <HAL_GPIO_Init+0x260>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d007      	beq.n	8004b1e <HAL_GPIO_Init+0x212>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	4a17      	ldr	r2, [pc, #92]	; (8004b70 <HAL_GPIO_Init+0x264>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d101      	bne.n	8004b1a <HAL_GPIO_Init+0x20e>
 8004b16:	2309      	movs	r3, #9
 8004b18:	e02d      	b.n	8004b76 <HAL_GPIO_Init+0x26a>
 8004b1a:	230a      	movs	r3, #10
 8004b1c:	e02b      	b.n	8004b76 <HAL_GPIO_Init+0x26a>
 8004b1e:	2308      	movs	r3, #8
 8004b20:	e029      	b.n	8004b76 <HAL_GPIO_Init+0x26a>
 8004b22:	2307      	movs	r3, #7
 8004b24:	e027      	b.n	8004b76 <HAL_GPIO_Init+0x26a>
 8004b26:	2306      	movs	r3, #6
 8004b28:	e025      	b.n	8004b76 <HAL_GPIO_Init+0x26a>
 8004b2a:	2305      	movs	r3, #5
 8004b2c:	e023      	b.n	8004b76 <HAL_GPIO_Init+0x26a>
 8004b2e:	2304      	movs	r3, #4
 8004b30:	e021      	b.n	8004b76 <HAL_GPIO_Init+0x26a>
 8004b32:	2303      	movs	r3, #3
 8004b34:	e01f      	b.n	8004b76 <HAL_GPIO_Init+0x26a>
 8004b36:	2302      	movs	r3, #2
 8004b38:	e01d      	b.n	8004b76 <HAL_GPIO_Init+0x26a>
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	e01b      	b.n	8004b76 <HAL_GPIO_Init+0x26a>
 8004b3e:	bf00      	nop
 8004b40:	58000080 	.word	0x58000080
 8004b44:	58024400 	.word	0x58024400
 8004b48:	58000400 	.word	0x58000400
 8004b4c:	58020000 	.word	0x58020000
 8004b50:	58020400 	.word	0x58020400
 8004b54:	58020800 	.word	0x58020800
 8004b58:	58020c00 	.word	0x58020c00
 8004b5c:	58021000 	.word	0x58021000
 8004b60:	58021400 	.word	0x58021400
 8004b64:	58021800 	.word	0x58021800
 8004b68:	58021c00 	.word	0x58021c00
 8004b6c:	58022000 	.word	0x58022000
 8004b70:	58022400 	.word	0x58022400
 8004b74:	2300      	movs	r3, #0
 8004b76:	69fa      	ldr	r2, [r7, #28]
 8004b78:	f002 0203 	and.w	r2, r2, #3
 8004b7c:	0092      	lsls	r2, r2, #2
 8004b7e:	4093      	lsls	r3, r2
 8004b80:	69ba      	ldr	r2, [r7, #24]
 8004b82:	4313      	orrs	r3, r2
 8004b84:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004b86:	4938      	ldr	r1, [pc, #224]	; (8004c68 <HAL_GPIO_Init+0x35c>)
 8004b88:	69fb      	ldr	r3, [r7, #28]
 8004b8a:	089b      	lsrs	r3, r3, #2
 8004b8c:	3302      	adds	r3, #2
 8004b8e:	69ba      	ldr	r2, [r7, #24]
 8004b90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004b94:	697b      	ldr	r3, [r7, #20]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004b9a:	693b      	ldr	r3, [r7, #16]
 8004b9c:	43db      	mvns	r3, r3
 8004b9e:	69ba      	ldr	r2, [r7, #24]
 8004ba0:	4013      	ands	r3, r2
 8004ba2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	685b      	ldr	r3, [r3, #4]
 8004ba8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d003      	beq.n	8004bb8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004bb0:	69ba      	ldr	r2, [r7, #24]
 8004bb2:	693b      	ldr	r3, [r7, #16]
 8004bb4:	4313      	orrs	r3, r2
 8004bb6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004bb8:	697b      	ldr	r3, [r7, #20]
 8004bba:	69ba      	ldr	r2, [r7, #24]
 8004bbc:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8004bbe:	697b      	ldr	r3, [r7, #20]
 8004bc0:	685b      	ldr	r3, [r3, #4]
 8004bc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004bc4:	693b      	ldr	r3, [r7, #16]
 8004bc6:	43db      	mvns	r3, r3
 8004bc8:	69ba      	ldr	r2, [r7, #24]
 8004bca:	4013      	ands	r3, r2
 8004bcc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	685b      	ldr	r3, [r3, #4]
 8004bd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d003      	beq.n	8004be2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004bda:	69ba      	ldr	r2, [r7, #24]
 8004bdc:	693b      	ldr	r3, [r7, #16]
 8004bde:	4313      	orrs	r3, r2
 8004be0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004be2:	697b      	ldr	r3, [r7, #20]
 8004be4:	69ba      	ldr	r2, [r7, #24]
 8004be6:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004be8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004bf0:	693b      	ldr	r3, [r7, #16]
 8004bf2:	43db      	mvns	r3, r3
 8004bf4:	69ba      	ldr	r2, [r7, #24]
 8004bf6:	4013      	ands	r3, r2
 8004bf8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	685b      	ldr	r3, [r3, #4]
 8004bfe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d003      	beq.n	8004c0e <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8004c06:	69ba      	ldr	r2, [r7, #24]
 8004c08:	693b      	ldr	r3, [r7, #16]
 8004c0a:	4313      	orrs	r3, r2
 8004c0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004c0e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004c12:	69bb      	ldr	r3, [r7, #24]
 8004c14:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004c16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c1a:	685b      	ldr	r3, [r3, #4]
 8004c1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004c1e:	693b      	ldr	r3, [r7, #16]
 8004c20:	43db      	mvns	r3, r3
 8004c22:	69ba      	ldr	r2, [r7, #24]
 8004c24:	4013      	ands	r3, r2
 8004c26:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	685b      	ldr	r3, [r3, #4]
 8004c2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d003      	beq.n	8004c3c <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8004c34:	69ba      	ldr	r2, [r7, #24]
 8004c36:	693b      	ldr	r3, [r7, #16]
 8004c38:	4313      	orrs	r3, r2
 8004c3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004c3c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004c40:	69bb      	ldr	r3, [r7, #24]
 8004c42:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8004c44:	69fb      	ldr	r3, [r7, #28]
 8004c46:	3301      	adds	r3, #1
 8004c48:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	681a      	ldr	r2, [r3, #0]
 8004c4e:	69fb      	ldr	r3, [r7, #28]
 8004c50:	fa22 f303 	lsr.w	r3, r2, r3
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	f47f ae63 	bne.w	8004920 <HAL_GPIO_Init+0x14>
  }
}
 8004c5a:	bf00      	nop
 8004c5c:	bf00      	nop
 8004c5e:	3724      	adds	r7, #36	; 0x24
 8004c60:	46bd      	mov	sp, r7
 8004c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c66:	4770      	bx	lr
 8004c68:	58000400 	.word	0x58000400

08004c6c <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8004c6c:	b480      	push	{r7}
 8004c6e:	b083      	sub	sp, #12
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8004c74:	4a08      	ldr	r2, [pc, #32]	; (8004c98 <HAL_HSEM_FastTake+0x2c>)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	3320      	adds	r3, #32
 8004c7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c7e:	4a07      	ldr	r2, [pc, #28]	; (8004c9c <HAL_HSEM_FastTake+0x30>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d101      	bne.n	8004c88 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8004c84:	2300      	movs	r3, #0
 8004c86:	e000      	b.n	8004c8a <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8004c88:	2301      	movs	r3, #1
}
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	370c      	adds	r7, #12
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c94:	4770      	bx	lr
 8004c96:	bf00      	nop
 8004c98:	58026400 	.word	0x58026400
 8004c9c:	80000300 	.word	0x80000300

08004ca0 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8004ca0:	b480      	push	{r7}
 8004ca2:	b083      	sub	sp, #12
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
 8004ca8:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8004caa:	4906      	ldr	r1, [pc, #24]	; (8004cc4 <HAL_HSEM_Release+0x24>)
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8004cb8:	bf00      	nop
 8004cba:	370c      	adds	r7, #12
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc2:	4770      	bx	lr
 8004cc4:	58026400 	.word	0x58026400

08004cc8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b084      	sub	sp, #16
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8004cd0:	4b29      	ldr	r3, [pc, #164]	; (8004d78 <HAL_PWREx_ConfigSupply+0xb0>)
 8004cd2:	68db      	ldr	r3, [r3, #12]
 8004cd4:	f003 0307 	and.w	r3, r3, #7
 8004cd8:	2b06      	cmp	r3, #6
 8004cda:	d00a      	beq.n	8004cf2 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004cdc:	4b26      	ldr	r3, [pc, #152]	; (8004d78 <HAL_PWREx_ConfigSupply+0xb0>)
 8004cde:	68db      	ldr	r3, [r3, #12]
 8004ce0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004ce4:	687a      	ldr	r2, [r7, #4]
 8004ce6:	429a      	cmp	r2, r3
 8004ce8:	d001      	beq.n	8004cee <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004cea:	2301      	movs	r3, #1
 8004cec:	e040      	b.n	8004d70 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004cee:	2300      	movs	r3, #0
 8004cf0:	e03e      	b.n	8004d70 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004cf2:	4b21      	ldr	r3, [pc, #132]	; (8004d78 <HAL_PWREx_ConfigSupply+0xb0>)
 8004cf4:	68db      	ldr	r3, [r3, #12]
 8004cf6:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8004cfa:	491f      	ldr	r1, [pc, #124]	; (8004d78 <HAL_PWREx_ConfigSupply+0xb0>)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	4313      	orrs	r3, r2
 8004d00:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004d02:	f7fc fd87 	bl	8001814 <HAL_GetTick>
 8004d06:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004d08:	e009      	b.n	8004d1e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004d0a:	f7fc fd83 	bl	8001814 <HAL_GetTick>
 8004d0e:	4602      	mov	r2, r0
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	1ad3      	subs	r3, r2, r3
 8004d14:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004d18:	d901      	bls.n	8004d1e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	e028      	b.n	8004d70 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004d1e:	4b16      	ldr	r3, [pc, #88]	; (8004d78 <HAL_PWREx_ConfigSupply+0xb0>)
 8004d20:	685b      	ldr	r3, [r3, #4]
 8004d22:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004d26:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d2a:	d1ee      	bne.n	8004d0a <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2b1e      	cmp	r3, #30
 8004d30:	d008      	beq.n	8004d44 <HAL_PWREx_ConfigSupply+0x7c>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2b2e      	cmp	r3, #46	; 0x2e
 8004d36:	d005      	beq.n	8004d44 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2b1d      	cmp	r3, #29
 8004d3c:	d002      	beq.n	8004d44 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2b2d      	cmp	r3, #45	; 0x2d
 8004d42:	d114      	bne.n	8004d6e <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8004d44:	f7fc fd66 	bl	8001814 <HAL_GetTick>
 8004d48:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8004d4a:	e009      	b.n	8004d60 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004d4c:	f7fc fd62 	bl	8001814 <HAL_GetTick>
 8004d50:	4602      	mov	r2, r0
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	1ad3      	subs	r3, r2, r3
 8004d56:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004d5a:	d901      	bls.n	8004d60 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8004d5c:	2301      	movs	r3, #1
 8004d5e:	e007      	b.n	8004d70 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8004d60:	4b05      	ldr	r3, [pc, #20]	; (8004d78 <HAL_PWREx_ConfigSupply+0xb0>)
 8004d62:	68db      	ldr	r3, [r3, #12]
 8004d64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d6c:	d1ee      	bne.n	8004d4c <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004d6e:	2300      	movs	r3, #0
}
 8004d70:	4618      	mov	r0, r3
 8004d72:	3710      	adds	r7, #16
 8004d74:	46bd      	mov	sp, r7
 8004d76:	bd80      	pop	{r7, pc}
 8004d78:	58024800 	.word	0x58024800

08004d7c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b08c      	sub	sp, #48	; 0x30
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d101      	bne.n	8004d8e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	e3ff      	b.n	800558e <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f003 0301 	and.w	r3, r3, #1
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	f000 8087 	beq.w	8004eaa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d9c:	4b99      	ldr	r3, [pc, #612]	; (8005004 <HAL_RCC_OscConfig+0x288>)
 8004d9e:	691b      	ldr	r3, [r3, #16]
 8004da0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004da4:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004da6:	4b97      	ldr	r3, [pc, #604]	; (8005004 <HAL_RCC_OscConfig+0x288>)
 8004da8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004daa:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004dac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dae:	2b10      	cmp	r3, #16
 8004db0:	d007      	beq.n	8004dc2 <HAL_RCC_OscConfig+0x46>
 8004db2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004db4:	2b18      	cmp	r3, #24
 8004db6:	d110      	bne.n	8004dda <HAL_RCC_OscConfig+0x5e>
 8004db8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dba:	f003 0303 	and.w	r3, r3, #3
 8004dbe:	2b02      	cmp	r3, #2
 8004dc0:	d10b      	bne.n	8004dda <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004dc2:	4b90      	ldr	r3, [pc, #576]	; (8005004 <HAL_RCC_OscConfig+0x288>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d06c      	beq.n	8004ea8 <HAL_RCC_OscConfig+0x12c>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	685b      	ldr	r3, [r3, #4]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d168      	bne.n	8004ea8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	e3d9      	b.n	800558e <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	685b      	ldr	r3, [r3, #4]
 8004dde:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004de2:	d106      	bne.n	8004df2 <HAL_RCC_OscConfig+0x76>
 8004de4:	4b87      	ldr	r3, [pc, #540]	; (8005004 <HAL_RCC_OscConfig+0x288>)
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	4a86      	ldr	r2, [pc, #536]	; (8005004 <HAL_RCC_OscConfig+0x288>)
 8004dea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004dee:	6013      	str	r3, [r2, #0]
 8004df0:	e02e      	b.n	8004e50 <HAL_RCC_OscConfig+0xd4>
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	685b      	ldr	r3, [r3, #4]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d10c      	bne.n	8004e14 <HAL_RCC_OscConfig+0x98>
 8004dfa:	4b82      	ldr	r3, [pc, #520]	; (8005004 <HAL_RCC_OscConfig+0x288>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	4a81      	ldr	r2, [pc, #516]	; (8005004 <HAL_RCC_OscConfig+0x288>)
 8004e00:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e04:	6013      	str	r3, [r2, #0]
 8004e06:	4b7f      	ldr	r3, [pc, #508]	; (8005004 <HAL_RCC_OscConfig+0x288>)
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	4a7e      	ldr	r2, [pc, #504]	; (8005004 <HAL_RCC_OscConfig+0x288>)
 8004e0c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004e10:	6013      	str	r3, [r2, #0]
 8004e12:	e01d      	b.n	8004e50 <HAL_RCC_OscConfig+0xd4>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	685b      	ldr	r3, [r3, #4]
 8004e18:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004e1c:	d10c      	bne.n	8004e38 <HAL_RCC_OscConfig+0xbc>
 8004e1e:	4b79      	ldr	r3, [pc, #484]	; (8005004 <HAL_RCC_OscConfig+0x288>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	4a78      	ldr	r2, [pc, #480]	; (8005004 <HAL_RCC_OscConfig+0x288>)
 8004e24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004e28:	6013      	str	r3, [r2, #0]
 8004e2a:	4b76      	ldr	r3, [pc, #472]	; (8005004 <HAL_RCC_OscConfig+0x288>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	4a75      	ldr	r2, [pc, #468]	; (8005004 <HAL_RCC_OscConfig+0x288>)
 8004e30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e34:	6013      	str	r3, [r2, #0]
 8004e36:	e00b      	b.n	8004e50 <HAL_RCC_OscConfig+0xd4>
 8004e38:	4b72      	ldr	r3, [pc, #456]	; (8005004 <HAL_RCC_OscConfig+0x288>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	4a71      	ldr	r2, [pc, #452]	; (8005004 <HAL_RCC_OscConfig+0x288>)
 8004e3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e42:	6013      	str	r3, [r2, #0]
 8004e44:	4b6f      	ldr	r3, [pc, #444]	; (8005004 <HAL_RCC_OscConfig+0x288>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	4a6e      	ldr	r2, [pc, #440]	; (8005004 <HAL_RCC_OscConfig+0x288>)
 8004e4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004e4e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	685b      	ldr	r3, [r3, #4]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d013      	beq.n	8004e80 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e58:	f7fc fcdc 	bl	8001814 <HAL_GetTick>
 8004e5c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004e5e:	e008      	b.n	8004e72 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004e60:	f7fc fcd8 	bl	8001814 <HAL_GetTick>
 8004e64:	4602      	mov	r2, r0
 8004e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e68:	1ad3      	subs	r3, r2, r3
 8004e6a:	2b64      	cmp	r3, #100	; 0x64
 8004e6c:	d901      	bls.n	8004e72 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004e6e:	2303      	movs	r3, #3
 8004e70:	e38d      	b.n	800558e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004e72:	4b64      	ldr	r3, [pc, #400]	; (8005004 <HAL_RCC_OscConfig+0x288>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d0f0      	beq.n	8004e60 <HAL_RCC_OscConfig+0xe4>
 8004e7e:	e014      	b.n	8004eaa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e80:	f7fc fcc8 	bl	8001814 <HAL_GetTick>
 8004e84:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004e86:	e008      	b.n	8004e9a <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004e88:	f7fc fcc4 	bl	8001814 <HAL_GetTick>
 8004e8c:	4602      	mov	r2, r0
 8004e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e90:	1ad3      	subs	r3, r2, r3
 8004e92:	2b64      	cmp	r3, #100	; 0x64
 8004e94:	d901      	bls.n	8004e9a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004e96:	2303      	movs	r3, #3
 8004e98:	e379      	b.n	800558e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004e9a:	4b5a      	ldr	r3, [pc, #360]	; (8005004 <HAL_RCC_OscConfig+0x288>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d1f0      	bne.n	8004e88 <HAL_RCC_OscConfig+0x10c>
 8004ea6:	e000      	b.n	8004eaa <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ea8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f003 0302 	and.w	r3, r3, #2
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	f000 80ae 	beq.w	8005014 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004eb8:	4b52      	ldr	r3, [pc, #328]	; (8005004 <HAL_RCC_OscConfig+0x288>)
 8004eba:	691b      	ldr	r3, [r3, #16]
 8004ebc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004ec0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004ec2:	4b50      	ldr	r3, [pc, #320]	; (8005004 <HAL_RCC_OscConfig+0x288>)
 8004ec4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ec6:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004ec8:	6a3b      	ldr	r3, [r7, #32]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d007      	beq.n	8004ede <HAL_RCC_OscConfig+0x162>
 8004ece:	6a3b      	ldr	r3, [r7, #32]
 8004ed0:	2b18      	cmp	r3, #24
 8004ed2:	d13a      	bne.n	8004f4a <HAL_RCC_OscConfig+0x1ce>
 8004ed4:	69fb      	ldr	r3, [r7, #28]
 8004ed6:	f003 0303 	and.w	r3, r3, #3
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d135      	bne.n	8004f4a <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004ede:	4b49      	ldr	r3, [pc, #292]	; (8005004 <HAL_RCC_OscConfig+0x288>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f003 0304 	and.w	r3, r3, #4
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d005      	beq.n	8004ef6 <HAL_RCC_OscConfig+0x17a>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	68db      	ldr	r3, [r3, #12]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d101      	bne.n	8004ef6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	e34b      	b.n	800558e <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ef6:	f7fc fcbd 	bl	8001874 <HAL_GetREVID>
 8004efa:	4603      	mov	r3, r0
 8004efc:	f241 0203 	movw	r2, #4099	; 0x1003
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d817      	bhi.n	8004f34 <HAL_RCC_OscConfig+0x1b8>
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	691b      	ldr	r3, [r3, #16]
 8004f08:	2b40      	cmp	r3, #64	; 0x40
 8004f0a:	d108      	bne.n	8004f1e <HAL_RCC_OscConfig+0x1a2>
 8004f0c:	4b3d      	ldr	r3, [pc, #244]	; (8005004 <HAL_RCC_OscConfig+0x288>)
 8004f0e:	685b      	ldr	r3, [r3, #4]
 8004f10:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004f14:	4a3b      	ldr	r2, [pc, #236]	; (8005004 <HAL_RCC_OscConfig+0x288>)
 8004f16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f1a:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004f1c:	e07a      	b.n	8005014 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f1e:	4b39      	ldr	r3, [pc, #228]	; (8005004 <HAL_RCC_OscConfig+0x288>)
 8004f20:	685b      	ldr	r3, [r3, #4]
 8004f22:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	691b      	ldr	r3, [r3, #16]
 8004f2a:	031b      	lsls	r3, r3, #12
 8004f2c:	4935      	ldr	r1, [pc, #212]	; (8005004 <HAL_RCC_OscConfig+0x288>)
 8004f2e:	4313      	orrs	r3, r2
 8004f30:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004f32:	e06f      	b.n	8005014 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f34:	4b33      	ldr	r3, [pc, #204]	; (8005004 <HAL_RCC_OscConfig+0x288>)
 8004f36:	685b      	ldr	r3, [r3, #4]
 8004f38:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	691b      	ldr	r3, [r3, #16]
 8004f40:	061b      	lsls	r3, r3, #24
 8004f42:	4930      	ldr	r1, [pc, #192]	; (8005004 <HAL_RCC_OscConfig+0x288>)
 8004f44:	4313      	orrs	r3, r2
 8004f46:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004f48:	e064      	b.n	8005014 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	68db      	ldr	r3, [r3, #12]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d045      	beq.n	8004fde <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004f52:	4b2c      	ldr	r3, [pc, #176]	; (8005004 <HAL_RCC_OscConfig+0x288>)
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f023 0219 	bic.w	r2, r3, #25
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	68db      	ldr	r3, [r3, #12]
 8004f5e:	4929      	ldr	r1, [pc, #164]	; (8005004 <HAL_RCC_OscConfig+0x288>)
 8004f60:	4313      	orrs	r3, r2
 8004f62:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f64:	f7fc fc56 	bl	8001814 <HAL_GetTick>
 8004f68:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004f6a:	e008      	b.n	8004f7e <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004f6c:	f7fc fc52 	bl	8001814 <HAL_GetTick>
 8004f70:	4602      	mov	r2, r0
 8004f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f74:	1ad3      	subs	r3, r2, r3
 8004f76:	2b02      	cmp	r3, #2
 8004f78:	d901      	bls.n	8004f7e <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8004f7a:	2303      	movs	r3, #3
 8004f7c:	e307      	b.n	800558e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004f7e:	4b21      	ldr	r3, [pc, #132]	; (8005004 <HAL_RCC_OscConfig+0x288>)
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f003 0304 	and.w	r3, r3, #4
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d0f0      	beq.n	8004f6c <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f8a:	f7fc fc73 	bl	8001874 <HAL_GetREVID>
 8004f8e:	4603      	mov	r3, r0
 8004f90:	f241 0203 	movw	r2, #4099	; 0x1003
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d817      	bhi.n	8004fc8 <HAL_RCC_OscConfig+0x24c>
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	691b      	ldr	r3, [r3, #16]
 8004f9c:	2b40      	cmp	r3, #64	; 0x40
 8004f9e:	d108      	bne.n	8004fb2 <HAL_RCC_OscConfig+0x236>
 8004fa0:	4b18      	ldr	r3, [pc, #96]	; (8005004 <HAL_RCC_OscConfig+0x288>)
 8004fa2:	685b      	ldr	r3, [r3, #4]
 8004fa4:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004fa8:	4a16      	ldr	r2, [pc, #88]	; (8005004 <HAL_RCC_OscConfig+0x288>)
 8004faa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004fae:	6053      	str	r3, [r2, #4]
 8004fb0:	e030      	b.n	8005014 <HAL_RCC_OscConfig+0x298>
 8004fb2:	4b14      	ldr	r3, [pc, #80]	; (8005004 <HAL_RCC_OscConfig+0x288>)
 8004fb4:	685b      	ldr	r3, [r3, #4]
 8004fb6:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	691b      	ldr	r3, [r3, #16]
 8004fbe:	031b      	lsls	r3, r3, #12
 8004fc0:	4910      	ldr	r1, [pc, #64]	; (8005004 <HAL_RCC_OscConfig+0x288>)
 8004fc2:	4313      	orrs	r3, r2
 8004fc4:	604b      	str	r3, [r1, #4]
 8004fc6:	e025      	b.n	8005014 <HAL_RCC_OscConfig+0x298>
 8004fc8:	4b0e      	ldr	r3, [pc, #56]	; (8005004 <HAL_RCC_OscConfig+0x288>)
 8004fca:	685b      	ldr	r3, [r3, #4]
 8004fcc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	691b      	ldr	r3, [r3, #16]
 8004fd4:	061b      	lsls	r3, r3, #24
 8004fd6:	490b      	ldr	r1, [pc, #44]	; (8005004 <HAL_RCC_OscConfig+0x288>)
 8004fd8:	4313      	orrs	r3, r2
 8004fda:	604b      	str	r3, [r1, #4]
 8004fdc:	e01a      	b.n	8005014 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004fde:	4b09      	ldr	r3, [pc, #36]	; (8005004 <HAL_RCC_OscConfig+0x288>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	4a08      	ldr	r2, [pc, #32]	; (8005004 <HAL_RCC_OscConfig+0x288>)
 8004fe4:	f023 0301 	bic.w	r3, r3, #1
 8004fe8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fea:	f7fc fc13 	bl	8001814 <HAL_GetTick>
 8004fee:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004ff0:	e00a      	b.n	8005008 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004ff2:	f7fc fc0f 	bl	8001814 <HAL_GetTick>
 8004ff6:	4602      	mov	r2, r0
 8004ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ffa:	1ad3      	subs	r3, r2, r3
 8004ffc:	2b02      	cmp	r3, #2
 8004ffe:	d903      	bls.n	8005008 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8005000:	2303      	movs	r3, #3
 8005002:	e2c4      	b.n	800558e <HAL_RCC_OscConfig+0x812>
 8005004:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005008:	4ba4      	ldr	r3, [pc, #656]	; (800529c <HAL_RCC_OscConfig+0x520>)
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f003 0304 	and.w	r3, r3, #4
 8005010:	2b00      	cmp	r3, #0
 8005012:	d1ee      	bne.n	8004ff2 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f003 0310 	and.w	r3, r3, #16
 800501c:	2b00      	cmp	r3, #0
 800501e:	f000 80a9 	beq.w	8005174 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005022:	4b9e      	ldr	r3, [pc, #632]	; (800529c <HAL_RCC_OscConfig+0x520>)
 8005024:	691b      	ldr	r3, [r3, #16]
 8005026:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800502a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800502c:	4b9b      	ldr	r3, [pc, #620]	; (800529c <HAL_RCC_OscConfig+0x520>)
 800502e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005030:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005032:	69bb      	ldr	r3, [r7, #24]
 8005034:	2b08      	cmp	r3, #8
 8005036:	d007      	beq.n	8005048 <HAL_RCC_OscConfig+0x2cc>
 8005038:	69bb      	ldr	r3, [r7, #24]
 800503a:	2b18      	cmp	r3, #24
 800503c:	d13a      	bne.n	80050b4 <HAL_RCC_OscConfig+0x338>
 800503e:	697b      	ldr	r3, [r7, #20]
 8005040:	f003 0303 	and.w	r3, r3, #3
 8005044:	2b01      	cmp	r3, #1
 8005046:	d135      	bne.n	80050b4 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005048:	4b94      	ldr	r3, [pc, #592]	; (800529c <HAL_RCC_OscConfig+0x520>)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005050:	2b00      	cmp	r3, #0
 8005052:	d005      	beq.n	8005060 <HAL_RCC_OscConfig+0x2e4>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	69db      	ldr	r3, [r3, #28]
 8005058:	2b80      	cmp	r3, #128	; 0x80
 800505a:	d001      	beq.n	8005060 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 800505c:	2301      	movs	r3, #1
 800505e:	e296      	b.n	800558e <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005060:	f7fc fc08 	bl	8001874 <HAL_GetREVID>
 8005064:	4603      	mov	r3, r0
 8005066:	f241 0203 	movw	r2, #4099	; 0x1003
 800506a:	4293      	cmp	r3, r2
 800506c:	d817      	bhi.n	800509e <HAL_RCC_OscConfig+0x322>
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6a1b      	ldr	r3, [r3, #32]
 8005072:	2b20      	cmp	r3, #32
 8005074:	d108      	bne.n	8005088 <HAL_RCC_OscConfig+0x30c>
 8005076:	4b89      	ldr	r3, [pc, #548]	; (800529c <HAL_RCC_OscConfig+0x520>)
 8005078:	685b      	ldr	r3, [r3, #4]
 800507a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800507e:	4a87      	ldr	r2, [pc, #540]	; (800529c <HAL_RCC_OscConfig+0x520>)
 8005080:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005084:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005086:	e075      	b.n	8005174 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005088:	4b84      	ldr	r3, [pc, #528]	; (800529c <HAL_RCC_OscConfig+0x520>)
 800508a:	685b      	ldr	r3, [r3, #4]
 800508c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6a1b      	ldr	r3, [r3, #32]
 8005094:	069b      	lsls	r3, r3, #26
 8005096:	4981      	ldr	r1, [pc, #516]	; (800529c <HAL_RCC_OscConfig+0x520>)
 8005098:	4313      	orrs	r3, r2
 800509a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800509c:	e06a      	b.n	8005174 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800509e:	4b7f      	ldr	r3, [pc, #508]	; (800529c <HAL_RCC_OscConfig+0x520>)
 80050a0:	68db      	ldr	r3, [r3, #12]
 80050a2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6a1b      	ldr	r3, [r3, #32]
 80050aa:	061b      	lsls	r3, r3, #24
 80050ac:	497b      	ldr	r1, [pc, #492]	; (800529c <HAL_RCC_OscConfig+0x520>)
 80050ae:	4313      	orrs	r3, r2
 80050b0:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80050b2:	e05f      	b.n	8005174 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	69db      	ldr	r3, [r3, #28]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d042      	beq.n	8005142 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80050bc:	4b77      	ldr	r3, [pc, #476]	; (800529c <HAL_RCC_OscConfig+0x520>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	4a76      	ldr	r2, [pc, #472]	; (800529c <HAL_RCC_OscConfig+0x520>)
 80050c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050c8:	f7fc fba4 	bl	8001814 <HAL_GetTick>
 80050cc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80050ce:	e008      	b.n	80050e2 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80050d0:	f7fc fba0 	bl	8001814 <HAL_GetTick>
 80050d4:	4602      	mov	r2, r0
 80050d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050d8:	1ad3      	subs	r3, r2, r3
 80050da:	2b02      	cmp	r3, #2
 80050dc:	d901      	bls.n	80050e2 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 80050de:	2303      	movs	r3, #3
 80050e0:	e255      	b.n	800558e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80050e2:	4b6e      	ldr	r3, [pc, #440]	; (800529c <HAL_RCC_OscConfig+0x520>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d0f0      	beq.n	80050d0 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80050ee:	f7fc fbc1 	bl	8001874 <HAL_GetREVID>
 80050f2:	4603      	mov	r3, r0
 80050f4:	f241 0203 	movw	r2, #4099	; 0x1003
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d817      	bhi.n	800512c <HAL_RCC_OscConfig+0x3b0>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6a1b      	ldr	r3, [r3, #32]
 8005100:	2b20      	cmp	r3, #32
 8005102:	d108      	bne.n	8005116 <HAL_RCC_OscConfig+0x39a>
 8005104:	4b65      	ldr	r3, [pc, #404]	; (800529c <HAL_RCC_OscConfig+0x520>)
 8005106:	685b      	ldr	r3, [r3, #4]
 8005108:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800510c:	4a63      	ldr	r2, [pc, #396]	; (800529c <HAL_RCC_OscConfig+0x520>)
 800510e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005112:	6053      	str	r3, [r2, #4]
 8005114:	e02e      	b.n	8005174 <HAL_RCC_OscConfig+0x3f8>
 8005116:	4b61      	ldr	r3, [pc, #388]	; (800529c <HAL_RCC_OscConfig+0x520>)
 8005118:	685b      	ldr	r3, [r3, #4]
 800511a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6a1b      	ldr	r3, [r3, #32]
 8005122:	069b      	lsls	r3, r3, #26
 8005124:	495d      	ldr	r1, [pc, #372]	; (800529c <HAL_RCC_OscConfig+0x520>)
 8005126:	4313      	orrs	r3, r2
 8005128:	604b      	str	r3, [r1, #4]
 800512a:	e023      	b.n	8005174 <HAL_RCC_OscConfig+0x3f8>
 800512c:	4b5b      	ldr	r3, [pc, #364]	; (800529c <HAL_RCC_OscConfig+0x520>)
 800512e:	68db      	ldr	r3, [r3, #12]
 8005130:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6a1b      	ldr	r3, [r3, #32]
 8005138:	061b      	lsls	r3, r3, #24
 800513a:	4958      	ldr	r1, [pc, #352]	; (800529c <HAL_RCC_OscConfig+0x520>)
 800513c:	4313      	orrs	r3, r2
 800513e:	60cb      	str	r3, [r1, #12]
 8005140:	e018      	b.n	8005174 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005142:	4b56      	ldr	r3, [pc, #344]	; (800529c <HAL_RCC_OscConfig+0x520>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	4a55      	ldr	r2, [pc, #340]	; (800529c <HAL_RCC_OscConfig+0x520>)
 8005148:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800514c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800514e:	f7fc fb61 	bl	8001814 <HAL_GetTick>
 8005152:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005154:	e008      	b.n	8005168 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8005156:	f7fc fb5d 	bl	8001814 <HAL_GetTick>
 800515a:	4602      	mov	r2, r0
 800515c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800515e:	1ad3      	subs	r3, r2, r3
 8005160:	2b02      	cmp	r3, #2
 8005162:	d901      	bls.n	8005168 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8005164:	2303      	movs	r3, #3
 8005166:	e212      	b.n	800558e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005168:	4b4c      	ldr	r3, [pc, #304]	; (800529c <HAL_RCC_OscConfig+0x520>)
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005170:	2b00      	cmp	r3, #0
 8005172:	d1f0      	bne.n	8005156 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f003 0308 	and.w	r3, r3, #8
 800517c:	2b00      	cmp	r3, #0
 800517e:	d036      	beq.n	80051ee <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	695b      	ldr	r3, [r3, #20]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d019      	beq.n	80051bc <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005188:	4b44      	ldr	r3, [pc, #272]	; (800529c <HAL_RCC_OscConfig+0x520>)
 800518a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800518c:	4a43      	ldr	r2, [pc, #268]	; (800529c <HAL_RCC_OscConfig+0x520>)
 800518e:	f043 0301 	orr.w	r3, r3, #1
 8005192:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005194:	f7fc fb3e 	bl	8001814 <HAL_GetTick>
 8005198:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800519a:	e008      	b.n	80051ae <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800519c:	f7fc fb3a 	bl	8001814 <HAL_GetTick>
 80051a0:	4602      	mov	r2, r0
 80051a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051a4:	1ad3      	subs	r3, r2, r3
 80051a6:	2b02      	cmp	r3, #2
 80051a8:	d901      	bls.n	80051ae <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 80051aa:	2303      	movs	r3, #3
 80051ac:	e1ef      	b.n	800558e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80051ae:	4b3b      	ldr	r3, [pc, #236]	; (800529c <HAL_RCC_OscConfig+0x520>)
 80051b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051b2:	f003 0302 	and.w	r3, r3, #2
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d0f0      	beq.n	800519c <HAL_RCC_OscConfig+0x420>
 80051ba:	e018      	b.n	80051ee <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80051bc:	4b37      	ldr	r3, [pc, #220]	; (800529c <HAL_RCC_OscConfig+0x520>)
 80051be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051c0:	4a36      	ldr	r2, [pc, #216]	; (800529c <HAL_RCC_OscConfig+0x520>)
 80051c2:	f023 0301 	bic.w	r3, r3, #1
 80051c6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051c8:	f7fc fb24 	bl	8001814 <HAL_GetTick>
 80051cc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80051ce:	e008      	b.n	80051e2 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80051d0:	f7fc fb20 	bl	8001814 <HAL_GetTick>
 80051d4:	4602      	mov	r2, r0
 80051d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051d8:	1ad3      	subs	r3, r2, r3
 80051da:	2b02      	cmp	r3, #2
 80051dc:	d901      	bls.n	80051e2 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 80051de:	2303      	movs	r3, #3
 80051e0:	e1d5      	b.n	800558e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80051e2:	4b2e      	ldr	r3, [pc, #184]	; (800529c <HAL_RCC_OscConfig+0x520>)
 80051e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051e6:	f003 0302 	and.w	r3, r3, #2
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d1f0      	bne.n	80051d0 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f003 0320 	and.w	r3, r3, #32
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d036      	beq.n	8005268 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	699b      	ldr	r3, [r3, #24]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d019      	beq.n	8005236 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005202:	4b26      	ldr	r3, [pc, #152]	; (800529c <HAL_RCC_OscConfig+0x520>)
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	4a25      	ldr	r2, [pc, #148]	; (800529c <HAL_RCC_OscConfig+0x520>)
 8005208:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800520c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800520e:	f7fc fb01 	bl	8001814 <HAL_GetTick>
 8005212:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005214:	e008      	b.n	8005228 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8005216:	f7fc fafd 	bl	8001814 <HAL_GetTick>
 800521a:	4602      	mov	r2, r0
 800521c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800521e:	1ad3      	subs	r3, r2, r3
 8005220:	2b02      	cmp	r3, #2
 8005222:	d901      	bls.n	8005228 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8005224:	2303      	movs	r3, #3
 8005226:	e1b2      	b.n	800558e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005228:	4b1c      	ldr	r3, [pc, #112]	; (800529c <HAL_RCC_OscConfig+0x520>)
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005230:	2b00      	cmp	r3, #0
 8005232:	d0f0      	beq.n	8005216 <HAL_RCC_OscConfig+0x49a>
 8005234:	e018      	b.n	8005268 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005236:	4b19      	ldr	r3, [pc, #100]	; (800529c <HAL_RCC_OscConfig+0x520>)
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	4a18      	ldr	r2, [pc, #96]	; (800529c <HAL_RCC_OscConfig+0x520>)
 800523c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005240:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005242:	f7fc fae7 	bl	8001814 <HAL_GetTick>
 8005246:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005248:	e008      	b.n	800525c <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800524a:	f7fc fae3 	bl	8001814 <HAL_GetTick>
 800524e:	4602      	mov	r2, r0
 8005250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005252:	1ad3      	subs	r3, r2, r3
 8005254:	2b02      	cmp	r3, #2
 8005256:	d901      	bls.n	800525c <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8005258:	2303      	movs	r3, #3
 800525a:	e198      	b.n	800558e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800525c:	4b0f      	ldr	r3, [pc, #60]	; (800529c <HAL_RCC_OscConfig+0x520>)
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005264:	2b00      	cmp	r3, #0
 8005266:	d1f0      	bne.n	800524a <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f003 0304 	and.w	r3, r3, #4
 8005270:	2b00      	cmp	r3, #0
 8005272:	f000 8085 	beq.w	8005380 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005276:	4b0a      	ldr	r3, [pc, #40]	; (80052a0 <HAL_RCC_OscConfig+0x524>)
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	4a09      	ldr	r2, [pc, #36]	; (80052a0 <HAL_RCC_OscConfig+0x524>)
 800527c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005280:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005282:	f7fc fac7 	bl	8001814 <HAL_GetTick>
 8005286:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005288:	e00c      	b.n	80052a4 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800528a:	f7fc fac3 	bl	8001814 <HAL_GetTick>
 800528e:	4602      	mov	r2, r0
 8005290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005292:	1ad3      	subs	r3, r2, r3
 8005294:	2b64      	cmp	r3, #100	; 0x64
 8005296:	d905      	bls.n	80052a4 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8005298:	2303      	movs	r3, #3
 800529a:	e178      	b.n	800558e <HAL_RCC_OscConfig+0x812>
 800529c:	58024400 	.word	0x58024400
 80052a0:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80052a4:	4b96      	ldr	r3, [pc, #600]	; (8005500 <HAL_RCC_OscConfig+0x784>)
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d0ec      	beq.n	800528a <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	689b      	ldr	r3, [r3, #8]
 80052b4:	2b01      	cmp	r3, #1
 80052b6:	d106      	bne.n	80052c6 <HAL_RCC_OscConfig+0x54a>
 80052b8:	4b92      	ldr	r3, [pc, #584]	; (8005504 <HAL_RCC_OscConfig+0x788>)
 80052ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052bc:	4a91      	ldr	r2, [pc, #580]	; (8005504 <HAL_RCC_OscConfig+0x788>)
 80052be:	f043 0301 	orr.w	r3, r3, #1
 80052c2:	6713      	str	r3, [r2, #112]	; 0x70
 80052c4:	e02d      	b.n	8005322 <HAL_RCC_OscConfig+0x5a6>
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	689b      	ldr	r3, [r3, #8]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d10c      	bne.n	80052e8 <HAL_RCC_OscConfig+0x56c>
 80052ce:	4b8d      	ldr	r3, [pc, #564]	; (8005504 <HAL_RCC_OscConfig+0x788>)
 80052d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052d2:	4a8c      	ldr	r2, [pc, #560]	; (8005504 <HAL_RCC_OscConfig+0x788>)
 80052d4:	f023 0301 	bic.w	r3, r3, #1
 80052d8:	6713      	str	r3, [r2, #112]	; 0x70
 80052da:	4b8a      	ldr	r3, [pc, #552]	; (8005504 <HAL_RCC_OscConfig+0x788>)
 80052dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052de:	4a89      	ldr	r2, [pc, #548]	; (8005504 <HAL_RCC_OscConfig+0x788>)
 80052e0:	f023 0304 	bic.w	r3, r3, #4
 80052e4:	6713      	str	r3, [r2, #112]	; 0x70
 80052e6:	e01c      	b.n	8005322 <HAL_RCC_OscConfig+0x5a6>
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	689b      	ldr	r3, [r3, #8]
 80052ec:	2b05      	cmp	r3, #5
 80052ee:	d10c      	bne.n	800530a <HAL_RCC_OscConfig+0x58e>
 80052f0:	4b84      	ldr	r3, [pc, #528]	; (8005504 <HAL_RCC_OscConfig+0x788>)
 80052f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052f4:	4a83      	ldr	r2, [pc, #524]	; (8005504 <HAL_RCC_OscConfig+0x788>)
 80052f6:	f043 0304 	orr.w	r3, r3, #4
 80052fa:	6713      	str	r3, [r2, #112]	; 0x70
 80052fc:	4b81      	ldr	r3, [pc, #516]	; (8005504 <HAL_RCC_OscConfig+0x788>)
 80052fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005300:	4a80      	ldr	r2, [pc, #512]	; (8005504 <HAL_RCC_OscConfig+0x788>)
 8005302:	f043 0301 	orr.w	r3, r3, #1
 8005306:	6713      	str	r3, [r2, #112]	; 0x70
 8005308:	e00b      	b.n	8005322 <HAL_RCC_OscConfig+0x5a6>
 800530a:	4b7e      	ldr	r3, [pc, #504]	; (8005504 <HAL_RCC_OscConfig+0x788>)
 800530c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800530e:	4a7d      	ldr	r2, [pc, #500]	; (8005504 <HAL_RCC_OscConfig+0x788>)
 8005310:	f023 0301 	bic.w	r3, r3, #1
 8005314:	6713      	str	r3, [r2, #112]	; 0x70
 8005316:	4b7b      	ldr	r3, [pc, #492]	; (8005504 <HAL_RCC_OscConfig+0x788>)
 8005318:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800531a:	4a7a      	ldr	r2, [pc, #488]	; (8005504 <HAL_RCC_OscConfig+0x788>)
 800531c:	f023 0304 	bic.w	r3, r3, #4
 8005320:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	689b      	ldr	r3, [r3, #8]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d015      	beq.n	8005356 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800532a:	f7fc fa73 	bl	8001814 <HAL_GetTick>
 800532e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005330:	e00a      	b.n	8005348 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005332:	f7fc fa6f 	bl	8001814 <HAL_GetTick>
 8005336:	4602      	mov	r2, r0
 8005338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800533a:	1ad3      	subs	r3, r2, r3
 800533c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005340:	4293      	cmp	r3, r2
 8005342:	d901      	bls.n	8005348 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8005344:	2303      	movs	r3, #3
 8005346:	e122      	b.n	800558e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005348:	4b6e      	ldr	r3, [pc, #440]	; (8005504 <HAL_RCC_OscConfig+0x788>)
 800534a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800534c:	f003 0302 	and.w	r3, r3, #2
 8005350:	2b00      	cmp	r3, #0
 8005352:	d0ee      	beq.n	8005332 <HAL_RCC_OscConfig+0x5b6>
 8005354:	e014      	b.n	8005380 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005356:	f7fc fa5d 	bl	8001814 <HAL_GetTick>
 800535a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800535c:	e00a      	b.n	8005374 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800535e:	f7fc fa59 	bl	8001814 <HAL_GetTick>
 8005362:	4602      	mov	r2, r0
 8005364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005366:	1ad3      	subs	r3, r2, r3
 8005368:	f241 3288 	movw	r2, #5000	; 0x1388
 800536c:	4293      	cmp	r3, r2
 800536e:	d901      	bls.n	8005374 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8005370:	2303      	movs	r3, #3
 8005372:	e10c      	b.n	800558e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005374:	4b63      	ldr	r3, [pc, #396]	; (8005504 <HAL_RCC_OscConfig+0x788>)
 8005376:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005378:	f003 0302 	and.w	r3, r3, #2
 800537c:	2b00      	cmp	r3, #0
 800537e:	d1ee      	bne.n	800535e <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005384:	2b00      	cmp	r3, #0
 8005386:	f000 8101 	beq.w	800558c <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800538a:	4b5e      	ldr	r3, [pc, #376]	; (8005504 <HAL_RCC_OscConfig+0x788>)
 800538c:	691b      	ldr	r3, [r3, #16]
 800538e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005392:	2b18      	cmp	r3, #24
 8005394:	f000 80bc 	beq.w	8005510 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800539c:	2b02      	cmp	r3, #2
 800539e:	f040 8095 	bne.w	80054cc <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80053a2:	4b58      	ldr	r3, [pc, #352]	; (8005504 <HAL_RCC_OscConfig+0x788>)
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	4a57      	ldr	r2, [pc, #348]	; (8005504 <HAL_RCC_OscConfig+0x788>)
 80053a8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80053ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053ae:	f7fc fa31 	bl	8001814 <HAL_GetTick>
 80053b2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80053b4:	e008      	b.n	80053c8 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80053b6:	f7fc fa2d 	bl	8001814 <HAL_GetTick>
 80053ba:	4602      	mov	r2, r0
 80053bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053be:	1ad3      	subs	r3, r2, r3
 80053c0:	2b02      	cmp	r3, #2
 80053c2:	d901      	bls.n	80053c8 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 80053c4:	2303      	movs	r3, #3
 80053c6:	e0e2      	b.n	800558e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80053c8:	4b4e      	ldr	r3, [pc, #312]	; (8005504 <HAL_RCC_OscConfig+0x788>)
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d1f0      	bne.n	80053b6 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80053d4:	4b4b      	ldr	r3, [pc, #300]	; (8005504 <HAL_RCC_OscConfig+0x788>)
 80053d6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80053d8:	4b4b      	ldr	r3, [pc, #300]	; (8005508 <HAL_RCC_OscConfig+0x78c>)
 80053da:	4013      	ands	r3, r2
 80053dc:	687a      	ldr	r2, [r7, #4]
 80053de:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80053e0:	687a      	ldr	r2, [r7, #4]
 80053e2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80053e4:	0112      	lsls	r2, r2, #4
 80053e6:	430a      	orrs	r2, r1
 80053e8:	4946      	ldr	r1, [pc, #280]	; (8005504 <HAL_RCC_OscConfig+0x788>)
 80053ea:	4313      	orrs	r3, r2
 80053ec:	628b      	str	r3, [r1, #40]	; 0x28
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053f2:	3b01      	subs	r3, #1
 80053f4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053fc:	3b01      	subs	r3, #1
 80053fe:	025b      	lsls	r3, r3, #9
 8005400:	b29b      	uxth	r3, r3
 8005402:	431a      	orrs	r2, r3
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005408:	3b01      	subs	r3, #1
 800540a:	041b      	lsls	r3, r3, #16
 800540c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005410:	431a      	orrs	r2, r3
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005416:	3b01      	subs	r3, #1
 8005418:	061b      	lsls	r3, r3, #24
 800541a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800541e:	4939      	ldr	r1, [pc, #228]	; (8005504 <HAL_RCC_OscConfig+0x788>)
 8005420:	4313      	orrs	r3, r2
 8005422:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8005424:	4b37      	ldr	r3, [pc, #220]	; (8005504 <HAL_RCC_OscConfig+0x788>)
 8005426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005428:	4a36      	ldr	r2, [pc, #216]	; (8005504 <HAL_RCC_OscConfig+0x788>)
 800542a:	f023 0301 	bic.w	r3, r3, #1
 800542e:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005430:	4b34      	ldr	r3, [pc, #208]	; (8005504 <HAL_RCC_OscConfig+0x788>)
 8005432:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005434:	4b35      	ldr	r3, [pc, #212]	; (800550c <HAL_RCC_OscConfig+0x790>)
 8005436:	4013      	ands	r3, r2
 8005438:	687a      	ldr	r2, [r7, #4]
 800543a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800543c:	00d2      	lsls	r2, r2, #3
 800543e:	4931      	ldr	r1, [pc, #196]	; (8005504 <HAL_RCC_OscConfig+0x788>)
 8005440:	4313      	orrs	r3, r2
 8005442:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005444:	4b2f      	ldr	r3, [pc, #188]	; (8005504 <HAL_RCC_OscConfig+0x788>)
 8005446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005448:	f023 020c 	bic.w	r2, r3, #12
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005450:	492c      	ldr	r1, [pc, #176]	; (8005504 <HAL_RCC_OscConfig+0x788>)
 8005452:	4313      	orrs	r3, r2
 8005454:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005456:	4b2b      	ldr	r3, [pc, #172]	; (8005504 <HAL_RCC_OscConfig+0x788>)
 8005458:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800545a:	f023 0202 	bic.w	r2, r3, #2
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005462:	4928      	ldr	r1, [pc, #160]	; (8005504 <HAL_RCC_OscConfig+0x788>)
 8005464:	4313      	orrs	r3, r2
 8005466:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005468:	4b26      	ldr	r3, [pc, #152]	; (8005504 <HAL_RCC_OscConfig+0x788>)
 800546a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800546c:	4a25      	ldr	r2, [pc, #148]	; (8005504 <HAL_RCC_OscConfig+0x788>)
 800546e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005472:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005474:	4b23      	ldr	r3, [pc, #140]	; (8005504 <HAL_RCC_OscConfig+0x788>)
 8005476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005478:	4a22      	ldr	r2, [pc, #136]	; (8005504 <HAL_RCC_OscConfig+0x788>)
 800547a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800547e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005480:	4b20      	ldr	r3, [pc, #128]	; (8005504 <HAL_RCC_OscConfig+0x788>)
 8005482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005484:	4a1f      	ldr	r2, [pc, #124]	; (8005504 <HAL_RCC_OscConfig+0x788>)
 8005486:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800548a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800548c:	4b1d      	ldr	r3, [pc, #116]	; (8005504 <HAL_RCC_OscConfig+0x788>)
 800548e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005490:	4a1c      	ldr	r2, [pc, #112]	; (8005504 <HAL_RCC_OscConfig+0x788>)
 8005492:	f043 0301 	orr.w	r3, r3, #1
 8005496:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005498:	4b1a      	ldr	r3, [pc, #104]	; (8005504 <HAL_RCC_OscConfig+0x788>)
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	4a19      	ldr	r2, [pc, #100]	; (8005504 <HAL_RCC_OscConfig+0x788>)
 800549e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80054a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054a4:	f7fc f9b6 	bl	8001814 <HAL_GetTick>
 80054a8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80054aa:	e008      	b.n	80054be <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80054ac:	f7fc f9b2 	bl	8001814 <HAL_GetTick>
 80054b0:	4602      	mov	r2, r0
 80054b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054b4:	1ad3      	subs	r3, r2, r3
 80054b6:	2b02      	cmp	r3, #2
 80054b8:	d901      	bls.n	80054be <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 80054ba:	2303      	movs	r3, #3
 80054bc:	e067      	b.n	800558e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80054be:	4b11      	ldr	r3, [pc, #68]	; (8005504 <HAL_RCC_OscConfig+0x788>)
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d0f0      	beq.n	80054ac <HAL_RCC_OscConfig+0x730>
 80054ca:	e05f      	b.n	800558c <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80054cc:	4b0d      	ldr	r3, [pc, #52]	; (8005504 <HAL_RCC_OscConfig+0x788>)
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	4a0c      	ldr	r2, [pc, #48]	; (8005504 <HAL_RCC_OscConfig+0x788>)
 80054d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80054d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054d8:	f7fc f99c 	bl	8001814 <HAL_GetTick>
 80054dc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80054de:	e008      	b.n	80054f2 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80054e0:	f7fc f998 	bl	8001814 <HAL_GetTick>
 80054e4:	4602      	mov	r2, r0
 80054e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054e8:	1ad3      	subs	r3, r2, r3
 80054ea:	2b02      	cmp	r3, #2
 80054ec:	d901      	bls.n	80054f2 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 80054ee:	2303      	movs	r3, #3
 80054f0:	e04d      	b.n	800558e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80054f2:	4b04      	ldr	r3, [pc, #16]	; (8005504 <HAL_RCC_OscConfig+0x788>)
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d1f0      	bne.n	80054e0 <HAL_RCC_OscConfig+0x764>
 80054fe:	e045      	b.n	800558c <HAL_RCC_OscConfig+0x810>
 8005500:	58024800 	.word	0x58024800
 8005504:	58024400 	.word	0x58024400
 8005508:	fffffc0c 	.word	0xfffffc0c
 800550c:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005510:	4b21      	ldr	r3, [pc, #132]	; (8005598 <HAL_RCC_OscConfig+0x81c>)
 8005512:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005514:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005516:	4b20      	ldr	r3, [pc, #128]	; (8005598 <HAL_RCC_OscConfig+0x81c>)
 8005518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800551a:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005520:	2b01      	cmp	r3, #1
 8005522:	d031      	beq.n	8005588 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005524:	693b      	ldr	r3, [r7, #16]
 8005526:	f003 0203 	and.w	r2, r3, #3
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800552e:	429a      	cmp	r2, r3
 8005530:	d12a      	bne.n	8005588 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005532:	693b      	ldr	r3, [r7, #16]
 8005534:	091b      	lsrs	r3, r3, #4
 8005536:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800553e:	429a      	cmp	r2, r3
 8005540:	d122      	bne.n	8005588 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800554c:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800554e:	429a      	cmp	r2, r3
 8005550:	d11a      	bne.n	8005588 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	0a5b      	lsrs	r3, r3, #9
 8005556:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800555e:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005560:	429a      	cmp	r2, r3
 8005562:	d111      	bne.n	8005588 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	0c1b      	lsrs	r3, r3, #16
 8005568:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005570:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005572:	429a      	cmp	r2, r3
 8005574:	d108      	bne.n	8005588 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	0e1b      	lsrs	r3, r3, #24
 800557a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005582:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005584:	429a      	cmp	r2, r3
 8005586:	d001      	beq.n	800558c <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8005588:	2301      	movs	r3, #1
 800558a:	e000      	b.n	800558e <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 800558c:	2300      	movs	r3, #0
}
 800558e:	4618      	mov	r0, r3
 8005590:	3730      	adds	r7, #48	; 0x30
 8005592:	46bd      	mov	sp, r7
 8005594:	bd80      	pop	{r7, pc}
 8005596:	bf00      	nop
 8005598:	58024400 	.word	0x58024400

0800559c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800559c:	b580      	push	{r7, lr}
 800559e:	b086      	sub	sp, #24
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
 80055a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d101      	bne.n	80055b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80055ac:	2301      	movs	r3, #1
 80055ae:	e19c      	b.n	80058ea <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80055b0:	4b8a      	ldr	r3, [pc, #552]	; (80057dc <HAL_RCC_ClockConfig+0x240>)
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f003 030f 	and.w	r3, r3, #15
 80055b8:	683a      	ldr	r2, [r7, #0]
 80055ba:	429a      	cmp	r2, r3
 80055bc:	d910      	bls.n	80055e0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80055be:	4b87      	ldr	r3, [pc, #540]	; (80057dc <HAL_RCC_ClockConfig+0x240>)
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f023 020f 	bic.w	r2, r3, #15
 80055c6:	4985      	ldr	r1, [pc, #532]	; (80057dc <HAL_RCC_ClockConfig+0x240>)
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	4313      	orrs	r3, r2
 80055cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80055ce:	4b83      	ldr	r3, [pc, #524]	; (80057dc <HAL_RCC_ClockConfig+0x240>)
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f003 030f 	and.w	r3, r3, #15
 80055d6:	683a      	ldr	r2, [r7, #0]
 80055d8:	429a      	cmp	r2, r3
 80055da:	d001      	beq.n	80055e0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80055dc:	2301      	movs	r3, #1
 80055de:	e184      	b.n	80058ea <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f003 0304 	and.w	r3, r3, #4
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d010      	beq.n	800560e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	691a      	ldr	r2, [r3, #16]
 80055f0:	4b7b      	ldr	r3, [pc, #492]	; (80057e0 <HAL_RCC_ClockConfig+0x244>)
 80055f2:	699b      	ldr	r3, [r3, #24]
 80055f4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80055f8:	429a      	cmp	r2, r3
 80055fa:	d908      	bls.n	800560e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80055fc:	4b78      	ldr	r3, [pc, #480]	; (80057e0 <HAL_RCC_ClockConfig+0x244>)
 80055fe:	699b      	ldr	r3, [r3, #24]
 8005600:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	691b      	ldr	r3, [r3, #16]
 8005608:	4975      	ldr	r1, [pc, #468]	; (80057e0 <HAL_RCC_ClockConfig+0x244>)
 800560a:	4313      	orrs	r3, r2
 800560c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f003 0308 	and.w	r3, r3, #8
 8005616:	2b00      	cmp	r3, #0
 8005618:	d010      	beq.n	800563c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	695a      	ldr	r2, [r3, #20]
 800561e:	4b70      	ldr	r3, [pc, #448]	; (80057e0 <HAL_RCC_ClockConfig+0x244>)
 8005620:	69db      	ldr	r3, [r3, #28]
 8005622:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005626:	429a      	cmp	r2, r3
 8005628:	d908      	bls.n	800563c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800562a:	4b6d      	ldr	r3, [pc, #436]	; (80057e0 <HAL_RCC_ClockConfig+0x244>)
 800562c:	69db      	ldr	r3, [r3, #28]
 800562e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	695b      	ldr	r3, [r3, #20]
 8005636:	496a      	ldr	r1, [pc, #424]	; (80057e0 <HAL_RCC_ClockConfig+0x244>)
 8005638:	4313      	orrs	r3, r2
 800563a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f003 0310 	and.w	r3, r3, #16
 8005644:	2b00      	cmp	r3, #0
 8005646:	d010      	beq.n	800566a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	699a      	ldr	r2, [r3, #24]
 800564c:	4b64      	ldr	r3, [pc, #400]	; (80057e0 <HAL_RCC_ClockConfig+0x244>)
 800564e:	69db      	ldr	r3, [r3, #28]
 8005650:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005654:	429a      	cmp	r2, r3
 8005656:	d908      	bls.n	800566a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005658:	4b61      	ldr	r3, [pc, #388]	; (80057e0 <HAL_RCC_ClockConfig+0x244>)
 800565a:	69db      	ldr	r3, [r3, #28]
 800565c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	699b      	ldr	r3, [r3, #24]
 8005664:	495e      	ldr	r1, [pc, #376]	; (80057e0 <HAL_RCC_ClockConfig+0x244>)
 8005666:	4313      	orrs	r3, r2
 8005668:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f003 0320 	and.w	r3, r3, #32
 8005672:	2b00      	cmp	r3, #0
 8005674:	d010      	beq.n	8005698 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	69da      	ldr	r2, [r3, #28]
 800567a:	4b59      	ldr	r3, [pc, #356]	; (80057e0 <HAL_RCC_ClockConfig+0x244>)
 800567c:	6a1b      	ldr	r3, [r3, #32]
 800567e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005682:	429a      	cmp	r2, r3
 8005684:	d908      	bls.n	8005698 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005686:	4b56      	ldr	r3, [pc, #344]	; (80057e0 <HAL_RCC_ClockConfig+0x244>)
 8005688:	6a1b      	ldr	r3, [r3, #32]
 800568a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	69db      	ldr	r3, [r3, #28]
 8005692:	4953      	ldr	r1, [pc, #332]	; (80057e0 <HAL_RCC_ClockConfig+0x244>)
 8005694:	4313      	orrs	r3, r2
 8005696:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f003 0302 	and.w	r3, r3, #2
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d010      	beq.n	80056c6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	68da      	ldr	r2, [r3, #12]
 80056a8:	4b4d      	ldr	r3, [pc, #308]	; (80057e0 <HAL_RCC_ClockConfig+0x244>)
 80056aa:	699b      	ldr	r3, [r3, #24]
 80056ac:	f003 030f 	and.w	r3, r3, #15
 80056b0:	429a      	cmp	r2, r3
 80056b2:	d908      	bls.n	80056c6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80056b4:	4b4a      	ldr	r3, [pc, #296]	; (80057e0 <HAL_RCC_ClockConfig+0x244>)
 80056b6:	699b      	ldr	r3, [r3, #24]
 80056b8:	f023 020f 	bic.w	r2, r3, #15
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	68db      	ldr	r3, [r3, #12]
 80056c0:	4947      	ldr	r1, [pc, #284]	; (80057e0 <HAL_RCC_ClockConfig+0x244>)
 80056c2:	4313      	orrs	r3, r2
 80056c4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f003 0301 	and.w	r3, r3, #1
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d055      	beq.n	800577e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80056d2:	4b43      	ldr	r3, [pc, #268]	; (80057e0 <HAL_RCC_ClockConfig+0x244>)
 80056d4:	699b      	ldr	r3, [r3, #24]
 80056d6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	689b      	ldr	r3, [r3, #8]
 80056de:	4940      	ldr	r1, [pc, #256]	; (80057e0 <HAL_RCC_ClockConfig+0x244>)
 80056e0:	4313      	orrs	r3, r2
 80056e2:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	685b      	ldr	r3, [r3, #4]
 80056e8:	2b02      	cmp	r3, #2
 80056ea:	d107      	bne.n	80056fc <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80056ec:	4b3c      	ldr	r3, [pc, #240]	; (80057e0 <HAL_RCC_ClockConfig+0x244>)
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d121      	bne.n	800573c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80056f8:	2301      	movs	r3, #1
 80056fa:	e0f6      	b.n	80058ea <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	685b      	ldr	r3, [r3, #4]
 8005700:	2b03      	cmp	r3, #3
 8005702:	d107      	bne.n	8005714 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005704:	4b36      	ldr	r3, [pc, #216]	; (80057e0 <HAL_RCC_ClockConfig+0x244>)
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800570c:	2b00      	cmp	r3, #0
 800570e:	d115      	bne.n	800573c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005710:	2301      	movs	r3, #1
 8005712:	e0ea      	b.n	80058ea <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	685b      	ldr	r3, [r3, #4]
 8005718:	2b01      	cmp	r3, #1
 800571a:	d107      	bne.n	800572c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800571c:	4b30      	ldr	r3, [pc, #192]	; (80057e0 <HAL_RCC_ClockConfig+0x244>)
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005724:	2b00      	cmp	r3, #0
 8005726:	d109      	bne.n	800573c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005728:	2301      	movs	r3, #1
 800572a:	e0de      	b.n	80058ea <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800572c:	4b2c      	ldr	r3, [pc, #176]	; (80057e0 <HAL_RCC_ClockConfig+0x244>)
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f003 0304 	and.w	r3, r3, #4
 8005734:	2b00      	cmp	r3, #0
 8005736:	d101      	bne.n	800573c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005738:	2301      	movs	r3, #1
 800573a:	e0d6      	b.n	80058ea <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800573c:	4b28      	ldr	r3, [pc, #160]	; (80057e0 <HAL_RCC_ClockConfig+0x244>)
 800573e:	691b      	ldr	r3, [r3, #16]
 8005740:	f023 0207 	bic.w	r2, r3, #7
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	685b      	ldr	r3, [r3, #4]
 8005748:	4925      	ldr	r1, [pc, #148]	; (80057e0 <HAL_RCC_ClockConfig+0x244>)
 800574a:	4313      	orrs	r3, r2
 800574c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800574e:	f7fc f861 	bl	8001814 <HAL_GetTick>
 8005752:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005754:	e00a      	b.n	800576c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005756:	f7fc f85d 	bl	8001814 <HAL_GetTick>
 800575a:	4602      	mov	r2, r0
 800575c:	697b      	ldr	r3, [r7, #20]
 800575e:	1ad3      	subs	r3, r2, r3
 8005760:	f241 3288 	movw	r2, #5000	; 0x1388
 8005764:	4293      	cmp	r3, r2
 8005766:	d901      	bls.n	800576c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8005768:	2303      	movs	r3, #3
 800576a:	e0be      	b.n	80058ea <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800576c:	4b1c      	ldr	r3, [pc, #112]	; (80057e0 <HAL_RCC_ClockConfig+0x244>)
 800576e:	691b      	ldr	r3, [r3, #16]
 8005770:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	685b      	ldr	r3, [r3, #4]
 8005778:	00db      	lsls	r3, r3, #3
 800577a:	429a      	cmp	r2, r3
 800577c:	d1eb      	bne.n	8005756 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f003 0302 	and.w	r3, r3, #2
 8005786:	2b00      	cmp	r3, #0
 8005788:	d010      	beq.n	80057ac <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	68da      	ldr	r2, [r3, #12]
 800578e:	4b14      	ldr	r3, [pc, #80]	; (80057e0 <HAL_RCC_ClockConfig+0x244>)
 8005790:	699b      	ldr	r3, [r3, #24]
 8005792:	f003 030f 	and.w	r3, r3, #15
 8005796:	429a      	cmp	r2, r3
 8005798:	d208      	bcs.n	80057ac <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800579a:	4b11      	ldr	r3, [pc, #68]	; (80057e0 <HAL_RCC_ClockConfig+0x244>)
 800579c:	699b      	ldr	r3, [r3, #24]
 800579e:	f023 020f 	bic.w	r2, r3, #15
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	68db      	ldr	r3, [r3, #12]
 80057a6:	490e      	ldr	r1, [pc, #56]	; (80057e0 <HAL_RCC_ClockConfig+0x244>)
 80057a8:	4313      	orrs	r3, r2
 80057aa:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80057ac:	4b0b      	ldr	r3, [pc, #44]	; (80057dc <HAL_RCC_ClockConfig+0x240>)
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f003 030f 	and.w	r3, r3, #15
 80057b4:	683a      	ldr	r2, [r7, #0]
 80057b6:	429a      	cmp	r2, r3
 80057b8:	d214      	bcs.n	80057e4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80057ba:	4b08      	ldr	r3, [pc, #32]	; (80057dc <HAL_RCC_ClockConfig+0x240>)
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f023 020f 	bic.w	r2, r3, #15
 80057c2:	4906      	ldr	r1, [pc, #24]	; (80057dc <HAL_RCC_ClockConfig+0x240>)
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	4313      	orrs	r3, r2
 80057c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80057ca:	4b04      	ldr	r3, [pc, #16]	; (80057dc <HAL_RCC_ClockConfig+0x240>)
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f003 030f 	and.w	r3, r3, #15
 80057d2:	683a      	ldr	r2, [r7, #0]
 80057d4:	429a      	cmp	r2, r3
 80057d6:	d005      	beq.n	80057e4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80057d8:	2301      	movs	r3, #1
 80057da:	e086      	b.n	80058ea <HAL_RCC_ClockConfig+0x34e>
 80057dc:	52002000 	.word	0x52002000
 80057e0:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f003 0304 	and.w	r3, r3, #4
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d010      	beq.n	8005812 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	691a      	ldr	r2, [r3, #16]
 80057f4:	4b3f      	ldr	r3, [pc, #252]	; (80058f4 <HAL_RCC_ClockConfig+0x358>)
 80057f6:	699b      	ldr	r3, [r3, #24]
 80057f8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80057fc:	429a      	cmp	r2, r3
 80057fe:	d208      	bcs.n	8005812 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005800:	4b3c      	ldr	r3, [pc, #240]	; (80058f4 <HAL_RCC_ClockConfig+0x358>)
 8005802:	699b      	ldr	r3, [r3, #24]
 8005804:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	691b      	ldr	r3, [r3, #16]
 800580c:	4939      	ldr	r1, [pc, #228]	; (80058f4 <HAL_RCC_ClockConfig+0x358>)
 800580e:	4313      	orrs	r3, r2
 8005810:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f003 0308 	and.w	r3, r3, #8
 800581a:	2b00      	cmp	r3, #0
 800581c:	d010      	beq.n	8005840 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	695a      	ldr	r2, [r3, #20]
 8005822:	4b34      	ldr	r3, [pc, #208]	; (80058f4 <HAL_RCC_ClockConfig+0x358>)
 8005824:	69db      	ldr	r3, [r3, #28]
 8005826:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800582a:	429a      	cmp	r2, r3
 800582c:	d208      	bcs.n	8005840 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800582e:	4b31      	ldr	r3, [pc, #196]	; (80058f4 <HAL_RCC_ClockConfig+0x358>)
 8005830:	69db      	ldr	r3, [r3, #28]
 8005832:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	695b      	ldr	r3, [r3, #20]
 800583a:	492e      	ldr	r1, [pc, #184]	; (80058f4 <HAL_RCC_ClockConfig+0x358>)
 800583c:	4313      	orrs	r3, r2
 800583e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f003 0310 	and.w	r3, r3, #16
 8005848:	2b00      	cmp	r3, #0
 800584a:	d010      	beq.n	800586e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	699a      	ldr	r2, [r3, #24]
 8005850:	4b28      	ldr	r3, [pc, #160]	; (80058f4 <HAL_RCC_ClockConfig+0x358>)
 8005852:	69db      	ldr	r3, [r3, #28]
 8005854:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005858:	429a      	cmp	r2, r3
 800585a:	d208      	bcs.n	800586e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800585c:	4b25      	ldr	r3, [pc, #148]	; (80058f4 <HAL_RCC_ClockConfig+0x358>)
 800585e:	69db      	ldr	r3, [r3, #28]
 8005860:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	699b      	ldr	r3, [r3, #24]
 8005868:	4922      	ldr	r1, [pc, #136]	; (80058f4 <HAL_RCC_ClockConfig+0x358>)
 800586a:	4313      	orrs	r3, r2
 800586c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f003 0320 	and.w	r3, r3, #32
 8005876:	2b00      	cmp	r3, #0
 8005878:	d010      	beq.n	800589c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	69da      	ldr	r2, [r3, #28]
 800587e:	4b1d      	ldr	r3, [pc, #116]	; (80058f4 <HAL_RCC_ClockConfig+0x358>)
 8005880:	6a1b      	ldr	r3, [r3, #32]
 8005882:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005886:	429a      	cmp	r2, r3
 8005888:	d208      	bcs.n	800589c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800588a:	4b1a      	ldr	r3, [pc, #104]	; (80058f4 <HAL_RCC_ClockConfig+0x358>)
 800588c:	6a1b      	ldr	r3, [r3, #32]
 800588e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	69db      	ldr	r3, [r3, #28]
 8005896:	4917      	ldr	r1, [pc, #92]	; (80058f4 <HAL_RCC_ClockConfig+0x358>)
 8005898:	4313      	orrs	r3, r2
 800589a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800589c:	f000 f834 	bl	8005908 <HAL_RCC_GetSysClockFreq>
 80058a0:	4602      	mov	r2, r0
 80058a2:	4b14      	ldr	r3, [pc, #80]	; (80058f4 <HAL_RCC_ClockConfig+0x358>)
 80058a4:	699b      	ldr	r3, [r3, #24]
 80058a6:	0a1b      	lsrs	r3, r3, #8
 80058a8:	f003 030f 	and.w	r3, r3, #15
 80058ac:	4912      	ldr	r1, [pc, #72]	; (80058f8 <HAL_RCC_ClockConfig+0x35c>)
 80058ae:	5ccb      	ldrb	r3, [r1, r3]
 80058b0:	f003 031f 	and.w	r3, r3, #31
 80058b4:	fa22 f303 	lsr.w	r3, r2, r3
 80058b8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80058ba:	4b0e      	ldr	r3, [pc, #56]	; (80058f4 <HAL_RCC_ClockConfig+0x358>)
 80058bc:	699b      	ldr	r3, [r3, #24]
 80058be:	f003 030f 	and.w	r3, r3, #15
 80058c2:	4a0d      	ldr	r2, [pc, #52]	; (80058f8 <HAL_RCC_ClockConfig+0x35c>)
 80058c4:	5cd3      	ldrb	r3, [r2, r3]
 80058c6:	f003 031f 	and.w	r3, r3, #31
 80058ca:	693a      	ldr	r2, [r7, #16]
 80058cc:	fa22 f303 	lsr.w	r3, r2, r3
 80058d0:	4a0a      	ldr	r2, [pc, #40]	; (80058fc <HAL_RCC_ClockConfig+0x360>)
 80058d2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80058d4:	4a0a      	ldr	r2, [pc, #40]	; (8005900 <HAL_RCC_ClockConfig+0x364>)
 80058d6:	693b      	ldr	r3, [r7, #16]
 80058d8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80058da:	4b0a      	ldr	r3, [pc, #40]	; (8005904 <HAL_RCC_ClockConfig+0x368>)
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	4618      	mov	r0, r3
 80058e0:	f7fb ff4e 	bl	8001780 <HAL_InitTick>
 80058e4:	4603      	mov	r3, r0
 80058e6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80058e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80058ea:	4618      	mov	r0, r3
 80058ec:	3718      	adds	r7, #24
 80058ee:	46bd      	mov	sp, r7
 80058f0:	bd80      	pop	{r7, pc}
 80058f2:	bf00      	nop
 80058f4:	58024400 	.word	0x58024400
 80058f8:	0800cfa8 	.word	0x0800cfa8
 80058fc:	24000404 	.word	0x24000404
 8005900:	24000400 	.word	0x24000400
 8005904:	24000408 	.word	0x24000408

08005908 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005908:	b480      	push	{r7}
 800590a:	b089      	sub	sp, #36	; 0x24
 800590c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800590e:	4bb3      	ldr	r3, [pc, #716]	; (8005bdc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005910:	691b      	ldr	r3, [r3, #16]
 8005912:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005916:	2b18      	cmp	r3, #24
 8005918:	f200 8155 	bhi.w	8005bc6 <HAL_RCC_GetSysClockFreq+0x2be>
 800591c:	a201      	add	r2, pc, #4	; (adr r2, 8005924 <HAL_RCC_GetSysClockFreq+0x1c>)
 800591e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005922:	bf00      	nop
 8005924:	08005989 	.word	0x08005989
 8005928:	08005bc7 	.word	0x08005bc7
 800592c:	08005bc7 	.word	0x08005bc7
 8005930:	08005bc7 	.word	0x08005bc7
 8005934:	08005bc7 	.word	0x08005bc7
 8005938:	08005bc7 	.word	0x08005bc7
 800593c:	08005bc7 	.word	0x08005bc7
 8005940:	08005bc7 	.word	0x08005bc7
 8005944:	080059af 	.word	0x080059af
 8005948:	08005bc7 	.word	0x08005bc7
 800594c:	08005bc7 	.word	0x08005bc7
 8005950:	08005bc7 	.word	0x08005bc7
 8005954:	08005bc7 	.word	0x08005bc7
 8005958:	08005bc7 	.word	0x08005bc7
 800595c:	08005bc7 	.word	0x08005bc7
 8005960:	08005bc7 	.word	0x08005bc7
 8005964:	080059b5 	.word	0x080059b5
 8005968:	08005bc7 	.word	0x08005bc7
 800596c:	08005bc7 	.word	0x08005bc7
 8005970:	08005bc7 	.word	0x08005bc7
 8005974:	08005bc7 	.word	0x08005bc7
 8005978:	08005bc7 	.word	0x08005bc7
 800597c:	08005bc7 	.word	0x08005bc7
 8005980:	08005bc7 	.word	0x08005bc7
 8005984:	080059bb 	.word	0x080059bb
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005988:	4b94      	ldr	r3, [pc, #592]	; (8005bdc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f003 0320 	and.w	r3, r3, #32
 8005990:	2b00      	cmp	r3, #0
 8005992:	d009      	beq.n	80059a8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005994:	4b91      	ldr	r3, [pc, #580]	; (8005bdc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	08db      	lsrs	r3, r3, #3
 800599a:	f003 0303 	and.w	r3, r3, #3
 800599e:	4a90      	ldr	r2, [pc, #576]	; (8005be0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80059a0:	fa22 f303 	lsr.w	r3, r2, r3
 80059a4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80059a6:	e111      	b.n	8005bcc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80059a8:	4b8d      	ldr	r3, [pc, #564]	; (8005be0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80059aa:	61bb      	str	r3, [r7, #24]
    break;
 80059ac:	e10e      	b.n	8005bcc <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80059ae:	4b8d      	ldr	r3, [pc, #564]	; (8005be4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80059b0:	61bb      	str	r3, [r7, #24]
    break;
 80059b2:	e10b      	b.n	8005bcc <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80059b4:	4b8c      	ldr	r3, [pc, #560]	; (8005be8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80059b6:	61bb      	str	r3, [r7, #24]
    break;
 80059b8:	e108      	b.n	8005bcc <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80059ba:	4b88      	ldr	r3, [pc, #544]	; (8005bdc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80059bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059be:	f003 0303 	and.w	r3, r3, #3
 80059c2:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80059c4:	4b85      	ldr	r3, [pc, #532]	; (8005bdc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80059c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059c8:	091b      	lsrs	r3, r3, #4
 80059ca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80059ce:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80059d0:	4b82      	ldr	r3, [pc, #520]	; (8005bdc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80059d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059d4:	f003 0301 	and.w	r3, r3, #1
 80059d8:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80059da:	4b80      	ldr	r3, [pc, #512]	; (8005bdc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80059dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059de:	08db      	lsrs	r3, r3, #3
 80059e0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80059e4:	68fa      	ldr	r2, [r7, #12]
 80059e6:	fb02 f303 	mul.w	r3, r2, r3
 80059ea:	ee07 3a90 	vmov	s15, r3
 80059ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059f2:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80059f6:	693b      	ldr	r3, [r7, #16]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	f000 80e1 	beq.w	8005bc0 <HAL_RCC_GetSysClockFreq+0x2b8>
 80059fe:	697b      	ldr	r3, [r7, #20]
 8005a00:	2b02      	cmp	r3, #2
 8005a02:	f000 8083 	beq.w	8005b0c <HAL_RCC_GetSysClockFreq+0x204>
 8005a06:	697b      	ldr	r3, [r7, #20]
 8005a08:	2b02      	cmp	r3, #2
 8005a0a:	f200 80a1 	bhi.w	8005b50 <HAL_RCC_GetSysClockFreq+0x248>
 8005a0e:	697b      	ldr	r3, [r7, #20]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d003      	beq.n	8005a1c <HAL_RCC_GetSysClockFreq+0x114>
 8005a14:	697b      	ldr	r3, [r7, #20]
 8005a16:	2b01      	cmp	r3, #1
 8005a18:	d056      	beq.n	8005ac8 <HAL_RCC_GetSysClockFreq+0x1c0>
 8005a1a:	e099      	b.n	8005b50 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005a1c:	4b6f      	ldr	r3, [pc, #444]	; (8005bdc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f003 0320 	and.w	r3, r3, #32
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d02d      	beq.n	8005a84 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005a28:	4b6c      	ldr	r3, [pc, #432]	; (8005bdc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	08db      	lsrs	r3, r3, #3
 8005a2e:	f003 0303 	and.w	r3, r3, #3
 8005a32:	4a6b      	ldr	r2, [pc, #428]	; (8005be0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005a34:	fa22 f303 	lsr.w	r3, r2, r3
 8005a38:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	ee07 3a90 	vmov	s15, r3
 8005a40:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a44:	693b      	ldr	r3, [r7, #16]
 8005a46:	ee07 3a90 	vmov	s15, r3
 8005a4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a52:	4b62      	ldr	r3, [pc, #392]	; (8005bdc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a5a:	ee07 3a90 	vmov	s15, r3
 8005a5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a62:	ed97 6a02 	vldr	s12, [r7, #8]
 8005a66:	eddf 5a61 	vldr	s11, [pc, #388]	; 8005bec <HAL_RCC_GetSysClockFreq+0x2e4>
 8005a6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a72:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005a76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a7e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8005a82:	e087      	b.n	8005b94 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005a84:	693b      	ldr	r3, [r7, #16]
 8005a86:	ee07 3a90 	vmov	s15, r3
 8005a8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a8e:	eddf 6a58 	vldr	s13, [pc, #352]	; 8005bf0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8005a92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a96:	4b51      	ldr	r3, [pc, #324]	; (8005bdc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a9e:	ee07 3a90 	vmov	s15, r3
 8005aa2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005aa6:	ed97 6a02 	vldr	s12, [r7, #8]
 8005aaa:	eddf 5a50 	vldr	s11, [pc, #320]	; 8005bec <HAL_RCC_GetSysClockFreq+0x2e4>
 8005aae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ab2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ab6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005aba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005abe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ac2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005ac6:	e065      	b.n	8005b94 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005ac8:	693b      	ldr	r3, [r7, #16]
 8005aca:	ee07 3a90 	vmov	s15, r3
 8005ace:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ad2:	eddf 6a48 	vldr	s13, [pc, #288]	; 8005bf4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005ad6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ada:	4b40      	ldr	r3, [pc, #256]	; (8005bdc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ade:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ae2:	ee07 3a90 	vmov	s15, r3
 8005ae6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005aea:	ed97 6a02 	vldr	s12, [r7, #8]
 8005aee:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8005bec <HAL_RCC_GetSysClockFreq+0x2e4>
 8005af2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005af6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005afa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005afe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b06:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005b0a:	e043      	b.n	8005b94 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005b0c:	693b      	ldr	r3, [r7, #16]
 8005b0e:	ee07 3a90 	vmov	s15, r3
 8005b12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b16:	eddf 6a38 	vldr	s13, [pc, #224]	; 8005bf8 <HAL_RCC_GetSysClockFreq+0x2f0>
 8005b1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b1e:	4b2f      	ldr	r3, [pc, #188]	; (8005bdc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b26:	ee07 3a90 	vmov	s15, r3
 8005b2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b2e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005b32:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8005bec <HAL_RCC_GetSysClockFreq+0x2e4>
 8005b36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b3e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005b42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b4a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005b4e:	e021      	b.n	8005b94 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005b50:	693b      	ldr	r3, [r7, #16]
 8005b52:	ee07 3a90 	vmov	s15, r3
 8005b56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b5a:	eddf 6a26 	vldr	s13, [pc, #152]	; 8005bf4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005b5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b62:	4b1e      	ldr	r3, [pc, #120]	; (8005bdc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b6a:	ee07 3a90 	vmov	s15, r3
 8005b6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b72:	ed97 6a02 	vldr	s12, [r7, #8]
 8005b76:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8005bec <HAL_RCC_GetSysClockFreq+0x2e4>
 8005b7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b82:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005b86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b8e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005b92:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8005b94:	4b11      	ldr	r3, [pc, #68]	; (8005bdc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005b96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b98:	0a5b      	lsrs	r3, r3, #9
 8005b9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b9e:	3301      	adds	r3, #1
 8005ba0:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	ee07 3a90 	vmov	s15, r3
 8005ba8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005bac:	edd7 6a07 	vldr	s13, [r7, #28]
 8005bb0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005bb4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005bb8:	ee17 3a90 	vmov	r3, s15
 8005bbc:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8005bbe:	e005      	b.n	8005bcc <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	61bb      	str	r3, [r7, #24]
    break;
 8005bc4:	e002      	b.n	8005bcc <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8005bc6:	4b07      	ldr	r3, [pc, #28]	; (8005be4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005bc8:	61bb      	str	r3, [r7, #24]
    break;
 8005bca:	bf00      	nop
  }

  return sysclockfreq;
 8005bcc:	69bb      	ldr	r3, [r7, #24]
}
 8005bce:	4618      	mov	r0, r3
 8005bd0:	3724      	adds	r7, #36	; 0x24
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd8:	4770      	bx	lr
 8005bda:	bf00      	nop
 8005bdc:	58024400 	.word	0x58024400
 8005be0:	03d09000 	.word	0x03d09000
 8005be4:	003d0900 	.word	0x003d0900
 8005be8:	007a1200 	.word	0x007a1200
 8005bec:	46000000 	.word	0x46000000
 8005bf0:	4c742400 	.word	0x4c742400
 8005bf4:	4a742400 	.word	0x4a742400
 8005bf8:	4af42400 	.word	0x4af42400

08005bfc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b082      	sub	sp, #8
 8005c00:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005c02:	f7ff fe81 	bl	8005908 <HAL_RCC_GetSysClockFreq>
 8005c06:	4602      	mov	r2, r0
 8005c08:	4b10      	ldr	r3, [pc, #64]	; (8005c4c <HAL_RCC_GetHCLKFreq+0x50>)
 8005c0a:	699b      	ldr	r3, [r3, #24]
 8005c0c:	0a1b      	lsrs	r3, r3, #8
 8005c0e:	f003 030f 	and.w	r3, r3, #15
 8005c12:	490f      	ldr	r1, [pc, #60]	; (8005c50 <HAL_RCC_GetHCLKFreq+0x54>)
 8005c14:	5ccb      	ldrb	r3, [r1, r3]
 8005c16:	f003 031f 	and.w	r3, r3, #31
 8005c1a:	fa22 f303 	lsr.w	r3, r2, r3
 8005c1e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005c20:	4b0a      	ldr	r3, [pc, #40]	; (8005c4c <HAL_RCC_GetHCLKFreq+0x50>)
 8005c22:	699b      	ldr	r3, [r3, #24]
 8005c24:	f003 030f 	and.w	r3, r3, #15
 8005c28:	4a09      	ldr	r2, [pc, #36]	; (8005c50 <HAL_RCC_GetHCLKFreq+0x54>)
 8005c2a:	5cd3      	ldrb	r3, [r2, r3]
 8005c2c:	f003 031f 	and.w	r3, r3, #31
 8005c30:	687a      	ldr	r2, [r7, #4]
 8005c32:	fa22 f303 	lsr.w	r3, r2, r3
 8005c36:	4a07      	ldr	r2, [pc, #28]	; (8005c54 <HAL_RCC_GetHCLKFreq+0x58>)
 8005c38:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005c3a:	4a07      	ldr	r2, [pc, #28]	; (8005c58 <HAL_RCC_GetHCLKFreq+0x5c>)
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005c40:	4b04      	ldr	r3, [pc, #16]	; (8005c54 <HAL_RCC_GetHCLKFreq+0x58>)
 8005c42:	681b      	ldr	r3, [r3, #0]
}
 8005c44:	4618      	mov	r0, r3
 8005c46:	3708      	adds	r7, #8
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	bd80      	pop	{r7, pc}
 8005c4c:	58024400 	.word	0x58024400
 8005c50:	0800cfa8 	.word	0x0800cfa8
 8005c54:	24000404 	.word	0x24000404
 8005c58:	24000400 	.word	0x24000400

08005c5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005c60:	f7ff ffcc 	bl	8005bfc <HAL_RCC_GetHCLKFreq>
 8005c64:	4602      	mov	r2, r0
 8005c66:	4b06      	ldr	r3, [pc, #24]	; (8005c80 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005c68:	69db      	ldr	r3, [r3, #28]
 8005c6a:	091b      	lsrs	r3, r3, #4
 8005c6c:	f003 0307 	and.w	r3, r3, #7
 8005c70:	4904      	ldr	r1, [pc, #16]	; (8005c84 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005c72:	5ccb      	ldrb	r3, [r1, r3]
 8005c74:	f003 031f 	and.w	r3, r3, #31
 8005c78:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	bd80      	pop	{r7, pc}
 8005c80:	58024400 	.word	0x58024400
 8005c84:	0800cfa8 	.word	0x0800cfa8

08005c88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005c8c:	f7ff ffb6 	bl	8005bfc <HAL_RCC_GetHCLKFreq>
 8005c90:	4602      	mov	r2, r0
 8005c92:	4b06      	ldr	r3, [pc, #24]	; (8005cac <HAL_RCC_GetPCLK2Freq+0x24>)
 8005c94:	69db      	ldr	r3, [r3, #28]
 8005c96:	0a1b      	lsrs	r3, r3, #8
 8005c98:	f003 0307 	and.w	r3, r3, #7
 8005c9c:	4904      	ldr	r1, [pc, #16]	; (8005cb0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005c9e:	5ccb      	ldrb	r3, [r1, r3]
 8005ca0:	f003 031f 	and.w	r3, r3, #31
 8005ca4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8005ca8:	4618      	mov	r0, r3
 8005caa:	bd80      	pop	{r7, pc}
 8005cac:	58024400 	.word	0x58024400
 8005cb0:	0800cfa8 	.word	0x0800cfa8

08005cb4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005cb4:	b580      	push	{r7, lr}
 8005cb6:	b086      	sub	sp, #24
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d03f      	beq.n	8005d50 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005cd4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005cd8:	d02a      	beq.n	8005d30 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8005cda:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005cde:	d824      	bhi.n	8005d2a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005ce0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005ce4:	d018      	beq.n	8005d18 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005ce6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005cea:	d81e      	bhi.n	8005d2a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d003      	beq.n	8005cf8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005cf0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005cf4:	d007      	beq.n	8005d06 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005cf6:	e018      	b.n	8005d2a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005cf8:	4bab      	ldr	r3, [pc, #684]	; (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cfc:	4aaa      	ldr	r2, [pc, #680]	; (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005cfe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005d02:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005d04:	e015      	b.n	8005d32 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	3304      	adds	r3, #4
 8005d0a:	2102      	movs	r1, #2
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	f001 fff3 	bl	8007cf8 <RCCEx_PLL2_Config>
 8005d12:	4603      	mov	r3, r0
 8005d14:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005d16:	e00c      	b.n	8005d32 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	3324      	adds	r3, #36	; 0x24
 8005d1c:	2102      	movs	r1, #2
 8005d1e:	4618      	mov	r0, r3
 8005d20:	f002 f89c 	bl	8007e5c <RCCEx_PLL3_Config>
 8005d24:	4603      	mov	r3, r0
 8005d26:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005d28:	e003      	b.n	8005d32 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005d2a:	2301      	movs	r3, #1
 8005d2c:	75fb      	strb	r3, [r7, #23]
      break;
 8005d2e:	e000      	b.n	8005d32 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005d30:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005d32:	7dfb      	ldrb	r3, [r7, #23]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d109      	bne.n	8005d4c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005d38:	4b9b      	ldr	r3, [pc, #620]	; (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005d3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d3c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005d44:	4998      	ldr	r1, [pc, #608]	; (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005d46:	4313      	orrs	r3, r2
 8005d48:	650b      	str	r3, [r1, #80]	; 0x50
 8005d4a:	e001      	b.n	8005d50 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d4c:	7dfb      	ldrb	r3, [r7, #23]
 8005d4e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d03d      	beq.n	8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d60:	2b04      	cmp	r3, #4
 8005d62:	d826      	bhi.n	8005db2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8005d64:	a201      	add	r2, pc, #4	; (adr r2, 8005d6c <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8005d66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d6a:	bf00      	nop
 8005d6c:	08005d81 	.word	0x08005d81
 8005d70:	08005d8f 	.word	0x08005d8f
 8005d74:	08005da1 	.word	0x08005da1
 8005d78:	08005db9 	.word	0x08005db9
 8005d7c:	08005db9 	.word	0x08005db9
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d80:	4b89      	ldr	r3, [pc, #548]	; (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005d82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d84:	4a88      	ldr	r2, [pc, #544]	; (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005d86:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005d8a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005d8c:	e015      	b.n	8005dba <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	3304      	adds	r3, #4
 8005d92:	2100      	movs	r1, #0
 8005d94:	4618      	mov	r0, r3
 8005d96:	f001 ffaf 	bl	8007cf8 <RCCEx_PLL2_Config>
 8005d9a:	4603      	mov	r3, r0
 8005d9c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005d9e:	e00c      	b.n	8005dba <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	3324      	adds	r3, #36	; 0x24
 8005da4:	2100      	movs	r1, #0
 8005da6:	4618      	mov	r0, r3
 8005da8:	f002 f858 	bl	8007e5c <RCCEx_PLL3_Config>
 8005dac:	4603      	mov	r3, r0
 8005dae:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005db0:	e003      	b.n	8005dba <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005db2:	2301      	movs	r3, #1
 8005db4:	75fb      	strb	r3, [r7, #23]
      break;
 8005db6:	e000      	b.n	8005dba <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8005db8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005dba:	7dfb      	ldrb	r3, [r7, #23]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d109      	bne.n	8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005dc0:	4b79      	ldr	r3, [pc, #484]	; (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005dc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005dc4:	f023 0207 	bic.w	r2, r3, #7
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005dcc:	4976      	ldr	r1, [pc, #472]	; (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005dce:	4313      	orrs	r3, r2
 8005dd0:	650b      	str	r3, [r1, #80]	; 0x50
 8005dd2:	e001      	b.n	8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005dd4:	7dfb      	ldrb	r3, [r7, #23]
 8005dd6:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d042      	beq.n	8005e6a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005de8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005dec:	d02b      	beq.n	8005e46 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8005dee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005df2:	d825      	bhi.n	8005e40 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8005df4:	2bc0      	cmp	r3, #192	; 0xc0
 8005df6:	d028      	beq.n	8005e4a <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005df8:	2bc0      	cmp	r3, #192	; 0xc0
 8005dfa:	d821      	bhi.n	8005e40 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8005dfc:	2b80      	cmp	r3, #128	; 0x80
 8005dfe:	d016      	beq.n	8005e2e <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8005e00:	2b80      	cmp	r3, #128	; 0x80
 8005e02:	d81d      	bhi.n	8005e40 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d002      	beq.n	8005e0e <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8005e08:	2b40      	cmp	r3, #64	; 0x40
 8005e0a:	d007      	beq.n	8005e1c <HAL_RCCEx_PeriphCLKConfig+0x168>
 8005e0c:	e018      	b.n	8005e40 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e0e:	4b66      	ldr	r3, [pc, #408]	; (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005e10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e12:	4a65      	ldr	r2, [pc, #404]	; (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005e14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005e18:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8005e1a:	e017      	b.n	8005e4c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	3304      	adds	r3, #4
 8005e20:	2100      	movs	r1, #0
 8005e22:	4618      	mov	r0, r3
 8005e24:	f001 ff68 	bl	8007cf8 <RCCEx_PLL2_Config>
 8005e28:	4603      	mov	r3, r0
 8005e2a:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8005e2c:	e00e      	b.n	8005e4c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	3324      	adds	r3, #36	; 0x24
 8005e32:	2100      	movs	r1, #0
 8005e34:	4618      	mov	r0, r3
 8005e36:	f002 f811 	bl	8007e5c <RCCEx_PLL3_Config>
 8005e3a:	4603      	mov	r3, r0
 8005e3c:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8005e3e:	e005      	b.n	8005e4c <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005e40:	2301      	movs	r3, #1
 8005e42:	75fb      	strb	r3, [r7, #23]
      break;
 8005e44:	e002      	b.n	8005e4c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8005e46:	bf00      	nop
 8005e48:	e000      	b.n	8005e4c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8005e4a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005e4c:	7dfb      	ldrb	r3, [r7, #23]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d109      	bne.n	8005e66 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8005e52:	4b55      	ldr	r3, [pc, #340]	; (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005e54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e56:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e5e:	4952      	ldr	r1, [pc, #328]	; (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005e60:	4313      	orrs	r3, r2
 8005e62:	650b      	str	r3, [r1, #80]	; 0x50
 8005e64:	e001      	b.n	8005e6a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e66:	7dfb      	ldrb	r3, [r7, #23]
 8005e68:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d049      	beq.n	8005f0a <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005e7c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005e80:	d030      	beq.n	8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8005e82:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005e86:	d82a      	bhi.n	8005ede <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005e88:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005e8c:	d02c      	beq.n	8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8005e8e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005e92:	d824      	bhi.n	8005ede <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005e94:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005e98:	d018      	beq.n	8005ecc <HAL_RCCEx_PeriphCLKConfig+0x218>
 8005e9a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005e9e:	d81e      	bhi.n	8005ede <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d003      	beq.n	8005eac <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8005ea4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005ea8:	d007      	beq.n	8005eba <HAL_RCCEx_PeriphCLKConfig+0x206>
 8005eaa:	e018      	b.n	8005ede <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005eac:	4b3e      	ldr	r3, [pc, #248]	; (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005eae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eb0:	4a3d      	ldr	r2, [pc, #244]	; (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005eb2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005eb6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005eb8:	e017      	b.n	8005eea <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	3304      	adds	r3, #4
 8005ebe:	2100      	movs	r1, #0
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	f001 ff19 	bl	8007cf8 <RCCEx_PLL2_Config>
 8005ec6:	4603      	mov	r3, r0
 8005ec8:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8005eca:	e00e      	b.n	8005eea <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	3324      	adds	r3, #36	; 0x24
 8005ed0:	2100      	movs	r1, #0
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	f001 ffc2 	bl	8007e5c <RCCEx_PLL3_Config>
 8005ed8:	4603      	mov	r3, r0
 8005eda:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005edc:	e005      	b.n	8005eea <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8005ede:	2301      	movs	r3, #1
 8005ee0:	75fb      	strb	r3, [r7, #23]
      break;
 8005ee2:	e002      	b.n	8005eea <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8005ee4:	bf00      	nop
 8005ee6:	e000      	b.n	8005eea <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8005ee8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005eea:	7dfb      	ldrb	r3, [r7, #23]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d10a      	bne.n	8005f06 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005ef0:	4b2d      	ldr	r3, [pc, #180]	; (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005ef2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ef4:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005efe:	492a      	ldr	r1, [pc, #168]	; (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005f00:	4313      	orrs	r3, r2
 8005f02:	658b      	str	r3, [r1, #88]	; 0x58
 8005f04:	e001      	b.n	8005f0a <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f06:	7dfb      	ldrb	r3, [r7, #23]
 8005f08:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d04c      	beq.n	8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005f1c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005f20:	d030      	beq.n	8005f84 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8005f22:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005f26:	d82a      	bhi.n	8005f7e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8005f28:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005f2c:	d02c      	beq.n	8005f88 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8005f2e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005f32:	d824      	bhi.n	8005f7e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8005f34:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005f38:	d018      	beq.n	8005f6c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8005f3a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005f3e:	d81e      	bhi.n	8005f7e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d003      	beq.n	8005f4c <HAL_RCCEx_PeriphCLKConfig+0x298>
 8005f44:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005f48:	d007      	beq.n	8005f5a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8005f4a:	e018      	b.n	8005f7e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005f4c:	4b16      	ldr	r3, [pc, #88]	; (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f50:	4a15      	ldr	r2, [pc, #84]	; (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005f52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005f56:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005f58:	e017      	b.n	8005f8a <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	3304      	adds	r3, #4
 8005f5e:	2100      	movs	r1, #0
 8005f60:	4618      	mov	r0, r3
 8005f62:	f001 fec9 	bl	8007cf8 <RCCEx_PLL2_Config>
 8005f66:	4603      	mov	r3, r0
 8005f68:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8005f6a:	e00e      	b.n	8005f8a <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	3324      	adds	r3, #36	; 0x24
 8005f70:	2100      	movs	r1, #0
 8005f72:	4618      	mov	r0, r3
 8005f74:	f001 ff72 	bl	8007e5c <RCCEx_PLL3_Config>
 8005f78:	4603      	mov	r3, r0
 8005f7a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005f7c:	e005      	b.n	8005f8a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8005f7e:	2301      	movs	r3, #1
 8005f80:	75fb      	strb	r3, [r7, #23]
      break;
 8005f82:	e002      	b.n	8005f8a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8005f84:	bf00      	nop
 8005f86:	e000      	b.n	8005f8a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8005f88:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005f8a:	7dfb      	ldrb	r3, [r7, #23]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d10d      	bne.n	8005fac <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005f90:	4b05      	ldr	r3, [pc, #20]	; (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005f92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f94:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005f9e:	4902      	ldr	r1, [pc, #8]	; (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005fa0:	4313      	orrs	r3, r2
 8005fa2:	658b      	str	r3, [r1, #88]	; 0x58
 8005fa4:	e004      	b.n	8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8005fa6:	bf00      	nop
 8005fa8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fac:	7dfb      	ldrb	r3, [r7, #23]
 8005fae:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d032      	beq.n	8006022 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005fc0:	2b30      	cmp	r3, #48	; 0x30
 8005fc2:	d01c      	beq.n	8005ffe <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8005fc4:	2b30      	cmp	r3, #48	; 0x30
 8005fc6:	d817      	bhi.n	8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8005fc8:	2b20      	cmp	r3, #32
 8005fca:	d00c      	beq.n	8005fe6 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8005fcc:	2b20      	cmp	r3, #32
 8005fce:	d813      	bhi.n	8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d016      	beq.n	8006002 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8005fd4:	2b10      	cmp	r3, #16
 8005fd6:	d10f      	bne.n	8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005fd8:	4baf      	ldr	r3, [pc, #700]	; (8006298 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fdc:	4aae      	ldr	r2, [pc, #696]	; (8006298 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005fde:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005fe2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8005fe4:	e00e      	b.n	8006004 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	3304      	adds	r3, #4
 8005fea:	2102      	movs	r1, #2
 8005fec:	4618      	mov	r0, r3
 8005fee:	f001 fe83 	bl	8007cf8 <RCCEx_PLL2_Config>
 8005ff2:	4603      	mov	r3, r0
 8005ff4:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8005ff6:	e005      	b.n	8006004 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005ff8:	2301      	movs	r3, #1
 8005ffa:	75fb      	strb	r3, [r7, #23]
      break;
 8005ffc:	e002      	b.n	8006004 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8005ffe:	bf00      	nop
 8006000:	e000      	b.n	8006004 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8006002:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006004:	7dfb      	ldrb	r3, [r7, #23]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d109      	bne.n	800601e <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800600a:	4ba3      	ldr	r3, [pc, #652]	; (8006298 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800600c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800600e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006016:	49a0      	ldr	r1, [pc, #640]	; (8006298 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006018:	4313      	orrs	r3, r2
 800601a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800601c:	e001      	b.n	8006022 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800601e:	7dfb      	ldrb	r3, [r7, #23]
 8006020:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800602a:	2b00      	cmp	r3, #0
 800602c:	d047      	beq.n	80060be <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006032:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006036:	d030      	beq.n	800609a <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8006038:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800603c:	d82a      	bhi.n	8006094 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800603e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006042:	d02c      	beq.n	800609e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8006044:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006048:	d824      	bhi.n	8006094 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800604a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800604e:	d018      	beq.n	8006082 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8006050:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006054:	d81e      	bhi.n	8006094 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8006056:	2b00      	cmp	r3, #0
 8006058:	d003      	beq.n	8006062 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 800605a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800605e:	d007      	beq.n	8006070 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8006060:	e018      	b.n	8006094 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006062:	4b8d      	ldr	r3, [pc, #564]	; (8006298 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006064:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006066:	4a8c      	ldr	r2, [pc, #560]	; (8006298 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006068:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800606c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800606e:	e017      	b.n	80060a0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	3304      	adds	r3, #4
 8006074:	2100      	movs	r1, #0
 8006076:	4618      	mov	r0, r3
 8006078:	f001 fe3e 	bl	8007cf8 <RCCEx_PLL2_Config>
 800607c:	4603      	mov	r3, r0
 800607e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006080:	e00e      	b.n	80060a0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	3324      	adds	r3, #36	; 0x24
 8006086:	2100      	movs	r1, #0
 8006088:	4618      	mov	r0, r3
 800608a:	f001 fee7 	bl	8007e5c <RCCEx_PLL3_Config>
 800608e:	4603      	mov	r3, r0
 8006090:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006092:	e005      	b.n	80060a0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006094:	2301      	movs	r3, #1
 8006096:	75fb      	strb	r3, [r7, #23]
      break;
 8006098:	e002      	b.n	80060a0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 800609a:	bf00      	nop
 800609c:	e000      	b.n	80060a0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 800609e:	bf00      	nop
    }

    if(ret == HAL_OK)
 80060a0:	7dfb      	ldrb	r3, [r7, #23]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d109      	bne.n	80060ba <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80060a6:	4b7c      	ldr	r3, [pc, #496]	; (8006298 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80060a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060aa:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060b2:	4979      	ldr	r1, [pc, #484]	; (8006298 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80060b4:	4313      	orrs	r3, r2
 80060b6:	650b      	str	r3, [r1, #80]	; 0x50
 80060b8:	e001      	b.n	80060be <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060ba:	7dfb      	ldrb	r3, [r7, #23]
 80060bc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d049      	beq.n	800615e <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060ce:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80060d2:	d02e      	beq.n	8006132 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 80060d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80060d8:	d828      	bhi.n	800612c <HAL_RCCEx_PeriphCLKConfig+0x478>
 80060da:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80060de:	d02a      	beq.n	8006136 <HAL_RCCEx_PeriphCLKConfig+0x482>
 80060e0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80060e4:	d822      	bhi.n	800612c <HAL_RCCEx_PeriphCLKConfig+0x478>
 80060e6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80060ea:	d026      	beq.n	800613a <HAL_RCCEx_PeriphCLKConfig+0x486>
 80060ec:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80060f0:	d81c      	bhi.n	800612c <HAL_RCCEx_PeriphCLKConfig+0x478>
 80060f2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80060f6:	d010      	beq.n	800611a <HAL_RCCEx_PeriphCLKConfig+0x466>
 80060f8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80060fc:	d816      	bhi.n	800612c <HAL_RCCEx_PeriphCLKConfig+0x478>
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d01d      	beq.n	800613e <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8006102:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006106:	d111      	bne.n	800612c <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	3304      	adds	r3, #4
 800610c:	2101      	movs	r1, #1
 800610e:	4618      	mov	r0, r3
 8006110:	f001 fdf2 	bl	8007cf8 <RCCEx_PLL2_Config>
 8006114:	4603      	mov	r3, r0
 8006116:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8006118:	e012      	b.n	8006140 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	3324      	adds	r3, #36	; 0x24
 800611e:	2101      	movs	r1, #1
 8006120:	4618      	mov	r0, r3
 8006122:	f001 fe9b 	bl	8007e5c <RCCEx_PLL3_Config>
 8006126:	4603      	mov	r3, r0
 8006128:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800612a:	e009      	b.n	8006140 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800612c:	2301      	movs	r3, #1
 800612e:	75fb      	strb	r3, [r7, #23]
      break;
 8006130:	e006      	b.n	8006140 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8006132:	bf00      	nop
 8006134:	e004      	b.n	8006140 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8006136:	bf00      	nop
 8006138:	e002      	b.n	8006140 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800613a:	bf00      	nop
 800613c:	e000      	b.n	8006140 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800613e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006140:	7dfb      	ldrb	r3, [r7, #23]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d109      	bne.n	800615a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006146:	4b54      	ldr	r3, [pc, #336]	; (8006298 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006148:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800614a:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006152:	4951      	ldr	r1, [pc, #324]	; (8006298 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006154:	4313      	orrs	r3, r2
 8006156:	650b      	str	r3, [r1, #80]	; 0x50
 8006158:	e001      	b.n	800615e <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800615a:	7dfb      	ldrb	r3, [r7, #23]
 800615c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006166:	2b00      	cmp	r3, #0
 8006168:	d04b      	beq.n	8006202 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006170:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006174:	d02e      	beq.n	80061d4 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8006176:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800617a:	d828      	bhi.n	80061ce <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800617c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006180:	d02a      	beq.n	80061d8 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8006182:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006186:	d822      	bhi.n	80061ce <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8006188:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800618c:	d026      	beq.n	80061dc <HAL_RCCEx_PeriphCLKConfig+0x528>
 800618e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006192:	d81c      	bhi.n	80061ce <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8006194:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006198:	d010      	beq.n	80061bc <HAL_RCCEx_PeriphCLKConfig+0x508>
 800619a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800619e:	d816      	bhi.n	80061ce <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d01d      	beq.n	80061e0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 80061a4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80061a8:	d111      	bne.n	80061ce <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	3304      	adds	r3, #4
 80061ae:	2101      	movs	r1, #1
 80061b0:	4618      	mov	r0, r3
 80061b2:	f001 fda1 	bl	8007cf8 <RCCEx_PLL2_Config>
 80061b6:	4603      	mov	r3, r0
 80061b8:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80061ba:	e012      	b.n	80061e2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	3324      	adds	r3, #36	; 0x24
 80061c0:	2101      	movs	r1, #1
 80061c2:	4618      	mov	r0, r3
 80061c4:	f001 fe4a 	bl	8007e5c <RCCEx_PLL3_Config>
 80061c8:	4603      	mov	r3, r0
 80061ca:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80061cc:	e009      	b.n	80061e2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80061ce:	2301      	movs	r3, #1
 80061d0:	75fb      	strb	r3, [r7, #23]
      break;
 80061d2:	e006      	b.n	80061e2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80061d4:	bf00      	nop
 80061d6:	e004      	b.n	80061e2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80061d8:	bf00      	nop
 80061da:	e002      	b.n	80061e2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80061dc:	bf00      	nop
 80061de:	e000      	b.n	80061e2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80061e0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80061e2:	7dfb      	ldrb	r3, [r7, #23]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d10a      	bne.n	80061fe <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80061e8:	4b2b      	ldr	r3, [pc, #172]	; (8006298 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80061ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061ec:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80061f6:	4928      	ldr	r1, [pc, #160]	; (8006298 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80061f8:	4313      	orrs	r3, r2
 80061fa:	658b      	str	r3, [r1, #88]	; 0x58
 80061fc:	e001      	b.n	8006202 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061fe:	7dfb      	ldrb	r3, [r7, #23]
 8006200:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800620a:	2b00      	cmp	r3, #0
 800620c:	d02f      	beq.n	800626e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006212:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006216:	d00e      	beq.n	8006236 <HAL_RCCEx_PeriphCLKConfig+0x582>
 8006218:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800621c:	d814      	bhi.n	8006248 <HAL_RCCEx_PeriphCLKConfig+0x594>
 800621e:	2b00      	cmp	r3, #0
 8006220:	d015      	beq.n	800624e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8006222:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006226:	d10f      	bne.n	8006248 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006228:	4b1b      	ldr	r3, [pc, #108]	; (8006298 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800622a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800622c:	4a1a      	ldr	r2, [pc, #104]	; (8006298 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800622e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006232:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8006234:	e00c      	b.n	8006250 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	3304      	adds	r3, #4
 800623a:	2101      	movs	r1, #1
 800623c:	4618      	mov	r0, r3
 800623e:	f001 fd5b 	bl	8007cf8 <RCCEx_PLL2_Config>
 8006242:	4603      	mov	r3, r0
 8006244:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8006246:	e003      	b.n	8006250 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006248:	2301      	movs	r3, #1
 800624a:	75fb      	strb	r3, [r7, #23]
      break;
 800624c:	e000      	b.n	8006250 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 800624e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006250:	7dfb      	ldrb	r3, [r7, #23]
 8006252:	2b00      	cmp	r3, #0
 8006254:	d109      	bne.n	800626a <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006256:	4b10      	ldr	r3, [pc, #64]	; (8006298 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006258:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800625a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006262:	490d      	ldr	r1, [pc, #52]	; (8006298 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006264:	4313      	orrs	r3, r2
 8006266:	650b      	str	r3, [r1, #80]	; 0x50
 8006268:	e001      	b.n	800626e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800626a:	7dfb      	ldrb	r3, [r7, #23]
 800626c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006276:	2b00      	cmp	r3, #0
 8006278:	d033      	beq.n	80062e2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800627e:	2b03      	cmp	r3, #3
 8006280:	d81c      	bhi.n	80062bc <HAL_RCCEx_PeriphCLKConfig+0x608>
 8006282:	a201      	add	r2, pc, #4	; (adr r2, 8006288 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8006284:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006288:	080062c3 	.word	0x080062c3
 800628c:	0800629d 	.word	0x0800629d
 8006290:	080062ab 	.word	0x080062ab
 8006294:	080062c3 	.word	0x080062c3
 8006298:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800629c:	4bb8      	ldr	r3, [pc, #736]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800629e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062a0:	4ab7      	ldr	r2, [pc, #732]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80062a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80062a6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80062a8:	e00c      	b.n	80062c4 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	3304      	adds	r3, #4
 80062ae:	2102      	movs	r1, #2
 80062b0:	4618      	mov	r0, r3
 80062b2:	f001 fd21 	bl	8007cf8 <RCCEx_PLL2_Config>
 80062b6:	4603      	mov	r3, r0
 80062b8:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80062ba:	e003      	b.n	80062c4 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80062bc:	2301      	movs	r3, #1
 80062be:	75fb      	strb	r3, [r7, #23]
      break;
 80062c0:	e000      	b.n	80062c4 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 80062c2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80062c4:	7dfb      	ldrb	r3, [r7, #23]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d109      	bne.n	80062de <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80062ca:	4bad      	ldr	r3, [pc, #692]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80062cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80062ce:	f023 0203 	bic.w	r2, r3, #3
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062d6:	49aa      	ldr	r1, [pc, #680]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80062d8:	4313      	orrs	r3, r2
 80062da:	64cb      	str	r3, [r1, #76]	; 0x4c
 80062dc:	e001      	b.n	80062e2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062de:	7dfb      	ldrb	r3, [r7, #23]
 80062e0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	f000 8086 	beq.w	80063fc <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80062f0:	4ba4      	ldr	r3, [pc, #656]	; (8006584 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	4aa3      	ldr	r2, [pc, #652]	; (8006584 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80062f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80062fa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80062fc:	f7fb fa8a 	bl	8001814 <HAL_GetTick>
 8006300:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006302:	e009      	b.n	8006318 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006304:	f7fb fa86 	bl	8001814 <HAL_GetTick>
 8006308:	4602      	mov	r2, r0
 800630a:	693b      	ldr	r3, [r7, #16]
 800630c:	1ad3      	subs	r3, r2, r3
 800630e:	2b64      	cmp	r3, #100	; 0x64
 8006310:	d902      	bls.n	8006318 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8006312:	2303      	movs	r3, #3
 8006314:	75fb      	strb	r3, [r7, #23]
        break;
 8006316:	e005      	b.n	8006324 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006318:	4b9a      	ldr	r3, [pc, #616]	; (8006584 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006320:	2b00      	cmp	r3, #0
 8006322:	d0ef      	beq.n	8006304 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8006324:	7dfb      	ldrb	r3, [r7, #23]
 8006326:	2b00      	cmp	r3, #0
 8006328:	d166      	bne.n	80063f8 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800632a:	4b95      	ldr	r3, [pc, #596]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800632c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006334:	4053      	eors	r3, r2
 8006336:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800633a:	2b00      	cmp	r3, #0
 800633c:	d013      	beq.n	8006366 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800633e:	4b90      	ldr	r3, [pc, #576]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006340:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006342:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006346:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006348:	4b8d      	ldr	r3, [pc, #564]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800634a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800634c:	4a8c      	ldr	r2, [pc, #560]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800634e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006352:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006354:	4b8a      	ldr	r3, [pc, #552]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006356:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006358:	4a89      	ldr	r2, [pc, #548]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800635a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800635e:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006360:	4a87      	ldr	r2, [pc, #540]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800636c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006370:	d115      	bne.n	800639e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006372:	f7fb fa4f 	bl	8001814 <HAL_GetTick>
 8006376:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006378:	e00b      	b.n	8006392 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800637a:	f7fb fa4b 	bl	8001814 <HAL_GetTick>
 800637e:	4602      	mov	r2, r0
 8006380:	693b      	ldr	r3, [r7, #16]
 8006382:	1ad3      	subs	r3, r2, r3
 8006384:	f241 3288 	movw	r2, #5000	; 0x1388
 8006388:	4293      	cmp	r3, r2
 800638a:	d902      	bls.n	8006392 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 800638c:	2303      	movs	r3, #3
 800638e:	75fb      	strb	r3, [r7, #23]
            break;
 8006390:	e005      	b.n	800639e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006392:	4b7b      	ldr	r3, [pc, #492]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006394:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006396:	f003 0302 	and.w	r3, r3, #2
 800639a:	2b00      	cmp	r3, #0
 800639c:	d0ed      	beq.n	800637a <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 800639e:	7dfb      	ldrb	r3, [r7, #23]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d126      	bne.n	80063f2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80063aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80063ae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80063b2:	d10d      	bne.n	80063d0 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 80063b4:	4b72      	ldr	r3, [pc, #456]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80063b6:	691b      	ldr	r3, [r3, #16]
 80063b8:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80063c2:	0919      	lsrs	r1, r3, #4
 80063c4:	4b70      	ldr	r3, [pc, #448]	; (8006588 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 80063c6:	400b      	ands	r3, r1
 80063c8:	496d      	ldr	r1, [pc, #436]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80063ca:	4313      	orrs	r3, r2
 80063cc:	610b      	str	r3, [r1, #16]
 80063ce:	e005      	b.n	80063dc <HAL_RCCEx_PeriphCLKConfig+0x728>
 80063d0:	4b6b      	ldr	r3, [pc, #428]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80063d2:	691b      	ldr	r3, [r3, #16]
 80063d4:	4a6a      	ldr	r2, [pc, #424]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80063d6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80063da:	6113      	str	r3, [r2, #16]
 80063dc:	4b68      	ldr	r3, [pc, #416]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80063de:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80063e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80063ea:	4965      	ldr	r1, [pc, #404]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80063ec:	4313      	orrs	r3, r2
 80063ee:	670b      	str	r3, [r1, #112]	; 0x70
 80063f0:	e004      	b.n	80063fc <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80063f2:	7dfb      	ldrb	r3, [r7, #23]
 80063f4:	75bb      	strb	r3, [r7, #22]
 80063f6:	e001      	b.n	80063fc <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063f8:	7dfb      	ldrb	r3, [r7, #23]
 80063fa:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f003 0301 	and.w	r3, r3, #1
 8006404:	2b00      	cmp	r3, #0
 8006406:	d07e      	beq.n	8006506 <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800640c:	2b28      	cmp	r3, #40	; 0x28
 800640e:	d867      	bhi.n	80064e0 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8006410:	a201      	add	r2, pc, #4	; (adr r2, 8006418 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8006412:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006416:	bf00      	nop
 8006418:	080064e7 	.word	0x080064e7
 800641c:	080064e1 	.word	0x080064e1
 8006420:	080064e1 	.word	0x080064e1
 8006424:	080064e1 	.word	0x080064e1
 8006428:	080064e1 	.word	0x080064e1
 800642c:	080064e1 	.word	0x080064e1
 8006430:	080064e1 	.word	0x080064e1
 8006434:	080064e1 	.word	0x080064e1
 8006438:	080064bd 	.word	0x080064bd
 800643c:	080064e1 	.word	0x080064e1
 8006440:	080064e1 	.word	0x080064e1
 8006444:	080064e1 	.word	0x080064e1
 8006448:	080064e1 	.word	0x080064e1
 800644c:	080064e1 	.word	0x080064e1
 8006450:	080064e1 	.word	0x080064e1
 8006454:	080064e1 	.word	0x080064e1
 8006458:	080064cf 	.word	0x080064cf
 800645c:	080064e1 	.word	0x080064e1
 8006460:	080064e1 	.word	0x080064e1
 8006464:	080064e1 	.word	0x080064e1
 8006468:	080064e1 	.word	0x080064e1
 800646c:	080064e1 	.word	0x080064e1
 8006470:	080064e1 	.word	0x080064e1
 8006474:	080064e1 	.word	0x080064e1
 8006478:	080064e7 	.word	0x080064e7
 800647c:	080064e1 	.word	0x080064e1
 8006480:	080064e1 	.word	0x080064e1
 8006484:	080064e1 	.word	0x080064e1
 8006488:	080064e1 	.word	0x080064e1
 800648c:	080064e1 	.word	0x080064e1
 8006490:	080064e1 	.word	0x080064e1
 8006494:	080064e1 	.word	0x080064e1
 8006498:	080064e7 	.word	0x080064e7
 800649c:	080064e1 	.word	0x080064e1
 80064a0:	080064e1 	.word	0x080064e1
 80064a4:	080064e1 	.word	0x080064e1
 80064a8:	080064e1 	.word	0x080064e1
 80064ac:	080064e1 	.word	0x080064e1
 80064b0:	080064e1 	.word	0x080064e1
 80064b4:	080064e1 	.word	0x080064e1
 80064b8:	080064e7 	.word	0x080064e7
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	3304      	adds	r3, #4
 80064c0:	2101      	movs	r1, #1
 80064c2:	4618      	mov	r0, r3
 80064c4:	f001 fc18 	bl	8007cf8 <RCCEx_PLL2_Config>
 80064c8:	4603      	mov	r3, r0
 80064ca:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80064cc:	e00c      	b.n	80064e8 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	3324      	adds	r3, #36	; 0x24
 80064d2:	2101      	movs	r1, #1
 80064d4:	4618      	mov	r0, r3
 80064d6:	f001 fcc1 	bl	8007e5c <RCCEx_PLL3_Config>
 80064da:	4603      	mov	r3, r0
 80064dc:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80064de:	e003      	b.n	80064e8 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80064e0:	2301      	movs	r3, #1
 80064e2:	75fb      	strb	r3, [r7, #23]
      break;
 80064e4:	e000      	b.n	80064e8 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 80064e6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80064e8:	7dfb      	ldrb	r3, [r7, #23]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d109      	bne.n	8006502 <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80064ee:	4b24      	ldr	r3, [pc, #144]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80064f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064f2:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80064fa:	4921      	ldr	r1, [pc, #132]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80064fc:	4313      	orrs	r3, r2
 80064fe:	654b      	str	r3, [r1, #84]	; 0x54
 8006500:	e001      	b.n	8006506 <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006502:	7dfb      	ldrb	r3, [r7, #23]
 8006504:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f003 0302 	and.w	r3, r3, #2
 800650e:	2b00      	cmp	r3, #0
 8006510:	d03e      	beq.n	8006590 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006516:	2b05      	cmp	r3, #5
 8006518:	d820      	bhi.n	800655c <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 800651a:	a201      	add	r2, pc, #4	; (adr r2, 8006520 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 800651c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006520:	08006563 	.word	0x08006563
 8006524:	08006539 	.word	0x08006539
 8006528:	0800654b 	.word	0x0800654b
 800652c:	08006563 	.word	0x08006563
 8006530:	08006563 	.word	0x08006563
 8006534:	08006563 	.word	0x08006563
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	3304      	adds	r3, #4
 800653c:	2101      	movs	r1, #1
 800653e:	4618      	mov	r0, r3
 8006540:	f001 fbda 	bl	8007cf8 <RCCEx_PLL2_Config>
 8006544:	4603      	mov	r3, r0
 8006546:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006548:	e00c      	b.n	8006564 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	3324      	adds	r3, #36	; 0x24
 800654e:	2101      	movs	r1, #1
 8006550:	4618      	mov	r0, r3
 8006552:	f001 fc83 	bl	8007e5c <RCCEx_PLL3_Config>
 8006556:	4603      	mov	r3, r0
 8006558:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800655a:	e003      	b.n	8006564 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800655c:	2301      	movs	r3, #1
 800655e:	75fb      	strb	r3, [r7, #23]
      break;
 8006560:	e000      	b.n	8006564 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 8006562:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006564:	7dfb      	ldrb	r3, [r7, #23]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d110      	bne.n	800658c <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800656a:	4b05      	ldr	r3, [pc, #20]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800656c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800656e:	f023 0207 	bic.w	r2, r3, #7
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006576:	4902      	ldr	r1, [pc, #8]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006578:	4313      	orrs	r3, r2
 800657a:	654b      	str	r3, [r1, #84]	; 0x54
 800657c:	e008      	b.n	8006590 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 800657e:	bf00      	nop
 8006580:	58024400 	.word	0x58024400
 8006584:	58024800 	.word	0x58024800
 8006588:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 800658c:	7dfb      	ldrb	r3, [r7, #23]
 800658e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	f003 0304 	and.w	r3, r3, #4
 8006598:	2b00      	cmp	r3, #0
 800659a:	d039      	beq.n	8006610 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065a2:	2b05      	cmp	r3, #5
 80065a4:	d820      	bhi.n	80065e8 <HAL_RCCEx_PeriphCLKConfig+0x934>
 80065a6:	a201      	add	r2, pc, #4	; (adr r2, 80065ac <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 80065a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065ac:	080065ef 	.word	0x080065ef
 80065b0:	080065c5 	.word	0x080065c5
 80065b4:	080065d7 	.word	0x080065d7
 80065b8:	080065ef 	.word	0x080065ef
 80065bc:	080065ef 	.word	0x080065ef
 80065c0:	080065ef 	.word	0x080065ef
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	3304      	adds	r3, #4
 80065c8:	2101      	movs	r1, #1
 80065ca:	4618      	mov	r0, r3
 80065cc:	f001 fb94 	bl	8007cf8 <RCCEx_PLL2_Config>
 80065d0:	4603      	mov	r3, r0
 80065d2:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80065d4:	e00c      	b.n	80065f0 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	3324      	adds	r3, #36	; 0x24
 80065da:	2101      	movs	r1, #1
 80065dc:	4618      	mov	r0, r3
 80065de:	f001 fc3d 	bl	8007e5c <RCCEx_PLL3_Config>
 80065e2:	4603      	mov	r3, r0
 80065e4:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80065e6:	e003      	b.n	80065f0 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80065e8:	2301      	movs	r3, #1
 80065ea:	75fb      	strb	r3, [r7, #23]
      break;
 80065ec:	e000      	b.n	80065f0 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 80065ee:	bf00      	nop
    }

    if(ret == HAL_OK)
 80065f0:	7dfb      	ldrb	r3, [r7, #23]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d10a      	bne.n	800660c <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80065f6:	4bb7      	ldr	r3, [pc, #732]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80065f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065fa:	f023 0207 	bic.w	r2, r3, #7
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006604:	49b3      	ldr	r1, [pc, #716]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006606:	4313      	orrs	r3, r2
 8006608:	658b      	str	r3, [r1, #88]	; 0x58
 800660a:	e001      	b.n	8006610 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800660c:	7dfb      	ldrb	r3, [r7, #23]
 800660e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	f003 0320 	and.w	r3, r3, #32
 8006618:	2b00      	cmp	r3, #0
 800661a:	d04b      	beq.n	80066b4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006622:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006626:	d02e      	beq.n	8006686 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8006628:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800662c:	d828      	bhi.n	8006680 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800662e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006632:	d02a      	beq.n	800668a <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8006634:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006638:	d822      	bhi.n	8006680 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800663a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800663e:	d026      	beq.n	800668e <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8006640:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006644:	d81c      	bhi.n	8006680 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8006646:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800664a:	d010      	beq.n	800666e <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 800664c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006650:	d816      	bhi.n	8006680 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8006652:	2b00      	cmp	r3, #0
 8006654:	d01d      	beq.n	8006692 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8006656:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800665a:	d111      	bne.n	8006680 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	3304      	adds	r3, #4
 8006660:	2100      	movs	r1, #0
 8006662:	4618      	mov	r0, r3
 8006664:	f001 fb48 	bl	8007cf8 <RCCEx_PLL2_Config>
 8006668:	4603      	mov	r3, r0
 800666a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800666c:	e012      	b.n	8006694 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	3324      	adds	r3, #36	; 0x24
 8006672:	2102      	movs	r1, #2
 8006674:	4618      	mov	r0, r3
 8006676:	f001 fbf1 	bl	8007e5c <RCCEx_PLL3_Config>
 800667a:	4603      	mov	r3, r0
 800667c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800667e:	e009      	b.n	8006694 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006680:	2301      	movs	r3, #1
 8006682:	75fb      	strb	r3, [r7, #23]
      break;
 8006684:	e006      	b.n	8006694 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8006686:	bf00      	nop
 8006688:	e004      	b.n	8006694 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800668a:	bf00      	nop
 800668c:	e002      	b.n	8006694 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800668e:	bf00      	nop
 8006690:	e000      	b.n	8006694 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8006692:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006694:	7dfb      	ldrb	r3, [r7, #23]
 8006696:	2b00      	cmp	r3, #0
 8006698:	d10a      	bne.n	80066b0 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800669a:	4b8e      	ldr	r3, [pc, #568]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800669c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800669e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80066a8:	498a      	ldr	r1, [pc, #552]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80066aa:	4313      	orrs	r3, r2
 80066ac:	654b      	str	r3, [r1, #84]	; 0x54
 80066ae:	e001      	b.n	80066b4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066b0:	7dfb      	ldrb	r3, [r7, #23]
 80066b2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d04b      	beq.n	8006758 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80066c6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80066ca:	d02e      	beq.n	800672a <HAL_RCCEx_PeriphCLKConfig+0xa76>
 80066cc:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80066d0:	d828      	bhi.n	8006724 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80066d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066d6:	d02a      	beq.n	800672e <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 80066d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066dc:	d822      	bhi.n	8006724 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80066de:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80066e2:	d026      	beq.n	8006732 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 80066e4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80066e8:	d81c      	bhi.n	8006724 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80066ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80066ee:	d010      	beq.n	8006712 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 80066f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80066f4:	d816      	bhi.n	8006724 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d01d      	beq.n	8006736 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 80066fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066fe:	d111      	bne.n	8006724 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	3304      	adds	r3, #4
 8006704:	2100      	movs	r1, #0
 8006706:	4618      	mov	r0, r3
 8006708:	f001 faf6 	bl	8007cf8 <RCCEx_PLL2_Config>
 800670c:	4603      	mov	r3, r0
 800670e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006710:	e012      	b.n	8006738 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	3324      	adds	r3, #36	; 0x24
 8006716:	2102      	movs	r1, #2
 8006718:	4618      	mov	r0, r3
 800671a:	f001 fb9f 	bl	8007e5c <RCCEx_PLL3_Config>
 800671e:	4603      	mov	r3, r0
 8006720:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006722:	e009      	b.n	8006738 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006724:	2301      	movs	r3, #1
 8006726:	75fb      	strb	r3, [r7, #23]
      break;
 8006728:	e006      	b.n	8006738 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800672a:	bf00      	nop
 800672c:	e004      	b.n	8006738 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800672e:	bf00      	nop
 8006730:	e002      	b.n	8006738 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8006732:	bf00      	nop
 8006734:	e000      	b.n	8006738 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8006736:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006738:	7dfb      	ldrb	r3, [r7, #23]
 800673a:	2b00      	cmp	r3, #0
 800673c:	d10a      	bne.n	8006754 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800673e:	4b65      	ldr	r3, [pc, #404]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006740:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006742:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800674c:	4961      	ldr	r1, [pc, #388]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800674e:	4313      	orrs	r3, r2
 8006750:	658b      	str	r3, [r1, #88]	; 0x58
 8006752:	e001      	b.n	8006758 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006754:	7dfb      	ldrb	r3, [r7, #23]
 8006756:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006760:	2b00      	cmp	r3, #0
 8006762:	d04b      	beq.n	80067fc <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800676a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800676e:	d02e      	beq.n	80067ce <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8006770:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006774:	d828      	bhi.n	80067c8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8006776:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800677a:	d02a      	beq.n	80067d2 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 800677c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006780:	d822      	bhi.n	80067c8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8006782:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006786:	d026      	beq.n	80067d6 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8006788:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800678c:	d81c      	bhi.n	80067c8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800678e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006792:	d010      	beq.n	80067b6 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8006794:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006798:	d816      	bhi.n	80067c8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800679a:	2b00      	cmp	r3, #0
 800679c:	d01d      	beq.n	80067da <HAL_RCCEx_PeriphCLKConfig+0xb26>
 800679e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80067a2:	d111      	bne.n	80067c8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	3304      	adds	r3, #4
 80067a8:	2100      	movs	r1, #0
 80067aa:	4618      	mov	r0, r3
 80067ac:	f001 faa4 	bl	8007cf8 <RCCEx_PLL2_Config>
 80067b0:	4603      	mov	r3, r0
 80067b2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80067b4:	e012      	b.n	80067dc <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	3324      	adds	r3, #36	; 0x24
 80067ba:	2102      	movs	r1, #2
 80067bc:	4618      	mov	r0, r3
 80067be:	f001 fb4d 	bl	8007e5c <RCCEx_PLL3_Config>
 80067c2:	4603      	mov	r3, r0
 80067c4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80067c6:	e009      	b.n	80067dc <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80067c8:	2301      	movs	r3, #1
 80067ca:	75fb      	strb	r3, [r7, #23]
      break;
 80067cc:	e006      	b.n	80067dc <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80067ce:	bf00      	nop
 80067d0:	e004      	b.n	80067dc <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80067d2:	bf00      	nop
 80067d4:	e002      	b.n	80067dc <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80067d6:	bf00      	nop
 80067d8:	e000      	b.n	80067dc <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80067da:	bf00      	nop
    }

    if(ret == HAL_OK)
 80067dc:	7dfb      	ldrb	r3, [r7, #23]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d10a      	bne.n	80067f8 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80067e2:	4b3c      	ldr	r3, [pc, #240]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80067e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067e6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80067f0:	4938      	ldr	r1, [pc, #224]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80067f2:	4313      	orrs	r3, r2
 80067f4:	658b      	str	r3, [r1, #88]	; 0x58
 80067f6:	e001      	b.n	80067fc <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067f8:	7dfb      	ldrb	r3, [r7, #23]
 80067fa:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	f003 0308 	and.w	r3, r3, #8
 8006804:	2b00      	cmp	r3, #0
 8006806:	d01a      	beq.n	800683e <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800680e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006812:	d10a      	bne.n	800682a <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	3324      	adds	r3, #36	; 0x24
 8006818:	2102      	movs	r1, #2
 800681a:	4618      	mov	r0, r3
 800681c:	f001 fb1e 	bl	8007e5c <RCCEx_PLL3_Config>
 8006820:	4603      	mov	r3, r0
 8006822:	2b00      	cmp	r3, #0
 8006824:	d001      	beq.n	800682a <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8006826:	2301      	movs	r3, #1
 8006828:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800682a:	4b2a      	ldr	r3, [pc, #168]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800682c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800682e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006838:	4926      	ldr	r1, [pc, #152]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800683a:	4313      	orrs	r3, r2
 800683c:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	f003 0310 	and.w	r3, r3, #16
 8006846:	2b00      	cmp	r3, #0
 8006848:	d01a      	beq.n	8006880 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006850:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006854:	d10a      	bne.n	800686c <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	3324      	adds	r3, #36	; 0x24
 800685a:	2102      	movs	r1, #2
 800685c:	4618      	mov	r0, r3
 800685e:	f001 fafd 	bl	8007e5c <RCCEx_PLL3_Config>
 8006862:	4603      	mov	r3, r0
 8006864:	2b00      	cmp	r3, #0
 8006866:	d001      	beq.n	800686c <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8006868:	2301      	movs	r3, #1
 800686a:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800686c:	4b19      	ldr	r3, [pc, #100]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800686e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006870:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800687a:	4916      	ldr	r1, [pc, #88]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800687c:	4313      	orrs	r3, r2
 800687e:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006888:	2b00      	cmp	r3, #0
 800688a:	d036      	beq.n	80068fa <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006892:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006896:	d01f      	beq.n	80068d8 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8006898:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800689c:	d817      	bhi.n	80068ce <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d003      	beq.n	80068aa <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 80068a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80068a6:	d009      	beq.n	80068bc <HAL_RCCEx_PeriphCLKConfig+0xc08>
 80068a8:	e011      	b.n	80068ce <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	3304      	adds	r3, #4
 80068ae:	2100      	movs	r1, #0
 80068b0:	4618      	mov	r0, r3
 80068b2:	f001 fa21 	bl	8007cf8 <RCCEx_PLL2_Config>
 80068b6:	4603      	mov	r3, r0
 80068b8:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80068ba:	e00e      	b.n	80068da <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	3324      	adds	r3, #36	; 0x24
 80068c0:	2102      	movs	r1, #2
 80068c2:	4618      	mov	r0, r3
 80068c4:	f001 faca 	bl	8007e5c <RCCEx_PLL3_Config>
 80068c8:	4603      	mov	r3, r0
 80068ca:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80068cc:	e005      	b.n	80068da <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80068ce:	2301      	movs	r3, #1
 80068d0:	75fb      	strb	r3, [r7, #23]
      break;
 80068d2:	e002      	b.n	80068da <HAL_RCCEx_PeriphCLKConfig+0xc26>
 80068d4:	58024400 	.word	0x58024400
      break;
 80068d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80068da:	7dfb      	ldrb	r3, [r7, #23]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d10a      	bne.n	80068f6 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80068e0:	4b93      	ldr	r3, [pc, #588]	; (8006b30 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80068e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068e4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80068ee:	4990      	ldr	r1, [pc, #576]	; (8006b30 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80068f0:	4313      	orrs	r3, r2
 80068f2:	658b      	str	r3, [r1, #88]	; 0x58
 80068f4:	e001      	b.n	80068fa <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068f6:	7dfb      	ldrb	r3, [r7, #23]
 80068f8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006902:	2b00      	cmp	r3, #0
 8006904:	d033      	beq.n	800696e <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800690c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006910:	d01c      	beq.n	800694c <HAL_RCCEx_PeriphCLKConfig+0xc98>
 8006912:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006916:	d816      	bhi.n	8006946 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8006918:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800691c:	d003      	beq.n	8006926 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 800691e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006922:	d007      	beq.n	8006934 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8006924:	e00f      	b.n	8006946 <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006926:	4b82      	ldr	r3, [pc, #520]	; (8006b30 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006928:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800692a:	4a81      	ldr	r2, [pc, #516]	; (8006b30 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800692c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006930:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8006932:	e00c      	b.n	800694e <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	3324      	adds	r3, #36	; 0x24
 8006938:	2101      	movs	r1, #1
 800693a:	4618      	mov	r0, r3
 800693c:	f001 fa8e 	bl	8007e5c <RCCEx_PLL3_Config>
 8006940:	4603      	mov	r3, r0
 8006942:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8006944:	e003      	b.n	800694e <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006946:	2301      	movs	r3, #1
 8006948:	75fb      	strb	r3, [r7, #23]
      break;
 800694a:	e000      	b.n	800694e <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 800694c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800694e:	7dfb      	ldrb	r3, [r7, #23]
 8006950:	2b00      	cmp	r3, #0
 8006952:	d10a      	bne.n	800696a <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006954:	4b76      	ldr	r3, [pc, #472]	; (8006b30 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006956:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006958:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006962:	4973      	ldr	r1, [pc, #460]	; (8006b30 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006964:	4313      	orrs	r3, r2
 8006966:	654b      	str	r3, [r1, #84]	; 0x54
 8006968:	e001      	b.n	800696e <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800696a:	7dfb      	ldrb	r3, [r7, #23]
 800696c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006976:	2b00      	cmp	r3, #0
 8006978:	d029      	beq.n	80069ce <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800697e:	2b00      	cmp	r3, #0
 8006980:	d003      	beq.n	800698a <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 8006982:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006986:	d007      	beq.n	8006998 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8006988:	e00f      	b.n	80069aa <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800698a:	4b69      	ldr	r3, [pc, #420]	; (8006b30 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800698c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800698e:	4a68      	ldr	r2, [pc, #416]	; (8006b30 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006990:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006994:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006996:	e00b      	b.n	80069b0 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	3304      	adds	r3, #4
 800699c:	2102      	movs	r1, #2
 800699e:	4618      	mov	r0, r3
 80069a0:	f001 f9aa 	bl	8007cf8 <RCCEx_PLL2_Config>
 80069a4:	4603      	mov	r3, r0
 80069a6:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80069a8:	e002      	b.n	80069b0 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 80069aa:	2301      	movs	r3, #1
 80069ac:	75fb      	strb	r3, [r7, #23]
      break;
 80069ae:	bf00      	nop
    }

    if(ret == HAL_OK)
 80069b0:	7dfb      	ldrb	r3, [r7, #23]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d109      	bne.n	80069ca <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80069b6:	4b5e      	ldr	r3, [pc, #376]	; (8006b30 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80069b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069ba:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069c2:	495b      	ldr	r1, [pc, #364]	; (8006b30 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80069c4:	4313      	orrs	r3, r2
 80069c6:	64cb      	str	r3, [r1, #76]	; 0x4c
 80069c8:	e001      	b.n	80069ce <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069ca:	7dfb      	ldrb	r3, [r7, #23]
 80069cc:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d00a      	beq.n	80069f0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	3324      	adds	r3, #36	; 0x24
 80069de:	2102      	movs	r1, #2
 80069e0:	4618      	mov	r0, r3
 80069e2:	f001 fa3b 	bl	8007e5c <RCCEx_PLL3_Config>
 80069e6:	4603      	mov	r3, r0
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d001      	beq.n	80069f0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 80069ec:	2301      	movs	r3, #1
 80069ee:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d030      	beq.n	8006a5e <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006a00:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006a04:	d017      	beq.n	8006a36 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 8006a06:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006a0a:	d811      	bhi.n	8006a30 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8006a0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a10:	d013      	beq.n	8006a3a <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8006a12:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a16:	d80b      	bhi.n	8006a30 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d010      	beq.n	8006a3e <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8006a1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a20:	d106      	bne.n	8006a30 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006a22:	4b43      	ldr	r3, [pc, #268]	; (8006b30 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006a24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a26:	4a42      	ldr	r2, [pc, #264]	; (8006b30 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006a28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006a2c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8006a2e:	e007      	b.n	8006a40 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006a30:	2301      	movs	r3, #1
 8006a32:	75fb      	strb	r3, [r7, #23]
      break;
 8006a34:	e004      	b.n	8006a40 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8006a36:	bf00      	nop
 8006a38:	e002      	b.n	8006a40 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8006a3a:	bf00      	nop
 8006a3c:	e000      	b.n	8006a40 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8006a3e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006a40:	7dfb      	ldrb	r3, [r7, #23]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d109      	bne.n	8006a5a <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006a46:	4b3a      	ldr	r3, [pc, #232]	; (8006b30 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006a48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a4a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006a52:	4937      	ldr	r1, [pc, #220]	; (8006b30 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006a54:	4313      	orrs	r3, r2
 8006a56:	654b      	str	r3, [r1, #84]	; 0x54
 8006a58:	e001      	b.n	8006a5e <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a5a:	7dfb      	ldrb	r3, [r7, #23]
 8006a5c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d008      	beq.n	8006a7c <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006a6a:	4b31      	ldr	r3, [pc, #196]	; (8006b30 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006a6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a6e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a76:	492e      	ldr	r1, [pc, #184]	; (8006b30 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006a78:	4313      	orrs	r3, r2
 8006a7a:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d009      	beq.n	8006a9c <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8006a88:	4b29      	ldr	r3, [pc, #164]	; (8006b30 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006a8a:	691b      	ldr	r3, [r3, #16]
 8006a8c:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006a96:	4926      	ldr	r1, [pc, #152]	; (8006b30 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006a98:	4313      	orrs	r3, r2
 8006a9a:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d008      	beq.n	8006aba <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006aa8:	4b21      	ldr	r3, [pc, #132]	; (8006b30 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006aaa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006aac:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006ab4:	491e      	ldr	r1, [pc, #120]	; (8006b30 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006ab6:	4313      	orrs	r3, r2
 8006ab8:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d00d      	beq.n	8006ae2 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006ac6:	4b1a      	ldr	r3, [pc, #104]	; (8006b30 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006ac8:	691b      	ldr	r3, [r3, #16]
 8006aca:	4a19      	ldr	r2, [pc, #100]	; (8006b30 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006acc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006ad0:	6113      	str	r3, [r2, #16]
 8006ad2:	4b17      	ldr	r3, [pc, #92]	; (8006b30 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006ad4:	691a      	ldr	r2, [r3, #16]
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8006adc:	4914      	ldr	r1, [pc, #80]	; (8006b30 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006ade:	4313      	orrs	r3, r2
 8006ae0:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	da08      	bge.n	8006afc <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006aea:	4b11      	ldr	r3, [pc, #68]	; (8006b30 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006aec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006aee:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006af6:	490e      	ldr	r1, [pc, #56]	; (8006b30 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006af8:	4313      	orrs	r3, r2
 8006afa:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d009      	beq.n	8006b1c <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006b08:	4b09      	ldr	r3, [pc, #36]	; (8006b30 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006b0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b0c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b16:	4906      	ldr	r1, [pc, #24]	; (8006b30 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006b18:	4313      	orrs	r3, r2
 8006b1a:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8006b1c:	7dbb      	ldrb	r3, [r7, #22]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d101      	bne.n	8006b26 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 8006b22:	2300      	movs	r3, #0
 8006b24:	e000      	b.n	8006b28 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 8006b26:	2301      	movs	r3, #1
}
 8006b28:	4618      	mov	r0, r3
 8006b2a:	3718      	adds	r7, #24
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	bd80      	pop	{r7, pc}
 8006b30:	58024400 	.word	0x58024400

08006b34 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006b34:	b580      	push	{r7, lr}
 8006b36:	b090      	sub	sp, #64	; 0x40
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b42:	f040 8095 	bne.w	8006c70 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8006b46:	4bae      	ldr	r3, [pc, #696]	; (8006e00 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8006b48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b4a:	f003 0307 	and.w	r3, r3, #7
 8006b4e:	633b      	str	r3, [r7, #48]	; 0x30
 8006b50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b52:	2b04      	cmp	r3, #4
 8006b54:	f200 8088 	bhi.w	8006c68 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8006b58:	a201      	add	r2, pc, #4	; (adr r2, 8006b60 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 8006b5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b5e:	bf00      	nop
 8006b60:	08006b75 	.word	0x08006b75
 8006b64:	08006b9d 	.word	0x08006b9d
 8006b68:	08006bc5 	.word	0x08006bc5
 8006b6c:	08006c61 	.word	0x08006c61
 8006b70:	08006bed 	.word	0x08006bed

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006b74:	4ba2      	ldr	r3, [pc, #648]	; (8006e00 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b7c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006b80:	d108      	bne.n	8006b94 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006b82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006b86:	4618      	mov	r0, r3
 8006b88:	f000 ff64 	bl	8007a54 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8006b8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b8e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006b90:	f000 bc95 	b.w	80074be <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8006b94:	2300      	movs	r3, #0
 8006b96:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006b98:	f000 bc91 	b.w	80074be <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006b9c:	4b98      	ldr	r3, [pc, #608]	; (8006e00 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006ba4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006ba8:	d108      	bne.n	8006bbc <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006baa:	f107 0318 	add.w	r3, r7, #24
 8006bae:	4618      	mov	r0, r3
 8006bb0:	f000 fca8 	bl	8007504 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006bb4:	69bb      	ldr	r3, [r7, #24]
 8006bb6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006bb8:	f000 bc81 	b.w	80074be <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8006bbc:	2300      	movs	r3, #0
 8006bbe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006bc0:	f000 bc7d 	b.w	80074be <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006bc4:	4b8e      	ldr	r3, [pc, #568]	; (8006e00 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006bcc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006bd0:	d108      	bne.n	8006be4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006bd2:	f107 030c 	add.w	r3, r7, #12
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	f000 fde8 	bl	80077ac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006be0:	f000 bc6d 	b.w	80074be <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8006be4:	2300      	movs	r3, #0
 8006be6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006be8:	f000 bc69 	b.w	80074be <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006bec:	4b84      	ldr	r3, [pc, #528]	; (8006e00 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8006bee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006bf0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006bf4:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006bf6:	4b82      	ldr	r3, [pc, #520]	; (8006e00 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	f003 0304 	and.w	r3, r3, #4
 8006bfe:	2b04      	cmp	r3, #4
 8006c00:	d10c      	bne.n	8006c1c <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 8006c02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d109      	bne.n	8006c1c <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006c08:	4b7d      	ldr	r3, [pc, #500]	; (8006e00 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	08db      	lsrs	r3, r3, #3
 8006c0e:	f003 0303 	and.w	r3, r3, #3
 8006c12:	4a7c      	ldr	r2, [pc, #496]	; (8006e04 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 8006c14:	fa22 f303 	lsr.w	r3, r2, r3
 8006c18:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006c1a:	e01f      	b.n	8006c5c <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006c1c:	4b78      	ldr	r3, [pc, #480]	; (8006e00 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c24:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c28:	d106      	bne.n	8006c38 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 8006c2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c2c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006c30:	d102      	bne.n	8006c38 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8006c32:	4b75      	ldr	r3, [pc, #468]	; (8006e08 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8006c34:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006c36:	e011      	b.n	8006c5c <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006c38:	4b71      	ldr	r3, [pc, #452]	; (8006e00 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c40:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006c44:	d106      	bne.n	8006c54 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 8006c46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c48:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006c4c:	d102      	bne.n	8006c54 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8006c4e:	4b6f      	ldr	r3, [pc, #444]	; (8006e0c <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8006c50:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006c52:	e003      	b.n	8006c5c <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8006c54:	2300      	movs	r3, #0
 8006c56:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8006c58:	f000 bc31 	b.w	80074be <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8006c5c:	f000 bc2f 	b.w	80074be <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8006c60:	4b6b      	ldr	r3, [pc, #428]	; (8006e10 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8006c62:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006c64:	f000 bc2b 	b.w	80074be <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8006c68:	2300      	movs	r3, #0
 8006c6a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006c6c:	f000 bc27 	b.w	80074be <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c76:	f040 8095 	bne.w	8006da4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8006c7a:	4b61      	ldr	r3, [pc, #388]	; (8006e00 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8006c7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c7e:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8006c82:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8006c84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c8a:	d04d      	beq.n	8006d28 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 8006c8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c92:	f200 8084 	bhi.w	8006d9e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8006c96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c98:	2bc0      	cmp	r3, #192	; 0xc0
 8006c9a:	d07d      	beq.n	8006d98 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8006c9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c9e:	2bc0      	cmp	r3, #192	; 0xc0
 8006ca0:	d87d      	bhi.n	8006d9e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8006ca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ca4:	2b80      	cmp	r3, #128	; 0x80
 8006ca6:	d02d      	beq.n	8006d04 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 8006ca8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006caa:	2b80      	cmp	r3, #128	; 0x80
 8006cac:	d877      	bhi.n	8006d9e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8006cae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d003      	beq.n	8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 8006cb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cb6:	2b40      	cmp	r3, #64	; 0x40
 8006cb8:	d012      	beq.n	8006ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 8006cba:	e070      	b.n	8006d9e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006cbc:	4b50      	ldr	r3, [pc, #320]	; (8006e00 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006cc4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006cc8:	d107      	bne.n	8006cda <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006cca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006cce:	4618      	mov	r0, r3
 8006cd0:	f000 fec0 	bl	8007a54 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006cd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cd6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006cd8:	e3f1      	b.n	80074be <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8006cda:	2300      	movs	r3, #0
 8006cdc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006cde:	e3ee      	b.n	80074be <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006ce0:	4b47      	ldr	r3, [pc, #284]	; (8006e00 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006ce8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006cec:	d107      	bne.n	8006cfe <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006cee:	f107 0318 	add.w	r3, r7, #24
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	f000 fc06 	bl	8007504 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006cf8:	69bb      	ldr	r3, [r7, #24]
 8006cfa:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006cfc:	e3df      	b.n	80074be <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8006cfe:	2300      	movs	r3, #0
 8006d00:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006d02:	e3dc      	b.n	80074be <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006d04:	4b3e      	ldr	r3, [pc, #248]	; (8006e00 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006d0c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006d10:	d107      	bne.n	8006d22 <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006d12:	f107 030c 	add.w	r3, r7, #12
 8006d16:	4618      	mov	r0, r3
 8006d18:	f000 fd48 	bl	80077ac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006d20:	e3cd      	b.n	80074be <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8006d22:	2300      	movs	r3, #0
 8006d24:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006d26:	e3ca      	b.n	80074be <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006d28:	4b35      	ldr	r3, [pc, #212]	; (8006e00 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8006d2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d2c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006d30:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006d32:	4b33      	ldr	r3, [pc, #204]	; (8006e00 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	f003 0304 	and.w	r3, r3, #4
 8006d3a:	2b04      	cmp	r3, #4
 8006d3c:	d10c      	bne.n	8006d58 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 8006d3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d109      	bne.n	8006d58 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006d44:	4b2e      	ldr	r3, [pc, #184]	; (8006e00 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	08db      	lsrs	r3, r3, #3
 8006d4a:	f003 0303 	and.w	r3, r3, #3
 8006d4e:	4a2d      	ldr	r2, [pc, #180]	; (8006e04 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 8006d50:	fa22 f303 	lsr.w	r3, r2, r3
 8006d54:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006d56:	e01e      	b.n	8006d96 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006d58:	4b29      	ldr	r3, [pc, #164]	; (8006e00 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d64:	d106      	bne.n	8006d74 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 8006d66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d68:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006d6c:	d102      	bne.n	8006d74 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8006d6e:	4b26      	ldr	r3, [pc, #152]	; (8006e08 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8006d70:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006d72:	e010      	b.n	8006d96 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006d74:	4b22      	ldr	r3, [pc, #136]	; (8006e00 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d7c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006d80:	d106      	bne.n	8006d90 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 8006d82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d84:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006d88:	d102      	bne.n	8006d90 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8006d8a:	4b20      	ldr	r3, [pc, #128]	; (8006e0c <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8006d8c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006d8e:	e002      	b.n	8006d96 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8006d90:	2300      	movs	r3, #0
 8006d92:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8006d94:	e393      	b.n	80074be <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8006d96:	e392      	b.n	80074be <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8006d98:	4b1d      	ldr	r3, [pc, #116]	; (8006e10 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8006d9a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006d9c:	e38f      	b.n	80074be <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8006d9e:	2300      	movs	r3, #0
 8006da0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006da2:	e38c      	b.n	80074be <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006daa:	f040 80a7 	bne.w	8006efc <HAL_RCCEx_GetPeriphCLKFreq+0x3c8>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8006dae:	4b14      	ldr	r3, [pc, #80]	; (8006e00 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8006db0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006db2:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8006db6:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8006db8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dba:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006dbe:	d05f      	beq.n	8006e80 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8006dc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dc2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006dc6:	f200 8096 	bhi.w	8006ef6 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8006dca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dcc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006dd0:	f000 808e 	beq.w	8006ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
 8006dd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dd6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006dda:	f200 808c 	bhi.w	8006ef6 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8006dde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006de0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006de4:	d03a      	beq.n	8006e5c <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 8006de6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006de8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006dec:	f200 8083 	bhi.w	8006ef6 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8006df0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d00e      	beq.n	8006e14 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>
 8006df6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006df8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006dfc:	d01c      	beq.n	8006e38 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 8006dfe:	e07a      	b.n	8006ef6 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8006e00:	58024400 	.word	0x58024400
 8006e04:	03d09000 	.word	0x03d09000
 8006e08:	003d0900 	.word	0x003d0900
 8006e0c:	007a1200 	.word	0x007a1200
 8006e10:	00bb8000 	.word	0x00bb8000
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006e14:	4baa      	ldr	r3, [pc, #680]	; (80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e1c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006e20:	d107      	bne.n	8006e32 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006e22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006e26:	4618      	mov	r0, r3
 8006e28:	f000 fe14 	bl	8007a54 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006e2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e2e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006e30:	e345      	b.n	80074be <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8006e32:	2300      	movs	r3, #0
 8006e34:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006e36:	e342      	b.n	80074be <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006e38:	4ba1      	ldr	r3, [pc, #644]	; (80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006e40:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006e44:	d107      	bne.n	8006e56 <HAL_RCCEx_GetPeriphCLKFreq+0x322>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006e46:	f107 0318 	add.w	r3, r7, #24
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	f000 fb5a 	bl	8007504 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006e50:	69bb      	ldr	r3, [r7, #24]
 8006e52:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006e54:	e333      	b.n	80074be <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8006e56:	2300      	movs	r3, #0
 8006e58:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006e5a:	e330      	b.n	80074be <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006e5c:	4b98      	ldr	r3, [pc, #608]	; (80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006e64:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006e68:	d107      	bne.n	8006e7a <HAL_RCCEx_GetPeriphCLKFreq+0x346>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006e6a:	f107 030c 	add.w	r3, r7, #12
 8006e6e:	4618      	mov	r0, r3
 8006e70:	f000 fc9c 	bl	80077ac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006e78:	e321      	b.n	80074be <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006e7e:	e31e      	b.n	80074be <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006e80:	4b8f      	ldr	r3, [pc, #572]	; (80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006e82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e84:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006e88:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006e8a:	4b8d      	ldr	r3, [pc, #564]	; (80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	f003 0304 	and.w	r3, r3, #4
 8006e92:	2b04      	cmp	r3, #4
 8006e94:	d10c      	bne.n	8006eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 8006e96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d109      	bne.n	8006eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006e9c:	4b88      	ldr	r3, [pc, #544]	; (80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	08db      	lsrs	r3, r3, #3
 8006ea2:	f003 0303 	and.w	r3, r3, #3
 8006ea6:	4a87      	ldr	r2, [pc, #540]	; (80070c4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006ea8:	fa22 f303 	lsr.w	r3, r2, r3
 8006eac:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006eae:	e01e      	b.n	8006eee <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006eb0:	4b83      	ldr	r3, [pc, #524]	; (80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006eb8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ebc:	d106      	bne.n	8006ecc <HAL_RCCEx_GetPeriphCLKFreq+0x398>
 8006ebe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ec0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006ec4:	d102      	bne.n	8006ecc <HAL_RCCEx_GetPeriphCLKFreq+0x398>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8006ec6:	4b80      	ldr	r3, [pc, #512]	; (80070c8 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8006ec8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006eca:	e010      	b.n	8006eee <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006ecc:	4b7c      	ldr	r3, [pc, #496]	; (80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ed4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006ed8:	d106      	bne.n	8006ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
 8006eda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006edc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006ee0:	d102      	bne.n	8006ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8006ee2:	4b7a      	ldr	r3, [pc, #488]	; (80070cc <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8006ee4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006ee6:	e002      	b.n	8006eee <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8006ee8:	2300      	movs	r3, #0
 8006eea:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8006eec:	e2e7      	b.n	80074be <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8006eee:	e2e6      	b.n	80074be <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8006ef0:	4b77      	ldr	r3, [pc, #476]	; (80070d0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8006ef2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006ef4:	e2e3      	b.n	80074be <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006efa:	e2e0      	b.n	80074be <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006f02:	f040 809c 	bne.w	800703e <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8006f06:	4b6e      	ldr	r3, [pc, #440]	; (80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006f08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f0a:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8006f0e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8006f10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f12:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006f16:	d054      	beq.n	8006fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 8006f18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f1a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006f1e:	f200 808b 	bhi.w	8007038 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 8006f22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f24:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006f28:	f000 8083 	beq.w	8007032 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 8006f2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f2e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006f32:	f200 8081 	bhi.w	8007038 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 8006f36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f38:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006f3c:	d02f      	beq.n	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 8006f3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f40:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006f44:	d878      	bhi.n	8007038 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 8006f46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d004      	beq.n	8006f56 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8006f4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f4e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006f52:	d012      	beq.n	8006f7a <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 8006f54:	e070      	b.n	8007038 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006f56:	4b5a      	ldr	r3, [pc, #360]	; (80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f5e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006f62:	d107      	bne.n	8006f74 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006f64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006f68:	4618      	mov	r0, r3
 8006f6a:	f000 fd73 	bl	8007a54 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006f6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f70:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006f72:	e2a4      	b.n	80074be <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8006f74:	2300      	movs	r3, #0
 8006f76:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006f78:	e2a1      	b.n	80074be <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006f7a:	4b51      	ldr	r3, [pc, #324]	; (80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006f82:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006f86:	d107      	bne.n	8006f98 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006f88:	f107 0318 	add.w	r3, r7, #24
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	f000 fab9 	bl	8007504 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006f92:	69bb      	ldr	r3, [r7, #24]
 8006f94:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 8006f96:	e292      	b.n	80074be <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8006f98:	2300      	movs	r3, #0
 8006f9a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006f9c:	e28f      	b.n	80074be <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006f9e:	4b48      	ldr	r3, [pc, #288]	; (80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006fa6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006faa:	d107      	bne.n	8006fbc <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006fac:	f107 030c 	add.w	r3, r7, #12
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	f000 fbfb 	bl	80077ac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006fba:	e280      	b.n	80074be <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8006fbc:	2300      	movs	r3, #0
 8006fbe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006fc0:	e27d      	b.n	80074be <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006fc2:	4b3f      	ldr	r3, [pc, #252]	; (80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006fc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006fc6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006fca:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006fcc:	4b3c      	ldr	r3, [pc, #240]	; (80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	f003 0304 	and.w	r3, r3, #4
 8006fd4:	2b04      	cmp	r3, #4
 8006fd6:	d10c      	bne.n	8006ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 8006fd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d109      	bne.n	8006ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006fde:	4b38      	ldr	r3, [pc, #224]	; (80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	08db      	lsrs	r3, r3, #3
 8006fe4:	f003 0303 	and.w	r3, r3, #3
 8006fe8:	4a36      	ldr	r2, [pc, #216]	; (80070c4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006fea:	fa22 f303 	lsr.w	r3, r2, r3
 8006fee:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006ff0:	e01e      	b.n	8007030 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006ff2:	4b33      	ldr	r3, [pc, #204]	; (80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ffa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ffe:	d106      	bne.n	800700e <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 8007000:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007002:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007006:	d102      	bne.n	800700e <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8007008:	4b2f      	ldr	r3, [pc, #188]	; (80070c8 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800700a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800700c:	e010      	b.n	8007030 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800700e:	4b2c      	ldr	r3, [pc, #176]	; (80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007016:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800701a:	d106      	bne.n	800702a <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 800701c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800701e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007022:	d102      	bne.n	800702a <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8007024:	4b29      	ldr	r3, [pc, #164]	; (80070cc <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8007026:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007028:	e002      	b.n	8007030 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800702a:	2300      	movs	r3, #0
 800702c:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800702e:	e246      	b.n	80074be <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8007030:	e245      	b.n	80074be <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007032:	4b27      	ldr	r3, [pc, #156]	; (80070d0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8007034:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007036:	e242      	b.n	80074be <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8007038:	2300      	movs	r3, #0
 800703a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800703c:	e23f      	b.n	80074be <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007044:	f040 80a8 	bne.w	8007198 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8007048:	4b1d      	ldr	r3, [pc, #116]	; (80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800704a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800704c:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8007050:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007052:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007054:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007058:	d060      	beq.n	800711c <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
 800705a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800705c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007060:	f200 8097 	bhi.w	8007192 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8007064:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007066:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800706a:	f000 808f 	beq.w	800718c <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 800706e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007070:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007074:	f200 808d 	bhi.w	8007192 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8007078:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800707a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800707e:	d03b      	beq.n	80070f8 <HAL_RCCEx_GetPeriphCLKFreq+0x5c4>
 8007080:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007082:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007086:	f200 8084 	bhi.w	8007192 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 800708a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800708c:	2b00      	cmp	r3, #0
 800708e:	d004      	beq.n	800709a <HAL_RCCEx_GetPeriphCLKFreq+0x566>
 8007090:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007092:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007096:	d01d      	beq.n	80070d4 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
 8007098:	e07b      	b.n	8007192 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800709a:	4b09      	ldr	r3, [pc, #36]	; (80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80070a2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80070a6:	d107      	bne.n	80070b8 <HAL_RCCEx_GetPeriphCLKFreq+0x584>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80070a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80070ac:	4618      	mov	r0, r3
 80070ae:	f000 fcd1 	bl	8007a54 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80070b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070b4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80070b6:	e202      	b.n	80074be <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80070b8:	2300      	movs	r3, #0
 80070ba:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80070bc:	e1ff      	b.n	80074be <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80070be:	bf00      	nop
 80070c0:	58024400 	.word	0x58024400
 80070c4:	03d09000 	.word	0x03d09000
 80070c8:	003d0900 	.word	0x003d0900
 80070cc:	007a1200 	.word	0x007a1200
 80070d0:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80070d4:	4ba3      	ldr	r3, [pc, #652]	; (8007364 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80070dc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80070e0:	d107      	bne.n	80070f2 <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80070e2:	f107 0318 	add.w	r3, r7, #24
 80070e6:	4618      	mov	r0, r3
 80070e8:	f000 fa0c 	bl	8007504 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80070ec:	69bb      	ldr	r3, [r7, #24]
 80070ee:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80070f0:	e1e5      	b.n	80074be <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80070f2:	2300      	movs	r3, #0
 80070f4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80070f6:	e1e2      	b.n	80074be <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80070f8:	4b9a      	ldr	r3, [pc, #616]	; (8007364 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007100:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007104:	d107      	bne.n	8007116 <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007106:	f107 030c 	add.w	r3, r7, #12
 800710a:	4618      	mov	r0, r3
 800710c:	f000 fb4e 	bl	80077ac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007114:	e1d3      	b.n	80074be <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8007116:	2300      	movs	r3, #0
 8007118:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800711a:	e1d0      	b.n	80074be <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800711c:	4b91      	ldr	r3, [pc, #580]	; (8007364 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800711e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007120:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007124:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007126:	4b8f      	ldr	r3, [pc, #572]	; (8007364 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	f003 0304 	and.w	r3, r3, #4
 800712e:	2b04      	cmp	r3, #4
 8007130:	d10c      	bne.n	800714c <HAL_RCCEx_GetPeriphCLKFreq+0x618>
 8007132:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007134:	2b00      	cmp	r3, #0
 8007136:	d109      	bne.n	800714c <HAL_RCCEx_GetPeriphCLKFreq+0x618>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007138:	4b8a      	ldr	r3, [pc, #552]	; (8007364 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	08db      	lsrs	r3, r3, #3
 800713e:	f003 0303 	and.w	r3, r3, #3
 8007142:	4a89      	ldr	r2, [pc, #548]	; (8007368 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007144:	fa22 f303 	lsr.w	r3, r2, r3
 8007148:	63fb      	str	r3, [r7, #60]	; 0x3c
 800714a:	e01e      	b.n	800718a <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800714c:	4b85      	ldr	r3, [pc, #532]	; (8007364 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007154:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007158:	d106      	bne.n	8007168 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
 800715a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800715c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007160:	d102      	bne.n	8007168 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8007162:	4b82      	ldr	r3, [pc, #520]	; (800736c <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8007164:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007166:	e010      	b.n	800718a <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007168:	4b7e      	ldr	r3, [pc, #504]	; (8007364 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007170:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007174:	d106      	bne.n	8007184 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8007176:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007178:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800717c:	d102      	bne.n	8007184 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800717e:	4b7c      	ldr	r3, [pc, #496]	; (8007370 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007180:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007182:	e002      	b.n	800718a <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8007184:	2300      	movs	r3, #0
 8007186:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8007188:	e199      	b.n	80074be <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800718a:	e198      	b.n	80074be <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800718c:	4b79      	ldr	r3, [pc, #484]	; (8007374 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800718e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007190:	e195      	b.n	80074be <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8007192:	2300      	movs	r3, #0
 8007194:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007196:	e192      	b.n	80074be <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800719e:	d173      	bne.n	8007288 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 80071a0:	4b70      	ldr	r3, [pc, #448]	; (8007364 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80071a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071a4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80071a8:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80071aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071ac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80071b0:	d02f      	beq.n	8007212 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
 80071b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071b4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80071b8:	d863      	bhi.n	8007282 <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 80071ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d004      	beq.n	80071ca <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 80071c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80071c6:	d012      	beq.n	80071ee <HAL_RCCEx_GetPeriphCLKFreq+0x6ba>
 80071c8:	e05b      	b.n	8007282 <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80071ca:	4b66      	ldr	r3, [pc, #408]	; (8007364 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80071d2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80071d6:	d107      	bne.n	80071e8 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80071d8:	f107 0318 	add.w	r3, r7, #24
 80071dc:	4618      	mov	r0, r3
 80071de:	f000 f991 	bl	8007504 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80071e2:	69bb      	ldr	r3, [r7, #24]
 80071e4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80071e6:	e16a      	b.n	80074be <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80071e8:	2300      	movs	r3, #0
 80071ea:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80071ec:	e167      	b.n	80074be <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80071ee:	4b5d      	ldr	r3, [pc, #372]	; (8007364 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80071f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80071fa:	d107      	bne.n	800720c <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80071fc:	f107 030c 	add.w	r3, r7, #12
 8007200:	4618      	mov	r0, r3
 8007202:	f000 fad3 	bl	80077ac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8007206:	697b      	ldr	r3, [r7, #20]
 8007208:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800720a:	e158      	b.n	80074be <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800720c:	2300      	movs	r3, #0
 800720e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007210:	e155      	b.n	80074be <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007212:	4b54      	ldr	r3, [pc, #336]	; (8007364 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007214:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007216:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800721a:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800721c:	4b51      	ldr	r3, [pc, #324]	; (8007364 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	f003 0304 	and.w	r3, r3, #4
 8007224:	2b04      	cmp	r3, #4
 8007226:	d10c      	bne.n	8007242 <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
 8007228:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800722a:	2b00      	cmp	r3, #0
 800722c:	d109      	bne.n	8007242 <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800722e:	4b4d      	ldr	r3, [pc, #308]	; (8007364 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	08db      	lsrs	r3, r3, #3
 8007234:	f003 0303 	and.w	r3, r3, #3
 8007238:	4a4b      	ldr	r2, [pc, #300]	; (8007368 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800723a:	fa22 f303 	lsr.w	r3, r2, r3
 800723e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007240:	e01e      	b.n	8007280 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007242:	4b48      	ldr	r3, [pc, #288]	; (8007364 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800724a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800724e:	d106      	bne.n	800725e <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
 8007250:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007252:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007256:	d102      	bne.n	800725e <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8007258:	4b44      	ldr	r3, [pc, #272]	; (800736c <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 800725a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800725c:	e010      	b.n	8007280 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800725e:	4b41      	ldr	r3, [pc, #260]	; (8007364 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007266:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800726a:	d106      	bne.n	800727a <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 800726c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800726e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007272:	d102      	bne.n	800727a <HAL_RCCEx_GetPeriphCLKFreq+0x746>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8007274:	4b3e      	ldr	r3, [pc, #248]	; (8007370 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007276:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007278:	e002      	b.n	8007280 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800727a:	2300      	movs	r3, #0
 800727c:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800727e:	e11e      	b.n	80074be <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8007280:	e11d      	b.n	80074be <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8007282:	2300      	movs	r3, #0
 8007284:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007286:	e11a      	b.n	80074be <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800728e:	d133      	bne.n	80072f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8007290:	4b34      	ldr	r3, [pc, #208]	; (8007364 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007292:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007294:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007298:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800729a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800729c:	2b00      	cmp	r3, #0
 800729e:	d004      	beq.n	80072aa <HAL_RCCEx_GetPeriphCLKFreq+0x776>
 80072a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80072a6:	d012      	beq.n	80072ce <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
 80072a8:	e023      	b.n	80072f2 <HAL_RCCEx_GetPeriphCLKFreq+0x7be>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80072aa:	4b2e      	ldr	r3, [pc, #184]	; (8007364 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80072b2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80072b6:	d107      	bne.n	80072c8 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80072b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80072bc:	4618      	mov	r0, r3
 80072be:	f000 fbc9 	bl	8007a54 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80072c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072c4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80072c6:	e0fa      	b.n	80074be <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80072c8:	2300      	movs	r3, #0
 80072ca:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80072cc:	e0f7      	b.n	80074be <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80072ce:	4b25      	ldr	r3, [pc, #148]	; (8007364 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80072d6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80072da:	d107      	bne.n	80072ec <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80072dc:	f107 0318 	add.w	r3, r7, #24
 80072e0:	4618      	mov	r0, r3
 80072e2:	f000 f90f 	bl	8007504 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80072e6:	6a3b      	ldr	r3, [r7, #32]
 80072e8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80072ea:	e0e8      	b.n	80074be <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80072ec:	2300      	movs	r3, #0
 80072ee:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80072f0:	e0e5      	b.n	80074be <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 80072f2:	2300      	movs	r3, #0
 80072f4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80072f6:	e0e2      	b.n	80074be <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80072fe:	f040 808f 	bne.w	8007420 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8007302:	4b18      	ldr	r3, [pc, #96]	; (8007364 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007304:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007306:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800730a:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800730c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800730e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007312:	d075      	beq.n	8007400 <HAL_RCCEx_GetPeriphCLKFreq+0x8cc>
 8007314:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007316:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800731a:	d87e      	bhi.n	800741a <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 800731c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800731e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007322:	d060      	beq.n	80073e6 <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 8007324:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007326:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800732a:	d876      	bhi.n	800741a <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 800732c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800732e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007332:	d045      	beq.n	80073c0 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>
 8007334:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007336:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800733a:	d86e      	bhi.n	800741a <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 800733c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800733e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007342:	d02b      	beq.n	800739c <HAL_RCCEx_GetPeriphCLKFreq+0x868>
 8007344:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007346:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800734a:	d866      	bhi.n	800741a <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 800734c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800734e:	2b00      	cmp	r3, #0
 8007350:	d004      	beq.n	800735c <HAL_RCCEx_GetPeriphCLKFreq+0x828>
 8007352:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007354:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007358:	d00e      	beq.n	8007378 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 800735a:	e05e      	b.n	800741a <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800735c:	f000 f8bc 	bl	80074d8 <HAL_RCCEx_GetD3PCLK1Freq>
 8007360:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8007362:	e0ac      	b.n	80074be <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8007364:	58024400 	.word	0x58024400
 8007368:	03d09000 	.word	0x03d09000
 800736c:	003d0900 	.word	0x003d0900
 8007370:	007a1200 	.word	0x007a1200
 8007374:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007378:	4b53      	ldr	r3, [pc, #332]	; (80074c8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007380:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007384:	d107      	bne.n	8007396 <HAL_RCCEx_GetPeriphCLKFreq+0x862>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007386:	f107 0318 	add.w	r3, r7, #24
 800738a:	4618      	mov	r0, r3
 800738c:	f000 f8ba 	bl	8007504 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007390:	69fb      	ldr	r3, [r7, #28]
 8007392:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007394:	e093      	b.n	80074be <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007396:	2300      	movs	r3, #0
 8007398:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800739a:	e090      	b.n	80074be <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800739c:	4b4a      	ldr	r3, [pc, #296]	; (80074c8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80073a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80073a8:	d107      	bne.n	80073ba <HAL_RCCEx_GetPeriphCLKFreq+0x886>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80073aa:	f107 030c 	add.w	r3, r7, #12
 80073ae:	4618      	mov	r0, r3
 80073b0:	f000 f9fc 	bl	80077ac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80073b4:	693b      	ldr	r3, [r7, #16]
 80073b6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80073b8:	e081      	b.n	80074be <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80073ba:	2300      	movs	r3, #0
 80073bc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80073be:	e07e      	b.n	80074be <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80073c0:	4b41      	ldr	r3, [pc, #260]	; (80074c8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	f003 0304 	and.w	r3, r3, #4
 80073c8:	2b04      	cmp	r3, #4
 80073ca:	d109      	bne.n	80073e0 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80073cc:	4b3e      	ldr	r3, [pc, #248]	; (80074c8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	08db      	lsrs	r3, r3, #3
 80073d2:	f003 0303 	and.w	r3, r3, #3
 80073d6:	4a3d      	ldr	r2, [pc, #244]	; (80074cc <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 80073d8:	fa22 f303 	lsr.w	r3, r2, r3
 80073dc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80073de:	e06e      	b.n	80074be <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80073e0:	2300      	movs	r3, #0
 80073e2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80073e4:	e06b      	b.n	80074be <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80073e6:	4b38      	ldr	r3, [pc, #224]	; (80074c8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80073f2:	d102      	bne.n	80073fa <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
         {
          frequency = CSI_VALUE;
 80073f4:	4b36      	ldr	r3, [pc, #216]	; (80074d0 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80073f6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80073f8:	e061      	b.n	80074be <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80073fa:	2300      	movs	r3, #0
 80073fc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80073fe:	e05e      	b.n	80074be <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007400:	4b31      	ldr	r3, [pc, #196]	; (80074c8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007408:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800740c:	d102      	bne.n	8007414 <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>
         {
          frequency = HSE_VALUE;
 800740e:	4b31      	ldr	r3, [pc, #196]	; (80074d4 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8007410:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007412:	e054      	b.n	80074be <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007414:	2300      	movs	r3, #0
 8007416:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007418:	e051      	b.n	80074be <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 800741a:	2300      	movs	r3, #0
 800741c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800741e:	e04e      	b.n	80074be <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007426:	d148      	bne.n	80074ba <HAL_RCCEx_GetPeriphCLKFreq+0x986>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 8007428:	4b27      	ldr	r3, [pc, #156]	; (80074c8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800742a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800742c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007430:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007432:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007434:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007438:	d02a      	beq.n	8007490 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800743a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800743c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007440:	d838      	bhi.n	80074b4 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 8007442:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007444:	2b00      	cmp	r3, #0
 8007446:	d004      	beq.n	8007452 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 8007448:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800744a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800744e:	d00d      	beq.n	800746c <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 8007450:	e030      	b.n	80074b4 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007452:	4b1d      	ldr	r3, [pc, #116]	; (80074c8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800745a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800745e:	d102      	bne.n	8007466 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
         {
          frequency = HSE_VALUE;
 8007460:	4b1c      	ldr	r3, [pc, #112]	; (80074d4 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8007462:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007464:	e02b      	b.n	80074be <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007466:	2300      	movs	r3, #0
 8007468:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800746a:	e028      	b.n	80074be <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800746c:	4b16      	ldr	r3, [pc, #88]	; (80074c8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007474:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007478:	d107      	bne.n	800748a <HAL_RCCEx_GetPeriphCLKFreq+0x956>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800747a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800747e:	4618      	mov	r0, r3
 8007480:	f000 fae8 	bl	8007a54 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007484:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007486:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007488:	e019      	b.n	80074be <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800748a:	2300      	movs	r3, #0
 800748c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800748e:	e016      	b.n	80074be <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007490:	4b0d      	ldr	r3, [pc, #52]	; (80074c8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007498:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800749c:	d107      	bne.n	80074ae <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800749e:	f107 0318 	add.w	r3, r7, #24
 80074a2:	4618      	mov	r0, r3
 80074a4:	f000 f82e 	bl	8007504 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80074a8:	69fb      	ldr	r3, [r7, #28]
 80074aa:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80074ac:	e007      	b.n	80074be <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80074ae:	2300      	movs	r3, #0
 80074b0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80074b2:	e004      	b.n	80074be <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 80074b4:	2300      	movs	r3, #0
 80074b6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80074b8:	e001      	b.n	80074be <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else
    {
      frequency = 0;
 80074ba:	2300      	movs	r3, #0
 80074bc:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 80074be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80074c0:	4618      	mov	r0, r3
 80074c2:	3740      	adds	r7, #64	; 0x40
 80074c4:	46bd      	mov	sp, r7
 80074c6:	bd80      	pop	{r7, pc}
 80074c8:	58024400 	.word	0x58024400
 80074cc:	03d09000 	.word	0x03d09000
 80074d0:	003d0900 	.word	0x003d0900
 80074d4:	007a1200 	.word	0x007a1200

080074d8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80074d8:	b580      	push	{r7, lr}
 80074da:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80074dc:	f7fe fb8e 	bl	8005bfc <HAL_RCC_GetHCLKFreq>
 80074e0:	4602      	mov	r2, r0
 80074e2:	4b06      	ldr	r3, [pc, #24]	; (80074fc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80074e4:	6a1b      	ldr	r3, [r3, #32]
 80074e6:	091b      	lsrs	r3, r3, #4
 80074e8:	f003 0307 	and.w	r3, r3, #7
 80074ec:	4904      	ldr	r1, [pc, #16]	; (8007500 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80074ee:	5ccb      	ldrb	r3, [r1, r3]
 80074f0:	f003 031f 	and.w	r3, r3, #31
 80074f4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80074f8:	4618      	mov	r0, r3
 80074fa:	bd80      	pop	{r7, pc}
 80074fc:	58024400 	.word	0x58024400
 8007500:	0800cfa8 	.word	0x0800cfa8

08007504 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8007504:	b480      	push	{r7}
 8007506:	b089      	sub	sp, #36	; 0x24
 8007508:	af00      	add	r7, sp, #0
 800750a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800750c:	4ba1      	ldr	r3, [pc, #644]	; (8007794 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800750e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007510:	f003 0303 	and.w	r3, r3, #3
 8007514:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8007516:	4b9f      	ldr	r3, [pc, #636]	; (8007794 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007518:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800751a:	0b1b      	lsrs	r3, r3, #12
 800751c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007520:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007522:	4b9c      	ldr	r3, [pc, #624]	; (8007794 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007524:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007526:	091b      	lsrs	r3, r3, #4
 8007528:	f003 0301 	and.w	r3, r3, #1
 800752c:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800752e:	4b99      	ldr	r3, [pc, #612]	; (8007794 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007530:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007532:	08db      	lsrs	r3, r3, #3
 8007534:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007538:	693a      	ldr	r2, [r7, #16]
 800753a:	fb02 f303 	mul.w	r3, r2, r3
 800753e:	ee07 3a90 	vmov	s15, r3
 8007542:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007546:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800754a:	697b      	ldr	r3, [r7, #20]
 800754c:	2b00      	cmp	r3, #0
 800754e:	f000 8111 	beq.w	8007774 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8007552:	69bb      	ldr	r3, [r7, #24]
 8007554:	2b02      	cmp	r3, #2
 8007556:	f000 8083 	beq.w	8007660 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800755a:	69bb      	ldr	r3, [r7, #24]
 800755c:	2b02      	cmp	r3, #2
 800755e:	f200 80a1 	bhi.w	80076a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8007562:	69bb      	ldr	r3, [r7, #24]
 8007564:	2b00      	cmp	r3, #0
 8007566:	d003      	beq.n	8007570 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8007568:	69bb      	ldr	r3, [r7, #24]
 800756a:	2b01      	cmp	r3, #1
 800756c:	d056      	beq.n	800761c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800756e:	e099      	b.n	80076a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007570:	4b88      	ldr	r3, [pc, #544]	; (8007794 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	f003 0320 	and.w	r3, r3, #32
 8007578:	2b00      	cmp	r3, #0
 800757a:	d02d      	beq.n	80075d8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800757c:	4b85      	ldr	r3, [pc, #532]	; (8007794 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	08db      	lsrs	r3, r3, #3
 8007582:	f003 0303 	and.w	r3, r3, #3
 8007586:	4a84      	ldr	r2, [pc, #528]	; (8007798 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8007588:	fa22 f303 	lsr.w	r3, r2, r3
 800758c:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800758e:	68bb      	ldr	r3, [r7, #8]
 8007590:	ee07 3a90 	vmov	s15, r3
 8007594:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007598:	697b      	ldr	r3, [r7, #20]
 800759a:	ee07 3a90 	vmov	s15, r3
 800759e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80075a6:	4b7b      	ldr	r3, [pc, #492]	; (8007794 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80075a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075ae:	ee07 3a90 	vmov	s15, r3
 80075b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80075ba:	eddf 5a78 	vldr	s11, [pc, #480]	; 800779c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80075be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80075c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80075c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80075ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80075ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075d2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80075d6:	e087      	b.n	80076e8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80075d8:	697b      	ldr	r3, [r7, #20]
 80075da:	ee07 3a90 	vmov	s15, r3
 80075de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075e2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80077a0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80075e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80075ea:	4b6a      	ldr	r3, [pc, #424]	; (8007794 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80075ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075f2:	ee07 3a90 	vmov	s15, r3
 80075f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80075fe:	eddf 5a67 	vldr	s11, [pc, #412]	; 800779c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007602:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007606:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800760a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800760e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007612:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007616:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800761a:	e065      	b.n	80076e8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800761c:	697b      	ldr	r3, [r7, #20]
 800761e:	ee07 3a90 	vmov	s15, r3
 8007622:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007626:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80077a4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800762a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800762e:	4b59      	ldr	r3, [pc, #356]	; (8007794 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007630:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007632:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007636:	ee07 3a90 	vmov	s15, r3
 800763a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800763e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007642:	eddf 5a56 	vldr	s11, [pc, #344]	; 800779c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007646:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800764a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800764e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007652:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007656:	ee67 7a27 	vmul.f32	s15, s14, s15
 800765a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800765e:	e043      	b.n	80076e8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007660:	697b      	ldr	r3, [r7, #20]
 8007662:	ee07 3a90 	vmov	s15, r3
 8007666:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800766a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80077a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800766e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007672:	4b48      	ldr	r3, [pc, #288]	; (8007794 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007674:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007676:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800767a:	ee07 3a90 	vmov	s15, r3
 800767e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007682:	ed97 6a03 	vldr	s12, [r7, #12]
 8007686:	eddf 5a45 	vldr	s11, [pc, #276]	; 800779c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800768a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800768e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007692:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007696:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800769a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800769e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80076a2:	e021      	b.n	80076e8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80076a4:	697b      	ldr	r3, [r7, #20]
 80076a6:	ee07 3a90 	vmov	s15, r3
 80076aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076ae:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80077a4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80076b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80076b6:	4b37      	ldr	r3, [pc, #220]	; (8007794 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80076b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076be:	ee07 3a90 	vmov	s15, r3
 80076c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80076ca:	eddf 5a34 	vldr	s11, [pc, #208]	; 800779c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80076ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80076d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80076d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80076da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80076de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076e2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80076e6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80076e8:	4b2a      	ldr	r3, [pc, #168]	; (8007794 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80076ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076ec:	0a5b      	lsrs	r3, r3, #9
 80076ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80076f2:	ee07 3a90 	vmov	s15, r3
 80076f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076fa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80076fe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007702:	edd7 6a07 	vldr	s13, [r7, #28]
 8007706:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800770a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800770e:	ee17 2a90 	vmov	r2, s15
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8007716:	4b1f      	ldr	r3, [pc, #124]	; (8007794 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007718:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800771a:	0c1b      	lsrs	r3, r3, #16
 800771c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007720:	ee07 3a90 	vmov	s15, r3
 8007724:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007728:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800772c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007730:	edd7 6a07 	vldr	s13, [r7, #28]
 8007734:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007738:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800773c:	ee17 2a90 	vmov	r2, s15
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8007744:	4b13      	ldr	r3, [pc, #76]	; (8007794 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007746:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007748:	0e1b      	lsrs	r3, r3, #24
 800774a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800774e:	ee07 3a90 	vmov	s15, r3
 8007752:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007756:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800775a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800775e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007762:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007766:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800776a:	ee17 2a90 	vmov	r2, s15
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007772:	e008      	b.n	8007786 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	2200      	movs	r2, #0
 8007778:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	2200      	movs	r2, #0
 800777e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	2200      	movs	r2, #0
 8007784:	609a      	str	r2, [r3, #8]
}
 8007786:	bf00      	nop
 8007788:	3724      	adds	r7, #36	; 0x24
 800778a:	46bd      	mov	sp, r7
 800778c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007790:	4770      	bx	lr
 8007792:	bf00      	nop
 8007794:	58024400 	.word	0x58024400
 8007798:	03d09000 	.word	0x03d09000
 800779c:	46000000 	.word	0x46000000
 80077a0:	4c742400 	.word	0x4c742400
 80077a4:	4a742400 	.word	0x4a742400
 80077a8:	4af42400 	.word	0x4af42400

080077ac <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80077ac:	b480      	push	{r7}
 80077ae:	b089      	sub	sp, #36	; 0x24
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80077b4:	4ba1      	ldr	r3, [pc, #644]	; (8007a3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80077b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077b8:	f003 0303 	and.w	r3, r3, #3
 80077bc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80077be:	4b9f      	ldr	r3, [pc, #636]	; (8007a3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80077c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077c2:	0d1b      	lsrs	r3, r3, #20
 80077c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80077c8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80077ca:	4b9c      	ldr	r3, [pc, #624]	; (8007a3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80077cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077ce:	0a1b      	lsrs	r3, r3, #8
 80077d0:	f003 0301 	and.w	r3, r3, #1
 80077d4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80077d6:	4b99      	ldr	r3, [pc, #612]	; (8007a3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80077d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077da:	08db      	lsrs	r3, r3, #3
 80077dc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80077e0:	693a      	ldr	r2, [r7, #16]
 80077e2:	fb02 f303 	mul.w	r3, r2, r3
 80077e6:	ee07 3a90 	vmov	s15, r3
 80077ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077ee:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80077f2:	697b      	ldr	r3, [r7, #20]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	f000 8111 	beq.w	8007a1c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80077fa:	69bb      	ldr	r3, [r7, #24]
 80077fc:	2b02      	cmp	r3, #2
 80077fe:	f000 8083 	beq.w	8007908 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8007802:	69bb      	ldr	r3, [r7, #24]
 8007804:	2b02      	cmp	r3, #2
 8007806:	f200 80a1 	bhi.w	800794c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800780a:	69bb      	ldr	r3, [r7, #24]
 800780c:	2b00      	cmp	r3, #0
 800780e:	d003      	beq.n	8007818 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007810:	69bb      	ldr	r3, [r7, #24]
 8007812:	2b01      	cmp	r3, #1
 8007814:	d056      	beq.n	80078c4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8007816:	e099      	b.n	800794c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007818:	4b88      	ldr	r3, [pc, #544]	; (8007a3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	f003 0320 	and.w	r3, r3, #32
 8007820:	2b00      	cmp	r3, #0
 8007822:	d02d      	beq.n	8007880 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007824:	4b85      	ldr	r3, [pc, #532]	; (8007a3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	08db      	lsrs	r3, r3, #3
 800782a:	f003 0303 	and.w	r3, r3, #3
 800782e:	4a84      	ldr	r2, [pc, #528]	; (8007a40 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007830:	fa22 f303 	lsr.w	r3, r2, r3
 8007834:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007836:	68bb      	ldr	r3, [r7, #8]
 8007838:	ee07 3a90 	vmov	s15, r3
 800783c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007840:	697b      	ldr	r3, [r7, #20]
 8007842:	ee07 3a90 	vmov	s15, r3
 8007846:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800784a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800784e:	4b7b      	ldr	r3, [pc, #492]	; (8007a3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007852:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007856:	ee07 3a90 	vmov	s15, r3
 800785a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800785e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007862:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007a44 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007866:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800786a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800786e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007872:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007876:	ee67 7a27 	vmul.f32	s15, s14, s15
 800787a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800787e:	e087      	b.n	8007990 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007880:	697b      	ldr	r3, [r7, #20]
 8007882:	ee07 3a90 	vmov	s15, r3
 8007886:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800788a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007a48 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800788e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007892:	4b6a      	ldr	r3, [pc, #424]	; (8007a3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007896:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800789a:	ee07 3a90 	vmov	s15, r3
 800789e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80078a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80078a6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007a44 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80078aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80078ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80078b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80078b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80078ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80078be:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80078c2:	e065      	b.n	8007990 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80078c4:	697b      	ldr	r3, [r7, #20]
 80078c6:	ee07 3a90 	vmov	s15, r3
 80078ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078ce:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007a4c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80078d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80078d6:	4b59      	ldr	r3, [pc, #356]	; (8007a3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80078d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078de:	ee07 3a90 	vmov	s15, r3
 80078e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80078e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80078ea:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007a44 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80078ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80078f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80078f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80078fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80078fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007902:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007906:	e043      	b.n	8007990 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007908:	697b      	ldr	r3, [r7, #20]
 800790a:	ee07 3a90 	vmov	s15, r3
 800790e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007912:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007a50 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8007916:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800791a:	4b48      	ldr	r3, [pc, #288]	; (8007a3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800791c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800791e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007922:	ee07 3a90 	vmov	s15, r3
 8007926:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800792a:	ed97 6a03 	vldr	s12, [r7, #12]
 800792e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007a44 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007932:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007936:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800793a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800793e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007942:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007946:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800794a:	e021      	b.n	8007990 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800794c:	697b      	ldr	r3, [r7, #20]
 800794e:	ee07 3a90 	vmov	s15, r3
 8007952:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007956:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007a4c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800795a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800795e:	4b37      	ldr	r3, [pc, #220]	; (8007a3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007962:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007966:	ee07 3a90 	vmov	s15, r3
 800796a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800796e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007972:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007a44 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007976:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800797a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800797e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007982:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007986:	ee67 7a27 	vmul.f32	s15, s14, s15
 800798a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800798e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8007990:	4b2a      	ldr	r3, [pc, #168]	; (8007a3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007994:	0a5b      	lsrs	r3, r3, #9
 8007996:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800799a:	ee07 3a90 	vmov	s15, r3
 800799e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079a2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80079a6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80079aa:	edd7 6a07 	vldr	s13, [r7, #28]
 80079ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80079b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80079b6:	ee17 2a90 	vmov	r2, s15
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80079be:	4b1f      	ldr	r3, [pc, #124]	; (8007a3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80079c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079c2:	0c1b      	lsrs	r3, r3, #16
 80079c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80079c8:	ee07 3a90 	vmov	s15, r3
 80079cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079d0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80079d4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80079d8:	edd7 6a07 	vldr	s13, [r7, #28]
 80079dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80079e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80079e4:	ee17 2a90 	vmov	r2, s15
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80079ec:	4b13      	ldr	r3, [pc, #76]	; (8007a3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80079ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079f0:	0e1b      	lsrs	r3, r3, #24
 80079f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80079f6:	ee07 3a90 	vmov	s15, r3
 80079fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079fe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007a02:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007a06:	edd7 6a07 	vldr	s13, [r7, #28]
 8007a0a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007a0e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007a12:	ee17 2a90 	vmov	r2, s15
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007a1a:	e008      	b.n	8007a2e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	2200      	movs	r2, #0
 8007a20:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	2200      	movs	r2, #0
 8007a26:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	2200      	movs	r2, #0
 8007a2c:	609a      	str	r2, [r3, #8]
}
 8007a2e:	bf00      	nop
 8007a30:	3724      	adds	r7, #36	; 0x24
 8007a32:	46bd      	mov	sp, r7
 8007a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a38:	4770      	bx	lr
 8007a3a:	bf00      	nop
 8007a3c:	58024400 	.word	0x58024400
 8007a40:	03d09000 	.word	0x03d09000
 8007a44:	46000000 	.word	0x46000000
 8007a48:	4c742400 	.word	0x4c742400
 8007a4c:	4a742400 	.word	0x4a742400
 8007a50:	4af42400 	.word	0x4af42400

08007a54 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8007a54:	b480      	push	{r7}
 8007a56:	b089      	sub	sp, #36	; 0x24
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007a5c:	4ba0      	ldr	r3, [pc, #640]	; (8007ce0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007a5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a60:	f003 0303 	and.w	r3, r3, #3
 8007a64:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8007a66:	4b9e      	ldr	r3, [pc, #632]	; (8007ce0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007a68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a6a:	091b      	lsrs	r3, r3, #4
 8007a6c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007a70:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8007a72:	4b9b      	ldr	r3, [pc, #620]	; (8007ce0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007a74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a76:	f003 0301 	and.w	r3, r3, #1
 8007a7a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8007a7c:	4b98      	ldr	r3, [pc, #608]	; (8007ce0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007a7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a80:	08db      	lsrs	r3, r3, #3
 8007a82:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007a86:	693a      	ldr	r2, [r7, #16]
 8007a88:	fb02 f303 	mul.w	r3, r2, r3
 8007a8c:	ee07 3a90 	vmov	s15, r3
 8007a90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a94:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8007a98:	697b      	ldr	r3, [r7, #20]
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	f000 8111 	beq.w	8007cc2 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8007aa0:	69bb      	ldr	r3, [r7, #24]
 8007aa2:	2b02      	cmp	r3, #2
 8007aa4:	f000 8083 	beq.w	8007bae <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8007aa8:	69bb      	ldr	r3, [r7, #24]
 8007aaa:	2b02      	cmp	r3, #2
 8007aac:	f200 80a1 	bhi.w	8007bf2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8007ab0:	69bb      	ldr	r3, [r7, #24]
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d003      	beq.n	8007abe <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8007ab6:	69bb      	ldr	r3, [r7, #24]
 8007ab8:	2b01      	cmp	r3, #1
 8007aba:	d056      	beq.n	8007b6a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8007abc:	e099      	b.n	8007bf2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007abe:	4b88      	ldr	r3, [pc, #544]	; (8007ce0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	f003 0320 	and.w	r3, r3, #32
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d02d      	beq.n	8007b26 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007aca:	4b85      	ldr	r3, [pc, #532]	; (8007ce0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	08db      	lsrs	r3, r3, #3
 8007ad0:	f003 0303 	and.w	r3, r3, #3
 8007ad4:	4a83      	ldr	r2, [pc, #524]	; (8007ce4 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8007ad6:	fa22 f303 	lsr.w	r3, r2, r3
 8007ada:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007adc:	68bb      	ldr	r3, [r7, #8]
 8007ade:	ee07 3a90 	vmov	s15, r3
 8007ae2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ae6:	697b      	ldr	r3, [r7, #20]
 8007ae8:	ee07 3a90 	vmov	s15, r3
 8007aec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007af0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007af4:	4b7a      	ldr	r3, [pc, #488]	; (8007ce0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007af6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007af8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007afc:	ee07 3a90 	vmov	s15, r3
 8007b00:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b04:	ed97 6a03 	vldr	s12, [r7, #12]
 8007b08:	eddf 5a77 	vldr	s11, [pc, #476]	; 8007ce8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007b0c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b10:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b14:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007b18:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b20:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007b24:	e087      	b.n	8007c36 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007b26:	697b      	ldr	r3, [r7, #20]
 8007b28:	ee07 3a90 	vmov	s15, r3
 8007b2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b30:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8007cec <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8007b34:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b38:	4b69      	ldr	r3, [pc, #420]	; (8007ce0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007b3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b40:	ee07 3a90 	vmov	s15, r3
 8007b44:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b48:	ed97 6a03 	vldr	s12, [r7, #12]
 8007b4c:	eddf 5a66 	vldr	s11, [pc, #408]	; 8007ce8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007b50:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b54:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b58:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007b5c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b60:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b64:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007b68:	e065      	b.n	8007c36 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007b6a:	697b      	ldr	r3, [r7, #20]
 8007b6c:	ee07 3a90 	vmov	s15, r3
 8007b70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b74:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8007cf0 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8007b78:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b7c:	4b58      	ldr	r3, [pc, #352]	; (8007ce0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007b7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b84:	ee07 3a90 	vmov	s15, r3
 8007b88:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b8c:	ed97 6a03 	vldr	s12, [r7, #12]
 8007b90:	eddf 5a55 	vldr	s11, [pc, #340]	; 8007ce8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007b94:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b98:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b9c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007ba0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ba4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ba8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007bac:	e043      	b.n	8007c36 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007bae:	697b      	ldr	r3, [r7, #20]
 8007bb0:	ee07 3a90 	vmov	s15, r3
 8007bb4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007bb8:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8007cf4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8007bbc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007bc0:	4b47      	ldr	r3, [pc, #284]	; (8007ce0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007bc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bc4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007bc8:	ee07 3a90 	vmov	s15, r3
 8007bcc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007bd0:	ed97 6a03 	vldr	s12, [r7, #12]
 8007bd4:	eddf 5a44 	vldr	s11, [pc, #272]	; 8007ce8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007bd8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007bdc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007be0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007be4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007be8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007bec:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007bf0:	e021      	b.n	8007c36 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007bf2:	697b      	ldr	r3, [r7, #20]
 8007bf4:	ee07 3a90 	vmov	s15, r3
 8007bf8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007bfc:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8007cec <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8007c00:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c04:	4b36      	ldr	r3, [pc, #216]	; (8007ce0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007c06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c0c:	ee07 3a90 	vmov	s15, r3
 8007c10:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c14:	ed97 6a03 	vldr	s12, [r7, #12]
 8007c18:	eddf 5a33 	vldr	s11, [pc, #204]	; 8007ce8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007c1c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c20:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c24:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007c28:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c30:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007c34:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8007c36:	4b2a      	ldr	r3, [pc, #168]	; (8007ce0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c3a:	0a5b      	lsrs	r3, r3, #9
 8007c3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007c40:	ee07 3a90 	vmov	s15, r3
 8007c44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c48:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007c4c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007c50:	edd7 6a07 	vldr	s13, [r7, #28]
 8007c54:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007c58:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007c5c:	ee17 2a90 	vmov	r2, s15
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8007c64:	4b1e      	ldr	r3, [pc, #120]	; (8007ce0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007c66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c68:	0c1b      	lsrs	r3, r3, #16
 8007c6a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007c6e:	ee07 3a90 	vmov	s15, r3
 8007c72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c76:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007c7a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007c7e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007c82:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007c86:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007c8a:	ee17 2a90 	vmov	r2, s15
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8007c92:	4b13      	ldr	r3, [pc, #76]	; (8007ce0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c96:	0e1b      	lsrs	r3, r3, #24
 8007c98:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007c9c:	ee07 3a90 	vmov	s15, r3
 8007ca0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ca4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007ca8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007cac:	edd7 6a07 	vldr	s13, [r7, #28]
 8007cb0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007cb4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007cb8:	ee17 2a90 	vmov	r2, s15
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8007cc0:	e008      	b.n	8007cd4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	2200      	movs	r2, #0
 8007cc6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	2200      	movs	r2, #0
 8007ccc:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	2200      	movs	r2, #0
 8007cd2:	609a      	str	r2, [r3, #8]
}
 8007cd4:	bf00      	nop
 8007cd6:	3724      	adds	r7, #36	; 0x24
 8007cd8:	46bd      	mov	sp, r7
 8007cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cde:	4770      	bx	lr
 8007ce0:	58024400 	.word	0x58024400
 8007ce4:	03d09000 	.word	0x03d09000
 8007ce8:	46000000 	.word	0x46000000
 8007cec:	4c742400 	.word	0x4c742400
 8007cf0:	4a742400 	.word	0x4a742400
 8007cf4:	4af42400 	.word	0x4af42400

08007cf8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007cf8:	b580      	push	{r7, lr}
 8007cfa:	b084      	sub	sp, #16
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	6078      	str	r0, [r7, #4]
 8007d00:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007d02:	2300      	movs	r3, #0
 8007d04:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007d06:	4b53      	ldr	r3, [pc, #332]	; (8007e54 <RCCEx_PLL2_Config+0x15c>)
 8007d08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d0a:	f003 0303 	and.w	r3, r3, #3
 8007d0e:	2b03      	cmp	r3, #3
 8007d10:	d101      	bne.n	8007d16 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8007d12:	2301      	movs	r3, #1
 8007d14:	e099      	b.n	8007e4a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007d16:	4b4f      	ldr	r3, [pc, #316]	; (8007e54 <RCCEx_PLL2_Config+0x15c>)
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	4a4e      	ldr	r2, [pc, #312]	; (8007e54 <RCCEx_PLL2_Config+0x15c>)
 8007d1c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007d20:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007d22:	f7f9 fd77 	bl	8001814 <HAL_GetTick>
 8007d26:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007d28:	e008      	b.n	8007d3c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007d2a:	f7f9 fd73 	bl	8001814 <HAL_GetTick>
 8007d2e:	4602      	mov	r2, r0
 8007d30:	68bb      	ldr	r3, [r7, #8]
 8007d32:	1ad3      	subs	r3, r2, r3
 8007d34:	2b02      	cmp	r3, #2
 8007d36:	d901      	bls.n	8007d3c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007d38:	2303      	movs	r3, #3
 8007d3a:	e086      	b.n	8007e4a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007d3c:	4b45      	ldr	r3, [pc, #276]	; (8007e54 <RCCEx_PLL2_Config+0x15c>)
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d1f0      	bne.n	8007d2a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007d48:	4b42      	ldr	r3, [pc, #264]	; (8007e54 <RCCEx_PLL2_Config+0x15c>)
 8007d4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d4c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	031b      	lsls	r3, r3, #12
 8007d56:	493f      	ldr	r1, [pc, #252]	; (8007e54 <RCCEx_PLL2_Config+0x15c>)
 8007d58:	4313      	orrs	r3, r2
 8007d5a:	628b      	str	r3, [r1, #40]	; 0x28
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	685b      	ldr	r3, [r3, #4]
 8007d60:	3b01      	subs	r3, #1
 8007d62:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	689b      	ldr	r3, [r3, #8]
 8007d6a:	3b01      	subs	r3, #1
 8007d6c:	025b      	lsls	r3, r3, #9
 8007d6e:	b29b      	uxth	r3, r3
 8007d70:	431a      	orrs	r2, r3
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	68db      	ldr	r3, [r3, #12]
 8007d76:	3b01      	subs	r3, #1
 8007d78:	041b      	lsls	r3, r3, #16
 8007d7a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007d7e:	431a      	orrs	r2, r3
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	691b      	ldr	r3, [r3, #16]
 8007d84:	3b01      	subs	r3, #1
 8007d86:	061b      	lsls	r3, r3, #24
 8007d88:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007d8c:	4931      	ldr	r1, [pc, #196]	; (8007e54 <RCCEx_PLL2_Config+0x15c>)
 8007d8e:	4313      	orrs	r3, r2
 8007d90:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007d92:	4b30      	ldr	r3, [pc, #192]	; (8007e54 <RCCEx_PLL2_Config+0x15c>)
 8007d94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d96:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	695b      	ldr	r3, [r3, #20]
 8007d9e:	492d      	ldr	r1, [pc, #180]	; (8007e54 <RCCEx_PLL2_Config+0x15c>)
 8007da0:	4313      	orrs	r3, r2
 8007da2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007da4:	4b2b      	ldr	r3, [pc, #172]	; (8007e54 <RCCEx_PLL2_Config+0x15c>)
 8007da6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007da8:	f023 0220 	bic.w	r2, r3, #32
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	699b      	ldr	r3, [r3, #24]
 8007db0:	4928      	ldr	r1, [pc, #160]	; (8007e54 <RCCEx_PLL2_Config+0x15c>)
 8007db2:	4313      	orrs	r3, r2
 8007db4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007db6:	4b27      	ldr	r3, [pc, #156]	; (8007e54 <RCCEx_PLL2_Config+0x15c>)
 8007db8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dba:	4a26      	ldr	r2, [pc, #152]	; (8007e54 <RCCEx_PLL2_Config+0x15c>)
 8007dbc:	f023 0310 	bic.w	r3, r3, #16
 8007dc0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007dc2:	4b24      	ldr	r3, [pc, #144]	; (8007e54 <RCCEx_PLL2_Config+0x15c>)
 8007dc4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007dc6:	4b24      	ldr	r3, [pc, #144]	; (8007e58 <RCCEx_PLL2_Config+0x160>)
 8007dc8:	4013      	ands	r3, r2
 8007dca:	687a      	ldr	r2, [r7, #4]
 8007dcc:	69d2      	ldr	r2, [r2, #28]
 8007dce:	00d2      	lsls	r2, r2, #3
 8007dd0:	4920      	ldr	r1, [pc, #128]	; (8007e54 <RCCEx_PLL2_Config+0x15c>)
 8007dd2:	4313      	orrs	r3, r2
 8007dd4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007dd6:	4b1f      	ldr	r3, [pc, #124]	; (8007e54 <RCCEx_PLL2_Config+0x15c>)
 8007dd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dda:	4a1e      	ldr	r2, [pc, #120]	; (8007e54 <RCCEx_PLL2_Config+0x15c>)
 8007ddc:	f043 0310 	orr.w	r3, r3, #16
 8007de0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8007de2:	683b      	ldr	r3, [r7, #0]
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d106      	bne.n	8007df6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007de8:	4b1a      	ldr	r3, [pc, #104]	; (8007e54 <RCCEx_PLL2_Config+0x15c>)
 8007dea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dec:	4a19      	ldr	r2, [pc, #100]	; (8007e54 <RCCEx_PLL2_Config+0x15c>)
 8007dee:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007df2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007df4:	e00f      	b.n	8007e16 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8007df6:	683b      	ldr	r3, [r7, #0]
 8007df8:	2b01      	cmp	r3, #1
 8007dfa:	d106      	bne.n	8007e0a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007dfc:	4b15      	ldr	r3, [pc, #84]	; (8007e54 <RCCEx_PLL2_Config+0x15c>)
 8007dfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e00:	4a14      	ldr	r2, [pc, #80]	; (8007e54 <RCCEx_PLL2_Config+0x15c>)
 8007e02:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007e06:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007e08:	e005      	b.n	8007e16 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007e0a:	4b12      	ldr	r3, [pc, #72]	; (8007e54 <RCCEx_PLL2_Config+0x15c>)
 8007e0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e0e:	4a11      	ldr	r2, [pc, #68]	; (8007e54 <RCCEx_PLL2_Config+0x15c>)
 8007e10:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007e14:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007e16:	4b0f      	ldr	r3, [pc, #60]	; (8007e54 <RCCEx_PLL2_Config+0x15c>)
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	4a0e      	ldr	r2, [pc, #56]	; (8007e54 <RCCEx_PLL2_Config+0x15c>)
 8007e1c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007e20:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007e22:	f7f9 fcf7 	bl	8001814 <HAL_GetTick>
 8007e26:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007e28:	e008      	b.n	8007e3c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007e2a:	f7f9 fcf3 	bl	8001814 <HAL_GetTick>
 8007e2e:	4602      	mov	r2, r0
 8007e30:	68bb      	ldr	r3, [r7, #8]
 8007e32:	1ad3      	subs	r3, r2, r3
 8007e34:	2b02      	cmp	r3, #2
 8007e36:	d901      	bls.n	8007e3c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007e38:	2303      	movs	r3, #3
 8007e3a:	e006      	b.n	8007e4a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007e3c:	4b05      	ldr	r3, [pc, #20]	; (8007e54 <RCCEx_PLL2_Config+0x15c>)
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d0f0      	beq.n	8007e2a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007e48:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	3710      	adds	r7, #16
 8007e4e:	46bd      	mov	sp, r7
 8007e50:	bd80      	pop	{r7, pc}
 8007e52:	bf00      	nop
 8007e54:	58024400 	.word	0x58024400
 8007e58:	ffff0007 	.word	0xffff0007

08007e5c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007e5c:	b580      	push	{r7, lr}
 8007e5e:	b084      	sub	sp, #16
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	6078      	str	r0, [r7, #4]
 8007e64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007e66:	2300      	movs	r3, #0
 8007e68:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007e6a:	4b53      	ldr	r3, [pc, #332]	; (8007fb8 <RCCEx_PLL3_Config+0x15c>)
 8007e6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e6e:	f003 0303 	and.w	r3, r3, #3
 8007e72:	2b03      	cmp	r3, #3
 8007e74:	d101      	bne.n	8007e7a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007e76:	2301      	movs	r3, #1
 8007e78:	e099      	b.n	8007fae <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007e7a:	4b4f      	ldr	r3, [pc, #316]	; (8007fb8 <RCCEx_PLL3_Config+0x15c>)
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	4a4e      	ldr	r2, [pc, #312]	; (8007fb8 <RCCEx_PLL3_Config+0x15c>)
 8007e80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007e84:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007e86:	f7f9 fcc5 	bl	8001814 <HAL_GetTick>
 8007e8a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007e8c:	e008      	b.n	8007ea0 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8007e8e:	f7f9 fcc1 	bl	8001814 <HAL_GetTick>
 8007e92:	4602      	mov	r2, r0
 8007e94:	68bb      	ldr	r3, [r7, #8]
 8007e96:	1ad3      	subs	r3, r2, r3
 8007e98:	2b02      	cmp	r3, #2
 8007e9a:	d901      	bls.n	8007ea0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007e9c:	2303      	movs	r3, #3
 8007e9e:	e086      	b.n	8007fae <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007ea0:	4b45      	ldr	r3, [pc, #276]	; (8007fb8 <RCCEx_PLL3_Config+0x15c>)
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d1f0      	bne.n	8007e8e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007eac:	4b42      	ldr	r3, [pc, #264]	; (8007fb8 <RCCEx_PLL3_Config+0x15c>)
 8007eae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007eb0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	051b      	lsls	r3, r3, #20
 8007eba:	493f      	ldr	r1, [pc, #252]	; (8007fb8 <RCCEx_PLL3_Config+0x15c>)
 8007ebc:	4313      	orrs	r3, r2
 8007ebe:	628b      	str	r3, [r1, #40]	; 0x28
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	685b      	ldr	r3, [r3, #4]
 8007ec4:	3b01      	subs	r3, #1
 8007ec6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	689b      	ldr	r3, [r3, #8]
 8007ece:	3b01      	subs	r3, #1
 8007ed0:	025b      	lsls	r3, r3, #9
 8007ed2:	b29b      	uxth	r3, r3
 8007ed4:	431a      	orrs	r2, r3
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	68db      	ldr	r3, [r3, #12]
 8007eda:	3b01      	subs	r3, #1
 8007edc:	041b      	lsls	r3, r3, #16
 8007ede:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007ee2:	431a      	orrs	r2, r3
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	691b      	ldr	r3, [r3, #16]
 8007ee8:	3b01      	subs	r3, #1
 8007eea:	061b      	lsls	r3, r3, #24
 8007eec:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007ef0:	4931      	ldr	r1, [pc, #196]	; (8007fb8 <RCCEx_PLL3_Config+0x15c>)
 8007ef2:	4313      	orrs	r3, r2
 8007ef4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007ef6:	4b30      	ldr	r3, [pc, #192]	; (8007fb8 <RCCEx_PLL3_Config+0x15c>)
 8007ef8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007efa:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	695b      	ldr	r3, [r3, #20]
 8007f02:	492d      	ldr	r1, [pc, #180]	; (8007fb8 <RCCEx_PLL3_Config+0x15c>)
 8007f04:	4313      	orrs	r3, r2
 8007f06:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007f08:	4b2b      	ldr	r3, [pc, #172]	; (8007fb8 <RCCEx_PLL3_Config+0x15c>)
 8007f0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f0c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	699b      	ldr	r3, [r3, #24]
 8007f14:	4928      	ldr	r1, [pc, #160]	; (8007fb8 <RCCEx_PLL3_Config+0x15c>)
 8007f16:	4313      	orrs	r3, r2
 8007f18:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007f1a:	4b27      	ldr	r3, [pc, #156]	; (8007fb8 <RCCEx_PLL3_Config+0x15c>)
 8007f1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f1e:	4a26      	ldr	r2, [pc, #152]	; (8007fb8 <RCCEx_PLL3_Config+0x15c>)
 8007f20:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007f24:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007f26:	4b24      	ldr	r3, [pc, #144]	; (8007fb8 <RCCEx_PLL3_Config+0x15c>)
 8007f28:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007f2a:	4b24      	ldr	r3, [pc, #144]	; (8007fbc <RCCEx_PLL3_Config+0x160>)
 8007f2c:	4013      	ands	r3, r2
 8007f2e:	687a      	ldr	r2, [r7, #4]
 8007f30:	69d2      	ldr	r2, [r2, #28]
 8007f32:	00d2      	lsls	r2, r2, #3
 8007f34:	4920      	ldr	r1, [pc, #128]	; (8007fb8 <RCCEx_PLL3_Config+0x15c>)
 8007f36:	4313      	orrs	r3, r2
 8007f38:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007f3a:	4b1f      	ldr	r3, [pc, #124]	; (8007fb8 <RCCEx_PLL3_Config+0x15c>)
 8007f3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f3e:	4a1e      	ldr	r2, [pc, #120]	; (8007fb8 <RCCEx_PLL3_Config+0x15c>)
 8007f40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007f44:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8007f46:	683b      	ldr	r3, [r7, #0]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d106      	bne.n	8007f5a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007f4c:	4b1a      	ldr	r3, [pc, #104]	; (8007fb8 <RCCEx_PLL3_Config+0x15c>)
 8007f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f50:	4a19      	ldr	r2, [pc, #100]	; (8007fb8 <RCCEx_PLL3_Config+0x15c>)
 8007f52:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007f56:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007f58:	e00f      	b.n	8007f7a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8007f5a:	683b      	ldr	r3, [r7, #0]
 8007f5c:	2b01      	cmp	r3, #1
 8007f5e:	d106      	bne.n	8007f6e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007f60:	4b15      	ldr	r3, [pc, #84]	; (8007fb8 <RCCEx_PLL3_Config+0x15c>)
 8007f62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f64:	4a14      	ldr	r2, [pc, #80]	; (8007fb8 <RCCEx_PLL3_Config+0x15c>)
 8007f66:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007f6a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007f6c:	e005      	b.n	8007f7a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007f6e:	4b12      	ldr	r3, [pc, #72]	; (8007fb8 <RCCEx_PLL3_Config+0x15c>)
 8007f70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f72:	4a11      	ldr	r2, [pc, #68]	; (8007fb8 <RCCEx_PLL3_Config+0x15c>)
 8007f74:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007f78:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007f7a:	4b0f      	ldr	r3, [pc, #60]	; (8007fb8 <RCCEx_PLL3_Config+0x15c>)
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	4a0e      	ldr	r2, [pc, #56]	; (8007fb8 <RCCEx_PLL3_Config+0x15c>)
 8007f80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007f84:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007f86:	f7f9 fc45 	bl	8001814 <HAL_GetTick>
 8007f8a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007f8c:	e008      	b.n	8007fa0 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8007f8e:	f7f9 fc41 	bl	8001814 <HAL_GetTick>
 8007f92:	4602      	mov	r2, r0
 8007f94:	68bb      	ldr	r3, [r7, #8]
 8007f96:	1ad3      	subs	r3, r2, r3
 8007f98:	2b02      	cmp	r3, #2
 8007f9a:	d901      	bls.n	8007fa0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007f9c:	2303      	movs	r3, #3
 8007f9e:	e006      	b.n	8007fae <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007fa0:	4b05      	ldr	r3, [pc, #20]	; (8007fb8 <RCCEx_PLL3_Config+0x15c>)
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d0f0      	beq.n	8007f8e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007fac:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fae:	4618      	mov	r0, r3
 8007fb0:	3710      	adds	r7, #16
 8007fb2:	46bd      	mov	sp, r7
 8007fb4:	bd80      	pop	{r7, pc}
 8007fb6:	bf00      	nop
 8007fb8:	58024400 	.word	0x58024400
 8007fbc:	ffff0007 	.word	0xffff0007

08007fc0 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8007fc0:	b580      	push	{r7, lr}
 8007fc2:	b08a      	sub	sp, #40	; 0x28
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	6078      	str	r0, [r7, #4]
  uint32_t ckstr_bits;
  uint32_t syncen_bits;
  SAI_TypeDef *SaiBaseAddress;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d101      	bne.n	8007fd2 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 8007fce:	2301      	movs	r3, #1
 8007fd0:	e283      	b.n	80084da <HAL_SAI_Init+0x51a>
  assert_param(IS_SAI_BLOCK_FIRST_BIT(hsai->Init.FirstBit));
  assert_param(IS_SAI_BLOCK_CLOCK_STROBING(hsai->Init.ClockStrobing));
  assert_param(IS_SAI_BLOCK_SYNCHRO(hsai->Init.Synchro));
#if defined(SAI_VER_V2_X) 
  /* SAI Peripheral version depends on STM32H7 device revision ID */
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 8007fd2:	f7f9 fc4f 	bl	8001874 <HAL_GetREVID>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007fdc:	2b01      	cmp	r3, #1
 8007fde:	d113      	bne.n	8008008 <HAL_SAI_Init+0x48>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 or SAI4 sub-block A, in master RX mode with free protocol */
#if defined(SAI4)
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	4a94      	ldr	r2, [pc, #592]	; (8008238 <HAL_SAI_Init+0x278>)
 8007fe6:	4293      	cmp	r3, r2
 8007fe8:	d004      	beq.n	8007ff4 <HAL_SAI_Init+0x34>
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	4a93      	ldr	r2, [pc, #588]	; (800823c <HAL_SAI_Init+0x27c>)
 8007ff0:	4293      	cmp	r3, r2
 8007ff2:	d107      	bne.n	8008004 <HAL_SAI_Init+0x44>
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	685b      	ldr	r3, [r3, #4]
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 8007ff8:	2b01      	cmp	r3, #1
 8007ffa:	d103      	bne.n	8008004 <HAL_SAI_Init+0x44>
         (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8008000:	2b00      	cmp	r3, #0
 8008002:	d001      	beq.n	8008008 <HAL_SAI_Init+0x48>
    {
      return HAL_ERROR;
 8008004:	2301      	movs	r3, #1
 8008006:	e268      	b.n	80084da <HAL_SAI_Init+0x51a>
    }
#endif /* SAI4 */
  }

  /* Get the SAI base address according to the SAI handle */
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	4a8a      	ldr	r2, [pc, #552]	; (8008238 <HAL_SAI_Init+0x278>)
 800800e:	4293      	cmp	r3, r2
 8008010:	d004      	beq.n	800801c <HAL_SAI_Init+0x5c>
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	4a8a      	ldr	r2, [pc, #552]	; (8008240 <HAL_SAI_Init+0x280>)
 8008018:	4293      	cmp	r3, r2
 800801a:	d102      	bne.n	8008022 <HAL_SAI_Init+0x62>
  {
    SaiBaseAddress = SAI1;
 800801c:	4b89      	ldr	r3, [pc, #548]	; (8008244 <HAL_SAI_Init+0x284>)
 800801e:	61bb      	str	r3, [r7, #24]
 8008020:	e028      	b.n	8008074 <HAL_SAI_Init+0xb4>
  }
#if defined(SAI2)
  else if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	4a88      	ldr	r2, [pc, #544]	; (8008248 <HAL_SAI_Init+0x288>)
 8008028:	4293      	cmp	r3, r2
 800802a:	d004      	beq.n	8008036 <HAL_SAI_Init+0x76>
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	4a86      	ldr	r2, [pc, #536]	; (800824c <HAL_SAI_Init+0x28c>)
 8008032:	4293      	cmp	r3, r2
 8008034:	d102      	bne.n	800803c <HAL_SAI_Init+0x7c>
  {
    SaiBaseAddress = SAI2;
 8008036:	4b86      	ldr	r3, [pc, #536]	; (8008250 <HAL_SAI_Init+0x290>)
 8008038:	61bb      	str	r3, [r7, #24]
 800803a:	e01b      	b.n	8008074 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI2 */
#if defined(SAI3)
  else if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	4a84      	ldr	r2, [pc, #528]	; (8008254 <HAL_SAI_Init+0x294>)
 8008042:	4293      	cmp	r3, r2
 8008044:	d004      	beq.n	8008050 <HAL_SAI_Init+0x90>
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	4a83      	ldr	r2, [pc, #524]	; (8008258 <HAL_SAI_Init+0x298>)
 800804c:	4293      	cmp	r3, r2
 800804e:	d102      	bne.n	8008056 <HAL_SAI_Init+0x96>
  {
    SaiBaseAddress = SAI3;
 8008050:	4b82      	ldr	r3, [pc, #520]	; (800825c <HAL_SAI_Init+0x29c>)
 8008052:	61bb      	str	r3, [r7, #24]
 8008054:	e00e      	b.n	8008074 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI3 */
#if defined(SAI4)
  else if ((hsai->Instance == SAI4_Block_A) || (hsai->Instance == SAI4_Block_B))
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	4a78      	ldr	r2, [pc, #480]	; (800823c <HAL_SAI_Init+0x27c>)
 800805c:	4293      	cmp	r3, r2
 800805e:	d004      	beq.n	800806a <HAL_SAI_Init+0xaa>
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	4a7e      	ldr	r2, [pc, #504]	; (8008260 <HAL_SAI_Init+0x2a0>)
 8008066:	4293      	cmp	r3, r2
 8008068:	d102      	bne.n	8008070 <HAL_SAI_Init+0xb0>
  {
    SaiBaseAddress = SAI4;
 800806a:	4b7e      	ldr	r3, [pc, #504]	; (8008264 <HAL_SAI_Init+0x2a4>)
 800806c:	61bb      	str	r3, [r7, #24]
 800806e:	e001      	b.n	8008074 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI4 */
  else
  {
    return HAL_ERROR;
 8008070:	2301      	movs	r3, #1
 8008072:	e232      	b.n	80084da <HAL_SAI_Init+0x51a>
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800807a:	b2db      	uxtb	r3, r3
 800807c:	2b00      	cmp	r3, #0
 800807e:	d106      	bne.n	800808e <HAL_SAI_Init+0xce>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	2200      	movs	r2, #0
 8008084:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8008088:	6878      	ldr	r0, [r7, #4]
 800808a:	f7f9 f9f3 	bl	8001474 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if(SAI_Disable(hsai) != HAL_OK)
 800808e:	6878      	ldr	r0, [r7, #4]
 8008090:	f000 fb0c 	bl	80086ac <SAI_Disable>
 8008094:	4603      	mov	r3, r0
 8008096:	2b00      	cmp	r3, #0
 8008098:	d001      	beq.n	800809e <HAL_SAI_Init+0xde>
  {
    return HAL_ERROR;
 800809a:	2301      	movs	r3, #1
 800809c:	e21d      	b.n	80084da <HAL_SAI_Init+0x51a>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	2202      	movs	r2, #2
 80080a2:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	68db      	ldr	r3, [r3, #12]
 80080aa:	2b02      	cmp	r3, #2
 80080ac:	d00c      	beq.n	80080c8 <HAL_SAI_Init+0x108>
 80080ae:	2b02      	cmp	r3, #2
 80080b0:	d80d      	bhi.n	80080ce <HAL_SAI_Init+0x10e>
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d002      	beq.n	80080bc <HAL_SAI_Init+0xfc>
 80080b6:	2b01      	cmp	r3, #1
 80080b8:	d003      	beq.n	80080c2 <HAL_SAI_Init+0x102>
 80080ba:	e008      	b.n	80080ce <HAL_SAI_Init+0x10e>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 80080bc:	2300      	movs	r3, #0
 80080be:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80080c0:	e008      	b.n	80080d4 <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 80080c2:	2310      	movs	r3, #16
 80080c4:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80080c6:	e005      	b.n	80080d4 <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 80080c8:	2320      	movs	r3, #32
 80080ca:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80080cc:	e002      	b.n	80080d4 <HAL_SAI_Init+0x114>
    default:
      tmpregisterGCR = 0;
 80080ce:	2300      	movs	r3, #0
 80080d0:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80080d2:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	689b      	ldr	r3, [r3, #8]
 80080d8:	2b05      	cmp	r3, #5
 80080da:	d832      	bhi.n	8008142 <HAL_SAI_Init+0x182>
 80080dc:	a201      	add	r2, pc, #4	; (adr r2, 80080e4 <HAL_SAI_Init+0x124>)
 80080de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080e2:	bf00      	nop
 80080e4:	080080fd 	.word	0x080080fd
 80080e8:	08008103 	.word	0x08008103
 80080ec:	0800810b 	.word	0x0800810b
 80080f0:	08008113 	.word	0x08008113
 80080f4:	08008123 	.word	0x08008123
 80080f8:	08008133 	.word	0x08008133
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 80080fc:	2300      	movs	r3, #0
 80080fe:	61fb      	str	r3, [r7, #28]
      break;
 8008100:	e022      	b.n	8008148 <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8008102:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008106:	61fb      	str	r3, [r7, #28]
      break;
 8008108:	e01e      	b.n	8008148 <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800810a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800810e:	61fb      	str	r3, [r7, #28]
      break;
 8008110:	e01a      	b.n	8008148 <HAL_SAI_Init+0x188>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8008112:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008116:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8008118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800811a:	f043 0301 	orr.w	r3, r3, #1
 800811e:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8008120:	e012      	b.n	8008148 <HAL_SAI_Init+0x188>
#endif /* SAI2 */
#if defined(SAI3)
    case SAI_SYNCHRONOUS_EXT_SAI3 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8008122:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008126:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
 8008128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800812a:	f043 0302 	orr.w	r3, r3, #2
 800812e:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8008130:	e00a      	b.n	8008148 <HAL_SAI_Init+0x188>
#endif /* SAI3 */
#if defined(SAI4)
    case SAI_SYNCHRONOUS_EXT_SAI4 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8008132:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008136:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
 8008138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800813a:	f043 0303 	orr.w	r3, r3, #3
 800813e:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8008140:	e002      	b.n	8008148 <HAL_SAI_Init+0x188>
#endif /* SAI4 */
    default:
      syncen_bits = 0;
 8008142:	2300      	movs	r3, #0
 8008144:	61fb      	str	r3, [r7, #28]
      break;
 8008146:	bf00      	nop
  }

  /* Set the SAI Block Synchro Configuration */
  SaiBaseAddress->GCR = tmpregisterGCR;
 8008148:	69bb      	ldr	r3, [r7, #24]
 800814a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800814c:	601a      	str	r2, [r3, #0]

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	6a1b      	ldr	r3, [r3, #32]
 8008152:	2b00      	cmp	r3, #0
 8008154:	f000 80ba 	beq.w	80082cc <HAL_SAI_Init+0x30c>
  {
    uint32_t freq = 0;
 8008158:	2300      	movs	r3, #0
 800815a:	617b      	str	r3, [r7, #20]
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	4a35      	ldr	r2, [pc, #212]	; (8008238 <HAL_SAI_Init+0x278>)
 8008162:	4293      	cmp	r3, r2
 8008164:	d004      	beq.n	8008170 <HAL_SAI_Init+0x1b0>
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	4a35      	ldr	r2, [pc, #212]	; (8008240 <HAL_SAI_Init+0x280>)
 800816c:	4293      	cmp	r3, r2
 800816e:	d104      	bne.n	800817a <HAL_SAI_Init+0x1ba>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8008170:	f44f 7080 	mov.w	r0, #256	; 0x100
 8008174:	f7fe fcde 	bl	8006b34 <HAL_RCCEx_GetPeriphCLKFreq>
 8008178:	6178      	str	r0, [r7, #20]
    }

#if defined(SAI2)
#if defined(RCC_PERIPHCLK_SAI2)
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	4a32      	ldr	r2, [pc, #200]	; (8008248 <HAL_SAI_Init+0x288>)
 8008180:	4293      	cmp	r3, r2
 8008182:	d004      	beq.n	800818e <HAL_SAI_Init+0x1ce>
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	4a30      	ldr	r2, [pc, #192]	; (800824c <HAL_SAI_Init+0x28c>)
 800818a:	4293      	cmp	r3, r2
 800818c:	d104      	bne.n	8008198 <HAL_SAI_Init+0x1d8>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800818e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8008192:	f7fe fccf 	bl	8006b34 <HAL_RCCEx_GetPeriphCLKFreq>
 8008196:	6178      	str	r0, [r7, #20]
    }
#endif /* RCC_PERIPHCLK_SAI2 */
#endif /* SAI2 */

#if defined(SAI3)
    if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	4a2d      	ldr	r2, [pc, #180]	; (8008254 <HAL_SAI_Init+0x294>)
 800819e:	4293      	cmp	r3, r2
 80081a0:	d004      	beq.n	80081ac <HAL_SAI_Init+0x1ec>
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	4a2c      	ldr	r2, [pc, #176]	; (8008258 <HAL_SAI_Init+0x298>)
 80081a8:	4293      	cmp	r3, r2
 80081aa:	d104      	bne.n	80081b6 <HAL_SAI_Init+0x1f6>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
 80081ac:	f44f 7000 	mov.w	r0, #512	; 0x200
 80081b0:	f7fe fcc0 	bl	8006b34 <HAL_RCCEx_GetPeriphCLKFreq>
 80081b4:	6178      	str	r0, [r7, #20]
    }
#endif /* SAI3 */
#if defined(SAI4)
    if (hsai->Instance == SAI4_Block_A)
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	4a20      	ldr	r2, [pc, #128]	; (800823c <HAL_SAI_Init+0x27c>)
 80081bc:	4293      	cmp	r3, r2
 80081be:	d104      	bne.n	80081ca <HAL_SAI_Init+0x20a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
 80081c0:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80081c4:	f7fe fcb6 	bl	8006b34 <HAL_RCCEx_GetPeriphCLKFreq>
 80081c8:	6178      	str	r0, [r7, #20]
    }
    if (hsai->Instance == SAI4_Block_B)
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	4a24      	ldr	r2, [pc, #144]	; (8008260 <HAL_SAI_Init+0x2a0>)
 80081d0:	4293      	cmp	r3, r2
 80081d2:	d104      	bne.n	80081de <HAL_SAI_Init+0x21e>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
 80081d4:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80081d8:	f7fe fcac 	bl	8006b34 <HAL_RCCEx_GetPeriphCLKFreq>
 80081dc:	6178      	str	r0, [r7, #20]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	699b      	ldr	r3, [r3, #24]
 80081e2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80081e6:	d120      	bne.n	800822a <HAL_SAI_Init+0x26a>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081ec:	2b04      	cmp	r3, #4
 80081ee:	d102      	bne.n	80081f6 <HAL_SAI_Init+0x236>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = 64U;
 80081f0:	2340      	movs	r3, #64	; 0x40
 80081f2:	60fb      	str	r3, [r7, #12]
 80081f4:	e00a      	b.n	800820c <HAL_SAI_Init+0x24c>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081fa:	2b08      	cmp	r3, #8
 80081fc:	d103      	bne.n	8008206 <HAL_SAI_Init+0x246>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = 256U;
 80081fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008202:	60fb      	str	r3, [r7, #12]
 8008204:	e002      	b.n	800820c <HAL_SAI_Init+0x24c>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800820a:	60fb      	str	r3, [r7, #12]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 800820c:	697a      	ldr	r2, [r7, #20]
 800820e:	4613      	mov	r3, r2
 8008210:	009b      	lsls	r3, r3, #2
 8008212:	4413      	add	r3, r2
 8008214:	005b      	lsls	r3, r3, #1
 8008216:	4619      	mov	r1, r3
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	6a1b      	ldr	r3, [r3, #32]
 800821c:	68fa      	ldr	r2, [r7, #12]
 800821e:	fb02 f303 	mul.w	r3, r2, r3
 8008222:	fbb1 f3f3 	udiv	r3, r1, r3
 8008226:	613b      	str	r3, [r7, #16]
 8008228:	e02f      	b.n	800828a <HAL_SAI_Init+0x2ca>
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800822e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008232:	d119      	bne.n	8008268 <HAL_SAI_Init+0x2a8>
 8008234:	2302      	movs	r3, #2
 8008236:	e018      	b.n	800826a <HAL_SAI_Init+0x2aa>
 8008238:	40015804 	.word	0x40015804
 800823c:	58005404 	.word	0x58005404
 8008240:	40015824 	.word	0x40015824
 8008244:	40015800 	.word	0x40015800
 8008248:	40015c04 	.word	0x40015c04
 800824c:	40015c24 	.word	0x40015c24
 8008250:	40015c00 	.word	0x40015c00
 8008254:	40016004 	.word	0x40016004
 8008258:	40016024 	.word	0x40016024
 800825c:	40016000 	.word	0x40016000
 8008260:	58005424 	.word	0x58005424
 8008264:	58005400 	.word	0x58005400
 8008268:	2301      	movs	r3, #1
 800826a:	60bb      	str	r3, [r7, #8]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 800826c:	697a      	ldr	r2, [r7, #20]
 800826e:	4613      	mov	r3, r2
 8008270:	009b      	lsls	r3, r3, #2
 8008272:	4413      	add	r3, r2
 8008274:	005b      	lsls	r3, r3, #1
 8008276:	4619      	mov	r1, r3
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	6a1b      	ldr	r3, [r3, #32]
 800827c:	68ba      	ldr	r2, [r7, #8]
 800827e:	fb02 f303 	mul.w	r3, r2, r3
 8008282:	021b      	lsls	r3, r3, #8
 8008284:	fbb1 f3f3 	udiv	r3, r1, r3
 8008288:	613b      	str	r3, [r7, #16]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 800828a:	693b      	ldr	r3, [r7, #16]
 800828c:	4a95      	ldr	r2, [pc, #596]	; (80084e4 <HAL_SAI_Init+0x524>)
 800828e:	fba2 2303 	umull	r2, r3, r2, r3
 8008292:	08da      	lsrs	r2, r3, #3
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	625a      	str	r2, [r3, #36]	; 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 8008298:	6939      	ldr	r1, [r7, #16]
 800829a:	4b92      	ldr	r3, [pc, #584]	; (80084e4 <HAL_SAI_Init+0x524>)
 800829c:	fba3 2301 	umull	r2, r3, r3, r1
 80082a0:	08da      	lsrs	r2, r3, #3
 80082a2:	4613      	mov	r3, r2
 80082a4:	009b      	lsls	r3, r3, #2
 80082a6:	4413      	add	r3, r2
 80082a8:	005b      	lsls	r3, r3, #1
 80082aa:	1aca      	subs	r2, r1, r3
 80082ac:	2a08      	cmp	r2, #8
 80082ae:	d904      	bls.n	80082ba <HAL_SAI_Init+0x2fa>
    {
      hsai->Init.Mckdiv += 1U;
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082b4:	1c5a      	adds	r2, r3, #1
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80082be:	2b04      	cmp	r3, #4
 80082c0:	d104      	bne.n	80082cc <HAL_SAI_Init+0x30c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082c6:	085a      	lsrs	r2, r3, #1
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	685b      	ldr	r3, [r3, #4]
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d003      	beq.n	80082dc <HAL_SAI_Init+0x31c>
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	685b      	ldr	r3, [r3, #4]
 80082d8:	2b02      	cmp	r3, #2
 80082da:	d109      	bne.n	80082f0 <HAL_SAI_Init+0x330>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80082e0:	2b01      	cmp	r3, #1
 80082e2:	d101      	bne.n	80082e8 <HAL_SAI_Init+0x328>
 80082e4:	2300      	movs	r3, #0
 80082e6:	e001      	b.n	80082ec <HAL_SAI_Init+0x32c>
 80082e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80082ec:	623b      	str	r3, [r7, #32]
 80082ee:	e008      	b.n	8008302 <HAL_SAI_Init+0x342>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80082f4:	2b01      	cmp	r3, #1
 80082f6:	d102      	bne.n	80082fe <HAL_SAI_Init+0x33e>
 80082f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80082fc:	e000      	b.n	8008300 <HAL_SAI_Init+0x340>
 80082fe:	2300      	movs	r3, #0
 8008300:	623b      	str	r3, [r7, #32]

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
#if defined(SAI_VER_V2_X) /* SAI Peripheral version depends on STM32H7 device revision ID */

  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 8008302:	f7f9 fab7 	bl	8001874 <HAL_GetREVID>
 8008306:	4603      	mov	r3, r0
 8008308:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800830c:	d331      	bcc.n	8008372 <HAL_SAI_Init+0x3b2>
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	6819      	ldr	r1, [r3, #0]
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681a      	ldr	r2, [r3, #0]
 8008318:	4b73      	ldr	r3, [pc, #460]	; (80084e8 <HAL_SAI_Init+0x528>)
 800831a:	400b      	ands	r3, r1
 800831c:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                             SAI_xCR1_MCKEN);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	6819      	ldr	r1, [r3, #0]
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	685a      	ldr	r2, [r3, #4]
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800832c:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008332:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008338:	431a      	orrs	r2, r3
 800833a:	6a3b      	ldr	r3, [r7, #32]
 800833c:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 800833e:	69fb      	ldr	r3, [r7, #28]
 8008340:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                            ckstr_bits | syncen_bits |                             \
 8008346:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	695b      	ldr	r3, [r3, #20]
 800834c:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8008352:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008358:	051b      	lsls	r3, r3, #20
 800835a:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8008360:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	691b      	ldr	r3, [r3, #16]
 8008366:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	430a      	orrs	r2, r1
 800836e:	601a      	str	r2, [r3, #0]
 8008370:	e02d      	b.n	80083ce <HAL_SAI_Init+0x40e>
  }
  else /* STM32H7xx Rev.Y */
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	6819      	ldr	r1, [r3, #0]
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681a      	ldr	r2, [r3, #0]
 800837c:	4b5b      	ldr	r3, [pc, #364]	; (80084ec <HAL_SAI_Init+0x52c>)
 800837e:	400b      	ands	r3, r1
 8008380:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	6819      	ldr	r1, [r3, #0]
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	685a      	ldr	r2, [r3, #4]
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008390:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008396:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800839c:	431a      	orrs	r2, r3
 800839e:	6a3b      	ldr	r3, [r7, #32]
 80083a0:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 80083a2:	69fb      	ldr	r3, [r7, #28]
 80083a4:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                            ckstr_bits | syncen_bits |                             \
 80083aa:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	695b      	ldr	r3, [r3, #20]
 80083b0:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80083b6:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083bc:	051b      	lsls	r3, r3, #20
 80083be:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling);
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 80083c4:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	430a      	orrs	r2, r1
 80083cc:	601a      	str	r2, [r3, #0]
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
#endif /* SAI_VER_V2_X */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	6859      	ldr	r1, [r3, #4]
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681a      	ldr	r2, [r3, #0]
 80083d8:	4b45      	ldr	r3, [pc, #276]	; (80084f0 <HAL_SAI_Init+0x530>)
 80083da:	400b      	ands	r3, r1
 80083dc:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	6859      	ldr	r1, [r3, #4]
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	69da      	ldr	r2, [r3, #28]
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083ec:	431a      	orrs	r2, r3
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083f2:	431a      	orrs	r2, r3
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	430a      	orrs	r2, r1
 80083fa:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	6899      	ldr	r1, [r3, #8]
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681a      	ldr	r2, [r3, #0]
 8008406:	4b3b      	ldr	r3, [pc, #236]	; (80084f4 <HAL_SAI_Init+0x534>)
 8008408:	400b      	ands	r3, r1
 800840a:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	6899      	ldr	r1, [r3, #8]
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008416:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800841c:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                           hsai->FrameInit.FSOffset |
 8008422:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                           hsai->FrameInit.FSDefinition |
 8008428:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800842e:	3b01      	subs	r3, #1
 8008430:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8008432:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	430a      	orrs	r2, r1
 800843a:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	68d9      	ldr	r1, [r3, #12]
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681a      	ldr	r2, [r3, #0]
 8008446:	f24f 0320 	movw	r3, #61472	; 0xf020
 800844a:	400b      	ands	r3, r1
 800844c:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	68d9      	ldr	r1, [r3, #12]
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800845c:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008462:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8008464:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800846a:	3b01      	subs	r3, #1
 800846c:	021b      	lsls	r3, r3, #8
 800846e:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	430a      	orrs	r2, r1
 8008476:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
#if defined(SAI4)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	4a1e      	ldr	r2, [pc, #120]	; (80084f8 <HAL_SAI_Init+0x538>)
 800847e:	4293      	cmp	r3, r2
 8008480:	d004      	beq.n	800848c <HAL_SAI_Init+0x4cc>
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	4a1d      	ldr	r2, [pc, #116]	; (80084fc <HAL_SAI_Init+0x53c>)
 8008488:	4293      	cmp	r3, r2
 800848a:	d119      	bne.n	80084c0 <HAL_SAI_Init+0x500>
#else
  if (hsai->Instance == SAI1_Block_A)
#endif /* SAI4 */
  {
    /* Disable PDM interface */
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 800848c:	69bb      	ldr	r3, [r7, #24]
 800848e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008490:	f023 0201 	bic.w	r2, r3, #1
 8008494:	69bb      	ldr	r3, [r7, #24]
 8008496:	645a      	str	r2, [r3, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800849e:	2b01      	cmp	r3, #1
 80084a0:	d10e      	bne.n	80084c0 <HAL_SAI_Init+0x500>
    {
      /* Configure and enable PDM interface */
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084aa:	3b01      	subs	r3, #1
 80084ac:	011b      	lsls	r3, r3, #4
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 80084ae:	431a      	orrs	r2, r3
 80084b0:	69bb      	ldr	r3, [r7, #24]
 80084b2:	645a      	str	r2, [r3, #68]	; 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
 80084b4:	69bb      	ldr	r3, [r7, #24]
 80084b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80084b8:	f043 0201 	orr.w	r2, r3, #1
 80084bc:	69bb      	ldr	r3, [r7, #24]
 80084be:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	2200      	movs	r2, #0
 80084c4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	2201      	movs	r2, #1
 80084cc:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	2200      	movs	r2, #0
 80084d4:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

  return HAL_OK;
 80084d8:	2300      	movs	r3, #0
}
 80084da:	4618      	mov	r0, r3
 80084dc:	3728      	adds	r7, #40	; 0x28
 80084de:	46bd      	mov	sp, r7
 80084e0:	bd80      	pop	{r7, pc}
 80084e2:	bf00      	nop
 80084e4:	cccccccd 	.word	0xcccccccd
 80084e8:	f005c010 	.word	0xf005c010
 80084ec:	f805c010 	.word	0xf805c010
 80084f0:	ffff1ff0 	.word	0xffff1ff0
 80084f4:	fff88000 	.word	0xfff88000
 80084f8:	40015804 	.word	0x40015804
 80084fc:	58005404 	.word	0x58005404

08008500 <HAL_SAI_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Receive_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 8008500:	b580      	push	{r7, lr}
 8008502:	b084      	sub	sp, #16
 8008504:	af00      	add	r7, sp, #0
 8008506:	60f8      	str	r0, [r7, #12]
 8008508:	60b9      	str	r1, [r7, #8]
 800850a:	4613      	mov	r3, r2
 800850c:	80fb      	strh	r3, [r7, #6]

  if ((pData == NULL) || (Size == 0U))
 800850e:	68bb      	ldr	r3, [r7, #8]
 8008510:	2b00      	cmp	r3, #0
 8008512:	d002      	beq.n	800851a <HAL_SAI_Receive_DMA+0x1a>
 8008514:	88fb      	ldrh	r3, [r7, #6]
 8008516:	2b00      	cmp	r3, #0
 8008518:	d101      	bne.n	800851e <HAL_SAI_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 800851a:	2301      	movs	r3, #1
 800851c:	e079      	b.n	8008612 <HAL_SAI_Receive_DMA+0x112>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 8008524:	b2db      	uxtb	r3, r3
 8008526:	2b01      	cmp	r3, #1
 8008528:	d172      	bne.n	8008610 <HAL_SAI_Receive_DMA+0x110>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8008530:	2b01      	cmp	r3, #1
 8008532:	d101      	bne.n	8008538 <HAL_SAI_Receive_DMA+0x38>
 8008534:	2302      	movs	r3, #2
 8008536:	e06c      	b.n	8008612 <HAL_SAI_Receive_DMA+0x112>
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	2201      	movs	r2, #1
 800853c:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    hsai->pBuffPtr = pData;
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	68ba      	ldr	r2, [r7, #8]
 8008544:	679a      	str	r2, [r3, #120]	; 0x78
    hsai->XferSize = Size;
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	88fa      	ldrh	r2, [r7, #6]
 800854a:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
    hsai->XferCount = Size;
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	88fa      	ldrh	r2, [r7, #6]
 8008552:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	2200      	movs	r2, #0
 800855a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	2222      	movs	r2, #34	; 0x22
 8008562:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

    /* Set the SAI Rx DMA Half transfer complete callback */
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800856c:	4a2b      	ldr	r2, [pc, #172]	; (800861c <HAL_SAI_Receive_DMA+0x11c>)
 800856e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the SAI Rx DMA transfer complete callback */
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008576:	4a2a      	ldr	r2, [pc, #168]	; (8008620 <HAL_SAI_Receive_DMA+0x120>)
 8008578:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008580:	4a28      	ldr	r2, [pc, #160]	; (8008624 <HAL_SAI_Receive_DMA+0x124>)
 8008582:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Rx abort callback */
    hsai->hdmarx->XferAbortCallback = NULL;
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800858a:	2200      	movs	r2, #0
 800858c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the Rx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	331c      	adds	r3, #28
 800859a:	4619      	mov	r1, r3
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80085a0:	461a      	mov	r2, r3
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 80085a8:	f7f9 fec6 	bl	8002338 <HAL_DMA_Start_IT>
 80085ac:	4603      	mov	r3, r0
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d005      	beq.n	80085be <HAL_SAI_Receive_DMA+0xbe>
    {
      __HAL_UNLOCK(hsai);
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	2200      	movs	r2, #0
 80085b6:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      return  HAL_ERROR;
 80085ba:	2301      	movs	r3, #1
 80085bc:	e029      	b.n	8008612 <HAL_SAI_Receive_DMA+0x112>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 80085be:	2100      	movs	r1, #0
 80085c0:	68f8      	ldr	r0, [r7, #12]
 80085c2:	f000 f83b 	bl	800863c <SAI_InterruptFlag>
 80085c6:	4601      	mov	r1, r0
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	691a      	ldr	r2, [r3, #16]
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	430a      	orrs	r2, r1
 80085d4:	611a      	str	r2, [r3, #16]

    /* Enable SAI Rx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	681a      	ldr	r2, [r3, #0]
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80085e4:	601a      	str	r2, [r3, #0]

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d107      	bne.n	8008604 <HAL_SAI_Receive_DMA+0x104>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	681a      	ldr	r2, [r3, #0]
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8008602:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	2200      	movs	r2, #0
 8008608:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    return HAL_OK;
 800860c:	2300      	movs	r3, #0
 800860e:	e000      	b.n	8008612 <HAL_SAI_Receive_DMA+0x112>
  }
  else
  {
    return HAL_BUSY;
 8008610:	2302      	movs	r3, #2
  }
}
 8008612:	4618      	mov	r0, r3
 8008614:	3710      	adds	r7, #16
 8008616:	46bd      	mov	sp, r7
 8008618:	bd80      	pop	{r7, pc}
 800861a:	bf00      	nop
 800861c:	08008781 	.word	0x08008781
 8008620:	08008721 	.word	0x08008721
 8008624:	0800879d 	.word	0x0800879d

08008628 <HAL_SAI_ErrorCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 8008628:	b480      	push	{r7}
 800862a:	b083      	sub	sp, #12
 800862c:	af00      	add	r7, sp, #0
 800862e:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_ErrorCallback could be implemented in the user file
   */
}
 8008630:	bf00      	nop
 8008632:	370c      	adds	r7, #12
 8008634:	46bd      	mov	sp, r7
 8008636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800863a:	4770      	bx	lr

0800863c <SAI_InterruptFlag>:
  *              the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
  */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, SAI_ModeTypedef mode)
{
 800863c:	b480      	push	{r7}
 800863e:	b085      	sub	sp, #20
 8008640:	af00      	add	r7, sp, #0
 8008642:	6078      	str	r0, [r7, #4]
 8008644:	460b      	mov	r3, r1
 8008646:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 8008648:	2301      	movs	r3, #1
 800864a:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 800864c:	78fb      	ldrb	r3, [r7, #3]
 800864e:	2b01      	cmp	r3, #1
 8008650:	d103      	bne.n	800865a <SAI_InterruptFlag+0x1e>
  {
    tmpIT |= SAI_IT_FREQ;
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	f043 0308 	orr.w	r3, r3, #8
 8008658:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800865e:	2b08      	cmp	r3, #8
 8008660:	d10b      	bne.n	800867a <SAI_InterruptFlag+0x3e>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8008666:	2b03      	cmp	r3, #3
 8008668:	d003      	beq.n	8008672 <SAI_InterruptFlag+0x36>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	685b      	ldr	r3, [r3, #4]
 800866e:	2b01      	cmp	r3, #1
 8008670:	d103      	bne.n	800867a <SAI_InterruptFlag+0x3e>
  {
    tmpIT |= SAI_IT_CNRDY;
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	f043 0310 	orr.w	r3, r3, #16
 8008678:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	685b      	ldr	r3, [r3, #4]
 800867e:	2b03      	cmp	r3, #3
 8008680:	d003      	beq.n	800868a <SAI_InterruptFlag+0x4e>
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	685b      	ldr	r3, [r3, #4]
 8008686:	2b02      	cmp	r3, #2
 8008688:	d104      	bne.n	8008694 <SAI_InterruptFlag+0x58>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8008690:	60fb      	str	r3, [r7, #12]
 8008692:	e003      	b.n	800869c <SAI_InterruptFlag+0x60>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	f043 0304 	orr.w	r3, r3, #4
 800869a:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 800869c:	68fb      	ldr	r3, [r7, #12]
}
 800869e:	4618      	mov	r0, r3
 80086a0:	3714      	adds	r7, #20
 80086a2:	46bd      	mov	sp, r7
 80086a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a8:	4770      	bx	lr
	...

080086ac <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 80086ac:	b480      	push	{r7}
 80086ae:	b085      	sub	sp, #20
 80086b0:	af00      	add	r7, sp, #0
 80086b2:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 80086b4:	4b18      	ldr	r3, [pc, #96]	; (8008718 <SAI_Disable+0x6c>)
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	4a18      	ldr	r2, [pc, #96]	; (800871c <SAI_Disable+0x70>)
 80086ba:	fba2 2303 	umull	r2, r3, r2, r3
 80086be:	0b1b      	lsrs	r3, r3, #12
 80086c0:	009b      	lsls	r3, r3, #2
 80086c2:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 80086c4:	2300      	movs	r3, #0
 80086c6:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	681a      	ldr	r2, [r3, #0]
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80086d6:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d10a      	bne.n	80086f4 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80086e4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      status = HAL_TIMEOUT;
 80086ee:	2303      	movs	r3, #3
 80086f0:	72fb      	strb	r3, [r7, #11]
      break;
 80086f2:	e009      	b.n	8008708 <SAI_Disable+0x5c>
    }
    count--;
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	3b01      	subs	r3, #1
 80086f8:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008704:	2b00      	cmp	r3, #0
 8008706:	d1e7      	bne.n	80086d8 <SAI_Disable+0x2c>

  return status;
 8008708:	7afb      	ldrb	r3, [r7, #11]
}
 800870a:	4618      	mov	r0, r3
 800870c:	3714      	adds	r7, #20
 800870e:	46bd      	mov	sp, r7
 8008710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008714:	4770      	bx	lr
 8008716:	bf00      	nop
 8008718:	24000400 	.word	0x24000400
 800871c:	95cbec1b 	.word	0x95cbec1b

08008720 <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8008720:	b580      	push	{r7, lr}
 8008722:	b084      	sub	sp, #16
 8008724:	af00      	add	r7, sp, #0
 8008726:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800872c:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	69db      	ldr	r3, [r3, #28]
 8008732:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008736:	d01c      	beq.n	8008772 <SAI_DMARxCplt+0x52>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	681a      	ldr	r2, [r3, #0]
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8008746:	601a      	str	r2, [r3, #0]
    hsai->XferCount = 0;
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	2200      	movs	r2, #0
 800874c:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8008750:	2100      	movs	r1, #0
 8008752:	68f8      	ldr	r0, [r7, #12]
 8008754:	f7ff ff72 	bl	800863c <SAI_InterruptFlag>
 8008758:	4603      	mov	r3, r0
 800875a:	43d9      	mvns	r1, r3
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	691a      	ldr	r2, [r3, #16]
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	400a      	ands	r2, r1
 8008768:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	2201      	movs	r2, #1
 800876e:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 8008772:	68f8      	ldr	r0, [r7, #12]
 8008774:	f7f8 fd3c 	bl	80011f0 <HAL_SAI_RxCpltCallback>
#endif
}
 8008778:	bf00      	nop
 800877a:	3710      	adds	r7, #16
 800877c:	46bd      	mov	sp, r7
 800877e:	bd80      	pop	{r7, pc}

08008780 <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008780:	b580      	push	{r7, lr}
 8008782:	b084      	sub	sp, #16
 8008784:	af00      	add	r7, sp, #0
 8008786:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800878c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 800878e:	68f8      	ldr	r0, [r7, #12]
 8008790:	f7f8 fd1e 	bl	80011d0 <HAL_SAI_RxHalfCpltCallback>
#endif
}
 8008794:	bf00      	nop
 8008796:	3710      	adds	r7, #16
 8008798:	46bd      	mov	sp, r7
 800879a:	bd80      	pop	{r7, pc}

0800879c <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 800879c:	b580      	push	{r7, lr}
 800879e:	b084      	sub	sp, #16
 80087a0:	af00      	add	r7, sp, #0
 80087a2:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087a8:	60fb      	str	r3, [r7, #12]

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 80087aa:	6878      	ldr	r0, [r7, #4]
 80087ac:	f7fb fcba 	bl	8004124 <HAL_DMA_GetError>
 80087b0:	4603      	mov	r3, r0
 80087b2:	2b02      	cmp	r3, #2
 80087b4:	d01d      	beq.n	80087f2 <SAI_DMAError+0x56>
  {
    /* Set SAI error code */
    hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80087bc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	681a      	ldr	r2, [r3, #0]
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80087d4:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral */
    /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
    (void) SAI_Disable(hsai);
 80087d6:	68f8      	ldr	r0, [r7, #12]
 80087d8:	f7ff ff68 	bl	80086ac <SAI_Disable>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	2201      	movs	r2, #1
 80087e0:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	2200      	movs	r2, #0
 80087e8:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

    /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
    hsai->ErrorCallback(hsai);
#else
    HAL_SAI_ErrorCallback(hsai);
 80087ec:	68f8      	ldr	r0, [r7, #12]
 80087ee:	f7ff ff1b 	bl	8008628 <HAL_SAI_ErrorCallback>
#endif
  }
}
 80087f2:	bf00      	nop
 80087f4:	3710      	adds	r7, #16
 80087f6:	46bd      	mov	sp, r7
 80087f8:	bd80      	pop	{r7, pc}

080087fa <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80087fa:	b580      	push	{r7, lr}
 80087fc:	b082      	sub	sp, #8
 80087fe:	af00      	add	r7, sp, #0
 8008800:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	2b00      	cmp	r3, #0
 8008806:	d101      	bne.n	800880c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008808:	2301      	movs	r3, #1
 800880a:	e049      	b.n	80088a0 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008812:	b2db      	uxtb	r3, r3
 8008814:	2b00      	cmp	r3, #0
 8008816:	d106      	bne.n	8008826 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	2200      	movs	r2, #0
 800881c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008820:	6878      	ldr	r0, [r7, #4]
 8008822:	f7f8 fd4d 	bl	80012c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	2202      	movs	r2, #2
 800882a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	681a      	ldr	r2, [r3, #0]
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	3304      	adds	r3, #4
 8008836:	4619      	mov	r1, r3
 8008838:	4610      	mov	r0, r2
 800883a:	f000 fb0f 	bl	8008e5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	2201      	movs	r2, #1
 8008842:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	2201      	movs	r2, #1
 800884a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	2201      	movs	r2, #1
 8008852:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	2201      	movs	r2, #1
 800885a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	2201      	movs	r2, #1
 8008862:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	2201      	movs	r2, #1
 800886a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	2201      	movs	r2, #1
 8008872:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	2201      	movs	r2, #1
 800887a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	2201      	movs	r2, #1
 8008882:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	2201      	movs	r2, #1
 800888a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	2201      	movs	r2, #1
 8008892:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	2201      	movs	r2, #1
 800889a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800889e:	2300      	movs	r3, #0
}
 80088a0:	4618      	mov	r0, r3
 80088a2:	3708      	adds	r7, #8
 80088a4:	46bd      	mov	sp, r7
 80088a6:	bd80      	pop	{r7, pc}

080088a8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80088a8:	b480      	push	{r7}
 80088aa:	b085      	sub	sp, #20
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80088b6:	b2db      	uxtb	r3, r3
 80088b8:	2b01      	cmp	r3, #1
 80088ba:	d001      	beq.n	80088c0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80088bc:	2301      	movs	r3, #1
 80088be:	e04f      	b.n	8008960 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	2202      	movs	r2, #2
 80088c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	68da      	ldr	r2, [r3, #12]
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	f042 0201 	orr.w	r2, r2, #1
 80088d6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	4a23      	ldr	r2, [pc, #140]	; (800896c <HAL_TIM_Base_Start_IT+0xc4>)
 80088de:	4293      	cmp	r3, r2
 80088e0:	d01d      	beq.n	800891e <HAL_TIM_Base_Start_IT+0x76>
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80088ea:	d018      	beq.n	800891e <HAL_TIM_Base_Start_IT+0x76>
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	4a1f      	ldr	r2, [pc, #124]	; (8008970 <HAL_TIM_Base_Start_IT+0xc8>)
 80088f2:	4293      	cmp	r3, r2
 80088f4:	d013      	beq.n	800891e <HAL_TIM_Base_Start_IT+0x76>
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	4a1e      	ldr	r2, [pc, #120]	; (8008974 <HAL_TIM_Base_Start_IT+0xcc>)
 80088fc:	4293      	cmp	r3, r2
 80088fe:	d00e      	beq.n	800891e <HAL_TIM_Base_Start_IT+0x76>
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	4a1c      	ldr	r2, [pc, #112]	; (8008978 <HAL_TIM_Base_Start_IT+0xd0>)
 8008906:	4293      	cmp	r3, r2
 8008908:	d009      	beq.n	800891e <HAL_TIM_Base_Start_IT+0x76>
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	4a1b      	ldr	r2, [pc, #108]	; (800897c <HAL_TIM_Base_Start_IT+0xd4>)
 8008910:	4293      	cmp	r3, r2
 8008912:	d004      	beq.n	800891e <HAL_TIM_Base_Start_IT+0x76>
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	4a19      	ldr	r2, [pc, #100]	; (8008980 <HAL_TIM_Base_Start_IT+0xd8>)
 800891a:	4293      	cmp	r3, r2
 800891c:	d115      	bne.n	800894a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	689a      	ldr	r2, [r3, #8]
 8008924:	4b17      	ldr	r3, [pc, #92]	; (8008984 <HAL_TIM_Base_Start_IT+0xdc>)
 8008926:	4013      	ands	r3, r2
 8008928:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	2b06      	cmp	r3, #6
 800892e:	d015      	beq.n	800895c <HAL_TIM_Base_Start_IT+0xb4>
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008936:	d011      	beq.n	800895c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	681a      	ldr	r2, [r3, #0]
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	f042 0201 	orr.w	r2, r2, #1
 8008946:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008948:	e008      	b.n	800895c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	681a      	ldr	r2, [r3, #0]
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	f042 0201 	orr.w	r2, r2, #1
 8008958:	601a      	str	r2, [r3, #0]
 800895a:	e000      	b.n	800895e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800895c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800895e:	2300      	movs	r3, #0
}
 8008960:	4618      	mov	r0, r3
 8008962:	3714      	adds	r7, #20
 8008964:	46bd      	mov	sp, r7
 8008966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800896a:	4770      	bx	lr
 800896c:	40010000 	.word	0x40010000
 8008970:	40000400 	.word	0x40000400
 8008974:	40000800 	.word	0x40000800
 8008978:	40000c00 	.word	0x40000c00
 800897c:	40010400 	.word	0x40010400
 8008980:	40001800 	.word	0x40001800
 8008984:	00010007 	.word	0x00010007

08008988 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8008988:	b480      	push	{r7}
 800898a:	b083      	sub	sp, #12
 800898c:	af00      	add	r7, sp, #0
 800898e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	68da      	ldr	r2, [r3, #12]
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	f022 0201 	bic.w	r2, r2, #1
 800899e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	6a1a      	ldr	r2, [r3, #32]
 80089a6:	f241 1311 	movw	r3, #4369	; 0x1111
 80089aa:	4013      	ands	r3, r2
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d10f      	bne.n	80089d0 <HAL_TIM_Base_Stop_IT+0x48>
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	6a1a      	ldr	r2, [r3, #32]
 80089b6:	f240 4344 	movw	r3, #1092	; 0x444
 80089ba:	4013      	ands	r3, r2
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d107      	bne.n	80089d0 <HAL_TIM_Base_Stop_IT+0x48>
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	681a      	ldr	r2, [r3, #0]
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	f022 0201 	bic.w	r2, r2, #1
 80089ce:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	2201      	movs	r2, #1
 80089d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80089d8:	2300      	movs	r3, #0
}
 80089da:	4618      	mov	r0, r3
 80089dc:	370c      	adds	r7, #12
 80089de:	46bd      	mov	sp, r7
 80089e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e4:	4770      	bx	lr

080089e6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80089e6:	b580      	push	{r7, lr}
 80089e8:	b082      	sub	sp, #8
 80089ea:	af00      	add	r7, sp, #0
 80089ec:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	691b      	ldr	r3, [r3, #16]
 80089f4:	f003 0302 	and.w	r3, r3, #2
 80089f8:	2b02      	cmp	r3, #2
 80089fa:	d122      	bne.n	8008a42 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	68db      	ldr	r3, [r3, #12]
 8008a02:	f003 0302 	and.w	r3, r3, #2
 8008a06:	2b02      	cmp	r3, #2
 8008a08:	d11b      	bne.n	8008a42 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	f06f 0202 	mvn.w	r2, #2
 8008a12:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	2201      	movs	r2, #1
 8008a18:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	699b      	ldr	r3, [r3, #24]
 8008a20:	f003 0303 	and.w	r3, r3, #3
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d003      	beq.n	8008a30 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008a28:	6878      	ldr	r0, [r7, #4]
 8008a2a:	f000 f9f9 	bl	8008e20 <HAL_TIM_IC_CaptureCallback>
 8008a2e:	e005      	b.n	8008a3c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008a30:	6878      	ldr	r0, [r7, #4]
 8008a32:	f000 f9eb 	bl	8008e0c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008a36:	6878      	ldr	r0, [r7, #4]
 8008a38:	f000 f9fc 	bl	8008e34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	2200      	movs	r2, #0
 8008a40:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	691b      	ldr	r3, [r3, #16]
 8008a48:	f003 0304 	and.w	r3, r3, #4
 8008a4c:	2b04      	cmp	r3, #4
 8008a4e:	d122      	bne.n	8008a96 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	68db      	ldr	r3, [r3, #12]
 8008a56:	f003 0304 	and.w	r3, r3, #4
 8008a5a:	2b04      	cmp	r3, #4
 8008a5c:	d11b      	bne.n	8008a96 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	f06f 0204 	mvn.w	r2, #4
 8008a66:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	2202      	movs	r2, #2
 8008a6c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	699b      	ldr	r3, [r3, #24]
 8008a74:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d003      	beq.n	8008a84 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008a7c:	6878      	ldr	r0, [r7, #4]
 8008a7e:	f000 f9cf 	bl	8008e20 <HAL_TIM_IC_CaptureCallback>
 8008a82:	e005      	b.n	8008a90 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008a84:	6878      	ldr	r0, [r7, #4]
 8008a86:	f000 f9c1 	bl	8008e0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008a8a:	6878      	ldr	r0, [r7, #4]
 8008a8c:	f000 f9d2 	bl	8008e34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	2200      	movs	r2, #0
 8008a94:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	691b      	ldr	r3, [r3, #16]
 8008a9c:	f003 0308 	and.w	r3, r3, #8
 8008aa0:	2b08      	cmp	r3, #8
 8008aa2:	d122      	bne.n	8008aea <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	68db      	ldr	r3, [r3, #12]
 8008aaa:	f003 0308 	and.w	r3, r3, #8
 8008aae:	2b08      	cmp	r3, #8
 8008ab0:	d11b      	bne.n	8008aea <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	f06f 0208 	mvn.w	r2, #8
 8008aba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	2204      	movs	r2, #4
 8008ac0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	69db      	ldr	r3, [r3, #28]
 8008ac8:	f003 0303 	and.w	r3, r3, #3
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d003      	beq.n	8008ad8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008ad0:	6878      	ldr	r0, [r7, #4]
 8008ad2:	f000 f9a5 	bl	8008e20 <HAL_TIM_IC_CaptureCallback>
 8008ad6:	e005      	b.n	8008ae4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008ad8:	6878      	ldr	r0, [r7, #4]
 8008ada:	f000 f997 	bl	8008e0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008ade:	6878      	ldr	r0, [r7, #4]
 8008ae0:	f000 f9a8 	bl	8008e34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	2200      	movs	r2, #0
 8008ae8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	691b      	ldr	r3, [r3, #16]
 8008af0:	f003 0310 	and.w	r3, r3, #16
 8008af4:	2b10      	cmp	r3, #16
 8008af6:	d122      	bne.n	8008b3e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	68db      	ldr	r3, [r3, #12]
 8008afe:	f003 0310 	and.w	r3, r3, #16
 8008b02:	2b10      	cmp	r3, #16
 8008b04:	d11b      	bne.n	8008b3e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	f06f 0210 	mvn.w	r2, #16
 8008b0e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	2208      	movs	r2, #8
 8008b14:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	69db      	ldr	r3, [r3, #28]
 8008b1c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d003      	beq.n	8008b2c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008b24:	6878      	ldr	r0, [r7, #4]
 8008b26:	f000 f97b 	bl	8008e20 <HAL_TIM_IC_CaptureCallback>
 8008b2a:	e005      	b.n	8008b38 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008b2c:	6878      	ldr	r0, [r7, #4]
 8008b2e:	f000 f96d 	bl	8008e0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008b32:	6878      	ldr	r0, [r7, #4]
 8008b34:	f000 f97e 	bl	8008e34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	2200      	movs	r2, #0
 8008b3c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	691b      	ldr	r3, [r3, #16]
 8008b44:	f003 0301 	and.w	r3, r3, #1
 8008b48:	2b01      	cmp	r3, #1
 8008b4a:	d10e      	bne.n	8008b6a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	68db      	ldr	r3, [r3, #12]
 8008b52:	f003 0301 	and.w	r3, r3, #1
 8008b56:	2b01      	cmp	r3, #1
 8008b58:	d107      	bne.n	8008b6a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	f06f 0201 	mvn.w	r2, #1
 8008b62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008b64:	6878      	ldr	r0, [r7, #4]
 8008b66:	f7f8 fb53 	bl	8001210 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	691b      	ldr	r3, [r3, #16]
 8008b70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b74:	2b80      	cmp	r3, #128	; 0x80
 8008b76:	d10e      	bne.n	8008b96 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	68db      	ldr	r3, [r3, #12]
 8008b7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b82:	2b80      	cmp	r3, #128	; 0x80
 8008b84:	d107      	bne.n	8008b96 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008b8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008b90:	6878      	ldr	r0, [r7, #4]
 8008b92:	f000 fb2d 	bl	80091f0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	691b      	ldr	r3, [r3, #16]
 8008b9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ba0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008ba4:	d10e      	bne.n	8008bc4 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	68db      	ldr	r3, [r3, #12]
 8008bac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008bb0:	2b80      	cmp	r3, #128	; 0x80
 8008bb2:	d107      	bne.n	8008bc4 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008bbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008bbe:	6878      	ldr	r0, [r7, #4]
 8008bc0:	f000 fb20 	bl	8009204 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	691b      	ldr	r3, [r3, #16]
 8008bca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008bce:	2b40      	cmp	r3, #64	; 0x40
 8008bd0:	d10e      	bne.n	8008bf0 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	68db      	ldr	r3, [r3, #12]
 8008bd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008bdc:	2b40      	cmp	r3, #64	; 0x40
 8008bde:	d107      	bne.n	8008bf0 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008be8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008bea:	6878      	ldr	r0, [r7, #4]
 8008bec:	f000 f92c 	bl	8008e48 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	691b      	ldr	r3, [r3, #16]
 8008bf6:	f003 0320 	and.w	r3, r3, #32
 8008bfa:	2b20      	cmp	r3, #32
 8008bfc:	d10e      	bne.n	8008c1c <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	68db      	ldr	r3, [r3, #12]
 8008c04:	f003 0320 	and.w	r3, r3, #32
 8008c08:	2b20      	cmp	r3, #32
 8008c0a:	d107      	bne.n	8008c1c <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	f06f 0220 	mvn.w	r2, #32
 8008c14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008c16:	6878      	ldr	r0, [r7, #4]
 8008c18:	f000 fae0 	bl	80091dc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008c1c:	bf00      	nop
 8008c1e:	3708      	adds	r7, #8
 8008c20:	46bd      	mov	sp, r7
 8008c22:	bd80      	pop	{r7, pc}

08008c24 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008c24:	b580      	push	{r7, lr}
 8008c26:	b084      	sub	sp, #16
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	6078      	str	r0, [r7, #4]
 8008c2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008c34:	2b01      	cmp	r3, #1
 8008c36:	d101      	bne.n	8008c3c <HAL_TIM_ConfigClockSource+0x18>
 8008c38:	2302      	movs	r3, #2
 8008c3a:	e0db      	b.n	8008df4 <HAL_TIM_ConfigClockSource+0x1d0>
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	2201      	movs	r2, #1
 8008c40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	2202      	movs	r2, #2
 8008c48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	689b      	ldr	r3, [r3, #8]
 8008c52:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008c54:	68fa      	ldr	r2, [r7, #12]
 8008c56:	4b69      	ldr	r3, [pc, #420]	; (8008dfc <HAL_TIM_ConfigClockSource+0x1d8>)
 8008c58:	4013      	ands	r3, r2
 8008c5a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008c62:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	68fa      	ldr	r2, [r7, #12]
 8008c6a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008c6c:	683b      	ldr	r3, [r7, #0]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	4a63      	ldr	r2, [pc, #396]	; (8008e00 <HAL_TIM_ConfigClockSource+0x1dc>)
 8008c72:	4293      	cmp	r3, r2
 8008c74:	f000 80a9 	beq.w	8008dca <HAL_TIM_ConfigClockSource+0x1a6>
 8008c78:	4a61      	ldr	r2, [pc, #388]	; (8008e00 <HAL_TIM_ConfigClockSource+0x1dc>)
 8008c7a:	4293      	cmp	r3, r2
 8008c7c:	f200 80ae 	bhi.w	8008ddc <HAL_TIM_ConfigClockSource+0x1b8>
 8008c80:	4a60      	ldr	r2, [pc, #384]	; (8008e04 <HAL_TIM_ConfigClockSource+0x1e0>)
 8008c82:	4293      	cmp	r3, r2
 8008c84:	f000 80a1 	beq.w	8008dca <HAL_TIM_ConfigClockSource+0x1a6>
 8008c88:	4a5e      	ldr	r2, [pc, #376]	; (8008e04 <HAL_TIM_ConfigClockSource+0x1e0>)
 8008c8a:	4293      	cmp	r3, r2
 8008c8c:	f200 80a6 	bhi.w	8008ddc <HAL_TIM_ConfigClockSource+0x1b8>
 8008c90:	4a5d      	ldr	r2, [pc, #372]	; (8008e08 <HAL_TIM_ConfigClockSource+0x1e4>)
 8008c92:	4293      	cmp	r3, r2
 8008c94:	f000 8099 	beq.w	8008dca <HAL_TIM_ConfigClockSource+0x1a6>
 8008c98:	4a5b      	ldr	r2, [pc, #364]	; (8008e08 <HAL_TIM_ConfigClockSource+0x1e4>)
 8008c9a:	4293      	cmp	r3, r2
 8008c9c:	f200 809e 	bhi.w	8008ddc <HAL_TIM_ConfigClockSource+0x1b8>
 8008ca0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8008ca4:	f000 8091 	beq.w	8008dca <HAL_TIM_ConfigClockSource+0x1a6>
 8008ca8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8008cac:	f200 8096 	bhi.w	8008ddc <HAL_TIM_ConfigClockSource+0x1b8>
 8008cb0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008cb4:	f000 8089 	beq.w	8008dca <HAL_TIM_ConfigClockSource+0x1a6>
 8008cb8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008cbc:	f200 808e 	bhi.w	8008ddc <HAL_TIM_ConfigClockSource+0x1b8>
 8008cc0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008cc4:	d03e      	beq.n	8008d44 <HAL_TIM_ConfigClockSource+0x120>
 8008cc6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008cca:	f200 8087 	bhi.w	8008ddc <HAL_TIM_ConfigClockSource+0x1b8>
 8008cce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008cd2:	f000 8085 	beq.w	8008de0 <HAL_TIM_ConfigClockSource+0x1bc>
 8008cd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008cda:	d87f      	bhi.n	8008ddc <HAL_TIM_ConfigClockSource+0x1b8>
 8008cdc:	2b70      	cmp	r3, #112	; 0x70
 8008cde:	d01a      	beq.n	8008d16 <HAL_TIM_ConfigClockSource+0xf2>
 8008ce0:	2b70      	cmp	r3, #112	; 0x70
 8008ce2:	d87b      	bhi.n	8008ddc <HAL_TIM_ConfigClockSource+0x1b8>
 8008ce4:	2b60      	cmp	r3, #96	; 0x60
 8008ce6:	d050      	beq.n	8008d8a <HAL_TIM_ConfigClockSource+0x166>
 8008ce8:	2b60      	cmp	r3, #96	; 0x60
 8008cea:	d877      	bhi.n	8008ddc <HAL_TIM_ConfigClockSource+0x1b8>
 8008cec:	2b50      	cmp	r3, #80	; 0x50
 8008cee:	d03c      	beq.n	8008d6a <HAL_TIM_ConfigClockSource+0x146>
 8008cf0:	2b50      	cmp	r3, #80	; 0x50
 8008cf2:	d873      	bhi.n	8008ddc <HAL_TIM_ConfigClockSource+0x1b8>
 8008cf4:	2b40      	cmp	r3, #64	; 0x40
 8008cf6:	d058      	beq.n	8008daa <HAL_TIM_ConfigClockSource+0x186>
 8008cf8:	2b40      	cmp	r3, #64	; 0x40
 8008cfa:	d86f      	bhi.n	8008ddc <HAL_TIM_ConfigClockSource+0x1b8>
 8008cfc:	2b30      	cmp	r3, #48	; 0x30
 8008cfe:	d064      	beq.n	8008dca <HAL_TIM_ConfigClockSource+0x1a6>
 8008d00:	2b30      	cmp	r3, #48	; 0x30
 8008d02:	d86b      	bhi.n	8008ddc <HAL_TIM_ConfigClockSource+0x1b8>
 8008d04:	2b20      	cmp	r3, #32
 8008d06:	d060      	beq.n	8008dca <HAL_TIM_ConfigClockSource+0x1a6>
 8008d08:	2b20      	cmp	r3, #32
 8008d0a:	d867      	bhi.n	8008ddc <HAL_TIM_ConfigClockSource+0x1b8>
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d05c      	beq.n	8008dca <HAL_TIM_ConfigClockSource+0x1a6>
 8008d10:	2b10      	cmp	r3, #16
 8008d12:	d05a      	beq.n	8008dca <HAL_TIM_ConfigClockSource+0x1a6>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8008d14:	e062      	b.n	8008ddc <HAL_TIM_ConfigClockSource+0x1b8>
      TIM_ETR_SetConfig(htim->Instance,
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	6818      	ldr	r0, [r3, #0]
 8008d1a:	683b      	ldr	r3, [r7, #0]
 8008d1c:	6899      	ldr	r1, [r3, #8]
 8008d1e:	683b      	ldr	r3, [r7, #0]
 8008d20:	685a      	ldr	r2, [r3, #4]
 8008d22:	683b      	ldr	r3, [r7, #0]
 8008d24:	68db      	ldr	r3, [r3, #12]
 8008d26:	f000 f9b1 	bl	800908c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	689b      	ldr	r3, [r3, #8]
 8008d30:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008d38:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	68fa      	ldr	r2, [r7, #12]
 8008d40:	609a      	str	r2, [r3, #8]
      break;
 8008d42:	e04e      	b.n	8008de2 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_ETR_SetConfig(htim->Instance,
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	6818      	ldr	r0, [r3, #0]
 8008d48:	683b      	ldr	r3, [r7, #0]
 8008d4a:	6899      	ldr	r1, [r3, #8]
 8008d4c:	683b      	ldr	r3, [r7, #0]
 8008d4e:	685a      	ldr	r2, [r3, #4]
 8008d50:	683b      	ldr	r3, [r7, #0]
 8008d52:	68db      	ldr	r3, [r3, #12]
 8008d54:	f000 f99a 	bl	800908c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	689a      	ldr	r2, [r3, #8]
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008d66:	609a      	str	r2, [r3, #8]
      break;
 8008d68:	e03b      	b.n	8008de2 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	6818      	ldr	r0, [r3, #0]
 8008d6e:	683b      	ldr	r3, [r7, #0]
 8008d70:	6859      	ldr	r1, [r3, #4]
 8008d72:	683b      	ldr	r3, [r7, #0]
 8008d74:	68db      	ldr	r3, [r3, #12]
 8008d76:	461a      	mov	r2, r3
 8008d78:	f000 f90a 	bl	8008f90 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	2150      	movs	r1, #80	; 0x50
 8008d82:	4618      	mov	r0, r3
 8008d84:	f000 f964 	bl	8009050 <TIM_ITRx_SetConfig>
      break;
 8008d88:	e02b      	b.n	8008de2 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	6818      	ldr	r0, [r3, #0]
 8008d8e:	683b      	ldr	r3, [r7, #0]
 8008d90:	6859      	ldr	r1, [r3, #4]
 8008d92:	683b      	ldr	r3, [r7, #0]
 8008d94:	68db      	ldr	r3, [r3, #12]
 8008d96:	461a      	mov	r2, r3
 8008d98:	f000 f929 	bl	8008fee <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	2160      	movs	r1, #96	; 0x60
 8008da2:	4618      	mov	r0, r3
 8008da4:	f000 f954 	bl	8009050 <TIM_ITRx_SetConfig>
      break;
 8008da8:	e01b      	b.n	8008de2 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	6818      	ldr	r0, [r3, #0]
 8008dae:	683b      	ldr	r3, [r7, #0]
 8008db0:	6859      	ldr	r1, [r3, #4]
 8008db2:	683b      	ldr	r3, [r7, #0]
 8008db4:	68db      	ldr	r3, [r3, #12]
 8008db6:	461a      	mov	r2, r3
 8008db8:	f000 f8ea 	bl	8008f90 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	2140      	movs	r1, #64	; 0x40
 8008dc2:	4618      	mov	r0, r3
 8008dc4:	f000 f944 	bl	8009050 <TIM_ITRx_SetConfig>
      break;
 8008dc8:	e00b      	b.n	8008de2 <HAL_TIM_ConfigClockSource+0x1be>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	681a      	ldr	r2, [r3, #0]
 8008dce:	683b      	ldr	r3, [r7, #0]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	4619      	mov	r1, r3
 8008dd4:	4610      	mov	r0, r2
 8008dd6:	f000 f93b 	bl	8009050 <TIM_ITRx_SetConfig>
        break;
 8008dda:	e002      	b.n	8008de2 <HAL_TIM_ConfigClockSource+0x1be>
      break;
 8008ddc:	bf00      	nop
 8008dde:	e000      	b.n	8008de2 <HAL_TIM_ConfigClockSource+0x1be>
      break;
 8008de0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	2201      	movs	r2, #1
 8008de6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	2200      	movs	r2, #0
 8008dee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008df2:	2300      	movs	r3, #0
}
 8008df4:	4618      	mov	r0, r3
 8008df6:	3710      	adds	r7, #16
 8008df8:	46bd      	mov	sp, r7
 8008dfa:	bd80      	pop	{r7, pc}
 8008dfc:	ffceff88 	.word	0xffceff88
 8008e00:	00100040 	.word	0x00100040
 8008e04:	00100030 	.word	0x00100030
 8008e08:	00100020 	.word	0x00100020

08008e0c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008e0c:	b480      	push	{r7}
 8008e0e:	b083      	sub	sp, #12
 8008e10:	af00      	add	r7, sp, #0
 8008e12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008e14:	bf00      	nop
 8008e16:	370c      	adds	r7, #12
 8008e18:	46bd      	mov	sp, r7
 8008e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e1e:	4770      	bx	lr

08008e20 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008e20:	b480      	push	{r7}
 8008e22:	b083      	sub	sp, #12
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008e28:	bf00      	nop
 8008e2a:	370c      	adds	r7, #12
 8008e2c:	46bd      	mov	sp, r7
 8008e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e32:	4770      	bx	lr

08008e34 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008e34:	b480      	push	{r7}
 8008e36:	b083      	sub	sp, #12
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008e3c:	bf00      	nop
 8008e3e:	370c      	adds	r7, #12
 8008e40:	46bd      	mov	sp, r7
 8008e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e46:	4770      	bx	lr

08008e48 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008e48:	b480      	push	{r7}
 8008e4a:	b083      	sub	sp, #12
 8008e4c:	af00      	add	r7, sp, #0
 8008e4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008e50:	bf00      	nop
 8008e52:	370c      	adds	r7, #12
 8008e54:	46bd      	mov	sp, r7
 8008e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e5a:	4770      	bx	lr

08008e5c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008e5c:	b480      	push	{r7}
 8008e5e:	b085      	sub	sp, #20
 8008e60:	af00      	add	r7, sp, #0
 8008e62:	6078      	str	r0, [r7, #4]
 8008e64:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	4a40      	ldr	r2, [pc, #256]	; (8008f70 <TIM_Base_SetConfig+0x114>)
 8008e70:	4293      	cmp	r3, r2
 8008e72:	d013      	beq.n	8008e9c <TIM_Base_SetConfig+0x40>
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e7a:	d00f      	beq.n	8008e9c <TIM_Base_SetConfig+0x40>
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	4a3d      	ldr	r2, [pc, #244]	; (8008f74 <TIM_Base_SetConfig+0x118>)
 8008e80:	4293      	cmp	r3, r2
 8008e82:	d00b      	beq.n	8008e9c <TIM_Base_SetConfig+0x40>
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	4a3c      	ldr	r2, [pc, #240]	; (8008f78 <TIM_Base_SetConfig+0x11c>)
 8008e88:	4293      	cmp	r3, r2
 8008e8a:	d007      	beq.n	8008e9c <TIM_Base_SetConfig+0x40>
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	4a3b      	ldr	r2, [pc, #236]	; (8008f7c <TIM_Base_SetConfig+0x120>)
 8008e90:	4293      	cmp	r3, r2
 8008e92:	d003      	beq.n	8008e9c <TIM_Base_SetConfig+0x40>
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	4a3a      	ldr	r2, [pc, #232]	; (8008f80 <TIM_Base_SetConfig+0x124>)
 8008e98:	4293      	cmp	r3, r2
 8008e9a:	d108      	bne.n	8008eae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ea2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008ea4:	683b      	ldr	r3, [r7, #0]
 8008ea6:	685b      	ldr	r3, [r3, #4]
 8008ea8:	68fa      	ldr	r2, [r7, #12]
 8008eaa:	4313      	orrs	r3, r2
 8008eac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	4a2f      	ldr	r2, [pc, #188]	; (8008f70 <TIM_Base_SetConfig+0x114>)
 8008eb2:	4293      	cmp	r3, r2
 8008eb4:	d01f      	beq.n	8008ef6 <TIM_Base_SetConfig+0x9a>
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ebc:	d01b      	beq.n	8008ef6 <TIM_Base_SetConfig+0x9a>
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	4a2c      	ldr	r2, [pc, #176]	; (8008f74 <TIM_Base_SetConfig+0x118>)
 8008ec2:	4293      	cmp	r3, r2
 8008ec4:	d017      	beq.n	8008ef6 <TIM_Base_SetConfig+0x9a>
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	4a2b      	ldr	r2, [pc, #172]	; (8008f78 <TIM_Base_SetConfig+0x11c>)
 8008eca:	4293      	cmp	r3, r2
 8008ecc:	d013      	beq.n	8008ef6 <TIM_Base_SetConfig+0x9a>
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	4a2a      	ldr	r2, [pc, #168]	; (8008f7c <TIM_Base_SetConfig+0x120>)
 8008ed2:	4293      	cmp	r3, r2
 8008ed4:	d00f      	beq.n	8008ef6 <TIM_Base_SetConfig+0x9a>
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	4a29      	ldr	r2, [pc, #164]	; (8008f80 <TIM_Base_SetConfig+0x124>)
 8008eda:	4293      	cmp	r3, r2
 8008edc:	d00b      	beq.n	8008ef6 <TIM_Base_SetConfig+0x9a>
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	4a28      	ldr	r2, [pc, #160]	; (8008f84 <TIM_Base_SetConfig+0x128>)
 8008ee2:	4293      	cmp	r3, r2
 8008ee4:	d007      	beq.n	8008ef6 <TIM_Base_SetConfig+0x9a>
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	4a27      	ldr	r2, [pc, #156]	; (8008f88 <TIM_Base_SetConfig+0x12c>)
 8008eea:	4293      	cmp	r3, r2
 8008eec:	d003      	beq.n	8008ef6 <TIM_Base_SetConfig+0x9a>
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	4a26      	ldr	r2, [pc, #152]	; (8008f8c <TIM_Base_SetConfig+0x130>)
 8008ef2:	4293      	cmp	r3, r2
 8008ef4:	d108      	bne.n	8008f08 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008efc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008efe:	683b      	ldr	r3, [r7, #0]
 8008f00:	68db      	ldr	r3, [r3, #12]
 8008f02:	68fa      	ldr	r2, [r7, #12]
 8008f04:	4313      	orrs	r3, r2
 8008f06:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008f0e:	683b      	ldr	r3, [r7, #0]
 8008f10:	695b      	ldr	r3, [r3, #20]
 8008f12:	4313      	orrs	r3, r2
 8008f14:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	68fa      	ldr	r2, [r7, #12]
 8008f1a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008f1c:	683b      	ldr	r3, [r7, #0]
 8008f1e:	689a      	ldr	r2, [r3, #8]
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008f24:	683b      	ldr	r3, [r7, #0]
 8008f26:	681a      	ldr	r2, [r3, #0]
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	4a10      	ldr	r2, [pc, #64]	; (8008f70 <TIM_Base_SetConfig+0x114>)
 8008f30:	4293      	cmp	r3, r2
 8008f32:	d00f      	beq.n	8008f54 <TIM_Base_SetConfig+0xf8>
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	4a12      	ldr	r2, [pc, #72]	; (8008f80 <TIM_Base_SetConfig+0x124>)
 8008f38:	4293      	cmp	r3, r2
 8008f3a:	d00b      	beq.n	8008f54 <TIM_Base_SetConfig+0xf8>
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	4a11      	ldr	r2, [pc, #68]	; (8008f84 <TIM_Base_SetConfig+0x128>)
 8008f40:	4293      	cmp	r3, r2
 8008f42:	d007      	beq.n	8008f54 <TIM_Base_SetConfig+0xf8>
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	4a10      	ldr	r2, [pc, #64]	; (8008f88 <TIM_Base_SetConfig+0x12c>)
 8008f48:	4293      	cmp	r3, r2
 8008f4a:	d003      	beq.n	8008f54 <TIM_Base_SetConfig+0xf8>
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	4a0f      	ldr	r2, [pc, #60]	; (8008f8c <TIM_Base_SetConfig+0x130>)
 8008f50:	4293      	cmp	r3, r2
 8008f52:	d103      	bne.n	8008f5c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008f54:	683b      	ldr	r3, [r7, #0]
 8008f56:	691a      	ldr	r2, [r3, #16]
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	2201      	movs	r2, #1
 8008f60:	615a      	str	r2, [r3, #20]
}
 8008f62:	bf00      	nop
 8008f64:	3714      	adds	r7, #20
 8008f66:	46bd      	mov	sp, r7
 8008f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f6c:	4770      	bx	lr
 8008f6e:	bf00      	nop
 8008f70:	40010000 	.word	0x40010000
 8008f74:	40000400 	.word	0x40000400
 8008f78:	40000800 	.word	0x40000800
 8008f7c:	40000c00 	.word	0x40000c00
 8008f80:	40010400 	.word	0x40010400
 8008f84:	40014000 	.word	0x40014000
 8008f88:	40014400 	.word	0x40014400
 8008f8c:	40014800 	.word	0x40014800

08008f90 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008f90:	b480      	push	{r7}
 8008f92:	b087      	sub	sp, #28
 8008f94:	af00      	add	r7, sp, #0
 8008f96:	60f8      	str	r0, [r7, #12]
 8008f98:	60b9      	str	r1, [r7, #8]
 8008f9a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	6a1b      	ldr	r3, [r3, #32]
 8008fa0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	6a1b      	ldr	r3, [r3, #32]
 8008fa6:	f023 0201 	bic.w	r2, r3, #1
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	699b      	ldr	r3, [r3, #24]
 8008fb2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008fb4:	693b      	ldr	r3, [r7, #16]
 8008fb6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008fba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	011b      	lsls	r3, r3, #4
 8008fc0:	693a      	ldr	r2, [r7, #16]
 8008fc2:	4313      	orrs	r3, r2
 8008fc4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008fc6:	697b      	ldr	r3, [r7, #20]
 8008fc8:	f023 030a 	bic.w	r3, r3, #10
 8008fcc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008fce:	697a      	ldr	r2, [r7, #20]
 8008fd0:	68bb      	ldr	r3, [r7, #8]
 8008fd2:	4313      	orrs	r3, r2
 8008fd4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	693a      	ldr	r2, [r7, #16]
 8008fda:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	697a      	ldr	r2, [r7, #20]
 8008fe0:	621a      	str	r2, [r3, #32]
}
 8008fe2:	bf00      	nop
 8008fe4:	371c      	adds	r7, #28
 8008fe6:	46bd      	mov	sp, r7
 8008fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fec:	4770      	bx	lr

08008fee <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008fee:	b480      	push	{r7}
 8008ff0:	b087      	sub	sp, #28
 8008ff2:	af00      	add	r7, sp, #0
 8008ff4:	60f8      	str	r0, [r7, #12]
 8008ff6:	60b9      	str	r1, [r7, #8]
 8008ff8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	6a1b      	ldr	r3, [r3, #32]
 8008ffe:	f023 0210 	bic.w	r2, r3, #16
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	699b      	ldr	r3, [r3, #24]
 800900a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	6a1b      	ldr	r3, [r3, #32]
 8009010:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009012:	697b      	ldr	r3, [r7, #20]
 8009014:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009018:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	031b      	lsls	r3, r3, #12
 800901e:	697a      	ldr	r2, [r7, #20]
 8009020:	4313      	orrs	r3, r2
 8009022:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009024:	693b      	ldr	r3, [r7, #16]
 8009026:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800902a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800902c:	68bb      	ldr	r3, [r7, #8]
 800902e:	011b      	lsls	r3, r3, #4
 8009030:	693a      	ldr	r2, [r7, #16]
 8009032:	4313      	orrs	r3, r2
 8009034:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	697a      	ldr	r2, [r7, #20]
 800903a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	693a      	ldr	r2, [r7, #16]
 8009040:	621a      	str	r2, [r3, #32]
}
 8009042:	bf00      	nop
 8009044:	371c      	adds	r7, #28
 8009046:	46bd      	mov	sp, r7
 8009048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800904c:	4770      	bx	lr
	...

08009050 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009050:	b480      	push	{r7}
 8009052:	b085      	sub	sp, #20
 8009054:	af00      	add	r7, sp, #0
 8009056:	6078      	str	r0, [r7, #4]
 8009058:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	689b      	ldr	r3, [r3, #8]
 800905e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009060:	68fa      	ldr	r2, [r7, #12]
 8009062:	4b09      	ldr	r3, [pc, #36]	; (8009088 <TIM_ITRx_SetConfig+0x38>)
 8009064:	4013      	ands	r3, r2
 8009066:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009068:	683a      	ldr	r2, [r7, #0]
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	4313      	orrs	r3, r2
 800906e:	f043 0307 	orr.w	r3, r3, #7
 8009072:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	68fa      	ldr	r2, [r7, #12]
 8009078:	609a      	str	r2, [r3, #8]
}
 800907a:	bf00      	nop
 800907c:	3714      	adds	r7, #20
 800907e:	46bd      	mov	sp, r7
 8009080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009084:	4770      	bx	lr
 8009086:	bf00      	nop
 8009088:	ffcfff8f 	.word	0xffcfff8f

0800908c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800908c:	b480      	push	{r7}
 800908e:	b087      	sub	sp, #28
 8009090:	af00      	add	r7, sp, #0
 8009092:	60f8      	str	r0, [r7, #12]
 8009094:	60b9      	str	r1, [r7, #8]
 8009096:	607a      	str	r2, [r7, #4]
 8009098:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	689b      	ldr	r3, [r3, #8]
 800909e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80090a0:	697b      	ldr	r3, [r7, #20]
 80090a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80090a6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80090a8:	683b      	ldr	r3, [r7, #0]
 80090aa:	021a      	lsls	r2, r3, #8
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	431a      	orrs	r2, r3
 80090b0:	68bb      	ldr	r3, [r7, #8]
 80090b2:	4313      	orrs	r3, r2
 80090b4:	697a      	ldr	r2, [r7, #20]
 80090b6:	4313      	orrs	r3, r2
 80090b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	697a      	ldr	r2, [r7, #20]
 80090be:	609a      	str	r2, [r3, #8]
}
 80090c0:	bf00      	nop
 80090c2:	371c      	adds	r7, #28
 80090c4:	46bd      	mov	sp, r7
 80090c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ca:	4770      	bx	lr

080090cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80090cc:	b480      	push	{r7}
 80090ce:	b085      	sub	sp, #20
 80090d0:	af00      	add	r7, sp, #0
 80090d2:	6078      	str	r0, [r7, #4]
 80090d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80090dc:	2b01      	cmp	r3, #1
 80090de:	d101      	bne.n	80090e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80090e0:	2302      	movs	r3, #2
 80090e2:	e068      	b.n	80091b6 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	2201      	movs	r2, #1
 80090e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	2202      	movs	r2, #2
 80090f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	685b      	ldr	r3, [r3, #4]
 80090fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	689b      	ldr	r3, [r3, #8]
 8009102:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	4a2e      	ldr	r2, [pc, #184]	; (80091c4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800910a:	4293      	cmp	r3, r2
 800910c:	d004      	beq.n	8009118 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	4a2d      	ldr	r2, [pc, #180]	; (80091c8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8009114:	4293      	cmp	r3, r2
 8009116:	d108      	bne.n	800912a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800911e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009120:	683b      	ldr	r3, [r7, #0]
 8009122:	685b      	ldr	r3, [r3, #4]
 8009124:	68fa      	ldr	r2, [r7, #12]
 8009126:	4313      	orrs	r3, r2
 8009128:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009130:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009132:	683b      	ldr	r3, [r7, #0]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	68fa      	ldr	r2, [r7, #12]
 8009138:	4313      	orrs	r3, r2
 800913a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	68fa      	ldr	r2, [r7, #12]
 8009142:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	4a1e      	ldr	r2, [pc, #120]	; (80091c4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800914a:	4293      	cmp	r3, r2
 800914c:	d01d      	beq.n	800918a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009156:	d018      	beq.n	800918a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	4a1b      	ldr	r2, [pc, #108]	; (80091cc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800915e:	4293      	cmp	r3, r2
 8009160:	d013      	beq.n	800918a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	4a1a      	ldr	r2, [pc, #104]	; (80091d0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009168:	4293      	cmp	r3, r2
 800916a:	d00e      	beq.n	800918a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	4a18      	ldr	r2, [pc, #96]	; (80091d4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8009172:	4293      	cmp	r3, r2
 8009174:	d009      	beq.n	800918a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	4a13      	ldr	r2, [pc, #76]	; (80091c8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800917c:	4293      	cmp	r3, r2
 800917e:	d004      	beq.n	800918a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	4a14      	ldr	r2, [pc, #80]	; (80091d8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8009186:	4293      	cmp	r3, r2
 8009188:	d10c      	bne.n	80091a4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800918a:	68bb      	ldr	r3, [r7, #8]
 800918c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009190:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009192:	683b      	ldr	r3, [r7, #0]
 8009194:	689b      	ldr	r3, [r3, #8]
 8009196:	68ba      	ldr	r2, [r7, #8]
 8009198:	4313      	orrs	r3, r2
 800919a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	68ba      	ldr	r2, [r7, #8]
 80091a2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	2201      	movs	r2, #1
 80091a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	2200      	movs	r2, #0
 80091b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80091b4:	2300      	movs	r3, #0
}
 80091b6:	4618      	mov	r0, r3
 80091b8:	3714      	adds	r7, #20
 80091ba:	46bd      	mov	sp, r7
 80091bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c0:	4770      	bx	lr
 80091c2:	bf00      	nop
 80091c4:	40010000 	.word	0x40010000
 80091c8:	40010400 	.word	0x40010400
 80091cc:	40000400 	.word	0x40000400
 80091d0:	40000800 	.word	0x40000800
 80091d4:	40000c00 	.word	0x40000c00
 80091d8:	40001800 	.word	0x40001800

080091dc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80091dc:	b480      	push	{r7}
 80091de:	b083      	sub	sp, #12
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80091e4:	bf00      	nop
 80091e6:	370c      	adds	r7, #12
 80091e8:	46bd      	mov	sp, r7
 80091ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ee:	4770      	bx	lr

080091f0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80091f0:	b480      	push	{r7}
 80091f2:	b083      	sub	sp, #12
 80091f4:	af00      	add	r7, sp, #0
 80091f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80091f8:	bf00      	nop
 80091fa:	370c      	adds	r7, #12
 80091fc:	46bd      	mov	sp, r7
 80091fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009202:	4770      	bx	lr

08009204 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009204:	b480      	push	{r7}
 8009206:	b083      	sub	sp, #12
 8009208:	af00      	add	r7, sp, #0
 800920a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800920c:	bf00      	nop
 800920e:	370c      	adds	r7, #12
 8009210:	46bd      	mov	sp, r7
 8009212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009216:	4770      	bx	lr

08009218 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009218:	b580      	push	{r7, lr}
 800921a:	b082      	sub	sp, #8
 800921c:	af00      	add	r7, sp, #0
 800921e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	2b00      	cmp	r3, #0
 8009224:	d101      	bne.n	800922a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009226:	2301      	movs	r3, #1
 8009228:	e042      	b.n	80092b0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009230:	2b00      	cmp	r3, #0
 8009232:	d106      	bne.n	8009242 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	2200      	movs	r2, #0
 8009238:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800923c:	6878      	ldr	r0, [r7, #4]
 800923e:	f7f8 f867 	bl	8001310 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	2224      	movs	r2, #36	; 0x24
 8009246:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	681a      	ldr	r2, [r3, #0]
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	f022 0201 	bic.w	r2, r2, #1
 8009258:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800925a:	6878      	ldr	r0, [r7, #4]
 800925c:	f000 fb90 	bl	8009980 <UART_SetConfig>
 8009260:	4603      	mov	r3, r0
 8009262:	2b01      	cmp	r3, #1
 8009264:	d101      	bne.n	800926a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8009266:	2301      	movs	r3, #1
 8009268:	e022      	b.n	80092b0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800926e:	2b00      	cmp	r3, #0
 8009270:	d002      	beq.n	8009278 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8009272:	6878      	ldr	r0, [r7, #4]
 8009274:	f001 f8e4 	bl	800a440 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	685a      	ldr	r2, [r3, #4]
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009286:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	689a      	ldr	r2, [r3, #8]
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009296:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	681a      	ldr	r2, [r3, #0]
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	f042 0201 	orr.w	r2, r2, #1
 80092a6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80092a8:	6878      	ldr	r0, [r7, #4]
 80092aa:	f001 f96b 	bl	800a584 <UART_CheckIdleState>
 80092ae:	4603      	mov	r3, r0
}
 80092b0:	4618      	mov	r0, r3
 80092b2:	3708      	adds	r7, #8
 80092b4:	46bd      	mov	sp, r7
 80092b6:	bd80      	pop	{r7, pc}

080092b8 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80092b8:	b580      	push	{r7, lr}
 80092ba:	b084      	sub	sp, #16
 80092bc:	af00      	add	r7, sp, #0
 80092be:	60f8      	str	r0, [r7, #12]
 80092c0:	60b9      	str	r1, [r7, #8]
 80092c2:	4613      	mov	r3, r2
 80092c4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80092cc:	2b20      	cmp	r3, #32
 80092ce:	d168      	bne.n	80093a2 <HAL_UART_Transmit_DMA+0xea>
  {
    if ((pData == NULL) || (Size == 0U))
 80092d0:	68bb      	ldr	r3, [r7, #8]
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d002      	beq.n	80092dc <HAL_UART_Transmit_DMA+0x24>
 80092d6:	88fb      	ldrh	r3, [r7, #6]
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d101      	bne.n	80092e0 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 80092dc:	2301      	movs	r3, #1
 80092de:	e061      	b.n	80093a4 <HAL_UART_Transmit_DMA+0xec>
    }

    __HAL_LOCK(huart);
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80092e6:	2b01      	cmp	r3, #1
 80092e8:	d101      	bne.n	80092ee <HAL_UART_Transmit_DMA+0x36>
 80092ea:	2302      	movs	r3, #2
 80092ec:	e05a      	b.n	80093a4 <HAL_UART_Transmit_DMA+0xec>
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	2201      	movs	r2, #1
 80092f2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	68ba      	ldr	r2, [r7, #8]
 80092fa:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	88fa      	ldrh	r2, [r7, #6]
 8009300:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	88fa      	ldrh	r2, [r7, #6]
 8009308:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	2200      	movs	r2, #0
 8009310:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	2221      	movs	r2, #33	; 0x21
 8009318:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009320:	2b00      	cmp	r3, #0
 8009322:	d02c      	beq.n	800937e <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009328:	4a20      	ldr	r2, [pc, #128]	; (80093ac <HAL_UART_Transmit_DMA+0xf4>)
 800932a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009330:	4a1f      	ldr	r2, [pc, #124]	; (80093b0 <HAL_UART_Transmit_DMA+0xf8>)
 8009332:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009338:	4a1e      	ldr	r2, [pc, #120]	; (80093b4 <HAL_UART_Transmit_DMA+0xfc>)
 800933a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009340:	2200      	movs	r2, #0
 8009342:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800934c:	4619      	mov	r1, r3
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	3328      	adds	r3, #40	; 0x28
 8009354:	461a      	mov	r2, r3
 8009356:	88fb      	ldrh	r3, [r7, #6]
 8009358:	f7f8 ffee 	bl	8002338 <HAL_DMA_Start_IT>
 800935c:	4603      	mov	r3, r0
 800935e:	2b00      	cmp	r3, #0
 8009360:	d00d      	beq.n	800937e <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	2210      	movs	r2, #16
 8009366:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	2200      	movs	r2, #0
 800936e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	2220      	movs	r2, #32
 8009376:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 800937a:	2301      	movs	r3, #1
 800937c:	e012      	b.n	80093a4 <HAL_UART_Transmit_DMA+0xec>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	2240      	movs	r2, #64	; 0x40
 8009384:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	2200      	movs	r2, #0
 800938a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	689a      	ldr	r2, [r3, #8]
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800939c:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 800939e:	2300      	movs	r3, #0
 80093a0:	e000      	b.n	80093a4 <HAL_UART_Transmit_DMA+0xec>
  }
  else
  {
    return HAL_BUSY;
 80093a2:	2302      	movs	r3, #2
  }
}
 80093a4:	4618      	mov	r0, r3
 80093a6:	3710      	adds	r7, #16
 80093a8:	46bd      	mov	sp, r7
 80093aa:	bd80      	pop	{r7, pc}
 80093ac:	0800a7bd 	.word	0x0800a7bd
 80093b0:	0800a80d 	.word	0x0800a80d
 80093b4:	0800a829 	.word	0x0800a829

080093b8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80093b8:	b580      	push	{r7, lr}
 80093ba:	b088      	sub	sp, #32
 80093bc:	af00      	add	r7, sp, #0
 80093be:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	69db      	ldr	r3, [r3, #28]
 80093c6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	689b      	ldr	r3, [r3, #8]
 80093d6:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80093d8:	69fa      	ldr	r2, [r7, #28]
 80093da:	f640 030f 	movw	r3, #2063	; 0x80f
 80093de:	4013      	ands	r3, r2
 80093e0:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80093e2:	693b      	ldr	r3, [r7, #16]
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d118      	bne.n	800941a <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80093e8:	69fb      	ldr	r3, [r7, #28]
 80093ea:	f003 0320 	and.w	r3, r3, #32
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d013      	beq.n	800941a <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80093f2:	69bb      	ldr	r3, [r7, #24]
 80093f4:	f003 0320 	and.w	r3, r3, #32
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d104      	bne.n	8009406 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80093fc:	697b      	ldr	r3, [r7, #20]
 80093fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009402:	2b00      	cmp	r3, #0
 8009404:	d009      	beq.n	800941a <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800940a:	2b00      	cmp	r3, #0
 800940c:	f000 8282 	beq.w	8009914 <HAL_UART_IRQHandler+0x55c>
      {
        huart->RxISR(huart);
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009414:	6878      	ldr	r0, [r7, #4]
 8009416:	4798      	blx	r3
      }
      return;
 8009418:	e27c      	b.n	8009914 <HAL_UART_IRQHandler+0x55c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800941a:	693b      	ldr	r3, [r7, #16]
 800941c:	2b00      	cmp	r3, #0
 800941e:	f000 80ef 	beq.w	8009600 <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8009422:	697a      	ldr	r2, [r7, #20]
 8009424:	4b73      	ldr	r3, [pc, #460]	; (80095f4 <HAL_UART_IRQHandler+0x23c>)
 8009426:	4013      	ands	r3, r2
 8009428:	2b00      	cmp	r3, #0
 800942a:	d105      	bne.n	8009438 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800942c:	69ba      	ldr	r2, [r7, #24]
 800942e:	4b72      	ldr	r3, [pc, #456]	; (80095f8 <HAL_UART_IRQHandler+0x240>)
 8009430:	4013      	ands	r3, r2
 8009432:	2b00      	cmp	r3, #0
 8009434:	f000 80e4 	beq.w	8009600 <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009438:	69fb      	ldr	r3, [r7, #28]
 800943a:	f003 0301 	and.w	r3, r3, #1
 800943e:	2b00      	cmp	r3, #0
 8009440:	d010      	beq.n	8009464 <HAL_UART_IRQHandler+0xac>
 8009442:	69bb      	ldr	r3, [r7, #24]
 8009444:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009448:	2b00      	cmp	r3, #0
 800944a:	d00b      	beq.n	8009464 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	2201      	movs	r2, #1
 8009452:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800945a:	f043 0201 	orr.w	r2, r3, #1
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009464:	69fb      	ldr	r3, [r7, #28]
 8009466:	f003 0302 	and.w	r3, r3, #2
 800946a:	2b00      	cmp	r3, #0
 800946c:	d010      	beq.n	8009490 <HAL_UART_IRQHandler+0xd8>
 800946e:	697b      	ldr	r3, [r7, #20]
 8009470:	f003 0301 	and.w	r3, r3, #1
 8009474:	2b00      	cmp	r3, #0
 8009476:	d00b      	beq.n	8009490 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	2202      	movs	r2, #2
 800947e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009486:	f043 0204 	orr.w	r2, r3, #4
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009490:	69fb      	ldr	r3, [r7, #28]
 8009492:	f003 0304 	and.w	r3, r3, #4
 8009496:	2b00      	cmp	r3, #0
 8009498:	d010      	beq.n	80094bc <HAL_UART_IRQHandler+0x104>
 800949a:	697b      	ldr	r3, [r7, #20]
 800949c:	f003 0301 	and.w	r3, r3, #1
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d00b      	beq.n	80094bc <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	2204      	movs	r2, #4
 80094aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80094b2:	f043 0202 	orr.w	r2, r3, #2
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80094bc:	69fb      	ldr	r3, [r7, #28]
 80094be:	f003 0308 	and.w	r3, r3, #8
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d015      	beq.n	80094f2 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80094c6:	69bb      	ldr	r3, [r7, #24]
 80094c8:	f003 0320 	and.w	r3, r3, #32
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d104      	bne.n	80094da <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80094d0:	697a      	ldr	r2, [r7, #20]
 80094d2:	4b48      	ldr	r3, [pc, #288]	; (80095f4 <HAL_UART_IRQHandler+0x23c>)
 80094d4:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d00b      	beq.n	80094f2 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	2208      	movs	r2, #8
 80094e0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80094e8:	f043 0208 	orr.w	r2, r3, #8
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80094f2:	69fb      	ldr	r3, [r7, #28]
 80094f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d011      	beq.n	8009520 <HAL_UART_IRQHandler+0x168>
 80094fc:	69bb      	ldr	r3, [r7, #24]
 80094fe:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009502:	2b00      	cmp	r3, #0
 8009504:	d00c      	beq.n	8009520 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800950e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009516:	f043 0220 	orr.w	r2, r3, #32
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009526:	2b00      	cmp	r3, #0
 8009528:	f000 81f6 	beq.w	8009918 <HAL_UART_IRQHandler+0x560>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800952c:	69fb      	ldr	r3, [r7, #28]
 800952e:	f003 0320 	and.w	r3, r3, #32
 8009532:	2b00      	cmp	r3, #0
 8009534:	d011      	beq.n	800955a <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009536:	69bb      	ldr	r3, [r7, #24]
 8009538:	f003 0320 	and.w	r3, r3, #32
 800953c:	2b00      	cmp	r3, #0
 800953e:	d104      	bne.n	800954a <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009540:	697b      	ldr	r3, [r7, #20]
 8009542:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009546:	2b00      	cmp	r3, #0
 8009548:	d007      	beq.n	800955a <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800954e:	2b00      	cmp	r3, #0
 8009550:	d003      	beq.n	800955a <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009556:	6878      	ldr	r0, [r7, #4]
 8009558:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009560:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	689b      	ldr	r3, [r3, #8]
 8009568:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800956c:	2b40      	cmp	r3, #64	; 0x40
 800956e:	d004      	beq.n	800957a <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009576:	2b00      	cmp	r3, #0
 8009578:	d031      	beq.n	80095de <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800957a:	6878      	ldr	r0, [r7, #4]
 800957c:	f001 f8ec 	bl	800a758 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	689b      	ldr	r3, [r3, #8]
 8009586:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800958a:	2b40      	cmp	r3, #64	; 0x40
 800958c:	d123      	bne.n	80095d6 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	689a      	ldr	r2, [r3, #8]
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800959c:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d013      	beq.n	80095ce <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80095aa:	4a14      	ldr	r2, [pc, #80]	; (80095fc <HAL_UART_IRQHandler+0x244>)
 80095ac:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80095b2:	4618      	mov	r0, r3
 80095b4:	f7f9 fc48 	bl	8002e48 <HAL_DMA_Abort_IT>
 80095b8:	4603      	mov	r3, r0
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d017      	beq.n	80095ee <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80095c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80095c4:	687a      	ldr	r2, [r7, #4]
 80095c6:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 80095c8:	4610      	mov	r0, r2
 80095ca:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80095cc:	e00f      	b.n	80095ee <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80095ce:	6878      	ldr	r0, [r7, #4]
 80095d0:	f000 f9c0 	bl	8009954 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80095d4:	e00b      	b.n	80095ee <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80095d6:	6878      	ldr	r0, [r7, #4]
 80095d8:	f000 f9bc 	bl	8009954 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80095dc:	e007      	b.n	80095ee <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80095de:	6878      	ldr	r0, [r7, #4]
 80095e0:	f000 f9b8 	bl	8009954 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	2200      	movs	r2, #0
 80095e8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 80095ec:	e194      	b.n	8009918 <HAL_UART_IRQHandler+0x560>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80095ee:	bf00      	nop
    return;
 80095f0:	e192      	b.n	8009918 <HAL_UART_IRQHandler+0x560>
 80095f2:	bf00      	nop
 80095f4:	10000001 	.word	0x10000001
 80095f8:	04000120 	.word	0x04000120
 80095fc:	0800a8a9 	.word	0x0800a8a9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009604:	2b01      	cmp	r3, #1
 8009606:	f040 810f 	bne.w	8009828 <HAL_UART_IRQHandler+0x470>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800960a:	69fb      	ldr	r3, [r7, #28]
 800960c:	f003 0310 	and.w	r3, r3, #16
 8009610:	2b00      	cmp	r3, #0
 8009612:	f000 8109 	beq.w	8009828 <HAL_UART_IRQHandler+0x470>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009616:	69bb      	ldr	r3, [r7, #24]
 8009618:	f003 0310 	and.w	r3, r3, #16
 800961c:	2b00      	cmp	r3, #0
 800961e:	f000 8103 	beq.w	8009828 <HAL_UART_IRQHandler+0x470>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	2210      	movs	r2, #16
 8009628:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	689b      	ldr	r3, [r3, #8]
 8009630:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009634:	2b40      	cmp	r3, #64	; 0x40
 8009636:	f040 80bb 	bne.w	80097b0 <HAL_UART_IRQHandler+0x3f8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	4a96      	ldr	r2, [pc, #600]	; (800989c <HAL_UART_IRQHandler+0x4e4>)
 8009642:	4293      	cmp	r3, r2
 8009644:	d059      	beq.n	80096fa <HAL_UART_IRQHandler+0x342>
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	4a94      	ldr	r2, [pc, #592]	; (80098a0 <HAL_UART_IRQHandler+0x4e8>)
 800964e:	4293      	cmp	r3, r2
 8009650:	d053      	beq.n	80096fa <HAL_UART_IRQHandler+0x342>
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	4a92      	ldr	r2, [pc, #584]	; (80098a4 <HAL_UART_IRQHandler+0x4ec>)
 800965a:	4293      	cmp	r3, r2
 800965c:	d04d      	beq.n	80096fa <HAL_UART_IRQHandler+0x342>
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	4a90      	ldr	r2, [pc, #576]	; (80098a8 <HAL_UART_IRQHandler+0x4f0>)
 8009666:	4293      	cmp	r3, r2
 8009668:	d047      	beq.n	80096fa <HAL_UART_IRQHandler+0x342>
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	4a8e      	ldr	r2, [pc, #568]	; (80098ac <HAL_UART_IRQHandler+0x4f4>)
 8009672:	4293      	cmp	r3, r2
 8009674:	d041      	beq.n	80096fa <HAL_UART_IRQHandler+0x342>
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	4a8c      	ldr	r2, [pc, #560]	; (80098b0 <HAL_UART_IRQHandler+0x4f8>)
 800967e:	4293      	cmp	r3, r2
 8009680:	d03b      	beq.n	80096fa <HAL_UART_IRQHandler+0x342>
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	4a8a      	ldr	r2, [pc, #552]	; (80098b4 <HAL_UART_IRQHandler+0x4fc>)
 800968a:	4293      	cmp	r3, r2
 800968c:	d035      	beq.n	80096fa <HAL_UART_IRQHandler+0x342>
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	4a88      	ldr	r2, [pc, #544]	; (80098b8 <HAL_UART_IRQHandler+0x500>)
 8009696:	4293      	cmp	r3, r2
 8009698:	d02f      	beq.n	80096fa <HAL_UART_IRQHandler+0x342>
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	4a86      	ldr	r2, [pc, #536]	; (80098bc <HAL_UART_IRQHandler+0x504>)
 80096a2:	4293      	cmp	r3, r2
 80096a4:	d029      	beq.n	80096fa <HAL_UART_IRQHandler+0x342>
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	4a84      	ldr	r2, [pc, #528]	; (80098c0 <HAL_UART_IRQHandler+0x508>)
 80096ae:	4293      	cmp	r3, r2
 80096b0:	d023      	beq.n	80096fa <HAL_UART_IRQHandler+0x342>
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	4a82      	ldr	r2, [pc, #520]	; (80098c4 <HAL_UART_IRQHandler+0x50c>)
 80096ba:	4293      	cmp	r3, r2
 80096bc:	d01d      	beq.n	80096fa <HAL_UART_IRQHandler+0x342>
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	4a80      	ldr	r2, [pc, #512]	; (80098c8 <HAL_UART_IRQHandler+0x510>)
 80096c6:	4293      	cmp	r3, r2
 80096c8:	d017      	beq.n	80096fa <HAL_UART_IRQHandler+0x342>
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	4a7e      	ldr	r2, [pc, #504]	; (80098cc <HAL_UART_IRQHandler+0x514>)
 80096d2:	4293      	cmp	r3, r2
 80096d4:	d011      	beq.n	80096fa <HAL_UART_IRQHandler+0x342>
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	4a7c      	ldr	r2, [pc, #496]	; (80098d0 <HAL_UART_IRQHandler+0x518>)
 80096de:	4293      	cmp	r3, r2
 80096e0:	d00b      	beq.n	80096fa <HAL_UART_IRQHandler+0x342>
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	4a7a      	ldr	r2, [pc, #488]	; (80098d4 <HAL_UART_IRQHandler+0x51c>)
 80096ea:	4293      	cmp	r3, r2
 80096ec:	d005      	beq.n	80096fa <HAL_UART_IRQHandler+0x342>
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	4a78      	ldr	r2, [pc, #480]	; (80098d8 <HAL_UART_IRQHandler+0x520>)
 80096f6:	4293      	cmp	r3, r2
 80096f8:	d105      	bne.n	8009706 <HAL_UART_IRQHandler+0x34e>
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	685b      	ldr	r3, [r3, #4]
 8009702:	b29b      	uxth	r3, r3
 8009704:	e004      	b.n	8009710 <HAL_UART_IRQHandler+0x358>
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	685b      	ldr	r3, [r3, #4]
 800970e:	b29b      	uxth	r3, r3
 8009710:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 8009712:	893b      	ldrh	r3, [r7, #8]
 8009714:	2b00      	cmp	r3, #0
 8009716:	f000 8101 	beq.w	800991c <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009720:	893a      	ldrh	r2, [r7, #8]
 8009722:	429a      	cmp	r2, r3
 8009724:	f080 80fa 	bcs.w	800991c <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	893a      	ldrh	r2, [r7, #8]
 800972c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009734:	69db      	ldr	r3, [r3, #28]
 8009736:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800973a:	d02b      	beq.n	8009794 <HAL_UART_IRQHandler+0x3dc>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	681a      	ldr	r2, [r3, #0]
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800974a:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	689a      	ldr	r2, [r3, #8]
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	f022 0201 	bic.w	r2, r2, #1
 800975a:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	689a      	ldr	r2, [r3, #8]
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800976a:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	2220      	movs	r2, #32
 8009770:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	2200      	movs	r2, #0
 8009778:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	681a      	ldr	r2, [r3, #0]
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	f022 0210 	bic.w	r2, r2, #16
 8009788:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800978e:	4618      	mov	r0, r3
 8009790:	f7f9 f83c 	bl	800280c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80097a0:	b29b      	uxth	r3, r3
 80097a2:	1ad3      	subs	r3, r2, r3
 80097a4:	b29b      	uxth	r3, r3
 80097a6:	4619      	mov	r1, r3
 80097a8:	6878      	ldr	r0, [r7, #4]
 80097aa:	f000 f8dd 	bl	8009968 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80097ae:	e0b5      	b.n	800991c <HAL_UART_IRQHandler+0x564>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80097bc:	b29b      	uxth	r3, r3
 80097be:	1ad3      	subs	r3, r2, r3
 80097c0:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80097c8:	b29b      	uxth	r3, r3
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	f000 80a8 	beq.w	8009920 <HAL_UART_IRQHandler+0x568>
          && (nb_rx_data > 0U))
 80097d0:	897b      	ldrh	r3, [r7, #10]
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	f000 80a4 	beq.w	8009920 <HAL_UART_IRQHandler+0x568>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	681a      	ldr	r2, [r3, #0]
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80097e6:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	6899      	ldr	r1, [r3, #8]
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	681a      	ldr	r2, [r3, #0]
 80097f2:	4b3a      	ldr	r3, [pc, #232]	; (80098dc <HAL_UART_IRQHandler+0x524>)
 80097f4:	400b      	ands	r3, r1
 80097f6:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	2220      	movs	r2, #32
 80097fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	2200      	movs	r2, #0
 8009804:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	2200      	movs	r2, #0
 800980a:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	681a      	ldr	r2, [r3, #0]
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	f022 0210 	bic.w	r2, r2, #16
 800981a:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800981c:	897b      	ldrh	r3, [r7, #10]
 800981e:	4619      	mov	r1, r3
 8009820:	6878      	ldr	r0, [r7, #4]
 8009822:	f000 f8a1 	bl	8009968 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009826:	e07b      	b.n	8009920 <HAL_UART_IRQHandler+0x568>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009828:	69fb      	ldr	r3, [r7, #28]
 800982a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800982e:	2b00      	cmp	r3, #0
 8009830:	d00d      	beq.n	800984e <HAL_UART_IRQHandler+0x496>
 8009832:	697b      	ldr	r3, [r7, #20]
 8009834:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009838:	2b00      	cmp	r3, #0
 800983a:	d008      	beq.n	800984e <HAL_UART_IRQHandler+0x496>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8009844:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009846:	6878      	ldr	r0, [r7, #4]
 8009848:	f001 f85e 	bl	800a908 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800984c:	e06b      	b.n	8009926 <HAL_UART_IRQHandler+0x56e>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800984e:	69fb      	ldr	r3, [r7, #28]
 8009850:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009854:	2b00      	cmp	r3, #0
 8009856:	d012      	beq.n	800987e <HAL_UART_IRQHandler+0x4c6>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009858:	69bb      	ldr	r3, [r7, #24]
 800985a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800985e:	2b00      	cmp	r3, #0
 8009860:	d104      	bne.n	800986c <HAL_UART_IRQHandler+0x4b4>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8009862:	697b      	ldr	r3, [r7, #20]
 8009864:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009868:	2b00      	cmp	r3, #0
 800986a:	d008      	beq.n	800987e <HAL_UART_IRQHandler+0x4c6>
  {
    if (huart->TxISR != NULL)
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009870:	2b00      	cmp	r3, #0
 8009872:	d057      	beq.n	8009924 <HAL_UART_IRQHandler+0x56c>
    {
      huart->TxISR(huart);
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009878:	6878      	ldr	r0, [r7, #4]
 800987a:	4798      	blx	r3
    }
    return;
 800987c:	e052      	b.n	8009924 <HAL_UART_IRQHandler+0x56c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800987e:	69fb      	ldr	r3, [r7, #28]
 8009880:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009884:	2b00      	cmp	r3, #0
 8009886:	d02b      	beq.n	80098e0 <HAL_UART_IRQHandler+0x528>
 8009888:	69bb      	ldr	r3, [r7, #24]
 800988a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800988e:	2b00      	cmp	r3, #0
 8009890:	d026      	beq.n	80098e0 <HAL_UART_IRQHandler+0x528>
  {
    UART_EndTransmit_IT(huart);
 8009892:	6878      	ldr	r0, [r7, #4]
 8009894:	f001 f81e 	bl	800a8d4 <UART_EndTransmit_IT>
    return;
 8009898:	e045      	b.n	8009926 <HAL_UART_IRQHandler+0x56e>
 800989a:	bf00      	nop
 800989c:	40020010 	.word	0x40020010
 80098a0:	40020028 	.word	0x40020028
 80098a4:	40020040 	.word	0x40020040
 80098a8:	40020058 	.word	0x40020058
 80098ac:	40020070 	.word	0x40020070
 80098b0:	40020088 	.word	0x40020088
 80098b4:	400200a0 	.word	0x400200a0
 80098b8:	400200b8 	.word	0x400200b8
 80098bc:	40020410 	.word	0x40020410
 80098c0:	40020428 	.word	0x40020428
 80098c4:	40020440 	.word	0x40020440
 80098c8:	40020458 	.word	0x40020458
 80098cc:	40020470 	.word	0x40020470
 80098d0:	40020488 	.word	0x40020488
 80098d4:	400204a0 	.word	0x400204a0
 80098d8:	400204b8 	.word	0x400204b8
 80098dc:	effffffe 	.word	0xeffffffe
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80098e0:	69fb      	ldr	r3, [r7, #28]
 80098e2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d008      	beq.n	80098fc <HAL_UART_IRQHandler+0x544>
 80098ea:	69bb      	ldr	r3, [r7, #24]
 80098ec:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d003      	beq.n	80098fc <HAL_UART_IRQHandler+0x544>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80098f4:	6878      	ldr	r0, [r7, #4]
 80098f6:	f001 f81b 	bl	800a930 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80098fa:	e014      	b.n	8009926 <HAL_UART_IRQHandler+0x56e>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80098fc:	69fb      	ldr	r3, [r7, #28]
 80098fe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009902:	2b00      	cmp	r3, #0
 8009904:	d00f      	beq.n	8009926 <HAL_UART_IRQHandler+0x56e>
 8009906:	69bb      	ldr	r3, [r7, #24]
 8009908:	2b00      	cmp	r3, #0
 800990a:	da0c      	bge.n	8009926 <HAL_UART_IRQHandler+0x56e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800990c:	6878      	ldr	r0, [r7, #4]
 800990e:	f001 f805 	bl	800a91c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009912:	e008      	b.n	8009926 <HAL_UART_IRQHandler+0x56e>
      return;
 8009914:	bf00      	nop
 8009916:	e006      	b.n	8009926 <HAL_UART_IRQHandler+0x56e>
    return;
 8009918:	bf00      	nop
 800991a:	e004      	b.n	8009926 <HAL_UART_IRQHandler+0x56e>
      return;
 800991c:	bf00      	nop
 800991e:	e002      	b.n	8009926 <HAL_UART_IRQHandler+0x56e>
      return;
 8009920:	bf00      	nop
 8009922:	e000      	b.n	8009926 <HAL_UART_IRQHandler+0x56e>
    return;
 8009924:	bf00      	nop
  }
}
 8009926:	3720      	adds	r7, #32
 8009928:	46bd      	mov	sp, r7
 800992a:	bd80      	pop	{r7, pc}

0800992c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800992c:	b480      	push	{r7}
 800992e:	b083      	sub	sp, #12
 8009930:	af00      	add	r7, sp, #0
 8009932:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009934:	bf00      	nop
 8009936:	370c      	adds	r7, #12
 8009938:	46bd      	mov	sp, r7
 800993a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800993e:	4770      	bx	lr

08009940 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009940:	b480      	push	{r7}
 8009942:	b083      	sub	sp, #12
 8009944:	af00      	add	r7, sp, #0
 8009946:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8009948:	bf00      	nop
 800994a:	370c      	adds	r7, #12
 800994c:	46bd      	mov	sp, r7
 800994e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009952:	4770      	bx	lr

08009954 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009954:	b480      	push	{r7}
 8009956:	b083      	sub	sp, #12
 8009958:	af00      	add	r7, sp, #0
 800995a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800995c:	bf00      	nop
 800995e:	370c      	adds	r7, #12
 8009960:	46bd      	mov	sp, r7
 8009962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009966:	4770      	bx	lr

08009968 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009968:	b480      	push	{r7}
 800996a:	b083      	sub	sp, #12
 800996c:	af00      	add	r7, sp, #0
 800996e:	6078      	str	r0, [r7, #4]
 8009970:	460b      	mov	r3, r1
 8009972:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009974:	bf00      	nop
 8009976:	370c      	adds	r7, #12
 8009978:	46bd      	mov	sp, r7
 800997a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800997e:	4770      	bx	lr

08009980 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009980:	b5b0      	push	{r4, r5, r7, lr}
 8009982:	b08e      	sub	sp, #56	; 0x38
 8009984:	af00      	add	r7, sp, #0
 8009986:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009988:	2300      	movs	r3, #0
 800998a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	689a      	ldr	r2, [r3, #8]
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	691b      	ldr	r3, [r3, #16]
 8009996:	431a      	orrs	r2, r3
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	695b      	ldr	r3, [r3, #20]
 800999c:	431a      	orrs	r2, r3
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	69db      	ldr	r3, [r3, #28]
 80099a2:	4313      	orrs	r3, r2
 80099a4:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	681a      	ldr	r2, [r3, #0]
 80099ac:	4bbf      	ldr	r3, [pc, #764]	; (8009cac <UART_SetConfig+0x32c>)
 80099ae:	4013      	ands	r3, r2
 80099b0:	687a      	ldr	r2, [r7, #4]
 80099b2:	6812      	ldr	r2, [r2, #0]
 80099b4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80099b6:	430b      	orrs	r3, r1
 80099b8:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	685b      	ldr	r3, [r3, #4]
 80099c0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	68da      	ldr	r2, [r3, #12]
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	430a      	orrs	r2, r1
 80099ce:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	699b      	ldr	r3, [r3, #24]
 80099d4:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	4ab5      	ldr	r2, [pc, #724]	; (8009cb0 <UART_SetConfig+0x330>)
 80099dc:	4293      	cmp	r3, r2
 80099de:	d004      	beq.n	80099ea <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	6a1b      	ldr	r3, [r3, #32]
 80099e4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80099e6:	4313      	orrs	r3, r2
 80099e8:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	689a      	ldr	r2, [r3, #8]
 80099f0:	4bb0      	ldr	r3, [pc, #704]	; (8009cb4 <UART_SetConfig+0x334>)
 80099f2:	4013      	ands	r3, r2
 80099f4:	687a      	ldr	r2, [r7, #4]
 80099f6:	6812      	ldr	r2, [r2, #0]
 80099f8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80099fa:	430b      	orrs	r3, r1
 80099fc:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a04:	f023 010f 	bic.w	r1, r3, #15
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	430a      	orrs	r2, r1
 8009a12:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	4aa7      	ldr	r2, [pc, #668]	; (8009cb8 <UART_SetConfig+0x338>)
 8009a1a:	4293      	cmp	r3, r2
 8009a1c:	d176      	bne.n	8009b0c <UART_SetConfig+0x18c>
 8009a1e:	4ba7      	ldr	r3, [pc, #668]	; (8009cbc <UART_SetConfig+0x33c>)
 8009a20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a22:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009a26:	2b28      	cmp	r3, #40	; 0x28
 8009a28:	d86c      	bhi.n	8009b04 <UART_SetConfig+0x184>
 8009a2a:	a201      	add	r2, pc, #4	; (adr r2, 8009a30 <UART_SetConfig+0xb0>)
 8009a2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a30:	08009ad5 	.word	0x08009ad5
 8009a34:	08009b05 	.word	0x08009b05
 8009a38:	08009b05 	.word	0x08009b05
 8009a3c:	08009b05 	.word	0x08009b05
 8009a40:	08009b05 	.word	0x08009b05
 8009a44:	08009b05 	.word	0x08009b05
 8009a48:	08009b05 	.word	0x08009b05
 8009a4c:	08009b05 	.word	0x08009b05
 8009a50:	08009add 	.word	0x08009add
 8009a54:	08009b05 	.word	0x08009b05
 8009a58:	08009b05 	.word	0x08009b05
 8009a5c:	08009b05 	.word	0x08009b05
 8009a60:	08009b05 	.word	0x08009b05
 8009a64:	08009b05 	.word	0x08009b05
 8009a68:	08009b05 	.word	0x08009b05
 8009a6c:	08009b05 	.word	0x08009b05
 8009a70:	08009ae5 	.word	0x08009ae5
 8009a74:	08009b05 	.word	0x08009b05
 8009a78:	08009b05 	.word	0x08009b05
 8009a7c:	08009b05 	.word	0x08009b05
 8009a80:	08009b05 	.word	0x08009b05
 8009a84:	08009b05 	.word	0x08009b05
 8009a88:	08009b05 	.word	0x08009b05
 8009a8c:	08009b05 	.word	0x08009b05
 8009a90:	08009aed 	.word	0x08009aed
 8009a94:	08009b05 	.word	0x08009b05
 8009a98:	08009b05 	.word	0x08009b05
 8009a9c:	08009b05 	.word	0x08009b05
 8009aa0:	08009b05 	.word	0x08009b05
 8009aa4:	08009b05 	.word	0x08009b05
 8009aa8:	08009b05 	.word	0x08009b05
 8009aac:	08009b05 	.word	0x08009b05
 8009ab0:	08009af5 	.word	0x08009af5
 8009ab4:	08009b05 	.word	0x08009b05
 8009ab8:	08009b05 	.word	0x08009b05
 8009abc:	08009b05 	.word	0x08009b05
 8009ac0:	08009b05 	.word	0x08009b05
 8009ac4:	08009b05 	.word	0x08009b05
 8009ac8:	08009b05 	.word	0x08009b05
 8009acc:	08009b05 	.word	0x08009b05
 8009ad0:	08009afd 	.word	0x08009afd
 8009ad4:	2301      	movs	r3, #1
 8009ad6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ada:	e222      	b.n	8009f22 <UART_SetConfig+0x5a2>
 8009adc:	2304      	movs	r3, #4
 8009ade:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ae2:	e21e      	b.n	8009f22 <UART_SetConfig+0x5a2>
 8009ae4:	2308      	movs	r3, #8
 8009ae6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009aea:	e21a      	b.n	8009f22 <UART_SetConfig+0x5a2>
 8009aec:	2310      	movs	r3, #16
 8009aee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009af2:	e216      	b.n	8009f22 <UART_SetConfig+0x5a2>
 8009af4:	2320      	movs	r3, #32
 8009af6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009afa:	e212      	b.n	8009f22 <UART_SetConfig+0x5a2>
 8009afc:	2340      	movs	r3, #64	; 0x40
 8009afe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b02:	e20e      	b.n	8009f22 <UART_SetConfig+0x5a2>
 8009b04:	2380      	movs	r3, #128	; 0x80
 8009b06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b0a:	e20a      	b.n	8009f22 <UART_SetConfig+0x5a2>
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	4a6b      	ldr	r2, [pc, #428]	; (8009cc0 <UART_SetConfig+0x340>)
 8009b12:	4293      	cmp	r3, r2
 8009b14:	d130      	bne.n	8009b78 <UART_SetConfig+0x1f8>
 8009b16:	4b69      	ldr	r3, [pc, #420]	; (8009cbc <UART_SetConfig+0x33c>)
 8009b18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b1a:	f003 0307 	and.w	r3, r3, #7
 8009b1e:	2b05      	cmp	r3, #5
 8009b20:	d826      	bhi.n	8009b70 <UART_SetConfig+0x1f0>
 8009b22:	a201      	add	r2, pc, #4	; (adr r2, 8009b28 <UART_SetConfig+0x1a8>)
 8009b24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b28:	08009b41 	.word	0x08009b41
 8009b2c:	08009b49 	.word	0x08009b49
 8009b30:	08009b51 	.word	0x08009b51
 8009b34:	08009b59 	.word	0x08009b59
 8009b38:	08009b61 	.word	0x08009b61
 8009b3c:	08009b69 	.word	0x08009b69
 8009b40:	2300      	movs	r3, #0
 8009b42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b46:	e1ec      	b.n	8009f22 <UART_SetConfig+0x5a2>
 8009b48:	2304      	movs	r3, #4
 8009b4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b4e:	e1e8      	b.n	8009f22 <UART_SetConfig+0x5a2>
 8009b50:	2308      	movs	r3, #8
 8009b52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b56:	e1e4      	b.n	8009f22 <UART_SetConfig+0x5a2>
 8009b58:	2310      	movs	r3, #16
 8009b5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b5e:	e1e0      	b.n	8009f22 <UART_SetConfig+0x5a2>
 8009b60:	2320      	movs	r3, #32
 8009b62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b66:	e1dc      	b.n	8009f22 <UART_SetConfig+0x5a2>
 8009b68:	2340      	movs	r3, #64	; 0x40
 8009b6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b6e:	e1d8      	b.n	8009f22 <UART_SetConfig+0x5a2>
 8009b70:	2380      	movs	r3, #128	; 0x80
 8009b72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b76:	e1d4      	b.n	8009f22 <UART_SetConfig+0x5a2>
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	4a51      	ldr	r2, [pc, #324]	; (8009cc4 <UART_SetConfig+0x344>)
 8009b7e:	4293      	cmp	r3, r2
 8009b80:	d130      	bne.n	8009be4 <UART_SetConfig+0x264>
 8009b82:	4b4e      	ldr	r3, [pc, #312]	; (8009cbc <UART_SetConfig+0x33c>)
 8009b84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b86:	f003 0307 	and.w	r3, r3, #7
 8009b8a:	2b05      	cmp	r3, #5
 8009b8c:	d826      	bhi.n	8009bdc <UART_SetConfig+0x25c>
 8009b8e:	a201      	add	r2, pc, #4	; (adr r2, 8009b94 <UART_SetConfig+0x214>)
 8009b90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b94:	08009bad 	.word	0x08009bad
 8009b98:	08009bb5 	.word	0x08009bb5
 8009b9c:	08009bbd 	.word	0x08009bbd
 8009ba0:	08009bc5 	.word	0x08009bc5
 8009ba4:	08009bcd 	.word	0x08009bcd
 8009ba8:	08009bd5 	.word	0x08009bd5
 8009bac:	2300      	movs	r3, #0
 8009bae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009bb2:	e1b6      	b.n	8009f22 <UART_SetConfig+0x5a2>
 8009bb4:	2304      	movs	r3, #4
 8009bb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009bba:	e1b2      	b.n	8009f22 <UART_SetConfig+0x5a2>
 8009bbc:	2308      	movs	r3, #8
 8009bbe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009bc2:	e1ae      	b.n	8009f22 <UART_SetConfig+0x5a2>
 8009bc4:	2310      	movs	r3, #16
 8009bc6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009bca:	e1aa      	b.n	8009f22 <UART_SetConfig+0x5a2>
 8009bcc:	2320      	movs	r3, #32
 8009bce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009bd2:	e1a6      	b.n	8009f22 <UART_SetConfig+0x5a2>
 8009bd4:	2340      	movs	r3, #64	; 0x40
 8009bd6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009bda:	e1a2      	b.n	8009f22 <UART_SetConfig+0x5a2>
 8009bdc:	2380      	movs	r3, #128	; 0x80
 8009bde:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009be2:	e19e      	b.n	8009f22 <UART_SetConfig+0x5a2>
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	4a37      	ldr	r2, [pc, #220]	; (8009cc8 <UART_SetConfig+0x348>)
 8009bea:	4293      	cmp	r3, r2
 8009bec:	d130      	bne.n	8009c50 <UART_SetConfig+0x2d0>
 8009bee:	4b33      	ldr	r3, [pc, #204]	; (8009cbc <UART_SetConfig+0x33c>)
 8009bf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009bf2:	f003 0307 	and.w	r3, r3, #7
 8009bf6:	2b05      	cmp	r3, #5
 8009bf8:	d826      	bhi.n	8009c48 <UART_SetConfig+0x2c8>
 8009bfa:	a201      	add	r2, pc, #4	; (adr r2, 8009c00 <UART_SetConfig+0x280>)
 8009bfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c00:	08009c19 	.word	0x08009c19
 8009c04:	08009c21 	.word	0x08009c21
 8009c08:	08009c29 	.word	0x08009c29
 8009c0c:	08009c31 	.word	0x08009c31
 8009c10:	08009c39 	.word	0x08009c39
 8009c14:	08009c41 	.word	0x08009c41
 8009c18:	2300      	movs	r3, #0
 8009c1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c1e:	e180      	b.n	8009f22 <UART_SetConfig+0x5a2>
 8009c20:	2304      	movs	r3, #4
 8009c22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c26:	e17c      	b.n	8009f22 <UART_SetConfig+0x5a2>
 8009c28:	2308      	movs	r3, #8
 8009c2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c2e:	e178      	b.n	8009f22 <UART_SetConfig+0x5a2>
 8009c30:	2310      	movs	r3, #16
 8009c32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c36:	e174      	b.n	8009f22 <UART_SetConfig+0x5a2>
 8009c38:	2320      	movs	r3, #32
 8009c3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c3e:	e170      	b.n	8009f22 <UART_SetConfig+0x5a2>
 8009c40:	2340      	movs	r3, #64	; 0x40
 8009c42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c46:	e16c      	b.n	8009f22 <UART_SetConfig+0x5a2>
 8009c48:	2380      	movs	r3, #128	; 0x80
 8009c4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c4e:	e168      	b.n	8009f22 <UART_SetConfig+0x5a2>
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	4a1d      	ldr	r2, [pc, #116]	; (8009ccc <UART_SetConfig+0x34c>)
 8009c56:	4293      	cmp	r3, r2
 8009c58:	d142      	bne.n	8009ce0 <UART_SetConfig+0x360>
 8009c5a:	4b18      	ldr	r3, [pc, #96]	; (8009cbc <UART_SetConfig+0x33c>)
 8009c5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c5e:	f003 0307 	and.w	r3, r3, #7
 8009c62:	2b05      	cmp	r3, #5
 8009c64:	d838      	bhi.n	8009cd8 <UART_SetConfig+0x358>
 8009c66:	a201      	add	r2, pc, #4	; (adr r2, 8009c6c <UART_SetConfig+0x2ec>)
 8009c68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c6c:	08009c85 	.word	0x08009c85
 8009c70:	08009c8d 	.word	0x08009c8d
 8009c74:	08009c95 	.word	0x08009c95
 8009c78:	08009c9d 	.word	0x08009c9d
 8009c7c:	08009ca5 	.word	0x08009ca5
 8009c80:	08009cd1 	.word	0x08009cd1
 8009c84:	2300      	movs	r3, #0
 8009c86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c8a:	e14a      	b.n	8009f22 <UART_SetConfig+0x5a2>
 8009c8c:	2304      	movs	r3, #4
 8009c8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c92:	e146      	b.n	8009f22 <UART_SetConfig+0x5a2>
 8009c94:	2308      	movs	r3, #8
 8009c96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c9a:	e142      	b.n	8009f22 <UART_SetConfig+0x5a2>
 8009c9c:	2310      	movs	r3, #16
 8009c9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ca2:	e13e      	b.n	8009f22 <UART_SetConfig+0x5a2>
 8009ca4:	2320      	movs	r3, #32
 8009ca6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009caa:	e13a      	b.n	8009f22 <UART_SetConfig+0x5a2>
 8009cac:	cfff69f3 	.word	0xcfff69f3
 8009cb0:	58000c00 	.word	0x58000c00
 8009cb4:	11fff4ff 	.word	0x11fff4ff
 8009cb8:	40011000 	.word	0x40011000
 8009cbc:	58024400 	.word	0x58024400
 8009cc0:	40004400 	.word	0x40004400
 8009cc4:	40004800 	.word	0x40004800
 8009cc8:	40004c00 	.word	0x40004c00
 8009ccc:	40005000 	.word	0x40005000
 8009cd0:	2340      	movs	r3, #64	; 0x40
 8009cd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009cd6:	e124      	b.n	8009f22 <UART_SetConfig+0x5a2>
 8009cd8:	2380      	movs	r3, #128	; 0x80
 8009cda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009cde:	e120      	b.n	8009f22 <UART_SetConfig+0x5a2>
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	4acc      	ldr	r2, [pc, #816]	; (800a018 <UART_SetConfig+0x698>)
 8009ce6:	4293      	cmp	r3, r2
 8009ce8:	d176      	bne.n	8009dd8 <UART_SetConfig+0x458>
 8009cea:	4bcc      	ldr	r3, [pc, #816]	; (800a01c <UART_SetConfig+0x69c>)
 8009cec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009cee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009cf2:	2b28      	cmp	r3, #40	; 0x28
 8009cf4:	d86c      	bhi.n	8009dd0 <UART_SetConfig+0x450>
 8009cf6:	a201      	add	r2, pc, #4	; (adr r2, 8009cfc <UART_SetConfig+0x37c>)
 8009cf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cfc:	08009da1 	.word	0x08009da1
 8009d00:	08009dd1 	.word	0x08009dd1
 8009d04:	08009dd1 	.word	0x08009dd1
 8009d08:	08009dd1 	.word	0x08009dd1
 8009d0c:	08009dd1 	.word	0x08009dd1
 8009d10:	08009dd1 	.word	0x08009dd1
 8009d14:	08009dd1 	.word	0x08009dd1
 8009d18:	08009dd1 	.word	0x08009dd1
 8009d1c:	08009da9 	.word	0x08009da9
 8009d20:	08009dd1 	.word	0x08009dd1
 8009d24:	08009dd1 	.word	0x08009dd1
 8009d28:	08009dd1 	.word	0x08009dd1
 8009d2c:	08009dd1 	.word	0x08009dd1
 8009d30:	08009dd1 	.word	0x08009dd1
 8009d34:	08009dd1 	.word	0x08009dd1
 8009d38:	08009dd1 	.word	0x08009dd1
 8009d3c:	08009db1 	.word	0x08009db1
 8009d40:	08009dd1 	.word	0x08009dd1
 8009d44:	08009dd1 	.word	0x08009dd1
 8009d48:	08009dd1 	.word	0x08009dd1
 8009d4c:	08009dd1 	.word	0x08009dd1
 8009d50:	08009dd1 	.word	0x08009dd1
 8009d54:	08009dd1 	.word	0x08009dd1
 8009d58:	08009dd1 	.word	0x08009dd1
 8009d5c:	08009db9 	.word	0x08009db9
 8009d60:	08009dd1 	.word	0x08009dd1
 8009d64:	08009dd1 	.word	0x08009dd1
 8009d68:	08009dd1 	.word	0x08009dd1
 8009d6c:	08009dd1 	.word	0x08009dd1
 8009d70:	08009dd1 	.word	0x08009dd1
 8009d74:	08009dd1 	.word	0x08009dd1
 8009d78:	08009dd1 	.word	0x08009dd1
 8009d7c:	08009dc1 	.word	0x08009dc1
 8009d80:	08009dd1 	.word	0x08009dd1
 8009d84:	08009dd1 	.word	0x08009dd1
 8009d88:	08009dd1 	.word	0x08009dd1
 8009d8c:	08009dd1 	.word	0x08009dd1
 8009d90:	08009dd1 	.word	0x08009dd1
 8009d94:	08009dd1 	.word	0x08009dd1
 8009d98:	08009dd1 	.word	0x08009dd1
 8009d9c:	08009dc9 	.word	0x08009dc9
 8009da0:	2301      	movs	r3, #1
 8009da2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009da6:	e0bc      	b.n	8009f22 <UART_SetConfig+0x5a2>
 8009da8:	2304      	movs	r3, #4
 8009daa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009dae:	e0b8      	b.n	8009f22 <UART_SetConfig+0x5a2>
 8009db0:	2308      	movs	r3, #8
 8009db2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009db6:	e0b4      	b.n	8009f22 <UART_SetConfig+0x5a2>
 8009db8:	2310      	movs	r3, #16
 8009dba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009dbe:	e0b0      	b.n	8009f22 <UART_SetConfig+0x5a2>
 8009dc0:	2320      	movs	r3, #32
 8009dc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009dc6:	e0ac      	b.n	8009f22 <UART_SetConfig+0x5a2>
 8009dc8:	2340      	movs	r3, #64	; 0x40
 8009dca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009dce:	e0a8      	b.n	8009f22 <UART_SetConfig+0x5a2>
 8009dd0:	2380      	movs	r3, #128	; 0x80
 8009dd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009dd6:	e0a4      	b.n	8009f22 <UART_SetConfig+0x5a2>
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	4a90      	ldr	r2, [pc, #576]	; (800a020 <UART_SetConfig+0x6a0>)
 8009dde:	4293      	cmp	r3, r2
 8009de0:	d130      	bne.n	8009e44 <UART_SetConfig+0x4c4>
 8009de2:	4b8e      	ldr	r3, [pc, #568]	; (800a01c <UART_SetConfig+0x69c>)
 8009de4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009de6:	f003 0307 	and.w	r3, r3, #7
 8009dea:	2b05      	cmp	r3, #5
 8009dec:	d826      	bhi.n	8009e3c <UART_SetConfig+0x4bc>
 8009dee:	a201      	add	r2, pc, #4	; (adr r2, 8009df4 <UART_SetConfig+0x474>)
 8009df0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009df4:	08009e0d 	.word	0x08009e0d
 8009df8:	08009e15 	.word	0x08009e15
 8009dfc:	08009e1d 	.word	0x08009e1d
 8009e00:	08009e25 	.word	0x08009e25
 8009e04:	08009e2d 	.word	0x08009e2d
 8009e08:	08009e35 	.word	0x08009e35
 8009e0c:	2300      	movs	r3, #0
 8009e0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e12:	e086      	b.n	8009f22 <UART_SetConfig+0x5a2>
 8009e14:	2304      	movs	r3, #4
 8009e16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e1a:	e082      	b.n	8009f22 <UART_SetConfig+0x5a2>
 8009e1c:	2308      	movs	r3, #8
 8009e1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e22:	e07e      	b.n	8009f22 <UART_SetConfig+0x5a2>
 8009e24:	2310      	movs	r3, #16
 8009e26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e2a:	e07a      	b.n	8009f22 <UART_SetConfig+0x5a2>
 8009e2c:	2320      	movs	r3, #32
 8009e2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e32:	e076      	b.n	8009f22 <UART_SetConfig+0x5a2>
 8009e34:	2340      	movs	r3, #64	; 0x40
 8009e36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e3a:	e072      	b.n	8009f22 <UART_SetConfig+0x5a2>
 8009e3c:	2380      	movs	r3, #128	; 0x80
 8009e3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e42:	e06e      	b.n	8009f22 <UART_SetConfig+0x5a2>
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	4a76      	ldr	r2, [pc, #472]	; (800a024 <UART_SetConfig+0x6a4>)
 8009e4a:	4293      	cmp	r3, r2
 8009e4c:	d130      	bne.n	8009eb0 <UART_SetConfig+0x530>
 8009e4e:	4b73      	ldr	r3, [pc, #460]	; (800a01c <UART_SetConfig+0x69c>)
 8009e50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e52:	f003 0307 	and.w	r3, r3, #7
 8009e56:	2b05      	cmp	r3, #5
 8009e58:	d826      	bhi.n	8009ea8 <UART_SetConfig+0x528>
 8009e5a:	a201      	add	r2, pc, #4	; (adr r2, 8009e60 <UART_SetConfig+0x4e0>)
 8009e5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e60:	08009e79 	.word	0x08009e79
 8009e64:	08009e81 	.word	0x08009e81
 8009e68:	08009e89 	.word	0x08009e89
 8009e6c:	08009e91 	.word	0x08009e91
 8009e70:	08009e99 	.word	0x08009e99
 8009e74:	08009ea1 	.word	0x08009ea1
 8009e78:	2300      	movs	r3, #0
 8009e7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e7e:	e050      	b.n	8009f22 <UART_SetConfig+0x5a2>
 8009e80:	2304      	movs	r3, #4
 8009e82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e86:	e04c      	b.n	8009f22 <UART_SetConfig+0x5a2>
 8009e88:	2308      	movs	r3, #8
 8009e8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e8e:	e048      	b.n	8009f22 <UART_SetConfig+0x5a2>
 8009e90:	2310      	movs	r3, #16
 8009e92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e96:	e044      	b.n	8009f22 <UART_SetConfig+0x5a2>
 8009e98:	2320      	movs	r3, #32
 8009e9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e9e:	e040      	b.n	8009f22 <UART_SetConfig+0x5a2>
 8009ea0:	2340      	movs	r3, #64	; 0x40
 8009ea2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ea6:	e03c      	b.n	8009f22 <UART_SetConfig+0x5a2>
 8009ea8:	2380      	movs	r3, #128	; 0x80
 8009eaa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009eae:	e038      	b.n	8009f22 <UART_SetConfig+0x5a2>
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	4a5c      	ldr	r2, [pc, #368]	; (800a028 <UART_SetConfig+0x6a8>)
 8009eb6:	4293      	cmp	r3, r2
 8009eb8:	d130      	bne.n	8009f1c <UART_SetConfig+0x59c>
 8009eba:	4b58      	ldr	r3, [pc, #352]	; (800a01c <UART_SetConfig+0x69c>)
 8009ebc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009ebe:	f003 0307 	and.w	r3, r3, #7
 8009ec2:	2b05      	cmp	r3, #5
 8009ec4:	d826      	bhi.n	8009f14 <UART_SetConfig+0x594>
 8009ec6:	a201      	add	r2, pc, #4	; (adr r2, 8009ecc <UART_SetConfig+0x54c>)
 8009ec8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ecc:	08009ee5 	.word	0x08009ee5
 8009ed0:	08009eed 	.word	0x08009eed
 8009ed4:	08009ef5 	.word	0x08009ef5
 8009ed8:	08009efd 	.word	0x08009efd
 8009edc:	08009f05 	.word	0x08009f05
 8009ee0:	08009f0d 	.word	0x08009f0d
 8009ee4:	2302      	movs	r3, #2
 8009ee6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009eea:	e01a      	b.n	8009f22 <UART_SetConfig+0x5a2>
 8009eec:	2304      	movs	r3, #4
 8009eee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ef2:	e016      	b.n	8009f22 <UART_SetConfig+0x5a2>
 8009ef4:	2308      	movs	r3, #8
 8009ef6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009efa:	e012      	b.n	8009f22 <UART_SetConfig+0x5a2>
 8009efc:	2310      	movs	r3, #16
 8009efe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f02:	e00e      	b.n	8009f22 <UART_SetConfig+0x5a2>
 8009f04:	2320      	movs	r3, #32
 8009f06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f0a:	e00a      	b.n	8009f22 <UART_SetConfig+0x5a2>
 8009f0c:	2340      	movs	r3, #64	; 0x40
 8009f0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f12:	e006      	b.n	8009f22 <UART_SetConfig+0x5a2>
 8009f14:	2380      	movs	r3, #128	; 0x80
 8009f16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f1a:	e002      	b.n	8009f22 <UART_SetConfig+0x5a2>
 8009f1c:	2380      	movs	r3, #128	; 0x80
 8009f1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	4a40      	ldr	r2, [pc, #256]	; (800a028 <UART_SetConfig+0x6a8>)
 8009f28:	4293      	cmp	r3, r2
 8009f2a:	f040 80ef 	bne.w	800a10c <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009f2e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009f32:	2b20      	cmp	r3, #32
 8009f34:	dc46      	bgt.n	8009fc4 <UART_SetConfig+0x644>
 8009f36:	2b02      	cmp	r3, #2
 8009f38:	f2c0 8081 	blt.w	800a03e <UART_SetConfig+0x6be>
 8009f3c:	3b02      	subs	r3, #2
 8009f3e:	2b1e      	cmp	r3, #30
 8009f40:	d87d      	bhi.n	800a03e <UART_SetConfig+0x6be>
 8009f42:	a201      	add	r2, pc, #4	; (adr r2, 8009f48 <UART_SetConfig+0x5c8>)
 8009f44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f48:	08009fcb 	.word	0x08009fcb
 8009f4c:	0800a03f 	.word	0x0800a03f
 8009f50:	08009fd3 	.word	0x08009fd3
 8009f54:	0800a03f 	.word	0x0800a03f
 8009f58:	0800a03f 	.word	0x0800a03f
 8009f5c:	0800a03f 	.word	0x0800a03f
 8009f60:	08009fe3 	.word	0x08009fe3
 8009f64:	0800a03f 	.word	0x0800a03f
 8009f68:	0800a03f 	.word	0x0800a03f
 8009f6c:	0800a03f 	.word	0x0800a03f
 8009f70:	0800a03f 	.word	0x0800a03f
 8009f74:	0800a03f 	.word	0x0800a03f
 8009f78:	0800a03f 	.word	0x0800a03f
 8009f7c:	0800a03f 	.word	0x0800a03f
 8009f80:	08009ff3 	.word	0x08009ff3
 8009f84:	0800a03f 	.word	0x0800a03f
 8009f88:	0800a03f 	.word	0x0800a03f
 8009f8c:	0800a03f 	.word	0x0800a03f
 8009f90:	0800a03f 	.word	0x0800a03f
 8009f94:	0800a03f 	.word	0x0800a03f
 8009f98:	0800a03f 	.word	0x0800a03f
 8009f9c:	0800a03f 	.word	0x0800a03f
 8009fa0:	0800a03f 	.word	0x0800a03f
 8009fa4:	0800a03f 	.word	0x0800a03f
 8009fa8:	0800a03f 	.word	0x0800a03f
 8009fac:	0800a03f 	.word	0x0800a03f
 8009fb0:	0800a03f 	.word	0x0800a03f
 8009fb4:	0800a03f 	.word	0x0800a03f
 8009fb8:	0800a03f 	.word	0x0800a03f
 8009fbc:	0800a03f 	.word	0x0800a03f
 8009fc0:	0800a031 	.word	0x0800a031
 8009fc4:	2b40      	cmp	r3, #64	; 0x40
 8009fc6:	d036      	beq.n	800a036 <UART_SetConfig+0x6b6>
 8009fc8:	e039      	b.n	800a03e <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8009fca:	f7fd fa85 	bl	80074d8 <HAL_RCCEx_GetD3PCLK1Freq>
 8009fce:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009fd0:	e03b      	b.n	800a04a <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009fd2:	f107 0314 	add.w	r3, r7, #20
 8009fd6:	4618      	mov	r0, r3
 8009fd8:	f7fd fa94 	bl	8007504 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009fdc:	69bb      	ldr	r3, [r7, #24]
 8009fde:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009fe0:	e033      	b.n	800a04a <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009fe2:	f107 0308 	add.w	r3, r7, #8
 8009fe6:	4618      	mov	r0, r3
 8009fe8:	f7fd fbe0 	bl	80077ac <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009ff0:	e02b      	b.n	800a04a <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009ff2:	4b0a      	ldr	r3, [pc, #40]	; (800a01c <UART_SetConfig+0x69c>)
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	f003 0320 	and.w	r3, r3, #32
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d009      	beq.n	800a012 <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009ffe:	4b07      	ldr	r3, [pc, #28]	; (800a01c <UART_SetConfig+0x69c>)
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	08db      	lsrs	r3, r3, #3
 800a004:	f003 0303 	and.w	r3, r3, #3
 800a008:	4a08      	ldr	r2, [pc, #32]	; (800a02c <UART_SetConfig+0x6ac>)
 800a00a:	fa22 f303 	lsr.w	r3, r2, r3
 800a00e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a010:	e01b      	b.n	800a04a <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 800a012:	4b06      	ldr	r3, [pc, #24]	; (800a02c <UART_SetConfig+0x6ac>)
 800a014:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a016:	e018      	b.n	800a04a <UART_SetConfig+0x6ca>
 800a018:	40011400 	.word	0x40011400
 800a01c:	58024400 	.word	0x58024400
 800a020:	40007800 	.word	0x40007800
 800a024:	40007c00 	.word	0x40007c00
 800a028:	58000c00 	.word	0x58000c00
 800a02c:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a030:	4bc4      	ldr	r3, [pc, #784]	; (800a344 <UART_SetConfig+0x9c4>)
 800a032:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a034:	e009      	b.n	800a04a <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a036:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a03a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a03c:	e005      	b.n	800a04a <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 800a03e:	2300      	movs	r3, #0
 800a040:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800a042:	2301      	movs	r3, #1
 800a044:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800a048:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a04a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	f000 81da 	beq.w	800a406 <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a056:	4abc      	ldr	r2, [pc, #752]	; (800a348 <UART_SetConfig+0x9c8>)
 800a058:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a05c:	461a      	mov	r2, r3
 800a05e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a060:	fbb3 f3f2 	udiv	r3, r3, r2
 800a064:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	685a      	ldr	r2, [r3, #4]
 800a06a:	4613      	mov	r3, r2
 800a06c:	005b      	lsls	r3, r3, #1
 800a06e:	4413      	add	r3, r2
 800a070:	6a3a      	ldr	r2, [r7, #32]
 800a072:	429a      	cmp	r2, r3
 800a074:	d305      	bcc.n	800a082 <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	685b      	ldr	r3, [r3, #4]
 800a07a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a07c:	6a3a      	ldr	r2, [r7, #32]
 800a07e:	429a      	cmp	r2, r3
 800a080:	d903      	bls.n	800a08a <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 800a082:	2301      	movs	r3, #1
 800a084:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800a088:	e1bd      	b.n	800a406 <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a08a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a08c:	4618      	mov	r0, r3
 800a08e:	f04f 0100 	mov.w	r1, #0
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a096:	4aac      	ldr	r2, [pc, #688]	; (800a348 <UART_SetConfig+0x9c8>)
 800a098:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a09c:	b29a      	uxth	r2, r3
 800a09e:	f04f 0300 	mov.w	r3, #0
 800a0a2:	f7f6 f919 	bl	80002d8 <__aeabi_uldivmod>
 800a0a6:	4602      	mov	r2, r0
 800a0a8:	460b      	mov	r3, r1
 800a0aa:	4610      	mov	r0, r2
 800a0ac:	4619      	mov	r1, r3
 800a0ae:	f04f 0200 	mov.w	r2, #0
 800a0b2:	f04f 0300 	mov.w	r3, #0
 800a0b6:	020b      	lsls	r3, r1, #8
 800a0b8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a0bc:	0202      	lsls	r2, r0, #8
 800a0be:	6879      	ldr	r1, [r7, #4]
 800a0c0:	6849      	ldr	r1, [r1, #4]
 800a0c2:	0849      	lsrs	r1, r1, #1
 800a0c4:	4608      	mov	r0, r1
 800a0c6:	f04f 0100 	mov.w	r1, #0
 800a0ca:	1814      	adds	r4, r2, r0
 800a0cc:	eb43 0501 	adc.w	r5, r3, r1
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	685b      	ldr	r3, [r3, #4]
 800a0d4:	461a      	mov	r2, r3
 800a0d6:	f04f 0300 	mov.w	r3, #0
 800a0da:	4620      	mov	r0, r4
 800a0dc:	4629      	mov	r1, r5
 800a0de:	f7f6 f8fb 	bl	80002d8 <__aeabi_uldivmod>
 800a0e2:	4602      	mov	r2, r0
 800a0e4:	460b      	mov	r3, r1
 800a0e6:	4613      	mov	r3, r2
 800a0e8:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a0ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0ec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a0f0:	d308      	bcc.n	800a104 <UART_SetConfig+0x784>
 800a0f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0f4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a0f8:	d204      	bcs.n	800a104 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a100:	60da      	str	r2, [r3, #12]
 800a102:	e180      	b.n	800a406 <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 800a104:	2301      	movs	r3, #1
 800a106:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800a10a:	e17c      	b.n	800a406 <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	69db      	ldr	r3, [r3, #28]
 800a110:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a114:	f040 80bf 	bne.w	800a296 <UART_SetConfig+0x916>
  {
    switch (clocksource)
 800a118:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a11c:	2b20      	cmp	r3, #32
 800a11e:	dc49      	bgt.n	800a1b4 <UART_SetConfig+0x834>
 800a120:	2b00      	cmp	r3, #0
 800a122:	db7c      	blt.n	800a21e <UART_SetConfig+0x89e>
 800a124:	2b20      	cmp	r3, #32
 800a126:	d87a      	bhi.n	800a21e <UART_SetConfig+0x89e>
 800a128:	a201      	add	r2, pc, #4	; (adr r2, 800a130 <UART_SetConfig+0x7b0>)
 800a12a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a12e:	bf00      	nop
 800a130:	0800a1bb 	.word	0x0800a1bb
 800a134:	0800a1c3 	.word	0x0800a1c3
 800a138:	0800a21f 	.word	0x0800a21f
 800a13c:	0800a21f 	.word	0x0800a21f
 800a140:	0800a1cb 	.word	0x0800a1cb
 800a144:	0800a21f 	.word	0x0800a21f
 800a148:	0800a21f 	.word	0x0800a21f
 800a14c:	0800a21f 	.word	0x0800a21f
 800a150:	0800a1db 	.word	0x0800a1db
 800a154:	0800a21f 	.word	0x0800a21f
 800a158:	0800a21f 	.word	0x0800a21f
 800a15c:	0800a21f 	.word	0x0800a21f
 800a160:	0800a21f 	.word	0x0800a21f
 800a164:	0800a21f 	.word	0x0800a21f
 800a168:	0800a21f 	.word	0x0800a21f
 800a16c:	0800a21f 	.word	0x0800a21f
 800a170:	0800a1eb 	.word	0x0800a1eb
 800a174:	0800a21f 	.word	0x0800a21f
 800a178:	0800a21f 	.word	0x0800a21f
 800a17c:	0800a21f 	.word	0x0800a21f
 800a180:	0800a21f 	.word	0x0800a21f
 800a184:	0800a21f 	.word	0x0800a21f
 800a188:	0800a21f 	.word	0x0800a21f
 800a18c:	0800a21f 	.word	0x0800a21f
 800a190:	0800a21f 	.word	0x0800a21f
 800a194:	0800a21f 	.word	0x0800a21f
 800a198:	0800a21f 	.word	0x0800a21f
 800a19c:	0800a21f 	.word	0x0800a21f
 800a1a0:	0800a21f 	.word	0x0800a21f
 800a1a4:	0800a21f 	.word	0x0800a21f
 800a1a8:	0800a21f 	.word	0x0800a21f
 800a1ac:	0800a21f 	.word	0x0800a21f
 800a1b0:	0800a211 	.word	0x0800a211
 800a1b4:	2b40      	cmp	r3, #64	; 0x40
 800a1b6:	d02e      	beq.n	800a216 <UART_SetConfig+0x896>
 800a1b8:	e031      	b.n	800a21e <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a1ba:	f7fb fd4f 	bl	8005c5c <HAL_RCC_GetPCLK1Freq>
 800a1be:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a1c0:	e033      	b.n	800a22a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a1c2:	f7fb fd61 	bl	8005c88 <HAL_RCC_GetPCLK2Freq>
 800a1c6:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a1c8:	e02f      	b.n	800a22a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a1ca:	f107 0314 	add.w	r3, r7, #20
 800a1ce:	4618      	mov	r0, r3
 800a1d0:	f7fd f998 	bl	8007504 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a1d4:	69bb      	ldr	r3, [r7, #24]
 800a1d6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a1d8:	e027      	b.n	800a22a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a1da:	f107 0308 	add.w	r3, r7, #8
 800a1de:	4618      	mov	r0, r3
 800a1e0:	f7fd fae4 	bl	80077ac <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a1e8:	e01f      	b.n	800a22a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a1ea:	4b58      	ldr	r3, [pc, #352]	; (800a34c <UART_SetConfig+0x9cc>)
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	f003 0320 	and.w	r3, r3, #32
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d009      	beq.n	800a20a <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a1f6:	4b55      	ldr	r3, [pc, #340]	; (800a34c <UART_SetConfig+0x9cc>)
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	08db      	lsrs	r3, r3, #3
 800a1fc:	f003 0303 	and.w	r3, r3, #3
 800a200:	4a53      	ldr	r2, [pc, #332]	; (800a350 <UART_SetConfig+0x9d0>)
 800a202:	fa22 f303 	lsr.w	r3, r2, r3
 800a206:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a208:	e00f      	b.n	800a22a <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 800a20a:	4b51      	ldr	r3, [pc, #324]	; (800a350 <UART_SetConfig+0x9d0>)
 800a20c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a20e:	e00c      	b.n	800a22a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a210:	4b4c      	ldr	r3, [pc, #304]	; (800a344 <UART_SetConfig+0x9c4>)
 800a212:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a214:	e009      	b.n	800a22a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a216:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a21a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a21c:	e005      	b.n	800a22a <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 800a21e:	2300      	movs	r3, #0
 800a220:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800a222:	2301      	movs	r3, #1
 800a224:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800a228:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a22a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	f000 80ea 	beq.w	800a406 <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a236:	4a44      	ldr	r2, [pc, #272]	; (800a348 <UART_SetConfig+0x9c8>)
 800a238:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a23c:	461a      	mov	r2, r3
 800a23e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a240:	fbb3 f3f2 	udiv	r3, r3, r2
 800a244:	005a      	lsls	r2, r3, #1
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	685b      	ldr	r3, [r3, #4]
 800a24a:	085b      	lsrs	r3, r3, #1
 800a24c:	441a      	add	r2, r3
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	685b      	ldr	r3, [r3, #4]
 800a252:	fbb2 f3f3 	udiv	r3, r2, r3
 800a256:	b29b      	uxth	r3, r3
 800a258:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a25a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a25c:	2b0f      	cmp	r3, #15
 800a25e:	d916      	bls.n	800a28e <UART_SetConfig+0x90e>
 800a260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a262:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a266:	d212      	bcs.n	800a28e <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a268:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a26a:	b29b      	uxth	r3, r3
 800a26c:	f023 030f 	bic.w	r3, r3, #15
 800a270:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a272:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a274:	085b      	lsrs	r3, r3, #1
 800a276:	b29b      	uxth	r3, r3
 800a278:	f003 0307 	and.w	r3, r3, #7
 800a27c:	b29a      	uxth	r2, r3
 800a27e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a280:	4313      	orrs	r3, r2
 800a282:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800a28a:	60da      	str	r2, [r3, #12]
 800a28c:	e0bb      	b.n	800a406 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800a28e:	2301      	movs	r3, #1
 800a290:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800a294:	e0b7      	b.n	800a406 <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a296:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a29a:	2b20      	cmp	r3, #32
 800a29c:	dc4a      	bgt.n	800a334 <UART_SetConfig+0x9b4>
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	f2c0 8086 	blt.w	800a3b0 <UART_SetConfig+0xa30>
 800a2a4:	2b20      	cmp	r3, #32
 800a2a6:	f200 8083 	bhi.w	800a3b0 <UART_SetConfig+0xa30>
 800a2aa:	a201      	add	r2, pc, #4	; (adr r2, 800a2b0 <UART_SetConfig+0x930>)
 800a2ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2b0:	0800a33b 	.word	0x0800a33b
 800a2b4:	0800a355 	.word	0x0800a355
 800a2b8:	0800a3b1 	.word	0x0800a3b1
 800a2bc:	0800a3b1 	.word	0x0800a3b1
 800a2c0:	0800a35d 	.word	0x0800a35d
 800a2c4:	0800a3b1 	.word	0x0800a3b1
 800a2c8:	0800a3b1 	.word	0x0800a3b1
 800a2cc:	0800a3b1 	.word	0x0800a3b1
 800a2d0:	0800a36d 	.word	0x0800a36d
 800a2d4:	0800a3b1 	.word	0x0800a3b1
 800a2d8:	0800a3b1 	.word	0x0800a3b1
 800a2dc:	0800a3b1 	.word	0x0800a3b1
 800a2e0:	0800a3b1 	.word	0x0800a3b1
 800a2e4:	0800a3b1 	.word	0x0800a3b1
 800a2e8:	0800a3b1 	.word	0x0800a3b1
 800a2ec:	0800a3b1 	.word	0x0800a3b1
 800a2f0:	0800a37d 	.word	0x0800a37d
 800a2f4:	0800a3b1 	.word	0x0800a3b1
 800a2f8:	0800a3b1 	.word	0x0800a3b1
 800a2fc:	0800a3b1 	.word	0x0800a3b1
 800a300:	0800a3b1 	.word	0x0800a3b1
 800a304:	0800a3b1 	.word	0x0800a3b1
 800a308:	0800a3b1 	.word	0x0800a3b1
 800a30c:	0800a3b1 	.word	0x0800a3b1
 800a310:	0800a3b1 	.word	0x0800a3b1
 800a314:	0800a3b1 	.word	0x0800a3b1
 800a318:	0800a3b1 	.word	0x0800a3b1
 800a31c:	0800a3b1 	.word	0x0800a3b1
 800a320:	0800a3b1 	.word	0x0800a3b1
 800a324:	0800a3b1 	.word	0x0800a3b1
 800a328:	0800a3b1 	.word	0x0800a3b1
 800a32c:	0800a3b1 	.word	0x0800a3b1
 800a330:	0800a3a3 	.word	0x0800a3a3
 800a334:	2b40      	cmp	r3, #64	; 0x40
 800a336:	d037      	beq.n	800a3a8 <UART_SetConfig+0xa28>
 800a338:	e03a      	b.n	800a3b0 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a33a:	f7fb fc8f 	bl	8005c5c <HAL_RCC_GetPCLK1Freq>
 800a33e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a340:	e03c      	b.n	800a3bc <UART_SetConfig+0xa3c>
 800a342:	bf00      	nop
 800a344:	003d0900 	.word	0x003d0900
 800a348:	0800d1a4 	.word	0x0800d1a4
 800a34c:	58024400 	.word	0x58024400
 800a350:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a354:	f7fb fc98 	bl	8005c88 <HAL_RCC_GetPCLK2Freq>
 800a358:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a35a:	e02f      	b.n	800a3bc <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a35c:	f107 0314 	add.w	r3, r7, #20
 800a360:	4618      	mov	r0, r3
 800a362:	f7fd f8cf 	bl	8007504 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a366:	69bb      	ldr	r3, [r7, #24]
 800a368:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a36a:	e027      	b.n	800a3bc <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a36c:	f107 0308 	add.w	r3, r7, #8
 800a370:	4618      	mov	r0, r3
 800a372:	f7fd fa1b 	bl	80077ac <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a37a:	e01f      	b.n	800a3bc <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a37c:	4b2c      	ldr	r3, [pc, #176]	; (800a430 <UART_SetConfig+0xab0>)
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	f003 0320 	and.w	r3, r3, #32
 800a384:	2b00      	cmp	r3, #0
 800a386:	d009      	beq.n	800a39c <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a388:	4b29      	ldr	r3, [pc, #164]	; (800a430 <UART_SetConfig+0xab0>)
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	08db      	lsrs	r3, r3, #3
 800a38e:	f003 0303 	and.w	r3, r3, #3
 800a392:	4a28      	ldr	r2, [pc, #160]	; (800a434 <UART_SetConfig+0xab4>)
 800a394:	fa22 f303 	lsr.w	r3, r2, r3
 800a398:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a39a:	e00f      	b.n	800a3bc <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 800a39c:	4b25      	ldr	r3, [pc, #148]	; (800a434 <UART_SetConfig+0xab4>)
 800a39e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a3a0:	e00c      	b.n	800a3bc <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a3a2:	4b25      	ldr	r3, [pc, #148]	; (800a438 <UART_SetConfig+0xab8>)
 800a3a4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a3a6:	e009      	b.n	800a3bc <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a3a8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a3ac:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a3ae:	e005      	b.n	800a3bc <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 800a3b0:	2300      	movs	r3, #0
 800a3b2:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800a3b4:	2301      	movs	r3, #1
 800a3b6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800a3ba:	bf00      	nop
    }

    if (pclk != 0U)
 800a3bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d021      	beq.n	800a406 <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3c6:	4a1d      	ldr	r2, [pc, #116]	; (800a43c <UART_SetConfig+0xabc>)
 800a3c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a3cc:	461a      	mov	r2, r3
 800a3ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3d0:	fbb3 f2f2 	udiv	r2, r3, r2
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	685b      	ldr	r3, [r3, #4]
 800a3d8:	085b      	lsrs	r3, r3, #1
 800a3da:	441a      	add	r2, r3
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	685b      	ldr	r3, [r3, #4]
 800a3e0:	fbb2 f3f3 	udiv	r3, r2, r3
 800a3e4:	b29b      	uxth	r3, r3
 800a3e6:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a3e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3ea:	2b0f      	cmp	r3, #15
 800a3ec:	d908      	bls.n	800a400 <UART_SetConfig+0xa80>
 800a3ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a3f4:	d204      	bcs.n	800a400 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a3fc:	60da      	str	r2, [r3, #12]
 800a3fe:	e002      	b.n	800a406 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800a400:	2301      	movs	r3, #1
 800a402:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	2201      	movs	r2, #1
 800a40a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	2201      	movs	r2, #1
 800a412:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	2200      	movs	r2, #0
 800a41a:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	2200      	movs	r2, #0
 800a420:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800a422:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800a426:	4618      	mov	r0, r3
 800a428:	3738      	adds	r7, #56	; 0x38
 800a42a:	46bd      	mov	sp, r7
 800a42c:	bdb0      	pop	{r4, r5, r7, pc}
 800a42e:	bf00      	nop
 800a430:	58024400 	.word	0x58024400
 800a434:	03d09000 	.word	0x03d09000
 800a438:	003d0900 	.word	0x003d0900
 800a43c:	0800d1a4 	.word	0x0800d1a4

0800a440 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a440:	b480      	push	{r7}
 800a442:	b083      	sub	sp, #12
 800a444:	af00      	add	r7, sp, #0
 800a446:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a44c:	f003 0301 	and.w	r3, r3, #1
 800a450:	2b00      	cmp	r3, #0
 800a452:	d00a      	beq.n	800a46a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	685b      	ldr	r3, [r3, #4]
 800a45a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	430a      	orrs	r2, r1
 800a468:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a46e:	f003 0302 	and.w	r3, r3, #2
 800a472:	2b00      	cmp	r3, #0
 800a474:	d00a      	beq.n	800a48c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	685b      	ldr	r3, [r3, #4]
 800a47c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	430a      	orrs	r2, r1
 800a48a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a490:	f003 0304 	and.w	r3, r3, #4
 800a494:	2b00      	cmp	r3, #0
 800a496:	d00a      	beq.n	800a4ae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	685b      	ldr	r3, [r3, #4]
 800a49e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	430a      	orrs	r2, r1
 800a4ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4b2:	f003 0308 	and.w	r3, r3, #8
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d00a      	beq.n	800a4d0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	685b      	ldr	r3, [r3, #4]
 800a4c0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	430a      	orrs	r2, r1
 800a4ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4d4:	f003 0310 	and.w	r3, r3, #16
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d00a      	beq.n	800a4f2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	689b      	ldr	r3, [r3, #8]
 800a4e2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	430a      	orrs	r2, r1
 800a4f0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4f6:	f003 0320 	and.w	r3, r3, #32
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d00a      	beq.n	800a514 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	689b      	ldr	r3, [r3, #8]
 800a504:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	430a      	orrs	r2, r1
 800a512:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a518:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d01a      	beq.n	800a556 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	685b      	ldr	r3, [r3, #4]
 800a526:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	430a      	orrs	r2, r1
 800a534:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a53a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a53e:	d10a      	bne.n	800a556 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	685b      	ldr	r3, [r3, #4]
 800a546:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	430a      	orrs	r2, r1
 800a554:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a55a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d00a      	beq.n	800a578 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	685b      	ldr	r3, [r3, #4]
 800a568:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	430a      	orrs	r2, r1
 800a576:	605a      	str	r2, [r3, #4]
  }
}
 800a578:	bf00      	nop
 800a57a:	370c      	adds	r7, #12
 800a57c:	46bd      	mov	sp, r7
 800a57e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a582:	4770      	bx	lr

0800a584 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a584:	b580      	push	{r7, lr}
 800a586:	b086      	sub	sp, #24
 800a588:	af02      	add	r7, sp, #8
 800a58a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	2200      	movs	r2, #0
 800a590:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a594:	f7f7 f93e 	bl	8001814 <HAL_GetTick>
 800a598:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	f003 0308 	and.w	r3, r3, #8
 800a5a4:	2b08      	cmp	r3, #8
 800a5a6:	d10e      	bne.n	800a5c6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a5a8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a5ac:	9300      	str	r3, [sp, #0]
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	2200      	movs	r2, #0
 800a5b2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a5b6:	6878      	ldr	r0, [r7, #4]
 800a5b8:	f000 f82f 	bl	800a61a <UART_WaitOnFlagUntilTimeout>
 800a5bc:	4603      	mov	r3, r0
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d001      	beq.n	800a5c6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a5c2:	2303      	movs	r3, #3
 800a5c4:	e025      	b.n	800a612 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	f003 0304 	and.w	r3, r3, #4
 800a5d0:	2b04      	cmp	r3, #4
 800a5d2:	d10e      	bne.n	800a5f2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a5d4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a5d8:	9300      	str	r3, [sp, #0]
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	2200      	movs	r2, #0
 800a5de:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a5e2:	6878      	ldr	r0, [r7, #4]
 800a5e4:	f000 f819 	bl	800a61a <UART_WaitOnFlagUntilTimeout>
 800a5e8:	4603      	mov	r3, r0
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d001      	beq.n	800a5f2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a5ee:	2303      	movs	r3, #3
 800a5f0:	e00f      	b.n	800a612 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	2220      	movs	r2, #32
 800a5f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	2220      	movs	r2, #32
 800a5fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	2200      	movs	r2, #0
 800a606:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	2200      	movs	r2, #0
 800a60c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a610:	2300      	movs	r3, #0
}
 800a612:	4618      	mov	r0, r3
 800a614:	3710      	adds	r7, #16
 800a616:	46bd      	mov	sp, r7
 800a618:	bd80      	pop	{r7, pc}

0800a61a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a61a:	b580      	push	{r7, lr}
 800a61c:	b084      	sub	sp, #16
 800a61e:	af00      	add	r7, sp, #0
 800a620:	60f8      	str	r0, [r7, #12]
 800a622:	60b9      	str	r1, [r7, #8]
 800a624:	603b      	str	r3, [r7, #0]
 800a626:	4613      	mov	r3, r2
 800a628:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a62a:	e062      	b.n	800a6f2 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a62c:	69bb      	ldr	r3, [r7, #24]
 800a62e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a632:	d05e      	beq.n	800a6f2 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a634:	f7f7 f8ee 	bl	8001814 <HAL_GetTick>
 800a638:	4602      	mov	r2, r0
 800a63a:	683b      	ldr	r3, [r7, #0]
 800a63c:	1ad3      	subs	r3, r2, r3
 800a63e:	69ba      	ldr	r2, [r7, #24]
 800a640:	429a      	cmp	r2, r3
 800a642:	d302      	bcc.n	800a64a <UART_WaitOnFlagUntilTimeout+0x30>
 800a644:	69bb      	ldr	r3, [r7, #24]
 800a646:	2b00      	cmp	r3, #0
 800a648:	d11d      	bne.n	800a686 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	681a      	ldr	r2, [r3, #0]
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a658:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	689a      	ldr	r2, [r3, #8]
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	f022 0201 	bic.w	r2, r2, #1
 800a668:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	2220      	movs	r2, #32
 800a66e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	2220      	movs	r2, #32
 800a676:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	2200      	movs	r2, #0
 800a67e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800a682:	2303      	movs	r3, #3
 800a684:	e045      	b.n	800a712 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	f003 0304 	and.w	r3, r3, #4
 800a690:	2b00      	cmp	r3, #0
 800a692:	d02e      	beq.n	800a6f2 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	69db      	ldr	r3, [r3, #28]
 800a69a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a69e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a6a2:	d126      	bne.n	800a6f2 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a6ac:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	681a      	ldr	r2, [r3, #0]
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a6bc:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	689a      	ldr	r2, [r3, #8]
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	f022 0201 	bic.w	r2, r2, #1
 800a6cc:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	2220      	movs	r2, #32
 800a6d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	2220      	movs	r2, #32
 800a6da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	2220      	movs	r2, #32
 800a6e2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	2200      	movs	r2, #0
 800a6ea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800a6ee:	2303      	movs	r3, #3
 800a6f0:	e00f      	b.n	800a712 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	69da      	ldr	r2, [r3, #28]
 800a6f8:	68bb      	ldr	r3, [r7, #8]
 800a6fa:	4013      	ands	r3, r2
 800a6fc:	68ba      	ldr	r2, [r7, #8]
 800a6fe:	429a      	cmp	r2, r3
 800a700:	bf0c      	ite	eq
 800a702:	2301      	moveq	r3, #1
 800a704:	2300      	movne	r3, #0
 800a706:	b2db      	uxtb	r3, r3
 800a708:	461a      	mov	r2, r3
 800a70a:	79fb      	ldrb	r3, [r7, #7]
 800a70c:	429a      	cmp	r2, r3
 800a70e:	d08d      	beq.n	800a62c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a710:	2300      	movs	r3, #0
}
 800a712:	4618      	mov	r0, r3
 800a714:	3710      	adds	r7, #16
 800a716:	46bd      	mov	sp, r7
 800a718:	bd80      	pop	{r7, pc}

0800a71a <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a71a:	b480      	push	{r7}
 800a71c:	b083      	sub	sp, #12
 800a71e:	af00      	add	r7, sp, #0
 800a720:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	681a      	ldr	r2, [r3, #0]
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800a730:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	689a      	ldr	r2, [r3, #8]
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800a740:	609a      	str	r2, [r3, #8]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	2220      	movs	r2, #32
 800a746:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800a74a:	bf00      	nop
 800a74c:	370c      	adds	r7, #12
 800a74e:	46bd      	mov	sp, r7
 800a750:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a754:	4770      	bx	lr
	...

0800a758 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a758:	b480      	push	{r7}
 800a75a:	b083      	sub	sp, #12
 800a75c:	af00      	add	r7, sp, #0
 800a75e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	681a      	ldr	r2, [r3, #0]
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800a76e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	6899      	ldr	r1, [r3, #8]
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	681a      	ldr	r2, [r3, #0]
 800a77a:	4b0f      	ldr	r3, [pc, #60]	; (800a7b8 <UART_EndRxTransfer+0x60>)
 800a77c:	400b      	ands	r3, r1
 800a77e:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a784:	2b01      	cmp	r3, #1
 800a786:	d107      	bne.n	800a798 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	681a      	ldr	r2, [r3, #0]
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	f022 0210 	bic.w	r2, r2, #16
 800a796:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	2220      	movs	r2, #32
 800a79c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	2200      	movs	r2, #0
 800a7a4:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	2200      	movs	r2, #0
 800a7aa:	671a      	str	r2, [r3, #112]	; 0x70
}
 800a7ac:	bf00      	nop
 800a7ae:	370c      	adds	r7, #12
 800a7b0:	46bd      	mov	sp, r7
 800a7b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7b6:	4770      	bx	lr
 800a7b8:	effffffe 	.word	0xeffffffe

0800a7bc <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a7bc:	b580      	push	{r7, lr}
 800a7be:	b084      	sub	sp, #16
 800a7c0:	af00      	add	r7, sp, #0
 800a7c2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7c8:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	69db      	ldr	r3, [r3, #28]
 800a7ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a7d2:	d014      	beq.n	800a7fe <UART_DMATransmitCplt+0x42>
  {
    huart->TxXferCount = 0U;
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	2200      	movs	r2, #0
 800a7d8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	689a      	ldr	r2, [r3, #8]
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a7ea:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	681a      	ldr	r2, [r3, #0]
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a7fa:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a7fc:	e002      	b.n	800a804 <UART_DMATransmitCplt+0x48>
    HAL_UART_TxCpltCallback(huart);
 800a7fe:	68f8      	ldr	r0, [r7, #12]
 800a800:	f7ff f894 	bl	800992c <HAL_UART_TxCpltCallback>
}
 800a804:	bf00      	nop
 800a806:	3710      	adds	r7, #16
 800a808:	46bd      	mov	sp, r7
 800a80a:	bd80      	pop	{r7, pc}

0800a80c <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a80c:	b580      	push	{r7, lr}
 800a80e:	b084      	sub	sp, #16
 800a810:	af00      	add	r7, sp, #0
 800a812:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a818:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800a81a:	68f8      	ldr	r0, [r7, #12]
 800a81c:	f7ff f890 	bl	8009940 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a820:	bf00      	nop
 800a822:	3710      	adds	r7, #16
 800a824:	46bd      	mov	sp, r7
 800a826:	bd80      	pop	{r7, pc}

0800a828 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a828:	b580      	push	{r7, lr}
 800a82a:	b086      	sub	sp, #24
 800a82c:	af00      	add	r7, sp, #0
 800a82e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a834:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800a836:	697b      	ldr	r3, [r7, #20]
 800a838:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a83c:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800a83e:	697b      	ldr	r3, [r7, #20]
 800a840:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a844:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800a846:	697b      	ldr	r3, [r7, #20]
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	689b      	ldr	r3, [r3, #8]
 800a84c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a850:	2b80      	cmp	r3, #128	; 0x80
 800a852:	d109      	bne.n	800a868 <UART_DMAError+0x40>
 800a854:	693b      	ldr	r3, [r7, #16]
 800a856:	2b21      	cmp	r3, #33	; 0x21
 800a858:	d106      	bne.n	800a868 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800a85a:	697b      	ldr	r3, [r7, #20]
 800a85c:	2200      	movs	r2, #0
 800a85e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800a862:	6978      	ldr	r0, [r7, #20]
 800a864:	f7ff ff59 	bl	800a71a <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800a868:	697b      	ldr	r3, [r7, #20]
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	689b      	ldr	r3, [r3, #8]
 800a86e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a872:	2b40      	cmp	r3, #64	; 0x40
 800a874:	d109      	bne.n	800a88a <UART_DMAError+0x62>
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	2b22      	cmp	r3, #34	; 0x22
 800a87a:	d106      	bne.n	800a88a <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800a87c:	697b      	ldr	r3, [r7, #20]
 800a87e:	2200      	movs	r2, #0
 800a880:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800a884:	6978      	ldr	r0, [r7, #20]
 800a886:	f7ff ff67 	bl	800a758 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a88a:	697b      	ldr	r3, [r7, #20]
 800a88c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a890:	f043 0210 	orr.w	r2, r3, #16
 800a894:	697b      	ldr	r3, [r7, #20]
 800a896:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a89a:	6978      	ldr	r0, [r7, #20]
 800a89c:	f7ff f85a 	bl	8009954 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a8a0:	bf00      	nop
 800a8a2:	3718      	adds	r7, #24
 800a8a4:	46bd      	mov	sp, r7
 800a8a6:	bd80      	pop	{r7, pc}

0800a8a8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a8a8:	b580      	push	{r7, lr}
 800a8aa:	b084      	sub	sp, #16
 800a8ac:	af00      	add	r7, sp, #0
 800a8ae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8b4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	2200      	movs	r2, #0
 800a8ba:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	2200      	movs	r2, #0
 800a8c2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a8c6:	68f8      	ldr	r0, [r7, #12]
 800a8c8:	f7ff f844 	bl	8009954 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a8cc:	bf00      	nop
 800a8ce:	3710      	adds	r7, #16
 800a8d0:	46bd      	mov	sp, r7
 800a8d2:	bd80      	pop	{r7, pc}

0800a8d4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a8d4:	b580      	push	{r7, lr}
 800a8d6:	b082      	sub	sp, #8
 800a8d8:	af00      	add	r7, sp, #0
 800a8da:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	681a      	ldr	r2, [r3, #0]
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a8ea:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	2220      	movs	r2, #32
 800a8f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	2200      	movs	r2, #0
 800a8f8:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a8fa:	6878      	ldr	r0, [r7, #4]
 800a8fc:	f7ff f816 	bl	800992c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a900:	bf00      	nop
 800a902:	3708      	adds	r7, #8
 800a904:	46bd      	mov	sp, r7
 800a906:	bd80      	pop	{r7, pc}

0800a908 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a908:	b480      	push	{r7}
 800a90a:	b083      	sub	sp, #12
 800a90c:	af00      	add	r7, sp, #0
 800a90e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a910:	bf00      	nop
 800a912:	370c      	adds	r7, #12
 800a914:	46bd      	mov	sp, r7
 800a916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a91a:	4770      	bx	lr

0800a91c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800a91c:	b480      	push	{r7}
 800a91e:	b083      	sub	sp, #12
 800a920:	af00      	add	r7, sp, #0
 800a922:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800a924:	bf00      	nop
 800a926:	370c      	adds	r7, #12
 800a928:	46bd      	mov	sp, r7
 800a92a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a92e:	4770      	bx	lr

0800a930 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800a930:	b480      	push	{r7}
 800a932:	b083      	sub	sp, #12
 800a934:	af00      	add	r7, sp, #0
 800a936:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a938:	bf00      	nop
 800a93a:	370c      	adds	r7, #12
 800a93c:	46bd      	mov	sp, r7
 800a93e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a942:	4770      	bx	lr

0800a944 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a944:	b480      	push	{r7}
 800a946:	b085      	sub	sp, #20
 800a948:	af00      	add	r7, sp, #0
 800a94a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a952:	2b01      	cmp	r3, #1
 800a954:	d101      	bne.n	800a95a <HAL_UARTEx_DisableFifoMode+0x16>
 800a956:	2302      	movs	r3, #2
 800a958:	e027      	b.n	800a9aa <HAL_UARTEx_DisableFifoMode+0x66>
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	2201      	movs	r2, #1
 800a95e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	2224      	movs	r2, #36	; 0x24
 800a966:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	681a      	ldr	r2, [r3, #0]
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	f022 0201 	bic.w	r2, r2, #1
 800a980:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a988:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	2200      	movs	r2, #0
 800a98e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	68fa      	ldr	r2, [r7, #12]
 800a996:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	2220      	movs	r2, #32
 800a99c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	2200      	movs	r2, #0
 800a9a4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a9a8:	2300      	movs	r3, #0
}
 800a9aa:	4618      	mov	r0, r3
 800a9ac:	3714      	adds	r7, #20
 800a9ae:	46bd      	mov	sp, r7
 800a9b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9b4:	4770      	bx	lr

0800a9b6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a9b6:	b580      	push	{r7, lr}
 800a9b8:	b084      	sub	sp, #16
 800a9ba:	af00      	add	r7, sp, #0
 800a9bc:	6078      	str	r0, [r7, #4]
 800a9be:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a9c6:	2b01      	cmp	r3, #1
 800a9c8:	d101      	bne.n	800a9ce <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a9ca:	2302      	movs	r3, #2
 800a9cc:	e02d      	b.n	800aa2a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	2201      	movs	r2, #1
 800a9d2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	2224      	movs	r2, #36	; 0x24
 800a9da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	681a      	ldr	r2, [r3, #0]
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	f022 0201 	bic.w	r2, r2, #1
 800a9f4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	689b      	ldr	r3, [r3, #8]
 800a9fc:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	683a      	ldr	r2, [r7, #0]
 800aa06:	430a      	orrs	r2, r1
 800aa08:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800aa0a:	6878      	ldr	r0, [r7, #4]
 800aa0c:	f000 f850 	bl	800aab0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	68fa      	ldr	r2, [r7, #12]
 800aa16:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	2220      	movs	r2, #32
 800aa1c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	2200      	movs	r2, #0
 800aa24:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800aa28:	2300      	movs	r3, #0
}
 800aa2a:	4618      	mov	r0, r3
 800aa2c:	3710      	adds	r7, #16
 800aa2e:	46bd      	mov	sp, r7
 800aa30:	bd80      	pop	{r7, pc}

0800aa32 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800aa32:	b580      	push	{r7, lr}
 800aa34:	b084      	sub	sp, #16
 800aa36:	af00      	add	r7, sp, #0
 800aa38:	6078      	str	r0, [r7, #4]
 800aa3a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800aa42:	2b01      	cmp	r3, #1
 800aa44:	d101      	bne.n	800aa4a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800aa46:	2302      	movs	r3, #2
 800aa48:	e02d      	b.n	800aaa6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	2201      	movs	r2, #1
 800aa4e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	2224      	movs	r2, #36	; 0x24
 800aa56:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	681a      	ldr	r2, [r3, #0]
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	f022 0201 	bic.w	r2, r2, #1
 800aa70:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	689b      	ldr	r3, [r3, #8]
 800aa78:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	683a      	ldr	r2, [r7, #0]
 800aa82:	430a      	orrs	r2, r1
 800aa84:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800aa86:	6878      	ldr	r0, [r7, #4]
 800aa88:	f000 f812 	bl	800aab0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	68fa      	ldr	r2, [r7, #12]
 800aa92:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	2220      	movs	r2, #32
 800aa98:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	2200      	movs	r2, #0
 800aaa0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800aaa4:	2300      	movs	r3, #0
}
 800aaa6:	4618      	mov	r0, r3
 800aaa8:	3710      	adds	r7, #16
 800aaaa:	46bd      	mov	sp, r7
 800aaac:	bd80      	pop	{r7, pc}
	...

0800aab0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800aab0:	b480      	push	{r7}
 800aab2:	b085      	sub	sp, #20
 800aab4:	af00      	add	r7, sp, #0
 800aab6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d108      	bne.n	800aad2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	2201      	movs	r2, #1
 800aac4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	2201      	movs	r2, #1
 800aacc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800aad0:	e031      	b.n	800ab36 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800aad2:	2310      	movs	r3, #16
 800aad4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800aad6:	2310      	movs	r3, #16
 800aad8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	689b      	ldr	r3, [r3, #8]
 800aae0:	0e5b      	lsrs	r3, r3, #25
 800aae2:	b2db      	uxtb	r3, r3
 800aae4:	f003 0307 	and.w	r3, r3, #7
 800aae8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	689b      	ldr	r3, [r3, #8]
 800aaf0:	0f5b      	lsrs	r3, r3, #29
 800aaf2:	b2db      	uxtb	r3, r3
 800aaf4:	f003 0307 	and.w	r3, r3, #7
 800aaf8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800aafa:	7bbb      	ldrb	r3, [r7, #14]
 800aafc:	7b3a      	ldrb	r2, [r7, #12]
 800aafe:	4911      	ldr	r1, [pc, #68]	; (800ab44 <UARTEx_SetNbDataToProcess+0x94>)
 800ab00:	5c8a      	ldrb	r2, [r1, r2]
 800ab02:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800ab06:	7b3a      	ldrb	r2, [r7, #12]
 800ab08:	490f      	ldr	r1, [pc, #60]	; (800ab48 <UARTEx_SetNbDataToProcess+0x98>)
 800ab0a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ab0c:	fb93 f3f2 	sdiv	r3, r3, r2
 800ab10:	b29a      	uxth	r2, r3
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ab18:	7bfb      	ldrb	r3, [r7, #15]
 800ab1a:	7b7a      	ldrb	r2, [r7, #13]
 800ab1c:	4909      	ldr	r1, [pc, #36]	; (800ab44 <UARTEx_SetNbDataToProcess+0x94>)
 800ab1e:	5c8a      	ldrb	r2, [r1, r2]
 800ab20:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800ab24:	7b7a      	ldrb	r2, [r7, #13]
 800ab26:	4908      	ldr	r1, [pc, #32]	; (800ab48 <UARTEx_SetNbDataToProcess+0x98>)
 800ab28:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ab2a:	fb93 f3f2 	sdiv	r3, r3, r2
 800ab2e:	b29a      	uxth	r2, r3
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800ab36:	bf00      	nop
 800ab38:	3714      	adds	r7, #20
 800ab3a:	46bd      	mov	sp, r7
 800ab3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab40:	4770      	bx	lr
 800ab42:	bf00      	nop
 800ab44:	0800d1bc 	.word	0x0800d1bc
 800ab48:	0800d1c4 	.word	0x0800d1c4

0800ab4c <arm_fir_f32>:
void arm_fir_f32(
  const arm_fir_instance_f32 * S,
  const float32_t * pSrc,
        float32_t * pDst,
        uint32_t blockSize)
{
 800ab4c:	b480      	push	{r7}
 800ab4e:	b08f      	sub	sp, #60	; 0x3c
 800ab50:	af00      	add	r7, sp, #0
 800ab52:	60f8      	str	r0, [r7, #12]
 800ab54:	60b9      	str	r1, [r7, #8]
 800ab56:	607a      	str	r2, [r7, #4]
 800ab58:	603b      	str	r3, [r7, #0]
        float32_t *pState = S->pState;                 /* State pointer */
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	685b      	ldr	r3, [r3, #4]
 800ab5e:	637b      	str	r3, [r7, #52]	; 0x34
  const float32_t *pCoeffs = S->pCoeffs;               /* Coefficient pointer */
 800ab60:	68fb      	ldr	r3, [r7, #12]
 800ab62:	689b      	ldr	r3, [r3, #8]
 800ab64:	617b      	str	r3, [r7, #20]
        float32_t *pStateCurnt;                        /* Points to the current sample of the state */
        float32_t *px;                                 /* Temporary pointer for state buffer */
  const float32_t *pb;                                 /* Temporary pointer for coefficient buffer */
        float32_t acc0;                                /* Accumulator */
        uint32_t numTaps = S->numTaps;                 /* Number of filter coefficients in the filter */
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	881b      	ldrh	r3, [r3, #0]
 800ab6a:	613b      	str	r3, [r7, #16]
        float32_t c0;                                           /* Temporary variable to hold coefficient value */
#endif

  /* S->pState points to state array which contains previous frame (numTaps - 1) samples */
  /* pStateCurnt points to the location where the new input data should be written */
  pStateCurnt = &(S->pState[(numTaps - 1U)]);
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	685a      	ldr	r2, [r3, #4]
 800ab70:	6939      	ldr	r1, [r7, #16]
 800ab72:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800ab76:	440b      	add	r3, r1
 800ab78:	009b      	lsls	r3, r3, #2
 800ab7a:	4413      	add	r3, r2
 800ab7c:	633b      	str	r3, [r7, #48]	; 0x30
  blkCnt = blockSize % 0x8U;

#else

  /* Initialize blkCnt with number of taps */
  blkCnt = blockSize;
 800ab7e:	683b      	ldr	r3, [r7, #0]
 800ab80:	61bb      	str	r3, [r7, #24]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  while (blkCnt > 0U)
 800ab82:	e034      	b.n	800abee <arm_fir_f32+0xa2>
  {
    /* Copy one sample at a time into state buffer */
    *pStateCurnt++ = *pSrc++;
 800ab84:	68ba      	ldr	r2, [r7, #8]
 800ab86:	1d13      	adds	r3, r2, #4
 800ab88:	60bb      	str	r3, [r7, #8]
 800ab8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab8c:	1d19      	adds	r1, r3, #4
 800ab8e:	6339      	str	r1, [r7, #48]	; 0x30
 800ab90:	6812      	ldr	r2, [r2, #0]
 800ab92:	601a      	str	r2, [r3, #0]

    /* Set the accumulator to zero */
    acc0 = 0.0f;
 800ab94:	f04f 0300 	mov.w	r3, #0
 800ab98:	627b      	str	r3, [r7, #36]	; 0x24

    /* Initialize state pointer */
    px = pState;
 800ab9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab9c:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Initialize Coefficient pointer */
    pb = pCoeffs;
 800ab9e:	697b      	ldr	r3, [r7, #20]
 800aba0:	62bb      	str	r3, [r7, #40]	; 0x28

    i = numTaps;
 800aba2:	693b      	ldr	r3, [r7, #16]
 800aba4:	623b      	str	r3, [r7, #32]

    /* Perform the multiply-accumulates */
    while (i > 0U)
 800aba6:	e014      	b.n	800abd2 <arm_fir_f32+0x86>
    {
      /* acc =  b[numTaps-1] * x[n-numTaps-1] + b[numTaps-2] * x[n-numTaps-2] + b[numTaps-3] * x[n-numTaps-3] +...+ b[0] * x[0] */
      acc0 += *px++ * *pb++;
 800aba8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abaa:	1d1a      	adds	r2, r3, #4
 800abac:	62fa      	str	r2, [r7, #44]	; 0x2c
 800abae:	ed93 7a00 	vldr	s14, [r3]
 800abb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abb4:	1d1a      	adds	r2, r3, #4
 800abb6:	62ba      	str	r2, [r7, #40]	; 0x28
 800abb8:	edd3 7a00 	vldr	s15, [r3]
 800abbc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800abc0:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800abc4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800abc8:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

      i--;
 800abcc:	6a3b      	ldr	r3, [r7, #32]
 800abce:	3b01      	subs	r3, #1
 800abd0:	623b      	str	r3, [r7, #32]
    while (i > 0U)
 800abd2:	6a3b      	ldr	r3, [r7, #32]
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d1e7      	bne.n	800aba8 <arm_fir_f32+0x5c>
    }

    /* Store result in destination buffer. */
    *pDst++ = acc0;
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	1d1a      	adds	r2, r3, #4
 800abdc:	607a      	str	r2, [r7, #4]
 800abde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800abe0:	601a      	str	r2, [r3, #0]

    /* Advance state pointer by 1 for the next sample */
    pState = pState + 1U;
 800abe2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800abe4:	3304      	adds	r3, #4
 800abe6:	637b      	str	r3, [r7, #52]	; 0x34

    /* Decrement loop counter */
    blkCnt--;
 800abe8:	69bb      	ldr	r3, [r7, #24]
 800abea:	3b01      	subs	r3, #1
 800abec:	61bb      	str	r3, [r7, #24]
  while (blkCnt > 0U)
 800abee:	69bb      	ldr	r3, [r7, #24]
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d1c7      	bne.n	800ab84 <arm_fir_f32+0x38>
  /* Processing is complete.
     Now copy the last numTaps - 1 samples to the start of the state buffer.
     This prepares the state buffer for the next function call. */

  /* Points to the start of the state buffer */
  pStateCurnt = S->pState;
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	685b      	ldr	r3, [r3, #4]
 800abf8:	633b      	str	r3, [r7, #48]	; 0x30
  tapCnt = (numTaps - 1U) % 0x4U;

#else

  /* Initialize tapCnt with number of taps */
  tapCnt = (numTaps - 1U);
 800abfa:	693b      	ldr	r3, [r7, #16]
 800abfc:	3b01      	subs	r3, #1
 800abfe:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  /* Copy remaining data */
  while (tapCnt > 0U)
 800ac00:	e00a      	b.n	800ac18 <arm_fir_f32+0xcc>
  {
    *pStateCurnt++ = *pState++;
 800ac02:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ac04:	1d13      	adds	r3, r2, #4
 800ac06:	637b      	str	r3, [r7, #52]	; 0x34
 800ac08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac0a:	1d19      	adds	r1, r3, #4
 800ac0c:	6339      	str	r1, [r7, #48]	; 0x30
 800ac0e:	6812      	ldr	r2, [r2, #0]
 800ac10:	601a      	str	r2, [r3, #0]

    /* Decrement loop counter */
    tapCnt--;
 800ac12:	69fb      	ldr	r3, [r7, #28]
 800ac14:	3b01      	subs	r3, #1
 800ac16:	61fb      	str	r3, [r7, #28]
  while (tapCnt > 0U)
 800ac18:	69fb      	ldr	r3, [r7, #28]
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d1f1      	bne.n	800ac02 <arm_fir_f32+0xb6>
  }

}
 800ac1e:	bf00      	nop
 800ac20:	bf00      	nop
 800ac22:	373c      	adds	r7, #60	; 0x3c
 800ac24:	46bd      	mov	sp, r7
 800ac26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac2a:	4770      	bx	lr

0800ac2c <arm_fir_init_f32>:
        arm_fir_instance_f32 * S,
        uint16_t numTaps,
  const float32_t * pCoeffs,
        float32_t * pState,
        uint32_t blockSize)
{
 800ac2c:	b580      	push	{r7, lr}
 800ac2e:	b084      	sub	sp, #16
 800ac30:	af00      	add	r7, sp, #0
 800ac32:	60f8      	str	r0, [r7, #12]
 800ac34:	607a      	str	r2, [r7, #4]
 800ac36:	603b      	str	r3, [r7, #0]
 800ac38:	460b      	mov	r3, r1
 800ac3a:	817b      	strh	r3, [r7, #10]
  /* Assign filter taps */
  S->numTaps = numTaps;
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	897a      	ldrh	r2, [r7, #10]
 800ac40:	801a      	strh	r2, [r3, #0]

  /* Assign coefficient pointer */
  S->pCoeffs = pCoeffs;
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	687a      	ldr	r2, [r7, #4]
 800ac46:	609a      	str	r2, [r3, #8]

  /* Clear state buffer. The size is always (blockSize + numTaps - 1) */
#if defined(ARM_MATH_MVEF) && !defined(ARM_MATH_AUTOVECTORIZE)
  memset(pState, 0, (numTaps + (blockSize - 1U) + blockSize) * sizeof(float32_t));
#else
  memset(pState, 0, (numTaps + (blockSize - 1U)) * sizeof(float32_t));
 800ac48:	897a      	ldrh	r2, [r7, #10]
 800ac4a:	69bb      	ldr	r3, [r7, #24]
 800ac4c:	4413      	add	r3, r2
 800ac4e:	3b01      	subs	r3, #1
 800ac50:	009b      	lsls	r3, r3, #2
 800ac52:	461a      	mov	r2, r3
 800ac54:	2100      	movs	r1, #0
 800ac56:	6838      	ldr	r0, [r7, #0]
 800ac58:	f001 ffb0 	bl	800cbbc <memset>
#endif
  /* Assign state pointer */
  S->pState = pState;
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	683a      	ldr	r2, [r7, #0]
 800ac60:	605a      	str	r2, [r3, #4]
}
 800ac62:	bf00      	nop
 800ac64:	3710      	adds	r7, #16
 800ac66:	46bd      	mov	sp, r7
 800ac68:	bd80      	pop	{r7, pc}

0800ac6a <arm_mat_init_q15>:
void arm_mat_init_q15(
  arm_matrix_instance_q15 * S,
  uint16_t nRows,
  uint16_t nColumns,
  q15_t * pData)
{
 800ac6a:	b480      	push	{r7}
 800ac6c:	b085      	sub	sp, #20
 800ac6e:	af00      	add	r7, sp, #0
 800ac70:	60f8      	str	r0, [r7, #12]
 800ac72:	607b      	str	r3, [r7, #4]
 800ac74:	460b      	mov	r3, r1
 800ac76:	817b      	strh	r3, [r7, #10]
 800ac78:	4613      	mov	r3, r2
 800ac7a:	813b      	strh	r3, [r7, #8]
  /* Assign Number of Rows */
  S->numRows = nRows;
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	897a      	ldrh	r2, [r7, #10]
 800ac80:	801a      	strh	r2, [r3, #0]

  /* Assign Number of Columns */
  S->numCols = nColumns;
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	893a      	ldrh	r2, [r7, #8]
 800ac86:	805a      	strh	r2, [r3, #2]

  /* Assign Data pointer */
  S->pData = pData;
 800ac88:	68fb      	ldr	r3, [r7, #12]
 800ac8a:	687a      	ldr	r2, [r7, #4]
 800ac8c:	605a      	str	r2, [r3, #4]
}
 800ac8e:	bf00      	nop
 800ac90:	3714      	adds	r7, #20
 800ac92:	46bd      	mov	sp, r7
 800ac94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac98:	4770      	bx	lr

0800ac9a <arm_mat_trans_q15>:
}
#else
arm_status arm_mat_trans_q15(
  const arm_matrix_instance_q15 * pSrc,
        arm_matrix_instance_q15 * pDst)
{
 800ac9a:	b480      	push	{r7}
 800ac9c:	b08b      	sub	sp, #44	; 0x2c
 800ac9e:	af00      	add	r7, sp, #0
 800aca0:	6078      	str	r0, [r7, #4]
 800aca2:	6039      	str	r1, [r7, #0]
        q15_t *pIn = pSrc->pData;                      /* input data matrix pointer */
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	685b      	ldr	r3, [r3, #4]
 800aca8:	627b      	str	r3, [r7, #36]	; 0x24
        q15_t *pOut = pDst->pData;                     /* output data matrix pointer */
 800acaa:	683b      	ldr	r3, [r7, #0]
 800acac:	685b      	ldr	r3, [r3, #4]
 800acae:	623b      	str	r3, [r7, #32]
        uint16_t nRows = pSrc->numRows;                /* number of rows */
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	881b      	ldrh	r3, [r3, #0]
 800acb4:	827b      	strh	r3, [r7, #18]
        uint16_t nCols = pSrc->numCols;                /* number of columns */
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	885b      	ldrh	r3, [r3, #2]
 800acba:	823b      	strh	r3, [r7, #16]
        uint32_t col, row = nRows, i = 0U;             /* Loop counters */
 800acbc:	8a7b      	ldrh	r3, [r7, #18]
 800acbe:	61bb      	str	r3, [r7, #24]
 800acc0:	2300      	movs	r3, #0
 800acc2:	617b      	str	r3, [r7, #20]
    /* Matrix transpose by exchanging the rows with columns */
    /* row loop */
    do
    {
      /* Pointer pOut is set to starting address of column being processed */
      pOut = pDst->pData + i;
 800acc4:	683b      	ldr	r3, [r7, #0]
 800acc6:	685a      	ldr	r2, [r3, #4]
 800acc8:	697b      	ldr	r3, [r7, #20]
 800acca:	005b      	lsls	r3, r3, #1
 800accc:	4413      	add	r3, r2
 800acce:	623b      	str	r3, [r7, #32]
      col = nCols % 0x4U;

#else

      /* Initialize col with number of samples */
      col = nCols;
 800acd0:	8a3b      	ldrh	r3, [r7, #16]
 800acd2:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

      while (col > 0U)
 800acd4:	e00e      	b.n	800acf4 <arm_mat_trans_q15+0x5a>
      {
        /* Read and store input element in destination */
        *pOut = *pIn++;
 800acd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acd8:	1c9a      	adds	r2, r3, #2
 800acda:	627a      	str	r2, [r7, #36]	; 0x24
 800acdc:	f9b3 2000 	ldrsh.w	r2, [r3]
 800ace0:	6a3b      	ldr	r3, [r7, #32]
 800ace2:	801a      	strh	r2, [r3, #0]

        /* Update pointer pOut to point to next row of transposed matrix */
        pOut += nRows;
 800ace4:	8a7b      	ldrh	r3, [r7, #18]
 800ace6:	005b      	lsls	r3, r3, #1
 800ace8:	6a3a      	ldr	r2, [r7, #32]
 800acea:	4413      	add	r3, r2
 800acec:	623b      	str	r3, [r7, #32]

        /* Decrement column loop counter */
        col--;
 800acee:	69fb      	ldr	r3, [r7, #28]
 800acf0:	3b01      	subs	r3, #1
 800acf2:	61fb      	str	r3, [r7, #28]
      while (col > 0U)
 800acf4:	69fb      	ldr	r3, [r7, #28]
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d1ed      	bne.n	800acd6 <arm_mat_trans_q15+0x3c>
      }

      i++;
 800acfa:	697b      	ldr	r3, [r7, #20]
 800acfc:	3301      	adds	r3, #1
 800acfe:	617b      	str	r3, [r7, #20]

      /* Decrement row loop counter */
      row--;
 800ad00:	69bb      	ldr	r3, [r7, #24]
 800ad02:	3b01      	subs	r3, #1
 800ad04:	61bb      	str	r3, [r7, #24]

    } while (row > 0U);          /* row loop end */
 800ad06:	69bb      	ldr	r3, [r7, #24]
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d1db      	bne.n	800acc4 <arm_mat_trans_q15+0x2a>

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800ad0c:	2300      	movs	r3, #0
 800ad0e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return to application */
  return (status);
 800ad10:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ad14:	4618      	mov	r0, r3
 800ad16:	372c      	adds	r7, #44	; 0x2c
 800ad18:	46bd      	mov	sp, r7
 800ad1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad1e:	4770      	bx	lr

0800ad20 <arm_float_to_q15>:
#else
void arm_float_to_q15(
  const float32_t * pSrc,
        q15_t * pDst,
        uint32_t blockSize)
{
 800ad20:	b480      	push	{r7}
 800ad22:	b089      	sub	sp, #36	; 0x24
 800ad24:	af00      	add	r7, sp, #0
 800ad26:	60f8      	str	r0, [r7, #12]
 800ad28:	60b9      	str	r1, [r7, #8]
 800ad2a:	607a      	str	r2, [r7, #4]
        uint32_t blkCnt;                               /* Loop counter */
  const float32_t *pIn = pSrc;                         /* Source pointer */
 800ad2c:	68fb      	ldr	r3, [r7, #12]
 800ad2e:	61bb      	str	r3, [r7, #24]
  blkCnt = blockSize % 0x4U;

#else

  /* Initialize blkCnt with number of samples */
  blkCnt = blockSize;
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  while (blkCnt > 0U)
 800ad34:	e01a      	b.n	800ad6c <arm_float_to_q15+0x4c>

#else

    /* C = A * 32768 */
    /* Convert from float to q15 and then store the results in the destination buffer */
    *pDst++ = (q15_t) __SSAT((q31_t) (*pIn++ * 32768.0f), 16);
 800ad36:	69bb      	ldr	r3, [r7, #24]
 800ad38:	1d1a      	adds	r2, r3, #4
 800ad3a:	61ba      	str	r2, [r7, #24]
 800ad3c:	edd3 7a00 	vldr	s15, [r3]
 800ad40:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 800ad80 <arm_float_to_q15+0x60>
 800ad44:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ad48:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ad4c:	ee17 3a90 	vmov	r3, s15
 800ad50:	617b      	str	r3, [r7, #20]
 800ad52:	697b      	ldr	r3, [r7, #20]
 800ad54:	f303 030f 	ssat	r3, #16, r3
 800ad58:	613b      	str	r3, [r7, #16]
 800ad5a:	6939      	ldr	r1, [r7, #16]
 800ad5c:	68bb      	ldr	r3, [r7, #8]
 800ad5e:	1c9a      	adds	r2, r3, #2
 800ad60:	60ba      	str	r2, [r7, #8]
 800ad62:	b20a      	sxth	r2, r1
 800ad64:	801a      	strh	r2, [r3, #0]

#endif /* #ifdef ARM_MATH_ROUNDING */

    /* Decrement loop counter */
    blkCnt--;
 800ad66:	69fb      	ldr	r3, [r7, #28]
 800ad68:	3b01      	subs	r3, #1
 800ad6a:	61fb      	str	r3, [r7, #28]
  while (blkCnt > 0U)
 800ad6c:	69fb      	ldr	r3, [r7, #28]
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	d1e1      	bne.n	800ad36 <arm_float_to_q15+0x16>
  }

}
 800ad72:	bf00      	nop
 800ad74:	bf00      	nop
 800ad76:	3724      	adds	r7, #36	; 0x24
 800ad78:	46bd      	mov	sp, r7
 800ad7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad7e:	4770      	bx	lr
 800ad80:	47000000 	.word	0x47000000

0800ad84 <arm_q15_to_float>:
#else
void arm_q15_to_float(
  const q15_t * pSrc,
        float32_t * pDst,
        uint32_t blockSize)
{
 800ad84:	b480      	push	{r7}
 800ad86:	b087      	sub	sp, #28
 800ad88:	af00      	add	r7, sp, #0
 800ad8a:	60f8      	str	r0, [r7, #12]
 800ad8c:	60b9      	str	r1, [r7, #8]
 800ad8e:	607a      	str	r2, [r7, #4]
        uint32_t blkCnt;                               /* Loop counter */
  const q15_t *pIn = pSrc;                             /* Source pointer */
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	613b      	str	r3, [r7, #16]
  blkCnt = blockSize % 0x4U;

#else

  /* Initialize blkCnt with number of samples */
  blkCnt = blockSize;
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	617b      	str	r3, [r7, #20]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  while (blkCnt > 0U)
 800ad98:	e014      	b.n	800adc4 <arm_q15_to_float+0x40>
  {
    /* C = (float32_t) A / 32768 */

    /* Convert from q15 to float and store result in destination buffer */
    *pDst++ = ((float32_t) *pIn++ / 32768.0f);
 800ad9a:	693b      	ldr	r3, [r7, #16]
 800ad9c:	1c9a      	adds	r2, r3, #2
 800ad9e:	613a      	str	r2, [r7, #16]
 800ada0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ada4:	ee07 3a90 	vmov	s15, r3
 800ada8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800adac:	68bb      	ldr	r3, [r7, #8]
 800adae:	1d1a      	adds	r2, r3, #4
 800adb0:	60ba      	str	r2, [r7, #8]
 800adb2:	eddf 6a09 	vldr	s13, [pc, #36]	; 800add8 <arm_q15_to_float+0x54>
 800adb6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800adba:	edc3 7a00 	vstr	s15, [r3]

    /* Decrement loop counter */
    blkCnt--;
 800adbe:	697b      	ldr	r3, [r7, #20]
 800adc0:	3b01      	subs	r3, #1
 800adc2:	617b      	str	r3, [r7, #20]
  while (blkCnt > 0U)
 800adc4:	697b      	ldr	r3, [r7, #20]
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d1e7      	bne.n	800ad9a <arm_q15_to_float+0x16>
  }

}
 800adca:	bf00      	nop
 800adcc:	bf00      	nop
 800adce:	371c      	adds	r7, #28
 800add0:	46bd      	mov	sp, r7
 800add2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800add6:	4770      	bx	lr
 800add8:	47000000 	.word	0x47000000

0800addc <D16_GENERIC>:
 800addc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ade0:	b089      	sub	sp, #36	; 0x24
 800ade2:	6993      	ldr	r3, [r2, #24]
 800ade4:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 800ade6:	9103      	str	r1, [sp, #12]
 800ade8:	9307      	str	r3, [sp, #28]
 800adea:	69d3      	ldr	r3, [r2, #28]
 800adec:	e9d2 c102 	ldrd	ip, r1, [r2, #8]
 800adf0:	e9d2 4a04 	ldrd	r4, sl, [r2, #16]
 800adf4:	9106      	str	r1, [sp, #24]
 800adf6:	e9d2 810c 	ldrd	r8, r1, [r2, #48]	; 0x30
 800adfa:	2d00      	cmp	r5, #0
 800adfc:	d063      	beq.n	800aec6 <D16_GENERIC+0xea>
 800adfe:	f001 0520 	and.w	r5, r1, #32
 800ae02:	f001 0110 	and.w	r1, r1, #16
 800ae06:	f8df e0e0 	ldr.w	lr, [pc, #224]	; 800aee8 <D16_GENERIC+0x10c>
 800ae0a:	46c1      	mov	r9, r8
 800ae0c:	9104      	str	r1, [sp, #16]
 800ae0e:	2100      	movs	r1, #0
 800ae10:	9505      	str	r5, [sp, #20]
 800ae12:	e04d      	b.n	800aeb0 <D16_GENERIC+0xd4>
 800ae14:	5d87      	ldrb	r7, [r0, r6]
 800ae16:	7805      	ldrb	r5, [r0, #0]
 800ae18:	eb00 0046 	add.w	r0, r0, r6, lsl #1
 800ae1c:	eb05 2707 	add.w	r7, r5, r7, lsl #8
 800ae20:	b2fe      	uxtb	r6, r7
 800ae22:	f3c7 2707 	ubfx	r7, r7, #8, #8
 800ae26:	f85e 5026 	ldr.w	r5, [lr, r6, lsl #2]
 800ae2a:	f85e 6027 	ldr.w	r6, [lr, r7, lsl #2]
 800ae2e:	441d      	add	r5, r3
 800ae30:	eb06 2395 	add.w	r3, r6, r5, lsr #10
 800ae34:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800ae38:	f3c3 0609 	ubfx	r6, r3, #0, #10
 800ae3c:	0a9b      	lsrs	r3, r3, #10
 800ae3e:	ea46 4605 	orr.w	r6, r6, r5, lsl #16
 800ae42:	4d27      	ldr	r5, [pc, #156]	; (800aee0 <D16_GENERIC+0x104>)
 800ae44:	fb26 c505 	smlad	r5, r6, r5, ip
 800ae48:	4f26      	ldr	r7, [pc, #152]	; (800aee4 <D16_GENERIC+0x108>)
 800ae4a:	fb26 fc07 	smuad	ip, r6, r7
 800ae4e:	9e04      	ldr	r6, [sp, #16]
 800ae50:	f101 0801 	add.w	r8, r1, #1
 800ae54:	f5a5 6500 	sub.w	r5, r5, #2048	; 0x800
 800ae58:	b1ae      	cbz	r6, 800ae86 <D16_GENERIC+0xaa>
 800ae5a:	442c      	add	r4, r5
 800ae5c:	f8d2 b020 	ldr.w	fp, [r2, #32]
 800ae60:	eba4 040a 	sub.w	r4, r4, sl
 800ae64:	46aa      	mov	sl, r5
 800ae66:	17e7      	asrs	r7, r4, #31
 800ae68:	fba4 450b 	umull	r4, r5, r4, fp
 800ae6c:	e9cd 4500 	strd	r4, r5, [sp]
 800ae70:	fb0b 5407 	mla	r4, fp, r7, r5
 800ae74:	9401      	str	r4, [sp, #4]
 800ae76:	e9dd 4500 	ldrd	r4, r5, [sp]
 800ae7a:	f114 4400 	adds.w	r4, r4, #2147483648	; 0x80000000
 800ae7e:	f145 0500 	adc.w	r5, r5, #0
 800ae82:	006c      	lsls	r4, r5, #1
 800ae84:	4625      	mov	r5, r4
 800ae86:	f8b2 b028 	ldrh.w	fp, [r2, #40]	; 0x28
 800ae8a:	042d      	lsls	r5, r5, #16
 800ae8c:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800ae90:	2700      	movs	r7, #0
 800ae92:	fb01 fb0b 	mul.w	fp, r1, fp
 800ae96:	fa1f f188 	uxth.w	r1, r8
 800ae9a:	fbc9 6705 	smlal	r6, r7, r9, r5
 800ae9e:	9e03      	ldr	r6, [sp, #12]
 800aea0:	10bd      	asrs	r5, r7, #2
 800aea2:	f305 050f 	ssat	r5, #16, r5
 800aea6:	f826 501b 	strh.w	r5, [r6, fp, lsl #1]
 800aeaa:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 800aeac:	428d      	cmp	r5, r1
 800aeae:	d90a      	bls.n	800aec6 <D16_GENERIC+0xea>
 800aeb0:	8d55      	ldrh	r5, [r2, #42]	; 0x2a
 800aeb2:	2d01      	cmp	r5, #1
 800aeb4:	b2ee      	uxtb	r6, r5
 800aeb6:	d1ad      	bne.n	800ae14 <D16_GENERIC+0x38>
 800aeb8:	9d05      	ldr	r5, [sp, #20]
 800aeba:	f850 7b02 	ldr.w	r7, [r0], #2
 800aebe:	2d00      	cmp	r5, #0
 800aec0:	d0ae      	beq.n	800ae20 <D16_GENERIC+0x44>
 800aec2:	ba7f      	rev16	r7, r7
 800aec4:	e7ac      	b.n	800ae20 <D16_GENERIC+0x44>
 800aec6:	2000      	movs	r0, #0
 800aec8:	9906      	ldr	r1, [sp, #24]
 800aeca:	61d3      	str	r3, [r2, #28]
 800aecc:	9b07      	ldr	r3, [sp, #28]
 800aece:	f8c2 c008 	str.w	ip, [r2, #8]
 800aed2:	60d1      	str	r1, [r2, #12]
 800aed4:	6193      	str	r3, [r2, #24]
 800aed6:	e9c2 4a04 	strd	r4, sl, [r2, #16]
 800aeda:	b009      	add	sp, #36	; 0x24
 800aedc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aee0:	00030001 	.word	0x00030001
 800aee4:	00010003 	.word	0x00010003
 800aee8:	24000000 	.word	0x24000000

0800aeec <D24_GENERIC>:
 800aeec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aef0:	e9d2 4304 	ldrd	r4, r3, [r2, #16]
 800aef4:	b089      	sub	sp, #36	; 0x24
 800aef6:	8cd6      	ldrh	r6, [r2, #38]	; 0x26
 800aef8:	9303      	str	r3, [sp, #12]
 800aefa:	6993      	ldr	r3, [r2, #24]
 800aefc:	9104      	str	r1, [sp, #16]
 800aefe:	9307      	str	r3, [sp, #28]
 800af00:	69d1      	ldr	r1, [r2, #28]
 800af02:	e9d2 3802 	ldrd	r3, r8, [r2, #8]
 800af06:	e9d2 a50c 	ldrd	sl, r5, [r2, #48]	; 0x30
 800af0a:	2e00      	cmp	r6, #0
 800af0c:	f000 8088 	beq.w	800b020 <D24_GENERIC+0x134>
 800af10:	f005 0620 	and.w	r6, r5, #32
 800af14:	f005 0510 	and.w	r5, r5, #16
 800af18:	f04f 0c00 	mov.w	ip, #0
 800af1c:	f8df e140 	ldr.w	lr, [pc, #320]	; 800b060 <D24_GENERIC+0x174>
 800af20:	9606      	str	r6, [sp, #24]
 800af22:	9505      	str	r5, [sp, #20]
 800af24:	e064      	b.n	800aff0 <D24_GENERIC+0x104>
 800af26:	f810 5016 	ldrb.w	r5, [r0, r6, lsl #1]
 800af2a:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 800af2e:	f810 b007 	ldrb.w	fp, [r0, r7]
 800af32:	042d      	lsls	r5, r5, #16
 800af34:	19f0      	adds	r0, r6, r7
 800af36:	eb05 250b 	add.w	r5, r5, fp, lsl #8
 800af3a:	44a9      	add	r9, r5
 800af3c:	fa5f f689 	uxtb.w	r6, r9
 800af40:	f3c9 2707 	ubfx	r7, r9, #8, #8
 800af44:	ea4f 4919 	mov.w	r9, r9, lsr #16
 800af48:	f85e 6026 	ldr.w	r6, [lr, r6, lsl #2]
 800af4c:	f85e 7027 	ldr.w	r7, [lr, r7, lsl #2]
 800af50:	eb06 2691 	add.w	r6, r6, r1, lsr #10
 800af54:	f85e 1029 	ldr.w	r1, [lr, r9, lsl #2]
 800af58:	eb07 2796 	add.w	r7, r7, r6, lsr #10
 800af5c:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800af60:	f3c7 0509 	ubfx	r5, r7, #0, #10
 800af64:	eb01 2197 	add.w	r1, r1, r7, lsr #10
 800af68:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
 800af6c:	4d3a      	ldr	r5, [pc, #232]	; (800b058 <D24_GENERIC+0x16c>)
 800af6e:	fb26 8705 	smlad	r7, r6, r5, r8
 800af72:	4d3a      	ldr	r5, [pc, #232]	; (800b05c <D24_GENERIC+0x170>)
 800af74:	fb26 3805 	smlad	r8, r6, r5, r3
 800af78:	f3c1 0309 	ubfx	r3, r1, #0, #10
 800af7c:	eb03 0b43 	add.w	fp, r3, r3, lsl #1
 800af80:	2301      	movs	r3, #1
 800af82:	eb08 084b 	add.w	r8, r8, fp, lsl #1
 800af86:	fb26 f603 	smuad	r6, r6, r3
 800af8a:	eb0c 0903 	add.w	r9, ip, r3
 800af8e:	eb0b 0306 	add.w	r3, fp, r6
 800af92:	9e05      	ldr	r6, [sp, #20]
 800af94:	f5a7 55d8 	sub.w	r5, r7, #6912	; 0x1b00
 800af98:	b1ae      	cbz	r6, 800afc6 <D24_GENERIC+0xda>
 800af9a:	442c      	add	r4, r5
 800af9c:	9e03      	ldr	r6, [sp, #12]
 800af9e:	f8d2 b020 	ldr.w	fp, [r2, #32]
 800afa2:	1ba4      	subs	r4, r4, r6
 800afa4:	9503      	str	r5, [sp, #12]
 800afa6:	17e7      	asrs	r7, r4, #31
 800afa8:	fba4 450b 	umull	r4, r5, r4, fp
 800afac:	e9cd 4500 	strd	r4, r5, [sp]
 800afb0:	fb0b 5407 	mla	r4, fp, r7, r5
 800afb4:	9401      	str	r4, [sp, #4]
 800afb6:	e9dd 4500 	ldrd	r4, r5, [sp]
 800afba:	f114 4400 	adds.w	r4, r4, #2147483648	; 0x80000000
 800afbe:	f145 0500 	adc.w	r5, r5, #0
 800afc2:	006c      	lsls	r4, r5, #1
 800afc4:	4625      	mov	r5, r4
 800afc6:	f8b2 b028 	ldrh.w	fp, [r2, #40]	; 0x28
 800afca:	03ad      	lsls	r5, r5, #14
 800afcc:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800afd0:	2700      	movs	r7, #0
 800afd2:	fb0c fb0b 	mul.w	fp, ip, fp
 800afd6:	fa1f fc89 	uxth.w	ip, r9
 800afda:	fbca 6705 	smlal	r6, r7, sl, r5
 800afde:	9e04      	ldr	r6, [sp, #16]
 800afe0:	10bd      	asrs	r5, r7, #2
 800afe2:	f305 050f 	ssat	r5, #16, r5
 800afe6:	f826 501b 	strh.w	r5, [r6, fp, lsl #1]
 800afea:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 800afec:	4565      	cmp	r5, ip
 800afee:	d917      	bls.n	800b020 <D24_GENERIC+0x134>
 800aff0:	8d55      	ldrh	r5, [r2, #42]	; 0x2a
 800aff2:	f890 9000 	ldrb.w	r9, [r0]
 800aff6:	b2ef      	uxtb	r7, r5
 800aff8:	2d01      	cmp	r5, #1
 800affa:	b23e      	sxth	r6, r7
 800affc:	d193      	bne.n	800af26 <D24_GENERIC+0x3a>
 800affe:	9d06      	ldr	r5, [sp, #24]
 800b000:	b1dd      	cbz	r5, 800b03a <D24_GENERIC+0x14e>
 800b002:	78c7      	ldrb	r7, [r0, #3]
 800b004:	ea4f 2609 	mov.w	r6, r9, lsl #8
 800b008:	f01c 0f01 	tst.w	ip, #1
 800b00c:	ea4f 2507 	mov.w	r5, r7, lsl #8
 800b010:	eb06 4607 	add.w	r6, r6, r7, lsl #16
 800b014:	d11a      	bne.n	800b04c <D24_GENERIC+0x160>
 800b016:	f890 9001 	ldrb.w	r9, [r0, #1]
 800b01a:	3002      	adds	r0, #2
 800b01c:	44b1      	add	r9, r6
 800b01e:	e78d      	b.n	800af3c <D24_GENERIC+0x50>
 800b020:	6093      	str	r3, [r2, #8]
 800b022:	2000      	movs	r0, #0
 800b024:	9b03      	ldr	r3, [sp, #12]
 800b026:	f8c2 800c 	str.w	r8, [r2, #12]
 800b02a:	6153      	str	r3, [r2, #20]
 800b02c:	9b07      	ldr	r3, [sp, #28]
 800b02e:	61d1      	str	r1, [r2, #28]
 800b030:	6114      	str	r4, [r2, #16]
 800b032:	6193      	str	r3, [r2, #24]
 800b034:	b009      	add	sp, #36	; 0x24
 800b036:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b03a:	7845      	ldrb	r5, [r0, #1]
 800b03c:	3003      	adds	r0, #3
 800b03e:	f810 6c01 	ldrb.w	r6, [r0, #-1]
 800b042:	022d      	lsls	r5, r5, #8
 800b044:	eb05 4506 	add.w	r5, r5, r6, lsl #16
 800b048:	44a9      	add	r9, r5
 800b04a:	e777      	b.n	800af3c <D24_GENERIC+0x50>
 800b04c:	7886      	ldrb	r6, [r0, #2]
 800b04e:	3004      	adds	r0, #4
 800b050:	eb05 4506 	add.w	r5, r5, r6, lsl #16
 800b054:	44a9      	add	r9, r5
 800b056:	e771      	b.n	800af3c <D24_GENERIC+0x50>
 800b058:	00030001 	.word	0x00030001
 800b05c:	00060007 	.word	0x00060007
 800b060:	24000000 	.word	0x24000000

0800b064 <D32_GENERIC>:
 800b064:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b068:	e9d2 4304 	ldrd	r4, r3, [r2, #16]
 800b06c:	b089      	sub	sp, #36	; 0x24
 800b06e:	6b15      	ldr	r5, [r2, #48]	; 0x30
 800b070:	8cd6      	ldrh	r6, [r2, #38]	; 0x26
 800b072:	9302      	str	r3, [sp, #8]
 800b074:	6993      	ldr	r3, [r2, #24]
 800b076:	9104      	str	r1, [sp, #16]
 800b078:	9307      	str	r3, [sp, #28]
 800b07a:	9503      	str	r5, [sp, #12]
 800b07c:	69d1      	ldr	r1, [r2, #28]
 800b07e:	6b55      	ldr	r5, [r2, #52]	; 0x34
 800b080:	e9d2 3802 	ldrd	r3, r8, [r2, #8]
 800b084:	2e00      	cmp	r6, #0
 800b086:	f000 8097 	beq.w	800b1b8 <D32_GENERIC+0x154>
 800b08a:	f005 0620 	and.w	r6, r5, #32
 800b08e:	f005 0510 	and.w	r5, r5, #16
 800b092:	f04f 0e00 	mov.w	lr, #0
 800b096:	f8df c150 	ldr.w	ip, [pc, #336]	; 800b1e8 <D32_GENERIC+0x184>
 800b09a:	9606      	str	r6, [sp, #24]
 800b09c:	9505      	str	r5, [sp, #20]
 800b09e:	e079      	b.n	800b194 <D32_GENERIC+0x130>
 800b0a0:	783d      	ldrb	r5, [r7, #0]
 800b0a2:	f810 b009 	ldrb.w	fp, [r0, r9]
 800b0a6:	042d      	lsls	r5, r5, #16
 800b0a8:	f810 a006 	ldrb.w	sl, [r0, r6]
 800b0ac:	f890 9000 	ldrb.w	r9, [r0]
 800b0b0:	eb07 0046 	add.w	r0, r7, r6, lsl #1
 800b0b4:	eb05 650b 	add.w	r5, r5, fp, lsl #24
 800b0b8:	eb05 250a 	add.w	r5, r5, sl, lsl #8
 800b0bc:	44a9      	add	r9, r5
 800b0be:	fa5f f789 	uxtb.w	r7, r9
 800b0c2:	f3c9 2507 	ubfx	r5, r9, #8, #8
 800b0c6:	f3c9 4607 	ubfx	r6, r9, #16, #8
 800b0ca:	ea4f 6919 	mov.w	r9, r9, lsr #24
 800b0ce:	f85c 7027 	ldr.w	r7, [ip, r7, lsl #2]
 800b0d2:	f85c 5025 	ldr.w	r5, [ip, r5, lsl #2]
 800b0d6:	eb07 2191 	add.w	r1, r7, r1, lsr #10
 800b0da:	f85c 6026 	ldr.w	r6, [ip, r6, lsl #2]
 800b0de:	f85c 7029 	ldr.w	r7, [ip, r9, lsl #2]
 800b0e2:	eb05 2591 	add.w	r5, r5, r1, lsr #10
 800b0e6:	f3c1 0909 	ubfx	r9, r1, #0, #10
 800b0ea:	eb06 2695 	add.w	r6, r6, r5, lsr #10
 800b0ee:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800b0f2:	eb07 2196 	add.w	r1, r7, r6, lsr #10
 800b0f6:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800b0fa:	ea45 4909 	orr.w	r9, r5, r9, lsl #16
 800b0fe:	f3c1 0509 	ubfx	r5, r1, #0, #10
 800b102:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
 800b106:	4d34      	ldr	r5, [pc, #208]	; (800b1d8 <D32_GENERIC+0x174>)
 800b108:	fb29 8805 	smlad	r8, r9, r5, r8
 800b10c:	f44f 3580 	mov.w	r5, #65536	; 0x10000
 800b110:	fb26 8705 	smlad	r7, r6, r5, r8
 800b114:	4d31      	ldr	r5, [pc, #196]	; (800b1dc <D32_GENERIC+0x178>)
 800b116:	fb29 3305 	smlad	r3, r9, r5, r3
 800b11a:	4d31      	ldr	r5, [pc, #196]	; (800b1e0 <D32_GENERIC+0x17c>)
 800b11c:	fb26 3805 	smlad	r8, r6, r5, r3
 800b120:	2301      	movs	r3, #1
 800b122:	fb29 f903 	smuad	r9, r9, r3
 800b126:	4b2f      	ldr	r3, [pc, #188]	; (800b1e4 <D32_GENERIC+0x180>)
 800b128:	fb26 9303 	smlad	r3, r6, r3, r9
 800b12c:	9e05      	ldr	r6, [sp, #20]
 800b12e:	f10e 0901 	add.w	r9, lr, #1
 800b132:	f5a7 4580 	sub.w	r5, r7, #16384	; 0x4000
 800b136:	b1ae      	cbz	r6, 800b164 <D32_GENERIC+0x100>
 800b138:	442c      	add	r4, r5
 800b13a:	9e02      	ldr	r6, [sp, #8]
 800b13c:	f8d2 a020 	ldr.w	sl, [r2, #32]
 800b140:	1ba4      	subs	r4, r4, r6
 800b142:	9502      	str	r5, [sp, #8]
 800b144:	17e7      	asrs	r7, r4, #31
 800b146:	fba4 450a 	umull	r4, r5, r4, sl
 800b14a:	e9cd 4500 	strd	r4, r5, [sp]
 800b14e:	fb0a 5407 	mla	r4, sl, r7, r5
 800b152:	9401      	str	r4, [sp, #4]
 800b154:	e9dd 4500 	ldrd	r4, r5, [sp]
 800b158:	f114 4400 	adds.w	r4, r4, #2147483648	; 0x80000000
 800b15c:	f145 0500 	adc.w	r5, r5, #0
 800b160:	006c      	lsls	r4, r5, #1
 800b162:	4625      	mov	r5, r4
 800b164:	f8b2 a028 	ldrh.w	sl, [r2, #40]	; 0x28
 800b168:	036d      	lsls	r5, r5, #13
 800b16a:	9f03      	ldr	r7, [sp, #12]
 800b16c:	fb0e fb0a 	mul.w	fp, lr, sl
 800b170:	fa1f fe89 	uxth.w	lr, r9
 800b174:	f04f 0a00 	mov.w	sl, #0
 800b178:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
 800b17c:	9e04      	ldr	r6, [sp, #16]
 800b17e:	fbc7 9a05 	smlal	r9, sl, r7, r5
 800b182:	4657      	mov	r7, sl
 800b184:	10bd      	asrs	r5, r7, #2
 800b186:	f305 050f 	ssat	r5, #16, r5
 800b18a:	f826 501b 	strh.w	r5, [r6, fp, lsl #1]
 800b18e:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 800b190:	4575      	cmp	r5, lr
 800b192:	d911      	bls.n	800b1b8 <D32_GENERIC+0x154>
 800b194:	8d55      	ldrh	r5, [r2, #42]	; 0x2a
 800b196:	b2ee      	uxtb	r6, r5
 800b198:	2d01      	cmp	r5, #1
 800b19a:	eb00 0746 	add.w	r7, r0, r6, lsl #1
 800b19e:	eb06 0946 	add.w	r9, r6, r6, lsl #1
 800b1a2:	f47f af7d 	bne.w	800b0a0 <D32_GENERIC+0x3c>
 800b1a6:	1d05      	adds	r5, r0, #4
 800b1a8:	f8d0 9000 	ldr.w	r9, [r0]
 800b1ac:	9806      	ldr	r0, [sp, #24]
 800b1ae:	b180      	cbz	r0, 800b1d2 <D32_GENERIC+0x16e>
 800b1b0:	fa99 f999 	rev16.w	r9, r9
 800b1b4:	4628      	mov	r0, r5
 800b1b6:	e782      	b.n	800b0be <D32_GENERIC+0x5a>
 800b1b8:	6093      	str	r3, [r2, #8]
 800b1ba:	2000      	movs	r0, #0
 800b1bc:	9b02      	ldr	r3, [sp, #8]
 800b1be:	f8c2 800c 	str.w	r8, [r2, #12]
 800b1c2:	6153      	str	r3, [r2, #20]
 800b1c4:	9b07      	ldr	r3, [sp, #28]
 800b1c6:	61d1      	str	r1, [r2, #28]
 800b1c8:	6114      	str	r4, [r2, #16]
 800b1ca:	6193      	str	r3, [r2, #24]
 800b1cc:	b009      	add	sp, #36	; 0x24
 800b1ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1d2:	4628      	mov	r0, r5
 800b1d4:	e773      	b.n	800b0be <D32_GENERIC+0x5a>
 800b1d6:	bf00      	nop
 800b1d8:	00060003 	.word	0x00060003
 800b1dc:	000a000c 	.word	0x000a000c
 800b1e0:	000c000a 	.word	0x000c000a
 800b1e4:	00030006 	.word	0x00030006
 800b1e8:	24000000 	.word	0x24000000

0800b1ec <D48_GENERIC>:
 800b1ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1f0:	6913      	ldr	r3, [r2, #16]
 800b1f2:	b089      	sub	sp, #36	; 0x24
 800b1f4:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 800b1f6:	9301      	str	r3, [sp, #4]
 800b1f8:	6953      	ldr	r3, [r2, #20]
 800b1fa:	9104      	str	r1, [sp, #16]
 800b1fc:	9302      	str	r3, [sp, #8]
 800b1fe:	6993      	ldr	r3, [r2, #24]
 800b200:	f8d2 c01c 	ldr.w	ip, [r2, #28]
 800b204:	9307      	str	r3, [sp, #28]
 800b206:	e9d2 3102 	ldrd	r3, r1, [r2, #8]
 800b20a:	9100      	str	r1, [sp, #0]
 800b20c:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800b20e:	9103      	str	r1, [sp, #12]
 800b210:	6b51      	ldr	r1, [r2, #52]	; 0x34
 800b212:	2c00      	cmp	r4, #0
 800b214:	f000 80be 	beq.w	800b394 <D48_GENERIC+0x1a8>
 800b218:	f001 0420 	and.w	r4, r1, #32
 800b21c:	f001 0110 	and.w	r1, r1, #16
 800b220:	f04f 0e00 	mov.w	lr, #0
 800b224:	9105      	str	r1, [sp, #20]
 800b226:	9406      	str	r4, [sp, #24]
 800b228:	4962      	ldr	r1, [pc, #392]	; (800b3b4 <D48_GENERIC+0x1c8>)
 800b22a:	e0a0      	b.n	800b36e <D48_GENERIC+0x182>
 800b22c:	eb00 0608 	add.w	r6, r0, r8
 800b230:	f810 a008 	ldrb.w	sl, [r0, r8]
 800b234:	f810 9005 	ldrb.w	r9, [r0, r5]
 800b238:	5df4      	ldrb	r4, [r6, r7]
 800b23a:	443e      	add	r6, r7
 800b23c:	f890 b000 	ldrb.w	fp, [r0]
 800b240:	0420      	lsls	r0, r4, #16
 800b242:	eb06 0408 	add.w	r4, r6, r8
 800b246:	f816 6008 	ldrb.w	r6, [r6, r8]
 800b24a:	eb00 6a0a 	add.w	sl, r0, sl, lsl #24
 800b24e:	f814 8007 	ldrb.w	r8, [r4, r7]
 800b252:	4427      	add	r7, r4
 800b254:	eb0a 2a09 	add.w	sl, sl, r9, lsl #8
 800b258:	eb08 2606 	add.w	r6, r8, r6, lsl #8
 800b25c:	eb0a 040b 	add.w	r4, sl, fp
 800b260:	eb07 0045 	add.w	r0, r7, r5, lsl #1
 800b264:	f3c6 2807 	ubfx	r8, r6, #8, #8
 800b268:	b2f7      	uxtb	r7, r6
 800b26a:	b2e6      	uxtb	r6, r4
 800b26c:	f3c4 2507 	ubfx	r5, r4, #8, #8
 800b270:	f3c4 4907 	ubfx	r9, r4, #16, #8
 800b274:	ea4f 6b14 	mov.w	fp, r4, lsr #24
 800b278:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 800b27c:	f851 5025 	ldr.w	r5, [r1, r5, lsl #2]
 800b280:	eb06 269c 	add.w	r6, r6, ip, lsr #10
 800b284:	f851 9029 	ldr.w	r9, [r1, r9, lsl #2]
 800b288:	f851 402b 	ldr.w	r4, [r1, fp, lsl #2]
 800b28c:	eb05 2596 	add.w	r5, r5, r6, lsr #10
 800b290:	f851 7027 	ldr.w	r7, [r1, r7, lsl #2]
 800b294:	f851 c028 	ldr.w	ip, [r1, r8, lsl #2]
 800b298:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800b29c:	eb09 2995 	add.w	r9, r9, r5, lsr #10
 800b2a0:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800b2a4:	eb04 2499 	add.w	r4, r4, r9, lsr #10
 800b2a8:	f3c9 0909 	ubfx	r9, r9, #0, #10
 800b2ac:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
 800b2b0:	9d00      	ldr	r5, [sp, #0]
 800b2b2:	eb07 2794 	add.w	r7, r7, r4, lsr #10
 800b2b6:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800b2ba:	eb0c 2c97 	add.w	ip, ip, r7, lsr #10
 800b2be:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800b2c2:	ea44 4909 	orr.w	r9, r4, r9, lsl #16
 800b2c6:	f3cc 0409 	ubfx	r4, ip, #0, #10
 800b2ca:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 800b2ce:	4c3a      	ldr	r4, [pc, #232]	; (800b3b8 <D48_GENERIC+0x1cc>)
 800b2d0:	fb26 5a04 	smlad	sl, r6, r4, r5
 800b2d4:	4c39      	ldr	r4, [pc, #228]	; (800b3bc <D48_GENERIC+0x1d0>)
 800b2d6:	fb29 aa04 	smlad	sl, r9, r4, sl
 800b2da:	f44f 3480 	mov.w	r4, #65536	; 0x10000
 800b2de:	fb27 aa04 	smlad	sl, r7, r4, sl
 800b2e2:	4c37      	ldr	r4, [pc, #220]	; (800b3c0 <D48_GENERIC+0x1d4>)
 800b2e4:	fb26 3304 	smlad	r3, r6, r4, r3
 800b2e8:	f04f 141b 	mov.w	r4, #1769499	; 0x1b001b
 800b2ec:	fb29 3304 	smlad	r3, r9, r4, r3
 800b2f0:	4c34      	ldr	r4, [pc, #208]	; (800b3c4 <D48_GENERIC+0x1d8>)
 800b2f2:	fb27 3304 	smlad	r3, r7, r4, r3
 800b2f6:	2501      	movs	r5, #1
 800b2f8:	9300      	str	r3, [sp, #0]
 800b2fa:	fb26 f605 	smuad	r6, r6, r5
 800b2fe:	4b32      	ldr	r3, [pc, #200]	; (800b3c8 <D48_GENERIC+0x1dc>)
 800b300:	fb29 6903 	smlad	r9, r9, r3, r6
 800b304:	4b31      	ldr	r3, [pc, #196]	; (800b3cc <D48_GENERIC+0x1e0>)
 800b306:	fb27 9303 	smlad	r3, r7, r3, r9
 800b30a:	9c05      	ldr	r4, [sp, #20]
 800b30c:	eb0e 0805 	add.w	r8, lr, r5
 800b310:	f5aa 4a58 	sub.w	sl, sl, #55296	; 0xd800
 800b314:	b19c      	cbz	r4, 800b33e <D48_GENERIC+0x152>
 800b316:	9c01      	ldr	r4, [sp, #4]
 800b318:	9d02      	ldr	r5, [sp, #8]
 800b31a:	4454      	add	r4, sl
 800b31c:	f8d2 9020 	ldr.w	r9, [r2, #32]
 800b320:	f8cd a008 	str.w	sl, [sp, #8]
 800b324:	1b64      	subs	r4, r4, r5
 800b326:	fba4 ab09 	umull	sl, fp, r4, r9
 800b32a:	17e7      	asrs	r7, r4, #31
 800b32c:	f11a 4400 	adds.w	r4, sl, #2147483648	; 0x80000000
 800b330:	fb09 bb07 	mla	fp, r9, r7, fp
 800b334:	f14b 0500 	adc.w	r5, fp, #0
 800b338:	006c      	lsls	r4, r5, #1
 800b33a:	46a2      	mov	sl, r4
 800b33c:	9401      	str	r4, [sp, #4]
 800b33e:	8d16      	ldrh	r6, [r2, #40]	; 0x28
 800b340:	ea4f 2aca 	mov.w	sl, sl, lsl #11
 800b344:	9d03      	ldr	r5, [sp, #12]
 800b346:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 800b34a:	fb0e f606 	mul.w	r6, lr, r6
 800b34e:	fa1f fe88 	uxth.w	lr, r8
 800b352:	f04f 0800 	mov.w	r8, #0
 800b356:	fbc5 780a 	smlal	r7, r8, r5, sl
 800b35a:	4645      	mov	r5, r8
 800b35c:	10ac      	asrs	r4, r5, #2
 800b35e:	9d04      	ldr	r5, [sp, #16]
 800b360:	f304 040f 	ssat	r4, #16, r4
 800b364:	f825 4016 	strh.w	r4, [r5, r6, lsl #1]
 800b368:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 800b36a:	4574      	cmp	r4, lr
 800b36c:	d912      	bls.n	800b394 <D48_GENERIC+0x1a8>
 800b36e:	8d54      	ldrh	r4, [r2, #42]	; 0x2a
 800b370:	b2e5      	uxtb	r5, r4
 800b372:	2c01      	cmp	r4, #1
 800b374:	eb05 0845 	add.w	r8, r5, r5, lsl #1
 800b378:	f1c5 0700 	rsb	r7, r5, #0
 800b37c:	f47f af56 	bne.w	800b22c <D48_GENERIC+0x40>
 800b380:	9d06      	ldr	r5, [sp, #24]
 800b382:	e9d0 4600 	ldrd	r4, r6, [r0]
 800b386:	3006      	adds	r0, #6
 800b388:	2d00      	cmp	r5, #0
 800b38a:	f43f af6b 	beq.w	800b264 <D48_GENERIC+0x78>
 800b38e:	ba64      	rev16	r4, r4
 800b390:	ba76      	rev16	r6, r6
 800b392:	e767      	b.n	800b264 <D48_GENERIC+0x78>
 800b394:	6093      	str	r3, [r2, #8]
 800b396:	2000      	movs	r0, #0
 800b398:	9b00      	ldr	r3, [sp, #0]
 800b39a:	f8c2 c01c 	str.w	ip, [r2, #28]
 800b39e:	60d3      	str	r3, [r2, #12]
 800b3a0:	9b01      	ldr	r3, [sp, #4]
 800b3a2:	6113      	str	r3, [r2, #16]
 800b3a4:	9b02      	ldr	r3, [sp, #8]
 800b3a6:	6153      	str	r3, [r2, #20]
 800b3a8:	9b07      	ldr	r3, [sp, #28]
 800b3aa:	6193      	str	r3, [r2, #24]
 800b3ac:	b009      	add	sp, #36	; 0x24
 800b3ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3b2:	bf00      	nop
 800b3b4:	24000000 	.word	0x24000000
 800b3b8:	000f000a 	.word	0x000f000a
 800b3bc:	00060003 	.word	0x00060003
 800b3c0:	00150019 	.word	0x00150019
 800b3c4:	00190015 	.word	0x00190015
 800b3c8:	00030006 	.word	0x00030006
 800b3cc:	000a000f 	.word	0x000a000f

0800b3d0 <D64_GENERIC>:
 800b3d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3d4:	6913      	ldr	r3, [r2, #16]
 800b3d6:	b089      	sub	sp, #36	; 0x24
 800b3d8:	6b15      	ldr	r5, [r2, #48]	; 0x30
 800b3da:	9300      	str	r3, [sp, #0]
 800b3dc:	6953      	ldr	r3, [r2, #20]
 800b3de:	9105      	str	r1, [sp, #20]
 800b3e0:	9303      	str	r3, [sp, #12]
 800b3e2:	8cd1      	ldrh	r1, [r2, #38]	; 0x26
 800b3e4:	6993      	ldr	r3, [r2, #24]
 800b3e6:	69d4      	ldr	r4, [r2, #28]
 800b3e8:	9307      	str	r3, [sp, #28]
 800b3ea:	9504      	str	r5, [sp, #16]
 800b3ec:	e9d2 3602 	ldrd	r3, r6, [r2, #8]
 800b3f0:	2900      	cmp	r1, #0
 800b3f2:	f000 80e8 	beq.w	800b5c6 <D64_GENERIC+0x1f6>
 800b3f6:	6a11      	ldr	r1, [r2, #32]
 800b3f8:	2500      	movs	r5, #0
 800b3fa:	46b3      	mov	fp, r6
 800b3fc:	9302      	str	r3, [sp, #8]
 800b3fe:	9106      	str	r1, [sp, #24]
 800b400:	4978      	ldr	r1, [pc, #480]	; (800b5e4 <D64_GENERIC+0x214>)
 800b402:	e0cc      	b.n	800b59e <D64_GENERIC+0x1ce>
 800b404:	eb0e 084e 	add.w	r8, lr, lr, lsl #1
 800b408:	f1ce 0c00 	rsb	ip, lr, #0
 800b40c:	f890 9000 	ldrb.w	r9, [r0]
 800b410:	eb00 0708 	add.w	r7, r0, r8
 800b414:	f810 6008 	ldrb.w	r6, [r0, r8]
 800b418:	eb07 0a4c 	add.w	sl, r7, ip, lsl #1
 800b41c:	f817 000c 	ldrb.w	r0, [r7, ip]
 800b420:	f817 301c 	ldrb.w	r3, [r7, ip, lsl #1]
 800b424:	eb0a 0748 	add.w	r7, sl, r8, lsl #1
 800b428:	f81a a018 	ldrb.w	sl, [sl, r8, lsl #1]
 800b42c:	ea4f 4800 	mov.w	r8, r0, lsl #16
 800b430:	f817 000c 	ldrb.w	r0, [r7, ip]
 800b434:	eb08 6606 	add.w	r6, r8, r6, lsl #24
 800b438:	f817 801c 	ldrb.w	r8, [r7, ip, lsl #1]
 800b43c:	0400      	lsls	r0, r0, #16
 800b43e:	4467      	add	r7, ip
 800b440:	eb06 2603 	add.w	r6, r6, r3, lsl #8
 800b444:	eb00 600a 	add.w	r0, r0, sl, lsl #24
 800b448:	f817 a01c 	ldrb.w	sl, [r7, ip, lsl #1]
 800b44c:	eb07 074c 	add.w	r7, r7, ip, lsl #1
 800b450:	444e      	add	r6, r9
 800b452:	eb00 2808 	add.w	r8, r0, r8, lsl #8
 800b456:	eb07 008e 	add.w	r0, r7, lr, lsl #2
 800b45a:	44c2      	add	sl, r8
 800b45c:	b2f7      	uxtb	r7, r6
 800b45e:	f3c6 2807 	ubfx	r8, r6, #8, #8
 800b462:	f3c6 4e07 	ubfx	lr, r6, #16, #8
 800b466:	0e36      	lsrs	r6, r6, #24
 800b468:	f851 7027 	ldr.w	r7, [r1, r7, lsl #2]
 800b46c:	fa5f fc8a 	uxtb.w	ip, sl
 800b470:	f851 8028 	ldr.w	r8, [r1, r8, lsl #2]
 800b474:	f3ca 2907 	ubfx	r9, sl, #8, #8
 800b478:	443c      	add	r4, r7
 800b47a:	f851 702e 	ldr.w	r7, [r1, lr, lsl #2]
 800b47e:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 800b482:	eb08 2894 	add.w	r8, r8, r4, lsr #10
 800b486:	f851 c02c 	ldr.w	ip, [r1, ip, lsl #2]
 800b48a:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800b48e:	4b56      	ldr	r3, [pc, #344]	; (800b5e8 <D64_GENERIC+0x218>)
 800b490:	eb07 2e98 	add.w	lr, r7, r8, lsr #10
 800b494:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800b498:	f851 7029 	ldr.w	r7, [r1, r9, lsl #2]
 800b49c:	eb06 269e 	add.w	r6, r6, lr, lsr #10
 800b4a0:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800b4a4:	ea48 4804 	orr.w	r8, r8, r4, lsl #16
 800b4a8:	f3ca 4407 	ubfx	r4, sl, #16, #8
 800b4ac:	eb0c 2c96 	add.w	ip, ip, r6, lsr #10
 800b4b0:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800b4b4:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 800b4b8:	ea4f 6a1a 	mov.w	sl, sl, lsr #24
 800b4bc:	eb07 279c 	add.w	r7, r7, ip, lsr #10
 800b4c0:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 800b4c4:	f851 902a 	ldr.w	r9, [r1, sl, lsl #2]
 800b4c8:	ea46 460e 	orr.w	r6, r6, lr, lsl #16
 800b4cc:	eb04 2a97 	add.w	sl, r4, r7, lsr #10
 800b4d0:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800b4d4:	eb09 299a 	add.w	r9, r9, sl, lsr #10
 800b4d8:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 800b4dc:	ea47 4c0c 	orr.w	ip, r7, ip, lsl #16
 800b4e0:	f3c9 0709 	ubfx	r7, r9, #0, #10
 800b4e4:	ea4f 2499 	mov.w	r4, r9, lsr #10
 800b4e8:	ea47 4a0a 	orr.w	sl, r7, sl, lsl #16
 800b4ec:	fb28 b903 	smlad	r9, r8, r3, fp
 800b4f0:	4b3e      	ldr	r3, [pc, #248]	; (800b5ec <D64_GENERIC+0x21c>)
 800b4f2:	fb26 9903 	smlad	r9, r6, r3, r9
 800b4f6:	4b3e      	ldr	r3, [pc, #248]	; (800b5f0 <D64_GENERIC+0x220>)
 800b4f8:	fb2c 9703 	smlad	r7, ip, r3, r9
 800b4fc:	f44f 3980 	mov.w	r9, #65536	; 0x10000
 800b500:	fb2a 7909 	smlad	r9, sl, r9, r7
 800b504:	4f3b      	ldr	r7, [pc, #236]	; (800b5f4 <D64_GENERIC+0x224>)
 800b506:	9b02      	ldr	r3, [sp, #8]
 800b508:	fb28 3307 	smlad	r3, r8, r7, r3
 800b50c:	fb2a 3317 	smladx	r3, sl, r7, r3
 800b510:	4f39      	ldr	r7, [pc, #228]	; (800b5f8 <D64_GENERIC+0x228>)
 800b512:	fb26 3307 	smlad	r3, r6, r7, r3
 800b516:	fb2c 3b17 	smladx	fp, ip, r7, r3
 800b51a:	f04f 0e01 	mov.w	lr, #1
 800b51e:	fb28 f80e 	smuad	r8, r8, lr
 800b522:	4b36      	ldr	r3, [pc, #216]	; (800b5fc <D64_GENERIC+0x22c>)
 800b524:	fb26 8603 	smlad	r6, r6, r3, r8
 800b528:	4b35      	ldr	r3, [pc, #212]	; (800b600 <D64_GENERIC+0x230>)
 800b52a:	fb2c 6c03 	smlad	ip, ip, r3, r6
 800b52e:	4b35      	ldr	r3, [pc, #212]	; (800b604 <D64_GENERIC+0x234>)
 800b530:	fb2a c303 	smlad	r3, sl, r3, ip
 800b534:	9f06      	ldr	r7, [sp, #24]
 800b536:	f5a9 3900 	sub.w	r9, r9, #131072	; 0x20000
 800b53a:	9302      	str	r3, [sp, #8]
 800b53c:	b1cf      	cbz	r7, 800b572 <D64_GENERIC+0x1a2>
 800b53e:	9b00      	ldr	r3, [sp, #0]
 800b540:	444b      	add	r3, r9
 800b542:	461e      	mov	r6, r3
 800b544:	9b03      	ldr	r3, [sp, #12]
 800b546:	f8cd 900c 	str.w	r9, [sp, #12]
 800b54a:	1af6      	subs	r6, r6, r3
 800b54c:	46b0      	mov	r8, r6
 800b54e:	ea4f 79e6 	mov.w	r9, r6, asr #31
 800b552:	e9cd 8900 	strd	r8, r9, [sp]
 800b556:	fba6 8907 	umull	r8, r9, r6, r7
 800b55a:	9e01      	ldr	r6, [sp, #4]
 800b55c:	fb07 9306 	mla	r3, r7, r6, r9
 800b560:	4646      	mov	r6, r8
 800b562:	f116 4600 	adds.w	r6, r6, #2147483648	; 0x80000000
 800b566:	f143 0700 	adc.w	r7, r3, #0
 800b56a:	fa07 f30e 	lsl.w	r3, r7, lr
 800b56e:	4699      	mov	r9, r3
 800b570:	9300      	str	r3, [sp, #0]
 800b572:	f8b2 c028 	ldrh.w	ip, [r2, #40]	; 0x28
 800b576:	ea4f 2989 	mov.w	r9, r9, lsl #10
 800b57a:	9b04      	ldr	r3, [sp, #16]
 800b57c:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800b580:	2700      	movs	r7, #0
 800b582:	fb05 fc0c 	mul.w	ip, r5, ip
 800b586:	3501      	adds	r5, #1
 800b588:	fbc3 6709 	smlal	r6, r7, r3, r9
 800b58c:	9b05      	ldr	r3, [sp, #20]
 800b58e:	10be      	asrs	r6, r7, #2
 800b590:	f306 060f 	ssat	r6, #16, r6
 800b594:	f823 601c 	strh.w	r6, [r3, ip, lsl #1]
 800b598:	8cd6      	ldrh	r6, [r2, #38]	; 0x26
 800b59a:	42ae      	cmp	r6, r5
 800b59c:	dd11      	ble.n	800b5c2 <D64_GENERIC+0x1f2>
 800b59e:	f8b2 e02a 	ldrh.w	lr, [r2, #42]	; 0x2a
 800b5a2:	f1be 0f01 	cmp.w	lr, #1
 800b5a6:	f47f af2d 	bne.w	800b404 <D64_GENERIC+0x34>
 800b5aa:	6b57      	ldr	r7, [r2, #52]	; 0x34
 800b5ac:	f100 0c08 	add.w	ip, r0, #8
 800b5b0:	06bb      	lsls	r3, r7, #26
 800b5b2:	e9d0 6a00 	ldrd	r6, sl, [r0]
 800b5b6:	d513      	bpl.n	800b5e0 <D64_GENERIC+0x210>
 800b5b8:	ba76      	rev16	r6, r6
 800b5ba:	fa9a fa9a 	rev16.w	sl, sl
 800b5be:	4660      	mov	r0, ip
 800b5c0:	e74c      	b.n	800b45c <D64_GENERIC+0x8c>
 800b5c2:	465e      	mov	r6, fp
 800b5c4:	9b02      	ldr	r3, [sp, #8]
 800b5c6:	6093      	str	r3, [r2, #8]
 800b5c8:	2000      	movs	r0, #0
 800b5ca:	9b00      	ldr	r3, [sp, #0]
 800b5cc:	60d6      	str	r6, [r2, #12]
 800b5ce:	6113      	str	r3, [r2, #16]
 800b5d0:	9b03      	ldr	r3, [sp, #12]
 800b5d2:	61d4      	str	r4, [r2, #28]
 800b5d4:	6153      	str	r3, [r2, #20]
 800b5d6:	9b07      	ldr	r3, [sp, #28]
 800b5d8:	6193      	str	r3, [r2, #24]
 800b5da:	b009      	add	sp, #36	; 0x24
 800b5dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b5e0:	4660      	mov	r0, ip
 800b5e2:	e73b      	b.n	800b45c <D64_GENERIC+0x8c>
 800b5e4:	24000000 	.word	0x24000000
 800b5e8:	001c0015 	.word	0x001c0015
 800b5ec:	000f000a 	.word	0x000f000a
 800b5f0:	00060003 	.word	0x00060003
 800b5f4:	0024002a 	.word	0x0024002a
 800b5f8:	002e0030 	.word	0x002e0030
 800b5fc:	00030006 	.word	0x00030006
 800b600:	000a000f 	.word	0x000a000f
 800b604:	0015001c 	.word	0x0015001c

0800b608 <D80_GENERIC>:
 800b608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b60c:	b08b      	sub	sp, #44	; 0x2c
 800b60e:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 800b610:	9107      	str	r1, [sp, #28]
 800b612:	6911      	ldr	r1, [r2, #16]
 800b614:	9104      	str	r1, [sp, #16]
 800b616:	6951      	ldr	r1, [r2, #20]
 800b618:	9105      	str	r1, [sp, #20]
 800b61a:	6991      	ldr	r1, [r2, #24]
 800b61c:	9109      	str	r1, [sp, #36]	; 0x24
 800b61e:	69d1      	ldr	r1, [r2, #28]
 800b620:	9102      	str	r1, [sp, #8]
 800b622:	6891      	ldr	r1, [r2, #8]
 800b624:	9103      	str	r1, [sp, #12]
 800b626:	68d1      	ldr	r1, [r2, #12]
 800b628:	9101      	str	r1, [sp, #4]
 800b62a:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800b62c:	9106      	str	r1, [sp, #24]
 800b62e:	2b00      	cmp	r3, #0
 800b630:	f000 810b 	beq.w	800b84a <D80_GENERIC+0x242>
 800b634:	6a13      	ldr	r3, [r2, #32]
 800b636:	f04f 0800 	mov.w	r8, #0
 800b63a:	f8df c260 	ldr.w	ip, [pc, #608]	; 800b89c <D80_GENERIC+0x294>
 800b63e:	9308      	str	r3, [sp, #32]
 800b640:	9200      	str	r2, [sp, #0]
 800b642:	e0ee      	b.n	800b822 <D80_GENERIC+0x21a>
 800b644:	b2db      	uxtb	r3, r3
 800b646:	f890 e000 	ldrb.w	lr, [r0]
 800b64a:	b219      	sxth	r1, r3
 800b64c:	425c      	negs	r4, r3
 800b64e:	f810 9003 	ldrb.w	r9, [r0, r3]
 800b652:	004e      	lsls	r6, r1, #1
 800b654:	eb01 0581 	add.w	r5, r1, r1, lsl #2
 800b658:	4431      	add	r1, r6
 800b65a:	1843      	adds	r3, r0, r1
 800b65c:	f810 b001 	ldrb.w	fp, [r0, r1]
 800b660:	1919      	adds	r1, r3, r4
 800b662:	5d1b      	ldrb	r3, [r3, r4]
 800b664:	1948      	adds	r0, r1, r5
 800b666:	f811 a005 	ldrb.w	sl, [r1, r5]
 800b66a:	041b      	lsls	r3, r3, #16
 800b66c:	1907      	adds	r7, r0, r4
 800b66e:	5d01      	ldrb	r1, [r0, r4]
 800b670:	eb03 630b 	add.w	r3, r3, fp, lsl #24
 800b674:	f810 0014 	ldrb.w	r0, [r0, r4, lsl #1]
 800b678:	eb07 0b44 	add.w	fp, r7, r4, lsl #1
 800b67c:	f817 7014 	ldrb.w	r7, [r7, r4, lsl #1]
 800b680:	0409      	lsls	r1, r1, #16
 800b682:	eb03 2309 	add.w	r3, r3, r9, lsl #8
 800b686:	eb0b 0905 	add.w	r9, fp, r5
 800b68a:	eb01 610a 	add.w	r1, r1, sl, lsl #24
 800b68e:	f81b 5005 	ldrb.w	r5, [fp, r5]
 800b692:	eb09 0b04 	add.w	fp, r9, r4
 800b696:	f819 4004 	ldrb.w	r4, [r9, r4]
 800b69a:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 800b69e:	4473      	add	r3, lr
 800b6a0:	eb0b 0006 	add.w	r0, fp, r6
 800b6a4:	eb04 2505 	add.w	r5, r4, r5, lsl #8
 800b6a8:	4439      	add	r1, r7
 800b6aa:	f3c3 2407 	ubfx	r4, r3, #8, #8
 800b6ae:	b2df      	uxtb	r7, r3
 800b6b0:	f3c3 4607 	ubfx	r6, r3, #16, #8
 800b6b4:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 800b6b8:	f85c 3027 	ldr.w	r3, [ip, r7, lsl #2]
 800b6bc:	fa5f fa81 	uxtb.w	sl, r1
 800b6c0:	f85c 7024 	ldr.w	r7, [ip, r4, lsl #2]
 800b6c4:	9c02      	ldr	r4, [sp, #8]
 800b6c6:	f85c 9026 	ldr.w	r9, [ip, r6, lsl #2]
 800b6ca:	441c      	add	r4, r3
 800b6cc:	f85c 602e 	ldr.w	r6, [ip, lr, lsl #2]
 800b6d0:	f85c e02a 	ldr.w	lr, [ip, sl, lsl #2]
 800b6d4:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 800b6d8:	eb07 2794 	add.w	r7, r7, r4, lsr #10
 800b6dc:	f3c4 0309 	ubfx	r3, r4, #0, #10
 800b6e0:	f3c1 2407 	ubfx	r4, r1, #8, #8
 800b6e4:	b2ed      	uxtb	r5, r5
 800b6e6:	eb09 2997 	add.w	r9, r9, r7, lsr #10
 800b6ea:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800b6ee:	f85c 4024 	ldr.w	r4, [ip, r4, lsl #2]
 800b6f2:	eb06 2699 	add.w	r6, r6, r9, lsr #10
 800b6f6:	f85c 5025 	ldr.w	r5, [ip, r5, lsl #2]
 800b6fa:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
 800b6fe:	f3c1 4707 	ubfx	r7, r1, #16, #8
 800b702:	eb0e 2e96 	add.w	lr, lr, r6, lsr #10
 800b706:	f85c a02a 	ldr.w	sl, [ip, sl, lsl #2]
 800b70a:	f85c 7027 	ldr.w	r7, [ip, r7, lsl #2]
 800b70e:	0e09      	lsrs	r1, r1, #24
 800b710:	eb04 249e 	add.w	r4, r4, lr, lsr #10
 800b714:	f3c9 0909 	ubfx	r9, r9, #0, #10
 800b718:	f85c 1021 	ldr.w	r1, [ip, r1, lsl #2]
 800b71c:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800b720:	eb07 2794 	add.w	r7, r7, r4, lsr #10
 800b724:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800b728:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800b72c:	eb01 2197 	add.w	r1, r1, r7, lsr #10
 800b730:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800b734:	ea46 4609 	orr.w	r6, r6, r9, lsl #16
 800b738:	eb05 2591 	add.w	r5, r5, r1, lsr #10
 800b73c:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800b740:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 800b744:	eb0a 2a95 	add.w	sl, sl, r5, lsr #10
 800b748:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800b74c:	ea41 4107 	orr.w	r1, r1, r7, lsl #16
 800b750:	ea4f 229a 	mov.w	r2, sl, lsr #10
 800b754:	f3ca 0709 	ubfx	r7, sl, #0, #10
 800b758:	9202      	str	r2, [sp, #8]
 800b75a:	ea47 4505 	orr.w	r5, r7, r5, lsl #16
 800b75e:	4a43      	ldr	r2, [pc, #268]	; (800b86c <D80_GENERIC+0x264>)
 800b760:	9f01      	ldr	r7, [sp, #4]
 800b762:	fb23 7a02 	smlad	sl, r3, r2, r7
 800b766:	4a42      	ldr	r2, [pc, #264]	; (800b870 <D80_GENERIC+0x268>)
 800b768:	fb26 aa02 	smlad	sl, r6, r2, sl
 800b76c:	4a41      	ldr	r2, [pc, #260]	; (800b874 <D80_GENERIC+0x26c>)
 800b76e:	fb24 aa02 	smlad	sl, r4, r2, sl
 800b772:	4a41      	ldr	r2, [pc, #260]	; (800b878 <D80_GENERIC+0x270>)
 800b774:	fb21 a702 	smlad	r7, r1, r2, sl
 800b778:	f44f 3a80 	mov.w	sl, #65536	; 0x10000
 800b77c:	fb25 7a0a 	smlad	sl, r5, sl, r7
 800b780:	4a3e      	ldr	r2, [pc, #248]	; (800b87c <D80_GENERIC+0x274>)
 800b782:	9f03      	ldr	r7, [sp, #12]
 800b784:	fb23 7e02 	smlad	lr, r3, r2, r7
 800b788:	4a3d      	ldr	r2, [pc, #244]	; (800b880 <D80_GENERIC+0x278>)
 800b78a:	fb26 ee02 	smlad	lr, r6, r2, lr
 800b78e:	f04f 174b 	mov.w	r7, #4915275	; 0x4b004b
 800b792:	fb24 e707 	smlad	r7, r4, r7, lr
 800b796:	4a3b      	ldr	r2, [pc, #236]	; (800b884 <D80_GENERIC+0x27c>)
 800b798:	fb21 7702 	smlad	r7, r1, r2, r7
 800b79c:	4a3a      	ldr	r2, [pc, #232]	; (800b888 <D80_GENERIC+0x280>)
 800b79e:	fb25 7202 	smlad	r2, r5, r2, r7
 800b7a2:	f04f 0901 	mov.w	r9, #1
 800b7a6:	9201      	str	r2, [sp, #4]
 800b7a8:	fb23 f909 	smuad	r9, r3, r9
 800b7ac:	4b37      	ldr	r3, [pc, #220]	; (800b88c <D80_GENERIC+0x284>)
 800b7ae:	fb26 9603 	smlad	r6, r6, r3, r9
 800b7b2:	4f37      	ldr	r7, [pc, #220]	; (800b890 <D80_GENERIC+0x288>)
 800b7b4:	fb24 6407 	smlad	r4, r4, r7, r6
 800b7b8:	4f36      	ldr	r7, [pc, #216]	; (800b894 <D80_GENERIC+0x28c>)
 800b7ba:	fb21 4707 	smlad	r7, r1, r7, r4
 800b7be:	4936      	ldr	r1, [pc, #216]	; (800b898 <D80_GENERIC+0x290>)
 800b7c0:	fb25 7301 	smlad	r3, r5, r1, r7
 800b7c4:	9303      	str	r3, [sp, #12]
 800b7c6:	f5aa 3a7a 	sub.w	sl, sl, #256000	; 0x3e800
 800b7ca:	9b08      	ldr	r3, [sp, #32]
 800b7cc:	b193      	cbz	r3, 800b7f4 <D80_GENERIC+0x1ec>
 800b7ce:	9a04      	ldr	r2, [sp, #16]
 800b7d0:	4452      	add	r2, sl
 800b7d2:	4614      	mov	r4, r2
 800b7d4:	9a05      	ldr	r2, [sp, #20]
 800b7d6:	f8cd a014 	str.w	sl, [sp, #20]
 800b7da:	1aa4      	subs	r4, r4, r2
 800b7dc:	fba4 1203 	umull	r1, r2, r4, r3
 800b7e0:	17e7      	asrs	r7, r4, #31
 800b7e2:	f111 4400 	adds.w	r4, r1, #2147483648	; 0x80000000
 800b7e6:	fb03 2207 	mla	r2, r3, r7, r2
 800b7ea:	f142 0500 	adc.w	r5, r2, #0
 800b7ee:	006b      	lsls	r3, r5, #1
 800b7f0:	469a      	mov	sl, r3
 800b7f2:	9304      	str	r3, [sp, #16]
 800b7f4:	9e00      	ldr	r6, [sp, #0]
 800b7f6:	ea4f 2a4a 	mov.w	sl, sl, lsl #9
 800b7fa:	9a06      	ldr	r2, [sp, #24]
 800b7fc:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800b800:	8d33      	ldrh	r3, [r6, #40]	; 0x28
 800b802:	2500      	movs	r5, #0
 800b804:	fb08 f303 	mul.w	r3, r8, r3
 800b808:	fbc2 450a 	smlal	r4, r5, r2, sl
 800b80c:	9a07      	ldr	r2, [sp, #28]
 800b80e:	f108 0801 	add.w	r8, r8, #1
 800b812:	10a9      	asrs	r1, r5, #2
 800b814:	f301 010f 	ssat	r1, #16, r1
 800b818:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800b81c:	8cf3      	ldrh	r3, [r6, #38]	; 0x26
 800b81e:	4543      	cmp	r3, r8
 800b820:	dd12      	ble.n	800b848 <D80_GENERIC+0x240>
 800b822:	9b00      	ldr	r3, [sp, #0]
 800b824:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b826:	2b01      	cmp	r3, #1
 800b828:	f47f af0c 	bne.w	800b644 <D80_GENERIC+0x3c>
 800b82c:	9b00      	ldr	r3, [sp, #0]
 800b82e:	6885      	ldr	r5, [r0, #8]
 800b830:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 800b832:	06b2      	lsls	r2, r6, #26
 800b834:	e9d0 3100 	ldrd	r3, r1, [r0]
 800b838:	f100 000a 	add.w	r0, r0, #10
 800b83c:	f57f af35 	bpl.w	800b6aa <D80_GENERIC+0xa2>
 800b840:	ba5b      	rev16	r3, r3
 800b842:	ba49      	rev16	r1, r1
 800b844:	ba6d      	rev16	r5, r5
 800b846:	e730      	b.n	800b6aa <D80_GENERIC+0xa2>
 800b848:	4632      	mov	r2, r6
 800b84a:	9b03      	ldr	r3, [sp, #12]
 800b84c:	2000      	movs	r0, #0
 800b84e:	6093      	str	r3, [r2, #8]
 800b850:	9b01      	ldr	r3, [sp, #4]
 800b852:	60d3      	str	r3, [r2, #12]
 800b854:	9b02      	ldr	r3, [sp, #8]
 800b856:	61d3      	str	r3, [r2, #28]
 800b858:	9b04      	ldr	r3, [sp, #16]
 800b85a:	6113      	str	r3, [r2, #16]
 800b85c:	9b05      	ldr	r3, [sp, #20]
 800b85e:	6153      	str	r3, [r2, #20]
 800b860:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b862:	6193      	str	r3, [r2, #24]
 800b864:	b00b      	add	sp, #44	; 0x2c
 800b866:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b86a:	bf00      	nop
 800b86c:	002d0024 	.word	0x002d0024
 800b870:	001c0015 	.word	0x001c0015
 800b874:	000f000a 	.word	0x000f000a
 800b878:	00060003 	.word	0x00060003
 800b87c:	0037003f 	.word	0x0037003f
 800b880:	00450049 	.word	0x00450049
 800b884:	00490045 	.word	0x00490045
 800b888:	003f0037 	.word	0x003f0037
 800b88c:	00030006 	.word	0x00030006
 800b890:	000a000f 	.word	0x000a000f
 800b894:	0015001c 	.word	0x0015001c
 800b898:	0024002d 	.word	0x0024002d
 800b89c:	24000000 	.word	0x24000000

0800b8a0 <D128_GENERIC>:
 800b8a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8a4:	b08d      	sub	sp, #52	; 0x34
 800b8a6:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 800b8a8:	f8d2 a01c 	ldr.w	sl, [r2, #28]
 800b8ac:	9109      	str	r1, [sp, #36]	; 0x24
 800b8ae:	6911      	ldr	r1, [r2, #16]
 800b8b0:	9201      	str	r2, [sp, #4]
 800b8b2:	9106      	str	r1, [sp, #24]
 800b8b4:	6951      	ldr	r1, [r2, #20]
 800b8b6:	9107      	str	r1, [sp, #28]
 800b8b8:	6991      	ldr	r1, [r2, #24]
 800b8ba:	910b      	str	r1, [sp, #44]	; 0x2c
 800b8bc:	6891      	ldr	r1, [r2, #8]
 800b8be:	9103      	str	r1, [sp, #12]
 800b8c0:	68d1      	ldr	r1, [r2, #12]
 800b8c2:	9102      	str	r1, [sp, #8]
 800b8c4:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800b8c6:	9108      	str	r1, [sp, #32]
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	f000 8183 	beq.w	800bbd4 <D128_GENERIC+0x334>
 800b8ce:	2300      	movs	r3, #0
 800b8d0:	6a12      	ldr	r2, [r2, #32]
 800b8d2:	4681      	mov	r9, r0
 800b8d4:	920a      	str	r2, [sp, #40]	; 0x28
 800b8d6:	e9cd a304 	strd	sl, r3, [sp, #16]
 800b8da:	e165      	b.n	800bba8 <D128_GENERIC+0x308>
 800b8dc:	b2d2      	uxtb	r2, r2
 800b8de:	f899 b000 	ldrb.w	fp, [r9]
 800b8e2:	b213      	sxth	r3, r2
 800b8e4:	4255      	negs	r5, r2
 800b8e6:	f819 0002 	ldrb.w	r0, [r9, r2]
 800b8ea:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 800b8ee:	009f      	lsls	r7, r3, #2
 800b8f0:	eb09 0402 	add.w	r4, r9, r2
 800b8f4:	ebc3 06c3 	rsb	r6, r3, r3, lsl #3
 800b8f8:	f819 8002 	ldrb.w	r8, [r9, r2]
 800b8fc:	443b      	add	r3, r7
 800b8fe:	1962      	adds	r2, r4, r5
 800b900:	5d64      	ldrb	r4, [r4, r5]
 800b902:	eb02 0c03 	add.w	ip, r2, r3
 800b906:	0424      	lsls	r4, r4, #16
 800b908:	5cd3      	ldrb	r3, [r2, r3]
 800b90a:	eb0c 0e05 	add.w	lr, ip, r5
 800b90e:	f81c 9015 	ldrb.w	r9, [ip, r5, lsl #1]
 800b912:	f81c 2005 	ldrb.w	r2, [ip, r5]
 800b916:	eb04 6408 	add.w	r4, r4, r8, lsl #24
 800b91a:	eb0e 0c45 	add.w	ip, lr, r5, lsl #1
 800b91e:	f81e 8015 	ldrb.w	r8, [lr, r5, lsl #1]
 800b922:	eb04 2400 	add.w	r4, r4, r0, lsl #8
 800b926:	eb0c 0e06 	add.w	lr, ip, r6
 800b92a:	f81c a006 	ldrb.w	sl, [ip, r6]
 800b92e:	0412      	lsls	r2, r2, #16
 800b930:	445c      	add	r4, fp
 800b932:	eb0e 0c05 	add.w	ip, lr, r5
 800b936:	eb02 6203 	add.w	r2, r2, r3, lsl #24
 800b93a:	f81e 3005 	ldrb.w	r3, [lr, r5]
 800b93e:	eb0c 0045 	add.w	r0, ip, r5, lsl #1
 800b942:	f81e e015 	ldrb.w	lr, [lr, r5, lsl #1]
 800b946:	041b      	lsls	r3, r3, #16
 800b948:	f81c c015 	ldrb.w	ip, [ip, r5, lsl #1]
 800b94c:	eb00 0b06 	add.w	fp, r0, r6
 800b950:	5d80      	ldrb	r0, [r0, r6]
 800b952:	eb03 630a 	add.w	r3, r3, sl, lsl #24
 800b956:	f81b 6005 	ldrb.w	r6, [fp, r5]
 800b95a:	eb0b 0a05 	add.w	sl, fp, r5
 800b95e:	eb02 2209 	add.w	r2, r2, r9, lsl #8
 800b962:	f81b b015 	ldrb.w	fp, [fp, r5, lsl #1]
 800b966:	0436      	lsls	r6, r6, #16
 800b968:	eb0a 0945 	add.w	r9, sl, r5, lsl #1
 800b96c:	4442      	add	r2, r8
 800b96e:	eb06 6600 	add.w	r6, r6, r0, lsl #24
 800b972:	f81a 8015 	ldrb.w	r8, [sl, r5, lsl #1]
 800b976:	eb03 230e 	add.w	r3, r3, lr, lsl #8
 800b97a:	44b9      	add	r9, r7
 800b97c:	eb06 260b 	add.w	r6, r6, fp, lsl #8
 800b980:	4463      	add	r3, ip
 800b982:	eb06 0508 	add.w	r5, r6, r8
 800b986:	b2e7      	uxtb	r7, r4
 800b988:	f3c4 2607 	ubfx	r6, r4, #8, #8
 800b98c:	499b      	ldr	r1, [pc, #620]	; (800bbfc <D128_GENERIC+0x35c>)
 800b98e:	f3c4 4007 	ubfx	r0, r4, #16, #8
 800b992:	0e24      	lsrs	r4, r4, #24
 800b994:	f851 c027 	ldr.w	ip, [r1, r7, lsl #2]
 800b998:	b2d7      	uxtb	r7, r2
 800b99a:	f851 b026 	ldr.w	fp, [r1, r6, lsl #2]
 800b99e:	f3c2 2607 	ubfx	r6, r2, #8, #8
 800b9a2:	9904      	ldr	r1, [sp, #16]
 800b9a4:	4461      	add	r1, ip
 800b9a6:	468c      	mov	ip, r1
 800b9a8:	4994      	ldr	r1, [pc, #592]	; (800bbfc <D128_GENERIC+0x35c>)
 800b9aa:	eb0b 2b9c 	add.w	fp, fp, ip, lsr #10
 800b9ae:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 800b9b2:	f851 8024 	ldr.w	r8, [r1, r4, lsl #2]
 800b9b6:	f3c2 4407 	ubfx	r4, r2, #16, #8
 800b9ba:	eb00 209b 	add.w	r0, r0, fp, lsr #10
 800b9be:	f851 e027 	ldr.w	lr, [r1, r7, lsl #2]
 800b9c2:	f851 7026 	ldr.w	r7, [r1, r6, lsl #2]
 800b9c6:	0e12      	lsrs	r2, r2, #24
 800b9c8:	eb08 2890 	add.w	r8, r8, r0, lsr #10
 800b9cc:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 800b9d0:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 800b9d4:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800b9d8:	eb0e 2e98 	add.w	lr, lr, r8, lsr #10
 800b9dc:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800b9e0:	b2da      	uxtb	r2, r3
 800b9e2:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 800b9e6:	eb07 279e 	add.w	r7, r7, lr, lsr #10
 800b9ea:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 800b9ee:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800b9f2:	ea48 4800 	orr.w	r8, r8, r0, lsl #16
 800b9f6:	eb04 2a97 	add.w	sl, r4, r7, lsr #10
 800b9fa:	f3c3 2007 	ubfx	r0, r3, #8, #8
 800b9fe:	ea4b 4b0c 	orr.w	fp, fp, ip, lsl #16
 800ba02:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800ba06:	eb06 269a 	add.w	r6, r6, sl, lsr #10
 800ba0a:	f851 c020 	ldr.w	ip, [r1, r0, lsl #2]
 800ba0e:	f3c3 4007 	ubfx	r0, r3, #16, #8
 800ba12:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800ba16:	eb02 2296 	add.w	r2, r2, r6, lsr #10
 800ba1a:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 800ba1e:	f851 4020 	ldr.w	r4, [r1, r0, lsl #2]
 800ba22:	0e1b      	lsrs	r3, r3, #24
 800ba24:	eb0c 2c92 	add.w	ip, ip, r2, lsr #10
 800ba28:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800ba2c:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
 800ba30:	ea47 470e 	orr.w	r7, r7, lr, lsl #16
 800ba34:	b2eb      	uxtb	r3, r5
 800ba36:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800ba3a:	eb04 2e9c 	add.w	lr, r4, ip, lsr #10
 800ba3e:	f3cc 0409 	ubfx	r4, ip, #0, #10
 800ba42:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800ba46:	ea46 460a 	orr.w	r6, r6, sl, lsl #16
 800ba4a:	eb00 209e 	add.w	r0, r0, lr, lsr #10
 800ba4e:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 800ba52:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800ba56:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800ba5a:	eb03 2c90 	add.w	ip, r3, r0, lsr #10
 800ba5e:	f851 202a 	ldr.w	r2, [r1, sl, lsl #2]
 800ba62:	f3c5 4307 	ubfx	r3, r5, #16, #8
 800ba66:	ea4f 6a15 	mov.w	sl, r5, lsr #24
 800ba6a:	eb02 229c 	add.w	r2, r2, ip, lsr #10
 800ba6e:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800ba72:	f851 5023 	ldr.w	r5, [r1, r3, lsl #2]
 800ba76:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 800ba7a:	f851 302a 	ldr.w	r3, [r1, sl, lsl #2]
 800ba7e:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 800ba82:	eb05 2592 	add.w	r5, r5, r2, lsr #10
 800ba86:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800ba8a:	eb03 2e95 	add.w	lr, r3, r5, lsr #10
 800ba8e:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800ba92:	ea42 430c 	orr.w	r3, r2, ip, lsl #16
 800ba96:	ea4f 219e 	mov.w	r1, lr, lsr #10
 800ba9a:	f3ce 0209 	ubfx	r2, lr, #0, #10
 800ba9e:	9104      	str	r1, [sp, #16]
 800baa0:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 800baa4:	9902      	ldr	r1, [sp, #8]
 800baa6:	4a56      	ldr	r2, [pc, #344]	; (800bc00 <D128_GENERIC+0x360>)
 800baa8:	fb2b 1202 	smlad	r2, fp, r2, r1
 800baac:	4955      	ldr	r1, [pc, #340]	; (800bc04 <D128_GENERIC+0x364>)
 800baae:	fb28 2201 	smlad	r2, r8, r1, r2
 800bab2:	4955      	ldr	r1, [pc, #340]	; (800bc08 <D128_GENERIC+0x368>)
 800bab4:	fb27 2201 	smlad	r2, r7, r1, r2
 800bab8:	4954      	ldr	r1, [pc, #336]	; (800bc0c <D128_GENERIC+0x36c>)
 800baba:	fb26 2201 	smlad	r2, r6, r1, r2
 800babe:	4954      	ldr	r1, [pc, #336]	; (800bc10 <D128_GENERIC+0x370>)
 800bac0:	fb24 2201 	smlad	r2, r4, r1, r2
 800bac4:	4953      	ldr	r1, [pc, #332]	; (800bc14 <D128_GENERIC+0x374>)
 800bac6:	fb20 2201 	smlad	r2, r0, r1, r2
 800baca:	4953      	ldr	r1, [pc, #332]	; (800bc18 <D128_GENERIC+0x378>)
 800bacc:	fb23 2201 	smlad	r2, r3, r1, r2
 800bad0:	f44f 3c80 	mov.w	ip, #65536	; 0x10000
 800bad4:	fb25 2a0c 	smlad	sl, r5, ip, r2
 800bad8:	4950      	ldr	r1, [pc, #320]	; (800bc1c <D128_GENERIC+0x37c>)
 800bada:	9a03      	ldr	r2, [sp, #12]
 800badc:	fb2b 2c01 	smlad	ip, fp, r1, r2
 800bae0:	4a4f      	ldr	r2, [pc, #316]	; (800bc20 <D128_GENERIC+0x380>)
 800bae2:	fb28 ce02 	smlad	lr, r8, r2, ip
 800bae6:	f8df c150 	ldr.w	ip, [pc, #336]	; 800bc38 <D128_GENERIC+0x398>
 800baea:	fb27 ec0c 	smlad	ip, r7, ip, lr
 800baee:	f8df e14c 	ldr.w	lr, [pc, #332]	; 800bc3c <D128_GENERIC+0x39c>
 800baf2:	fb26 cc0e 	smlad	ip, r6, lr, ip
 800baf6:	f8df e148 	ldr.w	lr, [pc, #328]	; 800bc40 <D128_GENERIC+0x3a0>
 800bafa:	fb24 ce0e 	smlad	lr, r4, lr, ip
 800bafe:	f8df c144 	ldr.w	ip, [pc, #324]	; 800bc44 <D128_GENERIC+0x3a4>
 800bb02:	fb20 ee0c 	smlad	lr, r0, ip, lr
 800bb06:	f8df c140 	ldr.w	ip, [pc, #320]	; 800bc48 <D128_GENERIC+0x3a8>
 800bb0a:	fb23 ec0c 	smlad	ip, r3, ip, lr
 800bb0e:	f8df e13c 	ldr.w	lr, [pc, #316]	; 800bc4c <D128_GENERIC+0x3ac>
 800bb12:	fb25 c20e 	smlad	r2, r5, lr, ip
 800bb16:	f04f 0c01 	mov.w	ip, #1
 800bb1a:	9202      	str	r2, [sp, #8]
 800bb1c:	fb2b fb0c 	smuad	fp, fp, ip
 800bb20:	f8df c12c 	ldr.w	ip, [pc, #300]	; 800bc50 <D128_GENERIC+0x3b0>
 800bb24:	fb28 bb0c 	smlad	fp, r8, ip, fp
 800bb28:	f8df c128 	ldr.w	ip, [pc, #296]	; 800bc54 <D128_GENERIC+0x3b4>
 800bb2c:	fb27 bb0c 	smlad	fp, r7, ip, fp
 800bb30:	4f3c      	ldr	r7, [pc, #240]	; (800bc24 <D128_GENERIC+0x384>)
 800bb32:	fb26 bb07 	smlad	fp, r6, r7, fp
 800bb36:	4f3c      	ldr	r7, [pc, #240]	; (800bc28 <D128_GENERIC+0x388>)
 800bb38:	fb24 bb07 	smlad	fp, r4, r7, fp
 800bb3c:	4f3b      	ldr	r7, [pc, #236]	; (800bc2c <D128_GENERIC+0x38c>)
 800bb3e:	fb20 bb07 	smlad	fp, r0, r7, fp
 800bb42:	4f3b      	ldr	r7, [pc, #236]	; (800bc30 <D128_GENERIC+0x390>)
 800bb44:	fb23 bb07 	smlad	fp, r3, r7, fp
 800bb48:	4b3a      	ldr	r3, [pc, #232]	; (800bc34 <D128_GENERIC+0x394>)
 800bb4a:	fb25 b303 	smlad	r3, r5, r3, fp
 800bb4e:	9303      	str	r3, [sp, #12]
 800bb50:	f5aa 1480 	sub.w	r4, sl, #1048576	; 0x100000
 800bb54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bb56:	b183      	cbz	r3, 800bb7a <D128_GENERIC+0x2da>
 800bb58:	9a06      	ldr	r2, [sp, #24]
 800bb5a:	9907      	ldr	r1, [sp, #28]
 800bb5c:	4422      	add	r2, r4
 800bb5e:	9407      	str	r4, [sp, #28]
 800bb60:	1a52      	subs	r2, r2, r1
 800bb62:	fba2 0103 	umull	r0, r1, r2, r3
 800bb66:	17d5      	asrs	r5, r2, #31
 800bb68:	f110 4200 	adds.w	r2, r0, #2147483648	; 0x80000000
 800bb6c:	fb03 1105 	mla	r1, r3, r5, r1
 800bb70:	f141 0300 	adc.w	r3, r1, #0
 800bb74:	005b      	lsls	r3, r3, #1
 800bb76:	461c      	mov	r4, r3
 800bb78:	9306      	str	r3, [sp, #24]
 800bb7a:	9d01      	ldr	r5, [sp, #4]
 800bb7c:	01e4      	lsls	r4, r4, #7
 800bb7e:	9e05      	ldr	r6, [sp, #20]
 800bb80:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800bb84:	8d28      	ldrh	r0, [r5, #40]	; 0x28
 800bb86:	2300      	movs	r3, #0
 800bb88:	9908      	ldr	r1, [sp, #32]
 800bb8a:	fb06 f000 	mul.w	r0, r6, r0
 800bb8e:	3601      	adds	r6, #1
 800bb90:	fbc1 2304 	smlal	r2, r3, r1, r4
 800bb94:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bb96:	109b      	asrs	r3, r3, #2
 800bb98:	9605      	str	r6, [sp, #20]
 800bb9a:	f303 030f 	ssat	r3, #16, r3
 800bb9e:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
 800bba2:	8ceb      	ldrh	r3, [r5, #38]	; 0x26
 800bba4:	42b3      	cmp	r3, r6
 800bba6:	dd13      	ble.n	800bbd0 <D128_GENERIC+0x330>
 800bba8:	9b01      	ldr	r3, [sp, #4]
 800bbaa:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800bbac:	2a01      	cmp	r2, #1
 800bbae:	f47f ae95 	bne.w	800b8dc <D128_GENERIC+0x3c>
 800bbb2:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800bbb4:	f109 0610 	add.w	r6, r9, #16
 800bbb8:	0681      	lsls	r1, r0, #26
 800bbba:	e9d9 4200 	ldrd	r4, r2, [r9]
 800bbbe:	e9d9 3502 	ldrd	r3, r5, [r9, #8]
 800bbc2:	d518      	bpl.n	800bbf6 <D128_GENERIC+0x356>
 800bbc4:	ba64      	rev16	r4, r4
 800bbc6:	ba52      	rev16	r2, r2
 800bbc8:	ba5b      	rev16	r3, r3
 800bbca:	ba6d      	rev16	r5, r5
 800bbcc:	46b1      	mov	r9, r6
 800bbce:	e6da      	b.n	800b986 <D128_GENERIC+0xe6>
 800bbd0:	f8dd a010 	ldr.w	sl, [sp, #16]
 800bbd4:	9b01      	ldr	r3, [sp, #4]
 800bbd6:	2000      	movs	r0, #0
 800bbd8:	9903      	ldr	r1, [sp, #12]
 800bbda:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800bbdc:	6099      	str	r1, [r3, #8]
 800bbde:	9902      	ldr	r1, [sp, #8]
 800bbe0:	f8c3 a01c 	str.w	sl, [r3, #28]
 800bbe4:	60d9      	str	r1, [r3, #12]
 800bbe6:	9906      	ldr	r1, [sp, #24]
 800bbe8:	619a      	str	r2, [r3, #24]
 800bbea:	6119      	str	r1, [r3, #16]
 800bbec:	9907      	ldr	r1, [sp, #28]
 800bbee:	6159      	str	r1, [r3, #20]
 800bbf0:	b00d      	add	sp, #52	; 0x34
 800bbf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bbf6:	46b1      	mov	r9, r6
 800bbf8:	e6c5      	b.n	800b986 <D128_GENERIC+0xe6>
 800bbfa:	bf00      	nop
 800bbfc:	24000000 	.word	0x24000000
 800bc00:	00780069 	.word	0x00780069
 800bc04:	005b004e 	.word	0x005b004e
 800bc08:	00420037 	.word	0x00420037
 800bc0c:	002d0024 	.word	0x002d0024
 800bc10:	001c0015 	.word	0x001c0015
 800bc14:	000f000a 	.word	0x000f000a
 800bc18:	00060003 	.word	0x00060003
 800bc1c:	00880096 	.word	0x00880096
 800bc20:	00a200ac 	.word	0x00a200ac
 800bc24:	0015001c 	.word	0x0015001c
 800bc28:	0024002d 	.word	0x0024002d
 800bc2c:	00370042 	.word	0x00370042
 800bc30:	004e005b 	.word	0x004e005b
 800bc34:	00690078 	.word	0x00690078
 800bc38:	00b400ba 	.word	0x00b400ba
 800bc3c:	00be00c0 	.word	0x00be00c0
 800bc40:	00c000be 	.word	0x00c000be
 800bc44:	00ba00b4 	.word	0x00ba00b4
 800bc48:	00ac00a2 	.word	0x00ac00a2
 800bc4c:	00960088 	.word	0x00960088
 800bc50:	00030006 	.word	0x00030006
 800bc54:	000a000f 	.word	0x000a000f

0800bc58 <D16_1CH_HTONS_VOL_HP>:
 800bc58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc5c:	6993      	ldr	r3, [r2, #24]
 800bc5e:	b087      	sub	sp, #28
 800bc60:	4682      	mov	sl, r0
 800bc62:	8cd0      	ldrh	r0, [r2, #38]	; 0x26
 800bc64:	9304      	str	r3, [sp, #16]
 800bc66:	f8d2 b030 	ldr.w	fp, [r2, #48]	; 0x30
 800bc6a:	69d3      	ldr	r3, [r2, #28]
 800bc6c:	f8d2 e020 	ldr.w	lr, [r2, #32]
 800bc70:	e9d2 5402 	ldrd	r5, r4, [r2, #8]
 800bc74:	e9d2 6c04 	ldrd	r6, ip, [r2, #16]
 800bc78:	9403      	str	r4, [sp, #12]
 800bc7a:	2800      	cmp	r0, #0
 800bc7c:	d054      	beq.n	800bd28 <D16_1CH_HTONS_VOL_HP+0xd0>
 800bc7e:	f1a1 0902 	sub.w	r9, r1, #2
 800bc82:	eb0a 0140 	add.w	r1, sl, r0, lsl #1
 800bc86:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 800bd34 <D16_1CH_HTONS_VOL_HP+0xdc>
 800bc8a:	4650      	mov	r0, sl
 800bc8c:	9101      	str	r1, [sp, #4]
 800bc8e:	4619      	mov	r1, r3
 800bc90:	f8cd b008 	str.w	fp, [sp, #8]
 800bc94:	9205      	str	r2, [sp, #20]
 800bc96:	f850 3b02 	ldr.w	r3, [r0], #2
 800bc9a:	ba5b      	rev16	r3, r3
 800bc9c:	b2dc      	uxtb	r4, r3
 800bc9e:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800bca2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800bca6:	f858 4022 	ldr.w	r4, [r8, r2, lsl #2]
 800bcaa:	4419      	add	r1, r3
 800bcac:	eb04 2491 	add.w	r4, r4, r1, lsr #10
 800bcb0:	f3c1 0309 	ubfx	r3, r1, #0, #10
 800bcb4:	f3c4 0209 	ubfx	r2, r4, #0, #10
 800bcb8:	0aa1      	lsrs	r1, r4, #10
 800bcba:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 800bcbe:	4a1b      	ldr	r2, [pc, #108]	; (800bd2c <D16_1CH_HTONS_VOL_HP+0xd4>)
 800bcc0:	fb23 5402 	smlad	r4, r3, r2, r5
 800bcc4:	4a1a      	ldr	r2, [pc, #104]	; (800bd30 <D16_1CH_HTONS_VOL_HP+0xd8>)
 800bcc6:	fb23 f502 	smuad	r5, r3, r2
 800bcca:	f5a4 6400 	sub.w	r4, r4, #2048	; 0x800
 800bcce:	f04f 4a00 	mov.w	sl, #2147483648	; 0x80000000
 800bcd2:	f04f 0b00 	mov.w	fp, #0
 800bcd6:	19a2      	adds	r2, r4, r6
 800bcd8:	eba2 020c 	sub.w	r2, r2, ip
 800bcdc:	46a4      	mov	ip, r4
 800bcde:	17d7      	asrs	r7, r2, #31
 800bce0:	fba2 230e 	umull	r2, r3, r2, lr
 800bce4:	f112 4600 	adds.w	r6, r2, #2147483648	; 0x80000000
 800bce8:	fb0e 3307 	mla	r3, lr, r7, r3
 800bcec:	f143 0700 	adc.w	r7, r3, #0
 800bcf0:	9b02      	ldr	r3, [sp, #8]
 800bcf2:	047a      	lsls	r2, r7, #17
 800bcf4:	007e      	lsls	r6, r7, #1
 800bcf6:	fbc3 ab02 	smlal	sl, fp, r3, r2
 800bcfa:	ea4f 03ab 	mov.w	r3, fp, asr #2
 800bcfe:	f303 030f 	ssat	r3, #16, r3
 800bd02:	f829 3f02 	strh.w	r3, [r9, #2]!
 800bd06:	9b01      	ldr	r3, [sp, #4]
 800bd08:	4298      	cmp	r0, r3
 800bd0a:	d1c4      	bne.n	800bc96 <D16_1CH_HTONS_VOL_HP+0x3e>
 800bd0c:	460b      	mov	r3, r1
 800bd0e:	9a05      	ldr	r2, [sp, #20]
 800bd10:	2000      	movs	r0, #0
 800bd12:	9903      	ldr	r1, [sp, #12]
 800bd14:	61d3      	str	r3, [r2, #28]
 800bd16:	9b04      	ldr	r3, [sp, #16]
 800bd18:	6095      	str	r5, [r2, #8]
 800bd1a:	60d1      	str	r1, [r2, #12]
 800bd1c:	6193      	str	r3, [r2, #24]
 800bd1e:	e9c2 6404 	strd	r6, r4, [r2, #16]
 800bd22:	b007      	add	sp, #28
 800bd24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd28:	4664      	mov	r4, ip
 800bd2a:	e7f1      	b.n	800bd10 <D16_1CH_HTONS_VOL_HP+0xb8>
 800bd2c:	00030001 	.word	0x00030001
 800bd30:	00010003 	.word	0x00010003
 800bd34:	24000000 	.word	0x24000000

0800bd38 <D24_1CH_HTONS_VOL_HP>:
 800bd38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd3c:	6b16      	ldr	r6, [r2, #48]	; 0x30
 800bd3e:	b089      	sub	sp, #36	; 0x24
 800bd40:	6993      	ldr	r3, [r2, #24]
 800bd42:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 800bd44:	9604      	str	r6, [sp, #16]
 800bd46:	6a16      	ldr	r6, [r2, #32]
 800bd48:	9306      	str	r3, [sp, #24]
 800bd4a:	9505      	str	r5, [sp, #20]
 800bd4c:	69d3      	ldr	r3, [r2, #28]
 800bd4e:	9600      	str	r6, [sp, #0]
 800bd50:	e9d2 4a04 	ldrd	r4, sl, [r2, #16]
 800bd54:	e9d2 ce02 	ldrd	ip, lr, [r2, #8]
 800bd58:	2d00      	cmp	r5, #0
 800bd5a:	f000 8083 	beq.w	800be64 <D24_1CH_HTONS_VOL_HP+0x12c>
 800bd5e:	9207      	str	r2, [sp, #28]
 800bd60:	2600      	movs	r6, #0
 800bd62:	4622      	mov	r2, r4
 800bd64:	f1a1 0b02 	sub.w	fp, r1, #2
 800bd68:	4f3f      	ldr	r7, [pc, #252]	; (800be68 <D24_1CH_HTONS_VOL_HP+0x130>)
 800bd6a:	461d      	mov	r5, r3
 800bd6c:	f8cd a00c 	str.w	sl, [sp, #12]
 800bd70:	9c00      	ldr	r4, [sp, #0]
 800bd72:	e056      	b.n	800be22 <D24_1CH_HTONS_VOL_HP+0xea>
 800bd74:	7841      	ldrb	r1, [r0, #1]
 800bd76:	eb08 4809 	add.w	r8, r8, r9, lsl #16
 800bd7a:	3002      	adds	r0, #2
 800bd7c:	4488      	add	r8, r1
 800bd7e:	fa5f f388 	uxtb.w	r3, r8
 800bd82:	f3c8 2907 	ubfx	r9, r8, #8, #8
 800bd86:	ea4f 4818 	mov.w	r8, r8, lsr #16
 800bd8a:	f857 1023 	ldr.w	r1, [r7, r3, lsl #2]
 800bd8e:	f857 3029 	ldr.w	r3, [r7, r9, lsl #2]
 800bd92:	eb01 2195 	add.w	r1, r1, r5, lsr #10
 800bd96:	f857 5028 	ldr.w	r5, [r7, r8, lsl #2]
 800bd9a:	eb03 2891 	add.w	r8, r3, r1, lsr #10
 800bd9e:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800bda2:	f3c8 0309 	ubfx	r3, r8, #0, #10
 800bda6:	eb05 2598 	add.w	r5, r5, r8, lsr #10
 800bdaa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800bdae:	492f      	ldr	r1, [pc, #188]	; (800be6c <D24_1CH_HTONS_VOL_HP+0x134>)
 800bdb0:	fb23 e901 	smlad	r9, r3, r1, lr
 800bdb4:	492e      	ldr	r1, [pc, #184]	; (800be70 <D24_1CH_HTONS_VOL_HP+0x138>)
 800bdb6:	fb23 ce01 	smlad	lr, r3, r1, ip
 800bdba:	f3c5 0c09 	ubfx	ip, r5, #0, #10
 800bdbe:	2101      	movs	r1, #1
 800bdc0:	eb0c 084c 	add.w	r8, ip, ip, lsl #1
 800bdc4:	eb0e 0e48 	add.w	lr, lr, r8, lsl #1
 800bdc8:	fb23 f301 	smuad	r3, r3, r1
 800bdcc:	f5a9 51d8 	sub.w	r1, r9, #6912	; 0x1b00
 800bdd0:	eb08 0c03 	add.w	ip, r8, r3
 800bdd4:	9b03      	ldr	r3, [sp, #12]
 800bdd6:	f04f 0a00 	mov.w	sl, #0
 800bdda:	440a      	add	r2, r1
 800bddc:	3601      	adds	r6, #1
 800bdde:	9103      	str	r1, [sp, #12]
 800bde0:	1ad2      	subs	r2, r2, r3
 800bde2:	ea4f 79e2 	mov.w	r9, r2, asr #31
 800bde6:	fba2 2304 	umull	r2, r3, r2, r4
 800bdea:	e9cd 2300 	strd	r2, r3, [sp]
 800bdee:	fb04 3309 	mla	r3, r4, r9, r3
 800bdf2:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
 800bdf6:	9301      	str	r3, [sp, #4]
 800bdf8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bdfc:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 800be00:	f143 0300 	adc.w	r3, r3, #0
 800be04:	ea4f 38c3 	mov.w	r8, r3, lsl #15
 800be08:	005a      	lsls	r2, r3, #1
 800be0a:	9b04      	ldr	r3, [sp, #16]
 800be0c:	fbc3 9a08 	smlal	r9, sl, r3, r8
 800be10:	ea4f 03aa 	mov.w	r3, sl, asr #2
 800be14:	f303 030f 	ssat	r3, #16, r3
 800be18:	f82b 3f02 	strh.w	r3, [fp, #2]!
 800be1c:	9b05      	ldr	r3, [sp, #20]
 800be1e:	429e      	cmp	r6, r3
 800be20:	d010      	beq.n	800be44 <D24_1CH_HTONS_VOL_HP+0x10c>
 800be22:	f890 9003 	ldrb.w	r9, [r0, #3]
 800be26:	f016 0f01 	tst.w	r6, #1
 800be2a:	7801      	ldrb	r1, [r0, #0]
 800be2c:	ea4f 2309 	mov.w	r3, r9, lsl #8
 800be30:	ea4f 2801 	mov.w	r8, r1, lsl #8
 800be34:	d09e      	beq.n	800bd74 <D24_1CH_HTONS_VOL_HP+0x3c>
 800be36:	f890 8002 	ldrb.w	r8, [r0, #2]
 800be3a:	3004      	adds	r0, #4
 800be3c:	eb03 4808 	add.w	r8, r3, r8, lsl #16
 800be40:	4488      	add	r8, r1
 800be42:	e79c      	b.n	800bd7e <D24_1CH_HTONS_VOL_HP+0x46>
 800be44:	4614      	mov	r4, r2
 800be46:	462b      	mov	r3, r5
 800be48:	9a07      	ldr	r2, [sp, #28]
 800be4a:	2000      	movs	r0, #0
 800be4c:	61d3      	str	r3, [r2, #28]
 800be4e:	9b06      	ldr	r3, [sp, #24]
 800be50:	f8c2 c008 	str.w	ip, [r2, #8]
 800be54:	f8c2 e00c 	str.w	lr, [r2, #12]
 800be58:	6193      	str	r3, [r2, #24]
 800be5a:	e9c2 4104 	strd	r4, r1, [r2, #16]
 800be5e:	b009      	add	sp, #36	; 0x24
 800be60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be64:	4651      	mov	r1, sl
 800be66:	e7f0      	b.n	800be4a <D24_1CH_HTONS_VOL_HP+0x112>
 800be68:	24000000 	.word	0x24000000
 800be6c:	00030001 	.word	0x00030001
 800be70:	00060007 	.word	0x00060007

0800be74 <D32_1CH_HTONS_VOL_HP>:
 800be74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be78:	6993      	ldr	r3, [r2, #24]
 800be7a:	b087      	sub	sp, #28
 800be7c:	4683      	mov	fp, r0
 800be7e:	8cd0      	ldrh	r0, [r2, #38]	; 0x26
 800be80:	9304      	str	r3, [sp, #16]
 800be82:	69d5      	ldr	r5, [r2, #28]
 800be84:	6b14      	ldr	r4, [r2, #48]	; 0x30
 800be86:	f8d2 a020 	ldr.w	sl, [r2, #32]
 800be8a:	e9d2 8e04 	ldrd	r8, lr, [r2, #16]
 800be8e:	e9d2 3c02 	ldrd	r3, ip, [r2, #8]
 800be92:	2800      	cmp	r0, #0
 800be94:	d077      	beq.n	800bf86 <D32_1CH_HTONS_VOL_HP+0x112>
 800be96:	460f      	mov	r7, r1
 800be98:	46f1      	mov	r9, lr
 800be9a:	eb01 0140 	add.w	r1, r1, r0, lsl #1
 800be9e:	f8cd 8000 	str.w	r8, [sp]
 800bea2:	4e3a      	ldr	r6, [pc, #232]	; (800bf8c <D32_1CH_HTONS_VOL_HP+0x118>)
 800bea4:	469e      	mov	lr, r3
 800bea6:	46a0      	mov	r8, r4
 800bea8:	9103      	str	r1, [sp, #12]
 800beaa:	9205      	str	r2, [sp, #20]
 800beac:	f85b 4b04 	ldr.w	r4, [fp], #4
 800beb0:	ba64      	rev16	r4, r4
 800beb2:	b2e0      	uxtb	r0, r4
 800beb4:	f3c4 2307 	ubfx	r3, r4, #8, #8
 800beb8:	f3c4 4107 	ubfx	r1, r4, #16, #8
 800bebc:	0e24      	lsrs	r4, r4, #24
 800bebe:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 800bec2:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 800bec6:	eb00 2095 	add.w	r0, r0, r5, lsr #10
 800beca:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 800bece:	f856 5024 	ldr.w	r5, [r6, r4, lsl #2]
 800bed2:	eb03 2390 	add.w	r3, r3, r0, lsr #10
 800bed6:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800beda:	eb01 2193 	add.w	r1, r1, r3, lsr #10
 800bede:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bee2:	eb05 2591 	add.w	r5, r5, r1, lsr #10
 800bee6:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800beea:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800beee:	f3c5 0009 	ubfx	r0, r5, #0, #10
 800bef2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800bef6:	4826      	ldr	r0, [pc, #152]	; (800bf90 <D32_1CH_HTONS_VOL_HP+0x11c>)
 800bef8:	fb23 c400 	smlad	r4, r3, r0, ip
 800befc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800bf00:	fb21 4402 	smlad	r4, r1, r2, r4
 800bf04:	4823      	ldr	r0, [pc, #140]	; (800bf94 <D32_1CH_HTONS_VOL_HP+0x120>)
 800bf06:	fb23 ec00 	smlad	ip, r3, r0, lr
 800bf0a:	4823      	ldr	r0, [pc, #140]	; (800bf98 <D32_1CH_HTONS_VOL_HP+0x124>)
 800bf0c:	fb21 cc00 	smlad	ip, r1, r0, ip
 800bf10:	2201      	movs	r2, #1
 800bf12:	fb23 f302 	smuad	r3, r3, r2
 800bf16:	4821      	ldr	r0, [pc, #132]	; (800bf9c <D32_1CH_HTONS_VOL_HP+0x128>)
 800bf18:	fb21 3e00 	smlad	lr, r1, r0, r3
 800bf1c:	9b00      	ldr	r3, [sp, #0]
 800bf1e:	f5a4 4480 	sub.w	r4, r4, #16384	; 0x4000
 800bf22:	4423      	add	r3, r4
 800bf24:	eba3 0209 	sub.w	r2, r3, r9
 800bf28:	46a1      	mov	r9, r4
 800bf2a:	17d1      	asrs	r1, r2, #31
 800bf2c:	fba2 230a 	umull	r2, r3, r2, sl
 800bf30:	e9cd 2300 	strd	r2, r3, [sp]
 800bf34:	fb0a 3301 	mla	r3, sl, r1, r3
 800bf38:	9301      	str	r3, [sp, #4]
 800bf3a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bf3e:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 800bf42:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800bf46:	f143 0300 	adc.w	r3, r3, #0
 800bf4a:	0399      	lsls	r1, r3, #14
 800bf4c:	005b      	lsls	r3, r3, #1
 800bf4e:	9300      	str	r3, [sp, #0]
 800bf50:	2300      	movs	r3, #0
 800bf52:	fbc8 2301 	smlal	r2, r3, r8, r1
 800bf56:	109b      	asrs	r3, r3, #2
 800bf58:	f303 030f 	ssat	r3, #16, r3
 800bf5c:	f827 3b02 	strh.w	r3, [r7], #2
 800bf60:	9b03      	ldr	r3, [sp, #12]
 800bf62:	429f      	cmp	r7, r3
 800bf64:	d1a2      	bne.n	800beac <D32_1CH_HTONS_VOL_HP+0x38>
 800bf66:	4673      	mov	r3, lr
 800bf68:	f8dd 8000 	ldr.w	r8, [sp]
 800bf6c:	9a05      	ldr	r2, [sp, #20]
 800bf6e:	6093      	str	r3, [r2, #8]
 800bf70:	2000      	movs	r0, #0
 800bf72:	9b04      	ldr	r3, [sp, #16]
 800bf74:	f8c2 c00c 	str.w	ip, [r2, #12]
 800bf78:	61d5      	str	r5, [r2, #28]
 800bf7a:	6193      	str	r3, [r2, #24]
 800bf7c:	e9c2 8404 	strd	r8, r4, [r2, #16]
 800bf80:	b007      	add	sp, #28
 800bf82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf86:	4674      	mov	r4, lr
 800bf88:	e7f1      	b.n	800bf6e <D32_1CH_HTONS_VOL_HP+0xfa>
 800bf8a:	bf00      	nop
 800bf8c:	24000000 	.word	0x24000000
 800bf90:	00060003 	.word	0x00060003
 800bf94:	000a000c 	.word	0x000a000c
 800bf98:	000c000a 	.word	0x000c000a
 800bf9c:	00030006 	.word	0x00030006

0800bfa0 <D48_1CH_HTONS_VOL_HP>:
 800bfa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfa4:	6b17      	ldr	r7, [r2, #48]	; 0x30
 800bfa6:	b087      	sub	sp, #28
 800bfa8:	6993      	ldr	r3, [r2, #24]
 800bfaa:	9701      	str	r7, [sp, #4]
 800bfac:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 800bfae:	6a17      	ldr	r7, [r2, #32]
 800bfb0:	9304      	str	r3, [sp, #16]
 800bfb2:	69d6      	ldr	r6, [r2, #28]
 800bfb4:	9702      	str	r7, [sp, #8]
 800bfb6:	e9d2 4e04 	ldrd	r4, lr, [r2, #16]
 800bfba:	e9d2 3c02 	ldrd	r3, ip, [r2, #8]
 800bfbe:	2d00      	cmp	r5, #0
 800bfc0:	f000 8093 	beq.w	800c0ea <D48_1CH_HTONS_VOL_HP+0x14a>
 800bfc4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bfc8:	f1a1 0b02 	sub.w	fp, r1, #2
 800bfcc:	46f2      	mov	sl, lr
 800bfce:	4f48      	ldr	r7, [pc, #288]	; (800c0f0 <D48_1CH_HTONS_VOL_HP+0x150>)
 800bfd0:	eb00 0145 	add.w	r1, r0, r5, lsl #1
 800bfd4:	469e      	mov	lr, r3
 800bfd6:	9205      	str	r2, [sp, #20]
 800bfd8:	9103      	str	r1, [sp, #12]
 800bfda:	e9d0 3200 	ldrd	r3, r2, [r0]
 800bfde:	3006      	adds	r0, #6
 800bfe0:	ba5b      	rev16	r3, r3
 800bfe2:	fa92 f992 	rev16.w	r9, r2
 800bfe6:	b2dd      	uxtb	r5, r3
 800bfe8:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800bfec:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800bff0:	0e1b      	lsrs	r3, r3, #24
 800bff2:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 800bff6:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 800bffa:	eb05 2696 	add.w	r6, r5, r6, lsr #10
 800bffe:	f857 5022 	ldr.w	r5, [r7, r2, lsl #2]
 800c002:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 800c006:	fa5f f289 	uxtb.w	r2, r9
 800c00a:	eb01 2196 	add.w	r1, r1, r6, lsr #10
 800c00e:	f3c9 2907 	ubfx	r9, r9, #8, #8
 800c012:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 800c016:	f3c6 0809 	ubfx	r8, r6, #0, #10
 800c01a:	eb05 2591 	add.w	r5, r5, r1, lsr #10
 800c01e:	f857 6029 	ldr.w	r6, [r7, r9, lsl #2]
 800c022:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800c026:	eb03 2395 	add.w	r3, r3, r5, lsr #10
 800c02a:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800c02e:	ea41 4808 	orr.w	r8, r1, r8, lsl #16
 800c032:	eb02 2293 	add.w	r2, r2, r3, lsr #10
 800c036:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c03a:	eb06 2692 	add.w	r6, r6, r2, lsr #10
 800c03e:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800c042:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
 800c046:	f3c6 0309 	ubfx	r3, r6, #0, #10
 800c04a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 800c04e:	4b29      	ldr	r3, [pc, #164]	; (800c0f4 <D48_1CH_HTONS_VOL_HP+0x154>)
 800c050:	fb28 c103 	smlad	r1, r8, r3, ip
 800c054:	4b28      	ldr	r3, [pc, #160]	; (800c0f8 <D48_1CH_HTONS_VOL_HP+0x158>)
 800c056:	fb25 1103 	smlad	r1, r5, r3, r1
 800c05a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800c05e:	fb22 1903 	smlad	r9, r2, r3, r1
 800c062:	4b26      	ldr	r3, [pc, #152]	; (800c0fc <D48_1CH_HTONS_VOL_HP+0x15c>)
 800c064:	fb28 ec03 	smlad	ip, r8, r3, lr
 800c068:	f04f 131b 	mov.w	r3, #1769499	; 0x1b001b
 800c06c:	fb25 cc03 	smlad	ip, r5, r3, ip
 800c070:	4b23      	ldr	r3, [pc, #140]	; (800c100 <D48_1CH_HTONS_VOL_HP+0x160>)
 800c072:	fb22 cc03 	smlad	ip, r2, r3, ip
 800c076:	2101      	movs	r1, #1
 800c078:	fb28 f801 	smuad	r8, r8, r1
 800c07c:	4b21      	ldr	r3, [pc, #132]	; (800c104 <D48_1CH_HTONS_VOL_HP+0x164>)
 800c07e:	fb25 8503 	smlad	r5, r5, r3, r8
 800c082:	4b21      	ldr	r3, [pc, #132]	; (800c108 <D48_1CH_HTONS_VOL_HP+0x168>)
 800c084:	fb22 5e03 	smlad	lr, r2, r3, r5
 800c088:	f5a9 4158 	sub.w	r1, r9, #55296	; 0xd800
 800c08c:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 800c090:	190a      	adds	r2, r1, r4
 800c092:	9c02      	ldr	r4, [sp, #8]
 800c094:	eba2 020a 	sub.w	r2, r2, sl
 800c098:	468a      	mov	sl, r1
 800c09a:	ea4f 79e2 	mov.w	r9, r2, asr #31
 800c09e:	fba2 2304 	umull	r2, r3, r2, r4
 800c0a2:	fb04 3309 	mla	r3, r4, r9, r3
 800c0a6:	f112 4400 	adds.w	r4, r2, #2147483648	; 0x80000000
 800c0aa:	f04f 0900 	mov.w	r9, #0
 800c0ae:	f143 0500 	adc.w	r5, r3, #0
 800c0b2:	9b01      	ldr	r3, [sp, #4]
 800c0b4:	032a      	lsls	r2, r5, #12
 800c0b6:	006c      	lsls	r4, r5, #1
 800c0b8:	fbc3 8902 	smlal	r8, r9, r3, r2
 800c0bc:	ea4f 03a9 	mov.w	r3, r9, asr #2
 800c0c0:	f303 030f 	ssat	r3, #16, r3
 800c0c4:	f82b 3f02 	strh.w	r3, [fp, #2]!
 800c0c8:	9b03      	ldr	r3, [sp, #12]
 800c0ca:	4283      	cmp	r3, r0
 800c0cc:	d185      	bne.n	800bfda <D48_1CH_HTONS_VOL_HP+0x3a>
 800c0ce:	4673      	mov	r3, lr
 800c0d0:	9a05      	ldr	r2, [sp, #20]
 800c0d2:	6093      	str	r3, [r2, #8]
 800c0d4:	2000      	movs	r0, #0
 800c0d6:	9b04      	ldr	r3, [sp, #16]
 800c0d8:	f8c2 c00c 	str.w	ip, [r2, #12]
 800c0dc:	61d6      	str	r6, [r2, #28]
 800c0de:	6193      	str	r3, [r2, #24]
 800c0e0:	e9c2 4104 	strd	r4, r1, [r2, #16]
 800c0e4:	b007      	add	sp, #28
 800c0e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c0ea:	4671      	mov	r1, lr
 800c0ec:	e7f1      	b.n	800c0d2 <D48_1CH_HTONS_VOL_HP+0x132>
 800c0ee:	bf00      	nop
 800c0f0:	24000000 	.word	0x24000000
 800c0f4:	000f000a 	.word	0x000f000a
 800c0f8:	00060003 	.word	0x00060003
 800c0fc:	00150019 	.word	0x00150019
 800c100:	00190015 	.word	0x00190015
 800c104:	00030006 	.word	0x00030006
 800c108:	000a000f 	.word	0x000a000f

0800c10c <D64_1CH_HTONS_VOL_HP>:
 800c10c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c110:	6b15      	ldr	r5, [r2, #48]	; 0x30
 800c112:	b089      	sub	sp, #36	; 0x24
 800c114:	6993      	ldr	r3, [r2, #24]
 800c116:	4686      	mov	lr, r0
 800c118:	9503      	str	r5, [sp, #12]
 800c11a:	8cd0      	ldrh	r0, [r2, #38]	; 0x26
 800c11c:	6a15      	ldr	r5, [r2, #32]
 800c11e:	9306      	str	r3, [sp, #24]
 800c120:	69d6      	ldr	r6, [r2, #28]
 800c122:	9504      	str	r5, [sp, #16]
 800c124:	e9d2 8404 	ldrd	r8, r4, [r2, #16]
 800c128:	e9d2 3c02 	ldrd	r3, ip, [r2, #8]
 800c12c:	2800      	cmp	r0, #0
 800c12e:	f000 80a4 	beq.w	800c27a <D64_1CH_HTONS_VOL_HP+0x16e>
 800c132:	460f      	mov	r7, r1
 800c134:	46f1      	mov	r9, lr
 800c136:	eb01 0140 	add.w	r1, r1, r0, lsl #1
 800c13a:	4d56      	ldr	r5, [pc, #344]	; (800c294 <D64_1CH_HTONS_VOL_HP+0x188>)
 800c13c:	46a2      	mov	sl, r4
 800c13e:	469e      	mov	lr, r3
 800c140:	9105      	str	r1, [sp, #20]
 800c142:	9207      	str	r2, [sp, #28]
 800c144:	f859 1b08 	ldr.w	r1, [r9], #8
 800c148:	f859 3c04 	ldr.w	r3, [r9, #-4]
 800c14c:	ba49      	rev16	r1, r1
 800c14e:	fa93 fb93 	rev16.w	fp, r3
 800c152:	b2cb      	uxtb	r3, r1
 800c154:	f3c1 2207 	ubfx	r2, r1, #8, #8
 800c158:	f3c1 4007 	ubfx	r0, r1, #16, #8
 800c15c:	0e09      	lsrs	r1, r1, #24
 800c15e:	f855 4023 	ldr.w	r4, [r5, r3, lsl #2]
 800c162:	fa5f f38b 	uxtb.w	r3, fp
 800c166:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 800c16a:	4426      	add	r6, r4
 800c16c:	f855 4020 	ldr.w	r4, [r5, r0, lsl #2]
 800c170:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 800c174:	eb02 2296 	add.w	r2, r2, r6, lsr #10
 800c178:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
 800c17c:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800c180:	f3cb 2307 	ubfx	r3, fp, #8, #8
 800c184:	eb04 2492 	add.w	r4, r4, r2, lsr #10
 800c188:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800c18c:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 800c190:	eb01 2194 	add.w	r1, r1, r4, lsr #10
 800c194:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800c198:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 800c19c:	f3cb 4607 	ubfx	r6, fp, #16, #8
 800c1a0:	eb00 2091 	add.w	r0, r0, r1, lsr #10
 800c1a4:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800c1a8:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 800c1ac:	ea4f 6b1b 	mov.w	fp, fp, lsr #24
 800c1b0:	eb03 2390 	add.w	r3, r3, r0, lsr #10
 800c1b4:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800c1b8:	f855 b02b 	ldr.w	fp, [r5, fp, lsl #2]
 800c1bc:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800c1c0:	eb06 2693 	add.w	r6, r6, r3, lsr #10
 800c1c4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c1c8:	eb0b 2b96 	add.w	fp, fp, r6, lsr #10
 800c1cc:	f3c6 0409 	ubfx	r4, r6, #0, #10
 800c1d0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800c1d4:	f3cb 0009 	ubfx	r0, fp, #0, #10
 800c1d8:	ea4f 269b 	mov.w	r6, fp, lsr #10
 800c1dc:	ea40 4b04 	orr.w	fp, r0, r4, lsl #16
 800c1e0:	482d      	ldr	r0, [pc, #180]	; (800c298 <D64_1CH_HTONS_VOL_HP+0x18c>)
 800c1e2:	fb22 cc00 	smlad	ip, r2, r0, ip
 800c1e6:	482d      	ldr	r0, [pc, #180]	; (800c29c <D64_1CH_HTONS_VOL_HP+0x190>)
 800c1e8:	fb21 cc00 	smlad	ip, r1, r0, ip
 800c1ec:	482c      	ldr	r0, [pc, #176]	; (800c2a0 <D64_1CH_HTONS_VOL_HP+0x194>)
 800c1ee:	fb23 cc00 	smlad	ip, r3, r0, ip
 800c1f2:	f44f 3480 	mov.w	r4, #65536	; 0x10000
 800c1f6:	fb2b c404 	smlad	r4, fp, r4, ip
 800c1fa:	482a      	ldr	r0, [pc, #168]	; (800c2a4 <D64_1CH_HTONS_VOL_HP+0x198>)
 800c1fc:	fb22 ec00 	smlad	ip, r2, r0, lr
 800c200:	fb2b cc10 	smladx	ip, fp, r0, ip
 800c204:	4828      	ldr	r0, [pc, #160]	; (800c2a8 <D64_1CH_HTONS_VOL_HP+0x19c>)
 800c206:	fb21 cc00 	smlad	ip, r1, r0, ip
 800c20a:	fb23 cc10 	smladx	ip, r3, r0, ip
 800c20e:	f04f 0e01 	mov.w	lr, #1
 800c212:	fb22 f20e 	smuad	r2, r2, lr
 800c216:	4825      	ldr	r0, [pc, #148]	; (800c2ac <D64_1CH_HTONS_VOL_HP+0x1a0>)
 800c218:	fb21 2100 	smlad	r1, r1, r0, r2
 800c21c:	4a24      	ldr	r2, [pc, #144]	; (800c2b0 <D64_1CH_HTONS_VOL_HP+0x1a4>)
 800c21e:	fb23 1302 	smlad	r3, r3, r2, r1
 800c222:	4a24      	ldr	r2, [pc, #144]	; (800c2b4 <D64_1CH_HTONS_VOL_HP+0x1a8>)
 800c224:	fb2b 3e02 	smlad	lr, fp, r2, r3
 800c228:	f5a4 3400 	sub.w	r4, r4, #131072	; 0x20000
 800c22c:	eb04 0208 	add.w	r2, r4, r8
 800c230:	eba2 020a 	sub.w	r2, r2, sl
 800c234:	46a2      	mov	sl, r4
 800c236:	4610      	mov	r0, r2
 800c238:	17d1      	asrs	r1, r2, #31
 800c23a:	e9cd 0100 	strd	r0, r1, [sp]
 800c23e:	9904      	ldr	r1, [sp, #16]
 800c240:	9801      	ldr	r0, [sp, #4]
 800c242:	fba2 2301 	umull	r2, r3, r2, r1
 800c246:	fb01 3300 	mla	r3, r1, r0, r3
 800c24a:	f112 4000 	adds.w	r0, r2, #2147483648	; 0x80000000
 800c24e:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800c252:	f143 0100 	adc.w	r1, r3, #0
 800c256:	9b03      	ldr	r3, [sp, #12]
 800c258:	02ca      	lsls	r2, r1, #11
 800c25a:	ea4f 0841 	mov.w	r8, r1, lsl #1
 800c25e:	2100      	movs	r1, #0
 800c260:	fbc3 0102 	smlal	r0, r1, r3, r2
 800c264:	108b      	asrs	r3, r1, #2
 800c266:	f303 030f 	ssat	r3, #16, r3
 800c26a:	f827 3b02 	strh.w	r3, [r7], #2
 800c26e:	9b05      	ldr	r3, [sp, #20]
 800c270:	429f      	cmp	r7, r3
 800c272:	f47f af67 	bne.w	800c144 <D64_1CH_HTONS_VOL_HP+0x38>
 800c276:	4673      	mov	r3, lr
 800c278:	9a07      	ldr	r2, [sp, #28]
 800c27a:	6093      	str	r3, [r2, #8]
 800c27c:	2000      	movs	r0, #0
 800c27e:	9b06      	ldr	r3, [sp, #24]
 800c280:	f8c2 c00c 	str.w	ip, [r2, #12]
 800c284:	61d6      	str	r6, [r2, #28]
 800c286:	6193      	str	r3, [r2, #24]
 800c288:	e9c2 8404 	strd	r8, r4, [r2, #16]
 800c28c:	b009      	add	sp, #36	; 0x24
 800c28e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c292:	bf00      	nop
 800c294:	24000000 	.word	0x24000000
 800c298:	001c0015 	.word	0x001c0015
 800c29c:	000f000a 	.word	0x000f000a
 800c2a0:	00060003 	.word	0x00060003
 800c2a4:	0024002a 	.word	0x0024002a
 800c2a8:	002e0030 	.word	0x002e0030
 800c2ac:	00030006 	.word	0x00030006
 800c2b0:	000a000f 	.word	0x000a000f
 800c2b4:	0015001c 	.word	0x0015001c

0800c2b8 <D80_1CH_HTONS_VOL_HP>:
 800c2b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2bc:	6913      	ldr	r3, [r2, #16]
 800c2be:	b089      	sub	sp, #36	; 0x24
 800c2c0:	6b16      	ldr	r6, [r2, #48]	; 0x30
 800c2c2:	9301      	str	r3, [sp, #4]
 800c2c4:	9603      	str	r6, [sp, #12]
 800c2c6:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 800c2c8:	6a16      	ldr	r6, [r2, #32]
 800c2ca:	e9d2 5305 	ldrd	r5, r3, [r2, #20]
 800c2ce:	e9d2 7c02 	ldrd	r7, ip, [r2, #8]
 800c2d2:	9306      	str	r3, [sp, #24]
 800c2d4:	9604      	str	r6, [sp, #16]
 800c2d6:	69d3      	ldr	r3, [r2, #28]
 800c2d8:	2c00      	cmp	r4, #0
 800c2da:	f000 80ce 	beq.w	800c47a <D80_1CH_HTONS_VOL_HP+0x1c2>
 800c2de:	3902      	subs	r1, #2
 800c2e0:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 800c2e4:	4e66      	ldr	r6, [pc, #408]	; (800c480 <D80_1CH_HTONS_VOL_HP+0x1c8>)
 800c2e6:	469e      	mov	lr, r3
 800c2e8:	9102      	str	r1, [sp, #8]
 800c2ea:	46aa      	mov	sl, r5
 800c2ec:	eb00 0144 	add.w	r1, r0, r4, lsl #1
 800c2f0:	9207      	str	r2, [sp, #28]
 800c2f2:	9105      	str	r1, [sp, #20]
 800c2f4:	6883      	ldr	r3, [r0, #8]
 800c2f6:	e9d0 4200 	ldrd	r4, r2, [r0]
 800c2fa:	300a      	adds	r0, #10
 800c2fc:	ba64      	rev16	r4, r4
 800c2fe:	ba52      	rev16	r2, r2
 800c300:	fa93 fb93 	rev16.w	fp, r3
 800c304:	b2e5      	uxtb	r5, r4
 800c306:	f3c4 2307 	ubfx	r3, r4, #8, #8
 800c30a:	f3c4 4107 	ubfx	r1, r4, #16, #8
 800c30e:	0e24      	lsrs	r4, r4, #24
 800c310:	f856 8025 	ldr.w	r8, [r6, r5, lsl #2]
 800c314:	b2d5      	uxtb	r5, r2
 800c316:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 800c31a:	44c6      	add	lr, r8
 800c31c:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 800c320:	f856 4024 	ldr.w	r4, [r6, r4, lsl #2]
 800c324:	eb03 239e 	add.w	r3, r3, lr, lsr #10
 800c328:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
 800c32c:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800c330:	eb01 2993 	add.w	r9, r1, r3, lsr #10
 800c334:	f3c2 2107 	ubfx	r1, r2, #8, #8
 800c338:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c33c:	eb04 2499 	add.w	r4, r4, r9, lsr #10
 800c340:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 800c344:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 800c348:	f3cb 2e07 	ubfx	lr, fp, #8, #8
 800c34c:	eb05 2894 	add.w	r8, r5, r4, lsr #10
 800c350:	f3c2 4507 	ubfx	r5, r2, #16, #8
 800c354:	0e12      	lsrs	r2, r2, #24
 800c356:	f856 e02e 	ldr.w	lr, [r6, lr, lsl #2]
 800c35a:	eb01 2198 	add.w	r1, r1, r8, lsr #10
 800c35e:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
 800c362:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
 800c366:	fa5f fb8b 	uxtb.w	fp, fp
 800c36a:	eb05 2591 	add.w	r5, r5, r1, lsr #10
 800c36e:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800c372:	f856 b02b 	ldr.w	fp, [r6, fp, lsl #2]
 800c376:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800c37a:	eb02 2295 	add.w	r2, r2, r5, lsr #10
 800c37e:	f3c9 0909 	ubfx	r9, r9, #0, #10
 800c382:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800c386:	ea41 4808 	orr.w	r8, r1, r8, lsl #16
 800c38a:	eb0b 2b92 	add.w	fp, fp, r2, lsr #10
 800c38e:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800c392:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800c396:	eb0e 2e9b 	add.w	lr, lr, fp, lsr #10
 800c39a:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 800c39e:	ea44 4409 	orr.w	r4, r4, r9, lsl #16
 800c3a2:	f3ce 0109 	ubfx	r1, lr, #0, #10
 800c3a6:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
 800c3aa:	ea4f 2e9e 	mov.w	lr, lr, lsr #10
 800c3ae:	ea41 4b0b 	orr.w	fp, r1, fp, lsl #16
 800c3b2:	4934      	ldr	r1, [pc, #208]	; (800c484 <D80_1CH_HTONS_VOL_HP+0x1cc>)
 800c3b4:	fb23 cc01 	smlad	ip, r3, r1, ip
 800c3b8:	4933      	ldr	r1, [pc, #204]	; (800c488 <D80_1CH_HTONS_VOL_HP+0x1d0>)
 800c3ba:	fb24 cc01 	smlad	ip, r4, r1, ip
 800c3be:	4933      	ldr	r1, [pc, #204]	; (800c48c <D80_1CH_HTONS_VOL_HP+0x1d4>)
 800c3c0:	fb28 cc01 	smlad	ip, r8, r1, ip
 800c3c4:	4932      	ldr	r1, [pc, #200]	; (800c490 <D80_1CH_HTONS_VOL_HP+0x1d8>)
 800c3c6:	fb22 cc01 	smlad	ip, r2, r1, ip
 800c3ca:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800c3ce:	fb2b c901 	smlad	r9, fp, r1, ip
 800c3d2:	4930      	ldr	r1, [pc, #192]	; (800c494 <D80_1CH_HTONS_VOL_HP+0x1dc>)
 800c3d4:	fb23 7701 	smlad	r7, r3, r1, r7
 800c3d8:	492f      	ldr	r1, [pc, #188]	; (800c498 <D80_1CH_HTONS_VOL_HP+0x1e0>)
 800c3da:	fb24 7701 	smlad	r7, r4, r1, r7
 800c3de:	f04f 1c4b 	mov.w	ip, #4915275	; 0x4b004b
 800c3e2:	fb28 7c0c 	smlad	ip, r8, ip, r7
 800c3e6:	492d      	ldr	r1, [pc, #180]	; (800c49c <D80_1CH_HTONS_VOL_HP+0x1e4>)
 800c3e8:	fb22 cc01 	smlad	ip, r2, r1, ip
 800c3ec:	492c      	ldr	r1, [pc, #176]	; (800c4a0 <D80_1CH_HTONS_VOL_HP+0x1e8>)
 800c3ee:	fb2b cc01 	smlad	ip, fp, r1, ip
 800c3f2:	2101      	movs	r1, #1
 800c3f4:	fb23 f301 	smuad	r3, r3, r1
 800c3f8:	492a      	ldr	r1, [pc, #168]	; (800c4a4 <D80_1CH_HTONS_VOL_HP+0x1ec>)
 800c3fa:	fb24 3401 	smlad	r4, r4, r1, r3
 800c3fe:	492a      	ldr	r1, [pc, #168]	; (800c4a8 <D80_1CH_HTONS_VOL_HP+0x1f0>)
 800c400:	fb28 4101 	smlad	r1, r8, r1, r4
 800c404:	4f29      	ldr	r7, [pc, #164]	; (800c4ac <D80_1CH_HTONS_VOL_HP+0x1f4>)
 800c406:	fb22 1207 	smlad	r2, r2, r7, r1
 800c40a:	4f29      	ldr	r7, [pc, #164]	; (800c4b0 <D80_1CH_HTONS_VOL_HP+0x1f8>)
 800c40c:	fb2b 2707 	smlad	r7, fp, r7, r2
 800c410:	f5a9 317a 	sub.w	r1, r9, #256000	; 0x3e800
 800c414:	9b01      	ldr	r3, [sp, #4]
 800c416:	9c04      	ldr	r4, [sp, #16]
 800c418:	440b      	add	r3, r1
 800c41a:	eba3 020a 	sub.w	r2, r3, sl
 800c41e:	468a      	mov	sl, r1
 800c420:	ea4f 79e2 	mov.w	r9, r2, asr #31
 800c424:	fba2 2304 	umull	r2, r3, r2, r4
 800c428:	fb04 3309 	mla	r3, r4, r9, r3
 800c42c:	f112 4400 	adds.w	r4, r2, #2147483648	; 0x80000000
 800c430:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800c434:	f143 0500 	adc.w	r5, r3, #0
 800c438:	006b      	lsls	r3, r5, #1
 800c43a:	02aa      	lsls	r2, r5, #10
 800c43c:	2500      	movs	r5, #0
 800c43e:	9301      	str	r3, [sp, #4]
 800c440:	9b03      	ldr	r3, [sp, #12]
 800c442:	fbc3 4502 	smlal	r4, r5, r3, r2
 800c446:	9a02      	ldr	r2, [sp, #8]
 800c448:	10ab      	asrs	r3, r5, #2
 800c44a:	f303 030f 	ssat	r3, #16, r3
 800c44e:	f822 3f02 	strh.w	r3, [r2, #2]!
 800c452:	9b05      	ldr	r3, [sp, #20]
 800c454:	9202      	str	r2, [sp, #8]
 800c456:	4298      	cmp	r0, r3
 800c458:	f47f af4c 	bne.w	800c2f4 <D80_1CH_HTONS_VOL_HP+0x3c>
 800c45c:	4673      	mov	r3, lr
 800c45e:	9a07      	ldr	r2, [sp, #28]
 800c460:	61d3      	str	r3, [r2, #28]
 800c462:	2000      	movs	r0, #0
 800c464:	9b01      	ldr	r3, [sp, #4]
 800c466:	6097      	str	r7, [r2, #8]
 800c468:	f8c2 c00c 	str.w	ip, [r2, #12]
 800c46c:	e9c2 3104 	strd	r3, r1, [r2, #16]
 800c470:	9b06      	ldr	r3, [sp, #24]
 800c472:	6193      	str	r3, [r2, #24]
 800c474:	b009      	add	sp, #36	; 0x24
 800c476:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c47a:	4629      	mov	r1, r5
 800c47c:	e7f0      	b.n	800c460 <D80_1CH_HTONS_VOL_HP+0x1a8>
 800c47e:	bf00      	nop
 800c480:	24000000 	.word	0x24000000
 800c484:	002d0024 	.word	0x002d0024
 800c488:	001c0015 	.word	0x001c0015
 800c48c:	000f000a 	.word	0x000f000a
 800c490:	00060003 	.word	0x00060003
 800c494:	0037003f 	.word	0x0037003f
 800c498:	00450049 	.word	0x00450049
 800c49c:	00490045 	.word	0x00490045
 800c4a0:	003f0037 	.word	0x003f0037
 800c4a4:	00030006 	.word	0x00030006
 800c4a8:	000a000f 	.word	0x000a000f
 800c4ac:	0015001c 	.word	0x0015001c
 800c4b0:	0024002d 	.word	0x0024002d

0800c4b4 <D128_1CH_HTONS_VOL_HP>:
 800c4b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4b8:	6914      	ldr	r4, [r2, #16]
 800c4ba:	b08d      	sub	sp, #52	; 0x34
 800c4bc:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 800c4be:	9404      	str	r4, [sp, #16]
 800c4c0:	6954      	ldr	r4, [r2, #20]
 800c4c2:	920b      	str	r2, [sp, #44]	; 0x2c
 800c4c4:	9405      	str	r4, [sp, #20]
 800c4c6:	6994      	ldr	r4, [r2, #24]
 800c4c8:	f8d2 c01c 	ldr.w	ip, [r2, #28]
 800c4cc:	940a      	str	r4, [sp, #40]	; 0x28
 800c4ce:	6894      	ldr	r4, [r2, #8]
 800c4d0:	9403      	str	r4, [sp, #12]
 800c4d2:	68d4      	ldr	r4, [r2, #12]
 800c4d4:	9402      	str	r4, [sp, #8]
 800c4d6:	6b14      	ldr	r4, [r2, #48]	; 0x30
 800c4d8:	6a12      	ldr	r2, [r2, #32]
 800c4da:	9407      	str	r4, [sp, #28]
 800c4dc:	9208      	str	r2, [sp, #32]
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	f000 812e 	beq.w	800c740 <D128_1CH_HTONS_VOL_HP+0x28c>
 800c4e4:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 800c4e8:	f100 0b10 	add.w	fp, r0, #16
 800c4ec:	f8df 9290 	ldr.w	r9, [pc, #656]	; 800c780 <D128_1CH_HTONS_VOL_HP+0x2cc>
 800c4f0:	9106      	str	r1, [sp, #24]
 800c4f2:	9309      	str	r3, [sp, #36]	; 0x24
 800c4f4:	e95b 0204 	ldrd	r0, r2, [fp, #-16]
 800c4f8:	e95b 3602 	ldrd	r3, r6, [fp, #-8]
 800c4fc:	ba40      	rev16	r0, r0
 800c4fe:	ba52      	rev16	r2, r2
 800c500:	ba5b      	rev16	r3, r3
 800c502:	ba76      	rev16	r6, r6
 800c504:	b2c5      	uxtb	r5, r0
 800c506:	f3c0 2407 	ubfx	r4, r0, #8, #8
 800c50a:	f3c0 4107 	ubfx	r1, r0, #16, #8
 800c50e:	0e00      	lsrs	r0, r0, #24
 800c510:	f859 7025 	ldr.w	r7, [r9, r5, lsl #2]
 800c514:	b2d5      	uxtb	r5, r2
 800c516:	f859 e024 	ldr.w	lr, [r9, r4, lsl #2]
 800c51a:	f3c2 2407 	ubfx	r4, r2, #8, #8
 800c51e:	44bc      	add	ip, r7
 800c520:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800c524:	f859 7020 	ldr.w	r7, [r9, r0, lsl #2]
 800c528:	f3c2 4007 	ubfx	r0, r2, #16, #8
 800c52c:	eb0e 2e9c 	add.w	lr, lr, ip, lsr #10
 800c530:	f859 a025 	ldr.w	sl, [r9, r5, lsl #2]
 800c534:	f859 5024 	ldr.w	r5, [r9, r4, lsl #2]
 800c538:	0e12      	lsrs	r2, r2, #24
 800c53a:	eb01 219e 	add.w	r1, r1, lr, lsr #10
 800c53e:	f859 0020 	ldr.w	r0, [r9, r0, lsl #2]
 800c542:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 800c546:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800c54a:	eb07 2791 	add.w	r7, r7, r1, lsr #10
 800c54e:	f859 4022 	ldr.w	r4, [r9, r2, lsl #2]
 800c552:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800c556:	b2da      	uxtb	r2, r3
 800c558:	eb0a 2a97 	add.w	sl, sl, r7, lsr #10
 800c55c:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800c560:	ea4e 4e0c 	orr.w	lr, lr, ip, lsl #16
 800c564:	f859 2022 	ldr.w	r2, [r9, r2, lsl #2]
 800c568:	eb05 259a 	add.w	r5, r5, sl, lsr #10
 800c56c:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 800c570:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800c574:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800c578:	eb00 2c95 	add.w	ip, r0, r5, lsr #10
 800c57c:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800c580:	f859 8021 	ldr.w	r8, [r9, r1, lsl #2]
 800c584:	f3c3 4107 	ubfx	r1, r3, #16, #8
 800c588:	eb04 249c 	add.w	r4, r4, ip, lsr #10
 800c58c:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 800c590:	f859 0021 	ldr.w	r0, [r9, r1, lsl #2]
 800c594:	0e1b      	lsrs	r3, r3, #24
 800c596:	eb02 2294 	add.w	r2, r2, r4, lsr #10
 800c59a:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800c59e:	f859 1023 	ldr.w	r1, [r9, r3, lsl #2]
 800c5a2:	ea45 450a 	orr.w	r5, r5, sl, lsl #16
 800c5a6:	eb08 2892 	add.w	r8, r8, r2, lsr #10
 800c5aa:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800c5ae:	b2f3      	uxtb	r3, r6
 800c5b0:	eb00 2a98 	add.w	sl, r0, r8, lsr #10
 800c5b4:	f3c8 0009 	ubfx	r0, r8, #0, #10
 800c5b8:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800c5bc:	ea44 440c 	orr.w	r4, r4, ip, lsl #16
 800c5c0:	eb01 219a 	add.w	r1, r1, sl, lsr #10
 800c5c4:	f3c6 2c07 	ubfx	ip, r6, #8, #8
 800c5c8:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 800c5cc:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 800c5d0:	eb03 2891 	add.w	r8, r3, r1, lsr #10
 800c5d4:	f859 202c 	ldr.w	r2, [r9, ip, lsl #2]
 800c5d8:	f3c6 4c07 	ubfx	ip, r6, #16, #8
 800c5dc:	0e36      	lsrs	r6, r6, #24
 800c5de:	eb02 2298 	add.w	r2, r2, r8, lsr #10
 800c5e2:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800c5e6:	f859 302c 	ldr.w	r3, [r9, ip, lsl #2]
 800c5ea:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800c5ee:	f859 c026 	ldr.w	ip, [r9, r6, lsl #2]
 800c5f2:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800c5f6:	eb03 2692 	add.w	r6, r3, r2, lsr #10
 800c5fa:	f3c2 0309 	ubfx	r3, r2, #0, #10
 800c5fe:	9101      	str	r1, [sp, #4]
 800c600:	ea43 4208 	orr.w	r2, r3, r8, lsl #16
 800c604:	9b02      	ldr	r3, [sp, #8]
 800c606:	eb0c 2c96 	add.w	ip, ip, r6, lsr #10
 800c60a:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800c60e:	4611      	mov	r1, r2
 800c610:	f3cc 0209 	ubfx	r2, ip, #0, #10
 800c614:	ea4f 2c9c 	mov.w	ip, ip, lsr #10
 800c618:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
 800c61c:	4a49      	ldr	r2, [pc, #292]	; (800c744 <D128_1CH_HTONS_VOL_HP+0x290>)
 800c61e:	fb2e 3202 	smlad	r2, lr, r2, r3
 800c622:	4b49      	ldr	r3, [pc, #292]	; (800c748 <D128_1CH_HTONS_VOL_HP+0x294>)
 800c624:	fb27 2203 	smlad	r2, r7, r3, r2
 800c628:	4b48      	ldr	r3, [pc, #288]	; (800c74c <D128_1CH_HTONS_VOL_HP+0x298>)
 800c62a:	fb25 2203 	smlad	r2, r5, r3, r2
 800c62e:	4b48      	ldr	r3, [pc, #288]	; (800c750 <D128_1CH_HTONS_VOL_HP+0x29c>)
 800c630:	fb24 2203 	smlad	r2, r4, r3, r2
 800c634:	4b47      	ldr	r3, [pc, #284]	; (800c754 <D128_1CH_HTONS_VOL_HP+0x2a0>)
 800c636:	fb20 2803 	smlad	r8, r0, r3, r2
 800c63a:	4b47      	ldr	r3, [pc, #284]	; (800c758 <D128_1CH_HTONS_VOL_HP+0x2a4>)
 800c63c:	9a01      	ldr	r2, [sp, #4]
 800c63e:	fb22 8203 	smlad	r2, r2, r3, r8
 800c642:	4b46      	ldr	r3, [pc, #280]	; (800c75c <D128_1CH_HTONS_VOL_HP+0x2a8>)
 800c644:	9102      	str	r1, [sp, #8]
 800c646:	fb21 2203 	smlad	r2, r1, r3, r2
 800c64a:	f44f 3880 	mov.w	r8, #65536	; 0x10000
 800c64e:	fb26 2308 	smlad	r3, r6, r8, r2
 800c652:	4619      	mov	r1, r3
 800c654:	9a03      	ldr	r2, [sp, #12]
 800c656:	4b42      	ldr	r3, [pc, #264]	; (800c760 <D128_1CH_HTONS_VOL_HP+0x2ac>)
 800c658:	fb2e 2803 	smlad	r8, lr, r3, r2
 800c65c:	4b41      	ldr	r3, [pc, #260]	; (800c764 <D128_1CH_HTONS_VOL_HP+0x2b0>)
 800c65e:	fb27 8a03 	smlad	sl, r7, r3, r8
 800c662:	f8df 8120 	ldr.w	r8, [pc, #288]	; 800c784 <D128_1CH_HTONS_VOL_HP+0x2d0>
 800c666:	fb25 a808 	smlad	r8, r5, r8, sl
 800c66a:	f8df a11c 	ldr.w	sl, [pc, #284]	; 800c788 <D128_1CH_HTONS_VOL_HP+0x2d4>
 800c66e:	fb24 880a 	smlad	r8, r4, sl, r8
 800c672:	f8df a118 	ldr.w	sl, [pc, #280]	; 800c78c <D128_1CH_HTONS_VOL_HP+0x2d8>
 800c676:	fb20 8a0a 	smlad	sl, r0, sl, r8
 800c67a:	f8df 8114 	ldr.w	r8, [pc, #276]	; 800c790 <D128_1CH_HTONS_VOL_HP+0x2dc>
 800c67e:	9b01      	ldr	r3, [sp, #4]
 800c680:	fb23 aa08 	smlad	sl, r3, r8, sl
 800c684:	f8df 810c 	ldr.w	r8, [pc, #268]	; 800c794 <D128_1CH_HTONS_VOL_HP+0x2e0>
 800c688:	9a02      	ldr	r2, [sp, #8]
 800c68a:	fb22 a808 	smlad	r8, r2, r8, sl
 800c68e:	f8df a108 	ldr.w	sl, [pc, #264]	; 800c798 <D128_1CH_HTONS_VOL_HP+0x2e4>
 800c692:	fb26 830a 	smlad	r3, r6, sl, r8
 800c696:	f04f 0801 	mov.w	r8, #1
 800c69a:	9302      	str	r3, [sp, #8]
 800c69c:	fb2e fe08 	smuad	lr, lr, r8
 800c6a0:	f8df 80f8 	ldr.w	r8, [pc, #248]	; 800c79c <D128_1CH_HTONS_VOL_HP+0x2e8>
 800c6a4:	fb27 ee08 	smlad	lr, r7, r8, lr
 800c6a8:	4f2f      	ldr	r7, [pc, #188]	; (800c768 <D128_1CH_HTONS_VOL_HP+0x2b4>)
 800c6aa:	fb25 ee07 	smlad	lr, r5, r7, lr
 800c6ae:	4f2f      	ldr	r7, [pc, #188]	; (800c76c <D128_1CH_HTONS_VOL_HP+0x2b8>)
 800c6b0:	fb24 ee07 	smlad	lr, r4, r7, lr
 800c6b4:	4f2e      	ldr	r7, [pc, #184]	; (800c770 <D128_1CH_HTONS_VOL_HP+0x2bc>)
 800c6b6:	fb20 ee07 	smlad	lr, r0, r7, lr
 800c6ba:	4f2e      	ldr	r7, [pc, #184]	; (800c774 <D128_1CH_HTONS_VOL_HP+0x2c0>)
 800c6bc:	9b01      	ldr	r3, [sp, #4]
 800c6be:	fb23 ee07 	smlad	lr, r3, r7, lr
 800c6c2:	4f2d      	ldr	r7, [pc, #180]	; (800c778 <D128_1CH_HTONS_VOL_HP+0x2c4>)
 800c6c4:	fb22 e707 	smlad	r7, r2, r7, lr
 800c6c8:	4b2c      	ldr	r3, [pc, #176]	; (800c77c <D128_1CH_HTONS_VOL_HP+0x2c8>)
 800c6ca:	fb26 7303 	smlad	r3, r6, r3, r7
 800c6ce:	f5a1 1680 	sub.w	r6, r1, #1048576	; 0x100000
 800c6d2:	9303      	str	r3, [sp, #12]
 800c6d4:	9b04      	ldr	r3, [sp, #16]
 800c6d6:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800c6da:	9f08      	ldr	r7, [sp, #32]
 800c6dc:	2100      	movs	r1, #0
 800c6de:	4433      	add	r3, r6
 800c6e0:	f10b 0b10 	add.w	fp, fp, #16
 800c6e4:	461a      	mov	r2, r3
 800c6e6:	9b05      	ldr	r3, [sp, #20]
 800c6e8:	9605      	str	r6, [sp, #20]
 800c6ea:	1ad2      	subs	r2, r2, r3
 800c6ec:	17d5      	asrs	r5, r2, #31
 800c6ee:	fba2 2307 	umull	r2, r3, r2, r7
 800c6f2:	1814      	adds	r4, r2, r0
 800c6f4:	fb07 3305 	mla	r3, r7, r5, r3
 800c6f8:	eb43 0501 	adc.w	r5, r3, r1
 800c6fc:	006b      	lsls	r3, r5, #1
 800c6fe:	022a      	lsls	r2, r5, #8
 800c700:	9304      	str	r3, [sp, #16]
 800c702:	9b07      	ldr	r3, [sp, #28]
 800c704:	fbc3 0102 	smlal	r0, r1, r3, r2
 800c708:	9a06      	ldr	r2, [sp, #24]
 800c70a:	108b      	asrs	r3, r1, #2
 800c70c:	f303 030f 	ssat	r3, #16, r3
 800c710:	f822 3b02 	strh.w	r3, [r2], #2
 800c714:	4613      	mov	r3, r2
 800c716:	9206      	str	r2, [sp, #24]
 800c718:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c71a:	4293      	cmp	r3, r2
 800c71c:	f47f aeea 	bne.w	800c4f4 <D128_1CH_HTONS_VOL_HP+0x40>
 800c720:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c722:	2000      	movs	r0, #0
 800c724:	9903      	ldr	r1, [sp, #12]
 800c726:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c728:	6099      	str	r1, [r3, #8]
 800c72a:	9902      	ldr	r1, [sp, #8]
 800c72c:	f8c3 c01c 	str.w	ip, [r3, #28]
 800c730:	60d9      	str	r1, [r3, #12]
 800c732:	9904      	ldr	r1, [sp, #16]
 800c734:	619a      	str	r2, [r3, #24]
 800c736:	e9c3 1604 	strd	r1, r6, [r3, #16]
 800c73a:	b00d      	add	sp, #52	; 0x34
 800c73c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c740:	9e05      	ldr	r6, [sp, #20]
 800c742:	e7ed      	b.n	800c720 <D128_1CH_HTONS_VOL_HP+0x26c>
 800c744:	00780069 	.word	0x00780069
 800c748:	005b004e 	.word	0x005b004e
 800c74c:	00420037 	.word	0x00420037
 800c750:	002d0024 	.word	0x002d0024
 800c754:	001c0015 	.word	0x001c0015
 800c758:	000f000a 	.word	0x000f000a
 800c75c:	00060003 	.word	0x00060003
 800c760:	00880096 	.word	0x00880096
 800c764:	00a200ac 	.word	0x00a200ac
 800c768:	000a000f 	.word	0x000a000f
 800c76c:	0015001c 	.word	0x0015001c
 800c770:	0024002d 	.word	0x0024002d
 800c774:	00370042 	.word	0x00370042
 800c778:	004e005b 	.word	0x004e005b
 800c77c:	00690078 	.word	0x00690078
 800c780:	24000000 	.word	0x24000000
 800c784:	00b400ba 	.word	0x00b400ba
 800c788:	00be00c0 	.word	0x00be00c0
 800c78c:	00c000be 	.word	0x00c000be
 800c790:	00ba00b4 	.word	0x00ba00b4
 800c794:	00ac00a2 	.word	0x00ac00a2
 800c798:	00960088 	.word	0x00960088
 800c79c:	00030006 	.word	0x00030006

0800c7a0 <PDM_Filter_Init>:
 800c7a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c7a2:	2240      	movs	r2, #64	; 0x40
 800c7a4:	2100      	movs	r1, #0
 800c7a6:	4604      	mov	r4, r0
 800c7a8:	300c      	adds	r0, #12
 800c7aa:	f000 fa07 	bl	800cbbc <memset>
 800c7ae:	4a56      	ldr	r2, [pc, #344]	; (800c908 <PDM_Filter_Init+0x168>)
 800c7b0:	4856      	ldr	r0, [pc, #344]	; (800c90c <PDM_Filter_Init+0x16c>)
 800c7b2:	f64f 71f0 	movw	r1, #65520	; 0xfff0
 800c7b6:	6813      	ldr	r3, [r2, #0]
 800c7b8:	f24c 2540 	movw	r5, #49728	; 0xc240
 800c7bc:	f023 0301 	bic.w	r3, r3, #1
 800c7c0:	6013      	str	r3, [r2, #0]
 800c7c2:	6803      	ldr	r3, [r0, #0]
 800c7c4:	400b      	ands	r3, r1
 800c7c6:	42ab      	cmp	r3, r5
 800c7c8:	d040      	beq.n	800c84c <PDM_Filter_Init+0xac>
 800c7ca:	6803      	ldr	r3, [r0, #0]
 800c7cc:	f24c 2270 	movw	r2, #49776	; 0xc270
 800c7d0:	4019      	ands	r1, r3
 800c7d2:	4291      	cmp	r1, r2
 800c7d4:	d03a      	beq.n	800c84c <PDM_Filter_Init+0xac>
 800c7d6:	4b4e      	ldr	r3, [pc, #312]	; (800c910 <PDM_Filter_Init+0x170>)
 800c7d8:	2101      	movs	r1, #1
 800c7da:	461a      	mov	r2, r3
 800c7dc:	6019      	str	r1, [r3, #0]
 800c7de:	6813      	ldr	r3, [r2, #0]
 800c7e0:	2b00      	cmp	r3, #0
 800c7e2:	d1fc      	bne.n	800c7de <PDM_Filter_Init+0x3e>
 800c7e4:	4b4b      	ldr	r3, [pc, #300]	; (800c914 <PDM_Filter_Init+0x174>)
 800c7e6:	494c      	ldr	r1, [pc, #304]	; (800c918 <PDM_Filter_Init+0x178>)
 800c7e8:	4a4c      	ldr	r2, [pc, #304]	; (800c91c <PDM_Filter_Init+0x17c>)
 800c7ea:	6019      	str	r1, [r3, #0]
 800c7ec:	681b      	ldr	r3, [r3, #0]
 800c7ee:	8820      	ldrh	r0, [r4, #0]
 800c7f0:	4293      	cmp	r3, r2
 800c7f2:	8961      	ldrh	r1, [r4, #10]
 800c7f4:	f04f 0300 	mov.w	r3, #0
 800c7f8:	8922      	ldrh	r2, [r4, #8]
 800c7fa:	bf14      	ite	ne
 800c7fc:	2500      	movne	r5, #0
 800c7fe:	4d47      	ldreq	r5, [pc, #284]	; (800c91c <PDM_Filter_Init+0x17c>)
 800c800:	2801      	cmp	r0, #1
 800c802:	61a3      	str	r3, [r4, #24]
 800c804:	6465      	str	r5, [r4, #68]	; 0x44
 800c806:	60e3      	str	r3, [r4, #12]
 800c808:	6263      	str	r3, [r4, #36]	; 0x24
 800c80a:	6423      	str	r3, [r4, #64]	; 0x40
 800c80c:	86a1      	strh	r1, [r4, #52]	; 0x34
 800c80e:	86e2      	strh	r2, [r4, #54]	; 0x36
 800c810:	e9c4 3304 	strd	r3, r3, [r4, #16]
 800c814:	e9c4 3307 	strd	r3, r3, [r4, #28]
 800c818:	d936      	bls.n	800c888 <PDM_Filter_Init+0xe8>
 800c81a:	2003      	movs	r0, #3
 800c81c:	2302      	movs	r3, #2
 800c81e:	8862      	ldrh	r2, [r4, #2]
 800c820:	2a01      	cmp	r2, #1
 800c822:	d92e      	bls.n	800c882 <PDM_Filter_Init+0xe2>
 800c824:	2140      	movs	r1, #64	; 0x40
 800c826:	2300      	movs	r3, #0
 800c828:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800c82a:	f1b2 1f01 	cmp.w	r2, #65537	; 0x10001
 800c82e:	d101      	bne.n	800c834 <PDM_Filter_Init+0x94>
 800c830:	460b      	mov	r3, r1
 800c832:	6421      	str	r1, [r4, #64]	; 0x40
 800c834:	6862      	ldr	r2, [r4, #4]
 800c836:	b11a      	cbz	r2, 800c840 <PDM_Filter_Init+0xa0>
 800c838:	f043 0310 	orr.w	r3, r3, #16
 800c83c:	62e2      	str	r2, [r4, #44]	; 0x2c
 800c83e:	6423      	str	r3, [r4, #64]	; 0x40
 800c840:	2200      	movs	r2, #0
 800c842:	8722      	strh	r2, [r4, #56]	; 0x38
 800c844:	b908      	cbnz	r0, 800c84a <PDM_Filter_Init+0xaa>
 800c846:	3380      	adds	r3, #128	; 0x80
 800c848:	6423      	str	r3, [r4, #64]	; 0x40
 800c84a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c84c:	4b34      	ldr	r3, [pc, #208]	; (800c920 <PDM_Filter_Init+0x180>)
 800c84e:	681b      	ldr	r3, [r3, #0]
 800c850:	2b00      	cmp	r3, #0
 800c852:	d1c0      	bne.n	800c7d6 <PDM_Filter_Init+0x36>
 800c854:	4a33      	ldr	r2, [pc, #204]	; (800c924 <PDM_Filter_Init+0x184>)
 800c856:	6813      	ldr	r3, [r2, #0]
 800c858:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c85c:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800c860:	d006      	beq.n	800c870 <PDM_Filter_Init+0xd0>
 800c862:	6813      	ldr	r3, [r2, #0]
 800c864:	f240 4283 	movw	r2, #1155	; 0x483
 800c868:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c86c:	4293      	cmp	r3, r2
 800c86e:	d1b2      	bne.n	800c7d6 <PDM_Filter_Init+0x36>
 800c870:	4b2d      	ldr	r3, [pc, #180]	; (800c928 <PDM_Filter_Init+0x188>)
 800c872:	2101      	movs	r1, #1
 800c874:	461a      	mov	r2, r3
 800c876:	6019      	str	r1, [r3, #0]
 800c878:	6813      	ldr	r3, [r2, #0]
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	d1fc      	bne.n	800c878 <PDM_Filter_Init+0xd8>
 800c87e:	4b2b      	ldr	r3, [pc, #172]	; (800c92c <PDM_Filter_Init+0x18c>)
 800c880:	e7b1      	b.n	800c7e6 <PDM_Filter_Init+0x46>
 800c882:	d03a      	beq.n	800c8fa <PDM_Filter_Init+0x15a>
 800c884:	4618      	mov	r0, r3
 800c886:	e7cd      	b.n	800c824 <PDM_Filter_Init+0x84>
 800c888:	4d29      	ldr	r5, [pc, #164]	; (800c930 <PDM_Filter_Init+0x190>)
 800c88a:	782a      	ldrb	r2, [r5, #0]
 800c88c:	d01b      	beq.n	800c8c6 <PDM_Filter_Init+0x126>
 800c88e:	2a01      	cmp	r2, #1
 800c890:	d001      	beq.n	800c896 <PDM_Filter_Init+0xf6>
 800c892:	2001      	movs	r0, #1
 800c894:	e7c3      	b.n	800c81e <PDM_Filter_Init+0x7e>
 800c896:	4927      	ldr	r1, [pc, #156]	; (800c934 <PDM_Filter_Init+0x194>)
 800c898:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 800c93c <PDM_Filter_Init+0x19c>
 800c89c:	f501 6780 	add.w	r7, r1, #1024	; 0x400
 800c8a0:	4e25      	ldr	r6, [pc, #148]	; (800c938 <PDM_Filter_Init+0x198>)
 800c8a2:	f851 2f04 	ldr.w	r2, [r1, #4]!
 800c8a6:	ea0c 5302 	and.w	r3, ip, r2, lsl #20
 800c8aa:	ea02 0006 	and.w	r0, r2, r6
 800c8ae:	f3c2 5209 	ubfx	r2, r2, #20, #10
 800c8b2:	428f      	cmp	r7, r1
 800c8b4:	ea43 0300 	orr.w	r3, r3, r0
 800c8b8:	4413      	add	r3, r2
 800c8ba:	600b      	str	r3, [r1, #0]
 800c8bc:	d1f1      	bne.n	800c8a2 <PDM_Filter_Init+0x102>
 800c8be:	2300      	movs	r3, #0
 800c8c0:	2001      	movs	r0, #1
 800c8c2:	702b      	strb	r3, [r5, #0]
 800c8c4:	e7ab      	b.n	800c81e <PDM_Filter_Init+0x7e>
 800c8c6:	2a00      	cmp	r2, #0
 800c8c8:	d1a9      	bne.n	800c81e <PDM_Filter_Init+0x7e>
 800c8ca:	491a      	ldr	r1, [pc, #104]	; (800c934 <PDM_Filter_Init+0x194>)
 800c8cc:	f8df c06c 	ldr.w	ip, [pc, #108]	; 800c93c <PDM_Filter_Init+0x19c>
 800c8d0:	f501 6780 	add.w	r7, r1, #1024	; 0x400
 800c8d4:	4e18      	ldr	r6, [pc, #96]	; (800c938 <PDM_Filter_Init+0x198>)
 800c8d6:	f851 2f04 	ldr.w	r2, [r1, #4]!
 800c8da:	ea0c 5302 	and.w	r3, ip, r2, lsl #20
 800c8de:	ea02 0006 	and.w	r0, r2, r6
 800c8e2:	f3c2 5209 	ubfx	r2, r2, #20, #10
 800c8e6:	428f      	cmp	r7, r1
 800c8e8:	ea43 0300 	orr.w	r3, r3, r0
 800c8ec:	4413      	add	r3, r2
 800c8ee:	600b      	str	r3, [r1, #0]
 800c8f0:	d1f1      	bne.n	800c8d6 <PDM_Filter_Init+0x136>
 800c8f2:	2001      	movs	r0, #1
 800c8f4:	2300      	movs	r3, #0
 800c8f6:	7028      	strb	r0, [r5, #0]
 800c8f8:	e791      	b.n	800c81e <PDM_Filter_Init+0x7e>
 800c8fa:	2220      	movs	r2, #32
 800c8fc:	4618      	mov	r0, r3
 800c8fe:	2160      	movs	r1, #96	; 0x60
 800c900:	6422      	str	r2, [r4, #64]	; 0x40
 800c902:	4613      	mov	r3, r2
 800c904:	e790      	b.n	800c828 <PDM_Filter_Init+0x88>
 800c906:	bf00      	nop
 800c908:	e0002000 	.word	0xe0002000
 800c90c:	e000ed00 	.word	0xe000ed00
 800c910:	40023008 	.word	0x40023008
 800c914:	40023000 	.word	0x40023000
 800c918:	f407a5c2 	.word	0xf407a5c2
 800c91c:	b5e8b5cd 	.word	0xb5e8b5cd
 800c920:	e0042000 	.word	0xe0042000
 800c924:	5c001000 	.word	0x5c001000
 800c928:	58024c08 	.word	0x58024c08
 800c92c:	58024c00 	.word	0x58024c00
 800c930:	24000490 	.word	0x24000490
 800c934:	23fffffc 	.word	0x23fffffc
 800c938:	000ffc00 	.word	0x000ffc00
 800c93c:	3ff00000 	.word	0x3ff00000

0800c940 <PDM_Filter_setConfig>:
 800c940:	4b67      	ldr	r3, [pc, #412]	; (800cae0 <PDM_Filter_setConfig+0x1a0>)
 800c942:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c944:	429a      	cmp	r2, r3
 800c946:	d128      	bne.n	800c99a <PDM_Filter_setConfig+0x5a>
 800c948:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800c94a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c94c:	880e      	ldrh	r6, [r1, #0]
 800c94e:	460d      	mov	r5, r1
 800c950:	4604      	mov	r4, r0
 800c952:	f422 7180 	bic.w	r1, r2, #256	; 0x100
 800c956:	1e73      	subs	r3, r6, #1
 800c958:	f9b5 7004 	ldrsh.w	r7, [r5, #4]
 800c95c:	f9b0 0038 	ldrsh.w	r0, [r0, #56]	; 0x38
 800c960:	2b06      	cmp	r3, #6
 800c962:	ed2d 8b02 	vpush	{d8}
 800c966:	6421      	str	r1, [r4, #64]	; 0x40
 800c968:	b083      	sub	sp, #12
 800c96a:	d820      	bhi.n	800c9ae <PDM_Filter_setConfig+0x6e>
 800c96c:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 800c96e:	42b3      	cmp	r3, r6
 800c970:	d03d      	beq.n	800c9ee <PDM_Filter_setConfig+0xae>
 800c972:	4b5c      	ldr	r3, [pc, #368]	; (800cae4 <PDM_Filter_setConfig+0x1a4>)
 800c974:	4013      	ands	r3, r2
 800c976:	4333      	orrs	r3, r6
 800c978:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800c97c:	6423      	str	r3, [r4, #64]	; 0x40
 800c97e:	f003 030f 	and.w	r3, r3, #15
 800c982:	2a70      	cmp	r2, #112	; 0x70
 800c984:	f103 33ff 	add.w	r3, r3, #4294967295
 800c988:	d009      	beq.n	800c99e <PDM_Filter_setConfig+0x5e>
 800c98a:	2b06      	cmp	r3, #6
 800c98c:	d824      	bhi.n	800c9d8 <PDM_Filter_setConfig+0x98>
 800c98e:	e8df f003 	tbb	[pc, r3]
 800c992:	878a      	.short	0x878a
 800c994:	7b7e8184 	.word	0x7b7e8184
 800c998:	78          	.byte	0x78
 800c999:	00          	.byte	0x00
 800c99a:	2004      	movs	r0, #4
 800c99c:	4770      	bx	lr
 800c99e:	2b06      	cmp	r3, #6
 800c9a0:	d81a      	bhi.n	800c9d8 <PDM_Filter_setConfig+0x98>
 800c9a2:	e8df f003 	tbb	[pc, r3]
 800c9a6:	8f92      	.short	0x8f92
 800c9a8:	8617898c 	.word	0x8617898c
 800c9ac:	83          	.byte	0x83
 800c9ad:	00          	.byte	0x00
 800c9ae:	4287      	cmp	r7, r0
 800c9b0:	f000 808e 	beq.w	800cad0 <PDM_Filter_setConfig+0x190>
 800c9b4:	f117 0f0c 	cmn.w	r7, #12
 800c9b8:	f04f 0008 	mov.w	r0, #8
 800c9bc:	da11      	bge.n	800c9e2 <PDM_Filter_setConfig+0xa2>
 800c9be:	f64f 73f4 	movw	r3, #65524	; 0xfff4
 800c9c2:	3040      	adds	r0, #64	; 0x40
 800c9c4:	80ab      	strh	r3, [r5, #4]
 800c9c6:	886b      	ldrh	r3, [r5, #2]
 800c9c8:	8626      	strh	r6, [r4, #48]	; 0x30
 800c9ca:	8663      	strh	r3, [r4, #50]	; 0x32
 800c9cc:	b003      	add	sp, #12
 800c9ce:	ecbd 8b02 	vpop	{d8}
 800c9d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c9d4:	4b44      	ldr	r3, [pc, #272]	; (800cae8 <PDM_Filter_setConfig+0x1a8>)
 800c9d6:	64a3      	str	r3, [r4, #72]	; 0x48
 800c9d8:	f117 0f0c 	cmn.w	r7, #12
 800c9dc:	f04f 0000 	mov.w	r0, #0
 800c9e0:	dbed      	blt.n	800c9be <PDM_Filter_setConfig+0x7e>
 800c9e2:	2f33      	cmp	r7, #51	; 0x33
 800c9e4:	dd10      	ble.n	800ca08 <PDM_Filter_setConfig+0xc8>
 800c9e6:	2333      	movs	r3, #51	; 0x33
 800c9e8:	3040      	adds	r0, #64	; 0x40
 800c9ea:	80ab      	strh	r3, [r5, #4]
 800c9ec:	e7eb      	b.n	800c9c6 <PDM_Filter_setConfig+0x86>
 800c9ee:	4287      	cmp	r7, r0
 800c9f0:	d1f2      	bne.n	800c9d8 <PDM_Filter_setConfig+0x98>
 800c9f2:	886b      	ldrh	r3, [r5, #2]
 800c9f4:	8663      	strh	r3, [r4, #50]	; 0x32
 800c9f6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c9f8:	2000      	movs	r0, #0
 800c9fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c9fe:	6423      	str	r3, [r4, #64]	; 0x40
 800ca00:	b003      	add	sp, #12
 800ca02:	ecbd 8b02 	vpop	{d8}
 800ca06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ca08:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ca0a:	f003 030f 	and.w	r3, r3, #15
 800ca0e:	3b01      	subs	r3, #1
 800ca10:	2b06      	cmp	r3, #6
 800ca12:	d831      	bhi.n	800ca78 <PDM_Filter_setConfig+0x138>
 800ca14:	4a35      	ldr	r2, [pc, #212]	; (800caec <PDM_Filter_setConfig+0x1ac>)
 800ca16:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 800ca1a:	eddf 0a35 	vldr	s1, [pc, #212]	; 800caf0 <PDM_Filter_setConfig+0x1b0>
 800ca1e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ca22:	9001      	str	r0, [sp, #4]
 800ca24:	edd3 7a07 	vldr	s15, [r3, #28]
 800ca28:	ed93 8a00 	vldr	s16, [r3]
 800ca2c:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800ca30:	f000 f8e6 	bl	800cc00 <powf>
 800ca34:	eef0 8a40 	vmov.f32	s17, s0
 800ca38:	9801      	ldr	r0, [sp, #4]
 800ca3a:	ee07 7a90 	vmov	s15, r7
 800ca3e:	ee28 8a28 	vmul.f32	s16, s16, s17
 800ca42:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 800ca46:	9001      	str	r0, [sp, #4]
 800ca48:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 800ca4c:	eddf 7a29 	vldr	s15, [pc, #164]	; 800caf4 <PDM_Filter_setConfig+0x1b4>
 800ca50:	ee60 0aa7 	vmul.f32	s1, s1, s15
 800ca54:	f000 f8d4 	bl	800cc00 <powf>
 800ca58:	ee28 8a00 	vmul.f32	s16, s16, s0
 800ca5c:	886b      	ldrh	r3, [r5, #2]
 800ca5e:	9801      	ldr	r0, [sp, #4]
 800ca60:	feb8 8a48 	vrinta.f32	s16, s16
 800ca64:	eebc 8ac8 	vcvt.u32.f32	s16, s16
 800ca68:	8727      	strh	r7, [r4, #56]	; 0x38
 800ca6a:	8663      	strh	r3, [r4, #50]	; 0x32
 800ca6c:	8626      	strh	r6, [r4, #48]	; 0x30
 800ca6e:	ed84 8a0f 	vstr	s16, [r4, #60]	; 0x3c
 800ca72:	2800      	cmp	r0, #0
 800ca74:	d0bf      	beq.n	800c9f6 <PDM_Filter_setConfig+0xb6>
 800ca76:	e7a9      	b.n	800c9cc <PDM_Filter_setConfig+0x8c>
 800ca78:	eddf 8a1f 	vldr	s17, [pc, #124]	; 800caf8 <PDM_Filter_setConfig+0x1b8>
 800ca7c:	ed9f 8a1f 	vldr	s16, [pc, #124]	; 800cafc <PDM_Filter_setConfig+0x1bc>
 800ca80:	e7db      	b.n	800ca3a <PDM_Filter_setConfig+0xfa>
 800ca82:	4b1f      	ldr	r3, [pc, #124]	; (800cb00 <PDM_Filter_setConfig+0x1c0>)
 800ca84:	64a3      	str	r3, [r4, #72]	; 0x48
 800ca86:	e7a7      	b.n	800c9d8 <PDM_Filter_setConfig+0x98>
 800ca88:	4b1e      	ldr	r3, [pc, #120]	; (800cb04 <PDM_Filter_setConfig+0x1c4>)
 800ca8a:	64a3      	str	r3, [r4, #72]	; 0x48
 800ca8c:	e7a4      	b.n	800c9d8 <PDM_Filter_setConfig+0x98>
 800ca8e:	4b1e      	ldr	r3, [pc, #120]	; (800cb08 <PDM_Filter_setConfig+0x1c8>)
 800ca90:	64a3      	str	r3, [r4, #72]	; 0x48
 800ca92:	e7a1      	b.n	800c9d8 <PDM_Filter_setConfig+0x98>
 800ca94:	4b1d      	ldr	r3, [pc, #116]	; (800cb0c <PDM_Filter_setConfig+0x1cc>)
 800ca96:	64a3      	str	r3, [r4, #72]	; 0x48
 800ca98:	e79e      	b.n	800c9d8 <PDM_Filter_setConfig+0x98>
 800ca9a:	4b1d      	ldr	r3, [pc, #116]	; (800cb10 <PDM_Filter_setConfig+0x1d0>)
 800ca9c:	64a3      	str	r3, [r4, #72]	; 0x48
 800ca9e:	e79b      	b.n	800c9d8 <PDM_Filter_setConfig+0x98>
 800caa0:	4b1c      	ldr	r3, [pc, #112]	; (800cb14 <PDM_Filter_setConfig+0x1d4>)
 800caa2:	64a3      	str	r3, [r4, #72]	; 0x48
 800caa4:	e798      	b.n	800c9d8 <PDM_Filter_setConfig+0x98>
 800caa6:	4b1c      	ldr	r3, [pc, #112]	; (800cb18 <PDM_Filter_setConfig+0x1d8>)
 800caa8:	64a3      	str	r3, [r4, #72]	; 0x48
 800caaa:	e795      	b.n	800c9d8 <PDM_Filter_setConfig+0x98>
 800caac:	4b1b      	ldr	r3, [pc, #108]	; (800cb1c <PDM_Filter_setConfig+0x1dc>)
 800caae:	64a3      	str	r3, [r4, #72]	; 0x48
 800cab0:	e792      	b.n	800c9d8 <PDM_Filter_setConfig+0x98>
 800cab2:	4b1b      	ldr	r3, [pc, #108]	; (800cb20 <PDM_Filter_setConfig+0x1e0>)
 800cab4:	64a3      	str	r3, [r4, #72]	; 0x48
 800cab6:	e78f      	b.n	800c9d8 <PDM_Filter_setConfig+0x98>
 800cab8:	4b1a      	ldr	r3, [pc, #104]	; (800cb24 <PDM_Filter_setConfig+0x1e4>)
 800caba:	64a3      	str	r3, [r4, #72]	; 0x48
 800cabc:	e78c      	b.n	800c9d8 <PDM_Filter_setConfig+0x98>
 800cabe:	4b1a      	ldr	r3, [pc, #104]	; (800cb28 <PDM_Filter_setConfig+0x1e8>)
 800cac0:	64a3      	str	r3, [r4, #72]	; 0x48
 800cac2:	e789      	b.n	800c9d8 <PDM_Filter_setConfig+0x98>
 800cac4:	4b19      	ldr	r3, [pc, #100]	; (800cb2c <PDM_Filter_setConfig+0x1ec>)
 800cac6:	64a3      	str	r3, [r4, #72]	; 0x48
 800cac8:	e786      	b.n	800c9d8 <PDM_Filter_setConfig+0x98>
 800caca:	4b19      	ldr	r3, [pc, #100]	; (800cb30 <PDM_Filter_setConfig+0x1f0>)
 800cacc:	64a3      	str	r3, [r4, #72]	; 0x48
 800cace:	e783      	b.n	800c9d8 <PDM_Filter_setConfig+0x98>
 800cad0:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 800cad2:	42b3      	cmp	r3, r6
 800cad4:	f47f af6e 	bne.w	800c9b4 <PDM_Filter_setConfig+0x74>
 800cad8:	886b      	ldrh	r3, [r5, #2]
 800cada:	2008      	movs	r0, #8
 800cadc:	8663      	strh	r3, [r4, #50]	; 0x32
 800cade:	e775      	b.n	800c9cc <PDM_Filter_setConfig+0x8c>
 800cae0:	b5e8b5cd 	.word	0xb5e8b5cd
 800cae4:	fffffef0 	.word	0xfffffef0
 800cae8:	0800bc59 	.word	0x0800bc59
 800caec:	0800cf70 	.word	0x0800cf70
 800caf0:	42000000 	.word	0x42000000
 800caf4:	3d4ccccd 	.word	0x3d4ccccd
 800caf8:	4f800000 	.word	0x4f800000
 800cafc:	00000000 	.word	0x00000000
 800cb00:	0800b065 	.word	0x0800b065
 800cb04:	0800aeed 	.word	0x0800aeed
 800cb08:	0800addd 	.word	0x0800addd
 800cb0c:	0800b8a1 	.word	0x0800b8a1
 800cb10:	0800b609 	.word	0x0800b609
 800cb14:	0800b3d1 	.word	0x0800b3d1
 800cb18:	0800b1ed 	.word	0x0800b1ed
 800cb1c:	0800be75 	.word	0x0800be75
 800cb20:	0800bd39 	.word	0x0800bd39
 800cb24:	0800c4b5 	.word	0x0800c4b5
 800cb28:	0800c2b9 	.word	0x0800c2b9
 800cb2c:	0800c10d 	.word	0x0800c10d
 800cb30:	0800bfa1 	.word	0x0800bfa1

0800cb34 <PDM_Filter>:
 800cb34:	b410      	push	{r4}
 800cb36:	4b0b      	ldr	r3, [pc, #44]	; (800cb64 <PDM_Filter+0x30>)
 800cb38:	6c54      	ldr	r4, [r2, #68]	; 0x44
 800cb3a:	429c      	cmp	r4, r3
 800cb3c:	d107      	bne.n	800cb4e <PDM_Filter+0x1a>
 800cb3e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800cb40:	05dc      	lsls	r4, r3, #23
 800cb42:	d508      	bpl.n	800cb56 <PDM_Filter+0x22>
 800cb44:	6c93      	ldr	r3, [r2, #72]	; 0x48
 800cb46:	320c      	adds	r2, #12
 800cb48:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cb4c:	4718      	bx	r3
 800cb4e:	2004      	movs	r0, #4
 800cb50:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cb54:	4770      	bx	lr
 800cb56:	f013 0f80 	tst.w	r3, #128	; 0x80
 800cb5a:	bf14      	ite	ne
 800cb5c:	2020      	movne	r0, #32
 800cb5e:	2030      	moveq	r0, #48	; 0x30
 800cb60:	e7f6      	b.n	800cb50 <PDM_Filter+0x1c>
 800cb62:	bf00      	nop
 800cb64:	b5e8b5cd 	.word	0xb5e8b5cd

0800cb68 <__errno>:
 800cb68:	4b01      	ldr	r3, [pc, #4]	; (800cb70 <__errno+0x8>)
 800cb6a:	6818      	ldr	r0, [r3, #0]
 800cb6c:	4770      	bx	lr
 800cb6e:	bf00      	nop
 800cb70:	24000410 	.word	0x24000410

0800cb74 <__libc_init_array>:
 800cb74:	b570      	push	{r4, r5, r6, lr}
 800cb76:	4d0d      	ldr	r5, [pc, #52]	; (800cbac <__libc_init_array+0x38>)
 800cb78:	4c0d      	ldr	r4, [pc, #52]	; (800cbb0 <__libc_init_array+0x3c>)
 800cb7a:	1b64      	subs	r4, r4, r5
 800cb7c:	10a4      	asrs	r4, r4, #2
 800cb7e:	2600      	movs	r6, #0
 800cb80:	42a6      	cmp	r6, r4
 800cb82:	d109      	bne.n	800cb98 <__libc_init_array+0x24>
 800cb84:	4d0b      	ldr	r5, [pc, #44]	; (800cbb4 <__libc_init_array+0x40>)
 800cb86:	4c0c      	ldr	r4, [pc, #48]	; (800cbb8 <__libc_init_array+0x44>)
 800cb88:	f000 f9e6 	bl	800cf58 <_init>
 800cb8c:	1b64      	subs	r4, r4, r5
 800cb8e:	10a4      	asrs	r4, r4, #2
 800cb90:	2600      	movs	r6, #0
 800cb92:	42a6      	cmp	r6, r4
 800cb94:	d105      	bne.n	800cba2 <__libc_init_array+0x2e>
 800cb96:	bd70      	pop	{r4, r5, r6, pc}
 800cb98:	f855 3b04 	ldr.w	r3, [r5], #4
 800cb9c:	4798      	blx	r3
 800cb9e:	3601      	adds	r6, #1
 800cba0:	e7ee      	b.n	800cb80 <__libc_init_array+0xc>
 800cba2:	f855 3b04 	ldr.w	r3, [r5], #4
 800cba6:	4798      	blx	r3
 800cba8:	3601      	adds	r6, #1
 800cbaa:	e7f2      	b.n	800cb92 <__libc_init_array+0x1e>
 800cbac:	0800d448 	.word	0x0800d448
 800cbb0:	0800d448 	.word	0x0800d448
 800cbb4:	0800d448 	.word	0x0800d448
 800cbb8:	0800d44c 	.word	0x0800d44c

0800cbbc <memset>:
 800cbbc:	4402      	add	r2, r0
 800cbbe:	4603      	mov	r3, r0
 800cbc0:	4293      	cmp	r3, r2
 800cbc2:	d100      	bne.n	800cbc6 <memset+0xa>
 800cbc4:	4770      	bx	lr
 800cbc6:	f803 1b01 	strb.w	r1, [r3], #1
 800cbca:	e7f9      	b.n	800cbc0 <memset+0x4>

0800cbcc <checkint>:
 800cbcc:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800cbd0:	2b7e      	cmp	r3, #126	; 0x7e
 800cbd2:	dd10      	ble.n	800cbf6 <checkint+0x2a>
 800cbd4:	2b96      	cmp	r3, #150	; 0x96
 800cbd6:	dc0c      	bgt.n	800cbf2 <checkint+0x26>
 800cbd8:	2201      	movs	r2, #1
 800cbda:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 800cbde:	fa02 f303 	lsl.w	r3, r2, r3
 800cbe2:	1e5a      	subs	r2, r3, #1
 800cbe4:	4202      	tst	r2, r0
 800cbe6:	d106      	bne.n	800cbf6 <checkint+0x2a>
 800cbe8:	4203      	tst	r3, r0
 800cbea:	bf0c      	ite	eq
 800cbec:	2002      	moveq	r0, #2
 800cbee:	2001      	movne	r0, #1
 800cbf0:	4770      	bx	lr
 800cbf2:	2002      	movs	r0, #2
 800cbf4:	4770      	bx	lr
 800cbf6:	2000      	movs	r0, #0
 800cbf8:	4770      	bx	lr
 800cbfa:	0000      	movs	r0, r0
 800cbfc:	0000      	movs	r0, r0
	...

0800cc00 <powf>:
 800cc00:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cc02:	ee10 1a10 	vmov	r1, s0
 800cc06:	ee10 6a90 	vmov	r6, s1
 800cc0a:	f5a1 0300 	sub.w	r3, r1, #8388608	; 0x800000
 800cc0e:	0072      	lsls	r2, r6, #1
 800cc10:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 800cc14:	b085      	sub	sp, #20
 800cc16:	f102 30ff 	add.w	r0, r2, #4294967295
 800cc1a:	f06f 7380 	mvn.w	r3, #16777216	; 0x1000000
 800cc1e:	d256      	bcs.n	800ccce <powf+0xce>
 800cc20:	4298      	cmp	r0, r3
 800cc22:	d256      	bcs.n	800ccd2 <powf+0xd2>
 800cc24:	2000      	movs	r0, #0
 800cc26:	f101 4240 	add.w	r2, r1, #3221225472	; 0xc0000000
 800cc2a:	4ea3      	ldr	r6, [pc, #652]	; (800ceb8 <powf+0x2b8>)
 800cc2c:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 800cc30:	f502 024d 	add.w	r2, r2, #13434880	; 0xcd0000
 800cc34:	f3c2 47c3 	ubfx	r7, r2, #19, #4
 800cc38:	0dd2      	lsrs	r2, r2, #23
 800cc3a:	eb06 1707 	add.w	r7, r6, r7, lsl #4
 800cc3e:	05d2      	lsls	r2, r2, #23
 800cc40:	1a8b      	subs	r3, r1, r2
 800cc42:	ed97 5b00 	vldr	d5, [r7]
 800cc46:	ee07 3a90 	vmov	s15, r3
 800cc4a:	15d2      	asrs	r2, r2, #23
 800cc4c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800cc50:	eea5 6b07 	vfma.f64	d6, d5, d7
 800cc54:	ed97 5b02 	vldr	d5, [r7, #8]
 800cc58:	ee26 2b06 	vmul.f64	d2, d6, d6
 800cc5c:	ee22 1b02 	vmul.f64	d1, d2, d2
 800cc60:	ee07 2a90 	vmov	s15, r2
 800cc64:	ed96 4b40 	vldr	d4, [r6, #256]	; 0x100
 800cc68:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800cc6c:	ee37 7b05 	vadd.f64	d7, d7, d5
 800cc70:	ed96 5b42 	vldr	d5, [r6, #264]	; 0x108
 800cc74:	ed96 3b44 	vldr	d3, [r6, #272]	; 0x110
 800cc78:	eea6 5b04 	vfma.f64	d5, d6, d4
 800cc7c:	ed96 4b46 	vldr	d4, [r6, #280]	; 0x118
 800cc80:	eea6 4b03 	vfma.f64	d4, d6, d3
 800cc84:	ed96 3b48 	vldr	d3, [r6, #288]	; 0x120
 800cc88:	eeb7 0ae0 	vcvt.f64.f32	d0, s1
 800cc8c:	eea6 7b03 	vfma.f64	d7, d6, d3
 800cc90:	eea2 7b04 	vfma.f64	d7, d2, d4
 800cc94:	eea5 7b01 	vfma.f64	d7, d5, d1
 800cc98:	ee20 0b07 	vmul.f64	d0, d0, d7
 800cc9c:	ee10 1a90 	vmov	r1, s1
 800cca0:	2300      	movs	r3, #0
 800cca2:	2700      	movs	r7, #0
 800cca4:	f3c1 32cf 	ubfx	r2, r1, #15, #16
 800cca8:	f248 06be 	movw	r6, #32958	; 0x80be
 800ccac:	429f      	cmp	r7, r3
 800ccae:	bf08      	it	eq
 800ccb0:	4296      	cmpeq	r6, r2
 800ccb2:	f080 80b1 	bcs.w	800ce18 <powf+0x218>
 800ccb6:	ed9f 7b78 	vldr	d7, [pc, #480]	; 800ce98 <powf+0x298>
 800ccba:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800ccbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ccc2:	dd79      	ble.n	800cdb8 <powf+0x1b8>
 800ccc4:	b005      	add	sp, #20
 800ccc6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800ccca:	f000 b91f 	b.w	800cf0c <__math_oflowf>
 800ccce:	4298      	cmp	r0, r3
 800ccd0:	d32d      	bcc.n	800cd2e <powf+0x12e>
 800ccd2:	b952      	cbnz	r2, 800ccea <powf+0xea>
 800ccd4:	f481 0380 	eor.w	r3, r1, #4194304	; 0x400000
 800ccd8:	005b      	lsls	r3, r3, #1
 800ccda:	f513 0f00 	cmn.w	r3, #8388608	; 0x800000
 800ccde:	f240 80cd 	bls.w	800ce7c <powf+0x27c>
 800cce2:	ee30 0a20 	vadd.f32	s0, s0, s1
 800cce6:	b005      	add	sp, #20
 800cce8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ccea:	f1b1 5f7e 	cmp.w	r1, #1065353216	; 0x3f800000
 800ccee:	d105      	bne.n	800ccfc <powf+0xfc>
 800ccf0:	f486 0680 	eor.w	r6, r6, #4194304	; 0x400000
 800ccf4:	0076      	lsls	r6, r6, #1
 800ccf6:	f516 0f00 	cmn.w	r6, #8388608	; 0x800000
 800ccfa:	e7f0      	b.n	800ccde <powf+0xde>
 800ccfc:	004b      	lsls	r3, r1, #1
 800ccfe:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
 800cd02:	d8ee      	bhi.n	800cce2 <powf+0xe2>
 800cd04:	f1b2 4f7f 	cmp.w	r2, #4278190080	; 0xff000000
 800cd08:	d1eb      	bne.n	800cce2 <powf+0xe2>
 800cd0a:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 800cd0e:	f000 80b5 	beq.w	800ce7c <powf+0x27c>
 800cd12:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 800cd16:	ea6f 0606 	mvn.w	r6, r6
 800cd1a:	bf34      	ite	cc
 800cd1c:	2300      	movcc	r3, #0
 800cd1e:	2301      	movcs	r3, #1
 800cd20:	0ff6      	lsrs	r6, r6, #31
 800cd22:	42b3      	cmp	r3, r6
 800cd24:	f040 80ad 	bne.w	800ce82 <powf+0x282>
 800cd28:	ee20 0aa0 	vmul.f32	s0, s1, s1
 800cd2c:	e7db      	b.n	800cce6 <powf+0xe6>
 800cd2e:	004f      	lsls	r7, r1, #1
 800cd30:	1e7a      	subs	r2, r7, #1
 800cd32:	429a      	cmp	r2, r3
 800cd34:	d31c      	bcc.n	800cd70 <powf+0x170>
 800cd36:	2900      	cmp	r1, #0
 800cd38:	ee20 0a00 	vmul.f32	s0, s0, s0
 800cd3c:	da0f      	bge.n	800cd5e <powf+0x15e>
 800cd3e:	ee10 0a90 	vmov	r0, s1
 800cd42:	f7ff ff43 	bl	800cbcc <checkint>
 800cd46:	2801      	cmp	r0, #1
 800cd48:	d109      	bne.n	800cd5e <powf+0x15e>
 800cd4a:	eeb1 0a40 	vneg.f32	s0, s0
 800cd4e:	b947      	cbnz	r7, 800cd62 <powf+0x162>
 800cd50:	2e00      	cmp	r6, #0
 800cd52:	dac8      	bge.n	800cce6 <powf+0xe6>
 800cd54:	b005      	add	sp, #20
 800cd56:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800cd5a:	f000 b8dd 	b.w	800cf18 <__math_divzerof>
 800cd5e:	2000      	movs	r0, #0
 800cd60:	e7f5      	b.n	800cd4e <powf+0x14e>
 800cd62:	2e00      	cmp	r6, #0
 800cd64:	dabf      	bge.n	800cce6 <powf+0xe6>
 800cd66:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800cd6a:	ee87 0a80 	vdiv.f32	s0, s15, s0
 800cd6e:	e7ba      	b.n	800cce6 <powf+0xe6>
 800cd70:	2900      	cmp	r1, #0
 800cd72:	da1f      	bge.n	800cdb4 <powf+0x1b4>
 800cd74:	ee10 0a90 	vmov	r0, s1
 800cd78:	f7ff ff28 	bl	800cbcc <checkint>
 800cd7c:	b920      	cbnz	r0, 800cd88 <powf+0x188>
 800cd7e:	b005      	add	sp, #20
 800cd80:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800cd84:	f000 b8d8 	b.w	800cf38 <__math_invalidf>
 800cd88:	2801      	cmp	r0, #1
 800cd8a:	bf14      	ite	ne
 800cd8c:	2000      	movne	r0, #0
 800cd8e:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 800cd92:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800cd96:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 800cd9a:	f4bf af44 	bcs.w	800cc26 <powf+0x26>
 800cd9e:	eddf 7a47 	vldr	s15, [pc, #284]	; 800cebc <powf+0x2bc>
 800cda2:	ee20 0a27 	vmul.f32	s0, s0, s15
 800cda6:	ee10 3a10 	vmov	r3, s0
 800cdaa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800cdae:	f1a3 6138 	sub.w	r1, r3, #192937984	; 0xb800000
 800cdb2:	e738      	b.n	800cc26 <powf+0x26>
 800cdb4:	2000      	movs	r0, #0
 800cdb6:	e7ee      	b.n	800cd96 <powf+0x196>
 800cdb8:	ed9f 7b39 	vldr	d7, [pc, #228]	; 800cea0 <powf+0x2a0>
 800cdbc:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800cdc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cdc4:	dd10      	ble.n	800cde8 <powf+0x1e8>
 800cdc6:	f04f 534c 	mov.w	r3, #855638016	; 0x33000000
 800cdca:	2800      	cmp	r0, #0
 800cdcc:	d15c      	bne.n	800ce88 <powf+0x288>
 800cdce:	9302      	str	r3, [sp, #8]
 800cdd0:	eddd 7a02 	vldr	s15, [sp, #8]
 800cdd4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cdd8:	ee77 7a87 	vadd.f32	s15, s15, s14
 800cddc:	eef4 7a47 	vcmp.f32	s15, s14
 800cde0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cde4:	f47f af6e 	bne.w	800ccc4 <powf+0xc4>
 800cde8:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 800cea8 <powf+0x2a8>
 800cdec:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800cdf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cdf4:	d804      	bhi.n	800ce00 <powf+0x200>
 800cdf6:	b005      	add	sp, #20
 800cdf8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800cdfc:	f000 b87a 	b.w	800cef4 <__math_uflowf>
 800ce00:	ed9f 7b2b 	vldr	d7, [pc, #172]	; 800ceb0 <powf+0x2b0>
 800ce04:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800ce08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ce0c:	d504      	bpl.n	800ce18 <powf+0x218>
 800ce0e:	b005      	add	sp, #20
 800ce10:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800ce14:	f000 b874 	b.w	800cf00 <__math_may_uflowf>
 800ce18:	4b29      	ldr	r3, [pc, #164]	; (800cec0 <powf+0x2c0>)
 800ce1a:	ed93 7b40 	vldr	d7, [r3, #256]	; 0x100
 800ce1e:	ee30 6b07 	vadd.f64	d6, d0, d7
 800ce22:	ed8d 6b00 	vstr	d6, [sp]
 800ce26:	ee36 7b47 	vsub.f64	d7, d6, d7
 800ce2a:	ee30 7b47 	vsub.f64	d7, d0, d7
 800ce2e:	e9dd 6700 	ldrd	r6, r7, [sp]
 800ce32:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800ce36:	f006 011f 	and.w	r1, r6, #31
 800ce3a:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800ce3e:	e9d1 ce00 	ldrd	ip, lr, [r1]
 800ce42:	ed93 5b42 	vldr	d5, [r3, #264]	; 0x108
 800ce46:	ed93 6b44 	vldr	d6, [r3, #272]	; 0x110
 800ce4a:	ed93 4b46 	vldr	d4, [r3, #280]	; 0x118
 800ce4e:	eea7 6b05 	vfma.f64	d6, d7, d5
 800ce52:	ee27 5b07 	vmul.f64	d5, d7, d7
 800ce56:	1836      	adds	r6, r6, r0
 800ce58:	2300      	movs	r3, #0
 800ce5a:	eb13 040c 	adds.w	r4, r3, ip
 800ce5e:	ea4f 31c6 	mov.w	r1, r6, lsl #15
 800ce62:	eb41 050e 	adc.w	r5, r1, lr
 800ce66:	eea7 0b04 	vfma.f64	d0, d7, d4
 800ce6a:	ec45 4b17 	vmov	d7, r4, r5
 800ce6e:	eea6 0b05 	vfma.f64	d0, d6, d5
 800ce72:	ee20 0b07 	vmul.f64	d0, d0, d7
 800ce76:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800ce7a:	e734      	b.n	800cce6 <powf+0xe6>
 800ce7c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800ce80:	e731      	b.n	800cce6 <powf+0xe6>
 800ce82:	ed9f 0a10 	vldr	s0, [pc, #64]	; 800cec4 <powf+0x2c4>
 800ce86:	e72e      	b.n	800cce6 <powf+0xe6>
 800ce88:	9303      	str	r3, [sp, #12]
 800ce8a:	eddd 7a03 	vldr	s15, [sp, #12]
 800ce8e:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800ce92:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ce96:	e7a1      	b.n	800cddc <powf+0x1dc>
 800ce98:	ffd1d571 	.word	0xffd1d571
 800ce9c:	405fffff 	.word	0x405fffff
 800cea0:	ffa3aae2 	.word	0xffa3aae2
 800cea4:	405fffff 	.word	0x405fffff
 800cea8:	00000000 	.word	0x00000000
 800ceac:	c062c000 	.word	0xc062c000
 800ceb0:	00000000 	.word	0x00000000
 800ceb4:	c062a000 	.word	0xc062a000
 800ceb8:	0800d318 	.word	0x0800d318
 800cebc:	4b000000 	.word	0x4b000000
 800cec0:	0800d1d0 	.word	0x0800d1d0
 800cec4:	00000000 	.word	0x00000000

0800cec8 <with_errnof>:
 800cec8:	b513      	push	{r0, r1, r4, lr}
 800ceca:	4604      	mov	r4, r0
 800cecc:	ed8d 0a01 	vstr	s0, [sp, #4]
 800ced0:	f7ff fe4a 	bl	800cb68 <__errno>
 800ced4:	ed9d 0a01 	vldr	s0, [sp, #4]
 800ced8:	6004      	str	r4, [r0, #0]
 800ceda:	b002      	add	sp, #8
 800cedc:	bd10      	pop	{r4, pc}

0800cede <xflowf>:
 800cede:	b130      	cbz	r0, 800ceee <xflowf+0x10>
 800cee0:	eef1 7a40 	vneg.f32	s15, s0
 800cee4:	ee27 0a80 	vmul.f32	s0, s15, s0
 800cee8:	2022      	movs	r0, #34	; 0x22
 800ceea:	f7ff bfed 	b.w	800cec8 <with_errnof>
 800ceee:	eef0 7a40 	vmov.f32	s15, s0
 800cef2:	e7f7      	b.n	800cee4 <xflowf+0x6>

0800cef4 <__math_uflowf>:
 800cef4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800cefc <__math_uflowf+0x8>
 800cef8:	f7ff bff1 	b.w	800cede <xflowf>
 800cefc:	10000000 	.word	0x10000000

0800cf00 <__math_may_uflowf>:
 800cf00:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800cf08 <__math_may_uflowf+0x8>
 800cf04:	f7ff bfeb 	b.w	800cede <xflowf>
 800cf08:	1a200000 	.word	0x1a200000

0800cf0c <__math_oflowf>:
 800cf0c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800cf14 <__math_oflowf+0x8>
 800cf10:	f7ff bfe5 	b.w	800cede <xflowf>
 800cf14:	70000000 	.word	0x70000000

0800cf18 <__math_divzerof>:
 800cf18:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800cf1c:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 800cf20:	2800      	cmp	r0, #0
 800cf22:	fe40 7a27 	vseleq.f32	s15, s0, s15
 800cf26:	ed9f 0a03 	vldr	s0, [pc, #12]	; 800cf34 <__math_divzerof+0x1c>
 800cf2a:	2022      	movs	r0, #34	; 0x22
 800cf2c:	ee87 0a80 	vdiv.f32	s0, s15, s0
 800cf30:	f7ff bfca 	b.w	800cec8 <with_errnof>
 800cf34:	00000000 	.word	0x00000000

0800cf38 <__math_invalidf>:
 800cf38:	eef0 7a40 	vmov.f32	s15, s0
 800cf3c:	ee30 7a40 	vsub.f32	s14, s0, s0
 800cf40:	eef4 7a67 	vcmp.f32	s15, s15
 800cf44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf48:	ee87 0a07 	vdiv.f32	s0, s14, s14
 800cf4c:	d602      	bvs.n	800cf54 <__math_invalidf+0x1c>
 800cf4e:	2021      	movs	r0, #33	; 0x21
 800cf50:	f7ff bfba 	b.w	800cec8 <with_errnof>
 800cf54:	4770      	bx	lr
	...

0800cf58 <_init>:
 800cf58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf5a:	bf00      	nop
 800cf5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cf5e:	bc08      	pop	{r3}
 800cf60:	469e      	mov	lr, r3
 800cf62:	4770      	bx	lr

0800cf64 <_fini>:
 800cf64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf66:	bf00      	nop
 800cf68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cf6a:	bc08      	pop	{r3}
 800cf6c:	469e      	mov	lr, r3
 800cf6e:	4770      	bx	lr
