
microphone_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ca78  08000298  08000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002e8  0800cd10  0800cd10  0001cd10  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cff8  0800cff8  00020860  2**0
                  CONTENTS
  4 .ARM          00000008  0800cff8  0800cff8  0001cff8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d000  0800d000  00020860  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d000  0800d000  0001d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d004  0800d004  0001d004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000860  24000000  0800d008  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b3c  24000860  0800d868  00020860  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2400239c  0800d868  0002239c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020860  2**0
                  CONTENTS, READONLY
 12 .debug_info   00037c36  00000000  00000000  0002088e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000457a  00000000  00000000  000584c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001890  00000000  00000000  0005ca40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001760  00000000  00000000  0005e2d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003c91f  00000000  00000000  0005fa30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00028e02  00000000  00000000  0009c34f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0018c42a  00000000  00000000  000c5151  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000d1  00000000  00000000  0025157b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006cc8  00000000  00000000  0025164c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000860 	.word	0x24000860
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800ccf8 	.word	0x0800ccf8

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000864 	.word	0x24000864
 80002d4:	0800ccf8 	.word	0x0800ccf8

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96e 	b.w	80005cc <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468c      	mov	ip, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	f040 8083 	bne.w	800041e <__udivmoddi4+0x116>
 8000318:	428a      	cmp	r2, r1
 800031a:	4617      	mov	r7, r2
 800031c:	d947      	bls.n	80003ae <__udivmoddi4+0xa6>
 800031e:	fab2 f282 	clz	r2, r2
 8000322:	b142      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000324:	f1c2 0020 	rsb	r0, r2, #32
 8000328:	fa24 f000 	lsr.w	r0, r4, r0
 800032c:	4091      	lsls	r1, r2
 800032e:	4097      	lsls	r7, r2
 8000330:	ea40 0c01 	orr.w	ip, r0, r1
 8000334:	4094      	lsls	r4, r2
 8000336:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fbbc f6f8 	udiv	r6, ip, r8
 8000340:	fa1f fe87 	uxth.w	lr, r7
 8000344:	fb08 c116 	mls	r1, r8, r6, ip
 8000348:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034c:	fb06 f10e 	mul.w	r1, r6, lr
 8000350:	4299      	cmp	r1, r3
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x60>
 8000354:	18fb      	adds	r3, r7, r3
 8000356:	f106 30ff 	add.w	r0, r6, #4294967295
 800035a:	f080 8119 	bcs.w	8000590 <__udivmoddi4+0x288>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 8116 	bls.w	8000590 <__udivmoddi4+0x288>
 8000364:	3e02      	subs	r6, #2
 8000366:	443b      	add	r3, r7
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000370:	fb08 3310 	mls	r3, r8, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 fe0e 	mul.w	lr, r0, lr
 800037c:	45a6      	cmp	lr, r4
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x8c>
 8000380:	193c      	adds	r4, r7, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	f080 8105 	bcs.w	8000594 <__udivmoddi4+0x28c>
 800038a:	45a6      	cmp	lr, r4
 800038c:	f240 8102 	bls.w	8000594 <__udivmoddi4+0x28c>
 8000390:	3802      	subs	r0, #2
 8000392:	443c      	add	r4, r7
 8000394:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	2600      	movs	r6, #0
 800039e:	b11d      	cbz	r5, 80003a8 <__udivmoddi4+0xa0>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c5 4300 	strd	r4, r3, [r5]
 80003a8:	4631      	mov	r1, r6
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	b902      	cbnz	r2, 80003b2 <__udivmoddi4+0xaa>
 80003b0:	deff      	udf	#255	; 0xff
 80003b2:	fab2 f282 	clz	r2, r2
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d150      	bne.n	800045c <__udivmoddi4+0x154>
 80003ba:	1bcb      	subs	r3, r1, r7
 80003bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c0:	fa1f f887 	uxth.w	r8, r7
 80003c4:	2601      	movs	r6, #1
 80003c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80003ca:	0c21      	lsrs	r1, r4, #16
 80003cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003d4:	fb08 f30c 	mul.w	r3, r8, ip
 80003d8:	428b      	cmp	r3, r1
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0xe4>
 80003dc:	1879      	adds	r1, r7, r1
 80003de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0xe2>
 80003e4:	428b      	cmp	r3, r1
 80003e6:	f200 80e9 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 80003ea:	4684      	mov	ip, r0
 80003ec:	1ac9      	subs	r1, r1, r3
 80003ee:	b2a3      	uxth	r3, r4
 80003f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80003f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80003f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003fc:	fb08 f800 	mul.w	r8, r8, r0
 8000400:	45a0      	cmp	r8, r4
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x10c>
 8000404:	193c      	adds	r4, r7, r4
 8000406:	f100 33ff 	add.w	r3, r0, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x10a>
 800040c:	45a0      	cmp	r8, r4
 800040e:	f200 80d9 	bhi.w	80005c4 <__udivmoddi4+0x2bc>
 8000412:	4618      	mov	r0, r3
 8000414:	eba4 0408 	sub.w	r4, r4, r8
 8000418:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800041c:	e7bf      	b.n	800039e <__udivmoddi4+0x96>
 800041e:	428b      	cmp	r3, r1
 8000420:	d909      	bls.n	8000436 <__udivmoddi4+0x12e>
 8000422:	2d00      	cmp	r5, #0
 8000424:	f000 80b1 	beq.w	800058a <__udivmoddi4+0x282>
 8000428:	2600      	movs	r6, #0
 800042a:	e9c5 0100 	strd	r0, r1, [r5]
 800042e:	4630      	mov	r0, r6
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	fab3 f683 	clz	r6, r3
 800043a:	2e00      	cmp	r6, #0
 800043c:	d14a      	bne.n	80004d4 <__udivmoddi4+0x1cc>
 800043e:	428b      	cmp	r3, r1
 8000440:	d302      	bcc.n	8000448 <__udivmoddi4+0x140>
 8000442:	4282      	cmp	r2, r0
 8000444:	f200 80b8 	bhi.w	80005b8 <__udivmoddi4+0x2b0>
 8000448:	1a84      	subs	r4, r0, r2
 800044a:	eb61 0103 	sbc.w	r1, r1, r3
 800044e:	2001      	movs	r0, #1
 8000450:	468c      	mov	ip, r1
 8000452:	2d00      	cmp	r5, #0
 8000454:	d0a8      	beq.n	80003a8 <__udivmoddi4+0xa0>
 8000456:	e9c5 4c00 	strd	r4, ip, [r5]
 800045a:	e7a5      	b.n	80003a8 <__udivmoddi4+0xa0>
 800045c:	f1c2 0320 	rsb	r3, r2, #32
 8000460:	fa20 f603 	lsr.w	r6, r0, r3
 8000464:	4097      	lsls	r7, r2
 8000466:	fa01 f002 	lsl.w	r0, r1, r2
 800046a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800046e:	40d9      	lsrs	r1, r3
 8000470:	4330      	orrs	r0, r6
 8000472:	0c03      	lsrs	r3, r0, #16
 8000474:	fbb1 f6fe 	udiv	r6, r1, lr
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000480:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000484:	fb06 f108 	mul.w	r1, r6, r8
 8000488:	4299      	cmp	r1, r3
 800048a:	fa04 f402 	lsl.w	r4, r4, r2
 800048e:	d909      	bls.n	80004a4 <__udivmoddi4+0x19c>
 8000490:	18fb      	adds	r3, r7, r3
 8000492:	f106 3cff 	add.w	ip, r6, #4294967295
 8000496:	f080 808d 	bcs.w	80005b4 <__udivmoddi4+0x2ac>
 800049a:	4299      	cmp	r1, r3
 800049c:	f240 808a 	bls.w	80005b4 <__udivmoddi4+0x2ac>
 80004a0:	3e02      	subs	r6, #2
 80004a2:	443b      	add	r3, r7
 80004a4:	1a5b      	subs	r3, r3, r1
 80004a6:	b281      	uxth	r1, r0
 80004a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80004ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b4:	fb00 f308 	mul.w	r3, r0, r8
 80004b8:	428b      	cmp	r3, r1
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x1c4>
 80004bc:	1879      	adds	r1, r7, r1
 80004be:	f100 3cff 	add.w	ip, r0, #4294967295
 80004c2:	d273      	bcs.n	80005ac <__udivmoddi4+0x2a4>
 80004c4:	428b      	cmp	r3, r1
 80004c6:	d971      	bls.n	80005ac <__udivmoddi4+0x2a4>
 80004c8:	3802      	subs	r0, #2
 80004ca:	4439      	add	r1, r7
 80004cc:	1acb      	subs	r3, r1, r3
 80004ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004d2:	e778      	b.n	80003c6 <__udivmoddi4+0xbe>
 80004d4:	f1c6 0c20 	rsb	ip, r6, #32
 80004d8:	fa03 f406 	lsl.w	r4, r3, r6
 80004dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e0:	431c      	orrs	r4, r3
 80004e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80004e6:	fa01 f306 	lsl.w	r3, r1, r6
 80004ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80004f2:	431f      	orrs	r7, r3
 80004f4:	0c3b      	lsrs	r3, r7, #16
 80004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fa:	fa1f f884 	uxth.w	r8, r4
 80004fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000502:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000506:	fb09 fa08 	mul.w	sl, r9, r8
 800050a:	458a      	cmp	sl, r1
 800050c:	fa02 f206 	lsl.w	r2, r2, r6
 8000510:	fa00 f306 	lsl.w	r3, r0, r6
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x220>
 8000516:	1861      	adds	r1, r4, r1
 8000518:	f109 30ff 	add.w	r0, r9, #4294967295
 800051c:	d248      	bcs.n	80005b0 <__udivmoddi4+0x2a8>
 800051e:	458a      	cmp	sl, r1
 8000520:	d946      	bls.n	80005b0 <__udivmoddi4+0x2a8>
 8000522:	f1a9 0902 	sub.w	r9, r9, #2
 8000526:	4421      	add	r1, r4
 8000528:	eba1 010a 	sub.w	r1, r1, sl
 800052c:	b2bf      	uxth	r7, r7
 800052e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000532:	fb0e 1110 	mls	r1, lr, r0, r1
 8000536:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800053a:	fb00 f808 	mul.w	r8, r0, r8
 800053e:	45b8      	cmp	r8, r7
 8000540:	d907      	bls.n	8000552 <__udivmoddi4+0x24a>
 8000542:	19e7      	adds	r7, r4, r7
 8000544:	f100 31ff 	add.w	r1, r0, #4294967295
 8000548:	d22e      	bcs.n	80005a8 <__udivmoddi4+0x2a0>
 800054a:	45b8      	cmp	r8, r7
 800054c:	d92c      	bls.n	80005a8 <__udivmoddi4+0x2a0>
 800054e:	3802      	subs	r0, #2
 8000550:	4427      	add	r7, r4
 8000552:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000556:	eba7 0708 	sub.w	r7, r7, r8
 800055a:	fba0 8902 	umull	r8, r9, r0, r2
 800055e:	454f      	cmp	r7, r9
 8000560:	46c6      	mov	lr, r8
 8000562:	4649      	mov	r1, r9
 8000564:	d31a      	bcc.n	800059c <__udivmoddi4+0x294>
 8000566:	d017      	beq.n	8000598 <__udivmoddi4+0x290>
 8000568:	b15d      	cbz	r5, 8000582 <__udivmoddi4+0x27a>
 800056a:	ebb3 020e 	subs.w	r2, r3, lr
 800056e:	eb67 0701 	sbc.w	r7, r7, r1
 8000572:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000576:	40f2      	lsrs	r2, r6
 8000578:	ea4c 0202 	orr.w	r2, ip, r2
 800057c:	40f7      	lsrs	r7, r6
 800057e:	e9c5 2700 	strd	r2, r7, [r5]
 8000582:	2600      	movs	r6, #0
 8000584:	4631      	mov	r1, r6
 8000586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800058a:	462e      	mov	r6, r5
 800058c:	4628      	mov	r0, r5
 800058e:	e70b      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000590:	4606      	mov	r6, r0
 8000592:	e6e9      	b.n	8000368 <__udivmoddi4+0x60>
 8000594:	4618      	mov	r0, r3
 8000596:	e6fd      	b.n	8000394 <__udivmoddi4+0x8c>
 8000598:	4543      	cmp	r3, r8
 800059a:	d2e5      	bcs.n	8000568 <__udivmoddi4+0x260>
 800059c:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a0:	eb69 0104 	sbc.w	r1, r9, r4
 80005a4:	3801      	subs	r0, #1
 80005a6:	e7df      	b.n	8000568 <__udivmoddi4+0x260>
 80005a8:	4608      	mov	r0, r1
 80005aa:	e7d2      	b.n	8000552 <__udivmoddi4+0x24a>
 80005ac:	4660      	mov	r0, ip
 80005ae:	e78d      	b.n	80004cc <__udivmoddi4+0x1c4>
 80005b0:	4681      	mov	r9, r0
 80005b2:	e7b9      	b.n	8000528 <__udivmoddi4+0x220>
 80005b4:	4666      	mov	r6, ip
 80005b6:	e775      	b.n	80004a4 <__udivmoddi4+0x19c>
 80005b8:	4630      	mov	r0, r6
 80005ba:	e74a      	b.n	8000452 <__udivmoddi4+0x14a>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	4439      	add	r1, r7
 80005c2:	e713      	b.n	80003ec <__udivmoddi4+0xe4>
 80005c4:	3802      	subs	r0, #2
 80005c6:	443c      	add	r4, r7
 80005c8:	e724      	b.n	8000414 <__udivmoddi4+0x10c>
 80005ca:	bf00      	nop

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005d0:	b480      	push	{r7}
 80005d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005d4:	4b3f      	ldr	r3, [pc, #252]	; (80006d4 <SystemInit+0x104>)
 80005d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005da:	4a3e      	ldr	r2, [pc, #248]	; (80006d4 <SystemInit+0x104>)
 80005dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80005e4:	4b3b      	ldr	r3, [pc, #236]	; (80006d4 <SystemInit+0x104>)
 80005e6:	691b      	ldr	r3, [r3, #16]
 80005e8:	4a3a      	ldr	r2, [pc, #232]	; (80006d4 <SystemInit+0x104>)
 80005ea:	f043 0310 	orr.w	r3, r3, #16
 80005ee:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005f0:	4b39      	ldr	r3, [pc, #228]	; (80006d8 <SystemInit+0x108>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	f003 030f 	and.w	r3, r3, #15
 80005f8:	2b06      	cmp	r3, #6
 80005fa:	d807      	bhi.n	800060c <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80005fc:	4b36      	ldr	r3, [pc, #216]	; (80006d8 <SystemInit+0x108>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	f023 030f 	bic.w	r3, r3, #15
 8000604:	4a34      	ldr	r2, [pc, #208]	; (80006d8 <SystemInit+0x108>)
 8000606:	f043 0307 	orr.w	r3, r3, #7
 800060a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800060c:	4b33      	ldr	r3, [pc, #204]	; (80006dc <SystemInit+0x10c>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	4a32      	ldr	r2, [pc, #200]	; (80006dc <SystemInit+0x10c>)
 8000612:	f043 0301 	orr.w	r3, r3, #1
 8000616:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000618:	4b30      	ldr	r3, [pc, #192]	; (80006dc <SystemInit+0x10c>)
 800061a:	2200      	movs	r2, #0
 800061c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800061e:	4b2f      	ldr	r3, [pc, #188]	; (80006dc <SystemInit+0x10c>)
 8000620:	681a      	ldr	r2, [r3, #0]
 8000622:	492e      	ldr	r1, [pc, #184]	; (80006dc <SystemInit+0x10c>)
 8000624:	4b2e      	ldr	r3, [pc, #184]	; (80006e0 <SystemInit+0x110>)
 8000626:	4013      	ands	r3, r2
 8000628:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800062a:	4b2b      	ldr	r3, [pc, #172]	; (80006d8 <SystemInit+0x108>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	f003 0308 	and.w	r3, r3, #8
 8000632:	2b00      	cmp	r3, #0
 8000634:	d007      	beq.n	8000646 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000636:	4b28      	ldr	r3, [pc, #160]	; (80006d8 <SystemInit+0x108>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	f023 030f 	bic.w	r3, r3, #15
 800063e:	4a26      	ldr	r2, [pc, #152]	; (80006d8 <SystemInit+0x108>)
 8000640:	f043 0307 	orr.w	r3, r3, #7
 8000644:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000646:	4b25      	ldr	r3, [pc, #148]	; (80006dc <SystemInit+0x10c>)
 8000648:	2200      	movs	r2, #0
 800064a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800064c:	4b23      	ldr	r3, [pc, #140]	; (80006dc <SystemInit+0x10c>)
 800064e:	2200      	movs	r2, #0
 8000650:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000652:	4b22      	ldr	r3, [pc, #136]	; (80006dc <SystemInit+0x10c>)
 8000654:	2200      	movs	r2, #0
 8000656:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000658:	4b20      	ldr	r3, [pc, #128]	; (80006dc <SystemInit+0x10c>)
 800065a:	4a22      	ldr	r2, [pc, #136]	; (80006e4 <SystemInit+0x114>)
 800065c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800065e:	4b1f      	ldr	r3, [pc, #124]	; (80006dc <SystemInit+0x10c>)
 8000660:	4a21      	ldr	r2, [pc, #132]	; (80006e8 <SystemInit+0x118>)
 8000662:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000664:	4b1d      	ldr	r3, [pc, #116]	; (80006dc <SystemInit+0x10c>)
 8000666:	4a21      	ldr	r2, [pc, #132]	; (80006ec <SystemInit+0x11c>)
 8000668:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800066a:	4b1c      	ldr	r3, [pc, #112]	; (80006dc <SystemInit+0x10c>)
 800066c:	2200      	movs	r2, #0
 800066e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000670:	4b1a      	ldr	r3, [pc, #104]	; (80006dc <SystemInit+0x10c>)
 8000672:	4a1e      	ldr	r2, [pc, #120]	; (80006ec <SystemInit+0x11c>)
 8000674:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000676:	4b19      	ldr	r3, [pc, #100]	; (80006dc <SystemInit+0x10c>)
 8000678:	2200      	movs	r2, #0
 800067a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800067c:	4b17      	ldr	r3, [pc, #92]	; (80006dc <SystemInit+0x10c>)
 800067e:	4a1b      	ldr	r2, [pc, #108]	; (80006ec <SystemInit+0x11c>)
 8000680:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000682:	4b16      	ldr	r3, [pc, #88]	; (80006dc <SystemInit+0x10c>)
 8000684:	2200      	movs	r2, #0
 8000686:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000688:	4b14      	ldr	r3, [pc, #80]	; (80006dc <SystemInit+0x10c>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	4a13      	ldr	r2, [pc, #76]	; (80006dc <SystemInit+0x10c>)
 800068e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000692:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000694:	4b11      	ldr	r3, [pc, #68]	; (80006dc <SystemInit+0x10c>)
 8000696:	2200      	movs	r2, #0
 8000698:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800069a:	4b15      	ldr	r3, [pc, #84]	; (80006f0 <SystemInit+0x120>)
 800069c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800069e:	4a14      	ldr	r2, [pc, #80]	; (80006f0 <SystemInit+0x120>)
 80006a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006a4:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80006a6:	4b13      	ldr	r3, [pc, #76]	; (80006f4 <SystemInit+0x124>)
 80006a8:	681a      	ldr	r2, [r3, #0]
 80006aa:	4b13      	ldr	r3, [pc, #76]	; (80006f8 <SystemInit+0x128>)
 80006ac:	4013      	ands	r3, r2
 80006ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80006b2:	d202      	bcs.n	80006ba <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006b4:	4b11      	ldr	r3, [pc, #68]	; (80006fc <SystemInit+0x12c>)
 80006b6:	2201      	movs	r2, #1
 80006b8:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006ba:	4b11      	ldr	r3, [pc, #68]	; (8000700 <SystemInit+0x130>)
 80006bc:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80006c0:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 80006c2:	4b04      	ldr	r3, [pc, #16]	; (80006d4 <SystemInit+0x104>)
 80006c4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80006c8:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 80006ca:	bf00      	nop
 80006cc:	46bd      	mov	sp, r7
 80006ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d2:	4770      	bx	lr
 80006d4:	e000ed00 	.word	0xe000ed00
 80006d8:	52002000 	.word	0x52002000
 80006dc:	58024400 	.word	0x58024400
 80006e0:	eaf6ed7f 	.word	0xeaf6ed7f
 80006e4:	02020200 	.word	0x02020200
 80006e8:	01ff0000 	.word	0x01ff0000
 80006ec:	01010280 	.word	0x01010280
 80006f0:	580000c0 	.word	0x580000c0
 80006f4:	5c001000 	.word	0x5c001000
 80006f8:	ffff0000 	.word	0xffff0000
 80006fc:	51008108 	.word	0x51008108
 8000700:	52004000 	.word	0x52004000

08000704 <FIR_Filter_Init>:
	for(uint32_t i = 0; i < 2; i++){
		arm_mat_init_q15(&instance[i], numRow, numCol, (q15_t*)&matrix[offset*i]);
	}
}

void FIR_Filter_Init(dsp_buffer_t* buff, uint32_t channelNumber, float *coeff){
 8000704:	b580      	push	{r7, lr}
 8000706:	b088      	sub	sp, #32
 8000708:	af02      	add	r7, sp, #8
 800070a:	60f8      	str	r0, [r7, #12]
 800070c:	60b9      	str	r1, [r7, #8]
 800070e:	607a      	str	r2, [r7, #4]
	for(uint32_t i = 0; i < channelNumber; i++){
 8000710:	2300      	movs	r3, #0
 8000712:	617b      	str	r3, [r7, #20]
 8000714:	e019      	b.n	800074a <FIR_Filter_Init+0x46>
		arm_fir_init_f32(&buff[i].Filter_inst, TAPS, &coeff[0], buff[i].state, BLOCK_SIZE);
 8000716:	697b      	ldr	r3, [r7, #20]
 8000718:	f640 32f4 	movw	r2, #3060	; 0xbf4
 800071c:	fb02 f303 	mul.w	r3, r2, r3
 8000720:	68fa      	ldr	r2, [r7, #12]
 8000722:	4413      	add	r3, r2
 8000724:	4618      	mov	r0, r3
 8000726:	697b      	ldr	r3, [r7, #20]
 8000728:	f640 32f4 	movw	r2, #3060	; 0xbf4
 800072c:	fb02 f303 	mul.w	r3, r2, r3
 8000730:	68fa      	ldr	r2, [r7, #12]
 8000732:	4413      	add	r3, r2
 8000734:	330c      	adds	r3, #12
 8000736:	f44f 7200 	mov.w	r2, #512	; 0x200
 800073a:	9200      	str	r2, [sp, #0]
 800073c:	687a      	ldr	r2, [r7, #4]
 800073e:	21fb      	movs	r1, #251	; 0xfb
 8000740:	f00a f9d2 	bl	800aae8 <arm_fir_init_f32>
	for(uint32_t i = 0; i < channelNumber; i++){
 8000744:	697b      	ldr	r3, [r7, #20]
 8000746:	3301      	adds	r3, #1
 8000748:	617b      	str	r3, [r7, #20]
 800074a:	697a      	ldr	r2, [r7, #20]
 800074c:	68bb      	ldr	r3, [r7, #8]
 800074e:	429a      	cmp	r2, r3
 8000750:	d3e1      	bcc.n	8000716 <FIR_Filter_Init+0x12>
	}
}
 8000752:	bf00      	nop
 8000754:	bf00      	nop
 8000756:	3718      	adds	r7, #24
 8000758:	46bd      	mov	sp, r7
 800075a:	bd80      	pop	{r7, pc}

0800075c <FIR_Filter>:

void FIR_Filter(dsp_buffer_t* dsp, float (*input)[BLOCK_SIZE], float (*output)[BLOCK_SIZE] , uint32_t channelNumber){
 800075c:	b580      	push	{r7, lr}
 800075e:	b086      	sub	sp, #24
 8000760:	af00      	add	r7, sp, #0
 8000762:	60f8      	str	r0, [r7, #12]
 8000764:	60b9      	str	r1, [r7, #8]
 8000766:	607a      	str	r2, [r7, #4]
 8000768:	603b      	str	r3, [r7, #0]
	for(uint32_t i = 0; i < channelNumber; i++){
 800076a:	2300      	movs	r3, #0
 800076c:	617b      	str	r3, [r7, #20]
 800076e:	e018      	b.n	80007a2 <FIR_Filter+0x46>
		arm_fir_f32(&dsp[i].Filter_inst, &input[i][0], &output[i][0], BLOCK_SIZE);
 8000770:	697b      	ldr	r3, [r7, #20]
 8000772:	f640 32f4 	movw	r2, #3060	; 0xbf4
 8000776:	fb02 f303 	mul.w	r3, r2, r3
 800077a:	68fa      	ldr	r2, [r7, #12]
 800077c:	4413      	add	r3, r2
 800077e:	4618      	mov	r0, r3
 8000780:	697b      	ldr	r3, [r7, #20]
 8000782:	02db      	lsls	r3, r3, #11
 8000784:	68ba      	ldr	r2, [r7, #8]
 8000786:	4413      	add	r3, r2
 8000788:	4619      	mov	r1, r3
 800078a:	697b      	ldr	r3, [r7, #20]
 800078c:	02db      	lsls	r3, r3, #11
 800078e:	687a      	ldr	r2, [r7, #4]
 8000790:	4413      	add	r3, r2
 8000792:	461a      	mov	r2, r3
 8000794:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000798:	f00a f936 	bl	800aa08 <arm_fir_f32>
	for(uint32_t i = 0; i < channelNumber; i++){
 800079c:	697b      	ldr	r3, [r7, #20]
 800079e:	3301      	adds	r3, #1
 80007a0:	617b      	str	r3, [r7, #20]
 80007a2:	697a      	ldr	r2, [r7, #20]
 80007a4:	683b      	ldr	r3, [r7, #0]
 80007a6:	429a      	cmp	r2, r3
 80007a8:	d3e2      	bcc.n	8000770 <FIR_Filter+0x14>
	}
}
 80007aa:	bf00      	nop
 80007ac:	bf00      	nop
 80007ae:	3718      	adds	r7, #24
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}

080007b4 <Q15_To_Float>:
	for(uint32_t i = 0; i < channelNumber; i++){
		arm_rfft_fast_init_f32(&fft_instance[i], FFT_LEN);
	}
}

void Q15_To_Float(q15_t (*q15)[Q15_FLOAT_LEN], float (*flt)[Q15_FLOAT_LEN], uint32_t channelNumber){
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b086      	sub	sp, #24
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	60f8      	str	r0, [r7, #12]
 80007bc:	60b9      	str	r1, [r7, #8]
 80007be:	607a      	str	r2, [r7, #4]
	for(uint32_t i = 0; i < channelNumber; i++){
 80007c0:	2300      	movs	r3, #0
 80007c2:	617b      	str	r3, [r7, #20]
 80007c4:	e010      	b.n	80007e8 <Q15_To_Float+0x34>
		arm_q15_to_float(&q15[i][0], &flt[i][0], Q15_FLOAT_LEN);
 80007c6:	697b      	ldr	r3, [r7, #20]
 80007c8:	029b      	lsls	r3, r3, #10
 80007ca:	68fa      	ldr	r2, [r7, #12]
 80007cc:	4413      	add	r3, r2
 80007ce:	4618      	mov	r0, r3
 80007d0:	697b      	ldr	r3, [r7, #20]
 80007d2:	02db      	lsls	r3, r3, #11
 80007d4:	68ba      	ldr	r2, [r7, #8]
 80007d6:	4413      	add	r3, r2
 80007d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007dc:	4619      	mov	r1, r3
 80007de:	f00a f9a3 	bl	800ab28 <arm_q15_to_float>
	for(uint32_t i = 0; i < channelNumber; i++){
 80007e2:	697b      	ldr	r3, [r7, #20]
 80007e4:	3301      	adds	r3, #1
 80007e6:	617b      	str	r3, [r7, #20]
 80007e8:	697a      	ldr	r2, [r7, #20]
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	429a      	cmp	r2, r3
 80007ee:	d3ea      	bcc.n	80007c6 <Q15_To_Float+0x12>
	}
}
 80007f0:	bf00      	nop
 80007f2:	bf00      	nop
 80007f4:	3718      	adds	r7, #24
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}

080007fa <pdm_to_pcm_init>:
 */


#include "pdm_to_pcm.h"

void pdm_to_pcm_init(PDM_Filter_Handler_t* PDM_FilterHandler, PDM_Filter_Config_t* PDM_FilterConfig, uint32_t channelNumber){
 80007fa:	b580      	push	{r7, lr}
 80007fc:	b086      	sub	sp, #24
 80007fe:	af00      	add	r7, sp, #0
 8000800:	60f8      	str	r0, [r7, #12]
 8000802:	60b9      	str	r1, [r7, #8]
 8000804:	607a      	str	r2, [r7, #4]

	  for(uint32_t index = 0; index < channelNumber; index++)
 8000806:	2300      	movs	r3, #0
 8000808:	617b      	str	r3, [r7, #20]
 800080a:	e065      	b.n	80008d8 <pdm_to_pcm_init+0xde>
	  {
	    /* Init PDM filters */
	    PDM_FilterHandler[index].bit_order  = PDM_FILTER_BIT_ORDER_MSB;
 800080c:	697b      	ldr	r3, [r7, #20]
 800080e:	224c      	movs	r2, #76	; 0x4c
 8000810:	fb02 f303 	mul.w	r3, r2, r3
 8000814:	68fa      	ldr	r2, [r7, #12]
 8000816:	4413      	add	r3, r2
 8000818:	2201      	movs	r2, #1
 800081a:	801a      	strh	r2, [r3, #0]
	    PDM_FilterHandler[index].endianness = PDM_FILTER_ENDIANNESS_LE;
 800081c:	697b      	ldr	r3, [r7, #20]
 800081e:	224c      	movs	r2, #76	; 0x4c
 8000820:	fb02 f303 	mul.w	r3, r2, r3
 8000824:	68fa      	ldr	r2, [r7, #12]
 8000826:	4413      	add	r3, r2
 8000828:	2200      	movs	r2, #0
 800082a:	805a      	strh	r2, [r3, #2]
	    PDM_FilterHandler[index].high_pass_tap = HIGH_PASS;
 800082c:	697b      	ldr	r3, [r7, #20]
 800082e:	224c      	movs	r2, #76	; 0x4c
 8000830:	fb02 f303 	mul.w	r3, r2, r3
 8000834:	68fa      	ldr	r2, [r7, #12]
 8000836:	4413      	add	r3, r2
 8000838:	2200      	movs	r2, #0
 800083a:	605a      	str	r2, [r3, #4]
	    PDM_FilterHandler[index].out_ptr_channels = 1;
 800083c:	697b      	ldr	r3, [r7, #20]
 800083e:	224c      	movs	r2, #76	; 0x4c
 8000840:	fb02 f303 	mul.w	r3, r2, r3
 8000844:	68fa      	ldr	r2, [r7, #12]
 8000846:	4413      	add	r3, r2
 8000848:	2201      	movs	r2, #1
 800084a:	815a      	strh	r2, [r3, #10]
	    PDM_FilterHandler[index].in_ptr_channels  = channelNumber;
 800084c:	697b      	ldr	r3, [r7, #20]
 800084e:	224c      	movs	r2, #76	; 0x4c
 8000850:	fb02 f303 	mul.w	r3, r2, r3
 8000854:	68fa      	ldr	r2, [r7, #12]
 8000856:	4413      	add	r3, r2
 8000858:	687a      	ldr	r2, [r7, #4]
 800085a:	b292      	uxth	r2, r2
 800085c:	811a      	strh	r2, [r3, #8]
	    PDM_Filter_Init((PDM_Filter_Handler_t *)(&PDM_FilterHandler[index]));
 800085e:	697b      	ldr	r3, [r7, #20]
 8000860:	224c      	movs	r2, #76	; 0x4c
 8000862:	fb02 f303 	mul.w	r3, r2, r3
 8000866:	68fa      	ldr	r2, [r7, #12]
 8000868:	4413      	add	r3, r2
 800086a:	4618      	mov	r0, r3
 800086c:	f00b fe6a 	bl	800c544 <PDM_Filter_Init>

	    /* Configure PDM filters */
	    PDM_FilterConfig[index].output_samples_number = PCM_CHUNK_SIZE;
 8000870:	697a      	ldr	r2, [r7, #20]
 8000872:	4613      	mov	r3, r2
 8000874:	005b      	lsls	r3, r3, #1
 8000876:	4413      	add	r3, r2
 8000878:	005b      	lsls	r3, r3, #1
 800087a:	461a      	mov	r2, r3
 800087c:	68bb      	ldr	r3, [r7, #8]
 800087e:	4413      	add	r3, r2
 8000880:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000884:	805a      	strh	r2, [r3, #2]
	    PDM_FilterConfig[index].mic_gain = MIC_GAIN;
 8000886:	697a      	ldr	r2, [r7, #20]
 8000888:	4613      	mov	r3, r2
 800088a:	005b      	lsls	r3, r3, #1
 800088c:	4413      	add	r3, r2
 800088e:	005b      	lsls	r3, r3, #1
 8000890:	461a      	mov	r2, r3
 8000892:	68bb      	ldr	r3, [r7, #8]
 8000894:	4413      	add	r3, r2
 8000896:	f64f 72fa 	movw	r2, #65530	; 0xfffa
 800089a:	809a      	strh	r2, [r3, #4]
	    PDM_FilterConfig[index].decimation_factor = DECIMATION;
 800089c:	697a      	ldr	r2, [r7, #20]
 800089e:	4613      	mov	r3, r2
 80008a0:	005b      	lsls	r3, r3, #1
 80008a2:	4413      	add	r3, r2
 80008a4:	005b      	lsls	r3, r3, #1
 80008a6:	461a      	mov	r2, r3
 80008a8:	68bb      	ldr	r3, [r7, #8]
 80008aa:	4413      	add	r3, r2
 80008ac:	2202      	movs	r2, #2
 80008ae:	801a      	strh	r2, [r3, #0]
	    PDM_Filter_setConfig((PDM_Filter_Handler_t*)&PDM_FilterHandler[index], (PDM_Filter_Config_t*)&PDM_FilterConfig[index]);
 80008b0:	697b      	ldr	r3, [r7, #20]
 80008b2:	224c      	movs	r2, #76	; 0x4c
 80008b4:	fb02 f303 	mul.w	r3, r2, r3
 80008b8:	68fa      	ldr	r2, [r7, #12]
 80008ba:	18d0      	adds	r0, r2, r3
 80008bc:	697a      	ldr	r2, [r7, #20]
 80008be:	4613      	mov	r3, r2
 80008c0:	005b      	lsls	r3, r3, #1
 80008c2:	4413      	add	r3, r2
 80008c4:	005b      	lsls	r3, r3, #1
 80008c6:	461a      	mov	r2, r3
 80008c8:	68bb      	ldr	r3, [r7, #8]
 80008ca:	4413      	add	r3, r2
 80008cc:	4619      	mov	r1, r3
 80008ce:	f00b ff09 	bl	800c6e4 <PDM_Filter_setConfig>
	  for(uint32_t index = 0; index < channelNumber; index++)
 80008d2:	697b      	ldr	r3, [r7, #20]
 80008d4:	3301      	adds	r3, #1
 80008d6:	617b      	str	r3, [r7, #20]
 80008d8:	697a      	ldr	r2, [r7, #20]
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	429a      	cmp	r2, r3
 80008de:	d395      	bcc.n	800080c <pdm_to_pcm_init+0x12>
	  }
}
 80008e0:	bf00      	nop
 80008e2:	bf00      	nop
 80008e4:	3718      	adds	r7, #24
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}
	...

080008ec <pdm_to_pcm>:

void pdm_to_pcm(PDM_Filter_Handler_t* PDM_FilterHandler, uint8_t *pdm, uint16_t (*pcm)[PCM_CHUNK_SIZE],  uint32_t channelNumber){
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b08a      	sub	sp, #40	; 0x28
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	60f8      	str	r0, [r7, #12]
 80008f4:	60b9      	str	r1, [r7, #8]
 80008f6:	607a      	str	r2, [r7, #4]
 80008f8:	603b      	str	r3, [r7, #0]
 80008fa:	68bb      	ldr	r3, [r7, #8]
 80008fc:	623b      	str	r3, [r7, #32]
 80008fe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000902:	61fb      	str	r3, [r7, #28]
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_InvalidateDCache_by_Addr (void *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 8000904:	69fb      	ldr	r3, [r7, #28]
 8000906:	2b00      	cmp	r3, #0
 8000908:	dd1d      	ble.n	8000946 <pdm_to_pcm+0x5a>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 800090a:	6a3b      	ldr	r3, [r7, #32]
 800090c:	f003 021f 	and.w	r2, r3, #31
 8000910:	69fb      	ldr	r3, [r7, #28]
 8000912:	4413      	add	r3, r2
 8000914:	61bb      	str	r3, [r7, #24]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8000916:	6a3b      	ldr	r3, [r7, #32]
 8000918:	617b      	str	r3, [r7, #20]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800091a:	f3bf 8f4f 	dsb	sy
}
 800091e:	bf00      	nop
    
      __DSB();

      do {
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8000920:	4a19      	ldr	r2, [pc, #100]	; (8000988 <pdm_to_pcm+0x9c>)
 8000922:	697b      	ldr	r3, [r7, #20]
 8000924:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8000928:	697b      	ldr	r3, [r7, #20]
 800092a:	3320      	adds	r3, #32
 800092c:	617b      	str	r3, [r7, #20]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 800092e:	69bb      	ldr	r3, [r7, #24]
 8000930:	3b20      	subs	r3, #32
 8000932:	61bb      	str	r3, [r7, #24]
      } while ( op_size > 0 );
 8000934:	69bb      	ldr	r3, [r7, #24]
 8000936:	2b00      	cmp	r3, #0
 8000938:	dcf2      	bgt.n	8000920 <pdm_to_pcm+0x34>
  __ASM volatile ("dsb 0xF":::"memory");
 800093a:	f3bf 8f4f 	dsb	sy
}
 800093e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000940:	f3bf 8f6f 	isb	sy
}
 8000944:	bf00      	nop

      __DSB();
      __ISB();
    }
  #endif
}
 8000946:	bf00      	nop

	SCB_InvalidateDCache_by_Addr((uint32_t*)&pdm[0], (uint32_t)((float)BUFFER_SIZE*((float)CHANNEL_NUMBER/2.0)));

	for(uint32_t i = 0; i < channelNumber; i++){
 8000948:	2300      	movs	r3, #0
 800094a:	627b      	str	r3, [r7, #36]	; 0x24
 800094c:	e013      	b.n	8000976 <pdm_to_pcm+0x8a>
		PDM_Filter(&pdm[i], &pcm[i][0], &PDM_FilterHandler[i]);
 800094e:	68ba      	ldr	r2, [r7, #8]
 8000950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000952:	18d0      	adds	r0, r2, r3
 8000954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000956:	029b      	lsls	r3, r3, #10
 8000958:	687a      	ldr	r2, [r7, #4]
 800095a:	4413      	add	r3, r2
 800095c:	4619      	mov	r1, r3
 800095e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000960:	224c      	movs	r2, #76	; 0x4c
 8000962:	fb02 f303 	mul.w	r3, r2, r3
 8000966:	68fa      	ldr	r2, [r7, #12]
 8000968:	4413      	add	r3, r2
 800096a:	461a      	mov	r2, r3
 800096c:	f00b ffb4 	bl	800c8d8 <PDM_Filter>
	for(uint32_t i = 0; i < channelNumber; i++){
 8000970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000972:	3301      	adds	r3, #1
 8000974:	627b      	str	r3, [r7, #36]	; 0x24
 8000976:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000978:	683b      	ldr	r3, [r7, #0]
 800097a:	429a      	cmp	r2, r3
 800097c:	d3e7      	bcc.n	800094e <pdm_to_pcm+0x62>
	}


}
 800097e:	bf00      	nop
 8000980:	bf00      	nop
 8000982:	3728      	adds	r7, #40	; 0x28
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}
 8000988:	e000ed00 	.word	0xe000ed00

0800098c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b086      	sub	sp, #24
 8000990:	af00      	add	r7, sp, #0
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000992:	4b97      	ldr	r3, [pc, #604]	; (8000bf0 <main+0x264>)
 8000994:	695b      	ldr	r3, [r3, #20]
 8000996:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800099a:	2b00      	cmp	r3, #0
 800099c:	d11b      	bne.n	80009d6 <main+0x4a>
  __ASM volatile ("dsb 0xF":::"memory");
 800099e:	f3bf 8f4f 	dsb	sy
}
 80009a2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80009a4:	f3bf 8f6f 	isb	sy
}
 80009a8:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80009aa:	4b91      	ldr	r3, [pc, #580]	; (8000bf0 <main+0x264>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80009b2:	f3bf 8f4f 	dsb	sy
}
 80009b6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80009b8:	f3bf 8f6f 	isb	sy
}
 80009bc:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80009be:	4b8c      	ldr	r3, [pc, #560]	; (8000bf0 <main+0x264>)
 80009c0:	695b      	ldr	r3, [r3, #20]
 80009c2:	4a8b      	ldr	r2, [pc, #556]	; (8000bf0 <main+0x264>)
 80009c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009c8:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80009ca:	f3bf 8f4f 	dsb	sy
}
 80009ce:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80009d0:	f3bf 8f6f 	isb	sy
}
 80009d4:	e000      	b.n	80009d8 <main+0x4c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80009d6:	bf00      	nop
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80009d8:	4b85      	ldr	r3, [pc, #532]	; (8000bf0 <main+0x264>)
 80009da:	695b      	ldr	r3, [r3, #20]
 80009dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d138      	bne.n	8000a56 <main+0xca>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80009e4:	4b82      	ldr	r3, [pc, #520]	; (8000bf0 <main+0x264>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80009ec:	f3bf 8f4f 	dsb	sy
}
 80009f0:	bf00      	nop
    ccsidr = SCB->CCSIDR;
 80009f2:	4b7f      	ldr	r3, [pc, #508]	; (8000bf0 <main+0x264>)
 80009f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80009f8:	613b      	str	r3, [r7, #16]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80009fa:	693b      	ldr	r3, [r7, #16]
 80009fc:	0b5b      	lsrs	r3, r3, #13
 80009fe:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000a02:	60fb      	str	r3, [r7, #12]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000a04:	693b      	ldr	r3, [r7, #16]
 8000a06:	08db      	lsrs	r3, r3, #3
 8000a08:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000a0c:	60bb      	str	r3, [r7, #8]
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000a0e:	68fb      	ldr	r3, [r7, #12]
 8000a10:	015a      	lsls	r2, r3, #5
 8000a12:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000a16:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000a18:	68ba      	ldr	r2, [r7, #8]
 8000a1a:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000a1c:	4974      	ldr	r1, [pc, #464]	; (8000bf0 <main+0x264>)
 8000a1e:	4313      	orrs	r3, r2
 8000a20:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
      } while (ways-- != 0U);
 8000a24:	68bb      	ldr	r3, [r7, #8]
 8000a26:	1e5a      	subs	r2, r3, #1
 8000a28:	60ba      	str	r2, [r7, #8]
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d1ef      	bne.n	8000a0e <main+0x82>
    } while(sets-- != 0U);
 8000a2e:	68fb      	ldr	r3, [r7, #12]
 8000a30:	1e5a      	subs	r2, r3, #1
 8000a32:	60fa      	str	r2, [r7, #12]
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d1e5      	bne.n	8000a04 <main+0x78>
  __ASM volatile ("dsb 0xF":::"memory");
 8000a38:	f3bf 8f4f 	dsb	sy
}
 8000a3c:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000a3e:	4b6c      	ldr	r3, [pc, #432]	; (8000bf0 <main+0x264>)
 8000a40:	695b      	ldr	r3, [r3, #20]
 8000a42:	4a6b      	ldr	r2, [pc, #428]	; (8000bf0 <main+0x264>)
 8000a44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000a48:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000a4a:	f3bf 8f4f 	dsb	sy
}
 8000a4e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000a50:	f3bf 8f6f 	isb	sy
}
 8000a54:	e000      	b.n	8000a58 <main+0xcc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000a56:	bf00      	nop

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a58:	f000 fdb4 	bl	80015c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a5c:	f000 f8e0 	bl	8000c20 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000a60:	4b64      	ldr	r3, [pc, #400]	; (8000bf4 <main+0x268>)
 8000a62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a66:	4a63      	ldr	r2, [pc, #396]	; (8000bf4 <main+0x268>)
 8000a68:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000a6c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a70:	4b60      	ldr	r3, [pc, #384]	; (8000bf4 <main+0x268>)
 8000a72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000a7a:	607b      	str	r3, [r7, #4]
 8000a7c:	687b      	ldr	r3, [r7, #4]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000a7e:	2000      	movs	r0, #0
 8000a80:	f004 f852 	bl	8004b28 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000a84:	2100      	movs	r1, #0
 8000a86:	2000      	movs	r0, #0
 8000a88:	f004 f868 	bl	8004b5c <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000a8c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000a90:	617b      	str	r3, [r7, #20]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000a92:	bf00      	nop
 8000a94:	4b57      	ldr	r3, [pc, #348]	; (8000bf4 <main+0x268>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d104      	bne.n	8000aaa <main+0x11e>
 8000aa0:	697b      	ldr	r3, [r7, #20]
 8000aa2:	1e5a      	subs	r2, r3, #1
 8000aa4:	617a      	str	r2, [r7, #20]
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	dcf4      	bgt.n	8000a94 <main+0x108>
if ( timeout < 0 )
 8000aaa:	697b      	ldr	r3, [r7, #20]
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	da01      	bge.n	8000ab4 <main+0x128>
{
Error_Handler();
 8000ab0:	f000 fb3a 	bl	8001128 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ab4:	f000 fa96 	bl	8000fe4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000ab8:	f000 fa6c 	bl	8000f94 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8000abc:	f000 fa1a 	bl	8000ef4 <MX_USART3_UART_Init>
  MX_CRC_Init();
 8000ac0:	f000 f932 	bl	8000d28 <MX_CRC_Init>
  MX_SAI1_Init();
 8000ac4:	f000 f95a 	bl	8000d7c <MX_SAI1_Init>
  MX_TIM1_Init();
 8000ac8:	f000 f9ba 	bl	8000e40 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  FIR_Filter_Init(&dsp[0], CHANNEL_NUMBER, &coeff[0]);
 8000acc:	4a4a      	ldr	r2, [pc, #296]	; (8000bf8 <main+0x26c>)
 8000ace:	2102      	movs	r1, #2
 8000ad0:	484a      	ldr	r0, [pc, #296]	; (8000bfc <main+0x270>)
 8000ad2:	f7ff fe17 	bl	8000704 <FIR_Filter_Init>

  pdm_to_pcm_init((PDM_Filter_Handler_t*)&PDM_FilterHandler[0], (PDM_Filter_Config_t*)&PDM_FilterConfig[0], CHANNEL_NUMBER);
 8000ad6:	2202      	movs	r2, #2
 8000ad8:	4949      	ldr	r1, [pc, #292]	; (8000c00 <main+0x274>)
 8000ada:	484a      	ldr	r0, [pc, #296]	; (8000c04 <main+0x278>)
 8000adc:	f7ff fe8d 	bl	80007fa <pdm_to_pcm_init>

  timFlag = NONE;
 8000ae0:	4b49      	ldr	r3, [pc, #292]	; (8000c08 <main+0x27c>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  HAL_SAI_Receive_DMA(&hsai_BlockA1, (uint8_t*)&buffer->pdmBuffer[0], BUFFER_SIZE);
 8000ae6:	4b49      	ldr	r3, [pc, #292]	; (8000c0c <main+0x280>)
 8000ae8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000aec:	4619      	mov	r1, r3
 8000aee:	4848      	ldr	r0, [pc, #288]	; (8000c10 <main+0x284>)
 8000af0:	f007 fc64 	bl	80083bc <HAL_SAI_Receive_DMA>

  HAL_Delay(2000);
 8000af4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000af8:	f000 fdf6 	bl	80016e8 <HAL_Delay>

  HAL_TIM_Base_Start_IT(&htim1);
 8000afc:	4845      	ldr	r0, [pc, #276]	; (8000c14 <main+0x288>)
 8000afe:	f007 fe31 	bl	8008764 <HAL_TIM_Base_Start_IT>

  while (timFlag != DONE){
 8000b02:	e06e      	b.n	8000be2 <main+0x256>

	  //================
	  //Wait for Half of the buffer to be filled
	  while(dmaFlag != HALF){}
 8000b04:	bf00      	nop
 8000b06:	4b44      	ldr	r3, [pc, #272]	; (8000c18 <main+0x28c>)
 8000b08:	781b      	ldrb	r3, [r3, #0]
 8000b0a:	b2db      	uxtb	r3, r3
 8000b0c:	2b04      	cmp	r3, #4
 8000b0e:	d1fa      	bne.n	8000b06 <main+0x17a>
	  //Reset Flag
	  dmaFlag = NONE;
 8000b10:	4b41      	ldr	r3, [pc, #260]	; (8000c18 <main+0x28c>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	701a      	strb	r2, [r3, #0]
	  //Filter PDM to PCM
	  pdm_to_pcm(&PDM_FilterHandler[0],	(uint8_t*)&buffer->pdmBuffer[0], (uint16_t(*)[PCM_CHUNK_SIZE])&buffer->pcmBuffer[0][0], CHANNEL_NUMBER);
 8000b16:	4b3d      	ldr	r3, [pc, #244]	; (8000c0c <main+0x280>)
 8000b18:	4619      	mov	r1, r3
 8000b1a:	4b3c      	ldr	r3, [pc, #240]	; (8000c0c <main+0x280>)
 8000b1c:	f503 4280 	add.w	r2, r3, #16384	; 0x4000
 8000b20:	2302      	movs	r3, #2
 8000b22:	4838      	ldr	r0, [pc, #224]	; (8000c04 <main+0x278>)
 8000b24:	f7ff fee2 	bl	80008ec <pdm_to_pcm>
	  //Q15 to Float
	  Q15_To_Float((q15_t(*)[PCM_CHUNK_SIZE])&buffer->pcmBuffer[0][0], (float(*)[PCM_CHUNK_SIZE])&buffer->pcmBuffer_flt[0][0], CHANNEL_NUMBER);
 8000b28:	4b38      	ldr	r3, [pc, #224]	; (8000c0c <main+0x280>)
 8000b2a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8000b2e:	4a37      	ldr	r2, [pc, #220]	; (8000c0c <main+0x280>)
 8000b30:	f502 41a0 	add.w	r1, r2, #20480	; 0x5000
 8000b34:	2202      	movs	r2, #2
 8000b36:	4618      	mov	r0, r3
 8000b38:	f7ff fe3c 	bl	80007b4 <Q15_To_Float>
	  //FIR Filter
	  FIR_Filter(&dsp[0], (float(*)[PCM_CHUNK_SIZE])&buffer->pcmBuffer_flt[0][0], (float(*)[PCM_CHUNK_SIZE])&buffer->pcmBuffer_flt[0][0], CHANNEL_NUMBER);
 8000b3c:	4b33      	ldr	r3, [pc, #204]	; (8000c0c <main+0x280>)
 8000b3e:	f503 41a0 	add.w	r1, r3, #20480	; 0x5000
 8000b42:	4b32      	ldr	r3, [pc, #200]	; (8000c0c <main+0x280>)
 8000b44:	f503 42a0 	add.w	r2, r3, #20480	; 0x5000
 8000b48:	2302      	movs	r3, #2
 8000b4a:	482c      	ldr	r0, [pc, #176]	; (8000bfc <main+0x270>)
 8000b4c:	f7ff fe06 	bl	800075c <FIR_Filter>
	  //Clean
	  Clean((float*)&buffer->pcmBuffer_flt[0][0], 4*PCM_CHUNK_SIZE*CHANNEL_NUMBER);
 8000b50:	4b2e      	ldr	r3, [pc, #184]	; (8000c0c <main+0x280>)
 8000b52:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
 8000b56:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	f000 fa7a 	bl	8001054 <Clean>
	  //Transmit PCM
	  HAL_UART_Transmit_DMA(&huart3, (uint8_t*)&buffer->pcmBuffer_flt[0][0], 4*PCM_CHUNK_SIZE*CHANNEL_NUMBER);
 8000b60:	4b2a      	ldr	r3, [pc, #168]	; (8000c0c <main+0x280>)
 8000b62:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
 8000b66:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	482b      	ldr	r0, [pc, #172]	; (8000c1c <main+0x290>)
 8000b6e:	f008 fb01 	bl	8009174 <HAL_UART_Transmit_DMA>
	  //================

	  //================
	  //Wait for the second Half of the buffer to be filled
	  while(dmaFlag != FULL){}
 8000b72:	bf00      	nop
 8000b74:	4b28      	ldr	r3, [pc, #160]	; (8000c18 <main+0x28c>)
 8000b76:	781b      	ldrb	r3, [r3, #0]
 8000b78:	b2db      	uxtb	r3, r3
 8000b7a:	2b05      	cmp	r3, #5
 8000b7c:	d1fa      	bne.n	8000b74 <main+0x1e8>
	  //Reset Flag
	  dmaFlag = NONE;
 8000b7e:	4b26      	ldr	r3, [pc, #152]	; (8000c18 <main+0x28c>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	701a      	strb	r2, [r3, #0]
	  //Filter PDM to PCM
	  pdm_to_pcm(&PDM_FilterHandler[0],	(uint8_t*)&buffer->pdmBuffer[BUFFER_SIZE/2], (uint16_t(*)[PCM_CHUNK_SIZE])&buffer->pcmBuffer[CHANNEL_NUMBER][0], CHANNEL_NUMBER);
 8000b84:	4b21      	ldr	r3, [pc, #132]	; (8000c0c <main+0x280>)
 8000b86:	f503 5100 	add.w	r1, r3, #8192	; 0x2000
 8000b8a:	4b20      	ldr	r3, [pc, #128]	; (8000c0c <main+0x280>)
 8000b8c:	f503 4290 	add.w	r2, r3, #18432	; 0x4800
 8000b90:	2302      	movs	r3, #2
 8000b92:	481c      	ldr	r0, [pc, #112]	; (8000c04 <main+0x278>)
 8000b94:	f7ff feaa 	bl	80008ec <pdm_to_pcm>
	  //Q15 to Float
	  Q15_To_Float((q15_t(*)[PCM_CHUNK_SIZE])&buffer->pcmBuffer[CHANNEL_NUMBER][0], (float(*)[PCM_CHUNK_SIZE])&buffer->pcmBuffer_flt[CHANNEL_NUMBER][0], CHANNEL_NUMBER);
 8000b98:	4b1c      	ldr	r3, [pc, #112]	; (8000c0c <main+0x280>)
 8000b9a:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8000b9e:	4a1b      	ldr	r2, [pc, #108]	; (8000c0c <main+0x280>)
 8000ba0:	f502 41c0 	add.w	r1, r2, #24576	; 0x6000
 8000ba4:	2202      	movs	r2, #2
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	f7ff fe04 	bl	80007b4 <Q15_To_Float>
	  //FIR Filter
	  FIR_Filter(&dsp[0], (float(*)[PCM_CHUNK_SIZE])&buffer->pcmBuffer_flt[CHANNEL_NUMBER][0], (float(*)[PCM_CHUNK_SIZE])&buffer->pcmBuffer_flt[CHANNEL_NUMBER][0], CHANNEL_NUMBER);
 8000bac:	4b17      	ldr	r3, [pc, #92]	; (8000c0c <main+0x280>)
 8000bae:	f503 41c0 	add.w	r1, r3, #24576	; 0x6000
 8000bb2:	4b16      	ldr	r3, [pc, #88]	; (8000c0c <main+0x280>)
 8000bb4:	f503 42c0 	add.w	r2, r3, #24576	; 0x6000
 8000bb8:	2302      	movs	r3, #2
 8000bba:	4810      	ldr	r0, [pc, #64]	; (8000bfc <main+0x270>)
 8000bbc:	f7ff fdce 	bl	800075c <FIR_Filter>
	  //Clean
	  Clean((float*)&buffer->pcmBuffer_flt[CHANNEL_NUMBER][0], 4*PCM_CHUNK_SIZE*CHANNEL_NUMBER);
 8000bc0:	4b12      	ldr	r3, [pc, #72]	; (8000c0c <main+0x280>)
 8000bc2:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8000bc6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000bca:	4618      	mov	r0, r3
 8000bcc:	f000 fa42 	bl	8001054 <Clean>
	  //Transmit PCM
	  HAL_UART_Transmit_DMA(&huart3, (uint8_t*)&buffer->pcmBuffer_flt[CHANNEL_NUMBER][0], 4*PCM_CHUNK_SIZE*CHANNEL_NUMBER);
 8000bd0:	4b0e      	ldr	r3, [pc, #56]	; (8000c0c <main+0x280>)
 8000bd2:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8000bd6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000bda:	4619      	mov	r1, r3
 8000bdc:	480f      	ldr	r0, [pc, #60]	; (8000c1c <main+0x290>)
 8000bde:	f008 fac9 	bl	8009174 <HAL_UART_Transmit_DMA>
  while (timFlag != DONE){
 8000be2:	4b09      	ldr	r3, [pc, #36]	; (8000c08 <main+0x27c>)
 8000be4:	781b      	ldrb	r3, [r3, #0]
 8000be6:	b2db      	uxtb	r3, r3
 8000be8:	2b03      	cmp	r3, #3
 8000bea:	d18b      	bne.n	8000b04 <main+0x178>
    /* USER CODE BEGIN 3 */
  }



  while(1){}
 8000bec:	e7fe      	b.n	8000bec <main+0x260>
 8000bee:	bf00      	nop
 8000bf0:	e000ed00 	.word	0xe000ed00
 8000bf4:	58024400 	.word	0x58024400
 8000bf8:	24000408 	.word	0x24000408
 8000bfc:	24000880 	.word	0x24000880
 8000c00:	2400206c 	.word	0x2400206c
 8000c04:	2400221c 	.word	0x2400221c
 8000c08:	2400087e 	.word	0x2400087e
 8000c0c:	30040000 	.word	0x30040000
 8000c10:	24002300 	.word	0x24002300
 8000c14:	240022b4 	.word	0x240022b4
 8000c18:	2400087d 	.word	0x2400087d
 8000c1c:	24002078 	.word	0x24002078

08000c20 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b09c      	sub	sp, #112	; 0x70
 8000c24:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c2a:	224c      	movs	r2, #76	; 0x4c
 8000c2c:	2100      	movs	r1, #0
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f00b fe96 	bl	800c960 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c34:	1d3b      	adds	r3, r7, #4
 8000c36:	2220      	movs	r2, #32
 8000c38:	2100      	movs	r1, #0
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f00b fe90 	bl	800c960 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000c40:	2004      	movs	r0, #4
 8000c42:	f003 ff9f 	bl	8004b84 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000c46:	2300      	movs	r3, #0
 8000c48:	603b      	str	r3, [r7, #0]
 8000c4a:	4b34      	ldr	r3, [pc, #208]	; (8000d1c <SystemClock_Config+0xfc>)
 8000c4c:	699b      	ldr	r3, [r3, #24]
 8000c4e:	4a33      	ldr	r2, [pc, #204]	; (8000d1c <SystemClock_Config+0xfc>)
 8000c50:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000c54:	6193      	str	r3, [r2, #24]
 8000c56:	4b31      	ldr	r3, [pc, #196]	; (8000d1c <SystemClock_Config+0xfc>)
 8000c58:	699b      	ldr	r3, [r3, #24]
 8000c5a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000c5e:	603b      	str	r3, [r7, #0]
 8000c60:	4b2f      	ldr	r3, [pc, #188]	; (8000d20 <SystemClock_Config+0x100>)
 8000c62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c64:	4a2e      	ldr	r2, [pc, #184]	; (8000d20 <SystemClock_Config+0x100>)
 8000c66:	f043 0301 	orr.w	r3, r3, #1
 8000c6a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000c6c:	4b2c      	ldr	r3, [pc, #176]	; (8000d20 <SystemClock_Config+0x100>)
 8000c6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c70:	f003 0301 	and.w	r3, r3, #1
 8000c74:	603b      	str	r3, [r7, #0]
 8000c76:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000c78:	bf00      	nop
 8000c7a:	4b28      	ldr	r3, [pc, #160]	; (8000d1c <SystemClock_Config+0xfc>)
 8000c7c:	699b      	ldr	r3, [r3, #24]
 8000c7e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000c82:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000c86:	d1f8      	bne.n	8000c7a <SystemClock_Config+0x5a>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000c88:	4b26      	ldr	r3, [pc, #152]	; (8000d24 <SystemClock_Config+0x104>)
 8000c8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c8c:	f023 0303 	bic.w	r3, r3, #3
 8000c90:	4a24      	ldr	r2, [pc, #144]	; (8000d24 <SystemClock_Config+0x104>)
 8000c92:	f043 0302 	orr.w	r3, r3, #2
 8000c96:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c98:	2301      	movs	r3, #1
 8000c9a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000c9c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000ca0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ca2:	2302      	movs	r3, #2
 8000ca4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ca6:	2302      	movs	r3, #2
 8000ca8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000caa:	2301      	movs	r3, #1
 8000cac:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 120;
 8000cae:	2378      	movs	r3, #120	; 0x78
 8000cb0:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000cb2:	2302      	movs	r3, #2
 8000cb4:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000cb6:	2304      	movs	r3, #4
 8000cb8:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000cba:	2302      	movs	r3, #2
 8000cbc:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000cbe:	230c      	movs	r3, #12
 8000cc0:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f003 ffb2 	bl	8004c38 <HAL_RCC_OscConfig>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d001      	beq.n	8000cde <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8000cda:	f000 fa25 	bl	8001128 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cde:	233f      	movs	r3, #63	; 0x3f
 8000ce0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ce2:	2303      	movs	r3, #3
 8000ce4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000cea:	2308      	movs	r3, #8
 8000cec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV4;
 8000cee:	2350      	movs	r3, #80	; 0x50
 8000cf0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV4;
 8000cf2:	2350      	movs	r3, #80	; 0x50
 8000cf4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV4;
 8000cf6:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8000cfa:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV4;
 8000cfc:	2350      	movs	r3, #80	; 0x50
 8000cfe:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000d00:	1d3b      	adds	r3, r7, #4
 8000d02:	2104      	movs	r1, #4
 8000d04:	4618      	mov	r0, r3
 8000d06:	f004 fba7 	bl	8005458 <HAL_RCC_ClockConfig>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d001      	beq.n	8000d14 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8000d10:	f000 fa0a 	bl	8001128 <Error_Handler>
  }
}
 8000d14:	bf00      	nop
 8000d16:	3770      	adds	r7, #112	; 0x70
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	58024800 	.word	0x58024800
 8000d20:	58000400 	.word	0x58000400
 8000d24:	58024400 	.word	0x58024400

08000d28 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000d2c:	4b11      	ldr	r3, [pc, #68]	; (8000d74 <MX_CRC_Init+0x4c>)
 8000d2e:	4a12      	ldr	r2, [pc, #72]	; (8000d78 <MX_CRC_Init+0x50>)
 8000d30:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000d32:	4b10      	ldr	r3, [pc, #64]	; (8000d74 <MX_CRC_Init+0x4c>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000d38:	4b0e      	ldr	r3, [pc, #56]	; (8000d74 <MX_CRC_Init+0x4c>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000d3e:	4b0d      	ldr	r3, [pc, #52]	; (8000d74 <MX_CRC_Init+0x4c>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000d44:	4b0b      	ldr	r3, [pc, #44]	; (8000d74 <MX_CRC_Init+0x4c>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000d4a:	4b0a      	ldr	r3, [pc, #40]	; (8000d74 <MX_CRC_Init+0x4c>)
 8000d4c:	2201      	movs	r2, #1
 8000d4e:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000d50:	4808      	ldr	r0, [pc, #32]	; (8000d74 <MX_CRC_Init+0x4c>)
 8000d52:	f000 fe09 	bl	8001968 <HAL_CRC_Init>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d001      	beq.n	8000d60 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000d5c:	f000 f9e4 	bl	8001128 <Error_Handler>
  }
  __HAL_CRC_DR_RESET(&hcrc);
 8000d60:	4b04      	ldr	r3, [pc, #16]	; (8000d74 <MX_CRC_Init+0x4c>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	689a      	ldr	r2, [r3, #8]
 8000d66:	4b03      	ldr	r3, [pc, #12]	; (8000d74 <MX_CRC_Init+0x4c>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	f042 0201 	orr.w	r2, r2, #1
 8000d6e:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000d70:	bf00      	nop
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	24002108 	.word	0x24002108
 8000d78:	58024c00 	.word	0x58024c00

08000d7c <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockA1.Instance = SAI1_Block_A;
 8000d80:	4b2d      	ldr	r3, [pc, #180]	; (8000e38 <MX_SAI1_Init+0xbc>)
 8000d82:	4a2e      	ldr	r2, [pc, #184]	; (8000e3c <MX_SAI1_Init+0xc0>)
 8000d84:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
 8000d86:	4b2c      	ldr	r3, [pc, #176]	; (8000e38 <MX_SAI1_Init+0xbc>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_RX;
 8000d8c:	4b2a      	ldr	r3, [pc, #168]	; (8000e38 <MX_SAI1_Init+0xbc>)
 8000d8e:	2201      	movs	r2, #1
 8000d90:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.DataSize = SAI_DATASIZE_16;
 8000d92:	4b29      	ldr	r3, [pc, #164]	; (8000e38 <MX_SAI1_Init+0xbc>)
 8000d94:	2280      	movs	r2, #128	; 0x80
 8000d96:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000d98:	4b27      	ldr	r3, [pc, #156]	; (8000e38 <MX_SAI1_Init+0xbc>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000d9e:	4b26      	ldr	r3, [pc, #152]	; (8000e38 <MX_SAI1_Init+0xbc>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8000da4:	4b24      	ldr	r3, [pc, #144]	; (8000e38 <MX_SAI1_Init+0xbc>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000daa:	4b23      	ldr	r3, [pc, #140]	; (8000e38 <MX_SAI1_Init+0xbc>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_DISABLE;
 8000db0:	4b21      	ldr	r3, [pc, #132]	; (8000e38 <MX_SAI1_Init+0xbc>)
 8000db2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000db6:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_FULL;
 8000db8:	4b1f      	ldr	r3, [pc, #124]	; (8000e38 <MX_SAI1_Init+0xbc>)
 8000dba:	2204      	movs	r2, #4
 8000dbc:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_MCKDIV;
 8000dbe:	4b1e      	ldr	r3, [pc, #120]	; (8000e38 <MX_SAI1_Init+0xbc>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	621a      	str	r2, [r3, #32]
  hsai_BlockA1.Init.Mckdiv = 0;
 8000dc4:	4b1c      	ldr	r3, [pc, #112]	; (8000e38 <MX_SAI1_Init+0xbc>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8000dca:	4b1b      	ldr	r3, [pc, #108]	; (8000e38 <MX_SAI1_Init+0xbc>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8000dd0:	4b19      	ldr	r3, [pc, #100]	; (8000e38 <MX_SAI1_Init+0xbc>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA1.Init.PdmInit.Activation = ENABLE;
 8000dd6:	4b18      	ldr	r3, [pc, #96]	; (8000e38 <MX_SAI1_Init+0xbc>)
 8000dd8:	2201      	movs	r2, #1
 8000dda:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hsai_BlockA1.Init.PdmInit.MicPairsNbr = 1;
 8000dde:	4b16      	ldr	r3, [pc, #88]	; (8000e38 <MX_SAI1_Init+0xbc>)
 8000de0:	2201      	movs	r2, #1
 8000de2:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA1.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 8000de4:	4b14      	ldr	r3, [pc, #80]	; (8000e38 <MX_SAI1_Init+0xbc>)
 8000de6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000dea:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA1.FrameInit.FrameLength = 16;
 8000dec:	4b12      	ldr	r3, [pc, #72]	; (8000e38 <MX_SAI1_Init+0xbc>)
 8000dee:	2210      	movs	r2, #16
 8000df0:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA1.FrameInit.ActiveFrameLength = 1;
 8000df2:	4b11      	ldr	r3, [pc, #68]	; (8000e38 <MX_SAI1_Init+0xbc>)
 8000df4:	2201      	movs	r2, #1
 8000df6:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8000df8:	4b0f      	ldr	r3, [pc, #60]	; (8000e38 <MX_SAI1_Init+0xbc>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA1.FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 8000dfe:	4b0e      	ldr	r3, [pc, #56]	; (8000e38 <MX_SAI1_Init+0xbc>)
 8000e00:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000e04:	661a      	str	r2, [r3, #96]	; 0x60
  hsai_BlockA1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8000e06:	4b0c      	ldr	r3, [pc, #48]	; (8000e38 <MX_SAI1_Init+0xbc>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	665a      	str	r2, [r3, #100]	; 0x64
  hsai_BlockA1.SlotInit.FirstBitOffset = 0;
 8000e0c:	4b0a      	ldr	r3, [pc, #40]	; (8000e38 <MX_SAI1_Init+0xbc>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	669a      	str	r2, [r3, #104]	; 0x68
  hsai_BlockA1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8000e12:	4b09      	ldr	r3, [pc, #36]	; (8000e38 <MX_SAI1_Init+0xbc>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai_BlockA1.SlotInit.SlotNumber = 1;
 8000e18:	4b07      	ldr	r3, [pc, #28]	; (8000e38 <MX_SAI1_Init+0xbc>)
 8000e1a:	2201      	movs	r2, #1
 8000e1c:	671a      	str	r2, [r3, #112]	; 0x70
  hsai_BlockA1.SlotInit.SlotActive = 0x00000001;
 8000e1e:	4b06      	ldr	r3, [pc, #24]	; (8000e38 <MX_SAI1_Init+0xbc>)
 8000e20:	2201      	movs	r2, #1
 8000e22:	675a      	str	r2, [r3, #116]	; 0x74
  if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
 8000e24:	4804      	ldr	r0, [pc, #16]	; (8000e38 <MX_SAI1_Init+0xbc>)
 8000e26:	f007 f829 	bl	8007e7c <HAL_SAI_Init>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d001      	beq.n	8000e34 <MX_SAI1_Init+0xb8>
  {
    Error_Handler();
 8000e30:	f000 f97a 	bl	8001128 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8000e34:	bf00      	nop
 8000e36:	bd80      	pop	{r7, pc}
 8000e38:	24002300 	.word	0x24002300
 8000e3c:	40015804 	.word	0x40015804

08000e40 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b088      	sub	sp, #32
 8000e44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e46:	f107 0310 	add.w	r3, r7, #16
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	601a      	str	r2, [r3, #0]
 8000e4e:	605a      	str	r2, [r3, #4]
 8000e50:	609a      	str	r2, [r3, #8]
 8000e52:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e54:	1d3b      	adds	r3, r7, #4
 8000e56:	2200      	movs	r2, #0
 8000e58:	601a      	str	r2, [r3, #0]
 8000e5a:	605a      	str	r2, [r3, #4]
 8000e5c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000e5e:	4b23      	ldr	r3, [pc, #140]	; (8000eec <MX_TIM1_Init+0xac>)
 8000e60:	4a23      	ldr	r2, [pc, #140]	; (8000ef0 <MX_TIM1_Init+0xb0>)
 8000e62:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 20000;
 8000e64:	4b21      	ldr	r3, [pc, #132]	; (8000eec <MX_TIM1_Init+0xac>)
 8000e66:	f644 6220 	movw	r2, #20000	; 0x4e20
 8000e6a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e6c:	4b1f      	ldr	r3, [pc, #124]	; (8000eec <MX_TIM1_Init+0xac>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 60000;
 8000e72:	4b1e      	ldr	r3, [pc, #120]	; (8000eec <MX_TIM1_Init+0xac>)
 8000e74:	f64e 2260 	movw	r2, #60000	; 0xea60
 8000e78:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e7a:	4b1c      	ldr	r3, [pc, #112]	; (8000eec <MX_TIM1_Init+0xac>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000e80:	4b1a      	ldr	r3, [pc, #104]	; (8000eec <MX_TIM1_Init+0xac>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e86:	4b19      	ldr	r3, [pc, #100]	; (8000eec <MX_TIM1_Init+0xac>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000e8c:	4817      	ldr	r0, [pc, #92]	; (8000eec <MX_TIM1_Init+0xac>)
 8000e8e:	f007 fc12 	bl	80086b6 <HAL_TIM_Base_Init>
 8000e92:	4603      	mov	r3, r0
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d001      	beq.n	8000e9c <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 8000e98:	f000 f946 	bl	8001128 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ea0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000ea2:	f107 0310 	add.w	r3, r7, #16
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	4810      	ldr	r0, [pc, #64]	; (8000eec <MX_TIM1_Init+0xac>)
 8000eaa:	f007 fe19 	bl	8008ae0 <HAL_TIM_ConfigClockSource>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d001      	beq.n	8000eb8 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8000eb4:	f000 f938 	bl	8001128 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000ec4:	1d3b      	adds	r3, r7, #4
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	4808      	ldr	r0, [pc, #32]	; (8000eec <MX_TIM1_Init+0xac>)
 8000eca:	f008 f85d 	bl	8008f88 <HAL_TIMEx_MasterConfigSynchronization>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d001      	beq.n	8000ed8 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000ed4:	f000 f928 	bl	8001128 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  __HAL_TIM_CLEAR_IT(&htim1, TIM_FLAG_UPDATE);
 8000ed8:	4b04      	ldr	r3, [pc, #16]	; (8000eec <MX_TIM1_Init+0xac>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	f06f 0201 	mvn.w	r2, #1
 8000ee0:	611a      	str	r2, [r3, #16]
  /* USER CODE END TIM1_Init 2 */

}
 8000ee2:	bf00      	nop
 8000ee4:	3720      	adds	r7, #32
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	240022b4 	.word	0x240022b4
 8000ef0:	40010000 	.word	0x40010000

08000ef4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000ef8:	4b23      	ldr	r3, [pc, #140]	; (8000f88 <MX_USART3_UART_Init+0x94>)
 8000efa:	4a24      	ldr	r2, [pc, #144]	; (8000f8c <MX_USART3_UART_Init+0x98>)
 8000efc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 4000000;
 8000efe:	4b22      	ldr	r3, [pc, #136]	; (8000f88 <MX_USART3_UART_Init+0x94>)
 8000f00:	4a23      	ldr	r2, [pc, #140]	; (8000f90 <MX_USART3_UART_Init+0x9c>)
 8000f02:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000f04:	4b20      	ldr	r3, [pc, #128]	; (8000f88 <MX_USART3_UART_Init+0x94>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000f0a:	4b1f      	ldr	r3, [pc, #124]	; (8000f88 <MX_USART3_UART_Init+0x94>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000f10:	4b1d      	ldr	r3, [pc, #116]	; (8000f88 <MX_USART3_UART_Init+0x94>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000f16:	4b1c      	ldr	r3, [pc, #112]	; (8000f88 <MX_USART3_UART_Init+0x94>)
 8000f18:	220c      	movs	r2, #12
 8000f1a:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f1c:	4b1a      	ldr	r3, [pc, #104]	; (8000f88 <MX_USART3_UART_Init+0x94>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f22:	4b19      	ldr	r3, [pc, #100]	; (8000f88 <MX_USART3_UART_Init+0x94>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f28:	4b17      	ldr	r3, [pc, #92]	; (8000f88 <MX_USART3_UART_Init+0x94>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000f2e:	4b16      	ldr	r3, [pc, #88]	; (8000f88 <MX_USART3_UART_Init+0x94>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f34:	4b14      	ldr	r3, [pc, #80]	; (8000f88 <MX_USART3_UART_Init+0x94>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000f3a:	4813      	ldr	r0, [pc, #76]	; (8000f88 <MX_USART3_UART_Init+0x94>)
 8000f3c:	f008 f8ca 	bl	80090d4 <HAL_UART_Init>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d001      	beq.n	8000f4a <MX_USART3_UART_Init+0x56>
  {
    Error_Handler();
 8000f46:	f000 f8ef 	bl	8001128 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_8_8) != HAL_OK)
 8000f4a:	f04f 4120 	mov.w	r1, #2684354560	; 0xa0000000
 8000f4e:	480e      	ldr	r0, [pc, #56]	; (8000f88 <MX_USART3_UART_Init+0x94>)
 8000f50:	f009 fc8f 	bl	800a872 <HAL_UARTEx_SetTxFifoThreshold>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d001      	beq.n	8000f5e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000f5a:	f000 f8e5 	bl	8001128 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_8_8) != HAL_OK)
 8000f5e:	f04f 6120 	mov.w	r1, #167772160	; 0xa000000
 8000f62:	4809      	ldr	r0, [pc, #36]	; (8000f88 <MX_USART3_UART_Init+0x94>)
 8000f64:	f009 fcc3 	bl	800a8ee <HAL_UARTEx_SetRxFifoThreshold>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d001      	beq.n	8000f72 <MX_USART3_UART_Init+0x7e>
  {
    Error_Handler();
 8000f6e:	f000 f8db 	bl	8001128 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000f72:	4805      	ldr	r0, [pc, #20]	; (8000f88 <MX_USART3_UART_Init+0x94>)
 8000f74:	f009 fc44 	bl	800a800 <HAL_UARTEx_DisableFifoMode>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d001      	beq.n	8000f82 <MX_USART3_UART_Init+0x8e>
  {
    Error_Handler();
 8000f7e:	f000 f8d3 	bl	8001128 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000f82:	bf00      	nop
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	24002078 	.word	0x24002078
 8000f8c:	40004800 	.word	0x40004800
 8000f90:	003d0900 	.word	0x003d0900

08000f94 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f9a:	4b11      	ldr	r3, [pc, #68]	; (8000fe0 <MX_DMA_Init+0x4c>)
 8000f9c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000fa0:	4a0f      	ldr	r2, [pc, #60]	; (8000fe0 <MX_DMA_Init+0x4c>)
 8000fa2:	f043 0301 	orr.w	r3, r3, #1
 8000fa6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000faa:	4b0d      	ldr	r3, [pc, #52]	; (8000fe0 <MX_DMA_Init+0x4c>)
 8000fac:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000fb0:	f003 0301 	and.w	r3, r3, #1
 8000fb4:	607b      	str	r3, [r7, #4]
 8000fb6:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000fb8:	2200      	movs	r2, #0
 8000fba:	2100      	movs	r1, #0
 8000fbc:	200b      	movs	r0, #11
 8000fbe:	f000 fc9e 	bl	80018fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000fc2:	200b      	movs	r0, #11
 8000fc4:	f000 fcb5 	bl	8001932 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000fc8:	2200      	movs	r2, #0
 8000fca:	2100      	movs	r1, #0
 8000fcc:	200c      	movs	r0, #12
 8000fce:	f000 fc96 	bl	80018fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000fd2:	200c      	movs	r0, #12
 8000fd4:	f000 fcad 	bl	8001932 <HAL_NVIC_EnableIRQ>

}
 8000fd8:	bf00      	nop
 8000fda:	3708      	adds	r7, #8
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	58024400 	.word	0x58024400

08000fe4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b085      	sub	sp, #20
 8000fe8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000fea:	4b19      	ldr	r3, [pc, #100]	; (8001050 <MX_GPIO_Init+0x6c>)
 8000fec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ff0:	4a17      	ldr	r2, [pc, #92]	; (8001050 <MX_GPIO_Init+0x6c>)
 8000ff2:	f043 0310 	orr.w	r3, r3, #16
 8000ff6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ffa:	4b15      	ldr	r3, [pc, #84]	; (8001050 <MX_GPIO_Init+0x6c>)
 8000ffc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001000:	f003 0310 	and.w	r3, r3, #16
 8001004:	60fb      	str	r3, [r7, #12]
 8001006:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001008:	4b11      	ldr	r3, [pc, #68]	; (8001050 <MX_GPIO_Init+0x6c>)
 800100a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800100e:	4a10      	ldr	r2, [pc, #64]	; (8001050 <MX_GPIO_Init+0x6c>)
 8001010:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001014:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001018:	4b0d      	ldr	r3, [pc, #52]	; (8001050 <MX_GPIO_Init+0x6c>)
 800101a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800101e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001022:	60bb      	str	r3, [r7, #8]
 8001024:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001026:	4b0a      	ldr	r3, [pc, #40]	; (8001050 <MX_GPIO_Init+0x6c>)
 8001028:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800102c:	4a08      	ldr	r2, [pc, #32]	; (8001050 <MX_GPIO_Init+0x6c>)
 800102e:	f043 0308 	orr.w	r3, r3, #8
 8001032:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001036:	4b06      	ldr	r3, [pc, #24]	; (8001050 <MX_GPIO_Init+0x6c>)
 8001038:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800103c:	f003 0308 	and.w	r3, r3, #8
 8001040:	607b      	str	r3, [r7, #4]
 8001042:	687b      	ldr	r3, [r7, #4]

}
 8001044:	bf00      	nop
 8001046:	3714      	adds	r7, #20
 8001048:	46bd      	mov	sp, r7
 800104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104e:	4770      	bx	lr
 8001050:	58024400 	.word	0x58024400

08001054 <Clean>:

/* USER CODE BEGIN 4 */

static void Clean(float *buffer, uint32_t byte){
 8001054:	b480      	push	{r7}
 8001056:	b087      	sub	sp, #28
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
 800105c:	6039      	str	r1, [r7, #0]
	SCB_CleanDCache_by_Addr((uint32_t*)&buffer[0], byte);
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	687a      	ldr	r2, [r7, #4]
 8001062:	617a      	str	r2, [r7, #20]
 8001064:	613b      	str	r3, [r7, #16]
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_CleanDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 8001066:	693b      	ldr	r3, [r7, #16]
 8001068:	2b00      	cmp	r3, #0
 800106a:	dd1d      	ble.n	80010a8 <Clean+0x54>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 800106c:	697b      	ldr	r3, [r7, #20]
 800106e:	f003 021f 	and.w	r2, r3, #31
 8001072:	693b      	ldr	r3, [r7, #16]
 8001074:	4413      	add	r3, r2
 8001076:	60fb      	str	r3, [r7, #12]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8001078:	697b      	ldr	r3, [r7, #20]
 800107a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("dsb 0xF":::"memory");
 800107c:	f3bf 8f4f 	dsb	sy
}
 8001080:	bf00      	nop
    
      __DSB();

      do {
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8001082:	4a0d      	ldr	r2, [pc, #52]	; (80010b8 <Clean+0x64>)
 8001084:	68bb      	ldr	r3, [r7, #8]
 8001086:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 800108a:	68bb      	ldr	r3, [r7, #8]
 800108c:	3320      	adds	r3, #32
 800108e:	60bb      	str	r3, [r7, #8]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	3b20      	subs	r3, #32
 8001094:	60fb      	str	r3, [r7, #12]
      } while ( op_size > 0 );
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	2b00      	cmp	r3, #0
 800109a:	dcf2      	bgt.n	8001082 <Clean+0x2e>
  __ASM volatile ("dsb 0xF":::"memory");
 800109c:	f3bf 8f4f 	dsb	sy
}
 80010a0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80010a2:	f3bf 8f6f 	isb	sy
}
 80010a6:	bf00      	nop

      __DSB();
      __ISB();
    }
  #endif
}
 80010a8:	bf00      	nop
}
 80010aa:	bf00      	nop
 80010ac:	371c      	adds	r7, #28
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr
 80010b6:	bf00      	nop
 80010b8:	e000ed00 	.word	0xe000ed00

080010bc <HAL_SAI_RxHalfCpltCallback>:

void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai){
 80010bc:	b480      	push	{r7}
 80010be:	b083      	sub	sp, #12
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
	dmaFlag = HALF;
 80010c4:	4b04      	ldr	r3, [pc, #16]	; (80010d8 <HAL_SAI_RxHalfCpltCallback+0x1c>)
 80010c6:	2204      	movs	r2, #4
 80010c8:	701a      	strb	r2, [r3, #0]
}
 80010ca:	bf00      	nop
 80010cc:	370c      	adds	r7, #12
 80010ce:	46bd      	mov	sp, r7
 80010d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d4:	4770      	bx	lr
 80010d6:	bf00      	nop
 80010d8:	2400087d 	.word	0x2400087d

080010dc <HAL_SAI_RxCpltCallback>:

void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai){
 80010dc:	b480      	push	{r7}
 80010de:	b083      	sub	sp, #12
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
	dmaFlag = FULL;
 80010e4:	4b04      	ldr	r3, [pc, #16]	; (80010f8 <HAL_SAI_RxCpltCallback+0x1c>)
 80010e6:	2205      	movs	r2, #5
 80010e8:	701a      	strb	r2, [r3, #0]
}
 80010ea:	bf00      	nop
 80010ec:	370c      	adds	r7, #12
 80010ee:	46bd      	mov	sp, r7
 80010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f4:	4770      	bx	lr
 80010f6:	bf00      	nop
 80010f8:	2400087d 	.word	0x2400087d

080010fc <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  if(htim == &htim1){
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	4a06      	ldr	r2, [pc, #24]	; (8001120 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8001108:	4293      	cmp	r3, r2
 800110a:	d105      	bne.n	8001118 <HAL_TIM_PeriodElapsedCallback+0x1c>
	  HAL_TIM_Base_Stop_IT(htim);
 800110c:	6878      	ldr	r0, [r7, #4]
 800110e:	f007 fb99 	bl	8008844 <HAL_TIM_Base_Stop_IT>
	  timFlag = DONE;
 8001112:	4b04      	ldr	r3, [pc, #16]	; (8001124 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8001114:	2203      	movs	r2, #3
 8001116:	701a      	strb	r2, [r3, #0]
  }
}
 8001118:	bf00      	nop
 800111a:	3708      	adds	r7, #8
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}
 8001120:	240022b4 	.word	0x240022b4
 8001124:	2400087e 	.word	0x2400087e

08001128 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001128:	b480      	push	{r7}
 800112a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800112c:	b672      	cpsid	i
}
 800112e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001130:	e7fe      	b.n	8001130 <Error_Handler+0x8>
	...

08001134 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001134:	b480      	push	{r7}
 8001136:	b083      	sub	sp, #12
 8001138:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800113a:	4b0a      	ldr	r3, [pc, #40]	; (8001164 <HAL_MspInit+0x30>)
 800113c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001140:	4a08      	ldr	r2, [pc, #32]	; (8001164 <HAL_MspInit+0x30>)
 8001142:	f043 0302 	orr.w	r3, r3, #2
 8001146:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800114a:	4b06      	ldr	r3, [pc, #24]	; (8001164 <HAL_MspInit+0x30>)
 800114c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001150:	f003 0302 	and.w	r3, r3, #2
 8001154:	607b      	str	r3, [r7, #4]
 8001156:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001158:	bf00      	nop
 800115a:	370c      	adds	r7, #12
 800115c:	46bd      	mov	sp, r7
 800115e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001162:	4770      	bx	lr
 8001164:	58024400 	.word	0x58024400

08001168 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001168:	b480      	push	{r7}
 800116a:	b085      	sub	sp, #20
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	4a0b      	ldr	r2, [pc, #44]	; (80011a4 <HAL_CRC_MspInit+0x3c>)
 8001176:	4293      	cmp	r3, r2
 8001178:	d10e      	bne.n	8001198 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800117a:	4b0b      	ldr	r3, [pc, #44]	; (80011a8 <HAL_CRC_MspInit+0x40>)
 800117c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001180:	4a09      	ldr	r2, [pc, #36]	; (80011a8 <HAL_CRC_MspInit+0x40>)
 8001182:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001186:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800118a:	4b07      	ldr	r3, [pc, #28]	; (80011a8 <HAL_CRC_MspInit+0x40>)
 800118c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001190:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001194:	60fb      	str	r3, [r7, #12]
 8001196:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001198:	bf00      	nop
 800119a:	3714      	adds	r7, #20
 800119c:	46bd      	mov	sp, r7
 800119e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a2:	4770      	bx	lr
 80011a4:	58024c00 	.word	0x58024c00
 80011a8:	58024400 	.word	0x58024400

080011ac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b084      	sub	sp, #16
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	4a0e      	ldr	r2, [pc, #56]	; (80011f4 <HAL_TIM_Base_MspInit+0x48>)
 80011ba:	4293      	cmp	r3, r2
 80011bc:	d116      	bne.n	80011ec <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80011be:	4b0e      	ldr	r3, [pc, #56]	; (80011f8 <HAL_TIM_Base_MspInit+0x4c>)
 80011c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80011c4:	4a0c      	ldr	r2, [pc, #48]	; (80011f8 <HAL_TIM_Base_MspInit+0x4c>)
 80011c6:	f043 0301 	orr.w	r3, r3, #1
 80011ca:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80011ce:	4b0a      	ldr	r3, [pc, #40]	; (80011f8 <HAL_TIM_Base_MspInit+0x4c>)
 80011d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80011d4:	f003 0301 	and.w	r3, r3, #1
 80011d8:	60fb      	str	r3, [r7, #12]
 80011da:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 80011dc:	2200      	movs	r2, #0
 80011de:	2100      	movs	r1, #0
 80011e0:	2019      	movs	r0, #25
 80011e2:	f000 fb8c 	bl	80018fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80011e6:	2019      	movs	r0, #25
 80011e8:	f000 fba3 	bl	8001932 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80011ec:	bf00      	nop
 80011ee:	3710      	adds	r7, #16
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	40010000 	.word	0x40010000
 80011f8:	58024400 	.word	0x58024400

080011fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b0b8      	sub	sp, #224	; 0xe0
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001204:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001208:	2200      	movs	r2, #0
 800120a:	601a      	str	r2, [r3, #0]
 800120c:	605a      	str	r2, [r3, #4]
 800120e:	609a      	str	r2, [r3, #8]
 8001210:	60da      	str	r2, [r3, #12]
 8001212:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001214:	f107 0310 	add.w	r3, r7, #16
 8001218:	22bc      	movs	r2, #188	; 0xbc
 800121a:	2100      	movs	r1, #0
 800121c:	4618      	mov	r0, r3
 800121e:	f00b fb9f 	bl	800c960 <memset>
  if(huart->Instance==USART3)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	4a49      	ldr	r2, [pc, #292]	; (800134c <HAL_UART_MspInit+0x150>)
 8001228:	4293      	cmp	r3, r2
 800122a:	f040 808b 	bne.w	8001344 <HAL_UART_MspInit+0x148>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800122e:	2302      	movs	r3, #2
 8001230:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 1;
 8001232:	2301      	movs	r3, #1
 8001234:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL3.PLL3N = 19;
 8001236:	2313      	movs	r3, #19
 8001238:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 800123a:	2302      	movs	r3, #2
 800123c:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 800123e:	2302      	movs	r3, #2
 8001240:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 8001242:	2302      	movs	r3, #2
 8001244:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8001246:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800124a:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
 800124c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001250:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8001252:	2300      	movs	r3, #0
 8001254:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_PLL3;
 8001256:	2302      	movs	r3, #2
 8001258:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800125c:	f107 0310 	add.w	r3, r7, #16
 8001260:	4618      	mov	r0, r3
 8001262:	f004 fc85 	bl	8005b70 <HAL_RCCEx_PeriphCLKConfig>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d001      	beq.n	8001270 <HAL_UART_MspInit+0x74>
    {
      Error_Handler();
 800126c:	f7ff ff5c 	bl	8001128 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001270:	4b37      	ldr	r3, [pc, #220]	; (8001350 <HAL_UART_MspInit+0x154>)
 8001272:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001276:	4a36      	ldr	r2, [pc, #216]	; (8001350 <HAL_UART_MspInit+0x154>)
 8001278:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800127c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001280:	4b33      	ldr	r3, [pc, #204]	; (8001350 <HAL_UART_MspInit+0x154>)
 8001282:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001286:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800128a:	60fb      	str	r3, [r7, #12]
 800128c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800128e:	4b30      	ldr	r3, [pc, #192]	; (8001350 <HAL_UART_MspInit+0x154>)
 8001290:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001294:	4a2e      	ldr	r2, [pc, #184]	; (8001350 <HAL_UART_MspInit+0x154>)
 8001296:	f043 0308 	orr.w	r3, r3, #8
 800129a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800129e:	4b2c      	ldr	r3, [pc, #176]	; (8001350 <HAL_UART_MspInit+0x154>)
 80012a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012a4:	f003 0308 	and.w	r3, r3, #8
 80012a8:	60bb      	str	r3, [r7, #8]
 80012aa:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80012ac:	f44f 7340 	mov.w	r3, #768	; 0x300
 80012b0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b4:	2302      	movs	r3, #2
 80012b6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ba:	2300      	movs	r3, #0
 80012bc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012c0:	2300      	movs	r3, #0
 80012c2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80012c6:	2307      	movs	r3, #7
 80012c8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012cc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80012d0:	4619      	mov	r1, r3
 80012d2:	4820      	ldr	r0, [pc, #128]	; (8001354 <HAL_UART_MspInit+0x158>)
 80012d4:	f003 fa78 	bl	80047c8 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream1;
 80012d8:	4b1f      	ldr	r3, [pc, #124]	; (8001358 <HAL_UART_MspInit+0x15c>)
 80012da:	4a20      	ldr	r2, [pc, #128]	; (800135c <HAL_UART_MspInit+0x160>)
 80012dc:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 80012de:	4b1e      	ldr	r3, [pc, #120]	; (8001358 <HAL_UART_MspInit+0x15c>)
 80012e0:	222e      	movs	r2, #46	; 0x2e
 80012e2:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80012e4:	4b1c      	ldr	r3, [pc, #112]	; (8001358 <HAL_UART_MspInit+0x15c>)
 80012e6:	2240      	movs	r2, #64	; 0x40
 80012e8:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80012ea:	4b1b      	ldr	r3, [pc, #108]	; (8001358 <HAL_UART_MspInit+0x15c>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80012f0:	4b19      	ldr	r3, [pc, #100]	; (8001358 <HAL_UART_MspInit+0x15c>)
 80012f2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80012f6:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80012f8:	4b17      	ldr	r3, [pc, #92]	; (8001358 <HAL_UART_MspInit+0x15c>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80012fe:	4b16      	ldr	r3, [pc, #88]	; (8001358 <HAL_UART_MspInit+0x15c>)
 8001300:	2200      	movs	r2, #0
 8001302:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8001304:	4b14      	ldr	r3, [pc, #80]	; (8001358 <HAL_UART_MspInit+0x15c>)
 8001306:	2200      	movs	r2, #0
 8001308:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_HIGH;
 800130a:	4b13      	ldr	r3, [pc, #76]	; (8001358 <HAL_UART_MspInit+0x15c>)
 800130c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001310:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001312:	4b11      	ldr	r3, [pc, #68]	; (8001358 <HAL_UART_MspInit+0x15c>)
 8001314:	2200      	movs	r2, #0
 8001316:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8001318:	480f      	ldr	r0, [pc, #60]	; (8001358 <HAL_UART_MspInit+0x15c>)
 800131a:	f000 fc0f 	bl	8001b3c <HAL_DMA_Init>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	d001      	beq.n	8001328 <HAL_UART_MspInit+0x12c>
    {
      Error_Handler();
 8001324:	f7ff ff00 	bl	8001128 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	4a0b      	ldr	r2, [pc, #44]	; (8001358 <HAL_UART_MspInit+0x15c>)
 800132c:	679a      	str	r2, [r3, #120]	; 0x78
 800132e:	4a0a      	ldr	r2, [pc, #40]	; (8001358 <HAL_UART_MspInit+0x15c>)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001334:	2200      	movs	r2, #0
 8001336:	2100      	movs	r1, #0
 8001338:	2027      	movs	r0, #39	; 0x27
 800133a:	f000 fae0 	bl	80018fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800133e:	2027      	movs	r0, #39	; 0x27
 8001340:	f000 faf7 	bl	8001932 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001344:	bf00      	nop
 8001346:	37e0      	adds	r7, #224	; 0xe0
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}
 800134c:	40004800 	.word	0x40004800
 8001350:	58024400 	.word	0x58024400
 8001354:	58020c00 	.word	0x58020c00
 8001358:	2400212c 	.word	0x2400212c
 800135c:	40020028 	.word	0x40020028

08001360 <HAL_SAI_MspInit>:
extern DMA_HandleTypeDef hdma_sai1_a;

static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b0b8      	sub	sp, #224	; 0xe0
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001368:	f107 0310 	add.w	r3, r7, #16
 800136c:	22bc      	movs	r2, #188	; 0xbc
 800136e:	2100      	movs	r1, #0
 8001370:	4618      	mov	r0, r3
 8001372:	f00b faf5 	bl	800c960 <memset>
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	4a4a      	ldr	r2, [pc, #296]	; (80014a4 <HAL_SAI_MspInit+0x144>)
 800137c:	4293      	cmp	r3, r2
 800137e:	f040 808d 	bne.w	800149c <HAL_SAI_MspInit+0x13c>
    {
    /* Peripheral clock enable */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 8001382:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001386:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 5;
 8001388:	2305      	movs	r3, #5
 800138a:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLL2.PLL2N = 192;
 800138c:	23c0      	movs	r3, #192	; 0xc0
 800138e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2P = 50;
 8001390:	2332      	movs	r3, #50	; 0x32
 8001392:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001394:	2302      	movs	r3, #2
 8001396:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001398:	2302      	movs	r3, #2
 800139a:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_0;
 800139c:	2300      	movs	r3, #0
 800139e:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 80013a0:	2300      	movs	r3, #0
 80013a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80013a4:	2300      	movs	r3, #0
 80013a6:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL2;
 80013a8:	2301      	movs	r3, #1
 80013aa:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013ac:	f107 0310 	add.w	r3, r7, #16
 80013b0:	4618      	mov	r0, r3
 80013b2:	f004 fbdd 	bl	8005b70 <HAL_RCCEx_PeriphCLKConfig>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d001      	beq.n	80013c0 <HAL_SAI_MspInit+0x60>
    {
      Error_Handler();
 80013bc:	f7ff feb4 	bl	8001128 <Error_Handler>
    }

    if (SAI1_client == 0)
 80013c0:	4b39      	ldr	r3, [pc, #228]	; (80014a8 <HAL_SAI_MspInit+0x148>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d116      	bne.n	80013f6 <HAL_SAI_MspInit+0x96>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 80013c8:	4b38      	ldr	r3, [pc, #224]	; (80014ac <HAL_SAI_MspInit+0x14c>)
 80013ca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80013ce:	4a37      	ldr	r2, [pc, #220]	; (80014ac <HAL_SAI_MspInit+0x14c>)
 80013d0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80013d4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80013d8:	4b34      	ldr	r3, [pc, #208]	; (80014ac <HAL_SAI_MspInit+0x14c>)
 80013da:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80013de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013e2:	60fb      	str	r3, [r7, #12]
 80013e4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(SAI1_IRQn, 0, 0);
 80013e6:	2200      	movs	r2, #0
 80013e8:	2100      	movs	r1, #0
 80013ea:	2057      	movs	r0, #87	; 0x57
 80013ec:	f000 fa87 	bl	80018fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SAI1_IRQn);
 80013f0:	2057      	movs	r0, #87	; 0x57
 80013f2:	f000 fa9e 	bl	8001932 <HAL_NVIC_EnableIRQ>
    }
    SAI1_client ++;
 80013f6:	4b2c      	ldr	r3, [pc, #176]	; (80014a8 <HAL_SAI_MspInit+0x148>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	3301      	adds	r3, #1
 80013fc:	4a2a      	ldr	r2, [pc, #168]	; (80014a8 <HAL_SAI_MspInit+0x148>)
 80013fe:	6013      	str	r3, [r2, #0]

    /**SAI1_A_Block_A GPIO Configuration
    PE2     ------> SAI1_CK1
    PE6     ------> SAI1_D1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_6;
 8001400:	2344      	movs	r3, #68	; 0x44
 8001402:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001406:	2302      	movs	r3, #2
 8001408:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800140c:	2302      	movs	r3, #2
 800140e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001412:	2300      	movs	r3, #0
 8001414:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF2_SAI1;
 8001418:	2302      	movs	r3, #2
 800141a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800141e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001422:	4619      	mov	r1, r3
 8001424:	4822      	ldr	r0, [pc, #136]	; (80014b0 <HAL_SAI_MspInit+0x150>)
 8001426:	f003 f9cf 	bl	80047c8 <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai1_a.Instance = DMA1_Stream0;
 800142a:	4b22      	ldr	r3, [pc, #136]	; (80014b4 <HAL_SAI_MspInit+0x154>)
 800142c:	4a22      	ldr	r2, [pc, #136]	; (80014b8 <HAL_SAI_MspInit+0x158>)
 800142e:	601a      	str	r2, [r3, #0]
    hdma_sai1_a.Init.Request = DMA_REQUEST_SAI1_A;
 8001430:	4b20      	ldr	r3, [pc, #128]	; (80014b4 <HAL_SAI_MspInit+0x154>)
 8001432:	2257      	movs	r2, #87	; 0x57
 8001434:	605a      	str	r2, [r3, #4]
    hdma_sai1_a.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001436:	4b1f      	ldr	r3, [pc, #124]	; (80014b4 <HAL_SAI_MspInit+0x154>)
 8001438:	2200      	movs	r2, #0
 800143a:	609a      	str	r2, [r3, #8]
    hdma_sai1_a.Init.PeriphInc = DMA_PINC_DISABLE;
 800143c:	4b1d      	ldr	r3, [pc, #116]	; (80014b4 <HAL_SAI_MspInit+0x154>)
 800143e:	2200      	movs	r2, #0
 8001440:	60da      	str	r2, [r3, #12]
    hdma_sai1_a.Init.MemInc = DMA_MINC_ENABLE;
 8001442:	4b1c      	ldr	r3, [pc, #112]	; (80014b4 <HAL_SAI_MspInit+0x154>)
 8001444:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001448:	611a      	str	r2, [r3, #16]
    hdma_sai1_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800144a:	4b1a      	ldr	r3, [pc, #104]	; (80014b4 <HAL_SAI_MspInit+0x154>)
 800144c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001450:	615a      	str	r2, [r3, #20]
    hdma_sai1_a.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001452:	4b18      	ldr	r3, [pc, #96]	; (80014b4 <HAL_SAI_MspInit+0x154>)
 8001454:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001458:	619a      	str	r2, [r3, #24]
    hdma_sai1_a.Init.Mode = DMA_CIRCULAR;
 800145a:	4b16      	ldr	r3, [pc, #88]	; (80014b4 <HAL_SAI_MspInit+0x154>)
 800145c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001460:	61da      	str	r2, [r3, #28]
    hdma_sai1_a.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001462:	4b14      	ldr	r3, [pc, #80]	; (80014b4 <HAL_SAI_MspInit+0x154>)
 8001464:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001468:	621a      	str	r2, [r3, #32]
    hdma_sai1_a.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800146a:	4b12      	ldr	r3, [pc, #72]	; (80014b4 <HAL_SAI_MspInit+0x154>)
 800146c:	2200      	movs	r2, #0
 800146e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
 8001470:	4810      	ldr	r0, [pc, #64]	; (80014b4 <HAL_SAI_MspInit+0x154>)
 8001472:	f000 fb63 	bl	8001b3c <HAL_DMA_Init>
 8001476:	4603      	mov	r3, r0
 8001478:	2b00      	cmp	r3, #0
 800147a:	d001      	beq.n	8001480 <HAL_SAI_MspInit+0x120>
    {
      Error_Handler();
 800147c:	f7ff fe54 	bl	8001128 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_a);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	4a0c      	ldr	r2, [pc, #48]	; (80014b4 <HAL_SAI_MspInit+0x154>)
 8001484:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8001488:	4a0a      	ldr	r2, [pc, #40]	; (80014b4 <HAL_SAI_MspInit+0x154>)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6393      	str	r3, [r2, #56]	; 0x38

    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_a);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	4a08      	ldr	r2, [pc, #32]	; (80014b4 <HAL_SAI_MspInit+0x154>)
 8001492:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8001496:	4a07      	ldr	r2, [pc, #28]	; (80014b4 <HAL_SAI_MspInit+0x154>)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	6393      	str	r3, [r2, #56]	; 0x38

    }
}
 800149c:	bf00      	nop
 800149e:	37e0      	adds	r7, #224	; 0xe0
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}
 80014a4:	40015804 	.word	0x40015804
 80014a8:	24002068 	.word	0x24002068
 80014ac:	58024400 	.word	0x58024400
 80014b0:	58021000 	.word	0x58021000
 80014b4:	240021a4 	.word	0x240021a4
 80014b8:	40020010 	.word	0x40020010

080014bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014c0:	e7fe      	b.n	80014c0 <NMI_Handler+0x4>

080014c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014c2:	b480      	push	{r7}
 80014c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014c6:	e7fe      	b.n	80014c6 <HardFault_Handler+0x4>

080014c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014cc:	e7fe      	b.n	80014cc <MemManage_Handler+0x4>

080014ce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014ce:	b480      	push	{r7}
 80014d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014d2:	e7fe      	b.n	80014d2 <BusFault_Handler+0x4>

080014d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014d4:	b480      	push	{r7}
 80014d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014d8:	e7fe      	b.n	80014d8 <UsageFault_Handler+0x4>

080014da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014da:	b480      	push	{r7}
 80014dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014de:	bf00      	nop
 80014e0:	46bd      	mov	sp, r7
 80014e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e6:	4770      	bx	lr

080014e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014ec:	bf00      	nop
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr

080014f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014f6:	b480      	push	{r7}
 80014f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014fa:	bf00      	nop
 80014fc:	46bd      	mov	sp, r7
 80014fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001502:	4770      	bx	lr

08001504 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001508:	f000 f8ce 	bl	80016a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800150c:	bf00      	nop
 800150e:	bd80      	pop	{r7, pc}

08001510 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_a);
 8001514:	4802      	ldr	r0, [pc, #8]	; (8001520 <DMA1_Stream0_IRQHandler+0x10>)
 8001516:	f001 fe39 	bl	800318c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800151a:	bf00      	nop
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	240021a4 	.word	0x240021a4

08001524 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8001528:	4802      	ldr	r0, [pc, #8]	; (8001534 <DMA1_Stream1_IRQHandler+0x10>)
 800152a:	f001 fe2f 	bl	800318c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800152e:	bf00      	nop
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	2400212c 	.word	0x2400212c

08001538 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800153c:	4802      	ldr	r0, [pc, #8]	; (8001548 <TIM1_UP_IRQHandler+0x10>)
 800153e:	f007 f9b0 	bl	80088a2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001542:	bf00      	nop
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	240022b4 	.word	0x240022b4

0800154c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001550:	4802      	ldr	r0, [pc, #8]	; (800155c <USART3_IRQHandler+0x10>)
 8001552:	f007 fe8f 	bl	8009274 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001556:	bf00      	nop
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	24002078 	.word	0x24002078

08001560 <SAI1_IRQHandler>:

/**
  * @brief This function handles SAI1 global interrupt.
  */
void SAI1_IRQHandler(void)
{
 8001560:	b480      	push	{r7}
 8001562:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_IRQn 0 */

  /* USER CODE BEGIN SAI1_IRQn 1 */

  /* USER CODE END SAI1_IRQn 1 */
}
 8001564:	bf00      	nop
 8001566:	46bd      	mov	sp, r7
 8001568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156c:	4770      	bx	lr
	...

08001570 <Reset_Handler>:
*/

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  ldr   sp, =_estack      /* set stack pointer */
 8001570:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015a8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001574:	f7ff f82c 	bl	80005d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001578:	480c      	ldr	r0, [pc, #48]	; (80015ac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800157a:	490d      	ldr	r1, [pc, #52]	; (80015b0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800157c:	4a0d      	ldr	r2, [pc, #52]	; (80015b4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800157e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001580:	e002      	b.n	8001588 <LoopCopyDataInit>

08001582 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001582:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001584:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001586:	3304      	adds	r3, #4

08001588 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001588:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800158a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800158c:	d3f9      	bcc.n	8001582 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800158e:	4a0a      	ldr	r2, [pc, #40]	; (80015b8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001590:	4c0a      	ldr	r4, [pc, #40]	; (80015bc <LoopFillZerobss+0x22>)
  movs r3, #0
 8001592:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001594:	e001      	b.n	800159a <LoopFillZerobss>

08001596 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001596:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001598:	3204      	adds	r2, #4

0800159a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800159a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800159c:	d3fb      	bcc.n	8001596 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800159e:	f00b f9bb 	bl	800c918 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015a2:	f7ff f9f3 	bl	800098c <main>
  bx  lr
 80015a6:	4770      	bx	lr
Reset_Handler:  ldr   sp, =_estack      /* set stack pointer */
 80015a8:	24040000 	.word	0x24040000
  ldr r0, =_sdata
 80015ac:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80015b0:	24000860 	.word	0x24000860
  ldr r2, =_sidata
 80015b4:	0800d008 	.word	0x0800d008
  ldr r2, =_sbss
 80015b8:	24000860 	.word	0x24000860
  ldr r4, =_ebss
 80015bc:	2400239c 	.word	0x2400239c

080015c0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015c0:	e7fe      	b.n	80015c0 <ADC3_IRQHandler>
	...

080015c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b082      	sub	sp, #8
 80015c8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015ca:	2003      	movs	r0, #3
 80015cc:	f000 f98c 	bl	80018e8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80015d0:	f004 f8f8 	bl	80057c4 <HAL_RCC_GetSysClockFreq>
 80015d4:	4602      	mov	r2, r0
 80015d6:	4b15      	ldr	r3, [pc, #84]	; (800162c <HAL_Init+0x68>)
 80015d8:	699b      	ldr	r3, [r3, #24]
 80015da:	0a1b      	lsrs	r3, r3, #8
 80015dc:	f003 030f 	and.w	r3, r3, #15
 80015e0:	4913      	ldr	r1, [pc, #76]	; (8001630 <HAL_Init+0x6c>)
 80015e2:	5ccb      	ldrb	r3, [r1, r3]
 80015e4:	f003 031f 	and.w	r3, r3, #31
 80015e8:	fa22 f303 	lsr.w	r3, r2, r3
 80015ec:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80015ee:	4b0f      	ldr	r3, [pc, #60]	; (800162c <HAL_Init+0x68>)
 80015f0:	699b      	ldr	r3, [r3, #24]
 80015f2:	f003 030f 	and.w	r3, r3, #15
 80015f6:	4a0e      	ldr	r2, [pc, #56]	; (8001630 <HAL_Init+0x6c>)
 80015f8:	5cd3      	ldrb	r3, [r2, r3]
 80015fa:	f003 031f 	and.w	r3, r3, #31
 80015fe:	687a      	ldr	r2, [r7, #4]
 8001600:	fa22 f303 	lsr.w	r3, r2, r3
 8001604:	4a0b      	ldr	r2, [pc, #44]	; (8001634 <HAL_Init+0x70>)
 8001606:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001608:	4a0b      	ldr	r2, [pc, #44]	; (8001638 <HAL_Init+0x74>)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800160e:	2000      	movs	r0, #0
 8001610:	f000 f814 	bl	800163c <HAL_InitTick>
 8001614:	4603      	mov	r3, r0
 8001616:	2b00      	cmp	r3, #0
 8001618:	d001      	beq.n	800161e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800161a:	2301      	movs	r3, #1
 800161c:	e002      	b.n	8001624 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800161e:	f7ff fd89 	bl	8001134 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001622:	2300      	movs	r3, #0
}
 8001624:	4618      	mov	r0, r3
 8001626:	3708      	adds	r7, #8
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}
 800162c:	58024400 	.word	0x58024400
 8001630:	0800cd48 	.word	0x0800cd48
 8001634:	24000404 	.word	0x24000404
 8001638:	24000400 	.word	0x24000400

0800163c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b082      	sub	sp, #8
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001644:	4b15      	ldr	r3, [pc, #84]	; (800169c <HAL_InitTick+0x60>)
 8001646:	781b      	ldrb	r3, [r3, #0]
 8001648:	2b00      	cmp	r3, #0
 800164a:	d101      	bne.n	8001650 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800164c:	2301      	movs	r3, #1
 800164e:	e021      	b.n	8001694 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001650:	4b13      	ldr	r3, [pc, #76]	; (80016a0 <HAL_InitTick+0x64>)
 8001652:	681a      	ldr	r2, [r3, #0]
 8001654:	4b11      	ldr	r3, [pc, #68]	; (800169c <HAL_InitTick+0x60>)
 8001656:	781b      	ldrb	r3, [r3, #0]
 8001658:	4619      	mov	r1, r3
 800165a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800165e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001662:	fbb2 f3f3 	udiv	r3, r2, r3
 8001666:	4618      	mov	r0, r3
 8001668:	f000 f971 	bl	800194e <HAL_SYSTICK_Config>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	d001      	beq.n	8001676 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001672:	2301      	movs	r3, #1
 8001674:	e00e      	b.n	8001694 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	2b0f      	cmp	r3, #15
 800167a:	d80a      	bhi.n	8001692 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800167c:	2200      	movs	r2, #0
 800167e:	6879      	ldr	r1, [r7, #4]
 8001680:	f04f 30ff 	mov.w	r0, #4294967295
 8001684:	f000 f93b 	bl	80018fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001688:	4a06      	ldr	r2, [pc, #24]	; (80016a4 <HAL_InitTick+0x68>)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800168e:	2300      	movs	r3, #0
 8001690:	e000      	b.n	8001694 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001692:	2301      	movs	r3, #1
}
 8001694:	4618      	mov	r0, r3
 8001696:	3708      	adds	r7, #8
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}
 800169c:	240007f8 	.word	0x240007f8
 80016a0:	24000400 	.word	0x24000400
 80016a4:	240007f4 	.word	0x240007f4

080016a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80016ac:	4b06      	ldr	r3, [pc, #24]	; (80016c8 <HAL_IncTick+0x20>)
 80016ae:	781b      	ldrb	r3, [r3, #0]
 80016b0:	461a      	mov	r2, r3
 80016b2:	4b06      	ldr	r3, [pc, #24]	; (80016cc <HAL_IncTick+0x24>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4413      	add	r3, r2
 80016b8:	4a04      	ldr	r2, [pc, #16]	; (80016cc <HAL_IncTick+0x24>)
 80016ba:	6013      	str	r3, [r2, #0]
}
 80016bc:	bf00      	nop
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr
 80016c6:	bf00      	nop
 80016c8:	240007f8 	.word	0x240007f8
 80016cc:	24002398 	.word	0x24002398

080016d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	af00      	add	r7, sp, #0
  return uwTick;
 80016d4:	4b03      	ldr	r3, [pc, #12]	; (80016e4 <HAL_GetTick+0x14>)
 80016d6:	681b      	ldr	r3, [r3, #0]
}
 80016d8:	4618      	mov	r0, r3
 80016da:	46bd      	mov	sp, r7
 80016dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e0:	4770      	bx	lr
 80016e2:	bf00      	nop
 80016e4:	24002398 	.word	0x24002398

080016e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b084      	sub	sp, #16
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016f0:	f7ff ffee 	bl	80016d0 <HAL_GetTick>
 80016f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001700:	d005      	beq.n	800170e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001702:	4b0a      	ldr	r3, [pc, #40]	; (800172c <HAL_Delay+0x44>)
 8001704:	781b      	ldrb	r3, [r3, #0]
 8001706:	461a      	mov	r2, r3
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	4413      	add	r3, r2
 800170c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800170e:	bf00      	nop
 8001710:	f7ff ffde 	bl	80016d0 <HAL_GetTick>
 8001714:	4602      	mov	r2, r0
 8001716:	68bb      	ldr	r3, [r7, #8]
 8001718:	1ad3      	subs	r3, r2, r3
 800171a:	68fa      	ldr	r2, [r7, #12]
 800171c:	429a      	cmp	r2, r3
 800171e:	d8f7      	bhi.n	8001710 <HAL_Delay+0x28>
  {
  }
}
 8001720:	bf00      	nop
 8001722:	bf00      	nop
 8001724:	3710      	adds	r7, #16
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	240007f8 	.word	0x240007f8

08001730 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001730:	b480      	push	{r7}
 8001732:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001734:	4b03      	ldr	r3, [pc, #12]	; (8001744 <HAL_GetREVID+0x14>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	0c1b      	lsrs	r3, r3, #16
}
 800173a:	4618      	mov	r0, r3
 800173c:	46bd      	mov	sp, r7
 800173e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001742:	4770      	bx	lr
 8001744:	5c001000 	.word	0x5c001000

08001748 <__NVIC_SetPriorityGrouping>:
{
 8001748:	b480      	push	{r7}
 800174a:	b085      	sub	sp, #20
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	f003 0307 	and.w	r3, r3, #7
 8001756:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001758:	4b0b      	ldr	r3, [pc, #44]	; (8001788 <__NVIC_SetPriorityGrouping+0x40>)
 800175a:	68db      	ldr	r3, [r3, #12]
 800175c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800175e:	68ba      	ldr	r2, [r7, #8]
 8001760:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001764:	4013      	ands	r3, r2
 8001766:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800176c:	68bb      	ldr	r3, [r7, #8]
 800176e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001770:	4b06      	ldr	r3, [pc, #24]	; (800178c <__NVIC_SetPriorityGrouping+0x44>)
 8001772:	4313      	orrs	r3, r2
 8001774:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001776:	4a04      	ldr	r2, [pc, #16]	; (8001788 <__NVIC_SetPriorityGrouping+0x40>)
 8001778:	68bb      	ldr	r3, [r7, #8]
 800177a:	60d3      	str	r3, [r2, #12]
}
 800177c:	bf00      	nop
 800177e:	3714      	adds	r7, #20
 8001780:	46bd      	mov	sp, r7
 8001782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001786:	4770      	bx	lr
 8001788:	e000ed00 	.word	0xe000ed00
 800178c:	05fa0000 	.word	0x05fa0000

08001790 <__NVIC_GetPriorityGrouping>:
{
 8001790:	b480      	push	{r7}
 8001792:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001794:	4b04      	ldr	r3, [pc, #16]	; (80017a8 <__NVIC_GetPriorityGrouping+0x18>)
 8001796:	68db      	ldr	r3, [r3, #12]
 8001798:	0a1b      	lsrs	r3, r3, #8
 800179a:	f003 0307 	and.w	r3, r3, #7
}
 800179e:	4618      	mov	r0, r3
 80017a0:	46bd      	mov	sp, r7
 80017a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a6:	4770      	bx	lr
 80017a8:	e000ed00 	.word	0xe000ed00

080017ac <__NVIC_EnableIRQ>:
{
 80017ac:	b480      	push	{r7}
 80017ae:	b083      	sub	sp, #12
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	4603      	mov	r3, r0
 80017b4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80017b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	db0b      	blt.n	80017d6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017be:	88fb      	ldrh	r3, [r7, #6]
 80017c0:	f003 021f 	and.w	r2, r3, #31
 80017c4:	4907      	ldr	r1, [pc, #28]	; (80017e4 <__NVIC_EnableIRQ+0x38>)
 80017c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017ca:	095b      	lsrs	r3, r3, #5
 80017cc:	2001      	movs	r0, #1
 80017ce:	fa00 f202 	lsl.w	r2, r0, r2
 80017d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80017d6:	bf00      	nop
 80017d8:	370c      	adds	r7, #12
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr
 80017e2:	bf00      	nop
 80017e4:	e000e100 	.word	0xe000e100

080017e8 <__NVIC_SetPriority>:
{
 80017e8:	b480      	push	{r7}
 80017ea:	b083      	sub	sp, #12
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	4603      	mov	r3, r0
 80017f0:	6039      	str	r1, [r7, #0]
 80017f2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80017f4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	db0a      	blt.n	8001812 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	b2da      	uxtb	r2, r3
 8001800:	490c      	ldr	r1, [pc, #48]	; (8001834 <__NVIC_SetPriority+0x4c>)
 8001802:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001806:	0112      	lsls	r2, r2, #4
 8001808:	b2d2      	uxtb	r2, r2
 800180a:	440b      	add	r3, r1
 800180c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001810:	e00a      	b.n	8001828 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	b2da      	uxtb	r2, r3
 8001816:	4908      	ldr	r1, [pc, #32]	; (8001838 <__NVIC_SetPriority+0x50>)
 8001818:	88fb      	ldrh	r3, [r7, #6]
 800181a:	f003 030f 	and.w	r3, r3, #15
 800181e:	3b04      	subs	r3, #4
 8001820:	0112      	lsls	r2, r2, #4
 8001822:	b2d2      	uxtb	r2, r2
 8001824:	440b      	add	r3, r1
 8001826:	761a      	strb	r2, [r3, #24]
}
 8001828:	bf00      	nop
 800182a:	370c      	adds	r7, #12
 800182c:	46bd      	mov	sp, r7
 800182e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001832:	4770      	bx	lr
 8001834:	e000e100 	.word	0xe000e100
 8001838:	e000ed00 	.word	0xe000ed00

0800183c <NVIC_EncodePriority>:
{
 800183c:	b480      	push	{r7}
 800183e:	b089      	sub	sp, #36	; 0x24
 8001840:	af00      	add	r7, sp, #0
 8001842:	60f8      	str	r0, [r7, #12]
 8001844:	60b9      	str	r1, [r7, #8]
 8001846:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	f003 0307 	and.w	r3, r3, #7
 800184e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001850:	69fb      	ldr	r3, [r7, #28]
 8001852:	f1c3 0307 	rsb	r3, r3, #7
 8001856:	2b04      	cmp	r3, #4
 8001858:	bf28      	it	cs
 800185a:	2304      	movcs	r3, #4
 800185c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800185e:	69fb      	ldr	r3, [r7, #28]
 8001860:	3304      	adds	r3, #4
 8001862:	2b06      	cmp	r3, #6
 8001864:	d902      	bls.n	800186c <NVIC_EncodePriority+0x30>
 8001866:	69fb      	ldr	r3, [r7, #28]
 8001868:	3b03      	subs	r3, #3
 800186a:	e000      	b.n	800186e <NVIC_EncodePriority+0x32>
 800186c:	2300      	movs	r3, #0
 800186e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001870:	f04f 32ff 	mov.w	r2, #4294967295
 8001874:	69bb      	ldr	r3, [r7, #24]
 8001876:	fa02 f303 	lsl.w	r3, r2, r3
 800187a:	43da      	mvns	r2, r3
 800187c:	68bb      	ldr	r3, [r7, #8]
 800187e:	401a      	ands	r2, r3
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001884:	f04f 31ff 	mov.w	r1, #4294967295
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	fa01 f303 	lsl.w	r3, r1, r3
 800188e:	43d9      	mvns	r1, r3
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001894:	4313      	orrs	r3, r2
}
 8001896:	4618      	mov	r0, r3
 8001898:	3724      	adds	r7, #36	; 0x24
 800189a:	46bd      	mov	sp, r7
 800189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a0:	4770      	bx	lr
	...

080018a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b082      	sub	sp, #8
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	3b01      	subs	r3, #1
 80018b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018b4:	d301      	bcc.n	80018ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018b6:	2301      	movs	r3, #1
 80018b8:	e00f      	b.n	80018da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018ba:	4a0a      	ldr	r2, [pc, #40]	; (80018e4 <SysTick_Config+0x40>)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	3b01      	subs	r3, #1
 80018c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018c2:	210f      	movs	r1, #15
 80018c4:	f04f 30ff 	mov.w	r0, #4294967295
 80018c8:	f7ff ff8e 	bl	80017e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018cc:	4b05      	ldr	r3, [pc, #20]	; (80018e4 <SysTick_Config+0x40>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018d2:	4b04      	ldr	r3, [pc, #16]	; (80018e4 <SysTick_Config+0x40>)
 80018d4:	2207      	movs	r2, #7
 80018d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018d8:	2300      	movs	r3, #0
}
 80018da:	4618      	mov	r0, r3
 80018dc:	3708      	adds	r7, #8
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	e000e010 	.word	0xe000e010

080018e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b082      	sub	sp, #8
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018f0:	6878      	ldr	r0, [r7, #4]
 80018f2:	f7ff ff29 	bl	8001748 <__NVIC_SetPriorityGrouping>
}
 80018f6:	bf00      	nop
 80018f8:	3708      	adds	r7, #8
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}

080018fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018fe:	b580      	push	{r7, lr}
 8001900:	b086      	sub	sp, #24
 8001902:	af00      	add	r7, sp, #0
 8001904:	4603      	mov	r3, r0
 8001906:	60b9      	str	r1, [r7, #8]
 8001908:	607a      	str	r2, [r7, #4]
 800190a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800190c:	f7ff ff40 	bl	8001790 <__NVIC_GetPriorityGrouping>
 8001910:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001912:	687a      	ldr	r2, [r7, #4]
 8001914:	68b9      	ldr	r1, [r7, #8]
 8001916:	6978      	ldr	r0, [r7, #20]
 8001918:	f7ff ff90 	bl	800183c <NVIC_EncodePriority>
 800191c:	4602      	mov	r2, r0
 800191e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001922:	4611      	mov	r1, r2
 8001924:	4618      	mov	r0, r3
 8001926:	f7ff ff5f 	bl	80017e8 <__NVIC_SetPriority>
}
 800192a:	bf00      	nop
 800192c:	3718      	adds	r7, #24
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}

08001932 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001932:	b580      	push	{r7, lr}
 8001934:	b082      	sub	sp, #8
 8001936:	af00      	add	r7, sp, #0
 8001938:	4603      	mov	r3, r0
 800193a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800193c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001940:	4618      	mov	r0, r3
 8001942:	f7ff ff33 	bl	80017ac <__NVIC_EnableIRQ>
}
 8001946:	bf00      	nop
 8001948:	3708      	adds	r7, #8
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}

0800194e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800194e:	b580      	push	{r7, lr}
 8001950:	b082      	sub	sp, #8
 8001952:	af00      	add	r7, sp, #0
 8001954:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001956:	6878      	ldr	r0, [r7, #4]
 8001958:	f7ff ffa4 	bl	80018a4 <SysTick_Config>
 800195c:	4603      	mov	r3, r0
}
 800195e:	4618      	mov	r0, r3
 8001960:	3708      	adds	r7, #8
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}
	...

08001968 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b082      	sub	sp, #8
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d101      	bne.n	800197a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001976:	2301      	movs	r3, #1
 8001978:	e054      	b.n	8001a24 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	7f5b      	ldrb	r3, [r3, #29]
 800197e:	b2db      	uxtb	r3, r3
 8001980:	2b00      	cmp	r3, #0
 8001982:	d105      	bne.n	8001990 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2200      	movs	r2, #0
 8001988:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800198a:	6878      	ldr	r0, [r7, #4]
 800198c:	f7ff fbec 	bl	8001168 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2202      	movs	r2, #2
 8001994:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	791b      	ldrb	r3, [r3, #4]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d10c      	bne.n	80019b8 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4a22      	ldr	r2, [pc, #136]	; (8001a2c <HAL_CRC_Init+0xc4>)
 80019a4:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	689a      	ldr	r2, [r3, #8]
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f022 0218 	bic.w	r2, r2, #24
 80019b4:	609a      	str	r2, [r3, #8]
 80019b6:	e00c      	b.n	80019d2 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6899      	ldr	r1, [r3, #8]
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	68db      	ldr	r3, [r3, #12]
 80019c0:	461a      	mov	r2, r3
 80019c2:	6878      	ldr	r0, [r7, #4]
 80019c4:	f000 f834 	bl	8001a30 <HAL_CRCEx_Polynomial_Set>
 80019c8:	4603      	mov	r3, r0
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d001      	beq.n	80019d2 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80019ce:	2301      	movs	r3, #1
 80019d0:	e028      	b.n	8001a24 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	795b      	ldrb	r3, [r3, #5]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d105      	bne.n	80019e6 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f04f 32ff 	mov.w	r2, #4294967295
 80019e2:	611a      	str	r2, [r3, #16]
 80019e4:	e004      	b.n	80019f0 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	687a      	ldr	r2, [r7, #4]
 80019ec:	6912      	ldr	r2, [r2, #16]
 80019ee:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	689b      	ldr	r3, [r3, #8]
 80019f6:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	695a      	ldr	r2, [r3, #20]
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	430a      	orrs	r2, r1
 8001a04:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	689b      	ldr	r3, [r3, #8]
 8001a0c:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	699a      	ldr	r2, [r3, #24]
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	430a      	orrs	r2, r1
 8001a1a:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2201      	movs	r2, #1
 8001a20:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8001a22:	2300      	movs	r3, #0
}
 8001a24:	4618      	mov	r0, r3
 8001a26:	3708      	adds	r7, #8
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	04c11db7 	.word	0x04c11db7

08001a30 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b087      	sub	sp, #28
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	60f8      	str	r0, [r7, #12]
 8001a38:	60b9      	str	r1, [r7, #8]
 8001a3a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8001a40:	231f      	movs	r3, #31
 8001a42:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8001a44:	bf00      	nop
 8001a46:	693b      	ldr	r3, [r7, #16]
 8001a48:	1e5a      	subs	r2, r3, #1
 8001a4a:	613a      	str	r2, [r7, #16]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d009      	beq.n	8001a64 <HAL_CRCEx_Polynomial_Set+0x34>
 8001a50:	693b      	ldr	r3, [r7, #16]
 8001a52:	f003 031f 	and.w	r3, r3, #31
 8001a56:	68ba      	ldr	r2, [r7, #8]
 8001a58:	fa22 f303 	lsr.w	r3, r2, r3
 8001a5c:	f003 0301 	and.w	r3, r3, #1
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d0f0      	beq.n	8001a46 <HAL_CRCEx_Polynomial_Set+0x16>
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2b18      	cmp	r3, #24
 8001a68:	d846      	bhi.n	8001af8 <HAL_CRCEx_Polynomial_Set+0xc8>
 8001a6a:	a201      	add	r2, pc, #4	; (adr r2, 8001a70 <HAL_CRCEx_Polynomial_Set+0x40>)
 8001a6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a70:	08001aff 	.word	0x08001aff
 8001a74:	08001af9 	.word	0x08001af9
 8001a78:	08001af9 	.word	0x08001af9
 8001a7c:	08001af9 	.word	0x08001af9
 8001a80:	08001af9 	.word	0x08001af9
 8001a84:	08001af9 	.word	0x08001af9
 8001a88:	08001af9 	.word	0x08001af9
 8001a8c:	08001af9 	.word	0x08001af9
 8001a90:	08001aed 	.word	0x08001aed
 8001a94:	08001af9 	.word	0x08001af9
 8001a98:	08001af9 	.word	0x08001af9
 8001a9c:	08001af9 	.word	0x08001af9
 8001aa0:	08001af9 	.word	0x08001af9
 8001aa4:	08001af9 	.word	0x08001af9
 8001aa8:	08001af9 	.word	0x08001af9
 8001aac:	08001af9 	.word	0x08001af9
 8001ab0:	08001ae1 	.word	0x08001ae1
 8001ab4:	08001af9 	.word	0x08001af9
 8001ab8:	08001af9 	.word	0x08001af9
 8001abc:	08001af9 	.word	0x08001af9
 8001ac0:	08001af9 	.word	0x08001af9
 8001ac4:	08001af9 	.word	0x08001af9
 8001ac8:	08001af9 	.word	0x08001af9
 8001acc:	08001af9 	.word	0x08001af9
 8001ad0:	08001ad5 	.word	0x08001ad5
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8001ad4:	693b      	ldr	r3, [r7, #16]
 8001ad6:	2b06      	cmp	r3, #6
 8001ad8:	d913      	bls.n	8001b02 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8001ada:	2301      	movs	r3, #1
 8001adc:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8001ade:	e010      	b.n	8001b02 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8001ae0:	693b      	ldr	r3, [r7, #16]
 8001ae2:	2b07      	cmp	r3, #7
 8001ae4:	d90f      	bls.n	8001b06 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8001aea:	e00c      	b.n	8001b06 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8001aec:	693b      	ldr	r3, [r7, #16]
 8001aee:	2b0f      	cmp	r3, #15
 8001af0:	d90b      	bls.n	8001b0a <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8001af2:	2301      	movs	r3, #1
 8001af4:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8001af6:	e008      	b.n	8001b0a <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8001af8:	2301      	movs	r3, #1
 8001afa:	75fb      	strb	r3, [r7, #23]
      break;
 8001afc:	e006      	b.n	8001b0c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001afe:	bf00      	nop
 8001b00:	e004      	b.n	8001b0c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001b02:	bf00      	nop
 8001b04:	e002      	b.n	8001b0c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001b06:	bf00      	nop
 8001b08:	e000      	b.n	8001b0c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001b0a:	bf00      	nop
  }
  if (status == HAL_OK)
 8001b0c:	7dfb      	ldrb	r3, [r7, #23]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d10d      	bne.n	8001b2e <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	68ba      	ldr	r2, [r7, #8]
 8001b18:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	689b      	ldr	r3, [r3, #8]
 8001b20:	f023 0118 	bic.w	r1, r3, #24
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	687a      	ldr	r2, [r7, #4]
 8001b2a:	430a      	orrs	r2, r1
 8001b2c:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8001b2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	371c      	adds	r7, #28
 8001b34:	46bd      	mov	sp, r7
 8001b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3a:	4770      	bx	lr

08001b3c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b086      	sub	sp, #24
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001b44:	f7ff fdc4 	bl	80016d0 <HAL_GetTick>
 8001b48:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d101      	bne.n	8001b54 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001b50:	2301      	movs	r3, #1
 8001b52:	e316      	b.n	8002182 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a66      	ldr	r2, [pc, #408]	; (8001cf4 <HAL_DMA_Init+0x1b8>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d04a      	beq.n	8001bf4 <HAL_DMA_Init+0xb8>
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4a65      	ldr	r2, [pc, #404]	; (8001cf8 <HAL_DMA_Init+0x1bc>)
 8001b64:	4293      	cmp	r3, r2
 8001b66:	d045      	beq.n	8001bf4 <HAL_DMA_Init+0xb8>
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a63      	ldr	r2, [pc, #396]	; (8001cfc <HAL_DMA_Init+0x1c0>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d040      	beq.n	8001bf4 <HAL_DMA_Init+0xb8>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4a62      	ldr	r2, [pc, #392]	; (8001d00 <HAL_DMA_Init+0x1c4>)
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	d03b      	beq.n	8001bf4 <HAL_DMA_Init+0xb8>
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a60      	ldr	r2, [pc, #384]	; (8001d04 <HAL_DMA_Init+0x1c8>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d036      	beq.n	8001bf4 <HAL_DMA_Init+0xb8>
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4a5f      	ldr	r2, [pc, #380]	; (8001d08 <HAL_DMA_Init+0x1cc>)
 8001b8c:	4293      	cmp	r3, r2
 8001b8e:	d031      	beq.n	8001bf4 <HAL_DMA_Init+0xb8>
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4a5d      	ldr	r2, [pc, #372]	; (8001d0c <HAL_DMA_Init+0x1d0>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d02c      	beq.n	8001bf4 <HAL_DMA_Init+0xb8>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4a5c      	ldr	r2, [pc, #368]	; (8001d10 <HAL_DMA_Init+0x1d4>)
 8001ba0:	4293      	cmp	r3, r2
 8001ba2:	d027      	beq.n	8001bf4 <HAL_DMA_Init+0xb8>
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a5a      	ldr	r2, [pc, #360]	; (8001d14 <HAL_DMA_Init+0x1d8>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d022      	beq.n	8001bf4 <HAL_DMA_Init+0xb8>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4a59      	ldr	r2, [pc, #356]	; (8001d18 <HAL_DMA_Init+0x1dc>)
 8001bb4:	4293      	cmp	r3, r2
 8001bb6:	d01d      	beq.n	8001bf4 <HAL_DMA_Init+0xb8>
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a57      	ldr	r2, [pc, #348]	; (8001d1c <HAL_DMA_Init+0x1e0>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d018      	beq.n	8001bf4 <HAL_DMA_Init+0xb8>
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4a56      	ldr	r2, [pc, #344]	; (8001d20 <HAL_DMA_Init+0x1e4>)
 8001bc8:	4293      	cmp	r3, r2
 8001bca:	d013      	beq.n	8001bf4 <HAL_DMA_Init+0xb8>
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a54      	ldr	r2, [pc, #336]	; (8001d24 <HAL_DMA_Init+0x1e8>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d00e      	beq.n	8001bf4 <HAL_DMA_Init+0xb8>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4a53      	ldr	r2, [pc, #332]	; (8001d28 <HAL_DMA_Init+0x1ec>)
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	d009      	beq.n	8001bf4 <HAL_DMA_Init+0xb8>
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4a51      	ldr	r2, [pc, #324]	; (8001d2c <HAL_DMA_Init+0x1f0>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d004      	beq.n	8001bf4 <HAL_DMA_Init+0xb8>
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4a50      	ldr	r2, [pc, #320]	; (8001d30 <HAL_DMA_Init+0x1f4>)
 8001bf0:	4293      	cmp	r3, r2
 8001bf2:	d101      	bne.n	8001bf8 <HAL_DMA_Init+0xbc>
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	e000      	b.n	8001bfa <HAL_DMA_Init+0xbe>
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	f000 813b 	beq.w	8001e76 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2200      	movs	r2, #0
 8001c04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2202      	movs	r2, #2
 8001c0c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a37      	ldr	r2, [pc, #220]	; (8001cf4 <HAL_DMA_Init+0x1b8>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d04a      	beq.n	8001cb0 <HAL_DMA_Init+0x174>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4a36      	ldr	r2, [pc, #216]	; (8001cf8 <HAL_DMA_Init+0x1bc>)
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d045      	beq.n	8001cb0 <HAL_DMA_Init+0x174>
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a34      	ldr	r2, [pc, #208]	; (8001cfc <HAL_DMA_Init+0x1c0>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d040      	beq.n	8001cb0 <HAL_DMA_Init+0x174>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4a33      	ldr	r2, [pc, #204]	; (8001d00 <HAL_DMA_Init+0x1c4>)
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d03b      	beq.n	8001cb0 <HAL_DMA_Init+0x174>
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a31      	ldr	r2, [pc, #196]	; (8001d04 <HAL_DMA_Init+0x1c8>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d036      	beq.n	8001cb0 <HAL_DMA_Init+0x174>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4a30      	ldr	r2, [pc, #192]	; (8001d08 <HAL_DMA_Init+0x1cc>)
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	d031      	beq.n	8001cb0 <HAL_DMA_Init+0x174>
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a2e      	ldr	r2, [pc, #184]	; (8001d0c <HAL_DMA_Init+0x1d0>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d02c      	beq.n	8001cb0 <HAL_DMA_Init+0x174>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4a2d      	ldr	r2, [pc, #180]	; (8001d10 <HAL_DMA_Init+0x1d4>)
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d027      	beq.n	8001cb0 <HAL_DMA_Init+0x174>
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a2b      	ldr	r2, [pc, #172]	; (8001d14 <HAL_DMA_Init+0x1d8>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d022      	beq.n	8001cb0 <HAL_DMA_Init+0x174>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4a2a      	ldr	r2, [pc, #168]	; (8001d18 <HAL_DMA_Init+0x1dc>)
 8001c70:	4293      	cmp	r3, r2
 8001c72:	d01d      	beq.n	8001cb0 <HAL_DMA_Init+0x174>
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a28      	ldr	r2, [pc, #160]	; (8001d1c <HAL_DMA_Init+0x1e0>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d018      	beq.n	8001cb0 <HAL_DMA_Init+0x174>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4a27      	ldr	r2, [pc, #156]	; (8001d20 <HAL_DMA_Init+0x1e4>)
 8001c84:	4293      	cmp	r3, r2
 8001c86:	d013      	beq.n	8001cb0 <HAL_DMA_Init+0x174>
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4a25      	ldr	r2, [pc, #148]	; (8001d24 <HAL_DMA_Init+0x1e8>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d00e      	beq.n	8001cb0 <HAL_DMA_Init+0x174>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4a24      	ldr	r2, [pc, #144]	; (8001d28 <HAL_DMA_Init+0x1ec>)
 8001c98:	4293      	cmp	r3, r2
 8001c9a:	d009      	beq.n	8001cb0 <HAL_DMA_Init+0x174>
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a22      	ldr	r2, [pc, #136]	; (8001d2c <HAL_DMA_Init+0x1f0>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d004      	beq.n	8001cb0 <HAL_DMA_Init+0x174>
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4a21      	ldr	r2, [pc, #132]	; (8001d30 <HAL_DMA_Init+0x1f4>)
 8001cac:	4293      	cmp	r3, r2
 8001cae:	d108      	bne.n	8001cc2 <HAL_DMA_Init+0x186>
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	681a      	ldr	r2, [r3, #0]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f022 0201 	bic.w	r2, r2, #1
 8001cbe:	601a      	str	r2, [r3, #0]
 8001cc0:	e007      	b.n	8001cd2 <HAL_DMA_Init+0x196>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	681a      	ldr	r2, [r3, #0]
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f022 0201 	bic.w	r2, r2, #1
 8001cd0:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001cd2:	e02f      	b.n	8001d34 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001cd4:	f7ff fcfc 	bl	80016d0 <HAL_GetTick>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	693b      	ldr	r3, [r7, #16]
 8001cdc:	1ad3      	subs	r3, r2, r3
 8001cde:	2b05      	cmp	r3, #5
 8001ce0:	d928      	bls.n	8001d34 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2220      	movs	r2, #32
 8001ce6:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2203      	movs	r2, #3
 8001cec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	e246      	b.n	8002182 <HAL_DMA_Init+0x646>
 8001cf4:	40020010 	.word	0x40020010
 8001cf8:	40020028 	.word	0x40020028
 8001cfc:	40020040 	.word	0x40020040
 8001d00:	40020058 	.word	0x40020058
 8001d04:	40020070 	.word	0x40020070
 8001d08:	40020088 	.word	0x40020088
 8001d0c:	400200a0 	.word	0x400200a0
 8001d10:	400200b8 	.word	0x400200b8
 8001d14:	40020410 	.word	0x40020410
 8001d18:	40020428 	.word	0x40020428
 8001d1c:	40020440 	.word	0x40020440
 8001d20:	40020458 	.word	0x40020458
 8001d24:	40020470 	.word	0x40020470
 8001d28:	40020488 	.word	0x40020488
 8001d2c:	400204a0 	.word	0x400204a0
 8001d30:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f003 0301 	and.w	r3, r3, #1
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d1c8      	bne.n	8001cd4 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001d4a:	697a      	ldr	r2, [r7, #20]
 8001d4c:	4b83      	ldr	r3, [pc, #524]	; (8001f5c <HAL_DMA_Init+0x420>)
 8001d4e:	4013      	ands	r3, r2
 8001d50:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8001d5a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	691b      	ldr	r3, [r3, #16]
 8001d60:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d66:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	699b      	ldr	r3, [r3, #24]
 8001d6c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d72:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6a1b      	ldr	r3, [r3, #32]
 8001d78:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8001d7a:	697a      	ldr	r2, [r7, #20]
 8001d7c:	4313      	orrs	r3, r2
 8001d7e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d84:	2b04      	cmp	r3, #4
 8001d86:	d107      	bne.n	8001d98 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d90:	4313      	orrs	r3, r2
 8001d92:	697a      	ldr	r2, [r7, #20]
 8001d94:	4313      	orrs	r3, r2
 8001d96:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8001d98:	4b71      	ldr	r3, [pc, #452]	; (8001f60 <HAL_DMA_Init+0x424>)
 8001d9a:	681a      	ldr	r2, [r3, #0]
 8001d9c:	4b71      	ldr	r3, [pc, #452]	; (8001f64 <HAL_DMA_Init+0x428>)
 8001d9e:	4013      	ands	r3, r2
 8001da0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001da4:	d328      	bcc.n	8001df8 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	2b28      	cmp	r3, #40	; 0x28
 8001dac:	d903      	bls.n	8001db6 <HAL_DMA_Init+0x27a>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	2b2e      	cmp	r3, #46	; 0x2e
 8001db4:	d917      	bls.n	8001de6 <HAL_DMA_Init+0x2aa>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	2b3e      	cmp	r3, #62	; 0x3e
 8001dbc:	d903      	bls.n	8001dc6 <HAL_DMA_Init+0x28a>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	2b42      	cmp	r3, #66	; 0x42
 8001dc4:	d90f      	bls.n	8001de6 <HAL_DMA_Init+0x2aa>
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	2b46      	cmp	r3, #70	; 0x46
 8001dcc:	d903      	bls.n	8001dd6 <HAL_DMA_Init+0x29a>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	2b48      	cmp	r3, #72	; 0x48
 8001dd4:	d907      	bls.n	8001de6 <HAL_DMA_Init+0x2aa>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	2b4e      	cmp	r3, #78	; 0x4e
 8001ddc:	d905      	bls.n	8001dea <HAL_DMA_Init+0x2ae>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	2b52      	cmp	r3, #82	; 0x52
 8001de4:	d801      	bhi.n	8001dea <HAL_DMA_Init+0x2ae>
 8001de6:	2301      	movs	r3, #1
 8001de8:	e000      	b.n	8001dec <HAL_DMA_Init+0x2b0>
 8001dea:	2300      	movs	r3, #0
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d003      	beq.n	8001df8 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8001df0:	697b      	ldr	r3, [r7, #20]
 8001df2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001df6:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	697a      	ldr	r2, [r7, #20]
 8001dfe:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	695b      	ldr	r3, [r3, #20]
 8001e06:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001e08:	697b      	ldr	r3, [r7, #20]
 8001e0a:	f023 0307 	bic.w	r3, r3, #7
 8001e0e:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e14:	697a      	ldr	r2, [r7, #20]
 8001e16:	4313      	orrs	r3, r2
 8001e18:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e1e:	2b04      	cmp	r3, #4
 8001e20:	d117      	bne.n	8001e52 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e26:	697a      	ldr	r2, [r7, #20]
 8001e28:	4313      	orrs	r3, r2
 8001e2a:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d00e      	beq.n	8001e52 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001e34:	6878      	ldr	r0, [r7, #4]
 8001e36:	f002 fb3d 	bl	80044b4 <DMA_CheckFifoParam>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d008      	beq.n	8001e52 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2240      	movs	r2, #64	; 0x40
 8001e44:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2201      	movs	r2, #1
 8001e4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	e197      	b.n	8002182 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	697a      	ldr	r2, [r7, #20]
 8001e58:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001e5a:	6878      	ldr	r0, [r7, #4]
 8001e5c:	f002 fa78 	bl	8004350 <DMA_CalcBaseAndBitshift>
 8001e60:	4603      	mov	r3, r0
 8001e62:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e68:	f003 031f 	and.w	r3, r3, #31
 8001e6c:	223f      	movs	r2, #63	; 0x3f
 8001e6e:	409a      	lsls	r2, r3
 8001e70:	68bb      	ldr	r3, [r7, #8]
 8001e72:	609a      	str	r2, [r3, #8]
 8001e74:	e0cd      	b.n	8002012 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4a3b      	ldr	r2, [pc, #236]	; (8001f68 <HAL_DMA_Init+0x42c>)
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d022      	beq.n	8001ec6 <HAL_DMA_Init+0x38a>
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a39      	ldr	r2, [pc, #228]	; (8001f6c <HAL_DMA_Init+0x430>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d01d      	beq.n	8001ec6 <HAL_DMA_Init+0x38a>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4a38      	ldr	r2, [pc, #224]	; (8001f70 <HAL_DMA_Init+0x434>)
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d018      	beq.n	8001ec6 <HAL_DMA_Init+0x38a>
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a36      	ldr	r2, [pc, #216]	; (8001f74 <HAL_DMA_Init+0x438>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d013      	beq.n	8001ec6 <HAL_DMA_Init+0x38a>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4a35      	ldr	r2, [pc, #212]	; (8001f78 <HAL_DMA_Init+0x43c>)
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d00e      	beq.n	8001ec6 <HAL_DMA_Init+0x38a>
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a33      	ldr	r2, [pc, #204]	; (8001f7c <HAL_DMA_Init+0x440>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d009      	beq.n	8001ec6 <HAL_DMA_Init+0x38a>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4a32      	ldr	r2, [pc, #200]	; (8001f80 <HAL_DMA_Init+0x444>)
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d004      	beq.n	8001ec6 <HAL_DMA_Init+0x38a>
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a30      	ldr	r2, [pc, #192]	; (8001f84 <HAL_DMA_Init+0x448>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d101      	bne.n	8001eca <HAL_DMA_Init+0x38e>
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	e000      	b.n	8001ecc <HAL_DMA_Init+0x390>
 8001eca:	2300      	movs	r3, #0
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	f000 8097 	beq.w	8002000 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4a24      	ldr	r2, [pc, #144]	; (8001f68 <HAL_DMA_Init+0x42c>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d021      	beq.n	8001f20 <HAL_DMA_Init+0x3e4>
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a22      	ldr	r2, [pc, #136]	; (8001f6c <HAL_DMA_Init+0x430>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d01c      	beq.n	8001f20 <HAL_DMA_Init+0x3e4>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4a21      	ldr	r2, [pc, #132]	; (8001f70 <HAL_DMA_Init+0x434>)
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d017      	beq.n	8001f20 <HAL_DMA_Init+0x3e4>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a1f      	ldr	r2, [pc, #124]	; (8001f74 <HAL_DMA_Init+0x438>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d012      	beq.n	8001f20 <HAL_DMA_Init+0x3e4>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4a1e      	ldr	r2, [pc, #120]	; (8001f78 <HAL_DMA_Init+0x43c>)
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d00d      	beq.n	8001f20 <HAL_DMA_Init+0x3e4>
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a1c      	ldr	r2, [pc, #112]	; (8001f7c <HAL_DMA_Init+0x440>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d008      	beq.n	8001f20 <HAL_DMA_Init+0x3e4>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4a1b      	ldr	r2, [pc, #108]	; (8001f80 <HAL_DMA_Init+0x444>)
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d003      	beq.n	8001f20 <HAL_DMA_Init+0x3e4>
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a19      	ldr	r2, [pc, #100]	; (8001f84 <HAL_DMA_Init+0x448>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2200      	movs	r2, #0
 8001f26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2202      	movs	r2, #2
 8001f2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8001f3a:	697a      	ldr	r2, [r7, #20]
 8001f3c:	4b12      	ldr	r3, [pc, #72]	; (8001f88 <HAL_DMA_Init+0x44c>)
 8001f3e:	4013      	ands	r3, r2
 8001f40:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	689b      	ldr	r3, [r3, #8]
 8001f46:	2b40      	cmp	r3, #64	; 0x40
 8001f48:	d020      	beq.n	8001f8c <HAL_DMA_Init+0x450>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	689b      	ldr	r3, [r3, #8]
 8001f4e:	2b80      	cmp	r3, #128	; 0x80
 8001f50:	d102      	bne.n	8001f58 <HAL_DMA_Init+0x41c>
 8001f52:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001f56:	e01a      	b.n	8001f8e <HAL_DMA_Init+0x452>
 8001f58:	2300      	movs	r3, #0
 8001f5a:	e018      	b.n	8001f8e <HAL_DMA_Init+0x452>
 8001f5c:	fe10803f 	.word	0xfe10803f
 8001f60:	5c001000 	.word	0x5c001000
 8001f64:	ffff0000 	.word	0xffff0000
 8001f68:	58025408 	.word	0x58025408
 8001f6c:	5802541c 	.word	0x5802541c
 8001f70:	58025430 	.word	0x58025430
 8001f74:	58025444 	.word	0x58025444
 8001f78:	58025458 	.word	0x58025458
 8001f7c:	5802546c 	.word	0x5802546c
 8001f80:	58025480 	.word	0x58025480
 8001f84:	58025494 	.word	0x58025494
 8001f88:	fffe000f 	.word	0xfffe000f
 8001f8c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001f8e:	687a      	ldr	r2, [r7, #4]
 8001f90:	68d2      	ldr	r2, [r2, #12]
 8001f92:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001f94:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	691b      	ldr	r3, [r3, #16]
 8001f9a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001f9c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	695b      	ldr	r3, [r3, #20]
 8001fa2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001fa4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	699b      	ldr	r3, [r3, #24]
 8001faa:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001fac:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	69db      	ldr	r3, [r3, #28]
 8001fb2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001fb4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6a1b      	ldr	r3, [r3, #32]
 8001fba:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001fbc:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001fbe:	697a      	ldr	r2, [r7, #20]
 8001fc0:	4313      	orrs	r3, r2
 8001fc2:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	697a      	ldr	r2, [r7, #20]
 8001fca:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	461a      	mov	r2, r3
 8001fd2:	4b6e      	ldr	r3, [pc, #440]	; (800218c <HAL_DMA_Init+0x650>)
 8001fd4:	4413      	add	r3, r2
 8001fd6:	4a6e      	ldr	r2, [pc, #440]	; (8002190 <HAL_DMA_Init+0x654>)
 8001fd8:	fba2 2303 	umull	r2, r3, r2, r3
 8001fdc:	091b      	lsrs	r3, r3, #4
 8001fde:	009a      	lsls	r2, r3, #2
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001fe4:	6878      	ldr	r0, [r7, #4]
 8001fe6:	f002 f9b3 	bl	8004350 <DMA_CalcBaseAndBitshift>
 8001fea:	4603      	mov	r3, r0
 8001fec:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ff2:	f003 031f 	and.w	r3, r3, #31
 8001ff6:	2201      	movs	r2, #1
 8001ff8:	409a      	lsls	r2, r3
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	605a      	str	r2, [r3, #4]
 8001ffe:	e008      	b.n	8002012 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2240      	movs	r2, #64	; 0x40
 8002004:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2203      	movs	r2, #3
 800200a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 800200e:	2301      	movs	r3, #1
 8002010:	e0b7      	b.n	8002182 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4a5f      	ldr	r2, [pc, #380]	; (8002194 <HAL_DMA_Init+0x658>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d072      	beq.n	8002102 <HAL_DMA_Init+0x5c6>
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a5d      	ldr	r2, [pc, #372]	; (8002198 <HAL_DMA_Init+0x65c>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d06d      	beq.n	8002102 <HAL_DMA_Init+0x5c6>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4a5c      	ldr	r2, [pc, #368]	; (800219c <HAL_DMA_Init+0x660>)
 800202c:	4293      	cmp	r3, r2
 800202e:	d068      	beq.n	8002102 <HAL_DMA_Init+0x5c6>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a5a      	ldr	r2, [pc, #360]	; (80021a0 <HAL_DMA_Init+0x664>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d063      	beq.n	8002102 <HAL_DMA_Init+0x5c6>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4a59      	ldr	r2, [pc, #356]	; (80021a4 <HAL_DMA_Init+0x668>)
 8002040:	4293      	cmp	r3, r2
 8002042:	d05e      	beq.n	8002102 <HAL_DMA_Init+0x5c6>
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a57      	ldr	r2, [pc, #348]	; (80021a8 <HAL_DMA_Init+0x66c>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d059      	beq.n	8002102 <HAL_DMA_Init+0x5c6>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4a56      	ldr	r2, [pc, #344]	; (80021ac <HAL_DMA_Init+0x670>)
 8002054:	4293      	cmp	r3, r2
 8002056:	d054      	beq.n	8002102 <HAL_DMA_Init+0x5c6>
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a54      	ldr	r2, [pc, #336]	; (80021b0 <HAL_DMA_Init+0x674>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d04f      	beq.n	8002102 <HAL_DMA_Init+0x5c6>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4a53      	ldr	r2, [pc, #332]	; (80021b4 <HAL_DMA_Init+0x678>)
 8002068:	4293      	cmp	r3, r2
 800206a:	d04a      	beq.n	8002102 <HAL_DMA_Init+0x5c6>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a51      	ldr	r2, [pc, #324]	; (80021b8 <HAL_DMA_Init+0x67c>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d045      	beq.n	8002102 <HAL_DMA_Init+0x5c6>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4a50      	ldr	r2, [pc, #320]	; (80021bc <HAL_DMA_Init+0x680>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d040      	beq.n	8002102 <HAL_DMA_Init+0x5c6>
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a4e      	ldr	r2, [pc, #312]	; (80021c0 <HAL_DMA_Init+0x684>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d03b      	beq.n	8002102 <HAL_DMA_Init+0x5c6>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4a4d      	ldr	r2, [pc, #308]	; (80021c4 <HAL_DMA_Init+0x688>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d036      	beq.n	8002102 <HAL_DMA_Init+0x5c6>
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a4b      	ldr	r2, [pc, #300]	; (80021c8 <HAL_DMA_Init+0x68c>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d031      	beq.n	8002102 <HAL_DMA_Init+0x5c6>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4a4a      	ldr	r2, [pc, #296]	; (80021cc <HAL_DMA_Init+0x690>)
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d02c      	beq.n	8002102 <HAL_DMA_Init+0x5c6>
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a48      	ldr	r2, [pc, #288]	; (80021d0 <HAL_DMA_Init+0x694>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d027      	beq.n	8002102 <HAL_DMA_Init+0x5c6>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4a47      	ldr	r2, [pc, #284]	; (80021d4 <HAL_DMA_Init+0x698>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d022      	beq.n	8002102 <HAL_DMA_Init+0x5c6>
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a45      	ldr	r2, [pc, #276]	; (80021d8 <HAL_DMA_Init+0x69c>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d01d      	beq.n	8002102 <HAL_DMA_Init+0x5c6>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4a44      	ldr	r2, [pc, #272]	; (80021dc <HAL_DMA_Init+0x6a0>)
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d018      	beq.n	8002102 <HAL_DMA_Init+0x5c6>
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a42      	ldr	r2, [pc, #264]	; (80021e0 <HAL_DMA_Init+0x6a4>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d013      	beq.n	8002102 <HAL_DMA_Init+0x5c6>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4a41      	ldr	r2, [pc, #260]	; (80021e4 <HAL_DMA_Init+0x6a8>)
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d00e      	beq.n	8002102 <HAL_DMA_Init+0x5c6>
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a3f      	ldr	r2, [pc, #252]	; (80021e8 <HAL_DMA_Init+0x6ac>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d009      	beq.n	8002102 <HAL_DMA_Init+0x5c6>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4a3e      	ldr	r2, [pc, #248]	; (80021ec <HAL_DMA_Init+0x6b0>)
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d004      	beq.n	8002102 <HAL_DMA_Init+0x5c6>
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a3c      	ldr	r2, [pc, #240]	; (80021f0 <HAL_DMA_Init+0x6b4>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d101      	bne.n	8002106 <HAL_DMA_Init+0x5ca>
 8002102:	2301      	movs	r3, #1
 8002104:	e000      	b.n	8002108 <HAL_DMA_Init+0x5cc>
 8002106:	2300      	movs	r3, #0
 8002108:	2b00      	cmp	r3, #0
 800210a:	d032      	beq.n	8002172 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800210c:	6878      	ldr	r0, [r7, #4]
 800210e:	f002 fa4d 	bl	80045ac <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	689b      	ldr	r3, [r3, #8]
 8002116:	2b80      	cmp	r3, #128	; 0x80
 8002118:	d102      	bne.n	8002120 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2200      	movs	r2, #0
 800211e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	685a      	ldr	r2, [r3, #4]
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002128:	b2d2      	uxtb	r2, r2
 800212a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002130:	687a      	ldr	r2, [r7, #4]
 8002132:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002134:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d010      	beq.n	8002160 <HAL_DMA_Init+0x624>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	2b08      	cmp	r3, #8
 8002144:	d80c      	bhi.n	8002160 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002146:	6878      	ldr	r0, [r7, #4]
 8002148:	f002 faca 	bl	80046e0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002150:	2200      	movs	r2, #0
 8002152:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002158:	687a      	ldr	r2, [r7, #4]
 800215a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800215c:	605a      	str	r2, [r3, #4]
 800215e:	e008      	b.n	8002172 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2200      	movs	r2, #0
 8002164:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2200      	movs	r2, #0
 800216a:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2200      	movs	r2, #0
 8002170:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2200      	movs	r2, #0
 8002176:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2201      	movs	r2, #1
 800217c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002180:	2300      	movs	r3, #0
}
 8002182:	4618      	mov	r0, r3
 8002184:	3718      	adds	r7, #24
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop
 800218c:	a7fdabf8 	.word	0xa7fdabf8
 8002190:	cccccccd 	.word	0xcccccccd
 8002194:	40020010 	.word	0x40020010
 8002198:	40020028 	.word	0x40020028
 800219c:	40020040 	.word	0x40020040
 80021a0:	40020058 	.word	0x40020058
 80021a4:	40020070 	.word	0x40020070
 80021a8:	40020088 	.word	0x40020088
 80021ac:	400200a0 	.word	0x400200a0
 80021b0:	400200b8 	.word	0x400200b8
 80021b4:	40020410 	.word	0x40020410
 80021b8:	40020428 	.word	0x40020428
 80021bc:	40020440 	.word	0x40020440
 80021c0:	40020458 	.word	0x40020458
 80021c4:	40020470 	.word	0x40020470
 80021c8:	40020488 	.word	0x40020488
 80021cc:	400204a0 	.word	0x400204a0
 80021d0:	400204b8 	.word	0x400204b8
 80021d4:	58025408 	.word	0x58025408
 80021d8:	5802541c 	.word	0x5802541c
 80021dc:	58025430 	.word	0x58025430
 80021e0:	58025444 	.word	0x58025444
 80021e4:	58025458 	.word	0x58025458
 80021e8:	5802546c 	.word	0x5802546c
 80021ec:	58025480 	.word	0x58025480
 80021f0:	58025494 	.word	0x58025494

080021f4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b086      	sub	sp, #24
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	60f8      	str	r0, [r7, #12]
 80021fc:	60b9      	str	r1, [r7, #8]
 80021fe:	607a      	str	r2, [r7, #4]
 8002200:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002202:	2300      	movs	r3, #0
 8002204:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d101      	bne.n	8002210 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 800220c:	2301      	movs	r3, #1
 800220e:	e226      	b.n	800265e <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002216:	2b01      	cmp	r3, #1
 8002218:	d101      	bne.n	800221e <HAL_DMA_Start_IT+0x2a>
 800221a:	2302      	movs	r3, #2
 800221c:	e21f      	b.n	800265e <HAL_DMA_Start_IT+0x46a>
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	2201      	movs	r2, #1
 8002222:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800222c:	b2db      	uxtb	r3, r3
 800222e:	2b01      	cmp	r3, #1
 8002230:	f040 820a 	bne.w	8002648 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	2202      	movs	r2, #2
 8002238:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	2200      	movs	r2, #0
 8002240:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a68      	ldr	r2, [pc, #416]	; (80023e8 <HAL_DMA_Start_IT+0x1f4>)
 8002248:	4293      	cmp	r3, r2
 800224a:	d04a      	beq.n	80022e2 <HAL_DMA_Start_IT+0xee>
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a66      	ldr	r2, [pc, #408]	; (80023ec <HAL_DMA_Start_IT+0x1f8>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d045      	beq.n	80022e2 <HAL_DMA_Start_IT+0xee>
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4a65      	ldr	r2, [pc, #404]	; (80023f0 <HAL_DMA_Start_IT+0x1fc>)
 800225c:	4293      	cmp	r3, r2
 800225e:	d040      	beq.n	80022e2 <HAL_DMA_Start_IT+0xee>
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a63      	ldr	r2, [pc, #396]	; (80023f4 <HAL_DMA_Start_IT+0x200>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d03b      	beq.n	80022e2 <HAL_DMA_Start_IT+0xee>
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4a62      	ldr	r2, [pc, #392]	; (80023f8 <HAL_DMA_Start_IT+0x204>)
 8002270:	4293      	cmp	r3, r2
 8002272:	d036      	beq.n	80022e2 <HAL_DMA_Start_IT+0xee>
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a60      	ldr	r2, [pc, #384]	; (80023fc <HAL_DMA_Start_IT+0x208>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d031      	beq.n	80022e2 <HAL_DMA_Start_IT+0xee>
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4a5f      	ldr	r2, [pc, #380]	; (8002400 <HAL_DMA_Start_IT+0x20c>)
 8002284:	4293      	cmp	r3, r2
 8002286:	d02c      	beq.n	80022e2 <HAL_DMA_Start_IT+0xee>
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a5d      	ldr	r2, [pc, #372]	; (8002404 <HAL_DMA_Start_IT+0x210>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d027      	beq.n	80022e2 <HAL_DMA_Start_IT+0xee>
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4a5c      	ldr	r2, [pc, #368]	; (8002408 <HAL_DMA_Start_IT+0x214>)
 8002298:	4293      	cmp	r3, r2
 800229a:	d022      	beq.n	80022e2 <HAL_DMA_Start_IT+0xee>
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a5a      	ldr	r2, [pc, #360]	; (800240c <HAL_DMA_Start_IT+0x218>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d01d      	beq.n	80022e2 <HAL_DMA_Start_IT+0xee>
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4a59      	ldr	r2, [pc, #356]	; (8002410 <HAL_DMA_Start_IT+0x21c>)
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d018      	beq.n	80022e2 <HAL_DMA_Start_IT+0xee>
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a57      	ldr	r2, [pc, #348]	; (8002414 <HAL_DMA_Start_IT+0x220>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d013      	beq.n	80022e2 <HAL_DMA_Start_IT+0xee>
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4a56      	ldr	r2, [pc, #344]	; (8002418 <HAL_DMA_Start_IT+0x224>)
 80022c0:	4293      	cmp	r3, r2
 80022c2:	d00e      	beq.n	80022e2 <HAL_DMA_Start_IT+0xee>
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a54      	ldr	r2, [pc, #336]	; (800241c <HAL_DMA_Start_IT+0x228>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d009      	beq.n	80022e2 <HAL_DMA_Start_IT+0xee>
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4a53      	ldr	r2, [pc, #332]	; (8002420 <HAL_DMA_Start_IT+0x22c>)
 80022d4:	4293      	cmp	r3, r2
 80022d6:	d004      	beq.n	80022e2 <HAL_DMA_Start_IT+0xee>
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a51      	ldr	r2, [pc, #324]	; (8002424 <HAL_DMA_Start_IT+0x230>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d108      	bne.n	80022f4 <HAL_DMA_Start_IT+0x100>
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	681a      	ldr	r2, [r3, #0]
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f022 0201 	bic.w	r2, r2, #1
 80022f0:	601a      	str	r2, [r3, #0]
 80022f2:	e007      	b.n	8002304 <HAL_DMA_Start_IT+0x110>
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	681a      	ldr	r2, [r3, #0]
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f022 0201 	bic.w	r2, r2, #1
 8002302:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	687a      	ldr	r2, [r7, #4]
 8002308:	68b9      	ldr	r1, [r7, #8]
 800230a:	68f8      	ldr	r0, [r7, #12]
 800230c:	f001 fe74 	bl	8003ff8 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a34      	ldr	r2, [pc, #208]	; (80023e8 <HAL_DMA_Start_IT+0x1f4>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d04a      	beq.n	80023b0 <HAL_DMA_Start_IT+0x1bc>
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4a33      	ldr	r2, [pc, #204]	; (80023ec <HAL_DMA_Start_IT+0x1f8>)
 8002320:	4293      	cmp	r3, r2
 8002322:	d045      	beq.n	80023b0 <HAL_DMA_Start_IT+0x1bc>
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a31      	ldr	r2, [pc, #196]	; (80023f0 <HAL_DMA_Start_IT+0x1fc>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d040      	beq.n	80023b0 <HAL_DMA_Start_IT+0x1bc>
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4a30      	ldr	r2, [pc, #192]	; (80023f4 <HAL_DMA_Start_IT+0x200>)
 8002334:	4293      	cmp	r3, r2
 8002336:	d03b      	beq.n	80023b0 <HAL_DMA_Start_IT+0x1bc>
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a2e      	ldr	r2, [pc, #184]	; (80023f8 <HAL_DMA_Start_IT+0x204>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d036      	beq.n	80023b0 <HAL_DMA_Start_IT+0x1bc>
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4a2d      	ldr	r2, [pc, #180]	; (80023fc <HAL_DMA_Start_IT+0x208>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d031      	beq.n	80023b0 <HAL_DMA_Start_IT+0x1bc>
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a2b      	ldr	r2, [pc, #172]	; (8002400 <HAL_DMA_Start_IT+0x20c>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d02c      	beq.n	80023b0 <HAL_DMA_Start_IT+0x1bc>
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4a2a      	ldr	r2, [pc, #168]	; (8002404 <HAL_DMA_Start_IT+0x210>)
 800235c:	4293      	cmp	r3, r2
 800235e:	d027      	beq.n	80023b0 <HAL_DMA_Start_IT+0x1bc>
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a28      	ldr	r2, [pc, #160]	; (8002408 <HAL_DMA_Start_IT+0x214>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d022      	beq.n	80023b0 <HAL_DMA_Start_IT+0x1bc>
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4a27      	ldr	r2, [pc, #156]	; (800240c <HAL_DMA_Start_IT+0x218>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d01d      	beq.n	80023b0 <HAL_DMA_Start_IT+0x1bc>
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a25      	ldr	r2, [pc, #148]	; (8002410 <HAL_DMA_Start_IT+0x21c>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d018      	beq.n	80023b0 <HAL_DMA_Start_IT+0x1bc>
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a24      	ldr	r2, [pc, #144]	; (8002414 <HAL_DMA_Start_IT+0x220>)
 8002384:	4293      	cmp	r3, r2
 8002386:	d013      	beq.n	80023b0 <HAL_DMA_Start_IT+0x1bc>
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a22      	ldr	r2, [pc, #136]	; (8002418 <HAL_DMA_Start_IT+0x224>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d00e      	beq.n	80023b0 <HAL_DMA_Start_IT+0x1bc>
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4a21      	ldr	r2, [pc, #132]	; (800241c <HAL_DMA_Start_IT+0x228>)
 8002398:	4293      	cmp	r3, r2
 800239a:	d009      	beq.n	80023b0 <HAL_DMA_Start_IT+0x1bc>
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a1f      	ldr	r2, [pc, #124]	; (8002420 <HAL_DMA_Start_IT+0x22c>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d004      	beq.n	80023b0 <HAL_DMA_Start_IT+0x1bc>
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4a1e      	ldr	r2, [pc, #120]	; (8002424 <HAL_DMA_Start_IT+0x230>)
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d101      	bne.n	80023b4 <HAL_DMA_Start_IT+0x1c0>
 80023b0:	2301      	movs	r3, #1
 80023b2:	e000      	b.n	80023b6 <HAL_DMA_Start_IT+0x1c2>
 80023b4:	2300      	movs	r3, #0
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d036      	beq.n	8002428 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f023 021e 	bic.w	r2, r3, #30
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f042 0216 	orr.w	r2, r2, #22
 80023cc:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d03e      	beq.n	8002454 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	681a      	ldr	r2, [r3, #0]
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f042 0208 	orr.w	r2, r2, #8
 80023e4:	601a      	str	r2, [r3, #0]
 80023e6:	e035      	b.n	8002454 <HAL_DMA_Start_IT+0x260>
 80023e8:	40020010 	.word	0x40020010
 80023ec:	40020028 	.word	0x40020028
 80023f0:	40020040 	.word	0x40020040
 80023f4:	40020058 	.word	0x40020058
 80023f8:	40020070 	.word	0x40020070
 80023fc:	40020088 	.word	0x40020088
 8002400:	400200a0 	.word	0x400200a0
 8002404:	400200b8 	.word	0x400200b8
 8002408:	40020410 	.word	0x40020410
 800240c:	40020428 	.word	0x40020428
 8002410:	40020440 	.word	0x40020440
 8002414:	40020458 	.word	0x40020458
 8002418:	40020470 	.word	0x40020470
 800241c:	40020488 	.word	0x40020488
 8002420:	400204a0 	.word	0x400204a0
 8002424:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f023 020e 	bic.w	r2, r3, #14
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f042 020a 	orr.w	r2, r2, #10
 800243a:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002440:	2b00      	cmp	r3, #0
 8002442:	d007      	beq.n	8002454 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	681a      	ldr	r2, [r3, #0]
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f042 0204 	orr.w	r2, r2, #4
 8002452:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a83      	ldr	r2, [pc, #524]	; (8002668 <HAL_DMA_Start_IT+0x474>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d072      	beq.n	8002544 <HAL_DMA_Start_IT+0x350>
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4a82      	ldr	r2, [pc, #520]	; (800266c <HAL_DMA_Start_IT+0x478>)
 8002464:	4293      	cmp	r3, r2
 8002466:	d06d      	beq.n	8002544 <HAL_DMA_Start_IT+0x350>
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a80      	ldr	r2, [pc, #512]	; (8002670 <HAL_DMA_Start_IT+0x47c>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d068      	beq.n	8002544 <HAL_DMA_Start_IT+0x350>
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4a7f      	ldr	r2, [pc, #508]	; (8002674 <HAL_DMA_Start_IT+0x480>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d063      	beq.n	8002544 <HAL_DMA_Start_IT+0x350>
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a7d      	ldr	r2, [pc, #500]	; (8002678 <HAL_DMA_Start_IT+0x484>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d05e      	beq.n	8002544 <HAL_DMA_Start_IT+0x350>
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a7c      	ldr	r2, [pc, #496]	; (800267c <HAL_DMA_Start_IT+0x488>)
 800248c:	4293      	cmp	r3, r2
 800248e:	d059      	beq.n	8002544 <HAL_DMA_Start_IT+0x350>
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a7a      	ldr	r2, [pc, #488]	; (8002680 <HAL_DMA_Start_IT+0x48c>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d054      	beq.n	8002544 <HAL_DMA_Start_IT+0x350>
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4a79      	ldr	r2, [pc, #484]	; (8002684 <HAL_DMA_Start_IT+0x490>)
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d04f      	beq.n	8002544 <HAL_DMA_Start_IT+0x350>
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4a77      	ldr	r2, [pc, #476]	; (8002688 <HAL_DMA_Start_IT+0x494>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d04a      	beq.n	8002544 <HAL_DMA_Start_IT+0x350>
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4a76      	ldr	r2, [pc, #472]	; (800268c <HAL_DMA_Start_IT+0x498>)
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d045      	beq.n	8002544 <HAL_DMA_Start_IT+0x350>
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a74      	ldr	r2, [pc, #464]	; (8002690 <HAL_DMA_Start_IT+0x49c>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d040      	beq.n	8002544 <HAL_DMA_Start_IT+0x350>
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4a73      	ldr	r2, [pc, #460]	; (8002694 <HAL_DMA_Start_IT+0x4a0>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d03b      	beq.n	8002544 <HAL_DMA_Start_IT+0x350>
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a71      	ldr	r2, [pc, #452]	; (8002698 <HAL_DMA_Start_IT+0x4a4>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d036      	beq.n	8002544 <HAL_DMA_Start_IT+0x350>
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4a70      	ldr	r2, [pc, #448]	; (800269c <HAL_DMA_Start_IT+0x4a8>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	d031      	beq.n	8002544 <HAL_DMA_Start_IT+0x350>
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a6e      	ldr	r2, [pc, #440]	; (80026a0 <HAL_DMA_Start_IT+0x4ac>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d02c      	beq.n	8002544 <HAL_DMA_Start_IT+0x350>
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4a6d      	ldr	r2, [pc, #436]	; (80026a4 <HAL_DMA_Start_IT+0x4b0>)
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d027      	beq.n	8002544 <HAL_DMA_Start_IT+0x350>
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a6b      	ldr	r2, [pc, #428]	; (80026a8 <HAL_DMA_Start_IT+0x4b4>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d022      	beq.n	8002544 <HAL_DMA_Start_IT+0x350>
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4a6a      	ldr	r2, [pc, #424]	; (80026ac <HAL_DMA_Start_IT+0x4b8>)
 8002504:	4293      	cmp	r3, r2
 8002506:	d01d      	beq.n	8002544 <HAL_DMA_Start_IT+0x350>
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a68      	ldr	r2, [pc, #416]	; (80026b0 <HAL_DMA_Start_IT+0x4bc>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d018      	beq.n	8002544 <HAL_DMA_Start_IT+0x350>
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4a67      	ldr	r2, [pc, #412]	; (80026b4 <HAL_DMA_Start_IT+0x4c0>)
 8002518:	4293      	cmp	r3, r2
 800251a:	d013      	beq.n	8002544 <HAL_DMA_Start_IT+0x350>
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a65      	ldr	r2, [pc, #404]	; (80026b8 <HAL_DMA_Start_IT+0x4c4>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d00e      	beq.n	8002544 <HAL_DMA_Start_IT+0x350>
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a64      	ldr	r2, [pc, #400]	; (80026bc <HAL_DMA_Start_IT+0x4c8>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d009      	beq.n	8002544 <HAL_DMA_Start_IT+0x350>
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a62      	ldr	r2, [pc, #392]	; (80026c0 <HAL_DMA_Start_IT+0x4cc>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d004      	beq.n	8002544 <HAL_DMA_Start_IT+0x350>
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4a61      	ldr	r2, [pc, #388]	; (80026c4 <HAL_DMA_Start_IT+0x4d0>)
 8002540:	4293      	cmp	r3, r2
 8002542:	d101      	bne.n	8002548 <HAL_DMA_Start_IT+0x354>
 8002544:	2301      	movs	r3, #1
 8002546:	e000      	b.n	800254a <HAL_DMA_Start_IT+0x356>
 8002548:	2300      	movs	r3, #0
 800254a:	2b00      	cmp	r3, #0
 800254c:	d01a      	beq.n	8002584 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002558:	2b00      	cmp	r3, #0
 800255a:	d007      	beq.n	800256c <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002560:	681a      	ldr	r2, [r3, #0]
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002566:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800256a:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002570:	2b00      	cmp	r3, #0
 8002572:	d007      	beq.n	8002584 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002578:	681a      	ldr	r2, [r3, #0]
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800257e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002582:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4a37      	ldr	r2, [pc, #220]	; (8002668 <HAL_DMA_Start_IT+0x474>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d04a      	beq.n	8002624 <HAL_DMA_Start_IT+0x430>
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a36      	ldr	r2, [pc, #216]	; (800266c <HAL_DMA_Start_IT+0x478>)
 8002594:	4293      	cmp	r3, r2
 8002596:	d045      	beq.n	8002624 <HAL_DMA_Start_IT+0x430>
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a34      	ldr	r2, [pc, #208]	; (8002670 <HAL_DMA_Start_IT+0x47c>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d040      	beq.n	8002624 <HAL_DMA_Start_IT+0x430>
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4a33      	ldr	r2, [pc, #204]	; (8002674 <HAL_DMA_Start_IT+0x480>)
 80025a8:	4293      	cmp	r3, r2
 80025aa:	d03b      	beq.n	8002624 <HAL_DMA_Start_IT+0x430>
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a31      	ldr	r2, [pc, #196]	; (8002678 <HAL_DMA_Start_IT+0x484>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d036      	beq.n	8002624 <HAL_DMA_Start_IT+0x430>
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4a30      	ldr	r2, [pc, #192]	; (800267c <HAL_DMA_Start_IT+0x488>)
 80025bc:	4293      	cmp	r3, r2
 80025be:	d031      	beq.n	8002624 <HAL_DMA_Start_IT+0x430>
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a2e      	ldr	r2, [pc, #184]	; (8002680 <HAL_DMA_Start_IT+0x48c>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d02c      	beq.n	8002624 <HAL_DMA_Start_IT+0x430>
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4a2d      	ldr	r2, [pc, #180]	; (8002684 <HAL_DMA_Start_IT+0x490>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d027      	beq.n	8002624 <HAL_DMA_Start_IT+0x430>
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a2b      	ldr	r2, [pc, #172]	; (8002688 <HAL_DMA_Start_IT+0x494>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d022      	beq.n	8002624 <HAL_DMA_Start_IT+0x430>
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4a2a      	ldr	r2, [pc, #168]	; (800268c <HAL_DMA_Start_IT+0x498>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d01d      	beq.n	8002624 <HAL_DMA_Start_IT+0x430>
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a28      	ldr	r2, [pc, #160]	; (8002690 <HAL_DMA_Start_IT+0x49c>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d018      	beq.n	8002624 <HAL_DMA_Start_IT+0x430>
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4a27      	ldr	r2, [pc, #156]	; (8002694 <HAL_DMA_Start_IT+0x4a0>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d013      	beq.n	8002624 <HAL_DMA_Start_IT+0x430>
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a25      	ldr	r2, [pc, #148]	; (8002698 <HAL_DMA_Start_IT+0x4a4>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d00e      	beq.n	8002624 <HAL_DMA_Start_IT+0x430>
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4a24      	ldr	r2, [pc, #144]	; (800269c <HAL_DMA_Start_IT+0x4a8>)
 800260c:	4293      	cmp	r3, r2
 800260e:	d009      	beq.n	8002624 <HAL_DMA_Start_IT+0x430>
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a22      	ldr	r2, [pc, #136]	; (80026a0 <HAL_DMA_Start_IT+0x4ac>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d004      	beq.n	8002624 <HAL_DMA_Start_IT+0x430>
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4a21      	ldr	r2, [pc, #132]	; (80026a4 <HAL_DMA_Start_IT+0x4b0>)
 8002620:	4293      	cmp	r3, r2
 8002622:	d108      	bne.n	8002636 <HAL_DMA_Start_IT+0x442>
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	681a      	ldr	r2, [r3, #0]
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f042 0201 	orr.w	r2, r2, #1
 8002632:	601a      	str	r2, [r3, #0]
 8002634:	e012      	b.n	800265c <HAL_DMA_Start_IT+0x468>
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	681a      	ldr	r2, [r3, #0]
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f042 0201 	orr.w	r2, r2, #1
 8002644:	601a      	str	r2, [r3, #0]
 8002646:	e009      	b.n	800265c <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	2200      	movs	r2, #0
 800264c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002656:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 8002658:	2301      	movs	r3, #1
 800265a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800265c:	7dfb      	ldrb	r3, [r7, #23]
}
 800265e:	4618      	mov	r0, r3
 8002660:	3718      	adds	r7, #24
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}
 8002666:	bf00      	nop
 8002668:	40020010 	.word	0x40020010
 800266c:	40020028 	.word	0x40020028
 8002670:	40020040 	.word	0x40020040
 8002674:	40020058 	.word	0x40020058
 8002678:	40020070 	.word	0x40020070
 800267c:	40020088 	.word	0x40020088
 8002680:	400200a0 	.word	0x400200a0
 8002684:	400200b8 	.word	0x400200b8
 8002688:	40020410 	.word	0x40020410
 800268c:	40020428 	.word	0x40020428
 8002690:	40020440 	.word	0x40020440
 8002694:	40020458 	.word	0x40020458
 8002698:	40020470 	.word	0x40020470
 800269c:	40020488 	.word	0x40020488
 80026a0:	400204a0 	.word	0x400204a0
 80026a4:	400204b8 	.word	0x400204b8
 80026a8:	58025408 	.word	0x58025408
 80026ac:	5802541c 	.word	0x5802541c
 80026b0:	58025430 	.word	0x58025430
 80026b4:	58025444 	.word	0x58025444
 80026b8:	58025458 	.word	0x58025458
 80026bc:	5802546c 	.word	0x5802546c
 80026c0:	58025480 	.word	0x58025480
 80026c4:	58025494 	.word	0x58025494

080026c8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b086      	sub	sp, #24
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80026d0:	f7fe fffe 	bl	80016d0 <HAL_GetTick>
 80026d4:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d101      	bne.n	80026e0 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80026dc:	2301      	movs	r3, #1
 80026de:	e2dc      	b.n	8002c9a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80026e6:	b2db      	uxtb	r3, r3
 80026e8:	2b02      	cmp	r3, #2
 80026ea:	d008      	beq.n	80026fe <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2280      	movs	r2, #128	; 0x80
 80026f0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2200      	movs	r2, #0
 80026f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 80026fa:	2301      	movs	r3, #1
 80026fc:	e2cd      	b.n	8002c9a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4a76      	ldr	r2, [pc, #472]	; (80028dc <HAL_DMA_Abort+0x214>)
 8002704:	4293      	cmp	r3, r2
 8002706:	d04a      	beq.n	800279e <HAL_DMA_Abort+0xd6>
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a74      	ldr	r2, [pc, #464]	; (80028e0 <HAL_DMA_Abort+0x218>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d045      	beq.n	800279e <HAL_DMA_Abort+0xd6>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4a73      	ldr	r2, [pc, #460]	; (80028e4 <HAL_DMA_Abort+0x21c>)
 8002718:	4293      	cmp	r3, r2
 800271a:	d040      	beq.n	800279e <HAL_DMA_Abort+0xd6>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a71      	ldr	r2, [pc, #452]	; (80028e8 <HAL_DMA_Abort+0x220>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d03b      	beq.n	800279e <HAL_DMA_Abort+0xd6>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4a70      	ldr	r2, [pc, #448]	; (80028ec <HAL_DMA_Abort+0x224>)
 800272c:	4293      	cmp	r3, r2
 800272e:	d036      	beq.n	800279e <HAL_DMA_Abort+0xd6>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a6e      	ldr	r2, [pc, #440]	; (80028f0 <HAL_DMA_Abort+0x228>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d031      	beq.n	800279e <HAL_DMA_Abort+0xd6>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4a6d      	ldr	r2, [pc, #436]	; (80028f4 <HAL_DMA_Abort+0x22c>)
 8002740:	4293      	cmp	r3, r2
 8002742:	d02c      	beq.n	800279e <HAL_DMA_Abort+0xd6>
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a6b      	ldr	r2, [pc, #428]	; (80028f8 <HAL_DMA_Abort+0x230>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d027      	beq.n	800279e <HAL_DMA_Abort+0xd6>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4a6a      	ldr	r2, [pc, #424]	; (80028fc <HAL_DMA_Abort+0x234>)
 8002754:	4293      	cmp	r3, r2
 8002756:	d022      	beq.n	800279e <HAL_DMA_Abort+0xd6>
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a68      	ldr	r2, [pc, #416]	; (8002900 <HAL_DMA_Abort+0x238>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d01d      	beq.n	800279e <HAL_DMA_Abort+0xd6>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4a67      	ldr	r2, [pc, #412]	; (8002904 <HAL_DMA_Abort+0x23c>)
 8002768:	4293      	cmp	r3, r2
 800276a:	d018      	beq.n	800279e <HAL_DMA_Abort+0xd6>
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a65      	ldr	r2, [pc, #404]	; (8002908 <HAL_DMA_Abort+0x240>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d013      	beq.n	800279e <HAL_DMA_Abort+0xd6>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a64      	ldr	r2, [pc, #400]	; (800290c <HAL_DMA_Abort+0x244>)
 800277c:	4293      	cmp	r3, r2
 800277e:	d00e      	beq.n	800279e <HAL_DMA_Abort+0xd6>
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a62      	ldr	r2, [pc, #392]	; (8002910 <HAL_DMA_Abort+0x248>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d009      	beq.n	800279e <HAL_DMA_Abort+0xd6>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4a61      	ldr	r2, [pc, #388]	; (8002914 <HAL_DMA_Abort+0x24c>)
 8002790:	4293      	cmp	r3, r2
 8002792:	d004      	beq.n	800279e <HAL_DMA_Abort+0xd6>
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a5f      	ldr	r2, [pc, #380]	; (8002918 <HAL_DMA_Abort+0x250>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d101      	bne.n	80027a2 <HAL_DMA_Abort+0xda>
 800279e:	2301      	movs	r3, #1
 80027a0:	e000      	b.n	80027a4 <HAL_DMA_Abort+0xdc>
 80027a2:	2300      	movs	r3, #0
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d013      	beq.n	80027d0 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	681a      	ldr	r2, [r3, #0]
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f022 021e 	bic.w	r2, r2, #30
 80027b6:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	695a      	ldr	r2, [r3, #20]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80027c6:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	617b      	str	r3, [r7, #20]
 80027ce:	e00a      	b.n	80027e6 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	681a      	ldr	r2, [r3, #0]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f022 020e 	bic.w	r2, r2, #14
 80027de:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4a3c      	ldr	r2, [pc, #240]	; (80028dc <HAL_DMA_Abort+0x214>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d072      	beq.n	80028d6 <HAL_DMA_Abort+0x20e>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a3a      	ldr	r2, [pc, #232]	; (80028e0 <HAL_DMA_Abort+0x218>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d06d      	beq.n	80028d6 <HAL_DMA_Abort+0x20e>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4a39      	ldr	r2, [pc, #228]	; (80028e4 <HAL_DMA_Abort+0x21c>)
 8002800:	4293      	cmp	r3, r2
 8002802:	d068      	beq.n	80028d6 <HAL_DMA_Abort+0x20e>
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a37      	ldr	r2, [pc, #220]	; (80028e8 <HAL_DMA_Abort+0x220>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d063      	beq.n	80028d6 <HAL_DMA_Abort+0x20e>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4a36      	ldr	r2, [pc, #216]	; (80028ec <HAL_DMA_Abort+0x224>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d05e      	beq.n	80028d6 <HAL_DMA_Abort+0x20e>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a34      	ldr	r2, [pc, #208]	; (80028f0 <HAL_DMA_Abort+0x228>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d059      	beq.n	80028d6 <HAL_DMA_Abort+0x20e>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a33      	ldr	r2, [pc, #204]	; (80028f4 <HAL_DMA_Abort+0x22c>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d054      	beq.n	80028d6 <HAL_DMA_Abort+0x20e>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a31      	ldr	r2, [pc, #196]	; (80028f8 <HAL_DMA_Abort+0x230>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d04f      	beq.n	80028d6 <HAL_DMA_Abort+0x20e>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a30      	ldr	r2, [pc, #192]	; (80028fc <HAL_DMA_Abort+0x234>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d04a      	beq.n	80028d6 <HAL_DMA_Abort+0x20e>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a2e      	ldr	r2, [pc, #184]	; (8002900 <HAL_DMA_Abort+0x238>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d045      	beq.n	80028d6 <HAL_DMA_Abort+0x20e>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a2d      	ldr	r2, [pc, #180]	; (8002904 <HAL_DMA_Abort+0x23c>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d040      	beq.n	80028d6 <HAL_DMA_Abort+0x20e>
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a2b      	ldr	r2, [pc, #172]	; (8002908 <HAL_DMA_Abort+0x240>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d03b      	beq.n	80028d6 <HAL_DMA_Abort+0x20e>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a2a      	ldr	r2, [pc, #168]	; (800290c <HAL_DMA_Abort+0x244>)
 8002864:	4293      	cmp	r3, r2
 8002866:	d036      	beq.n	80028d6 <HAL_DMA_Abort+0x20e>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a28      	ldr	r2, [pc, #160]	; (8002910 <HAL_DMA_Abort+0x248>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d031      	beq.n	80028d6 <HAL_DMA_Abort+0x20e>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a27      	ldr	r2, [pc, #156]	; (8002914 <HAL_DMA_Abort+0x24c>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d02c      	beq.n	80028d6 <HAL_DMA_Abort+0x20e>
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a25      	ldr	r2, [pc, #148]	; (8002918 <HAL_DMA_Abort+0x250>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d027      	beq.n	80028d6 <HAL_DMA_Abort+0x20e>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4a24      	ldr	r2, [pc, #144]	; (800291c <HAL_DMA_Abort+0x254>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d022      	beq.n	80028d6 <HAL_DMA_Abort+0x20e>
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a22      	ldr	r2, [pc, #136]	; (8002920 <HAL_DMA_Abort+0x258>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d01d      	beq.n	80028d6 <HAL_DMA_Abort+0x20e>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4a21      	ldr	r2, [pc, #132]	; (8002924 <HAL_DMA_Abort+0x25c>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d018      	beq.n	80028d6 <HAL_DMA_Abort+0x20e>
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a1f      	ldr	r2, [pc, #124]	; (8002928 <HAL_DMA_Abort+0x260>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d013      	beq.n	80028d6 <HAL_DMA_Abort+0x20e>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4a1e      	ldr	r2, [pc, #120]	; (800292c <HAL_DMA_Abort+0x264>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d00e      	beq.n	80028d6 <HAL_DMA_Abort+0x20e>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a1c      	ldr	r2, [pc, #112]	; (8002930 <HAL_DMA_Abort+0x268>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d009      	beq.n	80028d6 <HAL_DMA_Abort+0x20e>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4a1b      	ldr	r2, [pc, #108]	; (8002934 <HAL_DMA_Abort+0x26c>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d004      	beq.n	80028d6 <HAL_DMA_Abort+0x20e>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a19      	ldr	r2, [pc, #100]	; (8002938 <HAL_DMA_Abort+0x270>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d132      	bne.n	800293c <HAL_DMA_Abort+0x274>
 80028d6:	2301      	movs	r3, #1
 80028d8:	e031      	b.n	800293e <HAL_DMA_Abort+0x276>
 80028da:	bf00      	nop
 80028dc:	40020010 	.word	0x40020010
 80028e0:	40020028 	.word	0x40020028
 80028e4:	40020040 	.word	0x40020040
 80028e8:	40020058 	.word	0x40020058
 80028ec:	40020070 	.word	0x40020070
 80028f0:	40020088 	.word	0x40020088
 80028f4:	400200a0 	.word	0x400200a0
 80028f8:	400200b8 	.word	0x400200b8
 80028fc:	40020410 	.word	0x40020410
 8002900:	40020428 	.word	0x40020428
 8002904:	40020440 	.word	0x40020440
 8002908:	40020458 	.word	0x40020458
 800290c:	40020470 	.word	0x40020470
 8002910:	40020488 	.word	0x40020488
 8002914:	400204a0 	.word	0x400204a0
 8002918:	400204b8 	.word	0x400204b8
 800291c:	58025408 	.word	0x58025408
 8002920:	5802541c 	.word	0x5802541c
 8002924:	58025430 	.word	0x58025430
 8002928:	58025444 	.word	0x58025444
 800292c:	58025458 	.word	0x58025458
 8002930:	5802546c 	.word	0x5802546c
 8002934:	58025480 	.word	0x58025480
 8002938:	58025494 	.word	0x58025494
 800293c:	2300      	movs	r3, #0
 800293e:	2b00      	cmp	r3, #0
 8002940:	d007      	beq.n	8002952 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002946:	681a      	ldr	r2, [r3, #0]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800294c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002950:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4a6d      	ldr	r2, [pc, #436]	; (8002b0c <HAL_DMA_Abort+0x444>)
 8002958:	4293      	cmp	r3, r2
 800295a:	d04a      	beq.n	80029f2 <HAL_DMA_Abort+0x32a>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a6b      	ldr	r2, [pc, #428]	; (8002b10 <HAL_DMA_Abort+0x448>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d045      	beq.n	80029f2 <HAL_DMA_Abort+0x32a>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4a6a      	ldr	r2, [pc, #424]	; (8002b14 <HAL_DMA_Abort+0x44c>)
 800296c:	4293      	cmp	r3, r2
 800296e:	d040      	beq.n	80029f2 <HAL_DMA_Abort+0x32a>
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a68      	ldr	r2, [pc, #416]	; (8002b18 <HAL_DMA_Abort+0x450>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d03b      	beq.n	80029f2 <HAL_DMA_Abort+0x32a>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4a67      	ldr	r2, [pc, #412]	; (8002b1c <HAL_DMA_Abort+0x454>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d036      	beq.n	80029f2 <HAL_DMA_Abort+0x32a>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a65      	ldr	r2, [pc, #404]	; (8002b20 <HAL_DMA_Abort+0x458>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d031      	beq.n	80029f2 <HAL_DMA_Abort+0x32a>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4a64      	ldr	r2, [pc, #400]	; (8002b24 <HAL_DMA_Abort+0x45c>)
 8002994:	4293      	cmp	r3, r2
 8002996:	d02c      	beq.n	80029f2 <HAL_DMA_Abort+0x32a>
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a62      	ldr	r2, [pc, #392]	; (8002b28 <HAL_DMA_Abort+0x460>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d027      	beq.n	80029f2 <HAL_DMA_Abort+0x32a>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4a61      	ldr	r2, [pc, #388]	; (8002b2c <HAL_DMA_Abort+0x464>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d022      	beq.n	80029f2 <HAL_DMA_Abort+0x32a>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a5f      	ldr	r2, [pc, #380]	; (8002b30 <HAL_DMA_Abort+0x468>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d01d      	beq.n	80029f2 <HAL_DMA_Abort+0x32a>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a5e      	ldr	r2, [pc, #376]	; (8002b34 <HAL_DMA_Abort+0x46c>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d018      	beq.n	80029f2 <HAL_DMA_Abort+0x32a>
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a5c      	ldr	r2, [pc, #368]	; (8002b38 <HAL_DMA_Abort+0x470>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d013      	beq.n	80029f2 <HAL_DMA_Abort+0x32a>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4a5b      	ldr	r2, [pc, #364]	; (8002b3c <HAL_DMA_Abort+0x474>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d00e      	beq.n	80029f2 <HAL_DMA_Abort+0x32a>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a59      	ldr	r2, [pc, #356]	; (8002b40 <HAL_DMA_Abort+0x478>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d009      	beq.n	80029f2 <HAL_DMA_Abort+0x32a>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4a58      	ldr	r2, [pc, #352]	; (8002b44 <HAL_DMA_Abort+0x47c>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d004      	beq.n	80029f2 <HAL_DMA_Abort+0x32a>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a56      	ldr	r2, [pc, #344]	; (8002b48 <HAL_DMA_Abort+0x480>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d108      	bne.n	8002a04 <HAL_DMA_Abort+0x33c>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	681a      	ldr	r2, [r3, #0]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f022 0201 	bic.w	r2, r2, #1
 8002a00:	601a      	str	r2, [r3, #0]
 8002a02:	e007      	b.n	8002a14 <HAL_DMA_Abort+0x34c>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	681a      	ldr	r2, [r3, #0]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f022 0201 	bic.w	r2, r2, #1
 8002a12:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002a14:	e013      	b.n	8002a3e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002a16:	f7fe fe5b 	bl	80016d0 <HAL_GetTick>
 8002a1a:	4602      	mov	r2, r0
 8002a1c:	693b      	ldr	r3, [r7, #16]
 8002a1e:	1ad3      	subs	r3, r2, r3
 8002a20:	2b05      	cmp	r3, #5
 8002a22:	d90c      	bls.n	8002a3e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2220      	movs	r2, #32
 8002a28:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2203      	movs	r2, #3
 8002a36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	e12d      	b.n	8002c9a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002a3e:	697b      	ldr	r3, [r7, #20]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f003 0301 	and.w	r3, r3, #1
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d1e5      	bne.n	8002a16 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4a2f      	ldr	r2, [pc, #188]	; (8002b0c <HAL_DMA_Abort+0x444>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d04a      	beq.n	8002aea <HAL_DMA_Abort+0x422>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a2d      	ldr	r2, [pc, #180]	; (8002b10 <HAL_DMA_Abort+0x448>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d045      	beq.n	8002aea <HAL_DMA_Abort+0x422>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a2c      	ldr	r2, [pc, #176]	; (8002b14 <HAL_DMA_Abort+0x44c>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d040      	beq.n	8002aea <HAL_DMA_Abort+0x422>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a2a      	ldr	r2, [pc, #168]	; (8002b18 <HAL_DMA_Abort+0x450>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d03b      	beq.n	8002aea <HAL_DMA_Abort+0x422>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4a29      	ldr	r2, [pc, #164]	; (8002b1c <HAL_DMA_Abort+0x454>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d036      	beq.n	8002aea <HAL_DMA_Abort+0x422>
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a27      	ldr	r2, [pc, #156]	; (8002b20 <HAL_DMA_Abort+0x458>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d031      	beq.n	8002aea <HAL_DMA_Abort+0x422>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a26      	ldr	r2, [pc, #152]	; (8002b24 <HAL_DMA_Abort+0x45c>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d02c      	beq.n	8002aea <HAL_DMA_Abort+0x422>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a24      	ldr	r2, [pc, #144]	; (8002b28 <HAL_DMA_Abort+0x460>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d027      	beq.n	8002aea <HAL_DMA_Abort+0x422>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a23      	ldr	r2, [pc, #140]	; (8002b2c <HAL_DMA_Abort+0x464>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d022      	beq.n	8002aea <HAL_DMA_Abort+0x422>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a21      	ldr	r2, [pc, #132]	; (8002b30 <HAL_DMA_Abort+0x468>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d01d      	beq.n	8002aea <HAL_DMA_Abort+0x422>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a20      	ldr	r2, [pc, #128]	; (8002b34 <HAL_DMA_Abort+0x46c>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d018      	beq.n	8002aea <HAL_DMA_Abort+0x422>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a1e      	ldr	r2, [pc, #120]	; (8002b38 <HAL_DMA_Abort+0x470>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d013      	beq.n	8002aea <HAL_DMA_Abort+0x422>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a1d      	ldr	r2, [pc, #116]	; (8002b3c <HAL_DMA_Abort+0x474>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d00e      	beq.n	8002aea <HAL_DMA_Abort+0x422>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a1b      	ldr	r2, [pc, #108]	; (8002b40 <HAL_DMA_Abort+0x478>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d009      	beq.n	8002aea <HAL_DMA_Abort+0x422>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a1a      	ldr	r2, [pc, #104]	; (8002b44 <HAL_DMA_Abort+0x47c>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d004      	beq.n	8002aea <HAL_DMA_Abort+0x422>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a18      	ldr	r2, [pc, #96]	; (8002b48 <HAL_DMA_Abort+0x480>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d101      	bne.n	8002aee <HAL_DMA_Abort+0x426>
 8002aea:	2301      	movs	r3, #1
 8002aec:	e000      	b.n	8002af0 <HAL_DMA_Abort+0x428>
 8002aee:	2300      	movs	r3, #0
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d02b      	beq.n	8002b4c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002af8:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002afe:	f003 031f 	and.w	r3, r3, #31
 8002b02:	223f      	movs	r2, #63	; 0x3f
 8002b04:	409a      	lsls	r2, r3
 8002b06:	68bb      	ldr	r3, [r7, #8]
 8002b08:	609a      	str	r2, [r3, #8]
 8002b0a:	e02a      	b.n	8002b62 <HAL_DMA_Abort+0x49a>
 8002b0c:	40020010 	.word	0x40020010
 8002b10:	40020028 	.word	0x40020028
 8002b14:	40020040 	.word	0x40020040
 8002b18:	40020058 	.word	0x40020058
 8002b1c:	40020070 	.word	0x40020070
 8002b20:	40020088 	.word	0x40020088
 8002b24:	400200a0 	.word	0x400200a0
 8002b28:	400200b8 	.word	0x400200b8
 8002b2c:	40020410 	.word	0x40020410
 8002b30:	40020428 	.word	0x40020428
 8002b34:	40020440 	.word	0x40020440
 8002b38:	40020458 	.word	0x40020458
 8002b3c:	40020470 	.word	0x40020470
 8002b40:	40020488 	.word	0x40020488
 8002b44:	400204a0 	.word	0x400204a0
 8002b48:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b50:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b56:	f003 031f 	and.w	r3, r3, #31
 8002b5a:	2201      	movs	r2, #1
 8002b5c:	409a      	lsls	r2, r3
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4a4f      	ldr	r2, [pc, #316]	; (8002ca4 <HAL_DMA_Abort+0x5dc>)
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d072      	beq.n	8002c52 <HAL_DMA_Abort+0x58a>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a4d      	ldr	r2, [pc, #308]	; (8002ca8 <HAL_DMA_Abort+0x5e0>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d06d      	beq.n	8002c52 <HAL_DMA_Abort+0x58a>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4a4c      	ldr	r2, [pc, #304]	; (8002cac <HAL_DMA_Abort+0x5e4>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d068      	beq.n	8002c52 <HAL_DMA_Abort+0x58a>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a4a      	ldr	r2, [pc, #296]	; (8002cb0 <HAL_DMA_Abort+0x5e8>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d063      	beq.n	8002c52 <HAL_DMA_Abort+0x58a>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4a49      	ldr	r2, [pc, #292]	; (8002cb4 <HAL_DMA_Abort+0x5ec>)
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d05e      	beq.n	8002c52 <HAL_DMA_Abort+0x58a>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a47      	ldr	r2, [pc, #284]	; (8002cb8 <HAL_DMA_Abort+0x5f0>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d059      	beq.n	8002c52 <HAL_DMA_Abort+0x58a>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4a46      	ldr	r2, [pc, #280]	; (8002cbc <HAL_DMA_Abort+0x5f4>)
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d054      	beq.n	8002c52 <HAL_DMA_Abort+0x58a>
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a44      	ldr	r2, [pc, #272]	; (8002cc0 <HAL_DMA_Abort+0x5f8>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d04f      	beq.n	8002c52 <HAL_DMA_Abort+0x58a>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4a43      	ldr	r2, [pc, #268]	; (8002cc4 <HAL_DMA_Abort+0x5fc>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d04a      	beq.n	8002c52 <HAL_DMA_Abort+0x58a>
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a41      	ldr	r2, [pc, #260]	; (8002cc8 <HAL_DMA_Abort+0x600>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d045      	beq.n	8002c52 <HAL_DMA_Abort+0x58a>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4a40      	ldr	r2, [pc, #256]	; (8002ccc <HAL_DMA_Abort+0x604>)
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d040      	beq.n	8002c52 <HAL_DMA_Abort+0x58a>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a3e      	ldr	r2, [pc, #248]	; (8002cd0 <HAL_DMA_Abort+0x608>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d03b      	beq.n	8002c52 <HAL_DMA_Abort+0x58a>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4a3d      	ldr	r2, [pc, #244]	; (8002cd4 <HAL_DMA_Abort+0x60c>)
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d036      	beq.n	8002c52 <HAL_DMA_Abort+0x58a>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a3b      	ldr	r2, [pc, #236]	; (8002cd8 <HAL_DMA_Abort+0x610>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d031      	beq.n	8002c52 <HAL_DMA_Abort+0x58a>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4a3a      	ldr	r2, [pc, #232]	; (8002cdc <HAL_DMA_Abort+0x614>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d02c      	beq.n	8002c52 <HAL_DMA_Abort+0x58a>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a38      	ldr	r2, [pc, #224]	; (8002ce0 <HAL_DMA_Abort+0x618>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d027      	beq.n	8002c52 <HAL_DMA_Abort+0x58a>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4a37      	ldr	r2, [pc, #220]	; (8002ce4 <HAL_DMA_Abort+0x61c>)
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d022      	beq.n	8002c52 <HAL_DMA_Abort+0x58a>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a35      	ldr	r2, [pc, #212]	; (8002ce8 <HAL_DMA_Abort+0x620>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d01d      	beq.n	8002c52 <HAL_DMA_Abort+0x58a>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4a34      	ldr	r2, [pc, #208]	; (8002cec <HAL_DMA_Abort+0x624>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d018      	beq.n	8002c52 <HAL_DMA_Abort+0x58a>
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a32      	ldr	r2, [pc, #200]	; (8002cf0 <HAL_DMA_Abort+0x628>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d013      	beq.n	8002c52 <HAL_DMA_Abort+0x58a>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a31      	ldr	r2, [pc, #196]	; (8002cf4 <HAL_DMA_Abort+0x62c>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d00e      	beq.n	8002c52 <HAL_DMA_Abort+0x58a>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a2f      	ldr	r2, [pc, #188]	; (8002cf8 <HAL_DMA_Abort+0x630>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d009      	beq.n	8002c52 <HAL_DMA_Abort+0x58a>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4a2e      	ldr	r2, [pc, #184]	; (8002cfc <HAL_DMA_Abort+0x634>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d004      	beq.n	8002c52 <HAL_DMA_Abort+0x58a>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a2c      	ldr	r2, [pc, #176]	; (8002d00 <HAL_DMA_Abort+0x638>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d101      	bne.n	8002c56 <HAL_DMA_Abort+0x58e>
 8002c52:	2301      	movs	r3, #1
 8002c54:	e000      	b.n	8002c58 <HAL_DMA_Abort+0x590>
 8002c56:	2300      	movs	r3, #0
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d015      	beq.n	8002c88 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002c60:	687a      	ldr	r2, [r7, #4]
 8002c62:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002c64:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d00c      	beq.n	8002c88 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c72:	681a      	ldr	r2, [r3, #0]
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c78:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002c7c:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c82:	687a      	ldr	r2, [r7, #4]
 8002c84:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002c86:	605a      	str	r2, [r3, #4]
      }
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2201      	movs	r2, #1
 8002c94:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }

  return HAL_OK;
 8002c98:	2300      	movs	r3, #0
}
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	3718      	adds	r7, #24
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}
 8002ca2:	bf00      	nop
 8002ca4:	40020010 	.word	0x40020010
 8002ca8:	40020028 	.word	0x40020028
 8002cac:	40020040 	.word	0x40020040
 8002cb0:	40020058 	.word	0x40020058
 8002cb4:	40020070 	.word	0x40020070
 8002cb8:	40020088 	.word	0x40020088
 8002cbc:	400200a0 	.word	0x400200a0
 8002cc0:	400200b8 	.word	0x400200b8
 8002cc4:	40020410 	.word	0x40020410
 8002cc8:	40020428 	.word	0x40020428
 8002ccc:	40020440 	.word	0x40020440
 8002cd0:	40020458 	.word	0x40020458
 8002cd4:	40020470 	.word	0x40020470
 8002cd8:	40020488 	.word	0x40020488
 8002cdc:	400204a0 	.word	0x400204a0
 8002ce0:	400204b8 	.word	0x400204b8
 8002ce4:	58025408 	.word	0x58025408
 8002ce8:	5802541c 	.word	0x5802541c
 8002cec:	58025430 	.word	0x58025430
 8002cf0:	58025444 	.word	0x58025444
 8002cf4:	58025458 	.word	0x58025458
 8002cf8:	5802546c 	.word	0x5802546c
 8002cfc:	58025480 	.word	0x58025480
 8002d00:	58025494 	.word	0x58025494

08002d04 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b084      	sub	sp, #16
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d101      	bne.n	8002d16 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8002d12:	2301      	movs	r3, #1
 8002d14:	e205      	b.n	8003122 <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d1c:	b2db      	uxtb	r3, r3
 8002d1e:	2b02      	cmp	r3, #2
 8002d20:	d004      	beq.n	8002d2c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2280      	movs	r2, #128	; 0x80
 8002d26:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	e1fa      	b.n	8003122 <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a8c      	ldr	r2, [pc, #560]	; (8002f64 <HAL_DMA_Abort_IT+0x260>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d04a      	beq.n	8002dcc <HAL_DMA_Abort_IT+0xc8>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4a8b      	ldr	r2, [pc, #556]	; (8002f68 <HAL_DMA_Abort_IT+0x264>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d045      	beq.n	8002dcc <HAL_DMA_Abort_IT+0xc8>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a89      	ldr	r2, [pc, #548]	; (8002f6c <HAL_DMA_Abort_IT+0x268>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d040      	beq.n	8002dcc <HAL_DMA_Abort_IT+0xc8>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a88      	ldr	r2, [pc, #544]	; (8002f70 <HAL_DMA_Abort_IT+0x26c>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d03b      	beq.n	8002dcc <HAL_DMA_Abort_IT+0xc8>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a86      	ldr	r2, [pc, #536]	; (8002f74 <HAL_DMA_Abort_IT+0x270>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d036      	beq.n	8002dcc <HAL_DMA_Abort_IT+0xc8>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4a85      	ldr	r2, [pc, #532]	; (8002f78 <HAL_DMA_Abort_IT+0x274>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d031      	beq.n	8002dcc <HAL_DMA_Abort_IT+0xc8>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a83      	ldr	r2, [pc, #524]	; (8002f7c <HAL_DMA_Abort_IT+0x278>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d02c      	beq.n	8002dcc <HAL_DMA_Abort_IT+0xc8>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4a82      	ldr	r2, [pc, #520]	; (8002f80 <HAL_DMA_Abort_IT+0x27c>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d027      	beq.n	8002dcc <HAL_DMA_Abort_IT+0xc8>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a80      	ldr	r2, [pc, #512]	; (8002f84 <HAL_DMA_Abort_IT+0x280>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d022      	beq.n	8002dcc <HAL_DMA_Abort_IT+0xc8>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4a7f      	ldr	r2, [pc, #508]	; (8002f88 <HAL_DMA_Abort_IT+0x284>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d01d      	beq.n	8002dcc <HAL_DMA_Abort_IT+0xc8>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a7d      	ldr	r2, [pc, #500]	; (8002f8c <HAL_DMA_Abort_IT+0x288>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d018      	beq.n	8002dcc <HAL_DMA_Abort_IT+0xc8>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4a7c      	ldr	r2, [pc, #496]	; (8002f90 <HAL_DMA_Abort_IT+0x28c>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d013      	beq.n	8002dcc <HAL_DMA_Abort_IT+0xc8>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a7a      	ldr	r2, [pc, #488]	; (8002f94 <HAL_DMA_Abort_IT+0x290>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d00e      	beq.n	8002dcc <HAL_DMA_Abort_IT+0xc8>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4a79      	ldr	r2, [pc, #484]	; (8002f98 <HAL_DMA_Abort_IT+0x294>)
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d009      	beq.n	8002dcc <HAL_DMA_Abort_IT+0xc8>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a77      	ldr	r2, [pc, #476]	; (8002f9c <HAL_DMA_Abort_IT+0x298>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d004      	beq.n	8002dcc <HAL_DMA_Abort_IT+0xc8>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4a76      	ldr	r2, [pc, #472]	; (8002fa0 <HAL_DMA_Abort_IT+0x29c>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d101      	bne.n	8002dd0 <HAL_DMA_Abort_IT+0xcc>
 8002dcc:	2301      	movs	r3, #1
 8002dce:	e000      	b.n	8002dd2 <HAL_DMA_Abort_IT+0xce>
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d065      	beq.n	8002ea2 <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2204      	movs	r2, #4
 8002dda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a60      	ldr	r2, [pc, #384]	; (8002f64 <HAL_DMA_Abort_IT+0x260>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d04a      	beq.n	8002e7e <HAL_DMA_Abort_IT+0x17a>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4a5e      	ldr	r2, [pc, #376]	; (8002f68 <HAL_DMA_Abort_IT+0x264>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d045      	beq.n	8002e7e <HAL_DMA_Abort_IT+0x17a>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4a5d      	ldr	r2, [pc, #372]	; (8002f6c <HAL_DMA_Abort_IT+0x268>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d040      	beq.n	8002e7e <HAL_DMA_Abort_IT+0x17a>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a5b      	ldr	r2, [pc, #364]	; (8002f70 <HAL_DMA_Abort_IT+0x26c>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d03b      	beq.n	8002e7e <HAL_DMA_Abort_IT+0x17a>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4a5a      	ldr	r2, [pc, #360]	; (8002f74 <HAL_DMA_Abort_IT+0x270>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d036      	beq.n	8002e7e <HAL_DMA_Abort_IT+0x17a>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a58      	ldr	r2, [pc, #352]	; (8002f78 <HAL_DMA_Abort_IT+0x274>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d031      	beq.n	8002e7e <HAL_DMA_Abort_IT+0x17a>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4a57      	ldr	r2, [pc, #348]	; (8002f7c <HAL_DMA_Abort_IT+0x278>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d02c      	beq.n	8002e7e <HAL_DMA_Abort_IT+0x17a>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a55      	ldr	r2, [pc, #340]	; (8002f80 <HAL_DMA_Abort_IT+0x27c>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d027      	beq.n	8002e7e <HAL_DMA_Abort_IT+0x17a>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4a54      	ldr	r2, [pc, #336]	; (8002f84 <HAL_DMA_Abort_IT+0x280>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d022      	beq.n	8002e7e <HAL_DMA_Abort_IT+0x17a>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a52      	ldr	r2, [pc, #328]	; (8002f88 <HAL_DMA_Abort_IT+0x284>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d01d      	beq.n	8002e7e <HAL_DMA_Abort_IT+0x17a>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4a51      	ldr	r2, [pc, #324]	; (8002f8c <HAL_DMA_Abort_IT+0x288>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d018      	beq.n	8002e7e <HAL_DMA_Abort_IT+0x17a>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a4f      	ldr	r2, [pc, #316]	; (8002f90 <HAL_DMA_Abort_IT+0x28c>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d013      	beq.n	8002e7e <HAL_DMA_Abort_IT+0x17a>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4a4e      	ldr	r2, [pc, #312]	; (8002f94 <HAL_DMA_Abort_IT+0x290>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d00e      	beq.n	8002e7e <HAL_DMA_Abort_IT+0x17a>
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a4c      	ldr	r2, [pc, #304]	; (8002f98 <HAL_DMA_Abort_IT+0x294>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d009      	beq.n	8002e7e <HAL_DMA_Abort_IT+0x17a>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4a4b      	ldr	r2, [pc, #300]	; (8002f9c <HAL_DMA_Abort_IT+0x298>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d004      	beq.n	8002e7e <HAL_DMA_Abort_IT+0x17a>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a49      	ldr	r2, [pc, #292]	; (8002fa0 <HAL_DMA_Abort_IT+0x29c>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d108      	bne.n	8002e90 <HAL_DMA_Abort_IT+0x18c>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	681a      	ldr	r2, [r3, #0]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f022 0201 	bic.w	r2, r2, #1
 8002e8c:	601a      	str	r2, [r3, #0]
 8002e8e:	e147      	b.n	8003120 <HAL_DMA_Abort_IT+0x41c>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	681a      	ldr	r2, [r3, #0]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f022 0201 	bic.w	r2, r2, #1
 8002e9e:	601a      	str	r2, [r3, #0]
 8002ea0:	e13e      	b.n	8003120 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	681a      	ldr	r2, [r3, #0]
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f022 020e 	bic.w	r2, r2, #14
 8002eb0:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4a2b      	ldr	r2, [pc, #172]	; (8002f64 <HAL_DMA_Abort_IT+0x260>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d04a      	beq.n	8002f52 <HAL_DMA_Abort_IT+0x24e>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a29      	ldr	r2, [pc, #164]	; (8002f68 <HAL_DMA_Abort_IT+0x264>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d045      	beq.n	8002f52 <HAL_DMA_Abort_IT+0x24e>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4a28      	ldr	r2, [pc, #160]	; (8002f6c <HAL_DMA_Abort_IT+0x268>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d040      	beq.n	8002f52 <HAL_DMA_Abort_IT+0x24e>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4a26      	ldr	r2, [pc, #152]	; (8002f70 <HAL_DMA_Abort_IT+0x26c>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d03b      	beq.n	8002f52 <HAL_DMA_Abort_IT+0x24e>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4a25      	ldr	r2, [pc, #148]	; (8002f74 <HAL_DMA_Abort_IT+0x270>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d036      	beq.n	8002f52 <HAL_DMA_Abort_IT+0x24e>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4a23      	ldr	r2, [pc, #140]	; (8002f78 <HAL_DMA_Abort_IT+0x274>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d031      	beq.n	8002f52 <HAL_DMA_Abort_IT+0x24e>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4a22      	ldr	r2, [pc, #136]	; (8002f7c <HAL_DMA_Abort_IT+0x278>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d02c      	beq.n	8002f52 <HAL_DMA_Abort_IT+0x24e>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a20      	ldr	r2, [pc, #128]	; (8002f80 <HAL_DMA_Abort_IT+0x27c>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d027      	beq.n	8002f52 <HAL_DMA_Abort_IT+0x24e>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4a1f      	ldr	r2, [pc, #124]	; (8002f84 <HAL_DMA_Abort_IT+0x280>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d022      	beq.n	8002f52 <HAL_DMA_Abort_IT+0x24e>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4a1d      	ldr	r2, [pc, #116]	; (8002f88 <HAL_DMA_Abort_IT+0x284>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d01d      	beq.n	8002f52 <HAL_DMA_Abort_IT+0x24e>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4a1c      	ldr	r2, [pc, #112]	; (8002f8c <HAL_DMA_Abort_IT+0x288>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d018      	beq.n	8002f52 <HAL_DMA_Abort_IT+0x24e>
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a1a      	ldr	r2, [pc, #104]	; (8002f90 <HAL_DMA_Abort_IT+0x28c>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d013      	beq.n	8002f52 <HAL_DMA_Abort_IT+0x24e>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4a19      	ldr	r2, [pc, #100]	; (8002f94 <HAL_DMA_Abort_IT+0x290>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d00e      	beq.n	8002f52 <HAL_DMA_Abort_IT+0x24e>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a17      	ldr	r2, [pc, #92]	; (8002f98 <HAL_DMA_Abort_IT+0x294>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d009      	beq.n	8002f52 <HAL_DMA_Abort_IT+0x24e>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4a16      	ldr	r2, [pc, #88]	; (8002f9c <HAL_DMA_Abort_IT+0x298>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d004      	beq.n	8002f52 <HAL_DMA_Abort_IT+0x24e>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a14      	ldr	r2, [pc, #80]	; (8002fa0 <HAL_DMA_Abort_IT+0x29c>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d128      	bne.n	8002fa4 <HAL_DMA_Abort_IT+0x2a0>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	681a      	ldr	r2, [r3, #0]
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f022 0201 	bic.w	r2, r2, #1
 8002f60:	601a      	str	r2, [r3, #0]
 8002f62:	e027      	b.n	8002fb4 <HAL_DMA_Abort_IT+0x2b0>
 8002f64:	40020010 	.word	0x40020010
 8002f68:	40020028 	.word	0x40020028
 8002f6c:	40020040 	.word	0x40020040
 8002f70:	40020058 	.word	0x40020058
 8002f74:	40020070 	.word	0x40020070
 8002f78:	40020088 	.word	0x40020088
 8002f7c:	400200a0 	.word	0x400200a0
 8002f80:	400200b8 	.word	0x400200b8
 8002f84:	40020410 	.word	0x40020410
 8002f88:	40020428 	.word	0x40020428
 8002f8c:	40020440 	.word	0x40020440
 8002f90:	40020458 	.word	0x40020458
 8002f94:	40020470 	.word	0x40020470
 8002f98:	40020488 	.word	0x40020488
 8002f9c:	400204a0 	.word	0x400204a0
 8002fa0:	400204b8 	.word	0x400204b8
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	681a      	ldr	r2, [r3, #0]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f022 0201 	bic.w	r2, r2, #1
 8002fb2:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4a5c      	ldr	r2, [pc, #368]	; (800312c <HAL_DMA_Abort_IT+0x428>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d072      	beq.n	80030a4 <HAL_DMA_Abort_IT+0x3a0>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4a5b      	ldr	r2, [pc, #364]	; (8003130 <HAL_DMA_Abort_IT+0x42c>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d06d      	beq.n	80030a4 <HAL_DMA_Abort_IT+0x3a0>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a59      	ldr	r2, [pc, #356]	; (8003134 <HAL_DMA_Abort_IT+0x430>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d068      	beq.n	80030a4 <HAL_DMA_Abort_IT+0x3a0>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4a58      	ldr	r2, [pc, #352]	; (8003138 <HAL_DMA_Abort_IT+0x434>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d063      	beq.n	80030a4 <HAL_DMA_Abort_IT+0x3a0>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a56      	ldr	r2, [pc, #344]	; (800313c <HAL_DMA_Abort_IT+0x438>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d05e      	beq.n	80030a4 <HAL_DMA_Abort_IT+0x3a0>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4a55      	ldr	r2, [pc, #340]	; (8003140 <HAL_DMA_Abort_IT+0x43c>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d059      	beq.n	80030a4 <HAL_DMA_Abort_IT+0x3a0>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a53      	ldr	r2, [pc, #332]	; (8003144 <HAL_DMA_Abort_IT+0x440>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d054      	beq.n	80030a4 <HAL_DMA_Abort_IT+0x3a0>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4a52      	ldr	r2, [pc, #328]	; (8003148 <HAL_DMA_Abort_IT+0x444>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d04f      	beq.n	80030a4 <HAL_DMA_Abort_IT+0x3a0>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a50      	ldr	r2, [pc, #320]	; (800314c <HAL_DMA_Abort_IT+0x448>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d04a      	beq.n	80030a4 <HAL_DMA_Abort_IT+0x3a0>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a4f      	ldr	r2, [pc, #316]	; (8003150 <HAL_DMA_Abort_IT+0x44c>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d045      	beq.n	80030a4 <HAL_DMA_Abort_IT+0x3a0>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a4d      	ldr	r2, [pc, #308]	; (8003154 <HAL_DMA_Abort_IT+0x450>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d040      	beq.n	80030a4 <HAL_DMA_Abort_IT+0x3a0>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a4c      	ldr	r2, [pc, #304]	; (8003158 <HAL_DMA_Abort_IT+0x454>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d03b      	beq.n	80030a4 <HAL_DMA_Abort_IT+0x3a0>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a4a      	ldr	r2, [pc, #296]	; (800315c <HAL_DMA_Abort_IT+0x458>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d036      	beq.n	80030a4 <HAL_DMA_Abort_IT+0x3a0>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a49      	ldr	r2, [pc, #292]	; (8003160 <HAL_DMA_Abort_IT+0x45c>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d031      	beq.n	80030a4 <HAL_DMA_Abort_IT+0x3a0>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a47      	ldr	r2, [pc, #284]	; (8003164 <HAL_DMA_Abort_IT+0x460>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d02c      	beq.n	80030a4 <HAL_DMA_Abort_IT+0x3a0>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a46      	ldr	r2, [pc, #280]	; (8003168 <HAL_DMA_Abort_IT+0x464>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d027      	beq.n	80030a4 <HAL_DMA_Abort_IT+0x3a0>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a44      	ldr	r2, [pc, #272]	; (800316c <HAL_DMA_Abort_IT+0x468>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d022      	beq.n	80030a4 <HAL_DMA_Abort_IT+0x3a0>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a43      	ldr	r2, [pc, #268]	; (8003170 <HAL_DMA_Abort_IT+0x46c>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d01d      	beq.n	80030a4 <HAL_DMA_Abort_IT+0x3a0>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a41      	ldr	r2, [pc, #260]	; (8003174 <HAL_DMA_Abort_IT+0x470>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d018      	beq.n	80030a4 <HAL_DMA_Abort_IT+0x3a0>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a40      	ldr	r2, [pc, #256]	; (8003178 <HAL_DMA_Abort_IT+0x474>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d013      	beq.n	80030a4 <HAL_DMA_Abort_IT+0x3a0>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a3e      	ldr	r2, [pc, #248]	; (800317c <HAL_DMA_Abort_IT+0x478>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d00e      	beq.n	80030a4 <HAL_DMA_Abort_IT+0x3a0>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4a3d      	ldr	r2, [pc, #244]	; (8003180 <HAL_DMA_Abort_IT+0x47c>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d009      	beq.n	80030a4 <HAL_DMA_Abort_IT+0x3a0>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a3b      	ldr	r2, [pc, #236]	; (8003184 <HAL_DMA_Abort_IT+0x480>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d004      	beq.n	80030a4 <HAL_DMA_Abort_IT+0x3a0>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4a3a      	ldr	r2, [pc, #232]	; (8003188 <HAL_DMA_Abort_IT+0x484>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d101      	bne.n	80030a8 <HAL_DMA_Abort_IT+0x3a4>
 80030a4:	2301      	movs	r3, #1
 80030a6:	e000      	b.n	80030aa <HAL_DMA_Abort_IT+0x3a6>
 80030a8:	2300      	movs	r3, #0
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d028      	beq.n	8003100 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030b2:	681a      	ldr	r2, [r3, #0]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030b8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80030bc:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030c2:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030c8:	f003 031f 	and.w	r3, r3, #31
 80030cc:	2201      	movs	r2, #1
 80030ce:	409a      	lsls	r2, r3
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80030d8:	687a      	ldr	r2, [r7, #4]
 80030da:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80030dc:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d00c      	beq.n	8003100 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80030ea:	681a      	ldr	r2, [r3, #0]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80030f0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80030f4:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030fa:	687a      	ldr	r2, [r7, #4]
 80030fc:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80030fe:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2200      	movs	r2, #0
 8003104:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2201      	movs	r2, #1
 800310c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003114:	2b00      	cmp	r3, #0
 8003116:	d003      	beq.n	8003120 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800311c:	6878      	ldr	r0, [r7, #4]
 800311e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8003120:	2300      	movs	r3, #0
}
 8003122:	4618      	mov	r0, r3
 8003124:	3710      	adds	r7, #16
 8003126:	46bd      	mov	sp, r7
 8003128:	bd80      	pop	{r7, pc}
 800312a:	bf00      	nop
 800312c:	40020010 	.word	0x40020010
 8003130:	40020028 	.word	0x40020028
 8003134:	40020040 	.word	0x40020040
 8003138:	40020058 	.word	0x40020058
 800313c:	40020070 	.word	0x40020070
 8003140:	40020088 	.word	0x40020088
 8003144:	400200a0 	.word	0x400200a0
 8003148:	400200b8 	.word	0x400200b8
 800314c:	40020410 	.word	0x40020410
 8003150:	40020428 	.word	0x40020428
 8003154:	40020440 	.word	0x40020440
 8003158:	40020458 	.word	0x40020458
 800315c:	40020470 	.word	0x40020470
 8003160:	40020488 	.word	0x40020488
 8003164:	400204a0 	.word	0x400204a0
 8003168:	400204b8 	.word	0x400204b8
 800316c:	58025408 	.word	0x58025408
 8003170:	5802541c 	.word	0x5802541c
 8003174:	58025430 	.word	0x58025430
 8003178:	58025444 	.word	0x58025444
 800317c:	58025458 	.word	0x58025458
 8003180:	5802546c 	.word	0x5802546c
 8003184:	58025480 	.word	0x58025480
 8003188:	58025494 	.word	0x58025494

0800318c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b08a      	sub	sp, #40	; 0x28
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003194:	2300      	movs	r3, #0
 8003196:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003198:	4b67      	ldr	r3, [pc, #412]	; (8003338 <HAL_DMA_IRQHandler+0x1ac>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a67      	ldr	r2, [pc, #412]	; (800333c <HAL_DMA_IRQHandler+0x1b0>)
 800319e:	fba2 2303 	umull	r2, r3, r2, r3
 80031a2:	0a9b      	lsrs	r3, r3, #10
 80031a4:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031aa:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031b0:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80031b2:	6a3b      	ldr	r3, [r7, #32]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80031b8:	69fb      	ldr	r3, [r7, #28]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4a5f      	ldr	r2, [pc, #380]	; (8003340 <HAL_DMA_IRQHandler+0x1b4>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d04a      	beq.n	800325e <HAL_DMA_IRQHandler+0xd2>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a5d      	ldr	r2, [pc, #372]	; (8003344 <HAL_DMA_IRQHandler+0x1b8>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d045      	beq.n	800325e <HAL_DMA_IRQHandler+0xd2>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4a5c      	ldr	r2, [pc, #368]	; (8003348 <HAL_DMA_IRQHandler+0x1bc>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d040      	beq.n	800325e <HAL_DMA_IRQHandler+0xd2>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a5a      	ldr	r2, [pc, #360]	; (800334c <HAL_DMA_IRQHandler+0x1c0>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d03b      	beq.n	800325e <HAL_DMA_IRQHandler+0xd2>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4a59      	ldr	r2, [pc, #356]	; (8003350 <HAL_DMA_IRQHandler+0x1c4>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d036      	beq.n	800325e <HAL_DMA_IRQHandler+0xd2>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a57      	ldr	r2, [pc, #348]	; (8003354 <HAL_DMA_IRQHandler+0x1c8>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d031      	beq.n	800325e <HAL_DMA_IRQHandler+0xd2>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4a56      	ldr	r2, [pc, #344]	; (8003358 <HAL_DMA_IRQHandler+0x1cc>)
 8003200:	4293      	cmp	r3, r2
 8003202:	d02c      	beq.n	800325e <HAL_DMA_IRQHandler+0xd2>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a54      	ldr	r2, [pc, #336]	; (800335c <HAL_DMA_IRQHandler+0x1d0>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d027      	beq.n	800325e <HAL_DMA_IRQHandler+0xd2>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4a53      	ldr	r2, [pc, #332]	; (8003360 <HAL_DMA_IRQHandler+0x1d4>)
 8003214:	4293      	cmp	r3, r2
 8003216:	d022      	beq.n	800325e <HAL_DMA_IRQHandler+0xd2>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a51      	ldr	r2, [pc, #324]	; (8003364 <HAL_DMA_IRQHandler+0x1d8>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d01d      	beq.n	800325e <HAL_DMA_IRQHandler+0xd2>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4a50      	ldr	r2, [pc, #320]	; (8003368 <HAL_DMA_IRQHandler+0x1dc>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d018      	beq.n	800325e <HAL_DMA_IRQHandler+0xd2>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4a4e      	ldr	r2, [pc, #312]	; (800336c <HAL_DMA_IRQHandler+0x1e0>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d013      	beq.n	800325e <HAL_DMA_IRQHandler+0xd2>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4a4d      	ldr	r2, [pc, #308]	; (8003370 <HAL_DMA_IRQHandler+0x1e4>)
 800323c:	4293      	cmp	r3, r2
 800323e:	d00e      	beq.n	800325e <HAL_DMA_IRQHandler+0xd2>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a4b      	ldr	r2, [pc, #300]	; (8003374 <HAL_DMA_IRQHandler+0x1e8>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d009      	beq.n	800325e <HAL_DMA_IRQHandler+0xd2>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4a4a      	ldr	r2, [pc, #296]	; (8003378 <HAL_DMA_IRQHandler+0x1ec>)
 8003250:	4293      	cmp	r3, r2
 8003252:	d004      	beq.n	800325e <HAL_DMA_IRQHandler+0xd2>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a48      	ldr	r2, [pc, #288]	; (800337c <HAL_DMA_IRQHandler+0x1f0>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d101      	bne.n	8003262 <HAL_DMA_IRQHandler+0xd6>
 800325e:	2301      	movs	r3, #1
 8003260:	e000      	b.n	8003264 <HAL_DMA_IRQHandler+0xd8>
 8003262:	2300      	movs	r3, #0
 8003264:	2b00      	cmp	r3, #0
 8003266:	f000 842b 	beq.w	8003ac0 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800326e:	f003 031f 	and.w	r3, r3, #31
 8003272:	2208      	movs	r2, #8
 8003274:	409a      	lsls	r2, r3
 8003276:	69bb      	ldr	r3, [r7, #24]
 8003278:	4013      	ands	r3, r2
 800327a:	2b00      	cmp	r3, #0
 800327c:	f000 80a2 	beq.w	80033c4 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a2e      	ldr	r2, [pc, #184]	; (8003340 <HAL_DMA_IRQHandler+0x1b4>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d04a      	beq.n	8003320 <HAL_DMA_IRQHandler+0x194>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a2d      	ldr	r2, [pc, #180]	; (8003344 <HAL_DMA_IRQHandler+0x1b8>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d045      	beq.n	8003320 <HAL_DMA_IRQHandler+0x194>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a2b      	ldr	r2, [pc, #172]	; (8003348 <HAL_DMA_IRQHandler+0x1bc>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d040      	beq.n	8003320 <HAL_DMA_IRQHandler+0x194>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a2a      	ldr	r2, [pc, #168]	; (800334c <HAL_DMA_IRQHandler+0x1c0>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d03b      	beq.n	8003320 <HAL_DMA_IRQHandler+0x194>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a28      	ldr	r2, [pc, #160]	; (8003350 <HAL_DMA_IRQHandler+0x1c4>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d036      	beq.n	8003320 <HAL_DMA_IRQHandler+0x194>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4a27      	ldr	r2, [pc, #156]	; (8003354 <HAL_DMA_IRQHandler+0x1c8>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d031      	beq.n	8003320 <HAL_DMA_IRQHandler+0x194>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a25      	ldr	r2, [pc, #148]	; (8003358 <HAL_DMA_IRQHandler+0x1cc>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d02c      	beq.n	8003320 <HAL_DMA_IRQHandler+0x194>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4a24      	ldr	r2, [pc, #144]	; (800335c <HAL_DMA_IRQHandler+0x1d0>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d027      	beq.n	8003320 <HAL_DMA_IRQHandler+0x194>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a22      	ldr	r2, [pc, #136]	; (8003360 <HAL_DMA_IRQHandler+0x1d4>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d022      	beq.n	8003320 <HAL_DMA_IRQHandler+0x194>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4a21      	ldr	r2, [pc, #132]	; (8003364 <HAL_DMA_IRQHandler+0x1d8>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d01d      	beq.n	8003320 <HAL_DMA_IRQHandler+0x194>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a1f      	ldr	r2, [pc, #124]	; (8003368 <HAL_DMA_IRQHandler+0x1dc>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d018      	beq.n	8003320 <HAL_DMA_IRQHandler+0x194>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4a1e      	ldr	r2, [pc, #120]	; (800336c <HAL_DMA_IRQHandler+0x1e0>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d013      	beq.n	8003320 <HAL_DMA_IRQHandler+0x194>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a1c      	ldr	r2, [pc, #112]	; (8003370 <HAL_DMA_IRQHandler+0x1e4>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d00e      	beq.n	8003320 <HAL_DMA_IRQHandler+0x194>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4a1b      	ldr	r2, [pc, #108]	; (8003374 <HAL_DMA_IRQHandler+0x1e8>)
 8003308:	4293      	cmp	r3, r2
 800330a:	d009      	beq.n	8003320 <HAL_DMA_IRQHandler+0x194>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4a19      	ldr	r2, [pc, #100]	; (8003378 <HAL_DMA_IRQHandler+0x1ec>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d004      	beq.n	8003320 <HAL_DMA_IRQHandler+0x194>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4a18      	ldr	r2, [pc, #96]	; (800337c <HAL_DMA_IRQHandler+0x1f0>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d12f      	bne.n	8003380 <HAL_DMA_IRQHandler+0x1f4>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f003 0304 	and.w	r3, r3, #4
 800332a:	2b00      	cmp	r3, #0
 800332c:	bf14      	ite	ne
 800332e:	2301      	movne	r3, #1
 8003330:	2300      	moveq	r3, #0
 8003332:	b2db      	uxtb	r3, r3
 8003334:	e02e      	b.n	8003394 <HAL_DMA_IRQHandler+0x208>
 8003336:	bf00      	nop
 8003338:	24000400 	.word	0x24000400
 800333c:	1b4e81b5 	.word	0x1b4e81b5
 8003340:	40020010 	.word	0x40020010
 8003344:	40020028 	.word	0x40020028
 8003348:	40020040 	.word	0x40020040
 800334c:	40020058 	.word	0x40020058
 8003350:	40020070 	.word	0x40020070
 8003354:	40020088 	.word	0x40020088
 8003358:	400200a0 	.word	0x400200a0
 800335c:	400200b8 	.word	0x400200b8
 8003360:	40020410 	.word	0x40020410
 8003364:	40020428 	.word	0x40020428
 8003368:	40020440 	.word	0x40020440
 800336c:	40020458 	.word	0x40020458
 8003370:	40020470 	.word	0x40020470
 8003374:	40020488 	.word	0x40020488
 8003378:	400204a0 	.word	0x400204a0
 800337c:	400204b8 	.word	0x400204b8
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f003 0308 	and.w	r3, r3, #8
 800338a:	2b00      	cmp	r3, #0
 800338c:	bf14      	ite	ne
 800338e:	2301      	movne	r3, #1
 8003390:	2300      	moveq	r3, #0
 8003392:	b2db      	uxtb	r3, r3
 8003394:	2b00      	cmp	r3, #0
 8003396:	d015      	beq.n	80033c4 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	681a      	ldr	r2, [r3, #0]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f022 0204 	bic.w	r2, r2, #4
 80033a6:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033ac:	f003 031f 	and.w	r3, r3, #31
 80033b0:	2208      	movs	r2, #8
 80033b2:	409a      	lsls	r2, r3
 80033b4:	6a3b      	ldr	r3, [r7, #32]
 80033b6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033bc:	f043 0201 	orr.w	r2, r3, #1
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033c8:	f003 031f 	and.w	r3, r3, #31
 80033cc:	69ba      	ldr	r2, [r7, #24]
 80033ce:	fa22 f303 	lsr.w	r3, r2, r3
 80033d2:	f003 0301 	and.w	r3, r3, #1
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d06e      	beq.n	80034b8 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a69      	ldr	r2, [pc, #420]	; (8003584 <HAL_DMA_IRQHandler+0x3f8>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d04a      	beq.n	800347a <HAL_DMA_IRQHandler+0x2ee>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a67      	ldr	r2, [pc, #412]	; (8003588 <HAL_DMA_IRQHandler+0x3fc>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d045      	beq.n	800347a <HAL_DMA_IRQHandler+0x2ee>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4a66      	ldr	r2, [pc, #408]	; (800358c <HAL_DMA_IRQHandler+0x400>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d040      	beq.n	800347a <HAL_DMA_IRQHandler+0x2ee>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a64      	ldr	r2, [pc, #400]	; (8003590 <HAL_DMA_IRQHandler+0x404>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d03b      	beq.n	800347a <HAL_DMA_IRQHandler+0x2ee>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a63      	ldr	r2, [pc, #396]	; (8003594 <HAL_DMA_IRQHandler+0x408>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d036      	beq.n	800347a <HAL_DMA_IRQHandler+0x2ee>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a61      	ldr	r2, [pc, #388]	; (8003598 <HAL_DMA_IRQHandler+0x40c>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d031      	beq.n	800347a <HAL_DMA_IRQHandler+0x2ee>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4a60      	ldr	r2, [pc, #384]	; (800359c <HAL_DMA_IRQHandler+0x410>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d02c      	beq.n	800347a <HAL_DMA_IRQHandler+0x2ee>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a5e      	ldr	r2, [pc, #376]	; (80035a0 <HAL_DMA_IRQHandler+0x414>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d027      	beq.n	800347a <HAL_DMA_IRQHandler+0x2ee>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a5d      	ldr	r2, [pc, #372]	; (80035a4 <HAL_DMA_IRQHandler+0x418>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d022      	beq.n	800347a <HAL_DMA_IRQHandler+0x2ee>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a5b      	ldr	r2, [pc, #364]	; (80035a8 <HAL_DMA_IRQHandler+0x41c>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d01d      	beq.n	800347a <HAL_DMA_IRQHandler+0x2ee>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4a5a      	ldr	r2, [pc, #360]	; (80035ac <HAL_DMA_IRQHandler+0x420>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d018      	beq.n	800347a <HAL_DMA_IRQHandler+0x2ee>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4a58      	ldr	r2, [pc, #352]	; (80035b0 <HAL_DMA_IRQHandler+0x424>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d013      	beq.n	800347a <HAL_DMA_IRQHandler+0x2ee>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4a57      	ldr	r2, [pc, #348]	; (80035b4 <HAL_DMA_IRQHandler+0x428>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d00e      	beq.n	800347a <HAL_DMA_IRQHandler+0x2ee>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a55      	ldr	r2, [pc, #340]	; (80035b8 <HAL_DMA_IRQHandler+0x42c>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d009      	beq.n	800347a <HAL_DMA_IRQHandler+0x2ee>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4a54      	ldr	r2, [pc, #336]	; (80035bc <HAL_DMA_IRQHandler+0x430>)
 800346c:	4293      	cmp	r3, r2
 800346e:	d004      	beq.n	800347a <HAL_DMA_IRQHandler+0x2ee>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4a52      	ldr	r2, [pc, #328]	; (80035c0 <HAL_DMA_IRQHandler+0x434>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d10a      	bne.n	8003490 <HAL_DMA_IRQHandler+0x304>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	695b      	ldr	r3, [r3, #20]
 8003480:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003484:	2b00      	cmp	r3, #0
 8003486:	bf14      	ite	ne
 8003488:	2301      	movne	r3, #1
 800348a:	2300      	moveq	r3, #0
 800348c:	b2db      	uxtb	r3, r3
 800348e:	e003      	b.n	8003498 <HAL_DMA_IRQHandler+0x30c>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	2300      	movs	r3, #0
 8003498:	2b00      	cmp	r3, #0
 800349a:	d00d      	beq.n	80034b8 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034a0:	f003 031f 	and.w	r3, r3, #31
 80034a4:	2201      	movs	r2, #1
 80034a6:	409a      	lsls	r2, r3
 80034a8:	6a3b      	ldr	r3, [r7, #32]
 80034aa:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034b0:	f043 0202 	orr.w	r2, r3, #2
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034bc:	f003 031f 	and.w	r3, r3, #31
 80034c0:	2204      	movs	r2, #4
 80034c2:	409a      	lsls	r2, r3
 80034c4:	69bb      	ldr	r3, [r7, #24]
 80034c6:	4013      	ands	r3, r2
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	f000 808f 	beq.w	80035ec <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4a2c      	ldr	r2, [pc, #176]	; (8003584 <HAL_DMA_IRQHandler+0x3f8>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d04a      	beq.n	800356e <HAL_DMA_IRQHandler+0x3e2>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a2a      	ldr	r2, [pc, #168]	; (8003588 <HAL_DMA_IRQHandler+0x3fc>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d045      	beq.n	800356e <HAL_DMA_IRQHandler+0x3e2>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4a29      	ldr	r2, [pc, #164]	; (800358c <HAL_DMA_IRQHandler+0x400>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d040      	beq.n	800356e <HAL_DMA_IRQHandler+0x3e2>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a27      	ldr	r2, [pc, #156]	; (8003590 <HAL_DMA_IRQHandler+0x404>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d03b      	beq.n	800356e <HAL_DMA_IRQHandler+0x3e2>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a26      	ldr	r2, [pc, #152]	; (8003594 <HAL_DMA_IRQHandler+0x408>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d036      	beq.n	800356e <HAL_DMA_IRQHandler+0x3e2>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a24      	ldr	r2, [pc, #144]	; (8003598 <HAL_DMA_IRQHandler+0x40c>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d031      	beq.n	800356e <HAL_DMA_IRQHandler+0x3e2>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4a23      	ldr	r2, [pc, #140]	; (800359c <HAL_DMA_IRQHandler+0x410>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d02c      	beq.n	800356e <HAL_DMA_IRQHandler+0x3e2>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4a21      	ldr	r2, [pc, #132]	; (80035a0 <HAL_DMA_IRQHandler+0x414>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d027      	beq.n	800356e <HAL_DMA_IRQHandler+0x3e2>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4a20      	ldr	r2, [pc, #128]	; (80035a4 <HAL_DMA_IRQHandler+0x418>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d022      	beq.n	800356e <HAL_DMA_IRQHandler+0x3e2>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a1e      	ldr	r2, [pc, #120]	; (80035a8 <HAL_DMA_IRQHandler+0x41c>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d01d      	beq.n	800356e <HAL_DMA_IRQHandler+0x3e2>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4a1d      	ldr	r2, [pc, #116]	; (80035ac <HAL_DMA_IRQHandler+0x420>)
 8003538:	4293      	cmp	r3, r2
 800353a:	d018      	beq.n	800356e <HAL_DMA_IRQHandler+0x3e2>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a1b      	ldr	r2, [pc, #108]	; (80035b0 <HAL_DMA_IRQHandler+0x424>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d013      	beq.n	800356e <HAL_DMA_IRQHandler+0x3e2>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4a1a      	ldr	r2, [pc, #104]	; (80035b4 <HAL_DMA_IRQHandler+0x428>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d00e      	beq.n	800356e <HAL_DMA_IRQHandler+0x3e2>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a18      	ldr	r2, [pc, #96]	; (80035b8 <HAL_DMA_IRQHandler+0x42c>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d009      	beq.n	800356e <HAL_DMA_IRQHandler+0x3e2>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4a17      	ldr	r2, [pc, #92]	; (80035bc <HAL_DMA_IRQHandler+0x430>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d004      	beq.n	800356e <HAL_DMA_IRQHandler+0x3e2>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4a15      	ldr	r2, [pc, #84]	; (80035c0 <HAL_DMA_IRQHandler+0x434>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d12a      	bne.n	80035c4 <HAL_DMA_IRQHandler+0x438>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f003 0302 	and.w	r3, r3, #2
 8003578:	2b00      	cmp	r3, #0
 800357a:	bf14      	ite	ne
 800357c:	2301      	movne	r3, #1
 800357e:	2300      	moveq	r3, #0
 8003580:	b2db      	uxtb	r3, r3
 8003582:	e023      	b.n	80035cc <HAL_DMA_IRQHandler+0x440>
 8003584:	40020010 	.word	0x40020010
 8003588:	40020028 	.word	0x40020028
 800358c:	40020040 	.word	0x40020040
 8003590:	40020058 	.word	0x40020058
 8003594:	40020070 	.word	0x40020070
 8003598:	40020088 	.word	0x40020088
 800359c:	400200a0 	.word	0x400200a0
 80035a0:	400200b8 	.word	0x400200b8
 80035a4:	40020410 	.word	0x40020410
 80035a8:	40020428 	.word	0x40020428
 80035ac:	40020440 	.word	0x40020440
 80035b0:	40020458 	.word	0x40020458
 80035b4:	40020470 	.word	0x40020470
 80035b8:	40020488 	.word	0x40020488
 80035bc:	400204a0 	.word	0x400204a0
 80035c0:	400204b8 	.word	0x400204b8
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	2300      	movs	r3, #0
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d00d      	beq.n	80035ec <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035d4:	f003 031f 	and.w	r3, r3, #31
 80035d8:	2204      	movs	r2, #4
 80035da:	409a      	lsls	r2, r3
 80035dc:	6a3b      	ldr	r3, [r7, #32]
 80035de:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035e4:	f043 0204 	orr.w	r2, r3, #4
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035f0:	f003 031f 	and.w	r3, r3, #31
 80035f4:	2210      	movs	r2, #16
 80035f6:	409a      	lsls	r2, r3
 80035f8:	69bb      	ldr	r3, [r7, #24]
 80035fa:	4013      	ands	r3, r2
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	f000 80a6 	beq.w	800374e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4a85      	ldr	r2, [pc, #532]	; (800381c <HAL_DMA_IRQHandler+0x690>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d04a      	beq.n	80036a2 <HAL_DMA_IRQHandler+0x516>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4a83      	ldr	r2, [pc, #524]	; (8003820 <HAL_DMA_IRQHandler+0x694>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d045      	beq.n	80036a2 <HAL_DMA_IRQHandler+0x516>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4a82      	ldr	r2, [pc, #520]	; (8003824 <HAL_DMA_IRQHandler+0x698>)
 800361c:	4293      	cmp	r3, r2
 800361e:	d040      	beq.n	80036a2 <HAL_DMA_IRQHandler+0x516>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a80      	ldr	r2, [pc, #512]	; (8003828 <HAL_DMA_IRQHandler+0x69c>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d03b      	beq.n	80036a2 <HAL_DMA_IRQHandler+0x516>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4a7f      	ldr	r2, [pc, #508]	; (800382c <HAL_DMA_IRQHandler+0x6a0>)
 8003630:	4293      	cmp	r3, r2
 8003632:	d036      	beq.n	80036a2 <HAL_DMA_IRQHandler+0x516>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a7d      	ldr	r2, [pc, #500]	; (8003830 <HAL_DMA_IRQHandler+0x6a4>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d031      	beq.n	80036a2 <HAL_DMA_IRQHandler+0x516>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4a7c      	ldr	r2, [pc, #496]	; (8003834 <HAL_DMA_IRQHandler+0x6a8>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d02c      	beq.n	80036a2 <HAL_DMA_IRQHandler+0x516>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a7a      	ldr	r2, [pc, #488]	; (8003838 <HAL_DMA_IRQHandler+0x6ac>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d027      	beq.n	80036a2 <HAL_DMA_IRQHandler+0x516>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4a79      	ldr	r2, [pc, #484]	; (800383c <HAL_DMA_IRQHandler+0x6b0>)
 8003658:	4293      	cmp	r3, r2
 800365a:	d022      	beq.n	80036a2 <HAL_DMA_IRQHandler+0x516>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a77      	ldr	r2, [pc, #476]	; (8003840 <HAL_DMA_IRQHandler+0x6b4>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d01d      	beq.n	80036a2 <HAL_DMA_IRQHandler+0x516>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4a76      	ldr	r2, [pc, #472]	; (8003844 <HAL_DMA_IRQHandler+0x6b8>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d018      	beq.n	80036a2 <HAL_DMA_IRQHandler+0x516>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a74      	ldr	r2, [pc, #464]	; (8003848 <HAL_DMA_IRQHandler+0x6bc>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d013      	beq.n	80036a2 <HAL_DMA_IRQHandler+0x516>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4a73      	ldr	r2, [pc, #460]	; (800384c <HAL_DMA_IRQHandler+0x6c0>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d00e      	beq.n	80036a2 <HAL_DMA_IRQHandler+0x516>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a71      	ldr	r2, [pc, #452]	; (8003850 <HAL_DMA_IRQHandler+0x6c4>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d009      	beq.n	80036a2 <HAL_DMA_IRQHandler+0x516>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a70      	ldr	r2, [pc, #448]	; (8003854 <HAL_DMA_IRQHandler+0x6c8>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d004      	beq.n	80036a2 <HAL_DMA_IRQHandler+0x516>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a6e      	ldr	r2, [pc, #440]	; (8003858 <HAL_DMA_IRQHandler+0x6cc>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d10a      	bne.n	80036b8 <HAL_DMA_IRQHandler+0x52c>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f003 0308 	and.w	r3, r3, #8
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	bf14      	ite	ne
 80036b0:	2301      	movne	r3, #1
 80036b2:	2300      	moveq	r3, #0
 80036b4:	b2db      	uxtb	r3, r3
 80036b6:	e009      	b.n	80036cc <HAL_DMA_IRQHandler+0x540>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f003 0304 	and.w	r3, r3, #4
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	bf14      	ite	ne
 80036c6:	2301      	movne	r3, #1
 80036c8:	2300      	moveq	r3, #0
 80036ca:	b2db      	uxtb	r3, r3
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d03e      	beq.n	800374e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036d4:	f003 031f 	and.w	r3, r3, #31
 80036d8:	2210      	movs	r2, #16
 80036da:	409a      	lsls	r2, r3
 80036dc:	6a3b      	ldr	r3, [r7, #32]
 80036de:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d018      	beq.n	8003720 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d108      	bne.n	800370e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003700:	2b00      	cmp	r3, #0
 8003702:	d024      	beq.n	800374e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003708:	6878      	ldr	r0, [r7, #4]
 800370a:	4798      	blx	r3
 800370c:	e01f      	b.n	800374e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003712:	2b00      	cmp	r3, #0
 8003714:	d01b      	beq.n	800374e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800371a:	6878      	ldr	r0, [r7, #4]
 800371c:	4798      	blx	r3
 800371e:	e016      	b.n	800374e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800372a:	2b00      	cmp	r3, #0
 800372c:	d107      	bne.n	800373e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	681a      	ldr	r2, [r3, #0]
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f022 0208 	bic.w	r2, r2, #8
 800373c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003742:	2b00      	cmp	r3, #0
 8003744:	d003      	beq.n	800374e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800374a:	6878      	ldr	r0, [r7, #4]
 800374c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003752:	f003 031f 	and.w	r3, r3, #31
 8003756:	2220      	movs	r2, #32
 8003758:	409a      	lsls	r2, r3
 800375a:	69bb      	ldr	r3, [r7, #24]
 800375c:	4013      	ands	r3, r2
 800375e:	2b00      	cmp	r3, #0
 8003760:	f000 8110 	beq.w	8003984 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4a2c      	ldr	r2, [pc, #176]	; (800381c <HAL_DMA_IRQHandler+0x690>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d04a      	beq.n	8003804 <HAL_DMA_IRQHandler+0x678>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4a2b      	ldr	r2, [pc, #172]	; (8003820 <HAL_DMA_IRQHandler+0x694>)
 8003774:	4293      	cmp	r3, r2
 8003776:	d045      	beq.n	8003804 <HAL_DMA_IRQHandler+0x678>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a29      	ldr	r2, [pc, #164]	; (8003824 <HAL_DMA_IRQHandler+0x698>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d040      	beq.n	8003804 <HAL_DMA_IRQHandler+0x678>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4a28      	ldr	r2, [pc, #160]	; (8003828 <HAL_DMA_IRQHandler+0x69c>)
 8003788:	4293      	cmp	r3, r2
 800378a:	d03b      	beq.n	8003804 <HAL_DMA_IRQHandler+0x678>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4a26      	ldr	r2, [pc, #152]	; (800382c <HAL_DMA_IRQHandler+0x6a0>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d036      	beq.n	8003804 <HAL_DMA_IRQHandler+0x678>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4a25      	ldr	r2, [pc, #148]	; (8003830 <HAL_DMA_IRQHandler+0x6a4>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d031      	beq.n	8003804 <HAL_DMA_IRQHandler+0x678>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a23      	ldr	r2, [pc, #140]	; (8003834 <HAL_DMA_IRQHandler+0x6a8>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d02c      	beq.n	8003804 <HAL_DMA_IRQHandler+0x678>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4a22      	ldr	r2, [pc, #136]	; (8003838 <HAL_DMA_IRQHandler+0x6ac>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d027      	beq.n	8003804 <HAL_DMA_IRQHandler+0x678>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a20      	ldr	r2, [pc, #128]	; (800383c <HAL_DMA_IRQHandler+0x6b0>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d022      	beq.n	8003804 <HAL_DMA_IRQHandler+0x678>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4a1f      	ldr	r2, [pc, #124]	; (8003840 <HAL_DMA_IRQHandler+0x6b4>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d01d      	beq.n	8003804 <HAL_DMA_IRQHandler+0x678>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4a1d      	ldr	r2, [pc, #116]	; (8003844 <HAL_DMA_IRQHandler+0x6b8>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d018      	beq.n	8003804 <HAL_DMA_IRQHandler+0x678>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4a1c      	ldr	r2, [pc, #112]	; (8003848 <HAL_DMA_IRQHandler+0x6bc>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	d013      	beq.n	8003804 <HAL_DMA_IRQHandler+0x678>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a1a      	ldr	r2, [pc, #104]	; (800384c <HAL_DMA_IRQHandler+0x6c0>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d00e      	beq.n	8003804 <HAL_DMA_IRQHandler+0x678>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4a19      	ldr	r2, [pc, #100]	; (8003850 <HAL_DMA_IRQHandler+0x6c4>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d009      	beq.n	8003804 <HAL_DMA_IRQHandler+0x678>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a17      	ldr	r2, [pc, #92]	; (8003854 <HAL_DMA_IRQHandler+0x6c8>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d004      	beq.n	8003804 <HAL_DMA_IRQHandler+0x678>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4a16      	ldr	r2, [pc, #88]	; (8003858 <HAL_DMA_IRQHandler+0x6cc>)
 8003800:	4293      	cmp	r3, r2
 8003802:	d12b      	bne.n	800385c <HAL_DMA_IRQHandler+0x6d0>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f003 0310 	and.w	r3, r3, #16
 800380e:	2b00      	cmp	r3, #0
 8003810:	bf14      	ite	ne
 8003812:	2301      	movne	r3, #1
 8003814:	2300      	moveq	r3, #0
 8003816:	b2db      	uxtb	r3, r3
 8003818:	e02a      	b.n	8003870 <HAL_DMA_IRQHandler+0x6e4>
 800381a:	bf00      	nop
 800381c:	40020010 	.word	0x40020010
 8003820:	40020028 	.word	0x40020028
 8003824:	40020040 	.word	0x40020040
 8003828:	40020058 	.word	0x40020058
 800382c:	40020070 	.word	0x40020070
 8003830:	40020088 	.word	0x40020088
 8003834:	400200a0 	.word	0x400200a0
 8003838:	400200b8 	.word	0x400200b8
 800383c:	40020410 	.word	0x40020410
 8003840:	40020428 	.word	0x40020428
 8003844:	40020440 	.word	0x40020440
 8003848:	40020458 	.word	0x40020458
 800384c:	40020470 	.word	0x40020470
 8003850:	40020488 	.word	0x40020488
 8003854:	400204a0 	.word	0x400204a0
 8003858:	400204b8 	.word	0x400204b8
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f003 0302 	and.w	r3, r3, #2
 8003866:	2b00      	cmp	r3, #0
 8003868:	bf14      	ite	ne
 800386a:	2301      	movne	r3, #1
 800386c:	2300      	moveq	r3, #0
 800386e:	b2db      	uxtb	r3, r3
 8003870:	2b00      	cmp	r3, #0
 8003872:	f000 8087 	beq.w	8003984 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800387a:	f003 031f 	and.w	r3, r3, #31
 800387e:	2220      	movs	r2, #32
 8003880:	409a      	lsls	r2, r3
 8003882:	6a3b      	ldr	r3, [r7, #32]
 8003884:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800388c:	b2db      	uxtb	r3, r3
 800388e:	2b04      	cmp	r3, #4
 8003890:	d139      	bne.n	8003906 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	681a      	ldr	r2, [r3, #0]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f022 0216 	bic.w	r2, r2, #22
 80038a0:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	695a      	ldr	r2, [r3, #20]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80038b0:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d103      	bne.n	80038c2 <HAL_DMA_IRQHandler+0x736>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d007      	beq.n	80038d2 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	681a      	ldr	r2, [r3, #0]
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f022 0208 	bic.w	r2, r2, #8
 80038d0:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038d6:	f003 031f 	and.w	r3, r3, #31
 80038da:	223f      	movs	r2, #63	; 0x3f
 80038dc:	409a      	lsls	r2, r3
 80038de:	6a3b      	ldr	r3, [r7, #32]
 80038e0:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2200      	movs	r2, #0
 80038e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2201      	movs	r2, #1
 80038ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	f000 834a 	beq.w	8003f90 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003900:	6878      	ldr	r0, [r7, #4]
 8003902:	4798      	blx	r3
          }
          return;
 8003904:	e344      	b.n	8003f90 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003910:	2b00      	cmp	r3, #0
 8003912:	d018      	beq.n	8003946 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800391e:	2b00      	cmp	r3, #0
 8003920:	d108      	bne.n	8003934 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003926:	2b00      	cmp	r3, #0
 8003928:	d02c      	beq.n	8003984 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800392e:	6878      	ldr	r0, [r7, #4]
 8003930:	4798      	blx	r3
 8003932:	e027      	b.n	8003984 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003938:	2b00      	cmp	r3, #0
 800393a:	d023      	beq.n	8003984 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003940:	6878      	ldr	r0, [r7, #4]
 8003942:	4798      	blx	r3
 8003944:	e01e      	b.n	8003984 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003950:	2b00      	cmp	r3, #0
 8003952:	d10f      	bne.n	8003974 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	681a      	ldr	r2, [r3, #0]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f022 0210 	bic.w	r2, r2, #16
 8003962:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2200      	movs	r2, #0
 8003968:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2201      	movs	r2, #1
 8003970:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003978:	2b00      	cmp	r3, #0
 800397a:	d003      	beq.n	8003984 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003980:	6878      	ldr	r0, [r7, #4]
 8003982:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003988:	2b00      	cmp	r3, #0
 800398a:	f000 8306 	beq.w	8003f9a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003992:	f003 0301 	and.w	r3, r3, #1
 8003996:	2b00      	cmp	r3, #0
 8003998:	f000 8088 	beq.w	8003aac <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2204      	movs	r2, #4
 80039a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a7a      	ldr	r2, [pc, #488]	; (8003b94 <HAL_DMA_IRQHandler+0xa08>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d04a      	beq.n	8003a44 <HAL_DMA_IRQHandler+0x8b8>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a79      	ldr	r2, [pc, #484]	; (8003b98 <HAL_DMA_IRQHandler+0xa0c>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d045      	beq.n	8003a44 <HAL_DMA_IRQHandler+0x8b8>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a77      	ldr	r2, [pc, #476]	; (8003b9c <HAL_DMA_IRQHandler+0xa10>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d040      	beq.n	8003a44 <HAL_DMA_IRQHandler+0x8b8>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4a76      	ldr	r2, [pc, #472]	; (8003ba0 <HAL_DMA_IRQHandler+0xa14>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d03b      	beq.n	8003a44 <HAL_DMA_IRQHandler+0x8b8>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a74      	ldr	r2, [pc, #464]	; (8003ba4 <HAL_DMA_IRQHandler+0xa18>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d036      	beq.n	8003a44 <HAL_DMA_IRQHandler+0x8b8>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4a73      	ldr	r2, [pc, #460]	; (8003ba8 <HAL_DMA_IRQHandler+0xa1c>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d031      	beq.n	8003a44 <HAL_DMA_IRQHandler+0x8b8>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a71      	ldr	r2, [pc, #452]	; (8003bac <HAL_DMA_IRQHandler+0xa20>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d02c      	beq.n	8003a44 <HAL_DMA_IRQHandler+0x8b8>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a70      	ldr	r2, [pc, #448]	; (8003bb0 <HAL_DMA_IRQHandler+0xa24>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d027      	beq.n	8003a44 <HAL_DMA_IRQHandler+0x8b8>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a6e      	ldr	r2, [pc, #440]	; (8003bb4 <HAL_DMA_IRQHandler+0xa28>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d022      	beq.n	8003a44 <HAL_DMA_IRQHandler+0x8b8>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a6d      	ldr	r2, [pc, #436]	; (8003bb8 <HAL_DMA_IRQHandler+0xa2c>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d01d      	beq.n	8003a44 <HAL_DMA_IRQHandler+0x8b8>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a6b      	ldr	r2, [pc, #428]	; (8003bbc <HAL_DMA_IRQHandler+0xa30>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d018      	beq.n	8003a44 <HAL_DMA_IRQHandler+0x8b8>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a6a      	ldr	r2, [pc, #424]	; (8003bc0 <HAL_DMA_IRQHandler+0xa34>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d013      	beq.n	8003a44 <HAL_DMA_IRQHandler+0x8b8>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a68      	ldr	r2, [pc, #416]	; (8003bc4 <HAL_DMA_IRQHandler+0xa38>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d00e      	beq.n	8003a44 <HAL_DMA_IRQHandler+0x8b8>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4a67      	ldr	r2, [pc, #412]	; (8003bc8 <HAL_DMA_IRQHandler+0xa3c>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d009      	beq.n	8003a44 <HAL_DMA_IRQHandler+0x8b8>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a65      	ldr	r2, [pc, #404]	; (8003bcc <HAL_DMA_IRQHandler+0xa40>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d004      	beq.n	8003a44 <HAL_DMA_IRQHandler+0x8b8>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4a64      	ldr	r2, [pc, #400]	; (8003bd0 <HAL_DMA_IRQHandler+0xa44>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d108      	bne.n	8003a56 <HAL_DMA_IRQHandler+0x8ca>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	681a      	ldr	r2, [r3, #0]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f022 0201 	bic.w	r2, r2, #1
 8003a52:	601a      	str	r2, [r3, #0]
 8003a54:	e007      	b.n	8003a66 <HAL_DMA_IRQHandler+0x8da>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	681a      	ldr	r2, [r3, #0]
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f022 0201 	bic.w	r2, r2, #1
 8003a64:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	3301      	adds	r3, #1
 8003a6a:	60fb      	str	r3, [r7, #12]
 8003a6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a6e:	429a      	cmp	r2, r3
 8003a70:	d307      	bcc.n	8003a82 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f003 0301 	and.w	r3, r3, #1
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d1f2      	bne.n	8003a66 <HAL_DMA_IRQHandler+0x8da>
 8003a80:	e000      	b.n	8003a84 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8003a82:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2200      	movs	r2, #0
 8003a88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f003 0301 	and.w	r3, r3, #1
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d004      	beq.n	8003aa4 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2203      	movs	r2, #3
 8003a9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8003aa2:	e003      	b.n	8003aac <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2201      	movs	r2, #1
 8003aa8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	f000 8272 	beq.w	8003f9a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003aba:	6878      	ldr	r0, [r7, #4]
 8003abc:	4798      	blx	r3
 8003abe:	e26c      	b.n	8003f9a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4a43      	ldr	r2, [pc, #268]	; (8003bd4 <HAL_DMA_IRQHandler+0xa48>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d022      	beq.n	8003b10 <HAL_DMA_IRQHandler+0x984>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4a42      	ldr	r2, [pc, #264]	; (8003bd8 <HAL_DMA_IRQHandler+0xa4c>)
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d01d      	beq.n	8003b10 <HAL_DMA_IRQHandler+0x984>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a40      	ldr	r2, [pc, #256]	; (8003bdc <HAL_DMA_IRQHandler+0xa50>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d018      	beq.n	8003b10 <HAL_DMA_IRQHandler+0x984>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4a3f      	ldr	r2, [pc, #252]	; (8003be0 <HAL_DMA_IRQHandler+0xa54>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d013      	beq.n	8003b10 <HAL_DMA_IRQHandler+0x984>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a3d      	ldr	r2, [pc, #244]	; (8003be4 <HAL_DMA_IRQHandler+0xa58>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d00e      	beq.n	8003b10 <HAL_DMA_IRQHandler+0x984>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4a3c      	ldr	r2, [pc, #240]	; (8003be8 <HAL_DMA_IRQHandler+0xa5c>)
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d009      	beq.n	8003b10 <HAL_DMA_IRQHandler+0x984>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4a3a      	ldr	r2, [pc, #232]	; (8003bec <HAL_DMA_IRQHandler+0xa60>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d004      	beq.n	8003b10 <HAL_DMA_IRQHandler+0x984>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4a39      	ldr	r2, [pc, #228]	; (8003bf0 <HAL_DMA_IRQHandler+0xa64>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d101      	bne.n	8003b14 <HAL_DMA_IRQHandler+0x988>
 8003b10:	2301      	movs	r3, #1
 8003b12:	e000      	b.n	8003b16 <HAL_DMA_IRQHandler+0x98a>
 8003b14:	2300      	movs	r3, #0
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	f000 823f 	beq.w	8003f9a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b28:	f003 031f 	and.w	r3, r3, #31
 8003b2c:	2204      	movs	r2, #4
 8003b2e:	409a      	lsls	r2, r3
 8003b30:	697b      	ldr	r3, [r7, #20]
 8003b32:	4013      	ands	r3, r2
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	f000 80cd 	beq.w	8003cd4 <HAL_DMA_IRQHandler+0xb48>
 8003b3a:	693b      	ldr	r3, [r7, #16]
 8003b3c:	f003 0304 	and.w	r3, r3, #4
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	f000 80c7 	beq.w	8003cd4 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b4a:	f003 031f 	and.w	r3, r3, #31
 8003b4e:	2204      	movs	r2, #4
 8003b50:	409a      	lsls	r2, r3
 8003b52:	69fb      	ldr	r3, [r7, #28]
 8003b54:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003b56:	693b      	ldr	r3, [r7, #16]
 8003b58:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d049      	beq.n	8003bf4 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003b60:	693b      	ldr	r3, [r7, #16]
 8003b62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d109      	bne.n	8003b7e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	f000 8210 	beq.w	8003f94 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b78:	6878      	ldr	r0, [r7, #4]
 8003b7a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003b7c:	e20a      	b.n	8003f94 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	f000 8206 	beq.w	8003f94 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b8c:	6878      	ldr	r0, [r7, #4]
 8003b8e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003b90:	e200      	b.n	8003f94 <HAL_DMA_IRQHandler+0xe08>
 8003b92:	bf00      	nop
 8003b94:	40020010 	.word	0x40020010
 8003b98:	40020028 	.word	0x40020028
 8003b9c:	40020040 	.word	0x40020040
 8003ba0:	40020058 	.word	0x40020058
 8003ba4:	40020070 	.word	0x40020070
 8003ba8:	40020088 	.word	0x40020088
 8003bac:	400200a0 	.word	0x400200a0
 8003bb0:	400200b8 	.word	0x400200b8
 8003bb4:	40020410 	.word	0x40020410
 8003bb8:	40020428 	.word	0x40020428
 8003bbc:	40020440 	.word	0x40020440
 8003bc0:	40020458 	.word	0x40020458
 8003bc4:	40020470 	.word	0x40020470
 8003bc8:	40020488 	.word	0x40020488
 8003bcc:	400204a0 	.word	0x400204a0
 8003bd0:	400204b8 	.word	0x400204b8
 8003bd4:	58025408 	.word	0x58025408
 8003bd8:	5802541c 	.word	0x5802541c
 8003bdc:	58025430 	.word	0x58025430
 8003be0:	58025444 	.word	0x58025444
 8003be4:	58025458 	.word	0x58025458
 8003be8:	5802546c 	.word	0x5802546c
 8003bec:	58025480 	.word	0x58025480
 8003bf0:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003bf4:	693b      	ldr	r3, [r7, #16]
 8003bf6:	f003 0320 	and.w	r3, r3, #32
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d160      	bne.n	8003cc0 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4a8c      	ldr	r2, [pc, #560]	; (8003e34 <HAL_DMA_IRQHandler+0xca8>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d04a      	beq.n	8003c9e <HAL_DMA_IRQHandler+0xb12>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4a8a      	ldr	r2, [pc, #552]	; (8003e38 <HAL_DMA_IRQHandler+0xcac>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d045      	beq.n	8003c9e <HAL_DMA_IRQHandler+0xb12>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a89      	ldr	r2, [pc, #548]	; (8003e3c <HAL_DMA_IRQHandler+0xcb0>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d040      	beq.n	8003c9e <HAL_DMA_IRQHandler+0xb12>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a87      	ldr	r2, [pc, #540]	; (8003e40 <HAL_DMA_IRQHandler+0xcb4>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d03b      	beq.n	8003c9e <HAL_DMA_IRQHandler+0xb12>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4a86      	ldr	r2, [pc, #536]	; (8003e44 <HAL_DMA_IRQHandler+0xcb8>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d036      	beq.n	8003c9e <HAL_DMA_IRQHandler+0xb12>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a84      	ldr	r2, [pc, #528]	; (8003e48 <HAL_DMA_IRQHandler+0xcbc>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d031      	beq.n	8003c9e <HAL_DMA_IRQHandler+0xb12>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4a83      	ldr	r2, [pc, #524]	; (8003e4c <HAL_DMA_IRQHandler+0xcc0>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d02c      	beq.n	8003c9e <HAL_DMA_IRQHandler+0xb12>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a81      	ldr	r2, [pc, #516]	; (8003e50 <HAL_DMA_IRQHandler+0xcc4>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d027      	beq.n	8003c9e <HAL_DMA_IRQHandler+0xb12>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4a80      	ldr	r2, [pc, #512]	; (8003e54 <HAL_DMA_IRQHandler+0xcc8>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d022      	beq.n	8003c9e <HAL_DMA_IRQHandler+0xb12>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4a7e      	ldr	r2, [pc, #504]	; (8003e58 <HAL_DMA_IRQHandler+0xccc>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d01d      	beq.n	8003c9e <HAL_DMA_IRQHandler+0xb12>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4a7d      	ldr	r2, [pc, #500]	; (8003e5c <HAL_DMA_IRQHandler+0xcd0>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d018      	beq.n	8003c9e <HAL_DMA_IRQHandler+0xb12>
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a7b      	ldr	r2, [pc, #492]	; (8003e60 <HAL_DMA_IRQHandler+0xcd4>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d013      	beq.n	8003c9e <HAL_DMA_IRQHandler+0xb12>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4a7a      	ldr	r2, [pc, #488]	; (8003e64 <HAL_DMA_IRQHandler+0xcd8>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d00e      	beq.n	8003c9e <HAL_DMA_IRQHandler+0xb12>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a78      	ldr	r2, [pc, #480]	; (8003e68 <HAL_DMA_IRQHandler+0xcdc>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d009      	beq.n	8003c9e <HAL_DMA_IRQHandler+0xb12>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4a77      	ldr	r2, [pc, #476]	; (8003e6c <HAL_DMA_IRQHandler+0xce0>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d004      	beq.n	8003c9e <HAL_DMA_IRQHandler+0xb12>
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4a75      	ldr	r2, [pc, #468]	; (8003e70 <HAL_DMA_IRQHandler+0xce4>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d108      	bne.n	8003cb0 <HAL_DMA_IRQHandler+0xb24>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	681a      	ldr	r2, [r3, #0]
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f022 0208 	bic.w	r2, r2, #8
 8003cac:	601a      	str	r2, [r3, #0]
 8003cae:	e007      	b.n	8003cc0 <HAL_DMA_IRQHandler+0xb34>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	681a      	ldr	r2, [r3, #0]
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f022 0204 	bic.w	r2, r2, #4
 8003cbe:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	f000 8165 	beq.w	8003f94 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cce:	6878      	ldr	r0, [r7, #4]
 8003cd0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003cd2:	e15f      	b.n	8003f94 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cd8:	f003 031f 	and.w	r3, r3, #31
 8003cdc:	2202      	movs	r2, #2
 8003cde:	409a      	lsls	r2, r3
 8003ce0:	697b      	ldr	r3, [r7, #20]
 8003ce2:	4013      	ands	r3, r2
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	f000 80c5 	beq.w	8003e74 <HAL_DMA_IRQHandler+0xce8>
 8003cea:	693b      	ldr	r3, [r7, #16]
 8003cec:	f003 0302 	and.w	r3, r3, #2
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	f000 80bf 	beq.w	8003e74 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cfa:	f003 031f 	and.w	r3, r3, #31
 8003cfe:	2202      	movs	r2, #2
 8003d00:	409a      	lsls	r2, r3
 8003d02:	69fb      	ldr	r3, [r7, #28]
 8003d04:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003d06:	693b      	ldr	r3, [r7, #16]
 8003d08:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d018      	beq.n	8003d42 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003d10:	693b      	ldr	r3, [r7, #16]
 8003d12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d109      	bne.n	8003d2e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	f000 813a 	beq.w	8003f98 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d28:	6878      	ldr	r0, [r7, #4]
 8003d2a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003d2c:	e134      	b.n	8003f98 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	f000 8130 	beq.w	8003f98 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d3c:	6878      	ldr	r0, [r7, #4]
 8003d3e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003d40:	e12a      	b.n	8003f98 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003d42:	693b      	ldr	r3, [r7, #16]
 8003d44:	f003 0320 	and.w	r3, r3, #32
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d168      	bne.n	8003e1e <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a38      	ldr	r2, [pc, #224]	; (8003e34 <HAL_DMA_IRQHandler+0xca8>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d04a      	beq.n	8003dec <HAL_DMA_IRQHandler+0xc60>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4a37      	ldr	r2, [pc, #220]	; (8003e38 <HAL_DMA_IRQHandler+0xcac>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d045      	beq.n	8003dec <HAL_DMA_IRQHandler+0xc60>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4a35      	ldr	r2, [pc, #212]	; (8003e3c <HAL_DMA_IRQHandler+0xcb0>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d040      	beq.n	8003dec <HAL_DMA_IRQHandler+0xc60>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4a34      	ldr	r2, [pc, #208]	; (8003e40 <HAL_DMA_IRQHandler+0xcb4>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d03b      	beq.n	8003dec <HAL_DMA_IRQHandler+0xc60>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4a32      	ldr	r2, [pc, #200]	; (8003e44 <HAL_DMA_IRQHandler+0xcb8>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d036      	beq.n	8003dec <HAL_DMA_IRQHandler+0xc60>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4a31      	ldr	r2, [pc, #196]	; (8003e48 <HAL_DMA_IRQHandler+0xcbc>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d031      	beq.n	8003dec <HAL_DMA_IRQHandler+0xc60>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4a2f      	ldr	r2, [pc, #188]	; (8003e4c <HAL_DMA_IRQHandler+0xcc0>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d02c      	beq.n	8003dec <HAL_DMA_IRQHandler+0xc60>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4a2e      	ldr	r2, [pc, #184]	; (8003e50 <HAL_DMA_IRQHandler+0xcc4>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d027      	beq.n	8003dec <HAL_DMA_IRQHandler+0xc60>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4a2c      	ldr	r2, [pc, #176]	; (8003e54 <HAL_DMA_IRQHandler+0xcc8>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d022      	beq.n	8003dec <HAL_DMA_IRQHandler+0xc60>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4a2b      	ldr	r2, [pc, #172]	; (8003e58 <HAL_DMA_IRQHandler+0xccc>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d01d      	beq.n	8003dec <HAL_DMA_IRQHandler+0xc60>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a29      	ldr	r2, [pc, #164]	; (8003e5c <HAL_DMA_IRQHandler+0xcd0>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d018      	beq.n	8003dec <HAL_DMA_IRQHandler+0xc60>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4a28      	ldr	r2, [pc, #160]	; (8003e60 <HAL_DMA_IRQHandler+0xcd4>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d013      	beq.n	8003dec <HAL_DMA_IRQHandler+0xc60>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4a26      	ldr	r2, [pc, #152]	; (8003e64 <HAL_DMA_IRQHandler+0xcd8>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d00e      	beq.n	8003dec <HAL_DMA_IRQHandler+0xc60>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4a25      	ldr	r2, [pc, #148]	; (8003e68 <HAL_DMA_IRQHandler+0xcdc>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d009      	beq.n	8003dec <HAL_DMA_IRQHandler+0xc60>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4a23      	ldr	r2, [pc, #140]	; (8003e6c <HAL_DMA_IRQHandler+0xce0>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d004      	beq.n	8003dec <HAL_DMA_IRQHandler+0xc60>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4a22      	ldr	r2, [pc, #136]	; (8003e70 <HAL_DMA_IRQHandler+0xce4>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d108      	bne.n	8003dfe <HAL_DMA_IRQHandler+0xc72>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	681a      	ldr	r2, [r3, #0]
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f022 0214 	bic.w	r2, r2, #20
 8003dfa:	601a      	str	r2, [r3, #0]
 8003dfc:	e007      	b.n	8003e0e <HAL_DMA_IRQHandler+0xc82>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	681a      	ldr	r2, [r3, #0]
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f022 020a 	bic.w	r2, r2, #10
 8003e0c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2200      	movs	r2, #0
 8003e12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2201      	movs	r2, #1
 8003e1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	f000 80b8 	beq.w	8003f98 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e2c:	6878      	ldr	r0, [r7, #4]
 8003e2e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003e30:	e0b2      	b.n	8003f98 <HAL_DMA_IRQHandler+0xe0c>
 8003e32:	bf00      	nop
 8003e34:	40020010 	.word	0x40020010
 8003e38:	40020028 	.word	0x40020028
 8003e3c:	40020040 	.word	0x40020040
 8003e40:	40020058 	.word	0x40020058
 8003e44:	40020070 	.word	0x40020070
 8003e48:	40020088 	.word	0x40020088
 8003e4c:	400200a0 	.word	0x400200a0
 8003e50:	400200b8 	.word	0x400200b8
 8003e54:	40020410 	.word	0x40020410
 8003e58:	40020428 	.word	0x40020428
 8003e5c:	40020440 	.word	0x40020440
 8003e60:	40020458 	.word	0x40020458
 8003e64:	40020470 	.word	0x40020470
 8003e68:	40020488 	.word	0x40020488
 8003e6c:	400204a0 	.word	0x400204a0
 8003e70:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e78:	f003 031f 	and.w	r3, r3, #31
 8003e7c:	2208      	movs	r2, #8
 8003e7e:	409a      	lsls	r2, r3
 8003e80:	697b      	ldr	r3, [r7, #20]
 8003e82:	4013      	ands	r3, r2
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	f000 8088 	beq.w	8003f9a <HAL_DMA_IRQHandler+0xe0e>
 8003e8a:	693b      	ldr	r3, [r7, #16]
 8003e8c:	f003 0308 	and.w	r3, r3, #8
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	f000 8082 	beq.w	8003f9a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4a41      	ldr	r2, [pc, #260]	; (8003fa0 <HAL_DMA_IRQHandler+0xe14>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d04a      	beq.n	8003f36 <HAL_DMA_IRQHandler+0xdaa>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4a3f      	ldr	r2, [pc, #252]	; (8003fa4 <HAL_DMA_IRQHandler+0xe18>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d045      	beq.n	8003f36 <HAL_DMA_IRQHandler+0xdaa>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4a3e      	ldr	r2, [pc, #248]	; (8003fa8 <HAL_DMA_IRQHandler+0xe1c>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d040      	beq.n	8003f36 <HAL_DMA_IRQHandler+0xdaa>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4a3c      	ldr	r2, [pc, #240]	; (8003fac <HAL_DMA_IRQHandler+0xe20>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d03b      	beq.n	8003f36 <HAL_DMA_IRQHandler+0xdaa>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4a3b      	ldr	r2, [pc, #236]	; (8003fb0 <HAL_DMA_IRQHandler+0xe24>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d036      	beq.n	8003f36 <HAL_DMA_IRQHandler+0xdaa>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4a39      	ldr	r2, [pc, #228]	; (8003fb4 <HAL_DMA_IRQHandler+0xe28>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d031      	beq.n	8003f36 <HAL_DMA_IRQHandler+0xdaa>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4a38      	ldr	r2, [pc, #224]	; (8003fb8 <HAL_DMA_IRQHandler+0xe2c>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d02c      	beq.n	8003f36 <HAL_DMA_IRQHandler+0xdaa>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4a36      	ldr	r2, [pc, #216]	; (8003fbc <HAL_DMA_IRQHandler+0xe30>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d027      	beq.n	8003f36 <HAL_DMA_IRQHandler+0xdaa>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4a35      	ldr	r2, [pc, #212]	; (8003fc0 <HAL_DMA_IRQHandler+0xe34>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d022      	beq.n	8003f36 <HAL_DMA_IRQHandler+0xdaa>
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4a33      	ldr	r2, [pc, #204]	; (8003fc4 <HAL_DMA_IRQHandler+0xe38>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d01d      	beq.n	8003f36 <HAL_DMA_IRQHandler+0xdaa>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4a32      	ldr	r2, [pc, #200]	; (8003fc8 <HAL_DMA_IRQHandler+0xe3c>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d018      	beq.n	8003f36 <HAL_DMA_IRQHandler+0xdaa>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4a30      	ldr	r2, [pc, #192]	; (8003fcc <HAL_DMA_IRQHandler+0xe40>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d013      	beq.n	8003f36 <HAL_DMA_IRQHandler+0xdaa>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	4a2f      	ldr	r2, [pc, #188]	; (8003fd0 <HAL_DMA_IRQHandler+0xe44>)
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d00e      	beq.n	8003f36 <HAL_DMA_IRQHandler+0xdaa>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	4a2d      	ldr	r2, [pc, #180]	; (8003fd4 <HAL_DMA_IRQHandler+0xe48>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d009      	beq.n	8003f36 <HAL_DMA_IRQHandler+0xdaa>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4a2c      	ldr	r2, [pc, #176]	; (8003fd8 <HAL_DMA_IRQHandler+0xe4c>)
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d004      	beq.n	8003f36 <HAL_DMA_IRQHandler+0xdaa>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4a2a      	ldr	r2, [pc, #168]	; (8003fdc <HAL_DMA_IRQHandler+0xe50>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d108      	bne.n	8003f48 <HAL_DMA_IRQHandler+0xdbc>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	681a      	ldr	r2, [r3, #0]
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f022 021c 	bic.w	r2, r2, #28
 8003f44:	601a      	str	r2, [r3, #0]
 8003f46:	e007      	b.n	8003f58 <HAL_DMA_IRQHandler+0xdcc>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	681a      	ldr	r2, [r3, #0]
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f022 020e 	bic.w	r2, r2, #14
 8003f56:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f5c:	f003 031f 	and.w	r3, r3, #31
 8003f60:	2201      	movs	r2, #1
 8003f62:	409a      	lsls	r2, r3
 8003f64:	69fb      	ldr	r3, [r7, #28]
 8003f66:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2201      	movs	r2, #1
 8003f6c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2200      	movs	r2, #0
 8003f72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2201      	movs	r2, #1
 8003f7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d009      	beq.n	8003f9a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f8a:	6878      	ldr	r0, [r7, #4]
 8003f8c:	4798      	blx	r3
 8003f8e:	e004      	b.n	8003f9a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8003f90:	bf00      	nop
 8003f92:	e002      	b.n	8003f9a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003f94:	bf00      	nop
 8003f96:	e000      	b.n	8003f9a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003f98:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003f9a:	3728      	adds	r7, #40	; 0x28
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	bd80      	pop	{r7, pc}
 8003fa0:	40020010 	.word	0x40020010
 8003fa4:	40020028 	.word	0x40020028
 8003fa8:	40020040 	.word	0x40020040
 8003fac:	40020058 	.word	0x40020058
 8003fb0:	40020070 	.word	0x40020070
 8003fb4:	40020088 	.word	0x40020088
 8003fb8:	400200a0 	.word	0x400200a0
 8003fbc:	400200b8 	.word	0x400200b8
 8003fc0:	40020410 	.word	0x40020410
 8003fc4:	40020428 	.word	0x40020428
 8003fc8:	40020440 	.word	0x40020440
 8003fcc:	40020458 	.word	0x40020458
 8003fd0:	40020470 	.word	0x40020470
 8003fd4:	40020488 	.word	0x40020488
 8003fd8:	400204a0 	.word	0x400204a0
 8003fdc:	400204b8 	.word	0x400204b8

08003fe0 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	b083      	sub	sp, #12
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8003fec:	4618      	mov	r0, r3
 8003fee:	370c      	adds	r7, #12
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff6:	4770      	bx	lr

08003ff8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	b087      	sub	sp, #28
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	60f8      	str	r0, [r7, #12]
 8004000:	60b9      	str	r1, [r7, #8]
 8004002:	607a      	str	r2, [r7, #4]
 8004004:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800400a:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004010:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4a84      	ldr	r2, [pc, #528]	; (8004228 <DMA_SetConfig+0x230>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d072      	beq.n	8004102 <DMA_SetConfig+0x10a>
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a82      	ldr	r2, [pc, #520]	; (800422c <DMA_SetConfig+0x234>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d06d      	beq.n	8004102 <DMA_SetConfig+0x10a>
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4a81      	ldr	r2, [pc, #516]	; (8004230 <DMA_SetConfig+0x238>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d068      	beq.n	8004102 <DMA_SetConfig+0x10a>
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4a7f      	ldr	r2, [pc, #508]	; (8004234 <DMA_SetConfig+0x23c>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d063      	beq.n	8004102 <DMA_SetConfig+0x10a>
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4a7e      	ldr	r2, [pc, #504]	; (8004238 <DMA_SetConfig+0x240>)
 8004040:	4293      	cmp	r3, r2
 8004042:	d05e      	beq.n	8004102 <DMA_SetConfig+0x10a>
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4a7c      	ldr	r2, [pc, #496]	; (800423c <DMA_SetConfig+0x244>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d059      	beq.n	8004102 <DMA_SetConfig+0x10a>
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4a7b      	ldr	r2, [pc, #492]	; (8004240 <DMA_SetConfig+0x248>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d054      	beq.n	8004102 <DMA_SetConfig+0x10a>
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4a79      	ldr	r2, [pc, #484]	; (8004244 <DMA_SetConfig+0x24c>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d04f      	beq.n	8004102 <DMA_SetConfig+0x10a>
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4a78      	ldr	r2, [pc, #480]	; (8004248 <DMA_SetConfig+0x250>)
 8004068:	4293      	cmp	r3, r2
 800406a:	d04a      	beq.n	8004102 <DMA_SetConfig+0x10a>
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4a76      	ldr	r2, [pc, #472]	; (800424c <DMA_SetConfig+0x254>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d045      	beq.n	8004102 <DMA_SetConfig+0x10a>
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4a75      	ldr	r2, [pc, #468]	; (8004250 <DMA_SetConfig+0x258>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d040      	beq.n	8004102 <DMA_SetConfig+0x10a>
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4a73      	ldr	r2, [pc, #460]	; (8004254 <DMA_SetConfig+0x25c>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d03b      	beq.n	8004102 <DMA_SetConfig+0x10a>
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4a72      	ldr	r2, [pc, #456]	; (8004258 <DMA_SetConfig+0x260>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d036      	beq.n	8004102 <DMA_SetConfig+0x10a>
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4a70      	ldr	r2, [pc, #448]	; (800425c <DMA_SetConfig+0x264>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d031      	beq.n	8004102 <DMA_SetConfig+0x10a>
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4a6f      	ldr	r2, [pc, #444]	; (8004260 <DMA_SetConfig+0x268>)
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d02c      	beq.n	8004102 <DMA_SetConfig+0x10a>
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4a6d      	ldr	r2, [pc, #436]	; (8004264 <DMA_SetConfig+0x26c>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d027      	beq.n	8004102 <DMA_SetConfig+0x10a>
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	4a6c      	ldr	r2, [pc, #432]	; (8004268 <DMA_SetConfig+0x270>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d022      	beq.n	8004102 <DMA_SetConfig+0x10a>
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4a6a      	ldr	r2, [pc, #424]	; (800426c <DMA_SetConfig+0x274>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d01d      	beq.n	8004102 <DMA_SetConfig+0x10a>
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4a69      	ldr	r2, [pc, #420]	; (8004270 <DMA_SetConfig+0x278>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d018      	beq.n	8004102 <DMA_SetConfig+0x10a>
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a67      	ldr	r2, [pc, #412]	; (8004274 <DMA_SetConfig+0x27c>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d013      	beq.n	8004102 <DMA_SetConfig+0x10a>
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4a66      	ldr	r2, [pc, #408]	; (8004278 <DMA_SetConfig+0x280>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d00e      	beq.n	8004102 <DMA_SetConfig+0x10a>
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4a64      	ldr	r2, [pc, #400]	; (800427c <DMA_SetConfig+0x284>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d009      	beq.n	8004102 <DMA_SetConfig+0x10a>
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4a63      	ldr	r2, [pc, #396]	; (8004280 <DMA_SetConfig+0x288>)
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d004      	beq.n	8004102 <DMA_SetConfig+0x10a>
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4a61      	ldr	r2, [pc, #388]	; (8004284 <DMA_SetConfig+0x28c>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d101      	bne.n	8004106 <DMA_SetConfig+0x10e>
 8004102:	2301      	movs	r3, #1
 8004104:	e000      	b.n	8004108 <DMA_SetConfig+0x110>
 8004106:	2300      	movs	r3, #0
 8004108:	2b00      	cmp	r3, #0
 800410a:	d00d      	beq.n	8004128 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004110:	68fa      	ldr	r2, [r7, #12]
 8004112:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004114:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800411a:	2b00      	cmp	r3, #0
 800411c:	d004      	beq.n	8004128 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004122:	68fa      	ldr	r2, [r7, #12]
 8004124:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004126:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a3e      	ldr	r2, [pc, #248]	; (8004228 <DMA_SetConfig+0x230>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d04a      	beq.n	80041c8 <DMA_SetConfig+0x1d0>
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4a3d      	ldr	r2, [pc, #244]	; (800422c <DMA_SetConfig+0x234>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d045      	beq.n	80041c8 <DMA_SetConfig+0x1d0>
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4a3b      	ldr	r2, [pc, #236]	; (8004230 <DMA_SetConfig+0x238>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d040      	beq.n	80041c8 <DMA_SetConfig+0x1d0>
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4a3a      	ldr	r2, [pc, #232]	; (8004234 <DMA_SetConfig+0x23c>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d03b      	beq.n	80041c8 <DMA_SetConfig+0x1d0>
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4a38      	ldr	r2, [pc, #224]	; (8004238 <DMA_SetConfig+0x240>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d036      	beq.n	80041c8 <DMA_SetConfig+0x1d0>
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4a37      	ldr	r2, [pc, #220]	; (800423c <DMA_SetConfig+0x244>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d031      	beq.n	80041c8 <DMA_SetConfig+0x1d0>
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4a35      	ldr	r2, [pc, #212]	; (8004240 <DMA_SetConfig+0x248>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d02c      	beq.n	80041c8 <DMA_SetConfig+0x1d0>
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4a34      	ldr	r2, [pc, #208]	; (8004244 <DMA_SetConfig+0x24c>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d027      	beq.n	80041c8 <DMA_SetConfig+0x1d0>
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a32      	ldr	r2, [pc, #200]	; (8004248 <DMA_SetConfig+0x250>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d022      	beq.n	80041c8 <DMA_SetConfig+0x1d0>
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4a31      	ldr	r2, [pc, #196]	; (800424c <DMA_SetConfig+0x254>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d01d      	beq.n	80041c8 <DMA_SetConfig+0x1d0>
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a2f      	ldr	r2, [pc, #188]	; (8004250 <DMA_SetConfig+0x258>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d018      	beq.n	80041c8 <DMA_SetConfig+0x1d0>
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4a2e      	ldr	r2, [pc, #184]	; (8004254 <DMA_SetConfig+0x25c>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d013      	beq.n	80041c8 <DMA_SetConfig+0x1d0>
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4a2c      	ldr	r2, [pc, #176]	; (8004258 <DMA_SetConfig+0x260>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d00e      	beq.n	80041c8 <DMA_SetConfig+0x1d0>
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4a2b      	ldr	r2, [pc, #172]	; (800425c <DMA_SetConfig+0x264>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d009      	beq.n	80041c8 <DMA_SetConfig+0x1d0>
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4a29      	ldr	r2, [pc, #164]	; (8004260 <DMA_SetConfig+0x268>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d004      	beq.n	80041c8 <DMA_SetConfig+0x1d0>
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4a28      	ldr	r2, [pc, #160]	; (8004264 <DMA_SetConfig+0x26c>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d101      	bne.n	80041cc <DMA_SetConfig+0x1d4>
 80041c8:	2301      	movs	r3, #1
 80041ca:	e000      	b.n	80041ce <DMA_SetConfig+0x1d6>
 80041cc:	2300      	movs	r3, #0
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d05a      	beq.n	8004288 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041d6:	f003 031f 	and.w	r3, r3, #31
 80041da:	223f      	movs	r2, #63	; 0x3f
 80041dc:	409a      	lsls	r2, r3
 80041de:	697b      	ldr	r3, [r7, #20]
 80041e0:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	681a      	ldr	r2, [r3, #0]
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80041f0:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	683a      	ldr	r2, [r7, #0]
 80041f8:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	689b      	ldr	r3, [r3, #8]
 80041fe:	2b40      	cmp	r3, #64	; 0x40
 8004200:	d108      	bne.n	8004214 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	687a      	ldr	r2, [r7, #4]
 8004208:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	68ba      	ldr	r2, [r7, #8]
 8004210:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004212:	e087      	b.n	8004324 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	68ba      	ldr	r2, [r7, #8]
 800421a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	687a      	ldr	r2, [r7, #4]
 8004222:	60da      	str	r2, [r3, #12]
}
 8004224:	e07e      	b.n	8004324 <DMA_SetConfig+0x32c>
 8004226:	bf00      	nop
 8004228:	40020010 	.word	0x40020010
 800422c:	40020028 	.word	0x40020028
 8004230:	40020040 	.word	0x40020040
 8004234:	40020058 	.word	0x40020058
 8004238:	40020070 	.word	0x40020070
 800423c:	40020088 	.word	0x40020088
 8004240:	400200a0 	.word	0x400200a0
 8004244:	400200b8 	.word	0x400200b8
 8004248:	40020410 	.word	0x40020410
 800424c:	40020428 	.word	0x40020428
 8004250:	40020440 	.word	0x40020440
 8004254:	40020458 	.word	0x40020458
 8004258:	40020470 	.word	0x40020470
 800425c:	40020488 	.word	0x40020488
 8004260:	400204a0 	.word	0x400204a0
 8004264:	400204b8 	.word	0x400204b8
 8004268:	58025408 	.word	0x58025408
 800426c:	5802541c 	.word	0x5802541c
 8004270:	58025430 	.word	0x58025430
 8004274:	58025444 	.word	0x58025444
 8004278:	58025458 	.word	0x58025458
 800427c:	5802546c 	.word	0x5802546c
 8004280:	58025480 	.word	0x58025480
 8004284:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4a28      	ldr	r2, [pc, #160]	; (8004330 <DMA_SetConfig+0x338>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d022      	beq.n	80042d8 <DMA_SetConfig+0x2e0>
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	4a27      	ldr	r2, [pc, #156]	; (8004334 <DMA_SetConfig+0x33c>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d01d      	beq.n	80042d8 <DMA_SetConfig+0x2e0>
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	4a25      	ldr	r2, [pc, #148]	; (8004338 <DMA_SetConfig+0x340>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d018      	beq.n	80042d8 <DMA_SetConfig+0x2e0>
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	4a24      	ldr	r2, [pc, #144]	; (800433c <DMA_SetConfig+0x344>)
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d013      	beq.n	80042d8 <DMA_SetConfig+0x2e0>
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4a22      	ldr	r2, [pc, #136]	; (8004340 <DMA_SetConfig+0x348>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d00e      	beq.n	80042d8 <DMA_SetConfig+0x2e0>
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4a21      	ldr	r2, [pc, #132]	; (8004344 <DMA_SetConfig+0x34c>)
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d009      	beq.n	80042d8 <DMA_SetConfig+0x2e0>
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	4a1f      	ldr	r2, [pc, #124]	; (8004348 <DMA_SetConfig+0x350>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d004      	beq.n	80042d8 <DMA_SetConfig+0x2e0>
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4a1e      	ldr	r2, [pc, #120]	; (800434c <DMA_SetConfig+0x354>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d101      	bne.n	80042dc <DMA_SetConfig+0x2e4>
 80042d8:	2301      	movs	r3, #1
 80042da:	e000      	b.n	80042de <DMA_SetConfig+0x2e6>
 80042dc:	2300      	movs	r3, #0
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d020      	beq.n	8004324 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042e6:	f003 031f 	and.w	r3, r3, #31
 80042ea:	2201      	movs	r2, #1
 80042ec:	409a      	lsls	r2, r3
 80042ee:	693b      	ldr	r3, [r7, #16]
 80042f0:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	683a      	ldr	r2, [r7, #0]
 80042f8:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	689b      	ldr	r3, [r3, #8]
 80042fe:	2b40      	cmp	r3, #64	; 0x40
 8004300:	d108      	bne.n	8004314 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	687a      	ldr	r2, [r7, #4]
 8004308:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	68ba      	ldr	r2, [r7, #8]
 8004310:	60da      	str	r2, [r3, #12]
}
 8004312:	e007      	b.n	8004324 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	68ba      	ldr	r2, [r7, #8]
 800431a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	687a      	ldr	r2, [r7, #4]
 8004322:	60da      	str	r2, [r3, #12]
}
 8004324:	bf00      	nop
 8004326:	371c      	adds	r7, #28
 8004328:	46bd      	mov	sp, r7
 800432a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432e:	4770      	bx	lr
 8004330:	58025408 	.word	0x58025408
 8004334:	5802541c 	.word	0x5802541c
 8004338:	58025430 	.word	0x58025430
 800433c:	58025444 	.word	0x58025444
 8004340:	58025458 	.word	0x58025458
 8004344:	5802546c 	.word	0x5802546c
 8004348:	58025480 	.word	0x58025480
 800434c:	58025494 	.word	0x58025494

08004350 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004350:	b480      	push	{r7}
 8004352:	b085      	sub	sp, #20
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4a42      	ldr	r2, [pc, #264]	; (8004468 <DMA_CalcBaseAndBitshift+0x118>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d04a      	beq.n	80043f8 <DMA_CalcBaseAndBitshift+0xa8>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4a41      	ldr	r2, [pc, #260]	; (800446c <DMA_CalcBaseAndBitshift+0x11c>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d045      	beq.n	80043f8 <DMA_CalcBaseAndBitshift+0xa8>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4a3f      	ldr	r2, [pc, #252]	; (8004470 <DMA_CalcBaseAndBitshift+0x120>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d040      	beq.n	80043f8 <DMA_CalcBaseAndBitshift+0xa8>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4a3e      	ldr	r2, [pc, #248]	; (8004474 <DMA_CalcBaseAndBitshift+0x124>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d03b      	beq.n	80043f8 <DMA_CalcBaseAndBitshift+0xa8>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a3c      	ldr	r2, [pc, #240]	; (8004478 <DMA_CalcBaseAndBitshift+0x128>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d036      	beq.n	80043f8 <DMA_CalcBaseAndBitshift+0xa8>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4a3b      	ldr	r2, [pc, #236]	; (800447c <DMA_CalcBaseAndBitshift+0x12c>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d031      	beq.n	80043f8 <DMA_CalcBaseAndBitshift+0xa8>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4a39      	ldr	r2, [pc, #228]	; (8004480 <DMA_CalcBaseAndBitshift+0x130>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d02c      	beq.n	80043f8 <DMA_CalcBaseAndBitshift+0xa8>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4a38      	ldr	r2, [pc, #224]	; (8004484 <DMA_CalcBaseAndBitshift+0x134>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d027      	beq.n	80043f8 <DMA_CalcBaseAndBitshift+0xa8>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a36      	ldr	r2, [pc, #216]	; (8004488 <DMA_CalcBaseAndBitshift+0x138>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d022      	beq.n	80043f8 <DMA_CalcBaseAndBitshift+0xa8>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4a35      	ldr	r2, [pc, #212]	; (800448c <DMA_CalcBaseAndBitshift+0x13c>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d01d      	beq.n	80043f8 <DMA_CalcBaseAndBitshift+0xa8>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a33      	ldr	r2, [pc, #204]	; (8004490 <DMA_CalcBaseAndBitshift+0x140>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d018      	beq.n	80043f8 <DMA_CalcBaseAndBitshift+0xa8>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a32      	ldr	r2, [pc, #200]	; (8004494 <DMA_CalcBaseAndBitshift+0x144>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d013      	beq.n	80043f8 <DMA_CalcBaseAndBitshift+0xa8>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4a30      	ldr	r2, [pc, #192]	; (8004498 <DMA_CalcBaseAndBitshift+0x148>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d00e      	beq.n	80043f8 <DMA_CalcBaseAndBitshift+0xa8>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4a2f      	ldr	r2, [pc, #188]	; (800449c <DMA_CalcBaseAndBitshift+0x14c>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d009      	beq.n	80043f8 <DMA_CalcBaseAndBitshift+0xa8>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a2d      	ldr	r2, [pc, #180]	; (80044a0 <DMA_CalcBaseAndBitshift+0x150>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d004      	beq.n	80043f8 <DMA_CalcBaseAndBitshift+0xa8>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4a2c      	ldr	r2, [pc, #176]	; (80044a4 <DMA_CalcBaseAndBitshift+0x154>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d101      	bne.n	80043fc <DMA_CalcBaseAndBitshift+0xac>
 80043f8:	2301      	movs	r3, #1
 80043fa:	e000      	b.n	80043fe <DMA_CalcBaseAndBitshift+0xae>
 80043fc:	2300      	movs	r3, #0
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d024      	beq.n	800444c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	b2db      	uxtb	r3, r3
 8004408:	3b10      	subs	r3, #16
 800440a:	4a27      	ldr	r2, [pc, #156]	; (80044a8 <DMA_CalcBaseAndBitshift+0x158>)
 800440c:	fba2 2303 	umull	r2, r3, r2, r3
 8004410:	091b      	lsrs	r3, r3, #4
 8004412:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	f003 0307 	and.w	r3, r3, #7
 800441a:	4a24      	ldr	r2, [pc, #144]	; (80044ac <DMA_CalcBaseAndBitshift+0x15c>)
 800441c:	5cd3      	ldrb	r3, [r2, r3]
 800441e:	461a      	mov	r2, r3
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	2b03      	cmp	r3, #3
 8004428:	d908      	bls.n	800443c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	461a      	mov	r2, r3
 8004430:	4b1f      	ldr	r3, [pc, #124]	; (80044b0 <DMA_CalcBaseAndBitshift+0x160>)
 8004432:	4013      	ands	r3, r2
 8004434:	1d1a      	adds	r2, r3, #4
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	659a      	str	r2, [r3, #88]	; 0x58
 800443a:	e00d      	b.n	8004458 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	461a      	mov	r2, r3
 8004442:	4b1b      	ldr	r3, [pc, #108]	; (80044b0 <DMA_CalcBaseAndBitshift+0x160>)
 8004444:	4013      	ands	r3, r2
 8004446:	687a      	ldr	r2, [r7, #4]
 8004448:	6593      	str	r3, [r2, #88]	; 0x58
 800444a:	e005      	b.n	8004458 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800445c:	4618      	mov	r0, r3
 800445e:	3714      	adds	r7, #20
 8004460:	46bd      	mov	sp, r7
 8004462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004466:	4770      	bx	lr
 8004468:	40020010 	.word	0x40020010
 800446c:	40020028 	.word	0x40020028
 8004470:	40020040 	.word	0x40020040
 8004474:	40020058 	.word	0x40020058
 8004478:	40020070 	.word	0x40020070
 800447c:	40020088 	.word	0x40020088
 8004480:	400200a0 	.word	0x400200a0
 8004484:	400200b8 	.word	0x400200b8
 8004488:	40020410 	.word	0x40020410
 800448c:	40020428 	.word	0x40020428
 8004490:	40020440 	.word	0x40020440
 8004494:	40020458 	.word	0x40020458
 8004498:	40020470 	.word	0x40020470
 800449c:	40020488 	.word	0x40020488
 80044a0:	400204a0 	.word	0x400204a0
 80044a4:	400204b8 	.word	0x400204b8
 80044a8:	aaaaaaab 	.word	0xaaaaaaab
 80044ac:	0800cd58 	.word	0x0800cd58
 80044b0:	fffffc00 	.word	0xfffffc00

080044b4 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80044b4:	b480      	push	{r7}
 80044b6:	b085      	sub	sp, #20
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80044bc:	2300      	movs	r3, #0
 80044be:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	699b      	ldr	r3, [r3, #24]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d120      	bne.n	800450a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044cc:	2b03      	cmp	r3, #3
 80044ce:	d858      	bhi.n	8004582 <DMA_CheckFifoParam+0xce>
 80044d0:	a201      	add	r2, pc, #4	; (adr r2, 80044d8 <DMA_CheckFifoParam+0x24>)
 80044d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044d6:	bf00      	nop
 80044d8:	080044e9 	.word	0x080044e9
 80044dc:	080044fb 	.word	0x080044fb
 80044e0:	080044e9 	.word	0x080044e9
 80044e4:	08004583 	.word	0x08004583
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044ec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d048      	beq.n	8004586 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80044f4:	2301      	movs	r3, #1
 80044f6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80044f8:	e045      	b.n	8004586 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044fe:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004502:	d142      	bne.n	800458a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004504:	2301      	movs	r3, #1
 8004506:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004508:	e03f      	b.n	800458a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	699b      	ldr	r3, [r3, #24]
 800450e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004512:	d123      	bne.n	800455c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004518:	2b03      	cmp	r3, #3
 800451a:	d838      	bhi.n	800458e <DMA_CheckFifoParam+0xda>
 800451c:	a201      	add	r2, pc, #4	; (adr r2, 8004524 <DMA_CheckFifoParam+0x70>)
 800451e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004522:	bf00      	nop
 8004524:	08004535 	.word	0x08004535
 8004528:	0800453b 	.word	0x0800453b
 800452c:	08004535 	.word	0x08004535
 8004530:	0800454d 	.word	0x0800454d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004534:	2301      	movs	r3, #1
 8004536:	73fb      	strb	r3, [r7, #15]
        break;
 8004538:	e030      	b.n	800459c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800453e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004542:	2b00      	cmp	r3, #0
 8004544:	d025      	beq.n	8004592 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8004546:	2301      	movs	r3, #1
 8004548:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800454a:	e022      	b.n	8004592 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004550:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004554:	d11f      	bne.n	8004596 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004556:	2301      	movs	r3, #1
 8004558:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800455a:	e01c      	b.n	8004596 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004560:	2b02      	cmp	r3, #2
 8004562:	d902      	bls.n	800456a <DMA_CheckFifoParam+0xb6>
 8004564:	2b03      	cmp	r3, #3
 8004566:	d003      	beq.n	8004570 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004568:	e018      	b.n	800459c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800456a:	2301      	movs	r3, #1
 800456c:	73fb      	strb	r3, [r7, #15]
        break;
 800456e:	e015      	b.n	800459c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004574:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004578:	2b00      	cmp	r3, #0
 800457a:	d00e      	beq.n	800459a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800457c:	2301      	movs	r3, #1
 800457e:	73fb      	strb	r3, [r7, #15]
    break;
 8004580:	e00b      	b.n	800459a <DMA_CheckFifoParam+0xe6>
        break;
 8004582:	bf00      	nop
 8004584:	e00a      	b.n	800459c <DMA_CheckFifoParam+0xe8>
        break;
 8004586:	bf00      	nop
 8004588:	e008      	b.n	800459c <DMA_CheckFifoParam+0xe8>
        break;
 800458a:	bf00      	nop
 800458c:	e006      	b.n	800459c <DMA_CheckFifoParam+0xe8>
        break;
 800458e:	bf00      	nop
 8004590:	e004      	b.n	800459c <DMA_CheckFifoParam+0xe8>
        break;
 8004592:	bf00      	nop
 8004594:	e002      	b.n	800459c <DMA_CheckFifoParam+0xe8>
        break;
 8004596:	bf00      	nop
 8004598:	e000      	b.n	800459c <DMA_CheckFifoParam+0xe8>
    break;
 800459a:	bf00      	nop
    }
  }

  return status;
 800459c:	7bfb      	ldrb	r3, [r7, #15]
}
 800459e:	4618      	mov	r0, r3
 80045a0:	3714      	adds	r7, #20
 80045a2:	46bd      	mov	sp, r7
 80045a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a8:	4770      	bx	lr
 80045aa:	bf00      	nop

080045ac <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80045ac:	b480      	push	{r7}
 80045ae:	b085      	sub	sp, #20
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	4a38      	ldr	r2, [pc, #224]	; (80046a0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d022      	beq.n	800460a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	4a36      	ldr	r2, [pc, #216]	; (80046a4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d01d      	beq.n	800460a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4a35      	ldr	r2, [pc, #212]	; (80046a8 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d018      	beq.n	800460a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	4a33      	ldr	r2, [pc, #204]	; (80046ac <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d013      	beq.n	800460a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	4a32      	ldr	r2, [pc, #200]	; (80046b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d00e      	beq.n	800460a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4a30      	ldr	r2, [pc, #192]	; (80046b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d009      	beq.n	800460a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4a2f      	ldr	r2, [pc, #188]	; (80046b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d004      	beq.n	800460a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	4a2d      	ldr	r2, [pc, #180]	; (80046bc <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d101      	bne.n	800460e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800460a:	2301      	movs	r3, #1
 800460c:	e000      	b.n	8004610 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800460e:	2300      	movs	r3, #0
 8004610:	2b00      	cmp	r3, #0
 8004612:	d01a      	beq.n	800464a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	b2db      	uxtb	r3, r3
 800461a:	3b08      	subs	r3, #8
 800461c:	4a28      	ldr	r2, [pc, #160]	; (80046c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800461e:	fba2 2303 	umull	r2, r3, r2, r3
 8004622:	091b      	lsrs	r3, r3, #4
 8004624:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004626:	68fa      	ldr	r2, [r7, #12]
 8004628:	4b26      	ldr	r3, [pc, #152]	; (80046c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800462a:	4413      	add	r3, r2
 800462c:	009b      	lsls	r3, r3, #2
 800462e:	461a      	mov	r2, r3
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	4a24      	ldr	r2, [pc, #144]	; (80046c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004638:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	f003 031f 	and.w	r3, r3, #31
 8004640:	2201      	movs	r2, #1
 8004642:	409a      	lsls	r2, r3
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004648:	e024      	b.n	8004694 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	b2db      	uxtb	r3, r3
 8004650:	3b10      	subs	r3, #16
 8004652:	4a1e      	ldr	r2, [pc, #120]	; (80046cc <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004654:	fba2 2303 	umull	r2, r3, r2, r3
 8004658:	091b      	lsrs	r3, r3, #4
 800465a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800465c:	68bb      	ldr	r3, [r7, #8]
 800465e:	4a1c      	ldr	r2, [pc, #112]	; (80046d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d806      	bhi.n	8004672 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004664:	68bb      	ldr	r3, [r7, #8]
 8004666:	4a1b      	ldr	r2, [pc, #108]	; (80046d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d902      	bls.n	8004672 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	3308      	adds	r3, #8
 8004670:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004672:	68fa      	ldr	r2, [r7, #12]
 8004674:	4b18      	ldr	r3, [pc, #96]	; (80046d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004676:	4413      	add	r3, r2
 8004678:	009b      	lsls	r3, r3, #2
 800467a:	461a      	mov	r2, r3
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	4a16      	ldr	r2, [pc, #88]	; (80046dc <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004684:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	f003 031f 	and.w	r3, r3, #31
 800468c:	2201      	movs	r2, #1
 800468e:	409a      	lsls	r2, r3
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004694:	bf00      	nop
 8004696:	3714      	adds	r7, #20
 8004698:	46bd      	mov	sp, r7
 800469a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469e:	4770      	bx	lr
 80046a0:	58025408 	.word	0x58025408
 80046a4:	5802541c 	.word	0x5802541c
 80046a8:	58025430 	.word	0x58025430
 80046ac:	58025444 	.word	0x58025444
 80046b0:	58025458 	.word	0x58025458
 80046b4:	5802546c 	.word	0x5802546c
 80046b8:	58025480 	.word	0x58025480
 80046bc:	58025494 	.word	0x58025494
 80046c0:	cccccccd 	.word	0xcccccccd
 80046c4:	16009600 	.word	0x16009600
 80046c8:	58025880 	.word	0x58025880
 80046cc:	aaaaaaab 	.word	0xaaaaaaab
 80046d0:	400204b8 	.word	0x400204b8
 80046d4:	4002040f 	.word	0x4002040f
 80046d8:	10008200 	.word	0x10008200
 80046dc:	40020880 	.word	0x40020880

080046e0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80046e0:	b480      	push	{r7}
 80046e2:	b085      	sub	sp, #20
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	685b      	ldr	r3, [r3, #4]
 80046ec:	b2db      	uxtb	r3, r3
 80046ee:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d04a      	beq.n	800478c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	2b08      	cmp	r3, #8
 80046fa:	d847      	bhi.n	800478c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	4a25      	ldr	r2, [pc, #148]	; (8004798 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d022      	beq.n	800474c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4a24      	ldr	r2, [pc, #144]	; (800479c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800470c:	4293      	cmp	r3, r2
 800470e:	d01d      	beq.n	800474c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4a22      	ldr	r2, [pc, #136]	; (80047a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d018      	beq.n	800474c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4a21      	ldr	r2, [pc, #132]	; (80047a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d013      	beq.n	800474c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	4a1f      	ldr	r2, [pc, #124]	; (80047a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d00e      	beq.n	800474c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	4a1e      	ldr	r2, [pc, #120]	; (80047ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004734:	4293      	cmp	r3, r2
 8004736:	d009      	beq.n	800474c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4a1c      	ldr	r2, [pc, #112]	; (80047b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d004      	beq.n	800474c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4a1b      	ldr	r2, [pc, #108]	; (80047b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004748:	4293      	cmp	r3, r2
 800474a:	d101      	bne.n	8004750 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800474c:	2301      	movs	r3, #1
 800474e:	e000      	b.n	8004752 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004750:	2300      	movs	r3, #0
 8004752:	2b00      	cmp	r3, #0
 8004754:	d00a      	beq.n	800476c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004756:	68fa      	ldr	r2, [r7, #12]
 8004758:	4b17      	ldr	r3, [pc, #92]	; (80047b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800475a:	4413      	add	r3, r2
 800475c:	009b      	lsls	r3, r3, #2
 800475e:	461a      	mov	r2, r3
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	4a15      	ldr	r2, [pc, #84]	; (80047bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004768:	671a      	str	r2, [r3, #112]	; 0x70
 800476a:	e009      	b.n	8004780 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800476c:	68fa      	ldr	r2, [r7, #12]
 800476e:	4b14      	ldr	r3, [pc, #80]	; (80047c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004770:	4413      	add	r3, r2
 8004772:	009b      	lsls	r3, r3, #2
 8004774:	461a      	mov	r2, r3
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	4a11      	ldr	r2, [pc, #68]	; (80047c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800477e:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	3b01      	subs	r3, #1
 8004784:	2201      	movs	r2, #1
 8004786:	409a      	lsls	r2, r3
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 800478c:	bf00      	nop
 800478e:	3714      	adds	r7, #20
 8004790:	46bd      	mov	sp, r7
 8004792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004796:	4770      	bx	lr
 8004798:	58025408 	.word	0x58025408
 800479c:	5802541c 	.word	0x5802541c
 80047a0:	58025430 	.word	0x58025430
 80047a4:	58025444 	.word	0x58025444
 80047a8:	58025458 	.word	0x58025458
 80047ac:	5802546c 	.word	0x5802546c
 80047b0:	58025480 	.word	0x58025480
 80047b4:	58025494 	.word	0x58025494
 80047b8:	1600963f 	.word	0x1600963f
 80047bc:	58025940 	.word	0x58025940
 80047c0:	1000823f 	.word	0x1000823f
 80047c4:	40020940 	.word	0x40020940

080047c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80047c8:	b480      	push	{r7}
 80047ca:	b089      	sub	sp, #36	; 0x24
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
 80047d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80047d2:	2300      	movs	r3, #0
 80047d4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80047d6:	4b89      	ldr	r3, [pc, #548]	; (80049fc <HAL_GPIO_Init+0x234>)
 80047d8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80047da:	e194      	b.n	8004b06 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	681a      	ldr	r2, [r3, #0]
 80047e0:	2101      	movs	r1, #1
 80047e2:	69fb      	ldr	r3, [r7, #28]
 80047e4:	fa01 f303 	lsl.w	r3, r1, r3
 80047e8:	4013      	ands	r3, r2
 80047ea:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80047ec:	693b      	ldr	r3, [r7, #16]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	f000 8186 	beq.w	8004b00 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	685b      	ldr	r3, [r3, #4]
 80047f8:	2b01      	cmp	r3, #1
 80047fa:	d00b      	beq.n	8004814 <HAL_GPIO_Init+0x4c>
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	685b      	ldr	r3, [r3, #4]
 8004800:	2b02      	cmp	r3, #2
 8004802:	d007      	beq.n	8004814 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004808:	2b11      	cmp	r3, #17
 800480a:	d003      	beq.n	8004814 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	685b      	ldr	r3, [r3, #4]
 8004810:	2b12      	cmp	r3, #18
 8004812:	d130      	bne.n	8004876 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	689b      	ldr	r3, [r3, #8]
 8004818:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800481a:	69fb      	ldr	r3, [r7, #28]
 800481c:	005b      	lsls	r3, r3, #1
 800481e:	2203      	movs	r2, #3
 8004820:	fa02 f303 	lsl.w	r3, r2, r3
 8004824:	43db      	mvns	r3, r3
 8004826:	69ba      	ldr	r2, [r7, #24]
 8004828:	4013      	ands	r3, r2
 800482a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	68da      	ldr	r2, [r3, #12]
 8004830:	69fb      	ldr	r3, [r7, #28]
 8004832:	005b      	lsls	r3, r3, #1
 8004834:	fa02 f303 	lsl.w	r3, r2, r3
 8004838:	69ba      	ldr	r2, [r7, #24]
 800483a:	4313      	orrs	r3, r2
 800483c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	69ba      	ldr	r2, [r7, #24]
 8004842:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	685b      	ldr	r3, [r3, #4]
 8004848:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800484a:	2201      	movs	r2, #1
 800484c:	69fb      	ldr	r3, [r7, #28]
 800484e:	fa02 f303 	lsl.w	r3, r2, r3
 8004852:	43db      	mvns	r3, r3
 8004854:	69ba      	ldr	r2, [r7, #24]
 8004856:	4013      	ands	r3, r2
 8004858:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	685b      	ldr	r3, [r3, #4]
 800485e:	091b      	lsrs	r3, r3, #4
 8004860:	f003 0201 	and.w	r2, r3, #1
 8004864:	69fb      	ldr	r3, [r7, #28]
 8004866:	fa02 f303 	lsl.w	r3, r2, r3
 800486a:	69ba      	ldr	r2, [r7, #24]
 800486c:	4313      	orrs	r3, r2
 800486e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	69ba      	ldr	r2, [r7, #24]
 8004874:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	68db      	ldr	r3, [r3, #12]
 800487a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800487c:	69fb      	ldr	r3, [r7, #28]
 800487e:	005b      	lsls	r3, r3, #1
 8004880:	2203      	movs	r2, #3
 8004882:	fa02 f303 	lsl.w	r3, r2, r3
 8004886:	43db      	mvns	r3, r3
 8004888:	69ba      	ldr	r2, [r7, #24]
 800488a:	4013      	ands	r3, r2
 800488c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	689a      	ldr	r2, [r3, #8]
 8004892:	69fb      	ldr	r3, [r7, #28]
 8004894:	005b      	lsls	r3, r3, #1
 8004896:	fa02 f303 	lsl.w	r3, r2, r3
 800489a:	69ba      	ldr	r2, [r7, #24]
 800489c:	4313      	orrs	r3, r2
 800489e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	69ba      	ldr	r2, [r7, #24]
 80048a4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	685b      	ldr	r3, [r3, #4]
 80048aa:	2b02      	cmp	r3, #2
 80048ac:	d003      	beq.n	80048b6 <HAL_GPIO_Init+0xee>
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	685b      	ldr	r3, [r3, #4]
 80048b2:	2b12      	cmp	r3, #18
 80048b4:	d123      	bne.n	80048fe <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80048b6:	69fb      	ldr	r3, [r7, #28]
 80048b8:	08da      	lsrs	r2, r3, #3
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	3208      	adds	r2, #8
 80048be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80048c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80048c4:	69fb      	ldr	r3, [r7, #28]
 80048c6:	f003 0307 	and.w	r3, r3, #7
 80048ca:	009b      	lsls	r3, r3, #2
 80048cc:	220f      	movs	r2, #15
 80048ce:	fa02 f303 	lsl.w	r3, r2, r3
 80048d2:	43db      	mvns	r3, r3
 80048d4:	69ba      	ldr	r2, [r7, #24]
 80048d6:	4013      	ands	r3, r2
 80048d8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	691a      	ldr	r2, [r3, #16]
 80048de:	69fb      	ldr	r3, [r7, #28]
 80048e0:	f003 0307 	and.w	r3, r3, #7
 80048e4:	009b      	lsls	r3, r3, #2
 80048e6:	fa02 f303 	lsl.w	r3, r2, r3
 80048ea:	69ba      	ldr	r2, [r7, #24]
 80048ec:	4313      	orrs	r3, r2
 80048ee:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80048f0:	69fb      	ldr	r3, [r7, #28]
 80048f2:	08da      	lsrs	r2, r3, #3
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	3208      	adds	r2, #8
 80048f8:	69b9      	ldr	r1, [r7, #24]
 80048fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004904:	69fb      	ldr	r3, [r7, #28]
 8004906:	005b      	lsls	r3, r3, #1
 8004908:	2203      	movs	r2, #3
 800490a:	fa02 f303 	lsl.w	r3, r2, r3
 800490e:	43db      	mvns	r3, r3
 8004910:	69ba      	ldr	r2, [r7, #24]
 8004912:	4013      	ands	r3, r2
 8004914:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	685b      	ldr	r3, [r3, #4]
 800491a:	f003 0203 	and.w	r2, r3, #3
 800491e:	69fb      	ldr	r3, [r7, #28]
 8004920:	005b      	lsls	r3, r3, #1
 8004922:	fa02 f303 	lsl.w	r3, r2, r3
 8004926:	69ba      	ldr	r2, [r7, #24]
 8004928:	4313      	orrs	r3, r2
 800492a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	69ba      	ldr	r2, [r7, #24]
 8004930:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	685b      	ldr	r3, [r3, #4]
 8004936:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800493a:	2b00      	cmp	r3, #0
 800493c:	f000 80e0 	beq.w	8004b00 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004940:	4b2f      	ldr	r3, [pc, #188]	; (8004a00 <HAL_GPIO_Init+0x238>)
 8004942:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004946:	4a2e      	ldr	r2, [pc, #184]	; (8004a00 <HAL_GPIO_Init+0x238>)
 8004948:	f043 0302 	orr.w	r3, r3, #2
 800494c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004950:	4b2b      	ldr	r3, [pc, #172]	; (8004a00 <HAL_GPIO_Init+0x238>)
 8004952:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004956:	f003 0302 	and.w	r3, r3, #2
 800495a:	60fb      	str	r3, [r7, #12]
 800495c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800495e:	4a29      	ldr	r2, [pc, #164]	; (8004a04 <HAL_GPIO_Init+0x23c>)
 8004960:	69fb      	ldr	r3, [r7, #28]
 8004962:	089b      	lsrs	r3, r3, #2
 8004964:	3302      	adds	r3, #2
 8004966:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800496a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800496c:	69fb      	ldr	r3, [r7, #28]
 800496e:	f003 0303 	and.w	r3, r3, #3
 8004972:	009b      	lsls	r3, r3, #2
 8004974:	220f      	movs	r2, #15
 8004976:	fa02 f303 	lsl.w	r3, r2, r3
 800497a:	43db      	mvns	r3, r3
 800497c:	69ba      	ldr	r2, [r7, #24]
 800497e:	4013      	ands	r3, r2
 8004980:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	4a20      	ldr	r2, [pc, #128]	; (8004a08 <HAL_GPIO_Init+0x240>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d052      	beq.n	8004a30 <HAL_GPIO_Init+0x268>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	4a1f      	ldr	r2, [pc, #124]	; (8004a0c <HAL_GPIO_Init+0x244>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d031      	beq.n	80049f6 <HAL_GPIO_Init+0x22e>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	4a1e      	ldr	r2, [pc, #120]	; (8004a10 <HAL_GPIO_Init+0x248>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d02b      	beq.n	80049f2 <HAL_GPIO_Init+0x22a>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	4a1d      	ldr	r2, [pc, #116]	; (8004a14 <HAL_GPIO_Init+0x24c>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d025      	beq.n	80049ee <HAL_GPIO_Init+0x226>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	4a1c      	ldr	r2, [pc, #112]	; (8004a18 <HAL_GPIO_Init+0x250>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d01f      	beq.n	80049ea <HAL_GPIO_Init+0x222>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	4a1b      	ldr	r2, [pc, #108]	; (8004a1c <HAL_GPIO_Init+0x254>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d019      	beq.n	80049e6 <HAL_GPIO_Init+0x21e>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	4a1a      	ldr	r2, [pc, #104]	; (8004a20 <HAL_GPIO_Init+0x258>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d013      	beq.n	80049e2 <HAL_GPIO_Init+0x21a>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	4a19      	ldr	r2, [pc, #100]	; (8004a24 <HAL_GPIO_Init+0x25c>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d00d      	beq.n	80049de <HAL_GPIO_Init+0x216>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	4a18      	ldr	r2, [pc, #96]	; (8004a28 <HAL_GPIO_Init+0x260>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d007      	beq.n	80049da <HAL_GPIO_Init+0x212>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	4a17      	ldr	r2, [pc, #92]	; (8004a2c <HAL_GPIO_Init+0x264>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d101      	bne.n	80049d6 <HAL_GPIO_Init+0x20e>
 80049d2:	2309      	movs	r3, #9
 80049d4:	e02d      	b.n	8004a32 <HAL_GPIO_Init+0x26a>
 80049d6:	230a      	movs	r3, #10
 80049d8:	e02b      	b.n	8004a32 <HAL_GPIO_Init+0x26a>
 80049da:	2308      	movs	r3, #8
 80049dc:	e029      	b.n	8004a32 <HAL_GPIO_Init+0x26a>
 80049de:	2307      	movs	r3, #7
 80049e0:	e027      	b.n	8004a32 <HAL_GPIO_Init+0x26a>
 80049e2:	2306      	movs	r3, #6
 80049e4:	e025      	b.n	8004a32 <HAL_GPIO_Init+0x26a>
 80049e6:	2305      	movs	r3, #5
 80049e8:	e023      	b.n	8004a32 <HAL_GPIO_Init+0x26a>
 80049ea:	2304      	movs	r3, #4
 80049ec:	e021      	b.n	8004a32 <HAL_GPIO_Init+0x26a>
 80049ee:	2303      	movs	r3, #3
 80049f0:	e01f      	b.n	8004a32 <HAL_GPIO_Init+0x26a>
 80049f2:	2302      	movs	r3, #2
 80049f4:	e01d      	b.n	8004a32 <HAL_GPIO_Init+0x26a>
 80049f6:	2301      	movs	r3, #1
 80049f8:	e01b      	b.n	8004a32 <HAL_GPIO_Init+0x26a>
 80049fa:	bf00      	nop
 80049fc:	58000080 	.word	0x58000080
 8004a00:	58024400 	.word	0x58024400
 8004a04:	58000400 	.word	0x58000400
 8004a08:	58020000 	.word	0x58020000
 8004a0c:	58020400 	.word	0x58020400
 8004a10:	58020800 	.word	0x58020800
 8004a14:	58020c00 	.word	0x58020c00
 8004a18:	58021000 	.word	0x58021000
 8004a1c:	58021400 	.word	0x58021400
 8004a20:	58021800 	.word	0x58021800
 8004a24:	58021c00 	.word	0x58021c00
 8004a28:	58022000 	.word	0x58022000
 8004a2c:	58022400 	.word	0x58022400
 8004a30:	2300      	movs	r3, #0
 8004a32:	69fa      	ldr	r2, [r7, #28]
 8004a34:	f002 0203 	and.w	r2, r2, #3
 8004a38:	0092      	lsls	r2, r2, #2
 8004a3a:	4093      	lsls	r3, r2
 8004a3c:	69ba      	ldr	r2, [r7, #24]
 8004a3e:	4313      	orrs	r3, r2
 8004a40:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004a42:	4938      	ldr	r1, [pc, #224]	; (8004b24 <HAL_GPIO_Init+0x35c>)
 8004a44:	69fb      	ldr	r3, [r7, #28]
 8004a46:	089b      	lsrs	r3, r3, #2
 8004a48:	3302      	adds	r3, #2
 8004a4a:	69ba      	ldr	r2, [r7, #24]
 8004a4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004a50:	697b      	ldr	r3, [r7, #20]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004a56:	693b      	ldr	r3, [r7, #16]
 8004a58:	43db      	mvns	r3, r3
 8004a5a:	69ba      	ldr	r2, [r7, #24]
 8004a5c:	4013      	ands	r3, r2
 8004a5e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	685b      	ldr	r3, [r3, #4]
 8004a64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d003      	beq.n	8004a74 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004a6c:	69ba      	ldr	r2, [r7, #24]
 8004a6e:	693b      	ldr	r3, [r7, #16]
 8004a70:	4313      	orrs	r3, r2
 8004a72:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004a74:	697b      	ldr	r3, [r7, #20]
 8004a76:	69ba      	ldr	r2, [r7, #24]
 8004a78:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8004a7a:	697b      	ldr	r3, [r7, #20]
 8004a7c:	685b      	ldr	r3, [r3, #4]
 8004a7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004a80:	693b      	ldr	r3, [r7, #16]
 8004a82:	43db      	mvns	r3, r3
 8004a84:	69ba      	ldr	r2, [r7, #24]
 8004a86:	4013      	ands	r3, r2
 8004a88:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	685b      	ldr	r3, [r3, #4]
 8004a8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d003      	beq.n	8004a9e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004a96:	69ba      	ldr	r2, [r7, #24]
 8004a98:	693b      	ldr	r3, [r7, #16]
 8004a9a:	4313      	orrs	r3, r2
 8004a9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004a9e:	697b      	ldr	r3, [r7, #20]
 8004aa0:	69ba      	ldr	r2, [r7, #24]
 8004aa2:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004aa4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004aac:	693b      	ldr	r3, [r7, #16]
 8004aae:	43db      	mvns	r3, r3
 8004ab0:	69ba      	ldr	r2, [r7, #24]
 8004ab2:	4013      	ands	r3, r2
 8004ab4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	685b      	ldr	r3, [r3, #4]
 8004aba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d003      	beq.n	8004aca <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8004ac2:	69ba      	ldr	r2, [r7, #24]
 8004ac4:	693b      	ldr	r3, [r7, #16]
 8004ac6:	4313      	orrs	r3, r2
 8004ac8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004aca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004ace:	69bb      	ldr	r3, [r7, #24]
 8004ad0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004ad2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ad6:	685b      	ldr	r3, [r3, #4]
 8004ad8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004ada:	693b      	ldr	r3, [r7, #16]
 8004adc:	43db      	mvns	r3, r3
 8004ade:	69ba      	ldr	r2, [r7, #24]
 8004ae0:	4013      	ands	r3, r2
 8004ae2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	685b      	ldr	r3, [r3, #4]
 8004ae8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d003      	beq.n	8004af8 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8004af0:	69ba      	ldr	r2, [r7, #24]
 8004af2:	693b      	ldr	r3, [r7, #16]
 8004af4:	4313      	orrs	r3, r2
 8004af6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004af8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004afc:	69bb      	ldr	r3, [r7, #24]
 8004afe:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8004b00:	69fb      	ldr	r3, [r7, #28]
 8004b02:	3301      	adds	r3, #1
 8004b04:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	681a      	ldr	r2, [r3, #0]
 8004b0a:	69fb      	ldr	r3, [r7, #28]
 8004b0c:	fa22 f303 	lsr.w	r3, r2, r3
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	f47f ae63 	bne.w	80047dc <HAL_GPIO_Init+0x14>
  }
}
 8004b16:	bf00      	nop
 8004b18:	bf00      	nop
 8004b1a:	3724      	adds	r7, #36	; 0x24
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b22:	4770      	bx	lr
 8004b24:	58000400 	.word	0x58000400

08004b28 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8004b28:	b480      	push	{r7}
 8004b2a:	b083      	sub	sp, #12
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8004b30:	4a08      	ldr	r2, [pc, #32]	; (8004b54 <HAL_HSEM_FastTake+0x2c>)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	3320      	adds	r3, #32
 8004b36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b3a:	4a07      	ldr	r2, [pc, #28]	; (8004b58 <HAL_HSEM_FastTake+0x30>)
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d101      	bne.n	8004b44 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8004b40:	2300      	movs	r3, #0
 8004b42:	e000      	b.n	8004b46 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8004b44:	2301      	movs	r3, #1
}
 8004b46:	4618      	mov	r0, r3
 8004b48:	370c      	adds	r7, #12
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b50:	4770      	bx	lr
 8004b52:	bf00      	nop
 8004b54:	58026400 	.word	0x58026400
 8004b58:	80000300 	.word	0x80000300

08004b5c <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	b083      	sub	sp, #12
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
 8004b64:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8004b66:	4906      	ldr	r1, [pc, #24]	; (8004b80 <HAL_HSEM_Release+0x24>)
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8004b74:	bf00      	nop
 8004b76:	370c      	adds	r7, #12
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7e:	4770      	bx	lr
 8004b80:	58026400 	.word	0x58026400

08004b84 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b084      	sub	sp, #16
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8004b8c:	4b29      	ldr	r3, [pc, #164]	; (8004c34 <HAL_PWREx_ConfigSupply+0xb0>)
 8004b8e:	68db      	ldr	r3, [r3, #12]
 8004b90:	f003 0307 	and.w	r3, r3, #7
 8004b94:	2b06      	cmp	r3, #6
 8004b96:	d00a      	beq.n	8004bae <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004b98:	4b26      	ldr	r3, [pc, #152]	; (8004c34 <HAL_PWREx_ConfigSupply+0xb0>)
 8004b9a:	68db      	ldr	r3, [r3, #12]
 8004b9c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004ba0:	687a      	ldr	r2, [r7, #4]
 8004ba2:	429a      	cmp	r2, r3
 8004ba4:	d001      	beq.n	8004baa <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	e040      	b.n	8004c2c <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004baa:	2300      	movs	r3, #0
 8004bac:	e03e      	b.n	8004c2c <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004bae:	4b21      	ldr	r3, [pc, #132]	; (8004c34 <HAL_PWREx_ConfigSupply+0xb0>)
 8004bb0:	68db      	ldr	r3, [r3, #12]
 8004bb2:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8004bb6:	491f      	ldr	r1, [pc, #124]	; (8004c34 <HAL_PWREx_ConfigSupply+0xb0>)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	4313      	orrs	r3, r2
 8004bbc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004bbe:	f7fc fd87 	bl	80016d0 <HAL_GetTick>
 8004bc2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004bc4:	e009      	b.n	8004bda <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004bc6:	f7fc fd83 	bl	80016d0 <HAL_GetTick>
 8004bca:	4602      	mov	r2, r0
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	1ad3      	subs	r3, r2, r3
 8004bd0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004bd4:	d901      	bls.n	8004bda <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	e028      	b.n	8004c2c <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004bda:	4b16      	ldr	r3, [pc, #88]	; (8004c34 <HAL_PWREx_ConfigSupply+0xb0>)
 8004bdc:	685b      	ldr	r3, [r3, #4]
 8004bde:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004be2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004be6:	d1ee      	bne.n	8004bc6 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2b1e      	cmp	r3, #30
 8004bec:	d008      	beq.n	8004c00 <HAL_PWREx_ConfigSupply+0x7c>
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2b2e      	cmp	r3, #46	; 0x2e
 8004bf2:	d005      	beq.n	8004c00 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2b1d      	cmp	r3, #29
 8004bf8:	d002      	beq.n	8004c00 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2b2d      	cmp	r3, #45	; 0x2d
 8004bfe:	d114      	bne.n	8004c2a <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8004c00:	f7fc fd66 	bl	80016d0 <HAL_GetTick>
 8004c04:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8004c06:	e009      	b.n	8004c1c <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004c08:	f7fc fd62 	bl	80016d0 <HAL_GetTick>
 8004c0c:	4602      	mov	r2, r0
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	1ad3      	subs	r3, r2, r3
 8004c12:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004c16:	d901      	bls.n	8004c1c <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8004c18:	2301      	movs	r3, #1
 8004c1a:	e007      	b.n	8004c2c <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8004c1c:	4b05      	ldr	r3, [pc, #20]	; (8004c34 <HAL_PWREx_ConfigSupply+0xb0>)
 8004c1e:	68db      	ldr	r3, [r3, #12]
 8004c20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c28:	d1ee      	bne.n	8004c08 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004c2a:	2300      	movs	r3, #0
}
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	3710      	adds	r7, #16
 8004c30:	46bd      	mov	sp, r7
 8004c32:	bd80      	pop	{r7, pc}
 8004c34:	58024800 	.word	0x58024800

08004c38 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b08c      	sub	sp, #48	; 0x30
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d101      	bne.n	8004c4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004c46:	2301      	movs	r3, #1
 8004c48:	e3ff      	b.n	800544a <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f003 0301 	and.w	r3, r3, #1
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	f000 8087 	beq.w	8004d66 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004c58:	4b99      	ldr	r3, [pc, #612]	; (8004ec0 <HAL_RCC_OscConfig+0x288>)
 8004c5a:	691b      	ldr	r3, [r3, #16]
 8004c5c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004c60:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004c62:	4b97      	ldr	r3, [pc, #604]	; (8004ec0 <HAL_RCC_OscConfig+0x288>)
 8004c64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c66:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004c68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c6a:	2b10      	cmp	r3, #16
 8004c6c:	d007      	beq.n	8004c7e <HAL_RCC_OscConfig+0x46>
 8004c6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c70:	2b18      	cmp	r3, #24
 8004c72:	d110      	bne.n	8004c96 <HAL_RCC_OscConfig+0x5e>
 8004c74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c76:	f003 0303 	and.w	r3, r3, #3
 8004c7a:	2b02      	cmp	r3, #2
 8004c7c:	d10b      	bne.n	8004c96 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c7e:	4b90      	ldr	r3, [pc, #576]	; (8004ec0 <HAL_RCC_OscConfig+0x288>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d06c      	beq.n	8004d64 <HAL_RCC_OscConfig+0x12c>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	685b      	ldr	r3, [r3, #4]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d168      	bne.n	8004d64 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004c92:	2301      	movs	r3, #1
 8004c94:	e3d9      	b.n	800544a <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	685b      	ldr	r3, [r3, #4]
 8004c9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c9e:	d106      	bne.n	8004cae <HAL_RCC_OscConfig+0x76>
 8004ca0:	4b87      	ldr	r3, [pc, #540]	; (8004ec0 <HAL_RCC_OscConfig+0x288>)
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4a86      	ldr	r2, [pc, #536]	; (8004ec0 <HAL_RCC_OscConfig+0x288>)
 8004ca6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004caa:	6013      	str	r3, [r2, #0]
 8004cac:	e02e      	b.n	8004d0c <HAL_RCC_OscConfig+0xd4>
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	685b      	ldr	r3, [r3, #4]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d10c      	bne.n	8004cd0 <HAL_RCC_OscConfig+0x98>
 8004cb6:	4b82      	ldr	r3, [pc, #520]	; (8004ec0 <HAL_RCC_OscConfig+0x288>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4a81      	ldr	r2, [pc, #516]	; (8004ec0 <HAL_RCC_OscConfig+0x288>)
 8004cbc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004cc0:	6013      	str	r3, [r2, #0]
 8004cc2:	4b7f      	ldr	r3, [pc, #508]	; (8004ec0 <HAL_RCC_OscConfig+0x288>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4a7e      	ldr	r2, [pc, #504]	; (8004ec0 <HAL_RCC_OscConfig+0x288>)
 8004cc8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004ccc:	6013      	str	r3, [r2, #0]
 8004cce:	e01d      	b.n	8004d0c <HAL_RCC_OscConfig+0xd4>
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	685b      	ldr	r3, [r3, #4]
 8004cd4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004cd8:	d10c      	bne.n	8004cf4 <HAL_RCC_OscConfig+0xbc>
 8004cda:	4b79      	ldr	r3, [pc, #484]	; (8004ec0 <HAL_RCC_OscConfig+0x288>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	4a78      	ldr	r2, [pc, #480]	; (8004ec0 <HAL_RCC_OscConfig+0x288>)
 8004ce0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004ce4:	6013      	str	r3, [r2, #0]
 8004ce6:	4b76      	ldr	r3, [pc, #472]	; (8004ec0 <HAL_RCC_OscConfig+0x288>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	4a75      	ldr	r2, [pc, #468]	; (8004ec0 <HAL_RCC_OscConfig+0x288>)
 8004cec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cf0:	6013      	str	r3, [r2, #0]
 8004cf2:	e00b      	b.n	8004d0c <HAL_RCC_OscConfig+0xd4>
 8004cf4:	4b72      	ldr	r3, [pc, #456]	; (8004ec0 <HAL_RCC_OscConfig+0x288>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	4a71      	ldr	r2, [pc, #452]	; (8004ec0 <HAL_RCC_OscConfig+0x288>)
 8004cfa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004cfe:	6013      	str	r3, [r2, #0]
 8004d00:	4b6f      	ldr	r3, [pc, #444]	; (8004ec0 <HAL_RCC_OscConfig+0x288>)
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4a6e      	ldr	r2, [pc, #440]	; (8004ec0 <HAL_RCC_OscConfig+0x288>)
 8004d06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004d0a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	685b      	ldr	r3, [r3, #4]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d013      	beq.n	8004d3c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d14:	f7fc fcdc 	bl	80016d0 <HAL_GetTick>
 8004d18:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004d1a:	e008      	b.n	8004d2e <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004d1c:	f7fc fcd8 	bl	80016d0 <HAL_GetTick>
 8004d20:	4602      	mov	r2, r0
 8004d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d24:	1ad3      	subs	r3, r2, r3
 8004d26:	2b64      	cmp	r3, #100	; 0x64
 8004d28:	d901      	bls.n	8004d2e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004d2a:	2303      	movs	r3, #3
 8004d2c:	e38d      	b.n	800544a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004d2e:	4b64      	ldr	r3, [pc, #400]	; (8004ec0 <HAL_RCC_OscConfig+0x288>)
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d0f0      	beq.n	8004d1c <HAL_RCC_OscConfig+0xe4>
 8004d3a:	e014      	b.n	8004d66 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d3c:	f7fc fcc8 	bl	80016d0 <HAL_GetTick>
 8004d40:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004d42:	e008      	b.n	8004d56 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004d44:	f7fc fcc4 	bl	80016d0 <HAL_GetTick>
 8004d48:	4602      	mov	r2, r0
 8004d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d4c:	1ad3      	subs	r3, r2, r3
 8004d4e:	2b64      	cmp	r3, #100	; 0x64
 8004d50:	d901      	bls.n	8004d56 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004d52:	2303      	movs	r3, #3
 8004d54:	e379      	b.n	800544a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004d56:	4b5a      	ldr	r3, [pc, #360]	; (8004ec0 <HAL_RCC_OscConfig+0x288>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d1f0      	bne.n	8004d44 <HAL_RCC_OscConfig+0x10c>
 8004d62:	e000      	b.n	8004d66 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f003 0302 	and.w	r3, r3, #2
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	f000 80ae 	beq.w	8004ed0 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d74:	4b52      	ldr	r3, [pc, #328]	; (8004ec0 <HAL_RCC_OscConfig+0x288>)
 8004d76:	691b      	ldr	r3, [r3, #16]
 8004d78:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004d7c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004d7e:	4b50      	ldr	r3, [pc, #320]	; (8004ec0 <HAL_RCC_OscConfig+0x288>)
 8004d80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d82:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004d84:	6a3b      	ldr	r3, [r7, #32]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d007      	beq.n	8004d9a <HAL_RCC_OscConfig+0x162>
 8004d8a:	6a3b      	ldr	r3, [r7, #32]
 8004d8c:	2b18      	cmp	r3, #24
 8004d8e:	d13a      	bne.n	8004e06 <HAL_RCC_OscConfig+0x1ce>
 8004d90:	69fb      	ldr	r3, [r7, #28]
 8004d92:	f003 0303 	and.w	r3, r3, #3
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d135      	bne.n	8004e06 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004d9a:	4b49      	ldr	r3, [pc, #292]	; (8004ec0 <HAL_RCC_OscConfig+0x288>)
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f003 0304 	and.w	r3, r3, #4
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d005      	beq.n	8004db2 <HAL_RCC_OscConfig+0x17a>
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	68db      	ldr	r3, [r3, #12]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d101      	bne.n	8004db2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004dae:	2301      	movs	r3, #1
 8004db0:	e34b      	b.n	800544a <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004db2:	f7fc fcbd 	bl	8001730 <HAL_GetREVID>
 8004db6:	4603      	mov	r3, r0
 8004db8:	f241 0203 	movw	r2, #4099	; 0x1003
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d817      	bhi.n	8004df0 <HAL_RCC_OscConfig+0x1b8>
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	691b      	ldr	r3, [r3, #16]
 8004dc4:	2b40      	cmp	r3, #64	; 0x40
 8004dc6:	d108      	bne.n	8004dda <HAL_RCC_OscConfig+0x1a2>
 8004dc8:	4b3d      	ldr	r3, [pc, #244]	; (8004ec0 <HAL_RCC_OscConfig+0x288>)
 8004dca:	685b      	ldr	r3, [r3, #4]
 8004dcc:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004dd0:	4a3b      	ldr	r2, [pc, #236]	; (8004ec0 <HAL_RCC_OscConfig+0x288>)
 8004dd2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004dd6:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004dd8:	e07a      	b.n	8004ed0 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004dda:	4b39      	ldr	r3, [pc, #228]	; (8004ec0 <HAL_RCC_OscConfig+0x288>)
 8004ddc:	685b      	ldr	r3, [r3, #4]
 8004dde:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	691b      	ldr	r3, [r3, #16]
 8004de6:	031b      	lsls	r3, r3, #12
 8004de8:	4935      	ldr	r1, [pc, #212]	; (8004ec0 <HAL_RCC_OscConfig+0x288>)
 8004dea:	4313      	orrs	r3, r2
 8004dec:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004dee:	e06f      	b.n	8004ed0 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004df0:	4b33      	ldr	r3, [pc, #204]	; (8004ec0 <HAL_RCC_OscConfig+0x288>)
 8004df2:	685b      	ldr	r3, [r3, #4]
 8004df4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	691b      	ldr	r3, [r3, #16]
 8004dfc:	061b      	lsls	r3, r3, #24
 8004dfe:	4930      	ldr	r1, [pc, #192]	; (8004ec0 <HAL_RCC_OscConfig+0x288>)
 8004e00:	4313      	orrs	r3, r2
 8004e02:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004e04:	e064      	b.n	8004ed0 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	68db      	ldr	r3, [r3, #12]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d045      	beq.n	8004e9a <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004e0e:	4b2c      	ldr	r3, [pc, #176]	; (8004ec0 <HAL_RCC_OscConfig+0x288>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f023 0219 	bic.w	r2, r3, #25
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	68db      	ldr	r3, [r3, #12]
 8004e1a:	4929      	ldr	r1, [pc, #164]	; (8004ec0 <HAL_RCC_OscConfig+0x288>)
 8004e1c:	4313      	orrs	r3, r2
 8004e1e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e20:	f7fc fc56 	bl	80016d0 <HAL_GetTick>
 8004e24:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004e26:	e008      	b.n	8004e3a <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004e28:	f7fc fc52 	bl	80016d0 <HAL_GetTick>
 8004e2c:	4602      	mov	r2, r0
 8004e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e30:	1ad3      	subs	r3, r2, r3
 8004e32:	2b02      	cmp	r3, #2
 8004e34:	d901      	bls.n	8004e3a <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8004e36:	2303      	movs	r3, #3
 8004e38:	e307      	b.n	800544a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004e3a:	4b21      	ldr	r3, [pc, #132]	; (8004ec0 <HAL_RCC_OscConfig+0x288>)
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f003 0304 	and.w	r3, r3, #4
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d0f0      	beq.n	8004e28 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e46:	f7fc fc73 	bl	8001730 <HAL_GetREVID>
 8004e4a:	4603      	mov	r3, r0
 8004e4c:	f241 0203 	movw	r2, #4099	; 0x1003
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d817      	bhi.n	8004e84 <HAL_RCC_OscConfig+0x24c>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	691b      	ldr	r3, [r3, #16]
 8004e58:	2b40      	cmp	r3, #64	; 0x40
 8004e5a:	d108      	bne.n	8004e6e <HAL_RCC_OscConfig+0x236>
 8004e5c:	4b18      	ldr	r3, [pc, #96]	; (8004ec0 <HAL_RCC_OscConfig+0x288>)
 8004e5e:	685b      	ldr	r3, [r3, #4]
 8004e60:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004e64:	4a16      	ldr	r2, [pc, #88]	; (8004ec0 <HAL_RCC_OscConfig+0x288>)
 8004e66:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e6a:	6053      	str	r3, [r2, #4]
 8004e6c:	e030      	b.n	8004ed0 <HAL_RCC_OscConfig+0x298>
 8004e6e:	4b14      	ldr	r3, [pc, #80]	; (8004ec0 <HAL_RCC_OscConfig+0x288>)
 8004e70:	685b      	ldr	r3, [r3, #4]
 8004e72:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	691b      	ldr	r3, [r3, #16]
 8004e7a:	031b      	lsls	r3, r3, #12
 8004e7c:	4910      	ldr	r1, [pc, #64]	; (8004ec0 <HAL_RCC_OscConfig+0x288>)
 8004e7e:	4313      	orrs	r3, r2
 8004e80:	604b      	str	r3, [r1, #4]
 8004e82:	e025      	b.n	8004ed0 <HAL_RCC_OscConfig+0x298>
 8004e84:	4b0e      	ldr	r3, [pc, #56]	; (8004ec0 <HAL_RCC_OscConfig+0x288>)
 8004e86:	685b      	ldr	r3, [r3, #4]
 8004e88:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	691b      	ldr	r3, [r3, #16]
 8004e90:	061b      	lsls	r3, r3, #24
 8004e92:	490b      	ldr	r1, [pc, #44]	; (8004ec0 <HAL_RCC_OscConfig+0x288>)
 8004e94:	4313      	orrs	r3, r2
 8004e96:	604b      	str	r3, [r1, #4]
 8004e98:	e01a      	b.n	8004ed0 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e9a:	4b09      	ldr	r3, [pc, #36]	; (8004ec0 <HAL_RCC_OscConfig+0x288>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	4a08      	ldr	r2, [pc, #32]	; (8004ec0 <HAL_RCC_OscConfig+0x288>)
 8004ea0:	f023 0301 	bic.w	r3, r3, #1
 8004ea4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ea6:	f7fc fc13 	bl	80016d0 <HAL_GetTick>
 8004eaa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004eac:	e00a      	b.n	8004ec4 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004eae:	f7fc fc0f 	bl	80016d0 <HAL_GetTick>
 8004eb2:	4602      	mov	r2, r0
 8004eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eb6:	1ad3      	subs	r3, r2, r3
 8004eb8:	2b02      	cmp	r3, #2
 8004eba:	d903      	bls.n	8004ec4 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8004ebc:	2303      	movs	r3, #3
 8004ebe:	e2c4      	b.n	800544a <HAL_RCC_OscConfig+0x812>
 8004ec0:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004ec4:	4ba4      	ldr	r3, [pc, #656]	; (8005158 <HAL_RCC_OscConfig+0x520>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f003 0304 	and.w	r3, r3, #4
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d1ee      	bne.n	8004eae <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f003 0310 	and.w	r3, r3, #16
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	f000 80a9 	beq.w	8005030 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004ede:	4b9e      	ldr	r3, [pc, #632]	; (8005158 <HAL_RCC_OscConfig+0x520>)
 8004ee0:	691b      	ldr	r3, [r3, #16]
 8004ee2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004ee6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004ee8:	4b9b      	ldr	r3, [pc, #620]	; (8005158 <HAL_RCC_OscConfig+0x520>)
 8004eea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eec:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004eee:	69bb      	ldr	r3, [r7, #24]
 8004ef0:	2b08      	cmp	r3, #8
 8004ef2:	d007      	beq.n	8004f04 <HAL_RCC_OscConfig+0x2cc>
 8004ef4:	69bb      	ldr	r3, [r7, #24]
 8004ef6:	2b18      	cmp	r3, #24
 8004ef8:	d13a      	bne.n	8004f70 <HAL_RCC_OscConfig+0x338>
 8004efa:	697b      	ldr	r3, [r7, #20]
 8004efc:	f003 0303 	and.w	r3, r3, #3
 8004f00:	2b01      	cmp	r3, #1
 8004f02:	d135      	bne.n	8004f70 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004f04:	4b94      	ldr	r3, [pc, #592]	; (8005158 <HAL_RCC_OscConfig+0x520>)
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d005      	beq.n	8004f1c <HAL_RCC_OscConfig+0x2e4>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	69db      	ldr	r3, [r3, #28]
 8004f14:	2b80      	cmp	r3, #128	; 0x80
 8004f16:	d001      	beq.n	8004f1c <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8004f18:	2301      	movs	r3, #1
 8004f1a:	e296      	b.n	800544a <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004f1c:	f7fc fc08 	bl	8001730 <HAL_GetREVID>
 8004f20:	4603      	mov	r3, r0
 8004f22:	f241 0203 	movw	r2, #4099	; 0x1003
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d817      	bhi.n	8004f5a <HAL_RCC_OscConfig+0x322>
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6a1b      	ldr	r3, [r3, #32]
 8004f2e:	2b20      	cmp	r3, #32
 8004f30:	d108      	bne.n	8004f44 <HAL_RCC_OscConfig+0x30c>
 8004f32:	4b89      	ldr	r3, [pc, #548]	; (8005158 <HAL_RCC_OscConfig+0x520>)
 8004f34:	685b      	ldr	r3, [r3, #4]
 8004f36:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004f3a:	4a87      	ldr	r2, [pc, #540]	; (8005158 <HAL_RCC_OscConfig+0x520>)
 8004f3c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004f40:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004f42:	e075      	b.n	8005030 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004f44:	4b84      	ldr	r3, [pc, #528]	; (8005158 <HAL_RCC_OscConfig+0x520>)
 8004f46:	685b      	ldr	r3, [r3, #4]
 8004f48:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6a1b      	ldr	r3, [r3, #32]
 8004f50:	069b      	lsls	r3, r3, #26
 8004f52:	4981      	ldr	r1, [pc, #516]	; (8005158 <HAL_RCC_OscConfig+0x520>)
 8004f54:	4313      	orrs	r3, r2
 8004f56:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004f58:	e06a      	b.n	8005030 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004f5a:	4b7f      	ldr	r3, [pc, #508]	; (8005158 <HAL_RCC_OscConfig+0x520>)
 8004f5c:	68db      	ldr	r3, [r3, #12]
 8004f5e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6a1b      	ldr	r3, [r3, #32]
 8004f66:	061b      	lsls	r3, r3, #24
 8004f68:	497b      	ldr	r1, [pc, #492]	; (8005158 <HAL_RCC_OscConfig+0x520>)
 8004f6a:	4313      	orrs	r3, r2
 8004f6c:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004f6e:	e05f      	b.n	8005030 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	69db      	ldr	r3, [r3, #28]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d042      	beq.n	8004ffe <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004f78:	4b77      	ldr	r3, [pc, #476]	; (8005158 <HAL_RCC_OscConfig+0x520>)
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	4a76      	ldr	r2, [pc, #472]	; (8005158 <HAL_RCC_OscConfig+0x520>)
 8004f7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f84:	f7fc fba4 	bl	80016d0 <HAL_GetTick>
 8004f88:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004f8a:	e008      	b.n	8004f9e <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004f8c:	f7fc fba0 	bl	80016d0 <HAL_GetTick>
 8004f90:	4602      	mov	r2, r0
 8004f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f94:	1ad3      	subs	r3, r2, r3
 8004f96:	2b02      	cmp	r3, #2
 8004f98:	d901      	bls.n	8004f9e <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8004f9a:	2303      	movs	r3, #3
 8004f9c:	e255      	b.n	800544a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004f9e:	4b6e      	ldr	r3, [pc, #440]	; (8005158 <HAL_RCC_OscConfig+0x520>)
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d0f0      	beq.n	8004f8c <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004faa:	f7fc fbc1 	bl	8001730 <HAL_GetREVID>
 8004fae:	4603      	mov	r3, r0
 8004fb0:	f241 0203 	movw	r2, #4099	; 0x1003
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d817      	bhi.n	8004fe8 <HAL_RCC_OscConfig+0x3b0>
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6a1b      	ldr	r3, [r3, #32]
 8004fbc:	2b20      	cmp	r3, #32
 8004fbe:	d108      	bne.n	8004fd2 <HAL_RCC_OscConfig+0x39a>
 8004fc0:	4b65      	ldr	r3, [pc, #404]	; (8005158 <HAL_RCC_OscConfig+0x520>)
 8004fc2:	685b      	ldr	r3, [r3, #4]
 8004fc4:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004fc8:	4a63      	ldr	r2, [pc, #396]	; (8005158 <HAL_RCC_OscConfig+0x520>)
 8004fca:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004fce:	6053      	str	r3, [r2, #4]
 8004fd0:	e02e      	b.n	8005030 <HAL_RCC_OscConfig+0x3f8>
 8004fd2:	4b61      	ldr	r3, [pc, #388]	; (8005158 <HAL_RCC_OscConfig+0x520>)
 8004fd4:	685b      	ldr	r3, [r3, #4]
 8004fd6:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6a1b      	ldr	r3, [r3, #32]
 8004fde:	069b      	lsls	r3, r3, #26
 8004fe0:	495d      	ldr	r1, [pc, #372]	; (8005158 <HAL_RCC_OscConfig+0x520>)
 8004fe2:	4313      	orrs	r3, r2
 8004fe4:	604b      	str	r3, [r1, #4]
 8004fe6:	e023      	b.n	8005030 <HAL_RCC_OscConfig+0x3f8>
 8004fe8:	4b5b      	ldr	r3, [pc, #364]	; (8005158 <HAL_RCC_OscConfig+0x520>)
 8004fea:	68db      	ldr	r3, [r3, #12]
 8004fec:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6a1b      	ldr	r3, [r3, #32]
 8004ff4:	061b      	lsls	r3, r3, #24
 8004ff6:	4958      	ldr	r1, [pc, #352]	; (8005158 <HAL_RCC_OscConfig+0x520>)
 8004ff8:	4313      	orrs	r3, r2
 8004ffa:	60cb      	str	r3, [r1, #12]
 8004ffc:	e018      	b.n	8005030 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004ffe:	4b56      	ldr	r3, [pc, #344]	; (8005158 <HAL_RCC_OscConfig+0x520>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	4a55      	ldr	r2, [pc, #340]	; (8005158 <HAL_RCC_OscConfig+0x520>)
 8005004:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005008:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800500a:	f7fc fb61 	bl	80016d0 <HAL_GetTick>
 800500e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005010:	e008      	b.n	8005024 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8005012:	f7fc fb5d 	bl	80016d0 <HAL_GetTick>
 8005016:	4602      	mov	r2, r0
 8005018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800501a:	1ad3      	subs	r3, r2, r3
 800501c:	2b02      	cmp	r3, #2
 800501e:	d901      	bls.n	8005024 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8005020:	2303      	movs	r3, #3
 8005022:	e212      	b.n	800544a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005024:	4b4c      	ldr	r3, [pc, #304]	; (8005158 <HAL_RCC_OscConfig+0x520>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800502c:	2b00      	cmp	r3, #0
 800502e:	d1f0      	bne.n	8005012 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f003 0308 	and.w	r3, r3, #8
 8005038:	2b00      	cmp	r3, #0
 800503a:	d036      	beq.n	80050aa <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	695b      	ldr	r3, [r3, #20]
 8005040:	2b00      	cmp	r3, #0
 8005042:	d019      	beq.n	8005078 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005044:	4b44      	ldr	r3, [pc, #272]	; (8005158 <HAL_RCC_OscConfig+0x520>)
 8005046:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005048:	4a43      	ldr	r2, [pc, #268]	; (8005158 <HAL_RCC_OscConfig+0x520>)
 800504a:	f043 0301 	orr.w	r3, r3, #1
 800504e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005050:	f7fc fb3e 	bl	80016d0 <HAL_GetTick>
 8005054:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005056:	e008      	b.n	800506a <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005058:	f7fc fb3a 	bl	80016d0 <HAL_GetTick>
 800505c:	4602      	mov	r2, r0
 800505e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005060:	1ad3      	subs	r3, r2, r3
 8005062:	2b02      	cmp	r3, #2
 8005064:	d901      	bls.n	800506a <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8005066:	2303      	movs	r3, #3
 8005068:	e1ef      	b.n	800544a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800506a:	4b3b      	ldr	r3, [pc, #236]	; (8005158 <HAL_RCC_OscConfig+0x520>)
 800506c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800506e:	f003 0302 	and.w	r3, r3, #2
 8005072:	2b00      	cmp	r3, #0
 8005074:	d0f0      	beq.n	8005058 <HAL_RCC_OscConfig+0x420>
 8005076:	e018      	b.n	80050aa <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005078:	4b37      	ldr	r3, [pc, #220]	; (8005158 <HAL_RCC_OscConfig+0x520>)
 800507a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800507c:	4a36      	ldr	r2, [pc, #216]	; (8005158 <HAL_RCC_OscConfig+0x520>)
 800507e:	f023 0301 	bic.w	r3, r3, #1
 8005082:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005084:	f7fc fb24 	bl	80016d0 <HAL_GetTick>
 8005088:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800508a:	e008      	b.n	800509e <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800508c:	f7fc fb20 	bl	80016d0 <HAL_GetTick>
 8005090:	4602      	mov	r2, r0
 8005092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005094:	1ad3      	subs	r3, r2, r3
 8005096:	2b02      	cmp	r3, #2
 8005098:	d901      	bls.n	800509e <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 800509a:	2303      	movs	r3, #3
 800509c:	e1d5      	b.n	800544a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800509e:	4b2e      	ldr	r3, [pc, #184]	; (8005158 <HAL_RCC_OscConfig+0x520>)
 80050a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050a2:	f003 0302 	and.w	r3, r3, #2
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d1f0      	bne.n	800508c <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f003 0320 	and.w	r3, r3, #32
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d036      	beq.n	8005124 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	699b      	ldr	r3, [r3, #24]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d019      	beq.n	80050f2 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80050be:	4b26      	ldr	r3, [pc, #152]	; (8005158 <HAL_RCC_OscConfig+0x520>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	4a25      	ldr	r2, [pc, #148]	; (8005158 <HAL_RCC_OscConfig+0x520>)
 80050c4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80050c8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80050ca:	f7fc fb01 	bl	80016d0 <HAL_GetTick>
 80050ce:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80050d0:	e008      	b.n	80050e4 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80050d2:	f7fc fafd 	bl	80016d0 <HAL_GetTick>
 80050d6:	4602      	mov	r2, r0
 80050d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050da:	1ad3      	subs	r3, r2, r3
 80050dc:	2b02      	cmp	r3, #2
 80050de:	d901      	bls.n	80050e4 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 80050e0:	2303      	movs	r3, #3
 80050e2:	e1b2      	b.n	800544a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80050e4:	4b1c      	ldr	r3, [pc, #112]	; (8005158 <HAL_RCC_OscConfig+0x520>)
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d0f0      	beq.n	80050d2 <HAL_RCC_OscConfig+0x49a>
 80050f0:	e018      	b.n	8005124 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80050f2:	4b19      	ldr	r3, [pc, #100]	; (8005158 <HAL_RCC_OscConfig+0x520>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	4a18      	ldr	r2, [pc, #96]	; (8005158 <HAL_RCC_OscConfig+0x520>)
 80050f8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80050fc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80050fe:	f7fc fae7 	bl	80016d0 <HAL_GetTick>
 8005102:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005104:	e008      	b.n	8005118 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8005106:	f7fc fae3 	bl	80016d0 <HAL_GetTick>
 800510a:	4602      	mov	r2, r0
 800510c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800510e:	1ad3      	subs	r3, r2, r3
 8005110:	2b02      	cmp	r3, #2
 8005112:	d901      	bls.n	8005118 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8005114:	2303      	movs	r3, #3
 8005116:	e198      	b.n	800544a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005118:	4b0f      	ldr	r3, [pc, #60]	; (8005158 <HAL_RCC_OscConfig+0x520>)
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005120:	2b00      	cmp	r3, #0
 8005122:	d1f0      	bne.n	8005106 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f003 0304 	and.w	r3, r3, #4
 800512c:	2b00      	cmp	r3, #0
 800512e:	f000 8085 	beq.w	800523c <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005132:	4b0a      	ldr	r3, [pc, #40]	; (800515c <HAL_RCC_OscConfig+0x524>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	4a09      	ldr	r2, [pc, #36]	; (800515c <HAL_RCC_OscConfig+0x524>)
 8005138:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800513c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800513e:	f7fc fac7 	bl	80016d0 <HAL_GetTick>
 8005142:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005144:	e00c      	b.n	8005160 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005146:	f7fc fac3 	bl	80016d0 <HAL_GetTick>
 800514a:	4602      	mov	r2, r0
 800514c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800514e:	1ad3      	subs	r3, r2, r3
 8005150:	2b64      	cmp	r3, #100	; 0x64
 8005152:	d905      	bls.n	8005160 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8005154:	2303      	movs	r3, #3
 8005156:	e178      	b.n	800544a <HAL_RCC_OscConfig+0x812>
 8005158:	58024400 	.word	0x58024400
 800515c:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005160:	4b96      	ldr	r3, [pc, #600]	; (80053bc <HAL_RCC_OscConfig+0x784>)
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005168:	2b00      	cmp	r3, #0
 800516a:	d0ec      	beq.n	8005146 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	689b      	ldr	r3, [r3, #8]
 8005170:	2b01      	cmp	r3, #1
 8005172:	d106      	bne.n	8005182 <HAL_RCC_OscConfig+0x54a>
 8005174:	4b92      	ldr	r3, [pc, #584]	; (80053c0 <HAL_RCC_OscConfig+0x788>)
 8005176:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005178:	4a91      	ldr	r2, [pc, #580]	; (80053c0 <HAL_RCC_OscConfig+0x788>)
 800517a:	f043 0301 	orr.w	r3, r3, #1
 800517e:	6713      	str	r3, [r2, #112]	; 0x70
 8005180:	e02d      	b.n	80051de <HAL_RCC_OscConfig+0x5a6>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	689b      	ldr	r3, [r3, #8]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d10c      	bne.n	80051a4 <HAL_RCC_OscConfig+0x56c>
 800518a:	4b8d      	ldr	r3, [pc, #564]	; (80053c0 <HAL_RCC_OscConfig+0x788>)
 800518c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800518e:	4a8c      	ldr	r2, [pc, #560]	; (80053c0 <HAL_RCC_OscConfig+0x788>)
 8005190:	f023 0301 	bic.w	r3, r3, #1
 8005194:	6713      	str	r3, [r2, #112]	; 0x70
 8005196:	4b8a      	ldr	r3, [pc, #552]	; (80053c0 <HAL_RCC_OscConfig+0x788>)
 8005198:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800519a:	4a89      	ldr	r2, [pc, #548]	; (80053c0 <HAL_RCC_OscConfig+0x788>)
 800519c:	f023 0304 	bic.w	r3, r3, #4
 80051a0:	6713      	str	r3, [r2, #112]	; 0x70
 80051a2:	e01c      	b.n	80051de <HAL_RCC_OscConfig+0x5a6>
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	689b      	ldr	r3, [r3, #8]
 80051a8:	2b05      	cmp	r3, #5
 80051aa:	d10c      	bne.n	80051c6 <HAL_RCC_OscConfig+0x58e>
 80051ac:	4b84      	ldr	r3, [pc, #528]	; (80053c0 <HAL_RCC_OscConfig+0x788>)
 80051ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051b0:	4a83      	ldr	r2, [pc, #524]	; (80053c0 <HAL_RCC_OscConfig+0x788>)
 80051b2:	f043 0304 	orr.w	r3, r3, #4
 80051b6:	6713      	str	r3, [r2, #112]	; 0x70
 80051b8:	4b81      	ldr	r3, [pc, #516]	; (80053c0 <HAL_RCC_OscConfig+0x788>)
 80051ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051bc:	4a80      	ldr	r2, [pc, #512]	; (80053c0 <HAL_RCC_OscConfig+0x788>)
 80051be:	f043 0301 	orr.w	r3, r3, #1
 80051c2:	6713      	str	r3, [r2, #112]	; 0x70
 80051c4:	e00b      	b.n	80051de <HAL_RCC_OscConfig+0x5a6>
 80051c6:	4b7e      	ldr	r3, [pc, #504]	; (80053c0 <HAL_RCC_OscConfig+0x788>)
 80051c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051ca:	4a7d      	ldr	r2, [pc, #500]	; (80053c0 <HAL_RCC_OscConfig+0x788>)
 80051cc:	f023 0301 	bic.w	r3, r3, #1
 80051d0:	6713      	str	r3, [r2, #112]	; 0x70
 80051d2:	4b7b      	ldr	r3, [pc, #492]	; (80053c0 <HAL_RCC_OscConfig+0x788>)
 80051d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051d6:	4a7a      	ldr	r2, [pc, #488]	; (80053c0 <HAL_RCC_OscConfig+0x788>)
 80051d8:	f023 0304 	bic.w	r3, r3, #4
 80051dc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	689b      	ldr	r3, [r3, #8]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d015      	beq.n	8005212 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051e6:	f7fc fa73 	bl	80016d0 <HAL_GetTick>
 80051ea:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80051ec:	e00a      	b.n	8005204 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80051ee:	f7fc fa6f 	bl	80016d0 <HAL_GetTick>
 80051f2:	4602      	mov	r2, r0
 80051f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051f6:	1ad3      	subs	r3, r2, r3
 80051f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80051fc:	4293      	cmp	r3, r2
 80051fe:	d901      	bls.n	8005204 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8005200:	2303      	movs	r3, #3
 8005202:	e122      	b.n	800544a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005204:	4b6e      	ldr	r3, [pc, #440]	; (80053c0 <HAL_RCC_OscConfig+0x788>)
 8005206:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005208:	f003 0302 	and.w	r3, r3, #2
 800520c:	2b00      	cmp	r3, #0
 800520e:	d0ee      	beq.n	80051ee <HAL_RCC_OscConfig+0x5b6>
 8005210:	e014      	b.n	800523c <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005212:	f7fc fa5d 	bl	80016d0 <HAL_GetTick>
 8005216:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005218:	e00a      	b.n	8005230 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800521a:	f7fc fa59 	bl	80016d0 <HAL_GetTick>
 800521e:	4602      	mov	r2, r0
 8005220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005222:	1ad3      	subs	r3, r2, r3
 8005224:	f241 3288 	movw	r2, #5000	; 0x1388
 8005228:	4293      	cmp	r3, r2
 800522a:	d901      	bls.n	8005230 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 800522c:	2303      	movs	r3, #3
 800522e:	e10c      	b.n	800544a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005230:	4b63      	ldr	r3, [pc, #396]	; (80053c0 <HAL_RCC_OscConfig+0x788>)
 8005232:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005234:	f003 0302 	and.w	r3, r3, #2
 8005238:	2b00      	cmp	r3, #0
 800523a:	d1ee      	bne.n	800521a <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005240:	2b00      	cmp	r3, #0
 8005242:	f000 8101 	beq.w	8005448 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005246:	4b5e      	ldr	r3, [pc, #376]	; (80053c0 <HAL_RCC_OscConfig+0x788>)
 8005248:	691b      	ldr	r3, [r3, #16]
 800524a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800524e:	2b18      	cmp	r3, #24
 8005250:	f000 80bc 	beq.w	80053cc <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005258:	2b02      	cmp	r3, #2
 800525a:	f040 8095 	bne.w	8005388 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800525e:	4b58      	ldr	r3, [pc, #352]	; (80053c0 <HAL_RCC_OscConfig+0x788>)
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	4a57      	ldr	r2, [pc, #348]	; (80053c0 <HAL_RCC_OscConfig+0x788>)
 8005264:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005268:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800526a:	f7fc fa31 	bl	80016d0 <HAL_GetTick>
 800526e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005270:	e008      	b.n	8005284 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005272:	f7fc fa2d 	bl	80016d0 <HAL_GetTick>
 8005276:	4602      	mov	r2, r0
 8005278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800527a:	1ad3      	subs	r3, r2, r3
 800527c:	2b02      	cmp	r3, #2
 800527e:	d901      	bls.n	8005284 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8005280:	2303      	movs	r3, #3
 8005282:	e0e2      	b.n	800544a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005284:	4b4e      	ldr	r3, [pc, #312]	; (80053c0 <HAL_RCC_OscConfig+0x788>)
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800528c:	2b00      	cmp	r3, #0
 800528e:	d1f0      	bne.n	8005272 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005290:	4b4b      	ldr	r3, [pc, #300]	; (80053c0 <HAL_RCC_OscConfig+0x788>)
 8005292:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005294:	4b4b      	ldr	r3, [pc, #300]	; (80053c4 <HAL_RCC_OscConfig+0x78c>)
 8005296:	4013      	ands	r3, r2
 8005298:	687a      	ldr	r2, [r7, #4]
 800529a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800529c:	687a      	ldr	r2, [r7, #4]
 800529e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80052a0:	0112      	lsls	r2, r2, #4
 80052a2:	430a      	orrs	r2, r1
 80052a4:	4946      	ldr	r1, [pc, #280]	; (80053c0 <HAL_RCC_OscConfig+0x788>)
 80052a6:	4313      	orrs	r3, r2
 80052a8:	628b      	str	r3, [r1, #40]	; 0x28
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052ae:	3b01      	subs	r3, #1
 80052b0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052b8:	3b01      	subs	r3, #1
 80052ba:	025b      	lsls	r3, r3, #9
 80052bc:	b29b      	uxth	r3, r3
 80052be:	431a      	orrs	r2, r3
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052c4:	3b01      	subs	r3, #1
 80052c6:	041b      	lsls	r3, r3, #16
 80052c8:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80052cc:	431a      	orrs	r2, r3
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052d2:	3b01      	subs	r3, #1
 80052d4:	061b      	lsls	r3, r3, #24
 80052d6:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80052da:	4939      	ldr	r1, [pc, #228]	; (80053c0 <HAL_RCC_OscConfig+0x788>)
 80052dc:	4313      	orrs	r3, r2
 80052de:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80052e0:	4b37      	ldr	r3, [pc, #220]	; (80053c0 <HAL_RCC_OscConfig+0x788>)
 80052e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052e4:	4a36      	ldr	r2, [pc, #216]	; (80053c0 <HAL_RCC_OscConfig+0x788>)
 80052e6:	f023 0301 	bic.w	r3, r3, #1
 80052ea:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80052ec:	4b34      	ldr	r3, [pc, #208]	; (80053c0 <HAL_RCC_OscConfig+0x788>)
 80052ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80052f0:	4b35      	ldr	r3, [pc, #212]	; (80053c8 <HAL_RCC_OscConfig+0x790>)
 80052f2:	4013      	ands	r3, r2
 80052f4:	687a      	ldr	r2, [r7, #4]
 80052f6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80052f8:	00d2      	lsls	r2, r2, #3
 80052fa:	4931      	ldr	r1, [pc, #196]	; (80053c0 <HAL_RCC_OscConfig+0x788>)
 80052fc:	4313      	orrs	r3, r2
 80052fe:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005300:	4b2f      	ldr	r3, [pc, #188]	; (80053c0 <HAL_RCC_OscConfig+0x788>)
 8005302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005304:	f023 020c 	bic.w	r2, r3, #12
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800530c:	492c      	ldr	r1, [pc, #176]	; (80053c0 <HAL_RCC_OscConfig+0x788>)
 800530e:	4313      	orrs	r3, r2
 8005310:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005312:	4b2b      	ldr	r3, [pc, #172]	; (80053c0 <HAL_RCC_OscConfig+0x788>)
 8005314:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005316:	f023 0202 	bic.w	r2, r3, #2
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800531e:	4928      	ldr	r1, [pc, #160]	; (80053c0 <HAL_RCC_OscConfig+0x788>)
 8005320:	4313      	orrs	r3, r2
 8005322:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005324:	4b26      	ldr	r3, [pc, #152]	; (80053c0 <HAL_RCC_OscConfig+0x788>)
 8005326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005328:	4a25      	ldr	r2, [pc, #148]	; (80053c0 <HAL_RCC_OscConfig+0x788>)
 800532a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800532e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005330:	4b23      	ldr	r3, [pc, #140]	; (80053c0 <HAL_RCC_OscConfig+0x788>)
 8005332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005334:	4a22      	ldr	r2, [pc, #136]	; (80053c0 <HAL_RCC_OscConfig+0x788>)
 8005336:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800533a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800533c:	4b20      	ldr	r3, [pc, #128]	; (80053c0 <HAL_RCC_OscConfig+0x788>)
 800533e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005340:	4a1f      	ldr	r2, [pc, #124]	; (80053c0 <HAL_RCC_OscConfig+0x788>)
 8005342:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005346:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8005348:	4b1d      	ldr	r3, [pc, #116]	; (80053c0 <HAL_RCC_OscConfig+0x788>)
 800534a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800534c:	4a1c      	ldr	r2, [pc, #112]	; (80053c0 <HAL_RCC_OscConfig+0x788>)
 800534e:	f043 0301 	orr.w	r3, r3, #1
 8005352:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005354:	4b1a      	ldr	r3, [pc, #104]	; (80053c0 <HAL_RCC_OscConfig+0x788>)
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	4a19      	ldr	r2, [pc, #100]	; (80053c0 <HAL_RCC_OscConfig+0x788>)
 800535a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800535e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005360:	f7fc f9b6 	bl	80016d0 <HAL_GetTick>
 8005364:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005366:	e008      	b.n	800537a <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005368:	f7fc f9b2 	bl	80016d0 <HAL_GetTick>
 800536c:	4602      	mov	r2, r0
 800536e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005370:	1ad3      	subs	r3, r2, r3
 8005372:	2b02      	cmp	r3, #2
 8005374:	d901      	bls.n	800537a <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8005376:	2303      	movs	r3, #3
 8005378:	e067      	b.n	800544a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800537a:	4b11      	ldr	r3, [pc, #68]	; (80053c0 <HAL_RCC_OscConfig+0x788>)
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005382:	2b00      	cmp	r3, #0
 8005384:	d0f0      	beq.n	8005368 <HAL_RCC_OscConfig+0x730>
 8005386:	e05f      	b.n	8005448 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005388:	4b0d      	ldr	r3, [pc, #52]	; (80053c0 <HAL_RCC_OscConfig+0x788>)
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	4a0c      	ldr	r2, [pc, #48]	; (80053c0 <HAL_RCC_OscConfig+0x788>)
 800538e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005392:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005394:	f7fc f99c 	bl	80016d0 <HAL_GetTick>
 8005398:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800539a:	e008      	b.n	80053ae <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800539c:	f7fc f998 	bl	80016d0 <HAL_GetTick>
 80053a0:	4602      	mov	r2, r0
 80053a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053a4:	1ad3      	subs	r3, r2, r3
 80053a6:	2b02      	cmp	r3, #2
 80053a8:	d901      	bls.n	80053ae <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 80053aa:	2303      	movs	r3, #3
 80053ac:	e04d      	b.n	800544a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80053ae:	4b04      	ldr	r3, [pc, #16]	; (80053c0 <HAL_RCC_OscConfig+0x788>)
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d1f0      	bne.n	800539c <HAL_RCC_OscConfig+0x764>
 80053ba:	e045      	b.n	8005448 <HAL_RCC_OscConfig+0x810>
 80053bc:	58024800 	.word	0x58024800
 80053c0:	58024400 	.word	0x58024400
 80053c4:	fffffc0c 	.word	0xfffffc0c
 80053c8:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80053cc:	4b21      	ldr	r3, [pc, #132]	; (8005454 <HAL_RCC_OscConfig+0x81c>)
 80053ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053d0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80053d2:	4b20      	ldr	r3, [pc, #128]	; (8005454 <HAL_RCC_OscConfig+0x81c>)
 80053d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053d6:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053dc:	2b01      	cmp	r3, #1
 80053de:	d031      	beq.n	8005444 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80053e0:	693b      	ldr	r3, [r7, #16]
 80053e2:	f003 0203 	and.w	r2, r3, #3
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80053ea:	429a      	cmp	r2, r3
 80053ec:	d12a      	bne.n	8005444 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80053ee:	693b      	ldr	r3, [r7, #16]
 80053f0:	091b      	lsrs	r3, r3, #4
 80053f2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80053fa:	429a      	cmp	r2, r3
 80053fc:	d122      	bne.n	8005444 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005408:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800540a:	429a      	cmp	r2, r3
 800540c:	d11a      	bne.n	8005444 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	0a5b      	lsrs	r3, r3, #9
 8005412:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800541a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800541c:	429a      	cmp	r2, r3
 800541e:	d111      	bne.n	8005444 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	0c1b      	lsrs	r3, r3, #16
 8005424:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800542c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800542e:	429a      	cmp	r2, r3
 8005430:	d108      	bne.n	8005444 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	0e1b      	lsrs	r3, r3, #24
 8005436:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800543e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005440:	429a      	cmp	r2, r3
 8005442:	d001      	beq.n	8005448 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8005444:	2301      	movs	r3, #1
 8005446:	e000      	b.n	800544a <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8005448:	2300      	movs	r3, #0
}
 800544a:	4618      	mov	r0, r3
 800544c:	3730      	adds	r7, #48	; 0x30
 800544e:	46bd      	mov	sp, r7
 8005450:	bd80      	pop	{r7, pc}
 8005452:	bf00      	nop
 8005454:	58024400 	.word	0x58024400

08005458 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005458:	b580      	push	{r7, lr}
 800545a:	b086      	sub	sp, #24
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
 8005460:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d101      	bne.n	800546c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005468:	2301      	movs	r3, #1
 800546a:	e19c      	b.n	80057a6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800546c:	4b8a      	ldr	r3, [pc, #552]	; (8005698 <HAL_RCC_ClockConfig+0x240>)
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f003 030f 	and.w	r3, r3, #15
 8005474:	683a      	ldr	r2, [r7, #0]
 8005476:	429a      	cmp	r2, r3
 8005478:	d910      	bls.n	800549c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800547a:	4b87      	ldr	r3, [pc, #540]	; (8005698 <HAL_RCC_ClockConfig+0x240>)
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f023 020f 	bic.w	r2, r3, #15
 8005482:	4985      	ldr	r1, [pc, #532]	; (8005698 <HAL_RCC_ClockConfig+0x240>)
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	4313      	orrs	r3, r2
 8005488:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800548a:	4b83      	ldr	r3, [pc, #524]	; (8005698 <HAL_RCC_ClockConfig+0x240>)
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f003 030f 	and.w	r3, r3, #15
 8005492:	683a      	ldr	r2, [r7, #0]
 8005494:	429a      	cmp	r2, r3
 8005496:	d001      	beq.n	800549c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005498:	2301      	movs	r3, #1
 800549a:	e184      	b.n	80057a6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f003 0304 	and.w	r3, r3, #4
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d010      	beq.n	80054ca <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	691a      	ldr	r2, [r3, #16]
 80054ac:	4b7b      	ldr	r3, [pc, #492]	; (800569c <HAL_RCC_ClockConfig+0x244>)
 80054ae:	699b      	ldr	r3, [r3, #24]
 80054b0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80054b4:	429a      	cmp	r2, r3
 80054b6:	d908      	bls.n	80054ca <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80054b8:	4b78      	ldr	r3, [pc, #480]	; (800569c <HAL_RCC_ClockConfig+0x244>)
 80054ba:	699b      	ldr	r3, [r3, #24]
 80054bc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	691b      	ldr	r3, [r3, #16]
 80054c4:	4975      	ldr	r1, [pc, #468]	; (800569c <HAL_RCC_ClockConfig+0x244>)
 80054c6:	4313      	orrs	r3, r2
 80054c8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f003 0308 	and.w	r3, r3, #8
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d010      	beq.n	80054f8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	695a      	ldr	r2, [r3, #20]
 80054da:	4b70      	ldr	r3, [pc, #448]	; (800569c <HAL_RCC_ClockConfig+0x244>)
 80054dc:	69db      	ldr	r3, [r3, #28]
 80054de:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80054e2:	429a      	cmp	r2, r3
 80054e4:	d908      	bls.n	80054f8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80054e6:	4b6d      	ldr	r3, [pc, #436]	; (800569c <HAL_RCC_ClockConfig+0x244>)
 80054e8:	69db      	ldr	r3, [r3, #28]
 80054ea:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	695b      	ldr	r3, [r3, #20]
 80054f2:	496a      	ldr	r1, [pc, #424]	; (800569c <HAL_RCC_ClockConfig+0x244>)
 80054f4:	4313      	orrs	r3, r2
 80054f6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f003 0310 	and.w	r3, r3, #16
 8005500:	2b00      	cmp	r3, #0
 8005502:	d010      	beq.n	8005526 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	699a      	ldr	r2, [r3, #24]
 8005508:	4b64      	ldr	r3, [pc, #400]	; (800569c <HAL_RCC_ClockConfig+0x244>)
 800550a:	69db      	ldr	r3, [r3, #28]
 800550c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005510:	429a      	cmp	r2, r3
 8005512:	d908      	bls.n	8005526 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005514:	4b61      	ldr	r3, [pc, #388]	; (800569c <HAL_RCC_ClockConfig+0x244>)
 8005516:	69db      	ldr	r3, [r3, #28]
 8005518:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	699b      	ldr	r3, [r3, #24]
 8005520:	495e      	ldr	r1, [pc, #376]	; (800569c <HAL_RCC_ClockConfig+0x244>)
 8005522:	4313      	orrs	r3, r2
 8005524:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f003 0320 	and.w	r3, r3, #32
 800552e:	2b00      	cmp	r3, #0
 8005530:	d010      	beq.n	8005554 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	69da      	ldr	r2, [r3, #28]
 8005536:	4b59      	ldr	r3, [pc, #356]	; (800569c <HAL_RCC_ClockConfig+0x244>)
 8005538:	6a1b      	ldr	r3, [r3, #32]
 800553a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800553e:	429a      	cmp	r2, r3
 8005540:	d908      	bls.n	8005554 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005542:	4b56      	ldr	r3, [pc, #344]	; (800569c <HAL_RCC_ClockConfig+0x244>)
 8005544:	6a1b      	ldr	r3, [r3, #32]
 8005546:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	69db      	ldr	r3, [r3, #28]
 800554e:	4953      	ldr	r1, [pc, #332]	; (800569c <HAL_RCC_ClockConfig+0x244>)
 8005550:	4313      	orrs	r3, r2
 8005552:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f003 0302 	and.w	r3, r3, #2
 800555c:	2b00      	cmp	r3, #0
 800555e:	d010      	beq.n	8005582 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	68da      	ldr	r2, [r3, #12]
 8005564:	4b4d      	ldr	r3, [pc, #308]	; (800569c <HAL_RCC_ClockConfig+0x244>)
 8005566:	699b      	ldr	r3, [r3, #24]
 8005568:	f003 030f 	and.w	r3, r3, #15
 800556c:	429a      	cmp	r2, r3
 800556e:	d908      	bls.n	8005582 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005570:	4b4a      	ldr	r3, [pc, #296]	; (800569c <HAL_RCC_ClockConfig+0x244>)
 8005572:	699b      	ldr	r3, [r3, #24]
 8005574:	f023 020f 	bic.w	r2, r3, #15
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	68db      	ldr	r3, [r3, #12]
 800557c:	4947      	ldr	r1, [pc, #284]	; (800569c <HAL_RCC_ClockConfig+0x244>)
 800557e:	4313      	orrs	r3, r2
 8005580:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f003 0301 	and.w	r3, r3, #1
 800558a:	2b00      	cmp	r3, #0
 800558c:	d055      	beq.n	800563a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800558e:	4b43      	ldr	r3, [pc, #268]	; (800569c <HAL_RCC_ClockConfig+0x244>)
 8005590:	699b      	ldr	r3, [r3, #24]
 8005592:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	689b      	ldr	r3, [r3, #8]
 800559a:	4940      	ldr	r1, [pc, #256]	; (800569c <HAL_RCC_ClockConfig+0x244>)
 800559c:	4313      	orrs	r3, r2
 800559e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	685b      	ldr	r3, [r3, #4]
 80055a4:	2b02      	cmp	r3, #2
 80055a6:	d107      	bne.n	80055b8 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80055a8:	4b3c      	ldr	r3, [pc, #240]	; (800569c <HAL_RCC_ClockConfig+0x244>)
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d121      	bne.n	80055f8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80055b4:	2301      	movs	r3, #1
 80055b6:	e0f6      	b.n	80057a6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	685b      	ldr	r3, [r3, #4]
 80055bc:	2b03      	cmp	r3, #3
 80055be:	d107      	bne.n	80055d0 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80055c0:	4b36      	ldr	r3, [pc, #216]	; (800569c <HAL_RCC_ClockConfig+0x244>)
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d115      	bne.n	80055f8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80055cc:	2301      	movs	r3, #1
 80055ce:	e0ea      	b.n	80057a6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	685b      	ldr	r3, [r3, #4]
 80055d4:	2b01      	cmp	r3, #1
 80055d6:	d107      	bne.n	80055e8 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80055d8:	4b30      	ldr	r3, [pc, #192]	; (800569c <HAL_RCC_ClockConfig+0x244>)
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d109      	bne.n	80055f8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80055e4:	2301      	movs	r3, #1
 80055e6:	e0de      	b.n	80057a6 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80055e8:	4b2c      	ldr	r3, [pc, #176]	; (800569c <HAL_RCC_ClockConfig+0x244>)
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f003 0304 	and.w	r3, r3, #4
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d101      	bne.n	80055f8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80055f4:	2301      	movs	r3, #1
 80055f6:	e0d6      	b.n	80057a6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80055f8:	4b28      	ldr	r3, [pc, #160]	; (800569c <HAL_RCC_ClockConfig+0x244>)
 80055fa:	691b      	ldr	r3, [r3, #16]
 80055fc:	f023 0207 	bic.w	r2, r3, #7
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	685b      	ldr	r3, [r3, #4]
 8005604:	4925      	ldr	r1, [pc, #148]	; (800569c <HAL_RCC_ClockConfig+0x244>)
 8005606:	4313      	orrs	r3, r2
 8005608:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800560a:	f7fc f861 	bl	80016d0 <HAL_GetTick>
 800560e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005610:	e00a      	b.n	8005628 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005612:	f7fc f85d 	bl	80016d0 <HAL_GetTick>
 8005616:	4602      	mov	r2, r0
 8005618:	697b      	ldr	r3, [r7, #20]
 800561a:	1ad3      	subs	r3, r2, r3
 800561c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005620:	4293      	cmp	r3, r2
 8005622:	d901      	bls.n	8005628 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8005624:	2303      	movs	r3, #3
 8005626:	e0be      	b.n	80057a6 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005628:	4b1c      	ldr	r3, [pc, #112]	; (800569c <HAL_RCC_ClockConfig+0x244>)
 800562a:	691b      	ldr	r3, [r3, #16]
 800562c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	685b      	ldr	r3, [r3, #4]
 8005634:	00db      	lsls	r3, r3, #3
 8005636:	429a      	cmp	r2, r3
 8005638:	d1eb      	bne.n	8005612 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f003 0302 	and.w	r3, r3, #2
 8005642:	2b00      	cmp	r3, #0
 8005644:	d010      	beq.n	8005668 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	68da      	ldr	r2, [r3, #12]
 800564a:	4b14      	ldr	r3, [pc, #80]	; (800569c <HAL_RCC_ClockConfig+0x244>)
 800564c:	699b      	ldr	r3, [r3, #24]
 800564e:	f003 030f 	and.w	r3, r3, #15
 8005652:	429a      	cmp	r2, r3
 8005654:	d208      	bcs.n	8005668 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005656:	4b11      	ldr	r3, [pc, #68]	; (800569c <HAL_RCC_ClockConfig+0x244>)
 8005658:	699b      	ldr	r3, [r3, #24]
 800565a:	f023 020f 	bic.w	r2, r3, #15
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	68db      	ldr	r3, [r3, #12]
 8005662:	490e      	ldr	r1, [pc, #56]	; (800569c <HAL_RCC_ClockConfig+0x244>)
 8005664:	4313      	orrs	r3, r2
 8005666:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005668:	4b0b      	ldr	r3, [pc, #44]	; (8005698 <HAL_RCC_ClockConfig+0x240>)
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f003 030f 	and.w	r3, r3, #15
 8005670:	683a      	ldr	r2, [r7, #0]
 8005672:	429a      	cmp	r2, r3
 8005674:	d214      	bcs.n	80056a0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005676:	4b08      	ldr	r3, [pc, #32]	; (8005698 <HAL_RCC_ClockConfig+0x240>)
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f023 020f 	bic.w	r2, r3, #15
 800567e:	4906      	ldr	r1, [pc, #24]	; (8005698 <HAL_RCC_ClockConfig+0x240>)
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	4313      	orrs	r3, r2
 8005684:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005686:	4b04      	ldr	r3, [pc, #16]	; (8005698 <HAL_RCC_ClockConfig+0x240>)
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f003 030f 	and.w	r3, r3, #15
 800568e:	683a      	ldr	r2, [r7, #0]
 8005690:	429a      	cmp	r2, r3
 8005692:	d005      	beq.n	80056a0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005694:	2301      	movs	r3, #1
 8005696:	e086      	b.n	80057a6 <HAL_RCC_ClockConfig+0x34e>
 8005698:	52002000 	.word	0x52002000
 800569c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f003 0304 	and.w	r3, r3, #4
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d010      	beq.n	80056ce <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	691a      	ldr	r2, [r3, #16]
 80056b0:	4b3f      	ldr	r3, [pc, #252]	; (80057b0 <HAL_RCC_ClockConfig+0x358>)
 80056b2:	699b      	ldr	r3, [r3, #24]
 80056b4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80056b8:	429a      	cmp	r2, r3
 80056ba:	d208      	bcs.n	80056ce <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80056bc:	4b3c      	ldr	r3, [pc, #240]	; (80057b0 <HAL_RCC_ClockConfig+0x358>)
 80056be:	699b      	ldr	r3, [r3, #24]
 80056c0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	691b      	ldr	r3, [r3, #16]
 80056c8:	4939      	ldr	r1, [pc, #228]	; (80057b0 <HAL_RCC_ClockConfig+0x358>)
 80056ca:	4313      	orrs	r3, r2
 80056cc:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f003 0308 	and.w	r3, r3, #8
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d010      	beq.n	80056fc <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	695a      	ldr	r2, [r3, #20]
 80056de:	4b34      	ldr	r3, [pc, #208]	; (80057b0 <HAL_RCC_ClockConfig+0x358>)
 80056e0:	69db      	ldr	r3, [r3, #28]
 80056e2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80056e6:	429a      	cmp	r2, r3
 80056e8:	d208      	bcs.n	80056fc <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80056ea:	4b31      	ldr	r3, [pc, #196]	; (80057b0 <HAL_RCC_ClockConfig+0x358>)
 80056ec:	69db      	ldr	r3, [r3, #28]
 80056ee:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	695b      	ldr	r3, [r3, #20]
 80056f6:	492e      	ldr	r1, [pc, #184]	; (80057b0 <HAL_RCC_ClockConfig+0x358>)
 80056f8:	4313      	orrs	r3, r2
 80056fa:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f003 0310 	and.w	r3, r3, #16
 8005704:	2b00      	cmp	r3, #0
 8005706:	d010      	beq.n	800572a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	699a      	ldr	r2, [r3, #24]
 800570c:	4b28      	ldr	r3, [pc, #160]	; (80057b0 <HAL_RCC_ClockConfig+0x358>)
 800570e:	69db      	ldr	r3, [r3, #28]
 8005710:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005714:	429a      	cmp	r2, r3
 8005716:	d208      	bcs.n	800572a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005718:	4b25      	ldr	r3, [pc, #148]	; (80057b0 <HAL_RCC_ClockConfig+0x358>)
 800571a:	69db      	ldr	r3, [r3, #28]
 800571c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	699b      	ldr	r3, [r3, #24]
 8005724:	4922      	ldr	r1, [pc, #136]	; (80057b0 <HAL_RCC_ClockConfig+0x358>)
 8005726:	4313      	orrs	r3, r2
 8005728:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f003 0320 	and.w	r3, r3, #32
 8005732:	2b00      	cmp	r3, #0
 8005734:	d010      	beq.n	8005758 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	69da      	ldr	r2, [r3, #28]
 800573a:	4b1d      	ldr	r3, [pc, #116]	; (80057b0 <HAL_RCC_ClockConfig+0x358>)
 800573c:	6a1b      	ldr	r3, [r3, #32]
 800573e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005742:	429a      	cmp	r2, r3
 8005744:	d208      	bcs.n	8005758 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005746:	4b1a      	ldr	r3, [pc, #104]	; (80057b0 <HAL_RCC_ClockConfig+0x358>)
 8005748:	6a1b      	ldr	r3, [r3, #32]
 800574a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	69db      	ldr	r3, [r3, #28]
 8005752:	4917      	ldr	r1, [pc, #92]	; (80057b0 <HAL_RCC_ClockConfig+0x358>)
 8005754:	4313      	orrs	r3, r2
 8005756:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005758:	f000 f834 	bl	80057c4 <HAL_RCC_GetSysClockFreq>
 800575c:	4602      	mov	r2, r0
 800575e:	4b14      	ldr	r3, [pc, #80]	; (80057b0 <HAL_RCC_ClockConfig+0x358>)
 8005760:	699b      	ldr	r3, [r3, #24]
 8005762:	0a1b      	lsrs	r3, r3, #8
 8005764:	f003 030f 	and.w	r3, r3, #15
 8005768:	4912      	ldr	r1, [pc, #72]	; (80057b4 <HAL_RCC_ClockConfig+0x35c>)
 800576a:	5ccb      	ldrb	r3, [r1, r3]
 800576c:	f003 031f 	and.w	r3, r3, #31
 8005770:	fa22 f303 	lsr.w	r3, r2, r3
 8005774:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005776:	4b0e      	ldr	r3, [pc, #56]	; (80057b0 <HAL_RCC_ClockConfig+0x358>)
 8005778:	699b      	ldr	r3, [r3, #24]
 800577a:	f003 030f 	and.w	r3, r3, #15
 800577e:	4a0d      	ldr	r2, [pc, #52]	; (80057b4 <HAL_RCC_ClockConfig+0x35c>)
 8005780:	5cd3      	ldrb	r3, [r2, r3]
 8005782:	f003 031f 	and.w	r3, r3, #31
 8005786:	693a      	ldr	r2, [r7, #16]
 8005788:	fa22 f303 	lsr.w	r3, r2, r3
 800578c:	4a0a      	ldr	r2, [pc, #40]	; (80057b8 <HAL_RCC_ClockConfig+0x360>)
 800578e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005790:	4a0a      	ldr	r2, [pc, #40]	; (80057bc <HAL_RCC_ClockConfig+0x364>)
 8005792:	693b      	ldr	r3, [r7, #16]
 8005794:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8005796:	4b0a      	ldr	r3, [pc, #40]	; (80057c0 <HAL_RCC_ClockConfig+0x368>)
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	4618      	mov	r0, r3
 800579c:	f7fb ff4e 	bl	800163c <HAL_InitTick>
 80057a0:	4603      	mov	r3, r0
 80057a2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80057a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80057a6:	4618      	mov	r0, r3
 80057a8:	3718      	adds	r7, #24
 80057aa:	46bd      	mov	sp, r7
 80057ac:	bd80      	pop	{r7, pc}
 80057ae:	bf00      	nop
 80057b0:	58024400 	.word	0x58024400
 80057b4:	0800cd48 	.word	0x0800cd48
 80057b8:	24000404 	.word	0x24000404
 80057bc:	24000400 	.word	0x24000400
 80057c0:	240007f4 	.word	0x240007f4

080057c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80057c4:	b480      	push	{r7}
 80057c6:	b089      	sub	sp, #36	; 0x24
 80057c8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80057ca:	4bb3      	ldr	r3, [pc, #716]	; (8005a98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80057cc:	691b      	ldr	r3, [r3, #16]
 80057ce:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80057d2:	2b18      	cmp	r3, #24
 80057d4:	f200 8155 	bhi.w	8005a82 <HAL_RCC_GetSysClockFreq+0x2be>
 80057d8:	a201      	add	r2, pc, #4	; (adr r2, 80057e0 <HAL_RCC_GetSysClockFreq+0x1c>)
 80057da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057de:	bf00      	nop
 80057e0:	08005845 	.word	0x08005845
 80057e4:	08005a83 	.word	0x08005a83
 80057e8:	08005a83 	.word	0x08005a83
 80057ec:	08005a83 	.word	0x08005a83
 80057f0:	08005a83 	.word	0x08005a83
 80057f4:	08005a83 	.word	0x08005a83
 80057f8:	08005a83 	.word	0x08005a83
 80057fc:	08005a83 	.word	0x08005a83
 8005800:	0800586b 	.word	0x0800586b
 8005804:	08005a83 	.word	0x08005a83
 8005808:	08005a83 	.word	0x08005a83
 800580c:	08005a83 	.word	0x08005a83
 8005810:	08005a83 	.word	0x08005a83
 8005814:	08005a83 	.word	0x08005a83
 8005818:	08005a83 	.word	0x08005a83
 800581c:	08005a83 	.word	0x08005a83
 8005820:	08005871 	.word	0x08005871
 8005824:	08005a83 	.word	0x08005a83
 8005828:	08005a83 	.word	0x08005a83
 800582c:	08005a83 	.word	0x08005a83
 8005830:	08005a83 	.word	0x08005a83
 8005834:	08005a83 	.word	0x08005a83
 8005838:	08005a83 	.word	0x08005a83
 800583c:	08005a83 	.word	0x08005a83
 8005840:	08005877 	.word	0x08005877
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005844:	4b94      	ldr	r3, [pc, #592]	; (8005a98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f003 0320 	and.w	r3, r3, #32
 800584c:	2b00      	cmp	r3, #0
 800584e:	d009      	beq.n	8005864 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005850:	4b91      	ldr	r3, [pc, #580]	; (8005a98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	08db      	lsrs	r3, r3, #3
 8005856:	f003 0303 	and.w	r3, r3, #3
 800585a:	4a90      	ldr	r2, [pc, #576]	; (8005a9c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800585c:	fa22 f303 	lsr.w	r3, r2, r3
 8005860:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8005862:	e111      	b.n	8005a88 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005864:	4b8d      	ldr	r3, [pc, #564]	; (8005a9c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005866:	61bb      	str	r3, [r7, #24]
    break;
 8005868:	e10e      	b.n	8005a88 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800586a:	4b8d      	ldr	r3, [pc, #564]	; (8005aa0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800586c:	61bb      	str	r3, [r7, #24]
    break;
 800586e:	e10b      	b.n	8005a88 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8005870:	4b8c      	ldr	r3, [pc, #560]	; (8005aa4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005872:	61bb      	str	r3, [r7, #24]
    break;
 8005874:	e108      	b.n	8005a88 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005876:	4b88      	ldr	r3, [pc, #544]	; (8005a98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005878:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800587a:	f003 0303 	and.w	r3, r3, #3
 800587e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8005880:	4b85      	ldr	r3, [pc, #532]	; (8005a98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005882:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005884:	091b      	lsrs	r3, r3, #4
 8005886:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800588a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800588c:	4b82      	ldr	r3, [pc, #520]	; (8005a98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800588e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005890:	f003 0301 	and.w	r3, r3, #1
 8005894:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8005896:	4b80      	ldr	r3, [pc, #512]	; (8005a98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005898:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800589a:	08db      	lsrs	r3, r3, #3
 800589c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80058a0:	68fa      	ldr	r2, [r7, #12]
 80058a2:	fb02 f303 	mul.w	r3, r2, r3
 80058a6:	ee07 3a90 	vmov	s15, r3
 80058aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058ae:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80058b2:	693b      	ldr	r3, [r7, #16]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	f000 80e1 	beq.w	8005a7c <HAL_RCC_GetSysClockFreq+0x2b8>
 80058ba:	697b      	ldr	r3, [r7, #20]
 80058bc:	2b02      	cmp	r3, #2
 80058be:	f000 8083 	beq.w	80059c8 <HAL_RCC_GetSysClockFreq+0x204>
 80058c2:	697b      	ldr	r3, [r7, #20]
 80058c4:	2b02      	cmp	r3, #2
 80058c6:	f200 80a1 	bhi.w	8005a0c <HAL_RCC_GetSysClockFreq+0x248>
 80058ca:	697b      	ldr	r3, [r7, #20]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d003      	beq.n	80058d8 <HAL_RCC_GetSysClockFreq+0x114>
 80058d0:	697b      	ldr	r3, [r7, #20]
 80058d2:	2b01      	cmp	r3, #1
 80058d4:	d056      	beq.n	8005984 <HAL_RCC_GetSysClockFreq+0x1c0>
 80058d6:	e099      	b.n	8005a0c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80058d8:	4b6f      	ldr	r3, [pc, #444]	; (8005a98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f003 0320 	and.w	r3, r3, #32
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d02d      	beq.n	8005940 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80058e4:	4b6c      	ldr	r3, [pc, #432]	; (8005a98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	08db      	lsrs	r3, r3, #3
 80058ea:	f003 0303 	and.w	r3, r3, #3
 80058ee:	4a6b      	ldr	r2, [pc, #428]	; (8005a9c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80058f0:	fa22 f303 	lsr.w	r3, r2, r3
 80058f4:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	ee07 3a90 	vmov	s15, r3
 80058fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005900:	693b      	ldr	r3, [r7, #16]
 8005902:	ee07 3a90 	vmov	s15, r3
 8005906:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800590a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800590e:	4b62      	ldr	r3, [pc, #392]	; (8005a98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005912:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005916:	ee07 3a90 	vmov	s15, r3
 800591a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800591e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005922:	eddf 5a61 	vldr	s11, [pc, #388]	; 8005aa8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005926:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800592a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800592e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005932:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005936:	ee67 7a27 	vmul.f32	s15, s14, s15
 800593a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800593e:	e087      	b.n	8005a50 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005940:	693b      	ldr	r3, [r7, #16]
 8005942:	ee07 3a90 	vmov	s15, r3
 8005946:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800594a:	eddf 6a58 	vldr	s13, [pc, #352]	; 8005aac <HAL_RCC_GetSysClockFreq+0x2e8>
 800594e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005952:	4b51      	ldr	r3, [pc, #324]	; (8005a98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005956:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800595a:	ee07 3a90 	vmov	s15, r3
 800595e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005962:	ed97 6a02 	vldr	s12, [r7, #8]
 8005966:	eddf 5a50 	vldr	s11, [pc, #320]	; 8005aa8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800596a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800596e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005972:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005976:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800597a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800597e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005982:	e065      	b.n	8005a50 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005984:	693b      	ldr	r3, [r7, #16]
 8005986:	ee07 3a90 	vmov	s15, r3
 800598a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800598e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8005ab0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005992:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005996:	4b40      	ldr	r3, [pc, #256]	; (8005a98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800599a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800599e:	ee07 3a90 	vmov	s15, r3
 80059a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059a6:	ed97 6a02 	vldr	s12, [r7, #8]
 80059aa:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8005aa8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80059ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80059b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80059b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80059ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80059be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80059c6:	e043      	b.n	8005a50 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80059c8:	693b      	ldr	r3, [r7, #16]
 80059ca:	ee07 3a90 	vmov	s15, r3
 80059ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059d2:	eddf 6a38 	vldr	s13, [pc, #224]	; 8005ab4 <HAL_RCC_GetSysClockFreq+0x2f0>
 80059d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80059da:	4b2f      	ldr	r3, [pc, #188]	; (8005a98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80059dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059e2:	ee07 3a90 	vmov	s15, r3
 80059e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059ea:	ed97 6a02 	vldr	s12, [r7, #8]
 80059ee:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8005aa8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80059f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80059f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80059fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80059fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a06:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005a0a:	e021      	b.n	8005a50 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005a0c:	693b      	ldr	r3, [r7, #16]
 8005a0e:	ee07 3a90 	vmov	s15, r3
 8005a12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a16:	eddf 6a26 	vldr	s13, [pc, #152]	; 8005ab0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005a1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a1e:	4b1e      	ldr	r3, [pc, #120]	; (8005a98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a26:	ee07 3a90 	vmov	s15, r3
 8005a2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a2e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005a32:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8005aa8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005a36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a3e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005a42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a4a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005a4e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8005a50:	4b11      	ldr	r3, [pc, #68]	; (8005a98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005a52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a54:	0a5b      	lsrs	r3, r3, #9
 8005a56:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a5a:	3301      	adds	r3, #1
 8005a5c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	ee07 3a90 	vmov	s15, r3
 8005a64:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005a68:	edd7 6a07 	vldr	s13, [r7, #28]
 8005a6c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005a70:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005a74:	ee17 3a90 	vmov	r3, s15
 8005a78:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8005a7a:	e005      	b.n	8005a88 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	61bb      	str	r3, [r7, #24]
    break;
 8005a80:	e002      	b.n	8005a88 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8005a82:	4b07      	ldr	r3, [pc, #28]	; (8005aa0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005a84:	61bb      	str	r3, [r7, #24]
    break;
 8005a86:	bf00      	nop
  }

  return sysclockfreq;
 8005a88:	69bb      	ldr	r3, [r7, #24]
}
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	3724      	adds	r7, #36	; 0x24
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a94:	4770      	bx	lr
 8005a96:	bf00      	nop
 8005a98:	58024400 	.word	0x58024400
 8005a9c:	03d09000 	.word	0x03d09000
 8005aa0:	003d0900 	.word	0x003d0900
 8005aa4:	007a1200 	.word	0x007a1200
 8005aa8:	46000000 	.word	0x46000000
 8005aac:	4c742400 	.word	0x4c742400
 8005ab0:	4a742400 	.word	0x4a742400
 8005ab4:	4af42400 	.word	0x4af42400

08005ab8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b082      	sub	sp, #8
 8005abc:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005abe:	f7ff fe81 	bl	80057c4 <HAL_RCC_GetSysClockFreq>
 8005ac2:	4602      	mov	r2, r0
 8005ac4:	4b10      	ldr	r3, [pc, #64]	; (8005b08 <HAL_RCC_GetHCLKFreq+0x50>)
 8005ac6:	699b      	ldr	r3, [r3, #24]
 8005ac8:	0a1b      	lsrs	r3, r3, #8
 8005aca:	f003 030f 	and.w	r3, r3, #15
 8005ace:	490f      	ldr	r1, [pc, #60]	; (8005b0c <HAL_RCC_GetHCLKFreq+0x54>)
 8005ad0:	5ccb      	ldrb	r3, [r1, r3]
 8005ad2:	f003 031f 	and.w	r3, r3, #31
 8005ad6:	fa22 f303 	lsr.w	r3, r2, r3
 8005ada:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005adc:	4b0a      	ldr	r3, [pc, #40]	; (8005b08 <HAL_RCC_GetHCLKFreq+0x50>)
 8005ade:	699b      	ldr	r3, [r3, #24]
 8005ae0:	f003 030f 	and.w	r3, r3, #15
 8005ae4:	4a09      	ldr	r2, [pc, #36]	; (8005b0c <HAL_RCC_GetHCLKFreq+0x54>)
 8005ae6:	5cd3      	ldrb	r3, [r2, r3]
 8005ae8:	f003 031f 	and.w	r3, r3, #31
 8005aec:	687a      	ldr	r2, [r7, #4]
 8005aee:	fa22 f303 	lsr.w	r3, r2, r3
 8005af2:	4a07      	ldr	r2, [pc, #28]	; (8005b10 <HAL_RCC_GetHCLKFreq+0x58>)
 8005af4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005af6:	4a07      	ldr	r2, [pc, #28]	; (8005b14 <HAL_RCC_GetHCLKFreq+0x5c>)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005afc:	4b04      	ldr	r3, [pc, #16]	; (8005b10 <HAL_RCC_GetHCLKFreq+0x58>)
 8005afe:	681b      	ldr	r3, [r3, #0]
}
 8005b00:	4618      	mov	r0, r3
 8005b02:	3708      	adds	r7, #8
 8005b04:	46bd      	mov	sp, r7
 8005b06:	bd80      	pop	{r7, pc}
 8005b08:	58024400 	.word	0x58024400
 8005b0c:	0800cd48 	.word	0x0800cd48
 8005b10:	24000404 	.word	0x24000404
 8005b14:	24000400 	.word	0x24000400

08005b18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005b1c:	f7ff ffcc 	bl	8005ab8 <HAL_RCC_GetHCLKFreq>
 8005b20:	4602      	mov	r2, r0
 8005b22:	4b06      	ldr	r3, [pc, #24]	; (8005b3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005b24:	69db      	ldr	r3, [r3, #28]
 8005b26:	091b      	lsrs	r3, r3, #4
 8005b28:	f003 0307 	and.w	r3, r3, #7
 8005b2c:	4904      	ldr	r1, [pc, #16]	; (8005b40 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005b2e:	5ccb      	ldrb	r3, [r1, r3]
 8005b30:	f003 031f 	and.w	r3, r3, #31
 8005b34:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005b38:	4618      	mov	r0, r3
 8005b3a:	bd80      	pop	{r7, pc}
 8005b3c:	58024400 	.word	0x58024400
 8005b40:	0800cd48 	.word	0x0800cd48

08005b44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005b48:	f7ff ffb6 	bl	8005ab8 <HAL_RCC_GetHCLKFreq>
 8005b4c:	4602      	mov	r2, r0
 8005b4e:	4b06      	ldr	r3, [pc, #24]	; (8005b68 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005b50:	69db      	ldr	r3, [r3, #28]
 8005b52:	0a1b      	lsrs	r3, r3, #8
 8005b54:	f003 0307 	and.w	r3, r3, #7
 8005b58:	4904      	ldr	r1, [pc, #16]	; (8005b6c <HAL_RCC_GetPCLK2Freq+0x28>)
 8005b5a:	5ccb      	ldrb	r3, [r1, r3]
 8005b5c:	f003 031f 	and.w	r3, r3, #31
 8005b60:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8005b64:	4618      	mov	r0, r3
 8005b66:	bd80      	pop	{r7, pc}
 8005b68:	58024400 	.word	0x58024400
 8005b6c:	0800cd48 	.word	0x0800cd48

08005b70 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b086      	sub	sp, #24
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005b78:	2300      	movs	r3, #0
 8005b7a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d03f      	beq.n	8005c0c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005b90:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005b94:	d02a      	beq.n	8005bec <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8005b96:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005b9a:	d824      	bhi.n	8005be6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005b9c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005ba0:	d018      	beq.n	8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005ba2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005ba6:	d81e      	bhi.n	8005be6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d003      	beq.n	8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005bac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005bb0:	d007      	beq.n	8005bc2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005bb2:	e018      	b.n	8005be6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005bb4:	4bab      	ldr	r3, [pc, #684]	; (8005e64 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bb8:	4aaa      	ldr	r2, [pc, #680]	; (8005e64 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005bba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005bbe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005bc0:	e015      	b.n	8005bee <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	3304      	adds	r3, #4
 8005bc6:	2102      	movs	r1, #2
 8005bc8:	4618      	mov	r0, r3
 8005bca:	f001 fff3 	bl	8007bb4 <RCCEx_PLL2_Config>
 8005bce:	4603      	mov	r3, r0
 8005bd0:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005bd2:	e00c      	b.n	8005bee <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	3324      	adds	r3, #36	; 0x24
 8005bd8:	2102      	movs	r1, #2
 8005bda:	4618      	mov	r0, r3
 8005bdc:	f002 f89c 	bl	8007d18 <RCCEx_PLL3_Config>
 8005be0:	4603      	mov	r3, r0
 8005be2:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005be4:	e003      	b.n	8005bee <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005be6:	2301      	movs	r3, #1
 8005be8:	75fb      	strb	r3, [r7, #23]
      break;
 8005bea:	e000      	b.n	8005bee <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005bec:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005bee:	7dfb      	ldrb	r3, [r7, #23]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d109      	bne.n	8005c08 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005bf4:	4b9b      	ldr	r3, [pc, #620]	; (8005e64 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005bf6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005bf8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c00:	4998      	ldr	r1, [pc, #608]	; (8005e64 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005c02:	4313      	orrs	r3, r2
 8005c04:	650b      	str	r3, [r1, #80]	; 0x50
 8005c06:	e001      	b.n	8005c0c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c08:	7dfb      	ldrb	r3, [r7, #23]
 8005c0a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d03d      	beq.n	8005c94 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c1c:	2b04      	cmp	r3, #4
 8005c1e:	d826      	bhi.n	8005c6e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8005c20:	a201      	add	r2, pc, #4	; (adr r2, 8005c28 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8005c22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c26:	bf00      	nop
 8005c28:	08005c3d 	.word	0x08005c3d
 8005c2c:	08005c4b 	.word	0x08005c4b
 8005c30:	08005c5d 	.word	0x08005c5d
 8005c34:	08005c75 	.word	0x08005c75
 8005c38:	08005c75 	.word	0x08005c75
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c3c:	4b89      	ldr	r3, [pc, #548]	; (8005e64 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c40:	4a88      	ldr	r2, [pc, #544]	; (8005e64 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005c42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005c46:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005c48:	e015      	b.n	8005c76 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	3304      	adds	r3, #4
 8005c4e:	2100      	movs	r1, #0
 8005c50:	4618      	mov	r0, r3
 8005c52:	f001 ffaf 	bl	8007bb4 <RCCEx_PLL2_Config>
 8005c56:	4603      	mov	r3, r0
 8005c58:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005c5a:	e00c      	b.n	8005c76 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	3324      	adds	r3, #36	; 0x24
 8005c60:	2100      	movs	r1, #0
 8005c62:	4618      	mov	r0, r3
 8005c64:	f002 f858 	bl	8007d18 <RCCEx_PLL3_Config>
 8005c68:	4603      	mov	r3, r0
 8005c6a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005c6c:	e003      	b.n	8005c76 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005c6e:	2301      	movs	r3, #1
 8005c70:	75fb      	strb	r3, [r7, #23]
      break;
 8005c72:	e000      	b.n	8005c76 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8005c74:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005c76:	7dfb      	ldrb	r3, [r7, #23]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d109      	bne.n	8005c90 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005c7c:	4b79      	ldr	r3, [pc, #484]	; (8005e64 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005c7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c80:	f023 0207 	bic.w	r2, r3, #7
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c88:	4976      	ldr	r1, [pc, #472]	; (8005e64 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005c8a:	4313      	orrs	r3, r2
 8005c8c:	650b      	str	r3, [r1, #80]	; 0x50
 8005c8e:	e001      	b.n	8005c94 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c90:	7dfb      	ldrb	r3, [r7, #23]
 8005c92:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d042      	beq.n	8005d26 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ca4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ca8:	d02b      	beq.n	8005d02 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8005caa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005cae:	d825      	bhi.n	8005cfc <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8005cb0:	2bc0      	cmp	r3, #192	; 0xc0
 8005cb2:	d028      	beq.n	8005d06 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005cb4:	2bc0      	cmp	r3, #192	; 0xc0
 8005cb6:	d821      	bhi.n	8005cfc <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8005cb8:	2b80      	cmp	r3, #128	; 0x80
 8005cba:	d016      	beq.n	8005cea <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8005cbc:	2b80      	cmp	r3, #128	; 0x80
 8005cbe:	d81d      	bhi.n	8005cfc <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d002      	beq.n	8005cca <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8005cc4:	2b40      	cmp	r3, #64	; 0x40
 8005cc6:	d007      	beq.n	8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8005cc8:	e018      	b.n	8005cfc <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005cca:	4b66      	ldr	r3, [pc, #408]	; (8005e64 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005ccc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cce:	4a65      	ldr	r2, [pc, #404]	; (8005e64 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005cd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005cd4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8005cd6:	e017      	b.n	8005d08 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	3304      	adds	r3, #4
 8005cdc:	2100      	movs	r1, #0
 8005cde:	4618      	mov	r0, r3
 8005ce0:	f001 ff68 	bl	8007bb4 <RCCEx_PLL2_Config>
 8005ce4:	4603      	mov	r3, r0
 8005ce6:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8005ce8:	e00e      	b.n	8005d08 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	3324      	adds	r3, #36	; 0x24
 8005cee:	2100      	movs	r1, #0
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	f002 f811 	bl	8007d18 <RCCEx_PLL3_Config>
 8005cf6:	4603      	mov	r3, r0
 8005cf8:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8005cfa:	e005      	b.n	8005d08 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005cfc:	2301      	movs	r3, #1
 8005cfe:	75fb      	strb	r3, [r7, #23]
      break;
 8005d00:	e002      	b.n	8005d08 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8005d02:	bf00      	nop
 8005d04:	e000      	b.n	8005d08 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8005d06:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005d08:	7dfb      	ldrb	r3, [r7, #23]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d109      	bne.n	8005d22 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8005d0e:	4b55      	ldr	r3, [pc, #340]	; (8005e64 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005d10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d12:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d1a:	4952      	ldr	r1, [pc, #328]	; (8005e64 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005d1c:	4313      	orrs	r3, r2
 8005d1e:	650b      	str	r3, [r1, #80]	; 0x50
 8005d20:	e001      	b.n	8005d26 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d22:	7dfb      	ldrb	r3, [r7, #23]
 8005d24:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d049      	beq.n	8005dc6 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005d38:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005d3c:	d030      	beq.n	8005da0 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8005d3e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005d42:	d82a      	bhi.n	8005d9a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005d44:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005d48:	d02c      	beq.n	8005da4 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8005d4a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005d4e:	d824      	bhi.n	8005d9a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005d50:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005d54:	d018      	beq.n	8005d88 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8005d56:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005d5a:	d81e      	bhi.n	8005d9a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d003      	beq.n	8005d68 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8005d60:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005d64:	d007      	beq.n	8005d76 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8005d66:	e018      	b.n	8005d9a <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d68:	4b3e      	ldr	r3, [pc, #248]	; (8005e64 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d6c:	4a3d      	ldr	r2, [pc, #244]	; (8005e64 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005d6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005d72:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005d74:	e017      	b.n	8005da6 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	3304      	adds	r3, #4
 8005d7a:	2100      	movs	r1, #0
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	f001 ff19 	bl	8007bb4 <RCCEx_PLL2_Config>
 8005d82:	4603      	mov	r3, r0
 8005d84:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8005d86:	e00e      	b.n	8005da6 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	3324      	adds	r3, #36	; 0x24
 8005d8c:	2100      	movs	r1, #0
 8005d8e:	4618      	mov	r0, r3
 8005d90:	f001 ffc2 	bl	8007d18 <RCCEx_PLL3_Config>
 8005d94:	4603      	mov	r3, r0
 8005d96:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005d98:	e005      	b.n	8005da6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8005d9a:	2301      	movs	r3, #1
 8005d9c:	75fb      	strb	r3, [r7, #23]
      break;
 8005d9e:	e002      	b.n	8005da6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8005da0:	bf00      	nop
 8005da2:	e000      	b.n	8005da6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8005da4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005da6:	7dfb      	ldrb	r3, [r7, #23]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d10a      	bne.n	8005dc2 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005dac:	4b2d      	ldr	r3, [pc, #180]	; (8005e64 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005dae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005db0:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005dba:	492a      	ldr	r1, [pc, #168]	; (8005e64 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005dbc:	4313      	orrs	r3, r2
 8005dbe:	658b      	str	r3, [r1, #88]	; 0x58
 8005dc0:	e001      	b.n	8005dc6 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005dc2:	7dfb      	ldrb	r3, [r7, #23]
 8005dc4:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d04c      	beq.n	8005e6c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005dd8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005ddc:	d030      	beq.n	8005e40 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8005dde:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005de2:	d82a      	bhi.n	8005e3a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8005de4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005de8:	d02c      	beq.n	8005e44 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8005dea:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005dee:	d824      	bhi.n	8005e3a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8005df0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005df4:	d018      	beq.n	8005e28 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8005df6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005dfa:	d81e      	bhi.n	8005e3a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d003      	beq.n	8005e08 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8005e00:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005e04:	d007      	beq.n	8005e16 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8005e06:	e018      	b.n	8005e3a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e08:	4b16      	ldr	r3, [pc, #88]	; (8005e64 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e0c:	4a15      	ldr	r2, [pc, #84]	; (8005e64 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005e0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005e12:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005e14:	e017      	b.n	8005e46 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	3304      	adds	r3, #4
 8005e1a:	2100      	movs	r1, #0
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	f001 fec9 	bl	8007bb4 <RCCEx_PLL2_Config>
 8005e22:	4603      	mov	r3, r0
 8005e24:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8005e26:	e00e      	b.n	8005e46 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	3324      	adds	r3, #36	; 0x24
 8005e2c:	2100      	movs	r1, #0
 8005e2e:	4618      	mov	r0, r3
 8005e30:	f001 ff72 	bl	8007d18 <RCCEx_PLL3_Config>
 8005e34:	4603      	mov	r3, r0
 8005e36:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005e38:	e005      	b.n	8005e46 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8005e3a:	2301      	movs	r3, #1
 8005e3c:	75fb      	strb	r3, [r7, #23]
      break;
 8005e3e:	e002      	b.n	8005e46 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8005e40:	bf00      	nop
 8005e42:	e000      	b.n	8005e46 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8005e44:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005e46:	7dfb      	ldrb	r3, [r7, #23]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d10d      	bne.n	8005e68 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005e4c:	4b05      	ldr	r3, [pc, #20]	; (8005e64 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005e4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e50:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005e5a:	4902      	ldr	r1, [pc, #8]	; (8005e64 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005e5c:	4313      	orrs	r3, r2
 8005e5e:	658b      	str	r3, [r1, #88]	; 0x58
 8005e60:	e004      	b.n	8005e6c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8005e62:	bf00      	nop
 8005e64:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e68:	7dfb      	ldrb	r3, [r7, #23]
 8005e6a:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d032      	beq.n	8005ede <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e7c:	2b30      	cmp	r3, #48	; 0x30
 8005e7e:	d01c      	beq.n	8005eba <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8005e80:	2b30      	cmp	r3, #48	; 0x30
 8005e82:	d817      	bhi.n	8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8005e84:	2b20      	cmp	r3, #32
 8005e86:	d00c      	beq.n	8005ea2 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8005e88:	2b20      	cmp	r3, #32
 8005e8a:	d813      	bhi.n	8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d016      	beq.n	8005ebe <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8005e90:	2b10      	cmp	r3, #16
 8005e92:	d10f      	bne.n	8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e94:	4baf      	ldr	r3, [pc, #700]	; (8006154 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e98:	4aae      	ldr	r2, [pc, #696]	; (8006154 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005e9a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005e9e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8005ea0:	e00e      	b.n	8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	3304      	adds	r3, #4
 8005ea6:	2102      	movs	r1, #2
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	f001 fe83 	bl	8007bb4 <RCCEx_PLL2_Config>
 8005eae:	4603      	mov	r3, r0
 8005eb0:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8005eb2:	e005      	b.n	8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005eb4:	2301      	movs	r3, #1
 8005eb6:	75fb      	strb	r3, [r7, #23]
      break;
 8005eb8:	e002      	b.n	8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8005eba:	bf00      	nop
 8005ebc:	e000      	b.n	8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8005ebe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005ec0:	7dfb      	ldrb	r3, [r7, #23]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d109      	bne.n	8005eda <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005ec6:	4ba3      	ldr	r3, [pc, #652]	; (8006154 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005ec8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005eca:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ed2:	49a0      	ldr	r1, [pc, #640]	; (8006154 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005ed4:	4313      	orrs	r3, r2
 8005ed6:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005ed8:	e001      	b.n	8005ede <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005eda:	7dfb      	ldrb	r3, [r7, #23]
 8005edc:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d047      	beq.n	8005f7a <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005eee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005ef2:	d030      	beq.n	8005f56 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8005ef4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005ef8:	d82a      	bhi.n	8005f50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8005efa:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005efe:	d02c      	beq.n	8005f5a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8005f00:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005f04:	d824      	bhi.n	8005f50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8005f06:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f0a:	d018      	beq.n	8005f3e <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8005f0c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f10:	d81e      	bhi.n	8005f50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d003      	beq.n	8005f1e <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8005f16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f1a:	d007      	beq.n	8005f2c <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8005f1c:	e018      	b.n	8005f50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005f1e:	4b8d      	ldr	r3, [pc, #564]	; (8006154 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005f20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f22:	4a8c      	ldr	r2, [pc, #560]	; (8006154 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005f24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005f28:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005f2a:	e017      	b.n	8005f5c <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	3304      	adds	r3, #4
 8005f30:	2100      	movs	r1, #0
 8005f32:	4618      	mov	r0, r3
 8005f34:	f001 fe3e 	bl	8007bb4 <RCCEx_PLL2_Config>
 8005f38:	4603      	mov	r3, r0
 8005f3a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005f3c:	e00e      	b.n	8005f5c <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	3324      	adds	r3, #36	; 0x24
 8005f42:	2100      	movs	r1, #0
 8005f44:	4618      	mov	r0, r3
 8005f46:	f001 fee7 	bl	8007d18 <RCCEx_PLL3_Config>
 8005f4a:	4603      	mov	r3, r0
 8005f4c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005f4e:	e005      	b.n	8005f5c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005f50:	2301      	movs	r3, #1
 8005f52:	75fb      	strb	r3, [r7, #23]
      break;
 8005f54:	e002      	b.n	8005f5c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8005f56:	bf00      	nop
 8005f58:	e000      	b.n	8005f5c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8005f5a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005f5c:	7dfb      	ldrb	r3, [r7, #23]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d109      	bne.n	8005f76 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005f62:	4b7c      	ldr	r3, [pc, #496]	; (8006154 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005f64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f66:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f6e:	4979      	ldr	r1, [pc, #484]	; (8006154 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005f70:	4313      	orrs	r3, r2
 8005f72:	650b      	str	r3, [r1, #80]	; 0x50
 8005f74:	e001      	b.n	8005f7a <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f76:	7dfb      	ldrb	r3, [r7, #23]
 8005f78:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d049      	beq.n	800601a <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f8a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005f8e:	d02e      	beq.n	8005fee <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8005f90:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005f94:	d828      	bhi.n	8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8005f96:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005f9a:	d02a      	beq.n	8005ff2 <HAL_RCCEx_PeriphCLKConfig+0x482>
 8005f9c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005fa0:	d822      	bhi.n	8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8005fa2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005fa6:	d026      	beq.n	8005ff6 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8005fa8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005fac:	d81c      	bhi.n	8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8005fae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005fb2:	d010      	beq.n	8005fd6 <HAL_RCCEx_PeriphCLKConfig+0x466>
 8005fb4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005fb8:	d816      	bhi.n	8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d01d      	beq.n	8005ffa <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8005fbe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005fc2:	d111      	bne.n	8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	3304      	adds	r3, #4
 8005fc8:	2101      	movs	r1, #1
 8005fca:	4618      	mov	r0, r3
 8005fcc:	f001 fdf2 	bl	8007bb4 <RCCEx_PLL2_Config>
 8005fd0:	4603      	mov	r3, r0
 8005fd2:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8005fd4:	e012      	b.n	8005ffc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	3324      	adds	r3, #36	; 0x24
 8005fda:	2101      	movs	r1, #1
 8005fdc:	4618      	mov	r0, r3
 8005fde:	f001 fe9b 	bl	8007d18 <RCCEx_PLL3_Config>
 8005fe2:	4603      	mov	r3, r0
 8005fe4:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8005fe6:	e009      	b.n	8005ffc <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005fe8:	2301      	movs	r3, #1
 8005fea:	75fb      	strb	r3, [r7, #23]
      break;
 8005fec:	e006      	b.n	8005ffc <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8005fee:	bf00      	nop
 8005ff0:	e004      	b.n	8005ffc <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8005ff2:	bf00      	nop
 8005ff4:	e002      	b.n	8005ffc <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8005ff6:	bf00      	nop
 8005ff8:	e000      	b.n	8005ffc <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8005ffa:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005ffc:	7dfb      	ldrb	r3, [r7, #23]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d109      	bne.n	8006016 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006002:	4b54      	ldr	r3, [pc, #336]	; (8006154 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006004:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006006:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800600e:	4951      	ldr	r1, [pc, #324]	; (8006154 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006010:	4313      	orrs	r3, r2
 8006012:	650b      	str	r3, [r1, #80]	; 0x50
 8006014:	e001      	b.n	800601a <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006016:	7dfb      	ldrb	r3, [r7, #23]
 8006018:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006022:	2b00      	cmp	r3, #0
 8006024:	d04b      	beq.n	80060be <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800602c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006030:	d02e      	beq.n	8006090 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8006032:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006036:	d828      	bhi.n	800608a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8006038:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800603c:	d02a      	beq.n	8006094 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800603e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006042:	d822      	bhi.n	800608a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8006044:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006048:	d026      	beq.n	8006098 <HAL_RCCEx_PeriphCLKConfig+0x528>
 800604a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800604e:	d81c      	bhi.n	800608a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8006050:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006054:	d010      	beq.n	8006078 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8006056:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800605a:	d816      	bhi.n	800608a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800605c:	2b00      	cmp	r3, #0
 800605e:	d01d      	beq.n	800609c <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8006060:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006064:	d111      	bne.n	800608a <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	3304      	adds	r3, #4
 800606a:	2101      	movs	r1, #1
 800606c:	4618      	mov	r0, r3
 800606e:	f001 fda1 	bl	8007bb4 <RCCEx_PLL2_Config>
 8006072:	4603      	mov	r3, r0
 8006074:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8006076:	e012      	b.n	800609e <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	3324      	adds	r3, #36	; 0x24
 800607c:	2101      	movs	r1, #1
 800607e:	4618      	mov	r0, r3
 8006080:	f001 fe4a 	bl	8007d18 <RCCEx_PLL3_Config>
 8006084:	4603      	mov	r3, r0
 8006086:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8006088:	e009      	b.n	800609e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800608a:	2301      	movs	r3, #1
 800608c:	75fb      	strb	r3, [r7, #23]
      break;
 800608e:	e006      	b.n	800609e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8006090:	bf00      	nop
 8006092:	e004      	b.n	800609e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8006094:	bf00      	nop
 8006096:	e002      	b.n	800609e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8006098:	bf00      	nop
 800609a:	e000      	b.n	800609e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800609c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800609e:	7dfb      	ldrb	r3, [r7, #23]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d10a      	bne.n	80060ba <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80060a4:	4b2b      	ldr	r3, [pc, #172]	; (8006154 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80060a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060a8:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80060b2:	4928      	ldr	r1, [pc, #160]	; (8006154 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80060b4:	4313      	orrs	r3, r2
 80060b6:	658b      	str	r3, [r1, #88]	; 0x58
 80060b8:	e001      	b.n	80060be <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060ba:	7dfb      	ldrb	r3, [r7, #23]
 80060bc:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d02f      	beq.n	800612a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80060ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80060d2:	d00e      	beq.n	80060f2 <HAL_RCCEx_PeriphCLKConfig+0x582>
 80060d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80060d8:	d814      	bhi.n	8006104 <HAL_RCCEx_PeriphCLKConfig+0x594>
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d015      	beq.n	800610a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80060de:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80060e2:	d10f      	bne.n	8006104 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80060e4:	4b1b      	ldr	r3, [pc, #108]	; (8006154 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80060e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060e8:	4a1a      	ldr	r2, [pc, #104]	; (8006154 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80060ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80060ee:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80060f0:	e00c      	b.n	800610c <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	3304      	adds	r3, #4
 80060f6:	2101      	movs	r1, #1
 80060f8:	4618      	mov	r0, r3
 80060fa:	f001 fd5b 	bl	8007bb4 <RCCEx_PLL2_Config>
 80060fe:	4603      	mov	r3, r0
 8006100:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8006102:	e003      	b.n	800610c <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006104:	2301      	movs	r3, #1
 8006106:	75fb      	strb	r3, [r7, #23]
      break;
 8006108:	e000      	b.n	800610c <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 800610a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800610c:	7dfb      	ldrb	r3, [r7, #23]
 800610e:	2b00      	cmp	r3, #0
 8006110:	d109      	bne.n	8006126 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006112:	4b10      	ldr	r3, [pc, #64]	; (8006154 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006114:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006116:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800611e:	490d      	ldr	r1, [pc, #52]	; (8006154 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006120:	4313      	orrs	r3, r2
 8006122:	650b      	str	r3, [r1, #80]	; 0x50
 8006124:	e001      	b.n	800612a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006126:	7dfb      	ldrb	r3, [r7, #23]
 8006128:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006132:	2b00      	cmp	r3, #0
 8006134:	d033      	beq.n	800619e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800613a:	2b03      	cmp	r3, #3
 800613c:	d81c      	bhi.n	8006178 <HAL_RCCEx_PeriphCLKConfig+0x608>
 800613e:	a201      	add	r2, pc, #4	; (adr r2, 8006144 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8006140:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006144:	0800617f 	.word	0x0800617f
 8006148:	08006159 	.word	0x08006159
 800614c:	08006167 	.word	0x08006167
 8006150:	0800617f 	.word	0x0800617f
 8006154:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006158:	4bb8      	ldr	r3, [pc, #736]	; (800643c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800615a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800615c:	4ab7      	ldr	r2, [pc, #732]	; (800643c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800615e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006162:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8006164:	e00c      	b.n	8006180 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	3304      	adds	r3, #4
 800616a:	2102      	movs	r1, #2
 800616c:	4618      	mov	r0, r3
 800616e:	f001 fd21 	bl	8007bb4 <RCCEx_PLL2_Config>
 8006172:	4603      	mov	r3, r0
 8006174:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8006176:	e003      	b.n	8006180 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8006178:	2301      	movs	r3, #1
 800617a:	75fb      	strb	r3, [r7, #23]
      break;
 800617c:	e000      	b.n	8006180 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 800617e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006180:	7dfb      	ldrb	r3, [r7, #23]
 8006182:	2b00      	cmp	r3, #0
 8006184:	d109      	bne.n	800619a <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006186:	4bad      	ldr	r3, [pc, #692]	; (800643c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006188:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800618a:	f023 0203 	bic.w	r2, r3, #3
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006192:	49aa      	ldr	r1, [pc, #680]	; (800643c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006194:	4313      	orrs	r3, r2
 8006196:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006198:	e001      	b.n	800619e <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800619a:	7dfb      	ldrb	r3, [r7, #23]
 800619c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	f000 8086 	beq.w	80062b8 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80061ac:	4ba4      	ldr	r3, [pc, #656]	; (8006440 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	4aa3      	ldr	r2, [pc, #652]	; (8006440 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80061b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80061b6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80061b8:	f7fb fa8a 	bl	80016d0 <HAL_GetTick>
 80061bc:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80061be:	e009      	b.n	80061d4 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80061c0:	f7fb fa86 	bl	80016d0 <HAL_GetTick>
 80061c4:	4602      	mov	r2, r0
 80061c6:	693b      	ldr	r3, [r7, #16]
 80061c8:	1ad3      	subs	r3, r2, r3
 80061ca:	2b64      	cmp	r3, #100	; 0x64
 80061cc:	d902      	bls.n	80061d4 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 80061ce:	2303      	movs	r3, #3
 80061d0:	75fb      	strb	r3, [r7, #23]
        break;
 80061d2:	e005      	b.n	80061e0 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80061d4:	4b9a      	ldr	r3, [pc, #616]	; (8006440 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d0ef      	beq.n	80061c0 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 80061e0:	7dfb      	ldrb	r3, [r7, #23]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d166      	bne.n	80062b4 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80061e6:	4b95      	ldr	r3, [pc, #596]	; (800643c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80061e8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80061f0:	4053      	eors	r3, r2
 80061f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d013      	beq.n	8006222 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80061fa:	4b90      	ldr	r3, [pc, #576]	; (800643c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80061fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006202:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006204:	4b8d      	ldr	r3, [pc, #564]	; (800643c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006206:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006208:	4a8c      	ldr	r2, [pc, #560]	; (800643c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800620a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800620e:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006210:	4b8a      	ldr	r3, [pc, #552]	; (800643c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006212:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006214:	4a89      	ldr	r2, [pc, #548]	; (800643c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006216:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800621a:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800621c:	4a87      	ldr	r2, [pc, #540]	; (800643c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006228:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800622c:	d115      	bne.n	800625a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800622e:	f7fb fa4f 	bl	80016d0 <HAL_GetTick>
 8006232:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006234:	e00b      	b.n	800624e <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006236:	f7fb fa4b 	bl	80016d0 <HAL_GetTick>
 800623a:	4602      	mov	r2, r0
 800623c:	693b      	ldr	r3, [r7, #16]
 800623e:	1ad3      	subs	r3, r2, r3
 8006240:	f241 3288 	movw	r2, #5000	; 0x1388
 8006244:	4293      	cmp	r3, r2
 8006246:	d902      	bls.n	800624e <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8006248:	2303      	movs	r3, #3
 800624a:	75fb      	strb	r3, [r7, #23]
            break;
 800624c:	e005      	b.n	800625a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800624e:	4b7b      	ldr	r3, [pc, #492]	; (800643c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006250:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006252:	f003 0302 	and.w	r3, r3, #2
 8006256:	2b00      	cmp	r3, #0
 8006258:	d0ed      	beq.n	8006236 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 800625a:	7dfb      	ldrb	r3, [r7, #23]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d126      	bne.n	80062ae <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006266:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800626a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800626e:	d10d      	bne.n	800628c <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8006270:	4b72      	ldr	r3, [pc, #456]	; (800643c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006272:	691b      	ldr	r3, [r3, #16]
 8006274:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800627e:	0919      	lsrs	r1, r3, #4
 8006280:	4b70      	ldr	r3, [pc, #448]	; (8006444 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8006282:	400b      	ands	r3, r1
 8006284:	496d      	ldr	r1, [pc, #436]	; (800643c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006286:	4313      	orrs	r3, r2
 8006288:	610b      	str	r3, [r1, #16]
 800628a:	e005      	b.n	8006298 <HAL_RCCEx_PeriphCLKConfig+0x728>
 800628c:	4b6b      	ldr	r3, [pc, #428]	; (800643c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800628e:	691b      	ldr	r3, [r3, #16]
 8006290:	4a6a      	ldr	r2, [pc, #424]	; (800643c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006292:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006296:	6113      	str	r3, [r2, #16]
 8006298:	4b68      	ldr	r3, [pc, #416]	; (800643c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800629a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80062a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80062a6:	4965      	ldr	r1, [pc, #404]	; (800643c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80062a8:	4313      	orrs	r3, r2
 80062aa:	670b      	str	r3, [r1, #112]	; 0x70
 80062ac:	e004      	b.n	80062b8 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80062ae:	7dfb      	ldrb	r3, [r7, #23]
 80062b0:	75bb      	strb	r3, [r7, #22]
 80062b2:	e001      	b.n	80062b8 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062b4:	7dfb      	ldrb	r3, [r7, #23]
 80062b6:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f003 0301 	and.w	r3, r3, #1
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d07e      	beq.n	80063c2 <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80062c8:	2b28      	cmp	r3, #40	; 0x28
 80062ca:	d867      	bhi.n	800639c <HAL_RCCEx_PeriphCLKConfig+0x82c>
 80062cc:	a201      	add	r2, pc, #4	; (adr r2, 80062d4 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 80062ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062d2:	bf00      	nop
 80062d4:	080063a3 	.word	0x080063a3
 80062d8:	0800639d 	.word	0x0800639d
 80062dc:	0800639d 	.word	0x0800639d
 80062e0:	0800639d 	.word	0x0800639d
 80062e4:	0800639d 	.word	0x0800639d
 80062e8:	0800639d 	.word	0x0800639d
 80062ec:	0800639d 	.word	0x0800639d
 80062f0:	0800639d 	.word	0x0800639d
 80062f4:	08006379 	.word	0x08006379
 80062f8:	0800639d 	.word	0x0800639d
 80062fc:	0800639d 	.word	0x0800639d
 8006300:	0800639d 	.word	0x0800639d
 8006304:	0800639d 	.word	0x0800639d
 8006308:	0800639d 	.word	0x0800639d
 800630c:	0800639d 	.word	0x0800639d
 8006310:	0800639d 	.word	0x0800639d
 8006314:	0800638b 	.word	0x0800638b
 8006318:	0800639d 	.word	0x0800639d
 800631c:	0800639d 	.word	0x0800639d
 8006320:	0800639d 	.word	0x0800639d
 8006324:	0800639d 	.word	0x0800639d
 8006328:	0800639d 	.word	0x0800639d
 800632c:	0800639d 	.word	0x0800639d
 8006330:	0800639d 	.word	0x0800639d
 8006334:	080063a3 	.word	0x080063a3
 8006338:	0800639d 	.word	0x0800639d
 800633c:	0800639d 	.word	0x0800639d
 8006340:	0800639d 	.word	0x0800639d
 8006344:	0800639d 	.word	0x0800639d
 8006348:	0800639d 	.word	0x0800639d
 800634c:	0800639d 	.word	0x0800639d
 8006350:	0800639d 	.word	0x0800639d
 8006354:	080063a3 	.word	0x080063a3
 8006358:	0800639d 	.word	0x0800639d
 800635c:	0800639d 	.word	0x0800639d
 8006360:	0800639d 	.word	0x0800639d
 8006364:	0800639d 	.word	0x0800639d
 8006368:	0800639d 	.word	0x0800639d
 800636c:	0800639d 	.word	0x0800639d
 8006370:	0800639d 	.word	0x0800639d
 8006374:	080063a3 	.word	0x080063a3
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	3304      	adds	r3, #4
 800637c:	2101      	movs	r1, #1
 800637e:	4618      	mov	r0, r3
 8006380:	f001 fc18 	bl	8007bb4 <RCCEx_PLL2_Config>
 8006384:	4603      	mov	r3, r0
 8006386:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8006388:	e00c      	b.n	80063a4 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	3324      	adds	r3, #36	; 0x24
 800638e:	2101      	movs	r1, #1
 8006390:	4618      	mov	r0, r3
 8006392:	f001 fcc1 	bl	8007d18 <RCCEx_PLL3_Config>
 8006396:	4603      	mov	r3, r0
 8006398:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800639a:	e003      	b.n	80063a4 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800639c:	2301      	movs	r3, #1
 800639e:	75fb      	strb	r3, [r7, #23]
      break;
 80063a0:	e000      	b.n	80063a4 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 80063a2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80063a4:	7dfb      	ldrb	r3, [r7, #23]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d109      	bne.n	80063be <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80063aa:	4b24      	ldr	r3, [pc, #144]	; (800643c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80063ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063ae:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80063b6:	4921      	ldr	r1, [pc, #132]	; (800643c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80063b8:	4313      	orrs	r3, r2
 80063ba:	654b      	str	r3, [r1, #84]	; 0x54
 80063bc:	e001      	b.n	80063c2 <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063be:	7dfb      	ldrb	r3, [r7, #23]
 80063c0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f003 0302 	and.w	r3, r3, #2
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d03e      	beq.n	800644c <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80063d2:	2b05      	cmp	r3, #5
 80063d4:	d820      	bhi.n	8006418 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 80063d6:	a201      	add	r2, pc, #4	; (adr r2, 80063dc <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 80063d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063dc:	0800641f 	.word	0x0800641f
 80063e0:	080063f5 	.word	0x080063f5
 80063e4:	08006407 	.word	0x08006407
 80063e8:	0800641f 	.word	0x0800641f
 80063ec:	0800641f 	.word	0x0800641f
 80063f0:	0800641f 	.word	0x0800641f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	3304      	adds	r3, #4
 80063f8:	2101      	movs	r1, #1
 80063fa:	4618      	mov	r0, r3
 80063fc:	f001 fbda 	bl	8007bb4 <RCCEx_PLL2_Config>
 8006400:	4603      	mov	r3, r0
 8006402:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006404:	e00c      	b.n	8006420 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	3324      	adds	r3, #36	; 0x24
 800640a:	2101      	movs	r1, #1
 800640c:	4618      	mov	r0, r3
 800640e:	f001 fc83 	bl	8007d18 <RCCEx_PLL3_Config>
 8006412:	4603      	mov	r3, r0
 8006414:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006416:	e003      	b.n	8006420 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006418:	2301      	movs	r3, #1
 800641a:	75fb      	strb	r3, [r7, #23]
      break;
 800641c:	e000      	b.n	8006420 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 800641e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006420:	7dfb      	ldrb	r3, [r7, #23]
 8006422:	2b00      	cmp	r3, #0
 8006424:	d110      	bne.n	8006448 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006426:	4b05      	ldr	r3, [pc, #20]	; (800643c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006428:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800642a:	f023 0207 	bic.w	r2, r3, #7
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006432:	4902      	ldr	r1, [pc, #8]	; (800643c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006434:	4313      	orrs	r3, r2
 8006436:	654b      	str	r3, [r1, #84]	; 0x54
 8006438:	e008      	b.n	800644c <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 800643a:	bf00      	nop
 800643c:	58024400 	.word	0x58024400
 8006440:	58024800 	.word	0x58024800
 8006444:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006448:	7dfb      	ldrb	r3, [r7, #23]
 800644a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f003 0304 	and.w	r3, r3, #4
 8006454:	2b00      	cmp	r3, #0
 8006456:	d039      	beq.n	80064cc <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800645e:	2b05      	cmp	r3, #5
 8006460:	d820      	bhi.n	80064a4 <HAL_RCCEx_PeriphCLKConfig+0x934>
 8006462:	a201      	add	r2, pc, #4	; (adr r2, 8006468 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8006464:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006468:	080064ab 	.word	0x080064ab
 800646c:	08006481 	.word	0x08006481
 8006470:	08006493 	.word	0x08006493
 8006474:	080064ab 	.word	0x080064ab
 8006478:	080064ab 	.word	0x080064ab
 800647c:	080064ab 	.word	0x080064ab
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	3304      	adds	r3, #4
 8006484:	2101      	movs	r1, #1
 8006486:	4618      	mov	r0, r3
 8006488:	f001 fb94 	bl	8007bb4 <RCCEx_PLL2_Config>
 800648c:	4603      	mov	r3, r0
 800648e:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006490:	e00c      	b.n	80064ac <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	3324      	adds	r3, #36	; 0x24
 8006496:	2101      	movs	r1, #1
 8006498:	4618      	mov	r0, r3
 800649a:	f001 fc3d 	bl	8007d18 <RCCEx_PLL3_Config>
 800649e:	4603      	mov	r3, r0
 80064a0:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80064a2:	e003      	b.n	80064ac <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80064a4:	2301      	movs	r3, #1
 80064a6:	75fb      	strb	r3, [r7, #23]
      break;
 80064a8:	e000      	b.n	80064ac <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 80064aa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80064ac:	7dfb      	ldrb	r3, [r7, #23]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d10a      	bne.n	80064c8 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80064b2:	4bb7      	ldr	r3, [pc, #732]	; (8006790 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80064b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064b6:	f023 0207 	bic.w	r2, r3, #7
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064c0:	49b3      	ldr	r1, [pc, #716]	; (8006790 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80064c2:	4313      	orrs	r3, r2
 80064c4:	658b      	str	r3, [r1, #88]	; 0x58
 80064c6:	e001      	b.n	80064cc <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064c8:	7dfb      	ldrb	r3, [r7, #23]
 80064ca:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f003 0320 	and.w	r3, r3, #32
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d04b      	beq.n	8006570 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80064de:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80064e2:	d02e      	beq.n	8006542 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 80064e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80064e8:	d828      	bhi.n	800653c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80064ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064ee:	d02a      	beq.n	8006546 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 80064f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064f4:	d822      	bhi.n	800653c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80064f6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80064fa:	d026      	beq.n	800654a <HAL_RCCEx_PeriphCLKConfig+0x9da>
 80064fc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006500:	d81c      	bhi.n	800653c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8006502:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006506:	d010      	beq.n	800652a <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8006508:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800650c:	d816      	bhi.n	800653c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800650e:	2b00      	cmp	r3, #0
 8006510:	d01d      	beq.n	800654e <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8006512:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006516:	d111      	bne.n	800653c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	3304      	adds	r3, #4
 800651c:	2100      	movs	r1, #0
 800651e:	4618      	mov	r0, r3
 8006520:	f001 fb48 	bl	8007bb4 <RCCEx_PLL2_Config>
 8006524:	4603      	mov	r3, r0
 8006526:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006528:	e012      	b.n	8006550 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	3324      	adds	r3, #36	; 0x24
 800652e:	2102      	movs	r1, #2
 8006530:	4618      	mov	r0, r3
 8006532:	f001 fbf1 	bl	8007d18 <RCCEx_PLL3_Config>
 8006536:	4603      	mov	r3, r0
 8006538:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800653a:	e009      	b.n	8006550 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800653c:	2301      	movs	r3, #1
 800653e:	75fb      	strb	r3, [r7, #23]
      break;
 8006540:	e006      	b.n	8006550 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8006542:	bf00      	nop
 8006544:	e004      	b.n	8006550 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8006546:	bf00      	nop
 8006548:	e002      	b.n	8006550 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800654a:	bf00      	nop
 800654c:	e000      	b.n	8006550 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800654e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006550:	7dfb      	ldrb	r3, [r7, #23]
 8006552:	2b00      	cmp	r3, #0
 8006554:	d10a      	bne.n	800656c <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006556:	4b8e      	ldr	r3, [pc, #568]	; (8006790 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006558:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800655a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006564:	498a      	ldr	r1, [pc, #552]	; (8006790 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006566:	4313      	orrs	r3, r2
 8006568:	654b      	str	r3, [r1, #84]	; 0x54
 800656a:	e001      	b.n	8006570 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800656c:	7dfb      	ldrb	r3, [r7, #23]
 800656e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006578:	2b00      	cmp	r3, #0
 800657a:	d04b      	beq.n	8006614 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006582:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006586:	d02e      	beq.n	80065e6 <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8006588:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800658c:	d828      	bhi.n	80065e0 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800658e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006592:	d02a      	beq.n	80065ea <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8006594:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006598:	d822      	bhi.n	80065e0 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800659a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800659e:	d026      	beq.n	80065ee <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 80065a0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80065a4:	d81c      	bhi.n	80065e0 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80065a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80065aa:	d010      	beq.n	80065ce <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 80065ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80065b0:	d816      	bhi.n	80065e0 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d01d      	beq.n	80065f2 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 80065b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80065ba:	d111      	bne.n	80065e0 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	3304      	adds	r3, #4
 80065c0:	2100      	movs	r1, #0
 80065c2:	4618      	mov	r0, r3
 80065c4:	f001 faf6 	bl	8007bb4 <RCCEx_PLL2_Config>
 80065c8:	4603      	mov	r3, r0
 80065ca:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80065cc:	e012      	b.n	80065f4 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	3324      	adds	r3, #36	; 0x24
 80065d2:	2102      	movs	r1, #2
 80065d4:	4618      	mov	r0, r3
 80065d6:	f001 fb9f 	bl	8007d18 <RCCEx_PLL3_Config>
 80065da:	4603      	mov	r3, r0
 80065dc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80065de:	e009      	b.n	80065f4 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80065e0:	2301      	movs	r3, #1
 80065e2:	75fb      	strb	r3, [r7, #23]
      break;
 80065e4:	e006      	b.n	80065f4 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80065e6:	bf00      	nop
 80065e8:	e004      	b.n	80065f4 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80065ea:	bf00      	nop
 80065ec:	e002      	b.n	80065f4 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80065ee:	bf00      	nop
 80065f0:	e000      	b.n	80065f4 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80065f2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80065f4:	7dfb      	ldrb	r3, [r7, #23]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d10a      	bne.n	8006610 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80065fa:	4b65      	ldr	r3, [pc, #404]	; (8006790 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80065fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065fe:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006608:	4961      	ldr	r1, [pc, #388]	; (8006790 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800660a:	4313      	orrs	r3, r2
 800660c:	658b      	str	r3, [r1, #88]	; 0x58
 800660e:	e001      	b.n	8006614 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006610:	7dfb      	ldrb	r3, [r7, #23]
 8006612:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800661c:	2b00      	cmp	r3, #0
 800661e:	d04b      	beq.n	80066b8 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006626:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800662a:	d02e      	beq.n	800668a <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 800662c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006630:	d828      	bhi.n	8006684 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8006632:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006636:	d02a      	beq.n	800668e <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8006638:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800663c:	d822      	bhi.n	8006684 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800663e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006642:	d026      	beq.n	8006692 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8006644:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006648:	d81c      	bhi.n	8006684 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800664a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800664e:	d010      	beq.n	8006672 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8006650:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006654:	d816      	bhi.n	8006684 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8006656:	2b00      	cmp	r3, #0
 8006658:	d01d      	beq.n	8006696 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 800665a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800665e:	d111      	bne.n	8006684 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	3304      	adds	r3, #4
 8006664:	2100      	movs	r1, #0
 8006666:	4618      	mov	r0, r3
 8006668:	f001 faa4 	bl	8007bb4 <RCCEx_PLL2_Config>
 800666c:	4603      	mov	r3, r0
 800666e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006670:	e012      	b.n	8006698 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	3324      	adds	r3, #36	; 0x24
 8006676:	2102      	movs	r1, #2
 8006678:	4618      	mov	r0, r3
 800667a:	f001 fb4d 	bl	8007d18 <RCCEx_PLL3_Config>
 800667e:	4603      	mov	r3, r0
 8006680:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006682:	e009      	b.n	8006698 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006684:	2301      	movs	r3, #1
 8006686:	75fb      	strb	r3, [r7, #23]
      break;
 8006688:	e006      	b.n	8006698 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800668a:	bf00      	nop
 800668c:	e004      	b.n	8006698 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800668e:	bf00      	nop
 8006690:	e002      	b.n	8006698 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8006692:	bf00      	nop
 8006694:	e000      	b.n	8006698 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8006696:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006698:	7dfb      	ldrb	r3, [r7, #23]
 800669a:	2b00      	cmp	r3, #0
 800669c:	d10a      	bne.n	80066b4 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800669e:	4b3c      	ldr	r3, [pc, #240]	; (8006790 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80066a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066a2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80066ac:	4938      	ldr	r1, [pc, #224]	; (8006790 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80066ae:	4313      	orrs	r3, r2
 80066b0:	658b      	str	r3, [r1, #88]	; 0x58
 80066b2:	e001      	b.n	80066b8 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066b4:	7dfb      	ldrb	r3, [r7, #23]
 80066b6:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f003 0308 	and.w	r3, r3, #8
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d01a      	beq.n	80066fa <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80066ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066ce:	d10a      	bne.n	80066e6 <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	3324      	adds	r3, #36	; 0x24
 80066d4:	2102      	movs	r1, #2
 80066d6:	4618      	mov	r0, r3
 80066d8:	f001 fb1e 	bl	8007d18 <RCCEx_PLL3_Config>
 80066dc:	4603      	mov	r3, r0
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d001      	beq.n	80066e6 <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 80066e2:	2301      	movs	r3, #1
 80066e4:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80066e6:	4b2a      	ldr	r3, [pc, #168]	; (8006790 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80066e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066ea:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80066f4:	4926      	ldr	r1, [pc, #152]	; (8006790 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80066f6:	4313      	orrs	r3, r2
 80066f8:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	f003 0310 	and.w	r3, r3, #16
 8006702:	2b00      	cmp	r3, #0
 8006704:	d01a      	beq.n	800673c <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800670c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006710:	d10a      	bne.n	8006728 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	3324      	adds	r3, #36	; 0x24
 8006716:	2102      	movs	r1, #2
 8006718:	4618      	mov	r0, r3
 800671a:	f001 fafd 	bl	8007d18 <RCCEx_PLL3_Config>
 800671e:	4603      	mov	r3, r0
 8006720:	2b00      	cmp	r3, #0
 8006722:	d001      	beq.n	8006728 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8006724:	2301      	movs	r3, #1
 8006726:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006728:	4b19      	ldr	r3, [pc, #100]	; (8006790 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800672a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800672c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006736:	4916      	ldr	r1, [pc, #88]	; (8006790 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006738:	4313      	orrs	r3, r2
 800673a:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006744:	2b00      	cmp	r3, #0
 8006746:	d036      	beq.n	80067b6 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800674e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006752:	d01f      	beq.n	8006794 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8006754:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006758:	d817      	bhi.n	800678a <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 800675a:	2b00      	cmp	r3, #0
 800675c:	d003      	beq.n	8006766 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 800675e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006762:	d009      	beq.n	8006778 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8006764:	e011      	b.n	800678a <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	3304      	adds	r3, #4
 800676a:	2100      	movs	r1, #0
 800676c:	4618      	mov	r0, r3
 800676e:	f001 fa21 	bl	8007bb4 <RCCEx_PLL2_Config>
 8006772:	4603      	mov	r3, r0
 8006774:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006776:	e00e      	b.n	8006796 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	3324      	adds	r3, #36	; 0x24
 800677c:	2102      	movs	r1, #2
 800677e:	4618      	mov	r0, r3
 8006780:	f001 faca 	bl	8007d18 <RCCEx_PLL3_Config>
 8006784:	4603      	mov	r3, r0
 8006786:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006788:	e005      	b.n	8006796 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800678a:	2301      	movs	r3, #1
 800678c:	75fb      	strb	r3, [r7, #23]
      break;
 800678e:	e002      	b.n	8006796 <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8006790:	58024400 	.word	0x58024400
      break;
 8006794:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006796:	7dfb      	ldrb	r3, [r7, #23]
 8006798:	2b00      	cmp	r3, #0
 800679a:	d10a      	bne.n	80067b2 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800679c:	4b93      	ldr	r3, [pc, #588]	; (80069ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800679e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067a0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80067aa:	4990      	ldr	r1, [pc, #576]	; (80069ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80067ac:	4313      	orrs	r3, r2
 80067ae:	658b      	str	r3, [r1, #88]	; 0x58
 80067b0:	e001      	b.n	80067b6 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067b2:	7dfb      	ldrb	r3, [r7, #23]
 80067b4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d033      	beq.n	800682a <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80067c8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80067cc:	d01c      	beq.n	8006808 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 80067ce:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80067d2:	d816      	bhi.n	8006802 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 80067d4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80067d8:	d003      	beq.n	80067e2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 80067da:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80067de:	d007      	beq.n	80067f0 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 80067e0:	e00f      	b.n	8006802 <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80067e2:	4b82      	ldr	r3, [pc, #520]	; (80069ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80067e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067e6:	4a81      	ldr	r2, [pc, #516]	; (80069ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80067e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80067ec:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80067ee:	e00c      	b.n	800680a <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	3324      	adds	r3, #36	; 0x24
 80067f4:	2101      	movs	r1, #1
 80067f6:	4618      	mov	r0, r3
 80067f8:	f001 fa8e 	bl	8007d18 <RCCEx_PLL3_Config>
 80067fc:	4603      	mov	r3, r0
 80067fe:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8006800:	e003      	b.n	800680a <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006802:	2301      	movs	r3, #1
 8006804:	75fb      	strb	r3, [r7, #23]
      break;
 8006806:	e000      	b.n	800680a <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8006808:	bf00      	nop
    }

    if(ret == HAL_OK)
 800680a:	7dfb      	ldrb	r3, [r7, #23]
 800680c:	2b00      	cmp	r3, #0
 800680e:	d10a      	bne.n	8006826 <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006810:	4b76      	ldr	r3, [pc, #472]	; (80069ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006812:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006814:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800681e:	4973      	ldr	r1, [pc, #460]	; (80069ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006820:	4313      	orrs	r3, r2
 8006822:	654b      	str	r3, [r1, #84]	; 0x54
 8006824:	e001      	b.n	800682a <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006826:	7dfb      	ldrb	r3, [r7, #23]
 8006828:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006832:	2b00      	cmp	r3, #0
 8006834:	d029      	beq.n	800688a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800683a:	2b00      	cmp	r3, #0
 800683c:	d003      	beq.n	8006846 <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 800683e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006842:	d007      	beq.n	8006854 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8006844:	e00f      	b.n	8006866 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006846:	4b69      	ldr	r3, [pc, #420]	; (80069ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006848:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800684a:	4a68      	ldr	r2, [pc, #416]	; (80069ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800684c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006850:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006852:	e00b      	b.n	800686c <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	3304      	adds	r3, #4
 8006858:	2102      	movs	r1, #2
 800685a:	4618      	mov	r0, r3
 800685c:	f001 f9aa 	bl	8007bb4 <RCCEx_PLL2_Config>
 8006860:	4603      	mov	r3, r0
 8006862:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006864:	e002      	b.n	800686c <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 8006866:	2301      	movs	r3, #1
 8006868:	75fb      	strb	r3, [r7, #23]
      break;
 800686a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800686c:	7dfb      	ldrb	r3, [r7, #23]
 800686e:	2b00      	cmp	r3, #0
 8006870:	d109      	bne.n	8006886 <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006872:	4b5e      	ldr	r3, [pc, #376]	; (80069ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006874:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006876:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800687e:	495b      	ldr	r1, [pc, #364]	; (80069ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006880:	4313      	orrs	r3, r2
 8006882:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006884:	e001      	b.n	800688a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006886:	7dfb      	ldrb	r3, [r7, #23]
 8006888:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006892:	2b00      	cmp	r3, #0
 8006894:	d00a      	beq.n	80068ac <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	3324      	adds	r3, #36	; 0x24
 800689a:	2102      	movs	r1, #2
 800689c:	4618      	mov	r0, r3
 800689e:	f001 fa3b 	bl	8007d18 <RCCEx_PLL3_Config>
 80068a2:	4603      	mov	r3, r0
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d001      	beq.n	80068ac <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 80068a8:	2301      	movs	r3, #1
 80068aa:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d030      	beq.n	800691a <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80068bc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80068c0:	d017      	beq.n	80068f2 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 80068c2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80068c6:	d811      	bhi.n	80068ec <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 80068c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80068cc:	d013      	beq.n	80068f6 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 80068ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80068d2:	d80b      	bhi.n	80068ec <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d010      	beq.n	80068fa <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 80068d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80068dc:	d106      	bne.n	80068ec <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80068de:	4b43      	ldr	r3, [pc, #268]	; (80069ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80068e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068e2:	4a42      	ldr	r2, [pc, #264]	; (80069ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80068e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80068e8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80068ea:	e007      	b.n	80068fc <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80068ec:	2301      	movs	r3, #1
 80068ee:	75fb      	strb	r3, [r7, #23]
      break;
 80068f0:	e004      	b.n	80068fc <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 80068f2:	bf00      	nop
 80068f4:	e002      	b.n	80068fc <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 80068f6:	bf00      	nop
 80068f8:	e000      	b.n	80068fc <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 80068fa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80068fc:	7dfb      	ldrb	r3, [r7, #23]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d109      	bne.n	8006916 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006902:	4b3a      	ldr	r3, [pc, #232]	; (80069ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006904:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006906:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800690e:	4937      	ldr	r1, [pc, #220]	; (80069ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006910:	4313      	orrs	r3, r2
 8006912:	654b      	str	r3, [r1, #84]	; 0x54
 8006914:	e001      	b.n	800691a <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006916:	7dfb      	ldrb	r3, [r7, #23]
 8006918:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006922:	2b00      	cmp	r3, #0
 8006924:	d008      	beq.n	8006938 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006926:	4b31      	ldr	r3, [pc, #196]	; (80069ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006928:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800692a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006932:	492e      	ldr	r1, [pc, #184]	; (80069ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006934:	4313      	orrs	r3, r2
 8006936:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006940:	2b00      	cmp	r3, #0
 8006942:	d009      	beq.n	8006958 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8006944:	4b29      	ldr	r3, [pc, #164]	; (80069ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006946:	691b      	ldr	r3, [r3, #16]
 8006948:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006952:	4926      	ldr	r1, [pc, #152]	; (80069ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006954:	4313      	orrs	r3, r2
 8006956:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006960:	2b00      	cmp	r3, #0
 8006962:	d008      	beq.n	8006976 <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006964:	4b21      	ldr	r3, [pc, #132]	; (80069ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006966:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006968:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006970:	491e      	ldr	r1, [pc, #120]	; (80069ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006972:	4313      	orrs	r3, r2
 8006974:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800697e:	2b00      	cmp	r3, #0
 8006980:	d00d      	beq.n	800699e <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006982:	4b1a      	ldr	r3, [pc, #104]	; (80069ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006984:	691b      	ldr	r3, [r3, #16]
 8006986:	4a19      	ldr	r2, [pc, #100]	; (80069ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006988:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800698c:	6113      	str	r3, [r2, #16]
 800698e:	4b17      	ldr	r3, [pc, #92]	; (80069ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006990:	691a      	ldr	r2, [r3, #16]
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8006998:	4914      	ldr	r1, [pc, #80]	; (80069ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800699a:	4313      	orrs	r3, r2
 800699c:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	da08      	bge.n	80069b8 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80069a6:	4b11      	ldr	r3, [pc, #68]	; (80069ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80069a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069aa:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069b2:	490e      	ldr	r1, [pc, #56]	; (80069ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80069b4:	4313      	orrs	r3, r2
 80069b6:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d009      	beq.n	80069d8 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80069c4:	4b09      	ldr	r3, [pc, #36]	; (80069ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80069c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069c8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069d2:	4906      	ldr	r1, [pc, #24]	; (80069ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80069d4:	4313      	orrs	r3, r2
 80069d6:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80069d8:	7dbb      	ldrb	r3, [r7, #22]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d101      	bne.n	80069e2 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 80069de:	2300      	movs	r3, #0
 80069e0:	e000      	b.n	80069e4 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 80069e2:	2301      	movs	r3, #1
}
 80069e4:	4618      	mov	r0, r3
 80069e6:	3718      	adds	r7, #24
 80069e8:	46bd      	mov	sp, r7
 80069ea:	bd80      	pop	{r7, pc}
 80069ec:	58024400 	.word	0x58024400

080069f0 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80069f0:	b580      	push	{r7, lr}
 80069f2:	b090      	sub	sp, #64	; 0x40
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80069fe:	f040 8095 	bne.w	8006b2c <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8006a02:	4bae      	ldr	r3, [pc, #696]	; (8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8006a04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a06:	f003 0307 	and.w	r3, r3, #7
 8006a0a:	633b      	str	r3, [r7, #48]	; 0x30
 8006a0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a0e:	2b04      	cmp	r3, #4
 8006a10:	f200 8088 	bhi.w	8006b24 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8006a14:	a201      	add	r2, pc, #4	; (adr r2, 8006a1c <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 8006a16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a1a:	bf00      	nop
 8006a1c:	08006a31 	.word	0x08006a31
 8006a20:	08006a59 	.word	0x08006a59
 8006a24:	08006a81 	.word	0x08006a81
 8006a28:	08006b1d 	.word	0x08006b1d
 8006a2c:	08006aa9 	.word	0x08006aa9

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006a30:	4ba2      	ldr	r3, [pc, #648]	; (8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a38:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006a3c:	d108      	bne.n	8006a50 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006a3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006a42:	4618      	mov	r0, r3
 8006a44:	f000 ff64 	bl	8007910 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8006a48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a4a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006a4c:	f000 bc95 	b.w	800737a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8006a50:	2300      	movs	r3, #0
 8006a52:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006a54:	f000 bc91 	b.w	800737a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006a58:	4b98      	ldr	r3, [pc, #608]	; (8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006a60:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006a64:	d108      	bne.n	8006a78 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006a66:	f107 0318 	add.w	r3, r7, #24
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	f000 fca8 	bl	80073c0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006a70:	69bb      	ldr	r3, [r7, #24]
 8006a72:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006a74:	f000 bc81 	b.w	800737a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8006a78:	2300      	movs	r3, #0
 8006a7a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006a7c:	f000 bc7d 	b.w	800737a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006a80:	4b8e      	ldr	r3, [pc, #568]	; (8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006a88:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006a8c:	d108      	bne.n	8006aa0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006a8e:	f107 030c 	add.w	r3, r7, #12
 8006a92:	4618      	mov	r0, r3
 8006a94:	f000 fde8 	bl	8007668 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006a9c:	f000 bc6d 	b.w	800737a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8006aa0:	2300      	movs	r3, #0
 8006aa2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006aa4:	f000 bc69 	b.w	800737a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006aa8:	4b84      	ldr	r3, [pc, #528]	; (8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8006aaa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006aac:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006ab0:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006ab2:	4b82      	ldr	r3, [pc, #520]	; (8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	f003 0304 	and.w	r3, r3, #4
 8006aba:	2b04      	cmp	r3, #4
 8006abc:	d10c      	bne.n	8006ad8 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 8006abe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d109      	bne.n	8006ad8 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006ac4:	4b7d      	ldr	r3, [pc, #500]	; (8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	08db      	lsrs	r3, r3, #3
 8006aca:	f003 0303 	and.w	r3, r3, #3
 8006ace:	4a7c      	ldr	r2, [pc, #496]	; (8006cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 8006ad0:	fa22 f303 	lsr.w	r3, r2, r3
 8006ad4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006ad6:	e01f      	b.n	8006b18 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006ad8:	4b78      	ldr	r3, [pc, #480]	; (8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ae0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ae4:	d106      	bne.n	8006af4 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 8006ae6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ae8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006aec:	d102      	bne.n	8006af4 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8006aee:	4b75      	ldr	r3, [pc, #468]	; (8006cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8006af0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006af2:	e011      	b.n	8006b18 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006af4:	4b71      	ldr	r3, [pc, #452]	; (8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006afc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006b00:	d106      	bne.n	8006b10 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 8006b02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b04:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006b08:	d102      	bne.n	8006b10 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8006b0a:	4b6f      	ldr	r3, [pc, #444]	; (8006cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8006b0c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006b0e:	e003      	b.n	8006b18 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8006b10:	2300      	movs	r3, #0
 8006b12:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8006b14:	f000 bc31 	b.w	800737a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8006b18:	f000 bc2f 	b.w	800737a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8006b1c:	4b6b      	ldr	r3, [pc, #428]	; (8006ccc <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8006b1e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006b20:	f000 bc2b 	b.w	800737a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8006b24:	2300      	movs	r3, #0
 8006b26:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006b28:	f000 bc27 	b.w	800737a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b32:	f040 8095 	bne.w	8006c60 <HAL_RCCEx_GetPeriphCLKFreq+0x270>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8006b36:	4b61      	ldr	r3, [pc, #388]	; (8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8006b38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b3a:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8006b3e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8006b40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b46:	d04d      	beq.n	8006be4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 8006b48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b4e:	f200 8084 	bhi.w	8006c5a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8006b52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b54:	2bc0      	cmp	r3, #192	; 0xc0
 8006b56:	d07d      	beq.n	8006c54 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8006b58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b5a:	2bc0      	cmp	r3, #192	; 0xc0
 8006b5c:	d87d      	bhi.n	8006c5a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8006b5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b60:	2b80      	cmp	r3, #128	; 0x80
 8006b62:	d02d      	beq.n	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 8006b64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b66:	2b80      	cmp	r3, #128	; 0x80
 8006b68:	d877      	bhi.n	8006c5a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8006b6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d003      	beq.n	8006b78 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 8006b70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b72:	2b40      	cmp	r3, #64	; 0x40
 8006b74:	d012      	beq.n	8006b9c <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 8006b76:	e070      	b.n	8006c5a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006b78:	4b50      	ldr	r3, [pc, #320]	; (8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b80:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006b84:	d107      	bne.n	8006b96 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006b86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	f000 fec0 	bl	8007910 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006b90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b92:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006b94:	e3f1      	b.n	800737a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8006b96:	2300      	movs	r3, #0
 8006b98:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006b9a:	e3ee      	b.n	800737a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006b9c:	4b47      	ldr	r3, [pc, #284]	; (8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006ba4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006ba8:	d107      	bne.n	8006bba <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006baa:	f107 0318 	add.w	r3, r7, #24
 8006bae:	4618      	mov	r0, r3
 8006bb0:	f000 fc06 	bl	80073c0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006bb4:	69bb      	ldr	r3, [r7, #24]
 8006bb6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006bb8:	e3df      	b.n	800737a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8006bba:	2300      	movs	r3, #0
 8006bbc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006bbe:	e3dc      	b.n	800737a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006bc0:	4b3e      	ldr	r3, [pc, #248]	; (8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006bc8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006bcc:	d107      	bne.n	8006bde <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006bce:	f107 030c 	add.w	r3, r7, #12
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	f000 fd48 	bl	8007668 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006bdc:	e3cd      	b.n	800737a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8006bde:	2300      	movs	r3, #0
 8006be0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006be2:	e3ca      	b.n	800737a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006be4:	4b35      	ldr	r3, [pc, #212]	; (8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8006be6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006be8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006bec:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006bee:	4b33      	ldr	r3, [pc, #204]	; (8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	f003 0304 	and.w	r3, r3, #4
 8006bf6:	2b04      	cmp	r3, #4
 8006bf8:	d10c      	bne.n	8006c14 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 8006bfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d109      	bne.n	8006c14 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006c00:	4b2e      	ldr	r3, [pc, #184]	; (8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	08db      	lsrs	r3, r3, #3
 8006c06:	f003 0303 	and.w	r3, r3, #3
 8006c0a:	4a2d      	ldr	r2, [pc, #180]	; (8006cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 8006c0c:	fa22 f303 	lsr.w	r3, r2, r3
 8006c10:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006c12:	e01e      	b.n	8006c52 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006c14:	4b29      	ldr	r3, [pc, #164]	; (8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c20:	d106      	bne.n	8006c30 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 8006c22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c24:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006c28:	d102      	bne.n	8006c30 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8006c2a:	4b26      	ldr	r3, [pc, #152]	; (8006cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8006c2c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006c2e:	e010      	b.n	8006c52 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006c30:	4b22      	ldr	r3, [pc, #136]	; (8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c38:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006c3c:	d106      	bne.n	8006c4c <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 8006c3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c40:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006c44:	d102      	bne.n	8006c4c <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8006c46:	4b20      	ldr	r3, [pc, #128]	; (8006cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8006c48:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006c4a:	e002      	b.n	8006c52 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8006c4c:	2300      	movs	r3, #0
 8006c4e:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8006c50:	e393      	b.n	800737a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8006c52:	e392      	b.n	800737a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8006c54:	4b1d      	ldr	r3, [pc, #116]	; (8006ccc <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8006c56:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006c58:	e38f      	b.n	800737a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006c5e:	e38c      	b.n	800737a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c66:	f040 80a7 	bne.w	8006db8 <HAL_RCCEx_GetPeriphCLKFreq+0x3c8>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8006c6a:	4b14      	ldr	r3, [pc, #80]	; (8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8006c6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c6e:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8006c72:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8006c74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c76:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006c7a:	d05f      	beq.n	8006d3c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8006c7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c7e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006c82:	f200 8096 	bhi.w	8006db2 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8006c86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c88:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006c8c:	f000 808e 	beq.w	8006dac <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
 8006c90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c92:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006c96:	f200 808c 	bhi.w	8006db2 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8006c9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c9c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006ca0:	d03a      	beq.n	8006d18 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 8006ca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ca4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006ca8:	f200 8083 	bhi.w	8006db2 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8006cac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d00e      	beq.n	8006cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>
 8006cb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cb4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006cb8:	d01c      	beq.n	8006cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 8006cba:	e07a      	b.n	8006db2 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8006cbc:	58024400 	.word	0x58024400
 8006cc0:	03d09000 	.word	0x03d09000
 8006cc4:	003d0900 	.word	0x003d0900
 8006cc8:	007a1200 	.word	0x007a1200
 8006ccc:	00bb8000 	.word	0x00bb8000
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006cd0:	4baa      	ldr	r3, [pc, #680]	; (8006f7c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006cd8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006cdc:	d107      	bne.n	8006cee <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006cde:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	f000 fe14 	bl	8007910 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006ce8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cea:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006cec:	e345      	b.n	800737a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8006cee:	2300      	movs	r3, #0
 8006cf0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006cf2:	e342      	b.n	800737a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006cf4:	4ba1      	ldr	r3, [pc, #644]	; (8006f7c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006cfc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006d00:	d107      	bne.n	8006d12 <HAL_RCCEx_GetPeriphCLKFreq+0x322>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006d02:	f107 0318 	add.w	r3, r7, #24
 8006d06:	4618      	mov	r0, r3
 8006d08:	f000 fb5a 	bl	80073c0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006d0c:	69bb      	ldr	r3, [r7, #24]
 8006d0e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006d10:	e333      	b.n	800737a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8006d12:	2300      	movs	r3, #0
 8006d14:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006d16:	e330      	b.n	800737a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006d18:	4b98      	ldr	r3, [pc, #608]	; (8006f7c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006d20:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006d24:	d107      	bne.n	8006d36 <HAL_RCCEx_GetPeriphCLKFreq+0x346>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006d26:	f107 030c 	add.w	r3, r7, #12
 8006d2a:	4618      	mov	r0, r3
 8006d2c:	f000 fc9c 	bl	8007668 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006d34:	e321      	b.n	800737a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8006d36:	2300      	movs	r3, #0
 8006d38:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006d3a:	e31e      	b.n	800737a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006d3c:	4b8f      	ldr	r3, [pc, #572]	; (8006f7c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006d3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d40:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006d44:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006d46:	4b8d      	ldr	r3, [pc, #564]	; (8006f7c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	f003 0304 	and.w	r3, r3, #4
 8006d4e:	2b04      	cmp	r3, #4
 8006d50:	d10c      	bne.n	8006d6c <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 8006d52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d109      	bne.n	8006d6c <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006d58:	4b88      	ldr	r3, [pc, #544]	; (8006f7c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	08db      	lsrs	r3, r3, #3
 8006d5e:	f003 0303 	and.w	r3, r3, #3
 8006d62:	4a87      	ldr	r2, [pc, #540]	; (8006f80 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006d64:	fa22 f303 	lsr.w	r3, r2, r3
 8006d68:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006d6a:	e01e      	b.n	8006daa <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006d6c:	4b83      	ldr	r3, [pc, #524]	; (8006f7c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d78:	d106      	bne.n	8006d88 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
 8006d7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d7c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006d80:	d102      	bne.n	8006d88 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8006d82:	4b80      	ldr	r3, [pc, #512]	; (8006f84 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8006d84:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006d86:	e010      	b.n	8006daa <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006d88:	4b7c      	ldr	r3, [pc, #496]	; (8006f7c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d90:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006d94:	d106      	bne.n	8006da4 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
 8006d96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d98:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006d9c:	d102      	bne.n	8006da4 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8006d9e:	4b7a      	ldr	r3, [pc, #488]	; (8006f88 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8006da0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006da2:	e002      	b.n	8006daa <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8006da4:	2300      	movs	r3, #0
 8006da6:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8006da8:	e2e7      	b.n	800737a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8006daa:	e2e6      	b.n	800737a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8006dac:	4b77      	ldr	r3, [pc, #476]	; (8006f8c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8006dae:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006db0:	e2e3      	b.n	800737a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8006db2:	2300      	movs	r3, #0
 8006db4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006db6:	e2e0      	b.n	800737a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006dbe:	f040 809c 	bne.w	8006efa <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8006dc2:	4b6e      	ldr	r3, [pc, #440]	; (8006f7c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006dc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006dc6:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8006dca:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8006dcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dce:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006dd2:	d054      	beq.n	8006e7e <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 8006dd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dd6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006dda:	f200 808b 	bhi.w	8006ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 8006dde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006de0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006de4:	f000 8083 	beq.w	8006eee <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 8006de8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dea:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006dee:	f200 8081 	bhi.w	8006ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 8006df2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006df4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006df8:	d02f      	beq.n	8006e5a <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 8006dfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dfc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006e00:	d878      	bhi.n	8006ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 8006e02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d004      	beq.n	8006e12 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8006e08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e0a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006e0e:	d012      	beq.n	8006e36 <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 8006e10:	e070      	b.n	8006ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006e12:	4b5a      	ldr	r3, [pc, #360]	; (8006f7c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e1a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006e1e:	d107      	bne.n	8006e30 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006e20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006e24:	4618      	mov	r0, r3
 8006e26:	f000 fd73 	bl	8007910 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006e2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e2c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006e2e:	e2a4      	b.n	800737a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8006e30:	2300      	movs	r3, #0
 8006e32:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006e34:	e2a1      	b.n	800737a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006e36:	4b51      	ldr	r3, [pc, #324]	; (8006f7c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006e3e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006e42:	d107      	bne.n	8006e54 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006e44:	f107 0318 	add.w	r3, r7, #24
 8006e48:	4618      	mov	r0, r3
 8006e4a:	f000 fab9 	bl	80073c0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006e4e:	69bb      	ldr	r3, [r7, #24]
 8006e50:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 8006e52:	e292      	b.n	800737a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8006e54:	2300      	movs	r3, #0
 8006e56:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006e58:	e28f      	b.n	800737a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006e5a:	4b48      	ldr	r3, [pc, #288]	; (8006f7c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006e62:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006e66:	d107      	bne.n	8006e78 <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006e68:	f107 030c 	add.w	r3, r7, #12
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	f000 fbfb 	bl	8007668 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006e76:	e280      	b.n	800737a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8006e78:	2300      	movs	r3, #0
 8006e7a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006e7c:	e27d      	b.n	800737a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006e7e:	4b3f      	ldr	r3, [pc, #252]	; (8006f7c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006e80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e82:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006e86:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006e88:	4b3c      	ldr	r3, [pc, #240]	; (8006f7c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	f003 0304 	and.w	r3, r3, #4
 8006e90:	2b04      	cmp	r3, #4
 8006e92:	d10c      	bne.n	8006eae <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 8006e94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d109      	bne.n	8006eae <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006e9a:	4b38      	ldr	r3, [pc, #224]	; (8006f7c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	08db      	lsrs	r3, r3, #3
 8006ea0:	f003 0303 	and.w	r3, r3, #3
 8006ea4:	4a36      	ldr	r2, [pc, #216]	; (8006f80 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006ea6:	fa22 f303 	lsr.w	r3, r2, r3
 8006eaa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006eac:	e01e      	b.n	8006eec <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006eae:	4b33      	ldr	r3, [pc, #204]	; (8006f7c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006eb6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006eba:	d106      	bne.n	8006eca <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 8006ebc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ebe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006ec2:	d102      	bne.n	8006eca <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8006ec4:	4b2f      	ldr	r3, [pc, #188]	; (8006f84 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8006ec6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006ec8:	e010      	b.n	8006eec <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006eca:	4b2c      	ldr	r3, [pc, #176]	; (8006f7c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ed2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006ed6:	d106      	bne.n	8006ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 8006ed8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006eda:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006ede:	d102      	bne.n	8006ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8006ee0:	4b29      	ldr	r3, [pc, #164]	; (8006f88 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8006ee2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006ee4:	e002      	b.n	8006eec <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8006eea:	e246      	b.n	800737a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8006eec:	e245      	b.n	800737a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8006eee:	4b27      	ldr	r3, [pc, #156]	; (8006f8c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8006ef0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006ef2:	e242      	b.n	800737a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8006ef4:	2300      	movs	r3, #0
 8006ef6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006ef8:	e23f      	b.n	800737a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f00:	f040 80a8 	bne.w	8007054 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8006f04:	4b1d      	ldr	r3, [pc, #116]	; (8006f7c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006f06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f08:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8006f0c:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8006f0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f10:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006f14:	d060      	beq.n	8006fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
 8006f16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f18:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006f1c:	f200 8097 	bhi.w	800704e <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8006f20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f22:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006f26:	f000 808f 	beq.w	8007048 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 8006f2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f2c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006f30:	f200 808d 	bhi.w	800704e <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8006f34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f3a:	d03b      	beq.n	8006fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x5c4>
 8006f3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f42:	f200 8084 	bhi.w	800704e <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8006f46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d004      	beq.n	8006f56 <HAL_RCCEx_GetPeriphCLKFreq+0x566>
 8006f4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f52:	d01d      	beq.n	8006f90 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
 8006f54:	e07b      	b.n	800704e <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006f56:	4b09      	ldr	r3, [pc, #36]	; (8006f7c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f5e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006f62:	d107      	bne.n	8006f74 <HAL_RCCEx_GetPeriphCLKFreq+0x584>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006f64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006f68:	4618      	mov	r0, r3
 8006f6a:	f000 fcd1 	bl	8007910 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006f6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f70:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006f72:	e202      	b.n	800737a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8006f74:	2300      	movs	r3, #0
 8006f76:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006f78:	e1ff      	b.n	800737a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8006f7a:	bf00      	nop
 8006f7c:	58024400 	.word	0x58024400
 8006f80:	03d09000 	.word	0x03d09000
 8006f84:	003d0900 	.word	0x003d0900
 8006f88:	007a1200 	.word	0x007a1200
 8006f8c:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006f90:	4ba3      	ldr	r3, [pc, #652]	; (8007220 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006f98:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006f9c:	d107      	bne.n	8006fae <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006f9e:	f107 0318 	add.w	r3, r7, #24
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	f000 fa0c 	bl	80073c0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006fa8:	69bb      	ldr	r3, [r7, #24]
 8006faa:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006fac:	e1e5      	b.n	800737a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8006fae:	2300      	movs	r3, #0
 8006fb0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006fb2:	e1e2      	b.n	800737a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006fb4:	4b9a      	ldr	r3, [pc, #616]	; (8007220 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006fbc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006fc0:	d107      	bne.n	8006fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006fc2:	f107 030c 	add.w	r3, r7, #12
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	f000 fb4e 	bl	8007668 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006fd0:	e1d3      	b.n	800737a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006fd6:	e1d0      	b.n	800737a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006fd8:	4b91      	ldr	r3, [pc, #580]	; (8007220 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006fda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006fdc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006fe0:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006fe2:	4b8f      	ldr	r3, [pc, #572]	; (8007220 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	f003 0304 	and.w	r3, r3, #4
 8006fea:	2b04      	cmp	r3, #4
 8006fec:	d10c      	bne.n	8007008 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
 8006fee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d109      	bne.n	8007008 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006ff4:	4b8a      	ldr	r3, [pc, #552]	; (8007220 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	08db      	lsrs	r3, r3, #3
 8006ffa:	f003 0303 	and.w	r3, r3, #3
 8006ffe:	4a89      	ldr	r2, [pc, #548]	; (8007224 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007000:	fa22 f303 	lsr.w	r3, r2, r3
 8007004:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007006:	e01e      	b.n	8007046 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007008:	4b85      	ldr	r3, [pc, #532]	; (8007220 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007010:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007014:	d106      	bne.n	8007024 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
 8007016:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007018:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800701c:	d102      	bne.n	8007024 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800701e:	4b82      	ldr	r3, [pc, #520]	; (8007228 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8007020:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007022:	e010      	b.n	8007046 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007024:	4b7e      	ldr	r3, [pc, #504]	; (8007220 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800702c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007030:	d106      	bne.n	8007040 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8007032:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007034:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007038:	d102      	bne.n	8007040 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800703a:	4b7c      	ldr	r3, [pc, #496]	; (800722c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800703c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800703e:	e002      	b.n	8007046 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8007040:	2300      	movs	r3, #0
 8007042:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8007044:	e199      	b.n	800737a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8007046:	e198      	b.n	800737a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007048:	4b79      	ldr	r3, [pc, #484]	; (8007230 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800704a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800704c:	e195      	b.n	800737a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 800704e:	2300      	movs	r3, #0
 8007050:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007052:	e192      	b.n	800737a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800705a:	d173      	bne.n	8007144 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 800705c:	4b70      	ldr	r3, [pc, #448]	; (8007220 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800705e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007060:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007064:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007066:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007068:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800706c:	d02f      	beq.n	80070ce <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
 800706e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007070:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007074:	d863      	bhi.n	800713e <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 8007076:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007078:	2b00      	cmp	r3, #0
 800707a:	d004      	beq.n	8007086 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 800707c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800707e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007082:	d012      	beq.n	80070aa <HAL_RCCEx_GetPeriphCLKFreq+0x6ba>
 8007084:	e05b      	b.n	800713e <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007086:	4b66      	ldr	r3, [pc, #408]	; (8007220 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800708e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007092:	d107      	bne.n	80070a4 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007094:	f107 0318 	add.w	r3, r7, #24
 8007098:	4618      	mov	r0, r3
 800709a:	f000 f991 	bl	80073c0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800709e:	69bb      	ldr	r3, [r7, #24]
 80070a0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80070a2:	e16a      	b.n	800737a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80070a4:	2300      	movs	r3, #0
 80070a6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80070a8:	e167      	b.n	800737a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80070aa:	4b5d      	ldr	r3, [pc, #372]	; (8007220 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80070b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80070b6:	d107      	bne.n	80070c8 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80070b8:	f107 030c 	add.w	r3, r7, #12
 80070bc:	4618      	mov	r0, r3
 80070be:	f000 fad3 	bl	8007668 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80070c2:	697b      	ldr	r3, [r7, #20]
 80070c4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80070c6:	e158      	b.n	800737a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80070c8:	2300      	movs	r3, #0
 80070ca:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80070cc:	e155      	b.n	800737a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80070ce:	4b54      	ldr	r3, [pc, #336]	; (8007220 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80070d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80070d2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80070d6:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80070d8:	4b51      	ldr	r3, [pc, #324]	; (8007220 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	f003 0304 	and.w	r3, r3, #4
 80070e0:	2b04      	cmp	r3, #4
 80070e2:	d10c      	bne.n	80070fe <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
 80070e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d109      	bne.n	80070fe <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80070ea:	4b4d      	ldr	r3, [pc, #308]	; (8007220 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	08db      	lsrs	r3, r3, #3
 80070f0:	f003 0303 	and.w	r3, r3, #3
 80070f4:	4a4b      	ldr	r2, [pc, #300]	; (8007224 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80070f6:	fa22 f303 	lsr.w	r3, r2, r3
 80070fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80070fc:	e01e      	b.n	800713c <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80070fe:	4b48      	ldr	r3, [pc, #288]	; (8007220 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007106:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800710a:	d106      	bne.n	800711a <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
 800710c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800710e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007112:	d102      	bne.n	800711a <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8007114:	4b44      	ldr	r3, [pc, #272]	; (8007228 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8007116:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007118:	e010      	b.n	800713c <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800711a:	4b41      	ldr	r3, [pc, #260]	; (8007220 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007122:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007126:	d106      	bne.n	8007136 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 8007128:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800712a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800712e:	d102      	bne.n	8007136 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8007130:	4b3e      	ldr	r3, [pc, #248]	; (800722c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007132:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007134:	e002      	b.n	800713c <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8007136:	2300      	movs	r3, #0
 8007138:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800713a:	e11e      	b.n	800737a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800713c:	e11d      	b.n	800737a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 800713e:	2300      	movs	r3, #0
 8007140:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007142:	e11a      	b.n	800737a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800714a:	d133      	bne.n	80071b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 800714c:	4b34      	ldr	r3, [pc, #208]	; (8007220 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800714e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007150:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007154:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007156:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007158:	2b00      	cmp	r3, #0
 800715a:	d004      	beq.n	8007166 <HAL_RCCEx_GetPeriphCLKFreq+0x776>
 800715c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800715e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007162:	d012      	beq.n	800718a <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
 8007164:	e023      	b.n	80071ae <HAL_RCCEx_GetPeriphCLKFreq+0x7be>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007166:	4b2e      	ldr	r3, [pc, #184]	; (8007220 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800716e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007172:	d107      	bne.n	8007184 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007174:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007178:	4618      	mov	r0, r3
 800717a:	f000 fbc9 	bl	8007910 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800717e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007180:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007182:	e0fa      	b.n	800737a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007184:	2300      	movs	r3, #0
 8007186:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007188:	e0f7      	b.n	800737a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800718a:	4b25      	ldr	r3, [pc, #148]	; (8007220 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007192:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007196:	d107      	bne.n	80071a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007198:	f107 0318 	add.w	r3, r7, #24
 800719c:	4618      	mov	r0, r3
 800719e:	f000 f90f 	bl	80073c0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80071a2:	6a3b      	ldr	r3, [r7, #32]
 80071a4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80071a6:	e0e8      	b.n	800737a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80071a8:	2300      	movs	r3, #0
 80071aa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80071ac:	e0e5      	b.n	800737a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 80071ae:	2300      	movs	r3, #0
 80071b0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80071b2:	e0e2      	b.n	800737a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80071ba:	f040 808f 	bne.w	80072dc <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 80071be:	4b18      	ldr	r3, [pc, #96]	; (8007220 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80071c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071c2:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 80071c6:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80071c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80071ce:	d075      	beq.n	80072bc <HAL_RCCEx_GetPeriphCLKFreq+0x8cc>
 80071d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80071d6:	d87e      	bhi.n	80072d6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 80071d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80071de:	d060      	beq.n	80072a2 <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 80071e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80071e6:	d876      	bhi.n	80072d6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 80071e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071ea:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80071ee:	d045      	beq.n	800727c <HAL_RCCEx_GetPeriphCLKFreq+0x88c>
 80071f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071f2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80071f6:	d86e      	bhi.n	80072d6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 80071f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071fa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80071fe:	d02b      	beq.n	8007258 <HAL_RCCEx_GetPeriphCLKFreq+0x868>
 8007200:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007202:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007206:	d866      	bhi.n	80072d6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8007208:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800720a:	2b00      	cmp	r3, #0
 800720c:	d004      	beq.n	8007218 <HAL_RCCEx_GetPeriphCLKFreq+0x828>
 800720e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007210:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007214:	d00e      	beq.n	8007234 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8007216:	e05e      	b.n	80072d6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8007218:	f000 f8bc 	bl	8007394 <HAL_RCCEx_GetD3PCLK1Freq>
 800721c:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 800721e:	e0ac      	b.n	800737a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8007220:	58024400 	.word	0x58024400
 8007224:	03d09000 	.word	0x03d09000
 8007228:	003d0900 	.word	0x003d0900
 800722c:	007a1200 	.word	0x007a1200
 8007230:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007234:	4b53      	ldr	r3, [pc, #332]	; (8007384 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800723c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007240:	d107      	bne.n	8007252 <HAL_RCCEx_GetPeriphCLKFreq+0x862>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007242:	f107 0318 	add.w	r3, r7, #24
 8007246:	4618      	mov	r0, r3
 8007248:	f000 f8ba 	bl	80073c0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800724c:	69fb      	ldr	r3, [r7, #28]
 800724e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007250:	e093      	b.n	800737a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007252:	2300      	movs	r3, #0
 8007254:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007256:	e090      	b.n	800737a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007258:	4b4a      	ldr	r3, [pc, #296]	; (8007384 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007260:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007264:	d107      	bne.n	8007276 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007266:	f107 030c 	add.w	r3, r7, #12
 800726a:	4618      	mov	r0, r3
 800726c:	f000 f9fc 	bl	8007668 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007270:	693b      	ldr	r3, [r7, #16]
 8007272:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007274:	e081      	b.n	800737a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007276:	2300      	movs	r3, #0
 8007278:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800727a:	e07e      	b.n	800737a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800727c:	4b41      	ldr	r3, [pc, #260]	; (8007384 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	f003 0304 	and.w	r3, r3, #4
 8007284:	2b04      	cmp	r3, #4
 8007286:	d109      	bne.n	800729c <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007288:	4b3e      	ldr	r3, [pc, #248]	; (8007384 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	08db      	lsrs	r3, r3, #3
 800728e:	f003 0303 	and.w	r3, r3, #3
 8007292:	4a3d      	ldr	r2, [pc, #244]	; (8007388 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 8007294:	fa22 f303 	lsr.w	r3, r2, r3
 8007298:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800729a:	e06e      	b.n	800737a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800729c:	2300      	movs	r3, #0
 800729e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80072a0:	e06b      	b.n	800737a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80072a2:	4b38      	ldr	r3, [pc, #224]	; (8007384 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80072ae:	d102      	bne.n	80072b6 <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
         {
          frequency = CSI_VALUE;
 80072b0:	4b36      	ldr	r3, [pc, #216]	; (800738c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80072b2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80072b4:	e061      	b.n	800737a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80072b6:	2300      	movs	r3, #0
 80072b8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80072ba:	e05e      	b.n	800737a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80072bc:	4b31      	ldr	r3, [pc, #196]	; (8007384 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80072c4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80072c8:	d102      	bne.n	80072d0 <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>
         {
          frequency = HSE_VALUE;
 80072ca:	4b31      	ldr	r3, [pc, #196]	; (8007390 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 80072cc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80072ce:	e054      	b.n	800737a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80072d0:	2300      	movs	r3, #0
 80072d2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80072d4:	e051      	b.n	800737a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 80072d6:	2300      	movs	r3, #0
 80072d8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80072da:	e04e      	b.n	800737a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80072e2:	d148      	bne.n	8007376 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 80072e4:	4b27      	ldr	r3, [pc, #156]	; (8007384 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80072e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072e8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80072ec:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80072ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80072f4:	d02a      	beq.n	800734c <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 80072f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80072fc:	d838      	bhi.n	8007370 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 80072fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007300:	2b00      	cmp	r3, #0
 8007302:	d004      	beq.n	800730e <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 8007304:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007306:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800730a:	d00d      	beq.n	8007328 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 800730c:	e030      	b.n	8007370 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800730e:	4b1d      	ldr	r3, [pc, #116]	; (8007384 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007316:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800731a:	d102      	bne.n	8007322 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
         {
          frequency = HSE_VALUE;
 800731c:	4b1c      	ldr	r3, [pc, #112]	; (8007390 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800731e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007320:	e02b      	b.n	800737a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007322:	2300      	movs	r3, #0
 8007324:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007326:	e028      	b.n	800737a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007328:	4b16      	ldr	r3, [pc, #88]	; (8007384 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007330:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007334:	d107      	bne.n	8007346 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007336:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800733a:	4618      	mov	r0, r3
 800733c:	f000 fae8 	bl	8007910 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007342:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007344:	e019      	b.n	800737a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007346:	2300      	movs	r3, #0
 8007348:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800734a:	e016      	b.n	800737a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800734c:	4b0d      	ldr	r3, [pc, #52]	; (8007384 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007354:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007358:	d107      	bne.n	800736a <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800735a:	f107 0318 	add.w	r3, r7, #24
 800735e:	4618      	mov	r0, r3
 8007360:	f000 f82e 	bl	80073c0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007364:	69fb      	ldr	r3, [r7, #28]
 8007366:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007368:	e007      	b.n	800737a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800736a:	2300      	movs	r3, #0
 800736c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800736e:	e004      	b.n	800737a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8007370:	2300      	movs	r3, #0
 8007372:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007374:	e001      	b.n	800737a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else
    {
      frequency = 0;
 8007376:	2300      	movs	r3, #0
 8007378:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 800737a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800737c:	4618      	mov	r0, r3
 800737e:	3740      	adds	r7, #64	; 0x40
 8007380:	46bd      	mov	sp, r7
 8007382:	bd80      	pop	{r7, pc}
 8007384:	58024400 	.word	0x58024400
 8007388:	03d09000 	.word	0x03d09000
 800738c:	003d0900 	.word	0x003d0900
 8007390:	007a1200 	.word	0x007a1200

08007394 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007394:	b580      	push	{r7, lr}
 8007396:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007398:	f7fe fb8e 	bl	8005ab8 <HAL_RCC_GetHCLKFreq>
 800739c:	4602      	mov	r2, r0
 800739e:	4b06      	ldr	r3, [pc, #24]	; (80073b8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80073a0:	6a1b      	ldr	r3, [r3, #32]
 80073a2:	091b      	lsrs	r3, r3, #4
 80073a4:	f003 0307 	and.w	r3, r3, #7
 80073a8:	4904      	ldr	r1, [pc, #16]	; (80073bc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80073aa:	5ccb      	ldrb	r3, [r1, r3]
 80073ac:	f003 031f 	and.w	r3, r3, #31
 80073b0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80073b4:	4618      	mov	r0, r3
 80073b6:	bd80      	pop	{r7, pc}
 80073b8:	58024400 	.word	0x58024400
 80073bc:	0800cd48 	.word	0x0800cd48

080073c0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80073c0:	b480      	push	{r7}
 80073c2:	b089      	sub	sp, #36	; 0x24
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80073c8:	4ba1      	ldr	r3, [pc, #644]	; (8007650 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80073ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073cc:	f003 0303 	and.w	r3, r3, #3
 80073d0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80073d2:	4b9f      	ldr	r3, [pc, #636]	; (8007650 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80073d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073d6:	0b1b      	lsrs	r3, r3, #12
 80073d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80073dc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80073de:	4b9c      	ldr	r3, [pc, #624]	; (8007650 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80073e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073e2:	091b      	lsrs	r3, r3, #4
 80073e4:	f003 0301 	and.w	r3, r3, #1
 80073e8:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80073ea:	4b99      	ldr	r3, [pc, #612]	; (8007650 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80073ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073ee:	08db      	lsrs	r3, r3, #3
 80073f0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80073f4:	693a      	ldr	r2, [r7, #16]
 80073f6:	fb02 f303 	mul.w	r3, r2, r3
 80073fa:	ee07 3a90 	vmov	s15, r3
 80073fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007402:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8007406:	697b      	ldr	r3, [r7, #20]
 8007408:	2b00      	cmp	r3, #0
 800740a:	f000 8111 	beq.w	8007630 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800740e:	69bb      	ldr	r3, [r7, #24]
 8007410:	2b02      	cmp	r3, #2
 8007412:	f000 8083 	beq.w	800751c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8007416:	69bb      	ldr	r3, [r7, #24]
 8007418:	2b02      	cmp	r3, #2
 800741a:	f200 80a1 	bhi.w	8007560 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800741e:	69bb      	ldr	r3, [r7, #24]
 8007420:	2b00      	cmp	r3, #0
 8007422:	d003      	beq.n	800742c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8007424:	69bb      	ldr	r3, [r7, #24]
 8007426:	2b01      	cmp	r3, #1
 8007428:	d056      	beq.n	80074d8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800742a:	e099      	b.n	8007560 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800742c:	4b88      	ldr	r3, [pc, #544]	; (8007650 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	f003 0320 	and.w	r3, r3, #32
 8007434:	2b00      	cmp	r3, #0
 8007436:	d02d      	beq.n	8007494 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007438:	4b85      	ldr	r3, [pc, #532]	; (8007650 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	08db      	lsrs	r3, r3, #3
 800743e:	f003 0303 	and.w	r3, r3, #3
 8007442:	4a84      	ldr	r2, [pc, #528]	; (8007654 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8007444:	fa22 f303 	lsr.w	r3, r2, r3
 8007448:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800744a:	68bb      	ldr	r3, [r7, #8]
 800744c:	ee07 3a90 	vmov	s15, r3
 8007450:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007454:	697b      	ldr	r3, [r7, #20]
 8007456:	ee07 3a90 	vmov	s15, r3
 800745a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800745e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007462:	4b7b      	ldr	r3, [pc, #492]	; (8007650 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007464:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007466:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800746a:	ee07 3a90 	vmov	s15, r3
 800746e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007472:	ed97 6a03 	vldr	s12, [r7, #12]
 8007476:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007658 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800747a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800747e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007482:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007486:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800748a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800748e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007492:	e087      	b.n	80075a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007494:	697b      	ldr	r3, [r7, #20]
 8007496:	ee07 3a90 	vmov	s15, r3
 800749a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800749e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800765c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80074a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80074a6:	4b6a      	ldr	r3, [pc, #424]	; (8007650 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80074a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074ae:	ee07 3a90 	vmov	s15, r3
 80074b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80074ba:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007658 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80074be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80074c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80074ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80074ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074d2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80074d6:	e065      	b.n	80075a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80074d8:	697b      	ldr	r3, [r7, #20]
 80074da:	ee07 3a90 	vmov	s15, r3
 80074de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074e2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007660 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80074e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80074ea:	4b59      	ldr	r3, [pc, #356]	; (8007650 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80074ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074f2:	ee07 3a90 	vmov	s15, r3
 80074f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80074fe:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007658 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007502:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007506:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800750a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800750e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007512:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007516:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800751a:	e043      	b.n	80075a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800751c:	697b      	ldr	r3, [r7, #20]
 800751e:	ee07 3a90 	vmov	s15, r3
 8007522:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007526:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007664 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800752a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800752e:	4b48      	ldr	r3, [pc, #288]	; (8007650 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007530:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007532:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007536:	ee07 3a90 	vmov	s15, r3
 800753a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800753e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007542:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007658 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007546:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800754a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800754e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007552:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007556:	ee67 7a27 	vmul.f32	s15, s14, s15
 800755a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800755e:	e021      	b.n	80075a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007560:	697b      	ldr	r3, [r7, #20]
 8007562:	ee07 3a90 	vmov	s15, r3
 8007566:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800756a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007660 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800756e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007572:	4b37      	ldr	r3, [pc, #220]	; (8007650 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007574:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007576:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800757a:	ee07 3a90 	vmov	s15, r3
 800757e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007582:	ed97 6a03 	vldr	s12, [r7, #12]
 8007586:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007658 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800758a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800758e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007592:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007596:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800759a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800759e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80075a2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80075a4:	4b2a      	ldr	r3, [pc, #168]	; (8007650 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80075a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075a8:	0a5b      	lsrs	r3, r3, #9
 80075aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80075ae:	ee07 3a90 	vmov	s15, r3
 80075b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075b6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80075ba:	ee37 7a87 	vadd.f32	s14, s15, s14
 80075be:	edd7 6a07 	vldr	s13, [r7, #28]
 80075c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80075c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80075ca:	ee17 2a90 	vmov	r2, s15
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80075d2:	4b1f      	ldr	r3, [pc, #124]	; (8007650 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80075d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075d6:	0c1b      	lsrs	r3, r3, #16
 80075d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80075dc:	ee07 3a90 	vmov	s15, r3
 80075e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075e4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80075e8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80075ec:	edd7 6a07 	vldr	s13, [r7, #28]
 80075f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80075f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80075f8:	ee17 2a90 	vmov	r2, s15
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8007600:	4b13      	ldr	r3, [pc, #76]	; (8007650 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007602:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007604:	0e1b      	lsrs	r3, r3, #24
 8007606:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800760a:	ee07 3a90 	vmov	s15, r3
 800760e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007612:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007616:	ee37 7a87 	vadd.f32	s14, s15, s14
 800761a:	edd7 6a07 	vldr	s13, [r7, #28]
 800761e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007622:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007626:	ee17 2a90 	vmov	r2, s15
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800762e:	e008      	b.n	8007642 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	2200      	movs	r2, #0
 8007634:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	2200      	movs	r2, #0
 800763a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	2200      	movs	r2, #0
 8007640:	609a      	str	r2, [r3, #8]
}
 8007642:	bf00      	nop
 8007644:	3724      	adds	r7, #36	; 0x24
 8007646:	46bd      	mov	sp, r7
 8007648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764c:	4770      	bx	lr
 800764e:	bf00      	nop
 8007650:	58024400 	.word	0x58024400
 8007654:	03d09000 	.word	0x03d09000
 8007658:	46000000 	.word	0x46000000
 800765c:	4c742400 	.word	0x4c742400
 8007660:	4a742400 	.word	0x4a742400
 8007664:	4af42400 	.word	0x4af42400

08007668 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8007668:	b480      	push	{r7}
 800766a:	b089      	sub	sp, #36	; 0x24
 800766c:	af00      	add	r7, sp, #0
 800766e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007670:	4ba1      	ldr	r3, [pc, #644]	; (80078f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007672:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007674:	f003 0303 	and.w	r3, r3, #3
 8007678:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800767a:	4b9f      	ldr	r3, [pc, #636]	; (80078f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800767c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800767e:	0d1b      	lsrs	r3, r3, #20
 8007680:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007684:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007686:	4b9c      	ldr	r3, [pc, #624]	; (80078f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007688:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800768a:	0a1b      	lsrs	r3, r3, #8
 800768c:	f003 0301 	and.w	r3, r3, #1
 8007690:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8007692:	4b99      	ldr	r3, [pc, #612]	; (80078f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007696:	08db      	lsrs	r3, r3, #3
 8007698:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800769c:	693a      	ldr	r2, [r7, #16]
 800769e:	fb02 f303 	mul.w	r3, r2, r3
 80076a2:	ee07 3a90 	vmov	s15, r3
 80076a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076aa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80076ae:	697b      	ldr	r3, [r7, #20]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	f000 8111 	beq.w	80078d8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80076b6:	69bb      	ldr	r3, [r7, #24]
 80076b8:	2b02      	cmp	r3, #2
 80076ba:	f000 8083 	beq.w	80077c4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80076be:	69bb      	ldr	r3, [r7, #24]
 80076c0:	2b02      	cmp	r3, #2
 80076c2:	f200 80a1 	bhi.w	8007808 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80076c6:	69bb      	ldr	r3, [r7, #24]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d003      	beq.n	80076d4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80076cc:	69bb      	ldr	r3, [r7, #24]
 80076ce:	2b01      	cmp	r3, #1
 80076d0:	d056      	beq.n	8007780 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80076d2:	e099      	b.n	8007808 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80076d4:	4b88      	ldr	r3, [pc, #544]	; (80078f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	f003 0320 	and.w	r3, r3, #32
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d02d      	beq.n	800773c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80076e0:	4b85      	ldr	r3, [pc, #532]	; (80078f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	08db      	lsrs	r3, r3, #3
 80076e6:	f003 0303 	and.w	r3, r3, #3
 80076ea:	4a84      	ldr	r2, [pc, #528]	; (80078fc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80076ec:	fa22 f303 	lsr.w	r3, r2, r3
 80076f0:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80076f2:	68bb      	ldr	r3, [r7, #8]
 80076f4:	ee07 3a90 	vmov	s15, r3
 80076f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076fc:	697b      	ldr	r3, [r7, #20]
 80076fe:	ee07 3a90 	vmov	s15, r3
 8007702:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007706:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800770a:	4b7b      	ldr	r3, [pc, #492]	; (80078f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800770c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800770e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007712:	ee07 3a90 	vmov	s15, r3
 8007716:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800771a:	ed97 6a03 	vldr	s12, [r7, #12]
 800771e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007900 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007722:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007726:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800772a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800772e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007732:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007736:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800773a:	e087      	b.n	800784c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800773c:	697b      	ldr	r3, [r7, #20]
 800773e:	ee07 3a90 	vmov	s15, r3
 8007742:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007746:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007904 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800774a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800774e:	4b6a      	ldr	r3, [pc, #424]	; (80078f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007752:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007756:	ee07 3a90 	vmov	s15, r3
 800775a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800775e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007762:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007900 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007766:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800776a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800776e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007772:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007776:	ee67 7a27 	vmul.f32	s15, s14, s15
 800777a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800777e:	e065      	b.n	800784c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007780:	697b      	ldr	r3, [r7, #20]
 8007782:	ee07 3a90 	vmov	s15, r3
 8007786:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800778a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007908 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800778e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007792:	4b59      	ldr	r3, [pc, #356]	; (80078f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007796:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800779a:	ee07 3a90 	vmov	s15, r3
 800779e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80077a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80077a6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007900 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80077aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80077ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80077b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80077b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80077ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80077be:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80077c2:	e043      	b.n	800784c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80077c4:	697b      	ldr	r3, [r7, #20]
 80077c6:	ee07 3a90 	vmov	s15, r3
 80077ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077ce:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800790c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80077d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80077d6:	4b48      	ldr	r3, [pc, #288]	; (80078f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80077d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077de:	ee07 3a90 	vmov	s15, r3
 80077e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80077e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80077ea:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007900 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80077ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80077f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80077f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80077fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80077fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007802:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007806:	e021      	b.n	800784c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007808:	697b      	ldr	r3, [r7, #20]
 800780a:	ee07 3a90 	vmov	s15, r3
 800780e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007812:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007908 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007816:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800781a:	4b37      	ldr	r3, [pc, #220]	; (80078f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800781c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800781e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007822:	ee07 3a90 	vmov	s15, r3
 8007826:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800782a:	ed97 6a03 	vldr	s12, [r7, #12]
 800782e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007900 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007832:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007836:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800783a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800783e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007842:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007846:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800784a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800784c:	4b2a      	ldr	r3, [pc, #168]	; (80078f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800784e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007850:	0a5b      	lsrs	r3, r3, #9
 8007852:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007856:	ee07 3a90 	vmov	s15, r3
 800785a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800785e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007862:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007866:	edd7 6a07 	vldr	s13, [r7, #28]
 800786a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800786e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007872:	ee17 2a90 	vmov	r2, s15
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800787a:	4b1f      	ldr	r3, [pc, #124]	; (80078f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800787c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800787e:	0c1b      	lsrs	r3, r3, #16
 8007880:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007884:	ee07 3a90 	vmov	s15, r3
 8007888:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800788c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007890:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007894:	edd7 6a07 	vldr	s13, [r7, #28]
 8007898:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800789c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80078a0:	ee17 2a90 	vmov	r2, s15
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80078a8:	4b13      	ldr	r3, [pc, #76]	; (80078f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80078aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078ac:	0e1b      	lsrs	r3, r3, #24
 80078ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80078b2:	ee07 3a90 	vmov	s15, r3
 80078b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078ba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80078be:	ee37 7a87 	vadd.f32	s14, s15, s14
 80078c2:	edd7 6a07 	vldr	s13, [r7, #28]
 80078c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80078ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80078ce:	ee17 2a90 	vmov	r2, s15
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80078d6:	e008      	b.n	80078ea <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	2200      	movs	r2, #0
 80078dc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	2200      	movs	r2, #0
 80078e2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	2200      	movs	r2, #0
 80078e8:	609a      	str	r2, [r3, #8]
}
 80078ea:	bf00      	nop
 80078ec:	3724      	adds	r7, #36	; 0x24
 80078ee:	46bd      	mov	sp, r7
 80078f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f4:	4770      	bx	lr
 80078f6:	bf00      	nop
 80078f8:	58024400 	.word	0x58024400
 80078fc:	03d09000 	.word	0x03d09000
 8007900:	46000000 	.word	0x46000000
 8007904:	4c742400 	.word	0x4c742400
 8007908:	4a742400 	.word	0x4a742400
 800790c:	4af42400 	.word	0x4af42400

08007910 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8007910:	b480      	push	{r7}
 8007912:	b089      	sub	sp, #36	; 0x24
 8007914:	af00      	add	r7, sp, #0
 8007916:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007918:	4ba0      	ldr	r3, [pc, #640]	; (8007b9c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800791a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800791c:	f003 0303 	and.w	r3, r3, #3
 8007920:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8007922:	4b9e      	ldr	r3, [pc, #632]	; (8007b9c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007924:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007926:	091b      	lsrs	r3, r3, #4
 8007928:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800792c:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800792e:	4b9b      	ldr	r3, [pc, #620]	; (8007b9c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007930:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007932:	f003 0301 	and.w	r3, r3, #1
 8007936:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8007938:	4b98      	ldr	r3, [pc, #608]	; (8007b9c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800793a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800793c:	08db      	lsrs	r3, r3, #3
 800793e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007942:	693a      	ldr	r2, [r7, #16]
 8007944:	fb02 f303 	mul.w	r3, r2, r3
 8007948:	ee07 3a90 	vmov	s15, r3
 800794c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007950:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8007954:	697b      	ldr	r3, [r7, #20]
 8007956:	2b00      	cmp	r3, #0
 8007958:	f000 8111 	beq.w	8007b7e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800795c:	69bb      	ldr	r3, [r7, #24]
 800795e:	2b02      	cmp	r3, #2
 8007960:	f000 8083 	beq.w	8007a6a <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8007964:	69bb      	ldr	r3, [r7, #24]
 8007966:	2b02      	cmp	r3, #2
 8007968:	f200 80a1 	bhi.w	8007aae <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800796c:	69bb      	ldr	r3, [r7, #24]
 800796e:	2b00      	cmp	r3, #0
 8007970:	d003      	beq.n	800797a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8007972:	69bb      	ldr	r3, [r7, #24]
 8007974:	2b01      	cmp	r3, #1
 8007976:	d056      	beq.n	8007a26 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8007978:	e099      	b.n	8007aae <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800797a:	4b88      	ldr	r3, [pc, #544]	; (8007b9c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	f003 0320 	and.w	r3, r3, #32
 8007982:	2b00      	cmp	r3, #0
 8007984:	d02d      	beq.n	80079e2 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007986:	4b85      	ldr	r3, [pc, #532]	; (8007b9c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	08db      	lsrs	r3, r3, #3
 800798c:	f003 0303 	and.w	r3, r3, #3
 8007990:	4a83      	ldr	r2, [pc, #524]	; (8007ba0 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8007992:	fa22 f303 	lsr.w	r3, r2, r3
 8007996:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007998:	68bb      	ldr	r3, [r7, #8]
 800799a:	ee07 3a90 	vmov	s15, r3
 800799e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80079a2:	697b      	ldr	r3, [r7, #20]
 80079a4:	ee07 3a90 	vmov	s15, r3
 80079a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079ac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80079b0:	4b7a      	ldr	r3, [pc, #488]	; (8007b9c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80079b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079b8:	ee07 3a90 	vmov	s15, r3
 80079bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80079c0:	ed97 6a03 	vldr	s12, [r7, #12]
 80079c4:	eddf 5a77 	vldr	s11, [pc, #476]	; 8007ba4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80079c8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80079cc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80079d0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80079d4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80079d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80079dc:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80079e0:	e087      	b.n	8007af2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80079e2:	697b      	ldr	r3, [r7, #20]
 80079e4:	ee07 3a90 	vmov	s15, r3
 80079e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079ec:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8007ba8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80079f0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80079f4:	4b69      	ldr	r3, [pc, #420]	; (8007b9c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80079f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079fc:	ee07 3a90 	vmov	s15, r3
 8007a00:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a04:	ed97 6a03 	vldr	s12, [r7, #12]
 8007a08:	eddf 5a66 	vldr	s11, [pc, #408]	; 8007ba4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007a0c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a10:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a14:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007a18:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a20:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007a24:	e065      	b.n	8007af2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007a26:	697b      	ldr	r3, [r7, #20]
 8007a28:	ee07 3a90 	vmov	s15, r3
 8007a2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a30:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8007bac <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8007a34:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a38:	4b58      	ldr	r3, [pc, #352]	; (8007b9c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007a3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a40:	ee07 3a90 	vmov	s15, r3
 8007a44:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a48:	ed97 6a03 	vldr	s12, [r7, #12]
 8007a4c:	eddf 5a55 	vldr	s11, [pc, #340]	; 8007ba4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007a50:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a54:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a58:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007a5c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a60:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a64:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007a68:	e043      	b.n	8007af2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007a6a:	697b      	ldr	r3, [r7, #20]
 8007a6c:	ee07 3a90 	vmov	s15, r3
 8007a70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a74:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8007bb0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8007a78:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a7c:	4b47      	ldr	r3, [pc, #284]	; (8007b9c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007a7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a84:	ee07 3a90 	vmov	s15, r3
 8007a88:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a8c:	ed97 6a03 	vldr	s12, [r7, #12]
 8007a90:	eddf 5a44 	vldr	s11, [pc, #272]	; 8007ba4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007a94:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a98:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a9c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007aa0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007aa4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007aa8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007aac:	e021      	b.n	8007af2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007aae:	697b      	ldr	r3, [r7, #20]
 8007ab0:	ee07 3a90 	vmov	s15, r3
 8007ab4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ab8:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8007ba8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8007abc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ac0:	4b36      	ldr	r3, [pc, #216]	; (8007b9c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007ac2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ac4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ac8:	ee07 3a90 	vmov	s15, r3
 8007acc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ad0:	ed97 6a03 	vldr	s12, [r7, #12]
 8007ad4:	eddf 5a33 	vldr	s11, [pc, #204]	; 8007ba4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007ad8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007adc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ae0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007ae4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ae8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007aec:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007af0:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8007af2:	4b2a      	ldr	r3, [pc, #168]	; (8007b9c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007af6:	0a5b      	lsrs	r3, r3, #9
 8007af8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007afc:	ee07 3a90 	vmov	s15, r3
 8007b00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b04:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007b08:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007b0c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007b10:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007b14:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007b18:	ee17 2a90 	vmov	r2, s15
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8007b20:	4b1e      	ldr	r3, [pc, #120]	; (8007b9c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b24:	0c1b      	lsrs	r3, r3, #16
 8007b26:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007b2a:	ee07 3a90 	vmov	s15, r3
 8007b2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b32:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007b36:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007b3a:	edd7 6a07 	vldr	s13, [r7, #28]
 8007b3e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007b42:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007b46:	ee17 2a90 	vmov	r2, s15
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8007b4e:	4b13      	ldr	r3, [pc, #76]	; (8007b9c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b52:	0e1b      	lsrs	r3, r3, #24
 8007b54:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007b58:	ee07 3a90 	vmov	s15, r3
 8007b5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b60:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007b64:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007b68:	edd7 6a07 	vldr	s13, [r7, #28]
 8007b6c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007b70:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007b74:	ee17 2a90 	vmov	r2, s15
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8007b7c:	e008      	b.n	8007b90 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	2200      	movs	r2, #0
 8007b82:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	2200      	movs	r2, #0
 8007b88:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	2200      	movs	r2, #0
 8007b8e:	609a      	str	r2, [r3, #8]
}
 8007b90:	bf00      	nop
 8007b92:	3724      	adds	r7, #36	; 0x24
 8007b94:	46bd      	mov	sp, r7
 8007b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b9a:	4770      	bx	lr
 8007b9c:	58024400 	.word	0x58024400
 8007ba0:	03d09000 	.word	0x03d09000
 8007ba4:	46000000 	.word	0x46000000
 8007ba8:	4c742400 	.word	0x4c742400
 8007bac:	4a742400 	.word	0x4a742400
 8007bb0:	4af42400 	.word	0x4af42400

08007bb4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007bb4:	b580      	push	{r7, lr}
 8007bb6:	b084      	sub	sp, #16
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	6078      	str	r0, [r7, #4]
 8007bbc:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007bbe:	2300      	movs	r3, #0
 8007bc0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007bc2:	4b53      	ldr	r3, [pc, #332]	; (8007d10 <RCCEx_PLL2_Config+0x15c>)
 8007bc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bc6:	f003 0303 	and.w	r3, r3, #3
 8007bca:	2b03      	cmp	r3, #3
 8007bcc:	d101      	bne.n	8007bd2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8007bce:	2301      	movs	r3, #1
 8007bd0:	e099      	b.n	8007d06 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007bd2:	4b4f      	ldr	r3, [pc, #316]	; (8007d10 <RCCEx_PLL2_Config+0x15c>)
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	4a4e      	ldr	r2, [pc, #312]	; (8007d10 <RCCEx_PLL2_Config+0x15c>)
 8007bd8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007bdc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007bde:	f7f9 fd77 	bl	80016d0 <HAL_GetTick>
 8007be2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007be4:	e008      	b.n	8007bf8 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007be6:	f7f9 fd73 	bl	80016d0 <HAL_GetTick>
 8007bea:	4602      	mov	r2, r0
 8007bec:	68bb      	ldr	r3, [r7, #8]
 8007bee:	1ad3      	subs	r3, r2, r3
 8007bf0:	2b02      	cmp	r3, #2
 8007bf2:	d901      	bls.n	8007bf8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007bf4:	2303      	movs	r3, #3
 8007bf6:	e086      	b.n	8007d06 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007bf8:	4b45      	ldr	r3, [pc, #276]	; (8007d10 <RCCEx_PLL2_Config+0x15c>)
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d1f0      	bne.n	8007be6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007c04:	4b42      	ldr	r3, [pc, #264]	; (8007d10 <RCCEx_PLL2_Config+0x15c>)
 8007c06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c08:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	031b      	lsls	r3, r3, #12
 8007c12:	493f      	ldr	r1, [pc, #252]	; (8007d10 <RCCEx_PLL2_Config+0x15c>)
 8007c14:	4313      	orrs	r3, r2
 8007c16:	628b      	str	r3, [r1, #40]	; 0x28
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	685b      	ldr	r3, [r3, #4]
 8007c1c:	3b01      	subs	r3, #1
 8007c1e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	689b      	ldr	r3, [r3, #8]
 8007c26:	3b01      	subs	r3, #1
 8007c28:	025b      	lsls	r3, r3, #9
 8007c2a:	b29b      	uxth	r3, r3
 8007c2c:	431a      	orrs	r2, r3
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	68db      	ldr	r3, [r3, #12]
 8007c32:	3b01      	subs	r3, #1
 8007c34:	041b      	lsls	r3, r3, #16
 8007c36:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007c3a:	431a      	orrs	r2, r3
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	691b      	ldr	r3, [r3, #16]
 8007c40:	3b01      	subs	r3, #1
 8007c42:	061b      	lsls	r3, r3, #24
 8007c44:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007c48:	4931      	ldr	r1, [pc, #196]	; (8007d10 <RCCEx_PLL2_Config+0x15c>)
 8007c4a:	4313      	orrs	r3, r2
 8007c4c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007c4e:	4b30      	ldr	r3, [pc, #192]	; (8007d10 <RCCEx_PLL2_Config+0x15c>)
 8007c50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c52:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	695b      	ldr	r3, [r3, #20]
 8007c5a:	492d      	ldr	r1, [pc, #180]	; (8007d10 <RCCEx_PLL2_Config+0x15c>)
 8007c5c:	4313      	orrs	r3, r2
 8007c5e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007c60:	4b2b      	ldr	r3, [pc, #172]	; (8007d10 <RCCEx_PLL2_Config+0x15c>)
 8007c62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c64:	f023 0220 	bic.w	r2, r3, #32
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	699b      	ldr	r3, [r3, #24]
 8007c6c:	4928      	ldr	r1, [pc, #160]	; (8007d10 <RCCEx_PLL2_Config+0x15c>)
 8007c6e:	4313      	orrs	r3, r2
 8007c70:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007c72:	4b27      	ldr	r3, [pc, #156]	; (8007d10 <RCCEx_PLL2_Config+0x15c>)
 8007c74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c76:	4a26      	ldr	r2, [pc, #152]	; (8007d10 <RCCEx_PLL2_Config+0x15c>)
 8007c78:	f023 0310 	bic.w	r3, r3, #16
 8007c7c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007c7e:	4b24      	ldr	r3, [pc, #144]	; (8007d10 <RCCEx_PLL2_Config+0x15c>)
 8007c80:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007c82:	4b24      	ldr	r3, [pc, #144]	; (8007d14 <RCCEx_PLL2_Config+0x160>)
 8007c84:	4013      	ands	r3, r2
 8007c86:	687a      	ldr	r2, [r7, #4]
 8007c88:	69d2      	ldr	r2, [r2, #28]
 8007c8a:	00d2      	lsls	r2, r2, #3
 8007c8c:	4920      	ldr	r1, [pc, #128]	; (8007d10 <RCCEx_PLL2_Config+0x15c>)
 8007c8e:	4313      	orrs	r3, r2
 8007c90:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007c92:	4b1f      	ldr	r3, [pc, #124]	; (8007d10 <RCCEx_PLL2_Config+0x15c>)
 8007c94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c96:	4a1e      	ldr	r2, [pc, #120]	; (8007d10 <RCCEx_PLL2_Config+0x15c>)
 8007c98:	f043 0310 	orr.w	r3, r3, #16
 8007c9c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8007c9e:	683b      	ldr	r3, [r7, #0]
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d106      	bne.n	8007cb2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007ca4:	4b1a      	ldr	r3, [pc, #104]	; (8007d10 <RCCEx_PLL2_Config+0x15c>)
 8007ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ca8:	4a19      	ldr	r2, [pc, #100]	; (8007d10 <RCCEx_PLL2_Config+0x15c>)
 8007caa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007cae:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007cb0:	e00f      	b.n	8007cd2 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8007cb2:	683b      	ldr	r3, [r7, #0]
 8007cb4:	2b01      	cmp	r3, #1
 8007cb6:	d106      	bne.n	8007cc6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007cb8:	4b15      	ldr	r3, [pc, #84]	; (8007d10 <RCCEx_PLL2_Config+0x15c>)
 8007cba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cbc:	4a14      	ldr	r2, [pc, #80]	; (8007d10 <RCCEx_PLL2_Config+0x15c>)
 8007cbe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007cc2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007cc4:	e005      	b.n	8007cd2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007cc6:	4b12      	ldr	r3, [pc, #72]	; (8007d10 <RCCEx_PLL2_Config+0x15c>)
 8007cc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cca:	4a11      	ldr	r2, [pc, #68]	; (8007d10 <RCCEx_PLL2_Config+0x15c>)
 8007ccc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007cd0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007cd2:	4b0f      	ldr	r3, [pc, #60]	; (8007d10 <RCCEx_PLL2_Config+0x15c>)
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	4a0e      	ldr	r2, [pc, #56]	; (8007d10 <RCCEx_PLL2_Config+0x15c>)
 8007cd8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007cdc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007cde:	f7f9 fcf7 	bl	80016d0 <HAL_GetTick>
 8007ce2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007ce4:	e008      	b.n	8007cf8 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007ce6:	f7f9 fcf3 	bl	80016d0 <HAL_GetTick>
 8007cea:	4602      	mov	r2, r0
 8007cec:	68bb      	ldr	r3, [r7, #8]
 8007cee:	1ad3      	subs	r3, r2, r3
 8007cf0:	2b02      	cmp	r3, #2
 8007cf2:	d901      	bls.n	8007cf8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007cf4:	2303      	movs	r3, #3
 8007cf6:	e006      	b.n	8007d06 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007cf8:	4b05      	ldr	r3, [pc, #20]	; (8007d10 <RCCEx_PLL2_Config+0x15c>)
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d0f0      	beq.n	8007ce6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007d04:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d06:	4618      	mov	r0, r3
 8007d08:	3710      	adds	r7, #16
 8007d0a:	46bd      	mov	sp, r7
 8007d0c:	bd80      	pop	{r7, pc}
 8007d0e:	bf00      	nop
 8007d10:	58024400 	.word	0x58024400
 8007d14:	ffff0007 	.word	0xffff0007

08007d18 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007d18:	b580      	push	{r7, lr}
 8007d1a:	b084      	sub	sp, #16
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	6078      	str	r0, [r7, #4]
 8007d20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007d22:	2300      	movs	r3, #0
 8007d24:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007d26:	4b53      	ldr	r3, [pc, #332]	; (8007e74 <RCCEx_PLL3_Config+0x15c>)
 8007d28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d2a:	f003 0303 	and.w	r3, r3, #3
 8007d2e:	2b03      	cmp	r3, #3
 8007d30:	d101      	bne.n	8007d36 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007d32:	2301      	movs	r3, #1
 8007d34:	e099      	b.n	8007e6a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007d36:	4b4f      	ldr	r3, [pc, #316]	; (8007e74 <RCCEx_PLL3_Config+0x15c>)
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	4a4e      	ldr	r2, [pc, #312]	; (8007e74 <RCCEx_PLL3_Config+0x15c>)
 8007d3c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007d40:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007d42:	f7f9 fcc5 	bl	80016d0 <HAL_GetTick>
 8007d46:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007d48:	e008      	b.n	8007d5c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8007d4a:	f7f9 fcc1 	bl	80016d0 <HAL_GetTick>
 8007d4e:	4602      	mov	r2, r0
 8007d50:	68bb      	ldr	r3, [r7, #8]
 8007d52:	1ad3      	subs	r3, r2, r3
 8007d54:	2b02      	cmp	r3, #2
 8007d56:	d901      	bls.n	8007d5c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007d58:	2303      	movs	r3, #3
 8007d5a:	e086      	b.n	8007e6a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007d5c:	4b45      	ldr	r3, [pc, #276]	; (8007e74 <RCCEx_PLL3_Config+0x15c>)
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d1f0      	bne.n	8007d4a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007d68:	4b42      	ldr	r3, [pc, #264]	; (8007e74 <RCCEx_PLL3_Config+0x15c>)
 8007d6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d6c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	051b      	lsls	r3, r3, #20
 8007d76:	493f      	ldr	r1, [pc, #252]	; (8007e74 <RCCEx_PLL3_Config+0x15c>)
 8007d78:	4313      	orrs	r3, r2
 8007d7a:	628b      	str	r3, [r1, #40]	; 0x28
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	685b      	ldr	r3, [r3, #4]
 8007d80:	3b01      	subs	r3, #1
 8007d82:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	689b      	ldr	r3, [r3, #8]
 8007d8a:	3b01      	subs	r3, #1
 8007d8c:	025b      	lsls	r3, r3, #9
 8007d8e:	b29b      	uxth	r3, r3
 8007d90:	431a      	orrs	r2, r3
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	68db      	ldr	r3, [r3, #12]
 8007d96:	3b01      	subs	r3, #1
 8007d98:	041b      	lsls	r3, r3, #16
 8007d9a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007d9e:	431a      	orrs	r2, r3
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	691b      	ldr	r3, [r3, #16]
 8007da4:	3b01      	subs	r3, #1
 8007da6:	061b      	lsls	r3, r3, #24
 8007da8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007dac:	4931      	ldr	r1, [pc, #196]	; (8007e74 <RCCEx_PLL3_Config+0x15c>)
 8007dae:	4313      	orrs	r3, r2
 8007db0:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007db2:	4b30      	ldr	r3, [pc, #192]	; (8007e74 <RCCEx_PLL3_Config+0x15c>)
 8007db4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007db6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	695b      	ldr	r3, [r3, #20]
 8007dbe:	492d      	ldr	r1, [pc, #180]	; (8007e74 <RCCEx_PLL3_Config+0x15c>)
 8007dc0:	4313      	orrs	r3, r2
 8007dc2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007dc4:	4b2b      	ldr	r3, [pc, #172]	; (8007e74 <RCCEx_PLL3_Config+0x15c>)
 8007dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dc8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	699b      	ldr	r3, [r3, #24]
 8007dd0:	4928      	ldr	r1, [pc, #160]	; (8007e74 <RCCEx_PLL3_Config+0x15c>)
 8007dd2:	4313      	orrs	r3, r2
 8007dd4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007dd6:	4b27      	ldr	r3, [pc, #156]	; (8007e74 <RCCEx_PLL3_Config+0x15c>)
 8007dd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dda:	4a26      	ldr	r2, [pc, #152]	; (8007e74 <RCCEx_PLL3_Config+0x15c>)
 8007ddc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007de0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007de2:	4b24      	ldr	r3, [pc, #144]	; (8007e74 <RCCEx_PLL3_Config+0x15c>)
 8007de4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007de6:	4b24      	ldr	r3, [pc, #144]	; (8007e78 <RCCEx_PLL3_Config+0x160>)
 8007de8:	4013      	ands	r3, r2
 8007dea:	687a      	ldr	r2, [r7, #4]
 8007dec:	69d2      	ldr	r2, [r2, #28]
 8007dee:	00d2      	lsls	r2, r2, #3
 8007df0:	4920      	ldr	r1, [pc, #128]	; (8007e74 <RCCEx_PLL3_Config+0x15c>)
 8007df2:	4313      	orrs	r3, r2
 8007df4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007df6:	4b1f      	ldr	r3, [pc, #124]	; (8007e74 <RCCEx_PLL3_Config+0x15c>)
 8007df8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dfa:	4a1e      	ldr	r2, [pc, #120]	; (8007e74 <RCCEx_PLL3_Config+0x15c>)
 8007dfc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007e00:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8007e02:	683b      	ldr	r3, [r7, #0]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d106      	bne.n	8007e16 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007e08:	4b1a      	ldr	r3, [pc, #104]	; (8007e74 <RCCEx_PLL3_Config+0x15c>)
 8007e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e0c:	4a19      	ldr	r2, [pc, #100]	; (8007e74 <RCCEx_PLL3_Config+0x15c>)
 8007e0e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007e12:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007e14:	e00f      	b.n	8007e36 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8007e16:	683b      	ldr	r3, [r7, #0]
 8007e18:	2b01      	cmp	r3, #1
 8007e1a:	d106      	bne.n	8007e2a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007e1c:	4b15      	ldr	r3, [pc, #84]	; (8007e74 <RCCEx_PLL3_Config+0x15c>)
 8007e1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e20:	4a14      	ldr	r2, [pc, #80]	; (8007e74 <RCCEx_PLL3_Config+0x15c>)
 8007e22:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007e26:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007e28:	e005      	b.n	8007e36 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007e2a:	4b12      	ldr	r3, [pc, #72]	; (8007e74 <RCCEx_PLL3_Config+0x15c>)
 8007e2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e2e:	4a11      	ldr	r2, [pc, #68]	; (8007e74 <RCCEx_PLL3_Config+0x15c>)
 8007e30:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007e34:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007e36:	4b0f      	ldr	r3, [pc, #60]	; (8007e74 <RCCEx_PLL3_Config+0x15c>)
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	4a0e      	ldr	r2, [pc, #56]	; (8007e74 <RCCEx_PLL3_Config+0x15c>)
 8007e3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007e40:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007e42:	f7f9 fc45 	bl	80016d0 <HAL_GetTick>
 8007e46:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007e48:	e008      	b.n	8007e5c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8007e4a:	f7f9 fc41 	bl	80016d0 <HAL_GetTick>
 8007e4e:	4602      	mov	r2, r0
 8007e50:	68bb      	ldr	r3, [r7, #8]
 8007e52:	1ad3      	subs	r3, r2, r3
 8007e54:	2b02      	cmp	r3, #2
 8007e56:	d901      	bls.n	8007e5c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007e58:	2303      	movs	r3, #3
 8007e5a:	e006      	b.n	8007e6a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007e5c:	4b05      	ldr	r3, [pc, #20]	; (8007e74 <RCCEx_PLL3_Config+0x15c>)
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d0f0      	beq.n	8007e4a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007e68:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e6a:	4618      	mov	r0, r3
 8007e6c:	3710      	adds	r7, #16
 8007e6e:	46bd      	mov	sp, r7
 8007e70:	bd80      	pop	{r7, pc}
 8007e72:	bf00      	nop
 8007e74:	58024400 	.word	0x58024400
 8007e78:	ffff0007 	.word	0xffff0007

08007e7c <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8007e7c:	b580      	push	{r7, lr}
 8007e7e:	b08a      	sub	sp, #40	; 0x28
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	6078      	str	r0, [r7, #4]
  uint32_t ckstr_bits;
  uint32_t syncen_bits;
  SAI_TypeDef *SaiBaseAddress;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d101      	bne.n	8007e8e <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 8007e8a:	2301      	movs	r3, #1
 8007e8c:	e283      	b.n	8008396 <HAL_SAI_Init+0x51a>
  assert_param(IS_SAI_BLOCK_FIRST_BIT(hsai->Init.FirstBit));
  assert_param(IS_SAI_BLOCK_CLOCK_STROBING(hsai->Init.ClockStrobing));
  assert_param(IS_SAI_BLOCK_SYNCHRO(hsai->Init.Synchro));
#if defined(SAI_VER_V2_X) 
  /* SAI Peripheral version depends on STM32H7 device revision ID */
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 8007e8e:	f7f9 fc4f 	bl	8001730 <HAL_GetREVID>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007e98:	2b01      	cmp	r3, #1
 8007e9a:	d113      	bne.n	8007ec4 <HAL_SAI_Init+0x48>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 or SAI4 sub-block A, in master RX mode with free protocol */
#if defined(SAI4)
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	4a94      	ldr	r2, [pc, #592]	; (80080f4 <HAL_SAI_Init+0x278>)
 8007ea2:	4293      	cmp	r3, r2
 8007ea4:	d004      	beq.n	8007eb0 <HAL_SAI_Init+0x34>
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	4a93      	ldr	r2, [pc, #588]	; (80080f8 <HAL_SAI_Init+0x27c>)
 8007eac:	4293      	cmp	r3, r2
 8007eae:	d107      	bne.n	8007ec0 <HAL_SAI_Init+0x44>
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	685b      	ldr	r3, [r3, #4]
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 8007eb4:	2b01      	cmp	r3, #1
 8007eb6:	d103      	bne.n	8007ec0 <HAL_SAI_Init+0x44>
         (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d001      	beq.n	8007ec4 <HAL_SAI_Init+0x48>
    {
      return HAL_ERROR;
 8007ec0:	2301      	movs	r3, #1
 8007ec2:	e268      	b.n	8008396 <HAL_SAI_Init+0x51a>
    }
#endif /* SAI4 */
  }

  /* Get the SAI base address according to the SAI handle */
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	4a8a      	ldr	r2, [pc, #552]	; (80080f4 <HAL_SAI_Init+0x278>)
 8007eca:	4293      	cmp	r3, r2
 8007ecc:	d004      	beq.n	8007ed8 <HAL_SAI_Init+0x5c>
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	4a8a      	ldr	r2, [pc, #552]	; (80080fc <HAL_SAI_Init+0x280>)
 8007ed4:	4293      	cmp	r3, r2
 8007ed6:	d102      	bne.n	8007ede <HAL_SAI_Init+0x62>
  {
    SaiBaseAddress = SAI1;
 8007ed8:	4b89      	ldr	r3, [pc, #548]	; (8008100 <HAL_SAI_Init+0x284>)
 8007eda:	61bb      	str	r3, [r7, #24]
 8007edc:	e028      	b.n	8007f30 <HAL_SAI_Init+0xb4>
  }
#if defined(SAI2)
  else if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	4a88      	ldr	r2, [pc, #544]	; (8008104 <HAL_SAI_Init+0x288>)
 8007ee4:	4293      	cmp	r3, r2
 8007ee6:	d004      	beq.n	8007ef2 <HAL_SAI_Init+0x76>
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	4a86      	ldr	r2, [pc, #536]	; (8008108 <HAL_SAI_Init+0x28c>)
 8007eee:	4293      	cmp	r3, r2
 8007ef0:	d102      	bne.n	8007ef8 <HAL_SAI_Init+0x7c>
  {
    SaiBaseAddress = SAI2;
 8007ef2:	4b86      	ldr	r3, [pc, #536]	; (800810c <HAL_SAI_Init+0x290>)
 8007ef4:	61bb      	str	r3, [r7, #24]
 8007ef6:	e01b      	b.n	8007f30 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI2 */
#if defined(SAI3)
  else if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	4a84      	ldr	r2, [pc, #528]	; (8008110 <HAL_SAI_Init+0x294>)
 8007efe:	4293      	cmp	r3, r2
 8007f00:	d004      	beq.n	8007f0c <HAL_SAI_Init+0x90>
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	4a83      	ldr	r2, [pc, #524]	; (8008114 <HAL_SAI_Init+0x298>)
 8007f08:	4293      	cmp	r3, r2
 8007f0a:	d102      	bne.n	8007f12 <HAL_SAI_Init+0x96>
  {
    SaiBaseAddress = SAI3;
 8007f0c:	4b82      	ldr	r3, [pc, #520]	; (8008118 <HAL_SAI_Init+0x29c>)
 8007f0e:	61bb      	str	r3, [r7, #24]
 8007f10:	e00e      	b.n	8007f30 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI3 */
#if defined(SAI4)
  else if ((hsai->Instance == SAI4_Block_A) || (hsai->Instance == SAI4_Block_B))
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	4a78      	ldr	r2, [pc, #480]	; (80080f8 <HAL_SAI_Init+0x27c>)
 8007f18:	4293      	cmp	r3, r2
 8007f1a:	d004      	beq.n	8007f26 <HAL_SAI_Init+0xaa>
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	4a7e      	ldr	r2, [pc, #504]	; (800811c <HAL_SAI_Init+0x2a0>)
 8007f22:	4293      	cmp	r3, r2
 8007f24:	d102      	bne.n	8007f2c <HAL_SAI_Init+0xb0>
  {
    SaiBaseAddress = SAI4;
 8007f26:	4b7e      	ldr	r3, [pc, #504]	; (8008120 <HAL_SAI_Init+0x2a4>)
 8007f28:	61bb      	str	r3, [r7, #24]
 8007f2a:	e001      	b.n	8007f30 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI4 */
  else
  {
    return HAL_ERROR;
 8007f2c:	2301      	movs	r3, #1
 8007f2e:	e232      	b.n	8008396 <HAL_SAI_Init+0x51a>
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 8007f36:	b2db      	uxtb	r3, r3
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d106      	bne.n	8007f4a <HAL_SAI_Init+0xce>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	2200      	movs	r2, #0
 8007f40:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8007f44:	6878      	ldr	r0, [r7, #4]
 8007f46:	f7f9 fa0b 	bl	8001360 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if(SAI_Disable(hsai) != HAL_OK)
 8007f4a:	6878      	ldr	r0, [r7, #4]
 8007f4c:	f000 fb0c 	bl	8008568 <SAI_Disable>
 8007f50:	4603      	mov	r3, r0
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d001      	beq.n	8007f5a <HAL_SAI_Init+0xde>
  {
    return HAL_ERROR;
 8007f56:	2301      	movs	r3, #1
 8007f58:	e21d      	b.n	8008396 <HAL_SAI_Init+0x51a>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	2202      	movs	r2, #2
 8007f5e:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	68db      	ldr	r3, [r3, #12]
 8007f66:	2b02      	cmp	r3, #2
 8007f68:	d00c      	beq.n	8007f84 <HAL_SAI_Init+0x108>
 8007f6a:	2b02      	cmp	r3, #2
 8007f6c:	d80d      	bhi.n	8007f8a <HAL_SAI_Init+0x10e>
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d002      	beq.n	8007f78 <HAL_SAI_Init+0xfc>
 8007f72:	2b01      	cmp	r3, #1
 8007f74:	d003      	beq.n	8007f7e <HAL_SAI_Init+0x102>
 8007f76:	e008      	b.n	8007f8a <HAL_SAI_Init+0x10e>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 8007f78:	2300      	movs	r3, #0
 8007f7a:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8007f7c:	e008      	b.n	8007f90 <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8007f7e:	2310      	movs	r3, #16
 8007f80:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8007f82:	e005      	b.n	8007f90 <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8007f84:	2320      	movs	r3, #32
 8007f86:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8007f88:	e002      	b.n	8007f90 <HAL_SAI_Init+0x114>
    default:
      tmpregisterGCR = 0;
 8007f8a:	2300      	movs	r3, #0
 8007f8c:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8007f8e:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	689b      	ldr	r3, [r3, #8]
 8007f94:	2b05      	cmp	r3, #5
 8007f96:	d832      	bhi.n	8007ffe <HAL_SAI_Init+0x182>
 8007f98:	a201      	add	r2, pc, #4	; (adr r2, 8007fa0 <HAL_SAI_Init+0x124>)
 8007f9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f9e:	bf00      	nop
 8007fa0:	08007fb9 	.word	0x08007fb9
 8007fa4:	08007fbf 	.word	0x08007fbf
 8007fa8:	08007fc7 	.word	0x08007fc7
 8007fac:	08007fcf 	.word	0x08007fcf
 8007fb0:	08007fdf 	.word	0x08007fdf
 8007fb4:	08007fef 	.word	0x08007fef
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 8007fb8:	2300      	movs	r3, #0
 8007fba:	61fb      	str	r3, [r7, #28]
      break;
 8007fbc:	e022      	b.n	8008004 <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8007fbe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007fc2:	61fb      	str	r3, [r7, #28]
      break;
 8007fc4:	e01e      	b.n	8008004 <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8007fc6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007fca:	61fb      	str	r3, [r7, #28]
      break;
 8007fcc:	e01a      	b.n	8008004 <HAL_SAI_Init+0x188>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8007fce:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007fd2:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8007fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fd6:	f043 0301 	orr.w	r3, r3, #1
 8007fda:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8007fdc:	e012      	b.n	8008004 <HAL_SAI_Init+0x188>
#endif /* SAI2 */
#if defined(SAI3)
    case SAI_SYNCHRONOUS_EXT_SAI3 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8007fde:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007fe2:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
 8007fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fe6:	f043 0302 	orr.w	r3, r3, #2
 8007fea:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8007fec:	e00a      	b.n	8008004 <HAL_SAI_Init+0x188>
#endif /* SAI3 */
#if defined(SAI4)
    case SAI_SYNCHRONOUS_EXT_SAI4 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8007fee:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007ff2:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
 8007ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ff6:	f043 0303 	orr.w	r3, r3, #3
 8007ffa:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8007ffc:	e002      	b.n	8008004 <HAL_SAI_Init+0x188>
#endif /* SAI4 */
    default:
      syncen_bits = 0;
 8007ffe:	2300      	movs	r3, #0
 8008000:	61fb      	str	r3, [r7, #28]
      break;
 8008002:	bf00      	nop
  }

  /* Set the SAI Block Synchro Configuration */
  SaiBaseAddress->GCR = tmpregisterGCR;
 8008004:	69bb      	ldr	r3, [r7, #24]
 8008006:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008008:	601a      	str	r2, [r3, #0]

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	6a1b      	ldr	r3, [r3, #32]
 800800e:	2b00      	cmp	r3, #0
 8008010:	f000 80ba 	beq.w	8008188 <HAL_SAI_Init+0x30c>
  {
    uint32_t freq = 0;
 8008014:	2300      	movs	r3, #0
 8008016:	617b      	str	r3, [r7, #20]
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	4a35      	ldr	r2, [pc, #212]	; (80080f4 <HAL_SAI_Init+0x278>)
 800801e:	4293      	cmp	r3, r2
 8008020:	d004      	beq.n	800802c <HAL_SAI_Init+0x1b0>
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	4a35      	ldr	r2, [pc, #212]	; (80080fc <HAL_SAI_Init+0x280>)
 8008028:	4293      	cmp	r3, r2
 800802a:	d104      	bne.n	8008036 <HAL_SAI_Init+0x1ba>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800802c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8008030:	f7fe fcde 	bl	80069f0 <HAL_RCCEx_GetPeriphCLKFreq>
 8008034:	6178      	str	r0, [r7, #20]
    }

#if defined(SAI2)
#if defined(RCC_PERIPHCLK_SAI2)
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	4a32      	ldr	r2, [pc, #200]	; (8008104 <HAL_SAI_Init+0x288>)
 800803c:	4293      	cmp	r3, r2
 800803e:	d004      	beq.n	800804a <HAL_SAI_Init+0x1ce>
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	4a30      	ldr	r2, [pc, #192]	; (8008108 <HAL_SAI_Init+0x28c>)
 8008046:	4293      	cmp	r3, r2
 8008048:	d104      	bne.n	8008054 <HAL_SAI_Init+0x1d8>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800804a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800804e:	f7fe fccf 	bl	80069f0 <HAL_RCCEx_GetPeriphCLKFreq>
 8008052:	6178      	str	r0, [r7, #20]
    }
#endif /* RCC_PERIPHCLK_SAI2 */
#endif /* SAI2 */

#if defined(SAI3)
    if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	4a2d      	ldr	r2, [pc, #180]	; (8008110 <HAL_SAI_Init+0x294>)
 800805a:	4293      	cmp	r3, r2
 800805c:	d004      	beq.n	8008068 <HAL_SAI_Init+0x1ec>
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	4a2c      	ldr	r2, [pc, #176]	; (8008114 <HAL_SAI_Init+0x298>)
 8008064:	4293      	cmp	r3, r2
 8008066:	d104      	bne.n	8008072 <HAL_SAI_Init+0x1f6>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
 8008068:	f44f 7000 	mov.w	r0, #512	; 0x200
 800806c:	f7fe fcc0 	bl	80069f0 <HAL_RCCEx_GetPeriphCLKFreq>
 8008070:	6178      	str	r0, [r7, #20]
    }
#endif /* SAI3 */
#if defined(SAI4)
    if (hsai->Instance == SAI4_Block_A)
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	4a20      	ldr	r2, [pc, #128]	; (80080f8 <HAL_SAI_Init+0x27c>)
 8008078:	4293      	cmp	r3, r2
 800807a:	d104      	bne.n	8008086 <HAL_SAI_Init+0x20a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
 800807c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8008080:	f7fe fcb6 	bl	80069f0 <HAL_RCCEx_GetPeriphCLKFreq>
 8008084:	6178      	str	r0, [r7, #20]
    }
    if (hsai->Instance == SAI4_Block_B)
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	4a24      	ldr	r2, [pc, #144]	; (800811c <HAL_SAI_Init+0x2a0>)
 800808c:	4293      	cmp	r3, r2
 800808e:	d104      	bne.n	800809a <HAL_SAI_Init+0x21e>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
 8008090:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8008094:	f7fe fcac 	bl	80069f0 <HAL_RCCEx_GetPeriphCLKFreq>
 8008098:	6178      	str	r0, [r7, #20]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	699b      	ldr	r3, [r3, #24]
 800809e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80080a2:	d120      	bne.n	80080e6 <HAL_SAI_Init+0x26a>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080a8:	2b04      	cmp	r3, #4
 80080aa:	d102      	bne.n	80080b2 <HAL_SAI_Init+0x236>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = 64U;
 80080ac:	2340      	movs	r3, #64	; 0x40
 80080ae:	60fb      	str	r3, [r7, #12]
 80080b0:	e00a      	b.n	80080c8 <HAL_SAI_Init+0x24c>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080b6:	2b08      	cmp	r3, #8
 80080b8:	d103      	bne.n	80080c2 <HAL_SAI_Init+0x246>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = 256U;
 80080ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 80080be:	60fb      	str	r3, [r7, #12]
 80080c0:	e002      	b.n	80080c8 <HAL_SAI_Init+0x24c>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080c6:	60fb      	str	r3, [r7, #12]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 80080c8:	697a      	ldr	r2, [r7, #20]
 80080ca:	4613      	mov	r3, r2
 80080cc:	009b      	lsls	r3, r3, #2
 80080ce:	4413      	add	r3, r2
 80080d0:	005b      	lsls	r3, r3, #1
 80080d2:	4619      	mov	r1, r3
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	6a1b      	ldr	r3, [r3, #32]
 80080d8:	68fa      	ldr	r2, [r7, #12]
 80080da:	fb02 f303 	mul.w	r3, r2, r3
 80080de:	fbb1 f3f3 	udiv	r3, r1, r3
 80080e2:	613b      	str	r3, [r7, #16]
 80080e4:	e02f      	b.n	8008146 <HAL_SAI_Init+0x2ca>
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080ea:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80080ee:	d119      	bne.n	8008124 <HAL_SAI_Init+0x2a8>
 80080f0:	2302      	movs	r3, #2
 80080f2:	e018      	b.n	8008126 <HAL_SAI_Init+0x2aa>
 80080f4:	40015804 	.word	0x40015804
 80080f8:	58005404 	.word	0x58005404
 80080fc:	40015824 	.word	0x40015824
 8008100:	40015800 	.word	0x40015800
 8008104:	40015c04 	.word	0x40015c04
 8008108:	40015c24 	.word	0x40015c24
 800810c:	40015c00 	.word	0x40015c00
 8008110:	40016004 	.word	0x40016004
 8008114:	40016024 	.word	0x40016024
 8008118:	40016000 	.word	0x40016000
 800811c:	58005424 	.word	0x58005424
 8008120:	58005400 	.word	0x58005400
 8008124:	2301      	movs	r3, #1
 8008126:	60bb      	str	r3, [r7, #8]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 8008128:	697a      	ldr	r2, [r7, #20]
 800812a:	4613      	mov	r3, r2
 800812c:	009b      	lsls	r3, r3, #2
 800812e:	4413      	add	r3, r2
 8008130:	005b      	lsls	r3, r3, #1
 8008132:	4619      	mov	r1, r3
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	6a1b      	ldr	r3, [r3, #32]
 8008138:	68ba      	ldr	r2, [r7, #8]
 800813a:	fb02 f303 	mul.w	r3, r2, r3
 800813e:	021b      	lsls	r3, r3, #8
 8008140:	fbb1 f3f3 	udiv	r3, r1, r3
 8008144:	613b      	str	r3, [r7, #16]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 8008146:	693b      	ldr	r3, [r7, #16]
 8008148:	4a95      	ldr	r2, [pc, #596]	; (80083a0 <HAL_SAI_Init+0x524>)
 800814a:	fba2 2303 	umull	r2, r3, r2, r3
 800814e:	08da      	lsrs	r2, r3, #3
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	625a      	str	r2, [r3, #36]	; 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 8008154:	6939      	ldr	r1, [r7, #16]
 8008156:	4b92      	ldr	r3, [pc, #584]	; (80083a0 <HAL_SAI_Init+0x524>)
 8008158:	fba3 2301 	umull	r2, r3, r3, r1
 800815c:	08da      	lsrs	r2, r3, #3
 800815e:	4613      	mov	r3, r2
 8008160:	009b      	lsls	r3, r3, #2
 8008162:	4413      	add	r3, r2
 8008164:	005b      	lsls	r3, r3, #1
 8008166:	1aca      	subs	r2, r1, r3
 8008168:	2a08      	cmp	r2, #8
 800816a:	d904      	bls.n	8008176 <HAL_SAI_Init+0x2fa>
    {
      hsai->Init.Mckdiv += 1U;
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008170:	1c5a      	adds	r2, r3, #1
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800817a:	2b04      	cmp	r3, #4
 800817c:	d104      	bne.n	8008188 <HAL_SAI_Init+0x30c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008182:	085a      	lsrs	r2, r3, #1
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	685b      	ldr	r3, [r3, #4]
 800818c:	2b00      	cmp	r3, #0
 800818e:	d003      	beq.n	8008198 <HAL_SAI_Init+0x31c>
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	685b      	ldr	r3, [r3, #4]
 8008194:	2b02      	cmp	r3, #2
 8008196:	d109      	bne.n	80081ac <HAL_SAI_Init+0x330>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800819c:	2b01      	cmp	r3, #1
 800819e:	d101      	bne.n	80081a4 <HAL_SAI_Init+0x328>
 80081a0:	2300      	movs	r3, #0
 80081a2:	e001      	b.n	80081a8 <HAL_SAI_Init+0x32c>
 80081a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80081a8:	623b      	str	r3, [r7, #32]
 80081aa:	e008      	b.n	80081be <HAL_SAI_Init+0x342>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081b0:	2b01      	cmp	r3, #1
 80081b2:	d102      	bne.n	80081ba <HAL_SAI_Init+0x33e>
 80081b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80081b8:	e000      	b.n	80081bc <HAL_SAI_Init+0x340>
 80081ba:	2300      	movs	r3, #0
 80081bc:	623b      	str	r3, [r7, #32]

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
#if defined(SAI_VER_V2_X) /* SAI Peripheral version depends on STM32H7 device revision ID */

  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 80081be:	f7f9 fab7 	bl	8001730 <HAL_GetREVID>
 80081c2:	4603      	mov	r3, r0
 80081c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80081c8:	d331      	bcc.n	800822e <HAL_SAI_Init+0x3b2>
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	6819      	ldr	r1, [r3, #0]
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681a      	ldr	r2, [r3, #0]
 80081d4:	4b73      	ldr	r3, [pc, #460]	; (80083a4 <HAL_SAI_Init+0x528>)
 80081d6:	400b      	ands	r3, r1
 80081d8:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                             SAI_xCR1_MCKEN);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	6819      	ldr	r1, [r3, #0]
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	685a      	ldr	r2, [r3, #4]
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081e8:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80081ee:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80081f4:	431a      	orrs	r2, r3
 80081f6:	6a3b      	ldr	r3, [r7, #32]
 80081f8:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 80081fa:	69fb      	ldr	r3, [r7, #28]
 80081fc:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                            ckstr_bits | syncen_bits |                             \
 8008202:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	695b      	ldr	r3, [r3, #20]
 8008208:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800820e:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008214:	051b      	lsls	r3, r3, #20
 8008216:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800821c:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	691b      	ldr	r3, [r3, #16]
 8008222:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	430a      	orrs	r2, r1
 800822a:	601a      	str	r2, [r3, #0]
 800822c:	e02d      	b.n	800828a <HAL_SAI_Init+0x40e>
  }
  else /* STM32H7xx Rev.Y */
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	6819      	ldr	r1, [r3, #0]
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681a      	ldr	r2, [r3, #0]
 8008238:	4b5b      	ldr	r3, [pc, #364]	; (80083a8 <HAL_SAI_Init+0x52c>)
 800823a:	400b      	ands	r3, r1
 800823c:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	6819      	ldr	r1, [r3, #0]
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	685a      	ldr	r2, [r3, #4]
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800824c:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008252:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008258:	431a      	orrs	r2, r3
 800825a:	6a3b      	ldr	r3, [r7, #32]
 800825c:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 800825e:	69fb      	ldr	r3, [r7, #28]
 8008260:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                            ckstr_bits | syncen_bits |                             \
 8008266:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	695b      	ldr	r3, [r3, #20]
 800826c:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8008272:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008278:	051b      	lsls	r3, r3, #20
 800827a:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling);
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8008280:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	430a      	orrs	r2, r1
 8008288:	601a      	str	r2, [r3, #0]
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
#endif /* SAI_VER_V2_X */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	6859      	ldr	r1, [r3, #4]
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681a      	ldr	r2, [r3, #0]
 8008294:	4b45      	ldr	r3, [pc, #276]	; (80083ac <HAL_SAI_Init+0x530>)
 8008296:	400b      	ands	r3, r1
 8008298:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	6859      	ldr	r1, [r3, #4]
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	69da      	ldr	r2, [r3, #28]
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082a8:	431a      	orrs	r2, r3
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082ae:	431a      	orrs	r2, r3
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	430a      	orrs	r2, r1
 80082b6:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	6899      	ldr	r1, [r3, #8]
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681a      	ldr	r2, [r3, #0]
 80082c2:	4b3b      	ldr	r3, [pc, #236]	; (80083b0 <HAL_SAI_Init+0x534>)
 80082c4:	400b      	ands	r3, r1
 80082c6:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	6899      	ldr	r1, [r3, #8]
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082d2:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80082d8:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                           hsai->FrameInit.FSOffset |
 80082de:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                           hsai->FrameInit.FSDefinition |
 80082e4:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80082ea:	3b01      	subs	r3, #1
 80082ec:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 80082ee:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	430a      	orrs	r2, r1
 80082f6:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	68d9      	ldr	r1, [r3, #12]
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681a      	ldr	r2, [r3, #0]
 8008302:	f24f 0320 	movw	r3, #61472	; 0xf020
 8008306:	400b      	ands	r3, r1
 8008308:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	68d9      	ldr	r1, [r3, #12]
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008318:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800831e:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8008320:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008326:	3b01      	subs	r3, #1
 8008328:	021b      	lsls	r3, r3, #8
 800832a:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	430a      	orrs	r2, r1
 8008332:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
#if defined(SAI4)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	4a1e      	ldr	r2, [pc, #120]	; (80083b4 <HAL_SAI_Init+0x538>)
 800833a:	4293      	cmp	r3, r2
 800833c:	d004      	beq.n	8008348 <HAL_SAI_Init+0x4cc>
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	4a1d      	ldr	r2, [pc, #116]	; (80083b8 <HAL_SAI_Init+0x53c>)
 8008344:	4293      	cmp	r3, r2
 8008346:	d119      	bne.n	800837c <HAL_SAI_Init+0x500>
#else
  if (hsai->Instance == SAI1_Block_A)
#endif /* SAI4 */
  {
    /* Disable PDM interface */
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 8008348:	69bb      	ldr	r3, [r7, #24]
 800834a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800834c:	f023 0201 	bic.w	r2, r3, #1
 8008350:	69bb      	ldr	r3, [r7, #24]
 8008352:	645a      	str	r2, [r3, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800835a:	2b01      	cmp	r3, #1
 800835c:	d10e      	bne.n	800837c <HAL_SAI_Init+0x500>
    {
      /* Configure and enable PDM interface */
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008366:	3b01      	subs	r3, #1
 8008368:	011b      	lsls	r3, r3, #4
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800836a:	431a      	orrs	r2, r3
 800836c:	69bb      	ldr	r3, [r7, #24]
 800836e:	645a      	str	r2, [r3, #68]	; 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
 8008370:	69bb      	ldr	r3, [r7, #24]
 8008372:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008374:	f043 0201 	orr.w	r2, r3, #1
 8008378:	69bb      	ldr	r3, [r7, #24]
 800837a:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	2200      	movs	r2, #0
 8008380:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	2201      	movs	r2, #1
 8008388:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	2200      	movs	r2, #0
 8008390:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

  return HAL_OK;
 8008394:	2300      	movs	r3, #0
}
 8008396:	4618      	mov	r0, r3
 8008398:	3728      	adds	r7, #40	; 0x28
 800839a:	46bd      	mov	sp, r7
 800839c:	bd80      	pop	{r7, pc}
 800839e:	bf00      	nop
 80083a0:	cccccccd 	.word	0xcccccccd
 80083a4:	f005c010 	.word	0xf005c010
 80083a8:	f805c010 	.word	0xf805c010
 80083ac:	ffff1ff0 	.word	0xffff1ff0
 80083b0:	fff88000 	.word	0xfff88000
 80083b4:	40015804 	.word	0x40015804
 80083b8:	58005404 	.word	0x58005404

080083bc <HAL_SAI_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Receive_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 80083bc:	b580      	push	{r7, lr}
 80083be:	b084      	sub	sp, #16
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	60f8      	str	r0, [r7, #12]
 80083c4:	60b9      	str	r1, [r7, #8]
 80083c6:	4613      	mov	r3, r2
 80083c8:	80fb      	strh	r3, [r7, #6]

  if ((pData == NULL) || (Size == 0U))
 80083ca:	68bb      	ldr	r3, [r7, #8]
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d002      	beq.n	80083d6 <HAL_SAI_Receive_DMA+0x1a>
 80083d0:	88fb      	ldrh	r3, [r7, #6]
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d101      	bne.n	80083da <HAL_SAI_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 80083d6:	2301      	movs	r3, #1
 80083d8:	e079      	b.n	80084ce <HAL_SAI_Receive_DMA+0x112>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 80083e0:	b2db      	uxtb	r3, r3
 80083e2:	2b01      	cmp	r3, #1
 80083e4:	d172      	bne.n	80084cc <HAL_SAI_Receive_DMA+0x110>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 80083ec:	2b01      	cmp	r3, #1
 80083ee:	d101      	bne.n	80083f4 <HAL_SAI_Receive_DMA+0x38>
 80083f0:	2302      	movs	r3, #2
 80083f2:	e06c      	b.n	80084ce <HAL_SAI_Receive_DMA+0x112>
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	2201      	movs	r2, #1
 80083f8:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    hsai->pBuffPtr = pData;
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	68ba      	ldr	r2, [r7, #8]
 8008400:	679a      	str	r2, [r3, #120]	; 0x78
    hsai->XferSize = Size;
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	88fa      	ldrh	r2, [r7, #6]
 8008406:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
    hsai->XferCount = Size;
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	88fa      	ldrh	r2, [r7, #6]
 800840e:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	2200      	movs	r2, #0
 8008416:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	2222      	movs	r2, #34	; 0x22
 800841e:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

    /* Set the SAI Rx DMA Half transfer complete callback */
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008428:	4a2b      	ldr	r2, [pc, #172]	; (80084d8 <HAL_SAI_Receive_DMA+0x11c>)
 800842a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the SAI Rx DMA transfer complete callback */
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008432:	4a2a      	ldr	r2, [pc, #168]	; (80084dc <HAL_SAI_Receive_DMA+0x120>)
 8008434:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800843c:	4a28      	ldr	r2, [pc, #160]	; (80084e0 <HAL_SAI_Receive_DMA+0x124>)
 800843e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Rx abort callback */
    hsai->hdmarx->XferAbortCallback = NULL;
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008446:	2200      	movs	r2, #0
 8008448:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the Rx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	331c      	adds	r3, #28
 8008456:	4619      	mov	r1, r3
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800845c:	461a      	mov	r2, r3
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 8008464:	f7f9 fec6 	bl	80021f4 <HAL_DMA_Start_IT>
 8008468:	4603      	mov	r3, r0
 800846a:	2b00      	cmp	r3, #0
 800846c:	d005      	beq.n	800847a <HAL_SAI_Receive_DMA+0xbe>
    {
      __HAL_UNLOCK(hsai);
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	2200      	movs	r2, #0
 8008472:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      return  HAL_ERROR;
 8008476:	2301      	movs	r3, #1
 8008478:	e029      	b.n	80084ce <HAL_SAI_Receive_DMA+0x112>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800847a:	2100      	movs	r1, #0
 800847c:	68f8      	ldr	r0, [r7, #12]
 800847e:	f000 f83b 	bl	80084f8 <SAI_InterruptFlag>
 8008482:	4601      	mov	r1, r0
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	691a      	ldr	r2, [r3, #16]
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	430a      	orrs	r2, r1
 8008490:	611a      	str	r2, [r3, #16]

    /* Enable SAI Rx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	681a      	ldr	r2, [r3, #0]
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80084a0:	601a      	str	r2, [r3, #0]

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d107      	bne.n	80084c0 <HAL_SAI_Receive_DMA+0x104>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	681a      	ldr	r2, [r3, #0]
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80084be:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	2200      	movs	r2, #0
 80084c4:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    return HAL_OK;
 80084c8:	2300      	movs	r3, #0
 80084ca:	e000      	b.n	80084ce <HAL_SAI_Receive_DMA+0x112>
  }
  else
  {
    return HAL_BUSY;
 80084cc:	2302      	movs	r3, #2
  }
}
 80084ce:	4618      	mov	r0, r3
 80084d0:	3710      	adds	r7, #16
 80084d2:	46bd      	mov	sp, r7
 80084d4:	bd80      	pop	{r7, pc}
 80084d6:	bf00      	nop
 80084d8:	0800863d 	.word	0x0800863d
 80084dc:	080085dd 	.word	0x080085dd
 80084e0:	08008659 	.word	0x08008659

080084e4 <HAL_SAI_ErrorCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 80084e4:	b480      	push	{r7}
 80084e6:	b083      	sub	sp, #12
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_ErrorCallback could be implemented in the user file
   */
}
 80084ec:	bf00      	nop
 80084ee:	370c      	adds	r7, #12
 80084f0:	46bd      	mov	sp, r7
 80084f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f6:	4770      	bx	lr

080084f8 <SAI_InterruptFlag>:
  *              the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
  */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, SAI_ModeTypedef mode)
{
 80084f8:	b480      	push	{r7}
 80084fa:	b085      	sub	sp, #20
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	6078      	str	r0, [r7, #4]
 8008500:	460b      	mov	r3, r1
 8008502:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 8008504:	2301      	movs	r3, #1
 8008506:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 8008508:	78fb      	ldrb	r3, [r7, #3]
 800850a:	2b01      	cmp	r3, #1
 800850c:	d103      	bne.n	8008516 <SAI_InterruptFlag+0x1e>
  {
    tmpIT |= SAI_IT_FREQ;
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	f043 0308 	orr.w	r3, r3, #8
 8008514:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800851a:	2b08      	cmp	r3, #8
 800851c:	d10b      	bne.n	8008536 <SAI_InterruptFlag+0x3e>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8008522:	2b03      	cmp	r3, #3
 8008524:	d003      	beq.n	800852e <SAI_InterruptFlag+0x36>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	685b      	ldr	r3, [r3, #4]
 800852a:	2b01      	cmp	r3, #1
 800852c:	d103      	bne.n	8008536 <SAI_InterruptFlag+0x3e>
  {
    tmpIT |= SAI_IT_CNRDY;
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	f043 0310 	orr.w	r3, r3, #16
 8008534:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	685b      	ldr	r3, [r3, #4]
 800853a:	2b03      	cmp	r3, #3
 800853c:	d003      	beq.n	8008546 <SAI_InterruptFlag+0x4e>
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	685b      	ldr	r3, [r3, #4]
 8008542:	2b02      	cmp	r3, #2
 8008544:	d104      	bne.n	8008550 <SAI_InterruptFlag+0x58>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800854c:	60fb      	str	r3, [r7, #12]
 800854e:	e003      	b.n	8008558 <SAI_InterruptFlag+0x60>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	f043 0304 	orr.w	r3, r3, #4
 8008556:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 8008558:	68fb      	ldr	r3, [r7, #12]
}
 800855a:	4618      	mov	r0, r3
 800855c:	3714      	adds	r7, #20
 800855e:	46bd      	mov	sp, r7
 8008560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008564:	4770      	bx	lr
	...

08008568 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8008568:	b480      	push	{r7}
 800856a:	b085      	sub	sp, #20
 800856c:	af00      	add	r7, sp, #0
 800856e:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8008570:	4b18      	ldr	r3, [pc, #96]	; (80085d4 <SAI_Disable+0x6c>)
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	4a18      	ldr	r2, [pc, #96]	; (80085d8 <SAI_Disable+0x70>)
 8008576:	fba2 2303 	umull	r2, r3, r2, r3
 800857a:	0b1b      	lsrs	r3, r3, #12
 800857c:	009b      	lsls	r3, r3, #2
 800857e:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8008580:	2300      	movs	r3, #0
 8008582:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	681a      	ldr	r2, [r3, #0]
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8008592:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	2b00      	cmp	r3, #0
 8008598:	d10a      	bne.n	80085b0 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80085a0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      status = HAL_TIMEOUT;
 80085aa:	2303      	movs	r3, #3
 80085ac:	72fb      	strb	r3, [r7, #11]
      break;
 80085ae:	e009      	b.n	80085c4 <SAI_Disable+0x5c>
    }
    count--;
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	3b01      	subs	r3, #1
 80085b4:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d1e7      	bne.n	8008594 <SAI_Disable+0x2c>

  return status;
 80085c4:	7afb      	ldrb	r3, [r7, #11]
}
 80085c6:	4618      	mov	r0, r3
 80085c8:	3714      	adds	r7, #20
 80085ca:	46bd      	mov	sp, r7
 80085cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d0:	4770      	bx	lr
 80085d2:	bf00      	nop
 80085d4:	24000400 	.word	0x24000400
 80085d8:	95cbec1b 	.word	0x95cbec1b

080085dc <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 80085dc:	b580      	push	{r7, lr}
 80085de:	b084      	sub	sp, #16
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085e8:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	69db      	ldr	r3, [r3, #28]
 80085ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80085f2:	d01c      	beq.n	800862e <SAI_DMARxCplt+0x52>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	681a      	ldr	r2, [r3, #0]
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8008602:	601a      	str	r2, [r3, #0]
    hsai->XferCount = 0;
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	2200      	movs	r2, #0
 8008608:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800860c:	2100      	movs	r1, #0
 800860e:	68f8      	ldr	r0, [r7, #12]
 8008610:	f7ff ff72 	bl	80084f8 <SAI_InterruptFlag>
 8008614:	4603      	mov	r3, r0
 8008616:	43d9      	mvns	r1, r3
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	691a      	ldr	r2, [r3, #16]
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	400a      	ands	r2, r1
 8008624:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	2201      	movs	r2, #1
 800862a:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 800862e:	68f8      	ldr	r0, [r7, #12]
 8008630:	f7f8 fd54 	bl	80010dc <HAL_SAI_RxCpltCallback>
#endif
}
 8008634:	bf00      	nop
 8008636:	3710      	adds	r7, #16
 8008638:	46bd      	mov	sp, r7
 800863a:	bd80      	pop	{r7, pc}

0800863c <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800863c:	b580      	push	{r7, lr}
 800863e:	b084      	sub	sp, #16
 8008640:	af00      	add	r7, sp, #0
 8008642:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008648:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 800864a:	68f8      	ldr	r0, [r7, #12]
 800864c:	f7f8 fd36 	bl	80010bc <HAL_SAI_RxHalfCpltCallback>
#endif
}
 8008650:	bf00      	nop
 8008652:	3710      	adds	r7, #16
 8008654:	46bd      	mov	sp, r7
 8008656:	bd80      	pop	{r7, pc}

08008658 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 8008658:	b580      	push	{r7, lr}
 800865a:	b084      	sub	sp, #16
 800865c:	af00      	add	r7, sp, #0
 800865e:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008664:	60fb      	str	r3, [r7, #12]

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8008666:	6878      	ldr	r0, [r7, #4]
 8008668:	f7fb fcba 	bl	8003fe0 <HAL_DMA_GetError>
 800866c:	4603      	mov	r3, r0
 800866e:	2b02      	cmp	r3, #2
 8008670:	d01d      	beq.n	80086ae <SAI_DMAError+0x56>
  {
    /* Set SAI error code */
    hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008678:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	681a      	ldr	r2, [r3, #0]
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8008690:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral */
    /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
    (void) SAI_Disable(hsai);
 8008692:	68f8      	ldr	r0, [r7, #12]
 8008694:	f7ff ff68 	bl	8008568 <SAI_Disable>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	2201      	movs	r2, #1
 800869c:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	2200      	movs	r2, #0
 80086a4:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

    /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
    hsai->ErrorCallback(hsai);
#else
    HAL_SAI_ErrorCallback(hsai);
 80086a8:	68f8      	ldr	r0, [r7, #12]
 80086aa:	f7ff ff1b 	bl	80084e4 <HAL_SAI_ErrorCallback>
#endif
  }
}
 80086ae:	bf00      	nop
 80086b0:	3710      	adds	r7, #16
 80086b2:	46bd      	mov	sp, r7
 80086b4:	bd80      	pop	{r7, pc}

080086b6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80086b6:	b580      	push	{r7, lr}
 80086b8:	b082      	sub	sp, #8
 80086ba:	af00      	add	r7, sp, #0
 80086bc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d101      	bne.n	80086c8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80086c4:	2301      	movs	r3, #1
 80086c6:	e049      	b.n	800875c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80086ce:	b2db      	uxtb	r3, r3
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d106      	bne.n	80086e2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	2200      	movs	r2, #0
 80086d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80086dc:	6878      	ldr	r0, [r7, #4]
 80086de:	f7f8 fd65 	bl	80011ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	2202      	movs	r2, #2
 80086e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	681a      	ldr	r2, [r3, #0]
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	3304      	adds	r3, #4
 80086f2:	4619      	mov	r1, r3
 80086f4:	4610      	mov	r0, r2
 80086f6:	f000 fb0f 	bl	8008d18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	2201      	movs	r2, #1
 80086fe:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	2201      	movs	r2, #1
 8008706:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	2201      	movs	r2, #1
 800870e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	2201      	movs	r2, #1
 8008716:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	2201      	movs	r2, #1
 800871e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	2201      	movs	r2, #1
 8008726:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	2201      	movs	r2, #1
 800872e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	2201      	movs	r2, #1
 8008736:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	2201      	movs	r2, #1
 800873e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	2201      	movs	r2, #1
 8008746:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	2201      	movs	r2, #1
 800874e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	2201      	movs	r2, #1
 8008756:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800875a:	2300      	movs	r3, #0
}
 800875c:	4618      	mov	r0, r3
 800875e:	3708      	adds	r7, #8
 8008760:	46bd      	mov	sp, r7
 8008762:	bd80      	pop	{r7, pc}

08008764 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008764:	b480      	push	{r7}
 8008766:	b085      	sub	sp, #20
 8008768:	af00      	add	r7, sp, #0
 800876a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008772:	b2db      	uxtb	r3, r3
 8008774:	2b01      	cmp	r3, #1
 8008776:	d001      	beq.n	800877c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008778:	2301      	movs	r3, #1
 800877a:	e04f      	b.n	800881c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	2202      	movs	r2, #2
 8008780:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	68da      	ldr	r2, [r3, #12]
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	f042 0201 	orr.w	r2, r2, #1
 8008792:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	4a23      	ldr	r2, [pc, #140]	; (8008828 <HAL_TIM_Base_Start_IT+0xc4>)
 800879a:	4293      	cmp	r3, r2
 800879c:	d01d      	beq.n	80087da <HAL_TIM_Base_Start_IT+0x76>
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80087a6:	d018      	beq.n	80087da <HAL_TIM_Base_Start_IT+0x76>
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	4a1f      	ldr	r2, [pc, #124]	; (800882c <HAL_TIM_Base_Start_IT+0xc8>)
 80087ae:	4293      	cmp	r3, r2
 80087b0:	d013      	beq.n	80087da <HAL_TIM_Base_Start_IT+0x76>
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	4a1e      	ldr	r2, [pc, #120]	; (8008830 <HAL_TIM_Base_Start_IT+0xcc>)
 80087b8:	4293      	cmp	r3, r2
 80087ba:	d00e      	beq.n	80087da <HAL_TIM_Base_Start_IT+0x76>
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	4a1c      	ldr	r2, [pc, #112]	; (8008834 <HAL_TIM_Base_Start_IT+0xd0>)
 80087c2:	4293      	cmp	r3, r2
 80087c4:	d009      	beq.n	80087da <HAL_TIM_Base_Start_IT+0x76>
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	4a1b      	ldr	r2, [pc, #108]	; (8008838 <HAL_TIM_Base_Start_IT+0xd4>)
 80087cc:	4293      	cmp	r3, r2
 80087ce:	d004      	beq.n	80087da <HAL_TIM_Base_Start_IT+0x76>
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	4a19      	ldr	r2, [pc, #100]	; (800883c <HAL_TIM_Base_Start_IT+0xd8>)
 80087d6:	4293      	cmp	r3, r2
 80087d8:	d115      	bne.n	8008806 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	689a      	ldr	r2, [r3, #8]
 80087e0:	4b17      	ldr	r3, [pc, #92]	; (8008840 <HAL_TIM_Base_Start_IT+0xdc>)
 80087e2:	4013      	ands	r3, r2
 80087e4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	2b06      	cmp	r3, #6
 80087ea:	d015      	beq.n	8008818 <HAL_TIM_Base_Start_IT+0xb4>
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80087f2:	d011      	beq.n	8008818 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	681a      	ldr	r2, [r3, #0]
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	f042 0201 	orr.w	r2, r2, #1
 8008802:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008804:	e008      	b.n	8008818 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	681a      	ldr	r2, [r3, #0]
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	f042 0201 	orr.w	r2, r2, #1
 8008814:	601a      	str	r2, [r3, #0]
 8008816:	e000      	b.n	800881a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008818:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800881a:	2300      	movs	r3, #0
}
 800881c:	4618      	mov	r0, r3
 800881e:	3714      	adds	r7, #20
 8008820:	46bd      	mov	sp, r7
 8008822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008826:	4770      	bx	lr
 8008828:	40010000 	.word	0x40010000
 800882c:	40000400 	.word	0x40000400
 8008830:	40000800 	.word	0x40000800
 8008834:	40000c00 	.word	0x40000c00
 8008838:	40010400 	.word	0x40010400
 800883c:	40001800 	.word	0x40001800
 8008840:	00010007 	.word	0x00010007

08008844 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8008844:	b480      	push	{r7}
 8008846:	b083      	sub	sp, #12
 8008848:	af00      	add	r7, sp, #0
 800884a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	68da      	ldr	r2, [r3, #12]
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	f022 0201 	bic.w	r2, r2, #1
 800885a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	6a1a      	ldr	r2, [r3, #32]
 8008862:	f241 1311 	movw	r3, #4369	; 0x1111
 8008866:	4013      	ands	r3, r2
 8008868:	2b00      	cmp	r3, #0
 800886a:	d10f      	bne.n	800888c <HAL_TIM_Base_Stop_IT+0x48>
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	6a1a      	ldr	r2, [r3, #32]
 8008872:	f240 4344 	movw	r3, #1092	; 0x444
 8008876:	4013      	ands	r3, r2
 8008878:	2b00      	cmp	r3, #0
 800887a:	d107      	bne.n	800888c <HAL_TIM_Base_Stop_IT+0x48>
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	681a      	ldr	r2, [r3, #0]
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	f022 0201 	bic.w	r2, r2, #1
 800888a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	2201      	movs	r2, #1
 8008890:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8008894:	2300      	movs	r3, #0
}
 8008896:	4618      	mov	r0, r3
 8008898:	370c      	adds	r7, #12
 800889a:	46bd      	mov	sp, r7
 800889c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a0:	4770      	bx	lr

080088a2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80088a2:	b580      	push	{r7, lr}
 80088a4:	b082      	sub	sp, #8
 80088a6:	af00      	add	r7, sp, #0
 80088a8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	691b      	ldr	r3, [r3, #16]
 80088b0:	f003 0302 	and.w	r3, r3, #2
 80088b4:	2b02      	cmp	r3, #2
 80088b6:	d122      	bne.n	80088fe <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	68db      	ldr	r3, [r3, #12]
 80088be:	f003 0302 	and.w	r3, r3, #2
 80088c2:	2b02      	cmp	r3, #2
 80088c4:	d11b      	bne.n	80088fe <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	f06f 0202 	mvn.w	r2, #2
 80088ce:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	2201      	movs	r2, #1
 80088d4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	699b      	ldr	r3, [r3, #24]
 80088dc:	f003 0303 	and.w	r3, r3, #3
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d003      	beq.n	80088ec <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80088e4:	6878      	ldr	r0, [r7, #4]
 80088e6:	f000 f9f9 	bl	8008cdc <HAL_TIM_IC_CaptureCallback>
 80088ea:	e005      	b.n	80088f8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80088ec:	6878      	ldr	r0, [r7, #4]
 80088ee:	f000 f9eb 	bl	8008cc8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80088f2:	6878      	ldr	r0, [r7, #4]
 80088f4:	f000 f9fc 	bl	8008cf0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	2200      	movs	r2, #0
 80088fc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	691b      	ldr	r3, [r3, #16]
 8008904:	f003 0304 	and.w	r3, r3, #4
 8008908:	2b04      	cmp	r3, #4
 800890a:	d122      	bne.n	8008952 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	68db      	ldr	r3, [r3, #12]
 8008912:	f003 0304 	and.w	r3, r3, #4
 8008916:	2b04      	cmp	r3, #4
 8008918:	d11b      	bne.n	8008952 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	f06f 0204 	mvn.w	r2, #4
 8008922:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	2202      	movs	r2, #2
 8008928:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	699b      	ldr	r3, [r3, #24]
 8008930:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008934:	2b00      	cmp	r3, #0
 8008936:	d003      	beq.n	8008940 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008938:	6878      	ldr	r0, [r7, #4]
 800893a:	f000 f9cf 	bl	8008cdc <HAL_TIM_IC_CaptureCallback>
 800893e:	e005      	b.n	800894c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008940:	6878      	ldr	r0, [r7, #4]
 8008942:	f000 f9c1 	bl	8008cc8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008946:	6878      	ldr	r0, [r7, #4]
 8008948:	f000 f9d2 	bl	8008cf0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	2200      	movs	r2, #0
 8008950:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	691b      	ldr	r3, [r3, #16]
 8008958:	f003 0308 	and.w	r3, r3, #8
 800895c:	2b08      	cmp	r3, #8
 800895e:	d122      	bne.n	80089a6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	68db      	ldr	r3, [r3, #12]
 8008966:	f003 0308 	and.w	r3, r3, #8
 800896a:	2b08      	cmp	r3, #8
 800896c:	d11b      	bne.n	80089a6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	f06f 0208 	mvn.w	r2, #8
 8008976:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	2204      	movs	r2, #4
 800897c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	69db      	ldr	r3, [r3, #28]
 8008984:	f003 0303 	and.w	r3, r3, #3
 8008988:	2b00      	cmp	r3, #0
 800898a:	d003      	beq.n	8008994 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800898c:	6878      	ldr	r0, [r7, #4]
 800898e:	f000 f9a5 	bl	8008cdc <HAL_TIM_IC_CaptureCallback>
 8008992:	e005      	b.n	80089a0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008994:	6878      	ldr	r0, [r7, #4]
 8008996:	f000 f997 	bl	8008cc8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800899a:	6878      	ldr	r0, [r7, #4]
 800899c:	f000 f9a8 	bl	8008cf0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	2200      	movs	r2, #0
 80089a4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	691b      	ldr	r3, [r3, #16]
 80089ac:	f003 0310 	and.w	r3, r3, #16
 80089b0:	2b10      	cmp	r3, #16
 80089b2:	d122      	bne.n	80089fa <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	68db      	ldr	r3, [r3, #12]
 80089ba:	f003 0310 	and.w	r3, r3, #16
 80089be:	2b10      	cmp	r3, #16
 80089c0:	d11b      	bne.n	80089fa <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	f06f 0210 	mvn.w	r2, #16
 80089ca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	2208      	movs	r2, #8
 80089d0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	69db      	ldr	r3, [r3, #28]
 80089d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d003      	beq.n	80089e8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80089e0:	6878      	ldr	r0, [r7, #4]
 80089e2:	f000 f97b 	bl	8008cdc <HAL_TIM_IC_CaptureCallback>
 80089e6:	e005      	b.n	80089f4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80089e8:	6878      	ldr	r0, [r7, #4]
 80089ea:	f000 f96d 	bl	8008cc8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80089ee:	6878      	ldr	r0, [r7, #4]
 80089f0:	f000 f97e 	bl	8008cf0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	2200      	movs	r2, #0
 80089f8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	691b      	ldr	r3, [r3, #16]
 8008a00:	f003 0301 	and.w	r3, r3, #1
 8008a04:	2b01      	cmp	r3, #1
 8008a06:	d10e      	bne.n	8008a26 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	68db      	ldr	r3, [r3, #12]
 8008a0e:	f003 0301 	and.w	r3, r3, #1
 8008a12:	2b01      	cmp	r3, #1
 8008a14:	d107      	bne.n	8008a26 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	f06f 0201 	mvn.w	r2, #1
 8008a1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008a20:	6878      	ldr	r0, [r7, #4]
 8008a22:	f7f8 fb6b 	bl	80010fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	691b      	ldr	r3, [r3, #16]
 8008a2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a30:	2b80      	cmp	r3, #128	; 0x80
 8008a32:	d10e      	bne.n	8008a52 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	68db      	ldr	r3, [r3, #12]
 8008a3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a3e:	2b80      	cmp	r3, #128	; 0x80
 8008a40:	d107      	bne.n	8008a52 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008a4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008a4c:	6878      	ldr	r0, [r7, #4]
 8008a4e:	f000 fb2d 	bl	80090ac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	691b      	ldr	r3, [r3, #16]
 8008a58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008a60:	d10e      	bne.n	8008a80 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	68db      	ldr	r3, [r3, #12]
 8008a68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a6c:	2b80      	cmp	r3, #128	; 0x80
 8008a6e:	d107      	bne.n	8008a80 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008a78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008a7a:	6878      	ldr	r0, [r7, #4]
 8008a7c:	f000 fb20 	bl	80090c0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	691b      	ldr	r3, [r3, #16]
 8008a86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a8a:	2b40      	cmp	r3, #64	; 0x40
 8008a8c:	d10e      	bne.n	8008aac <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	68db      	ldr	r3, [r3, #12]
 8008a94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a98:	2b40      	cmp	r3, #64	; 0x40
 8008a9a:	d107      	bne.n	8008aac <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008aa4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008aa6:	6878      	ldr	r0, [r7, #4]
 8008aa8:	f000 f92c 	bl	8008d04 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	691b      	ldr	r3, [r3, #16]
 8008ab2:	f003 0320 	and.w	r3, r3, #32
 8008ab6:	2b20      	cmp	r3, #32
 8008ab8:	d10e      	bne.n	8008ad8 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	68db      	ldr	r3, [r3, #12]
 8008ac0:	f003 0320 	and.w	r3, r3, #32
 8008ac4:	2b20      	cmp	r3, #32
 8008ac6:	d107      	bne.n	8008ad8 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	f06f 0220 	mvn.w	r2, #32
 8008ad0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008ad2:	6878      	ldr	r0, [r7, #4]
 8008ad4:	f000 fae0 	bl	8009098 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008ad8:	bf00      	nop
 8008ada:	3708      	adds	r7, #8
 8008adc:	46bd      	mov	sp, r7
 8008ade:	bd80      	pop	{r7, pc}

08008ae0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008ae0:	b580      	push	{r7, lr}
 8008ae2:	b084      	sub	sp, #16
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	6078      	str	r0, [r7, #4]
 8008ae8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008af0:	2b01      	cmp	r3, #1
 8008af2:	d101      	bne.n	8008af8 <HAL_TIM_ConfigClockSource+0x18>
 8008af4:	2302      	movs	r3, #2
 8008af6:	e0db      	b.n	8008cb0 <HAL_TIM_ConfigClockSource+0x1d0>
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	2201      	movs	r2, #1
 8008afc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	2202      	movs	r2, #2
 8008b04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	689b      	ldr	r3, [r3, #8]
 8008b0e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008b10:	68fa      	ldr	r2, [r7, #12]
 8008b12:	4b69      	ldr	r3, [pc, #420]	; (8008cb8 <HAL_TIM_ConfigClockSource+0x1d8>)
 8008b14:	4013      	ands	r3, r2
 8008b16:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008b1e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	68fa      	ldr	r2, [r7, #12]
 8008b26:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008b28:	683b      	ldr	r3, [r7, #0]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	4a63      	ldr	r2, [pc, #396]	; (8008cbc <HAL_TIM_ConfigClockSource+0x1dc>)
 8008b2e:	4293      	cmp	r3, r2
 8008b30:	f000 80a9 	beq.w	8008c86 <HAL_TIM_ConfigClockSource+0x1a6>
 8008b34:	4a61      	ldr	r2, [pc, #388]	; (8008cbc <HAL_TIM_ConfigClockSource+0x1dc>)
 8008b36:	4293      	cmp	r3, r2
 8008b38:	f200 80ae 	bhi.w	8008c98 <HAL_TIM_ConfigClockSource+0x1b8>
 8008b3c:	4a60      	ldr	r2, [pc, #384]	; (8008cc0 <HAL_TIM_ConfigClockSource+0x1e0>)
 8008b3e:	4293      	cmp	r3, r2
 8008b40:	f000 80a1 	beq.w	8008c86 <HAL_TIM_ConfigClockSource+0x1a6>
 8008b44:	4a5e      	ldr	r2, [pc, #376]	; (8008cc0 <HAL_TIM_ConfigClockSource+0x1e0>)
 8008b46:	4293      	cmp	r3, r2
 8008b48:	f200 80a6 	bhi.w	8008c98 <HAL_TIM_ConfigClockSource+0x1b8>
 8008b4c:	4a5d      	ldr	r2, [pc, #372]	; (8008cc4 <HAL_TIM_ConfigClockSource+0x1e4>)
 8008b4e:	4293      	cmp	r3, r2
 8008b50:	f000 8099 	beq.w	8008c86 <HAL_TIM_ConfigClockSource+0x1a6>
 8008b54:	4a5b      	ldr	r2, [pc, #364]	; (8008cc4 <HAL_TIM_ConfigClockSource+0x1e4>)
 8008b56:	4293      	cmp	r3, r2
 8008b58:	f200 809e 	bhi.w	8008c98 <HAL_TIM_ConfigClockSource+0x1b8>
 8008b5c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8008b60:	f000 8091 	beq.w	8008c86 <HAL_TIM_ConfigClockSource+0x1a6>
 8008b64:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8008b68:	f200 8096 	bhi.w	8008c98 <HAL_TIM_ConfigClockSource+0x1b8>
 8008b6c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008b70:	f000 8089 	beq.w	8008c86 <HAL_TIM_ConfigClockSource+0x1a6>
 8008b74:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008b78:	f200 808e 	bhi.w	8008c98 <HAL_TIM_ConfigClockSource+0x1b8>
 8008b7c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008b80:	d03e      	beq.n	8008c00 <HAL_TIM_ConfigClockSource+0x120>
 8008b82:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008b86:	f200 8087 	bhi.w	8008c98 <HAL_TIM_ConfigClockSource+0x1b8>
 8008b8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b8e:	f000 8085 	beq.w	8008c9c <HAL_TIM_ConfigClockSource+0x1bc>
 8008b92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b96:	d87f      	bhi.n	8008c98 <HAL_TIM_ConfigClockSource+0x1b8>
 8008b98:	2b70      	cmp	r3, #112	; 0x70
 8008b9a:	d01a      	beq.n	8008bd2 <HAL_TIM_ConfigClockSource+0xf2>
 8008b9c:	2b70      	cmp	r3, #112	; 0x70
 8008b9e:	d87b      	bhi.n	8008c98 <HAL_TIM_ConfigClockSource+0x1b8>
 8008ba0:	2b60      	cmp	r3, #96	; 0x60
 8008ba2:	d050      	beq.n	8008c46 <HAL_TIM_ConfigClockSource+0x166>
 8008ba4:	2b60      	cmp	r3, #96	; 0x60
 8008ba6:	d877      	bhi.n	8008c98 <HAL_TIM_ConfigClockSource+0x1b8>
 8008ba8:	2b50      	cmp	r3, #80	; 0x50
 8008baa:	d03c      	beq.n	8008c26 <HAL_TIM_ConfigClockSource+0x146>
 8008bac:	2b50      	cmp	r3, #80	; 0x50
 8008bae:	d873      	bhi.n	8008c98 <HAL_TIM_ConfigClockSource+0x1b8>
 8008bb0:	2b40      	cmp	r3, #64	; 0x40
 8008bb2:	d058      	beq.n	8008c66 <HAL_TIM_ConfigClockSource+0x186>
 8008bb4:	2b40      	cmp	r3, #64	; 0x40
 8008bb6:	d86f      	bhi.n	8008c98 <HAL_TIM_ConfigClockSource+0x1b8>
 8008bb8:	2b30      	cmp	r3, #48	; 0x30
 8008bba:	d064      	beq.n	8008c86 <HAL_TIM_ConfigClockSource+0x1a6>
 8008bbc:	2b30      	cmp	r3, #48	; 0x30
 8008bbe:	d86b      	bhi.n	8008c98 <HAL_TIM_ConfigClockSource+0x1b8>
 8008bc0:	2b20      	cmp	r3, #32
 8008bc2:	d060      	beq.n	8008c86 <HAL_TIM_ConfigClockSource+0x1a6>
 8008bc4:	2b20      	cmp	r3, #32
 8008bc6:	d867      	bhi.n	8008c98 <HAL_TIM_ConfigClockSource+0x1b8>
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d05c      	beq.n	8008c86 <HAL_TIM_ConfigClockSource+0x1a6>
 8008bcc:	2b10      	cmp	r3, #16
 8008bce:	d05a      	beq.n	8008c86 <HAL_TIM_ConfigClockSource+0x1a6>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8008bd0:	e062      	b.n	8008c98 <HAL_TIM_ConfigClockSource+0x1b8>
      TIM_ETR_SetConfig(htim->Instance,
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	6818      	ldr	r0, [r3, #0]
 8008bd6:	683b      	ldr	r3, [r7, #0]
 8008bd8:	6899      	ldr	r1, [r3, #8]
 8008bda:	683b      	ldr	r3, [r7, #0]
 8008bdc:	685a      	ldr	r2, [r3, #4]
 8008bde:	683b      	ldr	r3, [r7, #0]
 8008be0:	68db      	ldr	r3, [r3, #12]
 8008be2:	f000 f9b1 	bl	8008f48 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	689b      	ldr	r3, [r3, #8]
 8008bec:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008bf4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	68fa      	ldr	r2, [r7, #12]
 8008bfc:	609a      	str	r2, [r3, #8]
      break;
 8008bfe:	e04e      	b.n	8008c9e <HAL_TIM_ConfigClockSource+0x1be>
      TIM_ETR_SetConfig(htim->Instance,
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	6818      	ldr	r0, [r3, #0]
 8008c04:	683b      	ldr	r3, [r7, #0]
 8008c06:	6899      	ldr	r1, [r3, #8]
 8008c08:	683b      	ldr	r3, [r7, #0]
 8008c0a:	685a      	ldr	r2, [r3, #4]
 8008c0c:	683b      	ldr	r3, [r7, #0]
 8008c0e:	68db      	ldr	r3, [r3, #12]
 8008c10:	f000 f99a 	bl	8008f48 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	689a      	ldr	r2, [r3, #8]
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008c22:	609a      	str	r2, [r3, #8]
      break;
 8008c24:	e03b      	b.n	8008c9e <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	6818      	ldr	r0, [r3, #0]
 8008c2a:	683b      	ldr	r3, [r7, #0]
 8008c2c:	6859      	ldr	r1, [r3, #4]
 8008c2e:	683b      	ldr	r3, [r7, #0]
 8008c30:	68db      	ldr	r3, [r3, #12]
 8008c32:	461a      	mov	r2, r3
 8008c34:	f000 f90a 	bl	8008e4c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	2150      	movs	r1, #80	; 0x50
 8008c3e:	4618      	mov	r0, r3
 8008c40:	f000 f964 	bl	8008f0c <TIM_ITRx_SetConfig>
      break;
 8008c44:	e02b      	b.n	8008c9e <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	6818      	ldr	r0, [r3, #0]
 8008c4a:	683b      	ldr	r3, [r7, #0]
 8008c4c:	6859      	ldr	r1, [r3, #4]
 8008c4e:	683b      	ldr	r3, [r7, #0]
 8008c50:	68db      	ldr	r3, [r3, #12]
 8008c52:	461a      	mov	r2, r3
 8008c54:	f000 f929 	bl	8008eaa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	2160      	movs	r1, #96	; 0x60
 8008c5e:	4618      	mov	r0, r3
 8008c60:	f000 f954 	bl	8008f0c <TIM_ITRx_SetConfig>
      break;
 8008c64:	e01b      	b.n	8008c9e <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	6818      	ldr	r0, [r3, #0]
 8008c6a:	683b      	ldr	r3, [r7, #0]
 8008c6c:	6859      	ldr	r1, [r3, #4]
 8008c6e:	683b      	ldr	r3, [r7, #0]
 8008c70:	68db      	ldr	r3, [r3, #12]
 8008c72:	461a      	mov	r2, r3
 8008c74:	f000 f8ea 	bl	8008e4c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	2140      	movs	r1, #64	; 0x40
 8008c7e:	4618      	mov	r0, r3
 8008c80:	f000 f944 	bl	8008f0c <TIM_ITRx_SetConfig>
      break;
 8008c84:	e00b      	b.n	8008c9e <HAL_TIM_ConfigClockSource+0x1be>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	681a      	ldr	r2, [r3, #0]
 8008c8a:	683b      	ldr	r3, [r7, #0]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	4619      	mov	r1, r3
 8008c90:	4610      	mov	r0, r2
 8008c92:	f000 f93b 	bl	8008f0c <TIM_ITRx_SetConfig>
        break;
 8008c96:	e002      	b.n	8008c9e <HAL_TIM_ConfigClockSource+0x1be>
      break;
 8008c98:	bf00      	nop
 8008c9a:	e000      	b.n	8008c9e <HAL_TIM_ConfigClockSource+0x1be>
      break;
 8008c9c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	2201      	movs	r2, #1
 8008ca2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	2200      	movs	r2, #0
 8008caa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008cae:	2300      	movs	r3, #0
}
 8008cb0:	4618      	mov	r0, r3
 8008cb2:	3710      	adds	r7, #16
 8008cb4:	46bd      	mov	sp, r7
 8008cb6:	bd80      	pop	{r7, pc}
 8008cb8:	ffceff88 	.word	0xffceff88
 8008cbc:	00100040 	.word	0x00100040
 8008cc0:	00100030 	.word	0x00100030
 8008cc4:	00100020 	.word	0x00100020

08008cc8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008cc8:	b480      	push	{r7}
 8008cca:	b083      	sub	sp, #12
 8008ccc:	af00      	add	r7, sp, #0
 8008cce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008cd0:	bf00      	nop
 8008cd2:	370c      	adds	r7, #12
 8008cd4:	46bd      	mov	sp, r7
 8008cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cda:	4770      	bx	lr

08008cdc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008cdc:	b480      	push	{r7}
 8008cde:	b083      	sub	sp, #12
 8008ce0:	af00      	add	r7, sp, #0
 8008ce2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008ce4:	bf00      	nop
 8008ce6:	370c      	adds	r7, #12
 8008ce8:	46bd      	mov	sp, r7
 8008cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cee:	4770      	bx	lr

08008cf0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008cf0:	b480      	push	{r7}
 8008cf2:	b083      	sub	sp, #12
 8008cf4:	af00      	add	r7, sp, #0
 8008cf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008cf8:	bf00      	nop
 8008cfa:	370c      	adds	r7, #12
 8008cfc:	46bd      	mov	sp, r7
 8008cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d02:	4770      	bx	lr

08008d04 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008d04:	b480      	push	{r7}
 8008d06:	b083      	sub	sp, #12
 8008d08:	af00      	add	r7, sp, #0
 8008d0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008d0c:	bf00      	nop
 8008d0e:	370c      	adds	r7, #12
 8008d10:	46bd      	mov	sp, r7
 8008d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d16:	4770      	bx	lr

08008d18 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008d18:	b480      	push	{r7}
 8008d1a:	b085      	sub	sp, #20
 8008d1c:	af00      	add	r7, sp, #0
 8008d1e:	6078      	str	r0, [r7, #4]
 8008d20:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	4a40      	ldr	r2, [pc, #256]	; (8008e2c <TIM_Base_SetConfig+0x114>)
 8008d2c:	4293      	cmp	r3, r2
 8008d2e:	d013      	beq.n	8008d58 <TIM_Base_SetConfig+0x40>
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008d36:	d00f      	beq.n	8008d58 <TIM_Base_SetConfig+0x40>
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	4a3d      	ldr	r2, [pc, #244]	; (8008e30 <TIM_Base_SetConfig+0x118>)
 8008d3c:	4293      	cmp	r3, r2
 8008d3e:	d00b      	beq.n	8008d58 <TIM_Base_SetConfig+0x40>
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	4a3c      	ldr	r2, [pc, #240]	; (8008e34 <TIM_Base_SetConfig+0x11c>)
 8008d44:	4293      	cmp	r3, r2
 8008d46:	d007      	beq.n	8008d58 <TIM_Base_SetConfig+0x40>
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	4a3b      	ldr	r2, [pc, #236]	; (8008e38 <TIM_Base_SetConfig+0x120>)
 8008d4c:	4293      	cmp	r3, r2
 8008d4e:	d003      	beq.n	8008d58 <TIM_Base_SetConfig+0x40>
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	4a3a      	ldr	r2, [pc, #232]	; (8008e3c <TIM_Base_SetConfig+0x124>)
 8008d54:	4293      	cmp	r3, r2
 8008d56:	d108      	bne.n	8008d6a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d5e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008d60:	683b      	ldr	r3, [r7, #0]
 8008d62:	685b      	ldr	r3, [r3, #4]
 8008d64:	68fa      	ldr	r2, [r7, #12]
 8008d66:	4313      	orrs	r3, r2
 8008d68:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	4a2f      	ldr	r2, [pc, #188]	; (8008e2c <TIM_Base_SetConfig+0x114>)
 8008d6e:	4293      	cmp	r3, r2
 8008d70:	d01f      	beq.n	8008db2 <TIM_Base_SetConfig+0x9a>
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008d78:	d01b      	beq.n	8008db2 <TIM_Base_SetConfig+0x9a>
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	4a2c      	ldr	r2, [pc, #176]	; (8008e30 <TIM_Base_SetConfig+0x118>)
 8008d7e:	4293      	cmp	r3, r2
 8008d80:	d017      	beq.n	8008db2 <TIM_Base_SetConfig+0x9a>
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	4a2b      	ldr	r2, [pc, #172]	; (8008e34 <TIM_Base_SetConfig+0x11c>)
 8008d86:	4293      	cmp	r3, r2
 8008d88:	d013      	beq.n	8008db2 <TIM_Base_SetConfig+0x9a>
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	4a2a      	ldr	r2, [pc, #168]	; (8008e38 <TIM_Base_SetConfig+0x120>)
 8008d8e:	4293      	cmp	r3, r2
 8008d90:	d00f      	beq.n	8008db2 <TIM_Base_SetConfig+0x9a>
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	4a29      	ldr	r2, [pc, #164]	; (8008e3c <TIM_Base_SetConfig+0x124>)
 8008d96:	4293      	cmp	r3, r2
 8008d98:	d00b      	beq.n	8008db2 <TIM_Base_SetConfig+0x9a>
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	4a28      	ldr	r2, [pc, #160]	; (8008e40 <TIM_Base_SetConfig+0x128>)
 8008d9e:	4293      	cmp	r3, r2
 8008da0:	d007      	beq.n	8008db2 <TIM_Base_SetConfig+0x9a>
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	4a27      	ldr	r2, [pc, #156]	; (8008e44 <TIM_Base_SetConfig+0x12c>)
 8008da6:	4293      	cmp	r3, r2
 8008da8:	d003      	beq.n	8008db2 <TIM_Base_SetConfig+0x9a>
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	4a26      	ldr	r2, [pc, #152]	; (8008e48 <TIM_Base_SetConfig+0x130>)
 8008dae:	4293      	cmp	r3, r2
 8008db0:	d108      	bne.n	8008dc4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008db8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008dba:	683b      	ldr	r3, [r7, #0]
 8008dbc:	68db      	ldr	r3, [r3, #12]
 8008dbe:	68fa      	ldr	r2, [r7, #12]
 8008dc0:	4313      	orrs	r3, r2
 8008dc2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008dca:	683b      	ldr	r3, [r7, #0]
 8008dcc:	695b      	ldr	r3, [r3, #20]
 8008dce:	4313      	orrs	r3, r2
 8008dd0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	68fa      	ldr	r2, [r7, #12]
 8008dd6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008dd8:	683b      	ldr	r3, [r7, #0]
 8008dda:	689a      	ldr	r2, [r3, #8]
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008de0:	683b      	ldr	r3, [r7, #0]
 8008de2:	681a      	ldr	r2, [r3, #0]
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	4a10      	ldr	r2, [pc, #64]	; (8008e2c <TIM_Base_SetConfig+0x114>)
 8008dec:	4293      	cmp	r3, r2
 8008dee:	d00f      	beq.n	8008e10 <TIM_Base_SetConfig+0xf8>
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	4a12      	ldr	r2, [pc, #72]	; (8008e3c <TIM_Base_SetConfig+0x124>)
 8008df4:	4293      	cmp	r3, r2
 8008df6:	d00b      	beq.n	8008e10 <TIM_Base_SetConfig+0xf8>
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	4a11      	ldr	r2, [pc, #68]	; (8008e40 <TIM_Base_SetConfig+0x128>)
 8008dfc:	4293      	cmp	r3, r2
 8008dfe:	d007      	beq.n	8008e10 <TIM_Base_SetConfig+0xf8>
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	4a10      	ldr	r2, [pc, #64]	; (8008e44 <TIM_Base_SetConfig+0x12c>)
 8008e04:	4293      	cmp	r3, r2
 8008e06:	d003      	beq.n	8008e10 <TIM_Base_SetConfig+0xf8>
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	4a0f      	ldr	r2, [pc, #60]	; (8008e48 <TIM_Base_SetConfig+0x130>)
 8008e0c:	4293      	cmp	r3, r2
 8008e0e:	d103      	bne.n	8008e18 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008e10:	683b      	ldr	r3, [r7, #0]
 8008e12:	691a      	ldr	r2, [r3, #16]
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	2201      	movs	r2, #1
 8008e1c:	615a      	str	r2, [r3, #20]
}
 8008e1e:	bf00      	nop
 8008e20:	3714      	adds	r7, #20
 8008e22:	46bd      	mov	sp, r7
 8008e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e28:	4770      	bx	lr
 8008e2a:	bf00      	nop
 8008e2c:	40010000 	.word	0x40010000
 8008e30:	40000400 	.word	0x40000400
 8008e34:	40000800 	.word	0x40000800
 8008e38:	40000c00 	.word	0x40000c00
 8008e3c:	40010400 	.word	0x40010400
 8008e40:	40014000 	.word	0x40014000
 8008e44:	40014400 	.word	0x40014400
 8008e48:	40014800 	.word	0x40014800

08008e4c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008e4c:	b480      	push	{r7}
 8008e4e:	b087      	sub	sp, #28
 8008e50:	af00      	add	r7, sp, #0
 8008e52:	60f8      	str	r0, [r7, #12]
 8008e54:	60b9      	str	r1, [r7, #8]
 8008e56:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	6a1b      	ldr	r3, [r3, #32]
 8008e5c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	6a1b      	ldr	r3, [r3, #32]
 8008e62:	f023 0201 	bic.w	r2, r3, #1
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	699b      	ldr	r3, [r3, #24]
 8008e6e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008e70:	693b      	ldr	r3, [r7, #16]
 8008e72:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008e76:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	011b      	lsls	r3, r3, #4
 8008e7c:	693a      	ldr	r2, [r7, #16]
 8008e7e:	4313      	orrs	r3, r2
 8008e80:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008e82:	697b      	ldr	r3, [r7, #20]
 8008e84:	f023 030a 	bic.w	r3, r3, #10
 8008e88:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008e8a:	697a      	ldr	r2, [r7, #20]
 8008e8c:	68bb      	ldr	r3, [r7, #8]
 8008e8e:	4313      	orrs	r3, r2
 8008e90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	693a      	ldr	r2, [r7, #16]
 8008e96:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	697a      	ldr	r2, [r7, #20]
 8008e9c:	621a      	str	r2, [r3, #32]
}
 8008e9e:	bf00      	nop
 8008ea0:	371c      	adds	r7, #28
 8008ea2:	46bd      	mov	sp, r7
 8008ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea8:	4770      	bx	lr

08008eaa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008eaa:	b480      	push	{r7}
 8008eac:	b087      	sub	sp, #28
 8008eae:	af00      	add	r7, sp, #0
 8008eb0:	60f8      	str	r0, [r7, #12]
 8008eb2:	60b9      	str	r1, [r7, #8]
 8008eb4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	6a1b      	ldr	r3, [r3, #32]
 8008eba:	f023 0210 	bic.w	r2, r3, #16
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	699b      	ldr	r3, [r3, #24]
 8008ec6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	6a1b      	ldr	r3, [r3, #32]
 8008ecc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008ece:	697b      	ldr	r3, [r7, #20]
 8008ed0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008ed4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	031b      	lsls	r3, r3, #12
 8008eda:	697a      	ldr	r2, [r7, #20]
 8008edc:	4313      	orrs	r3, r2
 8008ede:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008ee0:	693b      	ldr	r3, [r7, #16]
 8008ee2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008ee6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008ee8:	68bb      	ldr	r3, [r7, #8]
 8008eea:	011b      	lsls	r3, r3, #4
 8008eec:	693a      	ldr	r2, [r7, #16]
 8008eee:	4313      	orrs	r3, r2
 8008ef0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	697a      	ldr	r2, [r7, #20]
 8008ef6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	693a      	ldr	r2, [r7, #16]
 8008efc:	621a      	str	r2, [r3, #32]
}
 8008efe:	bf00      	nop
 8008f00:	371c      	adds	r7, #28
 8008f02:	46bd      	mov	sp, r7
 8008f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f08:	4770      	bx	lr
	...

08008f0c <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008f0c:	b480      	push	{r7}
 8008f0e:	b085      	sub	sp, #20
 8008f10:	af00      	add	r7, sp, #0
 8008f12:	6078      	str	r0, [r7, #4]
 8008f14:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	689b      	ldr	r3, [r3, #8]
 8008f1a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008f1c:	68fa      	ldr	r2, [r7, #12]
 8008f1e:	4b09      	ldr	r3, [pc, #36]	; (8008f44 <TIM_ITRx_SetConfig+0x38>)
 8008f20:	4013      	ands	r3, r2
 8008f22:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008f24:	683a      	ldr	r2, [r7, #0]
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	4313      	orrs	r3, r2
 8008f2a:	f043 0307 	orr.w	r3, r3, #7
 8008f2e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	68fa      	ldr	r2, [r7, #12]
 8008f34:	609a      	str	r2, [r3, #8]
}
 8008f36:	bf00      	nop
 8008f38:	3714      	adds	r7, #20
 8008f3a:	46bd      	mov	sp, r7
 8008f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f40:	4770      	bx	lr
 8008f42:	bf00      	nop
 8008f44:	ffcfff8f 	.word	0xffcfff8f

08008f48 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008f48:	b480      	push	{r7}
 8008f4a:	b087      	sub	sp, #28
 8008f4c:	af00      	add	r7, sp, #0
 8008f4e:	60f8      	str	r0, [r7, #12]
 8008f50:	60b9      	str	r1, [r7, #8]
 8008f52:	607a      	str	r2, [r7, #4]
 8008f54:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	689b      	ldr	r3, [r3, #8]
 8008f5a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008f5c:	697b      	ldr	r3, [r7, #20]
 8008f5e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008f62:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008f64:	683b      	ldr	r3, [r7, #0]
 8008f66:	021a      	lsls	r2, r3, #8
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	431a      	orrs	r2, r3
 8008f6c:	68bb      	ldr	r3, [r7, #8]
 8008f6e:	4313      	orrs	r3, r2
 8008f70:	697a      	ldr	r2, [r7, #20]
 8008f72:	4313      	orrs	r3, r2
 8008f74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	697a      	ldr	r2, [r7, #20]
 8008f7a:	609a      	str	r2, [r3, #8]
}
 8008f7c:	bf00      	nop
 8008f7e:	371c      	adds	r7, #28
 8008f80:	46bd      	mov	sp, r7
 8008f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f86:	4770      	bx	lr

08008f88 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008f88:	b480      	push	{r7}
 8008f8a:	b085      	sub	sp, #20
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	6078      	str	r0, [r7, #4]
 8008f90:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008f98:	2b01      	cmp	r3, #1
 8008f9a:	d101      	bne.n	8008fa0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008f9c:	2302      	movs	r3, #2
 8008f9e:	e068      	b.n	8009072 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	2201      	movs	r2, #1
 8008fa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	2202      	movs	r2, #2
 8008fac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	685b      	ldr	r3, [r3, #4]
 8008fb6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	689b      	ldr	r3, [r3, #8]
 8008fbe:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	4a2e      	ldr	r2, [pc, #184]	; (8009080 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8008fc6:	4293      	cmp	r3, r2
 8008fc8:	d004      	beq.n	8008fd4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	4a2d      	ldr	r2, [pc, #180]	; (8009084 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008fd0:	4293      	cmp	r3, r2
 8008fd2:	d108      	bne.n	8008fe6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008fda:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008fdc:	683b      	ldr	r3, [r7, #0]
 8008fde:	685b      	ldr	r3, [r3, #4]
 8008fe0:	68fa      	ldr	r2, [r7, #12]
 8008fe2:	4313      	orrs	r3, r2
 8008fe4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008fec:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008fee:	683b      	ldr	r3, [r7, #0]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	68fa      	ldr	r2, [r7, #12]
 8008ff4:	4313      	orrs	r3, r2
 8008ff6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	68fa      	ldr	r2, [r7, #12]
 8008ffe:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	4a1e      	ldr	r2, [pc, #120]	; (8009080 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8009006:	4293      	cmp	r3, r2
 8009008:	d01d      	beq.n	8009046 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009012:	d018      	beq.n	8009046 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	4a1b      	ldr	r2, [pc, #108]	; (8009088 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800901a:	4293      	cmp	r3, r2
 800901c:	d013      	beq.n	8009046 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	4a1a      	ldr	r2, [pc, #104]	; (800908c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009024:	4293      	cmp	r3, r2
 8009026:	d00e      	beq.n	8009046 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	4a18      	ldr	r2, [pc, #96]	; (8009090 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800902e:	4293      	cmp	r3, r2
 8009030:	d009      	beq.n	8009046 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	4a13      	ldr	r2, [pc, #76]	; (8009084 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8009038:	4293      	cmp	r3, r2
 800903a:	d004      	beq.n	8009046 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	4a14      	ldr	r2, [pc, #80]	; (8009094 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8009042:	4293      	cmp	r3, r2
 8009044:	d10c      	bne.n	8009060 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009046:	68bb      	ldr	r3, [r7, #8]
 8009048:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800904c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800904e:	683b      	ldr	r3, [r7, #0]
 8009050:	689b      	ldr	r3, [r3, #8]
 8009052:	68ba      	ldr	r2, [r7, #8]
 8009054:	4313      	orrs	r3, r2
 8009056:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	68ba      	ldr	r2, [r7, #8]
 800905e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	2201      	movs	r2, #1
 8009064:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	2200      	movs	r2, #0
 800906c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009070:	2300      	movs	r3, #0
}
 8009072:	4618      	mov	r0, r3
 8009074:	3714      	adds	r7, #20
 8009076:	46bd      	mov	sp, r7
 8009078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800907c:	4770      	bx	lr
 800907e:	bf00      	nop
 8009080:	40010000 	.word	0x40010000
 8009084:	40010400 	.word	0x40010400
 8009088:	40000400 	.word	0x40000400
 800908c:	40000800 	.word	0x40000800
 8009090:	40000c00 	.word	0x40000c00
 8009094:	40001800 	.word	0x40001800

08009098 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009098:	b480      	push	{r7}
 800909a:	b083      	sub	sp, #12
 800909c:	af00      	add	r7, sp, #0
 800909e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80090a0:	bf00      	nop
 80090a2:	370c      	adds	r7, #12
 80090a4:	46bd      	mov	sp, r7
 80090a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090aa:	4770      	bx	lr

080090ac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80090ac:	b480      	push	{r7}
 80090ae:	b083      	sub	sp, #12
 80090b0:	af00      	add	r7, sp, #0
 80090b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80090b4:	bf00      	nop
 80090b6:	370c      	adds	r7, #12
 80090b8:	46bd      	mov	sp, r7
 80090ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090be:	4770      	bx	lr

080090c0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80090c0:	b480      	push	{r7}
 80090c2:	b083      	sub	sp, #12
 80090c4:	af00      	add	r7, sp, #0
 80090c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80090c8:	bf00      	nop
 80090ca:	370c      	adds	r7, #12
 80090cc:	46bd      	mov	sp, r7
 80090ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d2:	4770      	bx	lr

080090d4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80090d4:	b580      	push	{r7, lr}
 80090d6:	b082      	sub	sp, #8
 80090d8:	af00      	add	r7, sp, #0
 80090da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d101      	bne.n	80090e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80090e2:	2301      	movs	r3, #1
 80090e4:	e042      	b.n	800916c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d106      	bne.n	80090fe <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	2200      	movs	r2, #0
 80090f4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80090f8:	6878      	ldr	r0, [r7, #4]
 80090fa:	f7f8 f87f 	bl	80011fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	2224      	movs	r2, #36	; 0x24
 8009102:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	681a      	ldr	r2, [r3, #0]
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	f022 0201 	bic.w	r2, r2, #1
 8009114:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009116:	6878      	ldr	r0, [r7, #4]
 8009118:	f000 fb90 	bl	800983c <UART_SetConfig>
 800911c:	4603      	mov	r3, r0
 800911e:	2b01      	cmp	r3, #1
 8009120:	d101      	bne.n	8009126 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8009122:	2301      	movs	r3, #1
 8009124:	e022      	b.n	800916c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800912a:	2b00      	cmp	r3, #0
 800912c:	d002      	beq.n	8009134 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800912e:	6878      	ldr	r0, [r7, #4]
 8009130:	f001 f8e4 	bl	800a2fc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	685a      	ldr	r2, [r3, #4]
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009142:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	689a      	ldr	r2, [r3, #8]
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009152:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	681a      	ldr	r2, [r3, #0]
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	f042 0201 	orr.w	r2, r2, #1
 8009162:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009164:	6878      	ldr	r0, [r7, #4]
 8009166:	f001 f96b 	bl	800a440 <UART_CheckIdleState>
 800916a:	4603      	mov	r3, r0
}
 800916c:	4618      	mov	r0, r3
 800916e:	3708      	adds	r7, #8
 8009170:	46bd      	mov	sp, r7
 8009172:	bd80      	pop	{r7, pc}

08009174 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009174:	b580      	push	{r7, lr}
 8009176:	b084      	sub	sp, #16
 8009178:	af00      	add	r7, sp, #0
 800917a:	60f8      	str	r0, [r7, #12]
 800917c:	60b9      	str	r1, [r7, #8]
 800917e:	4613      	mov	r3, r2
 8009180:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009188:	2b20      	cmp	r3, #32
 800918a:	d168      	bne.n	800925e <HAL_UART_Transmit_DMA+0xea>
  {
    if ((pData == NULL) || (Size == 0U))
 800918c:	68bb      	ldr	r3, [r7, #8]
 800918e:	2b00      	cmp	r3, #0
 8009190:	d002      	beq.n	8009198 <HAL_UART_Transmit_DMA+0x24>
 8009192:	88fb      	ldrh	r3, [r7, #6]
 8009194:	2b00      	cmp	r3, #0
 8009196:	d101      	bne.n	800919c <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8009198:	2301      	movs	r3, #1
 800919a:	e061      	b.n	8009260 <HAL_UART_Transmit_DMA+0xec>
    }

    __HAL_LOCK(huart);
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80091a2:	2b01      	cmp	r3, #1
 80091a4:	d101      	bne.n	80091aa <HAL_UART_Transmit_DMA+0x36>
 80091a6:	2302      	movs	r3, #2
 80091a8:	e05a      	b.n	8009260 <HAL_UART_Transmit_DMA+0xec>
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	2201      	movs	r2, #1
 80091ae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	68ba      	ldr	r2, [r7, #8]
 80091b6:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	88fa      	ldrh	r2, [r7, #6]
 80091bc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	88fa      	ldrh	r2, [r7, #6]
 80091c4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	2200      	movs	r2, #0
 80091cc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	2221      	movs	r2, #33	; 0x21
 80091d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d02c      	beq.n	800923a <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80091e4:	4a20      	ldr	r2, [pc, #128]	; (8009268 <HAL_UART_Transmit_DMA+0xf4>)
 80091e6:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80091ec:	4a1f      	ldr	r2, [pc, #124]	; (800926c <HAL_UART_Transmit_DMA+0xf8>)
 80091ee:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80091f4:	4a1e      	ldr	r2, [pc, #120]	; (8009270 <HAL_UART_Transmit_DMA+0xfc>)
 80091f6:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80091fc:	2200      	movs	r2, #0
 80091fe:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009208:	4619      	mov	r1, r3
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	3328      	adds	r3, #40	; 0x28
 8009210:	461a      	mov	r2, r3
 8009212:	88fb      	ldrh	r3, [r7, #6]
 8009214:	f7f8 ffee 	bl	80021f4 <HAL_DMA_Start_IT>
 8009218:	4603      	mov	r3, r0
 800921a:	2b00      	cmp	r3, #0
 800921c:	d00d      	beq.n	800923a <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	2210      	movs	r2, #16
 8009222:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	2200      	movs	r2, #0
 800922a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	2220      	movs	r2, #32
 8009232:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 8009236:	2301      	movs	r3, #1
 8009238:	e012      	b.n	8009260 <HAL_UART_Transmit_DMA+0xec>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	2240      	movs	r2, #64	; 0x40
 8009240:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	2200      	movs	r2, #0
 8009246:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	689a      	ldr	r2, [r3, #8]
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009258:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 800925a:	2300      	movs	r3, #0
 800925c:	e000      	b.n	8009260 <HAL_UART_Transmit_DMA+0xec>
  }
  else
  {
    return HAL_BUSY;
 800925e:	2302      	movs	r3, #2
  }
}
 8009260:	4618      	mov	r0, r3
 8009262:	3710      	adds	r7, #16
 8009264:	46bd      	mov	sp, r7
 8009266:	bd80      	pop	{r7, pc}
 8009268:	0800a679 	.word	0x0800a679
 800926c:	0800a6c9 	.word	0x0800a6c9
 8009270:	0800a6e5 	.word	0x0800a6e5

08009274 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009274:	b580      	push	{r7, lr}
 8009276:	b088      	sub	sp, #32
 8009278:	af00      	add	r7, sp, #0
 800927a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	69db      	ldr	r3, [r3, #28]
 8009282:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	689b      	ldr	r3, [r3, #8]
 8009292:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009294:	69fa      	ldr	r2, [r7, #28]
 8009296:	f640 030f 	movw	r3, #2063	; 0x80f
 800929a:	4013      	ands	r3, r2
 800929c:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800929e:	693b      	ldr	r3, [r7, #16]
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d118      	bne.n	80092d6 <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80092a4:	69fb      	ldr	r3, [r7, #28]
 80092a6:	f003 0320 	and.w	r3, r3, #32
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d013      	beq.n	80092d6 <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80092ae:	69bb      	ldr	r3, [r7, #24]
 80092b0:	f003 0320 	and.w	r3, r3, #32
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d104      	bne.n	80092c2 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80092b8:	697b      	ldr	r3, [r7, #20]
 80092ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d009      	beq.n	80092d6 <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	f000 8282 	beq.w	80097d0 <HAL_UART_IRQHandler+0x55c>
      {
        huart->RxISR(huart);
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80092d0:	6878      	ldr	r0, [r7, #4]
 80092d2:	4798      	blx	r3
      }
      return;
 80092d4:	e27c      	b.n	80097d0 <HAL_UART_IRQHandler+0x55c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80092d6:	693b      	ldr	r3, [r7, #16]
 80092d8:	2b00      	cmp	r3, #0
 80092da:	f000 80ef 	beq.w	80094bc <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80092de:	697a      	ldr	r2, [r7, #20]
 80092e0:	4b73      	ldr	r3, [pc, #460]	; (80094b0 <HAL_UART_IRQHandler+0x23c>)
 80092e2:	4013      	ands	r3, r2
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d105      	bne.n	80092f4 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80092e8:	69ba      	ldr	r2, [r7, #24]
 80092ea:	4b72      	ldr	r3, [pc, #456]	; (80094b4 <HAL_UART_IRQHandler+0x240>)
 80092ec:	4013      	ands	r3, r2
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	f000 80e4 	beq.w	80094bc <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80092f4:	69fb      	ldr	r3, [r7, #28]
 80092f6:	f003 0301 	and.w	r3, r3, #1
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d010      	beq.n	8009320 <HAL_UART_IRQHandler+0xac>
 80092fe:	69bb      	ldr	r3, [r7, #24]
 8009300:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009304:	2b00      	cmp	r3, #0
 8009306:	d00b      	beq.n	8009320 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	2201      	movs	r2, #1
 800930e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009316:	f043 0201 	orr.w	r2, r3, #1
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009320:	69fb      	ldr	r3, [r7, #28]
 8009322:	f003 0302 	and.w	r3, r3, #2
 8009326:	2b00      	cmp	r3, #0
 8009328:	d010      	beq.n	800934c <HAL_UART_IRQHandler+0xd8>
 800932a:	697b      	ldr	r3, [r7, #20]
 800932c:	f003 0301 	and.w	r3, r3, #1
 8009330:	2b00      	cmp	r3, #0
 8009332:	d00b      	beq.n	800934c <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	2202      	movs	r2, #2
 800933a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009342:	f043 0204 	orr.w	r2, r3, #4
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800934c:	69fb      	ldr	r3, [r7, #28]
 800934e:	f003 0304 	and.w	r3, r3, #4
 8009352:	2b00      	cmp	r3, #0
 8009354:	d010      	beq.n	8009378 <HAL_UART_IRQHandler+0x104>
 8009356:	697b      	ldr	r3, [r7, #20]
 8009358:	f003 0301 	and.w	r3, r3, #1
 800935c:	2b00      	cmp	r3, #0
 800935e:	d00b      	beq.n	8009378 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	2204      	movs	r2, #4
 8009366:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800936e:	f043 0202 	orr.w	r2, r3, #2
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009378:	69fb      	ldr	r3, [r7, #28]
 800937a:	f003 0308 	and.w	r3, r3, #8
 800937e:	2b00      	cmp	r3, #0
 8009380:	d015      	beq.n	80093ae <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009382:	69bb      	ldr	r3, [r7, #24]
 8009384:	f003 0320 	and.w	r3, r3, #32
 8009388:	2b00      	cmp	r3, #0
 800938a:	d104      	bne.n	8009396 <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800938c:	697a      	ldr	r2, [r7, #20]
 800938e:	4b48      	ldr	r3, [pc, #288]	; (80094b0 <HAL_UART_IRQHandler+0x23c>)
 8009390:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009392:	2b00      	cmp	r3, #0
 8009394:	d00b      	beq.n	80093ae <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	2208      	movs	r2, #8
 800939c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80093a4:	f043 0208 	orr.w	r2, r3, #8
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80093ae:	69fb      	ldr	r3, [r7, #28]
 80093b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d011      	beq.n	80093dc <HAL_UART_IRQHandler+0x168>
 80093b8:	69bb      	ldr	r3, [r7, #24]
 80093ba:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d00c      	beq.n	80093dc <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80093ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80093d2:	f043 0220 	orr.w	r2, r3, #32
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	f000 81f6 	beq.w	80097d4 <HAL_UART_IRQHandler+0x560>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80093e8:	69fb      	ldr	r3, [r7, #28]
 80093ea:	f003 0320 	and.w	r3, r3, #32
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d011      	beq.n	8009416 <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80093f2:	69bb      	ldr	r3, [r7, #24]
 80093f4:	f003 0320 	and.w	r3, r3, #32
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d104      	bne.n	8009406 <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80093fc:	697b      	ldr	r3, [r7, #20]
 80093fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009402:	2b00      	cmp	r3, #0
 8009404:	d007      	beq.n	8009416 <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800940a:	2b00      	cmp	r3, #0
 800940c:	d003      	beq.n	8009416 <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009412:	6878      	ldr	r0, [r7, #4]
 8009414:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800941c:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	689b      	ldr	r3, [r3, #8]
 8009424:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009428:	2b40      	cmp	r3, #64	; 0x40
 800942a:	d004      	beq.n	8009436 <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009432:	2b00      	cmp	r3, #0
 8009434:	d031      	beq.n	800949a <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009436:	6878      	ldr	r0, [r7, #4]
 8009438:	f001 f8ec 	bl	800a614 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	689b      	ldr	r3, [r3, #8]
 8009442:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009446:	2b40      	cmp	r3, #64	; 0x40
 8009448:	d123      	bne.n	8009492 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	689a      	ldr	r2, [r3, #8]
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009458:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800945e:	2b00      	cmp	r3, #0
 8009460:	d013      	beq.n	800948a <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009466:	4a14      	ldr	r2, [pc, #80]	; (80094b8 <HAL_UART_IRQHandler+0x244>)
 8009468:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800946e:	4618      	mov	r0, r3
 8009470:	f7f9 fc48 	bl	8002d04 <HAL_DMA_Abort_IT>
 8009474:	4603      	mov	r3, r0
 8009476:	2b00      	cmp	r3, #0
 8009478:	d017      	beq.n	80094aa <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800947e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009480:	687a      	ldr	r2, [r7, #4]
 8009482:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8009484:	4610      	mov	r0, r2
 8009486:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009488:	e00f      	b.n	80094aa <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800948a:	6878      	ldr	r0, [r7, #4]
 800948c:	f000 f9c0 	bl	8009810 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009490:	e00b      	b.n	80094aa <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009492:	6878      	ldr	r0, [r7, #4]
 8009494:	f000 f9bc 	bl	8009810 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009498:	e007      	b.n	80094aa <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800949a:	6878      	ldr	r0, [r7, #4]
 800949c:	f000 f9b8 	bl	8009810 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	2200      	movs	r2, #0
 80094a4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 80094a8:	e194      	b.n	80097d4 <HAL_UART_IRQHandler+0x560>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80094aa:	bf00      	nop
    return;
 80094ac:	e192      	b.n	80097d4 <HAL_UART_IRQHandler+0x560>
 80094ae:	bf00      	nop
 80094b0:	10000001 	.word	0x10000001
 80094b4:	04000120 	.word	0x04000120
 80094b8:	0800a765 	.word	0x0800a765

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80094c0:	2b01      	cmp	r3, #1
 80094c2:	f040 810f 	bne.w	80096e4 <HAL_UART_IRQHandler+0x470>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80094c6:	69fb      	ldr	r3, [r7, #28]
 80094c8:	f003 0310 	and.w	r3, r3, #16
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	f000 8109 	beq.w	80096e4 <HAL_UART_IRQHandler+0x470>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80094d2:	69bb      	ldr	r3, [r7, #24]
 80094d4:	f003 0310 	and.w	r3, r3, #16
 80094d8:	2b00      	cmp	r3, #0
 80094da:	f000 8103 	beq.w	80096e4 <HAL_UART_IRQHandler+0x470>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	2210      	movs	r2, #16
 80094e4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	689b      	ldr	r3, [r3, #8]
 80094ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094f0:	2b40      	cmp	r3, #64	; 0x40
 80094f2:	f040 80bb 	bne.w	800966c <HAL_UART_IRQHandler+0x3f8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	4a96      	ldr	r2, [pc, #600]	; (8009758 <HAL_UART_IRQHandler+0x4e4>)
 80094fe:	4293      	cmp	r3, r2
 8009500:	d059      	beq.n	80095b6 <HAL_UART_IRQHandler+0x342>
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	4a94      	ldr	r2, [pc, #592]	; (800975c <HAL_UART_IRQHandler+0x4e8>)
 800950a:	4293      	cmp	r3, r2
 800950c:	d053      	beq.n	80095b6 <HAL_UART_IRQHandler+0x342>
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	4a92      	ldr	r2, [pc, #584]	; (8009760 <HAL_UART_IRQHandler+0x4ec>)
 8009516:	4293      	cmp	r3, r2
 8009518:	d04d      	beq.n	80095b6 <HAL_UART_IRQHandler+0x342>
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	4a90      	ldr	r2, [pc, #576]	; (8009764 <HAL_UART_IRQHandler+0x4f0>)
 8009522:	4293      	cmp	r3, r2
 8009524:	d047      	beq.n	80095b6 <HAL_UART_IRQHandler+0x342>
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	4a8e      	ldr	r2, [pc, #568]	; (8009768 <HAL_UART_IRQHandler+0x4f4>)
 800952e:	4293      	cmp	r3, r2
 8009530:	d041      	beq.n	80095b6 <HAL_UART_IRQHandler+0x342>
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	4a8c      	ldr	r2, [pc, #560]	; (800976c <HAL_UART_IRQHandler+0x4f8>)
 800953a:	4293      	cmp	r3, r2
 800953c:	d03b      	beq.n	80095b6 <HAL_UART_IRQHandler+0x342>
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	4a8a      	ldr	r2, [pc, #552]	; (8009770 <HAL_UART_IRQHandler+0x4fc>)
 8009546:	4293      	cmp	r3, r2
 8009548:	d035      	beq.n	80095b6 <HAL_UART_IRQHandler+0x342>
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	4a88      	ldr	r2, [pc, #544]	; (8009774 <HAL_UART_IRQHandler+0x500>)
 8009552:	4293      	cmp	r3, r2
 8009554:	d02f      	beq.n	80095b6 <HAL_UART_IRQHandler+0x342>
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	4a86      	ldr	r2, [pc, #536]	; (8009778 <HAL_UART_IRQHandler+0x504>)
 800955e:	4293      	cmp	r3, r2
 8009560:	d029      	beq.n	80095b6 <HAL_UART_IRQHandler+0x342>
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	4a84      	ldr	r2, [pc, #528]	; (800977c <HAL_UART_IRQHandler+0x508>)
 800956a:	4293      	cmp	r3, r2
 800956c:	d023      	beq.n	80095b6 <HAL_UART_IRQHandler+0x342>
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	4a82      	ldr	r2, [pc, #520]	; (8009780 <HAL_UART_IRQHandler+0x50c>)
 8009576:	4293      	cmp	r3, r2
 8009578:	d01d      	beq.n	80095b6 <HAL_UART_IRQHandler+0x342>
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	4a80      	ldr	r2, [pc, #512]	; (8009784 <HAL_UART_IRQHandler+0x510>)
 8009582:	4293      	cmp	r3, r2
 8009584:	d017      	beq.n	80095b6 <HAL_UART_IRQHandler+0x342>
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	4a7e      	ldr	r2, [pc, #504]	; (8009788 <HAL_UART_IRQHandler+0x514>)
 800958e:	4293      	cmp	r3, r2
 8009590:	d011      	beq.n	80095b6 <HAL_UART_IRQHandler+0x342>
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	4a7c      	ldr	r2, [pc, #496]	; (800978c <HAL_UART_IRQHandler+0x518>)
 800959a:	4293      	cmp	r3, r2
 800959c:	d00b      	beq.n	80095b6 <HAL_UART_IRQHandler+0x342>
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	4a7a      	ldr	r2, [pc, #488]	; (8009790 <HAL_UART_IRQHandler+0x51c>)
 80095a6:	4293      	cmp	r3, r2
 80095a8:	d005      	beq.n	80095b6 <HAL_UART_IRQHandler+0x342>
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	4a78      	ldr	r2, [pc, #480]	; (8009794 <HAL_UART_IRQHandler+0x520>)
 80095b2:	4293      	cmp	r3, r2
 80095b4:	d105      	bne.n	80095c2 <HAL_UART_IRQHandler+0x34e>
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	685b      	ldr	r3, [r3, #4]
 80095be:	b29b      	uxth	r3, r3
 80095c0:	e004      	b.n	80095cc <HAL_UART_IRQHandler+0x358>
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	685b      	ldr	r3, [r3, #4]
 80095ca:	b29b      	uxth	r3, r3
 80095cc:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 80095ce:	893b      	ldrh	r3, [r7, #8]
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	f000 8101 	beq.w	80097d8 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80095dc:	893a      	ldrh	r2, [r7, #8]
 80095de:	429a      	cmp	r2, r3
 80095e0:	f080 80fa 	bcs.w	80097d8 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	893a      	ldrh	r2, [r7, #8]
 80095e8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80095f0:	69db      	ldr	r3, [r3, #28]
 80095f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80095f6:	d02b      	beq.n	8009650 <HAL_UART_IRQHandler+0x3dc>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	681a      	ldr	r2, [r3, #0]
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009606:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	689a      	ldr	r2, [r3, #8]
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	f022 0201 	bic.w	r2, r2, #1
 8009616:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	689a      	ldr	r2, [r3, #8]
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009626:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	2220      	movs	r2, #32
 800962c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	2200      	movs	r2, #0
 8009634:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	681a      	ldr	r2, [r3, #0]
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	f022 0210 	bic.w	r2, r2, #16
 8009644:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800964a:	4618      	mov	r0, r3
 800964c:	f7f9 f83c 	bl	80026c8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800965c:	b29b      	uxth	r3, r3
 800965e:	1ad3      	subs	r3, r2, r3
 8009660:	b29b      	uxth	r3, r3
 8009662:	4619      	mov	r1, r3
 8009664:	6878      	ldr	r0, [r7, #4]
 8009666:	f000 f8dd 	bl	8009824 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800966a:	e0b5      	b.n	80097d8 <HAL_UART_IRQHandler+0x564>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009678:	b29b      	uxth	r3, r3
 800967a:	1ad3      	subs	r3, r2, r3
 800967c:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009684:	b29b      	uxth	r3, r3
 8009686:	2b00      	cmp	r3, #0
 8009688:	f000 80a8 	beq.w	80097dc <HAL_UART_IRQHandler+0x568>
          && (nb_rx_data > 0U))
 800968c:	897b      	ldrh	r3, [r7, #10]
 800968e:	2b00      	cmp	r3, #0
 8009690:	f000 80a4 	beq.w	80097dc <HAL_UART_IRQHandler+0x568>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	681a      	ldr	r2, [r3, #0]
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80096a2:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	6899      	ldr	r1, [r3, #8]
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	681a      	ldr	r2, [r3, #0]
 80096ae:	4b3a      	ldr	r3, [pc, #232]	; (8009798 <HAL_UART_IRQHandler+0x524>)
 80096b0:	400b      	ands	r3, r1
 80096b2:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	2220      	movs	r2, #32
 80096b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	2200      	movs	r2, #0
 80096c0:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	2200      	movs	r2, #0
 80096c6:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	681a      	ldr	r2, [r3, #0]
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	f022 0210 	bic.w	r2, r2, #16
 80096d6:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80096d8:	897b      	ldrh	r3, [r7, #10]
 80096da:	4619      	mov	r1, r3
 80096dc:	6878      	ldr	r0, [r7, #4]
 80096de:	f000 f8a1 	bl	8009824 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80096e2:	e07b      	b.n	80097dc <HAL_UART_IRQHandler+0x568>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80096e4:	69fb      	ldr	r3, [r7, #28]
 80096e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d00d      	beq.n	800970a <HAL_UART_IRQHandler+0x496>
 80096ee:	697b      	ldr	r3, [r7, #20]
 80096f0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d008      	beq.n	800970a <HAL_UART_IRQHandler+0x496>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8009700:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009702:	6878      	ldr	r0, [r7, #4]
 8009704:	f001 f85e 	bl	800a7c4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009708:	e06b      	b.n	80097e2 <HAL_UART_IRQHandler+0x56e>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800970a:	69fb      	ldr	r3, [r7, #28]
 800970c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009710:	2b00      	cmp	r3, #0
 8009712:	d012      	beq.n	800973a <HAL_UART_IRQHandler+0x4c6>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009714:	69bb      	ldr	r3, [r7, #24]
 8009716:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800971a:	2b00      	cmp	r3, #0
 800971c:	d104      	bne.n	8009728 <HAL_UART_IRQHandler+0x4b4>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800971e:	697b      	ldr	r3, [r7, #20]
 8009720:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009724:	2b00      	cmp	r3, #0
 8009726:	d008      	beq.n	800973a <HAL_UART_IRQHandler+0x4c6>
  {
    if (huart->TxISR != NULL)
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800972c:	2b00      	cmp	r3, #0
 800972e:	d057      	beq.n	80097e0 <HAL_UART_IRQHandler+0x56c>
    {
      huart->TxISR(huart);
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009734:	6878      	ldr	r0, [r7, #4]
 8009736:	4798      	blx	r3
    }
    return;
 8009738:	e052      	b.n	80097e0 <HAL_UART_IRQHandler+0x56c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800973a:	69fb      	ldr	r3, [r7, #28]
 800973c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009740:	2b00      	cmp	r3, #0
 8009742:	d02b      	beq.n	800979c <HAL_UART_IRQHandler+0x528>
 8009744:	69bb      	ldr	r3, [r7, #24]
 8009746:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800974a:	2b00      	cmp	r3, #0
 800974c:	d026      	beq.n	800979c <HAL_UART_IRQHandler+0x528>
  {
    UART_EndTransmit_IT(huart);
 800974e:	6878      	ldr	r0, [r7, #4]
 8009750:	f001 f81e 	bl	800a790 <UART_EndTransmit_IT>
    return;
 8009754:	e045      	b.n	80097e2 <HAL_UART_IRQHandler+0x56e>
 8009756:	bf00      	nop
 8009758:	40020010 	.word	0x40020010
 800975c:	40020028 	.word	0x40020028
 8009760:	40020040 	.word	0x40020040
 8009764:	40020058 	.word	0x40020058
 8009768:	40020070 	.word	0x40020070
 800976c:	40020088 	.word	0x40020088
 8009770:	400200a0 	.word	0x400200a0
 8009774:	400200b8 	.word	0x400200b8
 8009778:	40020410 	.word	0x40020410
 800977c:	40020428 	.word	0x40020428
 8009780:	40020440 	.word	0x40020440
 8009784:	40020458 	.word	0x40020458
 8009788:	40020470 	.word	0x40020470
 800978c:	40020488 	.word	0x40020488
 8009790:	400204a0 	.word	0x400204a0
 8009794:	400204b8 	.word	0x400204b8
 8009798:	effffffe 	.word	0xeffffffe
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800979c:	69fb      	ldr	r3, [r7, #28]
 800979e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d008      	beq.n	80097b8 <HAL_UART_IRQHandler+0x544>
 80097a6:	69bb      	ldr	r3, [r7, #24]
 80097a8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d003      	beq.n	80097b8 <HAL_UART_IRQHandler+0x544>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80097b0:	6878      	ldr	r0, [r7, #4]
 80097b2:	f001 f81b 	bl	800a7ec <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80097b6:	e014      	b.n	80097e2 <HAL_UART_IRQHandler+0x56e>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80097b8:	69fb      	ldr	r3, [r7, #28]
 80097ba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d00f      	beq.n	80097e2 <HAL_UART_IRQHandler+0x56e>
 80097c2:	69bb      	ldr	r3, [r7, #24]
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	da0c      	bge.n	80097e2 <HAL_UART_IRQHandler+0x56e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80097c8:	6878      	ldr	r0, [r7, #4]
 80097ca:	f001 f805 	bl	800a7d8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80097ce:	e008      	b.n	80097e2 <HAL_UART_IRQHandler+0x56e>
      return;
 80097d0:	bf00      	nop
 80097d2:	e006      	b.n	80097e2 <HAL_UART_IRQHandler+0x56e>
    return;
 80097d4:	bf00      	nop
 80097d6:	e004      	b.n	80097e2 <HAL_UART_IRQHandler+0x56e>
      return;
 80097d8:	bf00      	nop
 80097da:	e002      	b.n	80097e2 <HAL_UART_IRQHandler+0x56e>
      return;
 80097dc:	bf00      	nop
 80097de:	e000      	b.n	80097e2 <HAL_UART_IRQHandler+0x56e>
    return;
 80097e0:	bf00      	nop
  }
}
 80097e2:	3720      	adds	r7, #32
 80097e4:	46bd      	mov	sp, r7
 80097e6:	bd80      	pop	{r7, pc}

080097e8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80097e8:	b480      	push	{r7}
 80097ea:	b083      	sub	sp, #12
 80097ec:	af00      	add	r7, sp, #0
 80097ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80097f0:	bf00      	nop
 80097f2:	370c      	adds	r7, #12
 80097f4:	46bd      	mov	sp, r7
 80097f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097fa:	4770      	bx	lr

080097fc <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80097fc:	b480      	push	{r7}
 80097fe:	b083      	sub	sp, #12
 8009800:	af00      	add	r7, sp, #0
 8009802:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8009804:	bf00      	nop
 8009806:	370c      	adds	r7, #12
 8009808:	46bd      	mov	sp, r7
 800980a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800980e:	4770      	bx	lr

08009810 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009810:	b480      	push	{r7}
 8009812:	b083      	sub	sp, #12
 8009814:	af00      	add	r7, sp, #0
 8009816:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009818:	bf00      	nop
 800981a:	370c      	adds	r7, #12
 800981c:	46bd      	mov	sp, r7
 800981e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009822:	4770      	bx	lr

08009824 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009824:	b480      	push	{r7}
 8009826:	b083      	sub	sp, #12
 8009828:	af00      	add	r7, sp, #0
 800982a:	6078      	str	r0, [r7, #4]
 800982c:	460b      	mov	r3, r1
 800982e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009830:	bf00      	nop
 8009832:	370c      	adds	r7, #12
 8009834:	46bd      	mov	sp, r7
 8009836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800983a:	4770      	bx	lr

0800983c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800983c:	b5b0      	push	{r4, r5, r7, lr}
 800983e:	b08e      	sub	sp, #56	; 0x38
 8009840:	af00      	add	r7, sp, #0
 8009842:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009844:	2300      	movs	r3, #0
 8009846:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	689a      	ldr	r2, [r3, #8]
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	691b      	ldr	r3, [r3, #16]
 8009852:	431a      	orrs	r2, r3
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	695b      	ldr	r3, [r3, #20]
 8009858:	431a      	orrs	r2, r3
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	69db      	ldr	r3, [r3, #28]
 800985e:	4313      	orrs	r3, r2
 8009860:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	681a      	ldr	r2, [r3, #0]
 8009868:	4bbf      	ldr	r3, [pc, #764]	; (8009b68 <UART_SetConfig+0x32c>)
 800986a:	4013      	ands	r3, r2
 800986c:	687a      	ldr	r2, [r7, #4]
 800986e:	6812      	ldr	r2, [r2, #0]
 8009870:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009872:	430b      	orrs	r3, r1
 8009874:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	685b      	ldr	r3, [r3, #4]
 800987c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	68da      	ldr	r2, [r3, #12]
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	430a      	orrs	r2, r1
 800988a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	699b      	ldr	r3, [r3, #24]
 8009890:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	4ab5      	ldr	r2, [pc, #724]	; (8009b6c <UART_SetConfig+0x330>)
 8009898:	4293      	cmp	r3, r2
 800989a:	d004      	beq.n	80098a6 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	6a1b      	ldr	r3, [r3, #32]
 80098a0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80098a2:	4313      	orrs	r3, r2
 80098a4:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	689a      	ldr	r2, [r3, #8]
 80098ac:	4bb0      	ldr	r3, [pc, #704]	; (8009b70 <UART_SetConfig+0x334>)
 80098ae:	4013      	ands	r3, r2
 80098b0:	687a      	ldr	r2, [r7, #4]
 80098b2:	6812      	ldr	r2, [r2, #0]
 80098b4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80098b6:	430b      	orrs	r3, r1
 80098b8:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098c0:	f023 010f 	bic.w	r1, r3, #15
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	430a      	orrs	r2, r1
 80098ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	4aa7      	ldr	r2, [pc, #668]	; (8009b74 <UART_SetConfig+0x338>)
 80098d6:	4293      	cmp	r3, r2
 80098d8:	d176      	bne.n	80099c8 <UART_SetConfig+0x18c>
 80098da:	4ba7      	ldr	r3, [pc, #668]	; (8009b78 <UART_SetConfig+0x33c>)
 80098dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80098de:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80098e2:	2b28      	cmp	r3, #40	; 0x28
 80098e4:	d86c      	bhi.n	80099c0 <UART_SetConfig+0x184>
 80098e6:	a201      	add	r2, pc, #4	; (adr r2, 80098ec <UART_SetConfig+0xb0>)
 80098e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098ec:	08009991 	.word	0x08009991
 80098f0:	080099c1 	.word	0x080099c1
 80098f4:	080099c1 	.word	0x080099c1
 80098f8:	080099c1 	.word	0x080099c1
 80098fc:	080099c1 	.word	0x080099c1
 8009900:	080099c1 	.word	0x080099c1
 8009904:	080099c1 	.word	0x080099c1
 8009908:	080099c1 	.word	0x080099c1
 800990c:	08009999 	.word	0x08009999
 8009910:	080099c1 	.word	0x080099c1
 8009914:	080099c1 	.word	0x080099c1
 8009918:	080099c1 	.word	0x080099c1
 800991c:	080099c1 	.word	0x080099c1
 8009920:	080099c1 	.word	0x080099c1
 8009924:	080099c1 	.word	0x080099c1
 8009928:	080099c1 	.word	0x080099c1
 800992c:	080099a1 	.word	0x080099a1
 8009930:	080099c1 	.word	0x080099c1
 8009934:	080099c1 	.word	0x080099c1
 8009938:	080099c1 	.word	0x080099c1
 800993c:	080099c1 	.word	0x080099c1
 8009940:	080099c1 	.word	0x080099c1
 8009944:	080099c1 	.word	0x080099c1
 8009948:	080099c1 	.word	0x080099c1
 800994c:	080099a9 	.word	0x080099a9
 8009950:	080099c1 	.word	0x080099c1
 8009954:	080099c1 	.word	0x080099c1
 8009958:	080099c1 	.word	0x080099c1
 800995c:	080099c1 	.word	0x080099c1
 8009960:	080099c1 	.word	0x080099c1
 8009964:	080099c1 	.word	0x080099c1
 8009968:	080099c1 	.word	0x080099c1
 800996c:	080099b1 	.word	0x080099b1
 8009970:	080099c1 	.word	0x080099c1
 8009974:	080099c1 	.word	0x080099c1
 8009978:	080099c1 	.word	0x080099c1
 800997c:	080099c1 	.word	0x080099c1
 8009980:	080099c1 	.word	0x080099c1
 8009984:	080099c1 	.word	0x080099c1
 8009988:	080099c1 	.word	0x080099c1
 800998c:	080099b9 	.word	0x080099b9
 8009990:	2301      	movs	r3, #1
 8009992:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009996:	e222      	b.n	8009dde <UART_SetConfig+0x5a2>
 8009998:	2304      	movs	r3, #4
 800999a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800999e:	e21e      	b.n	8009dde <UART_SetConfig+0x5a2>
 80099a0:	2308      	movs	r3, #8
 80099a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80099a6:	e21a      	b.n	8009dde <UART_SetConfig+0x5a2>
 80099a8:	2310      	movs	r3, #16
 80099aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80099ae:	e216      	b.n	8009dde <UART_SetConfig+0x5a2>
 80099b0:	2320      	movs	r3, #32
 80099b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80099b6:	e212      	b.n	8009dde <UART_SetConfig+0x5a2>
 80099b8:	2340      	movs	r3, #64	; 0x40
 80099ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80099be:	e20e      	b.n	8009dde <UART_SetConfig+0x5a2>
 80099c0:	2380      	movs	r3, #128	; 0x80
 80099c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80099c6:	e20a      	b.n	8009dde <UART_SetConfig+0x5a2>
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	4a6b      	ldr	r2, [pc, #428]	; (8009b7c <UART_SetConfig+0x340>)
 80099ce:	4293      	cmp	r3, r2
 80099d0:	d130      	bne.n	8009a34 <UART_SetConfig+0x1f8>
 80099d2:	4b69      	ldr	r3, [pc, #420]	; (8009b78 <UART_SetConfig+0x33c>)
 80099d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80099d6:	f003 0307 	and.w	r3, r3, #7
 80099da:	2b05      	cmp	r3, #5
 80099dc:	d826      	bhi.n	8009a2c <UART_SetConfig+0x1f0>
 80099de:	a201      	add	r2, pc, #4	; (adr r2, 80099e4 <UART_SetConfig+0x1a8>)
 80099e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099e4:	080099fd 	.word	0x080099fd
 80099e8:	08009a05 	.word	0x08009a05
 80099ec:	08009a0d 	.word	0x08009a0d
 80099f0:	08009a15 	.word	0x08009a15
 80099f4:	08009a1d 	.word	0x08009a1d
 80099f8:	08009a25 	.word	0x08009a25
 80099fc:	2300      	movs	r3, #0
 80099fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a02:	e1ec      	b.n	8009dde <UART_SetConfig+0x5a2>
 8009a04:	2304      	movs	r3, #4
 8009a06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a0a:	e1e8      	b.n	8009dde <UART_SetConfig+0x5a2>
 8009a0c:	2308      	movs	r3, #8
 8009a0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a12:	e1e4      	b.n	8009dde <UART_SetConfig+0x5a2>
 8009a14:	2310      	movs	r3, #16
 8009a16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a1a:	e1e0      	b.n	8009dde <UART_SetConfig+0x5a2>
 8009a1c:	2320      	movs	r3, #32
 8009a1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a22:	e1dc      	b.n	8009dde <UART_SetConfig+0x5a2>
 8009a24:	2340      	movs	r3, #64	; 0x40
 8009a26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a2a:	e1d8      	b.n	8009dde <UART_SetConfig+0x5a2>
 8009a2c:	2380      	movs	r3, #128	; 0x80
 8009a2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a32:	e1d4      	b.n	8009dde <UART_SetConfig+0x5a2>
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	4a51      	ldr	r2, [pc, #324]	; (8009b80 <UART_SetConfig+0x344>)
 8009a3a:	4293      	cmp	r3, r2
 8009a3c:	d130      	bne.n	8009aa0 <UART_SetConfig+0x264>
 8009a3e:	4b4e      	ldr	r3, [pc, #312]	; (8009b78 <UART_SetConfig+0x33c>)
 8009a40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a42:	f003 0307 	and.w	r3, r3, #7
 8009a46:	2b05      	cmp	r3, #5
 8009a48:	d826      	bhi.n	8009a98 <UART_SetConfig+0x25c>
 8009a4a:	a201      	add	r2, pc, #4	; (adr r2, 8009a50 <UART_SetConfig+0x214>)
 8009a4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a50:	08009a69 	.word	0x08009a69
 8009a54:	08009a71 	.word	0x08009a71
 8009a58:	08009a79 	.word	0x08009a79
 8009a5c:	08009a81 	.word	0x08009a81
 8009a60:	08009a89 	.word	0x08009a89
 8009a64:	08009a91 	.word	0x08009a91
 8009a68:	2300      	movs	r3, #0
 8009a6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a6e:	e1b6      	b.n	8009dde <UART_SetConfig+0x5a2>
 8009a70:	2304      	movs	r3, #4
 8009a72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a76:	e1b2      	b.n	8009dde <UART_SetConfig+0x5a2>
 8009a78:	2308      	movs	r3, #8
 8009a7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a7e:	e1ae      	b.n	8009dde <UART_SetConfig+0x5a2>
 8009a80:	2310      	movs	r3, #16
 8009a82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a86:	e1aa      	b.n	8009dde <UART_SetConfig+0x5a2>
 8009a88:	2320      	movs	r3, #32
 8009a8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a8e:	e1a6      	b.n	8009dde <UART_SetConfig+0x5a2>
 8009a90:	2340      	movs	r3, #64	; 0x40
 8009a92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a96:	e1a2      	b.n	8009dde <UART_SetConfig+0x5a2>
 8009a98:	2380      	movs	r3, #128	; 0x80
 8009a9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a9e:	e19e      	b.n	8009dde <UART_SetConfig+0x5a2>
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	4a37      	ldr	r2, [pc, #220]	; (8009b84 <UART_SetConfig+0x348>)
 8009aa6:	4293      	cmp	r3, r2
 8009aa8:	d130      	bne.n	8009b0c <UART_SetConfig+0x2d0>
 8009aaa:	4b33      	ldr	r3, [pc, #204]	; (8009b78 <UART_SetConfig+0x33c>)
 8009aac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009aae:	f003 0307 	and.w	r3, r3, #7
 8009ab2:	2b05      	cmp	r3, #5
 8009ab4:	d826      	bhi.n	8009b04 <UART_SetConfig+0x2c8>
 8009ab6:	a201      	add	r2, pc, #4	; (adr r2, 8009abc <UART_SetConfig+0x280>)
 8009ab8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009abc:	08009ad5 	.word	0x08009ad5
 8009ac0:	08009add 	.word	0x08009add
 8009ac4:	08009ae5 	.word	0x08009ae5
 8009ac8:	08009aed 	.word	0x08009aed
 8009acc:	08009af5 	.word	0x08009af5
 8009ad0:	08009afd 	.word	0x08009afd
 8009ad4:	2300      	movs	r3, #0
 8009ad6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ada:	e180      	b.n	8009dde <UART_SetConfig+0x5a2>
 8009adc:	2304      	movs	r3, #4
 8009ade:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ae2:	e17c      	b.n	8009dde <UART_SetConfig+0x5a2>
 8009ae4:	2308      	movs	r3, #8
 8009ae6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009aea:	e178      	b.n	8009dde <UART_SetConfig+0x5a2>
 8009aec:	2310      	movs	r3, #16
 8009aee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009af2:	e174      	b.n	8009dde <UART_SetConfig+0x5a2>
 8009af4:	2320      	movs	r3, #32
 8009af6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009afa:	e170      	b.n	8009dde <UART_SetConfig+0x5a2>
 8009afc:	2340      	movs	r3, #64	; 0x40
 8009afe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b02:	e16c      	b.n	8009dde <UART_SetConfig+0x5a2>
 8009b04:	2380      	movs	r3, #128	; 0x80
 8009b06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b0a:	e168      	b.n	8009dde <UART_SetConfig+0x5a2>
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	4a1d      	ldr	r2, [pc, #116]	; (8009b88 <UART_SetConfig+0x34c>)
 8009b12:	4293      	cmp	r3, r2
 8009b14:	d142      	bne.n	8009b9c <UART_SetConfig+0x360>
 8009b16:	4b18      	ldr	r3, [pc, #96]	; (8009b78 <UART_SetConfig+0x33c>)
 8009b18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b1a:	f003 0307 	and.w	r3, r3, #7
 8009b1e:	2b05      	cmp	r3, #5
 8009b20:	d838      	bhi.n	8009b94 <UART_SetConfig+0x358>
 8009b22:	a201      	add	r2, pc, #4	; (adr r2, 8009b28 <UART_SetConfig+0x2ec>)
 8009b24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b28:	08009b41 	.word	0x08009b41
 8009b2c:	08009b49 	.word	0x08009b49
 8009b30:	08009b51 	.word	0x08009b51
 8009b34:	08009b59 	.word	0x08009b59
 8009b38:	08009b61 	.word	0x08009b61
 8009b3c:	08009b8d 	.word	0x08009b8d
 8009b40:	2300      	movs	r3, #0
 8009b42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b46:	e14a      	b.n	8009dde <UART_SetConfig+0x5a2>
 8009b48:	2304      	movs	r3, #4
 8009b4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b4e:	e146      	b.n	8009dde <UART_SetConfig+0x5a2>
 8009b50:	2308      	movs	r3, #8
 8009b52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b56:	e142      	b.n	8009dde <UART_SetConfig+0x5a2>
 8009b58:	2310      	movs	r3, #16
 8009b5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b5e:	e13e      	b.n	8009dde <UART_SetConfig+0x5a2>
 8009b60:	2320      	movs	r3, #32
 8009b62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b66:	e13a      	b.n	8009dde <UART_SetConfig+0x5a2>
 8009b68:	cfff69f3 	.word	0xcfff69f3
 8009b6c:	58000c00 	.word	0x58000c00
 8009b70:	11fff4ff 	.word	0x11fff4ff
 8009b74:	40011000 	.word	0x40011000
 8009b78:	58024400 	.word	0x58024400
 8009b7c:	40004400 	.word	0x40004400
 8009b80:	40004800 	.word	0x40004800
 8009b84:	40004c00 	.word	0x40004c00
 8009b88:	40005000 	.word	0x40005000
 8009b8c:	2340      	movs	r3, #64	; 0x40
 8009b8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b92:	e124      	b.n	8009dde <UART_SetConfig+0x5a2>
 8009b94:	2380      	movs	r3, #128	; 0x80
 8009b96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b9a:	e120      	b.n	8009dde <UART_SetConfig+0x5a2>
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	4acc      	ldr	r2, [pc, #816]	; (8009ed4 <UART_SetConfig+0x698>)
 8009ba2:	4293      	cmp	r3, r2
 8009ba4:	d176      	bne.n	8009c94 <UART_SetConfig+0x458>
 8009ba6:	4bcc      	ldr	r3, [pc, #816]	; (8009ed8 <UART_SetConfig+0x69c>)
 8009ba8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009baa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009bae:	2b28      	cmp	r3, #40	; 0x28
 8009bb0:	d86c      	bhi.n	8009c8c <UART_SetConfig+0x450>
 8009bb2:	a201      	add	r2, pc, #4	; (adr r2, 8009bb8 <UART_SetConfig+0x37c>)
 8009bb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bb8:	08009c5d 	.word	0x08009c5d
 8009bbc:	08009c8d 	.word	0x08009c8d
 8009bc0:	08009c8d 	.word	0x08009c8d
 8009bc4:	08009c8d 	.word	0x08009c8d
 8009bc8:	08009c8d 	.word	0x08009c8d
 8009bcc:	08009c8d 	.word	0x08009c8d
 8009bd0:	08009c8d 	.word	0x08009c8d
 8009bd4:	08009c8d 	.word	0x08009c8d
 8009bd8:	08009c65 	.word	0x08009c65
 8009bdc:	08009c8d 	.word	0x08009c8d
 8009be0:	08009c8d 	.word	0x08009c8d
 8009be4:	08009c8d 	.word	0x08009c8d
 8009be8:	08009c8d 	.word	0x08009c8d
 8009bec:	08009c8d 	.word	0x08009c8d
 8009bf0:	08009c8d 	.word	0x08009c8d
 8009bf4:	08009c8d 	.word	0x08009c8d
 8009bf8:	08009c6d 	.word	0x08009c6d
 8009bfc:	08009c8d 	.word	0x08009c8d
 8009c00:	08009c8d 	.word	0x08009c8d
 8009c04:	08009c8d 	.word	0x08009c8d
 8009c08:	08009c8d 	.word	0x08009c8d
 8009c0c:	08009c8d 	.word	0x08009c8d
 8009c10:	08009c8d 	.word	0x08009c8d
 8009c14:	08009c8d 	.word	0x08009c8d
 8009c18:	08009c75 	.word	0x08009c75
 8009c1c:	08009c8d 	.word	0x08009c8d
 8009c20:	08009c8d 	.word	0x08009c8d
 8009c24:	08009c8d 	.word	0x08009c8d
 8009c28:	08009c8d 	.word	0x08009c8d
 8009c2c:	08009c8d 	.word	0x08009c8d
 8009c30:	08009c8d 	.word	0x08009c8d
 8009c34:	08009c8d 	.word	0x08009c8d
 8009c38:	08009c7d 	.word	0x08009c7d
 8009c3c:	08009c8d 	.word	0x08009c8d
 8009c40:	08009c8d 	.word	0x08009c8d
 8009c44:	08009c8d 	.word	0x08009c8d
 8009c48:	08009c8d 	.word	0x08009c8d
 8009c4c:	08009c8d 	.word	0x08009c8d
 8009c50:	08009c8d 	.word	0x08009c8d
 8009c54:	08009c8d 	.word	0x08009c8d
 8009c58:	08009c85 	.word	0x08009c85
 8009c5c:	2301      	movs	r3, #1
 8009c5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c62:	e0bc      	b.n	8009dde <UART_SetConfig+0x5a2>
 8009c64:	2304      	movs	r3, #4
 8009c66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c6a:	e0b8      	b.n	8009dde <UART_SetConfig+0x5a2>
 8009c6c:	2308      	movs	r3, #8
 8009c6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c72:	e0b4      	b.n	8009dde <UART_SetConfig+0x5a2>
 8009c74:	2310      	movs	r3, #16
 8009c76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c7a:	e0b0      	b.n	8009dde <UART_SetConfig+0x5a2>
 8009c7c:	2320      	movs	r3, #32
 8009c7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c82:	e0ac      	b.n	8009dde <UART_SetConfig+0x5a2>
 8009c84:	2340      	movs	r3, #64	; 0x40
 8009c86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c8a:	e0a8      	b.n	8009dde <UART_SetConfig+0x5a2>
 8009c8c:	2380      	movs	r3, #128	; 0x80
 8009c8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c92:	e0a4      	b.n	8009dde <UART_SetConfig+0x5a2>
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	4a90      	ldr	r2, [pc, #576]	; (8009edc <UART_SetConfig+0x6a0>)
 8009c9a:	4293      	cmp	r3, r2
 8009c9c:	d130      	bne.n	8009d00 <UART_SetConfig+0x4c4>
 8009c9e:	4b8e      	ldr	r3, [pc, #568]	; (8009ed8 <UART_SetConfig+0x69c>)
 8009ca0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ca2:	f003 0307 	and.w	r3, r3, #7
 8009ca6:	2b05      	cmp	r3, #5
 8009ca8:	d826      	bhi.n	8009cf8 <UART_SetConfig+0x4bc>
 8009caa:	a201      	add	r2, pc, #4	; (adr r2, 8009cb0 <UART_SetConfig+0x474>)
 8009cac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cb0:	08009cc9 	.word	0x08009cc9
 8009cb4:	08009cd1 	.word	0x08009cd1
 8009cb8:	08009cd9 	.word	0x08009cd9
 8009cbc:	08009ce1 	.word	0x08009ce1
 8009cc0:	08009ce9 	.word	0x08009ce9
 8009cc4:	08009cf1 	.word	0x08009cf1
 8009cc8:	2300      	movs	r3, #0
 8009cca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009cce:	e086      	b.n	8009dde <UART_SetConfig+0x5a2>
 8009cd0:	2304      	movs	r3, #4
 8009cd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009cd6:	e082      	b.n	8009dde <UART_SetConfig+0x5a2>
 8009cd8:	2308      	movs	r3, #8
 8009cda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009cde:	e07e      	b.n	8009dde <UART_SetConfig+0x5a2>
 8009ce0:	2310      	movs	r3, #16
 8009ce2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ce6:	e07a      	b.n	8009dde <UART_SetConfig+0x5a2>
 8009ce8:	2320      	movs	r3, #32
 8009cea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009cee:	e076      	b.n	8009dde <UART_SetConfig+0x5a2>
 8009cf0:	2340      	movs	r3, #64	; 0x40
 8009cf2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009cf6:	e072      	b.n	8009dde <UART_SetConfig+0x5a2>
 8009cf8:	2380      	movs	r3, #128	; 0x80
 8009cfa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009cfe:	e06e      	b.n	8009dde <UART_SetConfig+0x5a2>
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	4a76      	ldr	r2, [pc, #472]	; (8009ee0 <UART_SetConfig+0x6a4>)
 8009d06:	4293      	cmp	r3, r2
 8009d08:	d130      	bne.n	8009d6c <UART_SetConfig+0x530>
 8009d0a:	4b73      	ldr	r3, [pc, #460]	; (8009ed8 <UART_SetConfig+0x69c>)
 8009d0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d0e:	f003 0307 	and.w	r3, r3, #7
 8009d12:	2b05      	cmp	r3, #5
 8009d14:	d826      	bhi.n	8009d64 <UART_SetConfig+0x528>
 8009d16:	a201      	add	r2, pc, #4	; (adr r2, 8009d1c <UART_SetConfig+0x4e0>)
 8009d18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d1c:	08009d35 	.word	0x08009d35
 8009d20:	08009d3d 	.word	0x08009d3d
 8009d24:	08009d45 	.word	0x08009d45
 8009d28:	08009d4d 	.word	0x08009d4d
 8009d2c:	08009d55 	.word	0x08009d55
 8009d30:	08009d5d 	.word	0x08009d5d
 8009d34:	2300      	movs	r3, #0
 8009d36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d3a:	e050      	b.n	8009dde <UART_SetConfig+0x5a2>
 8009d3c:	2304      	movs	r3, #4
 8009d3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d42:	e04c      	b.n	8009dde <UART_SetConfig+0x5a2>
 8009d44:	2308      	movs	r3, #8
 8009d46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d4a:	e048      	b.n	8009dde <UART_SetConfig+0x5a2>
 8009d4c:	2310      	movs	r3, #16
 8009d4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d52:	e044      	b.n	8009dde <UART_SetConfig+0x5a2>
 8009d54:	2320      	movs	r3, #32
 8009d56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d5a:	e040      	b.n	8009dde <UART_SetConfig+0x5a2>
 8009d5c:	2340      	movs	r3, #64	; 0x40
 8009d5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d62:	e03c      	b.n	8009dde <UART_SetConfig+0x5a2>
 8009d64:	2380      	movs	r3, #128	; 0x80
 8009d66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d6a:	e038      	b.n	8009dde <UART_SetConfig+0x5a2>
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	4a5c      	ldr	r2, [pc, #368]	; (8009ee4 <UART_SetConfig+0x6a8>)
 8009d72:	4293      	cmp	r3, r2
 8009d74:	d130      	bne.n	8009dd8 <UART_SetConfig+0x59c>
 8009d76:	4b58      	ldr	r3, [pc, #352]	; (8009ed8 <UART_SetConfig+0x69c>)
 8009d78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d7a:	f003 0307 	and.w	r3, r3, #7
 8009d7e:	2b05      	cmp	r3, #5
 8009d80:	d826      	bhi.n	8009dd0 <UART_SetConfig+0x594>
 8009d82:	a201      	add	r2, pc, #4	; (adr r2, 8009d88 <UART_SetConfig+0x54c>)
 8009d84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d88:	08009da1 	.word	0x08009da1
 8009d8c:	08009da9 	.word	0x08009da9
 8009d90:	08009db1 	.word	0x08009db1
 8009d94:	08009db9 	.word	0x08009db9
 8009d98:	08009dc1 	.word	0x08009dc1
 8009d9c:	08009dc9 	.word	0x08009dc9
 8009da0:	2302      	movs	r3, #2
 8009da2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009da6:	e01a      	b.n	8009dde <UART_SetConfig+0x5a2>
 8009da8:	2304      	movs	r3, #4
 8009daa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009dae:	e016      	b.n	8009dde <UART_SetConfig+0x5a2>
 8009db0:	2308      	movs	r3, #8
 8009db2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009db6:	e012      	b.n	8009dde <UART_SetConfig+0x5a2>
 8009db8:	2310      	movs	r3, #16
 8009dba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009dbe:	e00e      	b.n	8009dde <UART_SetConfig+0x5a2>
 8009dc0:	2320      	movs	r3, #32
 8009dc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009dc6:	e00a      	b.n	8009dde <UART_SetConfig+0x5a2>
 8009dc8:	2340      	movs	r3, #64	; 0x40
 8009dca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009dce:	e006      	b.n	8009dde <UART_SetConfig+0x5a2>
 8009dd0:	2380      	movs	r3, #128	; 0x80
 8009dd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009dd6:	e002      	b.n	8009dde <UART_SetConfig+0x5a2>
 8009dd8:	2380      	movs	r3, #128	; 0x80
 8009dda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	4a40      	ldr	r2, [pc, #256]	; (8009ee4 <UART_SetConfig+0x6a8>)
 8009de4:	4293      	cmp	r3, r2
 8009de6:	f040 80ef 	bne.w	8009fc8 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009dea:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009dee:	2b20      	cmp	r3, #32
 8009df0:	dc46      	bgt.n	8009e80 <UART_SetConfig+0x644>
 8009df2:	2b02      	cmp	r3, #2
 8009df4:	f2c0 8081 	blt.w	8009efa <UART_SetConfig+0x6be>
 8009df8:	3b02      	subs	r3, #2
 8009dfa:	2b1e      	cmp	r3, #30
 8009dfc:	d87d      	bhi.n	8009efa <UART_SetConfig+0x6be>
 8009dfe:	a201      	add	r2, pc, #4	; (adr r2, 8009e04 <UART_SetConfig+0x5c8>)
 8009e00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e04:	08009e87 	.word	0x08009e87
 8009e08:	08009efb 	.word	0x08009efb
 8009e0c:	08009e8f 	.word	0x08009e8f
 8009e10:	08009efb 	.word	0x08009efb
 8009e14:	08009efb 	.word	0x08009efb
 8009e18:	08009efb 	.word	0x08009efb
 8009e1c:	08009e9f 	.word	0x08009e9f
 8009e20:	08009efb 	.word	0x08009efb
 8009e24:	08009efb 	.word	0x08009efb
 8009e28:	08009efb 	.word	0x08009efb
 8009e2c:	08009efb 	.word	0x08009efb
 8009e30:	08009efb 	.word	0x08009efb
 8009e34:	08009efb 	.word	0x08009efb
 8009e38:	08009efb 	.word	0x08009efb
 8009e3c:	08009eaf 	.word	0x08009eaf
 8009e40:	08009efb 	.word	0x08009efb
 8009e44:	08009efb 	.word	0x08009efb
 8009e48:	08009efb 	.word	0x08009efb
 8009e4c:	08009efb 	.word	0x08009efb
 8009e50:	08009efb 	.word	0x08009efb
 8009e54:	08009efb 	.word	0x08009efb
 8009e58:	08009efb 	.word	0x08009efb
 8009e5c:	08009efb 	.word	0x08009efb
 8009e60:	08009efb 	.word	0x08009efb
 8009e64:	08009efb 	.word	0x08009efb
 8009e68:	08009efb 	.word	0x08009efb
 8009e6c:	08009efb 	.word	0x08009efb
 8009e70:	08009efb 	.word	0x08009efb
 8009e74:	08009efb 	.word	0x08009efb
 8009e78:	08009efb 	.word	0x08009efb
 8009e7c:	08009eed 	.word	0x08009eed
 8009e80:	2b40      	cmp	r3, #64	; 0x40
 8009e82:	d036      	beq.n	8009ef2 <UART_SetConfig+0x6b6>
 8009e84:	e039      	b.n	8009efa <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8009e86:	f7fd fa85 	bl	8007394 <HAL_RCCEx_GetD3PCLK1Freq>
 8009e8a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009e8c:	e03b      	b.n	8009f06 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009e8e:	f107 0314 	add.w	r3, r7, #20
 8009e92:	4618      	mov	r0, r3
 8009e94:	f7fd fa94 	bl	80073c0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009e98:	69bb      	ldr	r3, [r7, #24]
 8009e9a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009e9c:	e033      	b.n	8009f06 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009e9e:	f107 0308 	add.w	r3, r7, #8
 8009ea2:	4618      	mov	r0, r3
 8009ea4:	f7fd fbe0 	bl	8007668 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009eac:	e02b      	b.n	8009f06 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009eae:	4b0a      	ldr	r3, [pc, #40]	; (8009ed8 <UART_SetConfig+0x69c>)
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	f003 0320 	and.w	r3, r3, #32
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d009      	beq.n	8009ece <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009eba:	4b07      	ldr	r3, [pc, #28]	; (8009ed8 <UART_SetConfig+0x69c>)
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	08db      	lsrs	r3, r3, #3
 8009ec0:	f003 0303 	and.w	r3, r3, #3
 8009ec4:	4a08      	ldr	r2, [pc, #32]	; (8009ee8 <UART_SetConfig+0x6ac>)
 8009ec6:	fa22 f303 	lsr.w	r3, r2, r3
 8009eca:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009ecc:	e01b      	b.n	8009f06 <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 8009ece:	4b06      	ldr	r3, [pc, #24]	; (8009ee8 <UART_SetConfig+0x6ac>)
 8009ed0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009ed2:	e018      	b.n	8009f06 <UART_SetConfig+0x6ca>
 8009ed4:	40011400 	.word	0x40011400
 8009ed8:	58024400 	.word	0x58024400
 8009edc:	40007800 	.word	0x40007800
 8009ee0:	40007c00 	.word	0x40007c00
 8009ee4:	58000c00 	.word	0x58000c00
 8009ee8:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009eec:	4bc4      	ldr	r3, [pc, #784]	; (800a200 <UART_SetConfig+0x9c4>)
 8009eee:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009ef0:	e009      	b.n	8009f06 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009ef2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009ef6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009ef8:	e005      	b.n	8009f06 <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 8009efa:	2300      	movs	r3, #0
 8009efc:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8009efe:	2301      	movs	r3, #1
 8009f00:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8009f04:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009f06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	f000 81da 	beq.w	800a2c2 <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f12:	4abc      	ldr	r2, [pc, #752]	; (800a204 <UART_SetConfig+0x9c8>)
 8009f14:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009f18:	461a      	mov	r2, r3
 8009f1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f1c:	fbb3 f3f2 	udiv	r3, r3, r2
 8009f20:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	685a      	ldr	r2, [r3, #4]
 8009f26:	4613      	mov	r3, r2
 8009f28:	005b      	lsls	r3, r3, #1
 8009f2a:	4413      	add	r3, r2
 8009f2c:	6a3a      	ldr	r2, [r7, #32]
 8009f2e:	429a      	cmp	r2, r3
 8009f30:	d305      	bcc.n	8009f3e <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	685b      	ldr	r3, [r3, #4]
 8009f36:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009f38:	6a3a      	ldr	r2, [r7, #32]
 8009f3a:	429a      	cmp	r2, r3
 8009f3c:	d903      	bls.n	8009f46 <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 8009f3e:	2301      	movs	r3, #1
 8009f40:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8009f44:	e1bd      	b.n	800a2c2 <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009f46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f48:	4618      	mov	r0, r3
 8009f4a:	f04f 0100 	mov.w	r1, #0
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f52:	4aac      	ldr	r2, [pc, #688]	; (800a204 <UART_SetConfig+0x9c8>)
 8009f54:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009f58:	b29a      	uxth	r2, r3
 8009f5a:	f04f 0300 	mov.w	r3, #0
 8009f5e:	f7f6 f9bb 	bl	80002d8 <__aeabi_uldivmod>
 8009f62:	4602      	mov	r2, r0
 8009f64:	460b      	mov	r3, r1
 8009f66:	4610      	mov	r0, r2
 8009f68:	4619      	mov	r1, r3
 8009f6a:	f04f 0200 	mov.w	r2, #0
 8009f6e:	f04f 0300 	mov.w	r3, #0
 8009f72:	020b      	lsls	r3, r1, #8
 8009f74:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009f78:	0202      	lsls	r2, r0, #8
 8009f7a:	6879      	ldr	r1, [r7, #4]
 8009f7c:	6849      	ldr	r1, [r1, #4]
 8009f7e:	0849      	lsrs	r1, r1, #1
 8009f80:	4608      	mov	r0, r1
 8009f82:	f04f 0100 	mov.w	r1, #0
 8009f86:	1814      	adds	r4, r2, r0
 8009f88:	eb43 0501 	adc.w	r5, r3, r1
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	685b      	ldr	r3, [r3, #4]
 8009f90:	461a      	mov	r2, r3
 8009f92:	f04f 0300 	mov.w	r3, #0
 8009f96:	4620      	mov	r0, r4
 8009f98:	4629      	mov	r1, r5
 8009f9a:	f7f6 f99d 	bl	80002d8 <__aeabi_uldivmod>
 8009f9e:	4602      	mov	r2, r0
 8009fa0:	460b      	mov	r3, r1
 8009fa2:	4613      	mov	r3, r2
 8009fa4:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009fa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fa8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009fac:	d308      	bcc.n	8009fc0 <UART_SetConfig+0x784>
 8009fae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fb0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009fb4:	d204      	bcs.n	8009fc0 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009fbc:	60da      	str	r2, [r3, #12]
 8009fbe:	e180      	b.n	800a2c2 <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 8009fc0:	2301      	movs	r3, #1
 8009fc2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8009fc6:	e17c      	b.n	800a2c2 <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	69db      	ldr	r3, [r3, #28]
 8009fcc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009fd0:	f040 80bf 	bne.w	800a152 <UART_SetConfig+0x916>
  {
    switch (clocksource)
 8009fd4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009fd8:	2b20      	cmp	r3, #32
 8009fda:	dc49      	bgt.n	800a070 <UART_SetConfig+0x834>
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	db7c      	blt.n	800a0da <UART_SetConfig+0x89e>
 8009fe0:	2b20      	cmp	r3, #32
 8009fe2:	d87a      	bhi.n	800a0da <UART_SetConfig+0x89e>
 8009fe4:	a201      	add	r2, pc, #4	; (adr r2, 8009fec <UART_SetConfig+0x7b0>)
 8009fe6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fea:	bf00      	nop
 8009fec:	0800a077 	.word	0x0800a077
 8009ff0:	0800a07f 	.word	0x0800a07f
 8009ff4:	0800a0db 	.word	0x0800a0db
 8009ff8:	0800a0db 	.word	0x0800a0db
 8009ffc:	0800a087 	.word	0x0800a087
 800a000:	0800a0db 	.word	0x0800a0db
 800a004:	0800a0db 	.word	0x0800a0db
 800a008:	0800a0db 	.word	0x0800a0db
 800a00c:	0800a097 	.word	0x0800a097
 800a010:	0800a0db 	.word	0x0800a0db
 800a014:	0800a0db 	.word	0x0800a0db
 800a018:	0800a0db 	.word	0x0800a0db
 800a01c:	0800a0db 	.word	0x0800a0db
 800a020:	0800a0db 	.word	0x0800a0db
 800a024:	0800a0db 	.word	0x0800a0db
 800a028:	0800a0db 	.word	0x0800a0db
 800a02c:	0800a0a7 	.word	0x0800a0a7
 800a030:	0800a0db 	.word	0x0800a0db
 800a034:	0800a0db 	.word	0x0800a0db
 800a038:	0800a0db 	.word	0x0800a0db
 800a03c:	0800a0db 	.word	0x0800a0db
 800a040:	0800a0db 	.word	0x0800a0db
 800a044:	0800a0db 	.word	0x0800a0db
 800a048:	0800a0db 	.word	0x0800a0db
 800a04c:	0800a0db 	.word	0x0800a0db
 800a050:	0800a0db 	.word	0x0800a0db
 800a054:	0800a0db 	.word	0x0800a0db
 800a058:	0800a0db 	.word	0x0800a0db
 800a05c:	0800a0db 	.word	0x0800a0db
 800a060:	0800a0db 	.word	0x0800a0db
 800a064:	0800a0db 	.word	0x0800a0db
 800a068:	0800a0db 	.word	0x0800a0db
 800a06c:	0800a0cd 	.word	0x0800a0cd
 800a070:	2b40      	cmp	r3, #64	; 0x40
 800a072:	d02e      	beq.n	800a0d2 <UART_SetConfig+0x896>
 800a074:	e031      	b.n	800a0da <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a076:	f7fb fd4f 	bl	8005b18 <HAL_RCC_GetPCLK1Freq>
 800a07a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a07c:	e033      	b.n	800a0e6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a07e:	f7fb fd61 	bl	8005b44 <HAL_RCC_GetPCLK2Freq>
 800a082:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a084:	e02f      	b.n	800a0e6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a086:	f107 0314 	add.w	r3, r7, #20
 800a08a:	4618      	mov	r0, r3
 800a08c:	f7fd f998 	bl	80073c0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a090:	69bb      	ldr	r3, [r7, #24]
 800a092:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a094:	e027      	b.n	800a0e6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a096:	f107 0308 	add.w	r3, r7, #8
 800a09a:	4618      	mov	r0, r3
 800a09c:	f7fd fae4 	bl	8007668 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a0a4:	e01f      	b.n	800a0e6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a0a6:	4b58      	ldr	r3, [pc, #352]	; (800a208 <UART_SetConfig+0x9cc>)
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	f003 0320 	and.w	r3, r3, #32
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d009      	beq.n	800a0c6 <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a0b2:	4b55      	ldr	r3, [pc, #340]	; (800a208 <UART_SetConfig+0x9cc>)
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	08db      	lsrs	r3, r3, #3
 800a0b8:	f003 0303 	and.w	r3, r3, #3
 800a0bc:	4a53      	ldr	r2, [pc, #332]	; (800a20c <UART_SetConfig+0x9d0>)
 800a0be:	fa22 f303 	lsr.w	r3, r2, r3
 800a0c2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a0c4:	e00f      	b.n	800a0e6 <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 800a0c6:	4b51      	ldr	r3, [pc, #324]	; (800a20c <UART_SetConfig+0x9d0>)
 800a0c8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a0ca:	e00c      	b.n	800a0e6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a0cc:	4b4c      	ldr	r3, [pc, #304]	; (800a200 <UART_SetConfig+0x9c4>)
 800a0ce:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a0d0:	e009      	b.n	800a0e6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a0d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a0d6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a0d8:	e005      	b.n	800a0e6 <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 800a0da:	2300      	movs	r3, #0
 800a0dc:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800a0de:	2301      	movs	r3, #1
 800a0e0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800a0e4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a0e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	f000 80ea 	beq.w	800a2c2 <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0f2:	4a44      	ldr	r2, [pc, #272]	; (800a204 <UART_SetConfig+0x9c8>)
 800a0f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a0f8:	461a      	mov	r2, r3
 800a0fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0fc:	fbb3 f3f2 	udiv	r3, r3, r2
 800a100:	005a      	lsls	r2, r3, #1
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	685b      	ldr	r3, [r3, #4]
 800a106:	085b      	lsrs	r3, r3, #1
 800a108:	441a      	add	r2, r3
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	685b      	ldr	r3, [r3, #4]
 800a10e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a112:	b29b      	uxth	r3, r3
 800a114:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a116:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a118:	2b0f      	cmp	r3, #15
 800a11a:	d916      	bls.n	800a14a <UART_SetConfig+0x90e>
 800a11c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a11e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a122:	d212      	bcs.n	800a14a <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a126:	b29b      	uxth	r3, r3
 800a128:	f023 030f 	bic.w	r3, r3, #15
 800a12c:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a12e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a130:	085b      	lsrs	r3, r3, #1
 800a132:	b29b      	uxth	r3, r3
 800a134:	f003 0307 	and.w	r3, r3, #7
 800a138:	b29a      	uxth	r2, r3
 800a13a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a13c:	4313      	orrs	r3, r2
 800a13e:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800a146:	60da      	str	r2, [r3, #12]
 800a148:	e0bb      	b.n	800a2c2 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800a14a:	2301      	movs	r3, #1
 800a14c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800a150:	e0b7      	b.n	800a2c2 <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a152:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a156:	2b20      	cmp	r3, #32
 800a158:	dc4a      	bgt.n	800a1f0 <UART_SetConfig+0x9b4>
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	f2c0 8086 	blt.w	800a26c <UART_SetConfig+0xa30>
 800a160:	2b20      	cmp	r3, #32
 800a162:	f200 8083 	bhi.w	800a26c <UART_SetConfig+0xa30>
 800a166:	a201      	add	r2, pc, #4	; (adr r2, 800a16c <UART_SetConfig+0x930>)
 800a168:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a16c:	0800a1f7 	.word	0x0800a1f7
 800a170:	0800a211 	.word	0x0800a211
 800a174:	0800a26d 	.word	0x0800a26d
 800a178:	0800a26d 	.word	0x0800a26d
 800a17c:	0800a219 	.word	0x0800a219
 800a180:	0800a26d 	.word	0x0800a26d
 800a184:	0800a26d 	.word	0x0800a26d
 800a188:	0800a26d 	.word	0x0800a26d
 800a18c:	0800a229 	.word	0x0800a229
 800a190:	0800a26d 	.word	0x0800a26d
 800a194:	0800a26d 	.word	0x0800a26d
 800a198:	0800a26d 	.word	0x0800a26d
 800a19c:	0800a26d 	.word	0x0800a26d
 800a1a0:	0800a26d 	.word	0x0800a26d
 800a1a4:	0800a26d 	.word	0x0800a26d
 800a1a8:	0800a26d 	.word	0x0800a26d
 800a1ac:	0800a239 	.word	0x0800a239
 800a1b0:	0800a26d 	.word	0x0800a26d
 800a1b4:	0800a26d 	.word	0x0800a26d
 800a1b8:	0800a26d 	.word	0x0800a26d
 800a1bc:	0800a26d 	.word	0x0800a26d
 800a1c0:	0800a26d 	.word	0x0800a26d
 800a1c4:	0800a26d 	.word	0x0800a26d
 800a1c8:	0800a26d 	.word	0x0800a26d
 800a1cc:	0800a26d 	.word	0x0800a26d
 800a1d0:	0800a26d 	.word	0x0800a26d
 800a1d4:	0800a26d 	.word	0x0800a26d
 800a1d8:	0800a26d 	.word	0x0800a26d
 800a1dc:	0800a26d 	.word	0x0800a26d
 800a1e0:	0800a26d 	.word	0x0800a26d
 800a1e4:	0800a26d 	.word	0x0800a26d
 800a1e8:	0800a26d 	.word	0x0800a26d
 800a1ec:	0800a25f 	.word	0x0800a25f
 800a1f0:	2b40      	cmp	r3, #64	; 0x40
 800a1f2:	d037      	beq.n	800a264 <UART_SetConfig+0xa28>
 800a1f4:	e03a      	b.n	800a26c <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a1f6:	f7fb fc8f 	bl	8005b18 <HAL_RCC_GetPCLK1Freq>
 800a1fa:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a1fc:	e03c      	b.n	800a278 <UART_SetConfig+0xa3c>
 800a1fe:	bf00      	nop
 800a200:	003d0900 	.word	0x003d0900
 800a204:	0800cd60 	.word	0x0800cd60
 800a208:	58024400 	.word	0x58024400
 800a20c:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a210:	f7fb fc98 	bl	8005b44 <HAL_RCC_GetPCLK2Freq>
 800a214:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a216:	e02f      	b.n	800a278 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a218:	f107 0314 	add.w	r3, r7, #20
 800a21c:	4618      	mov	r0, r3
 800a21e:	f7fd f8cf 	bl	80073c0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a222:	69bb      	ldr	r3, [r7, #24]
 800a224:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a226:	e027      	b.n	800a278 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a228:	f107 0308 	add.w	r3, r7, #8
 800a22c:	4618      	mov	r0, r3
 800a22e:	f7fd fa1b 	bl	8007668 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a236:	e01f      	b.n	800a278 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a238:	4b2c      	ldr	r3, [pc, #176]	; (800a2ec <UART_SetConfig+0xab0>)
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	f003 0320 	and.w	r3, r3, #32
 800a240:	2b00      	cmp	r3, #0
 800a242:	d009      	beq.n	800a258 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a244:	4b29      	ldr	r3, [pc, #164]	; (800a2ec <UART_SetConfig+0xab0>)
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	08db      	lsrs	r3, r3, #3
 800a24a:	f003 0303 	and.w	r3, r3, #3
 800a24e:	4a28      	ldr	r2, [pc, #160]	; (800a2f0 <UART_SetConfig+0xab4>)
 800a250:	fa22 f303 	lsr.w	r3, r2, r3
 800a254:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a256:	e00f      	b.n	800a278 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 800a258:	4b25      	ldr	r3, [pc, #148]	; (800a2f0 <UART_SetConfig+0xab4>)
 800a25a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a25c:	e00c      	b.n	800a278 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a25e:	4b25      	ldr	r3, [pc, #148]	; (800a2f4 <UART_SetConfig+0xab8>)
 800a260:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a262:	e009      	b.n	800a278 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a264:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a268:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a26a:	e005      	b.n	800a278 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 800a26c:	2300      	movs	r3, #0
 800a26e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800a270:	2301      	movs	r3, #1
 800a272:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800a276:	bf00      	nop
    }

    if (pclk != 0U)
 800a278:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d021      	beq.n	800a2c2 <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a282:	4a1d      	ldr	r2, [pc, #116]	; (800a2f8 <UART_SetConfig+0xabc>)
 800a284:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a288:	461a      	mov	r2, r3
 800a28a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a28c:	fbb3 f2f2 	udiv	r2, r3, r2
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	685b      	ldr	r3, [r3, #4]
 800a294:	085b      	lsrs	r3, r3, #1
 800a296:	441a      	add	r2, r3
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	685b      	ldr	r3, [r3, #4]
 800a29c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a2a0:	b29b      	uxth	r3, r3
 800a2a2:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a2a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2a6:	2b0f      	cmp	r3, #15
 800a2a8:	d908      	bls.n	800a2bc <UART_SetConfig+0xa80>
 800a2aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a2b0:	d204      	bcs.n	800a2bc <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a2b8:	60da      	str	r2, [r3, #12]
 800a2ba:	e002      	b.n	800a2c2 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800a2bc:	2301      	movs	r3, #1
 800a2be:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	2201      	movs	r2, #1
 800a2c6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	2201      	movs	r2, #1
 800a2ce:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	2200      	movs	r2, #0
 800a2d6:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	2200      	movs	r2, #0
 800a2dc:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800a2de:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800a2e2:	4618      	mov	r0, r3
 800a2e4:	3738      	adds	r7, #56	; 0x38
 800a2e6:	46bd      	mov	sp, r7
 800a2e8:	bdb0      	pop	{r4, r5, r7, pc}
 800a2ea:	bf00      	nop
 800a2ec:	58024400 	.word	0x58024400
 800a2f0:	03d09000 	.word	0x03d09000
 800a2f4:	003d0900 	.word	0x003d0900
 800a2f8:	0800cd60 	.word	0x0800cd60

0800a2fc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a2fc:	b480      	push	{r7}
 800a2fe:	b083      	sub	sp, #12
 800a300:	af00      	add	r7, sp, #0
 800a302:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a308:	f003 0301 	and.w	r3, r3, #1
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d00a      	beq.n	800a326 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	685b      	ldr	r3, [r3, #4]
 800a316:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	430a      	orrs	r2, r1
 800a324:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a32a:	f003 0302 	and.w	r3, r3, #2
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d00a      	beq.n	800a348 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	685b      	ldr	r3, [r3, #4]
 800a338:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	430a      	orrs	r2, r1
 800a346:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a34c:	f003 0304 	and.w	r3, r3, #4
 800a350:	2b00      	cmp	r3, #0
 800a352:	d00a      	beq.n	800a36a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	685b      	ldr	r3, [r3, #4]
 800a35a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	430a      	orrs	r2, r1
 800a368:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a36e:	f003 0308 	and.w	r3, r3, #8
 800a372:	2b00      	cmp	r3, #0
 800a374:	d00a      	beq.n	800a38c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	685b      	ldr	r3, [r3, #4]
 800a37c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	430a      	orrs	r2, r1
 800a38a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a390:	f003 0310 	and.w	r3, r3, #16
 800a394:	2b00      	cmp	r3, #0
 800a396:	d00a      	beq.n	800a3ae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	689b      	ldr	r3, [r3, #8]
 800a39e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	430a      	orrs	r2, r1
 800a3ac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3b2:	f003 0320 	and.w	r3, r3, #32
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d00a      	beq.n	800a3d0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	689b      	ldr	r3, [r3, #8]
 800a3c0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	430a      	orrs	r2, r1
 800a3ce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d01a      	beq.n	800a412 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	685b      	ldr	r3, [r3, #4]
 800a3e2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	430a      	orrs	r2, r1
 800a3f0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a3f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a3fa:	d10a      	bne.n	800a412 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	685b      	ldr	r3, [r3, #4]
 800a402:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	430a      	orrs	r2, r1
 800a410:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a416:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d00a      	beq.n	800a434 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	685b      	ldr	r3, [r3, #4]
 800a424:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	430a      	orrs	r2, r1
 800a432:	605a      	str	r2, [r3, #4]
  }
}
 800a434:	bf00      	nop
 800a436:	370c      	adds	r7, #12
 800a438:	46bd      	mov	sp, r7
 800a43a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a43e:	4770      	bx	lr

0800a440 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a440:	b580      	push	{r7, lr}
 800a442:	b086      	sub	sp, #24
 800a444:	af02      	add	r7, sp, #8
 800a446:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	2200      	movs	r2, #0
 800a44c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a450:	f7f7 f93e 	bl	80016d0 <HAL_GetTick>
 800a454:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	f003 0308 	and.w	r3, r3, #8
 800a460:	2b08      	cmp	r3, #8
 800a462:	d10e      	bne.n	800a482 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a464:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a468:	9300      	str	r3, [sp, #0]
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	2200      	movs	r2, #0
 800a46e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a472:	6878      	ldr	r0, [r7, #4]
 800a474:	f000 f82f 	bl	800a4d6 <UART_WaitOnFlagUntilTimeout>
 800a478:	4603      	mov	r3, r0
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d001      	beq.n	800a482 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a47e:	2303      	movs	r3, #3
 800a480:	e025      	b.n	800a4ce <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	f003 0304 	and.w	r3, r3, #4
 800a48c:	2b04      	cmp	r3, #4
 800a48e:	d10e      	bne.n	800a4ae <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a490:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a494:	9300      	str	r3, [sp, #0]
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	2200      	movs	r2, #0
 800a49a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a49e:	6878      	ldr	r0, [r7, #4]
 800a4a0:	f000 f819 	bl	800a4d6 <UART_WaitOnFlagUntilTimeout>
 800a4a4:	4603      	mov	r3, r0
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d001      	beq.n	800a4ae <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a4aa:	2303      	movs	r3, #3
 800a4ac:	e00f      	b.n	800a4ce <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	2220      	movs	r2, #32
 800a4b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	2220      	movs	r2, #32
 800a4ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	2200      	movs	r2, #0
 800a4c2:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	2200      	movs	r2, #0
 800a4c8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a4cc:	2300      	movs	r3, #0
}
 800a4ce:	4618      	mov	r0, r3
 800a4d0:	3710      	adds	r7, #16
 800a4d2:	46bd      	mov	sp, r7
 800a4d4:	bd80      	pop	{r7, pc}

0800a4d6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a4d6:	b580      	push	{r7, lr}
 800a4d8:	b084      	sub	sp, #16
 800a4da:	af00      	add	r7, sp, #0
 800a4dc:	60f8      	str	r0, [r7, #12]
 800a4de:	60b9      	str	r1, [r7, #8]
 800a4e0:	603b      	str	r3, [r7, #0]
 800a4e2:	4613      	mov	r3, r2
 800a4e4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a4e6:	e062      	b.n	800a5ae <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a4e8:	69bb      	ldr	r3, [r7, #24]
 800a4ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4ee:	d05e      	beq.n	800a5ae <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a4f0:	f7f7 f8ee 	bl	80016d0 <HAL_GetTick>
 800a4f4:	4602      	mov	r2, r0
 800a4f6:	683b      	ldr	r3, [r7, #0]
 800a4f8:	1ad3      	subs	r3, r2, r3
 800a4fa:	69ba      	ldr	r2, [r7, #24]
 800a4fc:	429a      	cmp	r2, r3
 800a4fe:	d302      	bcc.n	800a506 <UART_WaitOnFlagUntilTimeout+0x30>
 800a500:	69bb      	ldr	r3, [r7, #24]
 800a502:	2b00      	cmp	r3, #0
 800a504:	d11d      	bne.n	800a542 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	681a      	ldr	r2, [r3, #0]
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a514:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	689a      	ldr	r2, [r3, #8]
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	f022 0201 	bic.w	r2, r2, #1
 800a524:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	2220      	movs	r2, #32
 800a52a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	2220      	movs	r2, #32
 800a532:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	2200      	movs	r2, #0
 800a53a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800a53e:	2303      	movs	r3, #3
 800a540:	e045      	b.n	800a5ce <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	f003 0304 	and.w	r3, r3, #4
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d02e      	beq.n	800a5ae <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	69db      	ldr	r3, [r3, #28]
 800a556:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a55a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a55e:	d126      	bne.n	800a5ae <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a568:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	681a      	ldr	r2, [r3, #0]
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a578:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	689a      	ldr	r2, [r3, #8]
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	f022 0201 	bic.w	r2, r2, #1
 800a588:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	2220      	movs	r2, #32
 800a58e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	2220      	movs	r2, #32
 800a596:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	2220      	movs	r2, #32
 800a59e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	2200      	movs	r2, #0
 800a5a6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800a5aa:	2303      	movs	r3, #3
 800a5ac:	e00f      	b.n	800a5ce <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	69da      	ldr	r2, [r3, #28]
 800a5b4:	68bb      	ldr	r3, [r7, #8]
 800a5b6:	4013      	ands	r3, r2
 800a5b8:	68ba      	ldr	r2, [r7, #8]
 800a5ba:	429a      	cmp	r2, r3
 800a5bc:	bf0c      	ite	eq
 800a5be:	2301      	moveq	r3, #1
 800a5c0:	2300      	movne	r3, #0
 800a5c2:	b2db      	uxtb	r3, r3
 800a5c4:	461a      	mov	r2, r3
 800a5c6:	79fb      	ldrb	r3, [r7, #7]
 800a5c8:	429a      	cmp	r2, r3
 800a5ca:	d08d      	beq.n	800a4e8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a5cc:	2300      	movs	r3, #0
}
 800a5ce:	4618      	mov	r0, r3
 800a5d0:	3710      	adds	r7, #16
 800a5d2:	46bd      	mov	sp, r7
 800a5d4:	bd80      	pop	{r7, pc}

0800a5d6 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a5d6:	b480      	push	{r7}
 800a5d8:	b083      	sub	sp, #12
 800a5da:	af00      	add	r7, sp, #0
 800a5dc:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	681a      	ldr	r2, [r3, #0]
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800a5ec:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	689a      	ldr	r2, [r3, #8]
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800a5fc:	609a      	str	r2, [r3, #8]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	2220      	movs	r2, #32
 800a602:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800a606:	bf00      	nop
 800a608:	370c      	adds	r7, #12
 800a60a:	46bd      	mov	sp, r7
 800a60c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a610:	4770      	bx	lr
	...

0800a614 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a614:	b480      	push	{r7}
 800a616:	b083      	sub	sp, #12
 800a618:	af00      	add	r7, sp, #0
 800a61a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	681a      	ldr	r2, [r3, #0]
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800a62a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	6899      	ldr	r1, [r3, #8]
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	681a      	ldr	r2, [r3, #0]
 800a636:	4b0f      	ldr	r3, [pc, #60]	; (800a674 <UART_EndRxTransfer+0x60>)
 800a638:	400b      	ands	r3, r1
 800a63a:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a640:	2b01      	cmp	r3, #1
 800a642:	d107      	bne.n	800a654 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	681a      	ldr	r2, [r3, #0]
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	f022 0210 	bic.w	r2, r2, #16
 800a652:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	2220      	movs	r2, #32
 800a658:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	2200      	movs	r2, #0
 800a660:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	2200      	movs	r2, #0
 800a666:	671a      	str	r2, [r3, #112]	; 0x70
}
 800a668:	bf00      	nop
 800a66a:	370c      	adds	r7, #12
 800a66c:	46bd      	mov	sp, r7
 800a66e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a672:	4770      	bx	lr
 800a674:	effffffe 	.word	0xeffffffe

0800a678 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a678:	b580      	push	{r7, lr}
 800a67a:	b084      	sub	sp, #16
 800a67c:	af00      	add	r7, sp, #0
 800a67e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a684:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	69db      	ldr	r3, [r3, #28]
 800a68a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a68e:	d014      	beq.n	800a6ba <UART_DMATransmitCplt+0x42>
  {
    huart->TxXferCount = 0U;
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	2200      	movs	r2, #0
 800a694:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	689a      	ldr	r2, [r3, #8]
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a6a6:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	681a      	ldr	r2, [r3, #0]
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a6b6:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a6b8:	e002      	b.n	800a6c0 <UART_DMATransmitCplt+0x48>
    HAL_UART_TxCpltCallback(huart);
 800a6ba:	68f8      	ldr	r0, [r7, #12]
 800a6bc:	f7ff f894 	bl	80097e8 <HAL_UART_TxCpltCallback>
}
 800a6c0:	bf00      	nop
 800a6c2:	3710      	adds	r7, #16
 800a6c4:	46bd      	mov	sp, r7
 800a6c6:	bd80      	pop	{r7, pc}

0800a6c8 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a6c8:	b580      	push	{r7, lr}
 800a6ca:	b084      	sub	sp, #16
 800a6cc:	af00      	add	r7, sp, #0
 800a6ce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6d4:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800a6d6:	68f8      	ldr	r0, [r7, #12]
 800a6d8:	f7ff f890 	bl	80097fc <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a6dc:	bf00      	nop
 800a6de:	3710      	adds	r7, #16
 800a6e0:	46bd      	mov	sp, r7
 800a6e2:	bd80      	pop	{r7, pc}

0800a6e4 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a6e4:	b580      	push	{r7, lr}
 800a6e6:	b086      	sub	sp, #24
 800a6e8:	af00      	add	r7, sp, #0
 800a6ea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6f0:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800a6f2:	697b      	ldr	r3, [r7, #20]
 800a6f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a6f8:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800a6fa:	697b      	ldr	r3, [r7, #20]
 800a6fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a700:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800a702:	697b      	ldr	r3, [r7, #20]
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	689b      	ldr	r3, [r3, #8]
 800a708:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a70c:	2b80      	cmp	r3, #128	; 0x80
 800a70e:	d109      	bne.n	800a724 <UART_DMAError+0x40>
 800a710:	693b      	ldr	r3, [r7, #16]
 800a712:	2b21      	cmp	r3, #33	; 0x21
 800a714:	d106      	bne.n	800a724 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800a716:	697b      	ldr	r3, [r7, #20]
 800a718:	2200      	movs	r2, #0
 800a71a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800a71e:	6978      	ldr	r0, [r7, #20]
 800a720:	f7ff ff59 	bl	800a5d6 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800a724:	697b      	ldr	r3, [r7, #20]
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	689b      	ldr	r3, [r3, #8]
 800a72a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a72e:	2b40      	cmp	r3, #64	; 0x40
 800a730:	d109      	bne.n	800a746 <UART_DMAError+0x62>
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	2b22      	cmp	r3, #34	; 0x22
 800a736:	d106      	bne.n	800a746 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800a738:	697b      	ldr	r3, [r7, #20]
 800a73a:	2200      	movs	r2, #0
 800a73c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800a740:	6978      	ldr	r0, [r7, #20]
 800a742:	f7ff ff67 	bl	800a614 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a746:	697b      	ldr	r3, [r7, #20]
 800a748:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a74c:	f043 0210 	orr.w	r2, r3, #16
 800a750:	697b      	ldr	r3, [r7, #20]
 800a752:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a756:	6978      	ldr	r0, [r7, #20]
 800a758:	f7ff f85a 	bl	8009810 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a75c:	bf00      	nop
 800a75e:	3718      	adds	r7, #24
 800a760:	46bd      	mov	sp, r7
 800a762:	bd80      	pop	{r7, pc}

0800a764 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a764:	b580      	push	{r7, lr}
 800a766:	b084      	sub	sp, #16
 800a768:	af00      	add	r7, sp, #0
 800a76a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a770:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	2200      	movs	r2, #0
 800a776:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	2200      	movs	r2, #0
 800a77e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a782:	68f8      	ldr	r0, [r7, #12]
 800a784:	f7ff f844 	bl	8009810 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a788:	bf00      	nop
 800a78a:	3710      	adds	r7, #16
 800a78c:	46bd      	mov	sp, r7
 800a78e:	bd80      	pop	{r7, pc}

0800a790 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a790:	b580      	push	{r7, lr}
 800a792:	b082      	sub	sp, #8
 800a794:	af00      	add	r7, sp, #0
 800a796:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	681a      	ldr	r2, [r3, #0]
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a7a6:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	2220      	movs	r2, #32
 800a7ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	2200      	movs	r2, #0
 800a7b4:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a7b6:	6878      	ldr	r0, [r7, #4]
 800a7b8:	f7ff f816 	bl	80097e8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a7bc:	bf00      	nop
 800a7be:	3708      	adds	r7, #8
 800a7c0:	46bd      	mov	sp, r7
 800a7c2:	bd80      	pop	{r7, pc}

0800a7c4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a7c4:	b480      	push	{r7}
 800a7c6:	b083      	sub	sp, #12
 800a7c8:	af00      	add	r7, sp, #0
 800a7ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a7cc:	bf00      	nop
 800a7ce:	370c      	adds	r7, #12
 800a7d0:	46bd      	mov	sp, r7
 800a7d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7d6:	4770      	bx	lr

0800a7d8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800a7d8:	b480      	push	{r7}
 800a7da:	b083      	sub	sp, #12
 800a7dc:	af00      	add	r7, sp, #0
 800a7de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800a7e0:	bf00      	nop
 800a7e2:	370c      	adds	r7, #12
 800a7e4:	46bd      	mov	sp, r7
 800a7e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ea:	4770      	bx	lr

0800a7ec <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800a7ec:	b480      	push	{r7}
 800a7ee:	b083      	sub	sp, #12
 800a7f0:	af00      	add	r7, sp, #0
 800a7f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a7f4:	bf00      	nop
 800a7f6:	370c      	adds	r7, #12
 800a7f8:	46bd      	mov	sp, r7
 800a7fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7fe:	4770      	bx	lr

0800a800 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a800:	b480      	push	{r7}
 800a802:	b085      	sub	sp, #20
 800a804:	af00      	add	r7, sp, #0
 800a806:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a80e:	2b01      	cmp	r3, #1
 800a810:	d101      	bne.n	800a816 <HAL_UARTEx_DisableFifoMode+0x16>
 800a812:	2302      	movs	r3, #2
 800a814:	e027      	b.n	800a866 <HAL_UARTEx_DisableFifoMode+0x66>
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	2201      	movs	r2, #1
 800a81a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	2224      	movs	r2, #36	; 0x24
 800a822:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	681a      	ldr	r2, [r3, #0]
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	f022 0201 	bic.w	r2, r2, #1
 800a83c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a844:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	2200      	movs	r2, #0
 800a84a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	68fa      	ldr	r2, [r7, #12]
 800a852:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	2220      	movs	r2, #32
 800a858:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	2200      	movs	r2, #0
 800a860:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a864:	2300      	movs	r3, #0
}
 800a866:	4618      	mov	r0, r3
 800a868:	3714      	adds	r7, #20
 800a86a:	46bd      	mov	sp, r7
 800a86c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a870:	4770      	bx	lr

0800a872 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a872:	b580      	push	{r7, lr}
 800a874:	b084      	sub	sp, #16
 800a876:	af00      	add	r7, sp, #0
 800a878:	6078      	str	r0, [r7, #4]
 800a87a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a882:	2b01      	cmp	r3, #1
 800a884:	d101      	bne.n	800a88a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a886:	2302      	movs	r3, #2
 800a888:	e02d      	b.n	800a8e6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	2201      	movs	r2, #1
 800a88e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	2224      	movs	r2, #36	; 0x24
 800a896:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	681a      	ldr	r2, [r3, #0]
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	f022 0201 	bic.w	r2, r2, #1
 800a8b0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	689b      	ldr	r3, [r3, #8]
 800a8b8:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	683a      	ldr	r2, [r7, #0]
 800a8c2:	430a      	orrs	r2, r1
 800a8c4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a8c6:	6878      	ldr	r0, [r7, #4]
 800a8c8:	f000 f850 	bl	800a96c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	68fa      	ldr	r2, [r7, #12]
 800a8d2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	2220      	movs	r2, #32
 800a8d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	2200      	movs	r2, #0
 800a8e0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a8e4:	2300      	movs	r3, #0
}
 800a8e6:	4618      	mov	r0, r3
 800a8e8:	3710      	adds	r7, #16
 800a8ea:	46bd      	mov	sp, r7
 800a8ec:	bd80      	pop	{r7, pc}

0800a8ee <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a8ee:	b580      	push	{r7, lr}
 800a8f0:	b084      	sub	sp, #16
 800a8f2:	af00      	add	r7, sp, #0
 800a8f4:	6078      	str	r0, [r7, #4]
 800a8f6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a8fe:	2b01      	cmp	r3, #1
 800a900:	d101      	bne.n	800a906 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a902:	2302      	movs	r3, #2
 800a904:	e02d      	b.n	800a962 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	2201      	movs	r2, #1
 800a90a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	2224      	movs	r2, #36	; 0x24
 800a912:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	681a      	ldr	r2, [r3, #0]
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	f022 0201 	bic.w	r2, r2, #1
 800a92c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	689b      	ldr	r3, [r3, #8]
 800a934:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	683a      	ldr	r2, [r7, #0]
 800a93e:	430a      	orrs	r2, r1
 800a940:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a942:	6878      	ldr	r0, [r7, #4]
 800a944:	f000 f812 	bl	800a96c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	68fa      	ldr	r2, [r7, #12]
 800a94e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	2220      	movs	r2, #32
 800a954:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	2200      	movs	r2, #0
 800a95c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a960:	2300      	movs	r3, #0
}
 800a962:	4618      	mov	r0, r3
 800a964:	3710      	adds	r7, #16
 800a966:	46bd      	mov	sp, r7
 800a968:	bd80      	pop	{r7, pc}
	...

0800a96c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a96c:	b480      	push	{r7}
 800a96e:	b085      	sub	sp, #20
 800a970:	af00      	add	r7, sp, #0
 800a972:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d108      	bne.n	800a98e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	2201      	movs	r2, #1
 800a980:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	2201      	movs	r2, #1
 800a988:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a98c:	e031      	b.n	800a9f2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a98e:	2310      	movs	r3, #16
 800a990:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a992:	2310      	movs	r3, #16
 800a994:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	689b      	ldr	r3, [r3, #8]
 800a99c:	0e5b      	lsrs	r3, r3, #25
 800a99e:	b2db      	uxtb	r3, r3
 800a9a0:	f003 0307 	and.w	r3, r3, #7
 800a9a4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	689b      	ldr	r3, [r3, #8]
 800a9ac:	0f5b      	lsrs	r3, r3, #29
 800a9ae:	b2db      	uxtb	r3, r3
 800a9b0:	f003 0307 	and.w	r3, r3, #7
 800a9b4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a9b6:	7bbb      	ldrb	r3, [r7, #14]
 800a9b8:	7b3a      	ldrb	r2, [r7, #12]
 800a9ba:	4911      	ldr	r1, [pc, #68]	; (800aa00 <UARTEx_SetNbDataToProcess+0x94>)
 800a9bc:	5c8a      	ldrb	r2, [r1, r2]
 800a9be:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a9c2:	7b3a      	ldrb	r2, [r7, #12]
 800a9c4:	490f      	ldr	r1, [pc, #60]	; (800aa04 <UARTEx_SetNbDataToProcess+0x98>)
 800a9c6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a9c8:	fb93 f3f2 	sdiv	r3, r3, r2
 800a9cc:	b29a      	uxth	r2, r3
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a9d4:	7bfb      	ldrb	r3, [r7, #15]
 800a9d6:	7b7a      	ldrb	r2, [r7, #13]
 800a9d8:	4909      	ldr	r1, [pc, #36]	; (800aa00 <UARTEx_SetNbDataToProcess+0x94>)
 800a9da:	5c8a      	ldrb	r2, [r1, r2]
 800a9dc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a9e0:	7b7a      	ldrb	r2, [r7, #13]
 800a9e2:	4908      	ldr	r1, [pc, #32]	; (800aa04 <UARTEx_SetNbDataToProcess+0x98>)
 800a9e4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a9e6:	fb93 f3f2 	sdiv	r3, r3, r2
 800a9ea:	b29a      	uxth	r2, r3
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800a9f2:	bf00      	nop
 800a9f4:	3714      	adds	r7, #20
 800a9f6:	46bd      	mov	sp, r7
 800a9f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9fc:	4770      	bx	lr
 800a9fe:	bf00      	nop
 800aa00:	0800cd78 	.word	0x0800cd78
 800aa04:	0800cd80 	.word	0x0800cd80

0800aa08 <arm_fir_f32>:
void arm_fir_f32(
  const arm_fir_instance_f32 * S,
  const float32_t * pSrc,
        float32_t * pDst,
        uint32_t blockSize)
{
 800aa08:	b480      	push	{r7}
 800aa0a:	b08f      	sub	sp, #60	; 0x3c
 800aa0c:	af00      	add	r7, sp, #0
 800aa0e:	60f8      	str	r0, [r7, #12]
 800aa10:	60b9      	str	r1, [r7, #8]
 800aa12:	607a      	str	r2, [r7, #4]
 800aa14:	603b      	str	r3, [r7, #0]
        float32_t *pState = S->pState;                 /* State pointer */
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	685b      	ldr	r3, [r3, #4]
 800aa1a:	637b      	str	r3, [r7, #52]	; 0x34
  const float32_t *pCoeffs = S->pCoeffs;               /* Coefficient pointer */
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	689b      	ldr	r3, [r3, #8]
 800aa20:	617b      	str	r3, [r7, #20]
        float32_t *pStateCurnt;                        /* Points to the current sample of the state */
        float32_t *px;                                 /* Temporary pointer for state buffer */
  const float32_t *pb;                                 /* Temporary pointer for coefficient buffer */
        float32_t acc0;                                /* Accumulator */
        uint32_t numTaps = S->numTaps;                 /* Number of filter coefficients in the filter */
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	881b      	ldrh	r3, [r3, #0]
 800aa26:	613b      	str	r3, [r7, #16]
        float32_t c0;                                           /* Temporary variable to hold coefficient value */
#endif

  /* S->pState points to state array which contains previous frame (numTaps - 1) samples */
  /* pStateCurnt points to the location where the new input data should be written */
  pStateCurnt = &(S->pState[(numTaps - 1U)]);
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	685a      	ldr	r2, [r3, #4]
 800aa2c:	6939      	ldr	r1, [r7, #16]
 800aa2e:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800aa32:	440b      	add	r3, r1
 800aa34:	009b      	lsls	r3, r3, #2
 800aa36:	4413      	add	r3, r2
 800aa38:	633b      	str	r3, [r7, #48]	; 0x30
  blkCnt = blockSize % 0x8U;

#else

  /* Initialize blkCnt with number of taps */
  blkCnt = blockSize;
 800aa3a:	683b      	ldr	r3, [r7, #0]
 800aa3c:	61bb      	str	r3, [r7, #24]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  while (blkCnt > 0U)
 800aa3e:	e034      	b.n	800aaaa <arm_fir_f32+0xa2>
  {
    /* Copy one sample at a time into state buffer */
    *pStateCurnt++ = *pSrc++;
 800aa40:	68ba      	ldr	r2, [r7, #8]
 800aa42:	1d13      	adds	r3, r2, #4
 800aa44:	60bb      	str	r3, [r7, #8]
 800aa46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa48:	1d19      	adds	r1, r3, #4
 800aa4a:	6339      	str	r1, [r7, #48]	; 0x30
 800aa4c:	6812      	ldr	r2, [r2, #0]
 800aa4e:	601a      	str	r2, [r3, #0]

    /* Set the accumulator to zero */
    acc0 = 0.0f;
 800aa50:	f04f 0300 	mov.w	r3, #0
 800aa54:	627b      	str	r3, [r7, #36]	; 0x24

    /* Initialize state pointer */
    px = pState;
 800aa56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa58:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Initialize Coefficient pointer */
    pb = pCoeffs;
 800aa5a:	697b      	ldr	r3, [r7, #20]
 800aa5c:	62bb      	str	r3, [r7, #40]	; 0x28

    i = numTaps;
 800aa5e:	693b      	ldr	r3, [r7, #16]
 800aa60:	623b      	str	r3, [r7, #32]

    /* Perform the multiply-accumulates */
    while (i > 0U)
 800aa62:	e014      	b.n	800aa8e <arm_fir_f32+0x86>
    {
      /* acc =  b[numTaps-1] * x[n-numTaps-1] + b[numTaps-2] * x[n-numTaps-2] + b[numTaps-3] * x[n-numTaps-3] +...+ b[0] * x[0] */
      acc0 += *px++ * *pb++;
 800aa64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa66:	1d1a      	adds	r2, r3, #4
 800aa68:	62fa      	str	r2, [r7, #44]	; 0x2c
 800aa6a:	ed93 7a00 	vldr	s14, [r3]
 800aa6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa70:	1d1a      	adds	r2, r3, #4
 800aa72:	62ba      	str	r2, [r7, #40]	; 0x28
 800aa74:	edd3 7a00 	vldr	s15, [r3]
 800aa78:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa7c:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800aa80:	ee77 7a27 	vadd.f32	s15, s14, s15
 800aa84:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

      i--;
 800aa88:	6a3b      	ldr	r3, [r7, #32]
 800aa8a:	3b01      	subs	r3, #1
 800aa8c:	623b      	str	r3, [r7, #32]
    while (i > 0U)
 800aa8e:	6a3b      	ldr	r3, [r7, #32]
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d1e7      	bne.n	800aa64 <arm_fir_f32+0x5c>
    }

    /* Store result in destination buffer. */
    *pDst++ = acc0;
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	1d1a      	adds	r2, r3, #4
 800aa98:	607a      	str	r2, [r7, #4]
 800aa9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aa9c:	601a      	str	r2, [r3, #0]

    /* Advance state pointer by 1 for the next sample */
    pState = pState + 1U;
 800aa9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aaa0:	3304      	adds	r3, #4
 800aaa2:	637b      	str	r3, [r7, #52]	; 0x34

    /* Decrement loop counter */
    blkCnt--;
 800aaa4:	69bb      	ldr	r3, [r7, #24]
 800aaa6:	3b01      	subs	r3, #1
 800aaa8:	61bb      	str	r3, [r7, #24]
  while (blkCnt > 0U)
 800aaaa:	69bb      	ldr	r3, [r7, #24]
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d1c7      	bne.n	800aa40 <arm_fir_f32+0x38>
  /* Processing is complete.
     Now copy the last numTaps - 1 samples to the start of the state buffer.
     This prepares the state buffer for the next function call. */

  /* Points to the start of the state buffer */
  pStateCurnt = S->pState;
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	685b      	ldr	r3, [r3, #4]
 800aab4:	633b      	str	r3, [r7, #48]	; 0x30
  tapCnt = (numTaps - 1U) % 0x4U;

#else

  /* Initialize tapCnt with number of taps */
  tapCnt = (numTaps - 1U);
 800aab6:	693b      	ldr	r3, [r7, #16]
 800aab8:	3b01      	subs	r3, #1
 800aaba:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  /* Copy remaining data */
  while (tapCnt > 0U)
 800aabc:	e00a      	b.n	800aad4 <arm_fir_f32+0xcc>
  {
    *pStateCurnt++ = *pState++;
 800aabe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800aac0:	1d13      	adds	r3, r2, #4
 800aac2:	637b      	str	r3, [r7, #52]	; 0x34
 800aac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aac6:	1d19      	adds	r1, r3, #4
 800aac8:	6339      	str	r1, [r7, #48]	; 0x30
 800aaca:	6812      	ldr	r2, [r2, #0]
 800aacc:	601a      	str	r2, [r3, #0]

    /* Decrement loop counter */
    tapCnt--;
 800aace:	69fb      	ldr	r3, [r7, #28]
 800aad0:	3b01      	subs	r3, #1
 800aad2:	61fb      	str	r3, [r7, #28]
  while (tapCnt > 0U)
 800aad4:	69fb      	ldr	r3, [r7, #28]
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d1f1      	bne.n	800aabe <arm_fir_f32+0xb6>
  }

}
 800aada:	bf00      	nop
 800aadc:	bf00      	nop
 800aade:	373c      	adds	r7, #60	; 0x3c
 800aae0:	46bd      	mov	sp, r7
 800aae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aae6:	4770      	bx	lr

0800aae8 <arm_fir_init_f32>:
        arm_fir_instance_f32 * S,
        uint16_t numTaps,
  const float32_t * pCoeffs,
        float32_t * pState,
        uint32_t blockSize)
{
 800aae8:	b580      	push	{r7, lr}
 800aaea:	b084      	sub	sp, #16
 800aaec:	af00      	add	r7, sp, #0
 800aaee:	60f8      	str	r0, [r7, #12]
 800aaf0:	607a      	str	r2, [r7, #4]
 800aaf2:	603b      	str	r3, [r7, #0]
 800aaf4:	460b      	mov	r3, r1
 800aaf6:	817b      	strh	r3, [r7, #10]
  /* Assign filter taps */
  S->numTaps = numTaps;
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	897a      	ldrh	r2, [r7, #10]
 800aafc:	801a      	strh	r2, [r3, #0]

  /* Assign coefficient pointer */
  S->pCoeffs = pCoeffs;
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	687a      	ldr	r2, [r7, #4]
 800ab02:	609a      	str	r2, [r3, #8]

  /* Clear state buffer. The size is always (blockSize + numTaps - 1) */
#if defined(ARM_MATH_MVEF) && !defined(ARM_MATH_AUTOVECTORIZE)
  memset(pState, 0, (numTaps + (blockSize - 1U) + blockSize) * sizeof(float32_t));
#else
  memset(pState, 0, (numTaps + (blockSize - 1U)) * sizeof(float32_t));
 800ab04:	897a      	ldrh	r2, [r7, #10]
 800ab06:	69bb      	ldr	r3, [r7, #24]
 800ab08:	4413      	add	r3, r2
 800ab0a:	3b01      	subs	r3, #1
 800ab0c:	009b      	lsls	r3, r3, #2
 800ab0e:	461a      	mov	r2, r3
 800ab10:	2100      	movs	r1, #0
 800ab12:	6838      	ldr	r0, [r7, #0]
 800ab14:	f001 ff24 	bl	800c960 <memset>
#endif
  /* Assign state pointer */
  S->pState = pState;
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	683a      	ldr	r2, [r7, #0]
 800ab1c:	605a      	str	r2, [r3, #4]
}
 800ab1e:	bf00      	nop
 800ab20:	3710      	adds	r7, #16
 800ab22:	46bd      	mov	sp, r7
 800ab24:	bd80      	pop	{r7, pc}
	...

0800ab28 <arm_q15_to_float>:
#else
void arm_q15_to_float(
  const q15_t * pSrc,
        float32_t * pDst,
        uint32_t blockSize)
{
 800ab28:	b480      	push	{r7}
 800ab2a:	b087      	sub	sp, #28
 800ab2c:	af00      	add	r7, sp, #0
 800ab2e:	60f8      	str	r0, [r7, #12]
 800ab30:	60b9      	str	r1, [r7, #8]
 800ab32:	607a      	str	r2, [r7, #4]
        uint32_t blkCnt;                               /* Loop counter */
  const q15_t *pIn = pSrc;                             /* Source pointer */
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	613b      	str	r3, [r7, #16]
  blkCnt = blockSize % 0x4U;

#else

  /* Initialize blkCnt with number of samples */
  blkCnt = blockSize;
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	617b      	str	r3, [r7, #20]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  while (blkCnt > 0U)
 800ab3c:	e014      	b.n	800ab68 <arm_q15_to_float+0x40>
  {
    /* C = (float32_t) A / 32768 */

    /* Convert from q15 to float and store result in destination buffer */
    *pDst++ = ((float32_t) *pIn++ / 32768.0f);
 800ab3e:	693b      	ldr	r3, [r7, #16]
 800ab40:	1c9a      	adds	r2, r3, #2
 800ab42:	613a      	str	r2, [r7, #16]
 800ab44:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ab48:	ee07 3a90 	vmov	s15, r3
 800ab4c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800ab50:	68bb      	ldr	r3, [r7, #8]
 800ab52:	1d1a      	adds	r2, r3, #4
 800ab54:	60ba      	str	r2, [r7, #8]
 800ab56:	eddf 6a09 	vldr	s13, [pc, #36]	; 800ab7c <arm_q15_to_float+0x54>
 800ab5a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800ab5e:	edc3 7a00 	vstr	s15, [r3]

    /* Decrement loop counter */
    blkCnt--;
 800ab62:	697b      	ldr	r3, [r7, #20]
 800ab64:	3b01      	subs	r3, #1
 800ab66:	617b      	str	r3, [r7, #20]
  while (blkCnt > 0U)
 800ab68:	697b      	ldr	r3, [r7, #20]
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d1e7      	bne.n	800ab3e <arm_q15_to_float+0x16>
  }

}
 800ab6e:	bf00      	nop
 800ab70:	bf00      	nop
 800ab72:	371c      	adds	r7, #28
 800ab74:	46bd      	mov	sp, r7
 800ab76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab7a:	4770      	bx	lr
 800ab7c:	47000000 	.word	0x47000000

0800ab80 <D16_GENERIC>:
 800ab80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab84:	b089      	sub	sp, #36	; 0x24
 800ab86:	6993      	ldr	r3, [r2, #24]
 800ab88:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 800ab8a:	9103      	str	r1, [sp, #12]
 800ab8c:	9307      	str	r3, [sp, #28]
 800ab8e:	69d3      	ldr	r3, [r2, #28]
 800ab90:	e9d2 c102 	ldrd	ip, r1, [r2, #8]
 800ab94:	e9d2 4a04 	ldrd	r4, sl, [r2, #16]
 800ab98:	9106      	str	r1, [sp, #24]
 800ab9a:	e9d2 810c 	ldrd	r8, r1, [r2, #48]	; 0x30
 800ab9e:	2d00      	cmp	r5, #0
 800aba0:	d063      	beq.n	800ac6a <D16_GENERIC+0xea>
 800aba2:	f001 0520 	and.w	r5, r1, #32
 800aba6:	f001 0110 	and.w	r1, r1, #16
 800abaa:	f8df e0e0 	ldr.w	lr, [pc, #224]	; 800ac8c <D16_GENERIC+0x10c>
 800abae:	46c1      	mov	r9, r8
 800abb0:	9104      	str	r1, [sp, #16]
 800abb2:	2100      	movs	r1, #0
 800abb4:	9505      	str	r5, [sp, #20]
 800abb6:	e04d      	b.n	800ac54 <D16_GENERIC+0xd4>
 800abb8:	5d87      	ldrb	r7, [r0, r6]
 800abba:	7805      	ldrb	r5, [r0, #0]
 800abbc:	eb00 0046 	add.w	r0, r0, r6, lsl #1
 800abc0:	eb05 2707 	add.w	r7, r5, r7, lsl #8
 800abc4:	b2fe      	uxtb	r6, r7
 800abc6:	f3c7 2707 	ubfx	r7, r7, #8, #8
 800abca:	f85e 5026 	ldr.w	r5, [lr, r6, lsl #2]
 800abce:	f85e 6027 	ldr.w	r6, [lr, r7, lsl #2]
 800abd2:	441d      	add	r5, r3
 800abd4:	eb06 2395 	add.w	r3, r6, r5, lsr #10
 800abd8:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800abdc:	f3c3 0609 	ubfx	r6, r3, #0, #10
 800abe0:	0a9b      	lsrs	r3, r3, #10
 800abe2:	ea46 4605 	orr.w	r6, r6, r5, lsl #16
 800abe6:	4d27      	ldr	r5, [pc, #156]	; (800ac84 <D16_GENERIC+0x104>)
 800abe8:	fb26 c505 	smlad	r5, r6, r5, ip
 800abec:	4f26      	ldr	r7, [pc, #152]	; (800ac88 <D16_GENERIC+0x108>)
 800abee:	fb26 fc07 	smuad	ip, r6, r7
 800abf2:	9e04      	ldr	r6, [sp, #16]
 800abf4:	f101 0801 	add.w	r8, r1, #1
 800abf8:	f5a5 6500 	sub.w	r5, r5, #2048	; 0x800
 800abfc:	b1ae      	cbz	r6, 800ac2a <D16_GENERIC+0xaa>
 800abfe:	442c      	add	r4, r5
 800ac00:	f8d2 b020 	ldr.w	fp, [r2, #32]
 800ac04:	eba4 040a 	sub.w	r4, r4, sl
 800ac08:	46aa      	mov	sl, r5
 800ac0a:	17e7      	asrs	r7, r4, #31
 800ac0c:	fba4 450b 	umull	r4, r5, r4, fp
 800ac10:	e9cd 4500 	strd	r4, r5, [sp]
 800ac14:	fb0b 5407 	mla	r4, fp, r7, r5
 800ac18:	9401      	str	r4, [sp, #4]
 800ac1a:	e9dd 4500 	ldrd	r4, r5, [sp]
 800ac1e:	f114 4400 	adds.w	r4, r4, #2147483648	; 0x80000000
 800ac22:	f145 0500 	adc.w	r5, r5, #0
 800ac26:	006c      	lsls	r4, r5, #1
 800ac28:	4625      	mov	r5, r4
 800ac2a:	f8b2 b028 	ldrh.w	fp, [r2, #40]	; 0x28
 800ac2e:	042d      	lsls	r5, r5, #16
 800ac30:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800ac34:	2700      	movs	r7, #0
 800ac36:	fb01 fb0b 	mul.w	fp, r1, fp
 800ac3a:	fa1f f188 	uxth.w	r1, r8
 800ac3e:	fbc9 6705 	smlal	r6, r7, r9, r5
 800ac42:	9e03      	ldr	r6, [sp, #12]
 800ac44:	10bd      	asrs	r5, r7, #2
 800ac46:	f305 050f 	ssat	r5, #16, r5
 800ac4a:	f826 501b 	strh.w	r5, [r6, fp, lsl #1]
 800ac4e:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 800ac50:	428d      	cmp	r5, r1
 800ac52:	d90a      	bls.n	800ac6a <D16_GENERIC+0xea>
 800ac54:	8d55      	ldrh	r5, [r2, #42]	; 0x2a
 800ac56:	2d01      	cmp	r5, #1
 800ac58:	b2ee      	uxtb	r6, r5
 800ac5a:	d1ad      	bne.n	800abb8 <D16_GENERIC+0x38>
 800ac5c:	9d05      	ldr	r5, [sp, #20]
 800ac5e:	f850 7b02 	ldr.w	r7, [r0], #2
 800ac62:	2d00      	cmp	r5, #0
 800ac64:	d0ae      	beq.n	800abc4 <D16_GENERIC+0x44>
 800ac66:	ba7f      	rev16	r7, r7
 800ac68:	e7ac      	b.n	800abc4 <D16_GENERIC+0x44>
 800ac6a:	2000      	movs	r0, #0
 800ac6c:	9906      	ldr	r1, [sp, #24]
 800ac6e:	61d3      	str	r3, [r2, #28]
 800ac70:	9b07      	ldr	r3, [sp, #28]
 800ac72:	f8c2 c008 	str.w	ip, [r2, #8]
 800ac76:	60d1      	str	r1, [r2, #12]
 800ac78:	6193      	str	r3, [r2, #24]
 800ac7a:	e9c2 4a04 	strd	r4, sl, [r2, #16]
 800ac7e:	b009      	add	sp, #36	; 0x24
 800ac80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac84:	00030001 	.word	0x00030001
 800ac88:	00010003 	.word	0x00010003
 800ac8c:	24000000 	.word	0x24000000

0800ac90 <D24_GENERIC>:
 800ac90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac94:	e9d2 4304 	ldrd	r4, r3, [r2, #16]
 800ac98:	b089      	sub	sp, #36	; 0x24
 800ac9a:	8cd6      	ldrh	r6, [r2, #38]	; 0x26
 800ac9c:	9303      	str	r3, [sp, #12]
 800ac9e:	6993      	ldr	r3, [r2, #24]
 800aca0:	9104      	str	r1, [sp, #16]
 800aca2:	9307      	str	r3, [sp, #28]
 800aca4:	69d1      	ldr	r1, [r2, #28]
 800aca6:	e9d2 3802 	ldrd	r3, r8, [r2, #8]
 800acaa:	e9d2 a50c 	ldrd	sl, r5, [r2, #48]	; 0x30
 800acae:	2e00      	cmp	r6, #0
 800acb0:	f000 8088 	beq.w	800adc4 <D24_GENERIC+0x134>
 800acb4:	f005 0620 	and.w	r6, r5, #32
 800acb8:	f005 0510 	and.w	r5, r5, #16
 800acbc:	f04f 0c00 	mov.w	ip, #0
 800acc0:	f8df e140 	ldr.w	lr, [pc, #320]	; 800ae04 <D24_GENERIC+0x174>
 800acc4:	9606      	str	r6, [sp, #24]
 800acc6:	9505      	str	r5, [sp, #20]
 800acc8:	e064      	b.n	800ad94 <D24_GENERIC+0x104>
 800acca:	f810 5016 	ldrb.w	r5, [r0, r6, lsl #1]
 800acce:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 800acd2:	f810 b007 	ldrb.w	fp, [r0, r7]
 800acd6:	042d      	lsls	r5, r5, #16
 800acd8:	19f0      	adds	r0, r6, r7
 800acda:	eb05 250b 	add.w	r5, r5, fp, lsl #8
 800acde:	44a9      	add	r9, r5
 800ace0:	fa5f f689 	uxtb.w	r6, r9
 800ace4:	f3c9 2707 	ubfx	r7, r9, #8, #8
 800ace8:	ea4f 4919 	mov.w	r9, r9, lsr #16
 800acec:	f85e 6026 	ldr.w	r6, [lr, r6, lsl #2]
 800acf0:	f85e 7027 	ldr.w	r7, [lr, r7, lsl #2]
 800acf4:	eb06 2691 	add.w	r6, r6, r1, lsr #10
 800acf8:	f85e 1029 	ldr.w	r1, [lr, r9, lsl #2]
 800acfc:	eb07 2796 	add.w	r7, r7, r6, lsr #10
 800ad00:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800ad04:	f3c7 0509 	ubfx	r5, r7, #0, #10
 800ad08:	eb01 2197 	add.w	r1, r1, r7, lsr #10
 800ad0c:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
 800ad10:	4d3a      	ldr	r5, [pc, #232]	; (800adfc <D24_GENERIC+0x16c>)
 800ad12:	fb26 8705 	smlad	r7, r6, r5, r8
 800ad16:	4d3a      	ldr	r5, [pc, #232]	; (800ae00 <D24_GENERIC+0x170>)
 800ad18:	fb26 3805 	smlad	r8, r6, r5, r3
 800ad1c:	f3c1 0309 	ubfx	r3, r1, #0, #10
 800ad20:	eb03 0b43 	add.w	fp, r3, r3, lsl #1
 800ad24:	2301      	movs	r3, #1
 800ad26:	eb08 084b 	add.w	r8, r8, fp, lsl #1
 800ad2a:	fb26 f603 	smuad	r6, r6, r3
 800ad2e:	eb0c 0903 	add.w	r9, ip, r3
 800ad32:	eb0b 0306 	add.w	r3, fp, r6
 800ad36:	9e05      	ldr	r6, [sp, #20]
 800ad38:	f5a7 55d8 	sub.w	r5, r7, #6912	; 0x1b00
 800ad3c:	b1ae      	cbz	r6, 800ad6a <D24_GENERIC+0xda>
 800ad3e:	442c      	add	r4, r5
 800ad40:	9e03      	ldr	r6, [sp, #12]
 800ad42:	f8d2 b020 	ldr.w	fp, [r2, #32]
 800ad46:	1ba4      	subs	r4, r4, r6
 800ad48:	9503      	str	r5, [sp, #12]
 800ad4a:	17e7      	asrs	r7, r4, #31
 800ad4c:	fba4 450b 	umull	r4, r5, r4, fp
 800ad50:	e9cd 4500 	strd	r4, r5, [sp]
 800ad54:	fb0b 5407 	mla	r4, fp, r7, r5
 800ad58:	9401      	str	r4, [sp, #4]
 800ad5a:	e9dd 4500 	ldrd	r4, r5, [sp]
 800ad5e:	f114 4400 	adds.w	r4, r4, #2147483648	; 0x80000000
 800ad62:	f145 0500 	adc.w	r5, r5, #0
 800ad66:	006c      	lsls	r4, r5, #1
 800ad68:	4625      	mov	r5, r4
 800ad6a:	f8b2 b028 	ldrh.w	fp, [r2, #40]	; 0x28
 800ad6e:	03ad      	lsls	r5, r5, #14
 800ad70:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800ad74:	2700      	movs	r7, #0
 800ad76:	fb0c fb0b 	mul.w	fp, ip, fp
 800ad7a:	fa1f fc89 	uxth.w	ip, r9
 800ad7e:	fbca 6705 	smlal	r6, r7, sl, r5
 800ad82:	9e04      	ldr	r6, [sp, #16]
 800ad84:	10bd      	asrs	r5, r7, #2
 800ad86:	f305 050f 	ssat	r5, #16, r5
 800ad8a:	f826 501b 	strh.w	r5, [r6, fp, lsl #1]
 800ad8e:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 800ad90:	4565      	cmp	r5, ip
 800ad92:	d917      	bls.n	800adc4 <D24_GENERIC+0x134>
 800ad94:	8d55      	ldrh	r5, [r2, #42]	; 0x2a
 800ad96:	f890 9000 	ldrb.w	r9, [r0]
 800ad9a:	b2ef      	uxtb	r7, r5
 800ad9c:	2d01      	cmp	r5, #1
 800ad9e:	b23e      	sxth	r6, r7
 800ada0:	d193      	bne.n	800acca <D24_GENERIC+0x3a>
 800ada2:	9d06      	ldr	r5, [sp, #24]
 800ada4:	b1dd      	cbz	r5, 800adde <D24_GENERIC+0x14e>
 800ada6:	78c7      	ldrb	r7, [r0, #3]
 800ada8:	ea4f 2609 	mov.w	r6, r9, lsl #8
 800adac:	f01c 0f01 	tst.w	ip, #1
 800adb0:	ea4f 2507 	mov.w	r5, r7, lsl #8
 800adb4:	eb06 4607 	add.w	r6, r6, r7, lsl #16
 800adb8:	d11a      	bne.n	800adf0 <D24_GENERIC+0x160>
 800adba:	f890 9001 	ldrb.w	r9, [r0, #1]
 800adbe:	3002      	adds	r0, #2
 800adc0:	44b1      	add	r9, r6
 800adc2:	e78d      	b.n	800ace0 <D24_GENERIC+0x50>
 800adc4:	6093      	str	r3, [r2, #8]
 800adc6:	2000      	movs	r0, #0
 800adc8:	9b03      	ldr	r3, [sp, #12]
 800adca:	f8c2 800c 	str.w	r8, [r2, #12]
 800adce:	6153      	str	r3, [r2, #20]
 800add0:	9b07      	ldr	r3, [sp, #28]
 800add2:	61d1      	str	r1, [r2, #28]
 800add4:	6114      	str	r4, [r2, #16]
 800add6:	6193      	str	r3, [r2, #24]
 800add8:	b009      	add	sp, #36	; 0x24
 800adda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800adde:	7845      	ldrb	r5, [r0, #1]
 800ade0:	3003      	adds	r0, #3
 800ade2:	f810 6c01 	ldrb.w	r6, [r0, #-1]
 800ade6:	022d      	lsls	r5, r5, #8
 800ade8:	eb05 4506 	add.w	r5, r5, r6, lsl #16
 800adec:	44a9      	add	r9, r5
 800adee:	e777      	b.n	800ace0 <D24_GENERIC+0x50>
 800adf0:	7886      	ldrb	r6, [r0, #2]
 800adf2:	3004      	adds	r0, #4
 800adf4:	eb05 4506 	add.w	r5, r5, r6, lsl #16
 800adf8:	44a9      	add	r9, r5
 800adfa:	e771      	b.n	800ace0 <D24_GENERIC+0x50>
 800adfc:	00030001 	.word	0x00030001
 800ae00:	00060007 	.word	0x00060007
 800ae04:	24000000 	.word	0x24000000

0800ae08 <D32_GENERIC>:
 800ae08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae0c:	e9d2 4304 	ldrd	r4, r3, [r2, #16]
 800ae10:	b089      	sub	sp, #36	; 0x24
 800ae12:	6b15      	ldr	r5, [r2, #48]	; 0x30
 800ae14:	8cd6      	ldrh	r6, [r2, #38]	; 0x26
 800ae16:	9302      	str	r3, [sp, #8]
 800ae18:	6993      	ldr	r3, [r2, #24]
 800ae1a:	9104      	str	r1, [sp, #16]
 800ae1c:	9307      	str	r3, [sp, #28]
 800ae1e:	9503      	str	r5, [sp, #12]
 800ae20:	69d1      	ldr	r1, [r2, #28]
 800ae22:	6b55      	ldr	r5, [r2, #52]	; 0x34
 800ae24:	e9d2 3802 	ldrd	r3, r8, [r2, #8]
 800ae28:	2e00      	cmp	r6, #0
 800ae2a:	f000 8097 	beq.w	800af5c <D32_GENERIC+0x154>
 800ae2e:	f005 0620 	and.w	r6, r5, #32
 800ae32:	f005 0510 	and.w	r5, r5, #16
 800ae36:	f04f 0e00 	mov.w	lr, #0
 800ae3a:	f8df c150 	ldr.w	ip, [pc, #336]	; 800af8c <D32_GENERIC+0x184>
 800ae3e:	9606      	str	r6, [sp, #24]
 800ae40:	9505      	str	r5, [sp, #20]
 800ae42:	e079      	b.n	800af38 <D32_GENERIC+0x130>
 800ae44:	783d      	ldrb	r5, [r7, #0]
 800ae46:	f810 b009 	ldrb.w	fp, [r0, r9]
 800ae4a:	042d      	lsls	r5, r5, #16
 800ae4c:	f810 a006 	ldrb.w	sl, [r0, r6]
 800ae50:	f890 9000 	ldrb.w	r9, [r0]
 800ae54:	eb07 0046 	add.w	r0, r7, r6, lsl #1
 800ae58:	eb05 650b 	add.w	r5, r5, fp, lsl #24
 800ae5c:	eb05 250a 	add.w	r5, r5, sl, lsl #8
 800ae60:	44a9      	add	r9, r5
 800ae62:	fa5f f789 	uxtb.w	r7, r9
 800ae66:	f3c9 2507 	ubfx	r5, r9, #8, #8
 800ae6a:	f3c9 4607 	ubfx	r6, r9, #16, #8
 800ae6e:	ea4f 6919 	mov.w	r9, r9, lsr #24
 800ae72:	f85c 7027 	ldr.w	r7, [ip, r7, lsl #2]
 800ae76:	f85c 5025 	ldr.w	r5, [ip, r5, lsl #2]
 800ae7a:	eb07 2191 	add.w	r1, r7, r1, lsr #10
 800ae7e:	f85c 6026 	ldr.w	r6, [ip, r6, lsl #2]
 800ae82:	f85c 7029 	ldr.w	r7, [ip, r9, lsl #2]
 800ae86:	eb05 2591 	add.w	r5, r5, r1, lsr #10
 800ae8a:	f3c1 0909 	ubfx	r9, r1, #0, #10
 800ae8e:	eb06 2695 	add.w	r6, r6, r5, lsr #10
 800ae92:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800ae96:	eb07 2196 	add.w	r1, r7, r6, lsr #10
 800ae9a:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800ae9e:	ea45 4909 	orr.w	r9, r5, r9, lsl #16
 800aea2:	f3c1 0509 	ubfx	r5, r1, #0, #10
 800aea6:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
 800aeaa:	4d34      	ldr	r5, [pc, #208]	; (800af7c <D32_GENERIC+0x174>)
 800aeac:	fb29 8805 	smlad	r8, r9, r5, r8
 800aeb0:	f44f 3580 	mov.w	r5, #65536	; 0x10000
 800aeb4:	fb26 8705 	smlad	r7, r6, r5, r8
 800aeb8:	4d31      	ldr	r5, [pc, #196]	; (800af80 <D32_GENERIC+0x178>)
 800aeba:	fb29 3305 	smlad	r3, r9, r5, r3
 800aebe:	4d31      	ldr	r5, [pc, #196]	; (800af84 <D32_GENERIC+0x17c>)
 800aec0:	fb26 3805 	smlad	r8, r6, r5, r3
 800aec4:	2301      	movs	r3, #1
 800aec6:	fb29 f903 	smuad	r9, r9, r3
 800aeca:	4b2f      	ldr	r3, [pc, #188]	; (800af88 <D32_GENERIC+0x180>)
 800aecc:	fb26 9303 	smlad	r3, r6, r3, r9
 800aed0:	9e05      	ldr	r6, [sp, #20]
 800aed2:	f10e 0901 	add.w	r9, lr, #1
 800aed6:	f5a7 4580 	sub.w	r5, r7, #16384	; 0x4000
 800aeda:	b1ae      	cbz	r6, 800af08 <D32_GENERIC+0x100>
 800aedc:	442c      	add	r4, r5
 800aede:	9e02      	ldr	r6, [sp, #8]
 800aee0:	f8d2 a020 	ldr.w	sl, [r2, #32]
 800aee4:	1ba4      	subs	r4, r4, r6
 800aee6:	9502      	str	r5, [sp, #8]
 800aee8:	17e7      	asrs	r7, r4, #31
 800aeea:	fba4 450a 	umull	r4, r5, r4, sl
 800aeee:	e9cd 4500 	strd	r4, r5, [sp]
 800aef2:	fb0a 5407 	mla	r4, sl, r7, r5
 800aef6:	9401      	str	r4, [sp, #4]
 800aef8:	e9dd 4500 	ldrd	r4, r5, [sp]
 800aefc:	f114 4400 	adds.w	r4, r4, #2147483648	; 0x80000000
 800af00:	f145 0500 	adc.w	r5, r5, #0
 800af04:	006c      	lsls	r4, r5, #1
 800af06:	4625      	mov	r5, r4
 800af08:	f8b2 a028 	ldrh.w	sl, [r2, #40]	; 0x28
 800af0c:	036d      	lsls	r5, r5, #13
 800af0e:	9f03      	ldr	r7, [sp, #12]
 800af10:	fb0e fb0a 	mul.w	fp, lr, sl
 800af14:	fa1f fe89 	uxth.w	lr, r9
 800af18:	f04f 0a00 	mov.w	sl, #0
 800af1c:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
 800af20:	9e04      	ldr	r6, [sp, #16]
 800af22:	fbc7 9a05 	smlal	r9, sl, r7, r5
 800af26:	4657      	mov	r7, sl
 800af28:	10bd      	asrs	r5, r7, #2
 800af2a:	f305 050f 	ssat	r5, #16, r5
 800af2e:	f826 501b 	strh.w	r5, [r6, fp, lsl #1]
 800af32:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 800af34:	4575      	cmp	r5, lr
 800af36:	d911      	bls.n	800af5c <D32_GENERIC+0x154>
 800af38:	8d55      	ldrh	r5, [r2, #42]	; 0x2a
 800af3a:	b2ee      	uxtb	r6, r5
 800af3c:	2d01      	cmp	r5, #1
 800af3e:	eb00 0746 	add.w	r7, r0, r6, lsl #1
 800af42:	eb06 0946 	add.w	r9, r6, r6, lsl #1
 800af46:	f47f af7d 	bne.w	800ae44 <D32_GENERIC+0x3c>
 800af4a:	1d05      	adds	r5, r0, #4
 800af4c:	f8d0 9000 	ldr.w	r9, [r0]
 800af50:	9806      	ldr	r0, [sp, #24]
 800af52:	b180      	cbz	r0, 800af76 <D32_GENERIC+0x16e>
 800af54:	fa99 f999 	rev16.w	r9, r9
 800af58:	4628      	mov	r0, r5
 800af5a:	e782      	b.n	800ae62 <D32_GENERIC+0x5a>
 800af5c:	6093      	str	r3, [r2, #8]
 800af5e:	2000      	movs	r0, #0
 800af60:	9b02      	ldr	r3, [sp, #8]
 800af62:	f8c2 800c 	str.w	r8, [r2, #12]
 800af66:	6153      	str	r3, [r2, #20]
 800af68:	9b07      	ldr	r3, [sp, #28]
 800af6a:	61d1      	str	r1, [r2, #28]
 800af6c:	6114      	str	r4, [r2, #16]
 800af6e:	6193      	str	r3, [r2, #24]
 800af70:	b009      	add	sp, #36	; 0x24
 800af72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af76:	4628      	mov	r0, r5
 800af78:	e773      	b.n	800ae62 <D32_GENERIC+0x5a>
 800af7a:	bf00      	nop
 800af7c:	00060003 	.word	0x00060003
 800af80:	000a000c 	.word	0x000a000c
 800af84:	000c000a 	.word	0x000c000a
 800af88:	00030006 	.word	0x00030006
 800af8c:	24000000 	.word	0x24000000

0800af90 <D48_GENERIC>:
 800af90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af94:	6913      	ldr	r3, [r2, #16]
 800af96:	b089      	sub	sp, #36	; 0x24
 800af98:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 800af9a:	9301      	str	r3, [sp, #4]
 800af9c:	6953      	ldr	r3, [r2, #20]
 800af9e:	9104      	str	r1, [sp, #16]
 800afa0:	9302      	str	r3, [sp, #8]
 800afa2:	6993      	ldr	r3, [r2, #24]
 800afa4:	f8d2 c01c 	ldr.w	ip, [r2, #28]
 800afa8:	9307      	str	r3, [sp, #28]
 800afaa:	e9d2 3102 	ldrd	r3, r1, [r2, #8]
 800afae:	9100      	str	r1, [sp, #0]
 800afb0:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800afb2:	9103      	str	r1, [sp, #12]
 800afb4:	6b51      	ldr	r1, [r2, #52]	; 0x34
 800afb6:	2c00      	cmp	r4, #0
 800afb8:	f000 80be 	beq.w	800b138 <D48_GENERIC+0x1a8>
 800afbc:	f001 0420 	and.w	r4, r1, #32
 800afc0:	f001 0110 	and.w	r1, r1, #16
 800afc4:	f04f 0e00 	mov.w	lr, #0
 800afc8:	9105      	str	r1, [sp, #20]
 800afca:	9406      	str	r4, [sp, #24]
 800afcc:	4962      	ldr	r1, [pc, #392]	; (800b158 <D48_GENERIC+0x1c8>)
 800afce:	e0a0      	b.n	800b112 <D48_GENERIC+0x182>
 800afd0:	eb00 0608 	add.w	r6, r0, r8
 800afd4:	f810 a008 	ldrb.w	sl, [r0, r8]
 800afd8:	f810 9005 	ldrb.w	r9, [r0, r5]
 800afdc:	5df4      	ldrb	r4, [r6, r7]
 800afde:	443e      	add	r6, r7
 800afe0:	f890 b000 	ldrb.w	fp, [r0]
 800afe4:	0420      	lsls	r0, r4, #16
 800afe6:	eb06 0408 	add.w	r4, r6, r8
 800afea:	f816 6008 	ldrb.w	r6, [r6, r8]
 800afee:	eb00 6a0a 	add.w	sl, r0, sl, lsl #24
 800aff2:	f814 8007 	ldrb.w	r8, [r4, r7]
 800aff6:	4427      	add	r7, r4
 800aff8:	eb0a 2a09 	add.w	sl, sl, r9, lsl #8
 800affc:	eb08 2606 	add.w	r6, r8, r6, lsl #8
 800b000:	eb0a 040b 	add.w	r4, sl, fp
 800b004:	eb07 0045 	add.w	r0, r7, r5, lsl #1
 800b008:	f3c6 2807 	ubfx	r8, r6, #8, #8
 800b00c:	b2f7      	uxtb	r7, r6
 800b00e:	b2e6      	uxtb	r6, r4
 800b010:	f3c4 2507 	ubfx	r5, r4, #8, #8
 800b014:	f3c4 4907 	ubfx	r9, r4, #16, #8
 800b018:	ea4f 6b14 	mov.w	fp, r4, lsr #24
 800b01c:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 800b020:	f851 5025 	ldr.w	r5, [r1, r5, lsl #2]
 800b024:	eb06 269c 	add.w	r6, r6, ip, lsr #10
 800b028:	f851 9029 	ldr.w	r9, [r1, r9, lsl #2]
 800b02c:	f851 402b 	ldr.w	r4, [r1, fp, lsl #2]
 800b030:	eb05 2596 	add.w	r5, r5, r6, lsr #10
 800b034:	f851 7027 	ldr.w	r7, [r1, r7, lsl #2]
 800b038:	f851 c028 	ldr.w	ip, [r1, r8, lsl #2]
 800b03c:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800b040:	eb09 2995 	add.w	r9, r9, r5, lsr #10
 800b044:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800b048:	eb04 2499 	add.w	r4, r4, r9, lsr #10
 800b04c:	f3c9 0909 	ubfx	r9, r9, #0, #10
 800b050:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
 800b054:	9d00      	ldr	r5, [sp, #0]
 800b056:	eb07 2794 	add.w	r7, r7, r4, lsr #10
 800b05a:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800b05e:	eb0c 2c97 	add.w	ip, ip, r7, lsr #10
 800b062:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800b066:	ea44 4909 	orr.w	r9, r4, r9, lsl #16
 800b06a:	f3cc 0409 	ubfx	r4, ip, #0, #10
 800b06e:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 800b072:	4c3a      	ldr	r4, [pc, #232]	; (800b15c <D48_GENERIC+0x1cc>)
 800b074:	fb26 5a04 	smlad	sl, r6, r4, r5
 800b078:	4c39      	ldr	r4, [pc, #228]	; (800b160 <D48_GENERIC+0x1d0>)
 800b07a:	fb29 aa04 	smlad	sl, r9, r4, sl
 800b07e:	f44f 3480 	mov.w	r4, #65536	; 0x10000
 800b082:	fb27 aa04 	smlad	sl, r7, r4, sl
 800b086:	4c37      	ldr	r4, [pc, #220]	; (800b164 <D48_GENERIC+0x1d4>)
 800b088:	fb26 3304 	smlad	r3, r6, r4, r3
 800b08c:	f04f 141b 	mov.w	r4, #1769499	; 0x1b001b
 800b090:	fb29 3304 	smlad	r3, r9, r4, r3
 800b094:	4c34      	ldr	r4, [pc, #208]	; (800b168 <D48_GENERIC+0x1d8>)
 800b096:	fb27 3304 	smlad	r3, r7, r4, r3
 800b09a:	2501      	movs	r5, #1
 800b09c:	9300      	str	r3, [sp, #0]
 800b09e:	fb26 f605 	smuad	r6, r6, r5
 800b0a2:	4b32      	ldr	r3, [pc, #200]	; (800b16c <D48_GENERIC+0x1dc>)
 800b0a4:	fb29 6903 	smlad	r9, r9, r3, r6
 800b0a8:	4b31      	ldr	r3, [pc, #196]	; (800b170 <D48_GENERIC+0x1e0>)
 800b0aa:	fb27 9303 	smlad	r3, r7, r3, r9
 800b0ae:	9c05      	ldr	r4, [sp, #20]
 800b0b0:	eb0e 0805 	add.w	r8, lr, r5
 800b0b4:	f5aa 4a58 	sub.w	sl, sl, #55296	; 0xd800
 800b0b8:	b19c      	cbz	r4, 800b0e2 <D48_GENERIC+0x152>
 800b0ba:	9c01      	ldr	r4, [sp, #4]
 800b0bc:	9d02      	ldr	r5, [sp, #8]
 800b0be:	4454      	add	r4, sl
 800b0c0:	f8d2 9020 	ldr.w	r9, [r2, #32]
 800b0c4:	f8cd a008 	str.w	sl, [sp, #8]
 800b0c8:	1b64      	subs	r4, r4, r5
 800b0ca:	fba4 ab09 	umull	sl, fp, r4, r9
 800b0ce:	17e7      	asrs	r7, r4, #31
 800b0d0:	f11a 4400 	adds.w	r4, sl, #2147483648	; 0x80000000
 800b0d4:	fb09 bb07 	mla	fp, r9, r7, fp
 800b0d8:	f14b 0500 	adc.w	r5, fp, #0
 800b0dc:	006c      	lsls	r4, r5, #1
 800b0de:	46a2      	mov	sl, r4
 800b0e0:	9401      	str	r4, [sp, #4]
 800b0e2:	8d16      	ldrh	r6, [r2, #40]	; 0x28
 800b0e4:	ea4f 2aca 	mov.w	sl, sl, lsl #11
 800b0e8:	9d03      	ldr	r5, [sp, #12]
 800b0ea:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 800b0ee:	fb0e f606 	mul.w	r6, lr, r6
 800b0f2:	fa1f fe88 	uxth.w	lr, r8
 800b0f6:	f04f 0800 	mov.w	r8, #0
 800b0fa:	fbc5 780a 	smlal	r7, r8, r5, sl
 800b0fe:	4645      	mov	r5, r8
 800b100:	10ac      	asrs	r4, r5, #2
 800b102:	9d04      	ldr	r5, [sp, #16]
 800b104:	f304 040f 	ssat	r4, #16, r4
 800b108:	f825 4016 	strh.w	r4, [r5, r6, lsl #1]
 800b10c:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 800b10e:	4574      	cmp	r4, lr
 800b110:	d912      	bls.n	800b138 <D48_GENERIC+0x1a8>
 800b112:	8d54      	ldrh	r4, [r2, #42]	; 0x2a
 800b114:	b2e5      	uxtb	r5, r4
 800b116:	2c01      	cmp	r4, #1
 800b118:	eb05 0845 	add.w	r8, r5, r5, lsl #1
 800b11c:	f1c5 0700 	rsb	r7, r5, #0
 800b120:	f47f af56 	bne.w	800afd0 <D48_GENERIC+0x40>
 800b124:	9d06      	ldr	r5, [sp, #24]
 800b126:	e9d0 4600 	ldrd	r4, r6, [r0]
 800b12a:	3006      	adds	r0, #6
 800b12c:	2d00      	cmp	r5, #0
 800b12e:	f43f af6b 	beq.w	800b008 <D48_GENERIC+0x78>
 800b132:	ba64      	rev16	r4, r4
 800b134:	ba76      	rev16	r6, r6
 800b136:	e767      	b.n	800b008 <D48_GENERIC+0x78>
 800b138:	6093      	str	r3, [r2, #8]
 800b13a:	2000      	movs	r0, #0
 800b13c:	9b00      	ldr	r3, [sp, #0]
 800b13e:	f8c2 c01c 	str.w	ip, [r2, #28]
 800b142:	60d3      	str	r3, [r2, #12]
 800b144:	9b01      	ldr	r3, [sp, #4]
 800b146:	6113      	str	r3, [r2, #16]
 800b148:	9b02      	ldr	r3, [sp, #8]
 800b14a:	6153      	str	r3, [r2, #20]
 800b14c:	9b07      	ldr	r3, [sp, #28]
 800b14e:	6193      	str	r3, [r2, #24]
 800b150:	b009      	add	sp, #36	; 0x24
 800b152:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b156:	bf00      	nop
 800b158:	24000000 	.word	0x24000000
 800b15c:	000f000a 	.word	0x000f000a
 800b160:	00060003 	.word	0x00060003
 800b164:	00150019 	.word	0x00150019
 800b168:	00190015 	.word	0x00190015
 800b16c:	00030006 	.word	0x00030006
 800b170:	000a000f 	.word	0x000a000f

0800b174 <D64_GENERIC>:
 800b174:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b178:	6913      	ldr	r3, [r2, #16]
 800b17a:	b089      	sub	sp, #36	; 0x24
 800b17c:	6b15      	ldr	r5, [r2, #48]	; 0x30
 800b17e:	9300      	str	r3, [sp, #0]
 800b180:	6953      	ldr	r3, [r2, #20]
 800b182:	9105      	str	r1, [sp, #20]
 800b184:	9303      	str	r3, [sp, #12]
 800b186:	8cd1      	ldrh	r1, [r2, #38]	; 0x26
 800b188:	6993      	ldr	r3, [r2, #24]
 800b18a:	69d4      	ldr	r4, [r2, #28]
 800b18c:	9307      	str	r3, [sp, #28]
 800b18e:	9504      	str	r5, [sp, #16]
 800b190:	e9d2 3602 	ldrd	r3, r6, [r2, #8]
 800b194:	2900      	cmp	r1, #0
 800b196:	f000 80e8 	beq.w	800b36a <D64_GENERIC+0x1f6>
 800b19a:	6a11      	ldr	r1, [r2, #32]
 800b19c:	2500      	movs	r5, #0
 800b19e:	46b3      	mov	fp, r6
 800b1a0:	9302      	str	r3, [sp, #8]
 800b1a2:	9106      	str	r1, [sp, #24]
 800b1a4:	4978      	ldr	r1, [pc, #480]	; (800b388 <D64_GENERIC+0x214>)
 800b1a6:	e0cc      	b.n	800b342 <D64_GENERIC+0x1ce>
 800b1a8:	eb0e 084e 	add.w	r8, lr, lr, lsl #1
 800b1ac:	f1ce 0c00 	rsb	ip, lr, #0
 800b1b0:	f890 9000 	ldrb.w	r9, [r0]
 800b1b4:	eb00 0708 	add.w	r7, r0, r8
 800b1b8:	f810 6008 	ldrb.w	r6, [r0, r8]
 800b1bc:	eb07 0a4c 	add.w	sl, r7, ip, lsl #1
 800b1c0:	f817 000c 	ldrb.w	r0, [r7, ip]
 800b1c4:	f817 301c 	ldrb.w	r3, [r7, ip, lsl #1]
 800b1c8:	eb0a 0748 	add.w	r7, sl, r8, lsl #1
 800b1cc:	f81a a018 	ldrb.w	sl, [sl, r8, lsl #1]
 800b1d0:	ea4f 4800 	mov.w	r8, r0, lsl #16
 800b1d4:	f817 000c 	ldrb.w	r0, [r7, ip]
 800b1d8:	eb08 6606 	add.w	r6, r8, r6, lsl #24
 800b1dc:	f817 801c 	ldrb.w	r8, [r7, ip, lsl #1]
 800b1e0:	0400      	lsls	r0, r0, #16
 800b1e2:	4467      	add	r7, ip
 800b1e4:	eb06 2603 	add.w	r6, r6, r3, lsl #8
 800b1e8:	eb00 600a 	add.w	r0, r0, sl, lsl #24
 800b1ec:	f817 a01c 	ldrb.w	sl, [r7, ip, lsl #1]
 800b1f0:	eb07 074c 	add.w	r7, r7, ip, lsl #1
 800b1f4:	444e      	add	r6, r9
 800b1f6:	eb00 2808 	add.w	r8, r0, r8, lsl #8
 800b1fa:	eb07 008e 	add.w	r0, r7, lr, lsl #2
 800b1fe:	44c2      	add	sl, r8
 800b200:	b2f7      	uxtb	r7, r6
 800b202:	f3c6 2807 	ubfx	r8, r6, #8, #8
 800b206:	f3c6 4e07 	ubfx	lr, r6, #16, #8
 800b20a:	0e36      	lsrs	r6, r6, #24
 800b20c:	f851 7027 	ldr.w	r7, [r1, r7, lsl #2]
 800b210:	fa5f fc8a 	uxtb.w	ip, sl
 800b214:	f851 8028 	ldr.w	r8, [r1, r8, lsl #2]
 800b218:	f3ca 2907 	ubfx	r9, sl, #8, #8
 800b21c:	443c      	add	r4, r7
 800b21e:	f851 702e 	ldr.w	r7, [r1, lr, lsl #2]
 800b222:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 800b226:	eb08 2894 	add.w	r8, r8, r4, lsr #10
 800b22a:	f851 c02c 	ldr.w	ip, [r1, ip, lsl #2]
 800b22e:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800b232:	4b56      	ldr	r3, [pc, #344]	; (800b38c <D64_GENERIC+0x218>)
 800b234:	eb07 2e98 	add.w	lr, r7, r8, lsr #10
 800b238:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800b23c:	f851 7029 	ldr.w	r7, [r1, r9, lsl #2]
 800b240:	eb06 269e 	add.w	r6, r6, lr, lsr #10
 800b244:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800b248:	ea48 4804 	orr.w	r8, r8, r4, lsl #16
 800b24c:	f3ca 4407 	ubfx	r4, sl, #16, #8
 800b250:	eb0c 2c96 	add.w	ip, ip, r6, lsr #10
 800b254:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800b258:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 800b25c:	ea4f 6a1a 	mov.w	sl, sl, lsr #24
 800b260:	eb07 279c 	add.w	r7, r7, ip, lsr #10
 800b264:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 800b268:	f851 902a 	ldr.w	r9, [r1, sl, lsl #2]
 800b26c:	ea46 460e 	orr.w	r6, r6, lr, lsl #16
 800b270:	eb04 2a97 	add.w	sl, r4, r7, lsr #10
 800b274:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800b278:	eb09 299a 	add.w	r9, r9, sl, lsr #10
 800b27c:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 800b280:	ea47 4c0c 	orr.w	ip, r7, ip, lsl #16
 800b284:	f3c9 0709 	ubfx	r7, r9, #0, #10
 800b288:	ea4f 2499 	mov.w	r4, r9, lsr #10
 800b28c:	ea47 4a0a 	orr.w	sl, r7, sl, lsl #16
 800b290:	fb28 b903 	smlad	r9, r8, r3, fp
 800b294:	4b3e      	ldr	r3, [pc, #248]	; (800b390 <D64_GENERIC+0x21c>)
 800b296:	fb26 9903 	smlad	r9, r6, r3, r9
 800b29a:	4b3e      	ldr	r3, [pc, #248]	; (800b394 <D64_GENERIC+0x220>)
 800b29c:	fb2c 9703 	smlad	r7, ip, r3, r9
 800b2a0:	f44f 3980 	mov.w	r9, #65536	; 0x10000
 800b2a4:	fb2a 7909 	smlad	r9, sl, r9, r7
 800b2a8:	4f3b      	ldr	r7, [pc, #236]	; (800b398 <D64_GENERIC+0x224>)
 800b2aa:	9b02      	ldr	r3, [sp, #8]
 800b2ac:	fb28 3307 	smlad	r3, r8, r7, r3
 800b2b0:	fb2a 3317 	smladx	r3, sl, r7, r3
 800b2b4:	4f39      	ldr	r7, [pc, #228]	; (800b39c <D64_GENERIC+0x228>)
 800b2b6:	fb26 3307 	smlad	r3, r6, r7, r3
 800b2ba:	fb2c 3b17 	smladx	fp, ip, r7, r3
 800b2be:	f04f 0e01 	mov.w	lr, #1
 800b2c2:	fb28 f80e 	smuad	r8, r8, lr
 800b2c6:	4b36      	ldr	r3, [pc, #216]	; (800b3a0 <D64_GENERIC+0x22c>)
 800b2c8:	fb26 8603 	smlad	r6, r6, r3, r8
 800b2cc:	4b35      	ldr	r3, [pc, #212]	; (800b3a4 <D64_GENERIC+0x230>)
 800b2ce:	fb2c 6c03 	smlad	ip, ip, r3, r6
 800b2d2:	4b35      	ldr	r3, [pc, #212]	; (800b3a8 <D64_GENERIC+0x234>)
 800b2d4:	fb2a c303 	smlad	r3, sl, r3, ip
 800b2d8:	9f06      	ldr	r7, [sp, #24]
 800b2da:	f5a9 3900 	sub.w	r9, r9, #131072	; 0x20000
 800b2de:	9302      	str	r3, [sp, #8]
 800b2e0:	b1cf      	cbz	r7, 800b316 <D64_GENERIC+0x1a2>
 800b2e2:	9b00      	ldr	r3, [sp, #0]
 800b2e4:	444b      	add	r3, r9
 800b2e6:	461e      	mov	r6, r3
 800b2e8:	9b03      	ldr	r3, [sp, #12]
 800b2ea:	f8cd 900c 	str.w	r9, [sp, #12]
 800b2ee:	1af6      	subs	r6, r6, r3
 800b2f0:	46b0      	mov	r8, r6
 800b2f2:	ea4f 79e6 	mov.w	r9, r6, asr #31
 800b2f6:	e9cd 8900 	strd	r8, r9, [sp]
 800b2fa:	fba6 8907 	umull	r8, r9, r6, r7
 800b2fe:	9e01      	ldr	r6, [sp, #4]
 800b300:	fb07 9306 	mla	r3, r7, r6, r9
 800b304:	4646      	mov	r6, r8
 800b306:	f116 4600 	adds.w	r6, r6, #2147483648	; 0x80000000
 800b30a:	f143 0700 	adc.w	r7, r3, #0
 800b30e:	fa07 f30e 	lsl.w	r3, r7, lr
 800b312:	4699      	mov	r9, r3
 800b314:	9300      	str	r3, [sp, #0]
 800b316:	f8b2 c028 	ldrh.w	ip, [r2, #40]	; 0x28
 800b31a:	ea4f 2989 	mov.w	r9, r9, lsl #10
 800b31e:	9b04      	ldr	r3, [sp, #16]
 800b320:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800b324:	2700      	movs	r7, #0
 800b326:	fb05 fc0c 	mul.w	ip, r5, ip
 800b32a:	3501      	adds	r5, #1
 800b32c:	fbc3 6709 	smlal	r6, r7, r3, r9
 800b330:	9b05      	ldr	r3, [sp, #20]
 800b332:	10be      	asrs	r6, r7, #2
 800b334:	f306 060f 	ssat	r6, #16, r6
 800b338:	f823 601c 	strh.w	r6, [r3, ip, lsl #1]
 800b33c:	8cd6      	ldrh	r6, [r2, #38]	; 0x26
 800b33e:	42ae      	cmp	r6, r5
 800b340:	dd11      	ble.n	800b366 <D64_GENERIC+0x1f2>
 800b342:	f8b2 e02a 	ldrh.w	lr, [r2, #42]	; 0x2a
 800b346:	f1be 0f01 	cmp.w	lr, #1
 800b34a:	f47f af2d 	bne.w	800b1a8 <D64_GENERIC+0x34>
 800b34e:	6b57      	ldr	r7, [r2, #52]	; 0x34
 800b350:	f100 0c08 	add.w	ip, r0, #8
 800b354:	06bb      	lsls	r3, r7, #26
 800b356:	e9d0 6a00 	ldrd	r6, sl, [r0]
 800b35a:	d513      	bpl.n	800b384 <D64_GENERIC+0x210>
 800b35c:	ba76      	rev16	r6, r6
 800b35e:	fa9a fa9a 	rev16.w	sl, sl
 800b362:	4660      	mov	r0, ip
 800b364:	e74c      	b.n	800b200 <D64_GENERIC+0x8c>
 800b366:	465e      	mov	r6, fp
 800b368:	9b02      	ldr	r3, [sp, #8]
 800b36a:	6093      	str	r3, [r2, #8]
 800b36c:	2000      	movs	r0, #0
 800b36e:	9b00      	ldr	r3, [sp, #0]
 800b370:	60d6      	str	r6, [r2, #12]
 800b372:	6113      	str	r3, [r2, #16]
 800b374:	9b03      	ldr	r3, [sp, #12]
 800b376:	61d4      	str	r4, [r2, #28]
 800b378:	6153      	str	r3, [r2, #20]
 800b37a:	9b07      	ldr	r3, [sp, #28]
 800b37c:	6193      	str	r3, [r2, #24]
 800b37e:	b009      	add	sp, #36	; 0x24
 800b380:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b384:	4660      	mov	r0, ip
 800b386:	e73b      	b.n	800b200 <D64_GENERIC+0x8c>
 800b388:	24000000 	.word	0x24000000
 800b38c:	001c0015 	.word	0x001c0015
 800b390:	000f000a 	.word	0x000f000a
 800b394:	00060003 	.word	0x00060003
 800b398:	0024002a 	.word	0x0024002a
 800b39c:	002e0030 	.word	0x002e0030
 800b3a0:	00030006 	.word	0x00030006
 800b3a4:	000a000f 	.word	0x000a000f
 800b3a8:	0015001c 	.word	0x0015001c

0800b3ac <D80_GENERIC>:
 800b3ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3b0:	b08b      	sub	sp, #44	; 0x2c
 800b3b2:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 800b3b4:	9107      	str	r1, [sp, #28]
 800b3b6:	6911      	ldr	r1, [r2, #16]
 800b3b8:	9104      	str	r1, [sp, #16]
 800b3ba:	6951      	ldr	r1, [r2, #20]
 800b3bc:	9105      	str	r1, [sp, #20]
 800b3be:	6991      	ldr	r1, [r2, #24]
 800b3c0:	9109      	str	r1, [sp, #36]	; 0x24
 800b3c2:	69d1      	ldr	r1, [r2, #28]
 800b3c4:	9102      	str	r1, [sp, #8]
 800b3c6:	6891      	ldr	r1, [r2, #8]
 800b3c8:	9103      	str	r1, [sp, #12]
 800b3ca:	68d1      	ldr	r1, [r2, #12]
 800b3cc:	9101      	str	r1, [sp, #4]
 800b3ce:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800b3d0:	9106      	str	r1, [sp, #24]
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	f000 810b 	beq.w	800b5ee <D80_GENERIC+0x242>
 800b3d8:	6a13      	ldr	r3, [r2, #32]
 800b3da:	f04f 0800 	mov.w	r8, #0
 800b3de:	f8df c260 	ldr.w	ip, [pc, #608]	; 800b640 <D80_GENERIC+0x294>
 800b3e2:	9308      	str	r3, [sp, #32]
 800b3e4:	9200      	str	r2, [sp, #0]
 800b3e6:	e0ee      	b.n	800b5c6 <D80_GENERIC+0x21a>
 800b3e8:	b2db      	uxtb	r3, r3
 800b3ea:	f890 e000 	ldrb.w	lr, [r0]
 800b3ee:	b219      	sxth	r1, r3
 800b3f0:	425c      	negs	r4, r3
 800b3f2:	f810 9003 	ldrb.w	r9, [r0, r3]
 800b3f6:	004e      	lsls	r6, r1, #1
 800b3f8:	eb01 0581 	add.w	r5, r1, r1, lsl #2
 800b3fc:	4431      	add	r1, r6
 800b3fe:	1843      	adds	r3, r0, r1
 800b400:	f810 b001 	ldrb.w	fp, [r0, r1]
 800b404:	1919      	adds	r1, r3, r4
 800b406:	5d1b      	ldrb	r3, [r3, r4]
 800b408:	1948      	adds	r0, r1, r5
 800b40a:	f811 a005 	ldrb.w	sl, [r1, r5]
 800b40e:	041b      	lsls	r3, r3, #16
 800b410:	1907      	adds	r7, r0, r4
 800b412:	5d01      	ldrb	r1, [r0, r4]
 800b414:	eb03 630b 	add.w	r3, r3, fp, lsl #24
 800b418:	f810 0014 	ldrb.w	r0, [r0, r4, lsl #1]
 800b41c:	eb07 0b44 	add.w	fp, r7, r4, lsl #1
 800b420:	f817 7014 	ldrb.w	r7, [r7, r4, lsl #1]
 800b424:	0409      	lsls	r1, r1, #16
 800b426:	eb03 2309 	add.w	r3, r3, r9, lsl #8
 800b42a:	eb0b 0905 	add.w	r9, fp, r5
 800b42e:	eb01 610a 	add.w	r1, r1, sl, lsl #24
 800b432:	f81b 5005 	ldrb.w	r5, [fp, r5]
 800b436:	eb09 0b04 	add.w	fp, r9, r4
 800b43a:	f819 4004 	ldrb.w	r4, [r9, r4]
 800b43e:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 800b442:	4473      	add	r3, lr
 800b444:	eb0b 0006 	add.w	r0, fp, r6
 800b448:	eb04 2505 	add.w	r5, r4, r5, lsl #8
 800b44c:	4439      	add	r1, r7
 800b44e:	f3c3 2407 	ubfx	r4, r3, #8, #8
 800b452:	b2df      	uxtb	r7, r3
 800b454:	f3c3 4607 	ubfx	r6, r3, #16, #8
 800b458:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 800b45c:	f85c 3027 	ldr.w	r3, [ip, r7, lsl #2]
 800b460:	fa5f fa81 	uxtb.w	sl, r1
 800b464:	f85c 7024 	ldr.w	r7, [ip, r4, lsl #2]
 800b468:	9c02      	ldr	r4, [sp, #8]
 800b46a:	f85c 9026 	ldr.w	r9, [ip, r6, lsl #2]
 800b46e:	441c      	add	r4, r3
 800b470:	f85c 602e 	ldr.w	r6, [ip, lr, lsl #2]
 800b474:	f85c e02a 	ldr.w	lr, [ip, sl, lsl #2]
 800b478:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 800b47c:	eb07 2794 	add.w	r7, r7, r4, lsr #10
 800b480:	f3c4 0309 	ubfx	r3, r4, #0, #10
 800b484:	f3c1 2407 	ubfx	r4, r1, #8, #8
 800b488:	b2ed      	uxtb	r5, r5
 800b48a:	eb09 2997 	add.w	r9, r9, r7, lsr #10
 800b48e:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800b492:	f85c 4024 	ldr.w	r4, [ip, r4, lsl #2]
 800b496:	eb06 2699 	add.w	r6, r6, r9, lsr #10
 800b49a:	f85c 5025 	ldr.w	r5, [ip, r5, lsl #2]
 800b49e:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
 800b4a2:	f3c1 4707 	ubfx	r7, r1, #16, #8
 800b4a6:	eb0e 2e96 	add.w	lr, lr, r6, lsr #10
 800b4aa:	f85c a02a 	ldr.w	sl, [ip, sl, lsl #2]
 800b4ae:	f85c 7027 	ldr.w	r7, [ip, r7, lsl #2]
 800b4b2:	0e09      	lsrs	r1, r1, #24
 800b4b4:	eb04 249e 	add.w	r4, r4, lr, lsr #10
 800b4b8:	f3c9 0909 	ubfx	r9, r9, #0, #10
 800b4bc:	f85c 1021 	ldr.w	r1, [ip, r1, lsl #2]
 800b4c0:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800b4c4:	eb07 2794 	add.w	r7, r7, r4, lsr #10
 800b4c8:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800b4cc:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800b4d0:	eb01 2197 	add.w	r1, r1, r7, lsr #10
 800b4d4:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800b4d8:	ea46 4609 	orr.w	r6, r6, r9, lsl #16
 800b4dc:	eb05 2591 	add.w	r5, r5, r1, lsr #10
 800b4e0:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800b4e4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 800b4e8:	eb0a 2a95 	add.w	sl, sl, r5, lsr #10
 800b4ec:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800b4f0:	ea41 4107 	orr.w	r1, r1, r7, lsl #16
 800b4f4:	ea4f 229a 	mov.w	r2, sl, lsr #10
 800b4f8:	f3ca 0709 	ubfx	r7, sl, #0, #10
 800b4fc:	9202      	str	r2, [sp, #8]
 800b4fe:	ea47 4505 	orr.w	r5, r7, r5, lsl #16
 800b502:	4a43      	ldr	r2, [pc, #268]	; (800b610 <D80_GENERIC+0x264>)
 800b504:	9f01      	ldr	r7, [sp, #4]
 800b506:	fb23 7a02 	smlad	sl, r3, r2, r7
 800b50a:	4a42      	ldr	r2, [pc, #264]	; (800b614 <D80_GENERIC+0x268>)
 800b50c:	fb26 aa02 	smlad	sl, r6, r2, sl
 800b510:	4a41      	ldr	r2, [pc, #260]	; (800b618 <D80_GENERIC+0x26c>)
 800b512:	fb24 aa02 	smlad	sl, r4, r2, sl
 800b516:	4a41      	ldr	r2, [pc, #260]	; (800b61c <D80_GENERIC+0x270>)
 800b518:	fb21 a702 	smlad	r7, r1, r2, sl
 800b51c:	f44f 3a80 	mov.w	sl, #65536	; 0x10000
 800b520:	fb25 7a0a 	smlad	sl, r5, sl, r7
 800b524:	4a3e      	ldr	r2, [pc, #248]	; (800b620 <D80_GENERIC+0x274>)
 800b526:	9f03      	ldr	r7, [sp, #12]
 800b528:	fb23 7e02 	smlad	lr, r3, r2, r7
 800b52c:	4a3d      	ldr	r2, [pc, #244]	; (800b624 <D80_GENERIC+0x278>)
 800b52e:	fb26 ee02 	smlad	lr, r6, r2, lr
 800b532:	f04f 174b 	mov.w	r7, #4915275	; 0x4b004b
 800b536:	fb24 e707 	smlad	r7, r4, r7, lr
 800b53a:	4a3b      	ldr	r2, [pc, #236]	; (800b628 <D80_GENERIC+0x27c>)
 800b53c:	fb21 7702 	smlad	r7, r1, r2, r7
 800b540:	4a3a      	ldr	r2, [pc, #232]	; (800b62c <D80_GENERIC+0x280>)
 800b542:	fb25 7202 	smlad	r2, r5, r2, r7
 800b546:	f04f 0901 	mov.w	r9, #1
 800b54a:	9201      	str	r2, [sp, #4]
 800b54c:	fb23 f909 	smuad	r9, r3, r9
 800b550:	4b37      	ldr	r3, [pc, #220]	; (800b630 <D80_GENERIC+0x284>)
 800b552:	fb26 9603 	smlad	r6, r6, r3, r9
 800b556:	4f37      	ldr	r7, [pc, #220]	; (800b634 <D80_GENERIC+0x288>)
 800b558:	fb24 6407 	smlad	r4, r4, r7, r6
 800b55c:	4f36      	ldr	r7, [pc, #216]	; (800b638 <D80_GENERIC+0x28c>)
 800b55e:	fb21 4707 	smlad	r7, r1, r7, r4
 800b562:	4936      	ldr	r1, [pc, #216]	; (800b63c <D80_GENERIC+0x290>)
 800b564:	fb25 7301 	smlad	r3, r5, r1, r7
 800b568:	9303      	str	r3, [sp, #12]
 800b56a:	f5aa 3a7a 	sub.w	sl, sl, #256000	; 0x3e800
 800b56e:	9b08      	ldr	r3, [sp, #32]
 800b570:	b193      	cbz	r3, 800b598 <D80_GENERIC+0x1ec>
 800b572:	9a04      	ldr	r2, [sp, #16]
 800b574:	4452      	add	r2, sl
 800b576:	4614      	mov	r4, r2
 800b578:	9a05      	ldr	r2, [sp, #20]
 800b57a:	f8cd a014 	str.w	sl, [sp, #20]
 800b57e:	1aa4      	subs	r4, r4, r2
 800b580:	fba4 1203 	umull	r1, r2, r4, r3
 800b584:	17e7      	asrs	r7, r4, #31
 800b586:	f111 4400 	adds.w	r4, r1, #2147483648	; 0x80000000
 800b58a:	fb03 2207 	mla	r2, r3, r7, r2
 800b58e:	f142 0500 	adc.w	r5, r2, #0
 800b592:	006b      	lsls	r3, r5, #1
 800b594:	469a      	mov	sl, r3
 800b596:	9304      	str	r3, [sp, #16]
 800b598:	9e00      	ldr	r6, [sp, #0]
 800b59a:	ea4f 2a4a 	mov.w	sl, sl, lsl #9
 800b59e:	9a06      	ldr	r2, [sp, #24]
 800b5a0:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800b5a4:	8d33      	ldrh	r3, [r6, #40]	; 0x28
 800b5a6:	2500      	movs	r5, #0
 800b5a8:	fb08 f303 	mul.w	r3, r8, r3
 800b5ac:	fbc2 450a 	smlal	r4, r5, r2, sl
 800b5b0:	9a07      	ldr	r2, [sp, #28]
 800b5b2:	f108 0801 	add.w	r8, r8, #1
 800b5b6:	10a9      	asrs	r1, r5, #2
 800b5b8:	f301 010f 	ssat	r1, #16, r1
 800b5bc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800b5c0:	8cf3      	ldrh	r3, [r6, #38]	; 0x26
 800b5c2:	4543      	cmp	r3, r8
 800b5c4:	dd12      	ble.n	800b5ec <D80_GENERIC+0x240>
 800b5c6:	9b00      	ldr	r3, [sp, #0]
 800b5c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b5ca:	2b01      	cmp	r3, #1
 800b5cc:	f47f af0c 	bne.w	800b3e8 <D80_GENERIC+0x3c>
 800b5d0:	9b00      	ldr	r3, [sp, #0]
 800b5d2:	6885      	ldr	r5, [r0, #8]
 800b5d4:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 800b5d6:	06b2      	lsls	r2, r6, #26
 800b5d8:	e9d0 3100 	ldrd	r3, r1, [r0]
 800b5dc:	f100 000a 	add.w	r0, r0, #10
 800b5e0:	f57f af35 	bpl.w	800b44e <D80_GENERIC+0xa2>
 800b5e4:	ba5b      	rev16	r3, r3
 800b5e6:	ba49      	rev16	r1, r1
 800b5e8:	ba6d      	rev16	r5, r5
 800b5ea:	e730      	b.n	800b44e <D80_GENERIC+0xa2>
 800b5ec:	4632      	mov	r2, r6
 800b5ee:	9b03      	ldr	r3, [sp, #12]
 800b5f0:	2000      	movs	r0, #0
 800b5f2:	6093      	str	r3, [r2, #8]
 800b5f4:	9b01      	ldr	r3, [sp, #4]
 800b5f6:	60d3      	str	r3, [r2, #12]
 800b5f8:	9b02      	ldr	r3, [sp, #8]
 800b5fa:	61d3      	str	r3, [r2, #28]
 800b5fc:	9b04      	ldr	r3, [sp, #16]
 800b5fe:	6113      	str	r3, [r2, #16]
 800b600:	9b05      	ldr	r3, [sp, #20]
 800b602:	6153      	str	r3, [r2, #20]
 800b604:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b606:	6193      	str	r3, [r2, #24]
 800b608:	b00b      	add	sp, #44	; 0x2c
 800b60a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b60e:	bf00      	nop
 800b610:	002d0024 	.word	0x002d0024
 800b614:	001c0015 	.word	0x001c0015
 800b618:	000f000a 	.word	0x000f000a
 800b61c:	00060003 	.word	0x00060003
 800b620:	0037003f 	.word	0x0037003f
 800b624:	00450049 	.word	0x00450049
 800b628:	00490045 	.word	0x00490045
 800b62c:	003f0037 	.word	0x003f0037
 800b630:	00030006 	.word	0x00030006
 800b634:	000a000f 	.word	0x000a000f
 800b638:	0015001c 	.word	0x0015001c
 800b63c:	0024002d 	.word	0x0024002d
 800b640:	24000000 	.word	0x24000000

0800b644 <D128_GENERIC>:
 800b644:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b648:	b08d      	sub	sp, #52	; 0x34
 800b64a:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 800b64c:	f8d2 a01c 	ldr.w	sl, [r2, #28]
 800b650:	9109      	str	r1, [sp, #36]	; 0x24
 800b652:	6911      	ldr	r1, [r2, #16]
 800b654:	9201      	str	r2, [sp, #4]
 800b656:	9106      	str	r1, [sp, #24]
 800b658:	6951      	ldr	r1, [r2, #20]
 800b65a:	9107      	str	r1, [sp, #28]
 800b65c:	6991      	ldr	r1, [r2, #24]
 800b65e:	910b      	str	r1, [sp, #44]	; 0x2c
 800b660:	6891      	ldr	r1, [r2, #8]
 800b662:	9103      	str	r1, [sp, #12]
 800b664:	68d1      	ldr	r1, [r2, #12]
 800b666:	9102      	str	r1, [sp, #8]
 800b668:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800b66a:	9108      	str	r1, [sp, #32]
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	f000 8183 	beq.w	800b978 <D128_GENERIC+0x334>
 800b672:	2300      	movs	r3, #0
 800b674:	6a12      	ldr	r2, [r2, #32]
 800b676:	4681      	mov	r9, r0
 800b678:	920a      	str	r2, [sp, #40]	; 0x28
 800b67a:	e9cd a304 	strd	sl, r3, [sp, #16]
 800b67e:	e165      	b.n	800b94c <D128_GENERIC+0x308>
 800b680:	b2d2      	uxtb	r2, r2
 800b682:	f899 b000 	ldrb.w	fp, [r9]
 800b686:	b213      	sxth	r3, r2
 800b688:	4255      	negs	r5, r2
 800b68a:	f819 0002 	ldrb.w	r0, [r9, r2]
 800b68e:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 800b692:	009f      	lsls	r7, r3, #2
 800b694:	eb09 0402 	add.w	r4, r9, r2
 800b698:	ebc3 06c3 	rsb	r6, r3, r3, lsl #3
 800b69c:	f819 8002 	ldrb.w	r8, [r9, r2]
 800b6a0:	443b      	add	r3, r7
 800b6a2:	1962      	adds	r2, r4, r5
 800b6a4:	5d64      	ldrb	r4, [r4, r5]
 800b6a6:	eb02 0c03 	add.w	ip, r2, r3
 800b6aa:	0424      	lsls	r4, r4, #16
 800b6ac:	5cd3      	ldrb	r3, [r2, r3]
 800b6ae:	eb0c 0e05 	add.w	lr, ip, r5
 800b6b2:	f81c 9015 	ldrb.w	r9, [ip, r5, lsl #1]
 800b6b6:	f81c 2005 	ldrb.w	r2, [ip, r5]
 800b6ba:	eb04 6408 	add.w	r4, r4, r8, lsl #24
 800b6be:	eb0e 0c45 	add.w	ip, lr, r5, lsl #1
 800b6c2:	f81e 8015 	ldrb.w	r8, [lr, r5, lsl #1]
 800b6c6:	eb04 2400 	add.w	r4, r4, r0, lsl #8
 800b6ca:	eb0c 0e06 	add.w	lr, ip, r6
 800b6ce:	f81c a006 	ldrb.w	sl, [ip, r6]
 800b6d2:	0412      	lsls	r2, r2, #16
 800b6d4:	445c      	add	r4, fp
 800b6d6:	eb0e 0c05 	add.w	ip, lr, r5
 800b6da:	eb02 6203 	add.w	r2, r2, r3, lsl #24
 800b6de:	f81e 3005 	ldrb.w	r3, [lr, r5]
 800b6e2:	eb0c 0045 	add.w	r0, ip, r5, lsl #1
 800b6e6:	f81e e015 	ldrb.w	lr, [lr, r5, lsl #1]
 800b6ea:	041b      	lsls	r3, r3, #16
 800b6ec:	f81c c015 	ldrb.w	ip, [ip, r5, lsl #1]
 800b6f0:	eb00 0b06 	add.w	fp, r0, r6
 800b6f4:	5d80      	ldrb	r0, [r0, r6]
 800b6f6:	eb03 630a 	add.w	r3, r3, sl, lsl #24
 800b6fa:	f81b 6005 	ldrb.w	r6, [fp, r5]
 800b6fe:	eb0b 0a05 	add.w	sl, fp, r5
 800b702:	eb02 2209 	add.w	r2, r2, r9, lsl #8
 800b706:	f81b b015 	ldrb.w	fp, [fp, r5, lsl #1]
 800b70a:	0436      	lsls	r6, r6, #16
 800b70c:	eb0a 0945 	add.w	r9, sl, r5, lsl #1
 800b710:	4442      	add	r2, r8
 800b712:	eb06 6600 	add.w	r6, r6, r0, lsl #24
 800b716:	f81a 8015 	ldrb.w	r8, [sl, r5, lsl #1]
 800b71a:	eb03 230e 	add.w	r3, r3, lr, lsl #8
 800b71e:	44b9      	add	r9, r7
 800b720:	eb06 260b 	add.w	r6, r6, fp, lsl #8
 800b724:	4463      	add	r3, ip
 800b726:	eb06 0508 	add.w	r5, r6, r8
 800b72a:	b2e7      	uxtb	r7, r4
 800b72c:	f3c4 2607 	ubfx	r6, r4, #8, #8
 800b730:	499b      	ldr	r1, [pc, #620]	; (800b9a0 <D128_GENERIC+0x35c>)
 800b732:	f3c4 4007 	ubfx	r0, r4, #16, #8
 800b736:	0e24      	lsrs	r4, r4, #24
 800b738:	f851 c027 	ldr.w	ip, [r1, r7, lsl #2]
 800b73c:	b2d7      	uxtb	r7, r2
 800b73e:	f851 b026 	ldr.w	fp, [r1, r6, lsl #2]
 800b742:	f3c2 2607 	ubfx	r6, r2, #8, #8
 800b746:	9904      	ldr	r1, [sp, #16]
 800b748:	4461      	add	r1, ip
 800b74a:	468c      	mov	ip, r1
 800b74c:	4994      	ldr	r1, [pc, #592]	; (800b9a0 <D128_GENERIC+0x35c>)
 800b74e:	eb0b 2b9c 	add.w	fp, fp, ip, lsr #10
 800b752:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 800b756:	f851 8024 	ldr.w	r8, [r1, r4, lsl #2]
 800b75a:	f3c2 4407 	ubfx	r4, r2, #16, #8
 800b75e:	eb00 209b 	add.w	r0, r0, fp, lsr #10
 800b762:	f851 e027 	ldr.w	lr, [r1, r7, lsl #2]
 800b766:	f851 7026 	ldr.w	r7, [r1, r6, lsl #2]
 800b76a:	0e12      	lsrs	r2, r2, #24
 800b76c:	eb08 2890 	add.w	r8, r8, r0, lsr #10
 800b770:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 800b774:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 800b778:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800b77c:	eb0e 2e98 	add.w	lr, lr, r8, lsr #10
 800b780:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800b784:	b2da      	uxtb	r2, r3
 800b786:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 800b78a:	eb07 279e 	add.w	r7, r7, lr, lsr #10
 800b78e:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 800b792:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800b796:	ea48 4800 	orr.w	r8, r8, r0, lsl #16
 800b79a:	eb04 2a97 	add.w	sl, r4, r7, lsr #10
 800b79e:	f3c3 2007 	ubfx	r0, r3, #8, #8
 800b7a2:	ea4b 4b0c 	orr.w	fp, fp, ip, lsl #16
 800b7a6:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800b7aa:	eb06 269a 	add.w	r6, r6, sl, lsr #10
 800b7ae:	f851 c020 	ldr.w	ip, [r1, r0, lsl #2]
 800b7b2:	f3c3 4007 	ubfx	r0, r3, #16, #8
 800b7b6:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800b7ba:	eb02 2296 	add.w	r2, r2, r6, lsr #10
 800b7be:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 800b7c2:	f851 4020 	ldr.w	r4, [r1, r0, lsl #2]
 800b7c6:	0e1b      	lsrs	r3, r3, #24
 800b7c8:	eb0c 2c92 	add.w	ip, ip, r2, lsr #10
 800b7cc:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800b7d0:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
 800b7d4:	ea47 470e 	orr.w	r7, r7, lr, lsl #16
 800b7d8:	b2eb      	uxtb	r3, r5
 800b7da:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800b7de:	eb04 2e9c 	add.w	lr, r4, ip, lsr #10
 800b7e2:	f3cc 0409 	ubfx	r4, ip, #0, #10
 800b7e6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800b7ea:	ea46 460a 	orr.w	r6, r6, sl, lsl #16
 800b7ee:	eb00 209e 	add.w	r0, r0, lr, lsr #10
 800b7f2:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 800b7f6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800b7fa:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800b7fe:	eb03 2c90 	add.w	ip, r3, r0, lsr #10
 800b802:	f851 202a 	ldr.w	r2, [r1, sl, lsl #2]
 800b806:	f3c5 4307 	ubfx	r3, r5, #16, #8
 800b80a:	ea4f 6a15 	mov.w	sl, r5, lsr #24
 800b80e:	eb02 229c 	add.w	r2, r2, ip, lsr #10
 800b812:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800b816:	f851 5023 	ldr.w	r5, [r1, r3, lsl #2]
 800b81a:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 800b81e:	f851 302a 	ldr.w	r3, [r1, sl, lsl #2]
 800b822:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 800b826:	eb05 2592 	add.w	r5, r5, r2, lsr #10
 800b82a:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800b82e:	eb03 2e95 	add.w	lr, r3, r5, lsr #10
 800b832:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800b836:	ea42 430c 	orr.w	r3, r2, ip, lsl #16
 800b83a:	ea4f 219e 	mov.w	r1, lr, lsr #10
 800b83e:	f3ce 0209 	ubfx	r2, lr, #0, #10
 800b842:	9104      	str	r1, [sp, #16]
 800b844:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 800b848:	9902      	ldr	r1, [sp, #8]
 800b84a:	4a56      	ldr	r2, [pc, #344]	; (800b9a4 <D128_GENERIC+0x360>)
 800b84c:	fb2b 1202 	smlad	r2, fp, r2, r1
 800b850:	4955      	ldr	r1, [pc, #340]	; (800b9a8 <D128_GENERIC+0x364>)
 800b852:	fb28 2201 	smlad	r2, r8, r1, r2
 800b856:	4955      	ldr	r1, [pc, #340]	; (800b9ac <D128_GENERIC+0x368>)
 800b858:	fb27 2201 	smlad	r2, r7, r1, r2
 800b85c:	4954      	ldr	r1, [pc, #336]	; (800b9b0 <D128_GENERIC+0x36c>)
 800b85e:	fb26 2201 	smlad	r2, r6, r1, r2
 800b862:	4954      	ldr	r1, [pc, #336]	; (800b9b4 <D128_GENERIC+0x370>)
 800b864:	fb24 2201 	smlad	r2, r4, r1, r2
 800b868:	4953      	ldr	r1, [pc, #332]	; (800b9b8 <D128_GENERIC+0x374>)
 800b86a:	fb20 2201 	smlad	r2, r0, r1, r2
 800b86e:	4953      	ldr	r1, [pc, #332]	; (800b9bc <D128_GENERIC+0x378>)
 800b870:	fb23 2201 	smlad	r2, r3, r1, r2
 800b874:	f44f 3c80 	mov.w	ip, #65536	; 0x10000
 800b878:	fb25 2a0c 	smlad	sl, r5, ip, r2
 800b87c:	4950      	ldr	r1, [pc, #320]	; (800b9c0 <D128_GENERIC+0x37c>)
 800b87e:	9a03      	ldr	r2, [sp, #12]
 800b880:	fb2b 2c01 	smlad	ip, fp, r1, r2
 800b884:	4a4f      	ldr	r2, [pc, #316]	; (800b9c4 <D128_GENERIC+0x380>)
 800b886:	fb28 ce02 	smlad	lr, r8, r2, ip
 800b88a:	f8df c150 	ldr.w	ip, [pc, #336]	; 800b9dc <D128_GENERIC+0x398>
 800b88e:	fb27 ec0c 	smlad	ip, r7, ip, lr
 800b892:	f8df e14c 	ldr.w	lr, [pc, #332]	; 800b9e0 <D128_GENERIC+0x39c>
 800b896:	fb26 cc0e 	smlad	ip, r6, lr, ip
 800b89a:	f8df e148 	ldr.w	lr, [pc, #328]	; 800b9e4 <D128_GENERIC+0x3a0>
 800b89e:	fb24 ce0e 	smlad	lr, r4, lr, ip
 800b8a2:	f8df c144 	ldr.w	ip, [pc, #324]	; 800b9e8 <D128_GENERIC+0x3a4>
 800b8a6:	fb20 ee0c 	smlad	lr, r0, ip, lr
 800b8aa:	f8df c140 	ldr.w	ip, [pc, #320]	; 800b9ec <D128_GENERIC+0x3a8>
 800b8ae:	fb23 ec0c 	smlad	ip, r3, ip, lr
 800b8b2:	f8df e13c 	ldr.w	lr, [pc, #316]	; 800b9f0 <D128_GENERIC+0x3ac>
 800b8b6:	fb25 c20e 	smlad	r2, r5, lr, ip
 800b8ba:	f04f 0c01 	mov.w	ip, #1
 800b8be:	9202      	str	r2, [sp, #8]
 800b8c0:	fb2b fb0c 	smuad	fp, fp, ip
 800b8c4:	f8df c12c 	ldr.w	ip, [pc, #300]	; 800b9f4 <D128_GENERIC+0x3b0>
 800b8c8:	fb28 bb0c 	smlad	fp, r8, ip, fp
 800b8cc:	f8df c128 	ldr.w	ip, [pc, #296]	; 800b9f8 <D128_GENERIC+0x3b4>
 800b8d0:	fb27 bb0c 	smlad	fp, r7, ip, fp
 800b8d4:	4f3c      	ldr	r7, [pc, #240]	; (800b9c8 <D128_GENERIC+0x384>)
 800b8d6:	fb26 bb07 	smlad	fp, r6, r7, fp
 800b8da:	4f3c      	ldr	r7, [pc, #240]	; (800b9cc <D128_GENERIC+0x388>)
 800b8dc:	fb24 bb07 	smlad	fp, r4, r7, fp
 800b8e0:	4f3b      	ldr	r7, [pc, #236]	; (800b9d0 <D128_GENERIC+0x38c>)
 800b8e2:	fb20 bb07 	smlad	fp, r0, r7, fp
 800b8e6:	4f3b      	ldr	r7, [pc, #236]	; (800b9d4 <D128_GENERIC+0x390>)
 800b8e8:	fb23 bb07 	smlad	fp, r3, r7, fp
 800b8ec:	4b3a      	ldr	r3, [pc, #232]	; (800b9d8 <D128_GENERIC+0x394>)
 800b8ee:	fb25 b303 	smlad	r3, r5, r3, fp
 800b8f2:	9303      	str	r3, [sp, #12]
 800b8f4:	f5aa 1480 	sub.w	r4, sl, #1048576	; 0x100000
 800b8f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b8fa:	b183      	cbz	r3, 800b91e <D128_GENERIC+0x2da>
 800b8fc:	9a06      	ldr	r2, [sp, #24]
 800b8fe:	9907      	ldr	r1, [sp, #28]
 800b900:	4422      	add	r2, r4
 800b902:	9407      	str	r4, [sp, #28]
 800b904:	1a52      	subs	r2, r2, r1
 800b906:	fba2 0103 	umull	r0, r1, r2, r3
 800b90a:	17d5      	asrs	r5, r2, #31
 800b90c:	f110 4200 	adds.w	r2, r0, #2147483648	; 0x80000000
 800b910:	fb03 1105 	mla	r1, r3, r5, r1
 800b914:	f141 0300 	adc.w	r3, r1, #0
 800b918:	005b      	lsls	r3, r3, #1
 800b91a:	461c      	mov	r4, r3
 800b91c:	9306      	str	r3, [sp, #24]
 800b91e:	9d01      	ldr	r5, [sp, #4]
 800b920:	01e4      	lsls	r4, r4, #7
 800b922:	9e05      	ldr	r6, [sp, #20]
 800b924:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b928:	8d28      	ldrh	r0, [r5, #40]	; 0x28
 800b92a:	2300      	movs	r3, #0
 800b92c:	9908      	ldr	r1, [sp, #32]
 800b92e:	fb06 f000 	mul.w	r0, r6, r0
 800b932:	3601      	adds	r6, #1
 800b934:	fbc1 2304 	smlal	r2, r3, r1, r4
 800b938:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b93a:	109b      	asrs	r3, r3, #2
 800b93c:	9605      	str	r6, [sp, #20]
 800b93e:	f303 030f 	ssat	r3, #16, r3
 800b942:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
 800b946:	8ceb      	ldrh	r3, [r5, #38]	; 0x26
 800b948:	42b3      	cmp	r3, r6
 800b94a:	dd13      	ble.n	800b974 <D128_GENERIC+0x330>
 800b94c:	9b01      	ldr	r3, [sp, #4]
 800b94e:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800b950:	2a01      	cmp	r2, #1
 800b952:	f47f ae95 	bne.w	800b680 <D128_GENERIC+0x3c>
 800b956:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800b958:	f109 0610 	add.w	r6, r9, #16
 800b95c:	0681      	lsls	r1, r0, #26
 800b95e:	e9d9 4200 	ldrd	r4, r2, [r9]
 800b962:	e9d9 3502 	ldrd	r3, r5, [r9, #8]
 800b966:	d518      	bpl.n	800b99a <D128_GENERIC+0x356>
 800b968:	ba64      	rev16	r4, r4
 800b96a:	ba52      	rev16	r2, r2
 800b96c:	ba5b      	rev16	r3, r3
 800b96e:	ba6d      	rev16	r5, r5
 800b970:	46b1      	mov	r9, r6
 800b972:	e6da      	b.n	800b72a <D128_GENERIC+0xe6>
 800b974:	f8dd a010 	ldr.w	sl, [sp, #16]
 800b978:	9b01      	ldr	r3, [sp, #4]
 800b97a:	2000      	movs	r0, #0
 800b97c:	9903      	ldr	r1, [sp, #12]
 800b97e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b980:	6099      	str	r1, [r3, #8]
 800b982:	9902      	ldr	r1, [sp, #8]
 800b984:	f8c3 a01c 	str.w	sl, [r3, #28]
 800b988:	60d9      	str	r1, [r3, #12]
 800b98a:	9906      	ldr	r1, [sp, #24]
 800b98c:	619a      	str	r2, [r3, #24]
 800b98e:	6119      	str	r1, [r3, #16]
 800b990:	9907      	ldr	r1, [sp, #28]
 800b992:	6159      	str	r1, [r3, #20]
 800b994:	b00d      	add	sp, #52	; 0x34
 800b996:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b99a:	46b1      	mov	r9, r6
 800b99c:	e6c5      	b.n	800b72a <D128_GENERIC+0xe6>
 800b99e:	bf00      	nop
 800b9a0:	24000000 	.word	0x24000000
 800b9a4:	00780069 	.word	0x00780069
 800b9a8:	005b004e 	.word	0x005b004e
 800b9ac:	00420037 	.word	0x00420037
 800b9b0:	002d0024 	.word	0x002d0024
 800b9b4:	001c0015 	.word	0x001c0015
 800b9b8:	000f000a 	.word	0x000f000a
 800b9bc:	00060003 	.word	0x00060003
 800b9c0:	00880096 	.word	0x00880096
 800b9c4:	00a200ac 	.word	0x00a200ac
 800b9c8:	0015001c 	.word	0x0015001c
 800b9cc:	0024002d 	.word	0x0024002d
 800b9d0:	00370042 	.word	0x00370042
 800b9d4:	004e005b 	.word	0x004e005b
 800b9d8:	00690078 	.word	0x00690078
 800b9dc:	00b400ba 	.word	0x00b400ba
 800b9e0:	00be00c0 	.word	0x00be00c0
 800b9e4:	00c000be 	.word	0x00c000be
 800b9e8:	00ba00b4 	.word	0x00ba00b4
 800b9ec:	00ac00a2 	.word	0x00ac00a2
 800b9f0:	00960088 	.word	0x00960088
 800b9f4:	00030006 	.word	0x00030006
 800b9f8:	000a000f 	.word	0x000a000f

0800b9fc <D16_1CH_HTONS_VOL_HP>:
 800b9fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba00:	6993      	ldr	r3, [r2, #24]
 800ba02:	b087      	sub	sp, #28
 800ba04:	4682      	mov	sl, r0
 800ba06:	8cd0      	ldrh	r0, [r2, #38]	; 0x26
 800ba08:	9304      	str	r3, [sp, #16]
 800ba0a:	f8d2 b030 	ldr.w	fp, [r2, #48]	; 0x30
 800ba0e:	69d3      	ldr	r3, [r2, #28]
 800ba10:	f8d2 e020 	ldr.w	lr, [r2, #32]
 800ba14:	e9d2 5402 	ldrd	r5, r4, [r2, #8]
 800ba18:	e9d2 6c04 	ldrd	r6, ip, [r2, #16]
 800ba1c:	9403      	str	r4, [sp, #12]
 800ba1e:	2800      	cmp	r0, #0
 800ba20:	d054      	beq.n	800bacc <D16_1CH_HTONS_VOL_HP+0xd0>
 800ba22:	f1a1 0902 	sub.w	r9, r1, #2
 800ba26:	eb0a 0140 	add.w	r1, sl, r0, lsl #1
 800ba2a:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 800bad8 <D16_1CH_HTONS_VOL_HP+0xdc>
 800ba2e:	4650      	mov	r0, sl
 800ba30:	9101      	str	r1, [sp, #4]
 800ba32:	4619      	mov	r1, r3
 800ba34:	f8cd b008 	str.w	fp, [sp, #8]
 800ba38:	9205      	str	r2, [sp, #20]
 800ba3a:	f850 3b02 	ldr.w	r3, [r0], #2
 800ba3e:	ba5b      	rev16	r3, r3
 800ba40:	b2dc      	uxtb	r4, r3
 800ba42:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800ba46:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ba4a:	f858 4022 	ldr.w	r4, [r8, r2, lsl #2]
 800ba4e:	4419      	add	r1, r3
 800ba50:	eb04 2491 	add.w	r4, r4, r1, lsr #10
 800ba54:	f3c1 0309 	ubfx	r3, r1, #0, #10
 800ba58:	f3c4 0209 	ubfx	r2, r4, #0, #10
 800ba5c:	0aa1      	lsrs	r1, r4, #10
 800ba5e:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 800ba62:	4a1b      	ldr	r2, [pc, #108]	; (800bad0 <D16_1CH_HTONS_VOL_HP+0xd4>)
 800ba64:	fb23 5402 	smlad	r4, r3, r2, r5
 800ba68:	4a1a      	ldr	r2, [pc, #104]	; (800bad4 <D16_1CH_HTONS_VOL_HP+0xd8>)
 800ba6a:	fb23 f502 	smuad	r5, r3, r2
 800ba6e:	f5a4 6400 	sub.w	r4, r4, #2048	; 0x800
 800ba72:	f04f 4a00 	mov.w	sl, #2147483648	; 0x80000000
 800ba76:	f04f 0b00 	mov.w	fp, #0
 800ba7a:	19a2      	adds	r2, r4, r6
 800ba7c:	eba2 020c 	sub.w	r2, r2, ip
 800ba80:	46a4      	mov	ip, r4
 800ba82:	17d7      	asrs	r7, r2, #31
 800ba84:	fba2 230e 	umull	r2, r3, r2, lr
 800ba88:	f112 4600 	adds.w	r6, r2, #2147483648	; 0x80000000
 800ba8c:	fb0e 3307 	mla	r3, lr, r7, r3
 800ba90:	f143 0700 	adc.w	r7, r3, #0
 800ba94:	9b02      	ldr	r3, [sp, #8]
 800ba96:	047a      	lsls	r2, r7, #17
 800ba98:	007e      	lsls	r6, r7, #1
 800ba9a:	fbc3 ab02 	smlal	sl, fp, r3, r2
 800ba9e:	ea4f 03ab 	mov.w	r3, fp, asr #2
 800baa2:	f303 030f 	ssat	r3, #16, r3
 800baa6:	f829 3f02 	strh.w	r3, [r9, #2]!
 800baaa:	9b01      	ldr	r3, [sp, #4]
 800baac:	4298      	cmp	r0, r3
 800baae:	d1c4      	bne.n	800ba3a <D16_1CH_HTONS_VOL_HP+0x3e>
 800bab0:	460b      	mov	r3, r1
 800bab2:	9a05      	ldr	r2, [sp, #20]
 800bab4:	2000      	movs	r0, #0
 800bab6:	9903      	ldr	r1, [sp, #12]
 800bab8:	61d3      	str	r3, [r2, #28]
 800baba:	9b04      	ldr	r3, [sp, #16]
 800babc:	6095      	str	r5, [r2, #8]
 800babe:	60d1      	str	r1, [r2, #12]
 800bac0:	6193      	str	r3, [r2, #24]
 800bac2:	e9c2 6404 	strd	r6, r4, [r2, #16]
 800bac6:	b007      	add	sp, #28
 800bac8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bacc:	4664      	mov	r4, ip
 800bace:	e7f1      	b.n	800bab4 <D16_1CH_HTONS_VOL_HP+0xb8>
 800bad0:	00030001 	.word	0x00030001
 800bad4:	00010003 	.word	0x00010003
 800bad8:	24000000 	.word	0x24000000

0800badc <D24_1CH_HTONS_VOL_HP>:
 800badc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bae0:	6b16      	ldr	r6, [r2, #48]	; 0x30
 800bae2:	b089      	sub	sp, #36	; 0x24
 800bae4:	6993      	ldr	r3, [r2, #24]
 800bae6:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 800bae8:	9604      	str	r6, [sp, #16]
 800baea:	6a16      	ldr	r6, [r2, #32]
 800baec:	9306      	str	r3, [sp, #24]
 800baee:	9505      	str	r5, [sp, #20]
 800baf0:	69d3      	ldr	r3, [r2, #28]
 800baf2:	9600      	str	r6, [sp, #0]
 800baf4:	e9d2 4a04 	ldrd	r4, sl, [r2, #16]
 800baf8:	e9d2 ce02 	ldrd	ip, lr, [r2, #8]
 800bafc:	2d00      	cmp	r5, #0
 800bafe:	f000 8083 	beq.w	800bc08 <D24_1CH_HTONS_VOL_HP+0x12c>
 800bb02:	9207      	str	r2, [sp, #28]
 800bb04:	2600      	movs	r6, #0
 800bb06:	4622      	mov	r2, r4
 800bb08:	f1a1 0b02 	sub.w	fp, r1, #2
 800bb0c:	4f3f      	ldr	r7, [pc, #252]	; (800bc0c <D24_1CH_HTONS_VOL_HP+0x130>)
 800bb0e:	461d      	mov	r5, r3
 800bb10:	f8cd a00c 	str.w	sl, [sp, #12]
 800bb14:	9c00      	ldr	r4, [sp, #0]
 800bb16:	e056      	b.n	800bbc6 <D24_1CH_HTONS_VOL_HP+0xea>
 800bb18:	7841      	ldrb	r1, [r0, #1]
 800bb1a:	eb08 4809 	add.w	r8, r8, r9, lsl #16
 800bb1e:	3002      	adds	r0, #2
 800bb20:	4488      	add	r8, r1
 800bb22:	fa5f f388 	uxtb.w	r3, r8
 800bb26:	f3c8 2907 	ubfx	r9, r8, #8, #8
 800bb2a:	ea4f 4818 	mov.w	r8, r8, lsr #16
 800bb2e:	f857 1023 	ldr.w	r1, [r7, r3, lsl #2]
 800bb32:	f857 3029 	ldr.w	r3, [r7, r9, lsl #2]
 800bb36:	eb01 2195 	add.w	r1, r1, r5, lsr #10
 800bb3a:	f857 5028 	ldr.w	r5, [r7, r8, lsl #2]
 800bb3e:	eb03 2891 	add.w	r8, r3, r1, lsr #10
 800bb42:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800bb46:	f3c8 0309 	ubfx	r3, r8, #0, #10
 800bb4a:	eb05 2598 	add.w	r5, r5, r8, lsr #10
 800bb4e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800bb52:	492f      	ldr	r1, [pc, #188]	; (800bc10 <D24_1CH_HTONS_VOL_HP+0x134>)
 800bb54:	fb23 e901 	smlad	r9, r3, r1, lr
 800bb58:	492e      	ldr	r1, [pc, #184]	; (800bc14 <D24_1CH_HTONS_VOL_HP+0x138>)
 800bb5a:	fb23 ce01 	smlad	lr, r3, r1, ip
 800bb5e:	f3c5 0c09 	ubfx	ip, r5, #0, #10
 800bb62:	2101      	movs	r1, #1
 800bb64:	eb0c 084c 	add.w	r8, ip, ip, lsl #1
 800bb68:	eb0e 0e48 	add.w	lr, lr, r8, lsl #1
 800bb6c:	fb23 f301 	smuad	r3, r3, r1
 800bb70:	f5a9 51d8 	sub.w	r1, r9, #6912	; 0x1b00
 800bb74:	eb08 0c03 	add.w	ip, r8, r3
 800bb78:	9b03      	ldr	r3, [sp, #12]
 800bb7a:	f04f 0a00 	mov.w	sl, #0
 800bb7e:	440a      	add	r2, r1
 800bb80:	3601      	adds	r6, #1
 800bb82:	9103      	str	r1, [sp, #12]
 800bb84:	1ad2      	subs	r2, r2, r3
 800bb86:	ea4f 79e2 	mov.w	r9, r2, asr #31
 800bb8a:	fba2 2304 	umull	r2, r3, r2, r4
 800bb8e:	e9cd 2300 	strd	r2, r3, [sp]
 800bb92:	fb04 3309 	mla	r3, r4, r9, r3
 800bb96:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
 800bb9a:	9301      	str	r3, [sp, #4]
 800bb9c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bba0:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 800bba4:	f143 0300 	adc.w	r3, r3, #0
 800bba8:	ea4f 38c3 	mov.w	r8, r3, lsl #15
 800bbac:	005a      	lsls	r2, r3, #1
 800bbae:	9b04      	ldr	r3, [sp, #16]
 800bbb0:	fbc3 9a08 	smlal	r9, sl, r3, r8
 800bbb4:	ea4f 03aa 	mov.w	r3, sl, asr #2
 800bbb8:	f303 030f 	ssat	r3, #16, r3
 800bbbc:	f82b 3f02 	strh.w	r3, [fp, #2]!
 800bbc0:	9b05      	ldr	r3, [sp, #20]
 800bbc2:	429e      	cmp	r6, r3
 800bbc4:	d010      	beq.n	800bbe8 <D24_1CH_HTONS_VOL_HP+0x10c>
 800bbc6:	f890 9003 	ldrb.w	r9, [r0, #3]
 800bbca:	f016 0f01 	tst.w	r6, #1
 800bbce:	7801      	ldrb	r1, [r0, #0]
 800bbd0:	ea4f 2309 	mov.w	r3, r9, lsl #8
 800bbd4:	ea4f 2801 	mov.w	r8, r1, lsl #8
 800bbd8:	d09e      	beq.n	800bb18 <D24_1CH_HTONS_VOL_HP+0x3c>
 800bbda:	f890 8002 	ldrb.w	r8, [r0, #2]
 800bbde:	3004      	adds	r0, #4
 800bbe0:	eb03 4808 	add.w	r8, r3, r8, lsl #16
 800bbe4:	4488      	add	r8, r1
 800bbe6:	e79c      	b.n	800bb22 <D24_1CH_HTONS_VOL_HP+0x46>
 800bbe8:	4614      	mov	r4, r2
 800bbea:	462b      	mov	r3, r5
 800bbec:	9a07      	ldr	r2, [sp, #28]
 800bbee:	2000      	movs	r0, #0
 800bbf0:	61d3      	str	r3, [r2, #28]
 800bbf2:	9b06      	ldr	r3, [sp, #24]
 800bbf4:	f8c2 c008 	str.w	ip, [r2, #8]
 800bbf8:	f8c2 e00c 	str.w	lr, [r2, #12]
 800bbfc:	6193      	str	r3, [r2, #24]
 800bbfe:	e9c2 4104 	strd	r4, r1, [r2, #16]
 800bc02:	b009      	add	sp, #36	; 0x24
 800bc04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc08:	4651      	mov	r1, sl
 800bc0a:	e7f0      	b.n	800bbee <D24_1CH_HTONS_VOL_HP+0x112>
 800bc0c:	24000000 	.word	0x24000000
 800bc10:	00030001 	.word	0x00030001
 800bc14:	00060007 	.word	0x00060007

0800bc18 <D32_1CH_HTONS_VOL_HP>:
 800bc18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc1c:	6993      	ldr	r3, [r2, #24]
 800bc1e:	b087      	sub	sp, #28
 800bc20:	4683      	mov	fp, r0
 800bc22:	8cd0      	ldrh	r0, [r2, #38]	; 0x26
 800bc24:	9304      	str	r3, [sp, #16]
 800bc26:	69d5      	ldr	r5, [r2, #28]
 800bc28:	6b14      	ldr	r4, [r2, #48]	; 0x30
 800bc2a:	f8d2 a020 	ldr.w	sl, [r2, #32]
 800bc2e:	e9d2 8e04 	ldrd	r8, lr, [r2, #16]
 800bc32:	e9d2 3c02 	ldrd	r3, ip, [r2, #8]
 800bc36:	2800      	cmp	r0, #0
 800bc38:	d077      	beq.n	800bd2a <D32_1CH_HTONS_VOL_HP+0x112>
 800bc3a:	460f      	mov	r7, r1
 800bc3c:	46f1      	mov	r9, lr
 800bc3e:	eb01 0140 	add.w	r1, r1, r0, lsl #1
 800bc42:	f8cd 8000 	str.w	r8, [sp]
 800bc46:	4e3a      	ldr	r6, [pc, #232]	; (800bd30 <D32_1CH_HTONS_VOL_HP+0x118>)
 800bc48:	469e      	mov	lr, r3
 800bc4a:	46a0      	mov	r8, r4
 800bc4c:	9103      	str	r1, [sp, #12]
 800bc4e:	9205      	str	r2, [sp, #20]
 800bc50:	f85b 4b04 	ldr.w	r4, [fp], #4
 800bc54:	ba64      	rev16	r4, r4
 800bc56:	b2e0      	uxtb	r0, r4
 800bc58:	f3c4 2307 	ubfx	r3, r4, #8, #8
 800bc5c:	f3c4 4107 	ubfx	r1, r4, #16, #8
 800bc60:	0e24      	lsrs	r4, r4, #24
 800bc62:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 800bc66:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 800bc6a:	eb00 2095 	add.w	r0, r0, r5, lsr #10
 800bc6e:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 800bc72:	f856 5024 	ldr.w	r5, [r6, r4, lsl #2]
 800bc76:	eb03 2390 	add.w	r3, r3, r0, lsr #10
 800bc7a:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800bc7e:	eb01 2193 	add.w	r1, r1, r3, lsr #10
 800bc82:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bc86:	eb05 2591 	add.w	r5, r5, r1, lsr #10
 800bc8a:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800bc8e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800bc92:	f3c5 0009 	ubfx	r0, r5, #0, #10
 800bc96:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800bc9a:	4826      	ldr	r0, [pc, #152]	; (800bd34 <D32_1CH_HTONS_VOL_HP+0x11c>)
 800bc9c:	fb23 c400 	smlad	r4, r3, r0, ip
 800bca0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800bca4:	fb21 4402 	smlad	r4, r1, r2, r4
 800bca8:	4823      	ldr	r0, [pc, #140]	; (800bd38 <D32_1CH_HTONS_VOL_HP+0x120>)
 800bcaa:	fb23 ec00 	smlad	ip, r3, r0, lr
 800bcae:	4823      	ldr	r0, [pc, #140]	; (800bd3c <D32_1CH_HTONS_VOL_HP+0x124>)
 800bcb0:	fb21 cc00 	smlad	ip, r1, r0, ip
 800bcb4:	2201      	movs	r2, #1
 800bcb6:	fb23 f302 	smuad	r3, r3, r2
 800bcba:	4821      	ldr	r0, [pc, #132]	; (800bd40 <D32_1CH_HTONS_VOL_HP+0x128>)
 800bcbc:	fb21 3e00 	smlad	lr, r1, r0, r3
 800bcc0:	9b00      	ldr	r3, [sp, #0]
 800bcc2:	f5a4 4480 	sub.w	r4, r4, #16384	; 0x4000
 800bcc6:	4423      	add	r3, r4
 800bcc8:	eba3 0209 	sub.w	r2, r3, r9
 800bccc:	46a1      	mov	r9, r4
 800bcce:	17d1      	asrs	r1, r2, #31
 800bcd0:	fba2 230a 	umull	r2, r3, r2, sl
 800bcd4:	e9cd 2300 	strd	r2, r3, [sp]
 800bcd8:	fb0a 3301 	mla	r3, sl, r1, r3
 800bcdc:	9301      	str	r3, [sp, #4]
 800bcde:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bce2:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 800bce6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800bcea:	f143 0300 	adc.w	r3, r3, #0
 800bcee:	0399      	lsls	r1, r3, #14
 800bcf0:	005b      	lsls	r3, r3, #1
 800bcf2:	9300      	str	r3, [sp, #0]
 800bcf4:	2300      	movs	r3, #0
 800bcf6:	fbc8 2301 	smlal	r2, r3, r8, r1
 800bcfa:	109b      	asrs	r3, r3, #2
 800bcfc:	f303 030f 	ssat	r3, #16, r3
 800bd00:	f827 3b02 	strh.w	r3, [r7], #2
 800bd04:	9b03      	ldr	r3, [sp, #12]
 800bd06:	429f      	cmp	r7, r3
 800bd08:	d1a2      	bne.n	800bc50 <D32_1CH_HTONS_VOL_HP+0x38>
 800bd0a:	4673      	mov	r3, lr
 800bd0c:	f8dd 8000 	ldr.w	r8, [sp]
 800bd10:	9a05      	ldr	r2, [sp, #20]
 800bd12:	6093      	str	r3, [r2, #8]
 800bd14:	2000      	movs	r0, #0
 800bd16:	9b04      	ldr	r3, [sp, #16]
 800bd18:	f8c2 c00c 	str.w	ip, [r2, #12]
 800bd1c:	61d5      	str	r5, [r2, #28]
 800bd1e:	6193      	str	r3, [r2, #24]
 800bd20:	e9c2 8404 	strd	r8, r4, [r2, #16]
 800bd24:	b007      	add	sp, #28
 800bd26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd2a:	4674      	mov	r4, lr
 800bd2c:	e7f1      	b.n	800bd12 <D32_1CH_HTONS_VOL_HP+0xfa>
 800bd2e:	bf00      	nop
 800bd30:	24000000 	.word	0x24000000
 800bd34:	00060003 	.word	0x00060003
 800bd38:	000a000c 	.word	0x000a000c
 800bd3c:	000c000a 	.word	0x000c000a
 800bd40:	00030006 	.word	0x00030006

0800bd44 <D48_1CH_HTONS_VOL_HP>:
 800bd44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd48:	6b17      	ldr	r7, [r2, #48]	; 0x30
 800bd4a:	b087      	sub	sp, #28
 800bd4c:	6993      	ldr	r3, [r2, #24]
 800bd4e:	9701      	str	r7, [sp, #4]
 800bd50:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 800bd52:	6a17      	ldr	r7, [r2, #32]
 800bd54:	9304      	str	r3, [sp, #16]
 800bd56:	69d6      	ldr	r6, [r2, #28]
 800bd58:	9702      	str	r7, [sp, #8]
 800bd5a:	e9d2 4e04 	ldrd	r4, lr, [r2, #16]
 800bd5e:	e9d2 3c02 	ldrd	r3, ip, [r2, #8]
 800bd62:	2d00      	cmp	r5, #0
 800bd64:	f000 8093 	beq.w	800be8e <D48_1CH_HTONS_VOL_HP+0x14a>
 800bd68:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bd6c:	f1a1 0b02 	sub.w	fp, r1, #2
 800bd70:	46f2      	mov	sl, lr
 800bd72:	4f48      	ldr	r7, [pc, #288]	; (800be94 <D48_1CH_HTONS_VOL_HP+0x150>)
 800bd74:	eb00 0145 	add.w	r1, r0, r5, lsl #1
 800bd78:	469e      	mov	lr, r3
 800bd7a:	9205      	str	r2, [sp, #20]
 800bd7c:	9103      	str	r1, [sp, #12]
 800bd7e:	e9d0 3200 	ldrd	r3, r2, [r0]
 800bd82:	3006      	adds	r0, #6
 800bd84:	ba5b      	rev16	r3, r3
 800bd86:	fa92 f992 	rev16.w	r9, r2
 800bd8a:	b2dd      	uxtb	r5, r3
 800bd8c:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800bd90:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800bd94:	0e1b      	lsrs	r3, r3, #24
 800bd96:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 800bd9a:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 800bd9e:	eb05 2696 	add.w	r6, r5, r6, lsr #10
 800bda2:	f857 5022 	ldr.w	r5, [r7, r2, lsl #2]
 800bda6:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 800bdaa:	fa5f f289 	uxtb.w	r2, r9
 800bdae:	eb01 2196 	add.w	r1, r1, r6, lsr #10
 800bdb2:	f3c9 2907 	ubfx	r9, r9, #8, #8
 800bdb6:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 800bdba:	f3c6 0809 	ubfx	r8, r6, #0, #10
 800bdbe:	eb05 2591 	add.w	r5, r5, r1, lsr #10
 800bdc2:	f857 6029 	ldr.w	r6, [r7, r9, lsl #2]
 800bdc6:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800bdca:	eb03 2395 	add.w	r3, r3, r5, lsr #10
 800bdce:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800bdd2:	ea41 4808 	orr.w	r8, r1, r8, lsl #16
 800bdd6:	eb02 2293 	add.w	r2, r2, r3, lsr #10
 800bdda:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bdde:	eb06 2692 	add.w	r6, r6, r2, lsr #10
 800bde2:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800bde6:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
 800bdea:	f3c6 0309 	ubfx	r3, r6, #0, #10
 800bdee:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 800bdf2:	4b29      	ldr	r3, [pc, #164]	; (800be98 <D48_1CH_HTONS_VOL_HP+0x154>)
 800bdf4:	fb28 c103 	smlad	r1, r8, r3, ip
 800bdf8:	4b28      	ldr	r3, [pc, #160]	; (800be9c <D48_1CH_HTONS_VOL_HP+0x158>)
 800bdfa:	fb25 1103 	smlad	r1, r5, r3, r1
 800bdfe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800be02:	fb22 1903 	smlad	r9, r2, r3, r1
 800be06:	4b26      	ldr	r3, [pc, #152]	; (800bea0 <D48_1CH_HTONS_VOL_HP+0x15c>)
 800be08:	fb28 ec03 	smlad	ip, r8, r3, lr
 800be0c:	f04f 131b 	mov.w	r3, #1769499	; 0x1b001b
 800be10:	fb25 cc03 	smlad	ip, r5, r3, ip
 800be14:	4b23      	ldr	r3, [pc, #140]	; (800bea4 <D48_1CH_HTONS_VOL_HP+0x160>)
 800be16:	fb22 cc03 	smlad	ip, r2, r3, ip
 800be1a:	2101      	movs	r1, #1
 800be1c:	fb28 f801 	smuad	r8, r8, r1
 800be20:	4b21      	ldr	r3, [pc, #132]	; (800bea8 <D48_1CH_HTONS_VOL_HP+0x164>)
 800be22:	fb25 8503 	smlad	r5, r5, r3, r8
 800be26:	4b21      	ldr	r3, [pc, #132]	; (800beac <D48_1CH_HTONS_VOL_HP+0x168>)
 800be28:	fb22 5e03 	smlad	lr, r2, r3, r5
 800be2c:	f5a9 4158 	sub.w	r1, r9, #55296	; 0xd800
 800be30:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 800be34:	190a      	adds	r2, r1, r4
 800be36:	9c02      	ldr	r4, [sp, #8]
 800be38:	eba2 020a 	sub.w	r2, r2, sl
 800be3c:	468a      	mov	sl, r1
 800be3e:	ea4f 79e2 	mov.w	r9, r2, asr #31
 800be42:	fba2 2304 	umull	r2, r3, r2, r4
 800be46:	fb04 3309 	mla	r3, r4, r9, r3
 800be4a:	f112 4400 	adds.w	r4, r2, #2147483648	; 0x80000000
 800be4e:	f04f 0900 	mov.w	r9, #0
 800be52:	f143 0500 	adc.w	r5, r3, #0
 800be56:	9b01      	ldr	r3, [sp, #4]
 800be58:	032a      	lsls	r2, r5, #12
 800be5a:	006c      	lsls	r4, r5, #1
 800be5c:	fbc3 8902 	smlal	r8, r9, r3, r2
 800be60:	ea4f 03a9 	mov.w	r3, r9, asr #2
 800be64:	f303 030f 	ssat	r3, #16, r3
 800be68:	f82b 3f02 	strh.w	r3, [fp, #2]!
 800be6c:	9b03      	ldr	r3, [sp, #12]
 800be6e:	4283      	cmp	r3, r0
 800be70:	d185      	bne.n	800bd7e <D48_1CH_HTONS_VOL_HP+0x3a>
 800be72:	4673      	mov	r3, lr
 800be74:	9a05      	ldr	r2, [sp, #20]
 800be76:	6093      	str	r3, [r2, #8]
 800be78:	2000      	movs	r0, #0
 800be7a:	9b04      	ldr	r3, [sp, #16]
 800be7c:	f8c2 c00c 	str.w	ip, [r2, #12]
 800be80:	61d6      	str	r6, [r2, #28]
 800be82:	6193      	str	r3, [r2, #24]
 800be84:	e9c2 4104 	strd	r4, r1, [r2, #16]
 800be88:	b007      	add	sp, #28
 800be8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be8e:	4671      	mov	r1, lr
 800be90:	e7f1      	b.n	800be76 <D48_1CH_HTONS_VOL_HP+0x132>
 800be92:	bf00      	nop
 800be94:	24000000 	.word	0x24000000
 800be98:	000f000a 	.word	0x000f000a
 800be9c:	00060003 	.word	0x00060003
 800bea0:	00150019 	.word	0x00150019
 800bea4:	00190015 	.word	0x00190015
 800bea8:	00030006 	.word	0x00030006
 800beac:	000a000f 	.word	0x000a000f

0800beb0 <D64_1CH_HTONS_VOL_HP>:
 800beb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800beb4:	6b15      	ldr	r5, [r2, #48]	; 0x30
 800beb6:	b089      	sub	sp, #36	; 0x24
 800beb8:	6993      	ldr	r3, [r2, #24]
 800beba:	4686      	mov	lr, r0
 800bebc:	9503      	str	r5, [sp, #12]
 800bebe:	8cd0      	ldrh	r0, [r2, #38]	; 0x26
 800bec0:	6a15      	ldr	r5, [r2, #32]
 800bec2:	9306      	str	r3, [sp, #24]
 800bec4:	69d6      	ldr	r6, [r2, #28]
 800bec6:	9504      	str	r5, [sp, #16]
 800bec8:	e9d2 8404 	ldrd	r8, r4, [r2, #16]
 800becc:	e9d2 3c02 	ldrd	r3, ip, [r2, #8]
 800bed0:	2800      	cmp	r0, #0
 800bed2:	f000 80a4 	beq.w	800c01e <D64_1CH_HTONS_VOL_HP+0x16e>
 800bed6:	460f      	mov	r7, r1
 800bed8:	46f1      	mov	r9, lr
 800beda:	eb01 0140 	add.w	r1, r1, r0, lsl #1
 800bede:	4d56      	ldr	r5, [pc, #344]	; (800c038 <D64_1CH_HTONS_VOL_HP+0x188>)
 800bee0:	46a2      	mov	sl, r4
 800bee2:	469e      	mov	lr, r3
 800bee4:	9105      	str	r1, [sp, #20]
 800bee6:	9207      	str	r2, [sp, #28]
 800bee8:	f859 1b08 	ldr.w	r1, [r9], #8
 800beec:	f859 3c04 	ldr.w	r3, [r9, #-4]
 800bef0:	ba49      	rev16	r1, r1
 800bef2:	fa93 fb93 	rev16.w	fp, r3
 800bef6:	b2cb      	uxtb	r3, r1
 800bef8:	f3c1 2207 	ubfx	r2, r1, #8, #8
 800befc:	f3c1 4007 	ubfx	r0, r1, #16, #8
 800bf00:	0e09      	lsrs	r1, r1, #24
 800bf02:	f855 4023 	ldr.w	r4, [r5, r3, lsl #2]
 800bf06:	fa5f f38b 	uxtb.w	r3, fp
 800bf0a:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 800bf0e:	4426      	add	r6, r4
 800bf10:	f855 4020 	ldr.w	r4, [r5, r0, lsl #2]
 800bf14:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 800bf18:	eb02 2296 	add.w	r2, r2, r6, lsr #10
 800bf1c:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
 800bf20:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800bf24:	f3cb 2307 	ubfx	r3, fp, #8, #8
 800bf28:	eb04 2492 	add.w	r4, r4, r2, lsr #10
 800bf2c:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800bf30:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 800bf34:	eb01 2194 	add.w	r1, r1, r4, lsr #10
 800bf38:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800bf3c:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 800bf40:	f3cb 4607 	ubfx	r6, fp, #16, #8
 800bf44:	eb00 2091 	add.w	r0, r0, r1, lsr #10
 800bf48:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800bf4c:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 800bf50:	ea4f 6b1b 	mov.w	fp, fp, lsr #24
 800bf54:	eb03 2390 	add.w	r3, r3, r0, lsr #10
 800bf58:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800bf5c:	f855 b02b 	ldr.w	fp, [r5, fp, lsl #2]
 800bf60:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800bf64:	eb06 2693 	add.w	r6, r6, r3, lsr #10
 800bf68:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bf6c:	eb0b 2b96 	add.w	fp, fp, r6, lsr #10
 800bf70:	f3c6 0409 	ubfx	r4, r6, #0, #10
 800bf74:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800bf78:	f3cb 0009 	ubfx	r0, fp, #0, #10
 800bf7c:	ea4f 269b 	mov.w	r6, fp, lsr #10
 800bf80:	ea40 4b04 	orr.w	fp, r0, r4, lsl #16
 800bf84:	482d      	ldr	r0, [pc, #180]	; (800c03c <D64_1CH_HTONS_VOL_HP+0x18c>)
 800bf86:	fb22 cc00 	smlad	ip, r2, r0, ip
 800bf8a:	482d      	ldr	r0, [pc, #180]	; (800c040 <D64_1CH_HTONS_VOL_HP+0x190>)
 800bf8c:	fb21 cc00 	smlad	ip, r1, r0, ip
 800bf90:	482c      	ldr	r0, [pc, #176]	; (800c044 <D64_1CH_HTONS_VOL_HP+0x194>)
 800bf92:	fb23 cc00 	smlad	ip, r3, r0, ip
 800bf96:	f44f 3480 	mov.w	r4, #65536	; 0x10000
 800bf9a:	fb2b c404 	smlad	r4, fp, r4, ip
 800bf9e:	482a      	ldr	r0, [pc, #168]	; (800c048 <D64_1CH_HTONS_VOL_HP+0x198>)
 800bfa0:	fb22 ec00 	smlad	ip, r2, r0, lr
 800bfa4:	fb2b cc10 	smladx	ip, fp, r0, ip
 800bfa8:	4828      	ldr	r0, [pc, #160]	; (800c04c <D64_1CH_HTONS_VOL_HP+0x19c>)
 800bfaa:	fb21 cc00 	smlad	ip, r1, r0, ip
 800bfae:	fb23 cc10 	smladx	ip, r3, r0, ip
 800bfb2:	f04f 0e01 	mov.w	lr, #1
 800bfb6:	fb22 f20e 	smuad	r2, r2, lr
 800bfba:	4825      	ldr	r0, [pc, #148]	; (800c050 <D64_1CH_HTONS_VOL_HP+0x1a0>)
 800bfbc:	fb21 2100 	smlad	r1, r1, r0, r2
 800bfc0:	4a24      	ldr	r2, [pc, #144]	; (800c054 <D64_1CH_HTONS_VOL_HP+0x1a4>)
 800bfc2:	fb23 1302 	smlad	r3, r3, r2, r1
 800bfc6:	4a24      	ldr	r2, [pc, #144]	; (800c058 <D64_1CH_HTONS_VOL_HP+0x1a8>)
 800bfc8:	fb2b 3e02 	smlad	lr, fp, r2, r3
 800bfcc:	f5a4 3400 	sub.w	r4, r4, #131072	; 0x20000
 800bfd0:	eb04 0208 	add.w	r2, r4, r8
 800bfd4:	eba2 020a 	sub.w	r2, r2, sl
 800bfd8:	46a2      	mov	sl, r4
 800bfda:	4610      	mov	r0, r2
 800bfdc:	17d1      	asrs	r1, r2, #31
 800bfde:	e9cd 0100 	strd	r0, r1, [sp]
 800bfe2:	9904      	ldr	r1, [sp, #16]
 800bfe4:	9801      	ldr	r0, [sp, #4]
 800bfe6:	fba2 2301 	umull	r2, r3, r2, r1
 800bfea:	fb01 3300 	mla	r3, r1, r0, r3
 800bfee:	f112 4000 	adds.w	r0, r2, #2147483648	; 0x80000000
 800bff2:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800bff6:	f143 0100 	adc.w	r1, r3, #0
 800bffa:	9b03      	ldr	r3, [sp, #12]
 800bffc:	02ca      	lsls	r2, r1, #11
 800bffe:	ea4f 0841 	mov.w	r8, r1, lsl #1
 800c002:	2100      	movs	r1, #0
 800c004:	fbc3 0102 	smlal	r0, r1, r3, r2
 800c008:	108b      	asrs	r3, r1, #2
 800c00a:	f303 030f 	ssat	r3, #16, r3
 800c00e:	f827 3b02 	strh.w	r3, [r7], #2
 800c012:	9b05      	ldr	r3, [sp, #20]
 800c014:	429f      	cmp	r7, r3
 800c016:	f47f af67 	bne.w	800bee8 <D64_1CH_HTONS_VOL_HP+0x38>
 800c01a:	4673      	mov	r3, lr
 800c01c:	9a07      	ldr	r2, [sp, #28]
 800c01e:	6093      	str	r3, [r2, #8]
 800c020:	2000      	movs	r0, #0
 800c022:	9b06      	ldr	r3, [sp, #24]
 800c024:	f8c2 c00c 	str.w	ip, [r2, #12]
 800c028:	61d6      	str	r6, [r2, #28]
 800c02a:	6193      	str	r3, [r2, #24]
 800c02c:	e9c2 8404 	strd	r8, r4, [r2, #16]
 800c030:	b009      	add	sp, #36	; 0x24
 800c032:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c036:	bf00      	nop
 800c038:	24000000 	.word	0x24000000
 800c03c:	001c0015 	.word	0x001c0015
 800c040:	000f000a 	.word	0x000f000a
 800c044:	00060003 	.word	0x00060003
 800c048:	0024002a 	.word	0x0024002a
 800c04c:	002e0030 	.word	0x002e0030
 800c050:	00030006 	.word	0x00030006
 800c054:	000a000f 	.word	0x000a000f
 800c058:	0015001c 	.word	0x0015001c

0800c05c <D80_1CH_HTONS_VOL_HP>:
 800c05c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c060:	6913      	ldr	r3, [r2, #16]
 800c062:	b089      	sub	sp, #36	; 0x24
 800c064:	6b16      	ldr	r6, [r2, #48]	; 0x30
 800c066:	9301      	str	r3, [sp, #4]
 800c068:	9603      	str	r6, [sp, #12]
 800c06a:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 800c06c:	6a16      	ldr	r6, [r2, #32]
 800c06e:	e9d2 5305 	ldrd	r5, r3, [r2, #20]
 800c072:	e9d2 7c02 	ldrd	r7, ip, [r2, #8]
 800c076:	9306      	str	r3, [sp, #24]
 800c078:	9604      	str	r6, [sp, #16]
 800c07a:	69d3      	ldr	r3, [r2, #28]
 800c07c:	2c00      	cmp	r4, #0
 800c07e:	f000 80ce 	beq.w	800c21e <D80_1CH_HTONS_VOL_HP+0x1c2>
 800c082:	3902      	subs	r1, #2
 800c084:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 800c088:	4e66      	ldr	r6, [pc, #408]	; (800c224 <D80_1CH_HTONS_VOL_HP+0x1c8>)
 800c08a:	469e      	mov	lr, r3
 800c08c:	9102      	str	r1, [sp, #8]
 800c08e:	46aa      	mov	sl, r5
 800c090:	eb00 0144 	add.w	r1, r0, r4, lsl #1
 800c094:	9207      	str	r2, [sp, #28]
 800c096:	9105      	str	r1, [sp, #20]
 800c098:	6883      	ldr	r3, [r0, #8]
 800c09a:	e9d0 4200 	ldrd	r4, r2, [r0]
 800c09e:	300a      	adds	r0, #10
 800c0a0:	ba64      	rev16	r4, r4
 800c0a2:	ba52      	rev16	r2, r2
 800c0a4:	fa93 fb93 	rev16.w	fp, r3
 800c0a8:	b2e5      	uxtb	r5, r4
 800c0aa:	f3c4 2307 	ubfx	r3, r4, #8, #8
 800c0ae:	f3c4 4107 	ubfx	r1, r4, #16, #8
 800c0b2:	0e24      	lsrs	r4, r4, #24
 800c0b4:	f856 8025 	ldr.w	r8, [r6, r5, lsl #2]
 800c0b8:	b2d5      	uxtb	r5, r2
 800c0ba:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 800c0be:	44c6      	add	lr, r8
 800c0c0:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 800c0c4:	f856 4024 	ldr.w	r4, [r6, r4, lsl #2]
 800c0c8:	eb03 239e 	add.w	r3, r3, lr, lsr #10
 800c0cc:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
 800c0d0:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800c0d4:	eb01 2993 	add.w	r9, r1, r3, lsr #10
 800c0d8:	f3c2 2107 	ubfx	r1, r2, #8, #8
 800c0dc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c0e0:	eb04 2499 	add.w	r4, r4, r9, lsr #10
 800c0e4:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 800c0e8:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 800c0ec:	f3cb 2e07 	ubfx	lr, fp, #8, #8
 800c0f0:	eb05 2894 	add.w	r8, r5, r4, lsr #10
 800c0f4:	f3c2 4507 	ubfx	r5, r2, #16, #8
 800c0f8:	0e12      	lsrs	r2, r2, #24
 800c0fa:	f856 e02e 	ldr.w	lr, [r6, lr, lsl #2]
 800c0fe:	eb01 2198 	add.w	r1, r1, r8, lsr #10
 800c102:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
 800c106:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
 800c10a:	fa5f fb8b 	uxtb.w	fp, fp
 800c10e:	eb05 2591 	add.w	r5, r5, r1, lsr #10
 800c112:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800c116:	f856 b02b 	ldr.w	fp, [r6, fp, lsl #2]
 800c11a:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800c11e:	eb02 2295 	add.w	r2, r2, r5, lsr #10
 800c122:	f3c9 0909 	ubfx	r9, r9, #0, #10
 800c126:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800c12a:	ea41 4808 	orr.w	r8, r1, r8, lsl #16
 800c12e:	eb0b 2b92 	add.w	fp, fp, r2, lsr #10
 800c132:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800c136:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800c13a:	eb0e 2e9b 	add.w	lr, lr, fp, lsr #10
 800c13e:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 800c142:	ea44 4409 	orr.w	r4, r4, r9, lsl #16
 800c146:	f3ce 0109 	ubfx	r1, lr, #0, #10
 800c14a:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
 800c14e:	ea4f 2e9e 	mov.w	lr, lr, lsr #10
 800c152:	ea41 4b0b 	orr.w	fp, r1, fp, lsl #16
 800c156:	4934      	ldr	r1, [pc, #208]	; (800c228 <D80_1CH_HTONS_VOL_HP+0x1cc>)
 800c158:	fb23 cc01 	smlad	ip, r3, r1, ip
 800c15c:	4933      	ldr	r1, [pc, #204]	; (800c22c <D80_1CH_HTONS_VOL_HP+0x1d0>)
 800c15e:	fb24 cc01 	smlad	ip, r4, r1, ip
 800c162:	4933      	ldr	r1, [pc, #204]	; (800c230 <D80_1CH_HTONS_VOL_HP+0x1d4>)
 800c164:	fb28 cc01 	smlad	ip, r8, r1, ip
 800c168:	4932      	ldr	r1, [pc, #200]	; (800c234 <D80_1CH_HTONS_VOL_HP+0x1d8>)
 800c16a:	fb22 cc01 	smlad	ip, r2, r1, ip
 800c16e:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800c172:	fb2b c901 	smlad	r9, fp, r1, ip
 800c176:	4930      	ldr	r1, [pc, #192]	; (800c238 <D80_1CH_HTONS_VOL_HP+0x1dc>)
 800c178:	fb23 7701 	smlad	r7, r3, r1, r7
 800c17c:	492f      	ldr	r1, [pc, #188]	; (800c23c <D80_1CH_HTONS_VOL_HP+0x1e0>)
 800c17e:	fb24 7701 	smlad	r7, r4, r1, r7
 800c182:	f04f 1c4b 	mov.w	ip, #4915275	; 0x4b004b
 800c186:	fb28 7c0c 	smlad	ip, r8, ip, r7
 800c18a:	492d      	ldr	r1, [pc, #180]	; (800c240 <D80_1CH_HTONS_VOL_HP+0x1e4>)
 800c18c:	fb22 cc01 	smlad	ip, r2, r1, ip
 800c190:	492c      	ldr	r1, [pc, #176]	; (800c244 <D80_1CH_HTONS_VOL_HP+0x1e8>)
 800c192:	fb2b cc01 	smlad	ip, fp, r1, ip
 800c196:	2101      	movs	r1, #1
 800c198:	fb23 f301 	smuad	r3, r3, r1
 800c19c:	492a      	ldr	r1, [pc, #168]	; (800c248 <D80_1CH_HTONS_VOL_HP+0x1ec>)
 800c19e:	fb24 3401 	smlad	r4, r4, r1, r3
 800c1a2:	492a      	ldr	r1, [pc, #168]	; (800c24c <D80_1CH_HTONS_VOL_HP+0x1f0>)
 800c1a4:	fb28 4101 	smlad	r1, r8, r1, r4
 800c1a8:	4f29      	ldr	r7, [pc, #164]	; (800c250 <D80_1CH_HTONS_VOL_HP+0x1f4>)
 800c1aa:	fb22 1207 	smlad	r2, r2, r7, r1
 800c1ae:	4f29      	ldr	r7, [pc, #164]	; (800c254 <D80_1CH_HTONS_VOL_HP+0x1f8>)
 800c1b0:	fb2b 2707 	smlad	r7, fp, r7, r2
 800c1b4:	f5a9 317a 	sub.w	r1, r9, #256000	; 0x3e800
 800c1b8:	9b01      	ldr	r3, [sp, #4]
 800c1ba:	9c04      	ldr	r4, [sp, #16]
 800c1bc:	440b      	add	r3, r1
 800c1be:	eba3 020a 	sub.w	r2, r3, sl
 800c1c2:	468a      	mov	sl, r1
 800c1c4:	ea4f 79e2 	mov.w	r9, r2, asr #31
 800c1c8:	fba2 2304 	umull	r2, r3, r2, r4
 800c1cc:	fb04 3309 	mla	r3, r4, r9, r3
 800c1d0:	f112 4400 	adds.w	r4, r2, #2147483648	; 0x80000000
 800c1d4:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800c1d8:	f143 0500 	adc.w	r5, r3, #0
 800c1dc:	006b      	lsls	r3, r5, #1
 800c1de:	02aa      	lsls	r2, r5, #10
 800c1e0:	2500      	movs	r5, #0
 800c1e2:	9301      	str	r3, [sp, #4]
 800c1e4:	9b03      	ldr	r3, [sp, #12]
 800c1e6:	fbc3 4502 	smlal	r4, r5, r3, r2
 800c1ea:	9a02      	ldr	r2, [sp, #8]
 800c1ec:	10ab      	asrs	r3, r5, #2
 800c1ee:	f303 030f 	ssat	r3, #16, r3
 800c1f2:	f822 3f02 	strh.w	r3, [r2, #2]!
 800c1f6:	9b05      	ldr	r3, [sp, #20]
 800c1f8:	9202      	str	r2, [sp, #8]
 800c1fa:	4298      	cmp	r0, r3
 800c1fc:	f47f af4c 	bne.w	800c098 <D80_1CH_HTONS_VOL_HP+0x3c>
 800c200:	4673      	mov	r3, lr
 800c202:	9a07      	ldr	r2, [sp, #28]
 800c204:	61d3      	str	r3, [r2, #28]
 800c206:	2000      	movs	r0, #0
 800c208:	9b01      	ldr	r3, [sp, #4]
 800c20a:	6097      	str	r7, [r2, #8]
 800c20c:	f8c2 c00c 	str.w	ip, [r2, #12]
 800c210:	e9c2 3104 	strd	r3, r1, [r2, #16]
 800c214:	9b06      	ldr	r3, [sp, #24]
 800c216:	6193      	str	r3, [r2, #24]
 800c218:	b009      	add	sp, #36	; 0x24
 800c21a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c21e:	4629      	mov	r1, r5
 800c220:	e7f0      	b.n	800c204 <D80_1CH_HTONS_VOL_HP+0x1a8>
 800c222:	bf00      	nop
 800c224:	24000000 	.word	0x24000000
 800c228:	002d0024 	.word	0x002d0024
 800c22c:	001c0015 	.word	0x001c0015
 800c230:	000f000a 	.word	0x000f000a
 800c234:	00060003 	.word	0x00060003
 800c238:	0037003f 	.word	0x0037003f
 800c23c:	00450049 	.word	0x00450049
 800c240:	00490045 	.word	0x00490045
 800c244:	003f0037 	.word	0x003f0037
 800c248:	00030006 	.word	0x00030006
 800c24c:	000a000f 	.word	0x000a000f
 800c250:	0015001c 	.word	0x0015001c
 800c254:	0024002d 	.word	0x0024002d

0800c258 <D128_1CH_HTONS_VOL_HP>:
 800c258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c25c:	6914      	ldr	r4, [r2, #16]
 800c25e:	b08d      	sub	sp, #52	; 0x34
 800c260:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 800c262:	9404      	str	r4, [sp, #16]
 800c264:	6954      	ldr	r4, [r2, #20]
 800c266:	920b      	str	r2, [sp, #44]	; 0x2c
 800c268:	9405      	str	r4, [sp, #20]
 800c26a:	6994      	ldr	r4, [r2, #24]
 800c26c:	f8d2 c01c 	ldr.w	ip, [r2, #28]
 800c270:	940a      	str	r4, [sp, #40]	; 0x28
 800c272:	6894      	ldr	r4, [r2, #8]
 800c274:	9403      	str	r4, [sp, #12]
 800c276:	68d4      	ldr	r4, [r2, #12]
 800c278:	9402      	str	r4, [sp, #8]
 800c27a:	6b14      	ldr	r4, [r2, #48]	; 0x30
 800c27c:	6a12      	ldr	r2, [r2, #32]
 800c27e:	9407      	str	r4, [sp, #28]
 800c280:	9208      	str	r2, [sp, #32]
 800c282:	2b00      	cmp	r3, #0
 800c284:	f000 812e 	beq.w	800c4e4 <D128_1CH_HTONS_VOL_HP+0x28c>
 800c288:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 800c28c:	f100 0b10 	add.w	fp, r0, #16
 800c290:	f8df 9290 	ldr.w	r9, [pc, #656]	; 800c524 <D128_1CH_HTONS_VOL_HP+0x2cc>
 800c294:	9106      	str	r1, [sp, #24]
 800c296:	9309      	str	r3, [sp, #36]	; 0x24
 800c298:	e95b 0204 	ldrd	r0, r2, [fp, #-16]
 800c29c:	e95b 3602 	ldrd	r3, r6, [fp, #-8]
 800c2a0:	ba40      	rev16	r0, r0
 800c2a2:	ba52      	rev16	r2, r2
 800c2a4:	ba5b      	rev16	r3, r3
 800c2a6:	ba76      	rev16	r6, r6
 800c2a8:	b2c5      	uxtb	r5, r0
 800c2aa:	f3c0 2407 	ubfx	r4, r0, #8, #8
 800c2ae:	f3c0 4107 	ubfx	r1, r0, #16, #8
 800c2b2:	0e00      	lsrs	r0, r0, #24
 800c2b4:	f859 7025 	ldr.w	r7, [r9, r5, lsl #2]
 800c2b8:	b2d5      	uxtb	r5, r2
 800c2ba:	f859 e024 	ldr.w	lr, [r9, r4, lsl #2]
 800c2be:	f3c2 2407 	ubfx	r4, r2, #8, #8
 800c2c2:	44bc      	add	ip, r7
 800c2c4:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800c2c8:	f859 7020 	ldr.w	r7, [r9, r0, lsl #2]
 800c2cc:	f3c2 4007 	ubfx	r0, r2, #16, #8
 800c2d0:	eb0e 2e9c 	add.w	lr, lr, ip, lsr #10
 800c2d4:	f859 a025 	ldr.w	sl, [r9, r5, lsl #2]
 800c2d8:	f859 5024 	ldr.w	r5, [r9, r4, lsl #2]
 800c2dc:	0e12      	lsrs	r2, r2, #24
 800c2de:	eb01 219e 	add.w	r1, r1, lr, lsr #10
 800c2e2:	f859 0020 	ldr.w	r0, [r9, r0, lsl #2]
 800c2e6:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 800c2ea:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800c2ee:	eb07 2791 	add.w	r7, r7, r1, lsr #10
 800c2f2:	f859 4022 	ldr.w	r4, [r9, r2, lsl #2]
 800c2f6:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800c2fa:	b2da      	uxtb	r2, r3
 800c2fc:	eb0a 2a97 	add.w	sl, sl, r7, lsr #10
 800c300:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800c304:	ea4e 4e0c 	orr.w	lr, lr, ip, lsl #16
 800c308:	f859 2022 	ldr.w	r2, [r9, r2, lsl #2]
 800c30c:	eb05 259a 	add.w	r5, r5, sl, lsr #10
 800c310:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 800c314:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800c318:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800c31c:	eb00 2c95 	add.w	ip, r0, r5, lsr #10
 800c320:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800c324:	f859 8021 	ldr.w	r8, [r9, r1, lsl #2]
 800c328:	f3c3 4107 	ubfx	r1, r3, #16, #8
 800c32c:	eb04 249c 	add.w	r4, r4, ip, lsr #10
 800c330:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 800c334:	f859 0021 	ldr.w	r0, [r9, r1, lsl #2]
 800c338:	0e1b      	lsrs	r3, r3, #24
 800c33a:	eb02 2294 	add.w	r2, r2, r4, lsr #10
 800c33e:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800c342:	f859 1023 	ldr.w	r1, [r9, r3, lsl #2]
 800c346:	ea45 450a 	orr.w	r5, r5, sl, lsl #16
 800c34a:	eb08 2892 	add.w	r8, r8, r2, lsr #10
 800c34e:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800c352:	b2f3      	uxtb	r3, r6
 800c354:	eb00 2a98 	add.w	sl, r0, r8, lsr #10
 800c358:	f3c8 0009 	ubfx	r0, r8, #0, #10
 800c35c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800c360:	ea44 440c 	orr.w	r4, r4, ip, lsl #16
 800c364:	eb01 219a 	add.w	r1, r1, sl, lsr #10
 800c368:	f3c6 2c07 	ubfx	ip, r6, #8, #8
 800c36c:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 800c370:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 800c374:	eb03 2891 	add.w	r8, r3, r1, lsr #10
 800c378:	f859 202c 	ldr.w	r2, [r9, ip, lsl #2]
 800c37c:	f3c6 4c07 	ubfx	ip, r6, #16, #8
 800c380:	0e36      	lsrs	r6, r6, #24
 800c382:	eb02 2298 	add.w	r2, r2, r8, lsr #10
 800c386:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800c38a:	f859 302c 	ldr.w	r3, [r9, ip, lsl #2]
 800c38e:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800c392:	f859 c026 	ldr.w	ip, [r9, r6, lsl #2]
 800c396:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800c39a:	eb03 2692 	add.w	r6, r3, r2, lsr #10
 800c39e:	f3c2 0309 	ubfx	r3, r2, #0, #10
 800c3a2:	9101      	str	r1, [sp, #4]
 800c3a4:	ea43 4208 	orr.w	r2, r3, r8, lsl #16
 800c3a8:	9b02      	ldr	r3, [sp, #8]
 800c3aa:	eb0c 2c96 	add.w	ip, ip, r6, lsr #10
 800c3ae:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800c3b2:	4611      	mov	r1, r2
 800c3b4:	f3cc 0209 	ubfx	r2, ip, #0, #10
 800c3b8:	ea4f 2c9c 	mov.w	ip, ip, lsr #10
 800c3bc:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
 800c3c0:	4a49      	ldr	r2, [pc, #292]	; (800c4e8 <D128_1CH_HTONS_VOL_HP+0x290>)
 800c3c2:	fb2e 3202 	smlad	r2, lr, r2, r3
 800c3c6:	4b49      	ldr	r3, [pc, #292]	; (800c4ec <D128_1CH_HTONS_VOL_HP+0x294>)
 800c3c8:	fb27 2203 	smlad	r2, r7, r3, r2
 800c3cc:	4b48      	ldr	r3, [pc, #288]	; (800c4f0 <D128_1CH_HTONS_VOL_HP+0x298>)
 800c3ce:	fb25 2203 	smlad	r2, r5, r3, r2
 800c3d2:	4b48      	ldr	r3, [pc, #288]	; (800c4f4 <D128_1CH_HTONS_VOL_HP+0x29c>)
 800c3d4:	fb24 2203 	smlad	r2, r4, r3, r2
 800c3d8:	4b47      	ldr	r3, [pc, #284]	; (800c4f8 <D128_1CH_HTONS_VOL_HP+0x2a0>)
 800c3da:	fb20 2803 	smlad	r8, r0, r3, r2
 800c3de:	4b47      	ldr	r3, [pc, #284]	; (800c4fc <D128_1CH_HTONS_VOL_HP+0x2a4>)
 800c3e0:	9a01      	ldr	r2, [sp, #4]
 800c3e2:	fb22 8203 	smlad	r2, r2, r3, r8
 800c3e6:	4b46      	ldr	r3, [pc, #280]	; (800c500 <D128_1CH_HTONS_VOL_HP+0x2a8>)
 800c3e8:	9102      	str	r1, [sp, #8]
 800c3ea:	fb21 2203 	smlad	r2, r1, r3, r2
 800c3ee:	f44f 3880 	mov.w	r8, #65536	; 0x10000
 800c3f2:	fb26 2308 	smlad	r3, r6, r8, r2
 800c3f6:	4619      	mov	r1, r3
 800c3f8:	9a03      	ldr	r2, [sp, #12]
 800c3fa:	4b42      	ldr	r3, [pc, #264]	; (800c504 <D128_1CH_HTONS_VOL_HP+0x2ac>)
 800c3fc:	fb2e 2803 	smlad	r8, lr, r3, r2
 800c400:	4b41      	ldr	r3, [pc, #260]	; (800c508 <D128_1CH_HTONS_VOL_HP+0x2b0>)
 800c402:	fb27 8a03 	smlad	sl, r7, r3, r8
 800c406:	f8df 8120 	ldr.w	r8, [pc, #288]	; 800c528 <D128_1CH_HTONS_VOL_HP+0x2d0>
 800c40a:	fb25 a808 	smlad	r8, r5, r8, sl
 800c40e:	f8df a11c 	ldr.w	sl, [pc, #284]	; 800c52c <D128_1CH_HTONS_VOL_HP+0x2d4>
 800c412:	fb24 880a 	smlad	r8, r4, sl, r8
 800c416:	f8df a118 	ldr.w	sl, [pc, #280]	; 800c530 <D128_1CH_HTONS_VOL_HP+0x2d8>
 800c41a:	fb20 8a0a 	smlad	sl, r0, sl, r8
 800c41e:	f8df 8114 	ldr.w	r8, [pc, #276]	; 800c534 <D128_1CH_HTONS_VOL_HP+0x2dc>
 800c422:	9b01      	ldr	r3, [sp, #4]
 800c424:	fb23 aa08 	smlad	sl, r3, r8, sl
 800c428:	f8df 810c 	ldr.w	r8, [pc, #268]	; 800c538 <D128_1CH_HTONS_VOL_HP+0x2e0>
 800c42c:	9a02      	ldr	r2, [sp, #8]
 800c42e:	fb22 a808 	smlad	r8, r2, r8, sl
 800c432:	f8df a108 	ldr.w	sl, [pc, #264]	; 800c53c <D128_1CH_HTONS_VOL_HP+0x2e4>
 800c436:	fb26 830a 	smlad	r3, r6, sl, r8
 800c43a:	f04f 0801 	mov.w	r8, #1
 800c43e:	9302      	str	r3, [sp, #8]
 800c440:	fb2e fe08 	smuad	lr, lr, r8
 800c444:	f8df 80f8 	ldr.w	r8, [pc, #248]	; 800c540 <D128_1CH_HTONS_VOL_HP+0x2e8>
 800c448:	fb27 ee08 	smlad	lr, r7, r8, lr
 800c44c:	4f2f      	ldr	r7, [pc, #188]	; (800c50c <D128_1CH_HTONS_VOL_HP+0x2b4>)
 800c44e:	fb25 ee07 	smlad	lr, r5, r7, lr
 800c452:	4f2f      	ldr	r7, [pc, #188]	; (800c510 <D128_1CH_HTONS_VOL_HP+0x2b8>)
 800c454:	fb24 ee07 	smlad	lr, r4, r7, lr
 800c458:	4f2e      	ldr	r7, [pc, #184]	; (800c514 <D128_1CH_HTONS_VOL_HP+0x2bc>)
 800c45a:	fb20 ee07 	smlad	lr, r0, r7, lr
 800c45e:	4f2e      	ldr	r7, [pc, #184]	; (800c518 <D128_1CH_HTONS_VOL_HP+0x2c0>)
 800c460:	9b01      	ldr	r3, [sp, #4]
 800c462:	fb23 ee07 	smlad	lr, r3, r7, lr
 800c466:	4f2d      	ldr	r7, [pc, #180]	; (800c51c <D128_1CH_HTONS_VOL_HP+0x2c4>)
 800c468:	fb22 e707 	smlad	r7, r2, r7, lr
 800c46c:	4b2c      	ldr	r3, [pc, #176]	; (800c520 <D128_1CH_HTONS_VOL_HP+0x2c8>)
 800c46e:	fb26 7303 	smlad	r3, r6, r3, r7
 800c472:	f5a1 1680 	sub.w	r6, r1, #1048576	; 0x100000
 800c476:	9303      	str	r3, [sp, #12]
 800c478:	9b04      	ldr	r3, [sp, #16]
 800c47a:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800c47e:	9f08      	ldr	r7, [sp, #32]
 800c480:	2100      	movs	r1, #0
 800c482:	4433      	add	r3, r6
 800c484:	f10b 0b10 	add.w	fp, fp, #16
 800c488:	461a      	mov	r2, r3
 800c48a:	9b05      	ldr	r3, [sp, #20]
 800c48c:	9605      	str	r6, [sp, #20]
 800c48e:	1ad2      	subs	r2, r2, r3
 800c490:	17d5      	asrs	r5, r2, #31
 800c492:	fba2 2307 	umull	r2, r3, r2, r7
 800c496:	1814      	adds	r4, r2, r0
 800c498:	fb07 3305 	mla	r3, r7, r5, r3
 800c49c:	eb43 0501 	adc.w	r5, r3, r1
 800c4a0:	006b      	lsls	r3, r5, #1
 800c4a2:	022a      	lsls	r2, r5, #8
 800c4a4:	9304      	str	r3, [sp, #16]
 800c4a6:	9b07      	ldr	r3, [sp, #28]
 800c4a8:	fbc3 0102 	smlal	r0, r1, r3, r2
 800c4ac:	9a06      	ldr	r2, [sp, #24]
 800c4ae:	108b      	asrs	r3, r1, #2
 800c4b0:	f303 030f 	ssat	r3, #16, r3
 800c4b4:	f822 3b02 	strh.w	r3, [r2], #2
 800c4b8:	4613      	mov	r3, r2
 800c4ba:	9206      	str	r2, [sp, #24]
 800c4bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c4be:	4293      	cmp	r3, r2
 800c4c0:	f47f aeea 	bne.w	800c298 <D128_1CH_HTONS_VOL_HP+0x40>
 800c4c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c4c6:	2000      	movs	r0, #0
 800c4c8:	9903      	ldr	r1, [sp, #12]
 800c4ca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c4cc:	6099      	str	r1, [r3, #8]
 800c4ce:	9902      	ldr	r1, [sp, #8]
 800c4d0:	f8c3 c01c 	str.w	ip, [r3, #28]
 800c4d4:	60d9      	str	r1, [r3, #12]
 800c4d6:	9904      	ldr	r1, [sp, #16]
 800c4d8:	619a      	str	r2, [r3, #24]
 800c4da:	e9c3 1604 	strd	r1, r6, [r3, #16]
 800c4de:	b00d      	add	sp, #52	; 0x34
 800c4e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c4e4:	9e05      	ldr	r6, [sp, #20]
 800c4e6:	e7ed      	b.n	800c4c4 <D128_1CH_HTONS_VOL_HP+0x26c>
 800c4e8:	00780069 	.word	0x00780069
 800c4ec:	005b004e 	.word	0x005b004e
 800c4f0:	00420037 	.word	0x00420037
 800c4f4:	002d0024 	.word	0x002d0024
 800c4f8:	001c0015 	.word	0x001c0015
 800c4fc:	000f000a 	.word	0x000f000a
 800c500:	00060003 	.word	0x00060003
 800c504:	00880096 	.word	0x00880096
 800c508:	00a200ac 	.word	0x00a200ac
 800c50c:	000a000f 	.word	0x000a000f
 800c510:	0015001c 	.word	0x0015001c
 800c514:	0024002d 	.word	0x0024002d
 800c518:	00370042 	.word	0x00370042
 800c51c:	004e005b 	.word	0x004e005b
 800c520:	00690078 	.word	0x00690078
 800c524:	24000000 	.word	0x24000000
 800c528:	00b400ba 	.word	0x00b400ba
 800c52c:	00be00c0 	.word	0x00be00c0
 800c530:	00c000be 	.word	0x00c000be
 800c534:	00ba00b4 	.word	0x00ba00b4
 800c538:	00ac00a2 	.word	0x00ac00a2
 800c53c:	00960088 	.word	0x00960088
 800c540:	00030006 	.word	0x00030006

0800c544 <PDM_Filter_Init>:
 800c544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c546:	2240      	movs	r2, #64	; 0x40
 800c548:	2100      	movs	r1, #0
 800c54a:	4604      	mov	r4, r0
 800c54c:	300c      	adds	r0, #12
 800c54e:	f000 fa07 	bl	800c960 <memset>
 800c552:	4a56      	ldr	r2, [pc, #344]	; (800c6ac <PDM_Filter_Init+0x168>)
 800c554:	4856      	ldr	r0, [pc, #344]	; (800c6b0 <PDM_Filter_Init+0x16c>)
 800c556:	f64f 71f0 	movw	r1, #65520	; 0xfff0
 800c55a:	6813      	ldr	r3, [r2, #0]
 800c55c:	f24c 2540 	movw	r5, #49728	; 0xc240
 800c560:	f023 0301 	bic.w	r3, r3, #1
 800c564:	6013      	str	r3, [r2, #0]
 800c566:	6803      	ldr	r3, [r0, #0]
 800c568:	400b      	ands	r3, r1
 800c56a:	42ab      	cmp	r3, r5
 800c56c:	d040      	beq.n	800c5f0 <PDM_Filter_Init+0xac>
 800c56e:	6803      	ldr	r3, [r0, #0]
 800c570:	f24c 2270 	movw	r2, #49776	; 0xc270
 800c574:	4019      	ands	r1, r3
 800c576:	4291      	cmp	r1, r2
 800c578:	d03a      	beq.n	800c5f0 <PDM_Filter_Init+0xac>
 800c57a:	4b4e      	ldr	r3, [pc, #312]	; (800c6b4 <PDM_Filter_Init+0x170>)
 800c57c:	2101      	movs	r1, #1
 800c57e:	461a      	mov	r2, r3
 800c580:	6019      	str	r1, [r3, #0]
 800c582:	6813      	ldr	r3, [r2, #0]
 800c584:	2b00      	cmp	r3, #0
 800c586:	d1fc      	bne.n	800c582 <PDM_Filter_Init+0x3e>
 800c588:	4b4b      	ldr	r3, [pc, #300]	; (800c6b8 <PDM_Filter_Init+0x174>)
 800c58a:	494c      	ldr	r1, [pc, #304]	; (800c6bc <PDM_Filter_Init+0x178>)
 800c58c:	4a4c      	ldr	r2, [pc, #304]	; (800c6c0 <PDM_Filter_Init+0x17c>)
 800c58e:	6019      	str	r1, [r3, #0]
 800c590:	681b      	ldr	r3, [r3, #0]
 800c592:	8820      	ldrh	r0, [r4, #0]
 800c594:	4293      	cmp	r3, r2
 800c596:	8961      	ldrh	r1, [r4, #10]
 800c598:	f04f 0300 	mov.w	r3, #0
 800c59c:	8922      	ldrh	r2, [r4, #8]
 800c59e:	bf14      	ite	ne
 800c5a0:	2500      	movne	r5, #0
 800c5a2:	4d47      	ldreq	r5, [pc, #284]	; (800c6c0 <PDM_Filter_Init+0x17c>)
 800c5a4:	2801      	cmp	r0, #1
 800c5a6:	61a3      	str	r3, [r4, #24]
 800c5a8:	6465      	str	r5, [r4, #68]	; 0x44
 800c5aa:	60e3      	str	r3, [r4, #12]
 800c5ac:	6263      	str	r3, [r4, #36]	; 0x24
 800c5ae:	6423      	str	r3, [r4, #64]	; 0x40
 800c5b0:	86a1      	strh	r1, [r4, #52]	; 0x34
 800c5b2:	86e2      	strh	r2, [r4, #54]	; 0x36
 800c5b4:	e9c4 3304 	strd	r3, r3, [r4, #16]
 800c5b8:	e9c4 3307 	strd	r3, r3, [r4, #28]
 800c5bc:	d936      	bls.n	800c62c <PDM_Filter_Init+0xe8>
 800c5be:	2003      	movs	r0, #3
 800c5c0:	2302      	movs	r3, #2
 800c5c2:	8862      	ldrh	r2, [r4, #2]
 800c5c4:	2a01      	cmp	r2, #1
 800c5c6:	d92e      	bls.n	800c626 <PDM_Filter_Init+0xe2>
 800c5c8:	2140      	movs	r1, #64	; 0x40
 800c5ca:	2300      	movs	r3, #0
 800c5cc:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800c5ce:	f1b2 1f01 	cmp.w	r2, #65537	; 0x10001
 800c5d2:	d101      	bne.n	800c5d8 <PDM_Filter_Init+0x94>
 800c5d4:	460b      	mov	r3, r1
 800c5d6:	6421      	str	r1, [r4, #64]	; 0x40
 800c5d8:	6862      	ldr	r2, [r4, #4]
 800c5da:	b11a      	cbz	r2, 800c5e4 <PDM_Filter_Init+0xa0>
 800c5dc:	f043 0310 	orr.w	r3, r3, #16
 800c5e0:	62e2      	str	r2, [r4, #44]	; 0x2c
 800c5e2:	6423      	str	r3, [r4, #64]	; 0x40
 800c5e4:	2200      	movs	r2, #0
 800c5e6:	8722      	strh	r2, [r4, #56]	; 0x38
 800c5e8:	b908      	cbnz	r0, 800c5ee <PDM_Filter_Init+0xaa>
 800c5ea:	3380      	adds	r3, #128	; 0x80
 800c5ec:	6423      	str	r3, [r4, #64]	; 0x40
 800c5ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c5f0:	4b34      	ldr	r3, [pc, #208]	; (800c6c4 <PDM_Filter_Init+0x180>)
 800c5f2:	681b      	ldr	r3, [r3, #0]
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	d1c0      	bne.n	800c57a <PDM_Filter_Init+0x36>
 800c5f8:	4a33      	ldr	r2, [pc, #204]	; (800c6c8 <PDM_Filter_Init+0x184>)
 800c5fa:	6813      	ldr	r3, [r2, #0]
 800c5fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c600:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800c604:	d006      	beq.n	800c614 <PDM_Filter_Init+0xd0>
 800c606:	6813      	ldr	r3, [r2, #0]
 800c608:	f240 4283 	movw	r2, #1155	; 0x483
 800c60c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c610:	4293      	cmp	r3, r2
 800c612:	d1b2      	bne.n	800c57a <PDM_Filter_Init+0x36>
 800c614:	4b2d      	ldr	r3, [pc, #180]	; (800c6cc <PDM_Filter_Init+0x188>)
 800c616:	2101      	movs	r1, #1
 800c618:	461a      	mov	r2, r3
 800c61a:	6019      	str	r1, [r3, #0]
 800c61c:	6813      	ldr	r3, [r2, #0]
 800c61e:	2b00      	cmp	r3, #0
 800c620:	d1fc      	bne.n	800c61c <PDM_Filter_Init+0xd8>
 800c622:	4b2b      	ldr	r3, [pc, #172]	; (800c6d0 <PDM_Filter_Init+0x18c>)
 800c624:	e7b1      	b.n	800c58a <PDM_Filter_Init+0x46>
 800c626:	d03a      	beq.n	800c69e <PDM_Filter_Init+0x15a>
 800c628:	4618      	mov	r0, r3
 800c62a:	e7cd      	b.n	800c5c8 <PDM_Filter_Init+0x84>
 800c62c:	4d29      	ldr	r5, [pc, #164]	; (800c6d4 <PDM_Filter_Init+0x190>)
 800c62e:	782a      	ldrb	r2, [r5, #0]
 800c630:	d01b      	beq.n	800c66a <PDM_Filter_Init+0x126>
 800c632:	2a01      	cmp	r2, #1
 800c634:	d001      	beq.n	800c63a <PDM_Filter_Init+0xf6>
 800c636:	2001      	movs	r0, #1
 800c638:	e7c3      	b.n	800c5c2 <PDM_Filter_Init+0x7e>
 800c63a:	4927      	ldr	r1, [pc, #156]	; (800c6d8 <PDM_Filter_Init+0x194>)
 800c63c:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 800c6e0 <PDM_Filter_Init+0x19c>
 800c640:	f501 6780 	add.w	r7, r1, #1024	; 0x400
 800c644:	4e25      	ldr	r6, [pc, #148]	; (800c6dc <PDM_Filter_Init+0x198>)
 800c646:	f851 2f04 	ldr.w	r2, [r1, #4]!
 800c64a:	ea0c 5302 	and.w	r3, ip, r2, lsl #20
 800c64e:	ea02 0006 	and.w	r0, r2, r6
 800c652:	f3c2 5209 	ubfx	r2, r2, #20, #10
 800c656:	428f      	cmp	r7, r1
 800c658:	ea43 0300 	orr.w	r3, r3, r0
 800c65c:	4413      	add	r3, r2
 800c65e:	600b      	str	r3, [r1, #0]
 800c660:	d1f1      	bne.n	800c646 <PDM_Filter_Init+0x102>
 800c662:	2300      	movs	r3, #0
 800c664:	2001      	movs	r0, #1
 800c666:	702b      	strb	r3, [r5, #0]
 800c668:	e7ab      	b.n	800c5c2 <PDM_Filter_Init+0x7e>
 800c66a:	2a00      	cmp	r2, #0
 800c66c:	d1a9      	bne.n	800c5c2 <PDM_Filter_Init+0x7e>
 800c66e:	491a      	ldr	r1, [pc, #104]	; (800c6d8 <PDM_Filter_Init+0x194>)
 800c670:	f8df c06c 	ldr.w	ip, [pc, #108]	; 800c6e0 <PDM_Filter_Init+0x19c>
 800c674:	f501 6780 	add.w	r7, r1, #1024	; 0x400
 800c678:	4e18      	ldr	r6, [pc, #96]	; (800c6dc <PDM_Filter_Init+0x198>)
 800c67a:	f851 2f04 	ldr.w	r2, [r1, #4]!
 800c67e:	ea0c 5302 	and.w	r3, ip, r2, lsl #20
 800c682:	ea02 0006 	and.w	r0, r2, r6
 800c686:	f3c2 5209 	ubfx	r2, r2, #20, #10
 800c68a:	428f      	cmp	r7, r1
 800c68c:	ea43 0300 	orr.w	r3, r3, r0
 800c690:	4413      	add	r3, r2
 800c692:	600b      	str	r3, [r1, #0]
 800c694:	d1f1      	bne.n	800c67a <PDM_Filter_Init+0x136>
 800c696:	2001      	movs	r0, #1
 800c698:	2300      	movs	r3, #0
 800c69a:	7028      	strb	r0, [r5, #0]
 800c69c:	e791      	b.n	800c5c2 <PDM_Filter_Init+0x7e>
 800c69e:	2220      	movs	r2, #32
 800c6a0:	4618      	mov	r0, r3
 800c6a2:	2160      	movs	r1, #96	; 0x60
 800c6a4:	6422      	str	r2, [r4, #64]	; 0x40
 800c6a6:	4613      	mov	r3, r2
 800c6a8:	e790      	b.n	800c5cc <PDM_Filter_Init+0x88>
 800c6aa:	bf00      	nop
 800c6ac:	e0002000 	.word	0xe0002000
 800c6b0:	e000ed00 	.word	0xe000ed00
 800c6b4:	40023008 	.word	0x40023008
 800c6b8:	40023000 	.word	0x40023000
 800c6bc:	f407a5c2 	.word	0xf407a5c2
 800c6c0:	b5e8b5cd 	.word	0xb5e8b5cd
 800c6c4:	e0042000 	.word	0xe0042000
 800c6c8:	5c001000 	.word	0x5c001000
 800c6cc:	58024c08 	.word	0x58024c08
 800c6d0:	58024c00 	.word	0x58024c00
 800c6d4:	2400087c 	.word	0x2400087c
 800c6d8:	23fffffc 	.word	0x23fffffc
 800c6dc:	000ffc00 	.word	0x000ffc00
 800c6e0:	3ff00000 	.word	0x3ff00000

0800c6e4 <PDM_Filter_setConfig>:
 800c6e4:	4b67      	ldr	r3, [pc, #412]	; (800c884 <PDM_Filter_setConfig+0x1a0>)
 800c6e6:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c6e8:	429a      	cmp	r2, r3
 800c6ea:	d128      	bne.n	800c73e <PDM_Filter_setConfig+0x5a>
 800c6ec:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800c6ee:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c6f0:	880e      	ldrh	r6, [r1, #0]
 800c6f2:	460d      	mov	r5, r1
 800c6f4:	4604      	mov	r4, r0
 800c6f6:	f422 7180 	bic.w	r1, r2, #256	; 0x100
 800c6fa:	1e73      	subs	r3, r6, #1
 800c6fc:	f9b5 7004 	ldrsh.w	r7, [r5, #4]
 800c700:	f9b0 0038 	ldrsh.w	r0, [r0, #56]	; 0x38
 800c704:	2b06      	cmp	r3, #6
 800c706:	ed2d 8b02 	vpush	{d8}
 800c70a:	6421      	str	r1, [r4, #64]	; 0x40
 800c70c:	b083      	sub	sp, #12
 800c70e:	d820      	bhi.n	800c752 <PDM_Filter_setConfig+0x6e>
 800c710:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 800c712:	42b3      	cmp	r3, r6
 800c714:	d03d      	beq.n	800c792 <PDM_Filter_setConfig+0xae>
 800c716:	4b5c      	ldr	r3, [pc, #368]	; (800c888 <PDM_Filter_setConfig+0x1a4>)
 800c718:	4013      	ands	r3, r2
 800c71a:	4333      	orrs	r3, r6
 800c71c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800c720:	6423      	str	r3, [r4, #64]	; 0x40
 800c722:	f003 030f 	and.w	r3, r3, #15
 800c726:	2a70      	cmp	r2, #112	; 0x70
 800c728:	f103 33ff 	add.w	r3, r3, #4294967295
 800c72c:	d009      	beq.n	800c742 <PDM_Filter_setConfig+0x5e>
 800c72e:	2b06      	cmp	r3, #6
 800c730:	d824      	bhi.n	800c77c <PDM_Filter_setConfig+0x98>
 800c732:	e8df f003 	tbb	[pc, r3]
 800c736:	878a      	.short	0x878a
 800c738:	7b7e8184 	.word	0x7b7e8184
 800c73c:	78          	.byte	0x78
 800c73d:	00          	.byte	0x00
 800c73e:	2004      	movs	r0, #4
 800c740:	4770      	bx	lr
 800c742:	2b06      	cmp	r3, #6
 800c744:	d81a      	bhi.n	800c77c <PDM_Filter_setConfig+0x98>
 800c746:	e8df f003 	tbb	[pc, r3]
 800c74a:	8f92      	.short	0x8f92
 800c74c:	8617898c 	.word	0x8617898c
 800c750:	83          	.byte	0x83
 800c751:	00          	.byte	0x00
 800c752:	4287      	cmp	r7, r0
 800c754:	f000 808e 	beq.w	800c874 <PDM_Filter_setConfig+0x190>
 800c758:	f117 0f0c 	cmn.w	r7, #12
 800c75c:	f04f 0008 	mov.w	r0, #8
 800c760:	da11      	bge.n	800c786 <PDM_Filter_setConfig+0xa2>
 800c762:	f64f 73f4 	movw	r3, #65524	; 0xfff4
 800c766:	3040      	adds	r0, #64	; 0x40
 800c768:	80ab      	strh	r3, [r5, #4]
 800c76a:	886b      	ldrh	r3, [r5, #2]
 800c76c:	8626      	strh	r6, [r4, #48]	; 0x30
 800c76e:	8663      	strh	r3, [r4, #50]	; 0x32
 800c770:	b003      	add	sp, #12
 800c772:	ecbd 8b02 	vpop	{d8}
 800c776:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c778:	4b44      	ldr	r3, [pc, #272]	; (800c88c <PDM_Filter_setConfig+0x1a8>)
 800c77a:	64a3      	str	r3, [r4, #72]	; 0x48
 800c77c:	f117 0f0c 	cmn.w	r7, #12
 800c780:	f04f 0000 	mov.w	r0, #0
 800c784:	dbed      	blt.n	800c762 <PDM_Filter_setConfig+0x7e>
 800c786:	2f33      	cmp	r7, #51	; 0x33
 800c788:	dd10      	ble.n	800c7ac <PDM_Filter_setConfig+0xc8>
 800c78a:	2333      	movs	r3, #51	; 0x33
 800c78c:	3040      	adds	r0, #64	; 0x40
 800c78e:	80ab      	strh	r3, [r5, #4]
 800c790:	e7eb      	b.n	800c76a <PDM_Filter_setConfig+0x86>
 800c792:	4287      	cmp	r7, r0
 800c794:	d1f2      	bne.n	800c77c <PDM_Filter_setConfig+0x98>
 800c796:	886b      	ldrh	r3, [r5, #2]
 800c798:	8663      	strh	r3, [r4, #50]	; 0x32
 800c79a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c79c:	2000      	movs	r0, #0
 800c79e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c7a2:	6423      	str	r3, [r4, #64]	; 0x40
 800c7a4:	b003      	add	sp, #12
 800c7a6:	ecbd 8b02 	vpop	{d8}
 800c7aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c7ac:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c7ae:	f003 030f 	and.w	r3, r3, #15
 800c7b2:	3b01      	subs	r3, #1
 800c7b4:	2b06      	cmp	r3, #6
 800c7b6:	d831      	bhi.n	800c81c <PDM_Filter_setConfig+0x138>
 800c7b8:	4a35      	ldr	r2, [pc, #212]	; (800c890 <PDM_Filter_setConfig+0x1ac>)
 800c7ba:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 800c7be:	eddf 0a35 	vldr	s1, [pc, #212]	; 800c894 <PDM_Filter_setConfig+0x1b0>
 800c7c2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c7c6:	9001      	str	r0, [sp, #4]
 800c7c8:	edd3 7a07 	vldr	s15, [r3, #28]
 800c7cc:	ed93 8a00 	vldr	s16, [r3]
 800c7d0:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800c7d4:	f000 f8e4 	bl	800c9a0 <powf>
 800c7d8:	eef0 8a40 	vmov.f32	s17, s0
 800c7dc:	9801      	ldr	r0, [sp, #4]
 800c7de:	ee07 7a90 	vmov	s15, r7
 800c7e2:	ee28 8a28 	vmul.f32	s16, s16, s17
 800c7e6:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 800c7ea:	9001      	str	r0, [sp, #4]
 800c7ec:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 800c7f0:	eddf 7a29 	vldr	s15, [pc, #164]	; 800c898 <PDM_Filter_setConfig+0x1b4>
 800c7f4:	ee60 0aa7 	vmul.f32	s1, s1, s15
 800c7f8:	f000 f8d2 	bl	800c9a0 <powf>
 800c7fc:	ee28 8a00 	vmul.f32	s16, s16, s0
 800c800:	886b      	ldrh	r3, [r5, #2]
 800c802:	9801      	ldr	r0, [sp, #4]
 800c804:	feb8 8a48 	vrinta.f32	s16, s16
 800c808:	eebc 8ac8 	vcvt.u32.f32	s16, s16
 800c80c:	8727      	strh	r7, [r4, #56]	; 0x38
 800c80e:	8663      	strh	r3, [r4, #50]	; 0x32
 800c810:	8626      	strh	r6, [r4, #48]	; 0x30
 800c812:	ed84 8a0f 	vstr	s16, [r4, #60]	; 0x3c
 800c816:	2800      	cmp	r0, #0
 800c818:	d0bf      	beq.n	800c79a <PDM_Filter_setConfig+0xb6>
 800c81a:	e7a9      	b.n	800c770 <PDM_Filter_setConfig+0x8c>
 800c81c:	eddf 8a1f 	vldr	s17, [pc, #124]	; 800c89c <PDM_Filter_setConfig+0x1b8>
 800c820:	ed9f 8a1f 	vldr	s16, [pc, #124]	; 800c8a0 <PDM_Filter_setConfig+0x1bc>
 800c824:	e7db      	b.n	800c7de <PDM_Filter_setConfig+0xfa>
 800c826:	4b1f      	ldr	r3, [pc, #124]	; (800c8a4 <PDM_Filter_setConfig+0x1c0>)
 800c828:	64a3      	str	r3, [r4, #72]	; 0x48
 800c82a:	e7a7      	b.n	800c77c <PDM_Filter_setConfig+0x98>
 800c82c:	4b1e      	ldr	r3, [pc, #120]	; (800c8a8 <PDM_Filter_setConfig+0x1c4>)
 800c82e:	64a3      	str	r3, [r4, #72]	; 0x48
 800c830:	e7a4      	b.n	800c77c <PDM_Filter_setConfig+0x98>
 800c832:	4b1e      	ldr	r3, [pc, #120]	; (800c8ac <PDM_Filter_setConfig+0x1c8>)
 800c834:	64a3      	str	r3, [r4, #72]	; 0x48
 800c836:	e7a1      	b.n	800c77c <PDM_Filter_setConfig+0x98>
 800c838:	4b1d      	ldr	r3, [pc, #116]	; (800c8b0 <PDM_Filter_setConfig+0x1cc>)
 800c83a:	64a3      	str	r3, [r4, #72]	; 0x48
 800c83c:	e79e      	b.n	800c77c <PDM_Filter_setConfig+0x98>
 800c83e:	4b1d      	ldr	r3, [pc, #116]	; (800c8b4 <PDM_Filter_setConfig+0x1d0>)
 800c840:	64a3      	str	r3, [r4, #72]	; 0x48
 800c842:	e79b      	b.n	800c77c <PDM_Filter_setConfig+0x98>
 800c844:	4b1c      	ldr	r3, [pc, #112]	; (800c8b8 <PDM_Filter_setConfig+0x1d4>)
 800c846:	64a3      	str	r3, [r4, #72]	; 0x48
 800c848:	e798      	b.n	800c77c <PDM_Filter_setConfig+0x98>
 800c84a:	4b1c      	ldr	r3, [pc, #112]	; (800c8bc <PDM_Filter_setConfig+0x1d8>)
 800c84c:	64a3      	str	r3, [r4, #72]	; 0x48
 800c84e:	e795      	b.n	800c77c <PDM_Filter_setConfig+0x98>
 800c850:	4b1b      	ldr	r3, [pc, #108]	; (800c8c0 <PDM_Filter_setConfig+0x1dc>)
 800c852:	64a3      	str	r3, [r4, #72]	; 0x48
 800c854:	e792      	b.n	800c77c <PDM_Filter_setConfig+0x98>
 800c856:	4b1b      	ldr	r3, [pc, #108]	; (800c8c4 <PDM_Filter_setConfig+0x1e0>)
 800c858:	64a3      	str	r3, [r4, #72]	; 0x48
 800c85a:	e78f      	b.n	800c77c <PDM_Filter_setConfig+0x98>
 800c85c:	4b1a      	ldr	r3, [pc, #104]	; (800c8c8 <PDM_Filter_setConfig+0x1e4>)
 800c85e:	64a3      	str	r3, [r4, #72]	; 0x48
 800c860:	e78c      	b.n	800c77c <PDM_Filter_setConfig+0x98>
 800c862:	4b1a      	ldr	r3, [pc, #104]	; (800c8cc <PDM_Filter_setConfig+0x1e8>)
 800c864:	64a3      	str	r3, [r4, #72]	; 0x48
 800c866:	e789      	b.n	800c77c <PDM_Filter_setConfig+0x98>
 800c868:	4b19      	ldr	r3, [pc, #100]	; (800c8d0 <PDM_Filter_setConfig+0x1ec>)
 800c86a:	64a3      	str	r3, [r4, #72]	; 0x48
 800c86c:	e786      	b.n	800c77c <PDM_Filter_setConfig+0x98>
 800c86e:	4b19      	ldr	r3, [pc, #100]	; (800c8d4 <PDM_Filter_setConfig+0x1f0>)
 800c870:	64a3      	str	r3, [r4, #72]	; 0x48
 800c872:	e783      	b.n	800c77c <PDM_Filter_setConfig+0x98>
 800c874:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 800c876:	42b3      	cmp	r3, r6
 800c878:	f47f af6e 	bne.w	800c758 <PDM_Filter_setConfig+0x74>
 800c87c:	886b      	ldrh	r3, [r5, #2]
 800c87e:	2008      	movs	r0, #8
 800c880:	8663      	strh	r3, [r4, #50]	; 0x32
 800c882:	e775      	b.n	800c770 <PDM_Filter_setConfig+0x8c>
 800c884:	b5e8b5cd 	.word	0xb5e8b5cd
 800c888:	fffffef0 	.word	0xfffffef0
 800c88c:	0800b9fd 	.word	0x0800b9fd
 800c890:	0800cd10 	.word	0x0800cd10
 800c894:	42000000 	.word	0x42000000
 800c898:	3d4ccccd 	.word	0x3d4ccccd
 800c89c:	4f800000 	.word	0x4f800000
 800c8a0:	00000000 	.word	0x00000000
 800c8a4:	0800ae09 	.word	0x0800ae09
 800c8a8:	0800ac91 	.word	0x0800ac91
 800c8ac:	0800ab81 	.word	0x0800ab81
 800c8b0:	0800b645 	.word	0x0800b645
 800c8b4:	0800b3ad 	.word	0x0800b3ad
 800c8b8:	0800b175 	.word	0x0800b175
 800c8bc:	0800af91 	.word	0x0800af91
 800c8c0:	0800bc19 	.word	0x0800bc19
 800c8c4:	0800badd 	.word	0x0800badd
 800c8c8:	0800c259 	.word	0x0800c259
 800c8cc:	0800c05d 	.word	0x0800c05d
 800c8d0:	0800beb1 	.word	0x0800beb1
 800c8d4:	0800bd45 	.word	0x0800bd45

0800c8d8 <PDM_Filter>:
 800c8d8:	b410      	push	{r4}
 800c8da:	4b0b      	ldr	r3, [pc, #44]	; (800c908 <PDM_Filter+0x30>)
 800c8dc:	6c54      	ldr	r4, [r2, #68]	; 0x44
 800c8de:	429c      	cmp	r4, r3
 800c8e0:	d107      	bne.n	800c8f2 <PDM_Filter+0x1a>
 800c8e2:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800c8e4:	05dc      	lsls	r4, r3, #23
 800c8e6:	d508      	bpl.n	800c8fa <PDM_Filter+0x22>
 800c8e8:	6c93      	ldr	r3, [r2, #72]	; 0x48
 800c8ea:	320c      	adds	r2, #12
 800c8ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c8f0:	4718      	bx	r3
 800c8f2:	2004      	movs	r0, #4
 800c8f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c8f8:	4770      	bx	lr
 800c8fa:	f013 0f80 	tst.w	r3, #128	; 0x80
 800c8fe:	bf14      	ite	ne
 800c900:	2020      	movne	r0, #32
 800c902:	2030      	moveq	r0, #48	; 0x30
 800c904:	e7f6      	b.n	800c8f4 <PDM_Filter+0x1c>
 800c906:	bf00      	nop
 800c908:	b5e8b5cd 	.word	0xb5e8b5cd

0800c90c <__errno>:
 800c90c:	4b01      	ldr	r3, [pc, #4]	; (800c914 <__errno+0x8>)
 800c90e:	6818      	ldr	r0, [r3, #0]
 800c910:	4770      	bx	lr
 800c912:	bf00      	nop
 800c914:	240007fc 	.word	0x240007fc

0800c918 <__libc_init_array>:
 800c918:	b570      	push	{r4, r5, r6, lr}
 800c91a:	4d0d      	ldr	r5, [pc, #52]	; (800c950 <__libc_init_array+0x38>)
 800c91c:	4c0d      	ldr	r4, [pc, #52]	; (800c954 <__libc_init_array+0x3c>)
 800c91e:	1b64      	subs	r4, r4, r5
 800c920:	10a4      	asrs	r4, r4, #2
 800c922:	2600      	movs	r6, #0
 800c924:	42a6      	cmp	r6, r4
 800c926:	d109      	bne.n	800c93c <__libc_init_array+0x24>
 800c928:	4d0b      	ldr	r5, [pc, #44]	; (800c958 <__libc_init_array+0x40>)
 800c92a:	4c0c      	ldr	r4, [pc, #48]	; (800c95c <__libc_init_array+0x44>)
 800c92c:	f000 f9e4 	bl	800ccf8 <_init>
 800c930:	1b64      	subs	r4, r4, r5
 800c932:	10a4      	asrs	r4, r4, #2
 800c934:	2600      	movs	r6, #0
 800c936:	42a6      	cmp	r6, r4
 800c938:	d105      	bne.n	800c946 <__libc_init_array+0x2e>
 800c93a:	bd70      	pop	{r4, r5, r6, pc}
 800c93c:	f855 3b04 	ldr.w	r3, [r5], #4
 800c940:	4798      	blx	r3
 800c942:	3601      	adds	r6, #1
 800c944:	e7ee      	b.n	800c924 <__libc_init_array+0xc>
 800c946:	f855 3b04 	ldr.w	r3, [r5], #4
 800c94a:	4798      	blx	r3
 800c94c:	3601      	adds	r6, #1
 800c94e:	e7f2      	b.n	800c936 <__libc_init_array+0x1e>
 800c950:	0800d000 	.word	0x0800d000
 800c954:	0800d000 	.word	0x0800d000
 800c958:	0800d000 	.word	0x0800d000
 800c95c:	0800d004 	.word	0x0800d004

0800c960 <memset>:
 800c960:	4402      	add	r2, r0
 800c962:	4603      	mov	r3, r0
 800c964:	4293      	cmp	r3, r2
 800c966:	d100      	bne.n	800c96a <memset+0xa>
 800c968:	4770      	bx	lr
 800c96a:	f803 1b01 	strb.w	r1, [r3], #1
 800c96e:	e7f9      	b.n	800c964 <memset+0x4>

0800c970 <checkint>:
 800c970:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800c974:	2b7e      	cmp	r3, #126	; 0x7e
 800c976:	dd10      	ble.n	800c99a <checkint+0x2a>
 800c978:	2b96      	cmp	r3, #150	; 0x96
 800c97a:	dc0c      	bgt.n	800c996 <checkint+0x26>
 800c97c:	2201      	movs	r2, #1
 800c97e:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 800c982:	fa02 f303 	lsl.w	r3, r2, r3
 800c986:	1e5a      	subs	r2, r3, #1
 800c988:	4202      	tst	r2, r0
 800c98a:	d106      	bne.n	800c99a <checkint+0x2a>
 800c98c:	4203      	tst	r3, r0
 800c98e:	bf0c      	ite	eq
 800c990:	2002      	moveq	r0, #2
 800c992:	2001      	movne	r0, #1
 800c994:	4770      	bx	lr
 800c996:	2002      	movs	r0, #2
 800c998:	4770      	bx	lr
 800c99a:	2000      	movs	r0, #0
 800c99c:	4770      	bx	lr
	...

0800c9a0 <powf>:
 800c9a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c9a2:	ee10 1a10 	vmov	r1, s0
 800c9a6:	ee10 6a90 	vmov	r6, s1
 800c9aa:	f5a1 0300 	sub.w	r3, r1, #8388608	; 0x800000
 800c9ae:	0072      	lsls	r2, r6, #1
 800c9b0:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 800c9b4:	b085      	sub	sp, #20
 800c9b6:	f102 30ff 	add.w	r0, r2, #4294967295
 800c9ba:	f06f 7380 	mvn.w	r3, #16777216	; 0x1000000
 800c9be:	d256      	bcs.n	800ca6e <powf+0xce>
 800c9c0:	4298      	cmp	r0, r3
 800c9c2:	d256      	bcs.n	800ca72 <powf+0xd2>
 800c9c4:	2000      	movs	r0, #0
 800c9c6:	f101 4240 	add.w	r2, r1, #3221225472	; 0xc0000000
 800c9ca:	4ea3      	ldr	r6, [pc, #652]	; (800cc58 <powf+0x2b8>)
 800c9cc:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 800c9d0:	f502 024d 	add.w	r2, r2, #13434880	; 0xcd0000
 800c9d4:	f3c2 47c3 	ubfx	r7, r2, #19, #4
 800c9d8:	0dd2      	lsrs	r2, r2, #23
 800c9da:	eb06 1707 	add.w	r7, r6, r7, lsl #4
 800c9de:	05d2      	lsls	r2, r2, #23
 800c9e0:	1a8b      	subs	r3, r1, r2
 800c9e2:	ed97 5b00 	vldr	d5, [r7]
 800c9e6:	ee07 3a90 	vmov	s15, r3
 800c9ea:	15d2      	asrs	r2, r2, #23
 800c9ec:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800c9f0:	eea5 6b07 	vfma.f64	d6, d5, d7
 800c9f4:	ed97 5b02 	vldr	d5, [r7, #8]
 800c9f8:	ee26 2b06 	vmul.f64	d2, d6, d6
 800c9fc:	ee22 1b02 	vmul.f64	d1, d2, d2
 800ca00:	ee07 2a90 	vmov	s15, r2
 800ca04:	ed96 4b40 	vldr	d4, [r6, #256]	; 0x100
 800ca08:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800ca0c:	ee37 7b05 	vadd.f64	d7, d7, d5
 800ca10:	ed96 5b42 	vldr	d5, [r6, #264]	; 0x108
 800ca14:	ed96 3b44 	vldr	d3, [r6, #272]	; 0x110
 800ca18:	eea6 5b04 	vfma.f64	d5, d6, d4
 800ca1c:	ed96 4b46 	vldr	d4, [r6, #280]	; 0x118
 800ca20:	eea6 4b03 	vfma.f64	d4, d6, d3
 800ca24:	ed96 3b48 	vldr	d3, [r6, #288]	; 0x120
 800ca28:	eeb7 0ae0 	vcvt.f64.f32	d0, s1
 800ca2c:	eea6 7b03 	vfma.f64	d7, d6, d3
 800ca30:	eea2 7b04 	vfma.f64	d7, d2, d4
 800ca34:	eea5 7b01 	vfma.f64	d7, d5, d1
 800ca38:	ee20 0b07 	vmul.f64	d0, d0, d7
 800ca3c:	ee10 1a90 	vmov	r1, s1
 800ca40:	2300      	movs	r3, #0
 800ca42:	2700      	movs	r7, #0
 800ca44:	f3c1 32cf 	ubfx	r2, r1, #15, #16
 800ca48:	f248 06be 	movw	r6, #32958	; 0x80be
 800ca4c:	429f      	cmp	r7, r3
 800ca4e:	bf08      	it	eq
 800ca50:	4296      	cmpeq	r6, r2
 800ca52:	f080 80b1 	bcs.w	800cbb8 <powf+0x218>
 800ca56:	ed9f 7b78 	vldr	d7, [pc, #480]	; 800cc38 <powf+0x298>
 800ca5a:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800ca5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca62:	dd79      	ble.n	800cb58 <powf+0x1b8>
 800ca64:	b005      	add	sp, #20
 800ca66:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800ca6a:	f000 b91f 	b.w	800ccac <__math_oflowf>
 800ca6e:	4298      	cmp	r0, r3
 800ca70:	d32d      	bcc.n	800cace <powf+0x12e>
 800ca72:	b952      	cbnz	r2, 800ca8a <powf+0xea>
 800ca74:	f481 0380 	eor.w	r3, r1, #4194304	; 0x400000
 800ca78:	005b      	lsls	r3, r3, #1
 800ca7a:	f513 0f00 	cmn.w	r3, #8388608	; 0x800000
 800ca7e:	f240 80cd 	bls.w	800cc1c <powf+0x27c>
 800ca82:	ee30 0a20 	vadd.f32	s0, s0, s1
 800ca86:	b005      	add	sp, #20
 800ca88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ca8a:	f1b1 5f7e 	cmp.w	r1, #1065353216	; 0x3f800000
 800ca8e:	d105      	bne.n	800ca9c <powf+0xfc>
 800ca90:	f486 0680 	eor.w	r6, r6, #4194304	; 0x400000
 800ca94:	0076      	lsls	r6, r6, #1
 800ca96:	f516 0f00 	cmn.w	r6, #8388608	; 0x800000
 800ca9a:	e7f0      	b.n	800ca7e <powf+0xde>
 800ca9c:	004b      	lsls	r3, r1, #1
 800ca9e:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
 800caa2:	d8ee      	bhi.n	800ca82 <powf+0xe2>
 800caa4:	f1b2 4f7f 	cmp.w	r2, #4278190080	; 0xff000000
 800caa8:	d1eb      	bne.n	800ca82 <powf+0xe2>
 800caaa:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 800caae:	f000 80b5 	beq.w	800cc1c <powf+0x27c>
 800cab2:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 800cab6:	ea6f 0606 	mvn.w	r6, r6
 800caba:	bf34      	ite	cc
 800cabc:	2300      	movcc	r3, #0
 800cabe:	2301      	movcs	r3, #1
 800cac0:	0ff6      	lsrs	r6, r6, #31
 800cac2:	42b3      	cmp	r3, r6
 800cac4:	f040 80ad 	bne.w	800cc22 <powf+0x282>
 800cac8:	ee20 0aa0 	vmul.f32	s0, s1, s1
 800cacc:	e7db      	b.n	800ca86 <powf+0xe6>
 800cace:	004f      	lsls	r7, r1, #1
 800cad0:	1e7a      	subs	r2, r7, #1
 800cad2:	429a      	cmp	r2, r3
 800cad4:	d31c      	bcc.n	800cb10 <powf+0x170>
 800cad6:	2900      	cmp	r1, #0
 800cad8:	ee20 0a00 	vmul.f32	s0, s0, s0
 800cadc:	da0f      	bge.n	800cafe <powf+0x15e>
 800cade:	ee10 0a90 	vmov	r0, s1
 800cae2:	f7ff ff45 	bl	800c970 <checkint>
 800cae6:	2801      	cmp	r0, #1
 800cae8:	d109      	bne.n	800cafe <powf+0x15e>
 800caea:	eeb1 0a40 	vneg.f32	s0, s0
 800caee:	b947      	cbnz	r7, 800cb02 <powf+0x162>
 800caf0:	2e00      	cmp	r6, #0
 800caf2:	dac8      	bge.n	800ca86 <powf+0xe6>
 800caf4:	b005      	add	sp, #20
 800caf6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800cafa:	f000 b8dd 	b.w	800ccb8 <__math_divzerof>
 800cafe:	2000      	movs	r0, #0
 800cb00:	e7f5      	b.n	800caee <powf+0x14e>
 800cb02:	2e00      	cmp	r6, #0
 800cb04:	dabf      	bge.n	800ca86 <powf+0xe6>
 800cb06:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800cb0a:	ee87 0a80 	vdiv.f32	s0, s15, s0
 800cb0e:	e7ba      	b.n	800ca86 <powf+0xe6>
 800cb10:	2900      	cmp	r1, #0
 800cb12:	da1f      	bge.n	800cb54 <powf+0x1b4>
 800cb14:	ee10 0a90 	vmov	r0, s1
 800cb18:	f7ff ff2a 	bl	800c970 <checkint>
 800cb1c:	b920      	cbnz	r0, 800cb28 <powf+0x188>
 800cb1e:	b005      	add	sp, #20
 800cb20:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800cb24:	f000 b8d8 	b.w	800ccd8 <__math_invalidf>
 800cb28:	2801      	cmp	r0, #1
 800cb2a:	bf14      	ite	ne
 800cb2c:	2000      	movne	r0, #0
 800cb2e:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 800cb32:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800cb36:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 800cb3a:	f4bf af44 	bcs.w	800c9c6 <powf+0x26>
 800cb3e:	eddf 7a47 	vldr	s15, [pc, #284]	; 800cc5c <powf+0x2bc>
 800cb42:	ee20 0a27 	vmul.f32	s0, s0, s15
 800cb46:	ee10 3a10 	vmov	r3, s0
 800cb4a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800cb4e:	f1a3 6138 	sub.w	r1, r3, #192937984	; 0xb800000
 800cb52:	e738      	b.n	800c9c6 <powf+0x26>
 800cb54:	2000      	movs	r0, #0
 800cb56:	e7ee      	b.n	800cb36 <powf+0x196>
 800cb58:	ed9f 7b39 	vldr	d7, [pc, #228]	; 800cc40 <powf+0x2a0>
 800cb5c:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800cb60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb64:	dd10      	ble.n	800cb88 <powf+0x1e8>
 800cb66:	f04f 534c 	mov.w	r3, #855638016	; 0x33000000
 800cb6a:	2800      	cmp	r0, #0
 800cb6c:	d15c      	bne.n	800cc28 <powf+0x288>
 800cb6e:	9302      	str	r3, [sp, #8]
 800cb70:	eddd 7a02 	vldr	s15, [sp, #8]
 800cb74:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cb78:	ee77 7a87 	vadd.f32	s15, s15, s14
 800cb7c:	eef4 7a47 	vcmp.f32	s15, s14
 800cb80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb84:	f47f af6e 	bne.w	800ca64 <powf+0xc4>
 800cb88:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 800cc48 <powf+0x2a8>
 800cb8c:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800cb90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb94:	d804      	bhi.n	800cba0 <powf+0x200>
 800cb96:	b005      	add	sp, #20
 800cb98:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800cb9c:	f000 b87a 	b.w	800cc94 <__math_uflowf>
 800cba0:	ed9f 7b2b 	vldr	d7, [pc, #172]	; 800cc50 <powf+0x2b0>
 800cba4:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800cba8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cbac:	d504      	bpl.n	800cbb8 <powf+0x218>
 800cbae:	b005      	add	sp, #20
 800cbb0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800cbb4:	f000 b874 	b.w	800cca0 <__math_may_uflowf>
 800cbb8:	4b29      	ldr	r3, [pc, #164]	; (800cc60 <powf+0x2c0>)
 800cbba:	ed93 7b40 	vldr	d7, [r3, #256]	; 0x100
 800cbbe:	ee30 6b07 	vadd.f64	d6, d0, d7
 800cbc2:	ed8d 6b00 	vstr	d6, [sp]
 800cbc6:	ee36 7b47 	vsub.f64	d7, d6, d7
 800cbca:	ee30 7b47 	vsub.f64	d7, d0, d7
 800cbce:	e9dd 6700 	ldrd	r6, r7, [sp]
 800cbd2:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800cbd6:	f006 011f 	and.w	r1, r6, #31
 800cbda:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800cbde:	e9d1 ce00 	ldrd	ip, lr, [r1]
 800cbe2:	ed93 5b42 	vldr	d5, [r3, #264]	; 0x108
 800cbe6:	ed93 6b44 	vldr	d6, [r3, #272]	; 0x110
 800cbea:	ed93 4b46 	vldr	d4, [r3, #280]	; 0x118
 800cbee:	eea7 6b05 	vfma.f64	d6, d7, d5
 800cbf2:	ee27 5b07 	vmul.f64	d5, d7, d7
 800cbf6:	1836      	adds	r6, r6, r0
 800cbf8:	2300      	movs	r3, #0
 800cbfa:	eb13 040c 	adds.w	r4, r3, ip
 800cbfe:	ea4f 31c6 	mov.w	r1, r6, lsl #15
 800cc02:	eb41 050e 	adc.w	r5, r1, lr
 800cc06:	eea7 0b04 	vfma.f64	d0, d7, d4
 800cc0a:	ec45 4b17 	vmov	d7, r4, r5
 800cc0e:	eea6 0b05 	vfma.f64	d0, d6, d5
 800cc12:	ee20 0b07 	vmul.f64	d0, d0, d7
 800cc16:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800cc1a:	e734      	b.n	800ca86 <powf+0xe6>
 800cc1c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800cc20:	e731      	b.n	800ca86 <powf+0xe6>
 800cc22:	ed9f 0a10 	vldr	s0, [pc, #64]	; 800cc64 <powf+0x2c4>
 800cc26:	e72e      	b.n	800ca86 <powf+0xe6>
 800cc28:	9303      	str	r3, [sp, #12]
 800cc2a:	eddd 7a03 	vldr	s15, [sp, #12]
 800cc2e:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800cc32:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cc36:	e7a1      	b.n	800cb7c <powf+0x1dc>
 800cc38:	ffd1d571 	.word	0xffd1d571
 800cc3c:	405fffff 	.word	0x405fffff
 800cc40:	ffa3aae2 	.word	0xffa3aae2
 800cc44:	405fffff 	.word	0x405fffff
 800cc48:	00000000 	.word	0x00000000
 800cc4c:	c062c000 	.word	0xc062c000
 800cc50:	00000000 	.word	0x00000000
 800cc54:	c062a000 	.word	0xc062a000
 800cc58:	0800ced0 	.word	0x0800ced0
 800cc5c:	4b000000 	.word	0x4b000000
 800cc60:	0800cd88 	.word	0x0800cd88
 800cc64:	00000000 	.word	0x00000000

0800cc68 <with_errnof>:
 800cc68:	b513      	push	{r0, r1, r4, lr}
 800cc6a:	4604      	mov	r4, r0
 800cc6c:	ed8d 0a01 	vstr	s0, [sp, #4]
 800cc70:	f7ff fe4c 	bl	800c90c <__errno>
 800cc74:	ed9d 0a01 	vldr	s0, [sp, #4]
 800cc78:	6004      	str	r4, [r0, #0]
 800cc7a:	b002      	add	sp, #8
 800cc7c:	bd10      	pop	{r4, pc}

0800cc7e <xflowf>:
 800cc7e:	b130      	cbz	r0, 800cc8e <xflowf+0x10>
 800cc80:	eef1 7a40 	vneg.f32	s15, s0
 800cc84:	ee27 0a80 	vmul.f32	s0, s15, s0
 800cc88:	2022      	movs	r0, #34	; 0x22
 800cc8a:	f7ff bfed 	b.w	800cc68 <with_errnof>
 800cc8e:	eef0 7a40 	vmov.f32	s15, s0
 800cc92:	e7f7      	b.n	800cc84 <xflowf+0x6>

0800cc94 <__math_uflowf>:
 800cc94:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800cc9c <__math_uflowf+0x8>
 800cc98:	f7ff bff1 	b.w	800cc7e <xflowf>
 800cc9c:	10000000 	.word	0x10000000

0800cca0 <__math_may_uflowf>:
 800cca0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800cca8 <__math_may_uflowf+0x8>
 800cca4:	f7ff bfeb 	b.w	800cc7e <xflowf>
 800cca8:	1a200000 	.word	0x1a200000

0800ccac <__math_oflowf>:
 800ccac:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800ccb4 <__math_oflowf+0x8>
 800ccb0:	f7ff bfe5 	b.w	800cc7e <xflowf>
 800ccb4:	70000000 	.word	0x70000000

0800ccb8 <__math_divzerof>:
 800ccb8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800ccbc:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 800ccc0:	2800      	cmp	r0, #0
 800ccc2:	fe40 7a27 	vseleq.f32	s15, s0, s15
 800ccc6:	ed9f 0a03 	vldr	s0, [pc, #12]	; 800ccd4 <__math_divzerof+0x1c>
 800ccca:	2022      	movs	r0, #34	; 0x22
 800cccc:	ee87 0a80 	vdiv.f32	s0, s15, s0
 800ccd0:	f7ff bfca 	b.w	800cc68 <with_errnof>
 800ccd4:	00000000 	.word	0x00000000

0800ccd8 <__math_invalidf>:
 800ccd8:	eef0 7a40 	vmov.f32	s15, s0
 800ccdc:	ee30 7a40 	vsub.f32	s14, s0, s0
 800cce0:	eef4 7a67 	vcmp.f32	s15, s15
 800cce4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cce8:	ee87 0a07 	vdiv.f32	s0, s14, s14
 800ccec:	d602      	bvs.n	800ccf4 <__math_invalidf+0x1c>
 800ccee:	2021      	movs	r0, #33	; 0x21
 800ccf0:	f7ff bfba 	b.w	800cc68 <with_errnof>
 800ccf4:	4770      	bx	lr
	...

0800ccf8 <_init>:
 800ccf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ccfa:	bf00      	nop
 800ccfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ccfe:	bc08      	pop	{r3}
 800cd00:	469e      	mov	lr, r3
 800cd02:	4770      	bx	lr

0800cd04 <_fini>:
 800cd04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd06:	bf00      	nop
 800cd08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cd0a:	bc08      	pop	{r3}
 800cd0c:	469e      	mov	lr, r3
 800cd0e:	4770      	bx	lr
