
microphone_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a52c  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800a7c4  0800a7c4  0001a7c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a804  0800a804  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  0800a804  0800a804  0001a804  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a80c  0800a80c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a80c  0800a80c  0001a80c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a810  0800a810  0001a810  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  24000000  0800a814  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000354  24000010  0800a824  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  24000364  0800a824  00020364  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00024875  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003b79  00000000  00000000  000448b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013b0  00000000  00000000  00048430  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012b0  00000000  00000000  000497e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003b2d6  00000000  00000000  0004aa90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a06e  00000000  00000000  00085d66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001886a9  00000000  00000000  0009fdd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000d1  00000000  00000000  0022847d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000534c  00000000  00000000  00228550  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800a7ac 	.word	0x0800a7ac

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	0800a7ac 	.word	0x0800a7ac

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96e 	b.w	80005cc <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468c      	mov	ip, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	f040 8083 	bne.w	800041e <__udivmoddi4+0x116>
 8000318:	428a      	cmp	r2, r1
 800031a:	4617      	mov	r7, r2
 800031c:	d947      	bls.n	80003ae <__udivmoddi4+0xa6>
 800031e:	fab2 f282 	clz	r2, r2
 8000322:	b142      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000324:	f1c2 0020 	rsb	r0, r2, #32
 8000328:	fa24 f000 	lsr.w	r0, r4, r0
 800032c:	4091      	lsls	r1, r2
 800032e:	4097      	lsls	r7, r2
 8000330:	ea40 0c01 	orr.w	ip, r0, r1
 8000334:	4094      	lsls	r4, r2
 8000336:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fbbc f6f8 	udiv	r6, ip, r8
 8000340:	fa1f fe87 	uxth.w	lr, r7
 8000344:	fb08 c116 	mls	r1, r8, r6, ip
 8000348:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034c:	fb06 f10e 	mul.w	r1, r6, lr
 8000350:	4299      	cmp	r1, r3
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x60>
 8000354:	18fb      	adds	r3, r7, r3
 8000356:	f106 30ff 	add.w	r0, r6, #4294967295
 800035a:	f080 8119 	bcs.w	8000590 <__udivmoddi4+0x288>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 8116 	bls.w	8000590 <__udivmoddi4+0x288>
 8000364:	3e02      	subs	r6, #2
 8000366:	443b      	add	r3, r7
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000370:	fb08 3310 	mls	r3, r8, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 fe0e 	mul.w	lr, r0, lr
 800037c:	45a6      	cmp	lr, r4
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x8c>
 8000380:	193c      	adds	r4, r7, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	f080 8105 	bcs.w	8000594 <__udivmoddi4+0x28c>
 800038a:	45a6      	cmp	lr, r4
 800038c:	f240 8102 	bls.w	8000594 <__udivmoddi4+0x28c>
 8000390:	3802      	subs	r0, #2
 8000392:	443c      	add	r4, r7
 8000394:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	2600      	movs	r6, #0
 800039e:	b11d      	cbz	r5, 80003a8 <__udivmoddi4+0xa0>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c5 4300 	strd	r4, r3, [r5]
 80003a8:	4631      	mov	r1, r6
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	b902      	cbnz	r2, 80003b2 <__udivmoddi4+0xaa>
 80003b0:	deff      	udf	#255	; 0xff
 80003b2:	fab2 f282 	clz	r2, r2
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d150      	bne.n	800045c <__udivmoddi4+0x154>
 80003ba:	1bcb      	subs	r3, r1, r7
 80003bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c0:	fa1f f887 	uxth.w	r8, r7
 80003c4:	2601      	movs	r6, #1
 80003c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80003ca:	0c21      	lsrs	r1, r4, #16
 80003cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003d4:	fb08 f30c 	mul.w	r3, r8, ip
 80003d8:	428b      	cmp	r3, r1
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0xe4>
 80003dc:	1879      	adds	r1, r7, r1
 80003de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0xe2>
 80003e4:	428b      	cmp	r3, r1
 80003e6:	f200 80e9 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 80003ea:	4684      	mov	ip, r0
 80003ec:	1ac9      	subs	r1, r1, r3
 80003ee:	b2a3      	uxth	r3, r4
 80003f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80003f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80003f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003fc:	fb08 f800 	mul.w	r8, r8, r0
 8000400:	45a0      	cmp	r8, r4
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x10c>
 8000404:	193c      	adds	r4, r7, r4
 8000406:	f100 33ff 	add.w	r3, r0, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x10a>
 800040c:	45a0      	cmp	r8, r4
 800040e:	f200 80d9 	bhi.w	80005c4 <__udivmoddi4+0x2bc>
 8000412:	4618      	mov	r0, r3
 8000414:	eba4 0408 	sub.w	r4, r4, r8
 8000418:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800041c:	e7bf      	b.n	800039e <__udivmoddi4+0x96>
 800041e:	428b      	cmp	r3, r1
 8000420:	d909      	bls.n	8000436 <__udivmoddi4+0x12e>
 8000422:	2d00      	cmp	r5, #0
 8000424:	f000 80b1 	beq.w	800058a <__udivmoddi4+0x282>
 8000428:	2600      	movs	r6, #0
 800042a:	e9c5 0100 	strd	r0, r1, [r5]
 800042e:	4630      	mov	r0, r6
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	fab3 f683 	clz	r6, r3
 800043a:	2e00      	cmp	r6, #0
 800043c:	d14a      	bne.n	80004d4 <__udivmoddi4+0x1cc>
 800043e:	428b      	cmp	r3, r1
 8000440:	d302      	bcc.n	8000448 <__udivmoddi4+0x140>
 8000442:	4282      	cmp	r2, r0
 8000444:	f200 80b8 	bhi.w	80005b8 <__udivmoddi4+0x2b0>
 8000448:	1a84      	subs	r4, r0, r2
 800044a:	eb61 0103 	sbc.w	r1, r1, r3
 800044e:	2001      	movs	r0, #1
 8000450:	468c      	mov	ip, r1
 8000452:	2d00      	cmp	r5, #0
 8000454:	d0a8      	beq.n	80003a8 <__udivmoddi4+0xa0>
 8000456:	e9c5 4c00 	strd	r4, ip, [r5]
 800045a:	e7a5      	b.n	80003a8 <__udivmoddi4+0xa0>
 800045c:	f1c2 0320 	rsb	r3, r2, #32
 8000460:	fa20 f603 	lsr.w	r6, r0, r3
 8000464:	4097      	lsls	r7, r2
 8000466:	fa01 f002 	lsl.w	r0, r1, r2
 800046a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800046e:	40d9      	lsrs	r1, r3
 8000470:	4330      	orrs	r0, r6
 8000472:	0c03      	lsrs	r3, r0, #16
 8000474:	fbb1 f6fe 	udiv	r6, r1, lr
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000480:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000484:	fb06 f108 	mul.w	r1, r6, r8
 8000488:	4299      	cmp	r1, r3
 800048a:	fa04 f402 	lsl.w	r4, r4, r2
 800048e:	d909      	bls.n	80004a4 <__udivmoddi4+0x19c>
 8000490:	18fb      	adds	r3, r7, r3
 8000492:	f106 3cff 	add.w	ip, r6, #4294967295
 8000496:	f080 808d 	bcs.w	80005b4 <__udivmoddi4+0x2ac>
 800049a:	4299      	cmp	r1, r3
 800049c:	f240 808a 	bls.w	80005b4 <__udivmoddi4+0x2ac>
 80004a0:	3e02      	subs	r6, #2
 80004a2:	443b      	add	r3, r7
 80004a4:	1a5b      	subs	r3, r3, r1
 80004a6:	b281      	uxth	r1, r0
 80004a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80004ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b4:	fb00 f308 	mul.w	r3, r0, r8
 80004b8:	428b      	cmp	r3, r1
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x1c4>
 80004bc:	1879      	adds	r1, r7, r1
 80004be:	f100 3cff 	add.w	ip, r0, #4294967295
 80004c2:	d273      	bcs.n	80005ac <__udivmoddi4+0x2a4>
 80004c4:	428b      	cmp	r3, r1
 80004c6:	d971      	bls.n	80005ac <__udivmoddi4+0x2a4>
 80004c8:	3802      	subs	r0, #2
 80004ca:	4439      	add	r1, r7
 80004cc:	1acb      	subs	r3, r1, r3
 80004ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004d2:	e778      	b.n	80003c6 <__udivmoddi4+0xbe>
 80004d4:	f1c6 0c20 	rsb	ip, r6, #32
 80004d8:	fa03 f406 	lsl.w	r4, r3, r6
 80004dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e0:	431c      	orrs	r4, r3
 80004e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80004e6:	fa01 f306 	lsl.w	r3, r1, r6
 80004ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80004f2:	431f      	orrs	r7, r3
 80004f4:	0c3b      	lsrs	r3, r7, #16
 80004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fa:	fa1f f884 	uxth.w	r8, r4
 80004fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000502:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000506:	fb09 fa08 	mul.w	sl, r9, r8
 800050a:	458a      	cmp	sl, r1
 800050c:	fa02 f206 	lsl.w	r2, r2, r6
 8000510:	fa00 f306 	lsl.w	r3, r0, r6
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x220>
 8000516:	1861      	adds	r1, r4, r1
 8000518:	f109 30ff 	add.w	r0, r9, #4294967295
 800051c:	d248      	bcs.n	80005b0 <__udivmoddi4+0x2a8>
 800051e:	458a      	cmp	sl, r1
 8000520:	d946      	bls.n	80005b0 <__udivmoddi4+0x2a8>
 8000522:	f1a9 0902 	sub.w	r9, r9, #2
 8000526:	4421      	add	r1, r4
 8000528:	eba1 010a 	sub.w	r1, r1, sl
 800052c:	b2bf      	uxth	r7, r7
 800052e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000532:	fb0e 1110 	mls	r1, lr, r0, r1
 8000536:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800053a:	fb00 f808 	mul.w	r8, r0, r8
 800053e:	45b8      	cmp	r8, r7
 8000540:	d907      	bls.n	8000552 <__udivmoddi4+0x24a>
 8000542:	19e7      	adds	r7, r4, r7
 8000544:	f100 31ff 	add.w	r1, r0, #4294967295
 8000548:	d22e      	bcs.n	80005a8 <__udivmoddi4+0x2a0>
 800054a:	45b8      	cmp	r8, r7
 800054c:	d92c      	bls.n	80005a8 <__udivmoddi4+0x2a0>
 800054e:	3802      	subs	r0, #2
 8000550:	4427      	add	r7, r4
 8000552:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000556:	eba7 0708 	sub.w	r7, r7, r8
 800055a:	fba0 8902 	umull	r8, r9, r0, r2
 800055e:	454f      	cmp	r7, r9
 8000560:	46c6      	mov	lr, r8
 8000562:	4649      	mov	r1, r9
 8000564:	d31a      	bcc.n	800059c <__udivmoddi4+0x294>
 8000566:	d017      	beq.n	8000598 <__udivmoddi4+0x290>
 8000568:	b15d      	cbz	r5, 8000582 <__udivmoddi4+0x27a>
 800056a:	ebb3 020e 	subs.w	r2, r3, lr
 800056e:	eb67 0701 	sbc.w	r7, r7, r1
 8000572:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000576:	40f2      	lsrs	r2, r6
 8000578:	ea4c 0202 	orr.w	r2, ip, r2
 800057c:	40f7      	lsrs	r7, r6
 800057e:	e9c5 2700 	strd	r2, r7, [r5]
 8000582:	2600      	movs	r6, #0
 8000584:	4631      	mov	r1, r6
 8000586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800058a:	462e      	mov	r6, r5
 800058c:	4628      	mov	r0, r5
 800058e:	e70b      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000590:	4606      	mov	r6, r0
 8000592:	e6e9      	b.n	8000368 <__udivmoddi4+0x60>
 8000594:	4618      	mov	r0, r3
 8000596:	e6fd      	b.n	8000394 <__udivmoddi4+0x8c>
 8000598:	4543      	cmp	r3, r8
 800059a:	d2e5      	bcs.n	8000568 <__udivmoddi4+0x260>
 800059c:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a0:	eb69 0104 	sbc.w	r1, r9, r4
 80005a4:	3801      	subs	r0, #1
 80005a6:	e7df      	b.n	8000568 <__udivmoddi4+0x260>
 80005a8:	4608      	mov	r0, r1
 80005aa:	e7d2      	b.n	8000552 <__udivmoddi4+0x24a>
 80005ac:	4660      	mov	r0, ip
 80005ae:	e78d      	b.n	80004cc <__udivmoddi4+0x1c4>
 80005b0:	4681      	mov	r9, r0
 80005b2:	e7b9      	b.n	8000528 <__udivmoddi4+0x220>
 80005b4:	4666      	mov	r6, ip
 80005b6:	e775      	b.n	80004a4 <__udivmoddi4+0x19c>
 80005b8:	4630      	mov	r0, r6
 80005ba:	e74a      	b.n	8000452 <__udivmoddi4+0x14a>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	4439      	add	r1, r7
 80005c2:	e713      	b.n	80003ec <__udivmoddi4+0xe4>
 80005c4:	3802      	subs	r0, #2
 80005c6:	443c      	add	r4, r7
 80005c8:	e724      	b.n	8000414 <__udivmoddi4+0x10c>
 80005ca:	bf00      	nop

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005d0:	b480      	push	{r7}
 80005d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005d4:	4b3f      	ldr	r3, [pc, #252]	; (80006d4 <SystemInit+0x104>)
 80005d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005da:	4a3e      	ldr	r2, [pc, #248]	; (80006d4 <SystemInit+0x104>)
 80005dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80005e4:	4b3b      	ldr	r3, [pc, #236]	; (80006d4 <SystemInit+0x104>)
 80005e6:	691b      	ldr	r3, [r3, #16]
 80005e8:	4a3a      	ldr	r2, [pc, #232]	; (80006d4 <SystemInit+0x104>)
 80005ea:	f043 0310 	orr.w	r3, r3, #16
 80005ee:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005f0:	4b39      	ldr	r3, [pc, #228]	; (80006d8 <SystemInit+0x108>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	f003 030f 	and.w	r3, r3, #15
 80005f8:	2b06      	cmp	r3, #6
 80005fa:	d807      	bhi.n	800060c <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80005fc:	4b36      	ldr	r3, [pc, #216]	; (80006d8 <SystemInit+0x108>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	f023 030f 	bic.w	r3, r3, #15
 8000604:	4a34      	ldr	r2, [pc, #208]	; (80006d8 <SystemInit+0x108>)
 8000606:	f043 0307 	orr.w	r3, r3, #7
 800060a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800060c:	4b33      	ldr	r3, [pc, #204]	; (80006dc <SystemInit+0x10c>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	4a32      	ldr	r2, [pc, #200]	; (80006dc <SystemInit+0x10c>)
 8000612:	f043 0301 	orr.w	r3, r3, #1
 8000616:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000618:	4b30      	ldr	r3, [pc, #192]	; (80006dc <SystemInit+0x10c>)
 800061a:	2200      	movs	r2, #0
 800061c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800061e:	4b2f      	ldr	r3, [pc, #188]	; (80006dc <SystemInit+0x10c>)
 8000620:	681a      	ldr	r2, [r3, #0]
 8000622:	492e      	ldr	r1, [pc, #184]	; (80006dc <SystemInit+0x10c>)
 8000624:	4b2e      	ldr	r3, [pc, #184]	; (80006e0 <SystemInit+0x110>)
 8000626:	4013      	ands	r3, r2
 8000628:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800062a:	4b2b      	ldr	r3, [pc, #172]	; (80006d8 <SystemInit+0x108>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	f003 0308 	and.w	r3, r3, #8
 8000632:	2b00      	cmp	r3, #0
 8000634:	d007      	beq.n	8000646 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000636:	4b28      	ldr	r3, [pc, #160]	; (80006d8 <SystemInit+0x108>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	f023 030f 	bic.w	r3, r3, #15
 800063e:	4a26      	ldr	r2, [pc, #152]	; (80006d8 <SystemInit+0x108>)
 8000640:	f043 0307 	orr.w	r3, r3, #7
 8000644:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000646:	4b25      	ldr	r3, [pc, #148]	; (80006dc <SystemInit+0x10c>)
 8000648:	2200      	movs	r2, #0
 800064a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800064c:	4b23      	ldr	r3, [pc, #140]	; (80006dc <SystemInit+0x10c>)
 800064e:	2200      	movs	r2, #0
 8000650:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000652:	4b22      	ldr	r3, [pc, #136]	; (80006dc <SystemInit+0x10c>)
 8000654:	2200      	movs	r2, #0
 8000656:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000658:	4b20      	ldr	r3, [pc, #128]	; (80006dc <SystemInit+0x10c>)
 800065a:	4a22      	ldr	r2, [pc, #136]	; (80006e4 <SystemInit+0x114>)
 800065c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800065e:	4b1f      	ldr	r3, [pc, #124]	; (80006dc <SystemInit+0x10c>)
 8000660:	4a21      	ldr	r2, [pc, #132]	; (80006e8 <SystemInit+0x118>)
 8000662:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000664:	4b1d      	ldr	r3, [pc, #116]	; (80006dc <SystemInit+0x10c>)
 8000666:	4a21      	ldr	r2, [pc, #132]	; (80006ec <SystemInit+0x11c>)
 8000668:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800066a:	4b1c      	ldr	r3, [pc, #112]	; (80006dc <SystemInit+0x10c>)
 800066c:	2200      	movs	r2, #0
 800066e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000670:	4b1a      	ldr	r3, [pc, #104]	; (80006dc <SystemInit+0x10c>)
 8000672:	4a1e      	ldr	r2, [pc, #120]	; (80006ec <SystemInit+0x11c>)
 8000674:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000676:	4b19      	ldr	r3, [pc, #100]	; (80006dc <SystemInit+0x10c>)
 8000678:	2200      	movs	r2, #0
 800067a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800067c:	4b17      	ldr	r3, [pc, #92]	; (80006dc <SystemInit+0x10c>)
 800067e:	4a1b      	ldr	r2, [pc, #108]	; (80006ec <SystemInit+0x11c>)
 8000680:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000682:	4b16      	ldr	r3, [pc, #88]	; (80006dc <SystemInit+0x10c>)
 8000684:	2200      	movs	r2, #0
 8000686:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000688:	4b14      	ldr	r3, [pc, #80]	; (80006dc <SystemInit+0x10c>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	4a13      	ldr	r2, [pc, #76]	; (80006dc <SystemInit+0x10c>)
 800068e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000692:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000694:	4b11      	ldr	r3, [pc, #68]	; (80006dc <SystemInit+0x10c>)
 8000696:	2200      	movs	r2, #0
 8000698:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800069a:	4b15      	ldr	r3, [pc, #84]	; (80006f0 <SystemInit+0x120>)
 800069c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800069e:	4a14      	ldr	r2, [pc, #80]	; (80006f0 <SystemInit+0x120>)
 80006a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006a4:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80006a6:	4b13      	ldr	r3, [pc, #76]	; (80006f4 <SystemInit+0x124>)
 80006a8:	681a      	ldr	r2, [r3, #0]
 80006aa:	4b13      	ldr	r3, [pc, #76]	; (80006f8 <SystemInit+0x128>)
 80006ac:	4013      	ands	r3, r2
 80006ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80006b2:	d202      	bcs.n	80006ba <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006b4:	4b11      	ldr	r3, [pc, #68]	; (80006fc <SystemInit+0x12c>)
 80006b6:	2201      	movs	r2, #1
 80006b8:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006ba:	4b11      	ldr	r3, [pc, #68]	; (8000700 <SystemInit+0x130>)
 80006bc:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80006c0:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 80006c2:	4b04      	ldr	r3, [pc, #16]	; (80006d4 <SystemInit+0x104>)
 80006c4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80006c8:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 80006ca:	bf00      	nop
 80006cc:	46bd      	mov	sp, r7
 80006ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d2:	4770      	bx	lr
 80006d4:	e000ed00 	.word	0xe000ed00
 80006d8:	52002000 	.word	0x52002000
 80006dc:	58024400 	.word	0x58024400
 80006e0:	eaf6ed7f 	.word	0xeaf6ed7f
 80006e4:	02020200 	.word	0x02020200
 80006e8:	01ff0000 	.word	0x01ff0000
 80006ec:	01010280 	.word	0x01010280
 80006f0:	580000c0 	.word	0x580000c0
 80006f4:	5c001000 	.word	0x5c001000
 80006f8:	ffff0000 	.word	0xffff0000
 80006fc:	51008108 	.word	0x51008108
 8000700:	52004000 	.word	0x52004000

08000704 <pdm_to_pcm>:
	    PDM_FilterConfig[index].decimation_factor = PDM_FILTER_DEC_FACTOR_64;
	    PDM_Filter_setConfig((PDM_Filter_Handler_t*)&PDM_FilterHandler[index], (PDM_Filter_Config_t*)&PDM_FilterConfig[index]);
	  }
}

void pdm_to_pcm(PDM_Filter_Handler_t* PDM_FilterHandler, uint8_t *pdm, uint16_t *pcm,  uint32_t channelNumber){
 8000704:	b580      	push	{r7, lr}
 8000706:	b08e      	sub	sp, #56	; 0x38
 8000708:	af00      	add	r7, sp, #0
 800070a:	60f8      	str	r0, [r7, #12]
 800070c:	60b9      	str	r1, [r7, #8]
 800070e:	607a      	str	r2, [r7, #4]
 8000710:	603b      	str	r3, [r7, #0]
 8000712:	68bb      	ldr	r3, [r7, #8]
 8000714:	633b      	str	r3, [r7, #48]	; 0x30
 8000716:	f44f 7380 	mov.w	r3, #256	; 0x100
 800071a:	62fb      	str	r3, [r7, #44]	; 0x2c
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_InvalidateDCache_by_Addr (void *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 800071c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800071e:	2b00      	cmp	r3, #0
 8000720:	dd1d      	ble.n	800075e <pdm_to_pcm+0x5a>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8000722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000724:	f003 021f 	and.w	r2, r3, #31
 8000728:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800072a:	4413      	add	r3, r2
 800072c:	62bb      	str	r3, [r7, #40]	; 0x28
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 800072e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000730:	627b      	str	r3, [r7, #36]	; 0x24
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000732:	f3bf 8f4f 	dsb	sy
}
 8000736:	bf00      	nop
    
      __DSB();

      do {
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8000738:	4a2b      	ldr	r2, [pc, #172]	; (80007e8 <pdm_to_pcm+0xe4>)
 800073a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800073c:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8000740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000742:	3320      	adds	r3, #32
 8000744:	627b      	str	r3, [r7, #36]	; 0x24
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8000746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000748:	3b20      	subs	r3, #32
 800074a:	62bb      	str	r3, [r7, #40]	; 0x28
      } while ( op_size > 0 );
 800074c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800074e:	2b00      	cmp	r3, #0
 8000750:	dcf2      	bgt.n	8000738 <pdm_to_pcm+0x34>
  __ASM volatile ("dsb 0xF":::"memory");
 8000752:	f3bf 8f4f 	dsb	sy
}
 8000756:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000758:	f3bf 8f6f 	isb	sy
}
 800075c:	bf00      	nop

      __DSB();
      __ISB();
    }
  #endif
}
 800075e:	bf00      	nop

	SCB_InvalidateDCache_by_Addr((uint32_t*)&pdm[0], BUFFER_SIZE);

	for(uint32_t i = 0; i < channelNumber; i++){
 8000760:	2300      	movs	r3, #0
 8000762:	637b      	str	r3, [r7, #52]	; 0x34
 8000764:	e012      	b.n	800078c <pdm_to_pcm+0x88>
		PDM_Filter(&pdm[i], &pcm[i], &PDM_FilterHandler[i]);
 8000766:	68ba      	ldr	r2, [r7, #8]
 8000768:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800076a:	18d0      	adds	r0, r2, r3
 800076c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800076e:	005b      	lsls	r3, r3, #1
 8000770:	687a      	ldr	r2, [r7, #4]
 8000772:	18d1      	adds	r1, r2, r3
 8000774:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000776:	224c      	movs	r2, #76	; 0x4c
 8000778:	fb02 f303 	mul.w	r3, r2, r3
 800077c:	68fa      	ldr	r2, [r7, #12]
 800077e:	4413      	add	r3, r2
 8000780:	461a      	mov	r2, r3
 8000782:	f009 ffcd 	bl	800a720 <PDM_Filter>
	for(uint32_t i = 0; i < channelNumber; i++){
 8000786:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000788:	3301      	adds	r3, #1
 800078a:	637b      	str	r3, [r7, #52]	; 0x34
 800078c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800078e:	683b      	ldr	r3, [r7, #0]
 8000790:	429a      	cmp	r2, r3
 8000792:	d3e8      	bcc.n	8000766 <pdm_to_pcm+0x62>
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	623b      	str	r3, [r7, #32]
 8000798:	2340      	movs	r3, #64	; 0x40
 800079a:	61fb      	str	r3, [r7, #28]
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_CleanDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 800079c:	69fb      	ldr	r3, [r7, #28]
 800079e:	2b00      	cmp	r3, #0
 80007a0:	dd1d      	ble.n	80007de <pdm_to_pcm+0xda>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 80007a2:	6a3b      	ldr	r3, [r7, #32]
 80007a4:	f003 021f 	and.w	r2, r3, #31
 80007a8:	69fb      	ldr	r3, [r7, #28]
 80007aa:	4413      	add	r3, r2
 80007ac:	61bb      	str	r3, [r7, #24]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 80007ae:	6a3b      	ldr	r3, [r7, #32]
 80007b0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80007b2:	f3bf 8f4f 	dsb	sy
}
 80007b6:	bf00      	nop
    
      __DSB();

      do {
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 80007b8:	4a0b      	ldr	r2, [pc, #44]	; (80007e8 <pdm_to_pcm+0xe4>)
 80007ba:	697b      	ldr	r3, [r7, #20]
 80007bc:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 80007c0:	697b      	ldr	r3, [r7, #20]
 80007c2:	3320      	adds	r3, #32
 80007c4:	617b      	str	r3, [r7, #20]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 80007c6:	69bb      	ldr	r3, [r7, #24]
 80007c8:	3b20      	subs	r3, #32
 80007ca:	61bb      	str	r3, [r7, #24]
      } while ( op_size > 0 );
 80007cc:	69bb      	ldr	r3, [r7, #24]
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	dcf2      	bgt.n	80007b8 <pdm_to_pcm+0xb4>
  __ASM volatile ("dsb 0xF":::"memory");
 80007d2:	f3bf 8f4f 	dsb	sy
}
 80007d6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80007d8:	f3bf 8f6f 	isb	sy
}
 80007dc:	bf00      	nop

      __DSB();
      __ISB();
    }
  #endif
}
 80007de:	bf00      	nop
	}

	SCB_CleanDCache_by_Addr((uint32_t*)&pcm[0], PCM_CHUNK_SIZE*2);
}
 80007e0:	bf00      	nop
 80007e2:	3738      	adds	r7, #56	; 0x38
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	e000ed00 	.word	0xe000ed00

080007ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b086      	sub	sp, #24
 80007f0:	af00      	add	r7, sp, #0
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80007f2:	4b73      	ldr	r3, [pc, #460]	; (80009c0 <main+0x1d4>)
 80007f4:	695b      	ldr	r3, [r3, #20]
 80007f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d11b      	bne.n	8000836 <main+0x4a>
  __ASM volatile ("dsb 0xF":::"memory");
 80007fe:	f3bf 8f4f 	dsb	sy
}
 8000802:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000804:	f3bf 8f6f 	isb	sy
}
 8000808:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800080a:	4b6d      	ldr	r3, [pc, #436]	; (80009c0 <main+0x1d4>)
 800080c:	2200      	movs	r2, #0
 800080e:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000812:	f3bf 8f4f 	dsb	sy
}
 8000816:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000818:	f3bf 8f6f 	isb	sy
}
 800081c:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800081e:	4b68      	ldr	r3, [pc, #416]	; (80009c0 <main+0x1d4>)
 8000820:	695b      	ldr	r3, [r3, #20]
 8000822:	4a67      	ldr	r2, [pc, #412]	; (80009c0 <main+0x1d4>)
 8000824:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000828:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800082a:	f3bf 8f4f 	dsb	sy
}
 800082e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000830:	f3bf 8f6f 	isb	sy
}
 8000834:	e000      	b.n	8000838 <main+0x4c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000836:	bf00      	nop
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000838:	4b61      	ldr	r3, [pc, #388]	; (80009c0 <main+0x1d4>)
 800083a:	695b      	ldr	r3, [r3, #20]
 800083c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000840:	2b00      	cmp	r3, #0
 8000842:	d138      	bne.n	80008b6 <main+0xca>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000844:	4b5e      	ldr	r3, [pc, #376]	; (80009c0 <main+0x1d4>)
 8000846:	2200      	movs	r2, #0
 8000848:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800084c:	f3bf 8f4f 	dsb	sy
}
 8000850:	bf00      	nop
    ccsidr = SCB->CCSIDR;
 8000852:	4b5b      	ldr	r3, [pc, #364]	; (80009c0 <main+0x1d4>)
 8000854:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000858:	613b      	str	r3, [r7, #16]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800085a:	693b      	ldr	r3, [r7, #16]
 800085c:	0b5b      	lsrs	r3, r3, #13
 800085e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000862:	60fb      	str	r3, [r7, #12]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000864:	693b      	ldr	r3, [r7, #16]
 8000866:	08db      	lsrs	r3, r3, #3
 8000868:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800086c:	60bb      	str	r3, [r7, #8]
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800086e:	68fb      	ldr	r3, [r7, #12]
 8000870:	015a      	lsls	r2, r3, #5
 8000872:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000876:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000878:	68ba      	ldr	r2, [r7, #8]
 800087a:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800087c:	4950      	ldr	r1, [pc, #320]	; (80009c0 <main+0x1d4>)
 800087e:	4313      	orrs	r3, r2
 8000880:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
      } while (ways-- != 0U);
 8000884:	68bb      	ldr	r3, [r7, #8]
 8000886:	1e5a      	subs	r2, r3, #1
 8000888:	60ba      	str	r2, [r7, #8]
 800088a:	2b00      	cmp	r3, #0
 800088c:	d1ef      	bne.n	800086e <main+0x82>
    } while(sets-- != 0U);
 800088e:	68fb      	ldr	r3, [r7, #12]
 8000890:	1e5a      	subs	r2, r3, #1
 8000892:	60fa      	str	r2, [r7, #12]
 8000894:	2b00      	cmp	r3, #0
 8000896:	d1e5      	bne.n	8000864 <main+0x78>
  __ASM volatile ("dsb 0xF":::"memory");
 8000898:	f3bf 8f4f 	dsb	sy
}
 800089c:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800089e:	4b48      	ldr	r3, [pc, #288]	; (80009c0 <main+0x1d4>)
 80008a0:	695b      	ldr	r3, [r3, #20]
 80008a2:	4a47      	ldr	r2, [pc, #284]	; (80009c0 <main+0x1d4>)
 80008a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80008a8:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80008aa:	f3bf 8f4f 	dsb	sy
}
 80008ae:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80008b0:	f3bf 8f6f 	isb	sy
}
 80008b4:	e000      	b.n	80008b8 <main+0xcc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80008b6:	bf00      	nop

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008b8:	f000 fd34 	bl	8001324 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008bc:	f000 f892 	bl	80009e4 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 80008c0:	4b40      	ldr	r3, [pc, #256]	; (80009c4 <main+0x1d8>)
 80008c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008c6:	4a3f      	ldr	r2, [pc, #252]	; (80009c4 <main+0x1d8>)
 80008c8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80008cc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008d0:	4b3c      	ldr	r3, [pc, #240]	; (80009c4 <main+0x1d8>)
 80008d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80008da:	607b      	str	r3, [r7, #4]
 80008dc:	687b      	ldr	r3, [r7, #4]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 80008de:	2000      	movs	r0, #0
 80008e0:	f003 ffae 	bl	8004840 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 80008e4:	2100      	movs	r1, #0
 80008e6:	2000      	movs	r0, #0
 80008e8:	f003 ffc4 	bl	8004874 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 80008ec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80008f0:	617b      	str	r3, [r7, #20]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 80008f2:	bf00      	nop
 80008f4:	4b33      	ldr	r3, [pc, #204]	; (80009c4 <main+0x1d8>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d104      	bne.n	800090a <main+0x11e>
 8000900:	697b      	ldr	r3, [r7, #20]
 8000902:	1e5a      	subs	r2, r3, #1
 8000904:	617a      	str	r2, [r7, #20]
 8000906:	2b00      	cmp	r3, #0
 8000908:	dcf4      	bgt.n	80008f4 <main+0x108>
if ( timeout < 0 )
 800090a:	697b      	ldr	r3, [r7, #20]
 800090c:	2b00      	cmp	r3, #0
 800090e:	da01      	bge.n	8000914 <main+0x128>
{
Error_Handler();
 8000910:	f000 fab8 	bl	8000e84 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000914:	f000 fa48 	bl	8000da8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000918:	f000 fa1e 	bl	8000d58 <MX_DMA_Init>
  MX_USART3_UART_Init();
 800091c:	f000 f9cc 	bl	8000cb8 <MX_USART3_UART_Init>
  MX_CRC_Init();
 8000920:	f000 f8e4 	bl	8000aec <MX_CRC_Init>
  MX_SAI1_Init();
 8000924:	f000 f90c 	bl	8000b40 <MX_SAI1_Init>
  MX_TIM1_Init();
 8000928:	f000 f96c 	bl	8000c04 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  timFlag = NONE;
 800092c:	4b26      	ldr	r3, [pc, #152]	; (80009c8 <main+0x1dc>)
 800092e:	2200      	movs	r2, #0
 8000930:	701a      	strb	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


  HAL_SAI_Receive_DMA(&hsai_BlockA1, (uint8_t*)&buffer->pdmBuffer[0], BUFFER_SIZE);
 8000932:	4b26      	ldr	r3, [pc, #152]	; (80009cc <main+0x1e0>)
 8000934:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000938:	4619      	mov	r1, r3
 800093a:	4825      	ldr	r0, [pc, #148]	; (80009d0 <main+0x1e4>)
 800093c:	f007 fbca 	bl	80080d4 <HAL_SAI_Receive_DMA>

  HAL_TIM_Base_Start_IT(&htim1);
 8000940:	4824      	ldr	r0, [pc, #144]	; (80009d4 <main+0x1e8>)
 8000942:	f007 fd9b 	bl	800847c <HAL_TIM_Base_Start_IT>

  while (timFlag != DONE){
 8000946:	e034      	b.n	80009b2 <main+0x1c6>
	  //Wait for Half of the buffer to be filled
	  while(dmaFlag != HALF){}
 8000948:	bf00      	nop
 800094a:	4b23      	ldr	r3, [pc, #140]	; (80009d8 <main+0x1ec>)
 800094c:	781b      	ldrb	r3, [r3, #0]
 800094e:	b2db      	uxtb	r3, r3
 8000950:	2b04      	cmp	r3, #4
 8000952:	d1fa      	bne.n	800094a <main+0x15e>
	  //Reset Flag
	  dmaFlag = NONE;
 8000954:	4b20      	ldr	r3, [pc, #128]	; (80009d8 <main+0x1ec>)
 8000956:	2200      	movs	r2, #0
 8000958:	701a      	strb	r2, [r3, #0]
	  //Filter PDM to PCM
	  pdm_to_pcm(&PDM_FilterHandler[0],	(uint8_t*)&buffer->pdmBuffer[0], (uint16_t*)&buffer->pcmBuffer[0], CHANNEL_NUMBER);
 800095a:	4b1c      	ldr	r3, [pc, #112]	; (80009cc <main+0x1e0>)
 800095c:	4619      	mov	r1, r3
 800095e:	4b1b      	ldr	r3, [pc, #108]	; (80009cc <main+0x1e0>)
 8000960:	f503 7200 	add.w	r2, r3, #512	; 0x200
 8000964:	2302      	movs	r3, #2
 8000966:	481d      	ldr	r0, [pc, #116]	; (80009dc <main+0x1f0>)
 8000968:	f7ff fecc 	bl	8000704 <pdm_to_pcm>
	  //Transmit PCM
	  HAL_UART_Transmit_DMA(&huart3, (uint8_t*)&buffer->pcmBuffer[0], PCM_CHUNK_SIZE*2);
 800096c:	4b17      	ldr	r3, [pc, #92]	; (80009cc <main+0x1e0>)
 800096e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000972:	2240      	movs	r2, #64	; 0x40
 8000974:	4619      	mov	r1, r3
 8000976:	481a      	ldr	r0, [pc, #104]	; (80009e0 <main+0x1f4>)
 8000978:	f008 fa88 	bl	8008e8c <HAL_UART_Transmit_DMA>

	  //Wait for Half of the buffer to be filled
	  while(dmaFlag != FULL){}
 800097c:	bf00      	nop
 800097e:	4b16      	ldr	r3, [pc, #88]	; (80009d8 <main+0x1ec>)
 8000980:	781b      	ldrb	r3, [r3, #0]
 8000982:	b2db      	uxtb	r3, r3
 8000984:	2b05      	cmp	r3, #5
 8000986:	d1fa      	bne.n	800097e <main+0x192>
	  //Reset Flag
	  dmaFlag = NONE;
 8000988:	4b13      	ldr	r3, [pc, #76]	; (80009d8 <main+0x1ec>)
 800098a:	2200      	movs	r2, #0
 800098c:	701a      	strb	r2, [r3, #0]
	  //Filter PDM to PCM
	  pdm_to_pcm(&PDM_FilterHandler[0],	(uint8_t*)&buffer->pdmBuffer[BUFFER_SIZE/2], (uint16_t*)&buffer->pcmBuffer[PCM_CHUNK_SIZE], CHANNEL_NUMBER);
 800098e:	4b0f      	ldr	r3, [pc, #60]	; (80009cc <main+0x1e0>)
 8000990:	f503 7180 	add.w	r1, r3, #256	; 0x100
 8000994:	4b0d      	ldr	r3, [pc, #52]	; (80009cc <main+0x1e0>)
 8000996:	f503 7210 	add.w	r2, r3, #576	; 0x240
 800099a:	2302      	movs	r3, #2
 800099c:	480f      	ldr	r0, [pc, #60]	; (80009dc <main+0x1f0>)
 800099e:	f7ff feb1 	bl	8000704 <pdm_to_pcm>
	  //Transmit PCM
	  HAL_UART_Transmit_DMA(&huart3, (uint8_t*)&buffer->pcmBuffer[PCM_CHUNK_SIZE], PCM_CHUNK_SIZE*2);
 80009a2:	4b0a      	ldr	r3, [pc, #40]	; (80009cc <main+0x1e0>)
 80009a4:	f503 7310 	add.w	r3, r3, #576	; 0x240
 80009a8:	2240      	movs	r2, #64	; 0x40
 80009aa:	4619      	mov	r1, r3
 80009ac:	480c      	ldr	r0, [pc, #48]	; (80009e0 <main+0x1f4>)
 80009ae:	f008 fa6d 	bl	8008e8c <HAL_UART_Transmit_DMA>
  while (timFlag != DONE){
 80009b2:	4b05      	ldr	r3, [pc, #20]	; (80009c8 <main+0x1dc>)
 80009b4:	781b      	ldrb	r3, [r3, #0]
 80009b6:	b2db      	uxtb	r3, r3
 80009b8:	2b03      	cmp	r3, #3
 80009ba:	d1c5      	bne.n	8000948 <main+0x15c>

    /* USER CODE BEGIN 3 */
  }


  while(1){}
 80009bc:	e7fe      	b.n	80009bc <main+0x1d0>
 80009be:	bf00      	nop
 80009c0:	e000ed00 	.word	0xe000ed00
 80009c4:	58024400 	.word	0x58024400
 80009c8:	2400002d 	.word	0x2400002d
 80009cc:	30040000 	.word	0x30040000
 80009d0:	240002c8 	.word	0x240002c8
 80009d4:	2400027c 	.word	0x2400027c
 80009d8:	2400002c 	.word	0x2400002c
 80009dc:	24000040 	.word	0x24000040
 80009e0:	240000d8 	.word	0x240000d8

080009e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b09c      	sub	sp, #112	; 0x70
 80009e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009ee:	224c      	movs	r2, #76	; 0x4c
 80009f0:	2100      	movs	r1, #0
 80009f2:	4618      	mov	r0, r3
 80009f4:	f009 fed2 	bl	800a79c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009f8:	1d3b      	adds	r3, r7, #4
 80009fa:	2220      	movs	r2, #32
 80009fc:	2100      	movs	r1, #0
 80009fe:	4618      	mov	r0, r3
 8000a00:	f009 fecc 	bl	800a79c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000a04:	2004      	movs	r0, #4
 8000a06:	f003 ff49 	bl	800489c <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	603b      	str	r3, [r7, #0]
 8000a0e:	4b34      	ldr	r3, [pc, #208]	; (8000ae0 <SystemClock_Config+0xfc>)
 8000a10:	699b      	ldr	r3, [r3, #24]
 8000a12:	4a33      	ldr	r2, [pc, #204]	; (8000ae0 <SystemClock_Config+0xfc>)
 8000a14:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000a18:	6193      	str	r3, [r2, #24]
 8000a1a:	4b31      	ldr	r3, [pc, #196]	; (8000ae0 <SystemClock_Config+0xfc>)
 8000a1c:	699b      	ldr	r3, [r3, #24]
 8000a1e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a22:	603b      	str	r3, [r7, #0]
 8000a24:	4b2f      	ldr	r3, [pc, #188]	; (8000ae4 <SystemClock_Config+0x100>)
 8000a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a28:	4a2e      	ldr	r2, [pc, #184]	; (8000ae4 <SystemClock_Config+0x100>)
 8000a2a:	f043 0301 	orr.w	r3, r3, #1
 8000a2e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000a30:	4b2c      	ldr	r3, [pc, #176]	; (8000ae4 <SystemClock_Config+0x100>)
 8000a32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a34:	f003 0301 	and.w	r3, r3, #1
 8000a38:	603b      	str	r3, [r7, #0]
 8000a3a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000a3c:	bf00      	nop
 8000a3e:	4b28      	ldr	r3, [pc, #160]	; (8000ae0 <SystemClock_Config+0xfc>)
 8000a40:	699b      	ldr	r3, [r3, #24]
 8000a42:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000a46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000a4a:	d1f8      	bne.n	8000a3e <SystemClock_Config+0x5a>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000a4c:	4b26      	ldr	r3, [pc, #152]	; (8000ae8 <SystemClock_Config+0x104>)
 8000a4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a50:	f023 0303 	bic.w	r3, r3, #3
 8000a54:	4a24      	ldr	r2, [pc, #144]	; (8000ae8 <SystemClock_Config+0x104>)
 8000a56:	f043 0302 	orr.w	r3, r3, #2
 8000a5a:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a5c:	2301      	movs	r3, #1
 8000a5e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000a60:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000a64:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a66:	2302      	movs	r3, #2
 8000a68:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a6a:	2302      	movs	r3, #2
 8000a6c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000a6e:	2301      	movs	r3, #1
 8000a70:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 120;
 8000a72:	2378      	movs	r3, #120	; 0x78
 8000a74:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000a76:	2302      	movs	r3, #2
 8000a78:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000a7a:	2304      	movs	r3, #4
 8000a7c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a7e:	2302      	movs	r3, #2
 8000a80:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000a82:	230c      	movs	r3, #12
 8000a84:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000a86:	2300      	movs	r3, #0
 8000a88:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a92:	4618      	mov	r0, r3
 8000a94:	f003 ff5c 	bl	8004950 <HAL_RCC_OscConfig>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d001      	beq.n	8000aa2 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8000a9e:	f000 f9f1 	bl	8000e84 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000aa2:	233f      	movs	r3, #63	; 0x3f
 8000aa4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000aa6:	2303      	movs	r3, #3
 8000aa8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000aae:	2308      	movs	r3, #8
 8000ab0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000ab2:	2340      	movs	r3, #64	; 0x40
 8000ab4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV4;
 8000ab6:	2350      	movs	r3, #80	; 0x50
 8000ab8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV4;
 8000aba:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8000abe:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV4;
 8000ac0:	2350      	movs	r3, #80	; 0x50
 8000ac2:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000ac4:	1d3b      	adds	r3, r7, #4
 8000ac6:	2104      	movs	r1, #4
 8000ac8:	4618      	mov	r0, r3
 8000aca:	f004 fb51 	bl	8005170 <HAL_RCC_ClockConfig>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d001      	beq.n	8000ad8 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8000ad4:	f000 f9d6 	bl	8000e84 <Error_Handler>
  }
}
 8000ad8:	bf00      	nop
 8000ada:	3770      	adds	r7, #112	; 0x70
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	58024800 	.word	0x58024800
 8000ae4:	58000400 	.word	0x58000400
 8000ae8:	58024400 	.word	0x58024400

08000aec <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000af0:	4b11      	ldr	r3, [pc, #68]	; (8000b38 <MX_CRC_Init+0x4c>)
 8000af2:	4a12      	ldr	r2, [pc, #72]	; (8000b3c <MX_CRC_Init+0x50>)
 8000af4:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000af6:	4b10      	ldr	r3, [pc, #64]	; (8000b38 <MX_CRC_Init+0x4c>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000afc:	4b0e      	ldr	r3, [pc, #56]	; (8000b38 <MX_CRC_Init+0x4c>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000b02:	4b0d      	ldr	r3, [pc, #52]	; (8000b38 <MX_CRC_Init+0x4c>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000b08:	4b0b      	ldr	r3, [pc, #44]	; (8000b38 <MX_CRC_Init+0x4c>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000b0e:	4b0a      	ldr	r3, [pc, #40]	; (8000b38 <MX_CRC_Init+0x4c>)
 8000b10:	2201      	movs	r2, #1
 8000b12:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000b14:	4808      	ldr	r0, [pc, #32]	; (8000b38 <MX_CRC_Init+0x4c>)
 8000b16:	f000 fdb3 	bl	8001680 <HAL_CRC_Init>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d001      	beq.n	8000b24 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000b20:	f000 f9b0 	bl	8000e84 <Error_Handler>
  }
  __HAL_CRC_DR_RESET(&hcrc);
 8000b24:	4b04      	ldr	r3, [pc, #16]	; (8000b38 <MX_CRC_Init+0x4c>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	689a      	ldr	r2, [r3, #8]
 8000b2a:	4b03      	ldr	r3, [pc, #12]	; (8000b38 <MX_CRC_Init+0x4c>)
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	f042 0201 	orr.w	r2, r2, #1
 8000b32:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000b34:	bf00      	nop
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	24000168 	.word	0x24000168
 8000b3c:	58024c00 	.word	0x58024c00

08000b40 <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockA1.Instance = SAI1_Block_A;
 8000b44:	4b2d      	ldr	r3, [pc, #180]	; (8000bfc <MX_SAI1_Init+0xbc>)
 8000b46:	4a2e      	ldr	r2, [pc, #184]	; (8000c00 <MX_SAI1_Init+0xc0>)
 8000b48:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
 8000b4a:	4b2c      	ldr	r3, [pc, #176]	; (8000bfc <MX_SAI1_Init+0xbc>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_RX;
 8000b50:	4b2a      	ldr	r3, [pc, #168]	; (8000bfc <MX_SAI1_Init+0xbc>)
 8000b52:	2201      	movs	r2, #1
 8000b54:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.DataSize = SAI_DATASIZE_16;
 8000b56:	4b29      	ldr	r3, [pc, #164]	; (8000bfc <MX_SAI1_Init+0xbc>)
 8000b58:	2280      	movs	r2, #128	; 0x80
 8000b5a:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000b5c:	4b27      	ldr	r3, [pc, #156]	; (8000bfc <MX_SAI1_Init+0xbc>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000b62:	4b26      	ldr	r3, [pc, #152]	; (8000bfc <MX_SAI1_Init+0xbc>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8000b68:	4b24      	ldr	r3, [pc, #144]	; (8000bfc <MX_SAI1_Init+0xbc>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000b6e:	4b23      	ldr	r3, [pc, #140]	; (8000bfc <MX_SAI1_Init+0xbc>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_DISABLE;
 8000b74:	4b21      	ldr	r3, [pc, #132]	; (8000bfc <MX_SAI1_Init+0xbc>)
 8000b76:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000b7a:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_FULL;
 8000b7c:	4b1f      	ldr	r3, [pc, #124]	; (8000bfc <MX_SAI1_Init+0xbc>)
 8000b7e:	2204      	movs	r2, #4
 8000b80:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_MCKDIV;
 8000b82:	4b1e      	ldr	r3, [pc, #120]	; (8000bfc <MX_SAI1_Init+0xbc>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	621a      	str	r2, [r3, #32]
  hsai_BlockA1.Init.Mckdiv = 0;
 8000b88:	4b1c      	ldr	r3, [pc, #112]	; (8000bfc <MX_SAI1_Init+0xbc>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8000b8e:	4b1b      	ldr	r3, [pc, #108]	; (8000bfc <MX_SAI1_Init+0xbc>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8000b94:	4b19      	ldr	r3, [pc, #100]	; (8000bfc <MX_SAI1_Init+0xbc>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA1.Init.PdmInit.Activation = ENABLE;
 8000b9a:	4b18      	ldr	r3, [pc, #96]	; (8000bfc <MX_SAI1_Init+0xbc>)
 8000b9c:	2201      	movs	r2, #1
 8000b9e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hsai_BlockA1.Init.PdmInit.MicPairsNbr = 1;
 8000ba2:	4b16      	ldr	r3, [pc, #88]	; (8000bfc <MX_SAI1_Init+0xbc>)
 8000ba4:	2201      	movs	r2, #1
 8000ba6:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA1.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 8000ba8:	4b14      	ldr	r3, [pc, #80]	; (8000bfc <MX_SAI1_Init+0xbc>)
 8000baa:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000bae:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA1.FrameInit.FrameLength = 16;
 8000bb0:	4b12      	ldr	r3, [pc, #72]	; (8000bfc <MX_SAI1_Init+0xbc>)
 8000bb2:	2210      	movs	r2, #16
 8000bb4:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA1.FrameInit.ActiveFrameLength = 1;
 8000bb6:	4b11      	ldr	r3, [pc, #68]	; (8000bfc <MX_SAI1_Init+0xbc>)
 8000bb8:	2201      	movs	r2, #1
 8000bba:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8000bbc:	4b0f      	ldr	r3, [pc, #60]	; (8000bfc <MX_SAI1_Init+0xbc>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA1.FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 8000bc2:	4b0e      	ldr	r3, [pc, #56]	; (8000bfc <MX_SAI1_Init+0xbc>)
 8000bc4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000bc8:	661a      	str	r2, [r3, #96]	; 0x60
  hsai_BlockA1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8000bca:	4b0c      	ldr	r3, [pc, #48]	; (8000bfc <MX_SAI1_Init+0xbc>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	665a      	str	r2, [r3, #100]	; 0x64
  hsai_BlockA1.SlotInit.FirstBitOffset = 0;
 8000bd0:	4b0a      	ldr	r3, [pc, #40]	; (8000bfc <MX_SAI1_Init+0xbc>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	669a      	str	r2, [r3, #104]	; 0x68
  hsai_BlockA1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8000bd6:	4b09      	ldr	r3, [pc, #36]	; (8000bfc <MX_SAI1_Init+0xbc>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai_BlockA1.SlotInit.SlotNumber = 1;
 8000bdc:	4b07      	ldr	r3, [pc, #28]	; (8000bfc <MX_SAI1_Init+0xbc>)
 8000bde:	2201      	movs	r2, #1
 8000be0:	671a      	str	r2, [r3, #112]	; 0x70
  hsai_BlockA1.SlotInit.SlotActive = 0x00000001;
 8000be2:	4b06      	ldr	r3, [pc, #24]	; (8000bfc <MX_SAI1_Init+0xbc>)
 8000be4:	2201      	movs	r2, #1
 8000be6:	675a      	str	r2, [r3, #116]	; 0x74
  if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
 8000be8:	4804      	ldr	r0, [pc, #16]	; (8000bfc <MX_SAI1_Init+0xbc>)
 8000bea:	f006 ffd3 	bl	8007b94 <HAL_SAI_Init>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d001      	beq.n	8000bf8 <MX_SAI1_Init+0xb8>
  {
    Error_Handler();
 8000bf4:	f000 f946 	bl	8000e84 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8000bf8:	bf00      	nop
 8000bfa:	bd80      	pop	{r7, pc}
 8000bfc:	240002c8 	.word	0x240002c8
 8000c00:	40015804 	.word	0x40015804

08000c04 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b088      	sub	sp, #32
 8000c08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c0a:	f107 0310 	add.w	r3, r7, #16
 8000c0e:	2200      	movs	r2, #0
 8000c10:	601a      	str	r2, [r3, #0]
 8000c12:	605a      	str	r2, [r3, #4]
 8000c14:	609a      	str	r2, [r3, #8]
 8000c16:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c18:	1d3b      	adds	r3, r7, #4
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	601a      	str	r2, [r3, #0]
 8000c1e:	605a      	str	r2, [r3, #4]
 8000c20:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000c22:	4b23      	ldr	r3, [pc, #140]	; (8000cb0 <MX_TIM1_Init+0xac>)
 8000c24:	4a23      	ldr	r2, [pc, #140]	; (8000cb4 <MX_TIM1_Init+0xb0>)
 8000c26:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 20000;
 8000c28:	4b21      	ldr	r3, [pc, #132]	; (8000cb0 <MX_TIM1_Init+0xac>)
 8000c2a:	f644 6220 	movw	r2, #20000	; 0x4e20
 8000c2e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c30:	4b1f      	ldr	r3, [pc, #124]	; (8000cb0 <MX_TIM1_Init+0xac>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 60000;
 8000c36:	4b1e      	ldr	r3, [pc, #120]	; (8000cb0 <MX_TIM1_Init+0xac>)
 8000c38:	f64e 2260 	movw	r2, #60000	; 0xea60
 8000c3c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c3e:	4b1c      	ldr	r3, [pc, #112]	; (8000cb0 <MX_TIM1_Init+0xac>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000c44:	4b1a      	ldr	r3, [pc, #104]	; (8000cb0 <MX_TIM1_Init+0xac>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c4a:	4b19      	ldr	r3, [pc, #100]	; (8000cb0 <MX_TIM1_Init+0xac>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000c50:	4817      	ldr	r0, [pc, #92]	; (8000cb0 <MX_TIM1_Init+0xac>)
 8000c52:	f007 fbbc 	bl	80083ce <HAL_TIM_Base_Init>
 8000c56:	4603      	mov	r3, r0
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d001      	beq.n	8000c60 <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 8000c5c:	f000 f912 	bl	8000e84 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c64:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000c66:	f107 0310 	add.w	r3, r7, #16
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	4810      	ldr	r0, [pc, #64]	; (8000cb0 <MX_TIM1_Init+0xac>)
 8000c6e:	f007 fdc3 	bl	80087f8 <HAL_TIM_ConfigClockSource>
 8000c72:	4603      	mov	r3, r0
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d001      	beq.n	8000c7c <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8000c78:	f000 f904 	bl	8000e84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000c80:	2300      	movs	r3, #0
 8000c82:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c84:	2300      	movs	r3, #0
 8000c86:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000c88:	1d3b      	adds	r3, r7, #4
 8000c8a:	4619      	mov	r1, r3
 8000c8c:	4808      	ldr	r0, [pc, #32]	; (8000cb0 <MX_TIM1_Init+0xac>)
 8000c8e:	f008 f807 	bl	8008ca0 <HAL_TIMEx_MasterConfigSynchronization>
 8000c92:	4603      	mov	r3, r0
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d001      	beq.n	8000c9c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000c98:	f000 f8f4 	bl	8000e84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  __HAL_TIM_CLEAR_IT(&htim1, TIM_FLAG_UPDATE);
 8000c9c:	4b04      	ldr	r3, [pc, #16]	; (8000cb0 <MX_TIM1_Init+0xac>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	f06f 0201 	mvn.w	r2, #1
 8000ca4:	611a      	str	r2, [r3, #16]
  /* USER CODE END TIM1_Init 2 */

}
 8000ca6:	bf00      	nop
 8000ca8:	3720      	adds	r7, #32
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	2400027c 	.word	0x2400027c
 8000cb4:	40010000 	.word	0x40010000

08000cb8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000cbc:	4b23      	ldr	r3, [pc, #140]	; (8000d4c <MX_USART3_UART_Init+0x94>)
 8000cbe:	4a24      	ldr	r2, [pc, #144]	; (8000d50 <MX_USART3_UART_Init+0x98>)
 8000cc0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 2000000;
 8000cc2:	4b22      	ldr	r3, [pc, #136]	; (8000d4c <MX_USART3_UART_Init+0x94>)
 8000cc4:	4a23      	ldr	r2, [pc, #140]	; (8000d54 <MX_USART3_UART_Init+0x9c>)
 8000cc6:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000cc8:	4b20      	ldr	r3, [pc, #128]	; (8000d4c <MX_USART3_UART_Init+0x94>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000cce:	4b1f      	ldr	r3, [pc, #124]	; (8000d4c <MX_USART3_UART_Init+0x94>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000cd4:	4b1d      	ldr	r3, [pc, #116]	; (8000d4c <MX_USART3_UART_Init+0x94>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000cda:	4b1c      	ldr	r3, [pc, #112]	; (8000d4c <MX_USART3_UART_Init+0x94>)
 8000cdc:	220c      	movs	r2, #12
 8000cde:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ce0:	4b1a      	ldr	r3, [pc, #104]	; (8000d4c <MX_USART3_UART_Init+0x94>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ce6:	4b19      	ldr	r3, [pc, #100]	; (8000d4c <MX_USART3_UART_Init+0x94>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cec:	4b17      	ldr	r3, [pc, #92]	; (8000d4c <MX_USART3_UART_Init+0x94>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000cf2:	4b16      	ldr	r3, [pc, #88]	; (8000d4c <MX_USART3_UART_Init+0x94>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cf8:	4b14      	ldr	r3, [pc, #80]	; (8000d4c <MX_USART3_UART_Init+0x94>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000cfe:	4813      	ldr	r0, [pc, #76]	; (8000d4c <MX_USART3_UART_Init+0x94>)
 8000d00:	f008 f874 	bl	8008dec <HAL_UART_Init>
 8000d04:	4603      	mov	r3, r0
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d001      	beq.n	8000d0e <MX_USART3_UART_Init+0x56>
  {
    Error_Handler();
 8000d0a:	f000 f8bb 	bl	8000e84 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_8_8) != HAL_OK)
 8000d0e:	f04f 4120 	mov.w	r1, #2684354560	; 0xa0000000
 8000d12:	480e      	ldr	r0, [pc, #56]	; (8000d4c <MX_USART3_UART_Init+0x94>)
 8000d14:	f009 fc39 	bl	800a58a <HAL_UARTEx_SetTxFifoThreshold>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d001      	beq.n	8000d22 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000d1e:	f000 f8b1 	bl	8000e84 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_8_8) != HAL_OK)
 8000d22:	f04f 6120 	mov.w	r1, #167772160	; 0xa000000
 8000d26:	4809      	ldr	r0, [pc, #36]	; (8000d4c <MX_USART3_UART_Init+0x94>)
 8000d28:	f009 fc6d 	bl	800a606 <HAL_UARTEx_SetRxFifoThreshold>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d001      	beq.n	8000d36 <MX_USART3_UART_Init+0x7e>
  {
    Error_Handler();
 8000d32:	f000 f8a7 	bl	8000e84 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000d36:	4805      	ldr	r0, [pc, #20]	; (8000d4c <MX_USART3_UART_Init+0x94>)
 8000d38:	f009 fbee 	bl	800a518 <HAL_UARTEx_DisableFifoMode>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d001      	beq.n	8000d46 <MX_USART3_UART_Init+0x8e>
  {
    Error_Handler();
 8000d42:	f000 f89f 	bl	8000e84 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000d46:	bf00      	nop
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	240000d8 	.word	0x240000d8
 8000d50:	40004800 	.word	0x40004800
 8000d54:	001e8480 	.word	0x001e8480

08000d58 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b082      	sub	sp, #8
 8000d5c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d5e:	4b11      	ldr	r3, [pc, #68]	; (8000da4 <MX_DMA_Init+0x4c>)
 8000d60:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d64:	4a0f      	ldr	r2, [pc, #60]	; (8000da4 <MX_DMA_Init+0x4c>)
 8000d66:	f043 0301 	orr.w	r3, r3, #1
 8000d6a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000d6e:	4b0d      	ldr	r3, [pc, #52]	; (8000da4 <MX_DMA_Init+0x4c>)
 8000d70:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d74:	f003 0301 	and.w	r3, r3, #1
 8000d78:	607b      	str	r3, [r7, #4]
 8000d7a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	2100      	movs	r1, #0
 8000d80:	200b      	movs	r0, #11
 8000d82:	f000 fc48 	bl	8001616 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000d86:	200b      	movs	r0, #11
 8000d88:	f000 fc5f 	bl	800164a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	2100      	movs	r1, #0
 8000d90:	200c      	movs	r0, #12
 8000d92:	f000 fc40 	bl	8001616 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000d96:	200c      	movs	r0, #12
 8000d98:	f000 fc57 	bl	800164a <HAL_NVIC_EnableIRQ>

}
 8000d9c:	bf00      	nop
 8000d9e:	3708      	adds	r7, #8
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd80      	pop	{r7, pc}
 8000da4:	58024400 	.word	0x58024400

08000da8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	b085      	sub	sp, #20
 8000dac:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000dae:	4b19      	ldr	r3, [pc, #100]	; (8000e14 <MX_GPIO_Init+0x6c>)
 8000db0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000db4:	4a17      	ldr	r2, [pc, #92]	; (8000e14 <MX_GPIO_Init+0x6c>)
 8000db6:	f043 0310 	orr.w	r3, r3, #16
 8000dba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000dbe:	4b15      	ldr	r3, [pc, #84]	; (8000e14 <MX_GPIO_Init+0x6c>)
 8000dc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dc4:	f003 0310 	and.w	r3, r3, #16
 8000dc8:	60fb      	str	r3, [r7, #12]
 8000dca:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000dcc:	4b11      	ldr	r3, [pc, #68]	; (8000e14 <MX_GPIO_Init+0x6c>)
 8000dce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dd2:	4a10      	ldr	r2, [pc, #64]	; (8000e14 <MX_GPIO_Init+0x6c>)
 8000dd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000dd8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ddc:	4b0d      	ldr	r3, [pc, #52]	; (8000e14 <MX_GPIO_Init+0x6c>)
 8000dde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000de2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000de6:	60bb      	str	r3, [r7, #8]
 8000de8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dea:	4b0a      	ldr	r3, [pc, #40]	; (8000e14 <MX_GPIO_Init+0x6c>)
 8000dec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000df0:	4a08      	ldr	r2, [pc, #32]	; (8000e14 <MX_GPIO_Init+0x6c>)
 8000df2:	f043 0308 	orr.w	r3, r3, #8
 8000df6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000dfa:	4b06      	ldr	r3, [pc, #24]	; (8000e14 <MX_GPIO_Init+0x6c>)
 8000dfc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e00:	f003 0308 	and.w	r3, r3, #8
 8000e04:	607b      	str	r3, [r7, #4]
 8000e06:	687b      	ldr	r3, [r7, #4]

}
 8000e08:	bf00      	nop
 8000e0a:	3714      	adds	r7, #20
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e12:	4770      	bx	lr
 8000e14:	58024400 	.word	0x58024400

08000e18 <HAL_SAI_RxHalfCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai){
 8000e18:	b480      	push	{r7}
 8000e1a:	b083      	sub	sp, #12
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
	dmaFlag = HALF;
 8000e20:	4b04      	ldr	r3, [pc, #16]	; (8000e34 <HAL_SAI_RxHalfCpltCallback+0x1c>)
 8000e22:	2204      	movs	r2, #4
 8000e24:	701a      	strb	r2, [r3, #0]
}
 8000e26:	bf00      	nop
 8000e28:	370c      	adds	r7, #12
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e30:	4770      	bx	lr
 8000e32:	bf00      	nop
 8000e34:	2400002c 	.word	0x2400002c

08000e38 <HAL_SAI_RxCpltCallback>:

void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai){
 8000e38:	b480      	push	{r7}
 8000e3a:	b083      	sub	sp, #12
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
	dmaFlag = FULL;
 8000e40:	4b04      	ldr	r3, [pc, #16]	; (8000e54 <HAL_SAI_RxCpltCallback+0x1c>)
 8000e42:	2205      	movs	r2, #5
 8000e44:	701a      	strb	r2, [r3, #0]
}
 8000e46:	bf00      	nop
 8000e48:	370c      	adds	r7, #12
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e50:	4770      	bx	lr
 8000e52:	bf00      	nop
 8000e54:	2400002c 	.word	0x2400002c

08000e58 <HAL_TIM_PeriodElapsedCallback>:
	uartFlag = READY;
}
*/

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b082      	sub	sp, #8
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  if(htim == &htim1){
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	4a06      	ldr	r2, [pc, #24]	; (8000e7c <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000e64:	4293      	cmp	r3, r2
 8000e66:	d105      	bne.n	8000e74 <HAL_TIM_PeriodElapsedCallback+0x1c>
	  HAL_TIM_Base_Stop_IT(htim);
 8000e68:	6878      	ldr	r0, [r7, #4]
 8000e6a:	f007 fb77 	bl	800855c <HAL_TIM_Base_Stop_IT>
	  timFlag = DONE;
 8000e6e:	4b04      	ldr	r3, [pc, #16]	; (8000e80 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000e70:	2203      	movs	r2, #3
 8000e72:	701a      	strb	r2, [r3, #0]
  }
}
 8000e74:	bf00      	nop
 8000e76:	3708      	adds	r7, #8
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	2400027c 	.word	0x2400027c
 8000e80:	2400002d 	.word	0x2400002d

08000e84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000e88:	b672      	cpsid	i
}
 8000e8a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e8c:	e7fe      	b.n	8000e8c <Error_Handler+0x8>
	...

08000e90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	b083      	sub	sp, #12
 8000e94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e96:	4b0a      	ldr	r3, [pc, #40]	; (8000ec0 <HAL_MspInit+0x30>)
 8000e98:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000e9c:	4a08      	ldr	r2, [pc, #32]	; (8000ec0 <HAL_MspInit+0x30>)
 8000e9e:	f043 0302 	orr.w	r3, r3, #2
 8000ea2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000ea6:	4b06      	ldr	r3, [pc, #24]	; (8000ec0 <HAL_MspInit+0x30>)
 8000ea8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000eac:	f003 0302 	and.w	r3, r3, #2
 8000eb0:	607b      	str	r3, [r7, #4]
 8000eb2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000eb4:	bf00      	nop
 8000eb6:	370c      	adds	r7, #12
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebe:	4770      	bx	lr
 8000ec0:	58024400 	.word	0x58024400

08000ec4 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	b085      	sub	sp, #20
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	4a0b      	ldr	r2, [pc, #44]	; (8000f00 <HAL_CRC_MspInit+0x3c>)
 8000ed2:	4293      	cmp	r3, r2
 8000ed4:	d10e      	bne.n	8000ef4 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000ed6:	4b0b      	ldr	r3, [pc, #44]	; (8000f04 <HAL_CRC_MspInit+0x40>)
 8000ed8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000edc:	4a09      	ldr	r2, [pc, #36]	; (8000f04 <HAL_CRC_MspInit+0x40>)
 8000ede:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000ee2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ee6:	4b07      	ldr	r3, [pc, #28]	; (8000f04 <HAL_CRC_MspInit+0x40>)
 8000ee8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000eec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000ef0:	60fb      	str	r3, [r7, #12]
 8000ef2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000ef4:	bf00      	nop
 8000ef6:	3714      	adds	r7, #20
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efe:	4770      	bx	lr
 8000f00:	58024c00 	.word	0x58024c00
 8000f04:	58024400 	.word	0x58024400

08000f08 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b084      	sub	sp, #16
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	4a0e      	ldr	r2, [pc, #56]	; (8000f50 <HAL_TIM_Base_MspInit+0x48>)
 8000f16:	4293      	cmp	r3, r2
 8000f18:	d116      	bne.n	8000f48 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000f1a:	4b0e      	ldr	r3, [pc, #56]	; (8000f54 <HAL_TIM_Base_MspInit+0x4c>)
 8000f1c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000f20:	4a0c      	ldr	r2, [pc, #48]	; (8000f54 <HAL_TIM_Base_MspInit+0x4c>)
 8000f22:	f043 0301 	orr.w	r3, r3, #1
 8000f26:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000f2a:	4b0a      	ldr	r3, [pc, #40]	; (8000f54 <HAL_TIM_Base_MspInit+0x4c>)
 8000f2c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000f30:	f003 0301 	and.w	r3, r3, #1
 8000f34:	60fb      	str	r3, [r7, #12]
 8000f36:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8000f38:	2200      	movs	r2, #0
 8000f3a:	2100      	movs	r1, #0
 8000f3c:	2019      	movs	r0, #25
 8000f3e:	f000 fb6a 	bl	8001616 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000f42:	2019      	movs	r0, #25
 8000f44:	f000 fb81 	bl	800164a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000f48:	bf00      	nop
 8000f4a:	3710      	adds	r7, #16
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	40010000 	.word	0x40010000
 8000f54:	58024400 	.word	0x58024400

08000f58 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b0b8      	sub	sp, #224	; 0xe0
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f60:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000f64:	2200      	movs	r2, #0
 8000f66:	601a      	str	r2, [r3, #0]
 8000f68:	605a      	str	r2, [r3, #4]
 8000f6a:	609a      	str	r2, [r3, #8]
 8000f6c:	60da      	str	r2, [r3, #12]
 8000f6e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f70:	f107 0310 	add.w	r3, r7, #16
 8000f74:	22bc      	movs	r2, #188	; 0xbc
 8000f76:	2100      	movs	r1, #0
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f009 fc0f 	bl	800a79c <memset>
  if(huart->Instance==USART3)
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	4a4a      	ldr	r2, [pc, #296]	; (80010ac <HAL_UART_MspInit+0x154>)
 8000f84:	4293      	cmp	r3, r2
 8000f86:	f040 808c 	bne.w	80010a2 <HAL_UART_MspInit+0x14a>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000f8a:	2302      	movs	r3, #2
 8000f8c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 1;
 8000f8e:	2301      	movs	r3, #1
 8000f90:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL3.PLL3N = 18;
 8000f92:	2312      	movs	r3, #18
 8000f94:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8000f96:	2302      	movs	r3, #2
 8000f98:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8000f9a:	2302      	movs	r3, #2
 8000f9c:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 8000f9e:	2302      	movs	r3, #2
 8000fa0:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8000fa2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000fa6:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
 8000fa8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000fac:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3FRACN = 6144;
 8000fae:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000fb2:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_PLL3;
 8000fb4:	2302      	movs	r3, #2
 8000fb6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fba:	f107 0310 	add.w	r3, r7, #16
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f004 fc62 	bl	8005888 <HAL_RCCEx_PeriphCLKConfig>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d001      	beq.n	8000fce <HAL_UART_MspInit+0x76>
    {
      Error_Handler();
 8000fca:	f7ff ff5b 	bl	8000e84 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000fce:	4b38      	ldr	r3, [pc, #224]	; (80010b0 <HAL_UART_MspInit+0x158>)
 8000fd0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000fd4:	4a36      	ldr	r2, [pc, #216]	; (80010b0 <HAL_UART_MspInit+0x158>)
 8000fd6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000fda:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000fde:	4b34      	ldr	r3, [pc, #208]	; (80010b0 <HAL_UART_MspInit+0x158>)
 8000fe0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000fe4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000fe8:	60fb      	str	r3, [r7, #12]
 8000fea:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fec:	4b30      	ldr	r3, [pc, #192]	; (80010b0 <HAL_UART_MspInit+0x158>)
 8000fee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ff2:	4a2f      	ldr	r2, [pc, #188]	; (80010b0 <HAL_UART_MspInit+0x158>)
 8000ff4:	f043 0308 	orr.w	r3, r3, #8
 8000ff8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ffc:	4b2c      	ldr	r3, [pc, #176]	; (80010b0 <HAL_UART_MspInit+0x158>)
 8000ffe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001002:	f003 0308 	and.w	r3, r3, #8
 8001006:	60bb      	str	r3, [r7, #8]
 8001008:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800100a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800100e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001012:	2302      	movs	r3, #2
 8001014:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001018:	2300      	movs	r3, #0
 800101a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800101e:	2300      	movs	r3, #0
 8001020:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001024:	2307      	movs	r3, #7
 8001026:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800102a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800102e:	4619      	mov	r1, r3
 8001030:	4820      	ldr	r0, [pc, #128]	; (80010b4 <HAL_UART_MspInit+0x15c>)
 8001032:	f003 fa55 	bl	80044e0 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream1;
 8001036:	4b20      	ldr	r3, [pc, #128]	; (80010b8 <HAL_UART_MspInit+0x160>)
 8001038:	4a20      	ldr	r2, [pc, #128]	; (80010bc <HAL_UART_MspInit+0x164>)
 800103a:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 800103c:	4b1e      	ldr	r3, [pc, #120]	; (80010b8 <HAL_UART_MspInit+0x160>)
 800103e:	222e      	movs	r2, #46	; 0x2e
 8001040:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001042:	4b1d      	ldr	r3, [pc, #116]	; (80010b8 <HAL_UART_MspInit+0x160>)
 8001044:	2240      	movs	r2, #64	; 0x40
 8001046:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001048:	4b1b      	ldr	r3, [pc, #108]	; (80010b8 <HAL_UART_MspInit+0x160>)
 800104a:	2200      	movs	r2, #0
 800104c:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800104e:	4b1a      	ldr	r3, [pc, #104]	; (80010b8 <HAL_UART_MspInit+0x160>)
 8001050:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001054:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001056:	4b18      	ldr	r3, [pc, #96]	; (80010b8 <HAL_UART_MspInit+0x160>)
 8001058:	2200      	movs	r2, #0
 800105a:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800105c:	4b16      	ldr	r3, [pc, #88]	; (80010b8 <HAL_UART_MspInit+0x160>)
 800105e:	2200      	movs	r2, #0
 8001060:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8001062:	4b15      	ldr	r3, [pc, #84]	; (80010b8 <HAL_UART_MspInit+0x160>)
 8001064:	2200      	movs	r2, #0
 8001066:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001068:	4b13      	ldr	r3, [pc, #76]	; (80010b8 <HAL_UART_MspInit+0x160>)
 800106a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800106e:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001070:	4b11      	ldr	r3, [pc, #68]	; (80010b8 <HAL_UART_MspInit+0x160>)
 8001072:	2200      	movs	r2, #0
 8001074:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8001076:	4810      	ldr	r0, [pc, #64]	; (80010b8 <HAL_UART_MspInit+0x160>)
 8001078:	f000 fbec 	bl	8001854 <HAL_DMA_Init>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <HAL_UART_MspInit+0x12e>
    {
      Error_Handler();
 8001082:	f7ff feff 	bl	8000e84 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	4a0b      	ldr	r2, [pc, #44]	; (80010b8 <HAL_UART_MspInit+0x160>)
 800108a:	679a      	str	r2, [r3, #120]	; 0x78
 800108c:	4a0a      	ldr	r2, [pc, #40]	; (80010b8 <HAL_UART_MspInit+0x160>)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001092:	2200      	movs	r2, #0
 8001094:	2100      	movs	r1, #0
 8001096:	2027      	movs	r0, #39	; 0x27
 8001098:	f000 fabd 	bl	8001616 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800109c:	2027      	movs	r0, #39	; 0x27
 800109e:	f000 fad4 	bl	800164a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80010a2:	bf00      	nop
 80010a4:	37e0      	adds	r7, #224	; 0xe0
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	40004800 	.word	0x40004800
 80010b0:	58024400 	.word	0x58024400
 80010b4:	58020c00 	.word	0x58020c00
 80010b8:	2400018c 	.word	0x2400018c
 80010bc:	40020028 	.word	0x40020028

080010c0 <HAL_SAI_MspInit>:
extern DMA_HandleTypeDef hdma_sai1_a;

static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b0b8      	sub	sp, #224	; 0xe0
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010c8:	f107 0310 	add.w	r3, r7, #16
 80010cc:	22bc      	movs	r2, #188	; 0xbc
 80010ce:	2100      	movs	r1, #0
 80010d0:	4618      	mov	r0, r3
 80010d2:	f009 fb63 	bl	800a79c <memset>
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	4a4a      	ldr	r2, [pc, #296]	; (8001204 <HAL_SAI_MspInit+0x144>)
 80010dc:	4293      	cmp	r3, r2
 80010de:	f040 808d 	bne.w	80011fc <HAL_SAI_MspInit+0x13c>
    {
    /* Peripheral clock enable */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 80010e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010e6:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 80010e8:	2301      	movs	r3, #1
 80010ea:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLL2.PLL2N = 96;
 80010ec:	2360      	movs	r3, #96	; 0x60
 80010ee:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2P = 125;
 80010f0:	237d      	movs	r3, #125	; 0x7d
 80010f2:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80010f4:	2302      	movs	r3, #2
 80010f6:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 80010f8:	2302      	movs	r3, #2
 80010fa:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80010fc:	23c0      	movs	r3, #192	; 0xc0
 80010fe:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8001100:	2300      	movs	r3, #0
 8001102:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001104:	2300      	movs	r3, #0
 8001106:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL2;
 8001108:	2301      	movs	r3, #1
 800110a:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800110c:	f107 0310 	add.w	r3, r7, #16
 8001110:	4618      	mov	r0, r3
 8001112:	f004 fbb9 	bl	8005888 <HAL_RCCEx_PeriphCLKConfig>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d001      	beq.n	8001120 <HAL_SAI_MspInit+0x60>
    {
      Error_Handler();
 800111c:	f7ff feb2 	bl	8000e84 <Error_Handler>
    }

    if (SAI1_client == 0)
 8001120:	4b39      	ldr	r3, [pc, #228]	; (8001208 <HAL_SAI_MspInit+0x148>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d116      	bne.n	8001156 <HAL_SAI_MspInit+0x96>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8001128:	4b38      	ldr	r3, [pc, #224]	; (800120c <HAL_SAI_MspInit+0x14c>)
 800112a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800112e:	4a37      	ldr	r2, [pc, #220]	; (800120c <HAL_SAI_MspInit+0x14c>)
 8001130:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001134:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001138:	4b34      	ldr	r3, [pc, #208]	; (800120c <HAL_SAI_MspInit+0x14c>)
 800113a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800113e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001142:	60fb      	str	r3, [r7, #12]
 8001144:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(SAI1_IRQn, 0, 0);
 8001146:	2200      	movs	r2, #0
 8001148:	2100      	movs	r1, #0
 800114a:	2057      	movs	r0, #87	; 0x57
 800114c:	f000 fa63 	bl	8001616 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SAI1_IRQn);
 8001150:	2057      	movs	r0, #87	; 0x57
 8001152:	f000 fa7a 	bl	800164a <HAL_NVIC_EnableIRQ>
    }
    SAI1_client ++;
 8001156:	4b2c      	ldr	r3, [pc, #176]	; (8001208 <HAL_SAI_MspInit+0x148>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	3301      	adds	r3, #1
 800115c:	4a2a      	ldr	r2, [pc, #168]	; (8001208 <HAL_SAI_MspInit+0x148>)
 800115e:	6013      	str	r3, [r2, #0]

    /**SAI1_A_Block_A GPIO Configuration
    PE2     ------> SAI1_CK1
    PE6     ------> SAI1_D1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_6;
 8001160:	2344      	movs	r3, #68	; 0x44
 8001162:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001166:	2302      	movs	r3, #2
 8001168:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116c:	2300      	movs	r3, #0
 800116e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001172:	2300      	movs	r3, #0
 8001174:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF2_SAI1;
 8001178:	2302      	movs	r3, #2
 800117a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800117e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001182:	4619      	mov	r1, r3
 8001184:	4822      	ldr	r0, [pc, #136]	; (8001210 <HAL_SAI_MspInit+0x150>)
 8001186:	f003 f9ab 	bl	80044e0 <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai1_a.Instance = DMA1_Stream0;
 800118a:	4b22      	ldr	r3, [pc, #136]	; (8001214 <HAL_SAI_MspInit+0x154>)
 800118c:	4a22      	ldr	r2, [pc, #136]	; (8001218 <HAL_SAI_MspInit+0x158>)
 800118e:	601a      	str	r2, [r3, #0]
    hdma_sai1_a.Init.Request = DMA_REQUEST_SAI1_A;
 8001190:	4b20      	ldr	r3, [pc, #128]	; (8001214 <HAL_SAI_MspInit+0x154>)
 8001192:	2257      	movs	r2, #87	; 0x57
 8001194:	605a      	str	r2, [r3, #4]
    hdma_sai1_a.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001196:	4b1f      	ldr	r3, [pc, #124]	; (8001214 <HAL_SAI_MspInit+0x154>)
 8001198:	2200      	movs	r2, #0
 800119a:	609a      	str	r2, [r3, #8]
    hdma_sai1_a.Init.PeriphInc = DMA_PINC_DISABLE;
 800119c:	4b1d      	ldr	r3, [pc, #116]	; (8001214 <HAL_SAI_MspInit+0x154>)
 800119e:	2200      	movs	r2, #0
 80011a0:	60da      	str	r2, [r3, #12]
    hdma_sai1_a.Init.MemInc = DMA_MINC_ENABLE;
 80011a2:	4b1c      	ldr	r3, [pc, #112]	; (8001214 <HAL_SAI_MspInit+0x154>)
 80011a4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80011a8:	611a      	str	r2, [r3, #16]
    hdma_sai1_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80011aa:	4b1a      	ldr	r3, [pc, #104]	; (8001214 <HAL_SAI_MspInit+0x154>)
 80011ac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80011b0:	615a      	str	r2, [r3, #20]
    hdma_sai1_a.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80011b2:	4b18      	ldr	r3, [pc, #96]	; (8001214 <HAL_SAI_MspInit+0x154>)
 80011b4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80011b8:	619a      	str	r2, [r3, #24]
    hdma_sai1_a.Init.Mode = DMA_CIRCULAR;
 80011ba:	4b16      	ldr	r3, [pc, #88]	; (8001214 <HAL_SAI_MspInit+0x154>)
 80011bc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011c0:	61da      	str	r2, [r3, #28]
    hdma_sai1_a.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80011c2:	4b14      	ldr	r3, [pc, #80]	; (8001214 <HAL_SAI_MspInit+0x154>)
 80011c4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80011c8:	621a      	str	r2, [r3, #32]
    hdma_sai1_a.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80011ca:	4b12      	ldr	r3, [pc, #72]	; (8001214 <HAL_SAI_MspInit+0x154>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
 80011d0:	4810      	ldr	r0, [pc, #64]	; (8001214 <HAL_SAI_MspInit+0x154>)
 80011d2:	f000 fb3f 	bl	8001854 <HAL_DMA_Init>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d001      	beq.n	80011e0 <HAL_SAI_MspInit+0x120>
    {
      Error_Handler();
 80011dc:	f7ff fe52 	bl	8000e84 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_a);
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	4a0c      	ldr	r2, [pc, #48]	; (8001214 <HAL_SAI_MspInit+0x154>)
 80011e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 80011e8:	4a0a      	ldr	r2, [pc, #40]	; (8001214 <HAL_SAI_MspInit+0x154>)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	6393      	str	r3, [r2, #56]	; 0x38

    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_a);
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	4a08      	ldr	r2, [pc, #32]	; (8001214 <HAL_SAI_MspInit+0x154>)
 80011f2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 80011f6:	4a07      	ldr	r2, [pc, #28]	; (8001214 <HAL_SAI_MspInit+0x154>)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	6393      	str	r3, [r2, #56]	; 0x38

    }
}
 80011fc:	bf00      	nop
 80011fe:	37e0      	adds	r7, #224	; 0xe0
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	40015804 	.word	0x40015804
 8001208:	24000030 	.word	0x24000030
 800120c:	58024400 	.word	0x58024400
 8001210:	58021000 	.word	0x58021000
 8001214:	24000204 	.word	0x24000204
 8001218:	40020010 	.word	0x40020010

0800121c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001220:	e7fe      	b.n	8001220 <NMI_Handler+0x4>

08001222 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001222:	b480      	push	{r7}
 8001224:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001226:	e7fe      	b.n	8001226 <HardFault_Handler+0x4>

08001228 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800122c:	e7fe      	b.n	800122c <MemManage_Handler+0x4>

0800122e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800122e:	b480      	push	{r7}
 8001230:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001232:	e7fe      	b.n	8001232 <BusFault_Handler+0x4>

08001234 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001238:	e7fe      	b.n	8001238 <UsageFault_Handler+0x4>

0800123a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800123a:	b480      	push	{r7}
 800123c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800123e:	bf00      	nop
 8001240:	46bd      	mov	sp, r7
 8001242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001246:	4770      	bx	lr

08001248 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800124c:	bf00      	nop
 800124e:	46bd      	mov	sp, r7
 8001250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001254:	4770      	bx	lr

08001256 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001256:	b480      	push	{r7}
 8001258:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800125a:	bf00      	nop
 800125c:	46bd      	mov	sp, r7
 800125e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001262:	4770      	bx	lr

08001264 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001268:	f000 f8ce 	bl	8001408 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800126c:	bf00      	nop
 800126e:	bd80      	pop	{r7, pc}

08001270 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_a);
 8001274:	4802      	ldr	r0, [pc, #8]	; (8001280 <DMA1_Stream0_IRQHandler+0x10>)
 8001276:	f001 fe15 	bl	8002ea4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800127a:	bf00      	nop
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	24000204 	.word	0x24000204

08001284 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8001288:	4802      	ldr	r0, [pc, #8]	; (8001294 <DMA1_Stream1_IRQHandler+0x10>)
 800128a:	f001 fe0b 	bl	8002ea4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800128e:	bf00      	nop
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	2400018c 	.word	0x2400018c

08001298 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800129c:	4802      	ldr	r0, [pc, #8]	; (80012a8 <TIM1_UP_IRQHandler+0x10>)
 800129e:	f007 f98c 	bl	80085ba <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80012a2:	bf00      	nop
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	2400027c 	.word	0x2400027c

080012ac <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80012b0:	4802      	ldr	r0, [pc, #8]	; (80012bc <USART3_IRQHandler+0x10>)
 80012b2:	f007 fe6b 	bl	8008f8c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80012b6:	bf00      	nop
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	240000d8 	.word	0x240000d8

080012c0 <SAI1_IRQHandler>:

/**
  * @brief This function handles SAI1 global interrupt.
  */
void SAI1_IRQHandler(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_IRQn 0 */

  /* USER CODE BEGIN SAI1_IRQn 1 */

  /* USER CODE END SAI1_IRQn 1 */
}
 80012c4:	bf00      	nop
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr
	...

080012d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80012d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001308 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80012d4:	f7ff f97c 	bl	80005d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012d8:	480c      	ldr	r0, [pc, #48]	; (800130c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80012da:	490d      	ldr	r1, [pc, #52]	; (8001310 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80012dc:	4a0d      	ldr	r2, [pc, #52]	; (8001314 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80012de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012e0:	e002      	b.n	80012e8 <LoopCopyDataInit>

080012e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012e6:	3304      	adds	r3, #4

080012e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012ec:	d3f9      	bcc.n	80012e2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012ee:	4a0a      	ldr	r2, [pc, #40]	; (8001318 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80012f0:	4c0a      	ldr	r4, [pc, #40]	; (800131c <LoopFillZerobss+0x22>)
  movs r3, #0
 80012f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012f4:	e001      	b.n	80012fa <LoopFillZerobss>

080012f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012f8:	3204      	adds	r2, #4

080012fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012fc:	d3fb      	bcc.n	80012f6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80012fe:	f009 fa29 	bl	800a754 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001302:	f7ff fa73 	bl	80007ec <main>
  bx  lr
 8001306:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001308:	24040000 	.word	0x24040000
  ldr r0, =_sdata
 800130c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001310:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8001314:	0800a814 	.word	0x0800a814
  ldr r2, =_sbss
 8001318:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 800131c:	24000364 	.word	0x24000364

08001320 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001320:	e7fe      	b.n	8001320 <ADC3_IRQHandler>
	...

08001324 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b082      	sub	sp, #8
 8001328:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800132a:	2003      	movs	r0, #3
 800132c:	f000 f968 	bl	8001600 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001330:	f004 f8d4 	bl	80054dc <HAL_RCC_GetSysClockFreq>
 8001334:	4602      	mov	r2, r0
 8001336:	4b15      	ldr	r3, [pc, #84]	; (800138c <HAL_Init+0x68>)
 8001338:	699b      	ldr	r3, [r3, #24]
 800133a:	0a1b      	lsrs	r3, r3, #8
 800133c:	f003 030f 	and.w	r3, r3, #15
 8001340:	4913      	ldr	r1, [pc, #76]	; (8001390 <HAL_Init+0x6c>)
 8001342:	5ccb      	ldrb	r3, [r1, r3]
 8001344:	f003 031f 	and.w	r3, r3, #31
 8001348:	fa22 f303 	lsr.w	r3, r2, r3
 800134c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800134e:	4b0f      	ldr	r3, [pc, #60]	; (800138c <HAL_Init+0x68>)
 8001350:	699b      	ldr	r3, [r3, #24]
 8001352:	f003 030f 	and.w	r3, r3, #15
 8001356:	4a0e      	ldr	r2, [pc, #56]	; (8001390 <HAL_Init+0x6c>)
 8001358:	5cd3      	ldrb	r3, [r2, r3]
 800135a:	f003 031f 	and.w	r3, r3, #31
 800135e:	687a      	ldr	r2, [r7, #4]
 8001360:	fa22 f303 	lsr.w	r3, r2, r3
 8001364:	4a0b      	ldr	r2, [pc, #44]	; (8001394 <HAL_Init+0x70>)
 8001366:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001368:	4a0b      	ldr	r2, [pc, #44]	; (8001398 <HAL_Init+0x74>)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800136e:	2000      	movs	r0, #0
 8001370:	f000 f814 	bl	800139c <HAL_InitTick>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	d001      	beq.n	800137e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800137a:	2301      	movs	r3, #1
 800137c:	e002      	b.n	8001384 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800137e:	f7ff fd87 	bl	8000e90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001382:	2300      	movs	r3, #0
}
 8001384:	4618      	mov	r0, r3
 8001386:	3708      	adds	r7, #8
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}
 800138c:	58024400 	.word	0x58024400
 8001390:	0800a7c4 	.word	0x0800a7c4
 8001394:	24000004 	.word	0x24000004
 8001398:	24000000 	.word	0x24000000

0800139c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b082      	sub	sp, #8
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80013a4:	4b15      	ldr	r3, [pc, #84]	; (80013fc <HAL_InitTick+0x60>)
 80013a6:	781b      	ldrb	r3, [r3, #0]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d101      	bne.n	80013b0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80013ac:	2301      	movs	r3, #1
 80013ae:	e021      	b.n	80013f4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80013b0:	4b13      	ldr	r3, [pc, #76]	; (8001400 <HAL_InitTick+0x64>)
 80013b2:	681a      	ldr	r2, [r3, #0]
 80013b4:	4b11      	ldr	r3, [pc, #68]	; (80013fc <HAL_InitTick+0x60>)
 80013b6:	781b      	ldrb	r3, [r3, #0]
 80013b8:	4619      	mov	r1, r3
 80013ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013be:	fbb3 f3f1 	udiv	r3, r3, r1
 80013c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80013c6:	4618      	mov	r0, r3
 80013c8:	f000 f94d 	bl	8001666 <HAL_SYSTICK_Config>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d001      	beq.n	80013d6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80013d2:	2301      	movs	r3, #1
 80013d4:	e00e      	b.n	80013f4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	2b0f      	cmp	r3, #15
 80013da:	d80a      	bhi.n	80013f2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013dc:	2200      	movs	r2, #0
 80013de:	6879      	ldr	r1, [r7, #4]
 80013e0:	f04f 30ff 	mov.w	r0, #4294967295
 80013e4:	f000 f917 	bl	8001616 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013e8:	4a06      	ldr	r2, [pc, #24]	; (8001404 <HAL_InitTick+0x68>)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013ee:	2300      	movs	r3, #0
 80013f0:	e000      	b.n	80013f4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80013f2:	2301      	movs	r3, #1
}
 80013f4:	4618      	mov	r0, r3
 80013f6:	3708      	adds	r7, #8
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	2400000c 	.word	0x2400000c
 8001400:	24000000 	.word	0x24000000
 8001404:	24000008 	.word	0x24000008

08001408 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800140c:	4b06      	ldr	r3, [pc, #24]	; (8001428 <HAL_IncTick+0x20>)
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	461a      	mov	r2, r3
 8001412:	4b06      	ldr	r3, [pc, #24]	; (800142c <HAL_IncTick+0x24>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4413      	add	r3, r2
 8001418:	4a04      	ldr	r2, [pc, #16]	; (800142c <HAL_IncTick+0x24>)
 800141a:	6013      	str	r3, [r2, #0]
}
 800141c:	bf00      	nop
 800141e:	46bd      	mov	sp, r7
 8001420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001424:	4770      	bx	lr
 8001426:	bf00      	nop
 8001428:	2400000c 	.word	0x2400000c
 800142c:	24000360 	.word	0x24000360

08001430 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0
  return uwTick;
 8001434:	4b03      	ldr	r3, [pc, #12]	; (8001444 <HAL_GetTick+0x14>)
 8001436:	681b      	ldr	r3, [r3, #0]
}
 8001438:	4618      	mov	r0, r3
 800143a:	46bd      	mov	sp, r7
 800143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001440:	4770      	bx	lr
 8001442:	bf00      	nop
 8001444:	24000360 	.word	0x24000360

08001448 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800144c:	4b03      	ldr	r3, [pc, #12]	; (800145c <HAL_GetREVID+0x14>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	0c1b      	lsrs	r3, r3, #16
}
 8001452:	4618      	mov	r0, r3
 8001454:	46bd      	mov	sp, r7
 8001456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145a:	4770      	bx	lr
 800145c:	5c001000 	.word	0x5c001000

08001460 <__NVIC_SetPriorityGrouping>:
{
 8001460:	b480      	push	{r7}
 8001462:	b085      	sub	sp, #20
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	f003 0307 	and.w	r3, r3, #7
 800146e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001470:	4b0b      	ldr	r3, [pc, #44]	; (80014a0 <__NVIC_SetPriorityGrouping+0x40>)
 8001472:	68db      	ldr	r3, [r3, #12]
 8001474:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001476:	68ba      	ldr	r2, [r7, #8]
 8001478:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800147c:	4013      	ands	r3, r2
 800147e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001484:	68bb      	ldr	r3, [r7, #8]
 8001486:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001488:	4b06      	ldr	r3, [pc, #24]	; (80014a4 <__NVIC_SetPriorityGrouping+0x44>)
 800148a:	4313      	orrs	r3, r2
 800148c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800148e:	4a04      	ldr	r2, [pc, #16]	; (80014a0 <__NVIC_SetPriorityGrouping+0x40>)
 8001490:	68bb      	ldr	r3, [r7, #8]
 8001492:	60d3      	str	r3, [r2, #12]
}
 8001494:	bf00      	nop
 8001496:	3714      	adds	r7, #20
 8001498:	46bd      	mov	sp, r7
 800149a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149e:	4770      	bx	lr
 80014a0:	e000ed00 	.word	0xe000ed00
 80014a4:	05fa0000 	.word	0x05fa0000

080014a8 <__NVIC_GetPriorityGrouping>:
{
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014ac:	4b04      	ldr	r3, [pc, #16]	; (80014c0 <__NVIC_GetPriorityGrouping+0x18>)
 80014ae:	68db      	ldr	r3, [r3, #12]
 80014b0:	0a1b      	lsrs	r3, r3, #8
 80014b2:	f003 0307 	and.w	r3, r3, #7
}
 80014b6:	4618      	mov	r0, r3
 80014b8:	46bd      	mov	sp, r7
 80014ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014be:	4770      	bx	lr
 80014c0:	e000ed00 	.word	0xe000ed00

080014c4 <__NVIC_EnableIRQ>:
{
 80014c4:	b480      	push	{r7}
 80014c6:	b083      	sub	sp, #12
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	4603      	mov	r3, r0
 80014cc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80014ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	db0b      	blt.n	80014ee <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014d6:	88fb      	ldrh	r3, [r7, #6]
 80014d8:	f003 021f 	and.w	r2, r3, #31
 80014dc:	4907      	ldr	r1, [pc, #28]	; (80014fc <__NVIC_EnableIRQ+0x38>)
 80014de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014e2:	095b      	lsrs	r3, r3, #5
 80014e4:	2001      	movs	r0, #1
 80014e6:	fa00 f202 	lsl.w	r2, r0, r2
 80014ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80014ee:	bf00      	nop
 80014f0:	370c      	adds	r7, #12
 80014f2:	46bd      	mov	sp, r7
 80014f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f8:	4770      	bx	lr
 80014fa:	bf00      	nop
 80014fc:	e000e100 	.word	0xe000e100

08001500 <__NVIC_SetPriority>:
{
 8001500:	b480      	push	{r7}
 8001502:	b083      	sub	sp, #12
 8001504:	af00      	add	r7, sp, #0
 8001506:	4603      	mov	r3, r0
 8001508:	6039      	str	r1, [r7, #0]
 800150a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800150c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001510:	2b00      	cmp	r3, #0
 8001512:	db0a      	blt.n	800152a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	b2da      	uxtb	r2, r3
 8001518:	490c      	ldr	r1, [pc, #48]	; (800154c <__NVIC_SetPriority+0x4c>)
 800151a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800151e:	0112      	lsls	r2, r2, #4
 8001520:	b2d2      	uxtb	r2, r2
 8001522:	440b      	add	r3, r1
 8001524:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001528:	e00a      	b.n	8001540 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	b2da      	uxtb	r2, r3
 800152e:	4908      	ldr	r1, [pc, #32]	; (8001550 <__NVIC_SetPriority+0x50>)
 8001530:	88fb      	ldrh	r3, [r7, #6]
 8001532:	f003 030f 	and.w	r3, r3, #15
 8001536:	3b04      	subs	r3, #4
 8001538:	0112      	lsls	r2, r2, #4
 800153a:	b2d2      	uxtb	r2, r2
 800153c:	440b      	add	r3, r1
 800153e:	761a      	strb	r2, [r3, #24]
}
 8001540:	bf00      	nop
 8001542:	370c      	adds	r7, #12
 8001544:	46bd      	mov	sp, r7
 8001546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154a:	4770      	bx	lr
 800154c:	e000e100 	.word	0xe000e100
 8001550:	e000ed00 	.word	0xe000ed00

08001554 <NVIC_EncodePriority>:
{
 8001554:	b480      	push	{r7}
 8001556:	b089      	sub	sp, #36	; 0x24
 8001558:	af00      	add	r7, sp, #0
 800155a:	60f8      	str	r0, [r7, #12]
 800155c:	60b9      	str	r1, [r7, #8]
 800155e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	f003 0307 	and.w	r3, r3, #7
 8001566:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001568:	69fb      	ldr	r3, [r7, #28]
 800156a:	f1c3 0307 	rsb	r3, r3, #7
 800156e:	2b04      	cmp	r3, #4
 8001570:	bf28      	it	cs
 8001572:	2304      	movcs	r3, #4
 8001574:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001576:	69fb      	ldr	r3, [r7, #28]
 8001578:	3304      	adds	r3, #4
 800157a:	2b06      	cmp	r3, #6
 800157c:	d902      	bls.n	8001584 <NVIC_EncodePriority+0x30>
 800157e:	69fb      	ldr	r3, [r7, #28]
 8001580:	3b03      	subs	r3, #3
 8001582:	e000      	b.n	8001586 <NVIC_EncodePriority+0x32>
 8001584:	2300      	movs	r3, #0
 8001586:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001588:	f04f 32ff 	mov.w	r2, #4294967295
 800158c:	69bb      	ldr	r3, [r7, #24]
 800158e:	fa02 f303 	lsl.w	r3, r2, r3
 8001592:	43da      	mvns	r2, r3
 8001594:	68bb      	ldr	r3, [r7, #8]
 8001596:	401a      	ands	r2, r3
 8001598:	697b      	ldr	r3, [r7, #20]
 800159a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800159c:	f04f 31ff 	mov.w	r1, #4294967295
 80015a0:	697b      	ldr	r3, [r7, #20]
 80015a2:	fa01 f303 	lsl.w	r3, r1, r3
 80015a6:	43d9      	mvns	r1, r3
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015ac:	4313      	orrs	r3, r2
}
 80015ae:	4618      	mov	r0, r3
 80015b0:	3724      	adds	r7, #36	; 0x24
 80015b2:	46bd      	mov	sp, r7
 80015b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b8:	4770      	bx	lr
	...

080015bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b082      	sub	sp, #8
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	3b01      	subs	r3, #1
 80015c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015cc:	d301      	bcc.n	80015d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015ce:	2301      	movs	r3, #1
 80015d0:	e00f      	b.n	80015f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015d2:	4a0a      	ldr	r2, [pc, #40]	; (80015fc <SysTick_Config+0x40>)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	3b01      	subs	r3, #1
 80015d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015da:	210f      	movs	r1, #15
 80015dc:	f04f 30ff 	mov.w	r0, #4294967295
 80015e0:	f7ff ff8e 	bl	8001500 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015e4:	4b05      	ldr	r3, [pc, #20]	; (80015fc <SysTick_Config+0x40>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015ea:	4b04      	ldr	r3, [pc, #16]	; (80015fc <SysTick_Config+0x40>)
 80015ec:	2207      	movs	r2, #7
 80015ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015f0:	2300      	movs	r3, #0
}
 80015f2:	4618      	mov	r0, r3
 80015f4:	3708      	adds	r7, #8
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	e000e010 	.word	0xe000e010

08001600 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b082      	sub	sp, #8
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001608:	6878      	ldr	r0, [r7, #4]
 800160a:	f7ff ff29 	bl	8001460 <__NVIC_SetPriorityGrouping>
}
 800160e:	bf00      	nop
 8001610:	3708      	adds	r7, #8
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}

08001616 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001616:	b580      	push	{r7, lr}
 8001618:	b086      	sub	sp, #24
 800161a:	af00      	add	r7, sp, #0
 800161c:	4603      	mov	r3, r0
 800161e:	60b9      	str	r1, [r7, #8]
 8001620:	607a      	str	r2, [r7, #4]
 8001622:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001624:	f7ff ff40 	bl	80014a8 <__NVIC_GetPriorityGrouping>
 8001628:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800162a:	687a      	ldr	r2, [r7, #4]
 800162c:	68b9      	ldr	r1, [r7, #8]
 800162e:	6978      	ldr	r0, [r7, #20]
 8001630:	f7ff ff90 	bl	8001554 <NVIC_EncodePriority>
 8001634:	4602      	mov	r2, r0
 8001636:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800163a:	4611      	mov	r1, r2
 800163c:	4618      	mov	r0, r3
 800163e:	f7ff ff5f 	bl	8001500 <__NVIC_SetPriority>
}
 8001642:	bf00      	nop
 8001644:	3718      	adds	r7, #24
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}

0800164a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800164a:	b580      	push	{r7, lr}
 800164c:	b082      	sub	sp, #8
 800164e:	af00      	add	r7, sp, #0
 8001650:	4603      	mov	r3, r0
 8001652:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001654:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001658:	4618      	mov	r0, r3
 800165a:	f7ff ff33 	bl	80014c4 <__NVIC_EnableIRQ>
}
 800165e:	bf00      	nop
 8001660:	3708      	adds	r7, #8
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}

08001666 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001666:	b580      	push	{r7, lr}
 8001668:	b082      	sub	sp, #8
 800166a:	af00      	add	r7, sp, #0
 800166c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800166e:	6878      	ldr	r0, [r7, #4]
 8001670:	f7ff ffa4 	bl	80015bc <SysTick_Config>
 8001674:	4603      	mov	r3, r0
}
 8001676:	4618      	mov	r0, r3
 8001678:	3708      	adds	r7, #8
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}
	...

08001680 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b082      	sub	sp, #8
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d101      	bne.n	8001692 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800168e:	2301      	movs	r3, #1
 8001690:	e054      	b.n	800173c <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	7f5b      	ldrb	r3, [r3, #29]
 8001696:	b2db      	uxtb	r3, r3
 8001698:	2b00      	cmp	r3, #0
 800169a:	d105      	bne.n	80016a8 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	2200      	movs	r2, #0
 80016a0:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80016a2:	6878      	ldr	r0, [r7, #4]
 80016a4:	f7ff fc0e 	bl	8000ec4 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2202      	movs	r2, #2
 80016ac:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	791b      	ldrb	r3, [r3, #4]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d10c      	bne.n	80016d0 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	4a22      	ldr	r2, [pc, #136]	; (8001744 <HAL_CRC_Init+0xc4>)
 80016bc:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	689a      	ldr	r2, [r3, #8]
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f022 0218 	bic.w	r2, r2, #24
 80016cc:	609a      	str	r2, [r3, #8]
 80016ce:	e00c      	b.n	80016ea <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6899      	ldr	r1, [r3, #8]
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	68db      	ldr	r3, [r3, #12]
 80016d8:	461a      	mov	r2, r3
 80016da:	6878      	ldr	r0, [r7, #4]
 80016dc:	f000 f834 	bl	8001748 <HAL_CRCEx_Polynomial_Set>
 80016e0:	4603      	mov	r3, r0
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d001      	beq.n	80016ea <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80016e6:	2301      	movs	r3, #1
 80016e8:	e028      	b.n	800173c <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	795b      	ldrb	r3, [r3, #5]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d105      	bne.n	80016fe <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f04f 32ff 	mov.w	r2, #4294967295
 80016fa:	611a      	str	r2, [r3, #16]
 80016fc:	e004      	b.n	8001708 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	687a      	ldr	r2, [r7, #4]
 8001704:	6912      	ldr	r2, [r2, #16]
 8001706:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	689b      	ldr	r3, [r3, #8]
 800170e:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	695a      	ldr	r2, [r3, #20]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	430a      	orrs	r2, r1
 800171c:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	689b      	ldr	r3, [r3, #8]
 8001724:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	699a      	ldr	r2, [r3, #24]
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	430a      	orrs	r2, r1
 8001732:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	2201      	movs	r2, #1
 8001738:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800173a:	2300      	movs	r3, #0
}
 800173c:	4618      	mov	r0, r3
 800173e:	3708      	adds	r7, #8
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}
 8001744:	04c11db7 	.word	0x04c11db7

08001748 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8001748:	b480      	push	{r7}
 800174a:	b087      	sub	sp, #28
 800174c:	af00      	add	r7, sp, #0
 800174e:	60f8      	str	r0, [r7, #12]
 8001750:	60b9      	str	r1, [r7, #8]
 8001752:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001754:	2300      	movs	r3, #0
 8001756:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8001758:	231f      	movs	r3, #31
 800175a:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 800175c:	bf00      	nop
 800175e:	693b      	ldr	r3, [r7, #16]
 8001760:	1e5a      	subs	r2, r3, #1
 8001762:	613a      	str	r2, [r7, #16]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d009      	beq.n	800177c <HAL_CRCEx_Polynomial_Set+0x34>
 8001768:	693b      	ldr	r3, [r7, #16]
 800176a:	f003 031f 	and.w	r3, r3, #31
 800176e:	68ba      	ldr	r2, [r7, #8]
 8001770:	fa22 f303 	lsr.w	r3, r2, r3
 8001774:	f003 0301 	and.w	r3, r3, #1
 8001778:	2b00      	cmp	r3, #0
 800177a:	d0f0      	beq.n	800175e <HAL_CRCEx_Polynomial_Set+0x16>
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2b18      	cmp	r3, #24
 8001780:	d846      	bhi.n	8001810 <HAL_CRCEx_Polynomial_Set+0xc8>
 8001782:	a201      	add	r2, pc, #4	; (adr r2, 8001788 <HAL_CRCEx_Polynomial_Set+0x40>)
 8001784:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001788:	08001817 	.word	0x08001817
 800178c:	08001811 	.word	0x08001811
 8001790:	08001811 	.word	0x08001811
 8001794:	08001811 	.word	0x08001811
 8001798:	08001811 	.word	0x08001811
 800179c:	08001811 	.word	0x08001811
 80017a0:	08001811 	.word	0x08001811
 80017a4:	08001811 	.word	0x08001811
 80017a8:	08001805 	.word	0x08001805
 80017ac:	08001811 	.word	0x08001811
 80017b0:	08001811 	.word	0x08001811
 80017b4:	08001811 	.word	0x08001811
 80017b8:	08001811 	.word	0x08001811
 80017bc:	08001811 	.word	0x08001811
 80017c0:	08001811 	.word	0x08001811
 80017c4:	08001811 	.word	0x08001811
 80017c8:	080017f9 	.word	0x080017f9
 80017cc:	08001811 	.word	0x08001811
 80017d0:	08001811 	.word	0x08001811
 80017d4:	08001811 	.word	0x08001811
 80017d8:	08001811 	.word	0x08001811
 80017dc:	08001811 	.word	0x08001811
 80017e0:	08001811 	.word	0x08001811
 80017e4:	08001811 	.word	0x08001811
 80017e8:	080017ed 	.word	0x080017ed
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 80017ec:	693b      	ldr	r3, [r7, #16]
 80017ee:	2b06      	cmp	r3, #6
 80017f0:	d913      	bls.n	800181a <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 80017f2:	2301      	movs	r3, #1
 80017f4:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80017f6:	e010      	b.n	800181a <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 80017f8:	693b      	ldr	r3, [r7, #16]
 80017fa:	2b07      	cmp	r3, #7
 80017fc:	d90f      	bls.n	800181e <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 80017fe:	2301      	movs	r3, #1
 8001800:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8001802:	e00c      	b.n	800181e <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8001804:	693b      	ldr	r3, [r7, #16]
 8001806:	2b0f      	cmp	r3, #15
 8001808:	d90b      	bls.n	8001822 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 800180a:	2301      	movs	r3, #1
 800180c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800180e:	e008      	b.n	8001822 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8001810:	2301      	movs	r3, #1
 8001812:	75fb      	strb	r3, [r7, #23]
      break;
 8001814:	e006      	b.n	8001824 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001816:	bf00      	nop
 8001818:	e004      	b.n	8001824 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800181a:	bf00      	nop
 800181c:	e002      	b.n	8001824 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800181e:	bf00      	nop
 8001820:	e000      	b.n	8001824 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001822:	bf00      	nop
  }
  if (status == HAL_OK)
 8001824:	7dfb      	ldrb	r3, [r7, #23]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d10d      	bne.n	8001846 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	68ba      	ldr	r2, [r7, #8]
 8001830:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	689b      	ldr	r3, [r3, #8]
 8001838:	f023 0118 	bic.w	r1, r3, #24
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	687a      	ldr	r2, [r7, #4]
 8001842:	430a      	orrs	r2, r1
 8001844:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8001846:	7dfb      	ldrb	r3, [r7, #23]
}
 8001848:	4618      	mov	r0, r3
 800184a:	371c      	adds	r7, #28
 800184c:	46bd      	mov	sp, r7
 800184e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001852:	4770      	bx	lr

08001854 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b086      	sub	sp, #24
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 800185c:	f7ff fde8 	bl	8001430 <HAL_GetTick>
 8001860:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	2b00      	cmp	r3, #0
 8001866:	d101      	bne.n	800186c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001868:	2301      	movs	r3, #1
 800186a:	e316      	b.n	8001e9a <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4a66      	ldr	r2, [pc, #408]	; (8001a0c <HAL_DMA_Init+0x1b8>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d04a      	beq.n	800190c <HAL_DMA_Init+0xb8>
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4a65      	ldr	r2, [pc, #404]	; (8001a10 <HAL_DMA_Init+0x1bc>)
 800187c:	4293      	cmp	r3, r2
 800187e:	d045      	beq.n	800190c <HAL_DMA_Init+0xb8>
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a63      	ldr	r2, [pc, #396]	; (8001a14 <HAL_DMA_Init+0x1c0>)
 8001886:	4293      	cmp	r3, r2
 8001888:	d040      	beq.n	800190c <HAL_DMA_Init+0xb8>
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4a62      	ldr	r2, [pc, #392]	; (8001a18 <HAL_DMA_Init+0x1c4>)
 8001890:	4293      	cmp	r3, r2
 8001892:	d03b      	beq.n	800190c <HAL_DMA_Init+0xb8>
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4a60      	ldr	r2, [pc, #384]	; (8001a1c <HAL_DMA_Init+0x1c8>)
 800189a:	4293      	cmp	r3, r2
 800189c:	d036      	beq.n	800190c <HAL_DMA_Init+0xb8>
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4a5f      	ldr	r2, [pc, #380]	; (8001a20 <HAL_DMA_Init+0x1cc>)
 80018a4:	4293      	cmp	r3, r2
 80018a6:	d031      	beq.n	800190c <HAL_DMA_Init+0xb8>
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4a5d      	ldr	r2, [pc, #372]	; (8001a24 <HAL_DMA_Init+0x1d0>)
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d02c      	beq.n	800190c <HAL_DMA_Init+0xb8>
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4a5c      	ldr	r2, [pc, #368]	; (8001a28 <HAL_DMA_Init+0x1d4>)
 80018b8:	4293      	cmp	r3, r2
 80018ba:	d027      	beq.n	800190c <HAL_DMA_Init+0xb8>
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a5a      	ldr	r2, [pc, #360]	; (8001a2c <HAL_DMA_Init+0x1d8>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d022      	beq.n	800190c <HAL_DMA_Init+0xb8>
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4a59      	ldr	r2, [pc, #356]	; (8001a30 <HAL_DMA_Init+0x1dc>)
 80018cc:	4293      	cmp	r3, r2
 80018ce:	d01d      	beq.n	800190c <HAL_DMA_Init+0xb8>
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4a57      	ldr	r2, [pc, #348]	; (8001a34 <HAL_DMA_Init+0x1e0>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d018      	beq.n	800190c <HAL_DMA_Init+0xb8>
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	4a56      	ldr	r2, [pc, #344]	; (8001a38 <HAL_DMA_Init+0x1e4>)
 80018e0:	4293      	cmp	r3, r2
 80018e2:	d013      	beq.n	800190c <HAL_DMA_Init+0xb8>
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4a54      	ldr	r2, [pc, #336]	; (8001a3c <HAL_DMA_Init+0x1e8>)
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d00e      	beq.n	800190c <HAL_DMA_Init+0xb8>
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4a53      	ldr	r2, [pc, #332]	; (8001a40 <HAL_DMA_Init+0x1ec>)
 80018f4:	4293      	cmp	r3, r2
 80018f6:	d009      	beq.n	800190c <HAL_DMA_Init+0xb8>
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4a51      	ldr	r2, [pc, #324]	; (8001a44 <HAL_DMA_Init+0x1f0>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	d004      	beq.n	800190c <HAL_DMA_Init+0xb8>
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	4a50      	ldr	r2, [pc, #320]	; (8001a48 <HAL_DMA_Init+0x1f4>)
 8001908:	4293      	cmp	r3, r2
 800190a:	d101      	bne.n	8001910 <HAL_DMA_Init+0xbc>
 800190c:	2301      	movs	r3, #1
 800190e:	e000      	b.n	8001912 <HAL_DMA_Init+0xbe>
 8001910:	2300      	movs	r3, #0
 8001912:	2b00      	cmp	r3, #0
 8001914:	f000 813b 	beq.w	8001b8e <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2200      	movs	r2, #0
 800191c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2202      	movs	r2, #2
 8001924:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a37      	ldr	r2, [pc, #220]	; (8001a0c <HAL_DMA_Init+0x1b8>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d04a      	beq.n	80019c8 <HAL_DMA_Init+0x174>
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4a36      	ldr	r2, [pc, #216]	; (8001a10 <HAL_DMA_Init+0x1bc>)
 8001938:	4293      	cmp	r3, r2
 800193a:	d045      	beq.n	80019c8 <HAL_DMA_Init+0x174>
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a34      	ldr	r2, [pc, #208]	; (8001a14 <HAL_DMA_Init+0x1c0>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d040      	beq.n	80019c8 <HAL_DMA_Init+0x174>
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4a33      	ldr	r2, [pc, #204]	; (8001a18 <HAL_DMA_Init+0x1c4>)
 800194c:	4293      	cmp	r3, r2
 800194e:	d03b      	beq.n	80019c8 <HAL_DMA_Init+0x174>
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4a31      	ldr	r2, [pc, #196]	; (8001a1c <HAL_DMA_Init+0x1c8>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d036      	beq.n	80019c8 <HAL_DMA_Init+0x174>
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4a30      	ldr	r2, [pc, #192]	; (8001a20 <HAL_DMA_Init+0x1cc>)
 8001960:	4293      	cmp	r3, r2
 8001962:	d031      	beq.n	80019c8 <HAL_DMA_Init+0x174>
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a2e      	ldr	r2, [pc, #184]	; (8001a24 <HAL_DMA_Init+0x1d0>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d02c      	beq.n	80019c8 <HAL_DMA_Init+0x174>
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4a2d      	ldr	r2, [pc, #180]	; (8001a28 <HAL_DMA_Init+0x1d4>)
 8001974:	4293      	cmp	r3, r2
 8001976:	d027      	beq.n	80019c8 <HAL_DMA_Init+0x174>
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a2b      	ldr	r2, [pc, #172]	; (8001a2c <HAL_DMA_Init+0x1d8>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d022      	beq.n	80019c8 <HAL_DMA_Init+0x174>
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4a2a      	ldr	r2, [pc, #168]	; (8001a30 <HAL_DMA_Init+0x1dc>)
 8001988:	4293      	cmp	r3, r2
 800198a:	d01d      	beq.n	80019c8 <HAL_DMA_Init+0x174>
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4a28      	ldr	r2, [pc, #160]	; (8001a34 <HAL_DMA_Init+0x1e0>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d018      	beq.n	80019c8 <HAL_DMA_Init+0x174>
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4a27      	ldr	r2, [pc, #156]	; (8001a38 <HAL_DMA_Init+0x1e4>)
 800199c:	4293      	cmp	r3, r2
 800199e:	d013      	beq.n	80019c8 <HAL_DMA_Init+0x174>
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a25      	ldr	r2, [pc, #148]	; (8001a3c <HAL_DMA_Init+0x1e8>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d00e      	beq.n	80019c8 <HAL_DMA_Init+0x174>
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4a24      	ldr	r2, [pc, #144]	; (8001a40 <HAL_DMA_Init+0x1ec>)
 80019b0:	4293      	cmp	r3, r2
 80019b2:	d009      	beq.n	80019c8 <HAL_DMA_Init+0x174>
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a22      	ldr	r2, [pc, #136]	; (8001a44 <HAL_DMA_Init+0x1f0>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d004      	beq.n	80019c8 <HAL_DMA_Init+0x174>
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4a21      	ldr	r2, [pc, #132]	; (8001a48 <HAL_DMA_Init+0x1f4>)
 80019c4:	4293      	cmp	r3, r2
 80019c6:	d108      	bne.n	80019da <HAL_DMA_Init+0x186>
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	681a      	ldr	r2, [r3, #0]
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f022 0201 	bic.w	r2, r2, #1
 80019d6:	601a      	str	r2, [r3, #0]
 80019d8:	e007      	b.n	80019ea <HAL_DMA_Init+0x196>
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	681a      	ldr	r2, [r3, #0]
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f022 0201 	bic.w	r2, r2, #1
 80019e8:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80019ea:	e02f      	b.n	8001a4c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80019ec:	f7ff fd20 	bl	8001430 <HAL_GetTick>
 80019f0:	4602      	mov	r2, r0
 80019f2:	693b      	ldr	r3, [r7, #16]
 80019f4:	1ad3      	subs	r3, r2, r3
 80019f6:	2b05      	cmp	r3, #5
 80019f8:	d928      	bls.n	8001a4c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	2220      	movs	r2, #32
 80019fe:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2203      	movs	r2, #3
 8001a04:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8001a08:	2301      	movs	r3, #1
 8001a0a:	e246      	b.n	8001e9a <HAL_DMA_Init+0x646>
 8001a0c:	40020010 	.word	0x40020010
 8001a10:	40020028 	.word	0x40020028
 8001a14:	40020040 	.word	0x40020040
 8001a18:	40020058 	.word	0x40020058
 8001a1c:	40020070 	.word	0x40020070
 8001a20:	40020088 	.word	0x40020088
 8001a24:	400200a0 	.word	0x400200a0
 8001a28:	400200b8 	.word	0x400200b8
 8001a2c:	40020410 	.word	0x40020410
 8001a30:	40020428 	.word	0x40020428
 8001a34:	40020440 	.word	0x40020440
 8001a38:	40020458 	.word	0x40020458
 8001a3c:	40020470 	.word	0x40020470
 8001a40:	40020488 	.word	0x40020488
 8001a44:	400204a0 	.word	0x400204a0
 8001a48:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f003 0301 	and.w	r3, r3, #1
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d1c8      	bne.n	80019ec <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001a62:	697a      	ldr	r2, [r7, #20]
 8001a64:	4b83      	ldr	r3, [pc, #524]	; (8001c74 <HAL_DMA_Init+0x420>)
 8001a66:	4013      	ands	r3, r2
 8001a68:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8001a72:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	691b      	ldr	r3, [r3, #16]
 8001a78:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a7e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	699b      	ldr	r3, [r3, #24]
 8001a84:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a8a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6a1b      	ldr	r3, [r3, #32]
 8001a90:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8001a92:	697a      	ldr	r2, [r7, #20]
 8001a94:	4313      	orrs	r3, r2
 8001a96:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a9c:	2b04      	cmp	r3, #4
 8001a9e:	d107      	bne.n	8001ab0 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa8:	4313      	orrs	r3, r2
 8001aaa:	697a      	ldr	r2, [r7, #20]
 8001aac:	4313      	orrs	r3, r2
 8001aae:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8001ab0:	4b71      	ldr	r3, [pc, #452]	; (8001c78 <HAL_DMA_Init+0x424>)
 8001ab2:	681a      	ldr	r2, [r3, #0]
 8001ab4:	4b71      	ldr	r3, [pc, #452]	; (8001c7c <HAL_DMA_Init+0x428>)
 8001ab6:	4013      	ands	r3, r2
 8001ab8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001abc:	d328      	bcc.n	8001b10 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	2b28      	cmp	r3, #40	; 0x28
 8001ac4:	d903      	bls.n	8001ace <HAL_DMA_Init+0x27a>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	2b2e      	cmp	r3, #46	; 0x2e
 8001acc:	d917      	bls.n	8001afe <HAL_DMA_Init+0x2aa>
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	2b3e      	cmp	r3, #62	; 0x3e
 8001ad4:	d903      	bls.n	8001ade <HAL_DMA_Init+0x28a>
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	2b42      	cmp	r3, #66	; 0x42
 8001adc:	d90f      	bls.n	8001afe <HAL_DMA_Init+0x2aa>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	2b46      	cmp	r3, #70	; 0x46
 8001ae4:	d903      	bls.n	8001aee <HAL_DMA_Init+0x29a>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	2b48      	cmp	r3, #72	; 0x48
 8001aec:	d907      	bls.n	8001afe <HAL_DMA_Init+0x2aa>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	2b4e      	cmp	r3, #78	; 0x4e
 8001af4:	d905      	bls.n	8001b02 <HAL_DMA_Init+0x2ae>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	2b52      	cmp	r3, #82	; 0x52
 8001afc:	d801      	bhi.n	8001b02 <HAL_DMA_Init+0x2ae>
 8001afe:	2301      	movs	r3, #1
 8001b00:	e000      	b.n	8001b04 <HAL_DMA_Init+0x2b0>
 8001b02:	2300      	movs	r3, #0
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d003      	beq.n	8001b10 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8001b08:	697b      	ldr	r3, [r7, #20]
 8001b0a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001b0e:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	697a      	ldr	r2, [r7, #20]
 8001b16:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	695b      	ldr	r3, [r3, #20]
 8001b1e:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	f023 0307 	bic.w	r3, r3, #7
 8001b26:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b2c:	697a      	ldr	r2, [r7, #20]
 8001b2e:	4313      	orrs	r3, r2
 8001b30:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b36:	2b04      	cmp	r3, #4
 8001b38:	d117      	bne.n	8001b6a <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b3e:	697a      	ldr	r2, [r7, #20]
 8001b40:	4313      	orrs	r3, r2
 8001b42:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d00e      	beq.n	8001b6a <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001b4c:	6878      	ldr	r0, [r7, #4]
 8001b4e:	f002 fb3d 	bl	80041cc <DMA_CheckFifoParam>
 8001b52:	4603      	mov	r3, r0
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d008      	beq.n	8001b6a <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2240      	movs	r2, #64	; 0x40
 8001b5c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2201      	movs	r2, #1
 8001b62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8001b66:	2301      	movs	r3, #1
 8001b68:	e197      	b.n	8001e9a <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	697a      	ldr	r2, [r7, #20]
 8001b70:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001b72:	6878      	ldr	r0, [r7, #4]
 8001b74:	f002 fa78 	bl	8004068 <DMA_CalcBaseAndBitshift>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b80:	f003 031f 	and.w	r3, r3, #31
 8001b84:	223f      	movs	r2, #63	; 0x3f
 8001b86:	409a      	lsls	r2, r3
 8001b88:	68bb      	ldr	r3, [r7, #8]
 8001b8a:	609a      	str	r2, [r3, #8]
 8001b8c:	e0cd      	b.n	8001d2a <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4a3b      	ldr	r2, [pc, #236]	; (8001c80 <HAL_DMA_Init+0x42c>)
 8001b94:	4293      	cmp	r3, r2
 8001b96:	d022      	beq.n	8001bde <HAL_DMA_Init+0x38a>
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a39      	ldr	r2, [pc, #228]	; (8001c84 <HAL_DMA_Init+0x430>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d01d      	beq.n	8001bde <HAL_DMA_Init+0x38a>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4a38      	ldr	r2, [pc, #224]	; (8001c88 <HAL_DMA_Init+0x434>)
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	d018      	beq.n	8001bde <HAL_DMA_Init+0x38a>
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a36      	ldr	r2, [pc, #216]	; (8001c8c <HAL_DMA_Init+0x438>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d013      	beq.n	8001bde <HAL_DMA_Init+0x38a>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4a35      	ldr	r2, [pc, #212]	; (8001c90 <HAL_DMA_Init+0x43c>)
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	d00e      	beq.n	8001bde <HAL_DMA_Init+0x38a>
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a33      	ldr	r2, [pc, #204]	; (8001c94 <HAL_DMA_Init+0x440>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d009      	beq.n	8001bde <HAL_DMA_Init+0x38a>
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4a32      	ldr	r2, [pc, #200]	; (8001c98 <HAL_DMA_Init+0x444>)
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d004      	beq.n	8001bde <HAL_DMA_Init+0x38a>
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a30      	ldr	r2, [pc, #192]	; (8001c9c <HAL_DMA_Init+0x448>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d101      	bne.n	8001be2 <HAL_DMA_Init+0x38e>
 8001bde:	2301      	movs	r3, #1
 8001be0:	e000      	b.n	8001be4 <HAL_DMA_Init+0x390>
 8001be2:	2300      	movs	r3, #0
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	f000 8097 	beq.w	8001d18 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4a24      	ldr	r2, [pc, #144]	; (8001c80 <HAL_DMA_Init+0x42c>)
 8001bf0:	4293      	cmp	r3, r2
 8001bf2:	d021      	beq.n	8001c38 <HAL_DMA_Init+0x3e4>
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a22      	ldr	r2, [pc, #136]	; (8001c84 <HAL_DMA_Init+0x430>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d01c      	beq.n	8001c38 <HAL_DMA_Init+0x3e4>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4a21      	ldr	r2, [pc, #132]	; (8001c88 <HAL_DMA_Init+0x434>)
 8001c04:	4293      	cmp	r3, r2
 8001c06:	d017      	beq.n	8001c38 <HAL_DMA_Init+0x3e4>
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a1f      	ldr	r2, [pc, #124]	; (8001c8c <HAL_DMA_Init+0x438>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d012      	beq.n	8001c38 <HAL_DMA_Init+0x3e4>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4a1e      	ldr	r2, [pc, #120]	; (8001c90 <HAL_DMA_Init+0x43c>)
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d00d      	beq.n	8001c38 <HAL_DMA_Init+0x3e4>
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a1c      	ldr	r2, [pc, #112]	; (8001c94 <HAL_DMA_Init+0x440>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d008      	beq.n	8001c38 <HAL_DMA_Init+0x3e4>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4a1b      	ldr	r2, [pc, #108]	; (8001c98 <HAL_DMA_Init+0x444>)
 8001c2c:	4293      	cmp	r3, r2
 8001c2e:	d003      	beq.n	8001c38 <HAL_DMA_Init+0x3e4>
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a19      	ldr	r2, [pc, #100]	; (8001c9c <HAL_DMA_Init+0x448>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2202      	movs	r2, #2
 8001c46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8001c52:	697a      	ldr	r2, [r7, #20]
 8001c54:	4b12      	ldr	r3, [pc, #72]	; (8001ca0 <HAL_DMA_Init+0x44c>)
 8001c56:	4013      	ands	r3, r2
 8001c58:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	689b      	ldr	r3, [r3, #8]
 8001c5e:	2b40      	cmp	r3, #64	; 0x40
 8001c60:	d020      	beq.n	8001ca4 <HAL_DMA_Init+0x450>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	689b      	ldr	r3, [r3, #8]
 8001c66:	2b80      	cmp	r3, #128	; 0x80
 8001c68:	d102      	bne.n	8001c70 <HAL_DMA_Init+0x41c>
 8001c6a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001c6e:	e01a      	b.n	8001ca6 <HAL_DMA_Init+0x452>
 8001c70:	2300      	movs	r3, #0
 8001c72:	e018      	b.n	8001ca6 <HAL_DMA_Init+0x452>
 8001c74:	fe10803f 	.word	0xfe10803f
 8001c78:	5c001000 	.word	0x5c001000
 8001c7c:	ffff0000 	.word	0xffff0000
 8001c80:	58025408 	.word	0x58025408
 8001c84:	5802541c 	.word	0x5802541c
 8001c88:	58025430 	.word	0x58025430
 8001c8c:	58025444 	.word	0x58025444
 8001c90:	58025458 	.word	0x58025458
 8001c94:	5802546c 	.word	0x5802546c
 8001c98:	58025480 	.word	0x58025480
 8001c9c:	58025494 	.word	0x58025494
 8001ca0:	fffe000f 	.word	0xfffe000f
 8001ca4:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001ca6:	687a      	ldr	r2, [r7, #4]
 8001ca8:	68d2      	ldr	r2, [r2, #12]
 8001caa:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001cac:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	691b      	ldr	r3, [r3, #16]
 8001cb2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001cb4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	695b      	ldr	r3, [r3, #20]
 8001cba:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001cbc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	699b      	ldr	r3, [r3, #24]
 8001cc2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001cc4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	69db      	ldr	r3, [r3, #28]
 8001cca:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001ccc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6a1b      	ldr	r3, [r3, #32]
 8001cd2:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001cd4:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001cd6:	697a      	ldr	r2, [r7, #20]
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	697a      	ldr	r2, [r7, #20]
 8001ce2:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	461a      	mov	r2, r3
 8001cea:	4b6e      	ldr	r3, [pc, #440]	; (8001ea4 <HAL_DMA_Init+0x650>)
 8001cec:	4413      	add	r3, r2
 8001cee:	4a6e      	ldr	r2, [pc, #440]	; (8001ea8 <HAL_DMA_Init+0x654>)
 8001cf0:	fba2 2303 	umull	r2, r3, r2, r3
 8001cf4:	091b      	lsrs	r3, r3, #4
 8001cf6:	009a      	lsls	r2, r3, #2
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001cfc:	6878      	ldr	r0, [r7, #4]
 8001cfe:	f002 f9b3 	bl	8004068 <DMA_CalcBaseAndBitshift>
 8001d02:	4603      	mov	r3, r0
 8001d04:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d0a:	f003 031f 	and.w	r3, r3, #31
 8001d0e:	2201      	movs	r2, #1
 8001d10:	409a      	lsls	r2, r3
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	605a      	str	r2, [r3, #4]
 8001d16:	e008      	b.n	8001d2a <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2240      	movs	r2, #64	; 0x40
 8001d1c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2203      	movs	r2, #3
 8001d22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8001d26:	2301      	movs	r3, #1
 8001d28:	e0b7      	b.n	8001e9a <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4a5f      	ldr	r2, [pc, #380]	; (8001eac <HAL_DMA_Init+0x658>)
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d072      	beq.n	8001e1a <HAL_DMA_Init+0x5c6>
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a5d      	ldr	r2, [pc, #372]	; (8001eb0 <HAL_DMA_Init+0x65c>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d06d      	beq.n	8001e1a <HAL_DMA_Init+0x5c6>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4a5c      	ldr	r2, [pc, #368]	; (8001eb4 <HAL_DMA_Init+0x660>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d068      	beq.n	8001e1a <HAL_DMA_Init+0x5c6>
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a5a      	ldr	r2, [pc, #360]	; (8001eb8 <HAL_DMA_Init+0x664>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d063      	beq.n	8001e1a <HAL_DMA_Init+0x5c6>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4a59      	ldr	r2, [pc, #356]	; (8001ebc <HAL_DMA_Init+0x668>)
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d05e      	beq.n	8001e1a <HAL_DMA_Init+0x5c6>
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a57      	ldr	r2, [pc, #348]	; (8001ec0 <HAL_DMA_Init+0x66c>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d059      	beq.n	8001e1a <HAL_DMA_Init+0x5c6>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4a56      	ldr	r2, [pc, #344]	; (8001ec4 <HAL_DMA_Init+0x670>)
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d054      	beq.n	8001e1a <HAL_DMA_Init+0x5c6>
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a54      	ldr	r2, [pc, #336]	; (8001ec8 <HAL_DMA_Init+0x674>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d04f      	beq.n	8001e1a <HAL_DMA_Init+0x5c6>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4a53      	ldr	r2, [pc, #332]	; (8001ecc <HAL_DMA_Init+0x678>)
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d04a      	beq.n	8001e1a <HAL_DMA_Init+0x5c6>
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a51      	ldr	r2, [pc, #324]	; (8001ed0 <HAL_DMA_Init+0x67c>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d045      	beq.n	8001e1a <HAL_DMA_Init+0x5c6>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4a50      	ldr	r2, [pc, #320]	; (8001ed4 <HAL_DMA_Init+0x680>)
 8001d94:	4293      	cmp	r3, r2
 8001d96:	d040      	beq.n	8001e1a <HAL_DMA_Init+0x5c6>
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4a4e      	ldr	r2, [pc, #312]	; (8001ed8 <HAL_DMA_Init+0x684>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d03b      	beq.n	8001e1a <HAL_DMA_Init+0x5c6>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4a4d      	ldr	r2, [pc, #308]	; (8001edc <HAL_DMA_Init+0x688>)
 8001da8:	4293      	cmp	r3, r2
 8001daa:	d036      	beq.n	8001e1a <HAL_DMA_Init+0x5c6>
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a4b      	ldr	r2, [pc, #300]	; (8001ee0 <HAL_DMA_Init+0x68c>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d031      	beq.n	8001e1a <HAL_DMA_Init+0x5c6>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4a4a      	ldr	r2, [pc, #296]	; (8001ee4 <HAL_DMA_Init+0x690>)
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d02c      	beq.n	8001e1a <HAL_DMA_Init+0x5c6>
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a48      	ldr	r2, [pc, #288]	; (8001ee8 <HAL_DMA_Init+0x694>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d027      	beq.n	8001e1a <HAL_DMA_Init+0x5c6>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4a47      	ldr	r2, [pc, #284]	; (8001eec <HAL_DMA_Init+0x698>)
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d022      	beq.n	8001e1a <HAL_DMA_Init+0x5c6>
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a45      	ldr	r2, [pc, #276]	; (8001ef0 <HAL_DMA_Init+0x69c>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d01d      	beq.n	8001e1a <HAL_DMA_Init+0x5c6>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4a44      	ldr	r2, [pc, #272]	; (8001ef4 <HAL_DMA_Init+0x6a0>)
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d018      	beq.n	8001e1a <HAL_DMA_Init+0x5c6>
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a42      	ldr	r2, [pc, #264]	; (8001ef8 <HAL_DMA_Init+0x6a4>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d013      	beq.n	8001e1a <HAL_DMA_Init+0x5c6>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4a41      	ldr	r2, [pc, #260]	; (8001efc <HAL_DMA_Init+0x6a8>)
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	d00e      	beq.n	8001e1a <HAL_DMA_Init+0x5c6>
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a3f      	ldr	r2, [pc, #252]	; (8001f00 <HAL_DMA_Init+0x6ac>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d009      	beq.n	8001e1a <HAL_DMA_Init+0x5c6>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4a3e      	ldr	r2, [pc, #248]	; (8001f04 <HAL_DMA_Init+0x6b0>)
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d004      	beq.n	8001e1a <HAL_DMA_Init+0x5c6>
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a3c      	ldr	r2, [pc, #240]	; (8001f08 <HAL_DMA_Init+0x6b4>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d101      	bne.n	8001e1e <HAL_DMA_Init+0x5ca>
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e000      	b.n	8001e20 <HAL_DMA_Init+0x5cc>
 8001e1e:	2300      	movs	r3, #0
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d032      	beq.n	8001e8a <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001e24:	6878      	ldr	r0, [r7, #4]
 8001e26:	f002 fa4d 	bl	80042c4 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	689b      	ldr	r3, [r3, #8]
 8001e2e:	2b80      	cmp	r3, #128	; 0x80
 8001e30:	d102      	bne.n	8001e38 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2200      	movs	r2, #0
 8001e36:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	685a      	ldr	r2, [r3, #4]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e40:	b2d2      	uxtb	r2, r2
 8001e42:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001e48:	687a      	ldr	r2, [r7, #4]
 8001e4a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001e4c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d010      	beq.n	8001e78 <HAL_DMA_Init+0x624>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	2b08      	cmp	r3, #8
 8001e5c:	d80c      	bhi.n	8001e78 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001e5e:	6878      	ldr	r0, [r7, #4]
 8001e60:	f002 faca 	bl	80043f8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001e68:	2200      	movs	r2, #0
 8001e6a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e70:	687a      	ldr	r2, [r7, #4]
 8001e72:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8001e74:	605a      	str	r2, [r3, #4]
 8001e76:	e008      	b.n	8001e8a <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2200      	movs	r2, #0
 8001e82:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2200      	movs	r2, #0
 8001e88:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2201      	movs	r2, #1
 8001e94:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001e98:	2300      	movs	r3, #0
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	3718      	adds	r7, #24
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	bf00      	nop
 8001ea4:	a7fdabf8 	.word	0xa7fdabf8
 8001ea8:	cccccccd 	.word	0xcccccccd
 8001eac:	40020010 	.word	0x40020010
 8001eb0:	40020028 	.word	0x40020028
 8001eb4:	40020040 	.word	0x40020040
 8001eb8:	40020058 	.word	0x40020058
 8001ebc:	40020070 	.word	0x40020070
 8001ec0:	40020088 	.word	0x40020088
 8001ec4:	400200a0 	.word	0x400200a0
 8001ec8:	400200b8 	.word	0x400200b8
 8001ecc:	40020410 	.word	0x40020410
 8001ed0:	40020428 	.word	0x40020428
 8001ed4:	40020440 	.word	0x40020440
 8001ed8:	40020458 	.word	0x40020458
 8001edc:	40020470 	.word	0x40020470
 8001ee0:	40020488 	.word	0x40020488
 8001ee4:	400204a0 	.word	0x400204a0
 8001ee8:	400204b8 	.word	0x400204b8
 8001eec:	58025408 	.word	0x58025408
 8001ef0:	5802541c 	.word	0x5802541c
 8001ef4:	58025430 	.word	0x58025430
 8001ef8:	58025444 	.word	0x58025444
 8001efc:	58025458 	.word	0x58025458
 8001f00:	5802546c 	.word	0x5802546c
 8001f04:	58025480 	.word	0x58025480
 8001f08:	58025494 	.word	0x58025494

08001f0c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b086      	sub	sp, #24
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	60f8      	str	r0, [r7, #12]
 8001f14:	60b9      	str	r1, [r7, #8]
 8001f16:	607a      	str	r2, [r7, #4]
 8001f18:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d101      	bne.n	8001f28 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8001f24:	2301      	movs	r3, #1
 8001f26:	e226      	b.n	8002376 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001f2e:	2b01      	cmp	r3, #1
 8001f30:	d101      	bne.n	8001f36 <HAL_DMA_Start_IT+0x2a>
 8001f32:	2302      	movs	r3, #2
 8001f34:	e21f      	b.n	8002376 <HAL_DMA_Start_IT+0x46a>
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	2201      	movs	r2, #1
 8001f3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f44:	b2db      	uxtb	r3, r3
 8001f46:	2b01      	cmp	r3, #1
 8001f48:	f040 820a 	bne.w	8002360 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	2202      	movs	r2, #2
 8001f50:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	2200      	movs	r2, #0
 8001f58:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4a68      	ldr	r2, [pc, #416]	; (8002100 <HAL_DMA_Start_IT+0x1f4>)
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d04a      	beq.n	8001ffa <HAL_DMA_Start_IT+0xee>
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a66      	ldr	r2, [pc, #408]	; (8002104 <HAL_DMA_Start_IT+0x1f8>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d045      	beq.n	8001ffa <HAL_DMA_Start_IT+0xee>
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4a65      	ldr	r2, [pc, #404]	; (8002108 <HAL_DMA_Start_IT+0x1fc>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d040      	beq.n	8001ffa <HAL_DMA_Start_IT+0xee>
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a63      	ldr	r2, [pc, #396]	; (800210c <HAL_DMA_Start_IT+0x200>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d03b      	beq.n	8001ffa <HAL_DMA_Start_IT+0xee>
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4a62      	ldr	r2, [pc, #392]	; (8002110 <HAL_DMA_Start_IT+0x204>)
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d036      	beq.n	8001ffa <HAL_DMA_Start_IT+0xee>
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a60      	ldr	r2, [pc, #384]	; (8002114 <HAL_DMA_Start_IT+0x208>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d031      	beq.n	8001ffa <HAL_DMA_Start_IT+0xee>
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4a5f      	ldr	r2, [pc, #380]	; (8002118 <HAL_DMA_Start_IT+0x20c>)
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d02c      	beq.n	8001ffa <HAL_DMA_Start_IT+0xee>
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a5d      	ldr	r2, [pc, #372]	; (800211c <HAL_DMA_Start_IT+0x210>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d027      	beq.n	8001ffa <HAL_DMA_Start_IT+0xee>
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4a5c      	ldr	r2, [pc, #368]	; (8002120 <HAL_DMA_Start_IT+0x214>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d022      	beq.n	8001ffa <HAL_DMA_Start_IT+0xee>
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a5a      	ldr	r2, [pc, #360]	; (8002124 <HAL_DMA_Start_IT+0x218>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d01d      	beq.n	8001ffa <HAL_DMA_Start_IT+0xee>
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4a59      	ldr	r2, [pc, #356]	; (8002128 <HAL_DMA_Start_IT+0x21c>)
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d018      	beq.n	8001ffa <HAL_DMA_Start_IT+0xee>
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4a57      	ldr	r2, [pc, #348]	; (800212c <HAL_DMA_Start_IT+0x220>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d013      	beq.n	8001ffa <HAL_DMA_Start_IT+0xee>
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4a56      	ldr	r2, [pc, #344]	; (8002130 <HAL_DMA_Start_IT+0x224>)
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d00e      	beq.n	8001ffa <HAL_DMA_Start_IT+0xee>
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a54      	ldr	r2, [pc, #336]	; (8002134 <HAL_DMA_Start_IT+0x228>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d009      	beq.n	8001ffa <HAL_DMA_Start_IT+0xee>
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4a53      	ldr	r2, [pc, #332]	; (8002138 <HAL_DMA_Start_IT+0x22c>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d004      	beq.n	8001ffa <HAL_DMA_Start_IT+0xee>
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a51      	ldr	r2, [pc, #324]	; (800213c <HAL_DMA_Start_IT+0x230>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d108      	bne.n	800200c <HAL_DMA_Start_IT+0x100>
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	681a      	ldr	r2, [r3, #0]
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f022 0201 	bic.w	r2, r2, #1
 8002008:	601a      	str	r2, [r3, #0]
 800200a:	e007      	b.n	800201c <HAL_DMA_Start_IT+0x110>
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	681a      	ldr	r2, [r3, #0]
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f022 0201 	bic.w	r2, r2, #1
 800201a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	687a      	ldr	r2, [r7, #4]
 8002020:	68b9      	ldr	r1, [r7, #8]
 8002022:	68f8      	ldr	r0, [r7, #12]
 8002024:	f001 fe74 	bl	8003d10 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a34      	ldr	r2, [pc, #208]	; (8002100 <HAL_DMA_Start_IT+0x1f4>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d04a      	beq.n	80020c8 <HAL_DMA_Start_IT+0x1bc>
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4a33      	ldr	r2, [pc, #204]	; (8002104 <HAL_DMA_Start_IT+0x1f8>)
 8002038:	4293      	cmp	r3, r2
 800203a:	d045      	beq.n	80020c8 <HAL_DMA_Start_IT+0x1bc>
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a31      	ldr	r2, [pc, #196]	; (8002108 <HAL_DMA_Start_IT+0x1fc>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d040      	beq.n	80020c8 <HAL_DMA_Start_IT+0x1bc>
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4a30      	ldr	r2, [pc, #192]	; (800210c <HAL_DMA_Start_IT+0x200>)
 800204c:	4293      	cmp	r3, r2
 800204e:	d03b      	beq.n	80020c8 <HAL_DMA_Start_IT+0x1bc>
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a2e      	ldr	r2, [pc, #184]	; (8002110 <HAL_DMA_Start_IT+0x204>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d036      	beq.n	80020c8 <HAL_DMA_Start_IT+0x1bc>
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4a2d      	ldr	r2, [pc, #180]	; (8002114 <HAL_DMA_Start_IT+0x208>)
 8002060:	4293      	cmp	r3, r2
 8002062:	d031      	beq.n	80020c8 <HAL_DMA_Start_IT+0x1bc>
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4a2b      	ldr	r2, [pc, #172]	; (8002118 <HAL_DMA_Start_IT+0x20c>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d02c      	beq.n	80020c8 <HAL_DMA_Start_IT+0x1bc>
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4a2a      	ldr	r2, [pc, #168]	; (800211c <HAL_DMA_Start_IT+0x210>)
 8002074:	4293      	cmp	r3, r2
 8002076:	d027      	beq.n	80020c8 <HAL_DMA_Start_IT+0x1bc>
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a28      	ldr	r2, [pc, #160]	; (8002120 <HAL_DMA_Start_IT+0x214>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d022      	beq.n	80020c8 <HAL_DMA_Start_IT+0x1bc>
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4a27      	ldr	r2, [pc, #156]	; (8002124 <HAL_DMA_Start_IT+0x218>)
 8002088:	4293      	cmp	r3, r2
 800208a:	d01d      	beq.n	80020c8 <HAL_DMA_Start_IT+0x1bc>
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a25      	ldr	r2, [pc, #148]	; (8002128 <HAL_DMA_Start_IT+0x21c>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d018      	beq.n	80020c8 <HAL_DMA_Start_IT+0x1bc>
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4a24      	ldr	r2, [pc, #144]	; (800212c <HAL_DMA_Start_IT+0x220>)
 800209c:	4293      	cmp	r3, r2
 800209e:	d013      	beq.n	80020c8 <HAL_DMA_Start_IT+0x1bc>
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a22      	ldr	r2, [pc, #136]	; (8002130 <HAL_DMA_Start_IT+0x224>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d00e      	beq.n	80020c8 <HAL_DMA_Start_IT+0x1bc>
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4a21      	ldr	r2, [pc, #132]	; (8002134 <HAL_DMA_Start_IT+0x228>)
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d009      	beq.n	80020c8 <HAL_DMA_Start_IT+0x1bc>
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a1f      	ldr	r2, [pc, #124]	; (8002138 <HAL_DMA_Start_IT+0x22c>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d004      	beq.n	80020c8 <HAL_DMA_Start_IT+0x1bc>
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4a1e      	ldr	r2, [pc, #120]	; (800213c <HAL_DMA_Start_IT+0x230>)
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d101      	bne.n	80020cc <HAL_DMA_Start_IT+0x1c0>
 80020c8:	2301      	movs	r3, #1
 80020ca:	e000      	b.n	80020ce <HAL_DMA_Start_IT+0x1c2>
 80020cc:	2300      	movs	r3, #0
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d036      	beq.n	8002140 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f023 021e 	bic.w	r2, r3, #30
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f042 0216 	orr.w	r2, r2, #22
 80020e4:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d03e      	beq.n	800216c <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	681a      	ldr	r2, [r3, #0]
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f042 0208 	orr.w	r2, r2, #8
 80020fc:	601a      	str	r2, [r3, #0]
 80020fe:	e035      	b.n	800216c <HAL_DMA_Start_IT+0x260>
 8002100:	40020010 	.word	0x40020010
 8002104:	40020028 	.word	0x40020028
 8002108:	40020040 	.word	0x40020040
 800210c:	40020058 	.word	0x40020058
 8002110:	40020070 	.word	0x40020070
 8002114:	40020088 	.word	0x40020088
 8002118:	400200a0 	.word	0x400200a0
 800211c:	400200b8 	.word	0x400200b8
 8002120:	40020410 	.word	0x40020410
 8002124:	40020428 	.word	0x40020428
 8002128:	40020440 	.word	0x40020440
 800212c:	40020458 	.word	0x40020458
 8002130:	40020470 	.word	0x40020470
 8002134:	40020488 	.word	0x40020488
 8002138:	400204a0 	.word	0x400204a0
 800213c:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f023 020e 	bic.w	r2, r3, #14
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f042 020a 	orr.w	r2, r2, #10
 8002152:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002158:	2b00      	cmp	r3, #0
 800215a:	d007      	beq.n	800216c <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	681a      	ldr	r2, [r3, #0]
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f042 0204 	orr.w	r2, r2, #4
 800216a:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a83      	ldr	r2, [pc, #524]	; (8002380 <HAL_DMA_Start_IT+0x474>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d072      	beq.n	800225c <HAL_DMA_Start_IT+0x350>
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a82      	ldr	r2, [pc, #520]	; (8002384 <HAL_DMA_Start_IT+0x478>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d06d      	beq.n	800225c <HAL_DMA_Start_IT+0x350>
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a80      	ldr	r2, [pc, #512]	; (8002388 <HAL_DMA_Start_IT+0x47c>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d068      	beq.n	800225c <HAL_DMA_Start_IT+0x350>
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4a7f      	ldr	r2, [pc, #508]	; (800238c <HAL_DMA_Start_IT+0x480>)
 8002190:	4293      	cmp	r3, r2
 8002192:	d063      	beq.n	800225c <HAL_DMA_Start_IT+0x350>
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a7d      	ldr	r2, [pc, #500]	; (8002390 <HAL_DMA_Start_IT+0x484>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d05e      	beq.n	800225c <HAL_DMA_Start_IT+0x350>
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4a7c      	ldr	r2, [pc, #496]	; (8002394 <HAL_DMA_Start_IT+0x488>)
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d059      	beq.n	800225c <HAL_DMA_Start_IT+0x350>
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a7a      	ldr	r2, [pc, #488]	; (8002398 <HAL_DMA_Start_IT+0x48c>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d054      	beq.n	800225c <HAL_DMA_Start_IT+0x350>
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4a79      	ldr	r2, [pc, #484]	; (800239c <HAL_DMA_Start_IT+0x490>)
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d04f      	beq.n	800225c <HAL_DMA_Start_IT+0x350>
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a77      	ldr	r2, [pc, #476]	; (80023a0 <HAL_DMA_Start_IT+0x494>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d04a      	beq.n	800225c <HAL_DMA_Start_IT+0x350>
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4a76      	ldr	r2, [pc, #472]	; (80023a4 <HAL_DMA_Start_IT+0x498>)
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d045      	beq.n	800225c <HAL_DMA_Start_IT+0x350>
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a74      	ldr	r2, [pc, #464]	; (80023a8 <HAL_DMA_Start_IT+0x49c>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d040      	beq.n	800225c <HAL_DMA_Start_IT+0x350>
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4a73      	ldr	r2, [pc, #460]	; (80023ac <HAL_DMA_Start_IT+0x4a0>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d03b      	beq.n	800225c <HAL_DMA_Start_IT+0x350>
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a71      	ldr	r2, [pc, #452]	; (80023b0 <HAL_DMA_Start_IT+0x4a4>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d036      	beq.n	800225c <HAL_DMA_Start_IT+0x350>
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4a70      	ldr	r2, [pc, #448]	; (80023b4 <HAL_DMA_Start_IT+0x4a8>)
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d031      	beq.n	800225c <HAL_DMA_Start_IT+0x350>
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a6e      	ldr	r2, [pc, #440]	; (80023b8 <HAL_DMA_Start_IT+0x4ac>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d02c      	beq.n	800225c <HAL_DMA_Start_IT+0x350>
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4a6d      	ldr	r2, [pc, #436]	; (80023bc <HAL_DMA_Start_IT+0x4b0>)
 8002208:	4293      	cmp	r3, r2
 800220a:	d027      	beq.n	800225c <HAL_DMA_Start_IT+0x350>
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4a6b      	ldr	r2, [pc, #428]	; (80023c0 <HAL_DMA_Start_IT+0x4b4>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d022      	beq.n	800225c <HAL_DMA_Start_IT+0x350>
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4a6a      	ldr	r2, [pc, #424]	; (80023c4 <HAL_DMA_Start_IT+0x4b8>)
 800221c:	4293      	cmp	r3, r2
 800221e:	d01d      	beq.n	800225c <HAL_DMA_Start_IT+0x350>
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a68      	ldr	r2, [pc, #416]	; (80023c8 <HAL_DMA_Start_IT+0x4bc>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d018      	beq.n	800225c <HAL_DMA_Start_IT+0x350>
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4a67      	ldr	r2, [pc, #412]	; (80023cc <HAL_DMA_Start_IT+0x4c0>)
 8002230:	4293      	cmp	r3, r2
 8002232:	d013      	beq.n	800225c <HAL_DMA_Start_IT+0x350>
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a65      	ldr	r2, [pc, #404]	; (80023d0 <HAL_DMA_Start_IT+0x4c4>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d00e      	beq.n	800225c <HAL_DMA_Start_IT+0x350>
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4a64      	ldr	r2, [pc, #400]	; (80023d4 <HAL_DMA_Start_IT+0x4c8>)
 8002244:	4293      	cmp	r3, r2
 8002246:	d009      	beq.n	800225c <HAL_DMA_Start_IT+0x350>
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a62      	ldr	r2, [pc, #392]	; (80023d8 <HAL_DMA_Start_IT+0x4cc>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d004      	beq.n	800225c <HAL_DMA_Start_IT+0x350>
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4a61      	ldr	r2, [pc, #388]	; (80023dc <HAL_DMA_Start_IT+0x4d0>)
 8002258:	4293      	cmp	r3, r2
 800225a:	d101      	bne.n	8002260 <HAL_DMA_Start_IT+0x354>
 800225c:	2301      	movs	r3, #1
 800225e:	e000      	b.n	8002262 <HAL_DMA_Start_IT+0x356>
 8002260:	2300      	movs	r3, #0
 8002262:	2b00      	cmp	r3, #0
 8002264:	d01a      	beq.n	800229c <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002270:	2b00      	cmp	r3, #0
 8002272:	d007      	beq.n	8002284 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002278:	681a      	ldr	r2, [r3, #0]
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800227e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002282:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002288:	2b00      	cmp	r3, #0
 800228a:	d007      	beq.n	800229c <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002290:	681a      	ldr	r2, [r3, #0]
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002296:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800229a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a37      	ldr	r2, [pc, #220]	; (8002380 <HAL_DMA_Start_IT+0x474>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d04a      	beq.n	800233c <HAL_DMA_Start_IT+0x430>
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4a36      	ldr	r2, [pc, #216]	; (8002384 <HAL_DMA_Start_IT+0x478>)
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d045      	beq.n	800233c <HAL_DMA_Start_IT+0x430>
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a34      	ldr	r2, [pc, #208]	; (8002388 <HAL_DMA_Start_IT+0x47c>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d040      	beq.n	800233c <HAL_DMA_Start_IT+0x430>
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4a33      	ldr	r2, [pc, #204]	; (800238c <HAL_DMA_Start_IT+0x480>)
 80022c0:	4293      	cmp	r3, r2
 80022c2:	d03b      	beq.n	800233c <HAL_DMA_Start_IT+0x430>
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a31      	ldr	r2, [pc, #196]	; (8002390 <HAL_DMA_Start_IT+0x484>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d036      	beq.n	800233c <HAL_DMA_Start_IT+0x430>
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4a30      	ldr	r2, [pc, #192]	; (8002394 <HAL_DMA_Start_IT+0x488>)
 80022d4:	4293      	cmp	r3, r2
 80022d6:	d031      	beq.n	800233c <HAL_DMA_Start_IT+0x430>
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a2e      	ldr	r2, [pc, #184]	; (8002398 <HAL_DMA_Start_IT+0x48c>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d02c      	beq.n	800233c <HAL_DMA_Start_IT+0x430>
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4a2d      	ldr	r2, [pc, #180]	; (800239c <HAL_DMA_Start_IT+0x490>)
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d027      	beq.n	800233c <HAL_DMA_Start_IT+0x430>
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a2b      	ldr	r2, [pc, #172]	; (80023a0 <HAL_DMA_Start_IT+0x494>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d022      	beq.n	800233c <HAL_DMA_Start_IT+0x430>
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4a2a      	ldr	r2, [pc, #168]	; (80023a4 <HAL_DMA_Start_IT+0x498>)
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d01d      	beq.n	800233c <HAL_DMA_Start_IT+0x430>
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a28      	ldr	r2, [pc, #160]	; (80023a8 <HAL_DMA_Start_IT+0x49c>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d018      	beq.n	800233c <HAL_DMA_Start_IT+0x430>
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4a27      	ldr	r2, [pc, #156]	; (80023ac <HAL_DMA_Start_IT+0x4a0>)
 8002310:	4293      	cmp	r3, r2
 8002312:	d013      	beq.n	800233c <HAL_DMA_Start_IT+0x430>
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a25      	ldr	r2, [pc, #148]	; (80023b0 <HAL_DMA_Start_IT+0x4a4>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d00e      	beq.n	800233c <HAL_DMA_Start_IT+0x430>
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4a24      	ldr	r2, [pc, #144]	; (80023b4 <HAL_DMA_Start_IT+0x4a8>)
 8002324:	4293      	cmp	r3, r2
 8002326:	d009      	beq.n	800233c <HAL_DMA_Start_IT+0x430>
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a22      	ldr	r2, [pc, #136]	; (80023b8 <HAL_DMA_Start_IT+0x4ac>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d004      	beq.n	800233c <HAL_DMA_Start_IT+0x430>
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4a21      	ldr	r2, [pc, #132]	; (80023bc <HAL_DMA_Start_IT+0x4b0>)
 8002338:	4293      	cmp	r3, r2
 800233a:	d108      	bne.n	800234e <HAL_DMA_Start_IT+0x442>
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	681a      	ldr	r2, [r3, #0]
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f042 0201 	orr.w	r2, r2, #1
 800234a:	601a      	str	r2, [r3, #0]
 800234c:	e012      	b.n	8002374 <HAL_DMA_Start_IT+0x468>
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	681a      	ldr	r2, [r3, #0]
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f042 0201 	orr.w	r2, r2, #1
 800235c:	601a      	str	r2, [r3, #0]
 800235e:	e009      	b.n	8002374 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	2200      	movs	r2, #0
 8002364:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800236e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 8002370:	2301      	movs	r3, #1
 8002372:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8002374:	7dfb      	ldrb	r3, [r7, #23]
}
 8002376:	4618      	mov	r0, r3
 8002378:	3718      	adds	r7, #24
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}
 800237e:	bf00      	nop
 8002380:	40020010 	.word	0x40020010
 8002384:	40020028 	.word	0x40020028
 8002388:	40020040 	.word	0x40020040
 800238c:	40020058 	.word	0x40020058
 8002390:	40020070 	.word	0x40020070
 8002394:	40020088 	.word	0x40020088
 8002398:	400200a0 	.word	0x400200a0
 800239c:	400200b8 	.word	0x400200b8
 80023a0:	40020410 	.word	0x40020410
 80023a4:	40020428 	.word	0x40020428
 80023a8:	40020440 	.word	0x40020440
 80023ac:	40020458 	.word	0x40020458
 80023b0:	40020470 	.word	0x40020470
 80023b4:	40020488 	.word	0x40020488
 80023b8:	400204a0 	.word	0x400204a0
 80023bc:	400204b8 	.word	0x400204b8
 80023c0:	58025408 	.word	0x58025408
 80023c4:	5802541c 	.word	0x5802541c
 80023c8:	58025430 	.word	0x58025430
 80023cc:	58025444 	.word	0x58025444
 80023d0:	58025458 	.word	0x58025458
 80023d4:	5802546c 	.word	0x5802546c
 80023d8:	58025480 	.word	0x58025480
 80023dc:	58025494 	.word	0x58025494

080023e0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b086      	sub	sp, #24
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80023e8:	f7ff f822 	bl	8001430 <HAL_GetTick>
 80023ec:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d101      	bne.n	80023f8 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80023f4:	2301      	movs	r3, #1
 80023f6:	e2dc      	b.n	80029b2 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80023fe:	b2db      	uxtb	r3, r3
 8002400:	2b02      	cmp	r3, #2
 8002402:	d008      	beq.n	8002416 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2280      	movs	r2, #128	; 0x80
 8002408:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2200      	movs	r2, #0
 800240e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8002412:	2301      	movs	r3, #1
 8002414:	e2cd      	b.n	80029b2 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4a76      	ldr	r2, [pc, #472]	; (80025f4 <HAL_DMA_Abort+0x214>)
 800241c:	4293      	cmp	r3, r2
 800241e:	d04a      	beq.n	80024b6 <HAL_DMA_Abort+0xd6>
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a74      	ldr	r2, [pc, #464]	; (80025f8 <HAL_DMA_Abort+0x218>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d045      	beq.n	80024b6 <HAL_DMA_Abort+0xd6>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4a73      	ldr	r2, [pc, #460]	; (80025fc <HAL_DMA_Abort+0x21c>)
 8002430:	4293      	cmp	r3, r2
 8002432:	d040      	beq.n	80024b6 <HAL_DMA_Abort+0xd6>
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a71      	ldr	r2, [pc, #452]	; (8002600 <HAL_DMA_Abort+0x220>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d03b      	beq.n	80024b6 <HAL_DMA_Abort+0xd6>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4a70      	ldr	r2, [pc, #448]	; (8002604 <HAL_DMA_Abort+0x224>)
 8002444:	4293      	cmp	r3, r2
 8002446:	d036      	beq.n	80024b6 <HAL_DMA_Abort+0xd6>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a6e      	ldr	r2, [pc, #440]	; (8002608 <HAL_DMA_Abort+0x228>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d031      	beq.n	80024b6 <HAL_DMA_Abort+0xd6>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4a6d      	ldr	r2, [pc, #436]	; (800260c <HAL_DMA_Abort+0x22c>)
 8002458:	4293      	cmp	r3, r2
 800245a:	d02c      	beq.n	80024b6 <HAL_DMA_Abort+0xd6>
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a6b      	ldr	r2, [pc, #428]	; (8002610 <HAL_DMA_Abort+0x230>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d027      	beq.n	80024b6 <HAL_DMA_Abort+0xd6>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4a6a      	ldr	r2, [pc, #424]	; (8002614 <HAL_DMA_Abort+0x234>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d022      	beq.n	80024b6 <HAL_DMA_Abort+0xd6>
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4a68      	ldr	r2, [pc, #416]	; (8002618 <HAL_DMA_Abort+0x238>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d01d      	beq.n	80024b6 <HAL_DMA_Abort+0xd6>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4a67      	ldr	r2, [pc, #412]	; (800261c <HAL_DMA_Abort+0x23c>)
 8002480:	4293      	cmp	r3, r2
 8002482:	d018      	beq.n	80024b6 <HAL_DMA_Abort+0xd6>
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a65      	ldr	r2, [pc, #404]	; (8002620 <HAL_DMA_Abort+0x240>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d013      	beq.n	80024b6 <HAL_DMA_Abort+0xd6>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4a64      	ldr	r2, [pc, #400]	; (8002624 <HAL_DMA_Abort+0x244>)
 8002494:	4293      	cmp	r3, r2
 8002496:	d00e      	beq.n	80024b6 <HAL_DMA_Abort+0xd6>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a62      	ldr	r2, [pc, #392]	; (8002628 <HAL_DMA_Abort+0x248>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d009      	beq.n	80024b6 <HAL_DMA_Abort+0xd6>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4a61      	ldr	r2, [pc, #388]	; (800262c <HAL_DMA_Abort+0x24c>)
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d004      	beq.n	80024b6 <HAL_DMA_Abort+0xd6>
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4a5f      	ldr	r2, [pc, #380]	; (8002630 <HAL_DMA_Abort+0x250>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d101      	bne.n	80024ba <HAL_DMA_Abort+0xda>
 80024b6:	2301      	movs	r3, #1
 80024b8:	e000      	b.n	80024bc <HAL_DMA_Abort+0xdc>
 80024ba:	2300      	movs	r3, #0
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d013      	beq.n	80024e8 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	681a      	ldr	r2, [r3, #0]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f022 021e 	bic.w	r2, r2, #30
 80024ce:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	695a      	ldr	r2, [r3, #20]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80024de:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	617b      	str	r3, [r7, #20]
 80024e6:	e00a      	b.n	80024fe <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	681a      	ldr	r2, [r3, #0]
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f022 020e 	bic.w	r2, r2, #14
 80024f6:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4a3c      	ldr	r2, [pc, #240]	; (80025f4 <HAL_DMA_Abort+0x214>)
 8002504:	4293      	cmp	r3, r2
 8002506:	d072      	beq.n	80025ee <HAL_DMA_Abort+0x20e>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a3a      	ldr	r2, [pc, #232]	; (80025f8 <HAL_DMA_Abort+0x218>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d06d      	beq.n	80025ee <HAL_DMA_Abort+0x20e>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4a39      	ldr	r2, [pc, #228]	; (80025fc <HAL_DMA_Abort+0x21c>)
 8002518:	4293      	cmp	r3, r2
 800251a:	d068      	beq.n	80025ee <HAL_DMA_Abort+0x20e>
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a37      	ldr	r2, [pc, #220]	; (8002600 <HAL_DMA_Abort+0x220>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d063      	beq.n	80025ee <HAL_DMA_Abort+0x20e>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a36      	ldr	r2, [pc, #216]	; (8002604 <HAL_DMA_Abort+0x224>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d05e      	beq.n	80025ee <HAL_DMA_Abort+0x20e>
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a34      	ldr	r2, [pc, #208]	; (8002608 <HAL_DMA_Abort+0x228>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d059      	beq.n	80025ee <HAL_DMA_Abort+0x20e>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4a33      	ldr	r2, [pc, #204]	; (800260c <HAL_DMA_Abort+0x22c>)
 8002540:	4293      	cmp	r3, r2
 8002542:	d054      	beq.n	80025ee <HAL_DMA_Abort+0x20e>
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a31      	ldr	r2, [pc, #196]	; (8002610 <HAL_DMA_Abort+0x230>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d04f      	beq.n	80025ee <HAL_DMA_Abort+0x20e>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4a30      	ldr	r2, [pc, #192]	; (8002614 <HAL_DMA_Abort+0x234>)
 8002554:	4293      	cmp	r3, r2
 8002556:	d04a      	beq.n	80025ee <HAL_DMA_Abort+0x20e>
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a2e      	ldr	r2, [pc, #184]	; (8002618 <HAL_DMA_Abort+0x238>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d045      	beq.n	80025ee <HAL_DMA_Abort+0x20e>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a2d      	ldr	r2, [pc, #180]	; (800261c <HAL_DMA_Abort+0x23c>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d040      	beq.n	80025ee <HAL_DMA_Abort+0x20e>
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a2b      	ldr	r2, [pc, #172]	; (8002620 <HAL_DMA_Abort+0x240>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d03b      	beq.n	80025ee <HAL_DMA_Abort+0x20e>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4a2a      	ldr	r2, [pc, #168]	; (8002624 <HAL_DMA_Abort+0x244>)
 800257c:	4293      	cmp	r3, r2
 800257e:	d036      	beq.n	80025ee <HAL_DMA_Abort+0x20e>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a28      	ldr	r2, [pc, #160]	; (8002628 <HAL_DMA_Abort+0x248>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d031      	beq.n	80025ee <HAL_DMA_Abort+0x20e>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a27      	ldr	r2, [pc, #156]	; (800262c <HAL_DMA_Abort+0x24c>)
 8002590:	4293      	cmp	r3, r2
 8002592:	d02c      	beq.n	80025ee <HAL_DMA_Abort+0x20e>
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a25      	ldr	r2, [pc, #148]	; (8002630 <HAL_DMA_Abort+0x250>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d027      	beq.n	80025ee <HAL_DMA_Abort+0x20e>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a24      	ldr	r2, [pc, #144]	; (8002634 <HAL_DMA_Abort+0x254>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d022      	beq.n	80025ee <HAL_DMA_Abort+0x20e>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a22      	ldr	r2, [pc, #136]	; (8002638 <HAL_DMA_Abort+0x258>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d01d      	beq.n	80025ee <HAL_DMA_Abort+0x20e>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4a21      	ldr	r2, [pc, #132]	; (800263c <HAL_DMA_Abort+0x25c>)
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d018      	beq.n	80025ee <HAL_DMA_Abort+0x20e>
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a1f      	ldr	r2, [pc, #124]	; (8002640 <HAL_DMA_Abort+0x260>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d013      	beq.n	80025ee <HAL_DMA_Abort+0x20e>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4a1e      	ldr	r2, [pc, #120]	; (8002644 <HAL_DMA_Abort+0x264>)
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d00e      	beq.n	80025ee <HAL_DMA_Abort+0x20e>
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a1c      	ldr	r2, [pc, #112]	; (8002648 <HAL_DMA_Abort+0x268>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d009      	beq.n	80025ee <HAL_DMA_Abort+0x20e>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4a1b      	ldr	r2, [pc, #108]	; (800264c <HAL_DMA_Abort+0x26c>)
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d004      	beq.n	80025ee <HAL_DMA_Abort+0x20e>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a19      	ldr	r2, [pc, #100]	; (8002650 <HAL_DMA_Abort+0x270>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d132      	bne.n	8002654 <HAL_DMA_Abort+0x274>
 80025ee:	2301      	movs	r3, #1
 80025f0:	e031      	b.n	8002656 <HAL_DMA_Abort+0x276>
 80025f2:	bf00      	nop
 80025f4:	40020010 	.word	0x40020010
 80025f8:	40020028 	.word	0x40020028
 80025fc:	40020040 	.word	0x40020040
 8002600:	40020058 	.word	0x40020058
 8002604:	40020070 	.word	0x40020070
 8002608:	40020088 	.word	0x40020088
 800260c:	400200a0 	.word	0x400200a0
 8002610:	400200b8 	.word	0x400200b8
 8002614:	40020410 	.word	0x40020410
 8002618:	40020428 	.word	0x40020428
 800261c:	40020440 	.word	0x40020440
 8002620:	40020458 	.word	0x40020458
 8002624:	40020470 	.word	0x40020470
 8002628:	40020488 	.word	0x40020488
 800262c:	400204a0 	.word	0x400204a0
 8002630:	400204b8 	.word	0x400204b8
 8002634:	58025408 	.word	0x58025408
 8002638:	5802541c 	.word	0x5802541c
 800263c:	58025430 	.word	0x58025430
 8002640:	58025444 	.word	0x58025444
 8002644:	58025458 	.word	0x58025458
 8002648:	5802546c 	.word	0x5802546c
 800264c:	58025480 	.word	0x58025480
 8002650:	58025494 	.word	0x58025494
 8002654:	2300      	movs	r3, #0
 8002656:	2b00      	cmp	r3, #0
 8002658:	d007      	beq.n	800266a <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800265e:	681a      	ldr	r2, [r3, #0]
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002664:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002668:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4a6d      	ldr	r2, [pc, #436]	; (8002824 <HAL_DMA_Abort+0x444>)
 8002670:	4293      	cmp	r3, r2
 8002672:	d04a      	beq.n	800270a <HAL_DMA_Abort+0x32a>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4a6b      	ldr	r2, [pc, #428]	; (8002828 <HAL_DMA_Abort+0x448>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d045      	beq.n	800270a <HAL_DMA_Abort+0x32a>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4a6a      	ldr	r2, [pc, #424]	; (800282c <HAL_DMA_Abort+0x44c>)
 8002684:	4293      	cmp	r3, r2
 8002686:	d040      	beq.n	800270a <HAL_DMA_Abort+0x32a>
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4a68      	ldr	r2, [pc, #416]	; (8002830 <HAL_DMA_Abort+0x450>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d03b      	beq.n	800270a <HAL_DMA_Abort+0x32a>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4a67      	ldr	r2, [pc, #412]	; (8002834 <HAL_DMA_Abort+0x454>)
 8002698:	4293      	cmp	r3, r2
 800269a:	d036      	beq.n	800270a <HAL_DMA_Abort+0x32a>
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a65      	ldr	r2, [pc, #404]	; (8002838 <HAL_DMA_Abort+0x458>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d031      	beq.n	800270a <HAL_DMA_Abort+0x32a>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4a64      	ldr	r2, [pc, #400]	; (800283c <HAL_DMA_Abort+0x45c>)
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d02c      	beq.n	800270a <HAL_DMA_Abort+0x32a>
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a62      	ldr	r2, [pc, #392]	; (8002840 <HAL_DMA_Abort+0x460>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d027      	beq.n	800270a <HAL_DMA_Abort+0x32a>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4a61      	ldr	r2, [pc, #388]	; (8002844 <HAL_DMA_Abort+0x464>)
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d022      	beq.n	800270a <HAL_DMA_Abort+0x32a>
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a5f      	ldr	r2, [pc, #380]	; (8002848 <HAL_DMA_Abort+0x468>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d01d      	beq.n	800270a <HAL_DMA_Abort+0x32a>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4a5e      	ldr	r2, [pc, #376]	; (800284c <HAL_DMA_Abort+0x46c>)
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d018      	beq.n	800270a <HAL_DMA_Abort+0x32a>
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a5c      	ldr	r2, [pc, #368]	; (8002850 <HAL_DMA_Abort+0x470>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d013      	beq.n	800270a <HAL_DMA_Abort+0x32a>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4a5b      	ldr	r2, [pc, #364]	; (8002854 <HAL_DMA_Abort+0x474>)
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d00e      	beq.n	800270a <HAL_DMA_Abort+0x32a>
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4a59      	ldr	r2, [pc, #356]	; (8002858 <HAL_DMA_Abort+0x478>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d009      	beq.n	800270a <HAL_DMA_Abort+0x32a>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4a58      	ldr	r2, [pc, #352]	; (800285c <HAL_DMA_Abort+0x47c>)
 80026fc:	4293      	cmp	r3, r2
 80026fe:	d004      	beq.n	800270a <HAL_DMA_Abort+0x32a>
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a56      	ldr	r2, [pc, #344]	; (8002860 <HAL_DMA_Abort+0x480>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d108      	bne.n	800271c <HAL_DMA_Abort+0x33c>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	681a      	ldr	r2, [r3, #0]
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f022 0201 	bic.w	r2, r2, #1
 8002718:	601a      	str	r2, [r3, #0]
 800271a:	e007      	b.n	800272c <HAL_DMA_Abort+0x34c>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	681a      	ldr	r2, [r3, #0]
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f022 0201 	bic.w	r2, r2, #1
 800272a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800272c:	e013      	b.n	8002756 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800272e:	f7fe fe7f 	bl	8001430 <HAL_GetTick>
 8002732:	4602      	mov	r2, r0
 8002734:	693b      	ldr	r3, [r7, #16]
 8002736:	1ad3      	subs	r3, r2, r3
 8002738:	2b05      	cmp	r3, #5
 800273a:	d90c      	bls.n	8002756 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2220      	movs	r2, #32
 8002740:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2200      	movs	r2, #0
 8002746:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2203      	movs	r2, #3
 800274e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8002752:	2301      	movs	r3, #1
 8002754:	e12d      	b.n	80029b2 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002756:	697b      	ldr	r3, [r7, #20]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f003 0301 	and.w	r3, r3, #1
 800275e:	2b00      	cmp	r3, #0
 8002760:	d1e5      	bne.n	800272e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4a2f      	ldr	r2, [pc, #188]	; (8002824 <HAL_DMA_Abort+0x444>)
 8002768:	4293      	cmp	r3, r2
 800276a:	d04a      	beq.n	8002802 <HAL_DMA_Abort+0x422>
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a2d      	ldr	r2, [pc, #180]	; (8002828 <HAL_DMA_Abort+0x448>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d045      	beq.n	8002802 <HAL_DMA_Abort+0x422>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a2c      	ldr	r2, [pc, #176]	; (800282c <HAL_DMA_Abort+0x44c>)
 800277c:	4293      	cmp	r3, r2
 800277e:	d040      	beq.n	8002802 <HAL_DMA_Abort+0x422>
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a2a      	ldr	r2, [pc, #168]	; (8002830 <HAL_DMA_Abort+0x450>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d03b      	beq.n	8002802 <HAL_DMA_Abort+0x422>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4a29      	ldr	r2, [pc, #164]	; (8002834 <HAL_DMA_Abort+0x454>)
 8002790:	4293      	cmp	r3, r2
 8002792:	d036      	beq.n	8002802 <HAL_DMA_Abort+0x422>
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a27      	ldr	r2, [pc, #156]	; (8002838 <HAL_DMA_Abort+0x458>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d031      	beq.n	8002802 <HAL_DMA_Abort+0x422>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4a26      	ldr	r2, [pc, #152]	; (800283c <HAL_DMA_Abort+0x45c>)
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d02c      	beq.n	8002802 <HAL_DMA_Abort+0x422>
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a24      	ldr	r2, [pc, #144]	; (8002840 <HAL_DMA_Abort+0x460>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d027      	beq.n	8002802 <HAL_DMA_Abort+0x422>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4a23      	ldr	r2, [pc, #140]	; (8002844 <HAL_DMA_Abort+0x464>)
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d022      	beq.n	8002802 <HAL_DMA_Abort+0x422>
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a21      	ldr	r2, [pc, #132]	; (8002848 <HAL_DMA_Abort+0x468>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d01d      	beq.n	8002802 <HAL_DMA_Abort+0x422>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4a20      	ldr	r2, [pc, #128]	; (800284c <HAL_DMA_Abort+0x46c>)
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d018      	beq.n	8002802 <HAL_DMA_Abort+0x422>
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4a1e      	ldr	r2, [pc, #120]	; (8002850 <HAL_DMA_Abort+0x470>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d013      	beq.n	8002802 <HAL_DMA_Abort+0x422>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4a1d      	ldr	r2, [pc, #116]	; (8002854 <HAL_DMA_Abort+0x474>)
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d00e      	beq.n	8002802 <HAL_DMA_Abort+0x422>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a1b      	ldr	r2, [pc, #108]	; (8002858 <HAL_DMA_Abort+0x478>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d009      	beq.n	8002802 <HAL_DMA_Abort+0x422>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4a1a      	ldr	r2, [pc, #104]	; (800285c <HAL_DMA_Abort+0x47c>)
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d004      	beq.n	8002802 <HAL_DMA_Abort+0x422>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a18      	ldr	r2, [pc, #96]	; (8002860 <HAL_DMA_Abort+0x480>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d101      	bne.n	8002806 <HAL_DMA_Abort+0x426>
 8002802:	2301      	movs	r3, #1
 8002804:	e000      	b.n	8002808 <HAL_DMA_Abort+0x428>
 8002806:	2300      	movs	r3, #0
 8002808:	2b00      	cmp	r3, #0
 800280a:	d02b      	beq.n	8002864 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002810:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002816:	f003 031f 	and.w	r3, r3, #31
 800281a:	223f      	movs	r2, #63	; 0x3f
 800281c:	409a      	lsls	r2, r3
 800281e:	68bb      	ldr	r3, [r7, #8]
 8002820:	609a      	str	r2, [r3, #8]
 8002822:	e02a      	b.n	800287a <HAL_DMA_Abort+0x49a>
 8002824:	40020010 	.word	0x40020010
 8002828:	40020028 	.word	0x40020028
 800282c:	40020040 	.word	0x40020040
 8002830:	40020058 	.word	0x40020058
 8002834:	40020070 	.word	0x40020070
 8002838:	40020088 	.word	0x40020088
 800283c:	400200a0 	.word	0x400200a0
 8002840:	400200b8 	.word	0x400200b8
 8002844:	40020410 	.word	0x40020410
 8002848:	40020428 	.word	0x40020428
 800284c:	40020440 	.word	0x40020440
 8002850:	40020458 	.word	0x40020458
 8002854:	40020470 	.word	0x40020470
 8002858:	40020488 	.word	0x40020488
 800285c:	400204a0 	.word	0x400204a0
 8002860:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002868:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800286e:	f003 031f 	and.w	r3, r3, #31
 8002872:	2201      	movs	r2, #1
 8002874:	409a      	lsls	r2, r3
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4a4f      	ldr	r2, [pc, #316]	; (80029bc <HAL_DMA_Abort+0x5dc>)
 8002880:	4293      	cmp	r3, r2
 8002882:	d072      	beq.n	800296a <HAL_DMA_Abort+0x58a>
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a4d      	ldr	r2, [pc, #308]	; (80029c0 <HAL_DMA_Abort+0x5e0>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d06d      	beq.n	800296a <HAL_DMA_Abort+0x58a>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4a4c      	ldr	r2, [pc, #304]	; (80029c4 <HAL_DMA_Abort+0x5e4>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d068      	beq.n	800296a <HAL_DMA_Abort+0x58a>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a4a      	ldr	r2, [pc, #296]	; (80029c8 <HAL_DMA_Abort+0x5e8>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d063      	beq.n	800296a <HAL_DMA_Abort+0x58a>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4a49      	ldr	r2, [pc, #292]	; (80029cc <HAL_DMA_Abort+0x5ec>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d05e      	beq.n	800296a <HAL_DMA_Abort+0x58a>
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a47      	ldr	r2, [pc, #284]	; (80029d0 <HAL_DMA_Abort+0x5f0>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d059      	beq.n	800296a <HAL_DMA_Abort+0x58a>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4a46      	ldr	r2, [pc, #280]	; (80029d4 <HAL_DMA_Abort+0x5f4>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d054      	beq.n	800296a <HAL_DMA_Abort+0x58a>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a44      	ldr	r2, [pc, #272]	; (80029d8 <HAL_DMA_Abort+0x5f8>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d04f      	beq.n	800296a <HAL_DMA_Abort+0x58a>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4a43      	ldr	r2, [pc, #268]	; (80029dc <HAL_DMA_Abort+0x5fc>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d04a      	beq.n	800296a <HAL_DMA_Abort+0x58a>
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a41      	ldr	r2, [pc, #260]	; (80029e0 <HAL_DMA_Abort+0x600>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d045      	beq.n	800296a <HAL_DMA_Abort+0x58a>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4a40      	ldr	r2, [pc, #256]	; (80029e4 <HAL_DMA_Abort+0x604>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d040      	beq.n	800296a <HAL_DMA_Abort+0x58a>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a3e      	ldr	r2, [pc, #248]	; (80029e8 <HAL_DMA_Abort+0x608>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d03b      	beq.n	800296a <HAL_DMA_Abort+0x58a>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a3d      	ldr	r2, [pc, #244]	; (80029ec <HAL_DMA_Abort+0x60c>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d036      	beq.n	800296a <HAL_DMA_Abort+0x58a>
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a3b      	ldr	r2, [pc, #236]	; (80029f0 <HAL_DMA_Abort+0x610>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d031      	beq.n	800296a <HAL_DMA_Abort+0x58a>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a3a      	ldr	r2, [pc, #232]	; (80029f4 <HAL_DMA_Abort+0x614>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d02c      	beq.n	800296a <HAL_DMA_Abort+0x58a>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a38      	ldr	r2, [pc, #224]	; (80029f8 <HAL_DMA_Abort+0x618>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d027      	beq.n	800296a <HAL_DMA_Abort+0x58a>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4a37      	ldr	r2, [pc, #220]	; (80029fc <HAL_DMA_Abort+0x61c>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d022      	beq.n	800296a <HAL_DMA_Abort+0x58a>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a35      	ldr	r2, [pc, #212]	; (8002a00 <HAL_DMA_Abort+0x620>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d01d      	beq.n	800296a <HAL_DMA_Abort+0x58a>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4a34      	ldr	r2, [pc, #208]	; (8002a04 <HAL_DMA_Abort+0x624>)
 8002934:	4293      	cmp	r3, r2
 8002936:	d018      	beq.n	800296a <HAL_DMA_Abort+0x58a>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a32      	ldr	r2, [pc, #200]	; (8002a08 <HAL_DMA_Abort+0x628>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d013      	beq.n	800296a <HAL_DMA_Abort+0x58a>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a31      	ldr	r2, [pc, #196]	; (8002a0c <HAL_DMA_Abort+0x62c>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d00e      	beq.n	800296a <HAL_DMA_Abort+0x58a>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a2f      	ldr	r2, [pc, #188]	; (8002a10 <HAL_DMA_Abort+0x630>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d009      	beq.n	800296a <HAL_DMA_Abort+0x58a>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4a2e      	ldr	r2, [pc, #184]	; (8002a14 <HAL_DMA_Abort+0x634>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d004      	beq.n	800296a <HAL_DMA_Abort+0x58a>
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a2c      	ldr	r2, [pc, #176]	; (8002a18 <HAL_DMA_Abort+0x638>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d101      	bne.n	800296e <HAL_DMA_Abort+0x58e>
 800296a:	2301      	movs	r3, #1
 800296c:	e000      	b.n	8002970 <HAL_DMA_Abort+0x590>
 800296e:	2300      	movs	r3, #0
 8002970:	2b00      	cmp	r3, #0
 8002972:	d015      	beq.n	80029a0 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002978:	687a      	ldr	r2, [r7, #4]
 800297a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800297c:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002982:	2b00      	cmp	r3, #0
 8002984:	d00c      	beq.n	80029a0 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800298a:	681a      	ldr	r2, [r3, #0]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002990:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002994:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800299a:	687a      	ldr	r2, [r7, #4]
 800299c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800299e:	605a      	str	r2, [r3, #4]
      }
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2200      	movs	r2, #0
 80029a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2201      	movs	r2, #1
 80029ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }

  return HAL_OK;
 80029b0:	2300      	movs	r3, #0
}
 80029b2:	4618      	mov	r0, r3
 80029b4:	3718      	adds	r7, #24
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}
 80029ba:	bf00      	nop
 80029bc:	40020010 	.word	0x40020010
 80029c0:	40020028 	.word	0x40020028
 80029c4:	40020040 	.word	0x40020040
 80029c8:	40020058 	.word	0x40020058
 80029cc:	40020070 	.word	0x40020070
 80029d0:	40020088 	.word	0x40020088
 80029d4:	400200a0 	.word	0x400200a0
 80029d8:	400200b8 	.word	0x400200b8
 80029dc:	40020410 	.word	0x40020410
 80029e0:	40020428 	.word	0x40020428
 80029e4:	40020440 	.word	0x40020440
 80029e8:	40020458 	.word	0x40020458
 80029ec:	40020470 	.word	0x40020470
 80029f0:	40020488 	.word	0x40020488
 80029f4:	400204a0 	.word	0x400204a0
 80029f8:	400204b8 	.word	0x400204b8
 80029fc:	58025408 	.word	0x58025408
 8002a00:	5802541c 	.word	0x5802541c
 8002a04:	58025430 	.word	0x58025430
 8002a08:	58025444 	.word	0x58025444
 8002a0c:	58025458 	.word	0x58025458
 8002a10:	5802546c 	.word	0x5802546c
 8002a14:	58025480 	.word	0x58025480
 8002a18:	58025494 	.word	0x58025494

08002a1c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b084      	sub	sp, #16
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d101      	bne.n	8002a2e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e205      	b.n	8002e3a <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a34:	b2db      	uxtb	r3, r3
 8002a36:	2b02      	cmp	r3, #2
 8002a38:	d004      	beq.n	8002a44 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2280      	movs	r2, #128	; 0x80
 8002a3e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002a40:	2301      	movs	r3, #1
 8002a42:	e1fa      	b.n	8002e3a <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a8c      	ldr	r2, [pc, #560]	; (8002c7c <HAL_DMA_Abort_IT+0x260>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d04a      	beq.n	8002ae4 <HAL_DMA_Abort_IT+0xc8>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a8b      	ldr	r2, [pc, #556]	; (8002c80 <HAL_DMA_Abort_IT+0x264>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d045      	beq.n	8002ae4 <HAL_DMA_Abort_IT+0xc8>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a89      	ldr	r2, [pc, #548]	; (8002c84 <HAL_DMA_Abort_IT+0x268>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d040      	beq.n	8002ae4 <HAL_DMA_Abort_IT+0xc8>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a88      	ldr	r2, [pc, #544]	; (8002c88 <HAL_DMA_Abort_IT+0x26c>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d03b      	beq.n	8002ae4 <HAL_DMA_Abort_IT+0xc8>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a86      	ldr	r2, [pc, #536]	; (8002c8c <HAL_DMA_Abort_IT+0x270>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d036      	beq.n	8002ae4 <HAL_DMA_Abort_IT+0xc8>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a85      	ldr	r2, [pc, #532]	; (8002c90 <HAL_DMA_Abort_IT+0x274>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d031      	beq.n	8002ae4 <HAL_DMA_Abort_IT+0xc8>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a83      	ldr	r2, [pc, #524]	; (8002c94 <HAL_DMA_Abort_IT+0x278>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d02c      	beq.n	8002ae4 <HAL_DMA_Abort_IT+0xc8>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4a82      	ldr	r2, [pc, #520]	; (8002c98 <HAL_DMA_Abort_IT+0x27c>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d027      	beq.n	8002ae4 <HAL_DMA_Abort_IT+0xc8>
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a80      	ldr	r2, [pc, #512]	; (8002c9c <HAL_DMA_Abort_IT+0x280>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d022      	beq.n	8002ae4 <HAL_DMA_Abort_IT+0xc8>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4a7f      	ldr	r2, [pc, #508]	; (8002ca0 <HAL_DMA_Abort_IT+0x284>)
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d01d      	beq.n	8002ae4 <HAL_DMA_Abort_IT+0xc8>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a7d      	ldr	r2, [pc, #500]	; (8002ca4 <HAL_DMA_Abort_IT+0x288>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d018      	beq.n	8002ae4 <HAL_DMA_Abort_IT+0xc8>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a7c      	ldr	r2, [pc, #496]	; (8002ca8 <HAL_DMA_Abort_IT+0x28c>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d013      	beq.n	8002ae4 <HAL_DMA_Abort_IT+0xc8>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a7a      	ldr	r2, [pc, #488]	; (8002cac <HAL_DMA_Abort_IT+0x290>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d00e      	beq.n	8002ae4 <HAL_DMA_Abort_IT+0xc8>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4a79      	ldr	r2, [pc, #484]	; (8002cb0 <HAL_DMA_Abort_IT+0x294>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d009      	beq.n	8002ae4 <HAL_DMA_Abort_IT+0xc8>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a77      	ldr	r2, [pc, #476]	; (8002cb4 <HAL_DMA_Abort_IT+0x298>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d004      	beq.n	8002ae4 <HAL_DMA_Abort_IT+0xc8>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4a76      	ldr	r2, [pc, #472]	; (8002cb8 <HAL_DMA_Abort_IT+0x29c>)
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d101      	bne.n	8002ae8 <HAL_DMA_Abort_IT+0xcc>
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	e000      	b.n	8002aea <HAL_DMA_Abort_IT+0xce>
 8002ae8:	2300      	movs	r3, #0
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d065      	beq.n	8002bba <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2204      	movs	r2, #4
 8002af2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4a60      	ldr	r2, [pc, #384]	; (8002c7c <HAL_DMA_Abort_IT+0x260>)
 8002afc:	4293      	cmp	r3, r2
 8002afe:	d04a      	beq.n	8002b96 <HAL_DMA_Abort_IT+0x17a>
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a5e      	ldr	r2, [pc, #376]	; (8002c80 <HAL_DMA_Abort_IT+0x264>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d045      	beq.n	8002b96 <HAL_DMA_Abort_IT+0x17a>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4a5d      	ldr	r2, [pc, #372]	; (8002c84 <HAL_DMA_Abort_IT+0x268>)
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d040      	beq.n	8002b96 <HAL_DMA_Abort_IT+0x17a>
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a5b      	ldr	r2, [pc, #364]	; (8002c88 <HAL_DMA_Abort_IT+0x26c>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d03b      	beq.n	8002b96 <HAL_DMA_Abort_IT+0x17a>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4a5a      	ldr	r2, [pc, #360]	; (8002c8c <HAL_DMA_Abort_IT+0x270>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d036      	beq.n	8002b96 <HAL_DMA_Abort_IT+0x17a>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a58      	ldr	r2, [pc, #352]	; (8002c90 <HAL_DMA_Abort_IT+0x274>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d031      	beq.n	8002b96 <HAL_DMA_Abort_IT+0x17a>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4a57      	ldr	r2, [pc, #348]	; (8002c94 <HAL_DMA_Abort_IT+0x278>)
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d02c      	beq.n	8002b96 <HAL_DMA_Abort_IT+0x17a>
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a55      	ldr	r2, [pc, #340]	; (8002c98 <HAL_DMA_Abort_IT+0x27c>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d027      	beq.n	8002b96 <HAL_DMA_Abort_IT+0x17a>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4a54      	ldr	r2, [pc, #336]	; (8002c9c <HAL_DMA_Abort_IT+0x280>)
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d022      	beq.n	8002b96 <HAL_DMA_Abort_IT+0x17a>
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a52      	ldr	r2, [pc, #328]	; (8002ca0 <HAL_DMA_Abort_IT+0x284>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d01d      	beq.n	8002b96 <HAL_DMA_Abort_IT+0x17a>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4a51      	ldr	r2, [pc, #324]	; (8002ca4 <HAL_DMA_Abort_IT+0x288>)
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d018      	beq.n	8002b96 <HAL_DMA_Abort_IT+0x17a>
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4a4f      	ldr	r2, [pc, #316]	; (8002ca8 <HAL_DMA_Abort_IT+0x28c>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d013      	beq.n	8002b96 <HAL_DMA_Abort_IT+0x17a>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4a4e      	ldr	r2, [pc, #312]	; (8002cac <HAL_DMA_Abort_IT+0x290>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d00e      	beq.n	8002b96 <HAL_DMA_Abort_IT+0x17a>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a4c      	ldr	r2, [pc, #304]	; (8002cb0 <HAL_DMA_Abort_IT+0x294>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d009      	beq.n	8002b96 <HAL_DMA_Abort_IT+0x17a>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4a4b      	ldr	r2, [pc, #300]	; (8002cb4 <HAL_DMA_Abort_IT+0x298>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d004      	beq.n	8002b96 <HAL_DMA_Abort_IT+0x17a>
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a49      	ldr	r2, [pc, #292]	; (8002cb8 <HAL_DMA_Abort_IT+0x29c>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d108      	bne.n	8002ba8 <HAL_DMA_Abort_IT+0x18c>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	681a      	ldr	r2, [r3, #0]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f022 0201 	bic.w	r2, r2, #1
 8002ba4:	601a      	str	r2, [r3, #0]
 8002ba6:	e147      	b.n	8002e38 <HAL_DMA_Abort_IT+0x41c>
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	681a      	ldr	r2, [r3, #0]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f022 0201 	bic.w	r2, r2, #1
 8002bb6:	601a      	str	r2, [r3, #0]
 8002bb8:	e13e      	b.n	8002e38 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	681a      	ldr	r2, [r3, #0]
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f022 020e 	bic.w	r2, r2, #14
 8002bc8:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4a2b      	ldr	r2, [pc, #172]	; (8002c7c <HAL_DMA_Abort_IT+0x260>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d04a      	beq.n	8002c6a <HAL_DMA_Abort_IT+0x24e>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a29      	ldr	r2, [pc, #164]	; (8002c80 <HAL_DMA_Abort_IT+0x264>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d045      	beq.n	8002c6a <HAL_DMA_Abort_IT+0x24e>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4a28      	ldr	r2, [pc, #160]	; (8002c84 <HAL_DMA_Abort_IT+0x268>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d040      	beq.n	8002c6a <HAL_DMA_Abort_IT+0x24e>
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4a26      	ldr	r2, [pc, #152]	; (8002c88 <HAL_DMA_Abort_IT+0x26c>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d03b      	beq.n	8002c6a <HAL_DMA_Abort_IT+0x24e>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4a25      	ldr	r2, [pc, #148]	; (8002c8c <HAL_DMA_Abort_IT+0x270>)
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d036      	beq.n	8002c6a <HAL_DMA_Abort_IT+0x24e>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a23      	ldr	r2, [pc, #140]	; (8002c90 <HAL_DMA_Abort_IT+0x274>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d031      	beq.n	8002c6a <HAL_DMA_Abort_IT+0x24e>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4a22      	ldr	r2, [pc, #136]	; (8002c94 <HAL_DMA_Abort_IT+0x278>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d02c      	beq.n	8002c6a <HAL_DMA_Abort_IT+0x24e>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a20      	ldr	r2, [pc, #128]	; (8002c98 <HAL_DMA_Abort_IT+0x27c>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d027      	beq.n	8002c6a <HAL_DMA_Abort_IT+0x24e>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4a1f      	ldr	r2, [pc, #124]	; (8002c9c <HAL_DMA_Abort_IT+0x280>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d022      	beq.n	8002c6a <HAL_DMA_Abort_IT+0x24e>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a1d      	ldr	r2, [pc, #116]	; (8002ca0 <HAL_DMA_Abort_IT+0x284>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d01d      	beq.n	8002c6a <HAL_DMA_Abort_IT+0x24e>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a1c      	ldr	r2, [pc, #112]	; (8002ca4 <HAL_DMA_Abort_IT+0x288>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d018      	beq.n	8002c6a <HAL_DMA_Abort_IT+0x24e>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a1a      	ldr	r2, [pc, #104]	; (8002ca8 <HAL_DMA_Abort_IT+0x28c>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d013      	beq.n	8002c6a <HAL_DMA_Abort_IT+0x24e>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4a19      	ldr	r2, [pc, #100]	; (8002cac <HAL_DMA_Abort_IT+0x290>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d00e      	beq.n	8002c6a <HAL_DMA_Abort_IT+0x24e>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a17      	ldr	r2, [pc, #92]	; (8002cb0 <HAL_DMA_Abort_IT+0x294>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d009      	beq.n	8002c6a <HAL_DMA_Abort_IT+0x24e>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4a16      	ldr	r2, [pc, #88]	; (8002cb4 <HAL_DMA_Abort_IT+0x298>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d004      	beq.n	8002c6a <HAL_DMA_Abort_IT+0x24e>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a14      	ldr	r2, [pc, #80]	; (8002cb8 <HAL_DMA_Abort_IT+0x29c>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d128      	bne.n	8002cbc <HAL_DMA_Abort_IT+0x2a0>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	681a      	ldr	r2, [r3, #0]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f022 0201 	bic.w	r2, r2, #1
 8002c78:	601a      	str	r2, [r3, #0]
 8002c7a:	e027      	b.n	8002ccc <HAL_DMA_Abort_IT+0x2b0>
 8002c7c:	40020010 	.word	0x40020010
 8002c80:	40020028 	.word	0x40020028
 8002c84:	40020040 	.word	0x40020040
 8002c88:	40020058 	.word	0x40020058
 8002c8c:	40020070 	.word	0x40020070
 8002c90:	40020088 	.word	0x40020088
 8002c94:	400200a0 	.word	0x400200a0
 8002c98:	400200b8 	.word	0x400200b8
 8002c9c:	40020410 	.word	0x40020410
 8002ca0:	40020428 	.word	0x40020428
 8002ca4:	40020440 	.word	0x40020440
 8002ca8:	40020458 	.word	0x40020458
 8002cac:	40020470 	.word	0x40020470
 8002cb0:	40020488 	.word	0x40020488
 8002cb4:	400204a0 	.word	0x400204a0
 8002cb8:	400204b8 	.word	0x400204b8
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	681a      	ldr	r2, [r3, #0]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f022 0201 	bic.w	r2, r2, #1
 8002cca:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a5c      	ldr	r2, [pc, #368]	; (8002e44 <HAL_DMA_Abort_IT+0x428>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d072      	beq.n	8002dbc <HAL_DMA_Abort_IT+0x3a0>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a5b      	ldr	r2, [pc, #364]	; (8002e48 <HAL_DMA_Abort_IT+0x42c>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d06d      	beq.n	8002dbc <HAL_DMA_Abort_IT+0x3a0>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a59      	ldr	r2, [pc, #356]	; (8002e4c <HAL_DMA_Abort_IT+0x430>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d068      	beq.n	8002dbc <HAL_DMA_Abort_IT+0x3a0>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a58      	ldr	r2, [pc, #352]	; (8002e50 <HAL_DMA_Abort_IT+0x434>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d063      	beq.n	8002dbc <HAL_DMA_Abort_IT+0x3a0>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a56      	ldr	r2, [pc, #344]	; (8002e54 <HAL_DMA_Abort_IT+0x438>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d05e      	beq.n	8002dbc <HAL_DMA_Abort_IT+0x3a0>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a55      	ldr	r2, [pc, #340]	; (8002e58 <HAL_DMA_Abort_IT+0x43c>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d059      	beq.n	8002dbc <HAL_DMA_Abort_IT+0x3a0>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a53      	ldr	r2, [pc, #332]	; (8002e5c <HAL_DMA_Abort_IT+0x440>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d054      	beq.n	8002dbc <HAL_DMA_Abort_IT+0x3a0>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a52      	ldr	r2, [pc, #328]	; (8002e60 <HAL_DMA_Abort_IT+0x444>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d04f      	beq.n	8002dbc <HAL_DMA_Abort_IT+0x3a0>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a50      	ldr	r2, [pc, #320]	; (8002e64 <HAL_DMA_Abort_IT+0x448>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d04a      	beq.n	8002dbc <HAL_DMA_Abort_IT+0x3a0>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4a4f      	ldr	r2, [pc, #316]	; (8002e68 <HAL_DMA_Abort_IT+0x44c>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d045      	beq.n	8002dbc <HAL_DMA_Abort_IT+0x3a0>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a4d      	ldr	r2, [pc, #308]	; (8002e6c <HAL_DMA_Abort_IT+0x450>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d040      	beq.n	8002dbc <HAL_DMA_Abort_IT+0x3a0>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a4c      	ldr	r2, [pc, #304]	; (8002e70 <HAL_DMA_Abort_IT+0x454>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d03b      	beq.n	8002dbc <HAL_DMA_Abort_IT+0x3a0>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a4a      	ldr	r2, [pc, #296]	; (8002e74 <HAL_DMA_Abort_IT+0x458>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d036      	beq.n	8002dbc <HAL_DMA_Abort_IT+0x3a0>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a49      	ldr	r2, [pc, #292]	; (8002e78 <HAL_DMA_Abort_IT+0x45c>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d031      	beq.n	8002dbc <HAL_DMA_Abort_IT+0x3a0>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a47      	ldr	r2, [pc, #284]	; (8002e7c <HAL_DMA_Abort_IT+0x460>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d02c      	beq.n	8002dbc <HAL_DMA_Abort_IT+0x3a0>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a46      	ldr	r2, [pc, #280]	; (8002e80 <HAL_DMA_Abort_IT+0x464>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d027      	beq.n	8002dbc <HAL_DMA_Abort_IT+0x3a0>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a44      	ldr	r2, [pc, #272]	; (8002e84 <HAL_DMA_Abort_IT+0x468>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d022      	beq.n	8002dbc <HAL_DMA_Abort_IT+0x3a0>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4a43      	ldr	r2, [pc, #268]	; (8002e88 <HAL_DMA_Abort_IT+0x46c>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d01d      	beq.n	8002dbc <HAL_DMA_Abort_IT+0x3a0>
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a41      	ldr	r2, [pc, #260]	; (8002e8c <HAL_DMA_Abort_IT+0x470>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d018      	beq.n	8002dbc <HAL_DMA_Abort_IT+0x3a0>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4a40      	ldr	r2, [pc, #256]	; (8002e90 <HAL_DMA_Abort_IT+0x474>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d013      	beq.n	8002dbc <HAL_DMA_Abort_IT+0x3a0>
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a3e      	ldr	r2, [pc, #248]	; (8002e94 <HAL_DMA_Abort_IT+0x478>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d00e      	beq.n	8002dbc <HAL_DMA_Abort_IT+0x3a0>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4a3d      	ldr	r2, [pc, #244]	; (8002e98 <HAL_DMA_Abort_IT+0x47c>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d009      	beq.n	8002dbc <HAL_DMA_Abort_IT+0x3a0>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a3b      	ldr	r2, [pc, #236]	; (8002e9c <HAL_DMA_Abort_IT+0x480>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d004      	beq.n	8002dbc <HAL_DMA_Abort_IT+0x3a0>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4a3a      	ldr	r2, [pc, #232]	; (8002ea0 <HAL_DMA_Abort_IT+0x484>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d101      	bne.n	8002dc0 <HAL_DMA_Abort_IT+0x3a4>
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	e000      	b.n	8002dc2 <HAL_DMA_Abort_IT+0x3a6>
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d028      	beq.n	8002e18 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002dca:	681a      	ldr	r2, [r3, #0]
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002dd0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002dd4:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dda:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002de0:	f003 031f 	and.w	r3, r3, #31
 8002de4:	2201      	movs	r2, #1
 8002de6:	409a      	lsls	r2, r3
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002df0:	687a      	ldr	r2, [r7, #4]
 8002df2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002df4:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d00c      	beq.n	8002e18 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e02:	681a      	ldr	r2, [r3, #0]
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e08:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002e0c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e12:	687a      	ldr	r2, [r7, #4]
 8002e14:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002e16:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2201      	movs	r2, #1
 8002e24:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d003      	beq.n	8002e38 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e34:	6878      	ldr	r0, [r7, #4]
 8002e36:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8002e38:	2300      	movs	r3, #0
}
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	3710      	adds	r7, #16
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd80      	pop	{r7, pc}
 8002e42:	bf00      	nop
 8002e44:	40020010 	.word	0x40020010
 8002e48:	40020028 	.word	0x40020028
 8002e4c:	40020040 	.word	0x40020040
 8002e50:	40020058 	.word	0x40020058
 8002e54:	40020070 	.word	0x40020070
 8002e58:	40020088 	.word	0x40020088
 8002e5c:	400200a0 	.word	0x400200a0
 8002e60:	400200b8 	.word	0x400200b8
 8002e64:	40020410 	.word	0x40020410
 8002e68:	40020428 	.word	0x40020428
 8002e6c:	40020440 	.word	0x40020440
 8002e70:	40020458 	.word	0x40020458
 8002e74:	40020470 	.word	0x40020470
 8002e78:	40020488 	.word	0x40020488
 8002e7c:	400204a0 	.word	0x400204a0
 8002e80:	400204b8 	.word	0x400204b8
 8002e84:	58025408 	.word	0x58025408
 8002e88:	5802541c 	.word	0x5802541c
 8002e8c:	58025430 	.word	0x58025430
 8002e90:	58025444 	.word	0x58025444
 8002e94:	58025458 	.word	0x58025458
 8002e98:	5802546c 	.word	0x5802546c
 8002e9c:	58025480 	.word	0x58025480
 8002ea0:	58025494 	.word	0x58025494

08002ea4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b08a      	sub	sp, #40	; 0x28
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8002eac:	2300      	movs	r3, #0
 8002eae:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002eb0:	4b67      	ldr	r3, [pc, #412]	; (8003050 <HAL_DMA_IRQHandler+0x1ac>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a67      	ldr	r2, [pc, #412]	; (8003054 <HAL_DMA_IRQHandler+0x1b0>)
 8002eb6:	fba2 2303 	umull	r2, r3, r2, r3
 8002eba:	0a9b      	lsrs	r3, r3, #10
 8002ebc:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ec2:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ec8:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8002eca:	6a3b      	ldr	r3, [r7, #32]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8002ed0:	69fb      	ldr	r3, [r7, #28]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a5f      	ldr	r2, [pc, #380]	; (8003058 <HAL_DMA_IRQHandler+0x1b4>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d04a      	beq.n	8002f76 <HAL_DMA_IRQHandler+0xd2>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a5d      	ldr	r2, [pc, #372]	; (800305c <HAL_DMA_IRQHandler+0x1b8>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d045      	beq.n	8002f76 <HAL_DMA_IRQHandler+0xd2>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4a5c      	ldr	r2, [pc, #368]	; (8003060 <HAL_DMA_IRQHandler+0x1bc>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d040      	beq.n	8002f76 <HAL_DMA_IRQHandler+0xd2>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a5a      	ldr	r2, [pc, #360]	; (8003064 <HAL_DMA_IRQHandler+0x1c0>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d03b      	beq.n	8002f76 <HAL_DMA_IRQHandler+0xd2>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a59      	ldr	r2, [pc, #356]	; (8003068 <HAL_DMA_IRQHandler+0x1c4>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d036      	beq.n	8002f76 <HAL_DMA_IRQHandler+0xd2>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a57      	ldr	r2, [pc, #348]	; (800306c <HAL_DMA_IRQHandler+0x1c8>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d031      	beq.n	8002f76 <HAL_DMA_IRQHandler+0xd2>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a56      	ldr	r2, [pc, #344]	; (8003070 <HAL_DMA_IRQHandler+0x1cc>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d02c      	beq.n	8002f76 <HAL_DMA_IRQHandler+0xd2>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a54      	ldr	r2, [pc, #336]	; (8003074 <HAL_DMA_IRQHandler+0x1d0>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d027      	beq.n	8002f76 <HAL_DMA_IRQHandler+0xd2>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4a53      	ldr	r2, [pc, #332]	; (8003078 <HAL_DMA_IRQHandler+0x1d4>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d022      	beq.n	8002f76 <HAL_DMA_IRQHandler+0xd2>
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a51      	ldr	r2, [pc, #324]	; (800307c <HAL_DMA_IRQHandler+0x1d8>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d01d      	beq.n	8002f76 <HAL_DMA_IRQHandler+0xd2>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4a50      	ldr	r2, [pc, #320]	; (8003080 <HAL_DMA_IRQHandler+0x1dc>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d018      	beq.n	8002f76 <HAL_DMA_IRQHandler+0xd2>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a4e      	ldr	r2, [pc, #312]	; (8003084 <HAL_DMA_IRQHandler+0x1e0>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d013      	beq.n	8002f76 <HAL_DMA_IRQHandler+0xd2>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4a4d      	ldr	r2, [pc, #308]	; (8003088 <HAL_DMA_IRQHandler+0x1e4>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d00e      	beq.n	8002f76 <HAL_DMA_IRQHandler+0xd2>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a4b      	ldr	r2, [pc, #300]	; (800308c <HAL_DMA_IRQHandler+0x1e8>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d009      	beq.n	8002f76 <HAL_DMA_IRQHandler+0xd2>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4a4a      	ldr	r2, [pc, #296]	; (8003090 <HAL_DMA_IRQHandler+0x1ec>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d004      	beq.n	8002f76 <HAL_DMA_IRQHandler+0xd2>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a48      	ldr	r2, [pc, #288]	; (8003094 <HAL_DMA_IRQHandler+0x1f0>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d101      	bne.n	8002f7a <HAL_DMA_IRQHandler+0xd6>
 8002f76:	2301      	movs	r3, #1
 8002f78:	e000      	b.n	8002f7c <HAL_DMA_IRQHandler+0xd8>
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	f000 842b 	beq.w	80037d8 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f86:	f003 031f 	and.w	r3, r3, #31
 8002f8a:	2208      	movs	r2, #8
 8002f8c:	409a      	lsls	r2, r3
 8002f8e:	69bb      	ldr	r3, [r7, #24]
 8002f90:	4013      	ands	r3, r2
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	f000 80a2 	beq.w	80030dc <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a2e      	ldr	r2, [pc, #184]	; (8003058 <HAL_DMA_IRQHandler+0x1b4>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d04a      	beq.n	8003038 <HAL_DMA_IRQHandler+0x194>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4a2d      	ldr	r2, [pc, #180]	; (800305c <HAL_DMA_IRQHandler+0x1b8>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d045      	beq.n	8003038 <HAL_DMA_IRQHandler+0x194>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a2b      	ldr	r2, [pc, #172]	; (8003060 <HAL_DMA_IRQHandler+0x1bc>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d040      	beq.n	8003038 <HAL_DMA_IRQHandler+0x194>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a2a      	ldr	r2, [pc, #168]	; (8003064 <HAL_DMA_IRQHandler+0x1c0>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d03b      	beq.n	8003038 <HAL_DMA_IRQHandler+0x194>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a28      	ldr	r2, [pc, #160]	; (8003068 <HAL_DMA_IRQHandler+0x1c4>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d036      	beq.n	8003038 <HAL_DMA_IRQHandler+0x194>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4a27      	ldr	r2, [pc, #156]	; (800306c <HAL_DMA_IRQHandler+0x1c8>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d031      	beq.n	8003038 <HAL_DMA_IRQHandler+0x194>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a25      	ldr	r2, [pc, #148]	; (8003070 <HAL_DMA_IRQHandler+0x1cc>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d02c      	beq.n	8003038 <HAL_DMA_IRQHandler+0x194>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4a24      	ldr	r2, [pc, #144]	; (8003074 <HAL_DMA_IRQHandler+0x1d0>)
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d027      	beq.n	8003038 <HAL_DMA_IRQHandler+0x194>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a22      	ldr	r2, [pc, #136]	; (8003078 <HAL_DMA_IRQHandler+0x1d4>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d022      	beq.n	8003038 <HAL_DMA_IRQHandler+0x194>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a21      	ldr	r2, [pc, #132]	; (800307c <HAL_DMA_IRQHandler+0x1d8>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d01d      	beq.n	8003038 <HAL_DMA_IRQHandler+0x194>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4a1f      	ldr	r2, [pc, #124]	; (8003080 <HAL_DMA_IRQHandler+0x1dc>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d018      	beq.n	8003038 <HAL_DMA_IRQHandler+0x194>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4a1e      	ldr	r2, [pc, #120]	; (8003084 <HAL_DMA_IRQHandler+0x1e0>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d013      	beq.n	8003038 <HAL_DMA_IRQHandler+0x194>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a1c      	ldr	r2, [pc, #112]	; (8003088 <HAL_DMA_IRQHandler+0x1e4>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d00e      	beq.n	8003038 <HAL_DMA_IRQHandler+0x194>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4a1b      	ldr	r2, [pc, #108]	; (800308c <HAL_DMA_IRQHandler+0x1e8>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d009      	beq.n	8003038 <HAL_DMA_IRQHandler+0x194>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a19      	ldr	r2, [pc, #100]	; (8003090 <HAL_DMA_IRQHandler+0x1ec>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d004      	beq.n	8003038 <HAL_DMA_IRQHandler+0x194>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a18      	ldr	r2, [pc, #96]	; (8003094 <HAL_DMA_IRQHandler+0x1f0>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d12f      	bne.n	8003098 <HAL_DMA_IRQHandler+0x1f4>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f003 0304 	and.w	r3, r3, #4
 8003042:	2b00      	cmp	r3, #0
 8003044:	bf14      	ite	ne
 8003046:	2301      	movne	r3, #1
 8003048:	2300      	moveq	r3, #0
 800304a:	b2db      	uxtb	r3, r3
 800304c:	e02e      	b.n	80030ac <HAL_DMA_IRQHandler+0x208>
 800304e:	bf00      	nop
 8003050:	24000000 	.word	0x24000000
 8003054:	1b4e81b5 	.word	0x1b4e81b5
 8003058:	40020010 	.word	0x40020010
 800305c:	40020028 	.word	0x40020028
 8003060:	40020040 	.word	0x40020040
 8003064:	40020058 	.word	0x40020058
 8003068:	40020070 	.word	0x40020070
 800306c:	40020088 	.word	0x40020088
 8003070:	400200a0 	.word	0x400200a0
 8003074:	400200b8 	.word	0x400200b8
 8003078:	40020410 	.word	0x40020410
 800307c:	40020428 	.word	0x40020428
 8003080:	40020440 	.word	0x40020440
 8003084:	40020458 	.word	0x40020458
 8003088:	40020470 	.word	0x40020470
 800308c:	40020488 	.word	0x40020488
 8003090:	400204a0 	.word	0x400204a0
 8003094:	400204b8 	.word	0x400204b8
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f003 0308 	and.w	r3, r3, #8
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	bf14      	ite	ne
 80030a6:	2301      	movne	r3, #1
 80030a8:	2300      	moveq	r3, #0
 80030aa:	b2db      	uxtb	r3, r3
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d015      	beq.n	80030dc <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	681a      	ldr	r2, [r3, #0]
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f022 0204 	bic.w	r2, r2, #4
 80030be:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030c4:	f003 031f 	and.w	r3, r3, #31
 80030c8:	2208      	movs	r2, #8
 80030ca:	409a      	lsls	r2, r3
 80030cc:	6a3b      	ldr	r3, [r7, #32]
 80030ce:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030d4:	f043 0201 	orr.w	r2, r3, #1
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030e0:	f003 031f 	and.w	r3, r3, #31
 80030e4:	69ba      	ldr	r2, [r7, #24]
 80030e6:	fa22 f303 	lsr.w	r3, r2, r3
 80030ea:	f003 0301 	and.w	r3, r3, #1
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d06e      	beq.n	80031d0 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4a69      	ldr	r2, [pc, #420]	; (800329c <HAL_DMA_IRQHandler+0x3f8>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d04a      	beq.n	8003192 <HAL_DMA_IRQHandler+0x2ee>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a67      	ldr	r2, [pc, #412]	; (80032a0 <HAL_DMA_IRQHandler+0x3fc>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d045      	beq.n	8003192 <HAL_DMA_IRQHandler+0x2ee>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a66      	ldr	r2, [pc, #408]	; (80032a4 <HAL_DMA_IRQHandler+0x400>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d040      	beq.n	8003192 <HAL_DMA_IRQHandler+0x2ee>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4a64      	ldr	r2, [pc, #400]	; (80032a8 <HAL_DMA_IRQHandler+0x404>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d03b      	beq.n	8003192 <HAL_DMA_IRQHandler+0x2ee>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4a63      	ldr	r2, [pc, #396]	; (80032ac <HAL_DMA_IRQHandler+0x408>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d036      	beq.n	8003192 <HAL_DMA_IRQHandler+0x2ee>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a61      	ldr	r2, [pc, #388]	; (80032b0 <HAL_DMA_IRQHandler+0x40c>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d031      	beq.n	8003192 <HAL_DMA_IRQHandler+0x2ee>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4a60      	ldr	r2, [pc, #384]	; (80032b4 <HAL_DMA_IRQHandler+0x410>)
 8003134:	4293      	cmp	r3, r2
 8003136:	d02c      	beq.n	8003192 <HAL_DMA_IRQHandler+0x2ee>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a5e      	ldr	r2, [pc, #376]	; (80032b8 <HAL_DMA_IRQHandler+0x414>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d027      	beq.n	8003192 <HAL_DMA_IRQHandler+0x2ee>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4a5d      	ldr	r2, [pc, #372]	; (80032bc <HAL_DMA_IRQHandler+0x418>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d022      	beq.n	8003192 <HAL_DMA_IRQHandler+0x2ee>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a5b      	ldr	r2, [pc, #364]	; (80032c0 <HAL_DMA_IRQHandler+0x41c>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d01d      	beq.n	8003192 <HAL_DMA_IRQHandler+0x2ee>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4a5a      	ldr	r2, [pc, #360]	; (80032c4 <HAL_DMA_IRQHandler+0x420>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d018      	beq.n	8003192 <HAL_DMA_IRQHandler+0x2ee>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a58      	ldr	r2, [pc, #352]	; (80032c8 <HAL_DMA_IRQHandler+0x424>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d013      	beq.n	8003192 <HAL_DMA_IRQHandler+0x2ee>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4a57      	ldr	r2, [pc, #348]	; (80032cc <HAL_DMA_IRQHandler+0x428>)
 8003170:	4293      	cmp	r3, r2
 8003172:	d00e      	beq.n	8003192 <HAL_DMA_IRQHandler+0x2ee>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4a55      	ldr	r2, [pc, #340]	; (80032d0 <HAL_DMA_IRQHandler+0x42c>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d009      	beq.n	8003192 <HAL_DMA_IRQHandler+0x2ee>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4a54      	ldr	r2, [pc, #336]	; (80032d4 <HAL_DMA_IRQHandler+0x430>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d004      	beq.n	8003192 <HAL_DMA_IRQHandler+0x2ee>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a52      	ldr	r2, [pc, #328]	; (80032d8 <HAL_DMA_IRQHandler+0x434>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d10a      	bne.n	80031a8 <HAL_DMA_IRQHandler+0x304>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	695b      	ldr	r3, [r3, #20]
 8003198:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800319c:	2b00      	cmp	r3, #0
 800319e:	bf14      	ite	ne
 80031a0:	2301      	movne	r3, #1
 80031a2:	2300      	moveq	r3, #0
 80031a4:	b2db      	uxtb	r3, r3
 80031a6:	e003      	b.n	80031b0 <HAL_DMA_IRQHandler+0x30c>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	2300      	movs	r3, #0
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d00d      	beq.n	80031d0 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031b8:	f003 031f 	and.w	r3, r3, #31
 80031bc:	2201      	movs	r2, #1
 80031be:	409a      	lsls	r2, r3
 80031c0:	6a3b      	ldr	r3, [r7, #32]
 80031c2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031c8:	f043 0202 	orr.w	r2, r3, #2
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031d4:	f003 031f 	and.w	r3, r3, #31
 80031d8:	2204      	movs	r2, #4
 80031da:	409a      	lsls	r2, r3
 80031dc:	69bb      	ldr	r3, [r7, #24]
 80031de:	4013      	ands	r3, r2
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	f000 808f 	beq.w	8003304 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4a2c      	ldr	r2, [pc, #176]	; (800329c <HAL_DMA_IRQHandler+0x3f8>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d04a      	beq.n	8003286 <HAL_DMA_IRQHandler+0x3e2>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a2a      	ldr	r2, [pc, #168]	; (80032a0 <HAL_DMA_IRQHandler+0x3fc>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d045      	beq.n	8003286 <HAL_DMA_IRQHandler+0x3e2>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4a29      	ldr	r2, [pc, #164]	; (80032a4 <HAL_DMA_IRQHandler+0x400>)
 8003200:	4293      	cmp	r3, r2
 8003202:	d040      	beq.n	8003286 <HAL_DMA_IRQHandler+0x3e2>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a27      	ldr	r2, [pc, #156]	; (80032a8 <HAL_DMA_IRQHandler+0x404>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d03b      	beq.n	8003286 <HAL_DMA_IRQHandler+0x3e2>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4a26      	ldr	r2, [pc, #152]	; (80032ac <HAL_DMA_IRQHandler+0x408>)
 8003214:	4293      	cmp	r3, r2
 8003216:	d036      	beq.n	8003286 <HAL_DMA_IRQHandler+0x3e2>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a24      	ldr	r2, [pc, #144]	; (80032b0 <HAL_DMA_IRQHandler+0x40c>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d031      	beq.n	8003286 <HAL_DMA_IRQHandler+0x3e2>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4a23      	ldr	r2, [pc, #140]	; (80032b4 <HAL_DMA_IRQHandler+0x410>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d02c      	beq.n	8003286 <HAL_DMA_IRQHandler+0x3e2>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4a21      	ldr	r2, [pc, #132]	; (80032b8 <HAL_DMA_IRQHandler+0x414>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d027      	beq.n	8003286 <HAL_DMA_IRQHandler+0x3e2>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4a20      	ldr	r2, [pc, #128]	; (80032bc <HAL_DMA_IRQHandler+0x418>)
 800323c:	4293      	cmp	r3, r2
 800323e:	d022      	beq.n	8003286 <HAL_DMA_IRQHandler+0x3e2>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a1e      	ldr	r2, [pc, #120]	; (80032c0 <HAL_DMA_IRQHandler+0x41c>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d01d      	beq.n	8003286 <HAL_DMA_IRQHandler+0x3e2>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4a1d      	ldr	r2, [pc, #116]	; (80032c4 <HAL_DMA_IRQHandler+0x420>)
 8003250:	4293      	cmp	r3, r2
 8003252:	d018      	beq.n	8003286 <HAL_DMA_IRQHandler+0x3e2>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a1b      	ldr	r2, [pc, #108]	; (80032c8 <HAL_DMA_IRQHandler+0x424>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d013      	beq.n	8003286 <HAL_DMA_IRQHandler+0x3e2>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4a1a      	ldr	r2, [pc, #104]	; (80032cc <HAL_DMA_IRQHandler+0x428>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d00e      	beq.n	8003286 <HAL_DMA_IRQHandler+0x3e2>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a18      	ldr	r2, [pc, #96]	; (80032d0 <HAL_DMA_IRQHandler+0x42c>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d009      	beq.n	8003286 <HAL_DMA_IRQHandler+0x3e2>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4a17      	ldr	r2, [pc, #92]	; (80032d4 <HAL_DMA_IRQHandler+0x430>)
 8003278:	4293      	cmp	r3, r2
 800327a:	d004      	beq.n	8003286 <HAL_DMA_IRQHandler+0x3e2>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4a15      	ldr	r2, [pc, #84]	; (80032d8 <HAL_DMA_IRQHandler+0x434>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d12a      	bne.n	80032dc <HAL_DMA_IRQHandler+0x438>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f003 0302 	and.w	r3, r3, #2
 8003290:	2b00      	cmp	r3, #0
 8003292:	bf14      	ite	ne
 8003294:	2301      	movne	r3, #1
 8003296:	2300      	moveq	r3, #0
 8003298:	b2db      	uxtb	r3, r3
 800329a:	e023      	b.n	80032e4 <HAL_DMA_IRQHandler+0x440>
 800329c:	40020010 	.word	0x40020010
 80032a0:	40020028 	.word	0x40020028
 80032a4:	40020040 	.word	0x40020040
 80032a8:	40020058 	.word	0x40020058
 80032ac:	40020070 	.word	0x40020070
 80032b0:	40020088 	.word	0x40020088
 80032b4:	400200a0 	.word	0x400200a0
 80032b8:	400200b8 	.word	0x400200b8
 80032bc:	40020410 	.word	0x40020410
 80032c0:	40020428 	.word	0x40020428
 80032c4:	40020440 	.word	0x40020440
 80032c8:	40020458 	.word	0x40020458
 80032cc:	40020470 	.word	0x40020470
 80032d0:	40020488 	.word	0x40020488
 80032d4:	400204a0 	.word	0x400204a0
 80032d8:	400204b8 	.word	0x400204b8
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	2300      	movs	r3, #0
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d00d      	beq.n	8003304 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032ec:	f003 031f 	and.w	r3, r3, #31
 80032f0:	2204      	movs	r2, #4
 80032f2:	409a      	lsls	r2, r3
 80032f4:	6a3b      	ldr	r3, [r7, #32]
 80032f6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032fc:	f043 0204 	orr.w	r2, r3, #4
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003308:	f003 031f 	and.w	r3, r3, #31
 800330c:	2210      	movs	r2, #16
 800330e:	409a      	lsls	r2, r3
 8003310:	69bb      	ldr	r3, [r7, #24]
 8003312:	4013      	ands	r3, r2
 8003314:	2b00      	cmp	r3, #0
 8003316:	f000 80a6 	beq.w	8003466 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a85      	ldr	r2, [pc, #532]	; (8003534 <HAL_DMA_IRQHandler+0x690>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d04a      	beq.n	80033ba <HAL_DMA_IRQHandler+0x516>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a83      	ldr	r2, [pc, #524]	; (8003538 <HAL_DMA_IRQHandler+0x694>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d045      	beq.n	80033ba <HAL_DMA_IRQHandler+0x516>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4a82      	ldr	r2, [pc, #520]	; (800353c <HAL_DMA_IRQHandler+0x698>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d040      	beq.n	80033ba <HAL_DMA_IRQHandler+0x516>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a80      	ldr	r2, [pc, #512]	; (8003540 <HAL_DMA_IRQHandler+0x69c>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d03b      	beq.n	80033ba <HAL_DMA_IRQHandler+0x516>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a7f      	ldr	r2, [pc, #508]	; (8003544 <HAL_DMA_IRQHandler+0x6a0>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d036      	beq.n	80033ba <HAL_DMA_IRQHandler+0x516>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a7d      	ldr	r2, [pc, #500]	; (8003548 <HAL_DMA_IRQHandler+0x6a4>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d031      	beq.n	80033ba <HAL_DMA_IRQHandler+0x516>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a7c      	ldr	r2, [pc, #496]	; (800354c <HAL_DMA_IRQHandler+0x6a8>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d02c      	beq.n	80033ba <HAL_DMA_IRQHandler+0x516>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a7a      	ldr	r2, [pc, #488]	; (8003550 <HAL_DMA_IRQHandler+0x6ac>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d027      	beq.n	80033ba <HAL_DMA_IRQHandler+0x516>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a79      	ldr	r2, [pc, #484]	; (8003554 <HAL_DMA_IRQHandler+0x6b0>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d022      	beq.n	80033ba <HAL_DMA_IRQHandler+0x516>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a77      	ldr	r2, [pc, #476]	; (8003558 <HAL_DMA_IRQHandler+0x6b4>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d01d      	beq.n	80033ba <HAL_DMA_IRQHandler+0x516>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4a76      	ldr	r2, [pc, #472]	; (800355c <HAL_DMA_IRQHandler+0x6b8>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d018      	beq.n	80033ba <HAL_DMA_IRQHandler+0x516>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a74      	ldr	r2, [pc, #464]	; (8003560 <HAL_DMA_IRQHandler+0x6bc>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d013      	beq.n	80033ba <HAL_DMA_IRQHandler+0x516>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4a73      	ldr	r2, [pc, #460]	; (8003564 <HAL_DMA_IRQHandler+0x6c0>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d00e      	beq.n	80033ba <HAL_DMA_IRQHandler+0x516>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a71      	ldr	r2, [pc, #452]	; (8003568 <HAL_DMA_IRQHandler+0x6c4>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d009      	beq.n	80033ba <HAL_DMA_IRQHandler+0x516>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4a70      	ldr	r2, [pc, #448]	; (800356c <HAL_DMA_IRQHandler+0x6c8>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d004      	beq.n	80033ba <HAL_DMA_IRQHandler+0x516>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a6e      	ldr	r2, [pc, #440]	; (8003570 <HAL_DMA_IRQHandler+0x6cc>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d10a      	bne.n	80033d0 <HAL_DMA_IRQHandler+0x52c>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f003 0308 	and.w	r3, r3, #8
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	bf14      	ite	ne
 80033c8:	2301      	movne	r3, #1
 80033ca:	2300      	moveq	r3, #0
 80033cc:	b2db      	uxtb	r3, r3
 80033ce:	e009      	b.n	80033e4 <HAL_DMA_IRQHandler+0x540>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f003 0304 	and.w	r3, r3, #4
 80033da:	2b00      	cmp	r3, #0
 80033dc:	bf14      	ite	ne
 80033de:	2301      	movne	r3, #1
 80033e0:	2300      	moveq	r3, #0
 80033e2:	b2db      	uxtb	r3, r3
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d03e      	beq.n	8003466 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033ec:	f003 031f 	and.w	r3, r3, #31
 80033f0:	2210      	movs	r2, #16
 80033f2:	409a      	lsls	r2, r3
 80033f4:	6a3b      	ldr	r3, [r7, #32]
 80033f6:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003402:	2b00      	cmp	r3, #0
 8003404:	d018      	beq.n	8003438 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003410:	2b00      	cmp	r3, #0
 8003412:	d108      	bne.n	8003426 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003418:	2b00      	cmp	r3, #0
 800341a:	d024      	beq.n	8003466 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003420:	6878      	ldr	r0, [r7, #4]
 8003422:	4798      	blx	r3
 8003424:	e01f      	b.n	8003466 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800342a:	2b00      	cmp	r3, #0
 800342c:	d01b      	beq.n	8003466 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003432:	6878      	ldr	r0, [r7, #4]
 8003434:	4798      	blx	r3
 8003436:	e016      	b.n	8003466 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003442:	2b00      	cmp	r3, #0
 8003444:	d107      	bne.n	8003456 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	681a      	ldr	r2, [r3, #0]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f022 0208 	bic.w	r2, r2, #8
 8003454:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800345a:	2b00      	cmp	r3, #0
 800345c:	d003      	beq.n	8003466 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003462:	6878      	ldr	r0, [r7, #4]
 8003464:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800346a:	f003 031f 	and.w	r3, r3, #31
 800346e:	2220      	movs	r2, #32
 8003470:	409a      	lsls	r2, r3
 8003472:	69bb      	ldr	r3, [r7, #24]
 8003474:	4013      	ands	r3, r2
 8003476:	2b00      	cmp	r3, #0
 8003478:	f000 8110 	beq.w	800369c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a2c      	ldr	r2, [pc, #176]	; (8003534 <HAL_DMA_IRQHandler+0x690>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d04a      	beq.n	800351c <HAL_DMA_IRQHandler+0x678>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4a2b      	ldr	r2, [pc, #172]	; (8003538 <HAL_DMA_IRQHandler+0x694>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d045      	beq.n	800351c <HAL_DMA_IRQHandler+0x678>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a29      	ldr	r2, [pc, #164]	; (800353c <HAL_DMA_IRQHandler+0x698>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d040      	beq.n	800351c <HAL_DMA_IRQHandler+0x678>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4a28      	ldr	r2, [pc, #160]	; (8003540 <HAL_DMA_IRQHandler+0x69c>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d03b      	beq.n	800351c <HAL_DMA_IRQHandler+0x678>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a26      	ldr	r2, [pc, #152]	; (8003544 <HAL_DMA_IRQHandler+0x6a0>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d036      	beq.n	800351c <HAL_DMA_IRQHandler+0x678>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4a25      	ldr	r2, [pc, #148]	; (8003548 <HAL_DMA_IRQHandler+0x6a4>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d031      	beq.n	800351c <HAL_DMA_IRQHandler+0x678>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a23      	ldr	r2, [pc, #140]	; (800354c <HAL_DMA_IRQHandler+0x6a8>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d02c      	beq.n	800351c <HAL_DMA_IRQHandler+0x678>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a22      	ldr	r2, [pc, #136]	; (8003550 <HAL_DMA_IRQHandler+0x6ac>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d027      	beq.n	800351c <HAL_DMA_IRQHandler+0x678>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a20      	ldr	r2, [pc, #128]	; (8003554 <HAL_DMA_IRQHandler+0x6b0>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d022      	beq.n	800351c <HAL_DMA_IRQHandler+0x678>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4a1f      	ldr	r2, [pc, #124]	; (8003558 <HAL_DMA_IRQHandler+0x6b4>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d01d      	beq.n	800351c <HAL_DMA_IRQHandler+0x678>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a1d      	ldr	r2, [pc, #116]	; (800355c <HAL_DMA_IRQHandler+0x6b8>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d018      	beq.n	800351c <HAL_DMA_IRQHandler+0x678>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4a1c      	ldr	r2, [pc, #112]	; (8003560 <HAL_DMA_IRQHandler+0x6bc>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d013      	beq.n	800351c <HAL_DMA_IRQHandler+0x678>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4a1a      	ldr	r2, [pc, #104]	; (8003564 <HAL_DMA_IRQHandler+0x6c0>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d00e      	beq.n	800351c <HAL_DMA_IRQHandler+0x678>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a19      	ldr	r2, [pc, #100]	; (8003568 <HAL_DMA_IRQHandler+0x6c4>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d009      	beq.n	800351c <HAL_DMA_IRQHandler+0x678>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4a17      	ldr	r2, [pc, #92]	; (800356c <HAL_DMA_IRQHandler+0x6c8>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d004      	beq.n	800351c <HAL_DMA_IRQHandler+0x678>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4a16      	ldr	r2, [pc, #88]	; (8003570 <HAL_DMA_IRQHandler+0x6cc>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d12b      	bne.n	8003574 <HAL_DMA_IRQHandler+0x6d0>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f003 0310 	and.w	r3, r3, #16
 8003526:	2b00      	cmp	r3, #0
 8003528:	bf14      	ite	ne
 800352a:	2301      	movne	r3, #1
 800352c:	2300      	moveq	r3, #0
 800352e:	b2db      	uxtb	r3, r3
 8003530:	e02a      	b.n	8003588 <HAL_DMA_IRQHandler+0x6e4>
 8003532:	bf00      	nop
 8003534:	40020010 	.word	0x40020010
 8003538:	40020028 	.word	0x40020028
 800353c:	40020040 	.word	0x40020040
 8003540:	40020058 	.word	0x40020058
 8003544:	40020070 	.word	0x40020070
 8003548:	40020088 	.word	0x40020088
 800354c:	400200a0 	.word	0x400200a0
 8003550:	400200b8 	.word	0x400200b8
 8003554:	40020410 	.word	0x40020410
 8003558:	40020428 	.word	0x40020428
 800355c:	40020440 	.word	0x40020440
 8003560:	40020458 	.word	0x40020458
 8003564:	40020470 	.word	0x40020470
 8003568:	40020488 	.word	0x40020488
 800356c:	400204a0 	.word	0x400204a0
 8003570:	400204b8 	.word	0x400204b8
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f003 0302 	and.w	r3, r3, #2
 800357e:	2b00      	cmp	r3, #0
 8003580:	bf14      	ite	ne
 8003582:	2301      	movne	r3, #1
 8003584:	2300      	moveq	r3, #0
 8003586:	b2db      	uxtb	r3, r3
 8003588:	2b00      	cmp	r3, #0
 800358a:	f000 8087 	beq.w	800369c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003592:	f003 031f 	and.w	r3, r3, #31
 8003596:	2220      	movs	r2, #32
 8003598:	409a      	lsls	r2, r3
 800359a:	6a3b      	ldr	r3, [r7, #32]
 800359c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80035a4:	b2db      	uxtb	r3, r3
 80035a6:	2b04      	cmp	r3, #4
 80035a8:	d139      	bne.n	800361e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	681a      	ldr	r2, [r3, #0]
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f022 0216 	bic.w	r2, r2, #22
 80035b8:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	695a      	ldr	r2, [r3, #20]
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80035c8:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d103      	bne.n	80035da <HAL_DMA_IRQHandler+0x736>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d007      	beq.n	80035ea <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	681a      	ldr	r2, [r3, #0]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f022 0208 	bic.w	r2, r2, #8
 80035e8:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035ee:	f003 031f 	and.w	r3, r3, #31
 80035f2:	223f      	movs	r2, #63	; 0x3f
 80035f4:	409a      	lsls	r2, r3
 80035f6:	6a3b      	ldr	r3, [r7, #32]
 80035f8:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2200      	movs	r2, #0
 80035fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2201      	movs	r2, #1
 8003606:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800360e:	2b00      	cmp	r3, #0
 8003610:	f000 834a 	beq.w	8003ca8 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003618:	6878      	ldr	r0, [r7, #4]
 800361a:	4798      	blx	r3
          }
          return;
 800361c:	e344      	b.n	8003ca8 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003628:	2b00      	cmp	r3, #0
 800362a:	d018      	beq.n	800365e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003636:	2b00      	cmp	r3, #0
 8003638:	d108      	bne.n	800364c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800363e:	2b00      	cmp	r3, #0
 8003640:	d02c      	beq.n	800369c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003646:	6878      	ldr	r0, [r7, #4]
 8003648:	4798      	blx	r3
 800364a:	e027      	b.n	800369c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003650:	2b00      	cmp	r3, #0
 8003652:	d023      	beq.n	800369c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003658:	6878      	ldr	r0, [r7, #4]
 800365a:	4798      	blx	r3
 800365c:	e01e      	b.n	800369c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003668:	2b00      	cmp	r3, #0
 800366a:	d10f      	bne.n	800368c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	681a      	ldr	r2, [r3, #0]
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f022 0210 	bic.w	r2, r2, #16
 800367a:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2200      	movs	r2, #0
 8003680:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2201      	movs	r2, #1
 8003688:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003690:	2b00      	cmp	r3, #0
 8003692:	d003      	beq.n	800369c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003698:	6878      	ldr	r0, [r7, #4]
 800369a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	f000 8306 	beq.w	8003cb2 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036aa:	f003 0301 	and.w	r3, r3, #1
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	f000 8088 	beq.w	80037c4 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2204      	movs	r2, #4
 80036b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a7a      	ldr	r2, [pc, #488]	; (80038ac <HAL_DMA_IRQHandler+0xa08>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d04a      	beq.n	800375c <HAL_DMA_IRQHandler+0x8b8>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4a79      	ldr	r2, [pc, #484]	; (80038b0 <HAL_DMA_IRQHandler+0xa0c>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d045      	beq.n	800375c <HAL_DMA_IRQHandler+0x8b8>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a77      	ldr	r2, [pc, #476]	; (80038b4 <HAL_DMA_IRQHandler+0xa10>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d040      	beq.n	800375c <HAL_DMA_IRQHandler+0x8b8>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4a76      	ldr	r2, [pc, #472]	; (80038b8 <HAL_DMA_IRQHandler+0xa14>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d03b      	beq.n	800375c <HAL_DMA_IRQHandler+0x8b8>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4a74      	ldr	r2, [pc, #464]	; (80038bc <HAL_DMA_IRQHandler+0xa18>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d036      	beq.n	800375c <HAL_DMA_IRQHandler+0x8b8>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4a73      	ldr	r2, [pc, #460]	; (80038c0 <HAL_DMA_IRQHandler+0xa1c>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d031      	beq.n	800375c <HAL_DMA_IRQHandler+0x8b8>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a71      	ldr	r2, [pc, #452]	; (80038c4 <HAL_DMA_IRQHandler+0xa20>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d02c      	beq.n	800375c <HAL_DMA_IRQHandler+0x8b8>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4a70      	ldr	r2, [pc, #448]	; (80038c8 <HAL_DMA_IRQHandler+0xa24>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d027      	beq.n	800375c <HAL_DMA_IRQHandler+0x8b8>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a6e      	ldr	r2, [pc, #440]	; (80038cc <HAL_DMA_IRQHandler+0xa28>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d022      	beq.n	800375c <HAL_DMA_IRQHandler+0x8b8>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4a6d      	ldr	r2, [pc, #436]	; (80038d0 <HAL_DMA_IRQHandler+0xa2c>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d01d      	beq.n	800375c <HAL_DMA_IRQHandler+0x8b8>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a6b      	ldr	r2, [pc, #428]	; (80038d4 <HAL_DMA_IRQHandler+0xa30>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d018      	beq.n	800375c <HAL_DMA_IRQHandler+0x8b8>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4a6a      	ldr	r2, [pc, #424]	; (80038d8 <HAL_DMA_IRQHandler+0xa34>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d013      	beq.n	800375c <HAL_DMA_IRQHandler+0x8b8>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4a68      	ldr	r2, [pc, #416]	; (80038dc <HAL_DMA_IRQHandler+0xa38>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d00e      	beq.n	800375c <HAL_DMA_IRQHandler+0x8b8>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4a67      	ldr	r2, [pc, #412]	; (80038e0 <HAL_DMA_IRQHandler+0xa3c>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d009      	beq.n	800375c <HAL_DMA_IRQHandler+0x8b8>
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a65      	ldr	r2, [pc, #404]	; (80038e4 <HAL_DMA_IRQHandler+0xa40>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d004      	beq.n	800375c <HAL_DMA_IRQHandler+0x8b8>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4a64      	ldr	r2, [pc, #400]	; (80038e8 <HAL_DMA_IRQHandler+0xa44>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d108      	bne.n	800376e <HAL_DMA_IRQHandler+0x8ca>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	681a      	ldr	r2, [r3, #0]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f022 0201 	bic.w	r2, r2, #1
 800376a:	601a      	str	r2, [r3, #0]
 800376c:	e007      	b.n	800377e <HAL_DMA_IRQHandler+0x8da>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	681a      	ldr	r2, [r3, #0]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f022 0201 	bic.w	r2, r2, #1
 800377c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	3301      	adds	r3, #1
 8003782:	60fb      	str	r3, [r7, #12]
 8003784:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003786:	429a      	cmp	r2, r3
 8003788:	d307      	bcc.n	800379a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f003 0301 	and.w	r3, r3, #1
 8003794:	2b00      	cmp	r3, #0
 8003796:	d1f2      	bne.n	800377e <HAL_DMA_IRQHandler+0x8da>
 8003798:	e000      	b.n	800379c <HAL_DMA_IRQHandler+0x8f8>
            break;
 800379a:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2200      	movs	r2, #0
 80037a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f003 0301 	and.w	r3, r3, #1
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d004      	beq.n	80037bc <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2203      	movs	r2, #3
 80037b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80037ba:	e003      	b.n	80037c4 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2201      	movs	r2, #1
 80037c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	f000 8272 	beq.w	8003cb2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037d2:	6878      	ldr	r0, [r7, #4]
 80037d4:	4798      	blx	r3
 80037d6:	e26c      	b.n	8003cb2 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4a43      	ldr	r2, [pc, #268]	; (80038ec <HAL_DMA_IRQHandler+0xa48>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d022      	beq.n	8003828 <HAL_DMA_IRQHandler+0x984>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4a42      	ldr	r2, [pc, #264]	; (80038f0 <HAL_DMA_IRQHandler+0xa4c>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d01d      	beq.n	8003828 <HAL_DMA_IRQHandler+0x984>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a40      	ldr	r2, [pc, #256]	; (80038f4 <HAL_DMA_IRQHandler+0xa50>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d018      	beq.n	8003828 <HAL_DMA_IRQHandler+0x984>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4a3f      	ldr	r2, [pc, #252]	; (80038f8 <HAL_DMA_IRQHandler+0xa54>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d013      	beq.n	8003828 <HAL_DMA_IRQHandler+0x984>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a3d      	ldr	r2, [pc, #244]	; (80038fc <HAL_DMA_IRQHandler+0xa58>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d00e      	beq.n	8003828 <HAL_DMA_IRQHandler+0x984>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4a3c      	ldr	r2, [pc, #240]	; (8003900 <HAL_DMA_IRQHandler+0xa5c>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d009      	beq.n	8003828 <HAL_DMA_IRQHandler+0x984>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a3a      	ldr	r2, [pc, #232]	; (8003904 <HAL_DMA_IRQHandler+0xa60>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d004      	beq.n	8003828 <HAL_DMA_IRQHandler+0x984>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a39      	ldr	r2, [pc, #228]	; (8003908 <HAL_DMA_IRQHandler+0xa64>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d101      	bne.n	800382c <HAL_DMA_IRQHandler+0x988>
 8003828:	2301      	movs	r3, #1
 800382a:	e000      	b.n	800382e <HAL_DMA_IRQHandler+0x98a>
 800382c:	2300      	movs	r3, #0
 800382e:	2b00      	cmp	r3, #0
 8003830:	f000 823f 	beq.w	8003cb2 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003840:	f003 031f 	and.w	r3, r3, #31
 8003844:	2204      	movs	r2, #4
 8003846:	409a      	lsls	r2, r3
 8003848:	697b      	ldr	r3, [r7, #20]
 800384a:	4013      	ands	r3, r2
 800384c:	2b00      	cmp	r3, #0
 800384e:	f000 80cd 	beq.w	80039ec <HAL_DMA_IRQHandler+0xb48>
 8003852:	693b      	ldr	r3, [r7, #16]
 8003854:	f003 0304 	and.w	r3, r3, #4
 8003858:	2b00      	cmp	r3, #0
 800385a:	f000 80c7 	beq.w	80039ec <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003862:	f003 031f 	and.w	r3, r3, #31
 8003866:	2204      	movs	r2, #4
 8003868:	409a      	lsls	r2, r3
 800386a:	69fb      	ldr	r3, [r7, #28]
 800386c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800386e:	693b      	ldr	r3, [r7, #16]
 8003870:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003874:	2b00      	cmp	r3, #0
 8003876:	d049      	beq.n	800390c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003878:	693b      	ldr	r3, [r7, #16]
 800387a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800387e:	2b00      	cmp	r3, #0
 8003880:	d109      	bne.n	8003896 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003886:	2b00      	cmp	r3, #0
 8003888:	f000 8210 	beq.w	8003cac <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003890:	6878      	ldr	r0, [r7, #4]
 8003892:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003894:	e20a      	b.n	8003cac <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800389a:	2b00      	cmp	r3, #0
 800389c:	f000 8206 	beq.w	8003cac <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a4:	6878      	ldr	r0, [r7, #4]
 80038a6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80038a8:	e200      	b.n	8003cac <HAL_DMA_IRQHandler+0xe08>
 80038aa:	bf00      	nop
 80038ac:	40020010 	.word	0x40020010
 80038b0:	40020028 	.word	0x40020028
 80038b4:	40020040 	.word	0x40020040
 80038b8:	40020058 	.word	0x40020058
 80038bc:	40020070 	.word	0x40020070
 80038c0:	40020088 	.word	0x40020088
 80038c4:	400200a0 	.word	0x400200a0
 80038c8:	400200b8 	.word	0x400200b8
 80038cc:	40020410 	.word	0x40020410
 80038d0:	40020428 	.word	0x40020428
 80038d4:	40020440 	.word	0x40020440
 80038d8:	40020458 	.word	0x40020458
 80038dc:	40020470 	.word	0x40020470
 80038e0:	40020488 	.word	0x40020488
 80038e4:	400204a0 	.word	0x400204a0
 80038e8:	400204b8 	.word	0x400204b8
 80038ec:	58025408 	.word	0x58025408
 80038f0:	5802541c 	.word	0x5802541c
 80038f4:	58025430 	.word	0x58025430
 80038f8:	58025444 	.word	0x58025444
 80038fc:	58025458 	.word	0x58025458
 8003900:	5802546c 	.word	0x5802546c
 8003904:	58025480 	.word	0x58025480
 8003908:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800390c:	693b      	ldr	r3, [r7, #16]
 800390e:	f003 0320 	and.w	r3, r3, #32
 8003912:	2b00      	cmp	r3, #0
 8003914:	d160      	bne.n	80039d8 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4a8c      	ldr	r2, [pc, #560]	; (8003b4c <HAL_DMA_IRQHandler+0xca8>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d04a      	beq.n	80039b6 <HAL_DMA_IRQHandler+0xb12>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a8a      	ldr	r2, [pc, #552]	; (8003b50 <HAL_DMA_IRQHandler+0xcac>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d045      	beq.n	80039b6 <HAL_DMA_IRQHandler+0xb12>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4a89      	ldr	r2, [pc, #548]	; (8003b54 <HAL_DMA_IRQHandler+0xcb0>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d040      	beq.n	80039b6 <HAL_DMA_IRQHandler+0xb12>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4a87      	ldr	r2, [pc, #540]	; (8003b58 <HAL_DMA_IRQHandler+0xcb4>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d03b      	beq.n	80039b6 <HAL_DMA_IRQHandler+0xb12>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4a86      	ldr	r2, [pc, #536]	; (8003b5c <HAL_DMA_IRQHandler+0xcb8>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d036      	beq.n	80039b6 <HAL_DMA_IRQHandler+0xb12>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a84      	ldr	r2, [pc, #528]	; (8003b60 <HAL_DMA_IRQHandler+0xcbc>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d031      	beq.n	80039b6 <HAL_DMA_IRQHandler+0xb12>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4a83      	ldr	r2, [pc, #524]	; (8003b64 <HAL_DMA_IRQHandler+0xcc0>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d02c      	beq.n	80039b6 <HAL_DMA_IRQHandler+0xb12>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a81      	ldr	r2, [pc, #516]	; (8003b68 <HAL_DMA_IRQHandler+0xcc4>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d027      	beq.n	80039b6 <HAL_DMA_IRQHandler+0xb12>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4a80      	ldr	r2, [pc, #512]	; (8003b6c <HAL_DMA_IRQHandler+0xcc8>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d022      	beq.n	80039b6 <HAL_DMA_IRQHandler+0xb12>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a7e      	ldr	r2, [pc, #504]	; (8003b70 <HAL_DMA_IRQHandler+0xccc>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d01d      	beq.n	80039b6 <HAL_DMA_IRQHandler+0xb12>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4a7d      	ldr	r2, [pc, #500]	; (8003b74 <HAL_DMA_IRQHandler+0xcd0>)
 8003980:	4293      	cmp	r3, r2
 8003982:	d018      	beq.n	80039b6 <HAL_DMA_IRQHandler+0xb12>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4a7b      	ldr	r2, [pc, #492]	; (8003b78 <HAL_DMA_IRQHandler+0xcd4>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d013      	beq.n	80039b6 <HAL_DMA_IRQHandler+0xb12>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	4a7a      	ldr	r2, [pc, #488]	; (8003b7c <HAL_DMA_IRQHandler+0xcd8>)
 8003994:	4293      	cmp	r3, r2
 8003996:	d00e      	beq.n	80039b6 <HAL_DMA_IRQHandler+0xb12>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a78      	ldr	r2, [pc, #480]	; (8003b80 <HAL_DMA_IRQHandler+0xcdc>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d009      	beq.n	80039b6 <HAL_DMA_IRQHandler+0xb12>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4a77      	ldr	r2, [pc, #476]	; (8003b84 <HAL_DMA_IRQHandler+0xce0>)
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d004      	beq.n	80039b6 <HAL_DMA_IRQHandler+0xb12>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a75      	ldr	r2, [pc, #468]	; (8003b88 <HAL_DMA_IRQHandler+0xce4>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d108      	bne.n	80039c8 <HAL_DMA_IRQHandler+0xb24>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	681a      	ldr	r2, [r3, #0]
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f022 0208 	bic.w	r2, r2, #8
 80039c4:	601a      	str	r2, [r3, #0]
 80039c6:	e007      	b.n	80039d8 <HAL_DMA_IRQHandler+0xb34>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	681a      	ldr	r2, [r3, #0]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f022 0204 	bic.w	r2, r2, #4
 80039d6:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039dc:	2b00      	cmp	r3, #0
 80039de:	f000 8165 	beq.w	8003cac <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039e6:	6878      	ldr	r0, [r7, #4]
 80039e8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80039ea:	e15f      	b.n	8003cac <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039f0:	f003 031f 	and.w	r3, r3, #31
 80039f4:	2202      	movs	r2, #2
 80039f6:	409a      	lsls	r2, r3
 80039f8:	697b      	ldr	r3, [r7, #20]
 80039fa:	4013      	ands	r3, r2
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	f000 80c5 	beq.w	8003b8c <HAL_DMA_IRQHandler+0xce8>
 8003a02:	693b      	ldr	r3, [r7, #16]
 8003a04:	f003 0302 	and.w	r3, r3, #2
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	f000 80bf 	beq.w	8003b8c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a12:	f003 031f 	and.w	r3, r3, #31
 8003a16:	2202      	movs	r2, #2
 8003a18:	409a      	lsls	r2, r3
 8003a1a:	69fb      	ldr	r3, [r7, #28]
 8003a1c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003a1e:	693b      	ldr	r3, [r7, #16]
 8003a20:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d018      	beq.n	8003a5a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003a28:	693b      	ldr	r3, [r7, #16]
 8003a2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d109      	bne.n	8003a46 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	f000 813a 	beq.w	8003cb0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a40:	6878      	ldr	r0, [r7, #4]
 8003a42:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003a44:	e134      	b.n	8003cb0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	f000 8130 	beq.w	8003cb0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a54:	6878      	ldr	r0, [r7, #4]
 8003a56:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003a58:	e12a      	b.n	8003cb0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003a5a:	693b      	ldr	r3, [r7, #16]
 8003a5c:	f003 0320 	and.w	r3, r3, #32
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d168      	bne.n	8003b36 <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a38      	ldr	r2, [pc, #224]	; (8003b4c <HAL_DMA_IRQHandler+0xca8>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d04a      	beq.n	8003b04 <HAL_DMA_IRQHandler+0xc60>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4a37      	ldr	r2, [pc, #220]	; (8003b50 <HAL_DMA_IRQHandler+0xcac>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d045      	beq.n	8003b04 <HAL_DMA_IRQHandler+0xc60>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a35      	ldr	r2, [pc, #212]	; (8003b54 <HAL_DMA_IRQHandler+0xcb0>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d040      	beq.n	8003b04 <HAL_DMA_IRQHandler+0xc60>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a34      	ldr	r2, [pc, #208]	; (8003b58 <HAL_DMA_IRQHandler+0xcb4>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d03b      	beq.n	8003b04 <HAL_DMA_IRQHandler+0xc60>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a32      	ldr	r2, [pc, #200]	; (8003b5c <HAL_DMA_IRQHandler+0xcb8>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d036      	beq.n	8003b04 <HAL_DMA_IRQHandler+0xc60>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a31      	ldr	r2, [pc, #196]	; (8003b60 <HAL_DMA_IRQHandler+0xcbc>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d031      	beq.n	8003b04 <HAL_DMA_IRQHandler+0xc60>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a2f      	ldr	r2, [pc, #188]	; (8003b64 <HAL_DMA_IRQHandler+0xcc0>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d02c      	beq.n	8003b04 <HAL_DMA_IRQHandler+0xc60>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a2e      	ldr	r2, [pc, #184]	; (8003b68 <HAL_DMA_IRQHandler+0xcc4>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d027      	beq.n	8003b04 <HAL_DMA_IRQHandler+0xc60>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a2c      	ldr	r2, [pc, #176]	; (8003b6c <HAL_DMA_IRQHandler+0xcc8>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d022      	beq.n	8003b04 <HAL_DMA_IRQHandler+0xc60>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a2b      	ldr	r2, [pc, #172]	; (8003b70 <HAL_DMA_IRQHandler+0xccc>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d01d      	beq.n	8003b04 <HAL_DMA_IRQHandler+0xc60>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a29      	ldr	r2, [pc, #164]	; (8003b74 <HAL_DMA_IRQHandler+0xcd0>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d018      	beq.n	8003b04 <HAL_DMA_IRQHandler+0xc60>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4a28      	ldr	r2, [pc, #160]	; (8003b78 <HAL_DMA_IRQHandler+0xcd4>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d013      	beq.n	8003b04 <HAL_DMA_IRQHandler+0xc60>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a26      	ldr	r2, [pc, #152]	; (8003b7c <HAL_DMA_IRQHandler+0xcd8>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d00e      	beq.n	8003b04 <HAL_DMA_IRQHandler+0xc60>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4a25      	ldr	r2, [pc, #148]	; (8003b80 <HAL_DMA_IRQHandler+0xcdc>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d009      	beq.n	8003b04 <HAL_DMA_IRQHandler+0xc60>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a23      	ldr	r2, [pc, #140]	; (8003b84 <HAL_DMA_IRQHandler+0xce0>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d004      	beq.n	8003b04 <HAL_DMA_IRQHandler+0xc60>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4a22      	ldr	r2, [pc, #136]	; (8003b88 <HAL_DMA_IRQHandler+0xce4>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d108      	bne.n	8003b16 <HAL_DMA_IRQHandler+0xc72>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	681a      	ldr	r2, [r3, #0]
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f022 0214 	bic.w	r2, r2, #20
 8003b12:	601a      	str	r2, [r3, #0]
 8003b14:	e007      	b.n	8003b26 <HAL_DMA_IRQHandler+0xc82>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	681a      	ldr	r2, [r3, #0]
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f022 020a 	bic.w	r2, r2, #10
 8003b24:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2200      	movs	r2, #0
 8003b2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2201      	movs	r2, #1
 8003b32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	f000 80b8 	beq.w	8003cb0 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b44:	6878      	ldr	r0, [r7, #4]
 8003b46:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003b48:	e0b2      	b.n	8003cb0 <HAL_DMA_IRQHandler+0xe0c>
 8003b4a:	bf00      	nop
 8003b4c:	40020010 	.word	0x40020010
 8003b50:	40020028 	.word	0x40020028
 8003b54:	40020040 	.word	0x40020040
 8003b58:	40020058 	.word	0x40020058
 8003b5c:	40020070 	.word	0x40020070
 8003b60:	40020088 	.word	0x40020088
 8003b64:	400200a0 	.word	0x400200a0
 8003b68:	400200b8 	.word	0x400200b8
 8003b6c:	40020410 	.word	0x40020410
 8003b70:	40020428 	.word	0x40020428
 8003b74:	40020440 	.word	0x40020440
 8003b78:	40020458 	.word	0x40020458
 8003b7c:	40020470 	.word	0x40020470
 8003b80:	40020488 	.word	0x40020488
 8003b84:	400204a0 	.word	0x400204a0
 8003b88:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b90:	f003 031f 	and.w	r3, r3, #31
 8003b94:	2208      	movs	r2, #8
 8003b96:	409a      	lsls	r2, r3
 8003b98:	697b      	ldr	r3, [r7, #20]
 8003b9a:	4013      	ands	r3, r2
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	f000 8088 	beq.w	8003cb2 <HAL_DMA_IRQHandler+0xe0e>
 8003ba2:	693b      	ldr	r3, [r7, #16]
 8003ba4:	f003 0308 	and.w	r3, r3, #8
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	f000 8082 	beq.w	8003cb2 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4a41      	ldr	r2, [pc, #260]	; (8003cb8 <HAL_DMA_IRQHandler+0xe14>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d04a      	beq.n	8003c4e <HAL_DMA_IRQHandler+0xdaa>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4a3f      	ldr	r2, [pc, #252]	; (8003cbc <HAL_DMA_IRQHandler+0xe18>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d045      	beq.n	8003c4e <HAL_DMA_IRQHandler+0xdaa>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4a3e      	ldr	r2, [pc, #248]	; (8003cc0 <HAL_DMA_IRQHandler+0xe1c>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d040      	beq.n	8003c4e <HAL_DMA_IRQHandler+0xdaa>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4a3c      	ldr	r2, [pc, #240]	; (8003cc4 <HAL_DMA_IRQHandler+0xe20>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d03b      	beq.n	8003c4e <HAL_DMA_IRQHandler+0xdaa>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4a3b      	ldr	r2, [pc, #236]	; (8003cc8 <HAL_DMA_IRQHandler+0xe24>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d036      	beq.n	8003c4e <HAL_DMA_IRQHandler+0xdaa>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a39      	ldr	r2, [pc, #228]	; (8003ccc <HAL_DMA_IRQHandler+0xe28>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d031      	beq.n	8003c4e <HAL_DMA_IRQHandler+0xdaa>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a38      	ldr	r2, [pc, #224]	; (8003cd0 <HAL_DMA_IRQHandler+0xe2c>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d02c      	beq.n	8003c4e <HAL_DMA_IRQHandler+0xdaa>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4a36      	ldr	r2, [pc, #216]	; (8003cd4 <HAL_DMA_IRQHandler+0xe30>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d027      	beq.n	8003c4e <HAL_DMA_IRQHandler+0xdaa>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4a35      	ldr	r2, [pc, #212]	; (8003cd8 <HAL_DMA_IRQHandler+0xe34>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d022      	beq.n	8003c4e <HAL_DMA_IRQHandler+0xdaa>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4a33      	ldr	r2, [pc, #204]	; (8003cdc <HAL_DMA_IRQHandler+0xe38>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d01d      	beq.n	8003c4e <HAL_DMA_IRQHandler+0xdaa>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a32      	ldr	r2, [pc, #200]	; (8003ce0 <HAL_DMA_IRQHandler+0xe3c>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d018      	beq.n	8003c4e <HAL_DMA_IRQHandler+0xdaa>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a30      	ldr	r2, [pc, #192]	; (8003ce4 <HAL_DMA_IRQHandler+0xe40>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d013      	beq.n	8003c4e <HAL_DMA_IRQHandler+0xdaa>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4a2f      	ldr	r2, [pc, #188]	; (8003ce8 <HAL_DMA_IRQHandler+0xe44>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d00e      	beq.n	8003c4e <HAL_DMA_IRQHandler+0xdaa>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a2d      	ldr	r2, [pc, #180]	; (8003cec <HAL_DMA_IRQHandler+0xe48>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d009      	beq.n	8003c4e <HAL_DMA_IRQHandler+0xdaa>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4a2c      	ldr	r2, [pc, #176]	; (8003cf0 <HAL_DMA_IRQHandler+0xe4c>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d004      	beq.n	8003c4e <HAL_DMA_IRQHandler+0xdaa>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a2a      	ldr	r2, [pc, #168]	; (8003cf4 <HAL_DMA_IRQHandler+0xe50>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d108      	bne.n	8003c60 <HAL_DMA_IRQHandler+0xdbc>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	681a      	ldr	r2, [r3, #0]
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f022 021c 	bic.w	r2, r2, #28
 8003c5c:	601a      	str	r2, [r3, #0]
 8003c5e:	e007      	b.n	8003c70 <HAL_DMA_IRQHandler+0xdcc>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	681a      	ldr	r2, [r3, #0]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f022 020e 	bic.w	r2, r2, #14
 8003c6e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c74:	f003 031f 	and.w	r3, r3, #31
 8003c78:	2201      	movs	r2, #1
 8003c7a:	409a      	lsls	r2, r3
 8003c7c:	69fb      	ldr	r3, [r7, #28]
 8003c7e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2201      	movs	r2, #1
 8003c84:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2200      	movs	r2, #0
 8003c8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2201      	movs	r2, #1
 8003c92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d009      	beq.n	8003cb2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ca2:	6878      	ldr	r0, [r7, #4]
 8003ca4:	4798      	blx	r3
 8003ca6:	e004      	b.n	8003cb2 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8003ca8:	bf00      	nop
 8003caa:	e002      	b.n	8003cb2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003cac:	bf00      	nop
 8003cae:	e000      	b.n	8003cb2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003cb0:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003cb2:	3728      	adds	r7, #40	; 0x28
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	bd80      	pop	{r7, pc}
 8003cb8:	40020010 	.word	0x40020010
 8003cbc:	40020028 	.word	0x40020028
 8003cc0:	40020040 	.word	0x40020040
 8003cc4:	40020058 	.word	0x40020058
 8003cc8:	40020070 	.word	0x40020070
 8003ccc:	40020088 	.word	0x40020088
 8003cd0:	400200a0 	.word	0x400200a0
 8003cd4:	400200b8 	.word	0x400200b8
 8003cd8:	40020410 	.word	0x40020410
 8003cdc:	40020428 	.word	0x40020428
 8003ce0:	40020440 	.word	0x40020440
 8003ce4:	40020458 	.word	0x40020458
 8003ce8:	40020470 	.word	0x40020470
 8003cec:	40020488 	.word	0x40020488
 8003cf0:	400204a0 	.word	0x400204a0
 8003cf4:	400204b8 	.word	0x400204b8

08003cf8 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	b083      	sub	sp, #12
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8003d04:	4618      	mov	r0, r3
 8003d06:	370c      	adds	r7, #12
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0e:	4770      	bx	lr

08003d10 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003d10:	b480      	push	{r7}
 8003d12:	b087      	sub	sp, #28
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	60f8      	str	r0, [r7, #12]
 8003d18:	60b9      	str	r1, [r7, #8]
 8003d1a:	607a      	str	r2, [r7, #4]
 8003d1c:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d22:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d28:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4a84      	ldr	r2, [pc, #528]	; (8003f40 <DMA_SetConfig+0x230>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d072      	beq.n	8003e1a <DMA_SetConfig+0x10a>
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4a82      	ldr	r2, [pc, #520]	; (8003f44 <DMA_SetConfig+0x234>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d06d      	beq.n	8003e1a <DMA_SetConfig+0x10a>
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4a81      	ldr	r2, [pc, #516]	; (8003f48 <DMA_SetConfig+0x238>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d068      	beq.n	8003e1a <DMA_SetConfig+0x10a>
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4a7f      	ldr	r2, [pc, #508]	; (8003f4c <DMA_SetConfig+0x23c>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d063      	beq.n	8003e1a <DMA_SetConfig+0x10a>
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4a7e      	ldr	r2, [pc, #504]	; (8003f50 <DMA_SetConfig+0x240>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d05e      	beq.n	8003e1a <DMA_SetConfig+0x10a>
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a7c      	ldr	r2, [pc, #496]	; (8003f54 <DMA_SetConfig+0x244>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d059      	beq.n	8003e1a <DMA_SetConfig+0x10a>
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a7b      	ldr	r2, [pc, #492]	; (8003f58 <DMA_SetConfig+0x248>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d054      	beq.n	8003e1a <DMA_SetConfig+0x10a>
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a79      	ldr	r2, [pc, #484]	; (8003f5c <DMA_SetConfig+0x24c>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d04f      	beq.n	8003e1a <DMA_SetConfig+0x10a>
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4a78      	ldr	r2, [pc, #480]	; (8003f60 <DMA_SetConfig+0x250>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d04a      	beq.n	8003e1a <DMA_SetConfig+0x10a>
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4a76      	ldr	r2, [pc, #472]	; (8003f64 <DMA_SetConfig+0x254>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d045      	beq.n	8003e1a <DMA_SetConfig+0x10a>
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4a75      	ldr	r2, [pc, #468]	; (8003f68 <DMA_SetConfig+0x258>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d040      	beq.n	8003e1a <DMA_SetConfig+0x10a>
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4a73      	ldr	r2, [pc, #460]	; (8003f6c <DMA_SetConfig+0x25c>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d03b      	beq.n	8003e1a <DMA_SetConfig+0x10a>
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4a72      	ldr	r2, [pc, #456]	; (8003f70 <DMA_SetConfig+0x260>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d036      	beq.n	8003e1a <DMA_SetConfig+0x10a>
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a70      	ldr	r2, [pc, #448]	; (8003f74 <DMA_SetConfig+0x264>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d031      	beq.n	8003e1a <DMA_SetConfig+0x10a>
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4a6f      	ldr	r2, [pc, #444]	; (8003f78 <DMA_SetConfig+0x268>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d02c      	beq.n	8003e1a <DMA_SetConfig+0x10a>
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4a6d      	ldr	r2, [pc, #436]	; (8003f7c <DMA_SetConfig+0x26c>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d027      	beq.n	8003e1a <DMA_SetConfig+0x10a>
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4a6c      	ldr	r2, [pc, #432]	; (8003f80 <DMA_SetConfig+0x270>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d022      	beq.n	8003e1a <DMA_SetConfig+0x10a>
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4a6a      	ldr	r2, [pc, #424]	; (8003f84 <DMA_SetConfig+0x274>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d01d      	beq.n	8003e1a <DMA_SetConfig+0x10a>
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4a69      	ldr	r2, [pc, #420]	; (8003f88 <DMA_SetConfig+0x278>)
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d018      	beq.n	8003e1a <DMA_SetConfig+0x10a>
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4a67      	ldr	r2, [pc, #412]	; (8003f8c <DMA_SetConfig+0x27c>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d013      	beq.n	8003e1a <DMA_SetConfig+0x10a>
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4a66      	ldr	r2, [pc, #408]	; (8003f90 <DMA_SetConfig+0x280>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d00e      	beq.n	8003e1a <DMA_SetConfig+0x10a>
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a64      	ldr	r2, [pc, #400]	; (8003f94 <DMA_SetConfig+0x284>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d009      	beq.n	8003e1a <DMA_SetConfig+0x10a>
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4a63      	ldr	r2, [pc, #396]	; (8003f98 <DMA_SetConfig+0x288>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d004      	beq.n	8003e1a <DMA_SetConfig+0x10a>
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4a61      	ldr	r2, [pc, #388]	; (8003f9c <DMA_SetConfig+0x28c>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d101      	bne.n	8003e1e <DMA_SetConfig+0x10e>
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	e000      	b.n	8003e20 <DMA_SetConfig+0x110>
 8003e1e:	2300      	movs	r3, #0
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d00d      	beq.n	8003e40 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e28:	68fa      	ldr	r2, [r7, #12]
 8003e2a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003e2c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d004      	beq.n	8003e40 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e3a:	68fa      	ldr	r2, [r7, #12]
 8003e3c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003e3e:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4a3e      	ldr	r2, [pc, #248]	; (8003f40 <DMA_SetConfig+0x230>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d04a      	beq.n	8003ee0 <DMA_SetConfig+0x1d0>
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	4a3d      	ldr	r2, [pc, #244]	; (8003f44 <DMA_SetConfig+0x234>)
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d045      	beq.n	8003ee0 <DMA_SetConfig+0x1d0>
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	4a3b      	ldr	r2, [pc, #236]	; (8003f48 <DMA_SetConfig+0x238>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d040      	beq.n	8003ee0 <DMA_SetConfig+0x1d0>
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	4a3a      	ldr	r2, [pc, #232]	; (8003f4c <DMA_SetConfig+0x23c>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d03b      	beq.n	8003ee0 <DMA_SetConfig+0x1d0>
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4a38      	ldr	r2, [pc, #224]	; (8003f50 <DMA_SetConfig+0x240>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d036      	beq.n	8003ee0 <DMA_SetConfig+0x1d0>
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	4a37      	ldr	r2, [pc, #220]	; (8003f54 <DMA_SetConfig+0x244>)
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d031      	beq.n	8003ee0 <DMA_SetConfig+0x1d0>
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4a35      	ldr	r2, [pc, #212]	; (8003f58 <DMA_SetConfig+0x248>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d02c      	beq.n	8003ee0 <DMA_SetConfig+0x1d0>
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4a34      	ldr	r2, [pc, #208]	; (8003f5c <DMA_SetConfig+0x24c>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d027      	beq.n	8003ee0 <DMA_SetConfig+0x1d0>
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4a32      	ldr	r2, [pc, #200]	; (8003f60 <DMA_SetConfig+0x250>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d022      	beq.n	8003ee0 <DMA_SetConfig+0x1d0>
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4a31      	ldr	r2, [pc, #196]	; (8003f64 <DMA_SetConfig+0x254>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d01d      	beq.n	8003ee0 <DMA_SetConfig+0x1d0>
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4a2f      	ldr	r2, [pc, #188]	; (8003f68 <DMA_SetConfig+0x258>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d018      	beq.n	8003ee0 <DMA_SetConfig+0x1d0>
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4a2e      	ldr	r2, [pc, #184]	; (8003f6c <DMA_SetConfig+0x25c>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d013      	beq.n	8003ee0 <DMA_SetConfig+0x1d0>
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4a2c      	ldr	r2, [pc, #176]	; (8003f70 <DMA_SetConfig+0x260>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d00e      	beq.n	8003ee0 <DMA_SetConfig+0x1d0>
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4a2b      	ldr	r2, [pc, #172]	; (8003f74 <DMA_SetConfig+0x264>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d009      	beq.n	8003ee0 <DMA_SetConfig+0x1d0>
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4a29      	ldr	r2, [pc, #164]	; (8003f78 <DMA_SetConfig+0x268>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d004      	beq.n	8003ee0 <DMA_SetConfig+0x1d0>
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4a28      	ldr	r2, [pc, #160]	; (8003f7c <DMA_SetConfig+0x26c>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d101      	bne.n	8003ee4 <DMA_SetConfig+0x1d4>
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	e000      	b.n	8003ee6 <DMA_SetConfig+0x1d6>
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d05a      	beq.n	8003fa0 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003eee:	f003 031f 	and.w	r3, r3, #31
 8003ef2:	223f      	movs	r2, #63	; 0x3f
 8003ef4:	409a      	lsls	r2, r3
 8003ef6:	697b      	ldr	r3, [r7, #20]
 8003ef8:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	681a      	ldr	r2, [r3, #0]
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003f08:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	683a      	ldr	r2, [r7, #0]
 8003f10:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	689b      	ldr	r3, [r3, #8]
 8003f16:	2b40      	cmp	r3, #64	; 0x40
 8003f18:	d108      	bne.n	8003f2c <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	687a      	ldr	r2, [r7, #4]
 8003f20:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	68ba      	ldr	r2, [r7, #8]
 8003f28:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003f2a:	e087      	b.n	800403c <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	68ba      	ldr	r2, [r7, #8]
 8003f32:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	687a      	ldr	r2, [r7, #4]
 8003f3a:	60da      	str	r2, [r3, #12]
}
 8003f3c:	e07e      	b.n	800403c <DMA_SetConfig+0x32c>
 8003f3e:	bf00      	nop
 8003f40:	40020010 	.word	0x40020010
 8003f44:	40020028 	.word	0x40020028
 8003f48:	40020040 	.word	0x40020040
 8003f4c:	40020058 	.word	0x40020058
 8003f50:	40020070 	.word	0x40020070
 8003f54:	40020088 	.word	0x40020088
 8003f58:	400200a0 	.word	0x400200a0
 8003f5c:	400200b8 	.word	0x400200b8
 8003f60:	40020410 	.word	0x40020410
 8003f64:	40020428 	.word	0x40020428
 8003f68:	40020440 	.word	0x40020440
 8003f6c:	40020458 	.word	0x40020458
 8003f70:	40020470 	.word	0x40020470
 8003f74:	40020488 	.word	0x40020488
 8003f78:	400204a0 	.word	0x400204a0
 8003f7c:	400204b8 	.word	0x400204b8
 8003f80:	58025408 	.word	0x58025408
 8003f84:	5802541c 	.word	0x5802541c
 8003f88:	58025430 	.word	0x58025430
 8003f8c:	58025444 	.word	0x58025444
 8003f90:	58025458 	.word	0x58025458
 8003f94:	5802546c 	.word	0x5802546c
 8003f98:	58025480 	.word	0x58025480
 8003f9c:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a28      	ldr	r2, [pc, #160]	; (8004048 <DMA_SetConfig+0x338>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d022      	beq.n	8003ff0 <DMA_SetConfig+0x2e0>
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4a27      	ldr	r2, [pc, #156]	; (800404c <DMA_SetConfig+0x33c>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d01d      	beq.n	8003ff0 <DMA_SetConfig+0x2e0>
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4a25      	ldr	r2, [pc, #148]	; (8004050 <DMA_SetConfig+0x340>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d018      	beq.n	8003ff0 <DMA_SetConfig+0x2e0>
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4a24      	ldr	r2, [pc, #144]	; (8004054 <DMA_SetConfig+0x344>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d013      	beq.n	8003ff0 <DMA_SetConfig+0x2e0>
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a22      	ldr	r2, [pc, #136]	; (8004058 <DMA_SetConfig+0x348>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d00e      	beq.n	8003ff0 <DMA_SetConfig+0x2e0>
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4a21      	ldr	r2, [pc, #132]	; (800405c <DMA_SetConfig+0x34c>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d009      	beq.n	8003ff0 <DMA_SetConfig+0x2e0>
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4a1f      	ldr	r2, [pc, #124]	; (8004060 <DMA_SetConfig+0x350>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d004      	beq.n	8003ff0 <DMA_SetConfig+0x2e0>
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4a1e      	ldr	r2, [pc, #120]	; (8004064 <DMA_SetConfig+0x354>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d101      	bne.n	8003ff4 <DMA_SetConfig+0x2e4>
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	e000      	b.n	8003ff6 <DMA_SetConfig+0x2e6>
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d020      	beq.n	800403c <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ffe:	f003 031f 	and.w	r3, r3, #31
 8004002:	2201      	movs	r2, #1
 8004004:	409a      	lsls	r2, r3
 8004006:	693b      	ldr	r3, [r7, #16]
 8004008:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	683a      	ldr	r2, [r7, #0]
 8004010:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	689b      	ldr	r3, [r3, #8]
 8004016:	2b40      	cmp	r3, #64	; 0x40
 8004018:	d108      	bne.n	800402c <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	687a      	ldr	r2, [r7, #4]
 8004020:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	68ba      	ldr	r2, [r7, #8]
 8004028:	60da      	str	r2, [r3, #12]
}
 800402a:	e007      	b.n	800403c <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	68ba      	ldr	r2, [r7, #8]
 8004032:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	687a      	ldr	r2, [r7, #4]
 800403a:	60da      	str	r2, [r3, #12]
}
 800403c:	bf00      	nop
 800403e:	371c      	adds	r7, #28
 8004040:	46bd      	mov	sp, r7
 8004042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004046:	4770      	bx	lr
 8004048:	58025408 	.word	0x58025408
 800404c:	5802541c 	.word	0x5802541c
 8004050:	58025430 	.word	0x58025430
 8004054:	58025444 	.word	0x58025444
 8004058:	58025458 	.word	0x58025458
 800405c:	5802546c 	.word	0x5802546c
 8004060:	58025480 	.word	0x58025480
 8004064:	58025494 	.word	0x58025494

08004068 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004068:	b480      	push	{r7}
 800406a:	b085      	sub	sp, #20
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4a42      	ldr	r2, [pc, #264]	; (8004180 <DMA_CalcBaseAndBitshift+0x118>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d04a      	beq.n	8004110 <DMA_CalcBaseAndBitshift+0xa8>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4a41      	ldr	r2, [pc, #260]	; (8004184 <DMA_CalcBaseAndBitshift+0x11c>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d045      	beq.n	8004110 <DMA_CalcBaseAndBitshift+0xa8>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4a3f      	ldr	r2, [pc, #252]	; (8004188 <DMA_CalcBaseAndBitshift+0x120>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d040      	beq.n	8004110 <DMA_CalcBaseAndBitshift+0xa8>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4a3e      	ldr	r2, [pc, #248]	; (800418c <DMA_CalcBaseAndBitshift+0x124>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d03b      	beq.n	8004110 <DMA_CalcBaseAndBitshift+0xa8>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4a3c      	ldr	r2, [pc, #240]	; (8004190 <DMA_CalcBaseAndBitshift+0x128>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d036      	beq.n	8004110 <DMA_CalcBaseAndBitshift+0xa8>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4a3b      	ldr	r2, [pc, #236]	; (8004194 <DMA_CalcBaseAndBitshift+0x12c>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d031      	beq.n	8004110 <DMA_CalcBaseAndBitshift+0xa8>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4a39      	ldr	r2, [pc, #228]	; (8004198 <DMA_CalcBaseAndBitshift+0x130>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d02c      	beq.n	8004110 <DMA_CalcBaseAndBitshift+0xa8>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4a38      	ldr	r2, [pc, #224]	; (800419c <DMA_CalcBaseAndBitshift+0x134>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	d027      	beq.n	8004110 <DMA_CalcBaseAndBitshift+0xa8>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4a36      	ldr	r2, [pc, #216]	; (80041a0 <DMA_CalcBaseAndBitshift+0x138>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d022      	beq.n	8004110 <DMA_CalcBaseAndBitshift+0xa8>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4a35      	ldr	r2, [pc, #212]	; (80041a4 <DMA_CalcBaseAndBitshift+0x13c>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d01d      	beq.n	8004110 <DMA_CalcBaseAndBitshift+0xa8>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a33      	ldr	r2, [pc, #204]	; (80041a8 <DMA_CalcBaseAndBitshift+0x140>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d018      	beq.n	8004110 <DMA_CalcBaseAndBitshift+0xa8>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4a32      	ldr	r2, [pc, #200]	; (80041ac <DMA_CalcBaseAndBitshift+0x144>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d013      	beq.n	8004110 <DMA_CalcBaseAndBitshift+0xa8>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a30      	ldr	r2, [pc, #192]	; (80041b0 <DMA_CalcBaseAndBitshift+0x148>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d00e      	beq.n	8004110 <DMA_CalcBaseAndBitshift+0xa8>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4a2f      	ldr	r2, [pc, #188]	; (80041b4 <DMA_CalcBaseAndBitshift+0x14c>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d009      	beq.n	8004110 <DMA_CalcBaseAndBitshift+0xa8>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a2d      	ldr	r2, [pc, #180]	; (80041b8 <DMA_CalcBaseAndBitshift+0x150>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d004      	beq.n	8004110 <DMA_CalcBaseAndBitshift+0xa8>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4a2c      	ldr	r2, [pc, #176]	; (80041bc <DMA_CalcBaseAndBitshift+0x154>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d101      	bne.n	8004114 <DMA_CalcBaseAndBitshift+0xac>
 8004110:	2301      	movs	r3, #1
 8004112:	e000      	b.n	8004116 <DMA_CalcBaseAndBitshift+0xae>
 8004114:	2300      	movs	r3, #0
 8004116:	2b00      	cmp	r3, #0
 8004118:	d024      	beq.n	8004164 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	b2db      	uxtb	r3, r3
 8004120:	3b10      	subs	r3, #16
 8004122:	4a27      	ldr	r2, [pc, #156]	; (80041c0 <DMA_CalcBaseAndBitshift+0x158>)
 8004124:	fba2 2303 	umull	r2, r3, r2, r3
 8004128:	091b      	lsrs	r3, r3, #4
 800412a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	f003 0307 	and.w	r3, r3, #7
 8004132:	4a24      	ldr	r2, [pc, #144]	; (80041c4 <DMA_CalcBaseAndBitshift+0x15c>)
 8004134:	5cd3      	ldrb	r3, [r2, r3]
 8004136:	461a      	mov	r2, r3
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	2b03      	cmp	r3, #3
 8004140:	d908      	bls.n	8004154 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	461a      	mov	r2, r3
 8004148:	4b1f      	ldr	r3, [pc, #124]	; (80041c8 <DMA_CalcBaseAndBitshift+0x160>)
 800414a:	4013      	ands	r3, r2
 800414c:	1d1a      	adds	r2, r3, #4
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	659a      	str	r2, [r3, #88]	; 0x58
 8004152:	e00d      	b.n	8004170 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	461a      	mov	r2, r3
 800415a:	4b1b      	ldr	r3, [pc, #108]	; (80041c8 <DMA_CalcBaseAndBitshift+0x160>)
 800415c:	4013      	ands	r3, r2
 800415e:	687a      	ldr	r2, [r7, #4]
 8004160:	6593      	str	r3, [r2, #88]	; 0x58
 8004162:	e005      	b.n	8004170 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004174:	4618      	mov	r0, r3
 8004176:	3714      	adds	r7, #20
 8004178:	46bd      	mov	sp, r7
 800417a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417e:	4770      	bx	lr
 8004180:	40020010 	.word	0x40020010
 8004184:	40020028 	.word	0x40020028
 8004188:	40020040 	.word	0x40020040
 800418c:	40020058 	.word	0x40020058
 8004190:	40020070 	.word	0x40020070
 8004194:	40020088 	.word	0x40020088
 8004198:	400200a0 	.word	0x400200a0
 800419c:	400200b8 	.word	0x400200b8
 80041a0:	40020410 	.word	0x40020410
 80041a4:	40020428 	.word	0x40020428
 80041a8:	40020440 	.word	0x40020440
 80041ac:	40020458 	.word	0x40020458
 80041b0:	40020470 	.word	0x40020470
 80041b4:	40020488 	.word	0x40020488
 80041b8:	400204a0 	.word	0x400204a0
 80041bc:	400204b8 	.word	0x400204b8
 80041c0:	aaaaaaab 	.word	0xaaaaaaab
 80041c4:	0800a7d4 	.word	0x0800a7d4
 80041c8:	fffffc00 	.word	0xfffffc00

080041cc <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80041cc:	b480      	push	{r7}
 80041ce:	b085      	sub	sp, #20
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80041d4:	2300      	movs	r3, #0
 80041d6:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	699b      	ldr	r3, [r3, #24]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d120      	bne.n	8004222 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041e4:	2b03      	cmp	r3, #3
 80041e6:	d858      	bhi.n	800429a <DMA_CheckFifoParam+0xce>
 80041e8:	a201      	add	r2, pc, #4	; (adr r2, 80041f0 <DMA_CheckFifoParam+0x24>)
 80041ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041ee:	bf00      	nop
 80041f0:	08004201 	.word	0x08004201
 80041f4:	08004213 	.word	0x08004213
 80041f8:	08004201 	.word	0x08004201
 80041fc:	0800429b 	.word	0x0800429b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004204:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004208:	2b00      	cmp	r3, #0
 800420a:	d048      	beq.n	800429e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800420c:	2301      	movs	r3, #1
 800420e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004210:	e045      	b.n	800429e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004216:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800421a:	d142      	bne.n	80042a2 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800421c:	2301      	movs	r3, #1
 800421e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004220:	e03f      	b.n	80042a2 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	699b      	ldr	r3, [r3, #24]
 8004226:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800422a:	d123      	bne.n	8004274 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004230:	2b03      	cmp	r3, #3
 8004232:	d838      	bhi.n	80042a6 <DMA_CheckFifoParam+0xda>
 8004234:	a201      	add	r2, pc, #4	; (adr r2, 800423c <DMA_CheckFifoParam+0x70>)
 8004236:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800423a:	bf00      	nop
 800423c:	0800424d 	.word	0x0800424d
 8004240:	08004253 	.word	0x08004253
 8004244:	0800424d 	.word	0x0800424d
 8004248:	08004265 	.word	0x08004265
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800424c:	2301      	movs	r3, #1
 800424e:	73fb      	strb	r3, [r7, #15]
        break;
 8004250:	e030      	b.n	80042b4 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004256:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800425a:	2b00      	cmp	r3, #0
 800425c:	d025      	beq.n	80042aa <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800425e:	2301      	movs	r3, #1
 8004260:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004262:	e022      	b.n	80042aa <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004268:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800426c:	d11f      	bne.n	80042ae <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800426e:	2301      	movs	r3, #1
 8004270:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004272:	e01c      	b.n	80042ae <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004278:	2b02      	cmp	r3, #2
 800427a:	d902      	bls.n	8004282 <DMA_CheckFifoParam+0xb6>
 800427c:	2b03      	cmp	r3, #3
 800427e:	d003      	beq.n	8004288 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004280:	e018      	b.n	80042b4 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8004282:	2301      	movs	r3, #1
 8004284:	73fb      	strb	r3, [r7, #15]
        break;
 8004286:	e015      	b.n	80042b4 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800428c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004290:	2b00      	cmp	r3, #0
 8004292:	d00e      	beq.n	80042b2 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004294:	2301      	movs	r3, #1
 8004296:	73fb      	strb	r3, [r7, #15]
    break;
 8004298:	e00b      	b.n	80042b2 <DMA_CheckFifoParam+0xe6>
        break;
 800429a:	bf00      	nop
 800429c:	e00a      	b.n	80042b4 <DMA_CheckFifoParam+0xe8>
        break;
 800429e:	bf00      	nop
 80042a0:	e008      	b.n	80042b4 <DMA_CheckFifoParam+0xe8>
        break;
 80042a2:	bf00      	nop
 80042a4:	e006      	b.n	80042b4 <DMA_CheckFifoParam+0xe8>
        break;
 80042a6:	bf00      	nop
 80042a8:	e004      	b.n	80042b4 <DMA_CheckFifoParam+0xe8>
        break;
 80042aa:	bf00      	nop
 80042ac:	e002      	b.n	80042b4 <DMA_CheckFifoParam+0xe8>
        break;
 80042ae:	bf00      	nop
 80042b0:	e000      	b.n	80042b4 <DMA_CheckFifoParam+0xe8>
    break;
 80042b2:	bf00      	nop
    }
  }

  return status;
 80042b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80042b6:	4618      	mov	r0, r3
 80042b8:	3714      	adds	r7, #20
 80042ba:	46bd      	mov	sp, r7
 80042bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c0:	4770      	bx	lr
 80042c2:	bf00      	nop

080042c4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80042c4:	b480      	push	{r7}
 80042c6:	b085      	sub	sp, #20
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4a38      	ldr	r2, [pc, #224]	; (80043b8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d022      	beq.n	8004322 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a36      	ldr	r2, [pc, #216]	; (80043bc <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d01d      	beq.n	8004322 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4a35      	ldr	r2, [pc, #212]	; (80043c0 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d018      	beq.n	8004322 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4a33      	ldr	r2, [pc, #204]	; (80043c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d013      	beq.n	8004322 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4a32      	ldr	r2, [pc, #200]	; (80043c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d00e      	beq.n	8004322 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4a30      	ldr	r2, [pc, #192]	; (80043cc <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d009      	beq.n	8004322 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4a2f      	ldr	r2, [pc, #188]	; (80043d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d004      	beq.n	8004322 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4a2d      	ldr	r2, [pc, #180]	; (80043d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800431e:	4293      	cmp	r3, r2
 8004320:	d101      	bne.n	8004326 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8004322:	2301      	movs	r3, #1
 8004324:	e000      	b.n	8004328 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8004326:	2300      	movs	r3, #0
 8004328:	2b00      	cmp	r3, #0
 800432a:	d01a      	beq.n	8004362 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	b2db      	uxtb	r3, r3
 8004332:	3b08      	subs	r3, #8
 8004334:	4a28      	ldr	r2, [pc, #160]	; (80043d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8004336:	fba2 2303 	umull	r2, r3, r2, r3
 800433a:	091b      	lsrs	r3, r3, #4
 800433c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800433e:	68fa      	ldr	r2, [r7, #12]
 8004340:	4b26      	ldr	r3, [pc, #152]	; (80043dc <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8004342:	4413      	add	r3, r2
 8004344:	009b      	lsls	r3, r3, #2
 8004346:	461a      	mov	r2, r3
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	4a24      	ldr	r2, [pc, #144]	; (80043e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004350:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	f003 031f 	and.w	r3, r3, #31
 8004358:	2201      	movs	r2, #1
 800435a:	409a      	lsls	r2, r3
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004360:	e024      	b.n	80043ac <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	b2db      	uxtb	r3, r3
 8004368:	3b10      	subs	r3, #16
 800436a:	4a1e      	ldr	r2, [pc, #120]	; (80043e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800436c:	fba2 2303 	umull	r2, r3, r2, r3
 8004370:	091b      	lsrs	r3, r3, #4
 8004372:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004374:	68bb      	ldr	r3, [r7, #8]
 8004376:	4a1c      	ldr	r2, [pc, #112]	; (80043e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004378:	4293      	cmp	r3, r2
 800437a:	d806      	bhi.n	800438a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800437c:	68bb      	ldr	r3, [r7, #8]
 800437e:	4a1b      	ldr	r2, [pc, #108]	; (80043ec <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d902      	bls.n	800438a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	3308      	adds	r3, #8
 8004388:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800438a:	68fa      	ldr	r2, [r7, #12]
 800438c:	4b18      	ldr	r3, [pc, #96]	; (80043f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800438e:	4413      	add	r3, r2
 8004390:	009b      	lsls	r3, r3, #2
 8004392:	461a      	mov	r2, r3
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	4a16      	ldr	r2, [pc, #88]	; (80043f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800439c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	f003 031f 	and.w	r3, r3, #31
 80043a4:	2201      	movs	r2, #1
 80043a6:	409a      	lsls	r2, r3
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	669a      	str	r2, [r3, #104]	; 0x68
}
 80043ac:	bf00      	nop
 80043ae:	3714      	adds	r7, #20
 80043b0:	46bd      	mov	sp, r7
 80043b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b6:	4770      	bx	lr
 80043b8:	58025408 	.word	0x58025408
 80043bc:	5802541c 	.word	0x5802541c
 80043c0:	58025430 	.word	0x58025430
 80043c4:	58025444 	.word	0x58025444
 80043c8:	58025458 	.word	0x58025458
 80043cc:	5802546c 	.word	0x5802546c
 80043d0:	58025480 	.word	0x58025480
 80043d4:	58025494 	.word	0x58025494
 80043d8:	cccccccd 	.word	0xcccccccd
 80043dc:	16009600 	.word	0x16009600
 80043e0:	58025880 	.word	0x58025880
 80043e4:	aaaaaaab 	.word	0xaaaaaaab
 80043e8:	400204b8 	.word	0x400204b8
 80043ec:	4002040f 	.word	0x4002040f
 80043f0:	10008200 	.word	0x10008200
 80043f4:	40020880 	.word	0x40020880

080043f8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80043f8:	b480      	push	{r7}
 80043fa:	b085      	sub	sp, #20
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	685b      	ldr	r3, [r3, #4]
 8004404:	b2db      	uxtb	r3, r3
 8004406:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d04a      	beq.n	80044a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	2b08      	cmp	r3, #8
 8004412:	d847      	bhi.n	80044a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4a25      	ldr	r2, [pc, #148]	; (80044b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d022      	beq.n	8004464 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4a24      	ldr	r2, [pc, #144]	; (80044b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004424:	4293      	cmp	r3, r2
 8004426:	d01d      	beq.n	8004464 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4a22      	ldr	r2, [pc, #136]	; (80044b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d018      	beq.n	8004464 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4a21      	ldr	r2, [pc, #132]	; (80044bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004438:	4293      	cmp	r3, r2
 800443a:	d013      	beq.n	8004464 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4a1f      	ldr	r2, [pc, #124]	; (80044c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d00e      	beq.n	8004464 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4a1e      	ldr	r2, [pc, #120]	; (80044c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800444c:	4293      	cmp	r3, r2
 800444e:	d009      	beq.n	8004464 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4a1c      	ldr	r2, [pc, #112]	; (80044c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d004      	beq.n	8004464 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4a1b      	ldr	r2, [pc, #108]	; (80044cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d101      	bne.n	8004468 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8004464:	2301      	movs	r3, #1
 8004466:	e000      	b.n	800446a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004468:	2300      	movs	r3, #0
 800446a:	2b00      	cmp	r3, #0
 800446c:	d00a      	beq.n	8004484 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800446e:	68fa      	ldr	r2, [r7, #12]
 8004470:	4b17      	ldr	r3, [pc, #92]	; (80044d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8004472:	4413      	add	r3, r2
 8004474:	009b      	lsls	r3, r3, #2
 8004476:	461a      	mov	r2, r3
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	4a15      	ldr	r2, [pc, #84]	; (80044d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004480:	671a      	str	r2, [r3, #112]	; 0x70
 8004482:	e009      	b.n	8004498 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004484:	68fa      	ldr	r2, [r7, #12]
 8004486:	4b14      	ldr	r3, [pc, #80]	; (80044d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004488:	4413      	add	r3, r2
 800448a:	009b      	lsls	r3, r3, #2
 800448c:	461a      	mov	r2, r3
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	4a11      	ldr	r2, [pc, #68]	; (80044dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8004496:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	3b01      	subs	r3, #1
 800449c:	2201      	movs	r2, #1
 800449e:	409a      	lsls	r2, r3
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80044a4:	bf00      	nop
 80044a6:	3714      	adds	r7, #20
 80044a8:	46bd      	mov	sp, r7
 80044aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ae:	4770      	bx	lr
 80044b0:	58025408 	.word	0x58025408
 80044b4:	5802541c 	.word	0x5802541c
 80044b8:	58025430 	.word	0x58025430
 80044bc:	58025444 	.word	0x58025444
 80044c0:	58025458 	.word	0x58025458
 80044c4:	5802546c 	.word	0x5802546c
 80044c8:	58025480 	.word	0x58025480
 80044cc:	58025494 	.word	0x58025494
 80044d0:	1600963f 	.word	0x1600963f
 80044d4:	58025940 	.word	0x58025940
 80044d8:	1000823f 	.word	0x1000823f
 80044dc:	40020940 	.word	0x40020940

080044e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80044e0:	b480      	push	{r7}
 80044e2:	b089      	sub	sp, #36	; 0x24
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
 80044e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80044ea:	2300      	movs	r3, #0
 80044ec:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80044ee:	4b89      	ldr	r3, [pc, #548]	; (8004714 <HAL_GPIO_Init+0x234>)
 80044f0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80044f2:	e194      	b.n	800481e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	681a      	ldr	r2, [r3, #0]
 80044f8:	2101      	movs	r1, #1
 80044fa:	69fb      	ldr	r3, [r7, #28]
 80044fc:	fa01 f303 	lsl.w	r3, r1, r3
 8004500:	4013      	ands	r3, r2
 8004502:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004504:	693b      	ldr	r3, [r7, #16]
 8004506:	2b00      	cmp	r3, #0
 8004508:	f000 8186 	beq.w	8004818 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	685b      	ldr	r3, [r3, #4]
 8004510:	2b01      	cmp	r3, #1
 8004512:	d00b      	beq.n	800452c <HAL_GPIO_Init+0x4c>
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	685b      	ldr	r3, [r3, #4]
 8004518:	2b02      	cmp	r3, #2
 800451a:	d007      	beq.n	800452c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004520:	2b11      	cmp	r3, #17
 8004522:	d003      	beq.n	800452c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	2b12      	cmp	r3, #18
 800452a:	d130      	bne.n	800458e <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	689b      	ldr	r3, [r3, #8]
 8004530:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004532:	69fb      	ldr	r3, [r7, #28]
 8004534:	005b      	lsls	r3, r3, #1
 8004536:	2203      	movs	r2, #3
 8004538:	fa02 f303 	lsl.w	r3, r2, r3
 800453c:	43db      	mvns	r3, r3
 800453e:	69ba      	ldr	r2, [r7, #24]
 8004540:	4013      	ands	r3, r2
 8004542:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	68da      	ldr	r2, [r3, #12]
 8004548:	69fb      	ldr	r3, [r7, #28]
 800454a:	005b      	lsls	r3, r3, #1
 800454c:	fa02 f303 	lsl.w	r3, r2, r3
 8004550:	69ba      	ldr	r2, [r7, #24]
 8004552:	4313      	orrs	r3, r2
 8004554:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	69ba      	ldr	r2, [r7, #24]
 800455a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	685b      	ldr	r3, [r3, #4]
 8004560:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004562:	2201      	movs	r2, #1
 8004564:	69fb      	ldr	r3, [r7, #28]
 8004566:	fa02 f303 	lsl.w	r3, r2, r3
 800456a:	43db      	mvns	r3, r3
 800456c:	69ba      	ldr	r2, [r7, #24]
 800456e:	4013      	ands	r3, r2
 8004570:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	685b      	ldr	r3, [r3, #4]
 8004576:	091b      	lsrs	r3, r3, #4
 8004578:	f003 0201 	and.w	r2, r3, #1
 800457c:	69fb      	ldr	r3, [r7, #28]
 800457e:	fa02 f303 	lsl.w	r3, r2, r3
 8004582:	69ba      	ldr	r2, [r7, #24]
 8004584:	4313      	orrs	r3, r2
 8004586:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	69ba      	ldr	r2, [r7, #24]
 800458c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	68db      	ldr	r3, [r3, #12]
 8004592:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004594:	69fb      	ldr	r3, [r7, #28]
 8004596:	005b      	lsls	r3, r3, #1
 8004598:	2203      	movs	r2, #3
 800459a:	fa02 f303 	lsl.w	r3, r2, r3
 800459e:	43db      	mvns	r3, r3
 80045a0:	69ba      	ldr	r2, [r7, #24]
 80045a2:	4013      	ands	r3, r2
 80045a4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	689a      	ldr	r2, [r3, #8]
 80045aa:	69fb      	ldr	r3, [r7, #28]
 80045ac:	005b      	lsls	r3, r3, #1
 80045ae:	fa02 f303 	lsl.w	r3, r2, r3
 80045b2:	69ba      	ldr	r2, [r7, #24]
 80045b4:	4313      	orrs	r3, r2
 80045b6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	69ba      	ldr	r2, [r7, #24]
 80045bc:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	685b      	ldr	r3, [r3, #4]
 80045c2:	2b02      	cmp	r3, #2
 80045c4:	d003      	beq.n	80045ce <HAL_GPIO_Init+0xee>
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	685b      	ldr	r3, [r3, #4]
 80045ca:	2b12      	cmp	r3, #18
 80045cc:	d123      	bne.n	8004616 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80045ce:	69fb      	ldr	r3, [r7, #28]
 80045d0:	08da      	lsrs	r2, r3, #3
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	3208      	adds	r2, #8
 80045d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80045da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80045dc:	69fb      	ldr	r3, [r7, #28]
 80045de:	f003 0307 	and.w	r3, r3, #7
 80045e2:	009b      	lsls	r3, r3, #2
 80045e4:	220f      	movs	r2, #15
 80045e6:	fa02 f303 	lsl.w	r3, r2, r3
 80045ea:	43db      	mvns	r3, r3
 80045ec:	69ba      	ldr	r2, [r7, #24]
 80045ee:	4013      	ands	r3, r2
 80045f0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	691a      	ldr	r2, [r3, #16]
 80045f6:	69fb      	ldr	r3, [r7, #28]
 80045f8:	f003 0307 	and.w	r3, r3, #7
 80045fc:	009b      	lsls	r3, r3, #2
 80045fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004602:	69ba      	ldr	r2, [r7, #24]
 8004604:	4313      	orrs	r3, r2
 8004606:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004608:	69fb      	ldr	r3, [r7, #28]
 800460a:	08da      	lsrs	r2, r3, #3
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	3208      	adds	r2, #8
 8004610:	69b9      	ldr	r1, [r7, #24]
 8004612:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800461c:	69fb      	ldr	r3, [r7, #28]
 800461e:	005b      	lsls	r3, r3, #1
 8004620:	2203      	movs	r2, #3
 8004622:	fa02 f303 	lsl.w	r3, r2, r3
 8004626:	43db      	mvns	r3, r3
 8004628:	69ba      	ldr	r2, [r7, #24]
 800462a:	4013      	ands	r3, r2
 800462c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	685b      	ldr	r3, [r3, #4]
 8004632:	f003 0203 	and.w	r2, r3, #3
 8004636:	69fb      	ldr	r3, [r7, #28]
 8004638:	005b      	lsls	r3, r3, #1
 800463a:	fa02 f303 	lsl.w	r3, r2, r3
 800463e:	69ba      	ldr	r2, [r7, #24]
 8004640:	4313      	orrs	r3, r2
 8004642:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	69ba      	ldr	r2, [r7, #24]
 8004648:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	685b      	ldr	r3, [r3, #4]
 800464e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004652:	2b00      	cmp	r3, #0
 8004654:	f000 80e0 	beq.w	8004818 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004658:	4b2f      	ldr	r3, [pc, #188]	; (8004718 <HAL_GPIO_Init+0x238>)
 800465a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800465e:	4a2e      	ldr	r2, [pc, #184]	; (8004718 <HAL_GPIO_Init+0x238>)
 8004660:	f043 0302 	orr.w	r3, r3, #2
 8004664:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004668:	4b2b      	ldr	r3, [pc, #172]	; (8004718 <HAL_GPIO_Init+0x238>)
 800466a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800466e:	f003 0302 	and.w	r3, r3, #2
 8004672:	60fb      	str	r3, [r7, #12]
 8004674:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004676:	4a29      	ldr	r2, [pc, #164]	; (800471c <HAL_GPIO_Init+0x23c>)
 8004678:	69fb      	ldr	r3, [r7, #28]
 800467a:	089b      	lsrs	r3, r3, #2
 800467c:	3302      	adds	r3, #2
 800467e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004682:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004684:	69fb      	ldr	r3, [r7, #28]
 8004686:	f003 0303 	and.w	r3, r3, #3
 800468a:	009b      	lsls	r3, r3, #2
 800468c:	220f      	movs	r2, #15
 800468e:	fa02 f303 	lsl.w	r3, r2, r3
 8004692:	43db      	mvns	r3, r3
 8004694:	69ba      	ldr	r2, [r7, #24]
 8004696:	4013      	ands	r3, r2
 8004698:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	4a20      	ldr	r2, [pc, #128]	; (8004720 <HAL_GPIO_Init+0x240>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d052      	beq.n	8004748 <HAL_GPIO_Init+0x268>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	4a1f      	ldr	r2, [pc, #124]	; (8004724 <HAL_GPIO_Init+0x244>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d031      	beq.n	800470e <HAL_GPIO_Init+0x22e>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	4a1e      	ldr	r2, [pc, #120]	; (8004728 <HAL_GPIO_Init+0x248>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d02b      	beq.n	800470a <HAL_GPIO_Init+0x22a>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	4a1d      	ldr	r2, [pc, #116]	; (800472c <HAL_GPIO_Init+0x24c>)
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d025      	beq.n	8004706 <HAL_GPIO_Init+0x226>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	4a1c      	ldr	r2, [pc, #112]	; (8004730 <HAL_GPIO_Init+0x250>)
 80046be:	4293      	cmp	r3, r2
 80046c0:	d01f      	beq.n	8004702 <HAL_GPIO_Init+0x222>
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	4a1b      	ldr	r2, [pc, #108]	; (8004734 <HAL_GPIO_Init+0x254>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d019      	beq.n	80046fe <HAL_GPIO_Init+0x21e>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	4a1a      	ldr	r2, [pc, #104]	; (8004738 <HAL_GPIO_Init+0x258>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d013      	beq.n	80046fa <HAL_GPIO_Init+0x21a>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	4a19      	ldr	r2, [pc, #100]	; (800473c <HAL_GPIO_Init+0x25c>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d00d      	beq.n	80046f6 <HAL_GPIO_Init+0x216>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	4a18      	ldr	r2, [pc, #96]	; (8004740 <HAL_GPIO_Init+0x260>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d007      	beq.n	80046f2 <HAL_GPIO_Init+0x212>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	4a17      	ldr	r2, [pc, #92]	; (8004744 <HAL_GPIO_Init+0x264>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d101      	bne.n	80046ee <HAL_GPIO_Init+0x20e>
 80046ea:	2309      	movs	r3, #9
 80046ec:	e02d      	b.n	800474a <HAL_GPIO_Init+0x26a>
 80046ee:	230a      	movs	r3, #10
 80046f0:	e02b      	b.n	800474a <HAL_GPIO_Init+0x26a>
 80046f2:	2308      	movs	r3, #8
 80046f4:	e029      	b.n	800474a <HAL_GPIO_Init+0x26a>
 80046f6:	2307      	movs	r3, #7
 80046f8:	e027      	b.n	800474a <HAL_GPIO_Init+0x26a>
 80046fa:	2306      	movs	r3, #6
 80046fc:	e025      	b.n	800474a <HAL_GPIO_Init+0x26a>
 80046fe:	2305      	movs	r3, #5
 8004700:	e023      	b.n	800474a <HAL_GPIO_Init+0x26a>
 8004702:	2304      	movs	r3, #4
 8004704:	e021      	b.n	800474a <HAL_GPIO_Init+0x26a>
 8004706:	2303      	movs	r3, #3
 8004708:	e01f      	b.n	800474a <HAL_GPIO_Init+0x26a>
 800470a:	2302      	movs	r3, #2
 800470c:	e01d      	b.n	800474a <HAL_GPIO_Init+0x26a>
 800470e:	2301      	movs	r3, #1
 8004710:	e01b      	b.n	800474a <HAL_GPIO_Init+0x26a>
 8004712:	bf00      	nop
 8004714:	58000080 	.word	0x58000080
 8004718:	58024400 	.word	0x58024400
 800471c:	58000400 	.word	0x58000400
 8004720:	58020000 	.word	0x58020000
 8004724:	58020400 	.word	0x58020400
 8004728:	58020800 	.word	0x58020800
 800472c:	58020c00 	.word	0x58020c00
 8004730:	58021000 	.word	0x58021000
 8004734:	58021400 	.word	0x58021400
 8004738:	58021800 	.word	0x58021800
 800473c:	58021c00 	.word	0x58021c00
 8004740:	58022000 	.word	0x58022000
 8004744:	58022400 	.word	0x58022400
 8004748:	2300      	movs	r3, #0
 800474a:	69fa      	ldr	r2, [r7, #28]
 800474c:	f002 0203 	and.w	r2, r2, #3
 8004750:	0092      	lsls	r2, r2, #2
 8004752:	4093      	lsls	r3, r2
 8004754:	69ba      	ldr	r2, [r7, #24]
 8004756:	4313      	orrs	r3, r2
 8004758:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800475a:	4938      	ldr	r1, [pc, #224]	; (800483c <HAL_GPIO_Init+0x35c>)
 800475c:	69fb      	ldr	r3, [r7, #28]
 800475e:	089b      	lsrs	r3, r3, #2
 8004760:	3302      	adds	r3, #2
 8004762:	69ba      	ldr	r2, [r7, #24]
 8004764:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004768:	697b      	ldr	r3, [r7, #20]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800476e:	693b      	ldr	r3, [r7, #16]
 8004770:	43db      	mvns	r3, r3
 8004772:	69ba      	ldr	r2, [r7, #24]
 8004774:	4013      	ands	r3, r2
 8004776:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	685b      	ldr	r3, [r3, #4]
 800477c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004780:	2b00      	cmp	r3, #0
 8004782:	d003      	beq.n	800478c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004784:	69ba      	ldr	r2, [r7, #24]
 8004786:	693b      	ldr	r3, [r7, #16]
 8004788:	4313      	orrs	r3, r2
 800478a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800478c:	697b      	ldr	r3, [r7, #20]
 800478e:	69ba      	ldr	r2, [r7, #24]
 8004790:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8004792:	697b      	ldr	r3, [r7, #20]
 8004794:	685b      	ldr	r3, [r3, #4]
 8004796:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004798:	693b      	ldr	r3, [r7, #16]
 800479a:	43db      	mvns	r3, r3
 800479c:	69ba      	ldr	r2, [r7, #24]
 800479e:	4013      	ands	r3, r2
 80047a0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	685b      	ldr	r3, [r3, #4]
 80047a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d003      	beq.n	80047b6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80047ae:	69ba      	ldr	r2, [r7, #24]
 80047b0:	693b      	ldr	r3, [r7, #16]
 80047b2:	4313      	orrs	r3, r2
 80047b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80047b6:	697b      	ldr	r3, [r7, #20]
 80047b8:	69ba      	ldr	r2, [r7, #24]
 80047ba:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80047bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80047c4:	693b      	ldr	r3, [r7, #16]
 80047c6:	43db      	mvns	r3, r3
 80047c8:	69ba      	ldr	r2, [r7, #24]
 80047ca:	4013      	ands	r3, r2
 80047cc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	685b      	ldr	r3, [r3, #4]
 80047d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d003      	beq.n	80047e2 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 80047da:	69ba      	ldr	r2, [r7, #24]
 80047dc:	693b      	ldr	r3, [r7, #16]
 80047de:	4313      	orrs	r3, r2
 80047e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80047e2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80047e6:	69bb      	ldr	r3, [r7, #24]
 80047e8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80047ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047ee:	685b      	ldr	r3, [r3, #4]
 80047f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80047f2:	693b      	ldr	r3, [r7, #16]
 80047f4:	43db      	mvns	r3, r3
 80047f6:	69ba      	ldr	r2, [r7, #24]
 80047f8:	4013      	ands	r3, r2
 80047fa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	685b      	ldr	r3, [r3, #4]
 8004800:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004804:	2b00      	cmp	r3, #0
 8004806:	d003      	beq.n	8004810 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8004808:	69ba      	ldr	r2, [r7, #24]
 800480a:	693b      	ldr	r3, [r7, #16]
 800480c:	4313      	orrs	r3, r2
 800480e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004810:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004814:	69bb      	ldr	r3, [r7, #24]
 8004816:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8004818:	69fb      	ldr	r3, [r7, #28]
 800481a:	3301      	adds	r3, #1
 800481c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	681a      	ldr	r2, [r3, #0]
 8004822:	69fb      	ldr	r3, [r7, #28]
 8004824:	fa22 f303 	lsr.w	r3, r2, r3
 8004828:	2b00      	cmp	r3, #0
 800482a:	f47f ae63 	bne.w	80044f4 <HAL_GPIO_Init+0x14>
  }
}
 800482e:	bf00      	nop
 8004830:	bf00      	nop
 8004832:	3724      	adds	r7, #36	; 0x24
 8004834:	46bd      	mov	sp, r7
 8004836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483a:	4770      	bx	lr
 800483c:	58000400 	.word	0x58000400

08004840 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8004840:	b480      	push	{r7}
 8004842:	b083      	sub	sp, #12
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8004848:	4a08      	ldr	r2, [pc, #32]	; (800486c <HAL_HSEM_FastTake+0x2c>)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	3320      	adds	r3, #32
 800484e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004852:	4a07      	ldr	r2, [pc, #28]	; (8004870 <HAL_HSEM_FastTake+0x30>)
 8004854:	4293      	cmp	r3, r2
 8004856:	d101      	bne.n	800485c <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8004858:	2300      	movs	r3, #0
 800485a:	e000      	b.n	800485e <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 800485c:	2301      	movs	r3, #1
}
 800485e:	4618      	mov	r0, r3
 8004860:	370c      	adds	r7, #12
 8004862:	46bd      	mov	sp, r7
 8004864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004868:	4770      	bx	lr
 800486a:	bf00      	nop
 800486c:	58026400 	.word	0x58026400
 8004870:	80000300 	.word	0x80000300

08004874 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8004874:	b480      	push	{r7}
 8004876:	b083      	sub	sp, #12
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
 800487c:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 800487e:	4906      	ldr	r1, [pc, #24]	; (8004898 <HAL_HSEM_Release+0x24>)
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 800488c:	bf00      	nop
 800488e:	370c      	adds	r7, #12
 8004890:	46bd      	mov	sp, r7
 8004892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004896:	4770      	bx	lr
 8004898:	58026400 	.word	0x58026400

0800489c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	b084      	sub	sp, #16
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80048a4:	4b29      	ldr	r3, [pc, #164]	; (800494c <HAL_PWREx_ConfigSupply+0xb0>)
 80048a6:	68db      	ldr	r3, [r3, #12]
 80048a8:	f003 0307 	and.w	r3, r3, #7
 80048ac:	2b06      	cmp	r3, #6
 80048ae:	d00a      	beq.n	80048c6 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80048b0:	4b26      	ldr	r3, [pc, #152]	; (800494c <HAL_PWREx_ConfigSupply+0xb0>)
 80048b2:	68db      	ldr	r3, [r3, #12]
 80048b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80048b8:	687a      	ldr	r2, [r7, #4]
 80048ba:	429a      	cmp	r2, r3
 80048bc:	d001      	beq.n	80048c2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80048be:	2301      	movs	r3, #1
 80048c0:	e040      	b.n	8004944 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80048c2:	2300      	movs	r3, #0
 80048c4:	e03e      	b.n	8004944 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80048c6:	4b21      	ldr	r3, [pc, #132]	; (800494c <HAL_PWREx_ConfigSupply+0xb0>)
 80048c8:	68db      	ldr	r3, [r3, #12]
 80048ca:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80048ce:	491f      	ldr	r1, [pc, #124]	; (800494c <HAL_PWREx_ConfigSupply+0xb0>)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	4313      	orrs	r3, r2
 80048d4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80048d6:	f7fc fdab 	bl	8001430 <HAL_GetTick>
 80048da:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80048dc:	e009      	b.n	80048f2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80048de:	f7fc fda7 	bl	8001430 <HAL_GetTick>
 80048e2:	4602      	mov	r2, r0
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	1ad3      	subs	r3, r2, r3
 80048e8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80048ec:	d901      	bls.n	80048f2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80048ee:	2301      	movs	r3, #1
 80048f0:	e028      	b.n	8004944 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80048f2:	4b16      	ldr	r3, [pc, #88]	; (800494c <HAL_PWREx_ConfigSupply+0xb0>)
 80048f4:	685b      	ldr	r3, [r3, #4]
 80048f6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80048fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80048fe:	d1ee      	bne.n	80048de <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2b1e      	cmp	r3, #30
 8004904:	d008      	beq.n	8004918 <HAL_PWREx_ConfigSupply+0x7c>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2b2e      	cmp	r3, #46	; 0x2e
 800490a:	d005      	beq.n	8004918 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2b1d      	cmp	r3, #29
 8004910:	d002      	beq.n	8004918 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2b2d      	cmp	r3, #45	; 0x2d
 8004916:	d114      	bne.n	8004942 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8004918:	f7fc fd8a 	bl	8001430 <HAL_GetTick>
 800491c:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800491e:	e009      	b.n	8004934 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004920:	f7fc fd86 	bl	8001430 <HAL_GetTick>
 8004924:	4602      	mov	r2, r0
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	1ad3      	subs	r3, r2, r3
 800492a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800492e:	d901      	bls.n	8004934 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8004930:	2301      	movs	r3, #1
 8004932:	e007      	b.n	8004944 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8004934:	4b05      	ldr	r3, [pc, #20]	; (800494c <HAL_PWREx_ConfigSupply+0xb0>)
 8004936:	68db      	ldr	r3, [r3, #12]
 8004938:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800493c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004940:	d1ee      	bne.n	8004920 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004942:	2300      	movs	r3, #0
}
 8004944:	4618      	mov	r0, r3
 8004946:	3710      	adds	r7, #16
 8004948:	46bd      	mov	sp, r7
 800494a:	bd80      	pop	{r7, pc}
 800494c:	58024800 	.word	0x58024800

08004950 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004950:	b580      	push	{r7, lr}
 8004952:	b08c      	sub	sp, #48	; 0x30
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d101      	bne.n	8004962 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800495e:	2301      	movs	r3, #1
 8004960:	e3ff      	b.n	8005162 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f003 0301 	and.w	r3, r3, #1
 800496a:	2b00      	cmp	r3, #0
 800496c:	f000 8087 	beq.w	8004a7e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004970:	4b99      	ldr	r3, [pc, #612]	; (8004bd8 <HAL_RCC_OscConfig+0x288>)
 8004972:	691b      	ldr	r3, [r3, #16]
 8004974:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004978:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800497a:	4b97      	ldr	r3, [pc, #604]	; (8004bd8 <HAL_RCC_OscConfig+0x288>)
 800497c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800497e:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004980:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004982:	2b10      	cmp	r3, #16
 8004984:	d007      	beq.n	8004996 <HAL_RCC_OscConfig+0x46>
 8004986:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004988:	2b18      	cmp	r3, #24
 800498a:	d110      	bne.n	80049ae <HAL_RCC_OscConfig+0x5e>
 800498c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800498e:	f003 0303 	and.w	r3, r3, #3
 8004992:	2b02      	cmp	r3, #2
 8004994:	d10b      	bne.n	80049ae <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004996:	4b90      	ldr	r3, [pc, #576]	; (8004bd8 <HAL_RCC_OscConfig+0x288>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d06c      	beq.n	8004a7c <HAL_RCC_OscConfig+0x12c>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	685b      	ldr	r3, [r3, #4]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d168      	bne.n	8004a7c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80049aa:	2301      	movs	r3, #1
 80049ac:	e3d9      	b.n	8005162 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	685b      	ldr	r3, [r3, #4]
 80049b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049b6:	d106      	bne.n	80049c6 <HAL_RCC_OscConfig+0x76>
 80049b8:	4b87      	ldr	r3, [pc, #540]	; (8004bd8 <HAL_RCC_OscConfig+0x288>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4a86      	ldr	r2, [pc, #536]	; (8004bd8 <HAL_RCC_OscConfig+0x288>)
 80049be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049c2:	6013      	str	r3, [r2, #0]
 80049c4:	e02e      	b.n	8004a24 <HAL_RCC_OscConfig+0xd4>
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	685b      	ldr	r3, [r3, #4]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d10c      	bne.n	80049e8 <HAL_RCC_OscConfig+0x98>
 80049ce:	4b82      	ldr	r3, [pc, #520]	; (8004bd8 <HAL_RCC_OscConfig+0x288>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	4a81      	ldr	r2, [pc, #516]	; (8004bd8 <HAL_RCC_OscConfig+0x288>)
 80049d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049d8:	6013      	str	r3, [r2, #0]
 80049da:	4b7f      	ldr	r3, [pc, #508]	; (8004bd8 <HAL_RCC_OscConfig+0x288>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	4a7e      	ldr	r2, [pc, #504]	; (8004bd8 <HAL_RCC_OscConfig+0x288>)
 80049e0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80049e4:	6013      	str	r3, [r2, #0]
 80049e6:	e01d      	b.n	8004a24 <HAL_RCC_OscConfig+0xd4>
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	685b      	ldr	r3, [r3, #4]
 80049ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80049f0:	d10c      	bne.n	8004a0c <HAL_RCC_OscConfig+0xbc>
 80049f2:	4b79      	ldr	r3, [pc, #484]	; (8004bd8 <HAL_RCC_OscConfig+0x288>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	4a78      	ldr	r2, [pc, #480]	; (8004bd8 <HAL_RCC_OscConfig+0x288>)
 80049f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80049fc:	6013      	str	r3, [r2, #0]
 80049fe:	4b76      	ldr	r3, [pc, #472]	; (8004bd8 <HAL_RCC_OscConfig+0x288>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4a75      	ldr	r2, [pc, #468]	; (8004bd8 <HAL_RCC_OscConfig+0x288>)
 8004a04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a08:	6013      	str	r3, [r2, #0]
 8004a0a:	e00b      	b.n	8004a24 <HAL_RCC_OscConfig+0xd4>
 8004a0c:	4b72      	ldr	r3, [pc, #456]	; (8004bd8 <HAL_RCC_OscConfig+0x288>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4a71      	ldr	r2, [pc, #452]	; (8004bd8 <HAL_RCC_OscConfig+0x288>)
 8004a12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a16:	6013      	str	r3, [r2, #0]
 8004a18:	4b6f      	ldr	r3, [pc, #444]	; (8004bd8 <HAL_RCC_OscConfig+0x288>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	4a6e      	ldr	r2, [pc, #440]	; (8004bd8 <HAL_RCC_OscConfig+0x288>)
 8004a1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a22:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	685b      	ldr	r3, [r3, #4]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d013      	beq.n	8004a54 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a2c:	f7fc fd00 	bl	8001430 <HAL_GetTick>
 8004a30:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004a32:	e008      	b.n	8004a46 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004a34:	f7fc fcfc 	bl	8001430 <HAL_GetTick>
 8004a38:	4602      	mov	r2, r0
 8004a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a3c:	1ad3      	subs	r3, r2, r3
 8004a3e:	2b64      	cmp	r3, #100	; 0x64
 8004a40:	d901      	bls.n	8004a46 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004a42:	2303      	movs	r3, #3
 8004a44:	e38d      	b.n	8005162 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004a46:	4b64      	ldr	r3, [pc, #400]	; (8004bd8 <HAL_RCC_OscConfig+0x288>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d0f0      	beq.n	8004a34 <HAL_RCC_OscConfig+0xe4>
 8004a52:	e014      	b.n	8004a7e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a54:	f7fc fcec 	bl	8001430 <HAL_GetTick>
 8004a58:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004a5a:	e008      	b.n	8004a6e <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004a5c:	f7fc fce8 	bl	8001430 <HAL_GetTick>
 8004a60:	4602      	mov	r2, r0
 8004a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a64:	1ad3      	subs	r3, r2, r3
 8004a66:	2b64      	cmp	r3, #100	; 0x64
 8004a68:	d901      	bls.n	8004a6e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004a6a:	2303      	movs	r3, #3
 8004a6c:	e379      	b.n	8005162 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004a6e:	4b5a      	ldr	r3, [pc, #360]	; (8004bd8 <HAL_RCC_OscConfig+0x288>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d1f0      	bne.n	8004a5c <HAL_RCC_OscConfig+0x10c>
 8004a7a:	e000      	b.n	8004a7e <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f003 0302 	and.w	r3, r3, #2
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	f000 80ae 	beq.w	8004be8 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a8c:	4b52      	ldr	r3, [pc, #328]	; (8004bd8 <HAL_RCC_OscConfig+0x288>)
 8004a8e:	691b      	ldr	r3, [r3, #16]
 8004a90:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004a94:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004a96:	4b50      	ldr	r3, [pc, #320]	; (8004bd8 <HAL_RCC_OscConfig+0x288>)
 8004a98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a9a:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004a9c:	6a3b      	ldr	r3, [r7, #32]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d007      	beq.n	8004ab2 <HAL_RCC_OscConfig+0x162>
 8004aa2:	6a3b      	ldr	r3, [r7, #32]
 8004aa4:	2b18      	cmp	r3, #24
 8004aa6:	d13a      	bne.n	8004b1e <HAL_RCC_OscConfig+0x1ce>
 8004aa8:	69fb      	ldr	r3, [r7, #28]
 8004aaa:	f003 0303 	and.w	r3, r3, #3
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d135      	bne.n	8004b1e <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004ab2:	4b49      	ldr	r3, [pc, #292]	; (8004bd8 <HAL_RCC_OscConfig+0x288>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f003 0304 	and.w	r3, r3, #4
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d005      	beq.n	8004aca <HAL_RCC_OscConfig+0x17a>
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	68db      	ldr	r3, [r3, #12]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d101      	bne.n	8004aca <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	e34b      	b.n	8005162 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004aca:	f7fc fcbd 	bl	8001448 <HAL_GetREVID>
 8004ace:	4603      	mov	r3, r0
 8004ad0:	f241 0203 	movw	r2, #4099	; 0x1003
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d817      	bhi.n	8004b08 <HAL_RCC_OscConfig+0x1b8>
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	691b      	ldr	r3, [r3, #16]
 8004adc:	2b40      	cmp	r3, #64	; 0x40
 8004ade:	d108      	bne.n	8004af2 <HAL_RCC_OscConfig+0x1a2>
 8004ae0:	4b3d      	ldr	r3, [pc, #244]	; (8004bd8 <HAL_RCC_OscConfig+0x288>)
 8004ae2:	685b      	ldr	r3, [r3, #4]
 8004ae4:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004ae8:	4a3b      	ldr	r2, [pc, #236]	; (8004bd8 <HAL_RCC_OscConfig+0x288>)
 8004aea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004aee:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004af0:	e07a      	b.n	8004be8 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004af2:	4b39      	ldr	r3, [pc, #228]	; (8004bd8 <HAL_RCC_OscConfig+0x288>)
 8004af4:	685b      	ldr	r3, [r3, #4]
 8004af6:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	691b      	ldr	r3, [r3, #16]
 8004afe:	031b      	lsls	r3, r3, #12
 8004b00:	4935      	ldr	r1, [pc, #212]	; (8004bd8 <HAL_RCC_OscConfig+0x288>)
 8004b02:	4313      	orrs	r3, r2
 8004b04:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004b06:	e06f      	b.n	8004be8 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b08:	4b33      	ldr	r3, [pc, #204]	; (8004bd8 <HAL_RCC_OscConfig+0x288>)
 8004b0a:	685b      	ldr	r3, [r3, #4]
 8004b0c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	691b      	ldr	r3, [r3, #16]
 8004b14:	061b      	lsls	r3, r3, #24
 8004b16:	4930      	ldr	r1, [pc, #192]	; (8004bd8 <HAL_RCC_OscConfig+0x288>)
 8004b18:	4313      	orrs	r3, r2
 8004b1a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004b1c:	e064      	b.n	8004be8 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	68db      	ldr	r3, [r3, #12]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d045      	beq.n	8004bb2 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004b26:	4b2c      	ldr	r3, [pc, #176]	; (8004bd8 <HAL_RCC_OscConfig+0x288>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f023 0219 	bic.w	r2, r3, #25
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	68db      	ldr	r3, [r3, #12]
 8004b32:	4929      	ldr	r1, [pc, #164]	; (8004bd8 <HAL_RCC_OscConfig+0x288>)
 8004b34:	4313      	orrs	r3, r2
 8004b36:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b38:	f7fc fc7a 	bl	8001430 <HAL_GetTick>
 8004b3c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004b3e:	e008      	b.n	8004b52 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004b40:	f7fc fc76 	bl	8001430 <HAL_GetTick>
 8004b44:	4602      	mov	r2, r0
 8004b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b48:	1ad3      	subs	r3, r2, r3
 8004b4a:	2b02      	cmp	r3, #2
 8004b4c:	d901      	bls.n	8004b52 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8004b4e:	2303      	movs	r3, #3
 8004b50:	e307      	b.n	8005162 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004b52:	4b21      	ldr	r3, [pc, #132]	; (8004bd8 <HAL_RCC_OscConfig+0x288>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f003 0304 	and.w	r3, r3, #4
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d0f0      	beq.n	8004b40 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b5e:	f7fc fc73 	bl	8001448 <HAL_GetREVID>
 8004b62:	4603      	mov	r3, r0
 8004b64:	f241 0203 	movw	r2, #4099	; 0x1003
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d817      	bhi.n	8004b9c <HAL_RCC_OscConfig+0x24c>
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	691b      	ldr	r3, [r3, #16]
 8004b70:	2b40      	cmp	r3, #64	; 0x40
 8004b72:	d108      	bne.n	8004b86 <HAL_RCC_OscConfig+0x236>
 8004b74:	4b18      	ldr	r3, [pc, #96]	; (8004bd8 <HAL_RCC_OscConfig+0x288>)
 8004b76:	685b      	ldr	r3, [r3, #4]
 8004b78:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004b7c:	4a16      	ldr	r2, [pc, #88]	; (8004bd8 <HAL_RCC_OscConfig+0x288>)
 8004b7e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b82:	6053      	str	r3, [r2, #4]
 8004b84:	e030      	b.n	8004be8 <HAL_RCC_OscConfig+0x298>
 8004b86:	4b14      	ldr	r3, [pc, #80]	; (8004bd8 <HAL_RCC_OscConfig+0x288>)
 8004b88:	685b      	ldr	r3, [r3, #4]
 8004b8a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	691b      	ldr	r3, [r3, #16]
 8004b92:	031b      	lsls	r3, r3, #12
 8004b94:	4910      	ldr	r1, [pc, #64]	; (8004bd8 <HAL_RCC_OscConfig+0x288>)
 8004b96:	4313      	orrs	r3, r2
 8004b98:	604b      	str	r3, [r1, #4]
 8004b9a:	e025      	b.n	8004be8 <HAL_RCC_OscConfig+0x298>
 8004b9c:	4b0e      	ldr	r3, [pc, #56]	; (8004bd8 <HAL_RCC_OscConfig+0x288>)
 8004b9e:	685b      	ldr	r3, [r3, #4]
 8004ba0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	691b      	ldr	r3, [r3, #16]
 8004ba8:	061b      	lsls	r3, r3, #24
 8004baa:	490b      	ldr	r1, [pc, #44]	; (8004bd8 <HAL_RCC_OscConfig+0x288>)
 8004bac:	4313      	orrs	r3, r2
 8004bae:	604b      	str	r3, [r1, #4]
 8004bb0:	e01a      	b.n	8004be8 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004bb2:	4b09      	ldr	r3, [pc, #36]	; (8004bd8 <HAL_RCC_OscConfig+0x288>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	4a08      	ldr	r2, [pc, #32]	; (8004bd8 <HAL_RCC_OscConfig+0x288>)
 8004bb8:	f023 0301 	bic.w	r3, r3, #1
 8004bbc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bbe:	f7fc fc37 	bl	8001430 <HAL_GetTick>
 8004bc2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004bc4:	e00a      	b.n	8004bdc <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004bc6:	f7fc fc33 	bl	8001430 <HAL_GetTick>
 8004bca:	4602      	mov	r2, r0
 8004bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bce:	1ad3      	subs	r3, r2, r3
 8004bd0:	2b02      	cmp	r3, #2
 8004bd2:	d903      	bls.n	8004bdc <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8004bd4:	2303      	movs	r3, #3
 8004bd6:	e2c4      	b.n	8005162 <HAL_RCC_OscConfig+0x812>
 8004bd8:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004bdc:	4ba4      	ldr	r3, [pc, #656]	; (8004e70 <HAL_RCC_OscConfig+0x520>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f003 0304 	and.w	r3, r3, #4
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d1ee      	bne.n	8004bc6 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f003 0310 	and.w	r3, r3, #16
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	f000 80a9 	beq.w	8004d48 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004bf6:	4b9e      	ldr	r3, [pc, #632]	; (8004e70 <HAL_RCC_OscConfig+0x520>)
 8004bf8:	691b      	ldr	r3, [r3, #16]
 8004bfa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004bfe:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004c00:	4b9b      	ldr	r3, [pc, #620]	; (8004e70 <HAL_RCC_OscConfig+0x520>)
 8004c02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c04:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004c06:	69bb      	ldr	r3, [r7, #24]
 8004c08:	2b08      	cmp	r3, #8
 8004c0a:	d007      	beq.n	8004c1c <HAL_RCC_OscConfig+0x2cc>
 8004c0c:	69bb      	ldr	r3, [r7, #24]
 8004c0e:	2b18      	cmp	r3, #24
 8004c10:	d13a      	bne.n	8004c88 <HAL_RCC_OscConfig+0x338>
 8004c12:	697b      	ldr	r3, [r7, #20]
 8004c14:	f003 0303 	and.w	r3, r3, #3
 8004c18:	2b01      	cmp	r3, #1
 8004c1a:	d135      	bne.n	8004c88 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004c1c:	4b94      	ldr	r3, [pc, #592]	; (8004e70 <HAL_RCC_OscConfig+0x520>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d005      	beq.n	8004c34 <HAL_RCC_OscConfig+0x2e4>
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	69db      	ldr	r3, [r3, #28]
 8004c2c:	2b80      	cmp	r3, #128	; 0x80
 8004c2e:	d001      	beq.n	8004c34 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8004c30:	2301      	movs	r3, #1
 8004c32:	e296      	b.n	8005162 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004c34:	f7fc fc08 	bl	8001448 <HAL_GetREVID>
 8004c38:	4603      	mov	r3, r0
 8004c3a:	f241 0203 	movw	r2, #4099	; 0x1003
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d817      	bhi.n	8004c72 <HAL_RCC_OscConfig+0x322>
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6a1b      	ldr	r3, [r3, #32]
 8004c46:	2b20      	cmp	r3, #32
 8004c48:	d108      	bne.n	8004c5c <HAL_RCC_OscConfig+0x30c>
 8004c4a:	4b89      	ldr	r3, [pc, #548]	; (8004e70 <HAL_RCC_OscConfig+0x520>)
 8004c4c:	685b      	ldr	r3, [r3, #4]
 8004c4e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004c52:	4a87      	ldr	r2, [pc, #540]	; (8004e70 <HAL_RCC_OscConfig+0x520>)
 8004c54:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004c58:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004c5a:	e075      	b.n	8004d48 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004c5c:	4b84      	ldr	r3, [pc, #528]	; (8004e70 <HAL_RCC_OscConfig+0x520>)
 8004c5e:	685b      	ldr	r3, [r3, #4]
 8004c60:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6a1b      	ldr	r3, [r3, #32]
 8004c68:	069b      	lsls	r3, r3, #26
 8004c6a:	4981      	ldr	r1, [pc, #516]	; (8004e70 <HAL_RCC_OscConfig+0x520>)
 8004c6c:	4313      	orrs	r3, r2
 8004c6e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004c70:	e06a      	b.n	8004d48 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004c72:	4b7f      	ldr	r3, [pc, #508]	; (8004e70 <HAL_RCC_OscConfig+0x520>)
 8004c74:	68db      	ldr	r3, [r3, #12]
 8004c76:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6a1b      	ldr	r3, [r3, #32]
 8004c7e:	061b      	lsls	r3, r3, #24
 8004c80:	497b      	ldr	r1, [pc, #492]	; (8004e70 <HAL_RCC_OscConfig+0x520>)
 8004c82:	4313      	orrs	r3, r2
 8004c84:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004c86:	e05f      	b.n	8004d48 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	69db      	ldr	r3, [r3, #28]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d042      	beq.n	8004d16 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004c90:	4b77      	ldr	r3, [pc, #476]	; (8004e70 <HAL_RCC_OscConfig+0x520>)
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	4a76      	ldr	r2, [pc, #472]	; (8004e70 <HAL_RCC_OscConfig+0x520>)
 8004c96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c9c:	f7fc fbc8 	bl	8001430 <HAL_GetTick>
 8004ca0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004ca2:	e008      	b.n	8004cb6 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004ca4:	f7fc fbc4 	bl	8001430 <HAL_GetTick>
 8004ca8:	4602      	mov	r2, r0
 8004caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cac:	1ad3      	subs	r3, r2, r3
 8004cae:	2b02      	cmp	r3, #2
 8004cb0:	d901      	bls.n	8004cb6 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8004cb2:	2303      	movs	r3, #3
 8004cb4:	e255      	b.n	8005162 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004cb6:	4b6e      	ldr	r3, [pc, #440]	; (8004e70 <HAL_RCC_OscConfig+0x520>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d0f0      	beq.n	8004ca4 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004cc2:	f7fc fbc1 	bl	8001448 <HAL_GetREVID>
 8004cc6:	4603      	mov	r3, r0
 8004cc8:	f241 0203 	movw	r2, #4099	; 0x1003
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d817      	bhi.n	8004d00 <HAL_RCC_OscConfig+0x3b0>
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6a1b      	ldr	r3, [r3, #32]
 8004cd4:	2b20      	cmp	r3, #32
 8004cd6:	d108      	bne.n	8004cea <HAL_RCC_OscConfig+0x39a>
 8004cd8:	4b65      	ldr	r3, [pc, #404]	; (8004e70 <HAL_RCC_OscConfig+0x520>)
 8004cda:	685b      	ldr	r3, [r3, #4]
 8004cdc:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004ce0:	4a63      	ldr	r2, [pc, #396]	; (8004e70 <HAL_RCC_OscConfig+0x520>)
 8004ce2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004ce6:	6053      	str	r3, [r2, #4]
 8004ce8:	e02e      	b.n	8004d48 <HAL_RCC_OscConfig+0x3f8>
 8004cea:	4b61      	ldr	r3, [pc, #388]	; (8004e70 <HAL_RCC_OscConfig+0x520>)
 8004cec:	685b      	ldr	r3, [r3, #4]
 8004cee:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6a1b      	ldr	r3, [r3, #32]
 8004cf6:	069b      	lsls	r3, r3, #26
 8004cf8:	495d      	ldr	r1, [pc, #372]	; (8004e70 <HAL_RCC_OscConfig+0x520>)
 8004cfa:	4313      	orrs	r3, r2
 8004cfc:	604b      	str	r3, [r1, #4]
 8004cfe:	e023      	b.n	8004d48 <HAL_RCC_OscConfig+0x3f8>
 8004d00:	4b5b      	ldr	r3, [pc, #364]	; (8004e70 <HAL_RCC_OscConfig+0x520>)
 8004d02:	68db      	ldr	r3, [r3, #12]
 8004d04:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6a1b      	ldr	r3, [r3, #32]
 8004d0c:	061b      	lsls	r3, r3, #24
 8004d0e:	4958      	ldr	r1, [pc, #352]	; (8004e70 <HAL_RCC_OscConfig+0x520>)
 8004d10:	4313      	orrs	r3, r2
 8004d12:	60cb      	str	r3, [r1, #12]
 8004d14:	e018      	b.n	8004d48 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004d16:	4b56      	ldr	r3, [pc, #344]	; (8004e70 <HAL_RCC_OscConfig+0x520>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4a55      	ldr	r2, [pc, #340]	; (8004e70 <HAL_RCC_OscConfig+0x520>)
 8004d1c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004d20:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d22:	f7fc fb85 	bl	8001430 <HAL_GetTick>
 8004d26:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004d28:	e008      	b.n	8004d3c <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004d2a:	f7fc fb81 	bl	8001430 <HAL_GetTick>
 8004d2e:	4602      	mov	r2, r0
 8004d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d32:	1ad3      	subs	r3, r2, r3
 8004d34:	2b02      	cmp	r3, #2
 8004d36:	d901      	bls.n	8004d3c <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8004d38:	2303      	movs	r3, #3
 8004d3a:	e212      	b.n	8005162 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004d3c:	4b4c      	ldr	r3, [pc, #304]	; (8004e70 <HAL_RCC_OscConfig+0x520>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d1f0      	bne.n	8004d2a <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f003 0308 	and.w	r3, r3, #8
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d036      	beq.n	8004dc2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	695b      	ldr	r3, [r3, #20]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d019      	beq.n	8004d90 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d5c:	4b44      	ldr	r3, [pc, #272]	; (8004e70 <HAL_RCC_OscConfig+0x520>)
 8004d5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d60:	4a43      	ldr	r2, [pc, #268]	; (8004e70 <HAL_RCC_OscConfig+0x520>)
 8004d62:	f043 0301 	orr.w	r3, r3, #1
 8004d66:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d68:	f7fc fb62 	bl	8001430 <HAL_GetTick>
 8004d6c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004d6e:	e008      	b.n	8004d82 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004d70:	f7fc fb5e 	bl	8001430 <HAL_GetTick>
 8004d74:	4602      	mov	r2, r0
 8004d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d78:	1ad3      	subs	r3, r2, r3
 8004d7a:	2b02      	cmp	r3, #2
 8004d7c:	d901      	bls.n	8004d82 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8004d7e:	2303      	movs	r3, #3
 8004d80:	e1ef      	b.n	8005162 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004d82:	4b3b      	ldr	r3, [pc, #236]	; (8004e70 <HAL_RCC_OscConfig+0x520>)
 8004d84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d86:	f003 0302 	and.w	r3, r3, #2
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d0f0      	beq.n	8004d70 <HAL_RCC_OscConfig+0x420>
 8004d8e:	e018      	b.n	8004dc2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004d90:	4b37      	ldr	r3, [pc, #220]	; (8004e70 <HAL_RCC_OscConfig+0x520>)
 8004d92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d94:	4a36      	ldr	r2, [pc, #216]	; (8004e70 <HAL_RCC_OscConfig+0x520>)
 8004d96:	f023 0301 	bic.w	r3, r3, #1
 8004d9a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d9c:	f7fc fb48 	bl	8001430 <HAL_GetTick>
 8004da0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004da2:	e008      	b.n	8004db6 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004da4:	f7fc fb44 	bl	8001430 <HAL_GetTick>
 8004da8:	4602      	mov	r2, r0
 8004daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dac:	1ad3      	subs	r3, r2, r3
 8004dae:	2b02      	cmp	r3, #2
 8004db0:	d901      	bls.n	8004db6 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8004db2:	2303      	movs	r3, #3
 8004db4:	e1d5      	b.n	8005162 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004db6:	4b2e      	ldr	r3, [pc, #184]	; (8004e70 <HAL_RCC_OscConfig+0x520>)
 8004db8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004dba:	f003 0302 	and.w	r3, r3, #2
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d1f0      	bne.n	8004da4 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f003 0320 	and.w	r3, r3, #32
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d036      	beq.n	8004e3c <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	699b      	ldr	r3, [r3, #24]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d019      	beq.n	8004e0a <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004dd6:	4b26      	ldr	r3, [pc, #152]	; (8004e70 <HAL_RCC_OscConfig+0x520>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	4a25      	ldr	r2, [pc, #148]	; (8004e70 <HAL_RCC_OscConfig+0x520>)
 8004ddc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004de0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004de2:	f7fc fb25 	bl	8001430 <HAL_GetTick>
 8004de6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004de8:	e008      	b.n	8004dfc <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8004dea:	f7fc fb21 	bl	8001430 <HAL_GetTick>
 8004dee:	4602      	mov	r2, r0
 8004df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004df2:	1ad3      	subs	r3, r2, r3
 8004df4:	2b02      	cmp	r3, #2
 8004df6:	d901      	bls.n	8004dfc <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8004df8:	2303      	movs	r3, #3
 8004dfa:	e1b2      	b.n	8005162 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004dfc:	4b1c      	ldr	r3, [pc, #112]	; (8004e70 <HAL_RCC_OscConfig+0x520>)
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d0f0      	beq.n	8004dea <HAL_RCC_OscConfig+0x49a>
 8004e08:	e018      	b.n	8004e3c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004e0a:	4b19      	ldr	r3, [pc, #100]	; (8004e70 <HAL_RCC_OscConfig+0x520>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	4a18      	ldr	r2, [pc, #96]	; (8004e70 <HAL_RCC_OscConfig+0x520>)
 8004e10:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004e14:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004e16:	f7fc fb0b 	bl	8001430 <HAL_GetTick>
 8004e1a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004e1c:	e008      	b.n	8004e30 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8004e1e:	f7fc fb07 	bl	8001430 <HAL_GetTick>
 8004e22:	4602      	mov	r2, r0
 8004e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e26:	1ad3      	subs	r3, r2, r3
 8004e28:	2b02      	cmp	r3, #2
 8004e2a:	d901      	bls.n	8004e30 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8004e2c:	2303      	movs	r3, #3
 8004e2e:	e198      	b.n	8005162 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004e30:	4b0f      	ldr	r3, [pc, #60]	; (8004e70 <HAL_RCC_OscConfig+0x520>)
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d1f0      	bne.n	8004e1e <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f003 0304 	and.w	r3, r3, #4
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	f000 8085 	beq.w	8004f54 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004e4a:	4b0a      	ldr	r3, [pc, #40]	; (8004e74 <HAL_RCC_OscConfig+0x524>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	4a09      	ldr	r2, [pc, #36]	; (8004e74 <HAL_RCC_OscConfig+0x524>)
 8004e50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e54:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004e56:	f7fc faeb 	bl	8001430 <HAL_GetTick>
 8004e5a:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004e5c:	e00c      	b.n	8004e78 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004e5e:	f7fc fae7 	bl	8001430 <HAL_GetTick>
 8004e62:	4602      	mov	r2, r0
 8004e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e66:	1ad3      	subs	r3, r2, r3
 8004e68:	2b64      	cmp	r3, #100	; 0x64
 8004e6a:	d905      	bls.n	8004e78 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8004e6c:	2303      	movs	r3, #3
 8004e6e:	e178      	b.n	8005162 <HAL_RCC_OscConfig+0x812>
 8004e70:	58024400 	.word	0x58024400
 8004e74:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004e78:	4b96      	ldr	r3, [pc, #600]	; (80050d4 <HAL_RCC_OscConfig+0x784>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d0ec      	beq.n	8004e5e <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	689b      	ldr	r3, [r3, #8]
 8004e88:	2b01      	cmp	r3, #1
 8004e8a:	d106      	bne.n	8004e9a <HAL_RCC_OscConfig+0x54a>
 8004e8c:	4b92      	ldr	r3, [pc, #584]	; (80050d8 <HAL_RCC_OscConfig+0x788>)
 8004e8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e90:	4a91      	ldr	r2, [pc, #580]	; (80050d8 <HAL_RCC_OscConfig+0x788>)
 8004e92:	f043 0301 	orr.w	r3, r3, #1
 8004e96:	6713      	str	r3, [r2, #112]	; 0x70
 8004e98:	e02d      	b.n	8004ef6 <HAL_RCC_OscConfig+0x5a6>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	689b      	ldr	r3, [r3, #8]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d10c      	bne.n	8004ebc <HAL_RCC_OscConfig+0x56c>
 8004ea2:	4b8d      	ldr	r3, [pc, #564]	; (80050d8 <HAL_RCC_OscConfig+0x788>)
 8004ea4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ea6:	4a8c      	ldr	r2, [pc, #560]	; (80050d8 <HAL_RCC_OscConfig+0x788>)
 8004ea8:	f023 0301 	bic.w	r3, r3, #1
 8004eac:	6713      	str	r3, [r2, #112]	; 0x70
 8004eae:	4b8a      	ldr	r3, [pc, #552]	; (80050d8 <HAL_RCC_OscConfig+0x788>)
 8004eb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004eb2:	4a89      	ldr	r2, [pc, #548]	; (80050d8 <HAL_RCC_OscConfig+0x788>)
 8004eb4:	f023 0304 	bic.w	r3, r3, #4
 8004eb8:	6713      	str	r3, [r2, #112]	; 0x70
 8004eba:	e01c      	b.n	8004ef6 <HAL_RCC_OscConfig+0x5a6>
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	689b      	ldr	r3, [r3, #8]
 8004ec0:	2b05      	cmp	r3, #5
 8004ec2:	d10c      	bne.n	8004ede <HAL_RCC_OscConfig+0x58e>
 8004ec4:	4b84      	ldr	r3, [pc, #528]	; (80050d8 <HAL_RCC_OscConfig+0x788>)
 8004ec6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ec8:	4a83      	ldr	r2, [pc, #524]	; (80050d8 <HAL_RCC_OscConfig+0x788>)
 8004eca:	f043 0304 	orr.w	r3, r3, #4
 8004ece:	6713      	str	r3, [r2, #112]	; 0x70
 8004ed0:	4b81      	ldr	r3, [pc, #516]	; (80050d8 <HAL_RCC_OscConfig+0x788>)
 8004ed2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ed4:	4a80      	ldr	r2, [pc, #512]	; (80050d8 <HAL_RCC_OscConfig+0x788>)
 8004ed6:	f043 0301 	orr.w	r3, r3, #1
 8004eda:	6713      	str	r3, [r2, #112]	; 0x70
 8004edc:	e00b      	b.n	8004ef6 <HAL_RCC_OscConfig+0x5a6>
 8004ede:	4b7e      	ldr	r3, [pc, #504]	; (80050d8 <HAL_RCC_OscConfig+0x788>)
 8004ee0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ee2:	4a7d      	ldr	r2, [pc, #500]	; (80050d8 <HAL_RCC_OscConfig+0x788>)
 8004ee4:	f023 0301 	bic.w	r3, r3, #1
 8004ee8:	6713      	str	r3, [r2, #112]	; 0x70
 8004eea:	4b7b      	ldr	r3, [pc, #492]	; (80050d8 <HAL_RCC_OscConfig+0x788>)
 8004eec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004eee:	4a7a      	ldr	r2, [pc, #488]	; (80050d8 <HAL_RCC_OscConfig+0x788>)
 8004ef0:	f023 0304 	bic.w	r3, r3, #4
 8004ef4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	689b      	ldr	r3, [r3, #8]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d015      	beq.n	8004f2a <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004efe:	f7fc fa97 	bl	8001430 <HAL_GetTick>
 8004f02:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004f04:	e00a      	b.n	8004f1c <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f06:	f7fc fa93 	bl	8001430 <HAL_GetTick>
 8004f0a:	4602      	mov	r2, r0
 8004f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f0e:	1ad3      	subs	r3, r2, r3
 8004f10:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d901      	bls.n	8004f1c <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8004f18:	2303      	movs	r3, #3
 8004f1a:	e122      	b.n	8005162 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004f1c:	4b6e      	ldr	r3, [pc, #440]	; (80050d8 <HAL_RCC_OscConfig+0x788>)
 8004f1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f20:	f003 0302 	and.w	r3, r3, #2
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d0ee      	beq.n	8004f06 <HAL_RCC_OscConfig+0x5b6>
 8004f28:	e014      	b.n	8004f54 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f2a:	f7fc fa81 	bl	8001430 <HAL_GetTick>
 8004f2e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004f30:	e00a      	b.n	8004f48 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f32:	f7fc fa7d 	bl	8001430 <HAL_GetTick>
 8004f36:	4602      	mov	r2, r0
 8004f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f3a:	1ad3      	subs	r3, r2, r3
 8004f3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d901      	bls.n	8004f48 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8004f44:	2303      	movs	r3, #3
 8004f46:	e10c      	b.n	8005162 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004f48:	4b63      	ldr	r3, [pc, #396]	; (80050d8 <HAL_RCC_OscConfig+0x788>)
 8004f4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f4c:	f003 0302 	and.w	r3, r3, #2
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d1ee      	bne.n	8004f32 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	f000 8101 	beq.w	8005160 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004f5e:	4b5e      	ldr	r3, [pc, #376]	; (80050d8 <HAL_RCC_OscConfig+0x788>)
 8004f60:	691b      	ldr	r3, [r3, #16]
 8004f62:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004f66:	2b18      	cmp	r3, #24
 8004f68:	f000 80bc 	beq.w	80050e4 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f70:	2b02      	cmp	r3, #2
 8004f72:	f040 8095 	bne.w	80050a0 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f76:	4b58      	ldr	r3, [pc, #352]	; (80050d8 <HAL_RCC_OscConfig+0x788>)
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	4a57      	ldr	r2, [pc, #348]	; (80050d8 <HAL_RCC_OscConfig+0x788>)
 8004f7c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004f80:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f82:	f7fc fa55 	bl	8001430 <HAL_GetTick>
 8004f86:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004f88:	e008      	b.n	8004f9c <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f8a:	f7fc fa51 	bl	8001430 <HAL_GetTick>
 8004f8e:	4602      	mov	r2, r0
 8004f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f92:	1ad3      	subs	r3, r2, r3
 8004f94:	2b02      	cmp	r3, #2
 8004f96:	d901      	bls.n	8004f9c <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8004f98:	2303      	movs	r3, #3
 8004f9a:	e0e2      	b.n	8005162 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004f9c:	4b4e      	ldr	r3, [pc, #312]	; (80050d8 <HAL_RCC_OscConfig+0x788>)
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d1f0      	bne.n	8004f8a <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004fa8:	4b4b      	ldr	r3, [pc, #300]	; (80050d8 <HAL_RCC_OscConfig+0x788>)
 8004faa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004fac:	4b4b      	ldr	r3, [pc, #300]	; (80050dc <HAL_RCC_OscConfig+0x78c>)
 8004fae:	4013      	ands	r3, r2
 8004fb0:	687a      	ldr	r2, [r7, #4]
 8004fb2:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8004fb4:	687a      	ldr	r2, [r7, #4]
 8004fb6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004fb8:	0112      	lsls	r2, r2, #4
 8004fba:	430a      	orrs	r2, r1
 8004fbc:	4946      	ldr	r1, [pc, #280]	; (80050d8 <HAL_RCC_OscConfig+0x788>)
 8004fbe:	4313      	orrs	r3, r2
 8004fc0:	628b      	str	r3, [r1, #40]	; 0x28
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fc6:	3b01      	subs	r3, #1
 8004fc8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fd0:	3b01      	subs	r3, #1
 8004fd2:	025b      	lsls	r3, r3, #9
 8004fd4:	b29b      	uxth	r3, r3
 8004fd6:	431a      	orrs	r2, r3
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fdc:	3b01      	subs	r3, #1
 8004fde:	041b      	lsls	r3, r3, #16
 8004fe0:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004fe4:	431a      	orrs	r2, r3
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fea:	3b01      	subs	r3, #1
 8004fec:	061b      	lsls	r3, r3, #24
 8004fee:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004ff2:	4939      	ldr	r1, [pc, #228]	; (80050d8 <HAL_RCC_OscConfig+0x788>)
 8004ff4:	4313      	orrs	r3, r2
 8004ff6:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8004ff8:	4b37      	ldr	r3, [pc, #220]	; (80050d8 <HAL_RCC_OscConfig+0x788>)
 8004ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ffc:	4a36      	ldr	r2, [pc, #216]	; (80050d8 <HAL_RCC_OscConfig+0x788>)
 8004ffe:	f023 0301 	bic.w	r3, r3, #1
 8005002:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005004:	4b34      	ldr	r3, [pc, #208]	; (80050d8 <HAL_RCC_OscConfig+0x788>)
 8005006:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005008:	4b35      	ldr	r3, [pc, #212]	; (80050e0 <HAL_RCC_OscConfig+0x790>)
 800500a:	4013      	ands	r3, r2
 800500c:	687a      	ldr	r2, [r7, #4]
 800500e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005010:	00d2      	lsls	r2, r2, #3
 8005012:	4931      	ldr	r1, [pc, #196]	; (80050d8 <HAL_RCC_OscConfig+0x788>)
 8005014:	4313      	orrs	r3, r2
 8005016:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005018:	4b2f      	ldr	r3, [pc, #188]	; (80050d8 <HAL_RCC_OscConfig+0x788>)
 800501a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800501c:	f023 020c 	bic.w	r2, r3, #12
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005024:	492c      	ldr	r1, [pc, #176]	; (80050d8 <HAL_RCC_OscConfig+0x788>)
 8005026:	4313      	orrs	r3, r2
 8005028:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800502a:	4b2b      	ldr	r3, [pc, #172]	; (80050d8 <HAL_RCC_OscConfig+0x788>)
 800502c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800502e:	f023 0202 	bic.w	r2, r3, #2
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005036:	4928      	ldr	r1, [pc, #160]	; (80050d8 <HAL_RCC_OscConfig+0x788>)
 8005038:	4313      	orrs	r3, r2
 800503a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800503c:	4b26      	ldr	r3, [pc, #152]	; (80050d8 <HAL_RCC_OscConfig+0x788>)
 800503e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005040:	4a25      	ldr	r2, [pc, #148]	; (80050d8 <HAL_RCC_OscConfig+0x788>)
 8005042:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005046:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005048:	4b23      	ldr	r3, [pc, #140]	; (80050d8 <HAL_RCC_OscConfig+0x788>)
 800504a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800504c:	4a22      	ldr	r2, [pc, #136]	; (80050d8 <HAL_RCC_OscConfig+0x788>)
 800504e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005052:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005054:	4b20      	ldr	r3, [pc, #128]	; (80050d8 <HAL_RCC_OscConfig+0x788>)
 8005056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005058:	4a1f      	ldr	r2, [pc, #124]	; (80050d8 <HAL_RCC_OscConfig+0x788>)
 800505a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800505e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8005060:	4b1d      	ldr	r3, [pc, #116]	; (80050d8 <HAL_RCC_OscConfig+0x788>)
 8005062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005064:	4a1c      	ldr	r2, [pc, #112]	; (80050d8 <HAL_RCC_OscConfig+0x788>)
 8005066:	f043 0301 	orr.w	r3, r3, #1
 800506a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800506c:	4b1a      	ldr	r3, [pc, #104]	; (80050d8 <HAL_RCC_OscConfig+0x788>)
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4a19      	ldr	r2, [pc, #100]	; (80050d8 <HAL_RCC_OscConfig+0x788>)
 8005072:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005076:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005078:	f7fc f9da 	bl	8001430 <HAL_GetTick>
 800507c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800507e:	e008      	b.n	8005092 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005080:	f7fc f9d6 	bl	8001430 <HAL_GetTick>
 8005084:	4602      	mov	r2, r0
 8005086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005088:	1ad3      	subs	r3, r2, r3
 800508a:	2b02      	cmp	r3, #2
 800508c:	d901      	bls.n	8005092 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 800508e:	2303      	movs	r3, #3
 8005090:	e067      	b.n	8005162 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005092:	4b11      	ldr	r3, [pc, #68]	; (80050d8 <HAL_RCC_OscConfig+0x788>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800509a:	2b00      	cmp	r3, #0
 800509c:	d0f0      	beq.n	8005080 <HAL_RCC_OscConfig+0x730>
 800509e:	e05f      	b.n	8005160 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050a0:	4b0d      	ldr	r3, [pc, #52]	; (80050d8 <HAL_RCC_OscConfig+0x788>)
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	4a0c      	ldr	r2, [pc, #48]	; (80050d8 <HAL_RCC_OscConfig+0x788>)
 80050a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80050aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050ac:	f7fc f9c0 	bl	8001430 <HAL_GetTick>
 80050b0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80050b2:	e008      	b.n	80050c6 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80050b4:	f7fc f9bc 	bl	8001430 <HAL_GetTick>
 80050b8:	4602      	mov	r2, r0
 80050ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050bc:	1ad3      	subs	r3, r2, r3
 80050be:	2b02      	cmp	r3, #2
 80050c0:	d901      	bls.n	80050c6 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 80050c2:	2303      	movs	r3, #3
 80050c4:	e04d      	b.n	8005162 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80050c6:	4b04      	ldr	r3, [pc, #16]	; (80050d8 <HAL_RCC_OscConfig+0x788>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d1f0      	bne.n	80050b4 <HAL_RCC_OscConfig+0x764>
 80050d2:	e045      	b.n	8005160 <HAL_RCC_OscConfig+0x810>
 80050d4:	58024800 	.word	0x58024800
 80050d8:	58024400 	.word	0x58024400
 80050dc:	fffffc0c 	.word	0xfffffc0c
 80050e0:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80050e4:	4b21      	ldr	r3, [pc, #132]	; (800516c <HAL_RCC_OscConfig+0x81c>)
 80050e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050e8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80050ea:	4b20      	ldr	r3, [pc, #128]	; (800516c <HAL_RCC_OscConfig+0x81c>)
 80050ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050ee:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050f4:	2b01      	cmp	r3, #1
 80050f6:	d031      	beq.n	800515c <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80050f8:	693b      	ldr	r3, [r7, #16]
 80050fa:	f003 0203 	and.w	r2, r3, #3
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005102:	429a      	cmp	r2, r3
 8005104:	d12a      	bne.n	800515c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005106:	693b      	ldr	r3, [r7, #16]
 8005108:	091b      	lsrs	r3, r3, #4
 800510a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005112:	429a      	cmp	r2, r3
 8005114:	d122      	bne.n	800515c <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005120:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005122:	429a      	cmp	r2, r3
 8005124:	d11a      	bne.n	800515c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	0a5b      	lsrs	r3, r3, #9
 800512a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005132:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005134:	429a      	cmp	r2, r3
 8005136:	d111      	bne.n	800515c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	0c1b      	lsrs	r3, r3, #16
 800513c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005144:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005146:	429a      	cmp	r2, r3
 8005148:	d108      	bne.n	800515c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	0e1b      	lsrs	r3, r3, #24
 800514e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005156:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005158:	429a      	cmp	r2, r3
 800515a:	d001      	beq.n	8005160 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 800515c:	2301      	movs	r3, #1
 800515e:	e000      	b.n	8005162 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8005160:	2300      	movs	r3, #0
}
 8005162:	4618      	mov	r0, r3
 8005164:	3730      	adds	r7, #48	; 0x30
 8005166:	46bd      	mov	sp, r7
 8005168:	bd80      	pop	{r7, pc}
 800516a:	bf00      	nop
 800516c:	58024400 	.word	0x58024400

08005170 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005170:	b580      	push	{r7, lr}
 8005172:	b086      	sub	sp, #24
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
 8005178:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d101      	bne.n	8005184 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005180:	2301      	movs	r3, #1
 8005182:	e19c      	b.n	80054be <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005184:	4b8a      	ldr	r3, [pc, #552]	; (80053b0 <HAL_RCC_ClockConfig+0x240>)
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f003 030f 	and.w	r3, r3, #15
 800518c:	683a      	ldr	r2, [r7, #0]
 800518e:	429a      	cmp	r2, r3
 8005190:	d910      	bls.n	80051b4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005192:	4b87      	ldr	r3, [pc, #540]	; (80053b0 <HAL_RCC_ClockConfig+0x240>)
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f023 020f 	bic.w	r2, r3, #15
 800519a:	4985      	ldr	r1, [pc, #532]	; (80053b0 <HAL_RCC_ClockConfig+0x240>)
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	4313      	orrs	r3, r2
 80051a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80051a2:	4b83      	ldr	r3, [pc, #524]	; (80053b0 <HAL_RCC_ClockConfig+0x240>)
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f003 030f 	and.w	r3, r3, #15
 80051aa:	683a      	ldr	r2, [r7, #0]
 80051ac:	429a      	cmp	r2, r3
 80051ae:	d001      	beq.n	80051b4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80051b0:	2301      	movs	r3, #1
 80051b2:	e184      	b.n	80054be <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f003 0304 	and.w	r3, r3, #4
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d010      	beq.n	80051e2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	691a      	ldr	r2, [r3, #16]
 80051c4:	4b7b      	ldr	r3, [pc, #492]	; (80053b4 <HAL_RCC_ClockConfig+0x244>)
 80051c6:	699b      	ldr	r3, [r3, #24]
 80051c8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80051cc:	429a      	cmp	r2, r3
 80051ce:	d908      	bls.n	80051e2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80051d0:	4b78      	ldr	r3, [pc, #480]	; (80053b4 <HAL_RCC_ClockConfig+0x244>)
 80051d2:	699b      	ldr	r3, [r3, #24]
 80051d4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	691b      	ldr	r3, [r3, #16]
 80051dc:	4975      	ldr	r1, [pc, #468]	; (80053b4 <HAL_RCC_ClockConfig+0x244>)
 80051de:	4313      	orrs	r3, r2
 80051e0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f003 0308 	and.w	r3, r3, #8
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d010      	beq.n	8005210 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	695a      	ldr	r2, [r3, #20]
 80051f2:	4b70      	ldr	r3, [pc, #448]	; (80053b4 <HAL_RCC_ClockConfig+0x244>)
 80051f4:	69db      	ldr	r3, [r3, #28]
 80051f6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80051fa:	429a      	cmp	r2, r3
 80051fc:	d908      	bls.n	8005210 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80051fe:	4b6d      	ldr	r3, [pc, #436]	; (80053b4 <HAL_RCC_ClockConfig+0x244>)
 8005200:	69db      	ldr	r3, [r3, #28]
 8005202:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	695b      	ldr	r3, [r3, #20]
 800520a:	496a      	ldr	r1, [pc, #424]	; (80053b4 <HAL_RCC_ClockConfig+0x244>)
 800520c:	4313      	orrs	r3, r2
 800520e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f003 0310 	and.w	r3, r3, #16
 8005218:	2b00      	cmp	r3, #0
 800521a:	d010      	beq.n	800523e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	699a      	ldr	r2, [r3, #24]
 8005220:	4b64      	ldr	r3, [pc, #400]	; (80053b4 <HAL_RCC_ClockConfig+0x244>)
 8005222:	69db      	ldr	r3, [r3, #28]
 8005224:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005228:	429a      	cmp	r2, r3
 800522a:	d908      	bls.n	800523e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800522c:	4b61      	ldr	r3, [pc, #388]	; (80053b4 <HAL_RCC_ClockConfig+0x244>)
 800522e:	69db      	ldr	r3, [r3, #28]
 8005230:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	699b      	ldr	r3, [r3, #24]
 8005238:	495e      	ldr	r1, [pc, #376]	; (80053b4 <HAL_RCC_ClockConfig+0x244>)
 800523a:	4313      	orrs	r3, r2
 800523c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f003 0320 	and.w	r3, r3, #32
 8005246:	2b00      	cmp	r3, #0
 8005248:	d010      	beq.n	800526c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	69da      	ldr	r2, [r3, #28]
 800524e:	4b59      	ldr	r3, [pc, #356]	; (80053b4 <HAL_RCC_ClockConfig+0x244>)
 8005250:	6a1b      	ldr	r3, [r3, #32]
 8005252:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005256:	429a      	cmp	r2, r3
 8005258:	d908      	bls.n	800526c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800525a:	4b56      	ldr	r3, [pc, #344]	; (80053b4 <HAL_RCC_ClockConfig+0x244>)
 800525c:	6a1b      	ldr	r3, [r3, #32]
 800525e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	69db      	ldr	r3, [r3, #28]
 8005266:	4953      	ldr	r1, [pc, #332]	; (80053b4 <HAL_RCC_ClockConfig+0x244>)
 8005268:	4313      	orrs	r3, r2
 800526a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f003 0302 	and.w	r3, r3, #2
 8005274:	2b00      	cmp	r3, #0
 8005276:	d010      	beq.n	800529a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	68da      	ldr	r2, [r3, #12]
 800527c:	4b4d      	ldr	r3, [pc, #308]	; (80053b4 <HAL_RCC_ClockConfig+0x244>)
 800527e:	699b      	ldr	r3, [r3, #24]
 8005280:	f003 030f 	and.w	r3, r3, #15
 8005284:	429a      	cmp	r2, r3
 8005286:	d908      	bls.n	800529a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005288:	4b4a      	ldr	r3, [pc, #296]	; (80053b4 <HAL_RCC_ClockConfig+0x244>)
 800528a:	699b      	ldr	r3, [r3, #24]
 800528c:	f023 020f 	bic.w	r2, r3, #15
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	68db      	ldr	r3, [r3, #12]
 8005294:	4947      	ldr	r1, [pc, #284]	; (80053b4 <HAL_RCC_ClockConfig+0x244>)
 8005296:	4313      	orrs	r3, r2
 8005298:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f003 0301 	and.w	r3, r3, #1
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d055      	beq.n	8005352 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80052a6:	4b43      	ldr	r3, [pc, #268]	; (80053b4 <HAL_RCC_ClockConfig+0x244>)
 80052a8:	699b      	ldr	r3, [r3, #24]
 80052aa:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	689b      	ldr	r3, [r3, #8]
 80052b2:	4940      	ldr	r1, [pc, #256]	; (80053b4 <HAL_RCC_ClockConfig+0x244>)
 80052b4:	4313      	orrs	r3, r2
 80052b6:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	685b      	ldr	r3, [r3, #4]
 80052bc:	2b02      	cmp	r3, #2
 80052be:	d107      	bne.n	80052d0 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80052c0:	4b3c      	ldr	r3, [pc, #240]	; (80053b4 <HAL_RCC_ClockConfig+0x244>)
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d121      	bne.n	8005310 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80052cc:	2301      	movs	r3, #1
 80052ce:	e0f6      	b.n	80054be <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	685b      	ldr	r3, [r3, #4]
 80052d4:	2b03      	cmp	r3, #3
 80052d6:	d107      	bne.n	80052e8 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80052d8:	4b36      	ldr	r3, [pc, #216]	; (80053b4 <HAL_RCC_ClockConfig+0x244>)
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d115      	bne.n	8005310 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80052e4:	2301      	movs	r3, #1
 80052e6:	e0ea      	b.n	80054be <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	685b      	ldr	r3, [r3, #4]
 80052ec:	2b01      	cmp	r3, #1
 80052ee:	d107      	bne.n	8005300 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80052f0:	4b30      	ldr	r3, [pc, #192]	; (80053b4 <HAL_RCC_ClockConfig+0x244>)
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d109      	bne.n	8005310 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80052fc:	2301      	movs	r3, #1
 80052fe:	e0de      	b.n	80054be <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005300:	4b2c      	ldr	r3, [pc, #176]	; (80053b4 <HAL_RCC_ClockConfig+0x244>)
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f003 0304 	and.w	r3, r3, #4
 8005308:	2b00      	cmp	r3, #0
 800530a:	d101      	bne.n	8005310 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800530c:	2301      	movs	r3, #1
 800530e:	e0d6      	b.n	80054be <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005310:	4b28      	ldr	r3, [pc, #160]	; (80053b4 <HAL_RCC_ClockConfig+0x244>)
 8005312:	691b      	ldr	r3, [r3, #16]
 8005314:	f023 0207 	bic.w	r2, r3, #7
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	685b      	ldr	r3, [r3, #4]
 800531c:	4925      	ldr	r1, [pc, #148]	; (80053b4 <HAL_RCC_ClockConfig+0x244>)
 800531e:	4313      	orrs	r3, r2
 8005320:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005322:	f7fc f885 	bl	8001430 <HAL_GetTick>
 8005326:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005328:	e00a      	b.n	8005340 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800532a:	f7fc f881 	bl	8001430 <HAL_GetTick>
 800532e:	4602      	mov	r2, r0
 8005330:	697b      	ldr	r3, [r7, #20]
 8005332:	1ad3      	subs	r3, r2, r3
 8005334:	f241 3288 	movw	r2, #5000	; 0x1388
 8005338:	4293      	cmp	r3, r2
 800533a:	d901      	bls.n	8005340 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800533c:	2303      	movs	r3, #3
 800533e:	e0be      	b.n	80054be <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005340:	4b1c      	ldr	r3, [pc, #112]	; (80053b4 <HAL_RCC_ClockConfig+0x244>)
 8005342:	691b      	ldr	r3, [r3, #16]
 8005344:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	685b      	ldr	r3, [r3, #4]
 800534c:	00db      	lsls	r3, r3, #3
 800534e:	429a      	cmp	r2, r3
 8005350:	d1eb      	bne.n	800532a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f003 0302 	and.w	r3, r3, #2
 800535a:	2b00      	cmp	r3, #0
 800535c:	d010      	beq.n	8005380 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	68da      	ldr	r2, [r3, #12]
 8005362:	4b14      	ldr	r3, [pc, #80]	; (80053b4 <HAL_RCC_ClockConfig+0x244>)
 8005364:	699b      	ldr	r3, [r3, #24]
 8005366:	f003 030f 	and.w	r3, r3, #15
 800536a:	429a      	cmp	r2, r3
 800536c:	d208      	bcs.n	8005380 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800536e:	4b11      	ldr	r3, [pc, #68]	; (80053b4 <HAL_RCC_ClockConfig+0x244>)
 8005370:	699b      	ldr	r3, [r3, #24]
 8005372:	f023 020f 	bic.w	r2, r3, #15
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	68db      	ldr	r3, [r3, #12]
 800537a:	490e      	ldr	r1, [pc, #56]	; (80053b4 <HAL_RCC_ClockConfig+0x244>)
 800537c:	4313      	orrs	r3, r2
 800537e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005380:	4b0b      	ldr	r3, [pc, #44]	; (80053b0 <HAL_RCC_ClockConfig+0x240>)
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f003 030f 	and.w	r3, r3, #15
 8005388:	683a      	ldr	r2, [r7, #0]
 800538a:	429a      	cmp	r2, r3
 800538c:	d214      	bcs.n	80053b8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800538e:	4b08      	ldr	r3, [pc, #32]	; (80053b0 <HAL_RCC_ClockConfig+0x240>)
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f023 020f 	bic.w	r2, r3, #15
 8005396:	4906      	ldr	r1, [pc, #24]	; (80053b0 <HAL_RCC_ClockConfig+0x240>)
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	4313      	orrs	r3, r2
 800539c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800539e:	4b04      	ldr	r3, [pc, #16]	; (80053b0 <HAL_RCC_ClockConfig+0x240>)
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f003 030f 	and.w	r3, r3, #15
 80053a6:	683a      	ldr	r2, [r7, #0]
 80053a8:	429a      	cmp	r2, r3
 80053aa:	d005      	beq.n	80053b8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80053ac:	2301      	movs	r3, #1
 80053ae:	e086      	b.n	80054be <HAL_RCC_ClockConfig+0x34e>
 80053b0:	52002000 	.word	0x52002000
 80053b4:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f003 0304 	and.w	r3, r3, #4
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d010      	beq.n	80053e6 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	691a      	ldr	r2, [r3, #16]
 80053c8:	4b3f      	ldr	r3, [pc, #252]	; (80054c8 <HAL_RCC_ClockConfig+0x358>)
 80053ca:	699b      	ldr	r3, [r3, #24]
 80053cc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80053d0:	429a      	cmp	r2, r3
 80053d2:	d208      	bcs.n	80053e6 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80053d4:	4b3c      	ldr	r3, [pc, #240]	; (80054c8 <HAL_RCC_ClockConfig+0x358>)
 80053d6:	699b      	ldr	r3, [r3, #24]
 80053d8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	691b      	ldr	r3, [r3, #16]
 80053e0:	4939      	ldr	r1, [pc, #228]	; (80054c8 <HAL_RCC_ClockConfig+0x358>)
 80053e2:	4313      	orrs	r3, r2
 80053e4:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f003 0308 	and.w	r3, r3, #8
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d010      	beq.n	8005414 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	695a      	ldr	r2, [r3, #20]
 80053f6:	4b34      	ldr	r3, [pc, #208]	; (80054c8 <HAL_RCC_ClockConfig+0x358>)
 80053f8:	69db      	ldr	r3, [r3, #28]
 80053fa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80053fe:	429a      	cmp	r2, r3
 8005400:	d208      	bcs.n	8005414 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005402:	4b31      	ldr	r3, [pc, #196]	; (80054c8 <HAL_RCC_ClockConfig+0x358>)
 8005404:	69db      	ldr	r3, [r3, #28]
 8005406:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	695b      	ldr	r3, [r3, #20]
 800540e:	492e      	ldr	r1, [pc, #184]	; (80054c8 <HAL_RCC_ClockConfig+0x358>)
 8005410:	4313      	orrs	r3, r2
 8005412:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f003 0310 	and.w	r3, r3, #16
 800541c:	2b00      	cmp	r3, #0
 800541e:	d010      	beq.n	8005442 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	699a      	ldr	r2, [r3, #24]
 8005424:	4b28      	ldr	r3, [pc, #160]	; (80054c8 <HAL_RCC_ClockConfig+0x358>)
 8005426:	69db      	ldr	r3, [r3, #28]
 8005428:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800542c:	429a      	cmp	r2, r3
 800542e:	d208      	bcs.n	8005442 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005430:	4b25      	ldr	r3, [pc, #148]	; (80054c8 <HAL_RCC_ClockConfig+0x358>)
 8005432:	69db      	ldr	r3, [r3, #28]
 8005434:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	699b      	ldr	r3, [r3, #24]
 800543c:	4922      	ldr	r1, [pc, #136]	; (80054c8 <HAL_RCC_ClockConfig+0x358>)
 800543e:	4313      	orrs	r3, r2
 8005440:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f003 0320 	and.w	r3, r3, #32
 800544a:	2b00      	cmp	r3, #0
 800544c:	d010      	beq.n	8005470 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	69da      	ldr	r2, [r3, #28]
 8005452:	4b1d      	ldr	r3, [pc, #116]	; (80054c8 <HAL_RCC_ClockConfig+0x358>)
 8005454:	6a1b      	ldr	r3, [r3, #32]
 8005456:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800545a:	429a      	cmp	r2, r3
 800545c:	d208      	bcs.n	8005470 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800545e:	4b1a      	ldr	r3, [pc, #104]	; (80054c8 <HAL_RCC_ClockConfig+0x358>)
 8005460:	6a1b      	ldr	r3, [r3, #32]
 8005462:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	69db      	ldr	r3, [r3, #28]
 800546a:	4917      	ldr	r1, [pc, #92]	; (80054c8 <HAL_RCC_ClockConfig+0x358>)
 800546c:	4313      	orrs	r3, r2
 800546e:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005470:	f000 f834 	bl	80054dc <HAL_RCC_GetSysClockFreq>
 8005474:	4602      	mov	r2, r0
 8005476:	4b14      	ldr	r3, [pc, #80]	; (80054c8 <HAL_RCC_ClockConfig+0x358>)
 8005478:	699b      	ldr	r3, [r3, #24]
 800547a:	0a1b      	lsrs	r3, r3, #8
 800547c:	f003 030f 	and.w	r3, r3, #15
 8005480:	4912      	ldr	r1, [pc, #72]	; (80054cc <HAL_RCC_ClockConfig+0x35c>)
 8005482:	5ccb      	ldrb	r3, [r1, r3]
 8005484:	f003 031f 	and.w	r3, r3, #31
 8005488:	fa22 f303 	lsr.w	r3, r2, r3
 800548c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800548e:	4b0e      	ldr	r3, [pc, #56]	; (80054c8 <HAL_RCC_ClockConfig+0x358>)
 8005490:	699b      	ldr	r3, [r3, #24]
 8005492:	f003 030f 	and.w	r3, r3, #15
 8005496:	4a0d      	ldr	r2, [pc, #52]	; (80054cc <HAL_RCC_ClockConfig+0x35c>)
 8005498:	5cd3      	ldrb	r3, [r2, r3]
 800549a:	f003 031f 	and.w	r3, r3, #31
 800549e:	693a      	ldr	r2, [r7, #16]
 80054a0:	fa22 f303 	lsr.w	r3, r2, r3
 80054a4:	4a0a      	ldr	r2, [pc, #40]	; (80054d0 <HAL_RCC_ClockConfig+0x360>)
 80054a6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80054a8:	4a0a      	ldr	r2, [pc, #40]	; (80054d4 <HAL_RCC_ClockConfig+0x364>)
 80054aa:	693b      	ldr	r3, [r7, #16]
 80054ac:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80054ae:	4b0a      	ldr	r3, [pc, #40]	; (80054d8 <HAL_RCC_ClockConfig+0x368>)
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	4618      	mov	r0, r3
 80054b4:	f7fb ff72 	bl	800139c <HAL_InitTick>
 80054b8:	4603      	mov	r3, r0
 80054ba:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80054bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80054be:	4618      	mov	r0, r3
 80054c0:	3718      	adds	r7, #24
 80054c2:	46bd      	mov	sp, r7
 80054c4:	bd80      	pop	{r7, pc}
 80054c6:	bf00      	nop
 80054c8:	58024400 	.word	0x58024400
 80054cc:	0800a7c4 	.word	0x0800a7c4
 80054d0:	24000004 	.word	0x24000004
 80054d4:	24000000 	.word	0x24000000
 80054d8:	24000008 	.word	0x24000008

080054dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80054dc:	b480      	push	{r7}
 80054de:	b089      	sub	sp, #36	; 0x24
 80054e0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80054e2:	4bb3      	ldr	r3, [pc, #716]	; (80057b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80054e4:	691b      	ldr	r3, [r3, #16]
 80054e6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80054ea:	2b18      	cmp	r3, #24
 80054ec:	f200 8155 	bhi.w	800579a <HAL_RCC_GetSysClockFreq+0x2be>
 80054f0:	a201      	add	r2, pc, #4	; (adr r2, 80054f8 <HAL_RCC_GetSysClockFreq+0x1c>)
 80054f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054f6:	bf00      	nop
 80054f8:	0800555d 	.word	0x0800555d
 80054fc:	0800579b 	.word	0x0800579b
 8005500:	0800579b 	.word	0x0800579b
 8005504:	0800579b 	.word	0x0800579b
 8005508:	0800579b 	.word	0x0800579b
 800550c:	0800579b 	.word	0x0800579b
 8005510:	0800579b 	.word	0x0800579b
 8005514:	0800579b 	.word	0x0800579b
 8005518:	08005583 	.word	0x08005583
 800551c:	0800579b 	.word	0x0800579b
 8005520:	0800579b 	.word	0x0800579b
 8005524:	0800579b 	.word	0x0800579b
 8005528:	0800579b 	.word	0x0800579b
 800552c:	0800579b 	.word	0x0800579b
 8005530:	0800579b 	.word	0x0800579b
 8005534:	0800579b 	.word	0x0800579b
 8005538:	08005589 	.word	0x08005589
 800553c:	0800579b 	.word	0x0800579b
 8005540:	0800579b 	.word	0x0800579b
 8005544:	0800579b 	.word	0x0800579b
 8005548:	0800579b 	.word	0x0800579b
 800554c:	0800579b 	.word	0x0800579b
 8005550:	0800579b 	.word	0x0800579b
 8005554:	0800579b 	.word	0x0800579b
 8005558:	0800558f 	.word	0x0800558f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800555c:	4b94      	ldr	r3, [pc, #592]	; (80057b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f003 0320 	and.w	r3, r3, #32
 8005564:	2b00      	cmp	r3, #0
 8005566:	d009      	beq.n	800557c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005568:	4b91      	ldr	r3, [pc, #580]	; (80057b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	08db      	lsrs	r3, r3, #3
 800556e:	f003 0303 	and.w	r3, r3, #3
 8005572:	4a90      	ldr	r2, [pc, #576]	; (80057b4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005574:	fa22 f303 	lsr.w	r3, r2, r3
 8005578:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800557a:	e111      	b.n	80057a0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800557c:	4b8d      	ldr	r3, [pc, #564]	; (80057b4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800557e:	61bb      	str	r3, [r7, #24]
    break;
 8005580:	e10e      	b.n	80057a0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8005582:	4b8d      	ldr	r3, [pc, #564]	; (80057b8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005584:	61bb      	str	r3, [r7, #24]
    break;
 8005586:	e10b      	b.n	80057a0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8005588:	4b8c      	ldr	r3, [pc, #560]	; (80057bc <HAL_RCC_GetSysClockFreq+0x2e0>)
 800558a:	61bb      	str	r3, [r7, #24]
    break;
 800558c:	e108      	b.n	80057a0 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800558e:	4b88      	ldr	r3, [pc, #544]	; (80057b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005590:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005592:	f003 0303 	and.w	r3, r3, #3
 8005596:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8005598:	4b85      	ldr	r3, [pc, #532]	; (80057b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800559a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800559c:	091b      	lsrs	r3, r3, #4
 800559e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80055a2:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80055a4:	4b82      	ldr	r3, [pc, #520]	; (80057b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80055a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055a8:	f003 0301 	and.w	r3, r3, #1
 80055ac:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80055ae:	4b80      	ldr	r3, [pc, #512]	; (80057b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80055b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055b2:	08db      	lsrs	r3, r3, #3
 80055b4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80055b8:	68fa      	ldr	r2, [r7, #12]
 80055ba:	fb02 f303 	mul.w	r3, r2, r3
 80055be:	ee07 3a90 	vmov	s15, r3
 80055c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055c6:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80055ca:	693b      	ldr	r3, [r7, #16]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	f000 80e1 	beq.w	8005794 <HAL_RCC_GetSysClockFreq+0x2b8>
 80055d2:	697b      	ldr	r3, [r7, #20]
 80055d4:	2b02      	cmp	r3, #2
 80055d6:	f000 8083 	beq.w	80056e0 <HAL_RCC_GetSysClockFreq+0x204>
 80055da:	697b      	ldr	r3, [r7, #20]
 80055dc:	2b02      	cmp	r3, #2
 80055de:	f200 80a1 	bhi.w	8005724 <HAL_RCC_GetSysClockFreq+0x248>
 80055e2:	697b      	ldr	r3, [r7, #20]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d003      	beq.n	80055f0 <HAL_RCC_GetSysClockFreq+0x114>
 80055e8:	697b      	ldr	r3, [r7, #20]
 80055ea:	2b01      	cmp	r3, #1
 80055ec:	d056      	beq.n	800569c <HAL_RCC_GetSysClockFreq+0x1c0>
 80055ee:	e099      	b.n	8005724 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80055f0:	4b6f      	ldr	r3, [pc, #444]	; (80057b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f003 0320 	and.w	r3, r3, #32
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d02d      	beq.n	8005658 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80055fc:	4b6c      	ldr	r3, [pc, #432]	; (80057b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	08db      	lsrs	r3, r3, #3
 8005602:	f003 0303 	and.w	r3, r3, #3
 8005606:	4a6b      	ldr	r2, [pc, #428]	; (80057b4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005608:	fa22 f303 	lsr.w	r3, r2, r3
 800560c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	ee07 3a90 	vmov	s15, r3
 8005614:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005618:	693b      	ldr	r3, [r7, #16]
 800561a:	ee07 3a90 	vmov	s15, r3
 800561e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005622:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005626:	4b62      	ldr	r3, [pc, #392]	; (80057b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800562a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800562e:	ee07 3a90 	vmov	s15, r3
 8005632:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005636:	ed97 6a02 	vldr	s12, [r7, #8]
 800563a:	eddf 5a61 	vldr	s11, [pc, #388]	; 80057c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800563e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005642:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005646:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800564a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800564e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005652:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8005656:	e087      	b.n	8005768 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005658:	693b      	ldr	r3, [r7, #16]
 800565a:	ee07 3a90 	vmov	s15, r3
 800565e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005662:	eddf 6a58 	vldr	s13, [pc, #352]	; 80057c4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8005666:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800566a:	4b51      	ldr	r3, [pc, #324]	; (80057b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800566c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800566e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005672:	ee07 3a90 	vmov	s15, r3
 8005676:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800567a:	ed97 6a02 	vldr	s12, [r7, #8]
 800567e:	eddf 5a50 	vldr	s11, [pc, #320]	; 80057c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005682:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005686:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800568a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800568e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005692:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005696:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800569a:	e065      	b.n	8005768 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800569c:	693b      	ldr	r3, [r7, #16]
 800569e:	ee07 3a90 	vmov	s15, r3
 80056a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056a6:	eddf 6a48 	vldr	s13, [pc, #288]	; 80057c8 <HAL_RCC_GetSysClockFreq+0x2ec>
 80056aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80056ae:	4b40      	ldr	r3, [pc, #256]	; (80057b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80056b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056b6:	ee07 3a90 	vmov	s15, r3
 80056ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80056be:	ed97 6a02 	vldr	s12, [r7, #8]
 80056c2:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80057c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80056c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80056ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80056ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80056d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80056d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056da:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80056de:	e043      	b.n	8005768 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80056e0:	693b      	ldr	r3, [r7, #16]
 80056e2:	ee07 3a90 	vmov	s15, r3
 80056e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056ea:	eddf 6a38 	vldr	s13, [pc, #224]	; 80057cc <HAL_RCC_GetSysClockFreq+0x2f0>
 80056ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80056f2:	4b2f      	ldr	r3, [pc, #188]	; (80057b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80056f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056fa:	ee07 3a90 	vmov	s15, r3
 80056fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005702:	ed97 6a02 	vldr	s12, [r7, #8]
 8005706:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80057c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800570a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800570e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005712:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005716:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800571a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800571e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005722:	e021      	b.n	8005768 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005724:	693b      	ldr	r3, [r7, #16]
 8005726:	ee07 3a90 	vmov	s15, r3
 800572a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800572e:	eddf 6a26 	vldr	s13, [pc, #152]	; 80057c8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005732:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005736:	4b1e      	ldr	r3, [pc, #120]	; (80057b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800573a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800573e:	ee07 3a90 	vmov	s15, r3
 8005742:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005746:	ed97 6a02 	vldr	s12, [r7, #8]
 800574a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80057c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800574e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005752:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005756:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800575a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800575e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005762:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005766:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8005768:	4b11      	ldr	r3, [pc, #68]	; (80057b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800576a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800576c:	0a5b      	lsrs	r3, r3, #9
 800576e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005772:	3301      	adds	r3, #1
 8005774:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	ee07 3a90 	vmov	s15, r3
 800577c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005780:	edd7 6a07 	vldr	s13, [r7, #28]
 8005784:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005788:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800578c:	ee17 3a90 	vmov	r3, s15
 8005790:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8005792:	e005      	b.n	80057a0 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8005794:	2300      	movs	r3, #0
 8005796:	61bb      	str	r3, [r7, #24]
    break;
 8005798:	e002      	b.n	80057a0 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800579a:	4b07      	ldr	r3, [pc, #28]	; (80057b8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800579c:	61bb      	str	r3, [r7, #24]
    break;
 800579e:	bf00      	nop
  }

  return sysclockfreq;
 80057a0:	69bb      	ldr	r3, [r7, #24]
}
 80057a2:	4618      	mov	r0, r3
 80057a4:	3724      	adds	r7, #36	; 0x24
 80057a6:	46bd      	mov	sp, r7
 80057a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ac:	4770      	bx	lr
 80057ae:	bf00      	nop
 80057b0:	58024400 	.word	0x58024400
 80057b4:	03d09000 	.word	0x03d09000
 80057b8:	003d0900 	.word	0x003d0900
 80057bc:	007a1200 	.word	0x007a1200
 80057c0:	46000000 	.word	0x46000000
 80057c4:	4c742400 	.word	0x4c742400
 80057c8:	4a742400 	.word	0x4a742400
 80057cc:	4af42400 	.word	0x4af42400

080057d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80057d0:	b580      	push	{r7, lr}
 80057d2:	b082      	sub	sp, #8
 80057d4:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80057d6:	f7ff fe81 	bl	80054dc <HAL_RCC_GetSysClockFreq>
 80057da:	4602      	mov	r2, r0
 80057dc:	4b10      	ldr	r3, [pc, #64]	; (8005820 <HAL_RCC_GetHCLKFreq+0x50>)
 80057de:	699b      	ldr	r3, [r3, #24]
 80057e0:	0a1b      	lsrs	r3, r3, #8
 80057e2:	f003 030f 	and.w	r3, r3, #15
 80057e6:	490f      	ldr	r1, [pc, #60]	; (8005824 <HAL_RCC_GetHCLKFreq+0x54>)
 80057e8:	5ccb      	ldrb	r3, [r1, r3]
 80057ea:	f003 031f 	and.w	r3, r3, #31
 80057ee:	fa22 f303 	lsr.w	r3, r2, r3
 80057f2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80057f4:	4b0a      	ldr	r3, [pc, #40]	; (8005820 <HAL_RCC_GetHCLKFreq+0x50>)
 80057f6:	699b      	ldr	r3, [r3, #24]
 80057f8:	f003 030f 	and.w	r3, r3, #15
 80057fc:	4a09      	ldr	r2, [pc, #36]	; (8005824 <HAL_RCC_GetHCLKFreq+0x54>)
 80057fe:	5cd3      	ldrb	r3, [r2, r3]
 8005800:	f003 031f 	and.w	r3, r3, #31
 8005804:	687a      	ldr	r2, [r7, #4]
 8005806:	fa22 f303 	lsr.w	r3, r2, r3
 800580a:	4a07      	ldr	r2, [pc, #28]	; (8005828 <HAL_RCC_GetHCLKFreq+0x58>)
 800580c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800580e:	4a07      	ldr	r2, [pc, #28]	; (800582c <HAL_RCC_GetHCLKFreq+0x5c>)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005814:	4b04      	ldr	r3, [pc, #16]	; (8005828 <HAL_RCC_GetHCLKFreq+0x58>)
 8005816:	681b      	ldr	r3, [r3, #0]
}
 8005818:	4618      	mov	r0, r3
 800581a:	3708      	adds	r7, #8
 800581c:	46bd      	mov	sp, r7
 800581e:	bd80      	pop	{r7, pc}
 8005820:	58024400 	.word	0x58024400
 8005824:	0800a7c4 	.word	0x0800a7c4
 8005828:	24000004 	.word	0x24000004
 800582c:	24000000 	.word	0x24000000

08005830 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005830:	b580      	push	{r7, lr}
 8005832:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005834:	f7ff ffcc 	bl	80057d0 <HAL_RCC_GetHCLKFreq>
 8005838:	4602      	mov	r2, r0
 800583a:	4b06      	ldr	r3, [pc, #24]	; (8005854 <HAL_RCC_GetPCLK1Freq+0x24>)
 800583c:	69db      	ldr	r3, [r3, #28]
 800583e:	091b      	lsrs	r3, r3, #4
 8005840:	f003 0307 	and.w	r3, r3, #7
 8005844:	4904      	ldr	r1, [pc, #16]	; (8005858 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005846:	5ccb      	ldrb	r3, [r1, r3]
 8005848:	f003 031f 	and.w	r3, r3, #31
 800584c:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005850:	4618      	mov	r0, r3
 8005852:	bd80      	pop	{r7, pc}
 8005854:	58024400 	.word	0x58024400
 8005858:	0800a7c4 	.word	0x0800a7c4

0800585c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800585c:	b580      	push	{r7, lr}
 800585e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005860:	f7ff ffb6 	bl	80057d0 <HAL_RCC_GetHCLKFreq>
 8005864:	4602      	mov	r2, r0
 8005866:	4b06      	ldr	r3, [pc, #24]	; (8005880 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005868:	69db      	ldr	r3, [r3, #28]
 800586a:	0a1b      	lsrs	r3, r3, #8
 800586c:	f003 0307 	and.w	r3, r3, #7
 8005870:	4904      	ldr	r1, [pc, #16]	; (8005884 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005872:	5ccb      	ldrb	r3, [r1, r3]
 8005874:	f003 031f 	and.w	r3, r3, #31
 8005878:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800587c:	4618      	mov	r0, r3
 800587e:	bd80      	pop	{r7, pc}
 8005880:	58024400 	.word	0x58024400
 8005884:	0800a7c4 	.word	0x0800a7c4

08005888 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005888:	b580      	push	{r7, lr}
 800588a:	b086      	sub	sp, #24
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005890:	2300      	movs	r3, #0
 8005892:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005894:	2300      	movs	r3, #0
 8005896:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d03f      	beq.n	8005924 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80058a8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80058ac:	d02a      	beq.n	8005904 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80058ae:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80058b2:	d824      	bhi.n	80058fe <HAL_RCCEx_PeriphCLKConfig+0x76>
 80058b4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80058b8:	d018      	beq.n	80058ec <HAL_RCCEx_PeriphCLKConfig+0x64>
 80058ba:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80058be:	d81e      	bhi.n	80058fe <HAL_RCCEx_PeriphCLKConfig+0x76>
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d003      	beq.n	80058cc <HAL_RCCEx_PeriphCLKConfig+0x44>
 80058c4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80058c8:	d007      	beq.n	80058da <HAL_RCCEx_PeriphCLKConfig+0x52>
 80058ca:	e018      	b.n	80058fe <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80058cc:	4bab      	ldr	r3, [pc, #684]	; (8005b7c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80058ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058d0:	4aaa      	ldr	r2, [pc, #680]	; (8005b7c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80058d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80058d6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80058d8:	e015      	b.n	8005906 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	3304      	adds	r3, #4
 80058de:	2102      	movs	r1, #2
 80058e0:	4618      	mov	r0, r3
 80058e2:	f001 fff3 	bl	80078cc <RCCEx_PLL2_Config>
 80058e6:	4603      	mov	r3, r0
 80058e8:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80058ea:	e00c      	b.n	8005906 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	3324      	adds	r3, #36	; 0x24
 80058f0:	2102      	movs	r1, #2
 80058f2:	4618      	mov	r0, r3
 80058f4:	f002 f89c 	bl	8007a30 <RCCEx_PLL3_Config>
 80058f8:	4603      	mov	r3, r0
 80058fa:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80058fc:	e003      	b.n	8005906 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80058fe:	2301      	movs	r3, #1
 8005900:	75fb      	strb	r3, [r7, #23]
      break;
 8005902:	e000      	b.n	8005906 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005904:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005906:	7dfb      	ldrb	r3, [r7, #23]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d109      	bne.n	8005920 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800590c:	4b9b      	ldr	r3, [pc, #620]	; (8005b7c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800590e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005910:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005918:	4998      	ldr	r1, [pc, #608]	; (8005b7c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800591a:	4313      	orrs	r3, r2
 800591c:	650b      	str	r3, [r1, #80]	; 0x50
 800591e:	e001      	b.n	8005924 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005920:	7dfb      	ldrb	r3, [r7, #23]
 8005922:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800592c:	2b00      	cmp	r3, #0
 800592e:	d03d      	beq.n	80059ac <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005934:	2b04      	cmp	r3, #4
 8005936:	d826      	bhi.n	8005986 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8005938:	a201      	add	r2, pc, #4	; (adr r2, 8005940 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800593a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800593e:	bf00      	nop
 8005940:	08005955 	.word	0x08005955
 8005944:	08005963 	.word	0x08005963
 8005948:	08005975 	.word	0x08005975
 800594c:	0800598d 	.word	0x0800598d
 8005950:	0800598d 	.word	0x0800598d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005954:	4b89      	ldr	r3, [pc, #548]	; (8005b7c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005958:	4a88      	ldr	r2, [pc, #544]	; (8005b7c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800595a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800595e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005960:	e015      	b.n	800598e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	3304      	adds	r3, #4
 8005966:	2100      	movs	r1, #0
 8005968:	4618      	mov	r0, r3
 800596a:	f001 ffaf 	bl	80078cc <RCCEx_PLL2_Config>
 800596e:	4603      	mov	r3, r0
 8005970:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005972:	e00c      	b.n	800598e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	3324      	adds	r3, #36	; 0x24
 8005978:	2100      	movs	r1, #0
 800597a:	4618      	mov	r0, r3
 800597c:	f002 f858 	bl	8007a30 <RCCEx_PLL3_Config>
 8005980:	4603      	mov	r3, r0
 8005982:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005984:	e003      	b.n	800598e <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005986:	2301      	movs	r3, #1
 8005988:	75fb      	strb	r3, [r7, #23]
      break;
 800598a:	e000      	b.n	800598e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800598c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800598e:	7dfb      	ldrb	r3, [r7, #23]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d109      	bne.n	80059a8 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005994:	4b79      	ldr	r3, [pc, #484]	; (8005b7c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005996:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005998:	f023 0207 	bic.w	r2, r3, #7
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059a0:	4976      	ldr	r1, [pc, #472]	; (8005b7c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80059a2:	4313      	orrs	r3, r2
 80059a4:	650b      	str	r3, [r1, #80]	; 0x50
 80059a6:	e001      	b.n	80059ac <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059a8:	7dfb      	ldrb	r3, [r7, #23]
 80059aa:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d042      	beq.n	8005a3e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80059c0:	d02b      	beq.n	8005a1a <HAL_RCCEx_PeriphCLKConfig+0x192>
 80059c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80059c6:	d825      	bhi.n	8005a14 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80059c8:	2bc0      	cmp	r3, #192	; 0xc0
 80059ca:	d028      	beq.n	8005a1e <HAL_RCCEx_PeriphCLKConfig+0x196>
 80059cc:	2bc0      	cmp	r3, #192	; 0xc0
 80059ce:	d821      	bhi.n	8005a14 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80059d0:	2b80      	cmp	r3, #128	; 0x80
 80059d2:	d016      	beq.n	8005a02 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 80059d4:	2b80      	cmp	r3, #128	; 0x80
 80059d6:	d81d      	bhi.n	8005a14 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d002      	beq.n	80059e2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 80059dc:	2b40      	cmp	r3, #64	; 0x40
 80059de:	d007      	beq.n	80059f0 <HAL_RCCEx_PeriphCLKConfig+0x168>
 80059e0:	e018      	b.n	8005a14 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80059e2:	4b66      	ldr	r3, [pc, #408]	; (8005b7c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80059e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059e6:	4a65      	ldr	r2, [pc, #404]	; (8005b7c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80059e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80059ec:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80059ee:	e017      	b.n	8005a20 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	3304      	adds	r3, #4
 80059f4:	2100      	movs	r1, #0
 80059f6:	4618      	mov	r0, r3
 80059f8:	f001 ff68 	bl	80078cc <RCCEx_PLL2_Config>
 80059fc:	4603      	mov	r3, r0
 80059fe:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8005a00:	e00e      	b.n	8005a20 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	3324      	adds	r3, #36	; 0x24
 8005a06:	2100      	movs	r1, #0
 8005a08:	4618      	mov	r0, r3
 8005a0a:	f002 f811 	bl	8007a30 <RCCEx_PLL3_Config>
 8005a0e:	4603      	mov	r3, r0
 8005a10:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8005a12:	e005      	b.n	8005a20 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005a14:	2301      	movs	r3, #1
 8005a16:	75fb      	strb	r3, [r7, #23]
      break;
 8005a18:	e002      	b.n	8005a20 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8005a1a:	bf00      	nop
 8005a1c:	e000      	b.n	8005a20 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8005a1e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005a20:	7dfb      	ldrb	r3, [r7, #23]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d109      	bne.n	8005a3a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8005a26:	4b55      	ldr	r3, [pc, #340]	; (8005b7c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005a28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a2a:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a32:	4952      	ldr	r1, [pc, #328]	; (8005b7c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005a34:	4313      	orrs	r3, r2
 8005a36:	650b      	str	r3, [r1, #80]	; 0x50
 8005a38:	e001      	b.n	8005a3e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a3a:	7dfb      	ldrb	r3, [r7, #23]
 8005a3c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d049      	beq.n	8005ade <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005a50:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005a54:	d030      	beq.n	8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8005a56:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005a5a:	d82a      	bhi.n	8005ab2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005a5c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005a60:	d02c      	beq.n	8005abc <HAL_RCCEx_PeriphCLKConfig+0x234>
 8005a62:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005a66:	d824      	bhi.n	8005ab2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005a68:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005a6c:	d018      	beq.n	8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8005a6e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005a72:	d81e      	bhi.n	8005ab2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d003      	beq.n	8005a80 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8005a78:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005a7c:	d007      	beq.n	8005a8e <HAL_RCCEx_PeriphCLKConfig+0x206>
 8005a7e:	e018      	b.n	8005ab2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a80:	4b3e      	ldr	r3, [pc, #248]	; (8005b7c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005a82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a84:	4a3d      	ldr	r2, [pc, #244]	; (8005b7c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005a86:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a8a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005a8c:	e017      	b.n	8005abe <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	3304      	adds	r3, #4
 8005a92:	2100      	movs	r1, #0
 8005a94:	4618      	mov	r0, r3
 8005a96:	f001 ff19 	bl	80078cc <RCCEx_PLL2_Config>
 8005a9a:	4603      	mov	r3, r0
 8005a9c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8005a9e:	e00e      	b.n	8005abe <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	3324      	adds	r3, #36	; 0x24
 8005aa4:	2100      	movs	r1, #0
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	f001 ffc2 	bl	8007a30 <RCCEx_PLL3_Config>
 8005aac:	4603      	mov	r3, r0
 8005aae:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005ab0:	e005      	b.n	8005abe <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8005ab2:	2301      	movs	r3, #1
 8005ab4:	75fb      	strb	r3, [r7, #23]
      break;
 8005ab6:	e002      	b.n	8005abe <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8005ab8:	bf00      	nop
 8005aba:	e000      	b.n	8005abe <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8005abc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005abe:	7dfb      	ldrb	r3, [r7, #23]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d10a      	bne.n	8005ada <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005ac4:	4b2d      	ldr	r3, [pc, #180]	; (8005b7c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005ac6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ac8:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005ad2:	492a      	ldr	r1, [pc, #168]	; (8005b7c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005ad4:	4313      	orrs	r3, r2
 8005ad6:	658b      	str	r3, [r1, #88]	; 0x58
 8005ad8:	e001      	b.n	8005ade <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ada:	7dfb      	ldrb	r3, [r7, #23]
 8005adc:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d04c      	beq.n	8005b84 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005af0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005af4:	d030      	beq.n	8005b58 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8005af6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005afa:	d82a      	bhi.n	8005b52 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8005afc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005b00:	d02c      	beq.n	8005b5c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8005b02:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005b06:	d824      	bhi.n	8005b52 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8005b08:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005b0c:	d018      	beq.n	8005b40 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8005b0e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005b12:	d81e      	bhi.n	8005b52 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d003      	beq.n	8005b20 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8005b18:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005b1c:	d007      	beq.n	8005b2e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8005b1e:	e018      	b.n	8005b52 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b20:	4b16      	ldr	r3, [pc, #88]	; (8005b7c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005b22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b24:	4a15      	ldr	r2, [pc, #84]	; (8005b7c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005b26:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005b2a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005b2c:	e017      	b.n	8005b5e <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	3304      	adds	r3, #4
 8005b32:	2100      	movs	r1, #0
 8005b34:	4618      	mov	r0, r3
 8005b36:	f001 fec9 	bl	80078cc <RCCEx_PLL2_Config>
 8005b3a:	4603      	mov	r3, r0
 8005b3c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8005b3e:	e00e      	b.n	8005b5e <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	3324      	adds	r3, #36	; 0x24
 8005b44:	2100      	movs	r1, #0
 8005b46:	4618      	mov	r0, r3
 8005b48:	f001 ff72 	bl	8007a30 <RCCEx_PLL3_Config>
 8005b4c:	4603      	mov	r3, r0
 8005b4e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005b50:	e005      	b.n	8005b5e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8005b52:	2301      	movs	r3, #1
 8005b54:	75fb      	strb	r3, [r7, #23]
      break;
 8005b56:	e002      	b.n	8005b5e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8005b58:	bf00      	nop
 8005b5a:	e000      	b.n	8005b5e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8005b5c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005b5e:	7dfb      	ldrb	r3, [r7, #23]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d10d      	bne.n	8005b80 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005b64:	4b05      	ldr	r3, [pc, #20]	; (8005b7c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005b66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b68:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005b72:	4902      	ldr	r1, [pc, #8]	; (8005b7c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005b74:	4313      	orrs	r3, r2
 8005b76:	658b      	str	r3, [r1, #88]	; 0x58
 8005b78:	e004      	b.n	8005b84 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8005b7a:	bf00      	nop
 8005b7c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b80:	7dfb      	ldrb	r3, [r7, #23]
 8005b82:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d032      	beq.n	8005bf6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b94:	2b30      	cmp	r3, #48	; 0x30
 8005b96:	d01c      	beq.n	8005bd2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8005b98:	2b30      	cmp	r3, #48	; 0x30
 8005b9a:	d817      	bhi.n	8005bcc <HAL_RCCEx_PeriphCLKConfig+0x344>
 8005b9c:	2b20      	cmp	r3, #32
 8005b9e:	d00c      	beq.n	8005bba <HAL_RCCEx_PeriphCLKConfig+0x332>
 8005ba0:	2b20      	cmp	r3, #32
 8005ba2:	d813      	bhi.n	8005bcc <HAL_RCCEx_PeriphCLKConfig+0x344>
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d016      	beq.n	8005bd6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8005ba8:	2b10      	cmp	r3, #16
 8005baa:	d10f      	bne.n	8005bcc <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005bac:	4baf      	ldr	r3, [pc, #700]	; (8005e6c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bb0:	4aae      	ldr	r2, [pc, #696]	; (8005e6c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005bb2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005bb6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8005bb8:	e00e      	b.n	8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	3304      	adds	r3, #4
 8005bbe:	2102      	movs	r1, #2
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	f001 fe83 	bl	80078cc <RCCEx_PLL2_Config>
 8005bc6:	4603      	mov	r3, r0
 8005bc8:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8005bca:	e005      	b.n	8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005bcc:	2301      	movs	r3, #1
 8005bce:	75fb      	strb	r3, [r7, #23]
      break;
 8005bd0:	e002      	b.n	8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8005bd2:	bf00      	nop
 8005bd4:	e000      	b.n	8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8005bd6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005bd8:	7dfb      	ldrb	r3, [r7, #23]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d109      	bne.n	8005bf2 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005bde:	4ba3      	ldr	r3, [pc, #652]	; (8005e6c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005be0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005be2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005bea:	49a0      	ldr	r1, [pc, #640]	; (8005e6c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005bec:	4313      	orrs	r3, r2
 8005bee:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005bf0:	e001      	b.n	8005bf6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bf2:	7dfb      	ldrb	r3, [r7, #23]
 8005bf4:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d047      	beq.n	8005c92 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c06:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005c0a:	d030      	beq.n	8005c6e <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8005c0c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005c10:	d82a      	bhi.n	8005c68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8005c12:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005c16:	d02c      	beq.n	8005c72 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8005c18:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005c1c:	d824      	bhi.n	8005c68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8005c1e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c22:	d018      	beq.n	8005c56 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8005c24:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c28:	d81e      	bhi.n	8005c68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d003      	beq.n	8005c36 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8005c2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c32:	d007      	beq.n	8005c44 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8005c34:	e018      	b.n	8005c68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c36:	4b8d      	ldr	r3, [pc, #564]	; (8005e6c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005c38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c3a:	4a8c      	ldr	r2, [pc, #560]	; (8005e6c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005c3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005c40:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005c42:	e017      	b.n	8005c74 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	3304      	adds	r3, #4
 8005c48:	2100      	movs	r1, #0
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	f001 fe3e 	bl	80078cc <RCCEx_PLL2_Config>
 8005c50:	4603      	mov	r3, r0
 8005c52:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005c54:	e00e      	b.n	8005c74 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	3324      	adds	r3, #36	; 0x24
 8005c5a:	2100      	movs	r1, #0
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	f001 fee7 	bl	8007a30 <RCCEx_PLL3_Config>
 8005c62:	4603      	mov	r3, r0
 8005c64:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005c66:	e005      	b.n	8005c74 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005c68:	2301      	movs	r3, #1
 8005c6a:	75fb      	strb	r3, [r7, #23]
      break;
 8005c6c:	e002      	b.n	8005c74 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8005c6e:	bf00      	nop
 8005c70:	e000      	b.n	8005c74 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8005c72:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005c74:	7dfb      	ldrb	r3, [r7, #23]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d109      	bne.n	8005c8e <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005c7a:	4b7c      	ldr	r3, [pc, #496]	; (8005e6c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005c7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c7e:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c86:	4979      	ldr	r1, [pc, #484]	; (8005e6c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005c88:	4313      	orrs	r3, r2
 8005c8a:	650b      	str	r3, [r1, #80]	; 0x50
 8005c8c:	e001      	b.n	8005c92 <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c8e:	7dfb      	ldrb	r3, [r7, #23]
 8005c90:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d049      	beq.n	8005d32 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ca2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005ca6:	d02e      	beq.n	8005d06 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8005ca8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005cac:	d828      	bhi.n	8005d00 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8005cae:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005cb2:	d02a      	beq.n	8005d0a <HAL_RCCEx_PeriphCLKConfig+0x482>
 8005cb4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005cb8:	d822      	bhi.n	8005d00 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8005cba:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005cbe:	d026      	beq.n	8005d0e <HAL_RCCEx_PeriphCLKConfig+0x486>
 8005cc0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005cc4:	d81c      	bhi.n	8005d00 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8005cc6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005cca:	d010      	beq.n	8005cee <HAL_RCCEx_PeriphCLKConfig+0x466>
 8005ccc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005cd0:	d816      	bhi.n	8005d00 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d01d      	beq.n	8005d12 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8005cd6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005cda:	d111      	bne.n	8005d00 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	3304      	adds	r3, #4
 8005ce0:	2101      	movs	r1, #1
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	f001 fdf2 	bl	80078cc <RCCEx_PLL2_Config>
 8005ce8:	4603      	mov	r3, r0
 8005cea:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8005cec:	e012      	b.n	8005d14 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	3324      	adds	r3, #36	; 0x24
 8005cf2:	2101      	movs	r1, #1
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	f001 fe9b 	bl	8007a30 <RCCEx_PLL3_Config>
 8005cfa:	4603      	mov	r3, r0
 8005cfc:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8005cfe:	e009      	b.n	8005d14 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005d00:	2301      	movs	r3, #1
 8005d02:	75fb      	strb	r3, [r7, #23]
      break;
 8005d04:	e006      	b.n	8005d14 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8005d06:	bf00      	nop
 8005d08:	e004      	b.n	8005d14 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8005d0a:	bf00      	nop
 8005d0c:	e002      	b.n	8005d14 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8005d0e:	bf00      	nop
 8005d10:	e000      	b.n	8005d14 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8005d12:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005d14:	7dfb      	ldrb	r3, [r7, #23]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d109      	bne.n	8005d2e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005d1a:	4b54      	ldr	r3, [pc, #336]	; (8005e6c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005d1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d1e:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d26:	4951      	ldr	r1, [pc, #324]	; (8005e6c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005d28:	4313      	orrs	r3, r2
 8005d2a:	650b      	str	r3, [r1, #80]	; 0x50
 8005d2c:	e001      	b.n	8005d32 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d2e:	7dfb      	ldrb	r3, [r7, #23]
 8005d30:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d04b      	beq.n	8005dd6 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005d44:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005d48:	d02e      	beq.n	8005da8 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8005d4a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005d4e:	d828      	bhi.n	8005da2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8005d50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d54:	d02a      	beq.n	8005dac <HAL_RCCEx_PeriphCLKConfig+0x524>
 8005d56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d5a:	d822      	bhi.n	8005da2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8005d5c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005d60:	d026      	beq.n	8005db0 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8005d62:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005d66:	d81c      	bhi.n	8005da2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8005d68:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005d6c:	d010      	beq.n	8005d90 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8005d6e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005d72:	d816      	bhi.n	8005da2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d01d      	beq.n	8005db4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8005d78:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005d7c:	d111      	bne.n	8005da2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	3304      	adds	r3, #4
 8005d82:	2101      	movs	r1, #1
 8005d84:	4618      	mov	r0, r3
 8005d86:	f001 fda1 	bl	80078cc <RCCEx_PLL2_Config>
 8005d8a:	4603      	mov	r3, r0
 8005d8c:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8005d8e:	e012      	b.n	8005db6 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	3324      	adds	r3, #36	; 0x24
 8005d94:	2101      	movs	r1, #1
 8005d96:	4618      	mov	r0, r3
 8005d98:	f001 fe4a 	bl	8007a30 <RCCEx_PLL3_Config>
 8005d9c:	4603      	mov	r3, r0
 8005d9e:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8005da0:	e009      	b.n	8005db6 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8005da2:	2301      	movs	r3, #1
 8005da4:	75fb      	strb	r3, [r7, #23]
      break;
 8005da6:	e006      	b.n	8005db6 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8005da8:	bf00      	nop
 8005daa:	e004      	b.n	8005db6 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8005dac:	bf00      	nop
 8005dae:	e002      	b.n	8005db6 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8005db0:	bf00      	nop
 8005db2:	e000      	b.n	8005db6 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8005db4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005db6:	7dfb      	ldrb	r3, [r7, #23]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d10a      	bne.n	8005dd2 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005dbc:	4b2b      	ldr	r3, [pc, #172]	; (8005e6c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005dbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005dc0:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005dca:	4928      	ldr	r1, [pc, #160]	; (8005e6c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005dcc:	4313      	orrs	r3, r2
 8005dce:	658b      	str	r3, [r1, #88]	; 0x58
 8005dd0:	e001      	b.n	8005dd6 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005dd2:	7dfb      	ldrb	r3, [r7, #23]
 8005dd4:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d02f      	beq.n	8005e42 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005de6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005dea:	d00e      	beq.n	8005e0a <HAL_RCCEx_PeriphCLKConfig+0x582>
 8005dec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005df0:	d814      	bhi.n	8005e1c <HAL_RCCEx_PeriphCLKConfig+0x594>
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d015      	beq.n	8005e22 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8005df6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005dfa:	d10f      	bne.n	8005e1c <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005dfc:	4b1b      	ldr	r3, [pc, #108]	; (8005e6c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005dfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e00:	4a1a      	ldr	r2, [pc, #104]	; (8005e6c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005e02:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005e06:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8005e08:	e00c      	b.n	8005e24 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	3304      	adds	r3, #4
 8005e0e:	2101      	movs	r1, #1
 8005e10:	4618      	mov	r0, r3
 8005e12:	f001 fd5b 	bl	80078cc <RCCEx_PLL2_Config>
 8005e16:	4603      	mov	r3, r0
 8005e18:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8005e1a:	e003      	b.n	8005e24 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005e1c:	2301      	movs	r3, #1
 8005e1e:	75fb      	strb	r3, [r7, #23]
      break;
 8005e20:	e000      	b.n	8005e24 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8005e22:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005e24:	7dfb      	ldrb	r3, [r7, #23]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d109      	bne.n	8005e3e <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005e2a:	4b10      	ldr	r3, [pc, #64]	; (8005e6c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005e2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e2e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e36:	490d      	ldr	r1, [pc, #52]	; (8005e6c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005e38:	4313      	orrs	r3, r2
 8005e3a:	650b      	str	r3, [r1, #80]	; 0x50
 8005e3c:	e001      	b.n	8005e42 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e3e:	7dfb      	ldrb	r3, [r7, #23]
 8005e40:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d033      	beq.n	8005eb6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e52:	2b03      	cmp	r3, #3
 8005e54:	d81c      	bhi.n	8005e90 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8005e56:	a201      	add	r2, pc, #4	; (adr r2, 8005e5c <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8005e58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e5c:	08005e97 	.word	0x08005e97
 8005e60:	08005e71 	.word	0x08005e71
 8005e64:	08005e7f 	.word	0x08005e7f
 8005e68:	08005e97 	.word	0x08005e97
 8005e6c:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e70:	4bb8      	ldr	r3, [pc, #736]	; (8006154 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e74:	4ab7      	ldr	r2, [pc, #732]	; (8006154 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005e76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005e7a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8005e7c:	e00c      	b.n	8005e98 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	3304      	adds	r3, #4
 8005e82:	2102      	movs	r1, #2
 8005e84:	4618      	mov	r0, r3
 8005e86:	f001 fd21 	bl	80078cc <RCCEx_PLL2_Config>
 8005e8a:	4603      	mov	r3, r0
 8005e8c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8005e8e:	e003      	b.n	8005e98 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005e90:	2301      	movs	r3, #1
 8005e92:	75fb      	strb	r3, [r7, #23]
      break;
 8005e94:	e000      	b.n	8005e98 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8005e96:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005e98:	7dfb      	ldrb	r3, [r7, #23]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d109      	bne.n	8005eb2 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005e9e:	4bad      	ldr	r3, [pc, #692]	; (8006154 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005ea0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ea2:	f023 0203 	bic.w	r2, r3, #3
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005eaa:	49aa      	ldr	r1, [pc, #680]	; (8006154 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005eac:	4313      	orrs	r3, r2
 8005eae:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005eb0:	e001      	b.n	8005eb6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005eb2:	7dfb      	ldrb	r3, [r7, #23]
 8005eb4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	f000 8086 	beq.w	8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005ec4:	4ba4      	ldr	r3, [pc, #656]	; (8006158 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	4aa3      	ldr	r2, [pc, #652]	; (8006158 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8005eca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ece:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005ed0:	f7fb faae 	bl	8001430 <HAL_GetTick>
 8005ed4:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005ed6:	e009      	b.n	8005eec <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ed8:	f7fb faaa 	bl	8001430 <HAL_GetTick>
 8005edc:	4602      	mov	r2, r0
 8005ede:	693b      	ldr	r3, [r7, #16]
 8005ee0:	1ad3      	subs	r3, r2, r3
 8005ee2:	2b64      	cmp	r3, #100	; 0x64
 8005ee4:	d902      	bls.n	8005eec <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8005ee6:	2303      	movs	r3, #3
 8005ee8:	75fb      	strb	r3, [r7, #23]
        break;
 8005eea:	e005      	b.n	8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005eec:	4b9a      	ldr	r3, [pc, #616]	; (8006158 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d0ef      	beq.n	8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8005ef8:	7dfb      	ldrb	r3, [r7, #23]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d166      	bne.n	8005fcc <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005efe:	4b95      	ldr	r3, [pc, #596]	; (8006154 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005f00:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005f08:	4053      	eors	r3, r2
 8005f0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d013      	beq.n	8005f3a <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005f12:	4b90      	ldr	r3, [pc, #576]	; (8006154 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005f14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f1a:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005f1c:	4b8d      	ldr	r3, [pc, #564]	; (8006154 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005f1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f20:	4a8c      	ldr	r2, [pc, #560]	; (8006154 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005f22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f26:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005f28:	4b8a      	ldr	r3, [pc, #552]	; (8006154 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005f2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f2c:	4a89      	ldr	r2, [pc, #548]	; (8006154 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005f2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f32:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005f34:	4a87      	ldr	r2, [pc, #540]	; (8006154 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005f40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f44:	d115      	bne.n	8005f72 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f46:	f7fb fa73 	bl	8001430 <HAL_GetTick>
 8005f4a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005f4c:	e00b      	b.n	8005f66 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f4e:	f7fb fa6f 	bl	8001430 <HAL_GetTick>
 8005f52:	4602      	mov	r2, r0
 8005f54:	693b      	ldr	r3, [r7, #16]
 8005f56:	1ad3      	subs	r3, r2, r3
 8005f58:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f5c:	4293      	cmp	r3, r2
 8005f5e:	d902      	bls.n	8005f66 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8005f60:	2303      	movs	r3, #3
 8005f62:	75fb      	strb	r3, [r7, #23]
            break;
 8005f64:	e005      	b.n	8005f72 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005f66:	4b7b      	ldr	r3, [pc, #492]	; (8006154 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005f68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f6a:	f003 0302 	and.w	r3, r3, #2
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d0ed      	beq.n	8005f4e <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8005f72:	7dfb      	ldrb	r3, [r7, #23]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d126      	bne.n	8005fc6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005f7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f82:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005f86:	d10d      	bne.n	8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8005f88:	4b72      	ldr	r3, [pc, #456]	; (8006154 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005f8a:	691b      	ldr	r3, [r3, #16]
 8005f8c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005f96:	0919      	lsrs	r1, r3, #4
 8005f98:	4b70      	ldr	r3, [pc, #448]	; (800615c <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8005f9a:	400b      	ands	r3, r1
 8005f9c:	496d      	ldr	r1, [pc, #436]	; (8006154 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005f9e:	4313      	orrs	r3, r2
 8005fa0:	610b      	str	r3, [r1, #16]
 8005fa2:	e005      	b.n	8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8005fa4:	4b6b      	ldr	r3, [pc, #428]	; (8006154 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005fa6:	691b      	ldr	r3, [r3, #16]
 8005fa8:	4a6a      	ldr	r2, [pc, #424]	; (8006154 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005faa:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005fae:	6113      	str	r3, [r2, #16]
 8005fb0:	4b68      	ldr	r3, [pc, #416]	; (8006154 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005fb2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005fba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005fbe:	4965      	ldr	r1, [pc, #404]	; (8006154 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005fc0:	4313      	orrs	r3, r2
 8005fc2:	670b      	str	r3, [r1, #112]	; 0x70
 8005fc4:	e004      	b.n	8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005fc6:	7dfb      	ldrb	r3, [r7, #23]
 8005fc8:	75bb      	strb	r3, [r7, #22]
 8005fca:	e001      	b.n	8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fcc:	7dfb      	ldrb	r3, [r7, #23]
 8005fce:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f003 0301 	and.w	r3, r3, #1
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d07e      	beq.n	80060da <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005fe0:	2b28      	cmp	r3, #40	; 0x28
 8005fe2:	d867      	bhi.n	80060b4 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8005fe4:	a201      	add	r2, pc, #4	; (adr r2, 8005fec <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8005fe6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fea:	bf00      	nop
 8005fec:	080060bb 	.word	0x080060bb
 8005ff0:	080060b5 	.word	0x080060b5
 8005ff4:	080060b5 	.word	0x080060b5
 8005ff8:	080060b5 	.word	0x080060b5
 8005ffc:	080060b5 	.word	0x080060b5
 8006000:	080060b5 	.word	0x080060b5
 8006004:	080060b5 	.word	0x080060b5
 8006008:	080060b5 	.word	0x080060b5
 800600c:	08006091 	.word	0x08006091
 8006010:	080060b5 	.word	0x080060b5
 8006014:	080060b5 	.word	0x080060b5
 8006018:	080060b5 	.word	0x080060b5
 800601c:	080060b5 	.word	0x080060b5
 8006020:	080060b5 	.word	0x080060b5
 8006024:	080060b5 	.word	0x080060b5
 8006028:	080060b5 	.word	0x080060b5
 800602c:	080060a3 	.word	0x080060a3
 8006030:	080060b5 	.word	0x080060b5
 8006034:	080060b5 	.word	0x080060b5
 8006038:	080060b5 	.word	0x080060b5
 800603c:	080060b5 	.word	0x080060b5
 8006040:	080060b5 	.word	0x080060b5
 8006044:	080060b5 	.word	0x080060b5
 8006048:	080060b5 	.word	0x080060b5
 800604c:	080060bb 	.word	0x080060bb
 8006050:	080060b5 	.word	0x080060b5
 8006054:	080060b5 	.word	0x080060b5
 8006058:	080060b5 	.word	0x080060b5
 800605c:	080060b5 	.word	0x080060b5
 8006060:	080060b5 	.word	0x080060b5
 8006064:	080060b5 	.word	0x080060b5
 8006068:	080060b5 	.word	0x080060b5
 800606c:	080060bb 	.word	0x080060bb
 8006070:	080060b5 	.word	0x080060b5
 8006074:	080060b5 	.word	0x080060b5
 8006078:	080060b5 	.word	0x080060b5
 800607c:	080060b5 	.word	0x080060b5
 8006080:	080060b5 	.word	0x080060b5
 8006084:	080060b5 	.word	0x080060b5
 8006088:	080060b5 	.word	0x080060b5
 800608c:	080060bb 	.word	0x080060bb
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	3304      	adds	r3, #4
 8006094:	2101      	movs	r1, #1
 8006096:	4618      	mov	r0, r3
 8006098:	f001 fc18 	bl	80078cc <RCCEx_PLL2_Config>
 800609c:	4603      	mov	r3, r0
 800609e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80060a0:	e00c      	b.n	80060bc <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	3324      	adds	r3, #36	; 0x24
 80060a6:	2101      	movs	r1, #1
 80060a8:	4618      	mov	r0, r3
 80060aa:	f001 fcc1 	bl	8007a30 <RCCEx_PLL3_Config>
 80060ae:	4603      	mov	r3, r0
 80060b0:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80060b2:	e003      	b.n	80060bc <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80060b4:	2301      	movs	r3, #1
 80060b6:	75fb      	strb	r3, [r7, #23]
      break;
 80060b8:	e000      	b.n	80060bc <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 80060ba:	bf00      	nop
    }

    if(ret == HAL_OK)
 80060bc:	7dfb      	ldrb	r3, [r7, #23]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d109      	bne.n	80060d6 <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80060c2:	4b24      	ldr	r3, [pc, #144]	; (8006154 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80060c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060c6:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80060ce:	4921      	ldr	r1, [pc, #132]	; (8006154 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80060d0:	4313      	orrs	r3, r2
 80060d2:	654b      	str	r3, [r1, #84]	; 0x54
 80060d4:	e001      	b.n	80060da <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060d6:	7dfb      	ldrb	r3, [r7, #23]
 80060d8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f003 0302 	and.w	r3, r3, #2
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d03e      	beq.n	8006164 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80060ea:	2b05      	cmp	r3, #5
 80060ec:	d820      	bhi.n	8006130 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 80060ee:	a201      	add	r2, pc, #4	; (adr r2, 80060f4 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 80060f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060f4:	08006137 	.word	0x08006137
 80060f8:	0800610d 	.word	0x0800610d
 80060fc:	0800611f 	.word	0x0800611f
 8006100:	08006137 	.word	0x08006137
 8006104:	08006137 	.word	0x08006137
 8006108:	08006137 	.word	0x08006137
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	3304      	adds	r3, #4
 8006110:	2101      	movs	r1, #1
 8006112:	4618      	mov	r0, r3
 8006114:	f001 fbda 	bl	80078cc <RCCEx_PLL2_Config>
 8006118:	4603      	mov	r3, r0
 800611a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800611c:	e00c      	b.n	8006138 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	3324      	adds	r3, #36	; 0x24
 8006122:	2101      	movs	r1, #1
 8006124:	4618      	mov	r0, r3
 8006126:	f001 fc83 	bl	8007a30 <RCCEx_PLL3_Config>
 800612a:	4603      	mov	r3, r0
 800612c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800612e:	e003      	b.n	8006138 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006130:	2301      	movs	r3, #1
 8006132:	75fb      	strb	r3, [r7, #23]
      break;
 8006134:	e000      	b.n	8006138 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 8006136:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006138:	7dfb      	ldrb	r3, [r7, #23]
 800613a:	2b00      	cmp	r3, #0
 800613c:	d110      	bne.n	8006160 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800613e:	4b05      	ldr	r3, [pc, #20]	; (8006154 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006140:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006142:	f023 0207 	bic.w	r2, r3, #7
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800614a:	4902      	ldr	r1, [pc, #8]	; (8006154 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800614c:	4313      	orrs	r3, r2
 800614e:	654b      	str	r3, [r1, #84]	; 0x54
 8006150:	e008      	b.n	8006164 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 8006152:	bf00      	nop
 8006154:	58024400 	.word	0x58024400
 8006158:	58024800 	.word	0x58024800
 800615c:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006160:	7dfb      	ldrb	r3, [r7, #23]
 8006162:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f003 0304 	and.w	r3, r3, #4
 800616c:	2b00      	cmp	r3, #0
 800616e:	d039      	beq.n	80061e4 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006176:	2b05      	cmp	r3, #5
 8006178:	d820      	bhi.n	80061bc <HAL_RCCEx_PeriphCLKConfig+0x934>
 800617a:	a201      	add	r2, pc, #4	; (adr r2, 8006180 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 800617c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006180:	080061c3 	.word	0x080061c3
 8006184:	08006199 	.word	0x08006199
 8006188:	080061ab 	.word	0x080061ab
 800618c:	080061c3 	.word	0x080061c3
 8006190:	080061c3 	.word	0x080061c3
 8006194:	080061c3 	.word	0x080061c3
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	3304      	adds	r3, #4
 800619c:	2101      	movs	r1, #1
 800619e:	4618      	mov	r0, r3
 80061a0:	f001 fb94 	bl	80078cc <RCCEx_PLL2_Config>
 80061a4:	4603      	mov	r3, r0
 80061a6:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80061a8:	e00c      	b.n	80061c4 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	3324      	adds	r3, #36	; 0x24
 80061ae:	2101      	movs	r1, #1
 80061b0:	4618      	mov	r0, r3
 80061b2:	f001 fc3d 	bl	8007a30 <RCCEx_PLL3_Config>
 80061b6:	4603      	mov	r3, r0
 80061b8:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80061ba:	e003      	b.n	80061c4 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80061bc:	2301      	movs	r3, #1
 80061be:	75fb      	strb	r3, [r7, #23]
      break;
 80061c0:	e000      	b.n	80061c4 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 80061c2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80061c4:	7dfb      	ldrb	r3, [r7, #23]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d10a      	bne.n	80061e0 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80061ca:	4bb7      	ldr	r3, [pc, #732]	; (80064a8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80061cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061ce:	f023 0207 	bic.w	r2, r3, #7
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061d8:	49b3      	ldr	r1, [pc, #716]	; (80064a8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80061da:	4313      	orrs	r3, r2
 80061dc:	658b      	str	r3, [r1, #88]	; 0x58
 80061de:	e001      	b.n	80061e4 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061e0:	7dfb      	ldrb	r3, [r7, #23]
 80061e2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f003 0320 	and.w	r3, r3, #32
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d04b      	beq.n	8006288 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80061f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80061fa:	d02e      	beq.n	800625a <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 80061fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006200:	d828      	bhi.n	8006254 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8006202:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006206:	d02a      	beq.n	800625e <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8006208:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800620c:	d822      	bhi.n	8006254 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800620e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006212:	d026      	beq.n	8006262 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8006214:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006218:	d81c      	bhi.n	8006254 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800621a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800621e:	d010      	beq.n	8006242 <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8006220:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006224:	d816      	bhi.n	8006254 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8006226:	2b00      	cmp	r3, #0
 8006228:	d01d      	beq.n	8006266 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 800622a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800622e:	d111      	bne.n	8006254 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	3304      	adds	r3, #4
 8006234:	2100      	movs	r1, #0
 8006236:	4618      	mov	r0, r3
 8006238:	f001 fb48 	bl	80078cc <RCCEx_PLL2_Config>
 800623c:	4603      	mov	r3, r0
 800623e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006240:	e012      	b.n	8006268 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	3324      	adds	r3, #36	; 0x24
 8006246:	2102      	movs	r1, #2
 8006248:	4618      	mov	r0, r3
 800624a:	f001 fbf1 	bl	8007a30 <RCCEx_PLL3_Config>
 800624e:	4603      	mov	r3, r0
 8006250:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006252:	e009      	b.n	8006268 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006254:	2301      	movs	r3, #1
 8006256:	75fb      	strb	r3, [r7, #23]
      break;
 8006258:	e006      	b.n	8006268 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800625a:	bf00      	nop
 800625c:	e004      	b.n	8006268 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800625e:	bf00      	nop
 8006260:	e002      	b.n	8006268 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8006262:	bf00      	nop
 8006264:	e000      	b.n	8006268 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8006266:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006268:	7dfb      	ldrb	r3, [r7, #23]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d10a      	bne.n	8006284 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800626e:	4b8e      	ldr	r3, [pc, #568]	; (80064a8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006270:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006272:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800627c:	498a      	ldr	r1, [pc, #552]	; (80064a8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800627e:	4313      	orrs	r3, r2
 8006280:	654b      	str	r3, [r1, #84]	; 0x54
 8006282:	e001      	b.n	8006288 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006284:	7dfb      	ldrb	r3, [r7, #23]
 8006286:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006290:	2b00      	cmp	r3, #0
 8006292:	d04b      	beq.n	800632c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800629a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800629e:	d02e      	beq.n	80062fe <HAL_RCCEx_PeriphCLKConfig+0xa76>
 80062a0:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80062a4:	d828      	bhi.n	80062f8 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80062a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062aa:	d02a      	beq.n	8006302 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 80062ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062b0:	d822      	bhi.n	80062f8 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80062b2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80062b6:	d026      	beq.n	8006306 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 80062b8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80062bc:	d81c      	bhi.n	80062f8 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80062be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80062c2:	d010      	beq.n	80062e6 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 80062c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80062c8:	d816      	bhi.n	80062f8 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d01d      	beq.n	800630a <HAL_RCCEx_PeriphCLKConfig+0xa82>
 80062ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80062d2:	d111      	bne.n	80062f8 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	3304      	adds	r3, #4
 80062d8:	2100      	movs	r1, #0
 80062da:	4618      	mov	r0, r3
 80062dc:	f001 faf6 	bl	80078cc <RCCEx_PLL2_Config>
 80062e0:	4603      	mov	r3, r0
 80062e2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80062e4:	e012      	b.n	800630c <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	3324      	adds	r3, #36	; 0x24
 80062ea:	2102      	movs	r1, #2
 80062ec:	4618      	mov	r0, r3
 80062ee:	f001 fb9f 	bl	8007a30 <RCCEx_PLL3_Config>
 80062f2:	4603      	mov	r3, r0
 80062f4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80062f6:	e009      	b.n	800630c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80062f8:	2301      	movs	r3, #1
 80062fa:	75fb      	strb	r3, [r7, #23]
      break;
 80062fc:	e006      	b.n	800630c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80062fe:	bf00      	nop
 8006300:	e004      	b.n	800630c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8006302:	bf00      	nop
 8006304:	e002      	b.n	800630c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8006306:	bf00      	nop
 8006308:	e000      	b.n	800630c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800630a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800630c:	7dfb      	ldrb	r3, [r7, #23]
 800630e:	2b00      	cmp	r3, #0
 8006310:	d10a      	bne.n	8006328 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006312:	4b65      	ldr	r3, [pc, #404]	; (80064a8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006314:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006316:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006320:	4961      	ldr	r1, [pc, #388]	; (80064a8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006322:	4313      	orrs	r3, r2
 8006324:	658b      	str	r3, [r1, #88]	; 0x58
 8006326:	e001      	b.n	800632c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006328:	7dfb      	ldrb	r3, [r7, #23]
 800632a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006334:	2b00      	cmp	r3, #0
 8006336:	d04b      	beq.n	80063d0 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800633e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006342:	d02e      	beq.n	80063a2 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8006344:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006348:	d828      	bhi.n	800639c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800634a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800634e:	d02a      	beq.n	80063a6 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8006350:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006354:	d822      	bhi.n	800639c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8006356:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800635a:	d026      	beq.n	80063aa <HAL_RCCEx_PeriphCLKConfig+0xb22>
 800635c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006360:	d81c      	bhi.n	800639c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8006362:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006366:	d010      	beq.n	800638a <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8006368:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800636c:	d816      	bhi.n	800639c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800636e:	2b00      	cmp	r3, #0
 8006370:	d01d      	beq.n	80063ae <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8006372:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006376:	d111      	bne.n	800639c <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	3304      	adds	r3, #4
 800637c:	2100      	movs	r1, #0
 800637e:	4618      	mov	r0, r3
 8006380:	f001 faa4 	bl	80078cc <RCCEx_PLL2_Config>
 8006384:	4603      	mov	r3, r0
 8006386:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006388:	e012      	b.n	80063b0 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	3324      	adds	r3, #36	; 0x24
 800638e:	2102      	movs	r1, #2
 8006390:	4618      	mov	r0, r3
 8006392:	f001 fb4d 	bl	8007a30 <RCCEx_PLL3_Config>
 8006396:	4603      	mov	r3, r0
 8006398:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800639a:	e009      	b.n	80063b0 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800639c:	2301      	movs	r3, #1
 800639e:	75fb      	strb	r3, [r7, #23]
      break;
 80063a0:	e006      	b.n	80063b0 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80063a2:	bf00      	nop
 80063a4:	e004      	b.n	80063b0 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80063a6:	bf00      	nop
 80063a8:	e002      	b.n	80063b0 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80063aa:	bf00      	nop
 80063ac:	e000      	b.n	80063b0 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80063ae:	bf00      	nop
    }

    if(ret == HAL_OK)
 80063b0:	7dfb      	ldrb	r3, [r7, #23]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d10a      	bne.n	80063cc <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80063b6:	4b3c      	ldr	r3, [pc, #240]	; (80064a8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80063b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063ba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80063c4:	4938      	ldr	r1, [pc, #224]	; (80064a8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80063c6:	4313      	orrs	r3, r2
 80063c8:	658b      	str	r3, [r1, #88]	; 0x58
 80063ca:	e001      	b.n	80063d0 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063cc:	7dfb      	ldrb	r3, [r7, #23]
 80063ce:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	f003 0308 	and.w	r3, r3, #8
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d01a      	beq.n	8006412 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80063e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063e6:	d10a      	bne.n	80063fe <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	3324      	adds	r3, #36	; 0x24
 80063ec:	2102      	movs	r1, #2
 80063ee:	4618      	mov	r0, r3
 80063f0:	f001 fb1e 	bl	8007a30 <RCCEx_PLL3_Config>
 80063f4:	4603      	mov	r3, r0
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d001      	beq.n	80063fe <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 80063fa:	2301      	movs	r3, #1
 80063fc:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80063fe:	4b2a      	ldr	r3, [pc, #168]	; (80064a8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006400:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006402:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800640c:	4926      	ldr	r1, [pc, #152]	; (80064a8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800640e:	4313      	orrs	r3, r2
 8006410:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	f003 0310 	and.w	r3, r3, #16
 800641a:	2b00      	cmp	r3, #0
 800641c:	d01a      	beq.n	8006454 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006424:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006428:	d10a      	bne.n	8006440 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	3324      	adds	r3, #36	; 0x24
 800642e:	2102      	movs	r1, #2
 8006430:	4618      	mov	r0, r3
 8006432:	f001 fafd 	bl	8007a30 <RCCEx_PLL3_Config>
 8006436:	4603      	mov	r3, r0
 8006438:	2b00      	cmp	r3, #0
 800643a:	d001      	beq.n	8006440 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 800643c:	2301      	movs	r3, #1
 800643e:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006440:	4b19      	ldr	r3, [pc, #100]	; (80064a8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006442:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006444:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800644e:	4916      	ldr	r1, [pc, #88]	; (80064a8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006450:	4313      	orrs	r3, r2
 8006452:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800645c:	2b00      	cmp	r3, #0
 800645e:	d036      	beq.n	80064ce <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006466:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800646a:	d01f      	beq.n	80064ac <HAL_RCCEx_PeriphCLKConfig+0xc24>
 800646c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006470:	d817      	bhi.n	80064a2 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8006472:	2b00      	cmp	r3, #0
 8006474:	d003      	beq.n	800647e <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8006476:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800647a:	d009      	beq.n	8006490 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 800647c:	e011      	b.n	80064a2 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	3304      	adds	r3, #4
 8006482:	2100      	movs	r1, #0
 8006484:	4618      	mov	r0, r3
 8006486:	f001 fa21 	bl	80078cc <RCCEx_PLL2_Config>
 800648a:	4603      	mov	r3, r0
 800648c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800648e:	e00e      	b.n	80064ae <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	3324      	adds	r3, #36	; 0x24
 8006494:	2102      	movs	r1, #2
 8006496:	4618      	mov	r0, r3
 8006498:	f001 faca 	bl	8007a30 <RCCEx_PLL3_Config>
 800649c:	4603      	mov	r3, r0
 800649e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80064a0:	e005      	b.n	80064ae <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80064a2:	2301      	movs	r3, #1
 80064a4:	75fb      	strb	r3, [r7, #23]
      break;
 80064a6:	e002      	b.n	80064ae <HAL_RCCEx_PeriphCLKConfig+0xc26>
 80064a8:	58024400 	.word	0x58024400
      break;
 80064ac:	bf00      	nop
    }

    if(ret == HAL_OK)
 80064ae:	7dfb      	ldrb	r3, [r7, #23]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d10a      	bne.n	80064ca <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80064b4:	4b93      	ldr	r3, [pc, #588]	; (8006704 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80064b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064b8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80064c2:	4990      	ldr	r1, [pc, #576]	; (8006704 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80064c4:	4313      	orrs	r3, r2
 80064c6:	658b      	str	r3, [r1, #88]	; 0x58
 80064c8:	e001      	b.n	80064ce <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064ca:	7dfb      	ldrb	r3, [r7, #23]
 80064cc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d033      	beq.n	8006542 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80064e0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80064e4:	d01c      	beq.n	8006520 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 80064e6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80064ea:	d816      	bhi.n	800651a <HAL_RCCEx_PeriphCLKConfig+0xc92>
 80064ec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80064f0:	d003      	beq.n	80064fa <HAL_RCCEx_PeriphCLKConfig+0xc72>
 80064f2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80064f6:	d007      	beq.n	8006508 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 80064f8:	e00f      	b.n	800651a <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80064fa:	4b82      	ldr	r3, [pc, #520]	; (8006704 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80064fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064fe:	4a81      	ldr	r2, [pc, #516]	; (8006704 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006500:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006504:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8006506:	e00c      	b.n	8006522 <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	3324      	adds	r3, #36	; 0x24
 800650c:	2101      	movs	r1, #1
 800650e:	4618      	mov	r0, r3
 8006510:	f001 fa8e 	bl	8007a30 <RCCEx_PLL3_Config>
 8006514:	4603      	mov	r3, r0
 8006516:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8006518:	e003      	b.n	8006522 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800651a:	2301      	movs	r3, #1
 800651c:	75fb      	strb	r3, [r7, #23]
      break;
 800651e:	e000      	b.n	8006522 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8006520:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006522:	7dfb      	ldrb	r3, [r7, #23]
 8006524:	2b00      	cmp	r3, #0
 8006526:	d10a      	bne.n	800653e <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006528:	4b76      	ldr	r3, [pc, #472]	; (8006704 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800652a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800652c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006536:	4973      	ldr	r1, [pc, #460]	; (8006704 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006538:	4313      	orrs	r3, r2
 800653a:	654b      	str	r3, [r1, #84]	; 0x54
 800653c:	e001      	b.n	8006542 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800653e:	7dfb      	ldrb	r3, [r7, #23]
 8006540:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800654a:	2b00      	cmp	r3, #0
 800654c:	d029      	beq.n	80065a2 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006552:	2b00      	cmp	r3, #0
 8006554:	d003      	beq.n	800655e <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 8006556:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800655a:	d007      	beq.n	800656c <HAL_RCCEx_PeriphCLKConfig+0xce4>
 800655c:	e00f      	b.n	800657e <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800655e:	4b69      	ldr	r3, [pc, #420]	; (8006704 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006560:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006562:	4a68      	ldr	r2, [pc, #416]	; (8006704 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006564:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006568:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800656a:	e00b      	b.n	8006584 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	3304      	adds	r3, #4
 8006570:	2102      	movs	r1, #2
 8006572:	4618      	mov	r0, r3
 8006574:	f001 f9aa 	bl	80078cc <RCCEx_PLL2_Config>
 8006578:	4603      	mov	r3, r0
 800657a:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800657c:	e002      	b.n	8006584 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 800657e:	2301      	movs	r3, #1
 8006580:	75fb      	strb	r3, [r7, #23]
      break;
 8006582:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006584:	7dfb      	ldrb	r3, [r7, #23]
 8006586:	2b00      	cmp	r3, #0
 8006588:	d109      	bne.n	800659e <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800658a:	4b5e      	ldr	r3, [pc, #376]	; (8006704 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800658c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800658e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006596:	495b      	ldr	r1, [pc, #364]	; (8006704 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006598:	4313      	orrs	r3, r2
 800659a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800659c:	e001      	b.n	80065a2 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800659e:	7dfb      	ldrb	r3, [r7, #23]
 80065a0:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d00a      	beq.n	80065c4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	3324      	adds	r3, #36	; 0x24
 80065b2:	2102      	movs	r1, #2
 80065b4:	4618      	mov	r0, r3
 80065b6:	f001 fa3b 	bl	8007a30 <RCCEx_PLL3_Config>
 80065ba:	4603      	mov	r3, r0
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d001      	beq.n	80065c4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 80065c0:	2301      	movs	r3, #1
 80065c2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d030      	beq.n	8006632 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80065d4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80065d8:	d017      	beq.n	800660a <HAL_RCCEx_PeriphCLKConfig+0xd82>
 80065da:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80065de:	d811      	bhi.n	8006604 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 80065e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80065e4:	d013      	beq.n	800660e <HAL_RCCEx_PeriphCLKConfig+0xd86>
 80065e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80065ea:	d80b      	bhi.n	8006604 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d010      	beq.n	8006612 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 80065f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80065f4:	d106      	bne.n	8006604 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80065f6:	4b43      	ldr	r3, [pc, #268]	; (8006704 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80065f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065fa:	4a42      	ldr	r2, [pc, #264]	; (8006704 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80065fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006600:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8006602:	e007      	b.n	8006614 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006604:	2301      	movs	r3, #1
 8006606:	75fb      	strb	r3, [r7, #23]
      break;
 8006608:	e004      	b.n	8006614 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800660a:	bf00      	nop
 800660c:	e002      	b.n	8006614 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800660e:	bf00      	nop
 8006610:	e000      	b.n	8006614 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8006612:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006614:	7dfb      	ldrb	r3, [r7, #23]
 8006616:	2b00      	cmp	r3, #0
 8006618:	d109      	bne.n	800662e <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800661a:	4b3a      	ldr	r3, [pc, #232]	; (8006704 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800661c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800661e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006626:	4937      	ldr	r1, [pc, #220]	; (8006704 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006628:	4313      	orrs	r3, r2
 800662a:	654b      	str	r3, [r1, #84]	; 0x54
 800662c:	e001      	b.n	8006632 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800662e:	7dfb      	ldrb	r3, [r7, #23]
 8006630:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800663a:	2b00      	cmp	r3, #0
 800663c:	d008      	beq.n	8006650 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800663e:	4b31      	ldr	r3, [pc, #196]	; (8006704 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006640:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006642:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800664a:	492e      	ldr	r1, [pc, #184]	; (8006704 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800664c:	4313      	orrs	r3, r2
 800664e:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006658:	2b00      	cmp	r3, #0
 800665a:	d009      	beq.n	8006670 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800665c:	4b29      	ldr	r3, [pc, #164]	; (8006704 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800665e:	691b      	ldr	r3, [r3, #16]
 8006660:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800666a:	4926      	ldr	r1, [pc, #152]	; (8006704 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800666c:	4313      	orrs	r3, r2
 800666e:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006678:	2b00      	cmp	r3, #0
 800667a:	d008      	beq.n	800668e <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800667c:	4b21      	ldr	r3, [pc, #132]	; (8006704 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800667e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006680:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006688:	491e      	ldr	r1, [pc, #120]	; (8006704 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800668a:	4313      	orrs	r3, r2
 800668c:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006696:	2b00      	cmp	r3, #0
 8006698:	d00d      	beq.n	80066b6 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800669a:	4b1a      	ldr	r3, [pc, #104]	; (8006704 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800669c:	691b      	ldr	r3, [r3, #16]
 800669e:	4a19      	ldr	r2, [pc, #100]	; (8006704 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80066a0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80066a4:	6113      	str	r3, [r2, #16]
 80066a6:	4b17      	ldr	r3, [pc, #92]	; (8006704 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80066a8:	691a      	ldr	r2, [r3, #16]
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80066b0:	4914      	ldr	r1, [pc, #80]	; (8006704 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80066b2:	4313      	orrs	r3, r2
 80066b4:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	da08      	bge.n	80066d0 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80066be:	4b11      	ldr	r3, [pc, #68]	; (8006704 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80066c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066c2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066ca:	490e      	ldr	r1, [pc, #56]	; (8006704 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80066cc:	4313      	orrs	r3, r2
 80066ce:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d009      	beq.n	80066f0 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80066dc:	4b09      	ldr	r3, [pc, #36]	; (8006704 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80066de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066e0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066ea:	4906      	ldr	r1, [pc, #24]	; (8006704 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80066ec:	4313      	orrs	r3, r2
 80066ee:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80066f0:	7dbb      	ldrb	r3, [r7, #22]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d101      	bne.n	80066fa <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 80066f6:	2300      	movs	r3, #0
 80066f8:	e000      	b.n	80066fc <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 80066fa:	2301      	movs	r3, #1
}
 80066fc:	4618      	mov	r0, r3
 80066fe:	3718      	adds	r7, #24
 8006700:	46bd      	mov	sp, r7
 8006702:	bd80      	pop	{r7, pc}
 8006704:	58024400 	.word	0x58024400

08006708 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006708:	b580      	push	{r7, lr}
 800670a:	b090      	sub	sp, #64	; 0x40
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006716:	f040 8095 	bne.w	8006844 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 800671a:	4bae      	ldr	r3, [pc, #696]	; (80069d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800671c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800671e:	f003 0307 	and.w	r3, r3, #7
 8006722:	633b      	str	r3, [r7, #48]	; 0x30
 8006724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006726:	2b04      	cmp	r3, #4
 8006728:	f200 8088 	bhi.w	800683c <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 800672c:	a201      	add	r2, pc, #4	; (adr r2, 8006734 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 800672e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006732:	bf00      	nop
 8006734:	08006749 	.word	0x08006749
 8006738:	08006771 	.word	0x08006771
 800673c:	08006799 	.word	0x08006799
 8006740:	08006835 	.word	0x08006835
 8006744:	080067c1 	.word	0x080067c1

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006748:	4ba2      	ldr	r3, [pc, #648]	; (80069d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006750:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006754:	d108      	bne.n	8006768 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006756:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800675a:	4618      	mov	r0, r3
 800675c:	f000 ff64 	bl	8007628 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8006760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006762:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006764:	f000 bc95 	b.w	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8006768:	2300      	movs	r3, #0
 800676a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800676c:	f000 bc91 	b.w	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006770:	4b98      	ldr	r3, [pc, #608]	; (80069d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006778:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800677c:	d108      	bne.n	8006790 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800677e:	f107 0318 	add.w	r3, r7, #24
 8006782:	4618      	mov	r0, r3
 8006784:	f000 fca8 	bl	80070d8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006788:	69bb      	ldr	r3, [r7, #24]
 800678a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800678c:	f000 bc81 	b.w	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8006790:	2300      	movs	r3, #0
 8006792:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006794:	f000 bc7d 	b.w	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006798:	4b8e      	ldr	r3, [pc, #568]	; (80069d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80067a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80067a4:	d108      	bne.n	80067b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80067a6:	f107 030c 	add.w	r3, r7, #12
 80067aa:	4618      	mov	r0, r3
 80067ac:	f000 fde8 	bl	8007380 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80067b4:	f000 bc6d 	b.w	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80067b8:	2300      	movs	r3, #0
 80067ba:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80067bc:	f000 bc69 	b.w	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80067c0:	4b84      	ldr	r3, [pc, #528]	; (80069d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80067c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067c4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80067c8:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80067ca:	4b82      	ldr	r3, [pc, #520]	; (80069d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	f003 0304 	and.w	r3, r3, #4
 80067d2:	2b04      	cmp	r3, #4
 80067d4:	d10c      	bne.n	80067f0 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 80067d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d109      	bne.n	80067f0 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80067dc:	4b7d      	ldr	r3, [pc, #500]	; (80069d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	08db      	lsrs	r3, r3, #3
 80067e2:	f003 0303 	and.w	r3, r3, #3
 80067e6:	4a7c      	ldr	r2, [pc, #496]	; (80069d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 80067e8:	fa22 f303 	lsr.w	r3, r2, r3
 80067ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 80067ee:	e01f      	b.n	8006830 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80067f0:	4b78      	ldr	r3, [pc, #480]	; (80069d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80067fc:	d106      	bne.n	800680c <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 80067fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006800:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006804:	d102      	bne.n	800680c <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8006806:	4b75      	ldr	r3, [pc, #468]	; (80069dc <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8006808:	63fb      	str	r3, [r7, #60]	; 0x3c
 800680a:	e011      	b.n	8006830 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800680c:	4b71      	ldr	r3, [pc, #452]	; (80069d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006814:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006818:	d106      	bne.n	8006828 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 800681a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800681c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006820:	d102      	bne.n	8006828 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8006822:	4b6f      	ldr	r3, [pc, #444]	; (80069e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8006824:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006826:	e003      	b.n	8006830 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8006828:	2300      	movs	r3, #0
 800682a:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800682c:	f000 bc31 	b.w	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8006830:	f000 bc2f 	b.w	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8006834:	4b6b      	ldr	r3, [pc, #428]	; (80069e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8006836:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006838:	f000 bc2b 	b.w	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 800683c:	2300      	movs	r3, #0
 800683e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006840:	f000 bc27 	b.w	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800684a:	f040 8095 	bne.w	8006978 <HAL_RCCEx_GetPeriphCLKFreq+0x270>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 800684e:	4b61      	ldr	r3, [pc, #388]	; (80069d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8006850:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006852:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8006856:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8006858:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800685a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800685e:	d04d      	beq.n	80068fc <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 8006860:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006862:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006866:	f200 8084 	bhi.w	8006972 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800686a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800686c:	2bc0      	cmp	r3, #192	; 0xc0
 800686e:	d07d      	beq.n	800696c <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8006870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006872:	2bc0      	cmp	r3, #192	; 0xc0
 8006874:	d87d      	bhi.n	8006972 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8006876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006878:	2b80      	cmp	r3, #128	; 0x80
 800687a:	d02d      	beq.n	80068d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 800687c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800687e:	2b80      	cmp	r3, #128	; 0x80
 8006880:	d877      	bhi.n	8006972 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8006882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006884:	2b00      	cmp	r3, #0
 8006886:	d003      	beq.n	8006890 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 8006888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800688a:	2b40      	cmp	r3, #64	; 0x40
 800688c:	d012      	beq.n	80068b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 800688e:	e070      	b.n	8006972 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006890:	4b50      	ldr	r3, [pc, #320]	; (80069d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006898:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800689c:	d107      	bne.n	80068ae <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800689e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80068a2:	4618      	mov	r0, r3
 80068a4:	f000 fec0 	bl	8007628 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80068a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068aa:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80068ac:	e3f1      	b.n	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80068ae:	2300      	movs	r3, #0
 80068b0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80068b2:	e3ee      	b.n	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80068b4:	4b47      	ldr	r3, [pc, #284]	; (80069d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80068bc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80068c0:	d107      	bne.n	80068d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80068c2:	f107 0318 	add.w	r3, r7, #24
 80068c6:	4618      	mov	r0, r3
 80068c8:	f000 fc06 	bl	80070d8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80068cc:	69bb      	ldr	r3, [r7, #24]
 80068ce:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80068d0:	e3df      	b.n	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80068d2:	2300      	movs	r3, #0
 80068d4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80068d6:	e3dc      	b.n	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80068d8:	4b3e      	ldr	r3, [pc, #248]	; (80069d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80068e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80068e4:	d107      	bne.n	80068f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80068e6:	f107 030c 	add.w	r3, r7, #12
 80068ea:	4618      	mov	r0, r3
 80068ec:	f000 fd48 	bl	8007380 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80068f4:	e3cd      	b.n	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80068f6:	2300      	movs	r3, #0
 80068f8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80068fa:	e3ca      	b.n	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80068fc:	4b35      	ldr	r3, [pc, #212]	; (80069d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80068fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006900:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006904:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006906:	4b33      	ldr	r3, [pc, #204]	; (80069d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f003 0304 	and.w	r3, r3, #4
 800690e:	2b04      	cmp	r3, #4
 8006910:	d10c      	bne.n	800692c <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 8006912:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006914:	2b00      	cmp	r3, #0
 8006916:	d109      	bne.n	800692c <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006918:	4b2e      	ldr	r3, [pc, #184]	; (80069d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	08db      	lsrs	r3, r3, #3
 800691e:	f003 0303 	and.w	r3, r3, #3
 8006922:	4a2d      	ldr	r2, [pc, #180]	; (80069d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 8006924:	fa22 f303 	lsr.w	r3, r2, r3
 8006928:	63fb      	str	r3, [r7, #60]	; 0x3c
 800692a:	e01e      	b.n	800696a <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800692c:	4b29      	ldr	r3, [pc, #164]	; (80069d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006934:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006938:	d106      	bne.n	8006948 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 800693a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800693c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006940:	d102      	bne.n	8006948 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8006942:	4b26      	ldr	r3, [pc, #152]	; (80069dc <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8006944:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006946:	e010      	b.n	800696a <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006948:	4b22      	ldr	r3, [pc, #136]	; (80069d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006950:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006954:	d106      	bne.n	8006964 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 8006956:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006958:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800695c:	d102      	bne.n	8006964 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800695e:	4b20      	ldr	r3, [pc, #128]	; (80069e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8006960:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006962:	e002      	b.n	800696a <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8006964:	2300      	movs	r3, #0
 8006966:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8006968:	e393      	b.n	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800696a:	e392      	b.n	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800696c:	4b1d      	ldr	r3, [pc, #116]	; (80069e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 800696e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006970:	e38f      	b.n	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8006972:	2300      	movs	r3, #0
 8006974:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006976:	e38c      	b.n	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800697e:	f040 80a7 	bne.w	8006ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x3c8>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8006982:	4b14      	ldr	r3, [pc, #80]	; (80069d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8006984:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006986:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800698a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800698c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800698e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006992:	d05f      	beq.n	8006a54 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8006994:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006996:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800699a:	f200 8096 	bhi.w	8006aca <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 800699e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069a0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80069a4:	f000 808e 	beq.w	8006ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
 80069a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069aa:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80069ae:	f200 808c 	bhi.w	8006aca <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 80069b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069b4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80069b8:	d03a      	beq.n	8006a30 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 80069ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069bc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80069c0:	f200 8083 	bhi.w	8006aca <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 80069c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d00e      	beq.n	80069e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>
 80069ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069cc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80069d0:	d01c      	beq.n	8006a0c <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 80069d2:	e07a      	b.n	8006aca <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 80069d4:	58024400 	.word	0x58024400
 80069d8:	03d09000 	.word	0x03d09000
 80069dc:	003d0900 	.word	0x003d0900
 80069e0:	007a1200 	.word	0x007a1200
 80069e4:	00bb8000 	.word	0x00bb8000
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80069e8:	4baa      	ldr	r3, [pc, #680]	; (8006c94 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80069f0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80069f4:	d107      	bne.n	8006a06 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80069f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80069fa:	4618      	mov	r0, r3
 80069fc:	f000 fe14 	bl	8007628 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006a00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a02:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006a04:	e345      	b.n	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8006a06:	2300      	movs	r3, #0
 8006a08:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006a0a:	e342      	b.n	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006a0c:	4ba1      	ldr	r3, [pc, #644]	; (8006c94 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006a14:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006a18:	d107      	bne.n	8006a2a <HAL_RCCEx_GetPeriphCLKFreq+0x322>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006a1a:	f107 0318 	add.w	r3, r7, #24
 8006a1e:	4618      	mov	r0, r3
 8006a20:	f000 fb5a 	bl	80070d8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006a24:	69bb      	ldr	r3, [r7, #24]
 8006a26:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006a28:	e333      	b.n	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006a2e:	e330      	b.n	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006a30:	4b98      	ldr	r3, [pc, #608]	; (8006c94 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006a38:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006a3c:	d107      	bne.n	8006a4e <HAL_RCCEx_GetPeriphCLKFreq+0x346>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006a3e:	f107 030c 	add.w	r3, r7, #12
 8006a42:	4618      	mov	r0, r3
 8006a44:	f000 fc9c 	bl	8007380 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006a4c:	e321      	b.n	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8006a4e:	2300      	movs	r3, #0
 8006a50:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006a52:	e31e      	b.n	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006a54:	4b8f      	ldr	r3, [pc, #572]	; (8006c94 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006a56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a58:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006a5c:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006a5e:	4b8d      	ldr	r3, [pc, #564]	; (8006c94 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	f003 0304 	and.w	r3, r3, #4
 8006a66:	2b04      	cmp	r3, #4
 8006a68:	d10c      	bne.n	8006a84 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 8006a6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d109      	bne.n	8006a84 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006a70:	4b88      	ldr	r3, [pc, #544]	; (8006c94 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	08db      	lsrs	r3, r3, #3
 8006a76:	f003 0303 	and.w	r3, r3, #3
 8006a7a:	4a87      	ldr	r2, [pc, #540]	; (8006c98 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006a7c:	fa22 f303 	lsr.w	r3, r2, r3
 8006a80:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a82:	e01e      	b.n	8006ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006a84:	4b83      	ldr	r3, [pc, #524]	; (8006c94 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a90:	d106      	bne.n	8006aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
 8006a92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a94:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006a98:	d102      	bne.n	8006aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8006a9a:	4b80      	ldr	r3, [pc, #512]	; (8006c9c <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8006a9c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a9e:	e010      	b.n	8006ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006aa0:	4b7c      	ldr	r3, [pc, #496]	; (8006c94 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006aa8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006aac:	d106      	bne.n	8006abc <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
 8006aae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ab0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006ab4:	d102      	bne.n	8006abc <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8006ab6:	4b7a      	ldr	r3, [pc, #488]	; (8006ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8006ab8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006aba:	e002      	b.n	8006ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8006abc:	2300      	movs	r3, #0
 8006abe:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8006ac0:	e2e7      	b.n	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8006ac2:	e2e6      	b.n	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8006ac4:	4b77      	ldr	r3, [pc, #476]	; (8006ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8006ac6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006ac8:	e2e3      	b.n	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8006aca:	2300      	movs	r3, #0
 8006acc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006ace:	e2e0      	b.n	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006ad6:	f040 809c 	bne.w	8006c12 <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8006ada:	4b6e      	ldr	r3, [pc, #440]	; (8006c94 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006adc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ade:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8006ae2:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8006ae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ae6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006aea:	d054      	beq.n	8006b96 <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 8006aec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aee:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006af2:	f200 808b 	bhi.w	8006c0c <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 8006af6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006af8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006afc:	f000 8083 	beq.w	8006c06 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 8006b00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b02:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006b06:	f200 8081 	bhi.w	8006c0c <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 8006b0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b0c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006b10:	d02f      	beq.n	8006b72 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 8006b12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b14:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006b18:	d878      	bhi.n	8006c0c <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 8006b1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d004      	beq.n	8006b2a <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8006b20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b22:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006b26:	d012      	beq.n	8006b4e <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 8006b28:	e070      	b.n	8006c0c <HAL_RCCEx_GetPeriphCLKFreq+0x504>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006b2a:	4b5a      	ldr	r3, [pc, #360]	; (8006c94 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b32:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006b36:	d107      	bne.n	8006b48 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006b38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006b3c:	4618      	mov	r0, r3
 8006b3e:	f000 fd73 	bl	8007628 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006b42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b44:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006b46:	e2a4      	b.n	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8006b48:	2300      	movs	r3, #0
 8006b4a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006b4c:	e2a1      	b.n	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006b4e:	4b51      	ldr	r3, [pc, #324]	; (8006c94 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006b56:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006b5a:	d107      	bne.n	8006b6c <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006b5c:	f107 0318 	add.w	r3, r7, #24
 8006b60:	4618      	mov	r0, r3
 8006b62:	f000 fab9 	bl	80070d8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006b66:	69bb      	ldr	r3, [r7, #24]
 8006b68:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 8006b6a:	e292      	b.n	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8006b6c:	2300      	movs	r3, #0
 8006b6e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006b70:	e28f      	b.n	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006b72:	4b48      	ldr	r3, [pc, #288]	; (8006c94 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006b7a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006b7e:	d107      	bne.n	8006b90 <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006b80:	f107 030c 	add.w	r3, r7, #12
 8006b84:	4618      	mov	r0, r3
 8006b86:	f000 fbfb 	bl	8007380 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006b8e:	e280      	b.n	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8006b90:	2300      	movs	r3, #0
 8006b92:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006b94:	e27d      	b.n	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006b96:	4b3f      	ldr	r3, [pc, #252]	; (8006c94 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006b98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b9a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006b9e:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006ba0:	4b3c      	ldr	r3, [pc, #240]	; (8006c94 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	f003 0304 	and.w	r3, r3, #4
 8006ba8:	2b04      	cmp	r3, #4
 8006baa:	d10c      	bne.n	8006bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 8006bac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d109      	bne.n	8006bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006bb2:	4b38      	ldr	r3, [pc, #224]	; (8006c94 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	08db      	lsrs	r3, r3, #3
 8006bb8:	f003 0303 	and.w	r3, r3, #3
 8006bbc:	4a36      	ldr	r2, [pc, #216]	; (8006c98 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006bbe:	fa22 f303 	lsr.w	r3, r2, r3
 8006bc2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006bc4:	e01e      	b.n	8006c04 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006bc6:	4b33      	ldr	r3, [pc, #204]	; (8006c94 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006bd2:	d106      	bne.n	8006be2 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 8006bd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bd6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006bda:	d102      	bne.n	8006be2 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8006bdc:	4b2f      	ldr	r3, [pc, #188]	; (8006c9c <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8006bde:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006be0:	e010      	b.n	8006c04 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006be2:	4b2c      	ldr	r3, [pc, #176]	; (8006c94 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006bea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006bee:	d106      	bne.n	8006bfe <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 8006bf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bf2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006bf6:	d102      	bne.n	8006bfe <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8006bf8:	4b29      	ldr	r3, [pc, #164]	; (8006ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8006bfa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006bfc:	e002      	b.n	8006c04 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8006bfe:	2300      	movs	r3, #0
 8006c00:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8006c02:	e246      	b.n	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8006c04:	e245      	b.n	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8006c06:	4b27      	ldr	r3, [pc, #156]	; (8006ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8006c08:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006c0a:	e242      	b.n	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8006c0c:	2300      	movs	r3, #0
 8006c0e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006c10:	e23f      	b.n	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c18:	f040 80a8 	bne.w	8006d6c <HAL_RCCEx_GetPeriphCLKFreq+0x664>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8006c1c:	4b1d      	ldr	r3, [pc, #116]	; (8006c94 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006c1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c20:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8006c24:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8006c26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c28:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006c2c:	d060      	beq.n	8006cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
 8006c2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c30:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006c34:	f200 8097 	bhi.w	8006d66 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8006c38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c3a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006c3e:	f000 808f 	beq.w	8006d60 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 8006c42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c44:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006c48:	f200 808d 	bhi.w	8006d66 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8006c4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c4e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c52:	d03b      	beq.n	8006ccc <HAL_RCCEx_GetPeriphCLKFreq+0x5c4>
 8006c54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c5a:	f200 8084 	bhi.w	8006d66 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8006c5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d004      	beq.n	8006c6e <HAL_RCCEx_GetPeriphCLKFreq+0x566>
 8006c64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c6a:	d01d      	beq.n	8006ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
 8006c6c:	e07b      	b.n	8006d66 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006c6e:	4b09      	ldr	r3, [pc, #36]	; (8006c94 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c76:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006c7a:	d107      	bne.n	8006c8c <HAL_RCCEx_GetPeriphCLKFreq+0x584>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006c7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006c80:	4618      	mov	r0, r3
 8006c82:	f000 fcd1 	bl	8007628 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006c86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c88:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006c8a:	e202      	b.n	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8006c8c:	2300      	movs	r3, #0
 8006c8e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006c90:	e1ff      	b.n	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8006c92:	bf00      	nop
 8006c94:	58024400 	.word	0x58024400
 8006c98:	03d09000 	.word	0x03d09000
 8006c9c:	003d0900 	.word	0x003d0900
 8006ca0:	007a1200 	.word	0x007a1200
 8006ca4:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006ca8:	4ba3      	ldr	r3, [pc, #652]	; (8006f38 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006cb0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006cb4:	d107      	bne.n	8006cc6 <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006cb6:	f107 0318 	add.w	r3, r7, #24
 8006cba:	4618      	mov	r0, r3
 8006cbc:	f000 fa0c 	bl	80070d8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006cc0:	69bb      	ldr	r3, [r7, #24]
 8006cc2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006cc4:	e1e5      	b.n	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8006cc6:	2300      	movs	r3, #0
 8006cc8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006cca:	e1e2      	b.n	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006ccc:	4b9a      	ldr	r3, [pc, #616]	; (8006f38 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006cd4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006cd8:	d107      	bne.n	8006cea <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006cda:	f107 030c 	add.w	r3, r7, #12
 8006cde:	4618      	mov	r0, r3
 8006ce0:	f000 fb4e 	bl	8007380 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006ce8:	e1d3      	b.n	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8006cea:	2300      	movs	r3, #0
 8006cec:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006cee:	e1d0      	b.n	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006cf0:	4b91      	ldr	r3, [pc, #580]	; (8006f38 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006cf2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006cf4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006cf8:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006cfa:	4b8f      	ldr	r3, [pc, #572]	; (8006f38 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	f003 0304 	and.w	r3, r3, #4
 8006d02:	2b04      	cmp	r3, #4
 8006d04:	d10c      	bne.n	8006d20 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
 8006d06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d109      	bne.n	8006d20 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006d0c:	4b8a      	ldr	r3, [pc, #552]	; (8006f38 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	08db      	lsrs	r3, r3, #3
 8006d12:	f003 0303 	and.w	r3, r3, #3
 8006d16:	4a89      	ldr	r2, [pc, #548]	; (8006f3c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006d18:	fa22 f303 	lsr.w	r3, r2, r3
 8006d1c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006d1e:	e01e      	b.n	8006d5e <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006d20:	4b85      	ldr	r3, [pc, #532]	; (8006f38 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d2c:	d106      	bne.n	8006d3c <HAL_RCCEx_GetPeriphCLKFreq+0x634>
 8006d2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d30:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006d34:	d102      	bne.n	8006d3c <HAL_RCCEx_GetPeriphCLKFreq+0x634>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8006d36:	4b82      	ldr	r3, [pc, #520]	; (8006f40 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8006d38:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006d3a:	e010      	b.n	8006d5e <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006d3c:	4b7e      	ldr	r3, [pc, #504]	; (8006f38 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d44:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006d48:	d106      	bne.n	8006d58 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8006d4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d4c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006d50:	d102      	bne.n	8006d58 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8006d52:	4b7c      	ldr	r3, [pc, #496]	; (8006f44 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006d54:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006d56:	e002      	b.n	8006d5e <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8006d58:	2300      	movs	r3, #0
 8006d5a:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8006d5c:	e199      	b.n	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8006d5e:	e198      	b.n	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8006d60:	4b79      	ldr	r3, [pc, #484]	; (8006f48 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006d62:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006d64:	e195      	b.n	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8006d66:	2300      	movs	r3, #0
 8006d68:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006d6a:	e192      	b.n	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006d72:	d173      	bne.n	8006e5c <HAL_RCCEx_GetPeriphCLKFreq+0x754>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8006d74:	4b70      	ldr	r3, [pc, #448]	; (8006f38 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006d76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d78:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006d7c:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8006d7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d80:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006d84:	d02f      	beq.n	8006de6 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
 8006d86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d88:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006d8c:	d863      	bhi.n	8006e56 <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 8006d8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d004      	beq.n	8006d9e <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 8006d94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d9a:	d012      	beq.n	8006dc2 <HAL_RCCEx_GetPeriphCLKFreq+0x6ba>
 8006d9c:	e05b      	b.n	8006e56 <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006d9e:	4b66      	ldr	r3, [pc, #408]	; (8006f38 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006da6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006daa:	d107      	bne.n	8006dbc <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006dac:	f107 0318 	add.w	r3, r7, #24
 8006db0:	4618      	mov	r0, r3
 8006db2:	f000 f991 	bl	80070d8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006db6:	69bb      	ldr	r3, [r7, #24]
 8006db8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006dba:	e16a      	b.n	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8006dbc:	2300      	movs	r3, #0
 8006dbe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006dc0:	e167      	b.n	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006dc2:	4b5d      	ldr	r3, [pc, #372]	; (8006f38 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006dca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006dce:	d107      	bne.n	8006de0 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006dd0:	f107 030c 	add.w	r3, r7, #12
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	f000 fad3 	bl	8007380 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006dda:	697b      	ldr	r3, [r7, #20]
 8006ddc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006dde:	e158      	b.n	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8006de0:	2300      	movs	r3, #0
 8006de2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006de4:	e155      	b.n	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006de6:	4b54      	ldr	r3, [pc, #336]	; (8006f38 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006de8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006dea:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006dee:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006df0:	4b51      	ldr	r3, [pc, #324]	; (8006f38 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	f003 0304 	and.w	r3, r3, #4
 8006df8:	2b04      	cmp	r3, #4
 8006dfa:	d10c      	bne.n	8006e16 <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
 8006dfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d109      	bne.n	8006e16 <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006e02:	4b4d      	ldr	r3, [pc, #308]	; (8006f38 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	08db      	lsrs	r3, r3, #3
 8006e08:	f003 0303 	and.w	r3, r3, #3
 8006e0c:	4a4b      	ldr	r2, [pc, #300]	; (8006f3c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006e0e:	fa22 f303 	lsr.w	r3, r2, r3
 8006e12:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e14:	e01e      	b.n	8006e54 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006e16:	4b48      	ldr	r3, [pc, #288]	; (8006f38 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e22:	d106      	bne.n	8006e32 <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
 8006e24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e26:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006e2a:	d102      	bne.n	8006e32 <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8006e2c:	4b44      	ldr	r3, [pc, #272]	; (8006f40 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8006e2e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e30:	e010      	b.n	8006e54 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006e32:	4b41      	ldr	r3, [pc, #260]	; (8006f38 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e3a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006e3e:	d106      	bne.n	8006e4e <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 8006e40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e42:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006e46:	d102      	bne.n	8006e4e <HAL_RCCEx_GetPeriphCLKFreq+0x746>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8006e48:	4b3e      	ldr	r3, [pc, #248]	; (8006f44 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006e4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e4c:	e002      	b.n	8006e54 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8006e4e:	2300      	movs	r3, #0
 8006e50:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8006e52:	e11e      	b.n	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8006e54:	e11d      	b.n	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8006e56:	2300      	movs	r3, #0
 8006e58:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006e5a:	e11a      	b.n	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e62:	d133      	bne.n	8006ecc <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8006e64:	4b34      	ldr	r3, [pc, #208]	; (8006f38 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006e66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006e6c:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8006e6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d004      	beq.n	8006e7e <HAL_RCCEx_GetPeriphCLKFreq+0x776>
 8006e74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e7a:	d012      	beq.n	8006ea2 <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
 8006e7c:	e023      	b.n	8006ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x7be>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006e7e:	4b2e      	ldr	r3, [pc, #184]	; (8006f38 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e86:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006e8a:	d107      	bne.n	8006e9c <HAL_RCCEx_GetPeriphCLKFreq+0x794>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006e8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006e90:	4618      	mov	r0, r3
 8006e92:	f000 fbc9 	bl	8007628 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006e96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e98:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006e9a:	e0fa      	b.n	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006e9c:	2300      	movs	r3, #0
 8006e9e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006ea0:	e0f7      	b.n	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006ea2:	4b25      	ldr	r3, [pc, #148]	; (8006f38 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006eaa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006eae:	d107      	bne.n	8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006eb0:	f107 0318 	add.w	r3, r7, #24
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	f000 f90f 	bl	80070d8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8006eba:	6a3b      	ldr	r3, [r7, #32]
 8006ebc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006ebe:	e0e8      	b.n	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006ec0:	2300      	movs	r3, #0
 8006ec2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006ec4:	e0e5      	b.n	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8006ec6:	2300      	movs	r3, #0
 8006ec8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006eca:	e0e2      	b.n	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006ed2:	f040 808f 	bne.w	8006ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8006ed6:	4b18      	ldr	r3, [pc, #96]	; (8006f38 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006ed8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006eda:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8006ede:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8006ee0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ee2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006ee6:	d075      	beq.n	8006fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x8cc>
 8006ee8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eea:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006eee:	d87e      	bhi.n	8006fee <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8006ef0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ef2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ef6:	d060      	beq.n	8006fba <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 8006ef8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006efa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006efe:	d876      	bhi.n	8006fee <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8006f00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f02:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006f06:	d045      	beq.n	8006f94 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>
 8006f08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f0a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006f0e:	d86e      	bhi.n	8006fee <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8006f10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f12:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006f16:	d02b      	beq.n	8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0x868>
 8006f18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f1a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006f1e:	d866      	bhi.n	8006fee <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8006f20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d004      	beq.n	8006f30 <HAL_RCCEx_GetPeriphCLKFreq+0x828>
 8006f26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f28:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006f2c:	d00e      	beq.n	8006f4c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8006f2e:	e05e      	b.n	8006fee <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8006f30:	f000 f8bc 	bl	80070ac <HAL_RCCEx_GetD3PCLK1Freq>
 8006f34:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8006f36:	e0ac      	b.n	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8006f38:	58024400 	.word	0x58024400
 8006f3c:	03d09000 	.word	0x03d09000
 8006f40:	003d0900 	.word	0x003d0900
 8006f44:	007a1200 	.word	0x007a1200
 8006f48:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006f4c:	4b53      	ldr	r3, [pc, #332]	; (800709c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006f54:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006f58:	d107      	bne.n	8006f6a <HAL_RCCEx_GetPeriphCLKFreq+0x862>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006f5a:	f107 0318 	add.w	r3, r7, #24
 8006f5e:	4618      	mov	r0, r3
 8006f60:	f000 f8ba 	bl	80070d8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006f64:	69fb      	ldr	r3, [r7, #28]
 8006f66:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006f68:	e093      	b.n	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006f6a:	2300      	movs	r3, #0
 8006f6c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006f6e:	e090      	b.n	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006f70:	4b4a      	ldr	r3, [pc, #296]	; (800709c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006f78:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006f7c:	d107      	bne.n	8006f8e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006f7e:	f107 030c 	add.w	r3, r7, #12
 8006f82:	4618      	mov	r0, r3
 8006f84:	f000 f9fc 	bl	8007380 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006f88:	693b      	ldr	r3, [r7, #16]
 8006f8a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006f8c:	e081      	b.n	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006f8e:	2300      	movs	r3, #0
 8006f90:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006f92:	e07e      	b.n	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006f94:	4b41      	ldr	r3, [pc, #260]	; (800709c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	f003 0304 	and.w	r3, r3, #4
 8006f9c:	2b04      	cmp	r3, #4
 8006f9e:	d109      	bne.n	8006fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006fa0:	4b3e      	ldr	r3, [pc, #248]	; (800709c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	08db      	lsrs	r3, r3, #3
 8006fa6:	f003 0303 	and.w	r3, r3, #3
 8006faa:	4a3d      	ldr	r2, [pc, #244]	; (80070a0 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 8006fac:	fa22 f303 	lsr.w	r3, r2, r3
 8006fb0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006fb2:	e06e      	b.n	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006fb4:	2300      	movs	r3, #0
 8006fb6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006fb8:	e06b      	b.n	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8006fba:	4b38      	ldr	r3, [pc, #224]	; (800709c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fc2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006fc6:	d102      	bne.n	8006fce <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
         {
          frequency = CSI_VALUE;
 8006fc8:	4b36      	ldr	r3, [pc, #216]	; (80070a4 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8006fca:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006fcc:	e061      	b.n	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8006fce:	2300      	movs	r3, #0
 8006fd0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006fd2:	e05e      	b.n	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006fd4:	4b31      	ldr	r3, [pc, #196]	; (800709c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006fdc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006fe0:	d102      	bne.n	8006fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>
         {
          frequency = HSE_VALUE;
 8006fe2:	4b31      	ldr	r3, [pc, #196]	; (80070a8 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8006fe4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006fe6:	e054      	b.n	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006fe8:	2300      	movs	r3, #0
 8006fea:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006fec:	e051      	b.n	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8006fee:	2300      	movs	r3, #0
 8006ff0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006ff2:	e04e      	b.n	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ffa:	d148      	bne.n	800708e <HAL_RCCEx_GetPeriphCLKFreq+0x986>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 8006ffc:	4b27      	ldr	r3, [pc, #156]	; (800709c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006ffe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007000:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007004:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007006:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007008:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800700c:	d02a      	beq.n	8007064 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800700e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007010:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007014:	d838      	bhi.n	8007088 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 8007016:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007018:	2b00      	cmp	r3, #0
 800701a:	d004      	beq.n	8007026 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 800701c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800701e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007022:	d00d      	beq.n	8007040 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 8007024:	e030      	b.n	8007088 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007026:	4b1d      	ldr	r3, [pc, #116]	; (800709c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800702e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007032:	d102      	bne.n	800703a <HAL_RCCEx_GetPeriphCLKFreq+0x932>
         {
          frequency = HSE_VALUE;
 8007034:	4b1c      	ldr	r3, [pc, #112]	; (80070a8 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8007036:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007038:	e02b      	b.n	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800703a:	2300      	movs	r3, #0
 800703c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800703e:	e028      	b.n	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007040:	4b16      	ldr	r3, [pc, #88]	; (800709c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007048:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800704c:	d107      	bne.n	800705e <HAL_RCCEx_GetPeriphCLKFreq+0x956>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800704e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007052:	4618      	mov	r0, r3
 8007054:	f000 fae8 	bl	8007628 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800705a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800705c:	e019      	b.n	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800705e:	2300      	movs	r3, #0
 8007060:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007062:	e016      	b.n	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007064:	4b0d      	ldr	r3, [pc, #52]	; (800709c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800706c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007070:	d107      	bne.n	8007082 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007072:	f107 0318 	add.w	r3, r7, #24
 8007076:	4618      	mov	r0, r3
 8007078:	f000 f82e 	bl	80070d8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800707c:	69fb      	ldr	r3, [r7, #28]
 800707e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007080:	e007      	b.n	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007082:	2300      	movs	r3, #0
 8007084:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007086:	e004      	b.n	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8007088:	2300      	movs	r3, #0
 800708a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800708c:	e001      	b.n	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else
    {
      frequency = 0;
 800708e:	2300      	movs	r3, #0
 8007090:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8007092:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007094:	4618      	mov	r0, r3
 8007096:	3740      	adds	r7, #64	; 0x40
 8007098:	46bd      	mov	sp, r7
 800709a:	bd80      	pop	{r7, pc}
 800709c:	58024400 	.word	0x58024400
 80070a0:	03d09000 	.word	0x03d09000
 80070a4:	003d0900 	.word	0x003d0900
 80070a8:	007a1200 	.word	0x007a1200

080070ac <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80070ac:	b580      	push	{r7, lr}
 80070ae:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80070b0:	f7fe fb8e 	bl	80057d0 <HAL_RCC_GetHCLKFreq>
 80070b4:	4602      	mov	r2, r0
 80070b6:	4b06      	ldr	r3, [pc, #24]	; (80070d0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80070b8:	6a1b      	ldr	r3, [r3, #32]
 80070ba:	091b      	lsrs	r3, r3, #4
 80070bc:	f003 0307 	and.w	r3, r3, #7
 80070c0:	4904      	ldr	r1, [pc, #16]	; (80070d4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80070c2:	5ccb      	ldrb	r3, [r1, r3]
 80070c4:	f003 031f 	and.w	r3, r3, #31
 80070c8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80070cc:	4618      	mov	r0, r3
 80070ce:	bd80      	pop	{r7, pc}
 80070d0:	58024400 	.word	0x58024400
 80070d4:	0800a7c4 	.word	0x0800a7c4

080070d8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80070d8:	b480      	push	{r7}
 80070da:	b089      	sub	sp, #36	; 0x24
 80070dc:	af00      	add	r7, sp, #0
 80070de:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80070e0:	4ba1      	ldr	r3, [pc, #644]	; (8007368 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80070e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070e4:	f003 0303 	and.w	r3, r3, #3
 80070e8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80070ea:	4b9f      	ldr	r3, [pc, #636]	; (8007368 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80070ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070ee:	0b1b      	lsrs	r3, r3, #12
 80070f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80070f4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80070f6:	4b9c      	ldr	r3, [pc, #624]	; (8007368 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80070f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070fa:	091b      	lsrs	r3, r3, #4
 80070fc:	f003 0301 	and.w	r3, r3, #1
 8007100:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8007102:	4b99      	ldr	r3, [pc, #612]	; (8007368 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007104:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007106:	08db      	lsrs	r3, r3, #3
 8007108:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800710c:	693a      	ldr	r2, [r7, #16]
 800710e:	fb02 f303 	mul.w	r3, r2, r3
 8007112:	ee07 3a90 	vmov	s15, r3
 8007116:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800711a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800711e:	697b      	ldr	r3, [r7, #20]
 8007120:	2b00      	cmp	r3, #0
 8007122:	f000 8111 	beq.w	8007348 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8007126:	69bb      	ldr	r3, [r7, #24]
 8007128:	2b02      	cmp	r3, #2
 800712a:	f000 8083 	beq.w	8007234 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800712e:	69bb      	ldr	r3, [r7, #24]
 8007130:	2b02      	cmp	r3, #2
 8007132:	f200 80a1 	bhi.w	8007278 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8007136:	69bb      	ldr	r3, [r7, #24]
 8007138:	2b00      	cmp	r3, #0
 800713a:	d003      	beq.n	8007144 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800713c:	69bb      	ldr	r3, [r7, #24]
 800713e:	2b01      	cmp	r3, #1
 8007140:	d056      	beq.n	80071f0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8007142:	e099      	b.n	8007278 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007144:	4b88      	ldr	r3, [pc, #544]	; (8007368 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	f003 0320 	and.w	r3, r3, #32
 800714c:	2b00      	cmp	r3, #0
 800714e:	d02d      	beq.n	80071ac <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007150:	4b85      	ldr	r3, [pc, #532]	; (8007368 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	08db      	lsrs	r3, r3, #3
 8007156:	f003 0303 	and.w	r3, r3, #3
 800715a:	4a84      	ldr	r2, [pc, #528]	; (800736c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800715c:	fa22 f303 	lsr.w	r3, r2, r3
 8007160:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007162:	68bb      	ldr	r3, [r7, #8]
 8007164:	ee07 3a90 	vmov	s15, r3
 8007168:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800716c:	697b      	ldr	r3, [r7, #20]
 800716e:	ee07 3a90 	vmov	s15, r3
 8007172:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007176:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800717a:	4b7b      	ldr	r3, [pc, #492]	; (8007368 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800717c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800717e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007182:	ee07 3a90 	vmov	s15, r3
 8007186:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800718a:	ed97 6a03 	vldr	s12, [r7, #12]
 800718e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007370 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007192:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007196:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800719a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800719e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071a6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80071aa:	e087      	b.n	80072bc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80071ac:	697b      	ldr	r3, [r7, #20]
 80071ae:	ee07 3a90 	vmov	s15, r3
 80071b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071b6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007374 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80071ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071be:	4b6a      	ldr	r3, [pc, #424]	; (8007368 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80071c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071c6:	ee07 3a90 	vmov	s15, r3
 80071ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071ce:	ed97 6a03 	vldr	s12, [r7, #12]
 80071d2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007370 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80071d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80071e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071ea:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80071ee:	e065      	b.n	80072bc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80071f0:	697b      	ldr	r3, [r7, #20]
 80071f2:	ee07 3a90 	vmov	s15, r3
 80071f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071fa:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007378 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80071fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007202:	4b59      	ldr	r3, [pc, #356]	; (8007368 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007204:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007206:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800720a:	ee07 3a90 	vmov	s15, r3
 800720e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007212:	ed97 6a03 	vldr	s12, [r7, #12]
 8007216:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007370 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800721a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800721e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007222:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007226:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800722a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800722e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007232:	e043      	b.n	80072bc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007234:	697b      	ldr	r3, [r7, #20]
 8007236:	ee07 3a90 	vmov	s15, r3
 800723a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800723e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800737c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8007242:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007246:	4b48      	ldr	r3, [pc, #288]	; (8007368 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007248:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800724a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800724e:	ee07 3a90 	vmov	s15, r3
 8007252:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007256:	ed97 6a03 	vldr	s12, [r7, #12]
 800725a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007370 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800725e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007262:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007266:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800726a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800726e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007272:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007276:	e021      	b.n	80072bc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007278:	697b      	ldr	r3, [r7, #20]
 800727a:	ee07 3a90 	vmov	s15, r3
 800727e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007282:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007378 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007286:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800728a:	4b37      	ldr	r3, [pc, #220]	; (8007368 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800728c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800728e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007292:	ee07 3a90 	vmov	s15, r3
 8007296:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800729a:	ed97 6a03 	vldr	s12, [r7, #12]
 800729e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007370 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80072a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80072a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80072aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80072ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80072b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072b6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80072ba:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80072bc:	4b2a      	ldr	r3, [pc, #168]	; (8007368 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80072be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072c0:	0a5b      	lsrs	r3, r3, #9
 80072c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80072c6:	ee07 3a90 	vmov	s15, r3
 80072ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072ce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80072d2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80072d6:	edd7 6a07 	vldr	s13, [r7, #28]
 80072da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80072de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80072e2:	ee17 2a90 	vmov	r2, s15
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80072ea:	4b1f      	ldr	r3, [pc, #124]	; (8007368 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80072ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072ee:	0c1b      	lsrs	r3, r3, #16
 80072f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80072f4:	ee07 3a90 	vmov	s15, r3
 80072f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072fc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007300:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007304:	edd7 6a07 	vldr	s13, [r7, #28]
 8007308:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800730c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007310:	ee17 2a90 	vmov	r2, s15
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8007318:	4b13      	ldr	r3, [pc, #76]	; (8007368 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800731a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800731c:	0e1b      	lsrs	r3, r3, #24
 800731e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007322:	ee07 3a90 	vmov	s15, r3
 8007326:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800732a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800732e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007332:	edd7 6a07 	vldr	s13, [r7, #28]
 8007336:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800733a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800733e:	ee17 2a90 	vmov	r2, s15
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007346:	e008      	b.n	800735a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	2200      	movs	r2, #0
 800734c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	2200      	movs	r2, #0
 8007352:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	2200      	movs	r2, #0
 8007358:	609a      	str	r2, [r3, #8]
}
 800735a:	bf00      	nop
 800735c:	3724      	adds	r7, #36	; 0x24
 800735e:	46bd      	mov	sp, r7
 8007360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007364:	4770      	bx	lr
 8007366:	bf00      	nop
 8007368:	58024400 	.word	0x58024400
 800736c:	03d09000 	.word	0x03d09000
 8007370:	46000000 	.word	0x46000000
 8007374:	4c742400 	.word	0x4c742400
 8007378:	4a742400 	.word	0x4a742400
 800737c:	4af42400 	.word	0x4af42400

08007380 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8007380:	b480      	push	{r7}
 8007382:	b089      	sub	sp, #36	; 0x24
 8007384:	af00      	add	r7, sp, #0
 8007386:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007388:	4ba1      	ldr	r3, [pc, #644]	; (8007610 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800738a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800738c:	f003 0303 	and.w	r3, r3, #3
 8007390:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8007392:	4b9f      	ldr	r3, [pc, #636]	; (8007610 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007394:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007396:	0d1b      	lsrs	r3, r3, #20
 8007398:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800739c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800739e:	4b9c      	ldr	r3, [pc, #624]	; (8007610 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80073a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073a2:	0a1b      	lsrs	r3, r3, #8
 80073a4:	f003 0301 	and.w	r3, r3, #1
 80073a8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80073aa:	4b99      	ldr	r3, [pc, #612]	; (8007610 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80073ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073ae:	08db      	lsrs	r3, r3, #3
 80073b0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80073b4:	693a      	ldr	r2, [r7, #16]
 80073b6:	fb02 f303 	mul.w	r3, r2, r3
 80073ba:	ee07 3a90 	vmov	s15, r3
 80073be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073c2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80073c6:	697b      	ldr	r3, [r7, #20]
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	f000 8111 	beq.w	80075f0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80073ce:	69bb      	ldr	r3, [r7, #24]
 80073d0:	2b02      	cmp	r3, #2
 80073d2:	f000 8083 	beq.w	80074dc <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80073d6:	69bb      	ldr	r3, [r7, #24]
 80073d8:	2b02      	cmp	r3, #2
 80073da:	f200 80a1 	bhi.w	8007520 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80073de:	69bb      	ldr	r3, [r7, #24]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d003      	beq.n	80073ec <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80073e4:	69bb      	ldr	r3, [r7, #24]
 80073e6:	2b01      	cmp	r3, #1
 80073e8:	d056      	beq.n	8007498 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80073ea:	e099      	b.n	8007520 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80073ec:	4b88      	ldr	r3, [pc, #544]	; (8007610 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	f003 0320 	and.w	r3, r3, #32
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d02d      	beq.n	8007454 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80073f8:	4b85      	ldr	r3, [pc, #532]	; (8007610 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	08db      	lsrs	r3, r3, #3
 80073fe:	f003 0303 	and.w	r3, r3, #3
 8007402:	4a84      	ldr	r2, [pc, #528]	; (8007614 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007404:	fa22 f303 	lsr.w	r3, r2, r3
 8007408:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800740a:	68bb      	ldr	r3, [r7, #8]
 800740c:	ee07 3a90 	vmov	s15, r3
 8007410:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007414:	697b      	ldr	r3, [r7, #20]
 8007416:	ee07 3a90 	vmov	s15, r3
 800741a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800741e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007422:	4b7b      	ldr	r3, [pc, #492]	; (8007610 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007426:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800742a:	ee07 3a90 	vmov	s15, r3
 800742e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007432:	ed97 6a03 	vldr	s12, [r7, #12]
 8007436:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007618 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800743a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800743e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007442:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007446:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800744a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800744e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007452:	e087      	b.n	8007564 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007454:	697b      	ldr	r3, [r7, #20]
 8007456:	ee07 3a90 	vmov	s15, r3
 800745a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800745e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800761c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8007462:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007466:	4b6a      	ldr	r3, [pc, #424]	; (8007610 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800746a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800746e:	ee07 3a90 	vmov	s15, r3
 8007472:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007476:	ed97 6a03 	vldr	s12, [r7, #12]
 800747a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007618 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800747e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007482:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007486:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800748a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800748e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007492:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007496:	e065      	b.n	8007564 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007498:	697b      	ldr	r3, [r7, #20]
 800749a:	ee07 3a90 	vmov	s15, r3
 800749e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074a2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007620 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80074a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80074aa:	4b59      	ldr	r3, [pc, #356]	; (8007610 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80074ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074b2:	ee07 3a90 	vmov	s15, r3
 80074b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80074be:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007618 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80074c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80074c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80074ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80074d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074d6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80074da:	e043      	b.n	8007564 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80074dc:	697b      	ldr	r3, [r7, #20]
 80074de:	ee07 3a90 	vmov	s15, r3
 80074e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074e6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007624 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80074ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80074ee:	4b48      	ldr	r3, [pc, #288]	; (8007610 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80074f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074f6:	ee07 3a90 	vmov	s15, r3
 80074fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8007502:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007618 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007506:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800750a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800750e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007512:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007516:	ee67 7a27 	vmul.f32	s15, s14, s15
 800751a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800751e:	e021      	b.n	8007564 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007520:	697b      	ldr	r3, [r7, #20]
 8007522:	ee07 3a90 	vmov	s15, r3
 8007526:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800752a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007620 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800752e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007532:	4b37      	ldr	r3, [pc, #220]	; (8007610 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007536:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800753a:	ee07 3a90 	vmov	s15, r3
 800753e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007542:	ed97 6a03 	vldr	s12, [r7, #12]
 8007546:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007618 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800754a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800754e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007552:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007556:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800755a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800755e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007562:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8007564:	4b2a      	ldr	r3, [pc, #168]	; (8007610 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007568:	0a5b      	lsrs	r3, r3, #9
 800756a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800756e:	ee07 3a90 	vmov	s15, r3
 8007572:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007576:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800757a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800757e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007582:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007586:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800758a:	ee17 2a90 	vmov	r2, s15
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8007592:	4b1f      	ldr	r3, [pc, #124]	; (8007610 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007596:	0c1b      	lsrs	r3, r3, #16
 8007598:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800759c:	ee07 3a90 	vmov	s15, r3
 80075a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075a4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80075a8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80075ac:	edd7 6a07 	vldr	s13, [r7, #28]
 80075b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80075b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80075b8:	ee17 2a90 	vmov	r2, s15
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80075c0:	4b13      	ldr	r3, [pc, #76]	; (8007610 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80075c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075c4:	0e1b      	lsrs	r3, r3, #24
 80075c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80075ca:	ee07 3a90 	vmov	s15, r3
 80075ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075d2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80075d6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80075da:	edd7 6a07 	vldr	s13, [r7, #28]
 80075de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80075e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80075e6:	ee17 2a90 	vmov	r2, s15
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80075ee:	e008      	b.n	8007602 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	2200      	movs	r2, #0
 80075f4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	2200      	movs	r2, #0
 80075fa:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	2200      	movs	r2, #0
 8007600:	609a      	str	r2, [r3, #8]
}
 8007602:	bf00      	nop
 8007604:	3724      	adds	r7, #36	; 0x24
 8007606:	46bd      	mov	sp, r7
 8007608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760c:	4770      	bx	lr
 800760e:	bf00      	nop
 8007610:	58024400 	.word	0x58024400
 8007614:	03d09000 	.word	0x03d09000
 8007618:	46000000 	.word	0x46000000
 800761c:	4c742400 	.word	0x4c742400
 8007620:	4a742400 	.word	0x4a742400
 8007624:	4af42400 	.word	0x4af42400

08007628 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8007628:	b480      	push	{r7}
 800762a:	b089      	sub	sp, #36	; 0x24
 800762c:	af00      	add	r7, sp, #0
 800762e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007630:	4ba0      	ldr	r3, [pc, #640]	; (80078b4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007632:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007634:	f003 0303 	and.w	r3, r3, #3
 8007638:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800763a:	4b9e      	ldr	r3, [pc, #632]	; (80078b4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800763c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800763e:	091b      	lsrs	r3, r3, #4
 8007640:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007644:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8007646:	4b9b      	ldr	r3, [pc, #620]	; (80078b4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800764a:	f003 0301 	and.w	r3, r3, #1
 800764e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8007650:	4b98      	ldr	r3, [pc, #608]	; (80078b4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007652:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007654:	08db      	lsrs	r3, r3, #3
 8007656:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800765a:	693a      	ldr	r2, [r7, #16]
 800765c:	fb02 f303 	mul.w	r3, r2, r3
 8007660:	ee07 3a90 	vmov	s15, r3
 8007664:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007668:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800766c:	697b      	ldr	r3, [r7, #20]
 800766e:	2b00      	cmp	r3, #0
 8007670:	f000 8111 	beq.w	8007896 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8007674:	69bb      	ldr	r3, [r7, #24]
 8007676:	2b02      	cmp	r3, #2
 8007678:	f000 8083 	beq.w	8007782 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800767c:	69bb      	ldr	r3, [r7, #24]
 800767e:	2b02      	cmp	r3, #2
 8007680:	f200 80a1 	bhi.w	80077c6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8007684:	69bb      	ldr	r3, [r7, #24]
 8007686:	2b00      	cmp	r3, #0
 8007688:	d003      	beq.n	8007692 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800768a:	69bb      	ldr	r3, [r7, #24]
 800768c:	2b01      	cmp	r3, #1
 800768e:	d056      	beq.n	800773e <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8007690:	e099      	b.n	80077c6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007692:	4b88      	ldr	r3, [pc, #544]	; (80078b4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	f003 0320 	and.w	r3, r3, #32
 800769a:	2b00      	cmp	r3, #0
 800769c:	d02d      	beq.n	80076fa <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800769e:	4b85      	ldr	r3, [pc, #532]	; (80078b4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	08db      	lsrs	r3, r3, #3
 80076a4:	f003 0303 	and.w	r3, r3, #3
 80076a8:	4a83      	ldr	r2, [pc, #524]	; (80078b8 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 80076aa:	fa22 f303 	lsr.w	r3, r2, r3
 80076ae:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80076b0:	68bb      	ldr	r3, [r7, #8]
 80076b2:	ee07 3a90 	vmov	s15, r3
 80076b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076ba:	697b      	ldr	r3, [r7, #20]
 80076bc:	ee07 3a90 	vmov	s15, r3
 80076c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076c4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80076c8:	4b7a      	ldr	r3, [pc, #488]	; (80078b4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80076ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076d0:	ee07 3a90 	vmov	s15, r3
 80076d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076d8:	ed97 6a03 	vldr	s12, [r7, #12]
 80076dc:	eddf 5a77 	vldr	s11, [pc, #476]	; 80078bc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80076e0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80076e4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80076e8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80076ec:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80076f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076f4:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80076f8:	e087      	b.n	800780a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80076fa:	697b      	ldr	r3, [r7, #20]
 80076fc:	ee07 3a90 	vmov	s15, r3
 8007700:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007704:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80078c0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8007708:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800770c:	4b69      	ldr	r3, [pc, #420]	; (80078b4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800770e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007710:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007714:	ee07 3a90 	vmov	s15, r3
 8007718:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800771c:	ed97 6a03 	vldr	s12, [r7, #12]
 8007720:	eddf 5a66 	vldr	s11, [pc, #408]	; 80078bc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007724:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007728:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800772c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007730:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007734:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007738:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800773c:	e065      	b.n	800780a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800773e:	697b      	ldr	r3, [r7, #20]
 8007740:	ee07 3a90 	vmov	s15, r3
 8007744:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007748:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80078c4 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800774c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007750:	4b58      	ldr	r3, [pc, #352]	; (80078b4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007752:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007754:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007758:	ee07 3a90 	vmov	s15, r3
 800775c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007760:	ed97 6a03 	vldr	s12, [r7, #12]
 8007764:	eddf 5a55 	vldr	s11, [pc, #340]	; 80078bc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007768:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800776c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007770:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007774:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007778:	ee67 7a27 	vmul.f32	s15, s14, s15
 800777c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007780:	e043      	b.n	800780a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007782:	697b      	ldr	r3, [r7, #20]
 8007784:	ee07 3a90 	vmov	s15, r3
 8007788:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800778c:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80078c8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8007790:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007794:	4b47      	ldr	r3, [pc, #284]	; (80078b4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007796:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007798:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800779c:	ee07 3a90 	vmov	s15, r3
 80077a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80077a4:	ed97 6a03 	vldr	s12, [r7, #12]
 80077a8:	eddf 5a44 	vldr	s11, [pc, #272]	; 80078bc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80077ac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80077b0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80077b4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80077b8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80077bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80077c0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80077c4:	e021      	b.n	800780a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80077c6:	697b      	ldr	r3, [r7, #20]
 80077c8:	ee07 3a90 	vmov	s15, r3
 80077cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077d0:	eddf 6a3b 	vldr	s13, [pc, #236]	; 80078c0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80077d4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80077d8:	4b36      	ldr	r3, [pc, #216]	; (80078b4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80077da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077e0:	ee07 3a90 	vmov	s15, r3
 80077e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80077e8:	ed97 6a03 	vldr	s12, [r7, #12]
 80077ec:	eddf 5a33 	vldr	s11, [pc, #204]	; 80078bc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80077f0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80077f4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80077f8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80077fc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007800:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007804:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007808:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800780a:	4b2a      	ldr	r3, [pc, #168]	; (80078b4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800780c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800780e:	0a5b      	lsrs	r3, r3, #9
 8007810:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007814:	ee07 3a90 	vmov	s15, r3
 8007818:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800781c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007820:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007824:	edd7 6a07 	vldr	s13, [r7, #28]
 8007828:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800782c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007830:	ee17 2a90 	vmov	r2, s15
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8007838:	4b1e      	ldr	r3, [pc, #120]	; (80078b4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800783a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800783c:	0c1b      	lsrs	r3, r3, #16
 800783e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007842:	ee07 3a90 	vmov	s15, r3
 8007846:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800784a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800784e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007852:	edd7 6a07 	vldr	s13, [r7, #28]
 8007856:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800785a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800785e:	ee17 2a90 	vmov	r2, s15
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8007866:	4b13      	ldr	r3, [pc, #76]	; (80078b4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800786a:	0e1b      	lsrs	r3, r3, #24
 800786c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007870:	ee07 3a90 	vmov	s15, r3
 8007874:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007878:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800787c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007880:	edd7 6a07 	vldr	s13, [r7, #28]
 8007884:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007888:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800788c:	ee17 2a90 	vmov	r2, s15
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8007894:	e008      	b.n	80078a8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	2200      	movs	r2, #0
 800789a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	2200      	movs	r2, #0
 80078a0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	2200      	movs	r2, #0
 80078a6:	609a      	str	r2, [r3, #8]
}
 80078a8:	bf00      	nop
 80078aa:	3724      	adds	r7, #36	; 0x24
 80078ac:	46bd      	mov	sp, r7
 80078ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b2:	4770      	bx	lr
 80078b4:	58024400 	.word	0x58024400
 80078b8:	03d09000 	.word	0x03d09000
 80078bc:	46000000 	.word	0x46000000
 80078c0:	4c742400 	.word	0x4c742400
 80078c4:	4a742400 	.word	0x4a742400
 80078c8:	4af42400 	.word	0x4af42400

080078cc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80078cc:	b580      	push	{r7, lr}
 80078ce:	b084      	sub	sp, #16
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6078      	str	r0, [r7, #4]
 80078d4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80078d6:	2300      	movs	r3, #0
 80078d8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80078da:	4b53      	ldr	r3, [pc, #332]	; (8007a28 <RCCEx_PLL2_Config+0x15c>)
 80078dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078de:	f003 0303 	and.w	r3, r3, #3
 80078e2:	2b03      	cmp	r3, #3
 80078e4:	d101      	bne.n	80078ea <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80078e6:	2301      	movs	r3, #1
 80078e8:	e099      	b.n	8007a1e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80078ea:	4b4f      	ldr	r3, [pc, #316]	; (8007a28 <RCCEx_PLL2_Config+0x15c>)
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	4a4e      	ldr	r2, [pc, #312]	; (8007a28 <RCCEx_PLL2_Config+0x15c>)
 80078f0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80078f4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80078f6:	f7f9 fd9b 	bl	8001430 <HAL_GetTick>
 80078fa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80078fc:	e008      	b.n	8007910 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80078fe:	f7f9 fd97 	bl	8001430 <HAL_GetTick>
 8007902:	4602      	mov	r2, r0
 8007904:	68bb      	ldr	r3, [r7, #8]
 8007906:	1ad3      	subs	r3, r2, r3
 8007908:	2b02      	cmp	r3, #2
 800790a:	d901      	bls.n	8007910 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800790c:	2303      	movs	r3, #3
 800790e:	e086      	b.n	8007a1e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007910:	4b45      	ldr	r3, [pc, #276]	; (8007a28 <RCCEx_PLL2_Config+0x15c>)
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007918:	2b00      	cmp	r3, #0
 800791a:	d1f0      	bne.n	80078fe <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800791c:	4b42      	ldr	r3, [pc, #264]	; (8007a28 <RCCEx_PLL2_Config+0x15c>)
 800791e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007920:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	031b      	lsls	r3, r3, #12
 800792a:	493f      	ldr	r1, [pc, #252]	; (8007a28 <RCCEx_PLL2_Config+0x15c>)
 800792c:	4313      	orrs	r3, r2
 800792e:	628b      	str	r3, [r1, #40]	; 0x28
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	685b      	ldr	r3, [r3, #4]
 8007934:	3b01      	subs	r3, #1
 8007936:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	689b      	ldr	r3, [r3, #8]
 800793e:	3b01      	subs	r3, #1
 8007940:	025b      	lsls	r3, r3, #9
 8007942:	b29b      	uxth	r3, r3
 8007944:	431a      	orrs	r2, r3
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	68db      	ldr	r3, [r3, #12]
 800794a:	3b01      	subs	r3, #1
 800794c:	041b      	lsls	r3, r3, #16
 800794e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007952:	431a      	orrs	r2, r3
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	691b      	ldr	r3, [r3, #16]
 8007958:	3b01      	subs	r3, #1
 800795a:	061b      	lsls	r3, r3, #24
 800795c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007960:	4931      	ldr	r1, [pc, #196]	; (8007a28 <RCCEx_PLL2_Config+0x15c>)
 8007962:	4313      	orrs	r3, r2
 8007964:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007966:	4b30      	ldr	r3, [pc, #192]	; (8007a28 <RCCEx_PLL2_Config+0x15c>)
 8007968:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800796a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	695b      	ldr	r3, [r3, #20]
 8007972:	492d      	ldr	r1, [pc, #180]	; (8007a28 <RCCEx_PLL2_Config+0x15c>)
 8007974:	4313      	orrs	r3, r2
 8007976:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007978:	4b2b      	ldr	r3, [pc, #172]	; (8007a28 <RCCEx_PLL2_Config+0x15c>)
 800797a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800797c:	f023 0220 	bic.w	r2, r3, #32
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	699b      	ldr	r3, [r3, #24]
 8007984:	4928      	ldr	r1, [pc, #160]	; (8007a28 <RCCEx_PLL2_Config+0x15c>)
 8007986:	4313      	orrs	r3, r2
 8007988:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800798a:	4b27      	ldr	r3, [pc, #156]	; (8007a28 <RCCEx_PLL2_Config+0x15c>)
 800798c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800798e:	4a26      	ldr	r2, [pc, #152]	; (8007a28 <RCCEx_PLL2_Config+0x15c>)
 8007990:	f023 0310 	bic.w	r3, r3, #16
 8007994:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007996:	4b24      	ldr	r3, [pc, #144]	; (8007a28 <RCCEx_PLL2_Config+0x15c>)
 8007998:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800799a:	4b24      	ldr	r3, [pc, #144]	; (8007a2c <RCCEx_PLL2_Config+0x160>)
 800799c:	4013      	ands	r3, r2
 800799e:	687a      	ldr	r2, [r7, #4]
 80079a0:	69d2      	ldr	r2, [r2, #28]
 80079a2:	00d2      	lsls	r2, r2, #3
 80079a4:	4920      	ldr	r1, [pc, #128]	; (8007a28 <RCCEx_PLL2_Config+0x15c>)
 80079a6:	4313      	orrs	r3, r2
 80079a8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80079aa:	4b1f      	ldr	r3, [pc, #124]	; (8007a28 <RCCEx_PLL2_Config+0x15c>)
 80079ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079ae:	4a1e      	ldr	r2, [pc, #120]	; (8007a28 <RCCEx_PLL2_Config+0x15c>)
 80079b0:	f043 0310 	orr.w	r3, r3, #16
 80079b4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80079b6:	683b      	ldr	r3, [r7, #0]
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d106      	bne.n	80079ca <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80079bc:	4b1a      	ldr	r3, [pc, #104]	; (8007a28 <RCCEx_PLL2_Config+0x15c>)
 80079be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079c0:	4a19      	ldr	r2, [pc, #100]	; (8007a28 <RCCEx_PLL2_Config+0x15c>)
 80079c2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80079c6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80079c8:	e00f      	b.n	80079ea <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80079ca:	683b      	ldr	r3, [r7, #0]
 80079cc:	2b01      	cmp	r3, #1
 80079ce:	d106      	bne.n	80079de <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80079d0:	4b15      	ldr	r3, [pc, #84]	; (8007a28 <RCCEx_PLL2_Config+0x15c>)
 80079d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079d4:	4a14      	ldr	r2, [pc, #80]	; (8007a28 <RCCEx_PLL2_Config+0x15c>)
 80079d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80079da:	62d3      	str	r3, [r2, #44]	; 0x2c
 80079dc:	e005      	b.n	80079ea <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80079de:	4b12      	ldr	r3, [pc, #72]	; (8007a28 <RCCEx_PLL2_Config+0x15c>)
 80079e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079e2:	4a11      	ldr	r2, [pc, #68]	; (8007a28 <RCCEx_PLL2_Config+0x15c>)
 80079e4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80079e8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80079ea:	4b0f      	ldr	r3, [pc, #60]	; (8007a28 <RCCEx_PLL2_Config+0x15c>)
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	4a0e      	ldr	r2, [pc, #56]	; (8007a28 <RCCEx_PLL2_Config+0x15c>)
 80079f0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80079f4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80079f6:	f7f9 fd1b 	bl	8001430 <HAL_GetTick>
 80079fa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80079fc:	e008      	b.n	8007a10 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80079fe:	f7f9 fd17 	bl	8001430 <HAL_GetTick>
 8007a02:	4602      	mov	r2, r0
 8007a04:	68bb      	ldr	r3, [r7, #8]
 8007a06:	1ad3      	subs	r3, r2, r3
 8007a08:	2b02      	cmp	r3, #2
 8007a0a:	d901      	bls.n	8007a10 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007a0c:	2303      	movs	r3, #3
 8007a0e:	e006      	b.n	8007a1e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007a10:	4b05      	ldr	r3, [pc, #20]	; (8007a28 <RCCEx_PLL2_Config+0x15c>)
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d0f0      	beq.n	80079fe <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007a1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a1e:	4618      	mov	r0, r3
 8007a20:	3710      	adds	r7, #16
 8007a22:	46bd      	mov	sp, r7
 8007a24:	bd80      	pop	{r7, pc}
 8007a26:	bf00      	nop
 8007a28:	58024400 	.word	0x58024400
 8007a2c:	ffff0007 	.word	0xffff0007

08007a30 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007a30:	b580      	push	{r7, lr}
 8007a32:	b084      	sub	sp, #16
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	6078      	str	r0, [r7, #4]
 8007a38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007a3a:	2300      	movs	r3, #0
 8007a3c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007a3e:	4b53      	ldr	r3, [pc, #332]	; (8007b8c <RCCEx_PLL3_Config+0x15c>)
 8007a40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a42:	f003 0303 	and.w	r3, r3, #3
 8007a46:	2b03      	cmp	r3, #3
 8007a48:	d101      	bne.n	8007a4e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007a4a:	2301      	movs	r3, #1
 8007a4c:	e099      	b.n	8007b82 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007a4e:	4b4f      	ldr	r3, [pc, #316]	; (8007b8c <RCCEx_PLL3_Config+0x15c>)
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	4a4e      	ldr	r2, [pc, #312]	; (8007b8c <RCCEx_PLL3_Config+0x15c>)
 8007a54:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007a58:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007a5a:	f7f9 fce9 	bl	8001430 <HAL_GetTick>
 8007a5e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007a60:	e008      	b.n	8007a74 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8007a62:	f7f9 fce5 	bl	8001430 <HAL_GetTick>
 8007a66:	4602      	mov	r2, r0
 8007a68:	68bb      	ldr	r3, [r7, #8]
 8007a6a:	1ad3      	subs	r3, r2, r3
 8007a6c:	2b02      	cmp	r3, #2
 8007a6e:	d901      	bls.n	8007a74 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007a70:	2303      	movs	r3, #3
 8007a72:	e086      	b.n	8007b82 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007a74:	4b45      	ldr	r3, [pc, #276]	; (8007b8c <RCCEx_PLL3_Config+0x15c>)
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d1f0      	bne.n	8007a62 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007a80:	4b42      	ldr	r3, [pc, #264]	; (8007b8c <RCCEx_PLL3_Config+0x15c>)
 8007a82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a84:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	051b      	lsls	r3, r3, #20
 8007a8e:	493f      	ldr	r1, [pc, #252]	; (8007b8c <RCCEx_PLL3_Config+0x15c>)
 8007a90:	4313      	orrs	r3, r2
 8007a92:	628b      	str	r3, [r1, #40]	; 0x28
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	685b      	ldr	r3, [r3, #4]
 8007a98:	3b01      	subs	r3, #1
 8007a9a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	689b      	ldr	r3, [r3, #8]
 8007aa2:	3b01      	subs	r3, #1
 8007aa4:	025b      	lsls	r3, r3, #9
 8007aa6:	b29b      	uxth	r3, r3
 8007aa8:	431a      	orrs	r2, r3
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	68db      	ldr	r3, [r3, #12]
 8007aae:	3b01      	subs	r3, #1
 8007ab0:	041b      	lsls	r3, r3, #16
 8007ab2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007ab6:	431a      	orrs	r2, r3
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	691b      	ldr	r3, [r3, #16]
 8007abc:	3b01      	subs	r3, #1
 8007abe:	061b      	lsls	r3, r3, #24
 8007ac0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007ac4:	4931      	ldr	r1, [pc, #196]	; (8007b8c <RCCEx_PLL3_Config+0x15c>)
 8007ac6:	4313      	orrs	r3, r2
 8007ac8:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007aca:	4b30      	ldr	r3, [pc, #192]	; (8007b8c <RCCEx_PLL3_Config+0x15c>)
 8007acc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ace:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	695b      	ldr	r3, [r3, #20]
 8007ad6:	492d      	ldr	r1, [pc, #180]	; (8007b8c <RCCEx_PLL3_Config+0x15c>)
 8007ad8:	4313      	orrs	r3, r2
 8007ada:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007adc:	4b2b      	ldr	r3, [pc, #172]	; (8007b8c <RCCEx_PLL3_Config+0x15c>)
 8007ade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ae0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	699b      	ldr	r3, [r3, #24]
 8007ae8:	4928      	ldr	r1, [pc, #160]	; (8007b8c <RCCEx_PLL3_Config+0x15c>)
 8007aea:	4313      	orrs	r3, r2
 8007aec:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007aee:	4b27      	ldr	r3, [pc, #156]	; (8007b8c <RCCEx_PLL3_Config+0x15c>)
 8007af0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007af2:	4a26      	ldr	r2, [pc, #152]	; (8007b8c <RCCEx_PLL3_Config+0x15c>)
 8007af4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007af8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007afa:	4b24      	ldr	r3, [pc, #144]	; (8007b8c <RCCEx_PLL3_Config+0x15c>)
 8007afc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007afe:	4b24      	ldr	r3, [pc, #144]	; (8007b90 <RCCEx_PLL3_Config+0x160>)
 8007b00:	4013      	ands	r3, r2
 8007b02:	687a      	ldr	r2, [r7, #4]
 8007b04:	69d2      	ldr	r2, [r2, #28]
 8007b06:	00d2      	lsls	r2, r2, #3
 8007b08:	4920      	ldr	r1, [pc, #128]	; (8007b8c <RCCEx_PLL3_Config+0x15c>)
 8007b0a:	4313      	orrs	r3, r2
 8007b0c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007b0e:	4b1f      	ldr	r3, [pc, #124]	; (8007b8c <RCCEx_PLL3_Config+0x15c>)
 8007b10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b12:	4a1e      	ldr	r2, [pc, #120]	; (8007b8c <RCCEx_PLL3_Config+0x15c>)
 8007b14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007b18:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8007b1a:	683b      	ldr	r3, [r7, #0]
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d106      	bne.n	8007b2e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007b20:	4b1a      	ldr	r3, [pc, #104]	; (8007b8c <RCCEx_PLL3_Config+0x15c>)
 8007b22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b24:	4a19      	ldr	r2, [pc, #100]	; (8007b8c <RCCEx_PLL3_Config+0x15c>)
 8007b26:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007b2a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007b2c:	e00f      	b.n	8007b4e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8007b2e:	683b      	ldr	r3, [r7, #0]
 8007b30:	2b01      	cmp	r3, #1
 8007b32:	d106      	bne.n	8007b42 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007b34:	4b15      	ldr	r3, [pc, #84]	; (8007b8c <RCCEx_PLL3_Config+0x15c>)
 8007b36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b38:	4a14      	ldr	r2, [pc, #80]	; (8007b8c <RCCEx_PLL3_Config+0x15c>)
 8007b3a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007b3e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007b40:	e005      	b.n	8007b4e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007b42:	4b12      	ldr	r3, [pc, #72]	; (8007b8c <RCCEx_PLL3_Config+0x15c>)
 8007b44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b46:	4a11      	ldr	r2, [pc, #68]	; (8007b8c <RCCEx_PLL3_Config+0x15c>)
 8007b48:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007b4c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007b4e:	4b0f      	ldr	r3, [pc, #60]	; (8007b8c <RCCEx_PLL3_Config+0x15c>)
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	4a0e      	ldr	r2, [pc, #56]	; (8007b8c <RCCEx_PLL3_Config+0x15c>)
 8007b54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007b58:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007b5a:	f7f9 fc69 	bl	8001430 <HAL_GetTick>
 8007b5e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007b60:	e008      	b.n	8007b74 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8007b62:	f7f9 fc65 	bl	8001430 <HAL_GetTick>
 8007b66:	4602      	mov	r2, r0
 8007b68:	68bb      	ldr	r3, [r7, #8]
 8007b6a:	1ad3      	subs	r3, r2, r3
 8007b6c:	2b02      	cmp	r3, #2
 8007b6e:	d901      	bls.n	8007b74 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007b70:	2303      	movs	r3, #3
 8007b72:	e006      	b.n	8007b82 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007b74:	4b05      	ldr	r3, [pc, #20]	; (8007b8c <RCCEx_PLL3_Config+0x15c>)
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d0f0      	beq.n	8007b62 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007b80:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b82:	4618      	mov	r0, r3
 8007b84:	3710      	adds	r7, #16
 8007b86:	46bd      	mov	sp, r7
 8007b88:	bd80      	pop	{r7, pc}
 8007b8a:	bf00      	nop
 8007b8c:	58024400 	.word	0x58024400
 8007b90:	ffff0007 	.word	0xffff0007

08007b94 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8007b94:	b580      	push	{r7, lr}
 8007b96:	b08a      	sub	sp, #40	; 0x28
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	6078      	str	r0, [r7, #4]
  uint32_t ckstr_bits;
  uint32_t syncen_bits;
  SAI_TypeDef *SaiBaseAddress;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d101      	bne.n	8007ba6 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 8007ba2:	2301      	movs	r3, #1
 8007ba4:	e283      	b.n	80080ae <HAL_SAI_Init+0x51a>
  assert_param(IS_SAI_BLOCK_FIRST_BIT(hsai->Init.FirstBit));
  assert_param(IS_SAI_BLOCK_CLOCK_STROBING(hsai->Init.ClockStrobing));
  assert_param(IS_SAI_BLOCK_SYNCHRO(hsai->Init.Synchro));
#if defined(SAI_VER_V2_X) 
  /* SAI Peripheral version depends on STM32H7 device revision ID */
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 8007ba6:	f7f9 fc4f 	bl	8001448 <HAL_GetREVID>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007bb0:	2b01      	cmp	r3, #1
 8007bb2:	d113      	bne.n	8007bdc <HAL_SAI_Init+0x48>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 or SAI4 sub-block A, in master RX mode with free protocol */
#if defined(SAI4)
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	4a94      	ldr	r2, [pc, #592]	; (8007e0c <HAL_SAI_Init+0x278>)
 8007bba:	4293      	cmp	r3, r2
 8007bbc:	d004      	beq.n	8007bc8 <HAL_SAI_Init+0x34>
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	4a93      	ldr	r2, [pc, #588]	; (8007e10 <HAL_SAI_Init+0x27c>)
 8007bc4:	4293      	cmp	r3, r2
 8007bc6:	d107      	bne.n	8007bd8 <HAL_SAI_Init+0x44>
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	685b      	ldr	r3, [r3, #4]
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 8007bcc:	2b01      	cmp	r3, #1
 8007bce:	d103      	bne.n	8007bd8 <HAL_SAI_Init+0x44>
         (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d001      	beq.n	8007bdc <HAL_SAI_Init+0x48>
    {
      return HAL_ERROR;
 8007bd8:	2301      	movs	r3, #1
 8007bda:	e268      	b.n	80080ae <HAL_SAI_Init+0x51a>
    }
#endif /* SAI4 */
  }

  /* Get the SAI base address according to the SAI handle */
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	4a8a      	ldr	r2, [pc, #552]	; (8007e0c <HAL_SAI_Init+0x278>)
 8007be2:	4293      	cmp	r3, r2
 8007be4:	d004      	beq.n	8007bf0 <HAL_SAI_Init+0x5c>
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	4a8a      	ldr	r2, [pc, #552]	; (8007e14 <HAL_SAI_Init+0x280>)
 8007bec:	4293      	cmp	r3, r2
 8007bee:	d102      	bne.n	8007bf6 <HAL_SAI_Init+0x62>
  {
    SaiBaseAddress = SAI1;
 8007bf0:	4b89      	ldr	r3, [pc, #548]	; (8007e18 <HAL_SAI_Init+0x284>)
 8007bf2:	61bb      	str	r3, [r7, #24]
 8007bf4:	e028      	b.n	8007c48 <HAL_SAI_Init+0xb4>
  }
#if defined(SAI2)
  else if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	4a88      	ldr	r2, [pc, #544]	; (8007e1c <HAL_SAI_Init+0x288>)
 8007bfc:	4293      	cmp	r3, r2
 8007bfe:	d004      	beq.n	8007c0a <HAL_SAI_Init+0x76>
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	4a86      	ldr	r2, [pc, #536]	; (8007e20 <HAL_SAI_Init+0x28c>)
 8007c06:	4293      	cmp	r3, r2
 8007c08:	d102      	bne.n	8007c10 <HAL_SAI_Init+0x7c>
  {
    SaiBaseAddress = SAI2;
 8007c0a:	4b86      	ldr	r3, [pc, #536]	; (8007e24 <HAL_SAI_Init+0x290>)
 8007c0c:	61bb      	str	r3, [r7, #24]
 8007c0e:	e01b      	b.n	8007c48 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI2 */
#if defined(SAI3)
  else if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	4a84      	ldr	r2, [pc, #528]	; (8007e28 <HAL_SAI_Init+0x294>)
 8007c16:	4293      	cmp	r3, r2
 8007c18:	d004      	beq.n	8007c24 <HAL_SAI_Init+0x90>
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	4a83      	ldr	r2, [pc, #524]	; (8007e2c <HAL_SAI_Init+0x298>)
 8007c20:	4293      	cmp	r3, r2
 8007c22:	d102      	bne.n	8007c2a <HAL_SAI_Init+0x96>
  {
    SaiBaseAddress = SAI3;
 8007c24:	4b82      	ldr	r3, [pc, #520]	; (8007e30 <HAL_SAI_Init+0x29c>)
 8007c26:	61bb      	str	r3, [r7, #24]
 8007c28:	e00e      	b.n	8007c48 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI3 */
#if defined(SAI4)
  else if ((hsai->Instance == SAI4_Block_A) || (hsai->Instance == SAI4_Block_B))
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	4a78      	ldr	r2, [pc, #480]	; (8007e10 <HAL_SAI_Init+0x27c>)
 8007c30:	4293      	cmp	r3, r2
 8007c32:	d004      	beq.n	8007c3e <HAL_SAI_Init+0xaa>
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	4a7e      	ldr	r2, [pc, #504]	; (8007e34 <HAL_SAI_Init+0x2a0>)
 8007c3a:	4293      	cmp	r3, r2
 8007c3c:	d102      	bne.n	8007c44 <HAL_SAI_Init+0xb0>
  {
    SaiBaseAddress = SAI4;
 8007c3e:	4b7e      	ldr	r3, [pc, #504]	; (8007e38 <HAL_SAI_Init+0x2a4>)
 8007c40:	61bb      	str	r3, [r7, #24]
 8007c42:	e001      	b.n	8007c48 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI4 */
  else
  {
    return HAL_ERROR;
 8007c44:	2301      	movs	r3, #1
 8007c46:	e232      	b.n	80080ae <HAL_SAI_Init+0x51a>
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 8007c4e:	b2db      	uxtb	r3, r3
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d106      	bne.n	8007c62 <HAL_SAI_Init+0xce>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	2200      	movs	r2, #0
 8007c58:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8007c5c:	6878      	ldr	r0, [r7, #4]
 8007c5e:	f7f9 fa2f 	bl	80010c0 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if(SAI_Disable(hsai) != HAL_OK)
 8007c62:	6878      	ldr	r0, [r7, #4]
 8007c64:	f000 fb0c 	bl	8008280 <SAI_Disable>
 8007c68:	4603      	mov	r3, r0
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d001      	beq.n	8007c72 <HAL_SAI_Init+0xde>
  {
    return HAL_ERROR;
 8007c6e:	2301      	movs	r3, #1
 8007c70:	e21d      	b.n	80080ae <HAL_SAI_Init+0x51a>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	2202      	movs	r2, #2
 8007c76:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	68db      	ldr	r3, [r3, #12]
 8007c7e:	2b02      	cmp	r3, #2
 8007c80:	d00c      	beq.n	8007c9c <HAL_SAI_Init+0x108>
 8007c82:	2b02      	cmp	r3, #2
 8007c84:	d80d      	bhi.n	8007ca2 <HAL_SAI_Init+0x10e>
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d002      	beq.n	8007c90 <HAL_SAI_Init+0xfc>
 8007c8a:	2b01      	cmp	r3, #1
 8007c8c:	d003      	beq.n	8007c96 <HAL_SAI_Init+0x102>
 8007c8e:	e008      	b.n	8007ca2 <HAL_SAI_Init+0x10e>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 8007c90:	2300      	movs	r3, #0
 8007c92:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8007c94:	e008      	b.n	8007ca8 <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8007c96:	2310      	movs	r3, #16
 8007c98:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8007c9a:	e005      	b.n	8007ca8 <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8007c9c:	2320      	movs	r3, #32
 8007c9e:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8007ca0:	e002      	b.n	8007ca8 <HAL_SAI_Init+0x114>
    default:
      tmpregisterGCR = 0;
 8007ca2:	2300      	movs	r3, #0
 8007ca4:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8007ca6:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	689b      	ldr	r3, [r3, #8]
 8007cac:	2b05      	cmp	r3, #5
 8007cae:	d832      	bhi.n	8007d16 <HAL_SAI_Init+0x182>
 8007cb0:	a201      	add	r2, pc, #4	; (adr r2, 8007cb8 <HAL_SAI_Init+0x124>)
 8007cb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cb6:	bf00      	nop
 8007cb8:	08007cd1 	.word	0x08007cd1
 8007cbc:	08007cd7 	.word	0x08007cd7
 8007cc0:	08007cdf 	.word	0x08007cdf
 8007cc4:	08007ce7 	.word	0x08007ce7
 8007cc8:	08007cf7 	.word	0x08007cf7
 8007ccc:	08007d07 	.word	0x08007d07
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 8007cd0:	2300      	movs	r3, #0
 8007cd2:	61fb      	str	r3, [r7, #28]
      break;
 8007cd4:	e022      	b.n	8007d1c <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8007cd6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007cda:	61fb      	str	r3, [r7, #28]
      break;
 8007cdc:	e01e      	b.n	8007d1c <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8007cde:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007ce2:	61fb      	str	r3, [r7, #28]
      break;
 8007ce4:	e01a      	b.n	8007d1c <HAL_SAI_Init+0x188>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8007ce6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007cea:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8007cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cee:	f043 0301 	orr.w	r3, r3, #1
 8007cf2:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8007cf4:	e012      	b.n	8007d1c <HAL_SAI_Init+0x188>
#endif /* SAI2 */
#if defined(SAI3)
    case SAI_SYNCHRONOUS_EXT_SAI3 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8007cf6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007cfa:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
 8007cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cfe:	f043 0302 	orr.w	r3, r3, #2
 8007d02:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8007d04:	e00a      	b.n	8007d1c <HAL_SAI_Init+0x188>
#endif /* SAI3 */
#if defined(SAI4)
    case SAI_SYNCHRONOUS_EXT_SAI4 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8007d06:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007d0a:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
 8007d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d0e:	f043 0303 	orr.w	r3, r3, #3
 8007d12:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8007d14:	e002      	b.n	8007d1c <HAL_SAI_Init+0x188>
#endif /* SAI4 */
    default:
      syncen_bits = 0;
 8007d16:	2300      	movs	r3, #0
 8007d18:	61fb      	str	r3, [r7, #28]
      break;
 8007d1a:	bf00      	nop
  }

  /* Set the SAI Block Synchro Configuration */
  SaiBaseAddress->GCR = tmpregisterGCR;
 8007d1c:	69bb      	ldr	r3, [r7, #24]
 8007d1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d20:	601a      	str	r2, [r3, #0]

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	6a1b      	ldr	r3, [r3, #32]
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	f000 80ba 	beq.w	8007ea0 <HAL_SAI_Init+0x30c>
  {
    uint32_t freq = 0;
 8007d2c:	2300      	movs	r3, #0
 8007d2e:	617b      	str	r3, [r7, #20]
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	4a35      	ldr	r2, [pc, #212]	; (8007e0c <HAL_SAI_Init+0x278>)
 8007d36:	4293      	cmp	r3, r2
 8007d38:	d004      	beq.n	8007d44 <HAL_SAI_Init+0x1b0>
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	4a35      	ldr	r2, [pc, #212]	; (8007e14 <HAL_SAI_Init+0x280>)
 8007d40:	4293      	cmp	r3, r2
 8007d42:	d104      	bne.n	8007d4e <HAL_SAI_Init+0x1ba>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8007d44:	f44f 7080 	mov.w	r0, #256	; 0x100
 8007d48:	f7fe fcde 	bl	8006708 <HAL_RCCEx_GetPeriphCLKFreq>
 8007d4c:	6178      	str	r0, [r7, #20]
    }

#if defined(SAI2)
#if defined(RCC_PERIPHCLK_SAI2)
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	4a32      	ldr	r2, [pc, #200]	; (8007e1c <HAL_SAI_Init+0x288>)
 8007d54:	4293      	cmp	r3, r2
 8007d56:	d004      	beq.n	8007d62 <HAL_SAI_Init+0x1ce>
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	4a30      	ldr	r2, [pc, #192]	; (8007e20 <HAL_SAI_Init+0x28c>)
 8007d5e:	4293      	cmp	r3, r2
 8007d60:	d104      	bne.n	8007d6c <HAL_SAI_Init+0x1d8>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8007d62:	f44f 7000 	mov.w	r0, #512	; 0x200
 8007d66:	f7fe fccf 	bl	8006708 <HAL_RCCEx_GetPeriphCLKFreq>
 8007d6a:	6178      	str	r0, [r7, #20]
    }
#endif /* RCC_PERIPHCLK_SAI2 */
#endif /* SAI2 */

#if defined(SAI3)
    if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	4a2d      	ldr	r2, [pc, #180]	; (8007e28 <HAL_SAI_Init+0x294>)
 8007d72:	4293      	cmp	r3, r2
 8007d74:	d004      	beq.n	8007d80 <HAL_SAI_Init+0x1ec>
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	4a2c      	ldr	r2, [pc, #176]	; (8007e2c <HAL_SAI_Init+0x298>)
 8007d7c:	4293      	cmp	r3, r2
 8007d7e:	d104      	bne.n	8007d8a <HAL_SAI_Init+0x1f6>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
 8007d80:	f44f 7000 	mov.w	r0, #512	; 0x200
 8007d84:	f7fe fcc0 	bl	8006708 <HAL_RCCEx_GetPeriphCLKFreq>
 8007d88:	6178      	str	r0, [r7, #20]
    }
#endif /* SAI3 */
#if defined(SAI4)
    if (hsai->Instance == SAI4_Block_A)
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	4a20      	ldr	r2, [pc, #128]	; (8007e10 <HAL_SAI_Init+0x27c>)
 8007d90:	4293      	cmp	r3, r2
 8007d92:	d104      	bne.n	8007d9e <HAL_SAI_Init+0x20a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
 8007d94:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8007d98:	f7fe fcb6 	bl	8006708 <HAL_RCCEx_GetPeriphCLKFreq>
 8007d9c:	6178      	str	r0, [r7, #20]
    }
    if (hsai->Instance == SAI4_Block_B)
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	4a24      	ldr	r2, [pc, #144]	; (8007e34 <HAL_SAI_Init+0x2a0>)
 8007da4:	4293      	cmp	r3, r2
 8007da6:	d104      	bne.n	8007db2 <HAL_SAI_Init+0x21e>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
 8007da8:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8007dac:	f7fe fcac 	bl	8006708 <HAL_RCCEx_GetPeriphCLKFreq>
 8007db0:	6178      	str	r0, [r7, #20]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	699b      	ldr	r3, [r3, #24]
 8007db6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007dba:	d120      	bne.n	8007dfe <HAL_SAI_Init+0x26a>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007dc0:	2b04      	cmp	r3, #4
 8007dc2:	d102      	bne.n	8007dca <HAL_SAI_Init+0x236>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = 64U;
 8007dc4:	2340      	movs	r3, #64	; 0x40
 8007dc6:	60fb      	str	r3, [r7, #12]
 8007dc8:	e00a      	b.n	8007de0 <HAL_SAI_Init+0x24c>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007dce:	2b08      	cmp	r3, #8
 8007dd0:	d103      	bne.n	8007dda <HAL_SAI_Init+0x246>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = 256U;
 8007dd2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007dd6:	60fb      	str	r3, [r7, #12]
 8007dd8:	e002      	b.n	8007de0 <HAL_SAI_Init+0x24c>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007dde:	60fb      	str	r3, [r7, #12]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 8007de0:	697a      	ldr	r2, [r7, #20]
 8007de2:	4613      	mov	r3, r2
 8007de4:	009b      	lsls	r3, r3, #2
 8007de6:	4413      	add	r3, r2
 8007de8:	005b      	lsls	r3, r3, #1
 8007dea:	4619      	mov	r1, r3
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	6a1b      	ldr	r3, [r3, #32]
 8007df0:	68fa      	ldr	r2, [r7, #12]
 8007df2:	fb02 f303 	mul.w	r3, r2, r3
 8007df6:	fbb1 f3f3 	udiv	r3, r1, r3
 8007dfa:	613b      	str	r3, [r7, #16]
 8007dfc:	e02f      	b.n	8007e5e <HAL_SAI_Init+0x2ca>
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e02:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007e06:	d119      	bne.n	8007e3c <HAL_SAI_Init+0x2a8>
 8007e08:	2302      	movs	r3, #2
 8007e0a:	e018      	b.n	8007e3e <HAL_SAI_Init+0x2aa>
 8007e0c:	40015804 	.word	0x40015804
 8007e10:	58005404 	.word	0x58005404
 8007e14:	40015824 	.word	0x40015824
 8007e18:	40015800 	.word	0x40015800
 8007e1c:	40015c04 	.word	0x40015c04
 8007e20:	40015c24 	.word	0x40015c24
 8007e24:	40015c00 	.word	0x40015c00
 8007e28:	40016004 	.word	0x40016004
 8007e2c:	40016024 	.word	0x40016024
 8007e30:	40016000 	.word	0x40016000
 8007e34:	58005424 	.word	0x58005424
 8007e38:	58005400 	.word	0x58005400
 8007e3c:	2301      	movs	r3, #1
 8007e3e:	60bb      	str	r3, [r7, #8]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 8007e40:	697a      	ldr	r2, [r7, #20]
 8007e42:	4613      	mov	r3, r2
 8007e44:	009b      	lsls	r3, r3, #2
 8007e46:	4413      	add	r3, r2
 8007e48:	005b      	lsls	r3, r3, #1
 8007e4a:	4619      	mov	r1, r3
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	6a1b      	ldr	r3, [r3, #32]
 8007e50:	68ba      	ldr	r2, [r7, #8]
 8007e52:	fb02 f303 	mul.w	r3, r2, r3
 8007e56:	021b      	lsls	r3, r3, #8
 8007e58:	fbb1 f3f3 	udiv	r3, r1, r3
 8007e5c:	613b      	str	r3, [r7, #16]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 8007e5e:	693b      	ldr	r3, [r7, #16]
 8007e60:	4a95      	ldr	r2, [pc, #596]	; (80080b8 <HAL_SAI_Init+0x524>)
 8007e62:	fba2 2303 	umull	r2, r3, r2, r3
 8007e66:	08da      	lsrs	r2, r3, #3
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 8007e6c:	6939      	ldr	r1, [r7, #16]
 8007e6e:	4b92      	ldr	r3, [pc, #584]	; (80080b8 <HAL_SAI_Init+0x524>)
 8007e70:	fba3 2301 	umull	r2, r3, r3, r1
 8007e74:	08da      	lsrs	r2, r3, #3
 8007e76:	4613      	mov	r3, r2
 8007e78:	009b      	lsls	r3, r3, #2
 8007e7a:	4413      	add	r3, r2
 8007e7c:	005b      	lsls	r3, r3, #1
 8007e7e:	1aca      	subs	r2, r1, r3
 8007e80:	2a08      	cmp	r2, #8
 8007e82:	d904      	bls.n	8007e8e <HAL_SAI_Init+0x2fa>
    {
      hsai->Init.Mckdiv += 1U;
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e88:	1c5a      	adds	r2, r3, #1
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e92:	2b04      	cmp	r3, #4
 8007e94:	d104      	bne.n	8007ea0 <HAL_SAI_Init+0x30c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e9a:	085a      	lsrs	r2, r3, #1
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	685b      	ldr	r3, [r3, #4]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d003      	beq.n	8007eb0 <HAL_SAI_Init+0x31c>
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	685b      	ldr	r3, [r3, #4]
 8007eac:	2b02      	cmp	r3, #2
 8007eae:	d109      	bne.n	8007ec4 <HAL_SAI_Init+0x330>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007eb4:	2b01      	cmp	r3, #1
 8007eb6:	d101      	bne.n	8007ebc <HAL_SAI_Init+0x328>
 8007eb8:	2300      	movs	r3, #0
 8007eba:	e001      	b.n	8007ec0 <HAL_SAI_Init+0x32c>
 8007ebc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007ec0:	623b      	str	r3, [r7, #32]
 8007ec2:	e008      	b.n	8007ed6 <HAL_SAI_Init+0x342>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ec8:	2b01      	cmp	r3, #1
 8007eca:	d102      	bne.n	8007ed2 <HAL_SAI_Init+0x33e>
 8007ecc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007ed0:	e000      	b.n	8007ed4 <HAL_SAI_Init+0x340>
 8007ed2:	2300      	movs	r3, #0
 8007ed4:	623b      	str	r3, [r7, #32]

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
#if defined(SAI_VER_V2_X) /* SAI Peripheral version depends on STM32H7 device revision ID */

  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 8007ed6:	f7f9 fab7 	bl	8001448 <HAL_GetREVID>
 8007eda:	4603      	mov	r3, r0
 8007edc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007ee0:	d331      	bcc.n	8007f46 <HAL_SAI_Init+0x3b2>
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	6819      	ldr	r1, [r3, #0]
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681a      	ldr	r2, [r3, #0]
 8007eec:	4b73      	ldr	r3, [pc, #460]	; (80080bc <HAL_SAI_Init+0x528>)
 8007eee:	400b      	ands	r3, r1
 8007ef0:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                             SAI_xCR1_MCKEN);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	6819      	ldr	r1, [r3, #0]
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	685a      	ldr	r2, [r3, #4]
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f00:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007f06:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f0c:	431a      	orrs	r2, r3
 8007f0e:	6a3b      	ldr	r3, [r7, #32]
 8007f10:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 8007f12:	69fb      	ldr	r3, [r7, #28]
 8007f14:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                            ckstr_bits | syncen_bits |                             \
 8007f1a:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	695b      	ldr	r3, [r3, #20]
 8007f20:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8007f26:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f2c:	051b      	lsls	r3, r3, #20
 8007f2e:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8007f34:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	691b      	ldr	r3, [r3, #16]
 8007f3a:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	430a      	orrs	r2, r1
 8007f42:	601a      	str	r2, [r3, #0]
 8007f44:	e02d      	b.n	8007fa2 <HAL_SAI_Init+0x40e>
  }
  else /* STM32H7xx Rev.Y */
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	6819      	ldr	r1, [r3, #0]
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681a      	ldr	r2, [r3, #0]
 8007f50:	4b5b      	ldr	r3, [pc, #364]	; (80080c0 <HAL_SAI_Init+0x52c>)
 8007f52:	400b      	ands	r3, r1
 8007f54:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	6819      	ldr	r1, [r3, #0]
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	685a      	ldr	r2, [r3, #4]
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f64:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007f6a:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f70:	431a      	orrs	r2, r3
 8007f72:	6a3b      	ldr	r3, [r7, #32]
 8007f74:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 8007f76:	69fb      	ldr	r3, [r7, #28]
 8007f78:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                            ckstr_bits | syncen_bits |                             \
 8007f7e:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	695b      	ldr	r3, [r3, #20]
 8007f84:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8007f8a:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f90:	051b      	lsls	r3, r3, #20
 8007f92:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling);
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8007f98:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	430a      	orrs	r2, r1
 8007fa0:	601a      	str	r2, [r3, #0]
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
#endif /* SAI_VER_V2_X */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	6859      	ldr	r1, [r3, #4]
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681a      	ldr	r2, [r3, #0]
 8007fac:	4b45      	ldr	r3, [pc, #276]	; (80080c4 <HAL_SAI_Init+0x530>)
 8007fae:	400b      	ands	r3, r1
 8007fb0:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	6859      	ldr	r1, [r3, #4]
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	69da      	ldr	r2, [r3, #28]
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fc0:	431a      	orrs	r2, r3
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007fc6:	431a      	orrs	r2, r3
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	430a      	orrs	r2, r1
 8007fce:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	6899      	ldr	r1, [r3, #8]
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681a      	ldr	r2, [r3, #0]
 8007fda:	4b3b      	ldr	r3, [pc, #236]	; (80080c8 <HAL_SAI_Init+0x534>)
 8007fdc:	400b      	ands	r3, r1
 8007fde:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	6899      	ldr	r1, [r3, #8]
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007fea:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8007ff0:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                           hsai->FrameInit.FSOffset |
 8007ff6:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                           hsai->FrameInit.FSDefinition |
 8007ffc:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008002:	3b01      	subs	r3, #1
 8008004:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8008006:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	430a      	orrs	r2, r1
 800800e:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	68d9      	ldr	r1, [r3, #12]
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681a      	ldr	r2, [r3, #0]
 800801a:	f24f 0320 	movw	r3, #61472	; 0xf020
 800801e:	400b      	ands	r3, r1
 8008020:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	68d9      	ldr	r1, [r3, #12]
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008030:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008036:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8008038:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800803e:	3b01      	subs	r3, #1
 8008040:	021b      	lsls	r3, r3, #8
 8008042:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	430a      	orrs	r2, r1
 800804a:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
#if defined(SAI4)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	4a1e      	ldr	r2, [pc, #120]	; (80080cc <HAL_SAI_Init+0x538>)
 8008052:	4293      	cmp	r3, r2
 8008054:	d004      	beq.n	8008060 <HAL_SAI_Init+0x4cc>
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	4a1d      	ldr	r2, [pc, #116]	; (80080d0 <HAL_SAI_Init+0x53c>)
 800805c:	4293      	cmp	r3, r2
 800805e:	d119      	bne.n	8008094 <HAL_SAI_Init+0x500>
#else
  if (hsai->Instance == SAI1_Block_A)
#endif /* SAI4 */
  {
    /* Disable PDM interface */
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 8008060:	69bb      	ldr	r3, [r7, #24]
 8008062:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008064:	f023 0201 	bic.w	r2, r3, #1
 8008068:	69bb      	ldr	r3, [r7, #24]
 800806a:	645a      	str	r2, [r3, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008072:	2b01      	cmp	r3, #1
 8008074:	d10e      	bne.n	8008094 <HAL_SAI_Init+0x500>
    {
      /* Configure and enable PDM interface */
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800807e:	3b01      	subs	r3, #1
 8008080:	011b      	lsls	r3, r3, #4
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8008082:	431a      	orrs	r2, r3
 8008084:	69bb      	ldr	r3, [r7, #24]
 8008086:	645a      	str	r2, [r3, #68]	; 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
 8008088:	69bb      	ldr	r3, [r7, #24]
 800808a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800808c:	f043 0201 	orr.w	r2, r3, #1
 8008090:	69bb      	ldr	r3, [r7, #24]
 8008092:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	2200      	movs	r2, #0
 8008098:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	2201      	movs	r2, #1
 80080a0:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	2200      	movs	r2, #0
 80080a8:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

  return HAL_OK;
 80080ac:	2300      	movs	r3, #0
}
 80080ae:	4618      	mov	r0, r3
 80080b0:	3728      	adds	r7, #40	; 0x28
 80080b2:	46bd      	mov	sp, r7
 80080b4:	bd80      	pop	{r7, pc}
 80080b6:	bf00      	nop
 80080b8:	cccccccd 	.word	0xcccccccd
 80080bc:	f005c010 	.word	0xf005c010
 80080c0:	f805c010 	.word	0xf805c010
 80080c4:	ffff1ff0 	.word	0xffff1ff0
 80080c8:	fff88000 	.word	0xfff88000
 80080cc:	40015804 	.word	0x40015804
 80080d0:	58005404 	.word	0x58005404

080080d4 <HAL_SAI_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Receive_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 80080d4:	b580      	push	{r7, lr}
 80080d6:	b084      	sub	sp, #16
 80080d8:	af00      	add	r7, sp, #0
 80080da:	60f8      	str	r0, [r7, #12]
 80080dc:	60b9      	str	r1, [r7, #8]
 80080de:	4613      	mov	r3, r2
 80080e0:	80fb      	strh	r3, [r7, #6]

  if ((pData == NULL) || (Size == 0U))
 80080e2:	68bb      	ldr	r3, [r7, #8]
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d002      	beq.n	80080ee <HAL_SAI_Receive_DMA+0x1a>
 80080e8:	88fb      	ldrh	r3, [r7, #6]
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d101      	bne.n	80080f2 <HAL_SAI_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 80080ee:	2301      	movs	r3, #1
 80080f0:	e079      	b.n	80081e6 <HAL_SAI_Receive_DMA+0x112>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 80080f8:	b2db      	uxtb	r3, r3
 80080fa:	2b01      	cmp	r3, #1
 80080fc:	d172      	bne.n	80081e4 <HAL_SAI_Receive_DMA+0x110>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8008104:	2b01      	cmp	r3, #1
 8008106:	d101      	bne.n	800810c <HAL_SAI_Receive_DMA+0x38>
 8008108:	2302      	movs	r3, #2
 800810a:	e06c      	b.n	80081e6 <HAL_SAI_Receive_DMA+0x112>
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	2201      	movs	r2, #1
 8008110:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    hsai->pBuffPtr = pData;
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	68ba      	ldr	r2, [r7, #8]
 8008118:	679a      	str	r2, [r3, #120]	; 0x78
    hsai->XferSize = Size;
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	88fa      	ldrh	r2, [r7, #6]
 800811e:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
    hsai->XferCount = Size;
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	88fa      	ldrh	r2, [r7, #6]
 8008126:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	2200      	movs	r2, #0
 800812e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	2222      	movs	r2, #34	; 0x22
 8008136:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

    /* Set the SAI Rx DMA Half transfer complete callback */
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008140:	4a2b      	ldr	r2, [pc, #172]	; (80081f0 <HAL_SAI_Receive_DMA+0x11c>)
 8008142:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the SAI Rx DMA transfer complete callback */
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800814a:	4a2a      	ldr	r2, [pc, #168]	; (80081f4 <HAL_SAI_Receive_DMA+0x120>)
 800814c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008154:	4a28      	ldr	r2, [pc, #160]	; (80081f8 <HAL_SAI_Receive_DMA+0x124>)
 8008156:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Rx abort callback */
    hsai->hdmarx->XferAbortCallback = NULL;
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800815e:	2200      	movs	r2, #0
 8008160:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the Rx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	331c      	adds	r3, #28
 800816e:	4619      	mov	r1, r3
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008174:	461a      	mov	r2, r3
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 800817c:	f7f9 fec6 	bl	8001f0c <HAL_DMA_Start_IT>
 8008180:	4603      	mov	r3, r0
 8008182:	2b00      	cmp	r3, #0
 8008184:	d005      	beq.n	8008192 <HAL_SAI_Receive_DMA+0xbe>
    {
      __HAL_UNLOCK(hsai);
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	2200      	movs	r2, #0
 800818a:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      return  HAL_ERROR;
 800818e:	2301      	movs	r3, #1
 8008190:	e029      	b.n	80081e6 <HAL_SAI_Receive_DMA+0x112>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8008192:	2100      	movs	r1, #0
 8008194:	68f8      	ldr	r0, [r7, #12]
 8008196:	f000 f83b 	bl	8008210 <SAI_InterruptFlag>
 800819a:	4601      	mov	r1, r0
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	691a      	ldr	r2, [r3, #16]
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	430a      	orrs	r2, r1
 80081a8:	611a      	str	r2, [r3, #16]

    /* Enable SAI Rx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	681a      	ldr	r2, [r3, #0]
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80081b8:	601a      	str	r2, [r3, #0]

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d107      	bne.n	80081d8 <HAL_SAI_Receive_DMA+0x104>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	681a      	ldr	r2, [r3, #0]
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80081d6:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	2200      	movs	r2, #0
 80081dc:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    return HAL_OK;
 80081e0:	2300      	movs	r3, #0
 80081e2:	e000      	b.n	80081e6 <HAL_SAI_Receive_DMA+0x112>
  }
  else
  {
    return HAL_BUSY;
 80081e4:	2302      	movs	r3, #2
  }
}
 80081e6:	4618      	mov	r0, r3
 80081e8:	3710      	adds	r7, #16
 80081ea:	46bd      	mov	sp, r7
 80081ec:	bd80      	pop	{r7, pc}
 80081ee:	bf00      	nop
 80081f0:	08008355 	.word	0x08008355
 80081f4:	080082f5 	.word	0x080082f5
 80081f8:	08008371 	.word	0x08008371

080081fc <HAL_SAI_ErrorCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 80081fc:	b480      	push	{r7}
 80081fe:	b083      	sub	sp, #12
 8008200:	af00      	add	r7, sp, #0
 8008202:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_ErrorCallback could be implemented in the user file
   */
}
 8008204:	bf00      	nop
 8008206:	370c      	adds	r7, #12
 8008208:	46bd      	mov	sp, r7
 800820a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820e:	4770      	bx	lr

08008210 <SAI_InterruptFlag>:
  *              the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
  */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, SAI_ModeTypedef mode)
{
 8008210:	b480      	push	{r7}
 8008212:	b085      	sub	sp, #20
 8008214:	af00      	add	r7, sp, #0
 8008216:	6078      	str	r0, [r7, #4]
 8008218:	460b      	mov	r3, r1
 800821a:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 800821c:	2301      	movs	r3, #1
 800821e:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 8008220:	78fb      	ldrb	r3, [r7, #3]
 8008222:	2b01      	cmp	r3, #1
 8008224:	d103      	bne.n	800822e <SAI_InterruptFlag+0x1e>
  {
    tmpIT |= SAI_IT_FREQ;
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	f043 0308 	orr.w	r3, r3, #8
 800822c:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008232:	2b08      	cmp	r3, #8
 8008234:	d10b      	bne.n	800824e <SAI_InterruptFlag+0x3e>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800823a:	2b03      	cmp	r3, #3
 800823c:	d003      	beq.n	8008246 <SAI_InterruptFlag+0x36>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	685b      	ldr	r3, [r3, #4]
 8008242:	2b01      	cmp	r3, #1
 8008244:	d103      	bne.n	800824e <SAI_InterruptFlag+0x3e>
  {
    tmpIT |= SAI_IT_CNRDY;
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	f043 0310 	orr.w	r3, r3, #16
 800824c:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	685b      	ldr	r3, [r3, #4]
 8008252:	2b03      	cmp	r3, #3
 8008254:	d003      	beq.n	800825e <SAI_InterruptFlag+0x4e>
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	685b      	ldr	r3, [r3, #4]
 800825a:	2b02      	cmp	r3, #2
 800825c:	d104      	bne.n	8008268 <SAI_InterruptFlag+0x58>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8008264:	60fb      	str	r3, [r7, #12]
 8008266:	e003      	b.n	8008270 <SAI_InterruptFlag+0x60>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	f043 0304 	orr.w	r3, r3, #4
 800826e:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 8008270:	68fb      	ldr	r3, [r7, #12]
}
 8008272:	4618      	mov	r0, r3
 8008274:	3714      	adds	r7, #20
 8008276:	46bd      	mov	sp, r7
 8008278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800827c:	4770      	bx	lr
	...

08008280 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8008280:	b480      	push	{r7}
 8008282:	b085      	sub	sp, #20
 8008284:	af00      	add	r7, sp, #0
 8008286:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8008288:	4b18      	ldr	r3, [pc, #96]	; (80082ec <SAI_Disable+0x6c>)
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	4a18      	ldr	r2, [pc, #96]	; (80082f0 <SAI_Disable+0x70>)
 800828e:	fba2 2303 	umull	r2, r3, r2, r3
 8008292:	0b1b      	lsrs	r3, r3, #12
 8008294:	009b      	lsls	r3, r3, #2
 8008296:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8008298:	2300      	movs	r3, #0
 800829a:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	681a      	ldr	r2, [r3, #0]
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80082aa:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d10a      	bne.n	80082c8 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80082b8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      status = HAL_TIMEOUT;
 80082c2:	2303      	movs	r3, #3
 80082c4:	72fb      	strb	r3, [r7, #11]
      break;
 80082c6:	e009      	b.n	80082dc <SAI_Disable+0x5c>
    }
    count--;
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	3b01      	subs	r3, #1
 80082cc:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d1e7      	bne.n	80082ac <SAI_Disable+0x2c>

  return status;
 80082dc:	7afb      	ldrb	r3, [r7, #11]
}
 80082de:	4618      	mov	r0, r3
 80082e0:	3714      	adds	r7, #20
 80082e2:	46bd      	mov	sp, r7
 80082e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e8:	4770      	bx	lr
 80082ea:	bf00      	nop
 80082ec:	24000000 	.word	0x24000000
 80082f0:	95cbec1b 	.word	0x95cbec1b

080082f4 <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 80082f4:	b580      	push	{r7, lr}
 80082f6:	b084      	sub	sp, #16
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008300:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	69db      	ldr	r3, [r3, #28]
 8008306:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800830a:	d01c      	beq.n	8008346 <SAI_DMARxCplt+0x52>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	681a      	ldr	r2, [r3, #0]
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800831a:	601a      	str	r2, [r3, #0]
    hsai->XferCount = 0;
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	2200      	movs	r2, #0
 8008320:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8008324:	2100      	movs	r1, #0
 8008326:	68f8      	ldr	r0, [r7, #12]
 8008328:	f7ff ff72 	bl	8008210 <SAI_InterruptFlag>
 800832c:	4603      	mov	r3, r0
 800832e:	43d9      	mvns	r1, r3
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	691a      	ldr	r2, [r3, #16]
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	400a      	ands	r2, r1
 800833c:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	2201      	movs	r2, #1
 8008342:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 8008346:	68f8      	ldr	r0, [r7, #12]
 8008348:	f7f8 fd76 	bl	8000e38 <HAL_SAI_RxCpltCallback>
#endif
}
 800834c:	bf00      	nop
 800834e:	3710      	adds	r7, #16
 8008350:	46bd      	mov	sp, r7
 8008352:	bd80      	pop	{r7, pc}

08008354 <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008354:	b580      	push	{r7, lr}
 8008356:	b084      	sub	sp, #16
 8008358:	af00      	add	r7, sp, #0
 800835a:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008360:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 8008362:	68f8      	ldr	r0, [r7, #12]
 8008364:	f7f8 fd58 	bl	8000e18 <HAL_SAI_RxHalfCpltCallback>
#endif
}
 8008368:	bf00      	nop
 800836a:	3710      	adds	r7, #16
 800836c:	46bd      	mov	sp, r7
 800836e:	bd80      	pop	{r7, pc}

08008370 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 8008370:	b580      	push	{r7, lr}
 8008372:	b084      	sub	sp, #16
 8008374:	af00      	add	r7, sp, #0
 8008376:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800837c:	60fb      	str	r3, [r7, #12]

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800837e:	6878      	ldr	r0, [r7, #4]
 8008380:	f7fb fcba 	bl	8003cf8 <HAL_DMA_GetError>
 8008384:	4603      	mov	r3, r0
 8008386:	2b02      	cmp	r3, #2
 8008388:	d01d      	beq.n	80083c6 <SAI_DMAError+0x56>
  {
    /* Set SAI error code */
    hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008390:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	681a      	ldr	r2, [r3, #0]
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80083a8:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral */
    /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
    (void) SAI_Disable(hsai);
 80083aa:	68f8      	ldr	r0, [r7, #12]
 80083ac:	f7ff ff68 	bl	8008280 <SAI_Disable>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	2201      	movs	r2, #1
 80083b4:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	2200      	movs	r2, #0
 80083bc:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

    /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
    hsai->ErrorCallback(hsai);
#else
    HAL_SAI_ErrorCallback(hsai);
 80083c0:	68f8      	ldr	r0, [r7, #12]
 80083c2:	f7ff ff1b 	bl	80081fc <HAL_SAI_ErrorCallback>
#endif
  }
}
 80083c6:	bf00      	nop
 80083c8:	3710      	adds	r7, #16
 80083ca:	46bd      	mov	sp, r7
 80083cc:	bd80      	pop	{r7, pc}

080083ce <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80083ce:	b580      	push	{r7, lr}
 80083d0:	b082      	sub	sp, #8
 80083d2:	af00      	add	r7, sp, #0
 80083d4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d101      	bne.n	80083e0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80083dc:	2301      	movs	r3, #1
 80083de:	e049      	b.n	8008474 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80083e6:	b2db      	uxtb	r3, r3
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d106      	bne.n	80083fa <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	2200      	movs	r2, #0
 80083f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80083f4:	6878      	ldr	r0, [r7, #4]
 80083f6:	f7f8 fd87 	bl	8000f08 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	2202      	movs	r2, #2
 80083fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681a      	ldr	r2, [r3, #0]
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	3304      	adds	r3, #4
 800840a:	4619      	mov	r1, r3
 800840c:	4610      	mov	r0, r2
 800840e:	f000 fb0f 	bl	8008a30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	2201      	movs	r2, #1
 8008416:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	2201      	movs	r2, #1
 800841e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	2201      	movs	r2, #1
 8008426:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	2201      	movs	r2, #1
 800842e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	2201      	movs	r2, #1
 8008436:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	2201      	movs	r2, #1
 800843e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	2201      	movs	r2, #1
 8008446:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	2201      	movs	r2, #1
 800844e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	2201      	movs	r2, #1
 8008456:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	2201      	movs	r2, #1
 800845e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	2201      	movs	r2, #1
 8008466:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	2201      	movs	r2, #1
 800846e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008472:	2300      	movs	r3, #0
}
 8008474:	4618      	mov	r0, r3
 8008476:	3708      	adds	r7, #8
 8008478:	46bd      	mov	sp, r7
 800847a:	bd80      	pop	{r7, pc}

0800847c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800847c:	b480      	push	{r7}
 800847e:	b085      	sub	sp, #20
 8008480:	af00      	add	r7, sp, #0
 8008482:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800848a:	b2db      	uxtb	r3, r3
 800848c:	2b01      	cmp	r3, #1
 800848e:	d001      	beq.n	8008494 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008490:	2301      	movs	r3, #1
 8008492:	e04f      	b.n	8008534 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	2202      	movs	r2, #2
 8008498:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	68da      	ldr	r2, [r3, #12]
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	f042 0201 	orr.w	r2, r2, #1
 80084aa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	4a23      	ldr	r2, [pc, #140]	; (8008540 <HAL_TIM_Base_Start_IT+0xc4>)
 80084b2:	4293      	cmp	r3, r2
 80084b4:	d01d      	beq.n	80084f2 <HAL_TIM_Base_Start_IT+0x76>
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80084be:	d018      	beq.n	80084f2 <HAL_TIM_Base_Start_IT+0x76>
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	4a1f      	ldr	r2, [pc, #124]	; (8008544 <HAL_TIM_Base_Start_IT+0xc8>)
 80084c6:	4293      	cmp	r3, r2
 80084c8:	d013      	beq.n	80084f2 <HAL_TIM_Base_Start_IT+0x76>
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	4a1e      	ldr	r2, [pc, #120]	; (8008548 <HAL_TIM_Base_Start_IT+0xcc>)
 80084d0:	4293      	cmp	r3, r2
 80084d2:	d00e      	beq.n	80084f2 <HAL_TIM_Base_Start_IT+0x76>
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	4a1c      	ldr	r2, [pc, #112]	; (800854c <HAL_TIM_Base_Start_IT+0xd0>)
 80084da:	4293      	cmp	r3, r2
 80084dc:	d009      	beq.n	80084f2 <HAL_TIM_Base_Start_IT+0x76>
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	4a1b      	ldr	r2, [pc, #108]	; (8008550 <HAL_TIM_Base_Start_IT+0xd4>)
 80084e4:	4293      	cmp	r3, r2
 80084e6:	d004      	beq.n	80084f2 <HAL_TIM_Base_Start_IT+0x76>
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	4a19      	ldr	r2, [pc, #100]	; (8008554 <HAL_TIM_Base_Start_IT+0xd8>)
 80084ee:	4293      	cmp	r3, r2
 80084f0:	d115      	bne.n	800851e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	689a      	ldr	r2, [r3, #8]
 80084f8:	4b17      	ldr	r3, [pc, #92]	; (8008558 <HAL_TIM_Base_Start_IT+0xdc>)
 80084fa:	4013      	ands	r3, r2
 80084fc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	2b06      	cmp	r3, #6
 8008502:	d015      	beq.n	8008530 <HAL_TIM_Base_Start_IT+0xb4>
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800850a:	d011      	beq.n	8008530 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	681a      	ldr	r2, [r3, #0]
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	f042 0201 	orr.w	r2, r2, #1
 800851a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800851c:	e008      	b.n	8008530 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	681a      	ldr	r2, [r3, #0]
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	f042 0201 	orr.w	r2, r2, #1
 800852c:	601a      	str	r2, [r3, #0]
 800852e:	e000      	b.n	8008532 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008530:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008532:	2300      	movs	r3, #0
}
 8008534:	4618      	mov	r0, r3
 8008536:	3714      	adds	r7, #20
 8008538:	46bd      	mov	sp, r7
 800853a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800853e:	4770      	bx	lr
 8008540:	40010000 	.word	0x40010000
 8008544:	40000400 	.word	0x40000400
 8008548:	40000800 	.word	0x40000800
 800854c:	40000c00 	.word	0x40000c00
 8008550:	40010400 	.word	0x40010400
 8008554:	40001800 	.word	0x40001800
 8008558:	00010007 	.word	0x00010007

0800855c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800855c:	b480      	push	{r7}
 800855e:	b083      	sub	sp, #12
 8008560:	af00      	add	r7, sp, #0
 8008562:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	68da      	ldr	r2, [r3, #12]
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	f022 0201 	bic.w	r2, r2, #1
 8008572:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	6a1a      	ldr	r2, [r3, #32]
 800857a:	f241 1311 	movw	r3, #4369	; 0x1111
 800857e:	4013      	ands	r3, r2
 8008580:	2b00      	cmp	r3, #0
 8008582:	d10f      	bne.n	80085a4 <HAL_TIM_Base_Stop_IT+0x48>
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	6a1a      	ldr	r2, [r3, #32]
 800858a:	f240 4344 	movw	r3, #1092	; 0x444
 800858e:	4013      	ands	r3, r2
 8008590:	2b00      	cmp	r3, #0
 8008592:	d107      	bne.n	80085a4 <HAL_TIM_Base_Stop_IT+0x48>
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	681a      	ldr	r2, [r3, #0]
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	f022 0201 	bic.w	r2, r2, #1
 80085a2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	2201      	movs	r2, #1
 80085a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80085ac:	2300      	movs	r3, #0
}
 80085ae:	4618      	mov	r0, r3
 80085b0:	370c      	adds	r7, #12
 80085b2:	46bd      	mov	sp, r7
 80085b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b8:	4770      	bx	lr

080085ba <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80085ba:	b580      	push	{r7, lr}
 80085bc:	b082      	sub	sp, #8
 80085be:	af00      	add	r7, sp, #0
 80085c0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	691b      	ldr	r3, [r3, #16]
 80085c8:	f003 0302 	and.w	r3, r3, #2
 80085cc:	2b02      	cmp	r3, #2
 80085ce:	d122      	bne.n	8008616 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	68db      	ldr	r3, [r3, #12]
 80085d6:	f003 0302 	and.w	r3, r3, #2
 80085da:	2b02      	cmp	r3, #2
 80085dc:	d11b      	bne.n	8008616 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	f06f 0202 	mvn.w	r2, #2
 80085e6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	2201      	movs	r2, #1
 80085ec:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	699b      	ldr	r3, [r3, #24]
 80085f4:	f003 0303 	and.w	r3, r3, #3
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d003      	beq.n	8008604 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80085fc:	6878      	ldr	r0, [r7, #4]
 80085fe:	f000 f9f9 	bl	80089f4 <HAL_TIM_IC_CaptureCallback>
 8008602:	e005      	b.n	8008610 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008604:	6878      	ldr	r0, [r7, #4]
 8008606:	f000 f9eb 	bl	80089e0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800860a:	6878      	ldr	r0, [r7, #4]
 800860c:	f000 f9fc 	bl	8008a08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	2200      	movs	r2, #0
 8008614:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	691b      	ldr	r3, [r3, #16]
 800861c:	f003 0304 	and.w	r3, r3, #4
 8008620:	2b04      	cmp	r3, #4
 8008622:	d122      	bne.n	800866a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	68db      	ldr	r3, [r3, #12]
 800862a:	f003 0304 	and.w	r3, r3, #4
 800862e:	2b04      	cmp	r3, #4
 8008630:	d11b      	bne.n	800866a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	f06f 0204 	mvn.w	r2, #4
 800863a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	2202      	movs	r2, #2
 8008640:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	699b      	ldr	r3, [r3, #24]
 8008648:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800864c:	2b00      	cmp	r3, #0
 800864e:	d003      	beq.n	8008658 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008650:	6878      	ldr	r0, [r7, #4]
 8008652:	f000 f9cf 	bl	80089f4 <HAL_TIM_IC_CaptureCallback>
 8008656:	e005      	b.n	8008664 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008658:	6878      	ldr	r0, [r7, #4]
 800865a:	f000 f9c1 	bl	80089e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800865e:	6878      	ldr	r0, [r7, #4]
 8008660:	f000 f9d2 	bl	8008a08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	2200      	movs	r2, #0
 8008668:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	691b      	ldr	r3, [r3, #16]
 8008670:	f003 0308 	and.w	r3, r3, #8
 8008674:	2b08      	cmp	r3, #8
 8008676:	d122      	bne.n	80086be <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	68db      	ldr	r3, [r3, #12]
 800867e:	f003 0308 	and.w	r3, r3, #8
 8008682:	2b08      	cmp	r3, #8
 8008684:	d11b      	bne.n	80086be <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	f06f 0208 	mvn.w	r2, #8
 800868e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	2204      	movs	r2, #4
 8008694:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	69db      	ldr	r3, [r3, #28]
 800869c:	f003 0303 	and.w	r3, r3, #3
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d003      	beq.n	80086ac <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80086a4:	6878      	ldr	r0, [r7, #4]
 80086a6:	f000 f9a5 	bl	80089f4 <HAL_TIM_IC_CaptureCallback>
 80086aa:	e005      	b.n	80086b8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80086ac:	6878      	ldr	r0, [r7, #4]
 80086ae:	f000 f997 	bl	80089e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80086b2:	6878      	ldr	r0, [r7, #4]
 80086b4:	f000 f9a8 	bl	8008a08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	2200      	movs	r2, #0
 80086bc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	691b      	ldr	r3, [r3, #16]
 80086c4:	f003 0310 	and.w	r3, r3, #16
 80086c8:	2b10      	cmp	r3, #16
 80086ca:	d122      	bne.n	8008712 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	68db      	ldr	r3, [r3, #12]
 80086d2:	f003 0310 	and.w	r3, r3, #16
 80086d6:	2b10      	cmp	r3, #16
 80086d8:	d11b      	bne.n	8008712 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	f06f 0210 	mvn.w	r2, #16
 80086e2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	2208      	movs	r2, #8
 80086e8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	69db      	ldr	r3, [r3, #28]
 80086f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d003      	beq.n	8008700 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80086f8:	6878      	ldr	r0, [r7, #4]
 80086fa:	f000 f97b 	bl	80089f4 <HAL_TIM_IC_CaptureCallback>
 80086fe:	e005      	b.n	800870c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008700:	6878      	ldr	r0, [r7, #4]
 8008702:	f000 f96d 	bl	80089e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008706:	6878      	ldr	r0, [r7, #4]
 8008708:	f000 f97e 	bl	8008a08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	2200      	movs	r2, #0
 8008710:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	691b      	ldr	r3, [r3, #16]
 8008718:	f003 0301 	and.w	r3, r3, #1
 800871c:	2b01      	cmp	r3, #1
 800871e:	d10e      	bne.n	800873e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	68db      	ldr	r3, [r3, #12]
 8008726:	f003 0301 	and.w	r3, r3, #1
 800872a:	2b01      	cmp	r3, #1
 800872c:	d107      	bne.n	800873e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	f06f 0201 	mvn.w	r2, #1
 8008736:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008738:	6878      	ldr	r0, [r7, #4]
 800873a:	f7f8 fb8d 	bl	8000e58 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	691b      	ldr	r3, [r3, #16]
 8008744:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008748:	2b80      	cmp	r3, #128	; 0x80
 800874a:	d10e      	bne.n	800876a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	68db      	ldr	r3, [r3, #12]
 8008752:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008756:	2b80      	cmp	r3, #128	; 0x80
 8008758:	d107      	bne.n	800876a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008762:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008764:	6878      	ldr	r0, [r7, #4]
 8008766:	f000 fb2d 	bl	8008dc4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	691b      	ldr	r3, [r3, #16]
 8008770:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008774:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008778:	d10e      	bne.n	8008798 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	68db      	ldr	r3, [r3, #12]
 8008780:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008784:	2b80      	cmp	r3, #128	; 0x80
 8008786:	d107      	bne.n	8008798 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008790:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008792:	6878      	ldr	r0, [r7, #4]
 8008794:	f000 fb20 	bl	8008dd8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	691b      	ldr	r3, [r3, #16]
 800879e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087a2:	2b40      	cmp	r3, #64	; 0x40
 80087a4:	d10e      	bne.n	80087c4 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	68db      	ldr	r3, [r3, #12]
 80087ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087b0:	2b40      	cmp	r3, #64	; 0x40
 80087b2:	d107      	bne.n	80087c4 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80087bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80087be:	6878      	ldr	r0, [r7, #4]
 80087c0:	f000 f92c 	bl	8008a1c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	691b      	ldr	r3, [r3, #16]
 80087ca:	f003 0320 	and.w	r3, r3, #32
 80087ce:	2b20      	cmp	r3, #32
 80087d0:	d10e      	bne.n	80087f0 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	68db      	ldr	r3, [r3, #12]
 80087d8:	f003 0320 	and.w	r3, r3, #32
 80087dc:	2b20      	cmp	r3, #32
 80087de:	d107      	bne.n	80087f0 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	f06f 0220 	mvn.w	r2, #32
 80087e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80087ea:	6878      	ldr	r0, [r7, #4]
 80087ec:	f000 fae0 	bl	8008db0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80087f0:	bf00      	nop
 80087f2:	3708      	adds	r7, #8
 80087f4:	46bd      	mov	sp, r7
 80087f6:	bd80      	pop	{r7, pc}

080087f8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80087f8:	b580      	push	{r7, lr}
 80087fa:	b084      	sub	sp, #16
 80087fc:	af00      	add	r7, sp, #0
 80087fe:	6078      	str	r0, [r7, #4]
 8008800:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008808:	2b01      	cmp	r3, #1
 800880a:	d101      	bne.n	8008810 <HAL_TIM_ConfigClockSource+0x18>
 800880c:	2302      	movs	r3, #2
 800880e:	e0db      	b.n	80089c8 <HAL_TIM_ConfigClockSource+0x1d0>
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	2201      	movs	r2, #1
 8008814:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	2202      	movs	r2, #2
 800881c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	689b      	ldr	r3, [r3, #8]
 8008826:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008828:	68fa      	ldr	r2, [r7, #12]
 800882a:	4b69      	ldr	r3, [pc, #420]	; (80089d0 <HAL_TIM_ConfigClockSource+0x1d8>)
 800882c:	4013      	ands	r3, r2
 800882e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008836:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	68fa      	ldr	r2, [r7, #12]
 800883e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008840:	683b      	ldr	r3, [r7, #0]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	4a63      	ldr	r2, [pc, #396]	; (80089d4 <HAL_TIM_ConfigClockSource+0x1dc>)
 8008846:	4293      	cmp	r3, r2
 8008848:	f000 80a9 	beq.w	800899e <HAL_TIM_ConfigClockSource+0x1a6>
 800884c:	4a61      	ldr	r2, [pc, #388]	; (80089d4 <HAL_TIM_ConfigClockSource+0x1dc>)
 800884e:	4293      	cmp	r3, r2
 8008850:	f200 80ae 	bhi.w	80089b0 <HAL_TIM_ConfigClockSource+0x1b8>
 8008854:	4a60      	ldr	r2, [pc, #384]	; (80089d8 <HAL_TIM_ConfigClockSource+0x1e0>)
 8008856:	4293      	cmp	r3, r2
 8008858:	f000 80a1 	beq.w	800899e <HAL_TIM_ConfigClockSource+0x1a6>
 800885c:	4a5e      	ldr	r2, [pc, #376]	; (80089d8 <HAL_TIM_ConfigClockSource+0x1e0>)
 800885e:	4293      	cmp	r3, r2
 8008860:	f200 80a6 	bhi.w	80089b0 <HAL_TIM_ConfigClockSource+0x1b8>
 8008864:	4a5d      	ldr	r2, [pc, #372]	; (80089dc <HAL_TIM_ConfigClockSource+0x1e4>)
 8008866:	4293      	cmp	r3, r2
 8008868:	f000 8099 	beq.w	800899e <HAL_TIM_ConfigClockSource+0x1a6>
 800886c:	4a5b      	ldr	r2, [pc, #364]	; (80089dc <HAL_TIM_ConfigClockSource+0x1e4>)
 800886e:	4293      	cmp	r3, r2
 8008870:	f200 809e 	bhi.w	80089b0 <HAL_TIM_ConfigClockSource+0x1b8>
 8008874:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8008878:	f000 8091 	beq.w	800899e <HAL_TIM_ConfigClockSource+0x1a6>
 800887c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8008880:	f200 8096 	bhi.w	80089b0 <HAL_TIM_ConfigClockSource+0x1b8>
 8008884:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008888:	f000 8089 	beq.w	800899e <HAL_TIM_ConfigClockSource+0x1a6>
 800888c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008890:	f200 808e 	bhi.w	80089b0 <HAL_TIM_ConfigClockSource+0x1b8>
 8008894:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008898:	d03e      	beq.n	8008918 <HAL_TIM_ConfigClockSource+0x120>
 800889a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800889e:	f200 8087 	bhi.w	80089b0 <HAL_TIM_ConfigClockSource+0x1b8>
 80088a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80088a6:	f000 8085 	beq.w	80089b4 <HAL_TIM_ConfigClockSource+0x1bc>
 80088aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80088ae:	d87f      	bhi.n	80089b0 <HAL_TIM_ConfigClockSource+0x1b8>
 80088b0:	2b70      	cmp	r3, #112	; 0x70
 80088b2:	d01a      	beq.n	80088ea <HAL_TIM_ConfigClockSource+0xf2>
 80088b4:	2b70      	cmp	r3, #112	; 0x70
 80088b6:	d87b      	bhi.n	80089b0 <HAL_TIM_ConfigClockSource+0x1b8>
 80088b8:	2b60      	cmp	r3, #96	; 0x60
 80088ba:	d050      	beq.n	800895e <HAL_TIM_ConfigClockSource+0x166>
 80088bc:	2b60      	cmp	r3, #96	; 0x60
 80088be:	d877      	bhi.n	80089b0 <HAL_TIM_ConfigClockSource+0x1b8>
 80088c0:	2b50      	cmp	r3, #80	; 0x50
 80088c2:	d03c      	beq.n	800893e <HAL_TIM_ConfigClockSource+0x146>
 80088c4:	2b50      	cmp	r3, #80	; 0x50
 80088c6:	d873      	bhi.n	80089b0 <HAL_TIM_ConfigClockSource+0x1b8>
 80088c8:	2b40      	cmp	r3, #64	; 0x40
 80088ca:	d058      	beq.n	800897e <HAL_TIM_ConfigClockSource+0x186>
 80088cc:	2b40      	cmp	r3, #64	; 0x40
 80088ce:	d86f      	bhi.n	80089b0 <HAL_TIM_ConfigClockSource+0x1b8>
 80088d0:	2b30      	cmp	r3, #48	; 0x30
 80088d2:	d064      	beq.n	800899e <HAL_TIM_ConfigClockSource+0x1a6>
 80088d4:	2b30      	cmp	r3, #48	; 0x30
 80088d6:	d86b      	bhi.n	80089b0 <HAL_TIM_ConfigClockSource+0x1b8>
 80088d8:	2b20      	cmp	r3, #32
 80088da:	d060      	beq.n	800899e <HAL_TIM_ConfigClockSource+0x1a6>
 80088dc:	2b20      	cmp	r3, #32
 80088de:	d867      	bhi.n	80089b0 <HAL_TIM_ConfigClockSource+0x1b8>
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d05c      	beq.n	800899e <HAL_TIM_ConfigClockSource+0x1a6>
 80088e4:	2b10      	cmp	r3, #16
 80088e6:	d05a      	beq.n	800899e <HAL_TIM_ConfigClockSource+0x1a6>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80088e8:	e062      	b.n	80089b0 <HAL_TIM_ConfigClockSource+0x1b8>
      TIM_ETR_SetConfig(htim->Instance,
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	6818      	ldr	r0, [r3, #0]
 80088ee:	683b      	ldr	r3, [r7, #0]
 80088f0:	6899      	ldr	r1, [r3, #8]
 80088f2:	683b      	ldr	r3, [r7, #0]
 80088f4:	685a      	ldr	r2, [r3, #4]
 80088f6:	683b      	ldr	r3, [r7, #0]
 80088f8:	68db      	ldr	r3, [r3, #12]
 80088fa:	f000 f9b1 	bl	8008c60 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	689b      	ldr	r3, [r3, #8]
 8008904:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800890c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	68fa      	ldr	r2, [r7, #12]
 8008914:	609a      	str	r2, [r3, #8]
      break;
 8008916:	e04e      	b.n	80089b6 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_ETR_SetConfig(htim->Instance,
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	6818      	ldr	r0, [r3, #0]
 800891c:	683b      	ldr	r3, [r7, #0]
 800891e:	6899      	ldr	r1, [r3, #8]
 8008920:	683b      	ldr	r3, [r7, #0]
 8008922:	685a      	ldr	r2, [r3, #4]
 8008924:	683b      	ldr	r3, [r7, #0]
 8008926:	68db      	ldr	r3, [r3, #12]
 8008928:	f000 f99a 	bl	8008c60 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	689a      	ldr	r2, [r3, #8]
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800893a:	609a      	str	r2, [r3, #8]
      break;
 800893c:	e03b      	b.n	80089b6 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	6818      	ldr	r0, [r3, #0]
 8008942:	683b      	ldr	r3, [r7, #0]
 8008944:	6859      	ldr	r1, [r3, #4]
 8008946:	683b      	ldr	r3, [r7, #0]
 8008948:	68db      	ldr	r3, [r3, #12]
 800894a:	461a      	mov	r2, r3
 800894c:	f000 f90a 	bl	8008b64 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	2150      	movs	r1, #80	; 0x50
 8008956:	4618      	mov	r0, r3
 8008958:	f000 f964 	bl	8008c24 <TIM_ITRx_SetConfig>
      break;
 800895c:	e02b      	b.n	80089b6 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	6818      	ldr	r0, [r3, #0]
 8008962:	683b      	ldr	r3, [r7, #0]
 8008964:	6859      	ldr	r1, [r3, #4]
 8008966:	683b      	ldr	r3, [r7, #0]
 8008968:	68db      	ldr	r3, [r3, #12]
 800896a:	461a      	mov	r2, r3
 800896c:	f000 f929 	bl	8008bc2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	2160      	movs	r1, #96	; 0x60
 8008976:	4618      	mov	r0, r3
 8008978:	f000 f954 	bl	8008c24 <TIM_ITRx_SetConfig>
      break;
 800897c:	e01b      	b.n	80089b6 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	6818      	ldr	r0, [r3, #0]
 8008982:	683b      	ldr	r3, [r7, #0]
 8008984:	6859      	ldr	r1, [r3, #4]
 8008986:	683b      	ldr	r3, [r7, #0]
 8008988:	68db      	ldr	r3, [r3, #12]
 800898a:	461a      	mov	r2, r3
 800898c:	f000 f8ea 	bl	8008b64 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	2140      	movs	r1, #64	; 0x40
 8008996:	4618      	mov	r0, r3
 8008998:	f000 f944 	bl	8008c24 <TIM_ITRx_SetConfig>
      break;
 800899c:	e00b      	b.n	80089b6 <HAL_TIM_ConfigClockSource+0x1be>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681a      	ldr	r2, [r3, #0]
 80089a2:	683b      	ldr	r3, [r7, #0]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	4619      	mov	r1, r3
 80089a8:	4610      	mov	r0, r2
 80089aa:	f000 f93b 	bl	8008c24 <TIM_ITRx_SetConfig>
        break;
 80089ae:	e002      	b.n	80089b6 <HAL_TIM_ConfigClockSource+0x1be>
      break;
 80089b0:	bf00      	nop
 80089b2:	e000      	b.n	80089b6 <HAL_TIM_ConfigClockSource+0x1be>
      break;
 80089b4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	2201      	movs	r2, #1
 80089ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	2200      	movs	r2, #0
 80089c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80089c6:	2300      	movs	r3, #0
}
 80089c8:	4618      	mov	r0, r3
 80089ca:	3710      	adds	r7, #16
 80089cc:	46bd      	mov	sp, r7
 80089ce:	bd80      	pop	{r7, pc}
 80089d0:	ffceff88 	.word	0xffceff88
 80089d4:	00100040 	.word	0x00100040
 80089d8:	00100030 	.word	0x00100030
 80089dc:	00100020 	.word	0x00100020

080089e0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80089e0:	b480      	push	{r7}
 80089e2:	b083      	sub	sp, #12
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80089e8:	bf00      	nop
 80089ea:	370c      	adds	r7, #12
 80089ec:	46bd      	mov	sp, r7
 80089ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f2:	4770      	bx	lr

080089f4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80089f4:	b480      	push	{r7}
 80089f6:	b083      	sub	sp, #12
 80089f8:	af00      	add	r7, sp, #0
 80089fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80089fc:	bf00      	nop
 80089fe:	370c      	adds	r7, #12
 8008a00:	46bd      	mov	sp, r7
 8008a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a06:	4770      	bx	lr

08008a08 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008a08:	b480      	push	{r7}
 8008a0a:	b083      	sub	sp, #12
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008a10:	bf00      	nop
 8008a12:	370c      	adds	r7, #12
 8008a14:	46bd      	mov	sp, r7
 8008a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a1a:	4770      	bx	lr

08008a1c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008a1c:	b480      	push	{r7}
 8008a1e:	b083      	sub	sp, #12
 8008a20:	af00      	add	r7, sp, #0
 8008a22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008a24:	bf00      	nop
 8008a26:	370c      	adds	r7, #12
 8008a28:	46bd      	mov	sp, r7
 8008a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a2e:	4770      	bx	lr

08008a30 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008a30:	b480      	push	{r7}
 8008a32:	b085      	sub	sp, #20
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	6078      	str	r0, [r7, #4]
 8008a38:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	4a40      	ldr	r2, [pc, #256]	; (8008b44 <TIM_Base_SetConfig+0x114>)
 8008a44:	4293      	cmp	r3, r2
 8008a46:	d013      	beq.n	8008a70 <TIM_Base_SetConfig+0x40>
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a4e:	d00f      	beq.n	8008a70 <TIM_Base_SetConfig+0x40>
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	4a3d      	ldr	r2, [pc, #244]	; (8008b48 <TIM_Base_SetConfig+0x118>)
 8008a54:	4293      	cmp	r3, r2
 8008a56:	d00b      	beq.n	8008a70 <TIM_Base_SetConfig+0x40>
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	4a3c      	ldr	r2, [pc, #240]	; (8008b4c <TIM_Base_SetConfig+0x11c>)
 8008a5c:	4293      	cmp	r3, r2
 8008a5e:	d007      	beq.n	8008a70 <TIM_Base_SetConfig+0x40>
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	4a3b      	ldr	r2, [pc, #236]	; (8008b50 <TIM_Base_SetConfig+0x120>)
 8008a64:	4293      	cmp	r3, r2
 8008a66:	d003      	beq.n	8008a70 <TIM_Base_SetConfig+0x40>
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	4a3a      	ldr	r2, [pc, #232]	; (8008b54 <TIM_Base_SetConfig+0x124>)
 8008a6c:	4293      	cmp	r3, r2
 8008a6e:	d108      	bne.n	8008a82 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a76:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008a78:	683b      	ldr	r3, [r7, #0]
 8008a7a:	685b      	ldr	r3, [r3, #4]
 8008a7c:	68fa      	ldr	r2, [r7, #12]
 8008a7e:	4313      	orrs	r3, r2
 8008a80:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	4a2f      	ldr	r2, [pc, #188]	; (8008b44 <TIM_Base_SetConfig+0x114>)
 8008a86:	4293      	cmp	r3, r2
 8008a88:	d01f      	beq.n	8008aca <TIM_Base_SetConfig+0x9a>
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a90:	d01b      	beq.n	8008aca <TIM_Base_SetConfig+0x9a>
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	4a2c      	ldr	r2, [pc, #176]	; (8008b48 <TIM_Base_SetConfig+0x118>)
 8008a96:	4293      	cmp	r3, r2
 8008a98:	d017      	beq.n	8008aca <TIM_Base_SetConfig+0x9a>
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	4a2b      	ldr	r2, [pc, #172]	; (8008b4c <TIM_Base_SetConfig+0x11c>)
 8008a9e:	4293      	cmp	r3, r2
 8008aa0:	d013      	beq.n	8008aca <TIM_Base_SetConfig+0x9a>
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	4a2a      	ldr	r2, [pc, #168]	; (8008b50 <TIM_Base_SetConfig+0x120>)
 8008aa6:	4293      	cmp	r3, r2
 8008aa8:	d00f      	beq.n	8008aca <TIM_Base_SetConfig+0x9a>
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	4a29      	ldr	r2, [pc, #164]	; (8008b54 <TIM_Base_SetConfig+0x124>)
 8008aae:	4293      	cmp	r3, r2
 8008ab0:	d00b      	beq.n	8008aca <TIM_Base_SetConfig+0x9a>
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	4a28      	ldr	r2, [pc, #160]	; (8008b58 <TIM_Base_SetConfig+0x128>)
 8008ab6:	4293      	cmp	r3, r2
 8008ab8:	d007      	beq.n	8008aca <TIM_Base_SetConfig+0x9a>
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	4a27      	ldr	r2, [pc, #156]	; (8008b5c <TIM_Base_SetConfig+0x12c>)
 8008abe:	4293      	cmp	r3, r2
 8008ac0:	d003      	beq.n	8008aca <TIM_Base_SetConfig+0x9a>
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	4a26      	ldr	r2, [pc, #152]	; (8008b60 <TIM_Base_SetConfig+0x130>)
 8008ac6:	4293      	cmp	r3, r2
 8008ac8:	d108      	bne.n	8008adc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008ad0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008ad2:	683b      	ldr	r3, [r7, #0]
 8008ad4:	68db      	ldr	r3, [r3, #12]
 8008ad6:	68fa      	ldr	r2, [r7, #12]
 8008ad8:	4313      	orrs	r3, r2
 8008ada:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008ae2:	683b      	ldr	r3, [r7, #0]
 8008ae4:	695b      	ldr	r3, [r3, #20]
 8008ae6:	4313      	orrs	r3, r2
 8008ae8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	68fa      	ldr	r2, [r7, #12]
 8008aee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008af0:	683b      	ldr	r3, [r7, #0]
 8008af2:	689a      	ldr	r2, [r3, #8]
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008af8:	683b      	ldr	r3, [r7, #0]
 8008afa:	681a      	ldr	r2, [r3, #0]
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	4a10      	ldr	r2, [pc, #64]	; (8008b44 <TIM_Base_SetConfig+0x114>)
 8008b04:	4293      	cmp	r3, r2
 8008b06:	d00f      	beq.n	8008b28 <TIM_Base_SetConfig+0xf8>
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	4a12      	ldr	r2, [pc, #72]	; (8008b54 <TIM_Base_SetConfig+0x124>)
 8008b0c:	4293      	cmp	r3, r2
 8008b0e:	d00b      	beq.n	8008b28 <TIM_Base_SetConfig+0xf8>
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	4a11      	ldr	r2, [pc, #68]	; (8008b58 <TIM_Base_SetConfig+0x128>)
 8008b14:	4293      	cmp	r3, r2
 8008b16:	d007      	beq.n	8008b28 <TIM_Base_SetConfig+0xf8>
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	4a10      	ldr	r2, [pc, #64]	; (8008b5c <TIM_Base_SetConfig+0x12c>)
 8008b1c:	4293      	cmp	r3, r2
 8008b1e:	d003      	beq.n	8008b28 <TIM_Base_SetConfig+0xf8>
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	4a0f      	ldr	r2, [pc, #60]	; (8008b60 <TIM_Base_SetConfig+0x130>)
 8008b24:	4293      	cmp	r3, r2
 8008b26:	d103      	bne.n	8008b30 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008b28:	683b      	ldr	r3, [r7, #0]
 8008b2a:	691a      	ldr	r2, [r3, #16]
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	2201      	movs	r2, #1
 8008b34:	615a      	str	r2, [r3, #20]
}
 8008b36:	bf00      	nop
 8008b38:	3714      	adds	r7, #20
 8008b3a:	46bd      	mov	sp, r7
 8008b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b40:	4770      	bx	lr
 8008b42:	bf00      	nop
 8008b44:	40010000 	.word	0x40010000
 8008b48:	40000400 	.word	0x40000400
 8008b4c:	40000800 	.word	0x40000800
 8008b50:	40000c00 	.word	0x40000c00
 8008b54:	40010400 	.word	0x40010400
 8008b58:	40014000 	.word	0x40014000
 8008b5c:	40014400 	.word	0x40014400
 8008b60:	40014800 	.word	0x40014800

08008b64 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008b64:	b480      	push	{r7}
 8008b66:	b087      	sub	sp, #28
 8008b68:	af00      	add	r7, sp, #0
 8008b6a:	60f8      	str	r0, [r7, #12]
 8008b6c:	60b9      	str	r1, [r7, #8]
 8008b6e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	6a1b      	ldr	r3, [r3, #32]
 8008b74:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	6a1b      	ldr	r3, [r3, #32]
 8008b7a:	f023 0201 	bic.w	r2, r3, #1
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	699b      	ldr	r3, [r3, #24]
 8008b86:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008b88:	693b      	ldr	r3, [r7, #16]
 8008b8a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008b8e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	011b      	lsls	r3, r3, #4
 8008b94:	693a      	ldr	r2, [r7, #16]
 8008b96:	4313      	orrs	r3, r2
 8008b98:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008b9a:	697b      	ldr	r3, [r7, #20]
 8008b9c:	f023 030a 	bic.w	r3, r3, #10
 8008ba0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008ba2:	697a      	ldr	r2, [r7, #20]
 8008ba4:	68bb      	ldr	r3, [r7, #8]
 8008ba6:	4313      	orrs	r3, r2
 8008ba8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	693a      	ldr	r2, [r7, #16]
 8008bae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	697a      	ldr	r2, [r7, #20]
 8008bb4:	621a      	str	r2, [r3, #32]
}
 8008bb6:	bf00      	nop
 8008bb8:	371c      	adds	r7, #28
 8008bba:	46bd      	mov	sp, r7
 8008bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc0:	4770      	bx	lr

08008bc2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008bc2:	b480      	push	{r7}
 8008bc4:	b087      	sub	sp, #28
 8008bc6:	af00      	add	r7, sp, #0
 8008bc8:	60f8      	str	r0, [r7, #12]
 8008bca:	60b9      	str	r1, [r7, #8]
 8008bcc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	6a1b      	ldr	r3, [r3, #32]
 8008bd2:	f023 0210 	bic.w	r2, r3, #16
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	699b      	ldr	r3, [r3, #24]
 8008bde:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	6a1b      	ldr	r3, [r3, #32]
 8008be4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008be6:	697b      	ldr	r3, [r7, #20]
 8008be8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008bec:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	031b      	lsls	r3, r3, #12
 8008bf2:	697a      	ldr	r2, [r7, #20]
 8008bf4:	4313      	orrs	r3, r2
 8008bf6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008bf8:	693b      	ldr	r3, [r7, #16]
 8008bfa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008bfe:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008c00:	68bb      	ldr	r3, [r7, #8]
 8008c02:	011b      	lsls	r3, r3, #4
 8008c04:	693a      	ldr	r2, [r7, #16]
 8008c06:	4313      	orrs	r3, r2
 8008c08:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	697a      	ldr	r2, [r7, #20]
 8008c0e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	693a      	ldr	r2, [r7, #16]
 8008c14:	621a      	str	r2, [r3, #32]
}
 8008c16:	bf00      	nop
 8008c18:	371c      	adds	r7, #28
 8008c1a:	46bd      	mov	sp, r7
 8008c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c20:	4770      	bx	lr
	...

08008c24 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008c24:	b480      	push	{r7}
 8008c26:	b085      	sub	sp, #20
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	6078      	str	r0, [r7, #4]
 8008c2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	689b      	ldr	r3, [r3, #8]
 8008c32:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008c34:	68fa      	ldr	r2, [r7, #12]
 8008c36:	4b09      	ldr	r3, [pc, #36]	; (8008c5c <TIM_ITRx_SetConfig+0x38>)
 8008c38:	4013      	ands	r3, r2
 8008c3a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008c3c:	683a      	ldr	r2, [r7, #0]
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	4313      	orrs	r3, r2
 8008c42:	f043 0307 	orr.w	r3, r3, #7
 8008c46:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	68fa      	ldr	r2, [r7, #12]
 8008c4c:	609a      	str	r2, [r3, #8]
}
 8008c4e:	bf00      	nop
 8008c50:	3714      	adds	r7, #20
 8008c52:	46bd      	mov	sp, r7
 8008c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c58:	4770      	bx	lr
 8008c5a:	bf00      	nop
 8008c5c:	ffcfff8f 	.word	0xffcfff8f

08008c60 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008c60:	b480      	push	{r7}
 8008c62:	b087      	sub	sp, #28
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	60f8      	str	r0, [r7, #12]
 8008c68:	60b9      	str	r1, [r7, #8]
 8008c6a:	607a      	str	r2, [r7, #4]
 8008c6c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	689b      	ldr	r3, [r3, #8]
 8008c72:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008c74:	697b      	ldr	r3, [r7, #20]
 8008c76:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008c7a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008c7c:	683b      	ldr	r3, [r7, #0]
 8008c7e:	021a      	lsls	r2, r3, #8
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	431a      	orrs	r2, r3
 8008c84:	68bb      	ldr	r3, [r7, #8]
 8008c86:	4313      	orrs	r3, r2
 8008c88:	697a      	ldr	r2, [r7, #20]
 8008c8a:	4313      	orrs	r3, r2
 8008c8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	697a      	ldr	r2, [r7, #20]
 8008c92:	609a      	str	r2, [r3, #8]
}
 8008c94:	bf00      	nop
 8008c96:	371c      	adds	r7, #28
 8008c98:	46bd      	mov	sp, r7
 8008c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c9e:	4770      	bx	lr

08008ca0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008ca0:	b480      	push	{r7}
 8008ca2:	b085      	sub	sp, #20
 8008ca4:	af00      	add	r7, sp, #0
 8008ca6:	6078      	str	r0, [r7, #4]
 8008ca8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008cb0:	2b01      	cmp	r3, #1
 8008cb2:	d101      	bne.n	8008cb8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008cb4:	2302      	movs	r3, #2
 8008cb6:	e068      	b.n	8008d8a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	2201      	movs	r2, #1
 8008cbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	2202      	movs	r2, #2
 8008cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	685b      	ldr	r3, [r3, #4]
 8008cce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	689b      	ldr	r3, [r3, #8]
 8008cd6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	4a2e      	ldr	r2, [pc, #184]	; (8008d98 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8008cde:	4293      	cmp	r3, r2
 8008ce0:	d004      	beq.n	8008cec <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	4a2d      	ldr	r2, [pc, #180]	; (8008d9c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008ce8:	4293      	cmp	r3, r2
 8008cea:	d108      	bne.n	8008cfe <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008cf2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008cf4:	683b      	ldr	r3, [r7, #0]
 8008cf6:	685b      	ldr	r3, [r3, #4]
 8008cf8:	68fa      	ldr	r2, [r7, #12]
 8008cfa:	4313      	orrs	r3, r2
 8008cfc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d04:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008d06:	683b      	ldr	r3, [r7, #0]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	68fa      	ldr	r2, [r7, #12]
 8008d0c:	4313      	orrs	r3, r2
 8008d0e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	68fa      	ldr	r2, [r7, #12]
 8008d16:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	4a1e      	ldr	r2, [pc, #120]	; (8008d98 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8008d1e:	4293      	cmp	r3, r2
 8008d20:	d01d      	beq.n	8008d5e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008d2a:	d018      	beq.n	8008d5e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	4a1b      	ldr	r2, [pc, #108]	; (8008da0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008d32:	4293      	cmp	r3, r2
 8008d34:	d013      	beq.n	8008d5e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	4a1a      	ldr	r2, [pc, #104]	; (8008da4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008d3c:	4293      	cmp	r3, r2
 8008d3e:	d00e      	beq.n	8008d5e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	4a18      	ldr	r2, [pc, #96]	; (8008da8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008d46:	4293      	cmp	r3, r2
 8008d48:	d009      	beq.n	8008d5e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	4a13      	ldr	r2, [pc, #76]	; (8008d9c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008d50:	4293      	cmp	r3, r2
 8008d52:	d004      	beq.n	8008d5e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	4a14      	ldr	r2, [pc, #80]	; (8008dac <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008d5a:	4293      	cmp	r3, r2
 8008d5c:	d10c      	bne.n	8008d78 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008d5e:	68bb      	ldr	r3, [r7, #8]
 8008d60:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008d64:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008d66:	683b      	ldr	r3, [r7, #0]
 8008d68:	689b      	ldr	r3, [r3, #8]
 8008d6a:	68ba      	ldr	r2, [r7, #8]
 8008d6c:	4313      	orrs	r3, r2
 8008d6e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	68ba      	ldr	r2, [r7, #8]
 8008d76:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	2201      	movs	r2, #1
 8008d7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	2200      	movs	r2, #0
 8008d84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008d88:	2300      	movs	r3, #0
}
 8008d8a:	4618      	mov	r0, r3
 8008d8c:	3714      	adds	r7, #20
 8008d8e:	46bd      	mov	sp, r7
 8008d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d94:	4770      	bx	lr
 8008d96:	bf00      	nop
 8008d98:	40010000 	.word	0x40010000
 8008d9c:	40010400 	.word	0x40010400
 8008da0:	40000400 	.word	0x40000400
 8008da4:	40000800 	.word	0x40000800
 8008da8:	40000c00 	.word	0x40000c00
 8008dac:	40001800 	.word	0x40001800

08008db0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008db0:	b480      	push	{r7}
 8008db2:	b083      	sub	sp, #12
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008db8:	bf00      	nop
 8008dba:	370c      	adds	r7, #12
 8008dbc:	46bd      	mov	sp, r7
 8008dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc2:	4770      	bx	lr

08008dc4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008dc4:	b480      	push	{r7}
 8008dc6:	b083      	sub	sp, #12
 8008dc8:	af00      	add	r7, sp, #0
 8008dca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008dcc:	bf00      	nop
 8008dce:	370c      	adds	r7, #12
 8008dd0:	46bd      	mov	sp, r7
 8008dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd6:	4770      	bx	lr

08008dd8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008dd8:	b480      	push	{r7}
 8008dda:	b083      	sub	sp, #12
 8008ddc:	af00      	add	r7, sp, #0
 8008dde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008de0:	bf00      	nop
 8008de2:	370c      	adds	r7, #12
 8008de4:	46bd      	mov	sp, r7
 8008de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dea:	4770      	bx	lr

08008dec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008dec:	b580      	push	{r7, lr}
 8008dee:	b082      	sub	sp, #8
 8008df0:	af00      	add	r7, sp, #0
 8008df2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d101      	bne.n	8008dfe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008dfa:	2301      	movs	r3, #1
 8008dfc:	e042      	b.n	8008e84 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d106      	bne.n	8008e16 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	2200      	movs	r2, #0
 8008e0c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008e10:	6878      	ldr	r0, [r7, #4]
 8008e12:	f7f8 f8a1 	bl	8000f58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	2224      	movs	r2, #36	; 0x24
 8008e1a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	681a      	ldr	r2, [r3, #0]
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	f022 0201 	bic.w	r2, r2, #1
 8008e2c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008e2e:	6878      	ldr	r0, [r7, #4]
 8008e30:	f000 fb90 	bl	8009554 <UART_SetConfig>
 8008e34:	4603      	mov	r3, r0
 8008e36:	2b01      	cmp	r3, #1
 8008e38:	d101      	bne.n	8008e3e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8008e3a:	2301      	movs	r3, #1
 8008e3c:	e022      	b.n	8008e84 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d002      	beq.n	8008e4c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8008e46:	6878      	ldr	r0, [r7, #4]
 8008e48:	f001 f8e4 	bl	800a014 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	685a      	ldr	r2, [r3, #4]
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008e5a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	689a      	ldr	r2, [r3, #8]
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008e6a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	681a      	ldr	r2, [r3, #0]
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	f042 0201 	orr.w	r2, r2, #1
 8008e7a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008e7c:	6878      	ldr	r0, [r7, #4]
 8008e7e:	f001 f96b 	bl	800a158 <UART_CheckIdleState>
 8008e82:	4603      	mov	r3, r0
}
 8008e84:	4618      	mov	r0, r3
 8008e86:	3708      	adds	r7, #8
 8008e88:	46bd      	mov	sp, r7
 8008e8a:	bd80      	pop	{r7, pc}

08008e8c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008e8c:	b580      	push	{r7, lr}
 8008e8e:	b084      	sub	sp, #16
 8008e90:	af00      	add	r7, sp, #0
 8008e92:	60f8      	str	r0, [r7, #12]
 8008e94:	60b9      	str	r1, [r7, #8]
 8008e96:	4613      	mov	r3, r2
 8008e98:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008ea0:	2b20      	cmp	r3, #32
 8008ea2:	d168      	bne.n	8008f76 <HAL_UART_Transmit_DMA+0xea>
  {
    if ((pData == NULL) || (Size == 0U))
 8008ea4:	68bb      	ldr	r3, [r7, #8]
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d002      	beq.n	8008eb0 <HAL_UART_Transmit_DMA+0x24>
 8008eaa:	88fb      	ldrh	r3, [r7, #6]
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d101      	bne.n	8008eb4 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8008eb0:	2301      	movs	r3, #1
 8008eb2:	e061      	b.n	8008f78 <HAL_UART_Transmit_DMA+0xec>
    }

    __HAL_LOCK(huart);
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008eba:	2b01      	cmp	r3, #1
 8008ebc:	d101      	bne.n	8008ec2 <HAL_UART_Transmit_DMA+0x36>
 8008ebe:	2302      	movs	r3, #2
 8008ec0:	e05a      	b.n	8008f78 <HAL_UART_Transmit_DMA+0xec>
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	2201      	movs	r2, #1
 8008ec6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	68ba      	ldr	r2, [r7, #8]
 8008ece:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	88fa      	ldrh	r2, [r7, #6]
 8008ed4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	88fa      	ldrh	r2, [r7, #6]
 8008edc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	2200      	movs	r2, #0
 8008ee4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	2221      	movs	r2, #33	; 0x21
 8008eec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d02c      	beq.n	8008f52 <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008efc:	4a20      	ldr	r2, [pc, #128]	; (8008f80 <HAL_UART_Transmit_DMA+0xf4>)
 8008efe:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008f04:	4a1f      	ldr	r2, [pc, #124]	; (8008f84 <HAL_UART_Transmit_DMA+0xf8>)
 8008f06:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008f0c:	4a1e      	ldr	r2, [pc, #120]	; (8008f88 <HAL_UART_Transmit_DMA+0xfc>)
 8008f0e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008f14:	2200      	movs	r2, #0
 8008f16:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f20:	4619      	mov	r1, r3
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	3328      	adds	r3, #40	; 0x28
 8008f28:	461a      	mov	r2, r3
 8008f2a:	88fb      	ldrh	r3, [r7, #6]
 8008f2c:	f7f8 ffee 	bl	8001f0c <HAL_DMA_Start_IT>
 8008f30:	4603      	mov	r3, r0
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d00d      	beq.n	8008f52 <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	2210      	movs	r2, #16
 8008f3a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	2200      	movs	r2, #0
 8008f42:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	2220      	movs	r2, #32
 8008f4a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 8008f4e:	2301      	movs	r3, #1
 8008f50:	e012      	b.n	8008f78 <HAL_UART_Transmit_DMA+0xec>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	2240      	movs	r2, #64	; 0x40
 8008f58:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	2200      	movs	r2, #0
 8008f5e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	689a      	ldr	r2, [r3, #8]
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008f70:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8008f72:	2300      	movs	r3, #0
 8008f74:	e000      	b.n	8008f78 <HAL_UART_Transmit_DMA+0xec>
  }
  else
  {
    return HAL_BUSY;
 8008f76:	2302      	movs	r3, #2
  }
}
 8008f78:	4618      	mov	r0, r3
 8008f7a:	3710      	adds	r7, #16
 8008f7c:	46bd      	mov	sp, r7
 8008f7e:	bd80      	pop	{r7, pc}
 8008f80:	0800a391 	.word	0x0800a391
 8008f84:	0800a3e1 	.word	0x0800a3e1
 8008f88:	0800a3fd 	.word	0x0800a3fd

08008f8c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008f8c:	b580      	push	{r7, lr}
 8008f8e:	b088      	sub	sp, #32
 8008f90:	af00      	add	r7, sp, #0
 8008f92:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	69db      	ldr	r3, [r3, #28]
 8008f9a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	689b      	ldr	r3, [r3, #8]
 8008faa:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008fac:	69fa      	ldr	r2, [r7, #28]
 8008fae:	f640 030f 	movw	r3, #2063	; 0x80f
 8008fb2:	4013      	ands	r3, r2
 8008fb4:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8008fb6:	693b      	ldr	r3, [r7, #16]
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d118      	bne.n	8008fee <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008fbc:	69fb      	ldr	r3, [r7, #28]
 8008fbe:	f003 0320 	and.w	r3, r3, #32
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d013      	beq.n	8008fee <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008fc6:	69bb      	ldr	r3, [r7, #24]
 8008fc8:	f003 0320 	and.w	r3, r3, #32
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d104      	bne.n	8008fda <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008fd0:	697b      	ldr	r3, [r7, #20]
 8008fd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d009      	beq.n	8008fee <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	f000 8282 	beq.w	80094e8 <HAL_UART_IRQHandler+0x55c>
      {
        huart->RxISR(huart);
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008fe8:	6878      	ldr	r0, [r7, #4]
 8008fea:	4798      	blx	r3
      }
      return;
 8008fec:	e27c      	b.n	80094e8 <HAL_UART_IRQHandler+0x55c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008fee:	693b      	ldr	r3, [r7, #16]
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	f000 80ef 	beq.w	80091d4 <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8008ff6:	697a      	ldr	r2, [r7, #20]
 8008ff8:	4b73      	ldr	r3, [pc, #460]	; (80091c8 <HAL_UART_IRQHandler+0x23c>)
 8008ffa:	4013      	ands	r3, r2
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d105      	bne.n	800900c <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8009000:	69ba      	ldr	r2, [r7, #24]
 8009002:	4b72      	ldr	r3, [pc, #456]	; (80091cc <HAL_UART_IRQHandler+0x240>)
 8009004:	4013      	ands	r3, r2
 8009006:	2b00      	cmp	r3, #0
 8009008:	f000 80e4 	beq.w	80091d4 <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800900c:	69fb      	ldr	r3, [r7, #28]
 800900e:	f003 0301 	and.w	r3, r3, #1
 8009012:	2b00      	cmp	r3, #0
 8009014:	d010      	beq.n	8009038 <HAL_UART_IRQHandler+0xac>
 8009016:	69bb      	ldr	r3, [r7, #24]
 8009018:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800901c:	2b00      	cmp	r3, #0
 800901e:	d00b      	beq.n	8009038 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	2201      	movs	r2, #1
 8009026:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800902e:	f043 0201 	orr.w	r2, r3, #1
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009038:	69fb      	ldr	r3, [r7, #28]
 800903a:	f003 0302 	and.w	r3, r3, #2
 800903e:	2b00      	cmp	r3, #0
 8009040:	d010      	beq.n	8009064 <HAL_UART_IRQHandler+0xd8>
 8009042:	697b      	ldr	r3, [r7, #20]
 8009044:	f003 0301 	and.w	r3, r3, #1
 8009048:	2b00      	cmp	r3, #0
 800904a:	d00b      	beq.n	8009064 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	2202      	movs	r2, #2
 8009052:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800905a:	f043 0204 	orr.w	r2, r3, #4
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009064:	69fb      	ldr	r3, [r7, #28]
 8009066:	f003 0304 	and.w	r3, r3, #4
 800906a:	2b00      	cmp	r3, #0
 800906c:	d010      	beq.n	8009090 <HAL_UART_IRQHandler+0x104>
 800906e:	697b      	ldr	r3, [r7, #20]
 8009070:	f003 0301 	and.w	r3, r3, #1
 8009074:	2b00      	cmp	r3, #0
 8009076:	d00b      	beq.n	8009090 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	2204      	movs	r2, #4
 800907e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009086:	f043 0202 	orr.w	r2, r3, #2
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009090:	69fb      	ldr	r3, [r7, #28]
 8009092:	f003 0308 	and.w	r3, r3, #8
 8009096:	2b00      	cmp	r3, #0
 8009098:	d015      	beq.n	80090c6 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800909a:	69bb      	ldr	r3, [r7, #24]
 800909c:	f003 0320 	and.w	r3, r3, #32
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d104      	bne.n	80090ae <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80090a4:	697a      	ldr	r2, [r7, #20]
 80090a6:	4b48      	ldr	r3, [pc, #288]	; (80091c8 <HAL_UART_IRQHandler+0x23c>)
 80090a8:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d00b      	beq.n	80090c6 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	2208      	movs	r2, #8
 80090b4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80090bc:	f043 0208 	orr.w	r2, r3, #8
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80090c6:	69fb      	ldr	r3, [r7, #28]
 80090c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d011      	beq.n	80090f4 <HAL_UART_IRQHandler+0x168>
 80090d0:	69bb      	ldr	r3, [r7, #24]
 80090d2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d00c      	beq.n	80090f4 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80090e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80090ea:	f043 0220 	orr.w	r2, r3, #32
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	f000 81f6 	beq.w	80094ec <HAL_UART_IRQHandler+0x560>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009100:	69fb      	ldr	r3, [r7, #28]
 8009102:	f003 0320 	and.w	r3, r3, #32
 8009106:	2b00      	cmp	r3, #0
 8009108:	d011      	beq.n	800912e <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800910a:	69bb      	ldr	r3, [r7, #24]
 800910c:	f003 0320 	and.w	r3, r3, #32
 8009110:	2b00      	cmp	r3, #0
 8009112:	d104      	bne.n	800911e <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009114:	697b      	ldr	r3, [r7, #20]
 8009116:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800911a:	2b00      	cmp	r3, #0
 800911c:	d007      	beq.n	800912e <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009122:	2b00      	cmp	r3, #0
 8009124:	d003      	beq.n	800912e <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800912a:	6878      	ldr	r0, [r7, #4]
 800912c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009134:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	689b      	ldr	r3, [r3, #8]
 800913c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009140:	2b40      	cmp	r3, #64	; 0x40
 8009142:	d004      	beq.n	800914e <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800914a:	2b00      	cmp	r3, #0
 800914c:	d031      	beq.n	80091b2 <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800914e:	6878      	ldr	r0, [r7, #4]
 8009150:	f001 f8ec 	bl	800a32c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	689b      	ldr	r3, [r3, #8]
 800915a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800915e:	2b40      	cmp	r3, #64	; 0x40
 8009160:	d123      	bne.n	80091aa <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	689a      	ldr	r2, [r3, #8]
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009170:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009176:	2b00      	cmp	r3, #0
 8009178:	d013      	beq.n	80091a2 <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800917e:	4a14      	ldr	r2, [pc, #80]	; (80091d0 <HAL_UART_IRQHandler+0x244>)
 8009180:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009186:	4618      	mov	r0, r3
 8009188:	f7f9 fc48 	bl	8002a1c <HAL_DMA_Abort_IT>
 800918c:	4603      	mov	r3, r0
 800918e:	2b00      	cmp	r3, #0
 8009190:	d017      	beq.n	80091c2 <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009196:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009198:	687a      	ldr	r2, [r7, #4]
 800919a:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800919c:	4610      	mov	r0, r2
 800919e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80091a0:	e00f      	b.n	80091c2 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80091a2:	6878      	ldr	r0, [r7, #4]
 80091a4:	f000 f9c0 	bl	8009528 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80091a8:	e00b      	b.n	80091c2 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80091aa:	6878      	ldr	r0, [r7, #4]
 80091ac:	f000 f9bc 	bl	8009528 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80091b0:	e007      	b.n	80091c2 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80091b2:	6878      	ldr	r0, [r7, #4]
 80091b4:	f000 f9b8 	bl	8009528 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	2200      	movs	r2, #0
 80091bc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 80091c0:	e194      	b.n	80094ec <HAL_UART_IRQHandler+0x560>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80091c2:	bf00      	nop
    return;
 80091c4:	e192      	b.n	80094ec <HAL_UART_IRQHandler+0x560>
 80091c6:	bf00      	nop
 80091c8:	10000001 	.word	0x10000001
 80091cc:	04000120 	.word	0x04000120
 80091d0:	0800a47d 	.word	0x0800a47d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80091d8:	2b01      	cmp	r3, #1
 80091da:	f040 810f 	bne.w	80093fc <HAL_UART_IRQHandler+0x470>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80091de:	69fb      	ldr	r3, [r7, #28]
 80091e0:	f003 0310 	and.w	r3, r3, #16
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	f000 8109 	beq.w	80093fc <HAL_UART_IRQHandler+0x470>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80091ea:	69bb      	ldr	r3, [r7, #24]
 80091ec:	f003 0310 	and.w	r3, r3, #16
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	f000 8103 	beq.w	80093fc <HAL_UART_IRQHandler+0x470>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	2210      	movs	r2, #16
 80091fc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	689b      	ldr	r3, [r3, #8]
 8009204:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009208:	2b40      	cmp	r3, #64	; 0x40
 800920a:	f040 80bb 	bne.w	8009384 <HAL_UART_IRQHandler+0x3f8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	4a96      	ldr	r2, [pc, #600]	; (8009470 <HAL_UART_IRQHandler+0x4e4>)
 8009216:	4293      	cmp	r3, r2
 8009218:	d059      	beq.n	80092ce <HAL_UART_IRQHandler+0x342>
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	4a94      	ldr	r2, [pc, #592]	; (8009474 <HAL_UART_IRQHandler+0x4e8>)
 8009222:	4293      	cmp	r3, r2
 8009224:	d053      	beq.n	80092ce <HAL_UART_IRQHandler+0x342>
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	4a92      	ldr	r2, [pc, #584]	; (8009478 <HAL_UART_IRQHandler+0x4ec>)
 800922e:	4293      	cmp	r3, r2
 8009230:	d04d      	beq.n	80092ce <HAL_UART_IRQHandler+0x342>
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	4a90      	ldr	r2, [pc, #576]	; (800947c <HAL_UART_IRQHandler+0x4f0>)
 800923a:	4293      	cmp	r3, r2
 800923c:	d047      	beq.n	80092ce <HAL_UART_IRQHandler+0x342>
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	4a8e      	ldr	r2, [pc, #568]	; (8009480 <HAL_UART_IRQHandler+0x4f4>)
 8009246:	4293      	cmp	r3, r2
 8009248:	d041      	beq.n	80092ce <HAL_UART_IRQHandler+0x342>
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	4a8c      	ldr	r2, [pc, #560]	; (8009484 <HAL_UART_IRQHandler+0x4f8>)
 8009252:	4293      	cmp	r3, r2
 8009254:	d03b      	beq.n	80092ce <HAL_UART_IRQHandler+0x342>
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	4a8a      	ldr	r2, [pc, #552]	; (8009488 <HAL_UART_IRQHandler+0x4fc>)
 800925e:	4293      	cmp	r3, r2
 8009260:	d035      	beq.n	80092ce <HAL_UART_IRQHandler+0x342>
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	4a88      	ldr	r2, [pc, #544]	; (800948c <HAL_UART_IRQHandler+0x500>)
 800926a:	4293      	cmp	r3, r2
 800926c:	d02f      	beq.n	80092ce <HAL_UART_IRQHandler+0x342>
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	4a86      	ldr	r2, [pc, #536]	; (8009490 <HAL_UART_IRQHandler+0x504>)
 8009276:	4293      	cmp	r3, r2
 8009278:	d029      	beq.n	80092ce <HAL_UART_IRQHandler+0x342>
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	4a84      	ldr	r2, [pc, #528]	; (8009494 <HAL_UART_IRQHandler+0x508>)
 8009282:	4293      	cmp	r3, r2
 8009284:	d023      	beq.n	80092ce <HAL_UART_IRQHandler+0x342>
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	4a82      	ldr	r2, [pc, #520]	; (8009498 <HAL_UART_IRQHandler+0x50c>)
 800928e:	4293      	cmp	r3, r2
 8009290:	d01d      	beq.n	80092ce <HAL_UART_IRQHandler+0x342>
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	4a80      	ldr	r2, [pc, #512]	; (800949c <HAL_UART_IRQHandler+0x510>)
 800929a:	4293      	cmp	r3, r2
 800929c:	d017      	beq.n	80092ce <HAL_UART_IRQHandler+0x342>
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	4a7e      	ldr	r2, [pc, #504]	; (80094a0 <HAL_UART_IRQHandler+0x514>)
 80092a6:	4293      	cmp	r3, r2
 80092a8:	d011      	beq.n	80092ce <HAL_UART_IRQHandler+0x342>
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	4a7c      	ldr	r2, [pc, #496]	; (80094a4 <HAL_UART_IRQHandler+0x518>)
 80092b2:	4293      	cmp	r3, r2
 80092b4:	d00b      	beq.n	80092ce <HAL_UART_IRQHandler+0x342>
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	4a7a      	ldr	r2, [pc, #488]	; (80094a8 <HAL_UART_IRQHandler+0x51c>)
 80092be:	4293      	cmp	r3, r2
 80092c0:	d005      	beq.n	80092ce <HAL_UART_IRQHandler+0x342>
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	4a78      	ldr	r2, [pc, #480]	; (80094ac <HAL_UART_IRQHandler+0x520>)
 80092ca:	4293      	cmp	r3, r2
 80092cc:	d105      	bne.n	80092da <HAL_UART_IRQHandler+0x34e>
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	685b      	ldr	r3, [r3, #4]
 80092d6:	b29b      	uxth	r3, r3
 80092d8:	e004      	b.n	80092e4 <HAL_UART_IRQHandler+0x358>
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	685b      	ldr	r3, [r3, #4]
 80092e2:	b29b      	uxth	r3, r3
 80092e4:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 80092e6:	893b      	ldrh	r3, [r7, #8]
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	f000 8101 	beq.w	80094f0 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80092f4:	893a      	ldrh	r2, [r7, #8]
 80092f6:	429a      	cmp	r2, r3
 80092f8:	f080 80fa 	bcs.w	80094f0 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	893a      	ldrh	r2, [r7, #8]
 8009300:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009308:	69db      	ldr	r3, [r3, #28]
 800930a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800930e:	d02b      	beq.n	8009368 <HAL_UART_IRQHandler+0x3dc>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	681a      	ldr	r2, [r3, #0]
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800931e:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	689a      	ldr	r2, [r3, #8]
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	f022 0201 	bic.w	r2, r2, #1
 800932e:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	689a      	ldr	r2, [r3, #8]
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800933e:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	2220      	movs	r2, #32
 8009344:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	2200      	movs	r2, #0
 800934c:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	681a      	ldr	r2, [r3, #0]
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	f022 0210 	bic.w	r2, r2, #16
 800935c:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009362:	4618      	mov	r0, r3
 8009364:	f7f9 f83c 	bl	80023e0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009374:	b29b      	uxth	r3, r3
 8009376:	1ad3      	subs	r3, r2, r3
 8009378:	b29b      	uxth	r3, r3
 800937a:	4619      	mov	r1, r3
 800937c:	6878      	ldr	r0, [r7, #4]
 800937e:	f000 f8dd 	bl	800953c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009382:	e0b5      	b.n	80094f0 <HAL_UART_IRQHandler+0x564>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009390:	b29b      	uxth	r3, r3
 8009392:	1ad3      	subs	r3, r2, r3
 8009394:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800939c:	b29b      	uxth	r3, r3
 800939e:	2b00      	cmp	r3, #0
 80093a0:	f000 80a8 	beq.w	80094f4 <HAL_UART_IRQHandler+0x568>
          && (nb_rx_data > 0U))
 80093a4:	897b      	ldrh	r3, [r7, #10]
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	f000 80a4 	beq.w	80094f4 <HAL_UART_IRQHandler+0x568>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	681a      	ldr	r2, [r3, #0]
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80093ba:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	6899      	ldr	r1, [r3, #8]
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	681a      	ldr	r2, [r3, #0]
 80093c6:	4b3a      	ldr	r3, [pc, #232]	; (80094b0 <HAL_UART_IRQHandler+0x524>)
 80093c8:	400b      	ands	r3, r1
 80093ca:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	2220      	movs	r2, #32
 80093d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	2200      	movs	r2, #0
 80093d8:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	2200      	movs	r2, #0
 80093de:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	681a      	ldr	r2, [r3, #0]
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	f022 0210 	bic.w	r2, r2, #16
 80093ee:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80093f0:	897b      	ldrh	r3, [r7, #10]
 80093f2:	4619      	mov	r1, r3
 80093f4:	6878      	ldr	r0, [r7, #4]
 80093f6:	f000 f8a1 	bl	800953c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80093fa:	e07b      	b.n	80094f4 <HAL_UART_IRQHandler+0x568>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80093fc:	69fb      	ldr	r3, [r7, #28]
 80093fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009402:	2b00      	cmp	r3, #0
 8009404:	d00d      	beq.n	8009422 <HAL_UART_IRQHandler+0x496>
 8009406:	697b      	ldr	r3, [r7, #20]
 8009408:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800940c:	2b00      	cmp	r3, #0
 800940e:	d008      	beq.n	8009422 <HAL_UART_IRQHandler+0x496>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8009418:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800941a:	6878      	ldr	r0, [r7, #4]
 800941c:	f001 f85e 	bl	800a4dc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009420:	e06b      	b.n	80094fa <HAL_UART_IRQHandler+0x56e>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8009422:	69fb      	ldr	r3, [r7, #28]
 8009424:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009428:	2b00      	cmp	r3, #0
 800942a:	d012      	beq.n	8009452 <HAL_UART_IRQHandler+0x4c6>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800942c:	69bb      	ldr	r3, [r7, #24]
 800942e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009432:	2b00      	cmp	r3, #0
 8009434:	d104      	bne.n	8009440 <HAL_UART_IRQHandler+0x4b4>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8009436:	697b      	ldr	r3, [r7, #20]
 8009438:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800943c:	2b00      	cmp	r3, #0
 800943e:	d008      	beq.n	8009452 <HAL_UART_IRQHandler+0x4c6>
  {
    if (huart->TxISR != NULL)
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009444:	2b00      	cmp	r3, #0
 8009446:	d057      	beq.n	80094f8 <HAL_UART_IRQHandler+0x56c>
    {
      huart->TxISR(huart);
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800944c:	6878      	ldr	r0, [r7, #4]
 800944e:	4798      	blx	r3
    }
    return;
 8009450:	e052      	b.n	80094f8 <HAL_UART_IRQHandler+0x56c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009452:	69fb      	ldr	r3, [r7, #28]
 8009454:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009458:	2b00      	cmp	r3, #0
 800945a:	d02b      	beq.n	80094b4 <HAL_UART_IRQHandler+0x528>
 800945c:	69bb      	ldr	r3, [r7, #24]
 800945e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009462:	2b00      	cmp	r3, #0
 8009464:	d026      	beq.n	80094b4 <HAL_UART_IRQHandler+0x528>
  {
    UART_EndTransmit_IT(huart);
 8009466:	6878      	ldr	r0, [r7, #4]
 8009468:	f001 f81e 	bl	800a4a8 <UART_EndTransmit_IT>
    return;
 800946c:	e045      	b.n	80094fa <HAL_UART_IRQHandler+0x56e>
 800946e:	bf00      	nop
 8009470:	40020010 	.word	0x40020010
 8009474:	40020028 	.word	0x40020028
 8009478:	40020040 	.word	0x40020040
 800947c:	40020058 	.word	0x40020058
 8009480:	40020070 	.word	0x40020070
 8009484:	40020088 	.word	0x40020088
 8009488:	400200a0 	.word	0x400200a0
 800948c:	400200b8 	.word	0x400200b8
 8009490:	40020410 	.word	0x40020410
 8009494:	40020428 	.word	0x40020428
 8009498:	40020440 	.word	0x40020440
 800949c:	40020458 	.word	0x40020458
 80094a0:	40020470 	.word	0x40020470
 80094a4:	40020488 	.word	0x40020488
 80094a8:	400204a0 	.word	0x400204a0
 80094ac:	400204b8 	.word	0x400204b8
 80094b0:	effffffe 	.word	0xeffffffe
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80094b4:	69fb      	ldr	r3, [r7, #28]
 80094b6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d008      	beq.n	80094d0 <HAL_UART_IRQHandler+0x544>
 80094be:	69bb      	ldr	r3, [r7, #24]
 80094c0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d003      	beq.n	80094d0 <HAL_UART_IRQHandler+0x544>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80094c8:	6878      	ldr	r0, [r7, #4]
 80094ca:	f001 f81b 	bl	800a504 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80094ce:	e014      	b.n	80094fa <HAL_UART_IRQHandler+0x56e>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80094d0:	69fb      	ldr	r3, [r7, #28]
 80094d2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d00f      	beq.n	80094fa <HAL_UART_IRQHandler+0x56e>
 80094da:	69bb      	ldr	r3, [r7, #24]
 80094dc:	2b00      	cmp	r3, #0
 80094de:	da0c      	bge.n	80094fa <HAL_UART_IRQHandler+0x56e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80094e0:	6878      	ldr	r0, [r7, #4]
 80094e2:	f001 f805 	bl	800a4f0 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80094e6:	e008      	b.n	80094fa <HAL_UART_IRQHandler+0x56e>
      return;
 80094e8:	bf00      	nop
 80094ea:	e006      	b.n	80094fa <HAL_UART_IRQHandler+0x56e>
    return;
 80094ec:	bf00      	nop
 80094ee:	e004      	b.n	80094fa <HAL_UART_IRQHandler+0x56e>
      return;
 80094f0:	bf00      	nop
 80094f2:	e002      	b.n	80094fa <HAL_UART_IRQHandler+0x56e>
      return;
 80094f4:	bf00      	nop
 80094f6:	e000      	b.n	80094fa <HAL_UART_IRQHandler+0x56e>
    return;
 80094f8:	bf00      	nop
  }
}
 80094fa:	3720      	adds	r7, #32
 80094fc:	46bd      	mov	sp, r7
 80094fe:	bd80      	pop	{r7, pc}

08009500 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009500:	b480      	push	{r7}
 8009502:	b083      	sub	sp, #12
 8009504:	af00      	add	r7, sp, #0
 8009506:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009508:	bf00      	nop
 800950a:	370c      	adds	r7, #12
 800950c:	46bd      	mov	sp, r7
 800950e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009512:	4770      	bx	lr

08009514 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009514:	b480      	push	{r7}
 8009516:	b083      	sub	sp, #12
 8009518:	af00      	add	r7, sp, #0
 800951a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800951c:	bf00      	nop
 800951e:	370c      	adds	r7, #12
 8009520:	46bd      	mov	sp, r7
 8009522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009526:	4770      	bx	lr

08009528 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009528:	b480      	push	{r7}
 800952a:	b083      	sub	sp, #12
 800952c:	af00      	add	r7, sp, #0
 800952e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009530:	bf00      	nop
 8009532:	370c      	adds	r7, #12
 8009534:	46bd      	mov	sp, r7
 8009536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800953a:	4770      	bx	lr

0800953c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800953c:	b480      	push	{r7}
 800953e:	b083      	sub	sp, #12
 8009540:	af00      	add	r7, sp, #0
 8009542:	6078      	str	r0, [r7, #4]
 8009544:	460b      	mov	r3, r1
 8009546:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009548:	bf00      	nop
 800954a:	370c      	adds	r7, #12
 800954c:	46bd      	mov	sp, r7
 800954e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009552:	4770      	bx	lr

08009554 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009554:	b5b0      	push	{r4, r5, r7, lr}
 8009556:	b08e      	sub	sp, #56	; 0x38
 8009558:	af00      	add	r7, sp, #0
 800955a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800955c:	2300      	movs	r3, #0
 800955e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	689a      	ldr	r2, [r3, #8]
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	691b      	ldr	r3, [r3, #16]
 800956a:	431a      	orrs	r2, r3
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	695b      	ldr	r3, [r3, #20]
 8009570:	431a      	orrs	r2, r3
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	69db      	ldr	r3, [r3, #28]
 8009576:	4313      	orrs	r3, r2
 8009578:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	681a      	ldr	r2, [r3, #0]
 8009580:	4bbf      	ldr	r3, [pc, #764]	; (8009880 <UART_SetConfig+0x32c>)
 8009582:	4013      	ands	r3, r2
 8009584:	687a      	ldr	r2, [r7, #4]
 8009586:	6812      	ldr	r2, [r2, #0]
 8009588:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800958a:	430b      	orrs	r3, r1
 800958c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	685b      	ldr	r3, [r3, #4]
 8009594:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	68da      	ldr	r2, [r3, #12]
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	430a      	orrs	r2, r1
 80095a2:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	699b      	ldr	r3, [r3, #24]
 80095a8:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	4ab5      	ldr	r2, [pc, #724]	; (8009884 <UART_SetConfig+0x330>)
 80095b0:	4293      	cmp	r3, r2
 80095b2:	d004      	beq.n	80095be <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	6a1b      	ldr	r3, [r3, #32]
 80095b8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80095ba:	4313      	orrs	r3, r2
 80095bc:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	689a      	ldr	r2, [r3, #8]
 80095c4:	4bb0      	ldr	r3, [pc, #704]	; (8009888 <UART_SetConfig+0x334>)
 80095c6:	4013      	ands	r3, r2
 80095c8:	687a      	ldr	r2, [r7, #4]
 80095ca:	6812      	ldr	r2, [r2, #0]
 80095cc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80095ce:	430b      	orrs	r3, r1
 80095d0:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095d8:	f023 010f 	bic.w	r1, r3, #15
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	430a      	orrs	r2, r1
 80095e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	4aa7      	ldr	r2, [pc, #668]	; (800988c <UART_SetConfig+0x338>)
 80095ee:	4293      	cmp	r3, r2
 80095f0:	d176      	bne.n	80096e0 <UART_SetConfig+0x18c>
 80095f2:	4ba7      	ldr	r3, [pc, #668]	; (8009890 <UART_SetConfig+0x33c>)
 80095f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80095f6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80095fa:	2b28      	cmp	r3, #40	; 0x28
 80095fc:	d86c      	bhi.n	80096d8 <UART_SetConfig+0x184>
 80095fe:	a201      	add	r2, pc, #4	; (adr r2, 8009604 <UART_SetConfig+0xb0>)
 8009600:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009604:	080096a9 	.word	0x080096a9
 8009608:	080096d9 	.word	0x080096d9
 800960c:	080096d9 	.word	0x080096d9
 8009610:	080096d9 	.word	0x080096d9
 8009614:	080096d9 	.word	0x080096d9
 8009618:	080096d9 	.word	0x080096d9
 800961c:	080096d9 	.word	0x080096d9
 8009620:	080096d9 	.word	0x080096d9
 8009624:	080096b1 	.word	0x080096b1
 8009628:	080096d9 	.word	0x080096d9
 800962c:	080096d9 	.word	0x080096d9
 8009630:	080096d9 	.word	0x080096d9
 8009634:	080096d9 	.word	0x080096d9
 8009638:	080096d9 	.word	0x080096d9
 800963c:	080096d9 	.word	0x080096d9
 8009640:	080096d9 	.word	0x080096d9
 8009644:	080096b9 	.word	0x080096b9
 8009648:	080096d9 	.word	0x080096d9
 800964c:	080096d9 	.word	0x080096d9
 8009650:	080096d9 	.word	0x080096d9
 8009654:	080096d9 	.word	0x080096d9
 8009658:	080096d9 	.word	0x080096d9
 800965c:	080096d9 	.word	0x080096d9
 8009660:	080096d9 	.word	0x080096d9
 8009664:	080096c1 	.word	0x080096c1
 8009668:	080096d9 	.word	0x080096d9
 800966c:	080096d9 	.word	0x080096d9
 8009670:	080096d9 	.word	0x080096d9
 8009674:	080096d9 	.word	0x080096d9
 8009678:	080096d9 	.word	0x080096d9
 800967c:	080096d9 	.word	0x080096d9
 8009680:	080096d9 	.word	0x080096d9
 8009684:	080096c9 	.word	0x080096c9
 8009688:	080096d9 	.word	0x080096d9
 800968c:	080096d9 	.word	0x080096d9
 8009690:	080096d9 	.word	0x080096d9
 8009694:	080096d9 	.word	0x080096d9
 8009698:	080096d9 	.word	0x080096d9
 800969c:	080096d9 	.word	0x080096d9
 80096a0:	080096d9 	.word	0x080096d9
 80096a4:	080096d1 	.word	0x080096d1
 80096a8:	2301      	movs	r3, #1
 80096aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80096ae:	e222      	b.n	8009af6 <UART_SetConfig+0x5a2>
 80096b0:	2304      	movs	r3, #4
 80096b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80096b6:	e21e      	b.n	8009af6 <UART_SetConfig+0x5a2>
 80096b8:	2308      	movs	r3, #8
 80096ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80096be:	e21a      	b.n	8009af6 <UART_SetConfig+0x5a2>
 80096c0:	2310      	movs	r3, #16
 80096c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80096c6:	e216      	b.n	8009af6 <UART_SetConfig+0x5a2>
 80096c8:	2320      	movs	r3, #32
 80096ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80096ce:	e212      	b.n	8009af6 <UART_SetConfig+0x5a2>
 80096d0:	2340      	movs	r3, #64	; 0x40
 80096d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80096d6:	e20e      	b.n	8009af6 <UART_SetConfig+0x5a2>
 80096d8:	2380      	movs	r3, #128	; 0x80
 80096da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80096de:	e20a      	b.n	8009af6 <UART_SetConfig+0x5a2>
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	4a6b      	ldr	r2, [pc, #428]	; (8009894 <UART_SetConfig+0x340>)
 80096e6:	4293      	cmp	r3, r2
 80096e8:	d130      	bne.n	800974c <UART_SetConfig+0x1f8>
 80096ea:	4b69      	ldr	r3, [pc, #420]	; (8009890 <UART_SetConfig+0x33c>)
 80096ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80096ee:	f003 0307 	and.w	r3, r3, #7
 80096f2:	2b05      	cmp	r3, #5
 80096f4:	d826      	bhi.n	8009744 <UART_SetConfig+0x1f0>
 80096f6:	a201      	add	r2, pc, #4	; (adr r2, 80096fc <UART_SetConfig+0x1a8>)
 80096f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096fc:	08009715 	.word	0x08009715
 8009700:	0800971d 	.word	0x0800971d
 8009704:	08009725 	.word	0x08009725
 8009708:	0800972d 	.word	0x0800972d
 800970c:	08009735 	.word	0x08009735
 8009710:	0800973d 	.word	0x0800973d
 8009714:	2300      	movs	r3, #0
 8009716:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800971a:	e1ec      	b.n	8009af6 <UART_SetConfig+0x5a2>
 800971c:	2304      	movs	r3, #4
 800971e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009722:	e1e8      	b.n	8009af6 <UART_SetConfig+0x5a2>
 8009724:	2308      	movs	r3, #8
 8009726:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800972a:	e1e4      	b.n	8009af6 <UART_SetConfig+0x5a2>
 800972c:	2310      	movs	r3, #16
 800972e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009732:	e1e0      	b.n	8009af6 <UART_SetConfig+0x5a2>
 8009734:	2320      	movs	r3, #32
 8009736:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800973a:	e1dc      	b.n	8009af6 <UART_SetConfig+0x5a2>
 800973c:	2340      	movs	r3, #64	; 0x40
 800973e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009742:	e1d8      	b.n	8009af6 <UART_SetConfig+0x5a2>
 8009744:	2380      	movs	r3, #128	; 0x80
 8009746:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800974a:	e1d4      	b.n	8009af6 <UART_SetConfig+0x5a2>
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	4a51      	ldr	r2, [pc, #324]	; (8009898 <UART_SetConfig+0x344>)
 8009752:	4293      	cmp	r3, r2
 8009754:	d130      	bne.n	80097b8 <UART_SetConfig+0x264>
 8009756:	4b4e      	ldr	r3, [pc, #312]	; (8009890 <UART_SetConfig+0x33c>)
 8009758:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800975a:	f003 0307 	and.w	r3, r3, #7
 800975e:	2b05      	cmp	r3, #5
 8009760:	d826      	bhi.n	80097b0 <UART_SetConfig+0x25c>
 8009762:	a201      	add	r2, pc, #4	; (adr r2, 8009768 <UART_SetConfig+0x214>)
 8009764:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009768:	08009781 	.word	0x08009781
 800976c:	08009789 	.word	0x08009789
 8009770:	08009791 	.word	0x08009791
 8009774:	08009799 	.word	0x08009799
 8009778:	080097a1 	.word	0x080097a1
 800977c:	080097a9 	.word	0x080097a9
 8009780:	2300      	movs	r3, #0
 8009782:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009786:	e1b6      	b.n	8009af6 <UART_SetConfig+0x5a2>
 8009788:	2304      	movs	r3, #4
 800978a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800978e:	e1b2      	b.n	8009af6 <UART_SetConfig+0x5a2>
 8009790:	2308      	movs	r3, #8
 8009792:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009796:	e1ae      	b.n	8009af6 <UART_SetConfig+0x5a2>
 8009798:	2310      	movs	r3, #16
 800979a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800979e:	e1aa      	b.n	8009af6 <UART_SetConfig+0x5a2>
 80097a0:	2320      	movs	r3, #32
 80097a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80097a6:	e1a6      	b.n	8009af6 <UART_SetConfig+0x5a2>
 80097a8:	2340      	movs	r3, #64	; 0x40
 80097aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80097ae:	e1a2      	b.n	8009af6 <UART_SetConfig+0x5a2>
 80097b0:	2380      	movs	r3, #128	; 0x80
 80097b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80097b6:	e19e      	b.n	8009af6 <UART_SetConfig+0x5a2>
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	4a37      	ldr	r2, [pc, #220]	; (800989c <UART_SetConfig+0x348>)
 80097be:	4293      	cmp	r3, r2
 80097c0:	d130      	bne.n	8009824 <UART_SetConfig+0x2d0>
 80097c2:	4b33      	ldr	r3, [pc, #204]	; (8009890 <UART_SetConfig+0x33c>)
 80097c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80097c6:	f003 0307 	and.w	r3, r3, #7
 80097ca:	2b05      	cmp	r3, #5
 80097cc:	d826      	bhi.n	800981c <UART_SetConfig+0x2c8>
 80097ce:	a201      	add	r2, pc, #4	; (adr r2, 80097d4 <UART_SetConfig+0x280>)
 80097d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097d4:	080097ed 	.word	0x080097ed
 80097d8:	080097f5 	.word	0x080097f5
 80097dc:	080097fd 	.word	0x080097fd
 80097e0:	08009805 	.word	0x08009805
 80097e4:	0800980d 	.word	0x0800980d
 80097e8:	08009815 	.word	0x08009815
 80097ec:	2300      	movs	r3, #0
 80097ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80097f2:	e180      	b.n	8009af6 <UART_SetConfig+0x5a2>
 80097f4:	2304      	movs	r3, #4
 80097f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80097fa:	e17c      	b.n	8009af6 <UART_SetConfig+0x5a2>
 80097fc:	2308      	movs	r3, #8
 80097fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009802:	e178      	b.n	8009af6 <UART_SetConfig+0x5a2>
 8009804:	2310      	movs	r3, #16
 8009806:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800980a:	e174      	b.n	8009af6 <UART_SetConfig+0x5a2>
 800980c:	2320      	movs	r3, #32
 800980e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009812:	e170      	b.n	8009af6 <UART_SetConfig+0x5a2>
 8009814:	2340      	movs	r3, #64	; 0x40
 8009816:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800981a:	e16c      	b.n	8009af6 <UART_SetConfig+0x5a2>
 800981c:	2380      	movs	r3, #128	; 0x80
 800981e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009822:	e168      	b.n	8009af6 <UART_SetConfig+0x5a2>
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	4a1d      	ldr	r2, [pc, #116]	; (80098a0 <UART_SetConfig+0x34c>)
 800982a:	4293      	cmp	r3, r2
 800982c:	d142      	bne.n	80098b4 <UART_SetConfig+0x360>
 800982e:	4b18      	ldr	r3, [pc, #96]	; (8009890 <UART_SetConfig+0x33c>)
 8009830:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009832:	f003 0307 	and.w	r3, r3, #7
 8009836:	2b05      	cmp	r3, #5
 8009838:	d838      	bhi.n	80098ac <UART_SetConfig+0x358>
 800983a:	a201      	add	r2, pc, #4	; (adr r2, 8009840 <UART_SetConfig+0x2ec>)
 800983c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009840:	08009859 	.word	0x08009859
 8009844:	08009861 	.word	0x08009861
 8009848:	08009869 	.word	0x08009869
 800984c:	08009871 	.word	0x08009871
 8009850:	08009879 	.word	0x08009879
 8009854:	080098a5 	.word	0x080098a5
 8009858:	2300      	movs	r3, #0
 800985a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800985e:	e14a      	b.n	8009af6 <UART_SetConfig+0x5a2>
 8009860:	2304      	movs	r3, #4
 8009862:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009866:	e146      	b.n	8009af6 <UART_SetConfig+0x5a2>
 8009868:	2308      	movs	r3, #8
 800986a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800986e:	e142      	b.n	8009af6 <UART_SetConfig+0x5a2>
 8009870:	2310      	movs	r3, #16
 8009872:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009876:	e13e      	b.n	8009af6 <UART_SetConfig+0x5a2>
 8009878:	2320      	movs	r3, #32
 800987a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800987e:	e13a      	b.n	8009af6 <UART_SetConfig+0x5a2>
 8009880:	cfff69f3 	.word	0xcfff69f3
 8009884:	58000c00 	.word	0x58000c00
 8009888:	11fff4ff 	.word	0x11fff4ff
 800988c:	40011000 	.word	0x40011000
 8009890:	58024400 	.word	0x58024400
 8009894:	40004400 	.word	0x40004400
 8009898:	40004800 	.word	0x40004800
 800989c:	40004c00 	.word	0x40004c00
 80098a0:	40005000 	.word	0x40005000
 80098a4:	2340      	movs	r3, #64	; 0x40
 80098a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80098aa:	e124      	b.n	8009af6 <UART_SetConfig+0x5a2>
 80098ac:	2380      	movs	r3, #128	; 0x80
 80098ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80098b2:	e120      	b.n	8009af6 <UART_SetConfig+0x5a2>
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	4acc      	ldr	r2, [pc, #816]	; (8009bec <UART_SetConfig+0x698>)
 80098ba:	4293      	cmp	r3, r2
 80098bc:	d176      	bne.n	80099ac <UART_SetConfig+0x458>
 80098be:	4bcc      	ldr	r3, [pc, #816]	; (8009bf0 <UART_SetConfig+0x69c>)
 80098c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80098c2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80098c6:	2b28      	cmp	r3, #40	; 0x28
 80098c8:	d86c      	bhi.n	80099a4 <UART_SetConfig+0x450>
 80098ca:	a201      	add	r2, pc, #4	; (adr r2, 80098d0 <UART_SetConfig+0x37c>)
 80098cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098d0:	08009975 	.word	0x08009975
 80098d4:	080099a5 	.word	0x080099a5
 80098d8:	080099a5 	.word	0x080099a5
 80098dc:	080099a5 	.word	0x080099a5
 80098e0:	080099a5 	.word	0x080099a5
 80098e4:	080099a5 	.word	0x080099a5
 80098e8:	080099a5 	.word	0x080099a5
 80098ec:	080099a5 	.word	0x080099a5
 80098f0:	0800997d 	.word	0x0800997d
 80098f4:	080099a5 	.word	0x080099a5
 80098f8:	080099a5 	.word	0x080099a5
 80098fc:	080099a5 	.word	0x080099a5
 8009900:	080099a5 	.word	0x080099a5
 8009904:	080099a5 	.word	0x080099a5
 8009908:	080099a5 	.word	0x080099a5
 800990c:	080099a5 	.word	0x080099a5
 8009910:	08009985 	.word	0x08009985
 8009914:	080099a5 	.word	0x080099a5
 8009918:	080099a5 	.word	0x080099a5
 800991c:	080099a5 	.word	0x080099a5
 8009920:	080099a5 	.word	0x080099a5
 8009924:	080099a5 	.word	0x080099a5
 8009928:	080099a5 	.word	0x080099a5
 800992c:	080099a5 	.word	0x080099a5
 8009930:	0800998d 	.word	0x0800998d
 8009934:	080099a5 	.word	0x080099a5
 8009938:	080099a5 	.word	0x080099a5
 800993c:	080099a5 	.word	0x080099a5
 8009940:	080099a5 	.word	0x080099a5
 8009944:	080099a5 	.word	0x080099a5
 8009948:	080099a5 	.word	0x080099a5
 800994c:	080099a5 	.word	0x080099a5
 8009950:	08009995 	.word	0x08009995
 8009954:	080099a5 	.word	0x080099a5
 8009958:	080099a5 	.word	0x080099a5
 800995c:	080099a5 	.word	0x080099a5
 8009960:	080099a5 	.word	0x080099a5
 8009964:	080099a5 	.word	0x080099a5
 8009968:	080099a5 	.word	0x080099a5
 800996c:	080099a5 	.word	0x080099a5
 8009970:	0800999d 	.word	0x0800999d
 8009974:	2301      	movs	r3, #1
 8009976:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800997a:	e0bc      	b.n	8009af6 <UART_SetConfig+0x5a2>
 800997c:	2304      	movs	r3, #4
 800997e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009982:	e0b8      	b.n	8009af6 <UART_SetConfig+0x5a2>
 8009984:	2308      	movs	r3, #8
 8009986:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800998a:	e0b4      	b.n	8009af6 <UART_SetConfig+0x5a2>
 800998c:	2310      	movs	r3, #16
 800998e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009992:	e0b0      	b.n	8009af6 <UART_SetConfig+0x5a2>
 8009994:	2320      	movs	r3, #32
 8009996:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800999a:	e0ac      	b.n	8009af6 <UART_SetConfig+0x5a2>
 800999c:	2340      	movs	r3, #64	; 0x40
 800999e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80099a2:	e0a8      	b.n	8009af6 <UART_SetConfig+0x5a2>
 80099a4:	2380      	movs	r3, #128	; 0x80
 80099a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80099aa:	e0a4      	b.n	8009af6 <UART_SetConfig+0x5a2>
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	4a90      	ldr	r2, [pc, #576]	; (8009bf4 <UART_SetConfig+0x6a0>)
 80099b2:	4293      	cmp	r3, r2
 80099b4:	d130      	bne.n	8009a18 <UART_SetConfig+0x4c4>
 80099b6:	4b8e      	ldr	r3, [pc, #568]	; (8009bf0 <UART_SetConfig+0x69c>)
 80099b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80099ba:	f003 0307 	and.w	r3, r3, #7
 80099be:	2b05      	cmp	r3, #5
 80099c0:	d826      	bhi.n	8009a10 <UART_SetConfig+0x4bc>
 80099c2:	a201      	add	r2, pc, #4	; (adr r2, 80099c8 <UART_SetConfig+0x474>)
 80099c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099c8:	080099e1 	.word	0x080099e1
 80099cc:	080099e9 	.word	0x080099e9
 80099d0:	080099f1 	.word	0x080099f1
 80099d4:	080099f9 	.word	0x080099f9
 80099d8:	08009a01 	.word	0x08009a01
 80099dc:	08009a09 	.word	0x08009a09
 80099e0:	2300      	movs	r3, #0
 80099e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80099e6:	e086      	b.n	8009af6 <UART_SetConfig+0x5a2>
 80099e8:	2304      	movs	r3, #4
 80099ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80099ee:	e082      	b.n	8009af6 <UART_SetConfig+0x5a2>
 80099f0:	2308      	movs	r3, #8
 80099f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80099f6:	e07e      	b.n	8009af6 <UART_SetConfig+0x5a2>
 80099f8:	2310      	movs	r3, #16
 80099fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80099fe:	e07a      	b.n	8009af6 <UART_SetConfig+0x5a2>
 8009a00:	2320      	movs	r3, #32
 8009a02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a06:	e076      	b.n	8009af6 <UART_SetConfig+0x5a2>
 8009a08:	2340      	movs	r3, #64	; 0x40
 8009a0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a0e:	e072      	b.n	8009af6 <UART_SetConfig+0x5a2>
 8009a10:	2380      	movs	r3, #128	; 0x80
 8009a12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a16:	e06e      	b.n	8009af6 <UART_SetConfig+0x5a2>
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	4a76      	ldr	r2, [pc, #472]	; (8009bf8 <UART_SetConfig+0x6a4>)
 8009a1e:	4293      	cmp	r3, r2
 8009a20:	d130      	bne.n	8009a84 <UART_SetConfig+0x530>
 8009a22:	4b73      	ldr	r3, [pc, #460]	; (8009bf0 <UART_SetConfig+0x69c>)
 8009a24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a26:	f003 0307 	and.w	r3, r3, #7
 8009a2a:	2b05      	cmp	r3, #5
 8009a2c:	d826      	bhi.n	8009a7c <UART_SetConfig+0x528>
 8009a2e:	a201      	add	r2, pc, #4	; (adr r2, 8009a34 <UART_SetConfig+0x4e0>)
 8009a30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a34:	08009a4d 	.word	0x08009a4d
 8009a38:	08009a55 	.word	0x08009a55
 8009a3c:	08009a5d 	.word	0x08009a5d
 8009a40:	08009a65 	.word	0x08009a65
 8009a44:	08009a6d 	.word	0x08009a6d
 8009a48:	08009a75 	.word	0x08009a75
 8009a4c:	2300      	movs	r3, #0
 8009a4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a52:	e050      	b.n	8009af6 <UART_SetConfig+0x5a2>
 8009a54:	2304      	movs	r3, #4
 8009a56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a5a:	e04c      	b.n	8009af6 <UART_SetConfig+0x5a2>
 8009a5c:	2308      	movs	r3, #8
 8009a5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a62:	e048      	b.n	8009af6 <UART_SetConfig+0x5a2>
 8009a64:	2310      	movs	r3, #16
 8009a66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a6a:	e044      	b.n	8009af6 <UART_SetConfig+0x5a2>
 8009a6c:	2320      	movs	r3, #32
 8009a6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a72:	e040      	b.n	8009af6 <UART_SetConfig+0x5a2>
 8009a74:	2340      	movs	r3, #64	; 0x40
 8009a76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a7a:	e03c      	b.n	8009af6 <UART_SetConfig+0x5a2>
 8009a7c:	2380      	movs	r3, #128	; 0x80
 8009a7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a82:	e038      	b.n	8009af6 <UART_SetConfig+0x5a2>
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	4a5c      	ldr	r2, [pc, #368]	; (8009bfc <UART_SetConfig+0x6a8>)
 8009a8a:	4293      	cmp	r3, r2
 8009a8c:	d130      	bne.n	8009af0 <UART_SetConfig+0x59c>
 8009a8e:	4b58      	ldr	r3, [pc, #352]	; (8009bf0 <UART_SetConfig+0x69c>)
 8009a90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a92:	f003 0307 	and.w	r3, r3, #7
 8009a96:	2b05      	cmp	r3, #5
 8009a98:	d826      	bhi.n	8009ae8 <UART_SetConfig+0x594>
 8009a9a:	a201      	add	r2, pc, #4	; (adr r2, 8009aa0 <UART_SetConfig+0x54c>)
 8009a9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009aa0:	08009ab9 	.word	0x08009ab9
 8009aa4:	08009ac1 	.word	0x08009ac1
 8009aa8:	08009ac9 	.word	0x08009ac9
 8009aac:	08009ad1 	.word	0x08009ad1
 8009ab0:	08009ad9 	.word	0x08009ad9
 8009ab4:	08009ae1 	.word	0x08009ae1
 8009ab8:	2302      	movs	r3, #2
 8009aba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009abe:	e01a      	b.n	8009af6 <UART_SetConfig+0x5a2>
 8009ac0:	2304      	movs	r3, #4
 8009ac2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ac6:	e016      	b.n	8009af6 <UART_SetConfig+0x5a2>
 8009ac8:	2308      	movs	r3, #8
 8009aca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ace:	e012      	b.n	8009af6 <UART_SetConfig+0x5a2>
 8009ad0:	2310      	movs	r3, #16
 8009ad2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ad6:	e00e      	b.n	8009af6 <UART_SetConfig+0x5a2>
 8009ad8:	2320      	movs	r3, #32
 8009ada:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ade:	e00a      	b.n	8009af6 <UART_SetConfig+0x5a2>
 8009ae0:	2340      	movs	r3, #64	; 0x40
 8009ae2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ae6:	e006      	b.n	8009af6 <UART_SetConfig+0x5a2>
 8009ae8:	2380      	movs	r3, #128	; 0x80
 8009aea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009aee:	e002      	b.n	8009af6 <UART_SetConfig+0x5a2>
 8009af0:	2380      	movs	r3, #128	; 0x80
 8009af2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	4a40      	ldr	r2, [pc, #256]	; (8009bfc <UART_SetConfig+0x6a8>)
 8009afc:	4293      	cmp	r3, r2
 8009afe:	f040 80ef 	bne.w	8009ce0 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009b02:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009b06:	2b20      	cmp	r3, #32
 8009b08:	dc46      	bgt.n	8009b98 <UART_SetConfig+0x644>
 8009b0a:	2b02      	cmp	r3, #2
 8009b0c:	f2c0 8081 	blt.w	8009c12 <UART_SetConfig+0x6be>
 8009b10:	3b02      	subs	r3, #2
 8009b12:	2b1e      	cmp	r3, #30
 8009b14:	d87d      	bhi.n	8009c12 <UART_SetConfig+0x6be>
 8009b16:	a201      	add	r2, pc, #4	; (adr r2, 8009b1c <UART_SetConfig+0x5c8>)
 8009b18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b1c:	08009b9f 	.word	0x08009b9f
 8009b20:	08009c13 	.word	0x08009c13
 8009b24:	08009ba7 	.word	0x08009ba7
 8009b28:	08009c13 	.word	0x08009c13
 8009b2c:	08009c13 	.word	0x08009c13
 8009b30:	08009c13 	.word	0x08009c13
 8009b34:	08009bb7 	.word	0x08009bb7
 8009b38:	08009c13 	.word	0x08009c13
 8009b3c:	08009c13 	.word	0x08009c13
 8009b40:	08009c13 	.word	0x08009c13
 8009b44:	08009c13 	.word	0x08009c13
 8009b48:	08009c13 	.word	0x08009c13
 8009b4c:	08009c13 	.word	0x08009c13
 8009b50:	08009c13 	.word	0x08009c13
 8009b54:	08009bc7 	.word	0x08009bc7
 8009b58:	08009c13 	.word	0x08009c13
 8009b5c:	08009c13 	.word	0x08009c13
 8009b60:	08009c13 	.word	0x08009c13
 8009b64:	08009c13 	.word	0x08009c13
 8009b68:	08009c13 	.word	0x08009c13
 8009b6c:	08009c13 	.word	0x08009c13
 8009b70:	08009c13 	.word	0x08009c13
 8009b74:	08009c13 	.word	0x08009c13
 8009b78:	08009c13 	.word	0x08009c13
 8009b7c:	08009c13 	.word	0x08009c13
 8009b80:	08009c13 	.word	0x08009c13
 8009b84:	08009c13 	.word	0x08009c13
 8009b88:	08009c13 	.word	0x08009c13
 8009b8c:	08009c13 	.word	0x08009c13
 8009b90:	08009c13 	.word	0x08009c13
 8009b94:	08009c05 	.word	0x08009c05
 8009b98:	2b40      	cmp	r3, #64	; 0x40
 8009b9a:	d036      	beq.n	8009c0a <UART_SetConfig+0x6b6>
 8009b9c:	e039      	b.n	8009c12 <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8009b9e:	f7fd fa85 	bl	80070ac <HAL_RCCEx_GetD3PCLK1Freq>
 8009ba2:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009ba4:	e03b      	b.n	8009c1e <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009ba6:	f107 0314 	add.w	r3, r7, #20
 8009baa:	4618      	mov	r0, r3
 8009bac:	f7fd fa94 	bl	80070d8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009bb0:	69bb      	ldr	r3, [r7, #24]
 8009bb2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009bb4:	e033      	b.n	8009c1e <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009bb6:	f107 0308 	add.w	r3, r7, #8
 8009bba:	4618      	mov	r0, r3
 8009bbc:	f7fd fbe0 	bl	8007380 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009bc4:	e02b      	b.n	8009c1e <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009bc6:	4b0a      	ldr	r3, [pc, #40]	; (8009bf0 <UART_SetConfig+0x69c>)
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	f003 0320 	and.w	r3, r3, #32
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d009      	beq.n	8009be6 <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009bd2:	4b07      	ldr	r3, [pc, #28]	; (8009bf0 <UART_SetConfig+0x69c>)
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	08db      	lsrs	r3, r3, #3
 8009bd8:	f003 0303 	and.w	r3, r3, #3
 8009bdc:	4a08      	ldr	r2, [pc, #32]	; (8009c00 <UART_SetConfig+0x6ac>)
 8009bde:	fa22 f303 	lsr.w	r3, r2, r3
 8009be2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009be4:	e01b      	b.n	8009c1e <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 8009be6:	4b06      	ldr	r3, [pc, #24]	; (8009c00 <UART_SetConfig+0x6ac>)
 8009be8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009bea:	e018      	b.n	8009c1e <UART_SetConfig+0x6ca>
 8009bec:	40011400 	.word	0x40011400
 8009bf0:	58024400 	.word	0x58024400
 8009bf4:	40007800 	.word	0x40007800
 8009bf8:	40007c00 	.word	0x40007c00
 8009bfc:	58000c00 	.word	0x58000c00
 8009c00:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009c04:	4bc4      	ldr	r3, [pc, #784]	; (8009f18 <UART_SetConfig+0x9c4>)
 8009c06:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009c08:	e009      	b.n	8009c1e <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009c0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009c0e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009c10:	e005      	b.n	8009c1e <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 8009c12:	2300      	movs	r3, #0
 8009c14:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8009c16:	2301      	movs	r3, #1
 8009c18:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8009c1c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009c1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	f000 81da 	beq.w	8009fda <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c2a:	4abc      	ldr	r2, [pc, #752]	; (8009f1c <UART_SetConfig+0x9c8>)
 8009c2c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009c30:	461a      	mov	r2, r3
 8009c32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c34:	fbb3 f3f2 	udiv	r3, r3, r2
 8009c38:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	685a      	ldr	r2, [r3, #4]
 8009c3e:	4613      	mov	r3, r2
 8009c40:	005b      	lsls	r3, r3, #1
 8009c42:	4413      	add	r3, r2
 8009c44:	6a3a      	ldr	r2, [r7, #32]
 8009c46:	429a      	cmp	r2, r3
 8009c48:	d305      	bcc.n	8009c56 <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	685b      	ldr	r3, [r3, #4]
 8009c4e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009c50:	6a3a      	ldr	r2, [r7, #32]
 8009c52:	429a      	cmp	r2, r3
 8009c54:	d903      	bls.n	8009c5e <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 8009c56:	2301      	movs	r3, #1
 8009c58:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8009c5c:	e1bd      	b.n	8009fda <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009c5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c60:	4618      	mov	r0, r3
 8009c62:	f04f 0100 	mov.w	r1, #0
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c6a:	4aac      	ldr	r2, [pc, #688]	; (8009f1c <UART_SetConfig+0x9c8>)
 8009c6c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009c70:	b29a      	uxth	r2, r3
 8009c72:	f04f 0300 	mov.w	r3, #0
 8009c76:	f7f6 fb2f 	bl	80002d8 <__aeabi_uldivmod>
 8009c7a:	4602      	mov	r2, r0
 8009c7c:	460b      	mov	r3, r1
 8009c7e:	4610      	mov	r0, r2
 8009c80:	4619      	mov	r1, r3
 8009c82:	f04f 0200 	mov.w	r2, #0
 8009c86:	f04f 0300 	mov.w	r3, #0
 8009c8a:	020b      	lsls	r3, r1, #8
 8009c8c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009c90:	0202      	lsls	r2, r0, #8
 8009c92:	6879      	ldr	r1, [r7, #4]
 8009c94:	6849      	ldr	r1, [r1, #4]
 8009c96:	0849      	lsrs	r1, r1, #1
 8009c98:	4608      	mov	r0, r1
 8009c9a:	f04f 0100 	mov.w	r1, #0
 8009c9e:	1814      	adds	r4, r2, r0
 8009ca0:	eb43 0501 	adc.w	r5, r3, r1
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	685b      	ldr	r3, [r3, #4]
 8009ca8:	461a      	mov	r2, r3
 8009caa:	f04f 0300 	mov.w	r3, #0
 8009cae:	4620      	mov	r0, r4
 8009cb0:	4629      	mov	r1, r5
 8009cb2:	f7f6 fb11 	bl	80002d8 <__aeabi_uldivmod>
 8009cb6:	4602      	mov	r2, r0
 8009cb8:	460b      	mov	r3, r1
 8009cba:	4613      	mov	r3, r2
 8009cbc:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009cbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cc0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009cc4:	d308      	bcc.n	8009cd8 <UART_SetConfig+0x784>
 8009cc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cc8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009ccc:	d204      	bcs.n	8009cd8 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009cd4:	60da      	str	r2, [r3, #12]
 8009cd6:	e180      	b.n	8009fda <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 8009cd8:	2301      	movs	r3, #1
 8009cda:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8009cde:	e17c      	b.n	8009fda <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	69db      	ldr	r3, [r3, #28]
 8009ce4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009ce8:	f040 80bf 	bne.w	8009e6a <UART_SetConfig+0x916>
  {
    switch (clocksource)
 8009cec:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009cf0:	2b20      	cmp	r3, #32
 8009cf2:	dc49      	bgt.n	8009d88 <UART_SetConfig+0x834>
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	db7c      	blt.n	8009df2 <UART_SetConfig+0x89e>
 8009cf8:	2b20      	cmp	r3, #32
 8009cfa:	d87a      	bhi.n	8009df2 <UART_SetConfig+0x89e>
 8009cfc:	a201      	add	r2, pc, #4	; (adr r2, 8009d04 <UART_SetConfig+0x7b0>)
 8009cfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d02:	bf00      	nop
 8009d04:	08009d8f 	.word	0x08009d8f
 8009d08:	08009d97 	.word	0x08009d97
 8009d0c:	08009df3 	.word	0x08009df3
 8009d10:	08009df3 	.word	0x08009df3
 8009d14:	08009d9f 	.word	0x08009d9f
 8009d18:	08009df3 	.word	0x08009df3
 8009d1c:	08009df3 	.word	0x08009df3
 8009d20:	08009df3 	.word	0x08009df3
 8009d24:	08009daf 	.word	0x08009daf
 8009d28:	08009df3 	.word	0x08009df3
 8009d2c:	08009df3 	.word	0x08009df3
 8009d30:	08009df3 	.word	0x08009df3
 8009d34:	08009df3 	.word	0x08009df3
 8009d38:	08009df3 	.word	0x08009df3
 8009d3c:	08009df3 	.word	0x08009df3
 8009d40:	08009df3 	.word	0x08009df3
 8009d44:	08009dbf 	.word	0x08009dbf
 8009d48:	08009df3 	.word	0x08009df3
 8009d4c:	08009df3 	.word	0x08009df3
 8009d50:	08009df3 	.word	0x08009df3
 8009d54:	08009df3 	.word	0x08009df3
 8009d58:	08009df3 	.word	0x08009df3
 8009d5c:	08009df3 	.word	0x08009df3
 8009d60:	08009df3 	.word	0x08009df3
 8009d64:	08009df3 	.word	0x08009df3
 8009d68:	08009df3 	.word	0x08009df3
 8009d6c:	08009df3 	.word	0x08009df3
 8009d70:	08009df3 	.word	0x08009df3
 8009d74:	08009df3 	.word	0x08009df3
 8009d78:	08009df3 	.word	0x08009df3
 8009d7c:	08009df3 	.word	0x08009df3
 8009d80:	08009df3 	.word	0x08009df3
 8009d84:	08009de5 	.word	0x08009de5
 8009d88:	2b40      	cmp	r3, #64	; 0x40
 8009d8a:	d02e      	beq.n	8009dea <UART_SetConfig+0x896>
 8009d8c:	e031      	b.n	8009df2 <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009d8e:	f7fb fd4f 	bl	8005830 <HAL_RCC_GetPCLK1Freq>
 8009d92:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009d94:	e033      	b.n	8009dfe <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009d96:	f7fb fd61 	bl	800585c <HAL_RCC_GetPCLK2Freq>
 8009d9a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009d9c:	e02f      	b.n	8009dfe <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009d9e:	f107 0314 	add.w	r3, r7, #20
 8009da2:	4618      	mov	r0, r3
 8009da4:	f7fd f998 	bl	80070d8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009da8:	69bb      	ldr	r3, [r7, #24]
 8009daa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009dac:	e027      	b.n	8009dfe <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009dae:	f107 0308 	add.w	r3, r7, #8
 8009db2:	4618      	mov	r0, r3
 8009db4:	f7fd fae4 	bl	8007380 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009dbc:	e01f      	b.n	8009dfe <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009dbe:	4b58      	ldr	r3, [pc, #352]	; (8009f20 <UART_SetConfig+0x9cc>)
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	f003 0320 	and.w	r3, r3, #32
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d009      	beq.n	8009dde <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009dca:	4b55      	ldr	r3, [pc, #340]	; (8009f20 <UART_SetConfig+0x9cc>)
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	08db      	lsrs	r3, r3, #3
 8009dd0:	f003 0303 	and.w	r3, r3, #3
 8009dd4:	4a53      	ldr	r2, [pc, #332]	; (8009f24 <UART_SetConfig+0x9d0>)
 8009dd6:	fa22 f303 	lsr.w	r3, r2, r3
 8009dda:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009ddc:	e00f      	b.n	8009dfe <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 8009dde:	4b51      	ldr	r3, [pc, #324]	; (8009f24 <UART_SetConfig+0x9d0>)
 8009de0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009de2:	e00c      	b.n	8009dfe <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009de4:	4b4c      	ldr	r3, [pc, #304]	; (8009f18 <UART_SetConfig+0x9c4>)
 8009de6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009de8:	e009      	b.n	8009dfe <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009dea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009dee:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009df0:	e005      	b.n	8009dfe <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 8009df2:	2300      	movs	r3, #0
 8009df4:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8009df6:	2301      	movs	r3, #1
 8009df8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8009dfc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009dfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	f000 80ea 	beq.w	8009fda <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e0a:	4a44      	ldr	r2, [pc, #272]	; (8009f1c <UART_SetConfig+0x9c8>)
 8009e0c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009e10:	461a      	mov	r2, r3
 8009e12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e14:	fbb3 f3f2 	udiv	r3, r3, r2
 8009e18:	005a      	lsls	r2, r3, #1
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	685b      	ldr	r3, [r3, #4]
 8009e1e:	085b      	lsrs	r3, r3, #1
 8009e20:	441a      	add	r2, r3
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	685b      	ldr	r3, [r3, #4]
 8009e26:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e2a:	b29b      	uxth	r3, r3
 8009e2c:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009e2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e30:	2b0f      	cmp	r3, #15
 8009e32:	d916      	bls.n	8009e62 <UART_SetConfig+0x90e>
 8009e34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009e3a:	d212      	bcs.n	8009e62 <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009e3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e3e:	b29b      	uxth	r3, r3
 8009e40:	f023 030f 	bic.w	r3, r3, #15
 8009e44:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009e46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e48:	085b      	lsrs	r3, r3, #1
 8009e4a:	b29b      	uxth	r3, r3
 8009e4c:	f003 0307 	and.w	r3, r3, #7
 8009e50:	b29a      	uxth	r2, r3
 8009e52:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009e54:	4313      	orrs	r3, r2
 8009e56:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8009e5e:	60da      	str	r2, [r3, #12]
 8009e60:	e0bb      	b.n	8009fda <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8009e62:	2301      	movs	r3, #1
 8009e64:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8009e68:	e0b7      	b.n	8009fda <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009e6a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009e6e:	2b20      	cmp	r3, #32
 8009e70:	dc4a      	bgt.n	8009f08 <UART_SetConfig+0x9b4>
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	f2c0 8086 	blt.w	8009f84 <UART_SetConfig+0xa30>
 8009e78:	2b20      	cmp	r3, #32
 8009e7a:	f200 8083 	bhi.w	8009f84 <UART_SetConfig+0xa30>
 8009e7e:	a201      	add	r2, pc, #4	; (adr r2, 8009e84 <UART_SetConfig+0x930>)
 8009e80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e84:	08009f0f 	.word	0x08009f0f
 8009e88:	08009f29 	.word	0x08009f29
 8009e8c:	08009f85 	.word	0x08009f85
 8009e90:	08009f85 	.word	0x08009f85
 8009e94:	08009f31 	.word	0x08009f31
 8009e98:	08009f85 	.word	0x08009f85
 8009e9c:	08009f85 	.word	0x08009f85
 8009ea0:	08009f85 	.word	0x08009f85
 8009ea4:	08009f41 	.word	0x08009f41
 8009ea8:	08009f85 	.word	0x08009f85
 8009eac:	08009f85 	.word	0x08009f85
 8009eb0:	08009f85 	.word	0x08009f85
 8009eb4:	08009f85 	.word	0x08009f85
 8009eb8:	08009f85 	.word	0x08009f85
 8009ebc:	08009f85 	.word	0x08009f85
 8009ec0:	08009f85 	.word	0x08009f85
 8009ec4:	08009f51 	.word	0x08009f51
 8009ec8:	08009f85 	.word	0x08009f85
 8009ecc:	08009f85 	.word	0x08009f85
 8009ed0:	08009f85 	.word	0x08009f85
 8009ed4:	08009f85 	.word	0x08009f85
 8009ed8:	08009f85 	.word	0x08009f85
 8009edc:	08009f85 	.word	0x08009f85
 8009ee0:	08009f85 	.word	0x08009f85
 8009ee4:	08009f85 	.word	0x08009f85
 8009ee8:	08009f85 	.word	0x08009f85
 8009eec:	08009f85 	.word	0x08009f85
 8009ef0:	08009f85 	.word	0x08009f85
 8009ef4:	08009f85 	.word	0x08009f85
 8009ef8:	08009f85 	.word	0x08009f85
 8009efc:	08009f85 	.word	0x08009f85
 8009f00:	08009f85 	.word	0x08009f85
 8009f04:	08009f77 	.word	0x08009f77
 8009f08:	2b40      	cmp	r3, #64	; 0x40
 8009f0a:	d037      	beq.n	8009f7c <UART_SetConfig+0xa28>
 8009f0c:	e03a      	b.n	8009f84 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009f0e:	f7fb fc8f 	bl	8005830 <HAL_RCC_GetPCLK1Freq>
 8009f12:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009f14:	e03c      	b.n	8009f90 <UART_SetConfig+0xa3c>
 8009f16:	bf00      	nop
 8009f18:	003d0900 	.word	0x003d0900
 8009f1c:	0800a7dc 	.word	0x0800a7dc
 8009f20:	58024400 	.word	0x58024400
 8009f24:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009f28:	f7fb fc98 	bl	800585c <HAL_RCC_GetPCLK2Freq>
 8009f2c:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009f2e:	e02f      	b.n	8009f90 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009f30:	f107 0314 	add.w	r3, r7, #20
 8009f34:	4618      	mov	r0, r3
 8009f36:	f7fd f8cf 	bl	80070d8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009f3a:	69bb      	ldr	r3, [r7, #24]
 8009f3c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009f3e:	e027      	b.n	8009f90 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009f40:	f107 0308 	add.w	r3, r7, #8
 8009f44:	4618      	mov	r0, r3
 8009f46:	f7fd fa1b 	bl	8007380 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009f4e:	e01f      	b.n	8009f90 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009f50:	4b2c      	ldr	r3, [pc, #176]	; (800a004 <UART_SetConfig+0xab0>)
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	f003 0320 	and.w	r3, r3, #32
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d009      	beq.n	8009f70 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009f5c:	4b29      	ldr	r3, [pc, #164]	; (800a004 <UART_SetConfig+0xab0>)
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	08db      	lsrs	r3, r3, #3
 8009f62:	f003 0303 	and.w	r3, r3, #3
 8009f66:	4a28      	ldr	r2, [pc, #160]	; (800a008 <UART_SetConfig+0xab4>)
 8009f68:	fa22 f303 	lsr.w	r3, r2, r3
 8009f6c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009f6e:	e00f      	b.n	8009f90 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 8009f70:	4b25      	ldr	r3, [pc, #148]	; (800a008 <UART_SetConfig+0xab4>)
 8009f72:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009f74:	e00c      	b.n	8009f90 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009f76:	4b25      	ldr	r3, [pc, #148]	; (800a00c <UART_SetConfig+0xab8>)
 8009f78:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009f7a:	e009      	b.n	8009f90 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009f7c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009f80:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009f82:	e005      	b.n	8009f90 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 8009f84:	2300      	movs	r3, #0
 8009f86:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8009f88:	2301      	movs	r3, #1
 8009f8a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8009f8e:	bf00      	nop
    }

    if (pclk != 0U)
 8009f90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d021      	beq.n	8009fda <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f9a:	4a1d      	ldr	r2, [pc, #116]	; (800a010 <UART_SetConfig+0xabc>)
 8009f9c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009fa0:	461a      	mov	r2, r3
 8009fa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fa4:	fbb3 f2f2 	udiv	r2, r3, r2
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	685b      	ldr	r3, [r3, #4]
 8009fac:	085b      	lsrs	r3, r3, #1
 8009fae:	441a      	add	r2, r3
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	685b      	ldr	r3, [r3, #4]
 8009fb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8009fb8:	b29b      	uxth	r3, r3
 8009fba:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009fbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fbe:	2b0f      	cmp	r3, #15
 8009fc0:	d908      	bls.n	8009fd4 <UART_SetConfig+0xa80>
 8009fc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009fc8:	d204      	bcs.n	8009fd4 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009fd0:	60da      	str	r2, [r3, #12]
 8009fd2:	e002      	b.n	8009fda <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8009fd4:	2301      	movs	r3, #1
 8009fd6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	2201      	movs	r2, #1
 8009fde:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	2201      	movs	r2, #1
 8009fe6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	2200      	movs	r2, #0
 8009fee:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	2200      	movs	r2, #0
 8009ff4:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8009ff6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8009ffa:	4618      	mov	r0, r3
 8009ffc:	3738      	adds	r7, #56	; 0x38
 8009ffe:	46bd      	mov	sp, r7
 800a000:	bdb0      	pop	{r4, r5, r7, pc}
 800a002:	bf00      	nop
 800a004:	58024400 	.word	0x58024400
 800a008:	03d09000 	.word	0x03d09000
 800a00c:	003d0900 	.word	0x003d0900
 800a010:	0800a7dc 	.word	0x0800a7dc

0800a014 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a014:	b480      	push	{r7}
 800a016:	b083      	sub	sp, #12
 800a018:	af00      	add	r7, sp, #0
 800a01a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a020:	f003 0301 	and.w	r3, r3, #1
 800a024:	2b00      	cmp	r3, #0
 800a026:	d00a      	beq.n	800a03e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	685b      	ldr	r3, [r3, #4]
 800a02e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	430a      	orrs	r2, r1
 800a03c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a042:	f003 0302 	and.w	r3, r3, #2
 800a046:	2b00      	cmp	r3, #0
 800a048:	d00a      	beq.n	800a060 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	685b      	ldr	r3, [r3, #4]
 800a050:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	430a      	orrs	r2, r1
 800a05e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a064:	f003 0304 	and.w	r3, r3, #4
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d00a      	beq.n	800a082 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	685b      	ldr	r3, [r3, #4]
 800a072:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	430a      	orrs	r2, r1
 800a080:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a086:	f003 0308 	and.w	r3, r3, #8
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d00a      	beq.n	800a0a4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	685b      	ldr	r3, [r3, #4]
 800a094:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	430a      	orrs	r2, r1
 800a0a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0a8:	f003 0310 	and.w	r3, r3, #16
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d00a      	beq.n	800a0c6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	689b      	ldr	r3, [r3, #8]
 800a0b6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	430a      	orrs	r2, r1
 800a0c4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0ca:	f003 0320 	and.w	r3, r3, #32
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d00a      	beq.n	800a0e8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	689b      	ldr	r3, [r3, #8]
 800a0d8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	430a      	orrs	r2, r1
 800a0e6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d01a      	beq.n	800a12a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	685b      	ldr	r3, [r3, #4]
 800a0fa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	430a      	orrs	r2, r1
 800a108:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a10e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a112:	d10a      	bne.n	800a12a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	685b      	ldr	r3, [r3, #4]
 800a11a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	430a      	orrs	r2, r1
 800a128:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a12e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a132:	2b00      	cmp	r3, #0
 800a134:	d00a      	beq.n	800a14c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	685b      	ldr	r3, [r3, #4]
 800a13c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	430a      	orrs	r2, r1
 800a14a:	605a      	str	r2, [r3, #4]
  }
}
 800a14c:	bf00      	nop
 800a14e:	370c      	adds	r7, #12
 800a150:	46bd      	mov	sp, r7
 800a152:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a156:	4770      	bx	lr

0800a158 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a158:	b580      	push	{r7, lr}
 800a15a:	b086      	sub	sp, #24
 800a15c:	af02      	add	r7, sp, #8
 800a15e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	2200      	movs	r2, #0
 800a164:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a168:	f7f7 f962 	bl	8001430 <HAL_GetTick>
 800a16c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	f003 0308 	and.w	r3, r3, #8
 800a178:	2b08      	cmp	r3, #8
 800a17a:	d10e      	bne.n	800a19a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a17c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a180:	9300      	str	r3, [sp, #0]
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	2200      	movs	r2, #0
 800a186:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a18a:	6878      	ldr	r0, [r7, #4]
 800a18c:	f000 f82f 	bl	800a1ee <UART_WaitOnFlagUntilTimeout>
 800a190:	4603      	mov	r3, r0
 800a192:	2b00      	cmp	r3, #0
 800a194:	d001      	beq.n	800a19a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a196:	2303      	movs	r3, #3
 800a198:	e025      	b.n	800a1e6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	f003 0304 	and.w	r3, r3, #4
 800a1a4:	2b04      	cmp	r3, #4
 800a1a6:	d10e      	bne.n	800a1c6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a1a8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a1ac:	9300      	str	r3, [sp, #0]
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	2200      	movs	r2, #0
 800a1b2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a1b6:	6878      	ldr	r0, [r7, #4]
 800a1b8:	f000 f819 	bl	800a1ee <UART_WaitOnFlagUntilTimeout>
 800a1bc:	4603      	mov	r3, r0
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d001      	beq.n	800a1c6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a1c2:	2303      	movs	r3, #3
 800a1c4:	e00f      	b.n	800a1e6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	2220      	movs	r2, #32
 800a1ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	2220      	movs	r2, #32
 800a1d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	2200      	movs	r2, #0
 800a1da:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	2200      	movs	r2, #0
 800a1e0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a1e4:	2300      	movs	r3, #0
}
 800a1e6:	4618      	mov	r0, r3
 800a1e8:	3710      	adds	r7, #16
 800a1ea:	46bd      	mov	sp, r7
 800a1ec:	bd80      	pop	{r7, pc}

0800a1ee <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a1ee:	b580      	push	{r7, lr}
 800a1f0:	b084      	sub	sp, #16
 800a1f2:	af00      	add	r7, sp, #0
 800a1f4:	60f8      	str	r0, [r7, #12]
 800a1f6:	60b9      	str	r1, [r7, #8]
 800a1f8:	603b      	str	r3, [r7, #0]
 800a1fa:	4613      	mov	r3, r2
 800a1fc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a1fe:	e062      	b.n	800a2c6 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a200:	69bb      	ldr	r3, [r7, #24]
 800a202:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a206:	d05e      	beq.n	800a2c6 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a208:	f7f7 f912 	bl	8001430 <HAL_GetTick>
 800a20c:	4602      	mov	r2, r0
 800a20e:	683b      	ldr	r3, [r7, #0]
 800a210:	1ad3      	subs	r3, r2, r3
 800a212:	69ba      	ldr	r2, [r7, #24]
 800a214:	429a      	cmp	r2, r3
 800a216:	d302      	bcc.n	800a21e <UART_WaitOnFlagUntilTimeout+0x30>
 800a218:	69bb      	ldr	r3, [r7, #24]
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d11d      	bne.n	800a25a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	681a      	ldr	r2, [r3, #0]
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a22c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	689a      	ldr	r2, [r3, #8]
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	f022 0201 	bic.w	r2, r2, #1
 800a23c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	2220      	movs	r2, #32
 800a242:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	2220      	movs	r2, #32
 800a24a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	2200      	movs	r2, #0
 800a252:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800a256:	2303      	movs	r3, #3
 800a258:	e045      	b.n	800a2e6 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	f003 0304 	and.w	r3, r3, #4
 800a264:	2b00      	cmp	r3, #0
 800a266:	d02e      	beq.n	800a2c6 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	69db      	ldr	r3, [r3, #28]
 800a26e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a272:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a276:	d126      	bne.n	800a2c6 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a280:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	681a      	ldr	r2, [r3, #0]
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a290:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	689a      	ldr	r2, [r3, #8]
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	f022 0201 	bic.w	r2, r2, #1
 800a2a0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	2220      	movs	r2, #32
 800a2a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	2220      	movs	r2, #32
 800a2ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	2220      	movs	r2, #32
 800a2b6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	2200      	movs	r2, #0
 800a2be:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800a2c2:	2303      	movs	r3, #3
 800a2c4:	e00f      	b.n	800a2e6 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	69da      	ldr	r2, [r3, #28]
 800a2cc:	68bb      	ldr	r3, [r7, #8]
 800a2ce:	4013      	ands	r3, r2
 800a2d0:	68ba      	ldr	r2, [r7, #8]
 800a2d2:	429a      	cmp	r2, r3
 800a2d4:	bf0c      	ite	eq
 800a2d6:	2301      	moveq	r3, #1
 800a2d8:	2300      	movne	r3, #0
 800a2da:	b2db      	uxtb	r3, r3
 800a2dc:	461a      	mov	r2, r3
 800a2de:	79fb      	ldrb	r3, [r7, #7]
 800a2e0:	429a      	cmp	r2, r3
 800a2e2:	d08d      	beq.n	800a200 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a2e4:	2300      	movs	r3, #0
}
 800a2e6:	4618      	mov	r0, r3
 800a2e8:	3710      	adds	r7, #16
 800a2ea:	46bd      	mov	sp, r7
 800a2ec:	bd80      	pop	{r7, pc}

0800a2ee <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a2ee:	b480      	push	{r7}
 800a2f0:	b083      	sub	sp, #12
 800a2f2:	af00      	add	r7, sp, #0
 800a2f4:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	681a      	ldr	r2, [r3, #0]
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800a304:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	689a      	ldr	r2, [r3, #8]
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800a314:	609a      	str	r2, [r3, #8]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	2220      	movs	r2, #32
 800a31a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800a31e:	bf00      	nop
 800a320:	370c      	adds	r7, #12
 800a322:	46bd      	mov	sp, r7
 800a324:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a328:	4770      	bx	lr
	...

0800a32c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a32c:	b480      	push	{r7}
 800a32e:	b083      	sub	sp, #12
 800a330:	af00      	add	r7, sp, #0
 800a332:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	681a      	ldr	r2, [r3, #0]
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800a342:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	6899      	ldr	r1, [r3, #8]
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	681a      	ldr	r2, [r3, #0]
 800a34e:	4b0f      	ldr	r3, [pc, #60]	; (800a38c <UART_EndRxTransfer+0x60>)
 800a350:	400b      	ands	r3, r1
 800a352:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a358:	2b01      	cmp	r3, #1
 800a35a:	d107      	bne.n	800a36c <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	681a      	ldr	r2, [r3, #0]
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	f022 0210 	bic.w	r2, r2, #16
 800a36a:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	2220      	movs	r2, #32
 800a370:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	2200      	movs	r2, #0
 800a378:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	2200      	movs	r2, #0
 800a37e:	671a      	str	r2, [r3, #112]	; 0x70
}
 800a380:	bf00      	nop
 800a382:	370c      	adds	r7, #12
 800a384:	46bd      	mov	sp, r7
 800a386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a38a:	4770      	bx	lr
 800a38c:	effffffe 	.word	0xeffffffe

0800a390 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a390:	b580      	push	{r7, lr}
 800a392:	b084      	sub	sp, #16
 800a394:	af00      	add	r7, sp, #0
 800a396:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a39c:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	69db      	ldr	r3, [r3, #28]
 800a3a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a3a6:	d014      	beq.n	800a3d2 <UART_DMATransmitCplt+0x42>
  {
    huart->TxXferCount = 0U;
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	2200      	movs	r2, #0
 800a3ac:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	689a      	ldr	r2, [r3, #8]
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a3be:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	681a      	ldr	r2, [r3, #0]
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a3ce:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a3d0:	e002      	b.n	800a3d8 <UART_DMATransmitCplt+0x48>
    HAL_UART_TxCpltCallback(huart);
 800a3d2:	68f8      	ldr	r0, [r7, #12]
 800a3d4:	f7ff f894 	bl	8009500 <HAL_UART_TxCpltCallback>
}
 800a3d8:	bf00      	nop
 800a3da:	3710      	adds	r7, #16
 800a3dc:	46bd      	mov	sp, r7
 800a3de:	bd80      	pop	{r7, pc}

0800a3e0 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a3e0:	b580      	push	{r7, lr}
 800a3e2:	b084      	sub	sp, #16
 800a3e4:	af00      	add	r7, sp, #0
 800a3e6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3ec:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800a3ee:	68f8      	ldr	r0, [r7, #12]
 800a3f0:	f7ff f890 	bl	8009514 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a3f4:	bf00      	nop
 800a3f6:	3710      	adds	r7, #16
 800a3f8:	46bd      	mov	sp, r7
 800a3fa:	bd80      	pop	{r7, pc}

0800a3fc <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a3fc:	b580      	push	{r7, lr}
 800a3fe:	b086      	sub	sp, #24
 800a400:	af00      	add	r7, sp, #0
 800a402:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a408:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800a40a:	697b      	ldr	r3, [r7, #20]
 800a40c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a410:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800a412:	697b      	ldr	r3, [r7, #20]
 800a414:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a418:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800a41a:	697b      	ldr	r3, [r7, #20]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	689b      	ldr	r3, [r3, #8]
 800a420:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a424:	2b80      	cmp	r3, #128	; 0x80
 800a426:	d109      	bne.n	800a43c <UART_DMAError+0x40>
 800a428:	693b      	ldr	r3, [r7, #16]
 800a42a:	2b21      	cmp	r3, #33	; 0x21
 800a42c:	d106      	bne.n	800a43c <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800a42e:	697b      	ldr	r3, [r7, #20]
 800a430:	2200      	movs	r2, #0
 800a432:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800a436:	6978      	ldr	r0, [r7, #20]
 800a438:	f7ff ff59 	bl	800a2ee <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800a43c:	697b      	ldr	r3, [r7, #20]
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	689b      	ldr	r3, [r3, #8]
 800a442:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a446:	2b40      	cmp	r3, #64	; 0x40
 800a448:	d109      	bne.n	800a45e <UART_DMAError+0x62>
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	2b22      	cmp	r3, #34	; 0x22
 800a44e:	d106      	bne.n	800a45e <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800a450:	697b      	ldr	r3, [r7, #20]
 800a452:	2200      	movs	r2, #0
 800a454:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800a458:	6978      	ldr	r0, [r7, #20]
 800a45a:	f7ff ff67 	bl	800a32c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a45e:	697b      	ldr	r3, [r7, #20]
 800a460:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a464:	f043 0210 	orr.w	r2, r3, #16
 800a468:	697b      	ldr	r3, [r7, #20]
 800a46a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a46e:	6978      	ldr	r0, [r7, #20]
 800a470:	f7ff f85a 	bl	8009528 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a474:	bf00      	nop
 800a476:	3718      	adds	r7, #24
 800a478:	46bd      	mov	sp, r7
 800a47a:	bd80      	pop	{r7, pc}

0800a47c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a47c:	b580      	push	{r7, lr}
 800a47e:	b084      	sub	sp, #16
 800a480:	af00      	add	r7, sp, #0
 800a482:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a488:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	2200      	movs	r2, #0
 800a48e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	2200      	movs	r2, #0
 800a496:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a49a:	68f8      	ldr	r0, [r7, #12]
 800a49c:	f7ff f844 	bl	8009528 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a4a0:	bf00      	nop
 800a4a2:	3710      	adds	r7, #16
 800a4a4:	46bd      	mov	sp, r7
 800a4a6:	bd80      	pop	{r7, pc}

0800a4a8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a4a8:	b580      	push	{r7, lr}
 800a4aa:	b082      	sub	sp, #8
 800a4ac:	af00      	add	r7, sp, #0
 800a4ae:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	681a      	ldr	r2, [r3, #0]
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a4be:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	2220      	movs	r2, #32
 800a4c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	2200      	movs	r2, #0
 800a4cc:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a4ce:	6878      	ldr	r0, [r7, #4]
 800a4d0:	f7ff f816 	bl	8009500 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a4d4:	bf00      	nop
 800a4d6:	3708      	adds	r7, #8
 800a4d8:	46bd      	mov	sp, r7
 800a4da:	bd80      	pop	{r7, pc}

0800a4dc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a4dc:	b480      	push	{r7}
 800a4de:	b083      	sub	sp, #12
 800a4e0:	af00      	add	r7, sp, #0
 800a4e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a4e4:	bf00      	nop
 800a4e6:	370c      	adds	r7, #12
 800a4e8:	46bd      	mov	sp, r7
 800a4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ee:	4770      	bx	lr

0800a4f0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800a4f0:	b480      	push	{r7}
 800a4f2:	b083      	sub	sp, #12
 800a4f4:	af00      	add	r7, sp, #0
 800a4f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800a4f8:	bf00      	nop
 800a4fa:	370c      	adds	r7, #12
 800a4fc:	46bd      	mov	sp, r7
 800a4fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a502:	4770      	bx	lr

0800a504 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800a504:	b480      	push	{r7}
 800a506:	b083      	sub	sp, #12
 800a508:	af00      	add	r7, sp, #0
 800a50a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a50c:	bf00      	nop
 800a50e:	370c      	adds	r7, #12
 800a510:	46bd      	mov	sp, r7
 800a512:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a516:	4770      	bx	lr

0800a518 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a518:	b480      	push	{r7}
 800a51a:	b085      	sub	sp, #20
 800a51c:	af00      	add	r7, sp, #0
 800a51e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a526:	2b01      	cmp	r3, #1
 800a528:	d101      	bne.n	800a52e <HAL_UARTEx_DisableFifoMode+0x16>
 800a52a:	2302      	movs	r3, #2
 800a52c:	e027      	b.n	800a57e <HAL_UARTEx_DisableFifoMode+0x66>
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	2201      	movs	r2, #1
 800a532:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	2224      	movs	r2, #36	; 0x24
 800a53a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	681a      	ldr	r2, [r3, #0]
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	f022 0201 	bic.w	r2, r2, #1
 800a554:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a55c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	2200      	movs	r2, #0
 800a562:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	68fa      	ldr	r2, [r7, #12]
 800a56a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	2220      	movs	r2, #32
 800a570:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	2200      	movs	r2, #0
 800a578:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a57c:	2300      	movs	r3, #0
}
 800a57e:	4618      	mov	r0, r3
 800a580:	3714      	adds	r7, #20
 800a582:	46bd      	mov	sp, r7
 800a584:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a588:	4770      	bx	lr

0800a58a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a58a:	b580      	push	{r7, lr}
 800a58c:	b084      	sub	sp, #16
 800a58e:	af00      	add	r7, sp, #0
 800a590:	6078      	str	r0, [r7, #4]
 800a592:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a59a:	2b01      	cmp	r3, #1
 800a59c:	d101      	bne.n	800a5a2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a59e:	2302      	movs	r3, #2
 800a5a0:	e02d      	b.n	800a5fe <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	2201      	movs	r2, #1
 800a5a6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	2224      	movs	r2, #36	; 0x24
 800a5ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	681a      	ldr	r2, [r3, #0]
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	f022 0201 	bic.w	r2, r2, #1
 800a5c8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	689b      	ldr	r3, [r3, #8]
 800a5d0:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	683a      	ldr	r2, [r7, #0]
 800a5da:	430a      	orrs	r2, r1
 800a5dc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a5de:	6878      	ldr	r0, [r7, #4]
 800a5e0:	f000 f850 	bl	800a684 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	68fa      	ldr	r2, [r7, #12]
 800a5ea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	2220      	movs	r2, #32
 800a5f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	2200      	movs	r2, #0
 800a5f8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a5fc:	2300      	movs	r3, #0
}
 800a5fe:	4618      	mov	r0, r3
 800a600:	3710      	adds	r7, #16
 800a602:	46bd      	mov	sp, r7
 800a604:	bd80      	pop	{r7, pc}

0800a606 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a606:	b580      	push	{r7, lr}
 800a608:	b084      	sub	sp, #16
 800a60a:	af00      	add	r7, sp, #0
 800a60c:	6078      	str	r0, [r7, #4]
 800a60e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a616:	2b01      	cmp	r3, #1
 800a618:	d101      	bne.n	800a61e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a61a:	2302      	movs	r3, #2
 800a61c:	e02d      	b.n	800a67a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	2201      	movs	r2, #1
 800a622:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	2224      	movs	r2, #36	; 0x24
 800a62a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	681a      	ldr	r2, [r3, #0]
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	f022 0201 	bic.w	r2, r2, #1
 800a644:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	689b      	ldr	r3, [r3, #8]
 800a64c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	683a      	ldr	r2, [r7, #0]
 800a656:	430a      	orrs	r2, r1
 800a658:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a65a:	6878      	ldr	r0, [r7, #4]
 800a65c:	f000 f812 	bl	800a684 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	68fa      	ldr	r2, [r7, #12]
 800a666:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	2220      	movs	r2, #32
 800a66c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	2200      	movs	r2, #0
 800a674:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a678:	2300      	movs	r3, #0
}
 800a67a:	4618      	mov	r0, r3
 800a67c:	3710      	adds	r7, #16
 800a67e:	46bd      	mov	sp, r7
 800a680:	bd80      	pop	{r7, pc}
	...

0800a684 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a684:	b480      	push	{r7}
 800a686:	b085      	sub	sp, #20
 800a688:	af00      	add	r7, sp, #0
 800a68a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a690:	2b00      	cmp	r3, #0
 800a692:	d108      	bne.n	800a6a6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	2201      	movs	r2, #1
 800a698:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	2201      	movs	r2, #1
 800a6a0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a6a4:	e031      	b.n	800a70a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a6a6:	2310      	movs	r3, #16
 800a6a8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a6aa:	2310      	movs	r3, #16
 800a6ac:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	689b      	ldr	r3, [r3, #8]
 800a6b4:	0e5b      	lsrs	r3, r3, #25
 800a6b6:	b2db      	uxtb	r3, r3
 800a6b8:	f003 0307 	and.w	r3, r3, #7
 800a6bc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	689b      	ldr	r3, [r3, #8]
 800a6c4:	0f5b      	lsrs	r3, r3, #29
 800a6c6:	b2db      	uxtb	r3, r3
 800a6c8:	f003 0307 	and.w	r3, r3, #7
 800a6cc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a6ce:	7bbb      	ldrb	r3, [r7, #14]
 800a6d0:	7b3a      	ldrb	r2, [r7, #12]
 800a6d2:	4911      	ldr	r1, [pc, #68]	; (800a718 <UARTEx_SetNbDataToProcess+0x94>)
 800a6d4:	5c8a      	ldrb	r2, [r1, r2]
 800a6d6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a6da:	7b3a      	ldrb	r2, [r7, #12]
 800a6dc:	490f      	ldr	r1, [pc, #60]	; (800a71c <UARTEx_SetNbDataToProcess+0x98>)
 800a6de:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a6e0:	fb93 f3f2 	sdiv	r3, r3, r2
 800a6e4:	b29a      	uxth	r2, r3
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a6ec:	7bfb      	ldrb	r3, [r7, #15]
 800a6ee:	7b7a      	ldrb	r2, [r7, #13]
 800a6f0:	4909      	ldr	r1, [pc, #36]	; (800a718 <UARTEx_SetNbDataToProcess+0x94>)
 800a6f2:	5c8a      	ldrb	r2, [r1, r2]
 800a6f4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a6f8:	7b7a      	ldrb	r2, [r7, #13]
 800a6fa:	4908      	ldr	r1, [pc, #32]	; (800a71c <UARTEx_SetNbDataToProcess+0x98>)
 800a6fc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a6fe:	fb93 f3f2 	sdiv	r3, r3, r2
 800a702:	b29a      	uxth	r2, r3
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800a70a:	bf00      	nop
 800a70c:	3714      	adds	r7, #20
 800a70e:	46bd      	mov	sp, r7
 800a710:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a714:	4770      	bx	lr
 800a716:	bf00      	nop
 800a718:	0800a7f4 	.word	0x0800a7f4
 800a71c:	0800a7fc 	.word	0x0800a7fc

0800a720 <PDM_Filter>:
 800a720:	b410      	push	{r4}
 800a722:	4b0b      	ldr	r3, [pc, #44]	; (800a750 <PDM_Filter+0x30>)
 800a724:	6c54      	ldr	r4, [r2, #68]	; 0x44
 800a726:	429c      	cmp	r4, r3
 800a728:	d107      	bne.n	800a73a <PDM_Filter+0x1a>
 800a72a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800a72c:	05dc      	lsls	r4, r3, #23
 800a72e:	d508      	bpl.n	800a742 <PDM_Filter+0x22>
 800a730:	6c93      	ldr	r3, [r2, #72]	; 0x48
 800a732:	320c      	adds	r2, #12
 800a734:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a738:	4718      	bx	r3
 800a73a:	2004      	movs	r0, #4
 800a73c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a740:	4770      	bx	lr
 800a742:	f013 0f80 	tst.w	r3, #128	; 0x80
 800a746:	bf14      	ite	ne
 800a748:	2020      	movne	r0, #32
 800a74a:	2030      	moveq	r0, #48	; 0x30
 800a74c:	e7f6      	b.n	800a73c <PDM_Filter+0x1c>
 800a74e:	bf00      	nop
 800a750:	b5e8b5cd 	.word	0xb5e8b5cd

0800a754 <__libc_init_array>:
 800a754:	b570      	push	{r4, r5, r6, lr}
 800a756:	4d0d      	ldr	r5, [pc, #52]	; (800a78c <__libc_init_array+0x38>)
 800a758:	4c0d      	ldr	r4, [pc, #52]	; (800a790 <__libc_init_array+0x3c>)
 800a75a:	1b64      	subs	r4, r4, r5
 800a75c:	10a4      	asrs	r4, r4, #2
 800a75e:	2600      	movs	r6, #0
 800a760:	42a6      	cmp	r6, r4
 800a762:	d109      	bne.n	800a778 <__libc_init_array+0x24>
 800a764:	4d0b      	ldr	r5, [pc, #44]	; (800a794 <__libc_init_array+0x40>)
 800a766:	4c0c      	ldr	r4, [pc, #48]	; (800a798 <__libc_init_array+0x44>)
 800a768:	f000 f820 	bl	800a7ac <_init>
 800a76c:	1b64      	subs	r4, r4, r5
 800a76e:	10a4      	asrs	r4, r4, #2
 800a770:	2600      	movs	r6, #0
 800a772:	42a6      	cmp	r6, r4
 800a774:	d105      	bne.n	800a782 <__libc_init_array+0x2e>
 800a776:	bd70      	pop	{r4, r5, r6, pc}
 800a778:	f855 3b04 	ldr.w	r3, [r5], #4
 800a77c:	4798      	blx	r3
 800a77e:	3601      	adds	r6, #1
 800a780:	e7ee      	b.n	800a760 <__libc_init_array+0xc>
 800a782:	f855 3b04 	ldr.w	r3, [r5], #4
 800a786:	4798      	blx	r3
 800a788:	3601      	adds	r6, #1
 800a78a:	e7f2      	b.n	800a772 <__libc_init_array+0x1e>
 800a78c:	0800a80c 	.word	0x0800a80c
 800a790:	0800a80c 	.word	0x0800a80c
 800a794:	0800a80c 	.word	0x0800a80c
 800a798:	0800a810 	.word	0x0800a810

0800a79c <memset>:
 800a79c:	4402      	add	r2, r0
 800a79e:	4603      	mov	r3, r0
 800a7a0:	4293      	cmp	r3, r2
 800a7a2:	d100      	bne.n	800a7a6 <memset+0xa>
 800a7a4:	4770      	bx	lr
 800a7a6:	f803 1b01 	strb.w	r1, [r3], #1
 800a7aa:	e7f9      	b.n	800a7a0 <memset+0x4>

0800a7ac <_init>:
 800a7ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7ae:	bf00      	nop
 800a7b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a7b2:	bc08      	pop	{r3}
 800a7b4:	469e      	mov	lr, r3
 800a7b6:	4770      	bx	lr

0800a7b8 <_fini>:
 800a7b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7ba:	bf00      	nop
 800a7bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a7be:	bc08      	pop	{r3}
 800a7c0:	469e      	mov	lr, r3
 800a7c2:	4770      	bx	lr
