
microphone_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c718  08000298  08000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002e8  0800c9b0  0800c9b0  0001c9b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cc98  0800cc98  00020474  2**0
                  CONTENTS
  4 .ARM          00000008  0800cc98  0800cc98  0001cc98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cca0  0800cca0  00020474  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cca0  0800cca0  0001cca0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cca4  0800cca4  0001cca4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000474  24000000  0800cca8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000354  24000474  0800d11c  00020474  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  240007c8  0800d11c  000207c8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020474  2**0
                  CONTENTS, READONLY
 12 .debug_info   00024885  00000000  00000000  000204a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003b79  00000000  00000000  00044d27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013b0  00000000  00000000  000488a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012b0  00000000  00000000  00049c50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003b2d6  00000000  00000000  0004af00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a06f  00000000  00000000  000861d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001886a9  00000000  00000000  000a0245  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000d1  00000000  00000000  002288ee  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005488  00000000  00000000  002289c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000474 	.word	0x24000474
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800c998 	.word	0x0800c998

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000478 	.word	0x24000478
 80002d4:	0800c998 	.word	0x0800c998

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96e 	b.w	80005cc <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468c      	mov	ip, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	f040 8083 	bne.w	800041e <__udivmoddi4+0x116>
 8000318:	428a      	cmp	r2, r1
 800031a:	4617      	mov	r7, r2
 800031c:	d947      	bls.n	80003ae <__udivmoddi4+0xa6>
 800031e:	fab2 f282 	clz	r2, r2
 8000322:	b142      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000324:	f1c2 0020 	rsb	r0, r2, #32
 8000328:	fa24 f000 	lsr.w	r0, r4, r0
 800032c:	4091      	lsls	r1, r2
 800032e:	4097      	lsls	r7, r2
 8000330:	ea40 0c01 	orr.w	ip, r0, r1
 8000334:	4094      	lsls	r4, r2
 8000336:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fbbc f6f8 	udiv	r6, ip, r8
 8000340:	fa1f fe87 	uxth.w	lr, r7
 8000344:	fb08 c116 	mls	r1, r8, r6, ip
 8000348:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034c:	fb06 f10e 	mul.w	r1, r6, lr
 8000350:	4299      	cmp	r1, r3
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x60>
 8000354:	18fb      	adds	r3, r7, r3
 8000356:	f106 30ff 	add.w	r0, r6, #4294967295
 800035a:	f080 8119 	bcs.w	8000590 <__udivmoddi4+0x288>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 8116 	bls.w	8000590 <__udivmoddi4+0x288>
 8000364:	3e02      	subs	r6, #2
 8000366:	443b      	add	r3, r7
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000370:	fb08 3310 	mls	r3, r8, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 fe0e 	mul.w	lr, r0, lr
 800037c:	45a6      	cmp	lr, r4
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x8c>
 8000380:	193c      	adds	r4, r7, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	f080 8105 	bcs.w	8000594 <__udivmoddi4+0x28c>
 800038a:	45a6      	cmp	lr, r4
 800038c:	f240 8102 	bls.w	8000594 <__udivmoddi4+0x28c>
 8000390:	3802      	subs	r0, #2
 8000392:	443c      	add	r4, r7
 8000394:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	2600      	movs	r6, #0
 800039e:	b11d      	cbz	r5, 80003a8 <__udivmoddi4+0xa0>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c5 4300 	strd	r4, r3, [r5]
 80003a8:	4631      	mov	r1, r6
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	b902      	cbnz	r2, 80003b2 <__udivmoddi4+0xaa>
 80003b0:	deff      	udf	#255	; 0xff
 80003b2:	fab2 f282 	clz	r2, r2
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d150      	bne.n	800045c <__udivmoddi4+0x154>
 80003ba:	1bcb      	subs	r3, r1, r7
 80003bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c0:	fa1f f887 	uxth.w	r8, r7
 80003c4:	2601      	movs	r6, #1
 80003c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80003ca:	0c21      	lsrs	r1, r4, #16
 80003cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003d4:	fb08 f30c 	mul.w	r3, r8, ip
 80003d8:	428b      	cmp	r3, r1
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0xe4>
 80003dc:	1879      	adds	r1, r7, r1
 80003de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0xe2>
 80003e4:	428b      	cmp	r3, r1
 80003e6:	f200 80e9 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 80003ea:	4684      	mov	ip, r0
 80003ec:	1ac9      	subs	r1, r1, r3
 80003ee:	b2a3      	uxth	r3, r4
 80003f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80003f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80003f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003fc:	fb08 f800 	mul.w	r8, r8, r0
 8000400:	45a0      	cmp	r8, r4
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x10c>
 8000404:	193c      	adds	r4, r7, r4
 8000406:	f100 33ff 	add.w	r3, r0, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x10a>
 800040c:	45a0      	cmp	r8, r4
 800040e:	f200 80d9 	bhi.w	80005c4 <__udivmoddi4+0x2bc>
 8000412:	4618      	mov	r0, r3
 8000414:	eba4 0408 	sub.w	r4, r4, r8
 8000418:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800041c:	e7bf      	b.n	800039e <__udivmoddi4+0x96>
 800041e:	428b      	cmp	r3, r1
 8000420:	d909      	bls.n	8000436 <__udivmoddi4+0x12e>
 8000422:	2d00      	cmp	r5, #0
 8000424:	f000 80b1 	beq.w	800058a <__udivmoddi4+0x282>
 8000428:	2600      	movs	r6, #0
 800042a:	e9c5 0100 	strd	r0, r1, [r5]
 800042e:	4630      	mov	r0, r6
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	fab3 f683 	clz	r6, r3
 800043a:	2e00      	cmp	r6, #0
 800043c:	d14a      	bne.n	80004d4 <__udivmoddi4+0x1cc>
 800043e:	428b      	cmp	r3, r1
 8000440:	d302      	bcc.n	8000448 <__udivmoddi4+0x140>
 8000442:	4282      	cmp	r2, r0
 8000444:	f200 80b8 	bhi.w	80005b8 <__udivmoddi4+0x2b0>
 8000448:	1a84      	subs	r4, r0, r2
 800044a:	eb61 0103 	sbc.w	r1, r1, r3
 800044e:	2001      	movs	r0, #1
 8000450:	468c      	mov	ip, r1
 8000452:	2d00      	cmp	r5, #0
 8000454:	d0a8      	beq.n	80003a8 <__udivmoddi4+0xa0>
 8000456:	e9c5 4c00 	strd	r4, ip, [r5]
 800045a:	e7a5      	b.n	80003a8 <__udivmoddi4+0xa0>
 800045c:	f1c2 0320 	rsb	r3, r2, #32
 8000460:	fa20 f603 	lsr.w	r6, r0, r3
 8000464:	4097      	lsls	r7, r2
 8000466:	fa01 f002 	lsl.w	r0, r1, r2
 800046a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800046e:	40d9      	lsrs	r1, r3
 8000470:	4330      	orrs	r0, r6
 8000472:	0c03      	lsrs	r3, r0, #16
 8000474:	fbb1 f6fe 	udiv	r6, r1, lr
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000480:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000484:	fb06 f108 	mul.w	r1, r6, r8
 8000488:	4299      	cmp	r1, r3
 800048a:	fa04 f402 	lsl.w	r4, r4, r2
 800048e:	d909      	bls.n	80004a4 <__udivmoddi4+0x19c>
 8000490:	18fb      	adds	r3, r7, r3
 8000492:	f106 3cff 	add.w	ip, r6, #4294967295
 8000496:	f080 808d 	bcs.w	80005b4 <__udivmoddi4+0x2ac>
 800049a:	4299      	cmp	r1, r3
 800049c:	f240 808a 	bls.w	80005b4 <__udivmoddi4+0x2ac>
 80004a0:	3e02      	subs	r6, #2
 80004a2:	443b      	add	r3, r7
 80004a4:	1a5b      	subs	r3, r3, r1
 80004a6:	b281      	uxth	r1, r0
 80004a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80004ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b4:	fb00 f308 	mul.w	r3, r0, r8
 80004b8:	428b      	cmp	r3, r1
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x1c4>
 80004bc:	1879      	adds	r1, r7, r1
 80004be:	f100 3cff 	add.w	ip, r0, #4294967295
 80004c2:	d273      	bcs.n	80005ac <__udivmoddi4+0x2a4>
 80004c4:	428b      	cmp	r3, r1
 80004c6:	d971      	bls.n	80005ac <__udivmoddi4+0x2a4>
 80004c8:	3802      	subs	r0, #2
 80004ca:	4439      	add	r1, r7
 80004cc:	1acb      	subs	r3, r1, r3
 80004ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004d2:	e778      	b.n	80003c6 <__udivmoddi4+0xbe>
 80004d4:	f1c6 0c20 	rsb	ip, r6, #32
 80004d8:	fa03 f406 	lsl.w	r4, r3, r6
 80004dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e0:	431c      	orrs	r4, r3
 80004e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80004e6:	fa01 f306 	lsl.w	r3, r1, r6
 80004ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80004f2:	431f      	orrs	r7, r3
 80004f4:	0c3b      	lsrs	r3, r7, #16
 80004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fa:	fa1f f884 	uxth.w	r8, r4
 80004fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000502:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000506:	fb09 fa08 	mul.w	sl, r9, r8
 800050a:	458a      	cmp	sl, r1
 800050c:	fa02 f206 	lsl.w	r2, r2, r6
 8000510:	fa00 f306 	lsl.w	r3, r0, r6
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x220>
 8000516:	1861      	adds	r1, r4, r1
 8000518:	f109 30ff 	add.w	r0, r9, #4294967295
 800051c:	d248      	bcs.n	80005b0 <__udivmoddi4+0x2a8>
 800051e:	458a      	cmp	sl, r1
 8000520:	d946      	bls.n	80005b0 <__udivmoddi4+0x2a8>
 8000522:	f1a9 0902 	sub.w	r9, r9, #2
 8000526:	4421      	add	r1, r4
 8000528:	eba1 010a 	sub.w	r1, r1, sl
 800052c:	b2bf      	uxth	r7, r7
 800052e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000532:	fb0e 1110 	mls	r1, lr, r0, r1
 8000536:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800053a:	fb00 f808 	mul.w	r8, r0, r8
 800053e:	45b8      	cmp	r8, r7
 8000540:	d907      	bls.n	8000552 <__udivmoddi4+0x24a>
 8000542:	19e7      	adds	r7, r4, r7
 8000544:	f100 31ff 	add.w	r1, r0, #4294967295
 8000548:	d22e      	bcs.n	80005a8 <__udivmoddi4+0x2a0>
 800054a:	45b8      	cmp	r8, r7
 800054c:	d92c      	bls.n	80005a8 <__udivmoddi4+0x2a0>
 800054e:	3802      	subs	r0, #2
 8000550:	4427      	add	r7, r4
 8000552:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000556:	eba7 0708 	sub.w	r7, r7, r8
 800055a:	fba0 8902 	umull	r8, r9, r0, r2
 800055e:	454f      	cmp	r7, r9
 8000560:	46c6      	mov	lr, r8
 8000562:	4649      	mov	r1, r9
 8000564:	d31a      	bcc.n	800059c <__udivmoddi4+0x294>
 8000566:	d017      	beq.n	8000598 <__udivmoddi4+0x290>
 8000568:	b15d      	cbz	r5, 8000582 <__udivmoddi4+0x27a>
 800056a:	ebb3 020e 	subs.w	r2, r3, lr
 800056e:	eb67 0701 	sbc.w	r7, r7, r1
 8000572:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000576:	40f2      	lsrs	r2, r6
 8000578:	ea4c 0202 	orr.w	r2, ip, r2
 800057c:	40f7      	lsrs	r7, r6
 800057e:	e9c5 2700 	strd	r2, r7, [r5]
 8000582:	2600      	movs	r6, #0
 8000584:	4631      	mov	r1, r6
 8000586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800058a:	462e      	mov	r6, r5
 800058c:	4628      	mov	r0, r5
 800058e:	e70b      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000590:	4606      	mov	r6, r0
 8000592:	e6e9      	b.n	8000368 <__udivmoddi4+0x60>
 8000594:	4618      	mov	r0, r3
 8000596:	e6fd      	b.n	8000394 <__udivmoddi4+0x8c>
 8000598:	4543      	cmp	r3, r8
 800059a:	d2e5      	bcs.n	8000568 <__udivmoddi4+0x260>
 800059c:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a0:	eb69 0104 	sbc.w	r1, r9, r4
 80005a4:	3801      	subs	r0, #1
 80005a6:	e7df      	b.n	8000568 <__udivmoddi4+0x260>
 80005a8:	4608      	mov	r0, r1
 80005aa:	e7d2      	b.n	8000552 <__udivmoddi4+0x24a>
 80005ac:	4660      	mov	r0, ip
 80005ae:	e78d      	b.n	80004cc <__udivmoddi4+0x1c4>
 80005b0:	4681      	mov	r9, r0
 80005b2:	e7b9      	b.n	8000528 <__udivmoddi4+0x220>
 80005b4:	4666      	mov	r6, ip
 80005b6:	e775      	b.n	80004a4 <__udivmoddi4+0x19c>
 80005b8:	4630      	mov	r0, r6
 80005ba:	e74a      	b.n	8000452 <__udivmoddi4+0x14a>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	4439      	add	r1, r7
 80005c2:	e713      	b.n	80003ec <__udivmoddi4+0xe4>
 80005c4:	3802      	subs	r0, #2
 80005c6:	443c      	add	r4, r7
 80005c8:	e724      	b.n	8000414 <__udivmoddi4+0x10c>
 80005ca:	bf00      	nop

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005d0:	b480      	push	{r7}
 80005d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005d4:	4b3f      	ldr	r3, [pc, #252]	; (80006d4 <SystemInit+0x104>)
 80005d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005da:	4a3e      	ldr	r2, [pc, #248]	; (80006d4 <SystemInit+0x104>)
 80005dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80005e4:	4b3b      	ldr	r3, [pc, #236]	; (80006d4 <SystemInit+0x104>)
 80005e6:	691b      	ldr	r3, [r3, #16]
 80005e8:	4a3a      	ldr	r2, [pc, #232]	; (80006d4 <SystemInit+0x104>)
 80005ea:	f043 0310 	orr.w	r3, r3, #16
 80005ee:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005f0:	4b39      	ldr	r3, [pc, #228]	; (80006d8 <SystemInit+0x108>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	f003 030f 	and.w	r3, r3, #15
 80005f8:	2b06      	cmp	r3, #6
 80005fa:	d807      	bhi.n	800060c <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80005fc:	4b36      	ldr	r3, [pc, #216]	; (80006d8 <SystemInit+0x108>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	f023 030f 	bic.w	r3, r3, #15
 8000604:	4a34      	ldr	r2, [pc, #208]	; (80006d8 <SystemInit+0x108>)
 8000606:	f043 0307 	orr.w	r3, r3, #7
 800060a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800060c:	4b33      	ldr	r3, [pc, #204]	; (80006dc <SystemInit+0x10c>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	4a32      	ldr	r2, [pc, #200]	; (80006dc <SystemInit+0x10c>)
 8000612:	f043 0301 	orr.w	r3, r3, #1
 8000616:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000618:	4b30      	ldr	r3, [pc, #192]	; (80006dc <SystemInit+0x10c>)
 800061a:	2200      	movs	r2, #0
 800061c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800061e:	4b2f      	ldr	r3, [pc, #188]	; (80006dc <SystemInit+0x10c>)
 8000620:	681a      	ldr	r2, [r3, #0]
 8000622:	492e      	ldr	r1, [pc, #184]	; (80006dc <SystemInit+0x10c>)
 8000624:	4b2e      	ldr	r3, [pc, #184]	; (80006e0 <SystemInit+0x110>)
 8000626:	4013      	ands	r3, r2
 8000628:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800062a:	4b2b      	ldr	r3, [pc, #172]	; (80006d8 <SystemInit+0x108>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	f003 0308 	and.w	r3, r3, #8
 8000632:	2b00      	cmp	r3, #0
 8000634:	d007      	beq.n	8000646 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000636:	4b28      	ldr	r3, [pc, #160]	; (80006d8 <SystemInit+0x108>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	f023 030f 	bic.w	r3, r3, #15
 800063e:	4a26      	ldr	r2, [pc, #152]	; (80006d8 <SystemInit+0x108>)
 8000640:	f043 0307 	orr.w	r3, r3, #7
 8000644:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000646:	4b25      	ldr	r3, [pc, #148]	; (80006dc <SystemInit+0x10c>)
 8000648:	2200      	movs	r2, #0
 800064a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800064c:	4b23      	ldr	r3, [pc, #140]	; (80006dc <SystemInit+0x10c>)
 800064e:	2200      	movs	r2, #0
 8000650:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000652:	4b22      	ldr	r3, [pc, #136]	; (80006dc <SystemInit+0x10c>)
 8000654:	2200      	movs	r2, #0
 8000656:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000658:	4b20      	ldr	r3, [pc, #128]	; (80006dc <SystemInit+0x10c>)
 800065a:	4a22      	ldr	r2, [pc, #136]	; (80006e4 <SystemInit+0x114>)
 800065c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800065e:	4b1f      	ldr	r3, [pc, #124]	; (80006dc <SystemInit+0x10c>)
 8000660:	4a21      	ldr	r2, [pc, #132]	; (80006e8 <SystemInit+0x118>)
 8000662:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000664:	4b1d      	ldr	r3, [pc, #116]	; (80006dc <SystemInit+0x10c>)
 8000666:	4a21      	ldr	r2, [pc, #132]	; (80006ec <SystemInit+0x11c>)
 8000668:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800066a:	4b1c      	ldr	r3, [pc, #112]	; (80006dc <SystemInit+0x10c>)
 800066c:	2200      	movs	r2, #0
 800066e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000670:	4b1a      	ldr	r3, [pc, #104]	; (80006dc <SystemInit+0x10c>)
 8000672:	4a1e      	ldr	r2, [pc, #120]	; (80006ec <SystemInit+0x11c>)
 8000674:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000676:	4b19      	ldr	r3, [pc, #100]	; (80006dc <SystemInit+0x10c>)
 8000678:	2200      	movs	r2, #0
 800067a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800067c:	4b17      	ldr	r3, [pc, #92]	; (80006dc <SystemInit+0x10c>)
 800067e:	4a1b      	ldr	r2, [pc, #108]	; (80006ec <SystemInit+0x11c>)
 8000680:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000682:	4b16      	ldr	r3, [pc, #88]	; (80006dc <SystemInit+0x10c>)
 8000684:	2200      	movs	r2, #0
 8000686:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000688:	4b14      	ldr	r3, [pc, #80]	; (80006dc <SystemInit+0x10c>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	4a13      	ldr	r2, [pc, #76]	; (80006dc <SystemInit+0x10c>)
 800068e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000692:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000694:	4b11      	ldr	r3, [pc, #68]	; (80006dc <SystemInit+0x10c>)
 8000696:	2200      	movs	r2, #0
 8000698:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800069a:	4b15      	ldr	r3, [pc, #84]	; (80006f0 <SystemInit+0x120>)
 800069c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800069e:	4a14      	ldr	r2, [pc, #80]	; (80006f0 <SystemInit+0x120>)
 80006a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006a4:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80006a6:	4b13      	ldr	r3, [pc, #76]	; (80006f4 <SystemInit+0x124>)
 80006a8:	681a      	ldr	r2, [r3, #0]
 80006aa:	4b13      	ldr	r3, [pc, #76]	; (80006f8 <SystemInit+0x128>)
 80006ac:	4013      	ands	r3, r2
 80006ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80006b2:	d202      	bcs.n	80006ba <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006b4:	4b11      	ldr	r3, [pc, #68]	; (80006fc <SystemInit+0x12c>)
 80006b6:	2201      	movs	r2, #1
 80006b8:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006ba:	4b11      	ldr	r3, [pc, #68]	; (8000700 <SystemInit+0x130>)
 80006bc:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80006c0:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 80006c2:	4b04      	ldr	r3, [pc, #16]	; (80006d4 <SystemInit+0x104>)
 80006c4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80006c8:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 80006ca:	bf00      	nop
 80006cc:	46bd      	mov	sp, r7
 80006ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d2:	4770      	bx	lr
 80006d4:	e000ed00 	.word	0xe000ed00
 80006d8:	52002000 	.word	0x52002000
 80006dc:	58024400 	.word	0x58024400
 80006e0:	eaf6ed7f 	.word	0xeaf6ed7f
 80006e4:	02020200 	.word	0x02020200
 80006e8:	01ff0000 	.word	0x01ff0000
 80006ec:	01010280 	.word	0x01010280
 80006f0:	580000c0 	.word	0x580000c0
 80006f4:	5c001000 	.word	0x5c001000
 80006f8:	ffff0000 	.word	0xffff0000
 80006fc:	51008108 	.word	0x51008108
 8000700:	52004000 	.word	0x52004000

08000704 <pdm_to_pcm_init>:
 */


#include "pdm_to_pcm.h"

void pdm_to_pcm_init(PDM_Filter_Handler_t* PDM_FilterHandler, PDM_Filter_Config_t* PDM_FilterConfig, uint32_t channelNumber){
 8000704:	b580      	push	{r7, lr}
 8000706:	b086      	sub	sp, #24
 8000708:	af00      	add	r7, sp, #0
 800070a:	60f8      	str	r0, [r7, #12]
 800070c:	60b9      	str	r1, [r7, #8]
 800070e:	607a      	str	r2, [r7, #4]

	  for(uint32_t index = 0; index < channelNumber; index++)
 8000710:	2300      	movs	r3, #0
 8000712:	617b      	str	r3, [r7, #20]
 8000714:	e064      	b.n	80007e0 <pdm_to_pcm_init+0xdc>
	  {
	    /* Init PDM filters */
	    PDM_FilterHandler[index].bit_order  = PDM_FILTER_BIT_ORDER_MSB;
 8000716:	697b      	ldr	r3, [r7, #20]
 8000718:	224c      	movs	r2, #76	; 0x4c
 800071a:	fb02 f303 	mul.w	r3, r2, r3
 800071e:	68fa      	ldr	r2, [r7, #12]
 8000720:	4413      	add	r3, r2
 8000722:	2201      	movs	r2, #1
 8000724:	801a      	strh	r2, [r3, #0]
	    PDM_FilterHandler[index].endianness = PDM_FILTER_ENDIANNESS_LE;
 8000726:	697b      	ldr	r3, [r7, #20]
 8000728:	224c      	movs	r2, #76	; 0x4c
 800072a:	fb02 f303 	mul.w	r3, r2, r3
 800072e:	68fa      	ldr	r2, [r7, #12]
 8000730:	4413      	add	r3, r2
 8000732:	2200      	movs	r2, #0
 8000734:	805a      	strh	r2, [r3, #2]
	    PDM_FilterHandler[index].high_pass_tap = 2122358088;
 8000736:	697b      	ldr	r3, [r7, #20]
 8000738:	224c      	movs	r2, #76	; 0x4c
 800073a:	fb02 f303 	mul.w	r3, r2, r3
 800073e:	68fa      	ldr	r2, [r7, #12]
 8000740:	4413      	add	r3, r2
 8000742:	4a2c      	ldr	r2, [pc, #176]	; (80007f4 <pdm_to_pcm_init+0xf0>)
 8000744:	605a      	str	r2, [r3, #4]
	    PDM_FilterHandler[index].out_ptr_channels = channelNumber;
 8000746:	697b      	ldr	r3, [r7, #20]
 8000748:	224c      	movs	r2, #76	; 0x4c
 800074a:	fb02 f303 	mul.w	r3, r2, r3
 800074e:	68fa      	ldr	r2, [r7, #12]
 8000750:	4413      	add	r3, r2
 8000752:	687a      	ldr	r2, [r7, #4]
 8000754:	b292      	uxth	r2, r2
 8000756:	815a      	strh	r2, [r3, #10]
	    PDM_FilterHandler[index].in_ptr_channels  = channelNumber;
 8000758:	697b      	ldr	r3, [r7, #20]
 800075a:	224c      	movs	r2, #76	; 0x4c
 800075c:	fb02 f303 	mul.w	r3, r2, r3
 8000760:	68fa      	ldr	r2, [r7, #12]
 8000762:	4413      	add	r3, r2
 8000764:	687a      	ldr	r2, [r7, #4]
 8000766:	b292      	uxth	r2, r2
 8000768:	811a      	strh	r2, [r3, #8]
	    PDM_Filter_Init((PDM_Filter_Handler_t *)(&PDM_FilterHandler[index]));
 800076a:	697b      	ldr	r3, [r7, #20]
 800076c:	224c      	movs	r2, #76	; 0x4c
 800076e:	fb02 f303 	mul.w	r3, r2, r3
 8000772:	68fa      	ldr	r2, [r7, #12]
 8000774:	4413      	add	r3, r2
 8000776:	4618      	mov	r0, r3
 8000778:	f00b fd32 	bl	800c1e0 <PDM_Filter_Init>

	    /* Configure PDM filters */
	    PDM_FilterConfig[index].output_samples_number = 16;
 800077c:	697a      	ldr	r2, [r7, #20]
 800077e:	4613      	mov	r3, r2
 8000780:	005b      	lsls	r3, r3, #1
 8000782:	4413      	add	r3, r2
 8000784:	005b      	lsls	r3, r3, #1
 8000786:	461a      	mov	r2, r3
 8000788:	68bb      	ldr	r3, [r7, #8]
 800078a:	4413      	add	r3, r2
 800078c:	2210      	movs	r2, #16
 800078e:	805a      	strh	r2, [r3, #2]
	    PDM_FilterConfig[index].mic_gain = 24;
 8000790:	697a      	ldr	r2, [r7, #20]
 8000792:	4613      	mov	r3, r2
 8000794:	005b      	lsls	r3, r3, #1
 8000796:	4413      	add	r3, r2
 8000798:	005b      	lsls	r3, r3, #1
 800079a:	461a      	mov	r2, r3
 800079c:	68bb      	ldr	r3, [r7, #8]
 800079e:	4413      	add	r3, r2
 80007a0:	2218      	movs	r2, #24
 80007a2:	809a      	strh	r2, [r3, #4]
	    PDM_FilterConfig[index].decimation_factor = PDM_FILTER_DEC_FACTOR_64;
 80007a4:	697a      	ldr	r2, [r7, #20]
 80007a6:	4613      	mov	r3, r2
 80007a8:	005b      	lsls	r3, r3, #1
 80007aa:	4413      	add	r3, r2
 80007ac:	005b      	lsls	r3, r3, #1
 80007ae:	461a      	mov	r2, r3
 80007b0:	68bb      	ldr	r3, [r7, #8]
 80007b2:	4413      	add	r3, r2
 80007b4:	2202      	movs	r2, #2
 80007b6:	801a      	strh	r2, [r3, #0]
	    PDM_Filter_setConfig((PDM_Filter_Handler_t*)&PDM_FilterHandler[index], (PDM_Filter_Config_t*)&PDM_FilterConfig[index]);
 80007b8:	697b      	ldr	r3, [r7, #20]
 80007ba:	224c      	movs	r2, #76	; 0x4c
 80007bc:	fb02 f303 	mul.w	r3, r2, r3
 80007c0:	68fa      	ldr	r2, [r7, #12]
 80007c2:	18d0      	adds	r0, r2, r3
 80007c4:	697a      	ldr	r2, [r7, #20]
 80007c6:	4613      	mov	r3, r2
 80007c8:	005b      	lsls	r3, r3, #1
 80007ca:	4413      	add	r3, r2
 80007cc:	005b      	lsls	r3, r3, #1
 80007ce:	461a      	mov	r2, r3
 80007d0:	68bb      	ldr	r3, [r7, #8]
 80007d2:	4413      	add	r3, r2
 80007d4:	4619      	mov	r1, r3
 80007d6:	f00b fdd3 	bl	800c380 <PDM_Filter_setConfig>
	  for(uint32_t index = 0; index < channelNumber; index++)
 80007da:	697b      	ldr	r3, [r7, #20]
 80007dc:	3301      	adds	r3, #1
 80007de:	617b      	str	r3, [r7, #20]
 80007e0:	697a      	ldr	r2, [r7, #20]
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	429a      	cmp	r2, r3
 80007e6:	d396      	bcc.n	8000716 <pdm_to_pcm_init+0x12>
	  }
}
 80007e8:	bf00      	nop
 80007ea:	bf00      	nop
 80007ec:	3718      	adds	r7, #24
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	7e809d48 	.word	0x7e809d48

080007f8 <pdm_to_pcm>:

void pdm_to_pcm(PDM_Filter_Handler_t* PDM_FilterHandler, uint8_t *pdm, uint16_t *pcm,  uint32_t channelNumber){
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b08e      	sub	sp, #56	; 0x38
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	60f8      	str	r0, [r7, #12]
 8000800:	60b9      	str	r1, [r7, #8]
 8000802:	607a      	str	r2, [r7, #4]
 8000804:	603b      	str	r3, [r7, #0]
 8000806:	68bb      	ldr	r3, [r7, #8]
 8000808:	633b      	str	r3, [r7, #48]	; 0x30
 800080a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800080e:	62fb      	str	r3, [r7, #44]	; 0x2c
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_InvalidateDCache_by_Addr (void *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 8000810:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000812:	2b00      	cmp	r3, #0
 8000814:	dd1d      	ble.n	8000852 <pdm_to_pcm+0x5a>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8000816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000818:	f003 021f 	and.w	r2, r3, #31
 800081c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800081e:	4413      	add	r3, r2
 8000820:	62bb      	str	r3, [r7, #40]	; 0x28
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8000822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000824:	627b      	str	r3, [r7, #36]	; 0x24
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000826:	f3bf 8f4f 	dsb	sy
}
 800082a:	bf00      	nop
    
      __DSB();

      do {
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 800082c:	4a2b      	ldr	r2, [pc, #172]	; (80008dc <pdm_to_pcm+0xe4>)
 800082e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000830:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8000834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000836:	3320      	adds	r3, #32
 8000838:	627b      	str	r3, [r7, #36]	; 0x24
        op_size -= __SCB_DCACHE_LINE_SIZE;
 800083a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800083c:	3b20      	subs	r3, #32
 800083e:	62bb      	str	r3, [r7, #40]	; 0x28
      } while ( op_size > 0 );
 8000840:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000842:	2b00      	cmp	r3, #0
 8000844:	dcf2      	bgt.n	800082c <pdm_to_pcm+0x34>
  __ASM volatile ("dsb 0xF":::"memory");
 8000846:	f3bf 8f4f 	dsb	sy
}
 800084a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800084c:	f3bf 8f6f 	isb	sy
}
 8000850:	bf00      	nop

      __DSB();
      __ISB();
    }
  #endif
}
 8000852:	bf00      	nop

	SCB_InvalidateDCache_by_Addr((uint32_t*)&pdm[0], BUFFER_SIZE);

	for(uint32_t i = 0; i < channelNumber; i++){
 8000854:	2300      	movs	r3, #0
 8000856:	637b      	str	r3, [r7, #52]	; 0x34
 8000858:	e012      	b.n	8000880 <pdm_to_pcm+0x88>
		PDM_Filter(&pdm[i], &pcm[i], &PDM_FilterHandler[i]);
 800085a:	68ba      	ldr	r2, [r7, #8]
 800085c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800085e:	18d0      	adds	r0, r2, r3
 8000860:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000862:	005b      	lsls	r3, r3, #1
 8000864:	687a      	ldr	r2, [r7, #4]
 8000866:	18d1      	adds	r1, r2, r3
 8000868:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800086a:	224c      	movs	r2, #76	; 0x4c
 800086c:	fb02 f303 	mul.w	r3, r2, r3
 8000870:	68fa      	ldr	r2, [r7, #12]
 8000872:	4413      	add	r3, r2
 8000874:	461a      	mov	r2, r3
 8000876:	f00b fe7d 	bl	800c574 <PDM_Filter>
	for(uint32_t i = 0; i < channelNumber; i++){
 800087a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800087c:	3301      	adds	r3, #1
 800087e:	637b      	str	r3, [r7, #52]	; 0x34
 8000880:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000882:	683b      	ldr	r3, [r7, #0]
 8000884:	429a      	cmp	r2, r3
 8000886:	d3e8      	bcc.n	800085a <pdm_to_pcm+0x62>
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	623b      	str	r3, [r7, #32]
 800088c:	2340      	movs	r3, #64	; 0x40
 800088e:	61fb      	str	r3, [r7, #28]
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_CleanDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 8000890:	69fb      	ldr	r3, [r7, #28]
 8000892:	2b00      	cmp	r3, #0
 8000894:	dd1d      	ble.n	80008d2 <pdm_to_pcm+0xda>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8000896:	6a3b      	ldr	r3, [r7, #32]
 8000898:	f003 021f 	and.w	r2, r3, #31
 800089c:	69fb      	ldr	r3, [r7, #28]
 800089e:	4413      	add	r3, r2
 80008a0:	61bb      	str	r3, [r7, #24]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 80008a2:	6a3b      	ldr	r3, [r7, #32]
 80008a4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80008a6:	f3bf 8f4f 	dsb	sy
}
 80008aa:	bf00      	nop
    
      __DSB();

      do {
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 80008ac:	4a0b      	ldr	r2, [pc, #44]	; (80008dc <pdm_to_pcm+0xe4>)
 80008ae:	697b      	ldr	r3, [r7, #20]
 80008b0:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 80008b4:	697b      	ldr	r3, [r7, #20]
 80008b6:	3320      	adds	r3, #32
 80008b8:	617b      	str	r3, [r7, #20]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 80008ba:	69bb      	ldr	r3, [r7, #24]
 80008bc:	3b20      	subs	r3, #32
 80008be:	61bb      	str	r3, [r7, #24]
      } while ( op_size > 0 );
 80008c0:	69bb      	ldr	r3, [r7, #24]
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	dcf2      	bgt.n	80008ac <pdm_to_pcm+0xb4>
  __ASM volatile ("dsb 0xF":::"memory");
 80008c6:	f3bf 8f4f 	dsb	sy
}
 80008ca:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80008cc:	f3bf 8f6f 	isb	sy
}
 80008d0:	bf00      	nop

      __DSB();
      __ISB();
    }
  #endif
}
 80008d2:	bf00      	nop
	}

	SCB_CleanDCache_by_Addr((uint32_t*)&pcm[0], PCM_CHUNK_SIZE*2);
}
 80008d4:	bf00      	nop
 80008d6:	3738      	adds	r7, #56	; 0x38
 80008d8:	46bd      	mov	sp, r7
 80008da:	bd80      	pop	{r7, pc}
 80008dc:	e000ed00 	.word	0xe000ed00

080008e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b086      	sub	sp, #24
 80008e4:	af00      	add	r7, sp, #0
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80008e6:	4b75      	ldr	r3, [pc, #468]	; (8000abc <main+0x1dc>)
 80008e8:	695b      	ldr	r3, [r3, #20]
 80008ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d11b      	bne.n	800092a <main+0x4a>
  __ASM volatile ("dsb 0xF":::"memory");
 80008f2:	f3bf 8f4f 	dsb	sy
}
 80008f6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80008f8:	f3bf 8f6f 	isb	sy
}
 80008fc:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80008fe:	4b6f      	ldr	r3, [pc, #444]	; (8000abc <main+0x1dc>)
 8000900:	2200      	movs	r2, #0
 8000902:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000906:	f3bf 8f4f 	dsb	sy
}
 800090a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800090c:	f3bf 8f6f 	isb	sy
}
 8000910:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000912:	4b6a      	ldr	r3, [pc, #424]	; (8000abc <main+0x1dc>)
 8000914:	695b      	ldr	r3, [r3, #20]
 8000916:	4a69      	ldr	r2, [pc, #420]	; (8000abc <main+0x1dc>)
 8000918:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800091c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800091e:	f3bf 8f4f 	dsb	sy
}
 8000922:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000924:	f3bf 8f6f 	isb	sy
}
 8000928:	e000      	b.n	800092c <main+0x4c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800092a:	bf00      	nop
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800092c:	4b63      	ldr	r3, [pc, #396]	; (8000abc <main+0x1dc>)
 800092e:	695b      	ldr	r3, [r3, #20]
 8000930:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000934:	2b00      	cmp	r3, #0
 8000936:	d138      	bne.n	80009aa <main+0xca>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000938:	4b60      	ldr	r3, [pc, #384]	; (8000abc <main+0x1dc>)
 800093a:	2200      	movs	r2, #0
 800093c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000940:	f3bf 8f4f 	dsb	sy
}
 8000944:	bf00      	nop
    ccsidr = SCB->CCSIDR;
 8000946:	4b5d      	ldr	r3, [pc, #372]	; (8000abc <main+0x1dc>)
 8000948:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800094c:	613b      	str	r3, [r7, #16]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800094e:	693b      	ldr	r3, [r7, #16]
 8000950:	0b5b      	lsrs	r3, r3, #13
 8000952:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000956:	60fb      	str	r3, [r7, #12]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000958:	693b      	ldr	r3, [r7, #16]
 800095a:	08db      	lsrs	r3, r3, #3
 800095c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000960:	60bb      	str	r3, [r7, #8]
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000962:	68fb      	ldr	r3, [r7, #12]
 8000964:	015a      	lsls	r2, r3, #5
 8000966:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800096a:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800096c:	68ba      	ldr	r2, [r7, #8]
 800096e:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000970:	4952      	ldr	r1, [pc, #328]	; (8000abc <main+0x1dc>)
 8000972:	4313      	orrs	r3, r2
 8000974:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
      } while (ways-- != 0U);
 8000978:	68bb      	ldr	r3, [r7, #8]
 800097a:	1e5a      	subs	r2, r3, #1
 800097c:	60ba      	str	r2, [r7, #8]
 800097e:	2b00      	cmp	r3, #0
 8000980:	d1ef      	bne.n	8000962 <main+0x82>
    } while(sets-- != 0U);
 8000982:	68fb      	ldr	r3, [r7, #12]
 8000984:	1e5a      	subs	r2, r3, #1
 8000986:	60fa      	str	r2, [r7, #12]
 8000988:	2b00      	cmp	r3, #0
 800098a:	d1e5      	bne.n	8000958 <main+0x78>
  __ASM volatile ("dsb 0xF":::"memory");
 800098c:	f3bf 8f4f 	dsb	sy
}
 8000990:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000992:	4b4a      	ldr	r3, [pc, #296]	; (8000abc <main+0x1dc>)
 8000994:	695b      	ldr	r3, [r3, #20]
 8000996:	4a49      	ldr	r2, [pc, #292]	; (8000abc <main+0x1dc>)
 8000998:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800099c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800099e:	f3bf 8f4f 	dsb	sy
}
 80009a2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80009a4:	f3bf 8f6f 	isb	sy
}
 80009a8:	e000      	b.n	80009ac <main+0xcc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80009aa:	bf00      	nop

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009ac:	f000 fd38 	bl	8001420 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009b0:	f000 f898 	bl	8000ae4 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 80009b4:	4b42      	ldr	r3, [pc, #264]	; (8000ac0 <main+0x1e0>)
 80009b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009ba:	4a41      	ldr	r2, [pc, #260]	; (8000ac0 <main+0x1e0>)
 80009bc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80009c0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009c4:	4b3e      	ldr	r3, [pc, #248]	; (8000ac0 <main+0x1e0>)
 80009c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80009ce:	607b      	str	r3, [r7, #4]
 80009d0:	687b      	ldr	r3, [r7, #4]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 80009d2:	2000      	movs	r0, #0
 80009d4:	f003 ffb2 	bl	800493c <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 80009d8:	2100      	movs	r1, #0
 80009da:	2000      	movs	r0, #0
 80009dc:	f003 ffc8 	bl	8004970 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 80009e0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80009e4:	617b      	str	r3, [r7, #20]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 80009e6:	bf00      	nop
 80009e8:	4b35      	ldr	r3, [pc, #212]	; (8000ac0 <main+0x1e0>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d104      	bne.n	80009fe <main+0x11e>
 80009f4:	697b      	ldr	r3, [r7, #20]
 80009f6:	1e5a      	subs	r2, r3, #1
 80009f8:	617a      	str	r2, [r7, #20]
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	dcf4      	bgt.n	80009e8 <main+0x108>
if ( timeout < 0 )
 80009fe:	697b      	ldr	r3, [r7, #20]
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	da01      	bge.n	8000a08 <main+0x128>
{
Error_Handler();
 8000a04:	f000 fabe 	bl	8000f84 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a08:	f000 fa4e 	bl	8000ea8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000a0c:	f000 fa24 	bl	8000e58 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8000a10:	f000 f9d2 	bl	8000db8 <MX_USART3_UART_Init>
  MX_CRC_Init();
 8000a14:	f000 f8ea 	bl	8000bec <MX_CRC_Init>
  MX_SAI1_Init();
 8000a18:	f000 f912 	bl	8000c40 <MX_SAI1_Init>
  MX_TIM1_Init();
 8000a1c:	f000 f972 	bl	8000d04 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  pdm_to_pcm_init((PDM_Filter_Handler_t*)&PDM_FilterHandler[0], (PDM_Filter_Config_t*)&PDM_FilterConfig[0], CHANNEL_NUMBER);
 8000a20:	2202      	movs	r2, #2
 8000a22:	4928      	ldr	r1, [pc, #160]	; (8000ac4 <main+0x1e4>)
 8000a24:	4828      	ldr	r0, [pc, #160]	; (8000ac8 <main+0x1e8>)
 8000a26:	f7ff fe6d 	bl	8000704 <pdm_to_pcm_init>

  timFlag = NONE;
 8000a2a:	4b28      	ldr	r3, [pc, #160]	; (8000acc <main+0x1ec>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	701a      	strb	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


  HAL_SAI_Receive_DMA(&hsai_BlockA1, (uint8_t*)&buffer->pdmBuffer[0], BUFFER_SIZE);
 8000a30:	4b27      	ldr	r3, [pc, #156]	; (8000ad0 <main+0x1f0>)
 8000a32:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a36:	4619      	mov	r1, r3
 8000a38:	4826      	ldr	r0, [pc, #152]	; (8000ad4 <main+0x1f4>)
 8000a3a:	f007 fbc9 	bl	80081d0 <HAL_SAI_Receive_DMA>

  HAL_TIM_Base_Start_IT(&htim1);
 8000a3e:	4826      	ldr	r0, [pc, #152]	; (8000ad8 <main+0x1f8>)
 8000a40:	f007 fd9a 	bl	8008578 <HAL_TIM_Base_Start_IT>

  while (timFlag != DONE){
 8000a44:	e034      	b.n	8000ab0 <main+0x1d0>
	  //Wait for Half of the buffer to be filled
	  while(dmaFlag != HALF){}
 8000a46:	bf00      	nop
 8000a48:	4b24      	ldr	r3, [pc, #144]	; (8000adc <main+0x1fc>)
 8000a4a:	781b      	ldrb	r3, [r3, #0]
 8000a4c:	b2db      	uxtb	r3, r3
 8000a4e:	2b04      	cmp	r3, #4
 8000a50:	d1fa      	bne.n	8000a48 <main+0x168>
	  //Reset Flag
	  dmaFlag = NONE;
 8000a52:	4b22      	ldr	r3, [pc, #136]	; (8000adc <main+0x1fc>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	701a      	strb	r2, [r3, #0]
	  //Filter PDM to PCM
	  pdm_to_pcm(&PDM_FilterHandler[0],	(uint8_t*)&buffer->pdmBuffer[0], (uint16_t*)&buffer->pcmBuffer[0], CHANNEL_NUMBER);
 8000a58:	4b1d      	ldr	r3, [pc, #116]	; (8000ad0 <main+0x1f0>)
 8000a5a:	4619      	mov	r1, r3
 8000a5c:	4b1c      	ldr	r3, [pc, #112]	; (8000ad0 <main+0x1f0>)
 8000a5e:	f503 7200 	add.w	r2, r3, #512	; 0x200
 8000a62:	2302      	movs	r3, #2
 8000a64:	4818      	ldr	r0, [pc, #96]	; (8000ac8 <main+0x1e8>)
 8000a66:	f7ff fec7 	bl	80007f8 <pdm_to_pcm>
	  //Transmit PCM
	  HAL_UART_Transmit_DMA(&huart3, (uint8_t*)&buffer->pcmBuffer[0], PCM_CHUNK_SIZE*2);
 8000a6a:	4b19      	ldr	r3, [pc, #100]	; (8000ad0 <main+0x1f0>)
 8000a6c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000a70:	2240      	movs	r2, #64	; 0x40
 8000a72:	4619      	mov	r1, r3
 8000a74:	481a      	ldr	r0, [pc, #104]	; (8000ae0 <main+0x200>)
 8000a76:	f008 fa87 	bl	8008f88 <HAL_UART_Transmit_DMA>

	  //Wait for Half of the buffer to be filled
	  while(dmaFlag != FULL){}
 8000a7a:	bf00      	nop
 8000a7c:	4b17      	ldr	r3, [pc, #92]	; (8000adc <main+0x1fc>)
 8000a7e:	781b      	ldrb	r3, [r3, #0]
 8000a80:	b2db      	uxtb	r3, r3
 8000a82:	2b05      	cmp	r3, #5
 8000a84:	d1fa      	bne.n	8000a7c <main+0x19c>
	  //Reset Flag
	  dmaFlag = NONE;
 8000a86:	4b15      	ldr	r3, [pc, #84]	; (8000adc <main+0x1fc>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	701a      	strb	r2, [r3, #0]
	  //Filter PDM to PCM
	  pdm_to_pcm(&PDM_FilterHandler[0],	(uint8_t*)&buffer->pdmBuffer[BUFFER_SIZE/2], (uint16_t*)&buffer->pcmBuffer[PCM_CHUNK_SIZE], CHANNEL_NUMBER);
 8000a8c:	4b10      	ldr	r3, [pc, #64]	; (8000ad0 <main+0x1f0>)
 8000a8e:	f503 7180 	add.w	r1, r3, #256	; 0x100
 8000a92:	4b0f      	ldr	r3, [pc, #60]	; (8000ad0 <main+0x1f0>)
 8000a94:	f503 7210 	add.w	r2, r3, #576	; 0x240
 8000a98:	2302      	movs	r3, #2
 8000a9a:	480b      	ldr	r0, [pc, #44]	; (8000ac8 <main+0x1e8>)
 8000a9c:	f7ff feac 	bl	80007f8 <pdm_to_pcm>
	  //Transmit PCM
	  HAL_UART_Transmit_DMA(&huart3, (uint8_t*)&buffer->pcmBuffer[PCM_CHUNK_SIZE], PCM_CHUNK_SIZE*2);
 8000aa0:	4b0b      	ldr	r3, [pc, #44]	; (8000ad0 <main+0x1f0>)
 8000aa2:	f503 7310 	add.w	r3, r3, #576	; 0x240
 8000aa6:	2240      	movs	r2, #64	; 0x40
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	480d      	ldr	r0, [pc, #52]	; (8000ae0 <main+0x200>)
 8000aac:	f008 fa6c 	bl	8008f88 <HAL_UART_Transmit_DMA>
  while (timFlag != DONE){
 8000ab0:	4b06      	ldr	r3, [pc, #24]	; (8000acc <main+0x1ec>)
 8000ab2:	781b      	ldrb	r3, [r3, #0]
 8000ab4:	b2db      	uxtb	r3, r3
 8000ab6:	2b03      	cmp	r3, #3
 8000ab8:	d1c5      	bne.n	8000a46 <main+0x166>

    /* USER CODE BEGIN 3 */
  }


  while(1){}
 8000aba:	e7fe      	b.n	8000aba <main+0x1da>
 8000abc:	e000ed00 	.word	0xe000ed00
 8000ac0:	58024400 	.word	0x58024400
 8000ac4:	24000498 	.word	0x24000498
 8000ac8:	240004a4 	.word	0x240004a4
 8000acc:	24000492 	.word	0x24000492
 8000ad0:	30040000 	.word	0x30040000
 8000ad4:	2400072c 	.word	0x2400072c
 8000ad8:	240006e0 	.word	0x240006e0
 8000adc:	24000491 	.word	0x24000491
 8000ae0:	2400053c 	.word	0x2400053c

08000ae4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b09c      	sub	sp, #112	; 0x70
 8000ae8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000aea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aee:	224c      	movs	r2, #76	; 0x4c
 8000af0:	2100      	movs	r1, #0
 8000af2:	4618      	mov	r0, r3
 8000af4:	f00b fd82 	bl	800c5fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000af8:	1d3b      	adds	r3, r7, #4
 8000afa:	2220      	movs	r2, #32
 8000afc:	2100      	movs	r1, #0
 8000afe:	4618      	mov	r0, r3
 8000b00:	f00b fd7c 	bl	800c5fc <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000b04:	2004      	movs	r0, #4
 8000b06:	f003 ff47 	bl	8004998 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	603b      	str	r3, [r7, #0]
 8000b0e:	4b34      	ldr	r3, [pc, #208]	; (8000be0 <SystemClock_Config+0xfc>)
 8000b10:	699b      	ldr	r3, [r3, #24]
 8000b12:	4a33      	ldr	r2, [pc, #204]	; (8000be0 <SystemClock_Config+0xfc>)
 8000b14:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000b18:	6193      	str	r3, [r2, #24]
 8000b1a:	4b31      	ldr	r3, [pc, #196]	; (8000be0 <SystemClock_Config+0xfc>)
 8000b1c:	699b      	ldr	r3, [r3, #24]
 8000b1e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b22:	603b      	str	r3, [r7, #0]
 8000b24:	4b2f      	ldr	r3, [pc, #188]	; (8000be4 <SystemClock_Config+0x100>)
 8000b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b28:	4a2e      	ldr	r2, [pc, #184]	; (8000be4 <SystemClock_Config+0x100>)
 8000b2a:	f043 0301 	orr.w	r3, r3, #1
 8000b2e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000b30:	4b2c      	ldr	r3, [pc, #176]	; (8000be4 <SystemClock_Config+0x100>)
 8000b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b34:	f003 0301 	and.w	r3, r3, #1
 8000b38:	603b      	str	r3, [r7, #0]
 8000b3a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000b3c:	bf00      	nop
 8000b3e:	4b28      	ldr	r3, [pc, #160]	; (8000be0 <SystemClock_Config+0xfc>)
 8000b40:	699b      	ldr	r3, [r3, #24]
 8000b42:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000b46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000b4a:	d1f8      	bne.n	8000b3e <SystemClock_Config+0x5a>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000b4c:	4b26      	ldr	r3, [pc, #152]	; (8000be8 <SystemClock_Config+0x104>)
 8000b4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b50:	f023 0303 	bic.w	r3, r3, #3
 8000b54:	4a24      	ldr	r2, [pc, #144]	; (8000be8 <SystemClock_Config+0x104>)
 8000b56:	f043 0302 	orr.w	r3, r3, #2
 8000b5a:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b5c:	2301      	movs	r3, #1
 8000b5e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000b60:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000b64:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b66:	2302      	movs	r3, #2
 8000b68:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b6a:	2302      	movs	r3, #2
 8000b6c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000b6e:	2301      	movs	r3, #1
 8000b70:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 120;
 8000b72:	2378      	movs	r3, #120	; 0x78
 8000b74:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000b76:	2302      	movs	r3, #2
 8000b78:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000b7a:	2304      	movs	r3, #4
 8000b7c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000b7e:	2302      	movs	r3, #2
 8000b80:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000b82:	230c      	movs	r3, #12
 8000b84:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000b86:	2300      	movs	r3, #0
 8000b88:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b92:	4618      	mov	r0, r3
 8000b94:	f003 ff5a 	bl	8004a4c <HAL_RCC_OscConfig>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d001      	beq.n	8000ba2 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8000b9e:	f000 f9f1 	bl	8000f84 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ba2:	233f      	movs	r3, #63	; 0x3f
 8000ba4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ba6:	2303      	movs	r3, #3
 8000ba8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000baa:	2300      	movs	r3, #0
 8000bac:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000bae:	2308      	movs	r3, #8
 8000bb0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000bb2:	2340      	movs	r3, #64	; 0x40
 8000bb4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV4;
 8000bb6:	2350      	movs	r3, #80	; 0x50
 8000bb8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV4;
 8000bba:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8000bbe:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV4;
 8000bc0:	2350      	movs	r3, #80	; 0x50
 8000bc2:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000bc4:	1d3b      	adds	r3, r7, #4
 8000bc6:	2104      	movs	r1, #4
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f004 fb4f 	bl	800526c <HAL_RCC_ClockConfig>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d001      	beq.n	8000bd8 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8000bd4:	f000 f9d6 	bl	8000f84 <Error_Handler>
  }
}
 8000bd8:	bf00      	nop
 8000bda:	3770      	adds	r7, #112	; 0x70
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}
 8000be0:	58024800 	.word	0x58024800
 8000be4:	58000400 	.word	0x58000400
 8000be8:	58024400 	.word	0x58024400

08000bec <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000bf0:	4b11      	ldr	r3, [pc, #68]	; (8000c38 <MX_CRC_Init+0x4c>)
 8000bf2:	4a12      	ldr	r2, [pc, #72]	; (8000c3c <MX_CRC_Init+0x50>)
 8000bf4:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000bf6:	4b10      	ldr	r3, [pc, #64]	; (8000c38 <MX_CRC_Init+0x4c>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000bfc:	4b0e      	ldr	r3, [pc, #56]	; (8000c38 <MX_CRC_Init+0x4c>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000c02:	4b0d      	ldr	r3, [pc, #52]	; (8000c38 <MX_CRC_Init+0x4c>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000c08:	4b0b      	ldr	r3, [pc, #44]	; (8000c38 <MX_CRC_Init+0x4c>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000c0e:	4b0a      	ldr	r3, [pc, #40]	; (8000c38 <MX_CRC_Init+0x4c>)
 8000c10:	2201      	movs	r2, #1
 8000c12:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000c14:	4808      	ldr	r0, [pc, #32]	; (8000c38 <MX_CRC_Init+0x4c>)
 8000c16:	f000 fdb1 	bl	800177c <HAL_CRC_Init>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d001      	beq.n	8000c24 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000c20:	f000 f9b0 	bl	8000f84 <Error_Handler>
  }
  __HAL_CRC_DR_RESET(&hcrc);
 8000c24:	4b04      	ldr	r3, [pc, #16]	; (8000c38 <MX_CRC_Init+0x4c>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	689a      	ldr	r2, [r3, #8]
 8000c2a:	4b03      	ldr	r3, [pc, #12]	; (8000c38 <MX_CRC_Init+0x4c>)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	f042 0201 	orr.w	r2, r2, #1
 8000c32:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000c34:	bf00      	nop
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	240005cc 	.word	0x240005cc
 8000c3c:	58024c00 	.word	0x58024c00

08000c40 <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockA1.Instance = SAI1_Block_A;
 8000c44:	4b2d      	ldr	r3, [pc, #180]	; (8000cfc <MX_SAI1_Init+0xbc>)
 8000c46:	4a2e      	ldr	r2, [pc, #184]	; (8000d00 <MX_SAI1_Init+0xc0>)
 8000c48:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
 8000c4a:	4b2c      	ldr	r3, [pc, #176]	; (8000cfc <MX_SAI1_Init+0xbc>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_RX;
 8000c50:	4b2a      	ldr	r3, [pc, #168]	; (8000cfc <MX_SAI1_Init+0xbc>)
 8000c52:	2201      	movs	r2, #1
 8000c54:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.DataSize = SAI_DATASIZE_16;
 8000c56:	4b29      	ldr	r3, [pc, #164]	; (8000cfc <MX_SAI1_Init+0xbc>)
 8000c58:	2280      	movs	r2, #128	; 0x80
 8000c5a:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000c5c:	4b27      	ldr	r3, [pc, #156]	; (8000cfc <MX_SAI1_Init+0xbc>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000c62:	4b26      	ldr	r3, [pc, #152]	; (8000cfc <MX_SAI1_Init+0xbc>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8000c68:	4b24      	ldr	r3, [pc, #144]	; (8000cfc <MX_SAI1_Init+0xbc>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000c6e:	4b23      	ldr	r3, [pc, #140]	; (8000cfc <MX_SAI1_Init+0xbc>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_DISABLE;
 8000c74:	4b21      	ldr	r3, [pc, #132]	; (8000cfc <MX_SAI1_Init+0xbc>)
 8000c76:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000c7a:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_FULL;
 8000c7c:	4b1f      	ldr	r3, [pc, #124]	; (8000cfc <MX_SAI1_Init+0xbc>)
 8000c7e:	2204      	movs	r2, #4
 8000c80:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_MCKDIV;
 8000c82:	4b1e      	ldr	r3, [pc, #120]	; (8000cfc <MX_SAI1_Init+0xbc>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	621a      	str	r2, [r3, #32]
  hsai_BlockA1.Init.Mckdiv = 0;
 8000c88:	4b1c      	ldr	r3, [pc, #112]	; (8000cfc <MX_SAI1_Init+0xbc>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8000c8e:	4b1b      	ldr	r3, [pc, #108]	; (8000cfc <MX_SAI1_Init+0xbc>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8000c94:	4b19      	ldr	r3, [pc, #100]	; (8000cfc <MX_SAI1_Init+0xbc>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA1.Init.PdmInit.Activation = ENABLE;
 8000c9a:	4b18      	ldr	r3, [pc, #96]	; (8000cfc <MX_SAI1_Init+0xbc>)
 8000c9c:	2201      	movs	r2, #1
 8000c9e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hsai_BlockA1.Init.PdmInit.MicPairsNbr = 1;
 8000ca2:	4b16      	ldr	r3, [pc, #88]	; (8000cfc <MX_SAI1_Init+0xbc>)
 8000ca4:	2201      	movs	r2, #1
 8000ca6:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA1.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 8000ca8:	4b14      	ldr	r3, [pc, #80]	; (8000cfc <MX_SAI1_Init+0xbc>)
 8000caa:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000cae:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA1.FrameInit.FrameLength = 16;
 8000cb0:	4b12      	ldr	r3, [pc, #72]	; (8000cfc <MX_SAI1_Init+0xbc>)
 8000cb2:	2210      	movs	r2, #16
 8000cb4:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA1.FrameInit.ActiveFrameLength = 1;
 8000cb6:	4b11      	ldr	r3, [pc, #68]	; (8000cfc <MX_SAI1_Init+0xbc>)
 8000cb8:	2201      	movs	r2, #1
 8000cba:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8000cbc:	4b0f      	ldr	r3, [pc, #60]	; (8000cfc <MX_SAI1_Init+0xbc>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA1.FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 8000cc2:	4b0e      	ldr	r3, [pc, #56]	; (8000cfc <MX_SAI1_Init+0xbc>)
 8000cc4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000cc8:	661a      	str	r2, [r3, #96]	; 0x60
  hsai_BlockA1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8000cca:	4b0c      	ldr	r3, [pc, #48]	; (8000cfc <MX_SAI1_Init+0xbc>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	665a      	str	r2, [r3, #100]	; 0x64
  hsai_BlockA1.SlotInit.FirstBitOffset = 0;
 8000cd0:	4b0a      	ldr	r3, [pc, #40]	; (8000cfc <MX_SAI1_Init+0xbc>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	669a      	str	r2, [r3, #104]	; 0x68
  hsai_BlockA1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8000cd6:	4b09      	ldr	r3, [pc, #36]	; (8000cfc <MX_SAI1_Init+0xbc>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai_BlockA1.SlotInit.SlotNumber = 1;
 8000cdc:	4b07      	ldr	r3, [pc, #28]	; (8000cfc <MX_SAI1_Init+0xbc>)
 8000cde:	2201      	movs	r2, #1
 8000ce0:	671a      	str	r2, [r3, #112]	; 0x70
  hsai_BlockA1.SlotInit.SlotActive = 0x00000001;
 8000ce2:	4b06      	ldr	r3, [pc, #24]	; (8000cfc <MX_SAI1_Init+0xbc>)
 8000ce4:	2201      	movs	r2, #1
 8000ce6:	675a      	str	r2, [r3, #116]	; 0x74
  if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
 8000ce8:	4804      	ldr	r0, [pc, #16]	; (8000cfc <MX_SAI1_Init+0xbc>)
 8000cea:	f006 ffd1 	bl	8007c90 <HAL_SAI_Init>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d001      	beq.n	8000cf8 <MX_SAI1_Init+0xb8>
  {
    Error_Handler();
 8000cf4:	f000 f946 	bl	8000f84 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8000cf8:	bf00      	nop
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	2400072c 	.word	0x2400072c
 8000d00:	40015804 	.word	0x40015804

08000d04 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b088      	sub	sp, #32
 8000d08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d0a:	f107 0310 	add.w	r3, r7, #16
 8000d0e:	2200      	movs	r2, #0
 8000d10:	601a      	str	r2, [r3, #0]
 8000d12:	605a      	str	r2, [r3, #4]
 8000d14:	609a      	str	r2, [r3, #8]
 8000d16:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d18:	1d3b      	adds	r3, r7, #4
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	601a      	str	r2, [r3, #0]
 8000d1e:	605a      	str	r2, [r3, #4]
 8000d20:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000d22:	4b23      	ldr	r3, [pc, #140]	; (8000db0 <MX_TIM1_Init+0xac>)
 8000d24:	4a23      	ldr	r2, [pc, #140]	; (8000db4 <MX_TIM1_Init+0xb0>)
 8000d26:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 20000;
 8000d28:	4b21      	ldr	r3, [pc, #132]	; (8000db0 <MX_TIM1_Init+0xac>)
 8000d2a:	f644 6220 	movw	r2, #20000	; 0x4e20
 8000d2e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d30:	4b1f      	ldr	r3, [pc, #124]	; (8000db0 <MX_TIM1_Init+0xac>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 60000;
 8000d36:	4b1e      	ldr	r3, [pc, #120]	; (8000db0 <MX_TIM1_Init+0xac>)
 8000d38:	f64e 2260 	movw	r2, #60000	; 0xea60
 8000d3c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d3e:	4b1c      	ldr	r3, [pc, #112]	; (8000db0 <MX_TIM1_Init+0xac>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000d44:	4b1a      	ldr	r3, [pc, #104]	; (8000db0 <MX_TIM1_Init+0xac>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d4a:	4b19      	ldr	r3, [pc, #100]	; (8000db0 <MX_TIM1_Init+0xac>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000d50:	4817      	ldr	r0, [pc, #92]	; (8000db0 <MX_TIM1_Init+0xac>)
 8000d52:	f007 fbba 	bl	80084ca <HAL_TIM_Base_Init>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d001      	beq.n	8000d60 <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 8000d5c:	f000 f912 	bl	8000f84 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d64:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000d66:	f107 0310 	add.w	r3, r7, #16
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	4810      	ldr	r0, [pc, #64]	; (8000db0 <MX_TIM1_Init+0xac>)
 8000d6e:	f007 fdc1 	bl	80088f4 <HAL_TIM_ConfigClockSource>
 8000d72:	4603      	mov	r3, r0
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d001      	beq.n	8000d7c <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8000d78:	f000 f904 	bl	8000f84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000d80:	2300      	movs	r3, #0
 8000d82:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d84:	2300      	movs	r3, #0
 8000d86:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000d88:	1d3b      	adds	r3, r7, #4
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	4808      	ldr	r0, [pc, #32]	; (8000db0 <MX_TIM1_Init+0xac>)
 8000d8e:	f008 f805 	bl	8008d9c <HAL_TIMEx_MasterConfigSynchronization>
 8000d92:	4603      	mov	r3, r0
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d001      	beq.n	8000d9c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000d98:	f000 f8f4 	bl	8000f84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  __HAL_TIM_CLEAR_IT(&htim1, TIM_FLAG_UPDATE);
 8000d9c:	4b04      	ldr	r3, [pc, #16]	; (8000db0 <MX_TIM1_Init+0xac>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	f06f 0201 	mvn.w	r2, #1
 8000da4:	611a      	str	r2, [r3, #16]
  /* USER CODE END TIM1_Init 2 */

}
 8000da6:	bf00      	nop
 8000da8:	3720      	adds	r7, #32
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	240006e0 	.word	0x240006e0
 8000db4:	40010000 	.word	0x40010000

08000db8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000dbc:	4b23      	ldr	r3, [pc, #140]	; (8000e4c <MX_USART3_UART_Init+0x94>)
 8000dbe:	4a24      	ldr	r2, [pc, #144]	; (8000e50 <MX_USART3_UART_Init+0x98>)
 8000dc0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 4000000;
 8000dc2:	4b22      	ldr	r3, [pc, #136]	; (8000e4c <MX_USART3_UART_Init+0x94>)
 8000dc4:	4a23      	ldr	r2, [pc, #140]	; (8000e54 <MX_USART3_UART_Init+0x9c>)
 8000dc6:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000dc8:	4b20      	ldr	r3, [pc, #128]	; (8000e4c <MX_USART3_UART_Init+0x94>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000dce:	4b1f      	ldr	r3, [pc, #124]	; (8000e4c <MX_USART3_UART_Init+0x94>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000dd4:	4b1d      	ldr	r3, [pc, #116]	; (8000e4c <MX_USART3_UART_Init+0x94>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000dda:	4b1c      	ldr	r3, [pc, #112]	; (8000e4c <MX_USART3_UART_Init+0x94>)
 8000ddc:	220c      	movs	r2, #12
 8000dde:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000de0:	4b1a      	ldr	r3, [pc, #104]	; (8000e4c <MX_USART3_UART_Init+0x94>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000de6:	4b19      	ldr	r3, [pc, #100]	; (8000e4c <MX_USART3_UART_Init+0x94>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000dec:	4b17      	ldr	r3, [pc, #92]	; (8000e4c <MX_USART3_UART_Init+0x94>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000df2:	4b16      	ldr	r3, [pc, #88]	; (8000e4c <MX_USART3_UART_Init+0x94>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000df8:	4b14      	ldr	r3, [pc, #80]	; (8000e4c <MX_USART3_UART_Init+0x94>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000dfe:	4813      	ldr	r0, [pc, #76]	; (8000e4c <MX_USART3_UART_Init+0x94>)
 8000e00:	f008 f872 	bl	8008ee8 <HAL_UART_Init>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d001      	beq.n	8000e0e <MX_USART3_UART_Init+0x56>
  {
    Error_Handler();
 8000e0a:	f000 f8bb 	bl	8000f84 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_8_8) != HAL_OK)
 8000e0e:	f04f 4120 	mov.w	r1, #2684354560	; 0xa0000000
 8000e12:	480e      	ldr	r0, [pc, #56]	; (8000e4c <MX_USART3_UART_Init+0x94>)
 8000e14:	f009 fc37 	bl	800a686 <HAL_UARTEx_SetTxFifoThreshold>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d001      	beq.n	8000e22 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000e1e:	f000 f8b1 	bl	8000f84 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_8_8) != HAL_OK)
 8000e22:	f04f 6120 	mov.w	r1, #167772160	; 0xa000000
 8000e26:	4809      	ldr	r0, [pc, #36]	; (8000e4c <MX_USART3_UART_Init+0x94>)
 8000e28:	f009 fc6b 	bl	800a702 <HAL_UARTEx_SetRxFifoThreshold>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d001      	beq.n	8000e36 <MX_USART3_UART_Init+0x7e>
  {
    Error_Handler();
 8000e32:	f000 f8a7 	bl	8000f84 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000e36:	4805      	ldr	r0, [pc, #20]	; (8000e4c <MX_USART3_UART_Init+0x94>)
 8000e38:	f009 fbec 	bl	800a614 <HAL_UARTEx_DisableFifoMode>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d001      	beq.n	8000e46 <MX_USART3_UART_Init+0x8e>
  {
    Error_Handler();
 8000e42:	f000 f89f 	bl	8000f84 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000e46:	bf00      	nop
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	2400053c 	.word	0x2400053c
 8000e50:	40004800 	.word	0x40004800
 8000e54:	003d0900 	.word	0x003d0900

08000e58 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b082      	sub	sp, #8
 8000e5c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e5e:	4b11      	ldr	r3, [pc, #68]	; (8000ea4 <MX_DMA_Init+0x4c>)
 8000e60:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e64:	4a0f      	ldr	r2, [pc, #60]	; (8000ea4 <MX_DMA_Init+0x4c>)
 8000e66:	f043 0301 	orr.w	r3, r3, #1
 8000e6a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000e6e:	4b0d      	ldr	r3, [pc, #52]	; (8000ea4 <MX_DMA_Init+0x4c>)
 8000e70:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e74:	f003 0301 	and.w	r3, r3, #1
 8000e78:	607b      	str	r3, [r7, #4]
 8000e7a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	2100      	movs	r1, #0
 8000e80:	200b      	movs	r0, #11
 8000e82:	f000 fc46 	bl	8001712 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000e86:	200b      	movs	r0, #11
 8000e88:	f000 fc5d 	bl	8001746 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	2100      	movs	r1, #0
 8000e90:	200c      	movs	r0, #12
 8000e92:	f000 fc3e 	bl	8001712 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000e96:	200c      	movs	r0, #12
 8000e98:	f000 fc55 	bl	8001746 <HAL_NVIC_EnableIRQ>

}
 8000e9c:	bf00      	nop
 8000e9e:	3708      	adds	r7, #8
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	58024400 	.word	0x58024400

08000ea8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b085      	sub	sp, #20
 8000eac:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000eae:	4b19      	ldr	r3, [pc, #100]	; (8000f14 <MX_GPIO_Init+0x6c>)
 8000eb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000eb4:	4a17      	ldr	r2, [pc, #92]	; (8000f14 <MX_GPIO_Init+0x6c>)
 8000eb6:	f043 0310 	orr.w	r3, r3, #16
 8000eba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ebe:	4b15      	ldr	r3, [pc, #84]	; (8000f14 <MX_GPIO_Init+0x6c>)
 8000ec0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ec4:	f003 0310 	and.w	r3, r3, #16
 8000ec8:	60fb      	str	r3, [r7, #12]
 8000eca:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ecc:	4b11      	ldr	r3, [pc, #68]	; (8000f14 <MX_GPIO_Init+0x6c>)
 8000ece:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ed2:	4a10      	ldr	r2, [pc, #64]	; (8000f14 <MX_GPIO_Init+0x6c>)
 8000ed4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ed8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000edc:	4b0d      	ldr	r3, [pc, #52]	; (8000f14 <MX_GPIO_Init+0x6c>)
 8000ede:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ee2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ee6:	60bb      	str	r3, [r7, #8]
 8000ee8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000eea:	4b0a      	ldr	r3, [pc, #40]	; (8000f14 <MX_GPIO_Init+0x6c>)
 8000eec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ef0:	4a08      	ldr	r2, [pc, #32]	; (8000f14 <MX_GPIO_Init+0x6c>)
 8000ef2:	f043 0308 	orr.w	r3, r3, #8
 8000ef6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000efa:	4b06      	ldr	r3, [pc, #24]	; (8000f14 <MX_GPIO_Init+0x6c>)
 8000efc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f00:	f003 0308 	and.w	r3, r3, #8
 8000f04:	607b      	str	r3, [r7, #4]
 8000f06:	687b      	ldr	r3, [r7, #4]

}
 8000f08:	bf00      	nop
 8000f0a:	3714      	adds	r7, #20
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f12:	4770      	bx	lr
 8000f14:	58024400 	.word	0x58024400

08000f18 <HAL_SAI_RxHalfCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai){
 8000f18:	b480      	push	{r7}
 8000f1a:	b083      	sub	sp, #12
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
	dmaFlag = HALF;
 8000f20:	4b04      	ldr	r3, [pc, #16]	; (8000f34 <HAL_SAI_RxHalfCpltCallback+0x1c>)
 8000f22:	2204      	movs	r2, #4
 8000f24:	701a      	strb	r2, [r3, #0]
}
 8000f26:	bf00      	nop
 8000f28:	370c      	adds	r7, #12
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr
 8000f32:	bf00      	nop
 8000f34:	24000491 	.word	0x24000491

08000f38 <HAL_SAI_RxCpltCallback>:

void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai){
 8000f38:	b480      	push	{r7}
 8000f3a:	b083      	sub	sp, #12
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
	dmaFlag = FULL;
 8000f40:	4b04      	ldr	r3, [pc, #16]	; (8000f54 <HAL_SAI_RxCpltCallback+0x1c>)
 8000f42:	2205      	movs	r2, #5
 8000f44:	701a      	strb	r2, [r3, #0]
}
 8000f46:	bf00      	nop
 8000f48:	370c      	adds	r7, #12
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop
 8000f54:	24000491 	.word	0x24000491

08000f58 <HAL_TIM_PeriodElapsedCallback>:
	uartFlag = READY;
}
*/

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b082      	sub	sp, #8
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  if(htim == &htim1){
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	4a06      	ldr	r2, [pc, #24]	; (8000f7c <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000f64:	4293      	cmp	r3, r2
 8000f66:	d105      	bne.n	8000f74 <HAL_TIM_PeriodElapsedCallback+0x1c>
	  HAL_TIM_Base_Stop_IT(htim);
 8000f68:	6878      	ldr	r0, [r7, #4]
 8000f6a:	f007 fb75 	bl	8008658 <HAL_TIM_Base_Stop_IT>
	  timFlag = DONE;
 8000f6e:	4b04      	ldr	r3, [pc, #16]	; (8000f80 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000f70:	2203      	movs	r2, #3
 8000f72:	701a      	strb	r2, [r3, #0]
  }
}
 8000f74:	bf00      	nop
 8000f76:	3708      	adds	r7, #8
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	240006e0 	.word	0x240006e0
 8000f80:	24000492 	.word	0x24000492

08000f84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000f88:	b672      	cpsid	i
}
 8000f8a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f8c:	e7fe      	b.n	8000f8c <Error_Handler+0x8>
	...

08000f90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b083      	sub	sp, #12
 8000f94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f96:	4b0a      	ldr	r3, [pc, #40]	; (8000fc0 <HAL_MspInit+0x30>)
 8000f98:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000f9c:	4a08      	ldr	r2, [pc, #32]	; (8000fc0 <HAL_MspInit+0x30>)
 8000f9e:	f043 0302 	orr.w	r3, r3, #2
 8000fa2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000fa6:	4b06      	ldr	r3, [pc, #24]	; (8000fc0 <HAL_MspInit+0x30>)
 8000fa8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000fac:	f003 0302 	and.w	r3, r3, #2
 8000fb0:	607b      	str	r3, [r7, #4]
 8000fb2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fb4:	bf00      	nop
 8000fb6:	370c      	adds	r7, #12
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbe:	4770      	bx	lr
 8000fc0:	58024400 	.word	0x58024400

08000fc4 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b085      	sub	sp, #20
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4a0b      	ldr	r2, [pc, #44]	; (8001000 <HAL_CRC_MspInit+0x3c>)
 8000fd2:	4293      	cmp	r3, r2
 8000fd4:	d10e      	bne.n	8000ff4 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000fd6:	4b0b      	ldr	r3, [pc, #44]	; (8001004 <HAL_CRC_MspInit+0x40>)
 8000fd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fdc:	4a09      	ldr	r2, [pc, #36]	; (8001004 <HAL_CRC_MspInit+0x40>)
 8000fde:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000fe2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fe6:	4b07      	ldr	r3, [pc, #28]	; (8001004 <HAL_CRC_MspInit+0x40>)
 8000fe8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000ff0:	60fb      	str	r3, [r7, #12]
 8000ff2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000ff4:	bf00      	nop
 8000ff6:	3714      	adds	r7, #20
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffe:	4770      	bx	lr
 8001000:	58024c00 	.word	0x58024c00
 8001004:	58024400 	.word	0x58024400

08001008 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b084      	sub	sp, #16
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4a0e      	ldr	r2, [pc, #56]	; (8001050 <HAL_TIM_Base_MspInit+0x48>)
 8001016:	4293      	cmp	r3, r2
 8001018:	d116      	bne.n	8001048 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800101a:	4b0e      	ldr	r3, [pc, #56]	; (8001054 <HAL_TIM_Base_MspInit+0x4c>)
 800101c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001020:	4a0c      	ldr	r2, [pc, #48]	; (8001054 <HAL_TIM_Base_MspInit+0x4c>)
 8001022:	f043 0301 	orr.w	r3, r3, #1
 8001026:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800102a:	4b0a      	ldr	r3, [pc, #40]	; (8001054 <HAL_TIM_Base_MspInit+0x4c>)
 800102c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001030:	f003 0301 	and.w	r3, r3, #1
 8001034:	60fb      	str	r3, [r7, #12]
 8001036:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8001038:	2200      	movs	r2, #0
 800103a:	2100      	movs	r1, #0
 800103c:	2019      	movs	r0, #25
 800103e:	f000 fb68 	bl	8001712 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001042:	2019      	movs	r0, #25
 8001044:	f000 fb7f 	bl	8001746 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001048:	bf00      	nop
 800104a:	3710      	adds	r7, #16
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}
 8001050:	40010000 	.word	0x40010000
 8001054:	58024400 	.word	0x58024400

08001058 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b0b8      	sub	sp, #224	; 0xe0
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001060:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001064:	2200      	movs	r2, #0
 8001066:	601a      	str	r2, [r3, #0]
 8001068:	605a      	str	r2, [r3, #4]
 800106a:	609a      	str	r2, [r3, #8]
 800106c:	60da      	str	r2, [r3, #12]
 800106e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001070:	f107 0310 	add.w	r3, r7, #16
 8001074:	22bc      	movs	r2, #188	; 0xbc
 8001076:	2100      	movs	r1, #0
 8001078:	4618      	mov	r0, r3
 800107a:	f00b fabf 	bl	800c5fc <memset>
  if(huart->Instance==USART3)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	4a49      	ldr	r2, [pc, #292]	; (80011a8 <HAL_UART_MspInit+0x150>)
 8001084:	4293      	cmp	r3, r2
 8001086:	f040 808b 	bne.w	80011a0 <HAL_UART_MspInit+0x148>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800108a:	2302      	movs	r3, #2
 800108c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 1;
 800108e:	2301      	movs	r3, #1
 8001090:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL3.PLL3N = 19;
 8001092:	2313      	movs	r3, #19
 8001094:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8001096:	2302      	movs	r3, #2
 8001098:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 800109a:	2302      	movs	r3, #2
 800109c:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 800109e:	2302      	movs	r3, #2
 80010a0:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 80010a2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80010a6:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
 80010a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80010ac:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 80010ae:	2300      	movs	r3, #0
 80010b0:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_PLL3;
 80010b2:	2302      	movs	r3, #2
 80010b4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010b8:	f107 0310 	add.w	r3, r7, #16
 80010bc:	4618      	mov	r0, r3
 80010be:	f004 fc61 	bl	8005984 <HAL_RCCEx_PeriphCLKConfig>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d001      	beq.n	80010cc <HAL_UART_MspInit+0x74>
    {
      Error_Handler();
 80010c8:	f7ff ff5c 	bl	8000f84 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80010cc:	4b37      	ldr	r3, [pc, #220]	; (80011ac <HAL_UART_MspInit+0x154>)
 80010ce:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80010d2:	4a36      	ldr	r2, [pc, #216]	; (80011ac <HAL_UART_MspInit+0x154>)
 80010d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010d8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80010dc:	4b33      	ldr	r3, [pc, #204]	; (80011ac <HAL_UART_MspInit+0x154>)
 80010de:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80010e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80010e6:	60fb      	str	r3, [r7, #12]
 80010e8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80010ea:	4b30      	ldr	r3, [pc, #192]	; (80011ac <HAL_UART_MspInit+0x154>)
 80010ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010f0:	4a2e      	ldr	r2, [pc, #184]	; (80011ac <HAL_UART_MspInit+0x154>)
 80010f2:	f043 0308 	orr.w	r3, r3, #8
 80010f6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010fa:	4b2c      	ldr	r3, [pc, #176]	; (80011ac <HAL_UART_MspInit+0x154>)
 80010fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001100:	f003 0308 	and.w	r3, r3, #8
 8001104:	60bb      	str	r3, [r7, #8]
 8001106:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001108:	f44f 7340 	mov.w	r3, #768	; 0x300
 800110c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001110:	2302      	movs	r3, #2
 8001112:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001116:	2300      	movs	r3, #0
 8001118:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800111c:	2300      	movs	r3, #0
 800111e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001122:	2307      	movs	r3, #7
 8001124:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001128:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800112c:	4619      	mov	r1, r3
 800112e:	4820      	ldr	r0, [pc, #128]	; (80011b0 <HAL_UART_MspInit+0x158>)
 8001130:	f003 fa54 	bl	80045dc <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream1;
 8001134:	4b1f      	ldr	r3, [pc, #124]	; (80011b4 <HAL_UART_MspInit+0x15c>)
 8001136:	4a20      	ldr	r2, [pc, #128]	; (80011b8 <HAL_UART_MspInit+0x160>)
 8001138:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 800113a:	4b1e      	ldr	r3, [pc, #120]	; (80011b4 <HAL_UART_MspInit+0x15c>)
 800113c:	222e      	movs	r2, #46	; 0x2e
 800113e:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001140:	4b1c      	ldr	r3, [pc, #112]	; (80011b4 <HAL_UART_MspInit+0x15c>)
 8001142:	2240      	movs	r2, #64	; 0x40
 8001144:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001146:	4b1b      	ldr	r3, [pc, #108]	; (80011b4 <HAL_UART_MspInit+0x15c>)
 8001148:	2200      	movs	r2, #0
 800114a:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800114c:	4b19      	ldr	r3, [pc, #100]	; (80011b4 <HAL_UART_MspInit+0x15c>)
 800114e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001152:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001154:	4b17      	ldr	r3, [pc, #92]	; (80011b4 <HAL_UART_MspInit+0x15c>)
 8001156:	2200      	movs	r2, #0
 8001158:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800115a:	4b16      	ldr	r3, [pc, #88]	; (80011b4 <HAL_UART_MspInit+0x15c>)
 800115c:	2200      	movs	r2, #0
 800115e:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8001160:	4b14      	ldr	r3, [pc, #80]	; (80011b4 <HAL_UART_MspInit+0x15c>)
 8001162:	2200      	movs	r2, #0
 8001164:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001166:	4b13      	ldr	r3, [pc, #76]	; (80011b4 <HAL_UART_MspInit+0x15c>)
 8001168:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800116c:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800116e:	4b11      	ldr	r3, [pc, #68]	; (80011b4 <HAL_UART_MspInit+0x15c>)
 8001170:	2200      	movs	r2, #0
 8001172:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8001174:	480f      	ldr	r0, [pc, #60]	; (80011b4 <HAL_UART_MspInit+0x15c>)
 8001176:	f000 fbeb 	bl	8001950 <HAL_DMA_Init>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d001      	beq.n	8001184 <HAL_UART_MspInit+0x12c>
    {
      Error_Handler();
 8001180:	f7ff ff00 	bl	8000f84 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	4a0b      	ldr	r2, [pc, #44]	; (80011b4 <HAL_UART_MspInit+0x15c>)
 8001188:	679a      	str	r2, [r3, #120]	; 0x78
 800118a:	4a0a      	ldr	r2, [pc, #40]	; (80011b4 <HAL_UART_MspInit+0x15c>)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001190:	2200      	movs	r2, #0
 8001192:	2100      	movs	r1, #0
 8001194:	2027      	movs	r0, #39	; 0x27
 8001196:	f000 fabc 	bl	8001712 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800119a:	2027      	movs	r0, #39	; 0x27
 800119c:	f000 fad3 	bl	8001746 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80011a0:	bf00      	nop
 80011a2:	37e0      	adds	r7, #224	; 0xe0
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	40004800 	.word	0x40004800
 80011ac:	58024400 	.word	0x58024400
 80011b0:	58020c00 	.word	0x58020c00
 80011b4:	240005f0 	.word	0x240005f0
 80011b8:	40020028 	.word	0x40020028

080011bc <HAL_SAI_MspInit>:
extern DMA_HandleTypeDef hdma_sai1_a;

static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b0b8      	sub	sp, #224	; 0xe0
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011c4:	f107 0310 	add.w	r3, r7, #16
 80011c8:	22bc      	movs	r2, #188	; 0xbc
 80011ca:	2100      	movs	r1, #0
 80011cc:	4618      	mov	r0, r3
 80011ce:	f00b fa15 	bl	800c5fc <memset>
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	4a4a      	ldr	r2, [pc, #296]	; (8001300 <HAL_SAI_MspInit+0x144>)
 80011d8:	4293      	cmp	r3, r2
 80011da:	f040 808d 	bne.w	80012f8 <HAL_SAI_MspInit+0x13c>
    {
    /* Peripheral clock enable */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 80011de:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011e2:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 80011e4:	2301      	movs	r3, #1
 80011e6:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLL2.PLL2N = 96;
 80011e8:	2360      	movs	r3, #96	; 0x60
 80011ea:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2P = 125;
 80011ec:	237d      	movs	r3, #125	; 0x7d
 80011ee:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80011f0:	2302      	movs	r3, #2
 80011f2:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 80011f4:	2302      	movs	r3, #2
 80011f6:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80011f8:	23c0      	movs	r3, #192	; 0xc0
 80011fa:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 80011fc:	2300      	movs	r3, #0
 80011fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001200:	2300      	movs	r3, #0
 8001202:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL2;
 8001204:	2301      	movs	r3, #1
 8001206:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001208:	f107 0310 	add.w	r3, r7, #16
 800120c:	4618      	mov	r0, r3
 800120e:	f004 fbb9 	bl	8005984 <HAL_RCCEx_PeriphCLKConfig>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d001      	beq.n	800121c <HAL_SAI_MspInit+0x60>
    {
      Error_Handler();
 8001218:	f7ff feb4 	bl	8000f84 <Error_Handler>
    }

    if (SAI1_client == 0)
 800121c:	4b39      	ldr	r3, [pc, #228]	; (8001304 <HAL_SAI_MspInit+0x148>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	2b00      	cmp	r3, #0
 8001222:	d116      	bne.n	8001252 <HAL_SAI_MspInit+0x96>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8001224:	4b38      	ldr	r3, [pc, #224]	; (8001308 <HAL_SAI_MspInit+0x14c>)
 8001226:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800122a:	4a37      	ldr	r2, [pc, #220]	; (8001308 <HAL_SAI_MspInit+0x14c>)
 800122c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001230:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001234:	4b34      	ldr	r3, [pc, #208]	; (8001308 <HAL_SAI_MspInit+0x14c>)
 8001236:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800123a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800123e:	60fb      	str	r3, [r7, #12]
 8001240:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(SAI1_IRQn, 0, 0);
 8001242:	2200      	movs	r2, #0
 8001244:	2100      	movs	r1, #0
 8001246:	2057      	movs	r0, #87	; 0x57
 8001248:	f000 fa63 	bl	8001712 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SAI1_IRQn);
 800124c:	2057      	movs	r0, #87	; 0x57
 800124e:	f000 fa7a 	bl	8001746 <HAL_NVIC_EnableIRQ>
    }
    SAI1_client ++;
 8001252:	4b2c      	ldr	r3, [pc, #176]	; (8001304 <HAL_SAI_MspInit+0x148>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	3301      	adds	r3, #1
 8001258:	4a2a      	ldr	r2, [pc, #168]	; (8001304 <HAL_SAI_MspInit+0x148>)
 800125a:	6013      	str	r3, [r2, #0]

    /**SAI1_A_Block_A GPIO Configuration
    PE2     ------> SAI1_CK1
    PE6     ------> SAI1_D1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_6;
 800125c:	2344      	movs	r3, #68	; 0x44
 800125e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001262:	2302      	movs	r3, #2
 8001264:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001268:	2300      	movs	r3, #0
 800126a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800126e:	2300      	movs	r3, #0
 8001270:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF2_SAI1;
 8001274:	2302      	movs	r3, #2
 8001276:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800127a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800127e:	4619      	mov	r1, r3
 8001280:	4822      	ldr	r0, [pc, #136]	; (800130c <HAL_SAI_MspInit+0x150>)
 8001282:	f003 f9ab 	bl	80045dc <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai1_a.Instance = DMA1_Stream0;
 8001286:	4b22      	ldr	r3, [pc, #136]	; (8001310 <HAL_SAI_MspInit+0x154>)
 8001288:	4a22      	ldr	r2, [pc, #136]	; (8001314 <HAL_SAI_MspInit+0x158>)
 800128a:	601a      	str	r2, [r3, #0]
    hdma_sai1_a.Init.Request = DMA_REQUEST_SAI1_A;
 800128c:	4b20      	ldr	r3, [pc, #128]	; (8001310 <HAL_SAI_MspInit+0x154>)
 800128e:	2257      	movs	r2, #87	; 0x57
 8001290:	605a      	str	r2, [r3, #4]
    hdma_sai1_a.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001292:	4b1f      	ldr	r3, [pc, #124]	; (8001310 <HAL_SAI_MspInit+0x154>)
 8001294:	2200      	movs	r2, #0
 8001296:	609a      	str	r2, [r3, #8]
    hdma_sai1_a.Init.PeriphInc = DMA_PINC_DISABLE;
 8001298:	4b1d      	ldr	r3, [pc, #116]	; (8001310 <HAL_SAI_MspInit+0x154>)
 800129a:	2200      	movs	r2, #0
 800129c:	60da      	str	r2, [r3, #12]
    hdma_sai1_a.Init.MemInc = DMA_MINC_ENABLE;
 800129e:	4b1c      	ldr	r3, [pc, #112]	; (8001310 <HAL_SAI_MspInit+0x154>)
 80012a0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80012a4:	611a      	str	r2, [r3, #16]
    hdma_sai1_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80012a6:	4b1a      	ldr	r3, [pc, #104]	; (8001310 <HAL_SAI_MspInit+0x154>)
 80012a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80012ac:	615a      	str	r2, [r3, #20]
    hdma_sai1_a.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80012ae:	4b18      	ldr	r3, [pc, #96]	; (8001310 <HAL_SAI_MspInit+0x154>)
 80012b0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80012b4:	619a      	str	r2, [r3, #24]
    hdma_sai1_a.Init.Mode = DMA_CIRCULAR;
 80012b6:	4b16      	ldr	r3, [pc, #88]	; (8001310 <HAL_SAI_MspInit+0x154>)
 80012b8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80012bc:	61da      	str	r2, [r3, #28]
    hdma_sai1_a.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80012be:	4b14      	ldr	r3, [pc, #80]	; (8001310 <HAL_SAI_MspInit+0x154>)
 80012c0:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80012c4:	621a      	str	r2, [r3, #32]
    hdma_sai1_a.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80012c6:	4b12      	ldr	r3, [pc, #72]	; (8001310 <HAL_SAI_MspInit+0x154>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
 80012cc:	4810      	ldr	r0, [pc, #64]	; (8001310 <HAL_SAI_MspInit+0x154>)
 80012ce:	f000 fb3f 	bl	8001950 <HAL_DMA_Init>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d001      	beq.n	80012dc <HAL_SAI_MspInit+0x120>
    {
      Error_Handler();
 80012d8:	f7ff fe54 	bl	8000f84 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_a);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	4a0c      	ldr	r2, [pc, #48]	; (8001310 <HAL_SAI_MspInit+0x154>)
 80012e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 80012e4:	4a0a      	ldr	r2, [pc, #40]	; (8001310 <HAL_SAI_MspInit+0x154>)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	6393      	str	r3, [r2, #56]	; 0x38

    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_a);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	4a08      	ldr	r2, [pc, #32]	; (8001310 <HAL_SAI_MspInit+0x154>)
 80012ee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 80012f2:	4a07      	ldr	r2, [pc, #28]	; (8001310 <HAL_SAI_MspInit+0x154>)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	6393      	str	r3, [r2, #56]	; 0x38

    }
}
 80012f8:	bf00      	nop
 80012fa:	37e0      	adds	r7, #224	; 0xe0
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	40015804 	.word	0x40015804
 8001304:	24000494 	.word	0x24000494
 8001308:	58024400 	.word	0x58024400
 800130c:	58021000 	.word	0x58021000
 8001310:	24000668 	.word	0x24000668
 8001314:	40020010 	.word	0x40020010

08001318 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800131c:	e7fe      	b.n	800131c <NMI_Handler+0x4>

0800131e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800131e:	b480      	push	{r7}
 8001320:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001322:	e7fe      	b.n	8001322 <HardFault_Handler+0x4>

08001324 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001328:	e7fe      	b.n	8001328 <MemManage_Handler+0x4>

0800132a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800132a:	b480      	push	{r7}
 800132c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800132e:	e7fe      	b.n	800132e <BusFault_Handler+0x4>

08001330 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001330:	b480      	push	{r7}
 8001332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001334:	e7fe      	b.n	8001334 <UsageFault_Handler+0x4>

08001336 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001336:	b480      	push	{r7}
 8001338:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800133a:	bf00      	nop
 800133c:	46bd      	mov	sp, r7
 800133e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001342:	4770      	bx	lr

08001344 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001348:	bf00      	nop
 800134a:	46bd      	mov	sp, r7
 800134c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001350:	4770      	bx	lr

08001352 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001352:	b480      	push	{r7}
 8001354:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001356:	bf00      	nop
 8001358:	46bd      	mov	sp, r7
 800135a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135e:	4770      	bx	lr

08001360 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001364:	f000 f8ce 	bl	8001504 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001368:	bf00      	nop
 800136a:	bd80      	pop	{r7, pc}

0800136c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_a);
 8001370:	4802      	ldr	r0, [pc, #8]	; (800137c <DMA1_Stream0_IRQHandler+0x10>)
 8001372:	f001 fe15 	bl	8002fa0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001376:	bf00      	nop
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	24000668 	.word	0x24000668

08001380 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8001384:	4802      	ldr	r0, [pc, #8]	; (8001390 <DMA1_Stream1_IRQHandler+0x10>)
 8001386:	f001 fe0b 	bl	8002fa0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800138a:	bf00      	nop
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	240005f0 	.word	0x240005f0

08001394 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001398:	4802      	ldr	r0, [pc, #8]	; (80013a4 <TIM1_UP_IRQHandler+0x10>)
 800139a:	f007 f98c 	bl	80086b6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800139e:	bf00      	nop
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	240006e0 	.word	0x240006e0

080013a8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80013ac:	4802      	ldr	r0, [pc, #8]	; (80013b8 <USART3_IRQHandler+0x10>)
 80013ae:	f007 fe6b 	bl	8009088 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80013b2:	bf00      	nop
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	2400053c 	.word	0x2400053c

080013bc <SAI1_IRQHandler>:

/**
  * @brief This function handles SAI1 global interrupt.
  */
void SAI1_IRQHandler(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_IRQn 0 */

  /* USER CODE BEGIN SAI1_IRQn 1 */

  /* USER CODE END SAI1_IRQn 1 */
}
 80013c0:	bf00      	nop
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr
	...

080013cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80013cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001404 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80013d0:	f7ff f8fe 	bl	80005d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013d4:	480c      	ldr	r0, [pc, #48]	; (8001408 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80013d6:	490d      	ldr	r1, [pc, #52]	; (800140c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80013d8:	4a0d      	ldr	r2, [pc, #52]	; (8001410 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80013da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013dc:	e002      	b.n	80013e4 <LoopCopyDataInit>

080013de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013e2:	3304      	adds	r3, #4

080013e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013e8:	d3f9      	bcc.n	80013de <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013ea:	4a0a      	ldr	r2, [pc, #40]	; (8001414 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80013ec:	4c0a      	ldr	r4, [pc, #40]	; (8001418 <LoopFillZerobss+0x22>)
  movs r3, #0
 80013ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013f0:	e001      	b.n	80013f6 <LoopFillZerobss>

080013f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013f4:	3204      	adds	r2, #4

080013f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013f8:	d3fb      	bcc.n	80013f2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80013fa:	f00b f8db 	bl	800c5b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013fe:	f7ff fa6f 	bl	80008e0 <main>
  bx  lr
 8001402:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001404:	24040000 	.word	0x24040000
  ldr r0, =_sdata
 8001408:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800140c:	24000474 	.word	0x24000474
  ldr r2, =_sidata
 8001410:	0800cca8 	.word	0x0800cca8
  ldr r2, =_sbss
 8001414:	24000474 	.word	0x24000474
  ldr r4, =_ebss
 8001418:	240007c8 	.word	0x240007c8

0800141c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800141c:	e7fe      	b.n	800141c <ADC3_IRQHandler>
	...

08001420 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b082      	sub	sp, #8
 8001424:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001426:	2003      	movs	r0, #3
 8001428:	f000 f968 	bl	80016fc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800142c:	f004 f8d4 	bl	80055d8 <HAL_RCC_GetSysClockFreq>
 8001430:	4602      	mov	r2, r0
 8001432:	4b15      	ldr	r3, [pc, #84]	; (8001488 <HAL_Init+0x68>)
 8001434:	699b      	ldr	r3, [r3, #24]
 8001436:	0a1b      	lsrs	r3, r3, #8
 8001438:	f003 030f 	and.w	r3, r3, #15
 800143c:	4913      	ldr	r1, [pc, #76]	; (800148c <HAL_Init+0x6c>)
 800143e:	5ccb      	ldrb	r3, [r1, r3]
 8001440:	f003 031f 	and.w	r3, r3, #31
 8001444:	fa22 f303 	lsr.w	r3, r2, r3
 8001448:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800144a:	4b0f      	ldr	r3, [pc, #60]	; (8001488 <HAL_Init+0x68>)
 800144c:	699b      	ldr	r3, [r3, #24]
 800144e:	f003 030f 	and.w	r3, r3, #15
 8001452:	4a0e      	ldr	r2, [pc, #56]	; (800148c <HAL_Init+0x6c>)
 8001454:	5cd3      	ldrb	r3, [r2, r3]
 8001456:	f003 031f 	and.w	r3, r3, #31
 800145a:	687a      	ldr	r2, [r7, #4]
 800145c:	fa22 f303 	lsr.w	r3, r2, r3
 8001460:	4a0b      	ldr	r2, [pc, #44]	; (8001490 <HAL_Init+0x70>)
 8001462:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001464:	4a0b      	ldr	r2, [pc, #44]	; (8001494 <HAL_Init+0x74>)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800146a:	2000      	movs	r0, #0
 800146c:	f000 f814 	bl	8001498 <HAL_InitTick>
 8001470:	4603      	mov	r3, r0
 8001472:	2b00      	cmp	r3, #0
 8001474:	d001      	beq.n	800147a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001476:	2301      	movs	r3, #1
 8001478:	e002      	b.n	8001480 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800147a:	f7ff fd89 	bl	8000f90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800147e:	2300      	movs	r3, #0
}
 8001480:	4618      	mov	r0, r3
 8001482:	3708      	adds	r7, #8
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}
 8001488:	58024400 	.word	0x58024400
 800148c:	0800c9e8 	.word	0x0800c9e8
 8001490:	24000404 	.word	0x24000404
 8001494:	24000400 	.word	0x24000400

08001498 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b082      	sub	sp, #8
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80014a0:	4b15      	ldr	r3, [pc, #84]	; (80014f8 <HAL_InitTick+0x60>)
 80014a2:	781b      	ldrb	r3, [r3, #0]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d101      	bne.n	80014ac <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80014a8:	2301      	movs	r3, #1
 80014aa:	e021      	b.n	80014f0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80014ac:	4b13      	ldr	r3, [pc, #76]	; (80014fc <HAL_InitTick+0x64>)
 80014ae:	681a      	ldr	r2, [r3, #0]
 80014b0:	4b11      	ldr	r3, [pc, #68]	; (80014f8 <HAL_InitTick+0x60>)
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	4619      	mov	r1, r3
 80014b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80014be:	fbb2 f3f3 	udiv	r3, r2, r3
 80014c2:	4618      	mov	r0, r3
 80014c4:	f000 f94d 	bl	8001762 <HAL_SYSTICK_Config>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d001      	beq.n	80014d2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80014ce:	2301      	movs	r3, #1
 80014d0:	e00e      	b.n	80014f0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	2b0f      	cmp	r3, #15
 80014d6:	d80a      	bhi.n	80014ee <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014d8:	2200      	movs	r2, #0
 80014da:	6879      	ldr	r1, [r7, #4]
 80014dc:	f04f 30ff 	mov.w	r0, #4294967295
 80014e0:	f000 f917 	bl	8001712 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014e4:	4a06      	ldr	r2, [pc, #24]	; (8001500 <HAL_InitTick+0x68>)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014ea:	2300      	movs	r3, #0
 80014ec:	e000      	b.n	80014f0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80014ee:	2301      	movs	r3, #1
}
 80014f0:	4618      	mov	r0, r3
 80014f2:	3708      	adds	r7, #8
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	2400040c 	.word	0x2400040c
 80014fc:	24000400 	.word	0x24000400
 8001500:	24000408 	.word	0x24000408

08001504 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001508:	4b06      	ldr	r3, [pc, #24]	; (8001524 <HAL_IncTick+0x20>)
 800150a:	781b      	ldrb	r3, [r3, #0]
 800150c:	461a      	mov	r2, r3
 800150e:	4b06      	ldr	r3, [pc, #24]	; (8001528 <HAL_IncTick+0x24>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	4413      	add	r3, r2
 8001514:	4a04      	ldr	r2, [pc, #16]	; (8001528 <HAL_IncTick+0x24>)
 8001516:	6013      	str	r3, [r2, #0]
}
 8001518:	bf00      	nop
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr
 8001522:	bf00      	nop
 8001524:	2400040c 	.word	0x2400040c
 8001528:	240007c4 	.word	0x240007c4

0800152c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800152c:	b480      	push	{r7}
 800152e:	af00      	add	r7, sp, #0
  return uwTick;
 8001530:	4b03      	ldr	r3, [pc, #12]	; (8001540 <HAL_GetTick+0x14>)
 8001532:	681b      	ldr	r3, [r3, #0]
}
 8001534:	4618      	mov	r0, r3
 8001536:	46bd      	mov	sp, r7
 8001538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153c:	4770      	bx	lr
 800153e:	bf00      	nop
 8001540:	240007c4 	.word	0x240007c4

08001544 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001544:	b480      	push	{r7}
 8001546:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001548:	4b03      	ldr	r3, [pc, #12]	; (8001558 <HAL_GetREVID+0x14>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	0c1b      	lsrs	r3, r3, #16
}
 800154e:	4618      	mov	r0, r3
 8001550:	46bd      	mov	sp, r7
 8001552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001556:	4770      	bx	lr
 8001558:	5c001000 	.word	0x5c001000

0800155c <__NVIC_SetPriorityGrouping>:
{
 800155c:	b480      	push	{r7}
 800155e:	b085      	sub	sp, #20
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	f003 0307 	and.w	r3, r3, #7
 800156a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800156c:	4b0b      	ldr	r3, [pc, #44]	; (800159c <__NVIC_SetPriorityGrouping+0x40>)
 800156e:	68db      	ldr	r3, [r3, #12]
 8001570:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001572:	68ba      	ldr	r2, [r7, #8]
 8001574:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001578:	4013      	ands	r3, r2
 800157a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001580:	68bb      	ldr	r3, [r7, #8]
 8001582:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001584:	4b06      	ldr	r3, [pc, #24]	; (80015a0 <__NVIC_SetPriorityGrouping+0x44>)
 8001586:	4313      	orrs	r3, r2
 8001588:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800158a:	4a04      	ldr	r2, [pc, #16]	; (800159c <__NVIC_SetPriorityGrouping+0x40>)
 800158c:	68bb      	ldr	r3, [r7, #8]
 800158e:	60d3      	str	r3, [r2, #12]
}
 8001590:	bf00      	nop
 8001592:	3714      	adds	r7, #20
 8001594:	46bd      	mov	sp, r7
 8001596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159a:	4770      	bx	lr
 800159c:	e000ed00 	.word	0xe000ed00
 80015a0:	05fa0000 	.word	0x05fa0000

080015a4 <__NVIC_GetPriorityGrouping>:
{
 80015a4:	b480      	push	{r7}
 80015a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015a8:	4b04      	ldr	r3, [pc, #16]	; (80015bc <__NVIC_GetPriorityGrouping+0x18>)
 80015aa:	68db      	ldr	r3, [r3, #12]
 80015ac:	0a1b      	lsrs	r3, r3, #8
 80015ae:	f003 0307 	and.w	r3, r3, #7
}
 80015b2:	4618      	mov	r0, r3
 80015b4:	46bd      	mov	sp, r7
 80015b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ba:	4770      	bx	lr
 80015bc:	e000ed00 	.word	0xe000ed00

080015c0 <__NVIC_EnableIRQ>:
{
 80015c0:	b480      	push	{r7}
 80015c2:	b083      	sub	sp, #12
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	4603      	mov	r3, r0
 80015c8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80015ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	db0b      	blt.n	80015ea <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015d2:	88fb      	ldrh	r3, [r7, #6]
 80015d4:	f003 021f 	and.w	r2, r3, #31
 80015d8:	4907      	ldr	r1, [pc, #28]	; (80015f8 <__NVIC_EnableIRQ+0x38>)
 80015da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015de:	095b      	lsrs	r3, r3, #5
 80015e0:	2001      	movs	r0, #1
 80015e2:	fa00 f202 	lsl.w	r2, r0, r2
 80015e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80015ea:	bf00      	nop
 80015ec:	370c      	adds	r7, #12
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr
 80015f6:	bf00      	nop
 80015f8:	e000e100 	.word	0xe000e100

080015fc <__NVIC_SetPriority>:
{
 80015fc:	b480      	push	{r7}
 80015fe:	b083      	sub	sp, #12
 8001600:	af00      	add	r7, sp, #0
 8001602:	4603      	mov	r3, r0
 8001604:	6039      	str	r1, [r7, #0]
 8001606:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001608:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800160c:	2b00      	cmp	r3, #0
 800160e:	db0a      	blt.n	8001626 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	b2da      	uxtb	r2, r3
 8001614:	490c      	ldr	r1, [pc, #48]	; (8001648 <__NVIC_SetPriority+0x4c>)
 8001616:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800161a:	0112      	lsls	r2, r2, #4
 800161c:	b2d2      	uxtb	r2, r2
 800161e:	440b      	add	r3, r1
 8001620:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001624:	e00a      	b.n	800163c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	b2da      	uxtb	r2, r3
 800162a:	4908      	ldr	r1, [pc, #32]	; (800164c <__NVIC_SetPriority+0x50>)
 800162c:	88fb      	ldrh	r3, [r7, #6]
 800162e:	f003 030f 	and.w	r3, r3, #15
 8001632:	3b04      	subs	r3, #4
 8001634:	0112      	lsls	r2, r2, #4
 8001636:	b2d2      	uxtb	r2, r2
 8001638:	440b      	add	r3, r1
 800163a:	761a      	strb	r2, [r3, #24]
}
 800163c:	bf00      	nop
 800163e:	370c      	adds	r7, #12
 8001640:	46bd      	mov	sp, r7
 8001642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001646:	4770      	bx	lr
 8001648:	e000e100 	.word	0xe000e100
 800164c:	e000ed00 	.word	0xe000ed00

08001650 <NVIC_EncodePriority>:
{
 8001650:	b480      	push	{r7}
 8001652:	b089      	sub	sp, #36	; 0x24
 8001654:	af00      	add	r7, sp, #0
 8001656:	60f8      	str	r0, [r7, #12]
 8001658:	60b9      	str	r1, [r7, #8]
 800165a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	f003 0307 	and.w	r3, r3, #7
 8001662:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001664:	69fb      	ldr	r3, [r7, #28]
 8001666:	f1c3 0307 	rsb	r3, r3, #7
 800166a:	2b04      	cmp	r3, #4
 800166c:	bf28      	it	cs
 800166e:	2304      	movcs	r3, #4
 8001670:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001672:	69fb      	ldr	r3, [r7, #28]
 8001674:	3304      	adds	r3, #4
 8001676:	2b06      	cmp	r3, #6
 8001678:	d902      	bls.n	8001680 <NVIC_EncodePriority+0x30>
 800167a:	69fb      	ldr	r3, [r7, #28]
 800167c:	3b03      	subs	r3, #3
 800167e:	e000      	b.n	8001682 <NVIC_EncodePriority+0x32>
 8001680:	2300      	movs	r3, #0
 8001682:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001684:	f04f 32ff 	mov.w	r2, #4294967295
 8001688:	69bb      	ldr	r3, [r7, #24]
 800168a:	fa02 f303 	lsl.w	r3, r2, r3
 800168e:	43da      	mvns	r2, r3
 8001690:	68bb      	ldr	r3, [r7, #8]
 8001692:	401a      	ands	r2, r3
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001698:	f04f 31ff 	mov.w	r1, #4294967295
 800169c:	697b      	ldr	r3, [r7, #20]
 800169e:	fa01 f303 	lsl.w	r3, r1, r3
 80016a2:	43d9      	mvns	r1, r3
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016a8:	4313      	orrs	r3, r2
}
 80016aa:	4618      	mov	r0, r3
 80016ac:	3724      	adds	r7, #36	; 0x24
 80016ae:	46bd      	mov	sp, r7
 80016b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b4:	4770      	bx	lr
	...

080016b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b082      	sub	sp, #8
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	3b01      	subs	r3, #1
 80016c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016c8:	d301      	bcc.n	80016ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016ca:	2301      	movs	r3, #1
 80016cc:	e00f      	b.n	80016ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016ce:	4a0a      	ldr	r2, [pc, #40]	; (80016f8 <SysTick_Config+0x40>)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	3b01      	subs	r3, #1
 80016d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016d6:	210f      	movs	r1, #15
 80016d8:	f04f 30ff 	mov.w	r0, #4294967295
 80016dc:	f7ff ff8e 	bl	80015fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016e0:	4b05      	ldr	r3, [pc, #20]	; (80016f8 <SysTick_Config+0x40>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016e6:	4b04      	ldr	r3, [pc, #16]	; (80016f8 <SysTick_Config+0x40>)
 80016e8:	2207      	movs	r2, #7
 80016ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016ec:	2300      	movs	r3, #0
}
 80016ee:	4618      	mov	r0, r3
 80016f0:	3708      	adds	r7, #8
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	e000e010 	.word	0xe000e010

080016fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b082      	sub	sp, #8
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001704:	6878      	ldr	r0, [r7, #4]
 8001706:	f7ff ff29 	bl	800155c <__NVIC_SetPriorityGrouping>
}
 800170a:	bf00      	nop
 800170c:	3708      	adds	r7, #8
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}

08001712 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001712:	b580      	push	{r7, lr}
 8001714:	b086      	sub	sp, #24
 8001716:	af00      	add	r7, sp, #0
 8001718:	4603      	mov	r3, r0
 800171a:	60b9      	str	r1, [r7, #8]
 800171c:	607a      	str	r2, [r7, #4]
 800171e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001720:	f7ff ff40 	bl	80015a4 <__NVIC_GetPriorityGrouping>
 8001724:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001726:	687a      	ldr	r2, [r7, #4]
 8001728:	68b9      	ldr	r1, [r7, #8]
 800172a:	6978      	ldr	r0, [r7, #20]
 800172c:	f7ff ff90 	bl	8001650 <NVIC_EncodePriority>
 8001730:	4602      	mov	r2, r0
 8001732:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001736:	4611      	mov	r1, r2
 8001738:	4618      	mov	r0, r3
 800173a:	f7ff ff5f 	bl	80015fc <__NVIC_SetPriority>
}
 800173e:	bf00      	nop
 8001740:	3718      	adds	r7, #24
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}

08001746 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001746:	b580      	push	{r7, lr}
 8001748:	b082      	sub	sp, #8
 800174a:	af00      	add	r7, sp, #0
 800174c:	4603      	mov	r3, r0
 800174e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001750:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001754:	4618      	mov	r0, r3
 8001756:	f7ff ff33 	bl	80015c0 <__NVIC_EnableIRQ>
}
 800175a:	bf00      	nop
 800175c:	3708      	adds	r7, #8
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}

08001762 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001762:	b580      	push	{r7, lr}
 8001764:	b082      	sub	sp, #8
 8001766:	af00      	add	r7, sp, #0
 8001768:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800176a:	6878      	ldr	r0, [r7, #4]
 800176c:	f7ff ffa4 	bl	80016b8 <SysTick_Config>
 8001770:	4603      	mov	r3, r0
}
 8001772:	4618      	mov	r0, r3
 8001774:	3708      	adds	r7, #8
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
	...

0800177c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b082      	sub	sp, #8
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d101      	bne.n	800178e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800178a:	2301      	movs	r3, #1
 800178c:	e054      	b.n	8001838 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	7f5b      	ldrb	r3, [r3, #29]
 8001792:	b2db      	uxtb	r3, r3
 8001794:	2b00      	cmp	r3, #0
 8001796:	d105      	bne.n	80017a4 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	2200      	movs	r2, #0
 800179c:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800179e:	6878      	ldr	r0, [r7, #4]
 80017a0:	f7ff fc10 	bl	8000fc4 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	2202      	movs	r2, #2
 80017a8:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	791b      	ldrb	r3, [r3, #4]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d10c      	bne.n	80017cc <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4a22      	ldr	r2, [pc, #136]	; (8001840 <HAL_CRC_Init+0xc4>)
 80017b8:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	689a      	ldr	r2, [r3, #8]
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f022 0218 	bic.w	r2, r2, #24
 80017c8:	609a      	str	r2, [r3, #8]
 80017ca:	e00c      	b.n	80017e6 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6899      	ldr	r1, [r3, #8]
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	68db      	ldr	r3, [r3, #12]
 80017d4:	461a      	mov	r2, r3
 80017d6:	6878      	ldr	r0, [r7, #4]
 80017d8:	f000 f834 	bl	8001844 <HAL_CRCEx_Polynomial_Set>
 80017dc:	4603      	mov	r3, r0
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d001      	beq.n	80017e6 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80017e2:	2301      	movs	r3, #1
 80017e4:	e028      	b.n	8001838 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	795b      	ldrb	r3, [r3, #5]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d105      	bne.n	80017fa <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f04f 32ff 	mov.w	r2, #4294967295
 80017f6:	611a      	str	r2, [r3, #16]
 80017f8:	e004      	b.n	8001804 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	687a      	ldr	r2, [r7, #4]
 8001800:	6912      	ldr	r2, [r2, #16]
 8001802:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	689b      	ldr	r3, [r3, #8]
 800180a:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	695a      	ldr	r2, [r3, #20]
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	430a      	orrs	r2, r1
 8001818:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	689b      	ldr	r3, [r3, #8]
 8001820:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	699a      	ldr	r2, [r3, #24]
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	430a      	orrs	r2, r1
 800182e:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2201      	movs	r2, #1
 8001834:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8001836:	2300      	movs	r3, #0
}
 8001838:	4618      	mov	r0, r3
 800183a:	3708      	adds	r7, #8
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}
 8001840:	04c11db7 	.word	0x04c11db7

08001844 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8001844:	b480      	push	{r7}
 8001846:	b087      	sub	sp, #28
 8001848:	af00      	add	r7, sp, #0
 800184a:	60f8      	str	r0, [r7, #12]
 800184c:	60b9      	str	r1, [r7, #8]
 800184e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001850:	2300      	movs	r3, #0
 8001852:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8001854:	231f      	movs	r3, #31
 8001856:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8001858:	bf00      	nop
 800185a:	693b      	ldr	r3, [r7, #16]
 800185c:	1e5a      	subs	r2, r3, #1
 800185e:	613a      	str	r2, [r7, #16]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d009      	beq.n	8001878 <HAL_CRCEx_Polynomial_Set+0x34>
 8001864:	693b      	ldr	r3, [r7, #16]
 8001866:	f003 031f 	and.w	r3, r3, #31
 800186a:	68ba      	ldr	r2, [r7, #8]
 800186c:	fa22 f303 	lsr.w	r3, r2, r3
 8001870:	f003 0301 	and.w	r3, r3, #1
 8001874:	2b00      	cmp	r3, #0
 8001876:	d0f0      	beq.n	800185a <HAL_CRCEx_Polynomial_Set+0x16>
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	2b18      	cmp	r3, #24
 800187c:	d846      	bhi.n	800190c <HAL_CRCEx_Polynomial_Set+0xc8>
 800187e:	a201      	add	r2, pc, #4	; (adr r2, 8001884 <HAL_CRCEx_Polynomial_Set+0x40>)
 8001880:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001884:	08001913 	.word	0x08001913
 8001888:	0800190d 	.word	0x0800190d
 800188c:	0800190d 	.word	0x0800190d
 8001890:	0800190d 	.word	0x0800190d
 8001894:	0800190d 	.word	0x0800190d
 8001898:	0800190d 	.word	0x0800190d
 800189c:	0800190d 	.word	0x0800190d
 80018a0:	0800190d 	.word	0x0800190d
 80018a4:	08001901 	.word	0x08001901
 80018a8:	0800190d 	.word	0x0800190d
 80018ac:	0800190d 	.word	0x0800190d
 80018b0:	0800190d 	.word	0x0800190d
 80018b4:	0800190d 	.word	0x0800190d
 80018b8:	0800190d 	.word	0x0800190d
 80018bc:	0800190d 	.word	0x0800190d
 80018c0:	0800190d 	.word	0x0800190d
 80018c4:	080018f5 	.word	0x080018f5
 80018c8:	0800190d 	.word	0x0800190d
 80018cc:	0800190d 	.word	0x0800190d
 80018d0:	0800190d 	.word	0x0800190d
 80018d4:	0800190d 	.word	0x0800190d
 80018d8:	0800190d 	.word	0x0800190d
 80018dc:	0800190d 	.word	0x0800190d
 80018e0:	0800190d 	.word	0x0800190d
 80018e4:	080018e9 	.word	0x080018e9
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 80018e8:	693b      	ldr	r3, [r7, #16]
 80018ea:	2b06      	cmp	r3, #6
 80018ec:	d913      	bls.n	8001916 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 80018ee:	2301      	movs	r3, #1
 80018f0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80018f2:	e010      	b.n	8001916 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 80018f4:	693b      	ldr	r3, [r7, #16]
 80018f6:	2b07      	cmp	r3, #7
 80018f8:	d90f      	bls.n	800191a <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 80018fa:	2301      	movs	r3, #1
 80018fc:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80018fe:	e00c      	b.n	800191a <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8001900:	693b      	ldr	r3, [r7, #16]
 8001902:	2b0f      	cmp	r3, #15
 8001904:	d90b      	bls.n	800191e <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8001906:	2301      	movs	r3, #1
 8001908:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800190a:	e008      	b.n	800191e <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 800190c:	2301      	movs	r3, #1
 800190e:	75fb      	strb	r3, [r7, #23]
      break;
 8001910:	e006      	b.n	8001920 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001912:	bf00      	nop
 8001914:	e004      	b.n	8001920 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001916:	bf00      	nop
 8001918:	e002      	b.n	8001920 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800191a:	bf00      	nop
 800191c:	e000      	b.n	8001920 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800191e:	bf00      	nop
  }
  if (status == HAL_OK)
 8001920:	7dfb      	ldrb	r3, [r7, #23]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d10d      	bne.n	8001942 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	68ba      	ldr	r2, [r7, #8]
 800192c:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	689b      	ldr	r3, [r3, #8]
 8001934:	f023 0118 	bic.w	r1, r3, #24
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	687a      	ldr	r2, [r7, #4]
 800193e:	430a      	orrs	r2, r1
 8001940:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8001942:	7dfb      	ldrb	r3, [r7, #23]
}
 8001944:	4618      	mov	r0, r3
 8001946:	371c      	adds	r7, #28
 8001948:	46bd      	mov	sp, r7
 800194a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194e:	4770      	bx	lr

08001950 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b086      	sub	sp, #24
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001958:	f7ff fde8 	bl	800152c <HAL_GetTick>
 800195c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d101      	bne.n	8001968 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001964:	2301      	movs	r3, #1
 8001966:	e316      	b.n	8001f96 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4a66      	ldr	r2, [pc, #408]	; (8001b08 <HAL_DMA_Init+0x1b8>)
 800196e:	4293      	cmp	r3, r2
 8001970:	d04a      	beq.n	8001a08 <HAL_DMA_Init+0xb8>
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4a65      	ldr	r2, [pc, #404]	; (8001b0c <HAL_DMA_Init+0x1bc>)
 8001978:	4293      	cmp	r3, r2
 800197a:	d045      	beq.n	8001a08 <HAL_DMA_Init+0xb8>
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a63      	ldr	r2, [pc, #396]	; (8001b10 <HAL_DMA_Init+0x1c0>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d040      	beq.n	8001a08 <HAL_DMA_Init+0xb8>
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4a62      	ldr	r2, [pc, #392]	; (8001b14 <HAL_DMA_Init+0x1c4>)
 800198c:	4293      	cmp	r3, r2
 800198e:	d03b      	beq.n	8001a08 <HAL_DMA_Init+0xb8>
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4a60      	ldr	r2, [pc, #384]	; (8001b18 <HAL_DMA_Init+0x1c8>)
 8001996:	4293      	cmp	r3, r2
 8001998:	d036      	beq.n	8001a08 <HAL_DMA_Init+0xb8>
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4a5f      	ldr	r2, [pc, #380]	; (8001b1c <HAL_DMA_Init+0x1cc>)
 80019a0:	4293      	cmp	r3, r2
 80019a2:	d031      	beq.n	8001a08 <HAL_DMA_Init+0xb8>
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4a5d      	ldr	r2, [pc, #372]	; (8001b20 <HAL_DMA_Init+0x1d0>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d02c      	beq.n	8001a08 <HAL_DMA_Init+0xb8>
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4a5c      	ldr	r2, [pc, #368]	; (8001b24 <HAL_DMA_Init+0x1d4>)
 80019b4:	4293      	cmp	r3, r2
 80019b6:	d027      	beq.n	8001a08 <HAL_DMA_Init+0xb8>
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a5a      	ldr	r2, [pc, #360]	; (8001b28 <HAL_DMA_Init+0x1d8>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d022      	beq.n	8001a08 <HAL_DMA_Init+0xb8>
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4a59      	ldr	r2, [pc, #356]	; (8001b2c <HAL_DMA_Init+0x1dc>)
 80019c8:	4293      	cmp	r3, r2
 80019ca:	d01d      	beq.n	8001a08 <HAL_DMA_Init+0xb8>
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a57      	ldr	r2, [pc, #348]	; (8001b30 <HAL_DMA_Init+0x1e0>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d018      	beq.n	8001a08 <HAL_DMA_Init+0xb8>
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4a56      	ldr	r2, [pc, #344]	; (8001b34 <HAL_DMA_Init+0x1e4>)
 80019dc:	4293      	cmp	r3, r2
 80019de:	d013      	beq.n	8001a08 <HAL_DMA_Init+0xb8>
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4a54      	ldr	r2, [pc, #336]	; (8001b38 <HAL_DMA_Init+0x1e8>)
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d00e      	beq.n	8001a08 <HAL_DMA_Init+0xb8>
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4a53      	ldr	r2, [pc, #332]	; (8001b3c <HAL_DMA_Init+0x1ec>)
 80019f0:	4293      	cmp	r3, r2
 80019f2:	d009      	beq.n	8001a08 <HAL_DMA_Init+0xb8>
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4a51      	ldr	r2, [pc, #324]	; (8001b40 <HAL_DMA_Init+0x1f0>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d004      	beq.n	8001a08 <HAL_DMA_Init+0xb8>
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4a50      	ldr	r2, [pc, #320]	; (8001b44 <HAL_DMA_Init+0x1f4>)
 8001a04:	4293      	cmp	r3, r2
 8001a06:	d101      	bne.n	8001a0c <HAL_DMA_Init+0xbc>
 8001a08:	2301      	movs	r3, #1
 8001a0a:	e000      	b.n	8001a0e <HAL_DMA_Init+0xbe>
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	f000 813b 	beq.w	8001c8a <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2200      	movs	r2, #0
 8001a18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2202      	movs	r2, #2
 8001a20:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a37      	ldr	r2, [pc, #220]	; (8001b08 <HAL_DMA_Init+0x1b8>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d04a      	beq.n	8001ac4 <HAL_DMA_Init+0x174>
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4a36      	ldr	r2, [pc, #216]	; (8001b0c <HAL_DMA_Init+0x1bc>)
 8001a34:	4293      	cmp	r3, r2
 8001a36:	d045      	beq.n	8001ac4 <HAL_DMA_Init+0x174>
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a34      	ldr	r2, [pc, #208]	; (8001b10 <HAL_DMA_Init+0x1c0>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d040      	beq.n	8001ac4 <HAL_DMA_Init+0x174>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4a33      	ldr	r2, [pc, #204]	; (8001b14 <HAL_DMA_Init+0x1c4>)
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	d03b      	beq.n	8001ac4 <HAL_DMA_Init+0x174>
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4a31      	ldr	r2, [pc, #196]	; (8001b18 <HAL_DMA_Init+0x1c8>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d036      	beq.n	8001ac4 <HAL_DMA_Init+0x174>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4a30      	ldr	r2, [pc, #192]	; (8001b1c <HAL_DMA_Init+0x1cc>)
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	d031      	beq.n	8001ac4 <HAL_DMA_Init+0x174>
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a2e      	ldr	r2, [pc, #184]	; (8001b20 <HAL_DMA_Init+0x1d0>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d02c      	beq.n	8001ac4 <HAL_DMA_Init+0x174>
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4a2d      	ldr	r2, [pc, #180]	; (8001b24 <HAL_DMA_Init+0x1d4>)
 8001a70:	4293      	cmp	r3, r2
 8001a72:	d027      	beq.n	8001ac4 <HAL_DMA_Init+0x174>
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4a2b      	ldr	r2, [pc, #172]	; (8001b28 <HAL_DMA_Init+0x1d8>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d022      	beq.n	8001ac4 <HAL_DMA_Init+0x174>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4a2a      	ldr	r2, [pc, #168]	; (8001b2c <HAL_DMA_Init+0x1dc>)
 8001a84:	4293      	cmp	r3, r2
 8001a86:	d01d      	beq.n	8001ac4 <HAL_DMA_Init+0x174>
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a28      	ldr	r2, [pc, #160]	; (8001b30 <HAL_DMA_Init+0x1e0>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d018      	beq.n	8001ac4 <HAL_DMA_Init+0x174>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4a27      	ldr	r2, [pc, #156]	; (8001b34 <HAL_DMA_Init+0x1e4>)
 8001a98:	4293      	cmp	r3, r2
 8001a9a:	d013      	beq.n	8001ac4 <HAL_DMA_Init+0x174>
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4a25      	ldr	r2, [pc, #148]	; (8001b38 <HAL_DMA_Init+0x1e8>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d00e      	beq.n	8001ac4 <HAL_DMA_Init+0x174>
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4a24      	ldr	r2, [pc, #144]	; (8001b3c <HAL_DMA_Init+0x1ec>)
 8001aac:	4293      	cmp	r3, r2
 8001aae:	d009      	beq.n	8001ac4 <HAL_DMA_Init+0x174>
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4a22      	ldr	r2, [pc, #136]	; (8001b40 <HAL_DMA_Init+0x1f0>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d004      	beq.n	8001ac4 <HAL_DMA_Init+0x174>
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4a21      	ldr	r2, [pc, #132]	; (8001b44 <HAL_DMA_Init+0x1f4>)
 8001ac0:	4293      	cmp	r3, r2
 8001ac2:	d108      	bne.n	8001ad6 <HAL_DMA_Init+0x186>
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	681a      	ldr	r2, [r3, #0]
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f022 0201 	bic.w	r2, r2, #1
 8001ad2:	601a      	str	r2, [r3, #0]
 8001ad4:	e007      	b.n	8001ae6 <HAL_DMA_Init+0x196>
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	681a      	ldr	r2, [r3, #0]
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f022 0201 	bic.w	r2, r2, #1
 8001ae4:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001ae6:	e02f      	b.n	8001b48 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001ae8:	f7ff fd20 	bl	800152c <HAL_GetTick>
 8001aec:	4602      	mov	r2, r0
 8001aee:	693b      	ldr	r3, [r7, #16]
 8001af0:	1ad3      	subs	r3, r2, r3
 8001af2:	2b05      	cmp	r3, #5
 8001af4:	d928      	bls.n	8001b48 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2220      	movs	r2, #32
 8001afa:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2203      	movs	r2, #3
 8001b00:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8001b04:	2301      	movs	r3, #1
 8001b06:	e246      	b.n	8001f96 <HAL_DMA_Init+0x646>
 8001b08:	40020010 	.word	0x40020010
 8001b0c:	40020028 	.word	0x40020028
 8001b10:	40020040 	.word	0x40020040
 8001b14:	40020058 	.word	0x40020058
 8001b18:	40020070 	.word	0x40020070
 8001b1c:	40020088 	.word	0x40020088
 8001b20:	400200a0 	.word	0x400200a0
 8001b24:	400200b8 	.word	0x400200b8
 8001b28:	40020410 	.word	0x40020410
 8001b2c:	40020428 	.word	0x40020428
 8001b30:	40020440 	.word	0x40020440
 8001b34:	40020458 	.word	0x40020458
 8001b38:	40020470 	.word	0x40020470
 8001b3c:	40020488 	.word	0x40020488
 8001b40:	400204a0 	.word	0x400204a0
 8001b44:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f003 0301 	and.w	r3, r3, #1
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d1c8      	bne.n	8001ae8 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001b5e:	697a      	ldr	r2, [r7, #20]
 8001b60:	4b83      	ldr	r3, [pc, #524]	; (8001d70 <HAL_DMA_Init+0x420>)
 8001b62:	4013      	ands	r3, r2
 8001b64:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8001b6e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	691b      	ldr	r3, [r3, #16]
 8001b74:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b7a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	699b      	ldr	r3, [r3, #24]
 8001b80:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b86:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6a1b      	ldr	r3, [r3, #32]
 8001b8c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8001b8e:	697a      	ldr	r2, [r7, #20]
 8001b90:	4313      	orrs	r3, r2
 8001b92:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b98:	2b04      	cmp	r3, #4
 8001b9a:	d107      	bne.n	8001bac <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba4:	4313      	orrs	r3, r2
 8001ba6:	697a      	ldr	r2, [r7, #20]
 8001ba8:	4313      	orrs	r3, r2
 8001baa:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8001bac:	4b71      	ldr	r3, [pc, #452]	; (8001d74 <HAL_DMA_Init+0x424>)
 8001bae:	681a      	ldr	r2, [r3, #0]
 8001bb0:	4b71      	ldr	r3, [pc, #452]	; (8001d78 <HAL_DMA_Init+0x428>)
 8001bb2:	4013      	ands	r3, r2
 8001bb4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001bb8:	d328      	bcc.n	8001c0c <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	2b28      	cmp	r3, #40	; 0x28
 8001bc0:	d903      	bls.n	8001bca <HAL_DMA_Init+0x27a>
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	2b2e      	cmp	r3, #46	; 0x2e
 8001bc8:	d917      	bls.n	8001bfa <HAL_DMA_Init+0x2aa>
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	2b3e      	cmp	r3, #62	; 0x3e
 8001bd0:	d903      	bls.n	8001bda <HAL_DMA_Init+0x28a>
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	2b42      	cmp	r3, #66	; 0x42
 8001bd8:	d90f      	bls.n	8001bfa <HAL_DMA_Init+0x2aa>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	2b46      	cmp	r3, #70	; 0x46
 8001be0:	d903      	bls.n	8001bea <HAL_DMA_Init+0x29a>
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	2b48      	cmp	r3, #72	; 0x48
 8001be8:	d907      	bls.n	8001bfa <HAL_DMA_Init+0x2aa>
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	2b4e      	cmp	r3, #78	; 0x4e
 8001bf0:	d905      	bls.n	8001bfe <HAL_DMA_Init+0x2ae>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	2b52      	cmp	r3, #82	; 0x52
 8001bf8:	d801      	bhi.n	8001bfe <HAL_DMA_Init+0x2ae>
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	e000      	b.n	8001c00 <HAL_DMA_Init+0x2b0>
 8001bfe:	2300      	movs	r3, #0
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d003      	beq.n	8001c0c <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001c0a:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	697a      	ldr	r2, [r7, #20]
 8001c12:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	695b      	ldr	r3, [r3, #20]
 8001c1a:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001c1c:	697b      	ldr	r3, [r7, #20]
 8001c1e:	f023 0307 	bic.w	r3, r3, #7
 8001c22:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c28:	697a      	ldr	r2, [r7, #20]
 8001c2a:	4313      	orrs	r3, r2
 8001c2c:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c32:	2b04      	cmp	r3, #4
 8001c34:	d117      	bne.n	8001c66 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c3a:	697a      	ldr	r2, [r7, #20]
 8001c3c:	4313      	orrs	r3, r2
 8001c3e:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d00e      	beq.n	8001c66 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001c48:	6878      	ldr	r0, [r7, #4]
 8001c4a:	f002 fb3d 	bl	80042c8 <DMA_CheckFifoParam>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d008      	beq.n	8001c66 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2240      	movs	r2, #64	; 0x40
 8001c58:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8001c62:	2301      	movs	r3, #1
 8001c64:	e197      	b.n	8001f96 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	697a      	ldr	r2, [r7, #20]
 8001c6c:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001c6e:	6878      	ldr	r0, [r7, #4]
 8001c70:	f002 fa78 	bl	8004164 <DMA_CalcBaseAndBitshift>
 8001c74:	4603      	mov	r3, r0
 8001c76:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c7c:	f003 031f 	and.w	r3, r3, #31
 8001c80:	223f      	movs	r2, #63	; 0x3f
 8001c82:	409a      	lsls	r2, r3
 8001c84:	68bb      	ldr	r3, [r7, #8]
 8001c86:	609a      	str	r2, [r3, #8]
 8001c88:	e0cd      	b.n	8001e26 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4a3b      	ldr	r2, [pc, #236]	; (8001d7c <HAL_DMA_Init+0x42c>)
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d022      	beq.n	8001cda <HAL_DMA_Init+0x38a>
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a39      	ldr	r2, [pc, #228]	; (8001d80 <HAL_DMA_Init+0x430>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d01d      	beq.n	8001cda <HAL_DMA_Init+0x38a>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4a38      	ldr	r2, [pc, #224]	; (8001d84 <HAL_DMA_Init+0x434>)
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d018      	beq.n	8001cda <HAL_DMA_Init+0x38a>
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a36      	ldr	r2, [pc, #216]	; (8001d88 <HAL_DMA_Init+0x438>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d013      	beq.n	8001cda <HAL_DMA_Init+0x38a>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4a35      	ldr	r2, [pc, #212]	; (8001d8c <HAL_DMA_Init+0x43c>)
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d00e      	beq.n	8001cda <HAL_DMA_Init+0x38a>
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a33      	ldr	r2, [pc, #204]	; (8001d90 <HAL_DMA_Init+0x440>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d009      	beq.n	8001cda <HAL_DMA_Init+0x38a>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4a32      	ldr	r2, [pc, #200]	; (8001d94 <HAL_DMA_Init+0x444>)
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d004      	beq.n	8001cda <HAL_DMA_Init+0x38a>
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a30      	ldr	r2, [pc, #192]	; (8001d98 <HAL_DMA_Init+0x448>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d101      	bne.n	8001cde <HAL_DMA_Init+0x38e>
 8001cda:	2301      	movs	r3, #1
 8001cdc:	e000      	b.n	8001ce0 <HAL_DMA_Init+0x390>
 8001cde:	2300      	movs	r3, #0
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	f000 8097 	beq.w	8001e14 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4a24      	ldr	r2, [pc, #144]	; (8001d7c <HAL_DMA_Init+0x42c>)
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d021      	beq.n	8001d34 <HAL_DMA_Init+0x3e4>
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a22      	ldr	r2, [pc, #136]	; (8001d80 <HAL_DMA_Init+0x430>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d01c      	beq.n	8001d34 <HAL_DMA_Init+0x3e4>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4a21      	ldr	r2, [pc, #132]	; (8001d84 <HAL_DMA_Init+0x434>)
 8001d00:	4293      	cmp	r3, r2
 8001d02:	d017      	beq.n	8001d34 <HAL_DMA_Init+0x3e4>
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a1f      	ldr	r2, [pc, #124]	; (8001d88 <HAL_DMA_Init+0x438>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d012      	beq.n	8001d34 <HAL_DMA_Init+0x3e4>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4a1e      	ldr	r2, [pc, #120]	; (8001d8c <HAL_DMA_Init+0x43c>)
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d00d      	beq.n	8001d34 <HAL_DMA_Init+0x3e4>
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a1c      	ldr	r2, [pc, #112]	; (8001d90 <HAL_DMA_Init+0x440>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d008      	beq.n	8001d34 <HAL_DMA_Init+0x3e4>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4a1b      	ldr	r2, [pc, #108]	; (8001d94 <HAL_DMA_Init+0x444>)
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d003      	beq.n	8001d34 <HAL_DMA_Init+0x3e4>
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a19      	ldr	r2, [pc, #100]	; (8001d98 <HAL_DMA_Init+0x448>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2200      	movs	r2, #0
 8001d3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2202      	movs	r2, #2
 8001d42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8001d4e:	697a      	ldr	r2, [r7, #20]
 8001d50:	4b12      	ldr	r3, [pc, #72]	; (8001d9c <HAL_DMA_Init+0x44c>)
 8001d52:	4013      	ands	r3, r2
 8001d54:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	689b      	ldr	r3, [r3, #8]
 8001d5a:	2b40      	cmp	r3, #64	; 0x40
 8001d5c:	d020      	beq.n	8001da0 <HAL_DMA_Init+0x450>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	689b      	ldr	r3, [r3, #8]
 8001d62:	2b80      	cmp	r3, #128	; 0x80
 8001d64:	d102      	bne.n	8001d6c <HAL_DMA_Init+0x41c>
 8001d66:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001d6a:	e01a      	b.n	8001da2 <HAL_DMA_Init+0x452>
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	e018      	b.n	8001da2 <HAL_DMA_Init+0x452>
 8001d70:	fe10803f 	.word	0xfe10803f
 8001d74:	5c001000 	.word	0x5c001000
 8001d78:	ffff0000 	.word	0xffff0000
 8001d7c:	58025408 	.word	0x58025408
 8001d80:	5802541c 	.word	0x5802541c
 8001d84:	58025430 	.word	0x58025430
 8001d88:	58025444 	.word	0x58025444
 8001d8c:	58025458 	.word	0x58025458
 8001d90:	5802546c 	.word	0x5802546c
 8001d94:	58025480 	.word	0x58025480
 8001d98:	58025494 	.word	0x58025494
 8001d9c:	fffe000f 	.word	0xfffe000f
 8001da0:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001da2:	687a      	ldr	r2, [r7, #4]
 8001da4:	68d2      	ldr	r2, [r2, #12]
 8001da6:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001da8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	691b      	ldr	r3, [r3, #16]
 8001dae:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001db0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	695b      	ldr	r3, [r3, #20]
 8001db6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001db8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	699b      	ldr	r3, [r3, #24]
 8001dbe:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001dc0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	69db      	ldr	r3, [r3, #28]
 8001dc6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001dc8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6a1b      	ldr	r3, [r3, #32]
 8001dce:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001dd0:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001dd2:	697a      	ldr	r2, [r7, #20]
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	697a      	ldr	r2, [r7, #20]
 8001dde:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	461a      	mov	r2, r3
 8001de6:	4b6e      	ldr	r3, [pc, #440]	; (8001fa0 <HAL_DMA_Init+0x650>)
 8001de8:	4413      	add	r3, r2
 8001dea:	4a6e      	ldr	r2, [pc, #440]	; (8001fa4 <HAL_DMA_Init+0x654>)
 8001dec:	fba2 2303 	umull	r2, r3, r2, r3
 8001df0:	091b      	lsrs	r3, r3, #4
 8001df2:	009a      	lsls	r2, r3, #2
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001df8:	6878      	ldr	r0, [r7, #4]
 8001dfa:	f002 f9b3 	bl	8004164 <DMA_CalcBaseAndBitshift>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e06:	f003 031f 	and.w	r3, r3, #31
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	409a      	lsls	r2, r3
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	605a      	str	r2, [r3, #4]
 8001e12:	e008      	b.n	8001e26 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2240      	movs	r2, #64	; 0x40
 8001e18:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2203      	movs	r2, #3
 8001e1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8001e22:	2301      	movs	r3, #1
 8001e24:	e0b7      	b.n	8001f96 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4a5f      	ldr	r2, [pc, #380]	; (8001fa8 <HAL_DMA_Init+0x658>)
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d072      	beq.n	8001f16 <HAL_DMA_Init+0x5c6>
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a5d      	ldr	r2, [pc, #372]	; (8001fac <HAL_DMA_Init+0x65c>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d06d      	beq.n	8001f16 <HAL_DMA_Init+0x5c6>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4a5c      	ldr	r2, [pc, #368]	; (8001fb0 <HAL_DMA_Init+0x660>)
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d068      	beq.n	8001f16 <HAL_DMA_Init+0x5c6>
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a5a      	ldr	r2, [pc, #360]	; (8001fb4 <HAL_DMA_Init+0x664>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d063      	beq.n	8001f16 <HAL_DMA_Init+0x5c6>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4a59      	ldr	r2, [pc, #356]	; (8001fb8 <HAL_DMA_Init+0x668>)
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d05e      	beq.n	8001f16 <HAL_DMA_Init+0x5c6>
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a57      	ldr	r2, [pc, #348]	; (8001fbc <HAL_DMA_Init+0x66c>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d059      	beq.n	8001f16 <HAL_DMA_Init+0x5c6>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4a56      	ldr	r2, [pc, #344]	; (8001fc0 <HAL_DMA_Init+0x670>)
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d054      	beq.n	8001f16 <HAL_DMA_Init+0x5c6>
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a54      	ldr	r2, [pc, #336]	; (8001fc4 <HAL_DMA_Init+0x674>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d04f      	beq.n	8001f16 <HAL_DMA_Init+0x5c6>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4a53      	ldr	r2, [pc, #332]	; (8001fc8 <HAL_DMA_Init+0x678>)
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d04a      	beq.n	8001f16 <HAL_DMA_Init+0x5c6>
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a51      	ldr	r2, [pc, #324]	; (8001fcc <HAL_DMA_Init+0x67c>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d045      	beq.n	8001f16 <HAL_DMA_Init+0x5c6>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4a50      	ldr	r2, [pc, #320]	; (8001fd0 <HAL_DMA_Init+0x680>)
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d040      	beq.n	8001f16 <HAL_DMA_Init+0x5c6>
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a4e      	ldr	r2, [pc, #312]	; (8001fd4 <HAL_DMA_Init+0x684>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d03b      	beq.n	8001f16 <HAL_DMA_Init+0x5c6>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4a4d      	ldr	r2, [pc, #308]	; (8001fd8 <HAL_DMA_Init+0x688>)
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d036      	beq.n	8001f16 <HAL_DMA_Init+0x5c6>
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a4b      	ldr	r2, [pc, #300]	; (8001fdc <HAL_DMA_Init+0x68c>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d031      	beq.n	8001f16 <HAL_DMA_Init+0x5c6>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4a4a      	ldr	r2, [pc, #296]	; (8001fe0 <HAL_DMA_Init+0x690>)
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d02c      	beq.n	8001f16 <HAL_DMA_Init+0x5c6>
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a48      	ldr	r2, [pc, #288]	; (8001fe4 <HAL_DMA_Init+0x694>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d027      	beq.n	8001f16 <HAL_DMA_Init+0x5c6>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4a47      	ldr	r2, [pc, #284]	; (8001fe8 <HAL_DMA_Init+0x698>)
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d022      	beq.n	8001f16 <HAL_DMA_Init+0x5c6>
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a45      	ldr	r2, [pc, #276]	; (8001fec <HAL_DMA_Init+0x69c>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d01d      	beq.n	8001f16 <HAL_DMA_Init+0x5c6>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4a44      	ldr	r2, [pc, #272]	; (8001ff0 <HAL_DMA_Init+0x6a0>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d018      	beq.n	8001f16 <HAL_DMA_Init+0x5c6>
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4a42      	ldr	r2, [pc, #264]	; (8001ff4 <HAL_DMA_Init+0x6a4>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d013      	beq.n	8001f16 <HAL_DMA_Init+0x5c6>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4a41      	ldr	r2, [pc, #260]	; (8001ff8 <HAL_DMA_Init+0x6a8>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d00e      	beq.n	8001f16 <HAL_DMA_Init+0x5c6>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a3f      	ldr	r2, [pc, #252]	; (8001ffc <HAL_DMA_Init+0x6ac>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d009      	beq.n	8001f16 <HAL_DMA_Init+0x5c6>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4a3e      	ldr	r2, [pc, #248]	; (8002000 <HAL_DMA_Init+0x6b0>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d004      	beq.n	8001f16 <HAL_DMA_Init+0x5c6>
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a3c      	ldr	r2, [pc, #240]	; (8002004 <HAL_DMA_Init+0x6b4>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d101      	bne.n	8001f1a <HAL_DMA_Init+0x5ca>
 8001f16:	2301      	movs	r3, #1
 8001f18:	e000      	b.n	8001f1c <HAL_DMA_Init+0x5cc>
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d032      	beq.n	8001f86 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001f20:	6878      	ldr	r0, [r7, #4]
 8001f22:	f002 fa4d 	bl	80043c0 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	689b      	ldr	r3, [r3, #8]
 8001f2a:	2b80      	cmp	r3, #128	; 0x80
 8001f2c:	d102      	bne.n	8001f34 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2200      	movs	r2, #0
 8001f32:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	685a      	ldr	r2, [r3, #4]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f3c:	b2d2      	uxtb	r2, r2
 8001f3e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001f44:	687a      	ldr	r2, [r7, #4]
 8001f46:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001f48:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d010      	beq.n	8001f74 <HAL_DMA_Init+0x624>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	2b08      	cmp	r3, #8
 8001f58:	d80c      	bhi.n	8001f74 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001f5a:	6878      	ldr	r0, [r7, #4]
 8001f5c:	f002 faca 	bl	80044f4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001f64:	2200      	movs	r2, #0
 8001f66:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f6c:	687a      	ldr	r2, [r7, #4]
 8001f6e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8001f70:	605a      	str	r2, [r3, #4]
 8001f72:	e008      	b.n	8001f86 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2200      	movs	r2, #0
 8001f78:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2200      	movs	r2, #0
 8001f84:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2200      	movs	r2, #0
 8001f8a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2201      	movs	r2, #1
 8001f90:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001f94:	2300      	movs	r3, #0
}
 8001f96:	4618      	mov	r0, r3
 8001f98:	3718      	adds	r7, #24
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	bf00      	nop
 8001fa0:	a7fdabf8 	.word	0xa7fdabf8
 8001fa4:	cccccccd 	.word	0xcccccccd
 8001fa8:	40020010 	.word	0x40020010
 8001fac:	40020028 	.word	0x40020028
 8001fb0:	40020040 	.word	0x40020040
 8001fb4:	40020058 	.word	0x40020058
 8001fb8:	40020070 	.word	0x40020070
 8001fbc:	40020088 	.word	0x40020088
 8001fc0:	400200a0 	.word	0x400200a0
 8001fc4:	400200b8 	.word	0x400200b8
 8001fc8:	40020410 	.word	0x40020410
 8001fcc:	40020428 	.word	0x40020428
 8001fd0:	40020440 	.word	0x40020440
 8001fd4:	40020458 	.word	0x40020458
 8001fd8:	40020470 	.word	0x40020470
 8001fdc:	40020488 	.word	0x40020488
 8001fe0:	400204a0 	.word	0x400204a0
 8001fe4:	400204b8 	.word	0x400204b8
 8001fe8:	58025408 	.word	0x58025408
 8001fec:	5802541c 	.word	0x5802541c
 8001ff0:	58025430 	.word	0x58025430
 8001ff4:	58025444 	.word	0x58025444
 8001ff8:	58025458 	.word	0x58025458
 8001ffc:	5802546c 	.word	0x5802546c
 8002000:	58025480 	.word	0x58025480
 8002004:	58025494 	.word	0x58025494

08002008 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b086      	sub	sp, #24
 800200c:	af00      	add	r7, sp, #0
 800200e:	60f8      	str	r0, [r7, #12]
 8002010:	60b9      	str	r1, [r7, #8]
 8002012:	607a      	str	r2, [r7, #4]
 8002014:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002016:	2300      	movs	r3, #0
 8002018:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d101      	bne.n	8002024 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8002020:	2301      	movs	r3, #1
 8002022:	e226      	b.n	8002472 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800202a:	2b01      	cmp	r3, #1
 800202c:	d101      	bne.n	8002032 <HAL_DMA_Start_IT+0x2a>
 800202e:	2302      	movs	r3, #2
 8002030:	e21f      	b.n	8002472 <HAL_DMA_Start_IT+0x46a>
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	2201      	movs	r2, #1
 8002036:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002040:	b2db      	uxtb	r3, r3
 8002042:	2b01      	cmp	r3, #1
 8002044:	f040 820a 	bne.w	800245c <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	2202      	movs	r2, #2
 800204c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	2200      	movs	r2, #0
 8002054:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4a68      	ldr	r2, [pc, #416]	; (80021fc <HAL_DMA_Start_IT+0x1f4>)
 800205c:	4293      	cmp	r3, r2
 800205e:	d04a      	beq.n	80020f6 <HAL_DMA_Start_IT+0xee>
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a66      	ldr	r2, [pc, #408]	; (8002200 <HAL_DMA_Start_IT+0x1f8>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d045      	beq.n	80020f6 <HAL_DMA_Start_IT+0xee>
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4a65      	ldr	r2, [pc, #404]	; (8002204 <HAL_DMA_Start_IT+0x1fc>)
 8002070:	4293      	cmp	r3, r2
 8002072:	d040      	beq.n	80020f6 <HAL_DMA_Start_IT+0xee>
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a63      	ldr	r2, [pc, #396]	; (8002208 <HAL_DMA_Start_IT+0x200>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d03b      	beq.n	80020f6 <HAL_DMA_Start_IT+0xee>
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4a62      	ldr	r2, [pc, #392]	; (800220c <HAL_DMA_Start_IT+0x204>)
 8002084:	4293      	cmp	r3, r2
 8002086:	d036      	beq.n	80020f6 <HAL_DMA_Start_IT+0xee>
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a60      	ldr	r2, [pc, #384]	; (8002210 <HAL_DMA_Start_IT+0x208>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d031      	beq.n	80020f6 <HAL_DMA_Start_IT+0xee>
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4a5f      	ldr	r2, [pc, #380]	; (8002214 <HAL_DMA_Start_IT+0x20c>)
 8002098:	4293      	cmp	r3, r2
 800209a:	d02c      	beq.n	80020f6 <HAL_DMA_Start_IT+0xee>
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a5d      	ldr	r2, [pc, #372]	; (8002218 <HAL_DMA_Start_IT+0x210>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d027      	beq.n	80020f6 <HAL_DMA_Start_IT+0xee>
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4a5c      	ldr	r2, [pc, #368]	; (800221c <HAL_DMA_Start_IT+0x214>)
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d022      	beq.n	80020f6 <HAL_DMA_Start_IT+0xee>
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a5a      	ldr	r2, [pc, #360]	; (8002220 <HAL_DMA_Start_IT+0x218>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d01d      	beq.n	80020f6 <HAL_DMA_Start_IT+0xee>
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4a59      	ldr	r2, [pc, #356]	; (8002224 <HAL_DMA_Start_IT+0x21c>)
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d018      	beq.n	80020f6 <HAL_DMA_Start_IT+0xee>
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a57      	ldr	r2, [pc, #348]	; (8002228 <HAL_DMA_Start_IT+0x220>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d013      	beq.n	80020f6 <HAL_DMA_Start_IT+0xee>
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4a56      	ldr	r2, [pc, #344]	; (800222c <HAL_DMA_Start_IT+0x224>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d00e      	beq.n	80020f6 <HAL_DMA_Start_IT+0xee>
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a54      	ldr	r2, [pc, #336]	; (8002230 <HAL_DMA_Start_IT+0x228>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d009      	beq.n	80020f6 <HAL_DMA_Start_IT+0xee>
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4a53      	ldr	r2, [pc, #332]	; (8002234 <HAL_DMA_Start_IT+0x22c>)
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d004      	beq.n	80020f6 <HAL_DMA_Start_IT+0xee>
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a51      	ldr	r2, [pc, #324]	; (8002238 <HAL_DMA_Start_IT+0x230>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d108      	bne.n	8002108 <HAL_DMA_Start_IT+0x100>
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	681a      	ldr	r2, [r3, #0]
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f022 0201 	bic.w	r2, r2, #1
 8002104:	601a      	str	r2, [r3, #0]
 8002106:	e007      	b.n	8002118 <HAL_DMA_Start_IT+0x110>
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	681a      	ldr	r2, [r3, #0]
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f022 0201 	bic.w	r2, r2, #1
 8002116:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	687a      	ldr	r2, [r7, #4]
 800211c:	68b9      	ldr	r1, [r7, #8]
 800211e:	68f8      	ldr	r0, [r7, #12]
 8002120:	f001 fe74 	bl	8003e0c <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a34      	ldr	r2, [pc, #208]	; (80021fc <HAL_DMA_Start_IT+0x1f4>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d04a      	beq.n	80021c4 <HAL_DMA_Start_IT+0x1bc>
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4a33      	ldr	r2, [pc, #204]	; (8002200 <HAL_DMA_Start_IT+0x1f8>)
 8002134:	4293      	cmp	r3, r2
 8002136:	d045      	beq.n	80021c4 <HAL_DMA_Start_IT+0x1bc>
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a31      	ldr	r2, [pc, #196]	; (8002204 <HAL_DMA_Start_IT+0x1fc>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d040      	beq.n	80021c4 <HAL_DMA_Start_IT+0x1bc>
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4a30      	ldr	r2, [pc, #192]	; (8002208 <HAL_DMA_Start_IT+0x200>)
 8002148:	4293      	cmp	r3, r2
 800214a:	d03b      	beq.n	80021c4 <HAL_DMA_Start_IT+0x1bc>
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a2e      	ldr	r2, [pc, #184]	; (800220c <HAL_DMA_Start_IT+0x204>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d036      	beq.n	80021c4 <HAL_DMA_Start_IT+0x1bc>
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4a2d      	ldr	r2, [pc, #180]	; (8002210 <HAL_DMA_Start_IT+0x208>)
 800215c:	4293      	cmp	r3, r2
 800215e:	d031      	beq.n	80021c4 <HAL_DMA_Start_IT+0x1bc>
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a2b      	ldr	r2, [pc, #172]	; (8002214 <HAL_DMA_Start_IT+0x20c>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d02c      	beq.n	80021c4 <HAL_DMA_Start_IT+0x1bc>
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4a2a      	ldr	r2, [pc, #168]	; (8002218 <HAL_DMA_Start_IT+0x210>)
 8002170:	4293      	cmp	r3, r2
 8002172:	d027      	beq.n	80021c4 <HAL_DMA_Start_IT+0x1bc>
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a28      	ldr	r2, [pc, #160]	; (800221c <HAL_DMA_Start_IT+0x214>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d022      	beq.n	80021c4 <HAL_DMA_Start_IT+0x1bc>
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4a27      	ldr	r2, [pc, #156]	; (8002220 <HAL_DMA_Start_IT+0x218>)
 8002184:	4293      	cmp	r3, r2
 8002186:	d01d      	beq.n	80021c4 <HAL_DMA_Start_IT+0x1bc>
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a25      	ldr	r2, [pc, #148]	; (8002224 <HAL_DMA_Start_IT+0x21c>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d018      	beq.n	80021c4 <HAL_DMA_Start_IT+0x1bc>
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4a24      	ldr	r2, [pc, #144]	; (8002228 <HAL_DMA_Start_IT+0x220>)
 8002198:	4293      	cmp	r3, r2
 800219a:	d013      	beq.n	80021c4 <HAL_DMA_Start_IT+0x1bc>
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a22      	ldr	r2, [pc, #136]	; (800222c <HAL_DMA_Start_IT+0x224>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d00e      	beq.n	80021c4 <HAL_DMA_Start_IT+0x1bc>
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4a21      	ldr	r2, [pc, #132]	; (8002230 <HAL_DMA_Start_IT+0x228>)
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d009      	beq.n	80021c4 <HAL_DMA_Start_IT+0x1bc>
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a1f      	ldr	r2, [pc, #124]	; (8002234 <HAL_DMA_Start_IT+0x22c>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d004      	beq.n	80021c4 <HAL_DMA_Start_IT+0x1bc>
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4a1e      	ldr	r2, [pc, #120]	; (8002238 <HAL_DMA_Start_IT+0x230>)
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d101      	bne.n	80021c8 <HAL_DMA_Start_IT+0x1c0>
 80021c4:	2301      	movs	r3, #1
 80021c6:	e000      	b.n	80021ca <HAL_DMA_Start_IT+0x1c2>
 80021c8:	2300      	movs	r3, #0
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d036      	beq.n	800223c <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f023 021e 	bic.w	r2, r3, #30
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f042 0216 	orr.w	r2, r2, #22
 80021e0:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d03e      	beq.n	8002268 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	681a      	ldr	r2, [r3, #0]
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f042 0208 	orr.w	r2, r2, #8
 80021f8:	601a      	str	r2, [r3, #0]
 80021fa:	e035      	b.n	8002268 <HAL_DMA_Start_IT+0x260>
 80021fc:	40020010 	.word	0x40020010
 8002200:	40020028 	.word	0x40020028
 8002204:	40020040 	.word	0x40020040
 8002208:	40020058 	.word	0x40020058
 800220c:	40020070 	.word	0x40020070
 8002210:	40020088 	.word	0x40020088
 8002214:	400200a0 	.word	0x400200a0
 8002218:	400200b8 	.word	0x400200b8
 800221c:	40020410 	.word	0x40020410
 8002220:	40020428 	.word	0x40020428
 8002224:	40020440 	.word	0x40020440
 8002228:	40020458 	.word	0x40020458
 800222c:	40020470 	.word	0x40020470
 8002230:	40020488 	.word	0x40020488
 8002234:	400204a0 	.word	0x400204a0
 8002238:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f023 020e 	bic.w	r2, r3, #14
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f042 020a 	orr.w	r2, r2, #10
 800224e:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002254:	2b00      	cmp	r3, #0
 8002256:	d007      	beq.n	8002268 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	681a      	ldr	r2, [r3, #0]
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f042 0204 	orr.w	r2, r2, #4
 8002266:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a83      	ldr	r2, [pc, #524]	; (800247c <HAL_DMA_Start_IT+0x474>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d072      	beq.n	8002358 <HAL_DMA_Start_IT+0x350>
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4a82      	ldr	r2, [pc, #520]	; (8002480 <HAL_DMA_Start_IT+0x478>)
 8002278:	4293      	cmp	r3, r2
 800227a:	d06d      	beq.n	8002358 <HAL_DMA_Start_IT+0x350>
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a80      	ldr	r2, [pc, #512]	; (8002484 <HAL_DMA_Start_IT+0x47c>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d068      	beq.n	8002358 <HAL_DMA_Start_IT+0x350>
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4a7f      	ldr	r2, [pc, #508]	; (8002488 <HAL_DMA_Start_IT+0x480>)
 800228c:	4293      	cmp	r3, r2
 800228e:	d063      	beq.n	8002358 <HAL_DMA_Start_IT+0x350>
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a7d      	ldr	r2, [pc, #500]	; (800248c <HAL_DMA_Start_IT+0x484>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d05e      	beq.n	8002358 <HAL_DMA_Start_IT+0x350>
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4a7c      	ldr	r2, [pc, #496]	; (8002490 <HAL_DMA_Start_IT+0x488>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d059      	beq.n	8002358 <HAL_DMA_Start_IT+0x350>
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a7a      	ldr	r2, [pc, #488]	; (8002494 <HAL_DMA_Start_IT+0x48c>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d054      	beq.n	8002358 <HAL_DMA_Start_IT+0x350>
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4a79      	ldr	r2, [pc, #484]	; (8002498 <HAL_DMA_Start_IT+0x490>)
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d04f      	beq.n	8002358 <HAL_DMA_Start_IT+0x350>
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a77      	ldr	r2, [pc, #476]	; (800249c <HAL_DMA_Start_IT+0x494>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d04a      	beq.n	8002358 <HAL_DMA_Start_IT+0x350>
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4a76      	ldr	r2, [pc, #472]	; (80024a0 <HAL_DMA_Start_IT+0x498>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d045      	beq.n	8002358 <HAL_DMA_Start_IT+0x350>
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a74      	ldr	r2, [pc, #464]	; (80024a4 <HAL_DMA_Start_IT+0x49c>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d040      	beq.n	8002358 <HAL_DMA_Start_IT+0x350>
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4a73      	ldr	r2, [pc, #460]	; (80024a8 <HAL_DMA_Start_IT+0x4a0>)
 80022dc:	4293      	cmp	r3, r2
 80022de:	d03b      	beq.n	8002358 <HAL_DMA_Start_IT+0x350>
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a71      	ldr	r2, [pc, #452]	; (80024ac <HAL_DMA_Start_IT+0x4a4>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d036      	beq.n	8002358 <HAL_DMA_Start_IT+0x350>
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4a70      	ldr	r2, [pc, #448]	; (80024b0 <HAL_DMA_Start_IT+0x4a8>)
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d031      	beq.n	8002358 <HAL_DMA_Start_IT+0x350>
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a6e      	ldr	r2, [pc, #440]	; (80024b4 <HAL_DMA_Start_IT+0x4ac>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d02c      	beq.n	8002358 <HAL_DMA_Start_IT+0x350>
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4a6d      	ldr	r2, [pc, #436]	; (80024b8 <HAL_DMA_Start_IT+0x4b0>)
 8002304:	4293      	cmp	r3, r2
 8002306:	d027      	beq.n	8002358 <HAL_DMA_Start_IT+0x350>
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a6b      	ldr	r2, [pc, #428]	; (80024bc <HAL_DMA_Start_IT+0x4b4>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d022      	beq.n	8002358 <HAL_DMA_Start_IT+0x350>
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4a6a      	ldr	r2, [pc, #424]	; (80024c0 <HAL_DMA_Start_IT+0x4b8>)
 8002318:	4293      	cmp	r3, r2
 800231a:	d01d      	beq.n	8002358 <HAL_DMA_Start_IT+0x350>
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a68      	ldr	r2, [pc, #416]	; (80024c4 <HAL_DMA_Start_IT+0x4bc>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d018      	beq.n	8002358 <HAL_DMA_Start_IT+0x350>
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4a67      	ldr	r2, [pc, #412]	; (80024c8 <HAL_DMA_Start_IT+0x4c0>)
 800232c:	4293      	cmp	r3, r2
 800232e:	d013      	beq.n	8002358 <HAL_DMA_Start_IT+0x350>
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a65      	ldr	r2, [pc, #404]	; (80024cc <HAL_DMA_Start_IT+0x4c4>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d00e      	beq.n	8002358 <HAL_DMA_Start_IT+0x350>
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4a64      	ldr	r2, [pc, #400]	; (80024d0 <HAL_DMA_Start_IT+0x4c8>)
 8002340:	4293      	cmp	r3, r2
 8002342:	d009      	beq.n	8002358 <HAL_DMA_Start_IT+0x350>
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4a62      	ldr	r2, [pc, #392]	; (80024d4 <HAL_DMA_Start_IT+0x4cc>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d004      	beq.n	8002358 <HAL_DMA_Start_IT+0x350>
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4a61      	ldr	r2, [pc, #388]	; (80024d8 <HAL_DMA_Start_IT+0x4d0>)
 8002354:	4293      	cmp	r3, r2
 8002356:	d101      	bne.n	800235c <HAL_DMA_Start_IT+0x354>
 8002358:	2301      	movs	r3, #1
 800235a:	e000      	b.n	800235e <HAL_DMA_Start_IT+0x356>
 800235c:	2300      	movs	r3, #0
 800235e:	2b00      	cmp	r3, #0
 8002360:	d01a      	beq.n	8002398 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800236c:	2b00      	cmp	r3, #0
 800236e:	d007      	beq.n	8002380 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002374:	681a      	ldr	r2, [r3, #0]
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800237a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800237e:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002384:	2b00      	cmp	r3, #0
 8002386:	d007      	beq.n	8002398 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800238c:	681a      	ldr	r2, [r3, #0]
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002392:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002396:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a37      	ldr	r2, [pc, #220]	; (800247c <HAL_DMA_Start_IT+0x474>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d04a      	beq.n	8002438 <HAL_DMA_Start_IT+0x430>
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4a36      	ldr	r2, [pc, #216]	; (8002480 <HAL_DMA_Start_IT+0x478>)
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d045      	beq.n	8002438 <HAL_DMA_Start_IT+0x430>
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a34      	ldr	r2, [pc, #208]	; (8002484 <HAL_DMA_Start_IT+0x47c>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d040      	beq.n	8002438 <HAL_DMA_Start_IT+0x430>
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4a33      	ldr	r2, [pc, #204]	; (8002488 <HAL_DMA_Start_IT+0x480>)
 80023bc:	4293      	cmp	r3, r2
 80023be:	d03b      	beq.n	8002438 <HAL_DMA_Start_IT+0x430>
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a31      	ldr	r2, [pc, #196]	; (800248c <HAL_DMA_Start_IT+0x484>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d036      	beq.n	8002438 <HAL_DMA_Start_IT+0x430>
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4a30      	ldr	r2, [pc, #192]	; (8002490 <HAL_DMA_Start_IT+0x488>)
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d031      	beq.n	8002438 <HAL_DMA_Start_IT+0x430>
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a2e      	ldr	r2, [pc, #184]	; (8002494 <HAL_DMA_Start_IT+0x48c>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d02c      	beq.n	8002438 <HAL_DMA_Start_IT+0x430>
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4a2d      	ldr	r2, [pc, #180]	; (8002498 <HAL_DMA_Start_IT+0x490>)
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d027      	beq.n	8002438 <HAL_DMA_Start_IT+0x430>
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a2b      	ldr	r2, [pc, #172]	; (800249c <HAL_DMA_Start_IT+0x494>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d022      	beq.n	8002438 <HAL_DMA_Start_IT+0x430>
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4a2a      	ldr	r2, [pc, #168]	; (80024a0 <HAL_DMA_Start_IT+0x498>)
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d01d      	beq.n	8002438 <HAL_DMA_Start_IT+0x430>
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a28      	ldr	r2, [pc, #160]	; (80024a4 <HAL_DMA_Start_IT+0x49c>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d018      	beq.n	8002438 <HAL_DMA_Start_IT+0x430>
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4a27      	ldr	r2, [pc, #156]	; (80024a8 <HAL_DMA_Start_IT+0x4a0>)
 800240c:	4293      	cmp	r3, r2
 800240e:	d013      	beq.n	8002438 <HAL_DMA_Start_IT+0x430>
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a25      	ldr	r2, [pc, #148]	; (80024ac <HAL_DMA_Start_IT+0x4a4>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d00e      	beq.n	8002438 <HAL_DMA_Start_IT+0x430>
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4a24      	ldr	r2, [pc, #144]	; (80024b0 <HAL_DMA_Start_IT+0x4a8>)
 8002420:	4293      	cmp	r3, r2
 8002422:	d009      	beq.n	8002438 <HAL_DMA_Start_IT+0x430>
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a22      	ldr	r2, [pc, #136]	; (80024b4 <HAL_DMA_Start_IT+0x4ac>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d004      	beq.n	8002438 <HAL_DMA_Start_IT+0x430>
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4a21      	ldr	r2, [pc, #132]	; (80024b8 <HAL_DMA_Start_IT+0x4b0>)
 8002434:	4293      	cmp	r3, r2
 8002436:	d108      	bne.n	800244a <HAL_DMA_Start_IT+0x442>
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	681a      	ldr	r2, [r3, #0]
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f042 0201 	orr.w	r2, r2, #1
 8002446:	601a      	str	r2, [r3, #0]
 8002448:	e012      	b.n	8002470 <HAL_DMA_Start_IT+0x468>
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	681a      	ldr	r2, [r3, #0]
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f042 0201 	orr.w	r2, r2, #1
 8002458:	601a      	str	r2, [r3, #0]
 800245a:	e009      	b.n	8002470 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	2200      	movs	r2, #0
 8002460:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800246a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 800246c:	2301      	movs	r3, #1
 800246e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8002470:	7dfb      	ldrb	r3, [r7, #23]
}
 8002472:	4618      	mov	r0, r3
 8002474:	3718      	adds	r7, #24
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}
 800247a:	bf00      	nop
 800247c:	40020010 	.word	0x40020010
 8002480:	40020028 	.word	0x40020028
 8002484:	40020040 	.word	0x40020040
 8002488:	40020058 	.word	0x40020058
 800248c:	40020070 	.word	0x40020070
 8002490:	40020088 	.word	0x40020088
 8002494:	400200a0 	.word	0x400200a0
 8002498:	400200b8 	.word	0x400200b8
 800249c:	40020410 	.word	0x40020410
 80024a0:	40020428 	.word	0x40020428
 80024a4:	40020440 	.word	0x40020440
 80024a8:	40020458 	.word	0x40020458
 80024ac:	40020470 	.word	0x40020470
 80024b0:	40020488 	.word	0x40020488
 80024b4:	400204a0 	.word	0x400204a0
 80024b8:	400204b8 	.word	0x400204b8
 80024bc:	58025408 	.word	0x58025408
 80024c0:	5802541c 	.word	0x5802541c
 80024c4:	58025430 	.word	0x58025430
 80024c8:	58025444 	.word	0x58025444
 80024cc:	58025458 	.word	0x58025458
 80024d0:	5802546c 	.word	0x5802546c
 80024d4:	58025480 	.word	0x58025480
 80024d8:	58025494 	.word	0x58025494

080024dc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b086      	sub	sp, #24
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80024e4:	f7ff f822 	bl	800152c <HAL_GetTick>
 80024e8:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d101      	bne.n	80024f4 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80024f0:	2301      	movs	r3, #1
 80024f2:	e2dc      	b.n	8002aae <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80024fa:	b2db      	uxtb	r3, r3
 80024fc:	2b02      	cmp	r3, #2
 80024fe:	d008      	beq.n	8002512 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2280      	movs	r2, #128	; 0x80
 8002504:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2200      	movs	r2, #0
 800250a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 800250e:	2301      	movs	r3, #1
 8002510:	e2cd      	b.n	8002aae <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4a76      	ldr	r2, [pc, #472]	; (80026f0 <HAL_DMA_Abort+0x214>)
 8002518:	4293      	cmp	r3, r2
 800251a:	d04a      	beq.n	80025b2 <HAL_DMA_Abort+0xd6>
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a74      	ldr	r2, [pc, #464]	; (80026f4 <HAL_DMA_Abort+0x218>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d045      	beq.n	80025b2 <HAL_DMA_Abort+0xd6>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a73      	ldr	r2, [pc, #460]	; (80026f8 <HAL_DMA_Abort+0x21c>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d040      	beq.n	80025b2 <HAL_DMA_Abort+0xd6>
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a71      	ldr	r2, [pc, #452]	; (80026fc <HAL_DMA_Abort+0x220>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d03b      	beq.n	80025b2 <HAL_DMA_Abort+0xd6>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4a70      	ldr	r2, [pc, #448]	; (8002700 <HAL_DMA_Abort+0x224>)
 8002540:	4293      	cmp	r3, r2
 8002542:	d036      	beq.n	80025b2 <HAL_DMA_Abort+0xd6>
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a6e      	ldr	r2, [pc, #440]	; (8002704 <HAL_DMA_Abort+0x228>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d031      	beq.n	80025b2 <HAL_DMA_Abort+0xd6>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4a6d      	ldr	r2, [pc, #436]	; (8002708 <HAL_DMA_Abort+0x22c>)
 8002554:	4293      	cmp	r3, r2
 8002556:	d02c      	beq.n	80025b2 <HAL_DMA_Abort+0xd6>
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a6b      	ldr	r2, [pc, #428]	; (800270c <HAL_DMA_Abort+0x230>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d027      	beq.n	80025b2 <HAL_DMA_Abort+0xd6>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a6a      	ldr	r2, [pc, #424]	; (8002710 <HAL_DMA_Abort+0x234>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d022      	beq.n	80025b2 <HAL_DMA_Abort+0xd6>
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a68      	ldr	r2, [pc, #416]	; (8002714 <HAL_DMA_Abort+0x238>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d01d      	beq.n	80025b2 <HAL_DMA_Abort+0xd6>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4a67      	ldr	r2, [pc, #412]	; (8002718 <HAL_DMA_Abort+0x23c>)
 800257c:	4293      	cmp	r3, r2
 800257e:	d018      	beq.n	80025b2 <HAL_DMA_Abort+0xd6>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a65      	ldr	r2, [pc, #404]	; (800271c <HAL_DMA_Abort+0x240>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d013      	beq.n	80025b2 <HAL_DMA_Abort+0xd6>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a64      	ldr	r2, [pc, #400]	; (8002720 <HAL_DMA_Abort+0x244>)
 8002590:	4293      	cmp	r3, r2
 8002592:	d00e      	beq.n	80025b2 <HAL_DMA_Abort+0xd6>
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a62      	ldr	r2, [pc, #392]	; (8002724 <HAL_DMA_Abort+0x248>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d009      	beq.n	80025b2 <HAL_DMA_Abort+0xd6>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a61      	ldr	r2, [pc, #388]	; (8002728 <HAL_DMA_Abort+0x24c>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d004      	beq.n	80025b2 <HAL_DMA_Abort+0xd6>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a5f      	ldr	r2, [pc, #380]	; (800272c <HAL_DMA_Abort+0x250>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d101      	bne.n	80025b6 <HAL_DMA_Abort+0xda>
 80025b2:	2301      	movs	r3, #1
 80025b4:	e000      	b.n	80025b8 <HAL_DMA_Abort+0xdc>
 80025b6:	2300      	movs	r3, #0
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d013      	beq.n	80025e4 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	681a      	ldr	r2, [r3, #0]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f022 021e 	bic.w	r2, r2, #30
 80025ca:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	695a      	ldr	r2, [r3, #20]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80025da:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	617b      	str	r3, [r7, #20]
 80025e2:	e00a      	b.n	80025fa <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	681a      	ldr	r2, [r3, #0]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f022 020e 	bic.w	r2, r2, #14
 80025f2:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4a3c      	ldr	r2, [pc, #240]	; (80026f0 <HAL_DMA_Abort+0x214>)
 8002600:	4293      	cmp	r3, r2
 8002602:	d072      	beq.n	80026ea <HAL_DMA_Abort+0x20e>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a3a      	ldr	r2, [pc, #232]	; (80026f4 <HAL_DMA_Abort+0x218>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d06d      	beq.n	80026ea <HAL_DMA_Abort+0x20e>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4a39      	ldr	r2, [pc, #228]	; (80026f8 <HAL_DMA_Abort+0x21c>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d068      	beq.n	80026ea <HAL_DMA_Abort+0x20e>
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a37      	ldr	r2, [pc, #220]	; (80026fc <HAL_DMA_Abort+0x220>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d063      	beq.n	80026ea <HAL_DMA_Abort+0x20e>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a36      	ldr	r2, [pc, #216]	; (8002700 <HAL_DMA_Abort+0x224>)
 8002628:	4293      	cmp	r3, r2
 800262a:	d05e      	beq.n	80026ea <HAL_DMA_Abort+0x20e>
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a34      	ldr	r2, [pc, #208]	; (8002704 <HAL_DMA_Abort+0x228>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d059      	beq.n	80026ea <HAL_DMA_Abort+0x20e>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4a33      	ldr	r2, [pc, #204]	; (8002708 <HAL_DMA_Abort+0x22c>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d054      	beq.n	80026ea <HAL_DMA_Abort+0x20e>
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a31      	ldr	r2, [pc, #196]	; (800270c <HAL_DMA_Abort+0x230>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d04f      	beq.n	80026ea <HAL_DMA_Abort+0x20e>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4a30      	ldr	r2, [pc, #192]	; (8002710 <HAL_DMA_Abort+0x234>)
 8002650:	4293      	cmp	r3, r2
 8002652:	d04a      	beq.n	80026ea <HAL_DMA_Abort+0x20e>
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a2e      	ldr	r2, [pc, #184]	; (8002714 <HAL_DMA_Abort+0x238>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d045      	beq.n	80026ea <HAL_DMA_Abort+0x20e>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4a2d      	ldr	r2, [pc, #180]	; (8002718 <HAL_DMA_Abort+0x23c>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d040      	beq.n	80026ea <HAL_DMA_Abort+0x20e>
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a2b      	ldr	r2, [pc, #172]	; (800271c <HAL_DMA_Abort+0x240>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d03b      	beq.n	80026ea <HAL_DMA_Abort+0x20e>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4a2a      	ldr	r2, [pc, #168]	; (8002720 <HAL_DMA_Abort+0x244>)
 8002678:	4293      	cmp	r3, r2
 800267a:	d036      	beq.n	80026ea <HAL_DMA_Abort+0x20e>
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a28      	ldr	r2, [pc, #160]	; (8002724 <HAL_DMA_Abort+0x248>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d031      	beq.n	80026ea <HAL_DMA_Abort+0x20e>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4a27      	ldr	r2, [pc, #156]	; (8002728 <HAL_DMA_Abort+0x24c>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d02c      	beq.n	80026ea <HAL_DMA_Abort+0x20e>
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a25      	ldr	r2, [pc, #148]	; (800272c <HAL_DMA_Abort+0x250>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d027      	beq.n	80026ea <HAL_DMA_Abort+0x20e>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4a24      	ldr	r2, [pc, #144]	; (8002730 <HAL_DMA_Abort+0x254>)
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d022      	beq.n	80026ea <HAL_DMA_Abort+0x20e>
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a22      	ldr	r2, [pc, #136]	; (8002734 <HAL_DMA_Abort+0x258>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d01d      	beq.n	80026ea <HAL_DMA_Abort+0x20e>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4a21      	ldr	r2, [pc, #132]	; (8002738 <HAL_DMA_Abort+0x25c>)
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d018      	beq.n	80026ea <HAL_DMA_Abort+0x20e>
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a1f      	ldr	r2, [pc, #124]	; (800273c <HAL_DMA_Abort+0x260>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d013      	beq.n	80026ea <HAL_DMA_Abort+0x20e>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4a1e      	ldr	r2, [pc, #120]	; (8002740 <HAL_DMA_Abort+0x264>)
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d00e      	beq.n	80026ea <HAL_DMA_Abort+0x20e>
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a1c      	ldr	r2, [pc, #112]	; (8002744 <HAL_DMA_Abort+0x268>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d009      	beq.n	80026ea <HAL_DMA_Abort+0x20e>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a1b      	ldr	r2, [pc, #108]	; (8002748 <HAL_DMA_Abort+0x26c>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d004      	beq.n	80026ea <HAL_DMA_Abort+0x20e>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a19      	ldr	r2, [pc, #100]	; (800274c <HAL_DMA_Abort+0x270>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d132      	bne.n	8002750 <HAL_DMA_Abort+0x274>
 80026ea:	2301      	movs	r3, #1
 80026ec:	e031      	b.n	8002752 <HAL_DMA_Abort+0x276>
 80026ee:	bf00      	nop
 80026f0:	40020010 	.word	0x40020010
 80026f4:	40020028 	.word	0x40020028
 80026f8:	40020040 	.word	0x40020040
 80026fc:	40020058 	.word	0x40020058
 8002700:	40020070 	.word	0x40020070
 8002704:	40020088 	.word	0x40020088
 8002708:	400200a0 	.word	0x400200a0
 800270c:	400200b8 	.word	0x400200b8
 8002710:	40020410 	.word	0x40020410
 8002714:	40020428 	.word	0x40020428
 8002718:	40020440 	.word	0x40020440
 800271c:	40020458 	.word	0x40020458
 8002720:	40020470 	.word	0x40020470
 8002724:	40020488 	.word	0x40020488
 8002728:	400204a0 	.word	0x400204a0
 800272c:	400204b8 	.word	0x400204b8
 8002730:	58025408 	.word	0x58025408
 8002734:	5802541c 	.word	0x5802541c
 8002738:	58025430 	.word	0x58025430
 800273c:	58025444 	.word	0x58025444
 8002740:	58025458 	.word	0x58025458
 8002744:	5802546c 	.word	0x5802546c
 8002748:	58025480 	.word	0x58025480
 800274c:	58025494 	.word	0x58025494
 8002750:	2300      	movs	r3, #0
 8002752:	2b00      	cmp	r3, #0
 8002754:	d007      	beq.n	8002766 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800275a:	681a      	ldr	r2, [r3, #0]
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002760:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002764:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4a6d      	ldr	r2, [pc, #436]	; (8002920 <HAL_DMA_Abort+0x444>)
 800276c:	4293      	cmp	r3, r2
 800276e:	d04a      	beq.n	8002806 <HAL_DMA_Abort+0x32a>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a6b      	ldr	r2, [pc, #428]	; (8002924 <HAL_DMA_Abort+0x448>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d045      	beq.n	8002806 <HAL_DMA_Abort+0x32a>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4a6a      	ldr	r2, [pc, #424]	; (8002928 <HAL_DMA_Abort+0x44c>)
 8002780:	4293      	cmp	r3, r2
 8002782:	d040      	beq.n	8002806 <HAL_DMA_Abort+0x32a>
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a68      	ldr	r2, [pc, #416]	; (800292c <HAL_DMA_Abort+0x450>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d03b      	beq.n	8002806 <HAL_DMA_Abort+0x32a>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4a67      	ldr	r2, [pc, #412]	; (8002930 <HAL_DMA_Abort+0x454>)
 8002794:	4293      	cmp	r3, r2
 8002796:	d036      	beq.n	8002806 <HAL_DMA_Abort+0x32a>
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a65      	ldr	r2, [pc, #404]	; (8002934 <HAL_DMA_Abort+0x458>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d031      	beq.n	8002806 <HAL_DMA_Abort+0x32a>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4a64      	ldr	r2, [pc, #400]	; (8002938 <HAL_DMA_Abort+0x45c>)
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d02c      	beq.n	8002806 <HAL_DMA_Abort+0x32a>
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a62      	ldr	r2, [pc, #392]	; (800293c <HAL_DMA_Abort+0x460>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d027      	beq.n	8002806 <HAL_DMA_Abort+0x32a>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4a61      	ldr	r2, [pc, #388]	; (8002940 <HAL_DMA_Abort+0x464>)
 80027bc:	4293      	cmp	r3, r2
 80027be:	d022      	beq.n	8002806 <HAL_DMA_Abort+0x32a>
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a5f      	ldr	r2, [pc, #380]	; (8002944 <HAL_DMA_Abort+0x468>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d01d      	beq.n	8002806 <HAL_DMA_Abort+0x32a>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4a5e      	ldr	r2, [pc, #376]	; (8002948 <HAL_DMA_Abort+0x46c>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d018      	beq.n	8002806 <HAL_DMA_Abort+0x32a>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a5c      	ldr	r2, [pc, #368]	; (800294c <HAL_DMA_Abort+0x470>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d013      	beq.n	8002806 <HAL_DMA_Abort+0x32a>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4a5b      	ldr	r2, [pc, #364]	; (8002950 <HAL_DMA_Abort+0x474>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d00e      	beq.n	8002806 <HAL_DMA_Abort+0x32a>
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a59      	ldr	r2, [pc, #356]	; (8002954 <HAL_DMA_Abort+0x478>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d009      	beq.n	8002806 <HAL_DMA_Abort+0x32a>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4a58      	ldr	r2, [pc, #352]	; (8002958 <HAL_DMA_Abort+0x47c>)
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d004      	beq.n	8002806 <HAL_DMA_Abort+0x32a>
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a56      	ldr	r2, [pc, #344]	; (800295c <HAL_DMA_Abort+0x480>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d108      	bne.n	8002818 <HAL_DMA_Abort+0x33c>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	681a      	ldr	r2, [r3, #0]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f022 0201 	bic.w	r2, r2, #1
 8002814:	601a      	str	r2, [r3, #0]
 8002816:	e007      	b.n	8002828 <HAL_DMA_Abort+0x34c>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	681a      	ldr	r2, [r3, #0]
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f022 0201 	bic.w	r2, r2, #1
 8002826:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002828:	e013      	b.n	8002852 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800282a:	f7fe fe7f 	bl	800152c <HAL_GetTick>
 800282e:	4602      	mov	r2, r0
 8002830:	693b      	ldr	r3, [r7, #16]
 8002832:	1ad3      	subs	r3, r2, r3
 8002834:	2b05      	cmp	r3, #5
 8002836:	d90c      	bls.n	8002852 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2220      	movs	r2, #32
 800283c:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2200      	movs	r2, #0
 8002842:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2203      	movs	r2, #3
 800284a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 800284e:	2301      	movs	r3, #1
 8002850:	e12d      	b.n	8002aae <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f003 0301 	and.w	r3, r3, #1
 800285a:	2b00      	cmp	r3, #0
 800285c:	d1e5      	bne.n	800282a <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a2f      	ldr	r2, [pc, #188]	; (8002920 <HAL_DMA_Abort+0x444>)
 8002864:	4293      	cmp	r3, r2
 8002866:	d04a      	beq.n	80028fe <HAL_DMA_Abort+0x422>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a2d      	ldr	r2, [pc, #180]	; (8002924 <HAL_DMA_Abort+0x448>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d045      	beq.n	80028fe <HAL_DMA_Abort+0x422>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a2c      	ldr	r2, [pc, #176]	; (8002928 <HAL_DMA_Abort+0x44c>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d040      	beq.n	80028fe <HAL_DMA_Abort+0x422>
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a2a      	ldr	r2, [pc, #168]	; (800292c <HAL_DMA_Abort+0x450>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d03b      	beq.n	80028fe <HAL_DMA_Abort+0x422>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4a29      	ldr	r2, [pc, #164]	; (8002930 <HAL_DMA_Abort+0x454>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d036      	beq.n	80028fe <HAL_DMA_Abort+0x422>
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a27      	ldr	r2, [pc, #156]	; (8002934 <HAL_DMA_Abort+0x458>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d031      	beq.n	80028fe <HAL_DMA_Abort+0x422>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4a26      	ldr	r2, [pc, #152]	; (8002938 <HAL_DMA_Abort+0x45c>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d02c      	beq.n	80028fe <HAL_DMA_Abort+0x422>
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a24      	ldr	r2, [pc, #144]	; (800293c <HAL_DMA_Abort+0x460>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d027      	beq.n	80028fe <HAL_DMA_Abort+0x422>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4a23      	ldr	r2, [pc, #140]	; (8002940 <HAL_DMA_Abort+0x464>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d022      	beq.n	80028fe <HAL_DMA_Abort+0x422>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a21      	ldr	r2, [pc, #132]	; (8002944 <HAL_DMA_Abort+0x468>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d01d      	beq.n	80028fe <HAL_DMA_Abort+0x422>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4a20      	ldr	r2, [pc, #128]	; (8002948 <HAL_DMA_Abort+0x46c>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d018      	beq.n	80028fe <HAL_DMA_Abort+0x422>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a1e      	ldr	r2, [pc, #120]	; (800294c <HAL_DMA_Abort+0x470>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d013      	beq.n	80028fe <HAL_DMA_Abort+0x422>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4a1d      	ldr	r2, [pc, #116]	; (8002950 <HAL_DMA_Abort+0x474>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	d00e      	beq.n	80028fe <HAL_DMA_Abort+0x422>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a1b      	ldr	r2, [pc, #108]	; (8002954 <HAL_DMA_Abort+0x478>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d009      	beq.n	80028fe <HAL_DMA_Abort+0x422>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4a1a      	ldr	r2, [pc, #104]	; (8002958 <HAL_DMA_Abort+0x47c>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d004      	beq.n	80028fe <HAL_DMA_Abort+0x422>
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a18      	ldr	r2, [pc, #96]	; (800295c <HAL_DMA_Abort+0x480>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d101      	bne.n	8002902 <HAL_DMA_Abort+0x426>
 80028fe:	2301      	movs	r3, #1
 8002900:	e000      	b.n	8002904 <HAL_DMA_Abort+0x428>
 8002902:	2300      	movs	r3, #0
 8002904:	2b00      	cmp	r3, #0
 8002906:	d02b      	beq.n	8002960 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800290c:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002912:	f003 031f 	and.w	r3, r3, #31
 8002916:	223f      	movs	r2, #63	; 0x3f
 8002918:	409a      	lsls	r2, r3
 800291a:	68bb      	ldr	r3, [r7, #8]
 800291c:	609a      	str	r2, [r3, #8]
 800291e:	e02a      	b.n	8002976 <HAL_DMA_Abort+0x49a>
 8002920:	40020010 	.word	0x40020010
 8002924:	40020028 	.word	0x40020028
 8002928:	40020040 	.word	0x40020040
 800292c:	40020058 	.word	0x40020058
 8002930:	40020070 	.word	0x40020070
 8002934:	40020088 	.word	0x40020088
 8002938:	400200a0 	.word	0x400200a0
 800293c:	400200b8 	.word	0x400200b8
 8002940:	40020410 	.word	0x40020410
 8002944:	40020428 	.word	0x40020428
 8002948:	40020440 	.word	0x40020440
 800294c:	40020458 	.word	0x40020458
 8002950:	40020470 	.word	0x40020470
 8002954:	40020488 	.word	0x40020488
 8002958:	400204a0 	.word	0x400204a0
 800295c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002964:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800296a:	f003 031f 	and.w	r3, r3, #31
 800296e:	2201      	movs	r2, #1
 8002970:	409a      	lsls	r2, r3
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4a4f      	ldr	r2, [pc, #316]	; (8002ab8 <HAL_DMA_Abort+0x5dc>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d072      	beq.n	8002a66 <HAL_DMA_Abort+0x58a>
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a4d      	ldr	r2, [pc, #308]	; (8002abc <HAL_DMA_Abort+0x5e0>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d06d      	beq.n	8002a66 <HAL_DMA_Abort+0x58a>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4a4c      	ldr	r2, [pc, #304]	; (8002ac0 <HAL_DMA_Abort+0x5e4>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d068      	beq.n	8002a66 <HAL_DMA_Abort+0x58a>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a4a      	ldr	r2, [pc, #296]	; (8002ac4 <HAL_DMA_Abort+0x5e8>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d063      	beq.n	8002a66 <HAL_DMA_Abort+0x58a>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4a49      	ldr	r2, [pc, #292]	; (8002ac8 <HAL_DMA_Abort+0x5ec>)
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d05e      	beq.n	8002a66 <HAL_DMA_Abort+0x58a>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a47      	ldr	r2, [pc, #284]	; (8002acc <HAL_DMA_Abort+0x5f0>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d059      	beq.n	8002a66 <HAL_DMA_Abort+0x58a>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4a46      	ldr	r2, [pc, #280]	; (8002ad0 <HAL_DMA_Abort+0x5f4>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d054      	beq.n	8002a66 <HAL_DMA_Abort+0x58a>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a44      	ldr	r2, [pc, #272]	; (8002ad4 <HAL_DMA_Abort+0x5f8>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d04f      	beq.n	8002a66 <HAL_DMA_Abort+0x58a>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4a43      	ldr	r2, [pc, #268]	; (8002ad8 <HAL_DMA_Abort+0x5fc>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d04a      	beq.n	8002a66 <HAL_DMA_Abort+0x58a>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a41      	ldr	r2, [pc, #260]	; (8002adc <HAL_DMA_Abort+0x600>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d045      	beq.n	8002a66 <HAL_DMA_Abort+0x58a>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4a40      	ldr	r2, [pc, #256]	; (8002ae0 <HAL_DMA_Abort+0x604>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d040      	beq.n	8002a66 <HAL_DMA_Abort+0x58a>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a3e      	ldr	r2, [pc, #248]	; (8002ae4 <HAL_DMA_Abort+0x608>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d03b      	beq.n	8002a66 <HAL_DMA_Abort+0x58a>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4a3d      	ldr	r2, [pc, #244]	; (8002ae8 <HAL_DMA_Abort+0x60c>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d036      	beq.n	8002a66 <HAL_DMA_Abort+0x58a>
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a3b      	ldr	r2, [pc, #236]	; (8002aec <HAL_DMA_Abort+0x610>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d031      	beq.n	8002a66 <HAL_DMA_Abort+0x58a>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4a3a      	ldr	r2, [pc, #232]	; (8002af0 <HAL_DMA_Abort+0x614>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d02c      	beq.n	8002a66 <HAL_DMA_Abort+0x58a>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a38      	ldr	r2, [pc, #224]	; (8002af4 <HAL_DMA_Abort+0x618>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d027      	beq.n	8002a66 <HAL_DMA_Abort+0x58a>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4a37      	ldr	r2, [pc, #220]	; (8002af8 <HAL_DMA_Abort+0x61c>)
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d022      	beq.n	8002a66 <HAL_DMA_Abort+0x58a>
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a35      	ldr	r2, [pc, #212]	; (8002afc <HAL_DMA_Abort+0x620>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d01d      	beq.n	8002a66 <HAL_DMA_Abort+0x58a>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4a34      	ldr	r2, [pc, #208]	; (8002b00 <HAL_DMA_Abort+0x624>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d018      	beq.n	8002a66 <HAL_DMA_Abort+0x58a>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a32      	ldr	r2, [pc, #200]	; (8002b04 <HAL_DMA_Abort+0x628>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d013      	beq.n	8002a66 <HAL_DMA_Abort+0x58a>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4a31      	ldr	r2, [pc, #196]	; (8002b08 <HAL_DMA_Abort+0x62c>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d00e      	beq.n	8002a66 <HAL_DMA_Abort+0x58a>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a2f      	ldr	r2, [pc, #188]	; (8002b0c <HAL_DMA_Abort+0x630>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d009      	beq.n	8002a66 <HAL_DMA_Abort+0x58a>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4a2e      	ldr	r2, [pc, #184]	; (8002b10 <HAL_DMA_Abort+0x634>)
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d004      	beq.n	8002a66 <HAL_DMA_Abort+0x58a>
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a2c      	ldr	r2, [pc, #176]	; (8002b14 <HAL_DMA_Abort+0x638>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d101      	bne.n	8002a6a <HAL_DMA_Abort+0x58e>
 8002a66:	2301      	movs	r3, #1
 8002a68:	e000      	b.n	8002a6c <HAL_DMA_Abort+0x590>
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d015      	beq.n	8002a9c <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002a74:	687a      	ldr	r2, [r7, #4]
 8002a76:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002a78:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d00c      	beq.n	8002a9c <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a86:	681a      	ldr	r2, [r3, #0]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a8c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002a90:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a96:	687a      	ldr	r2, [r7, #4]
 8002a98:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002a9a:	605a      	str	r2, [r3, #4]
      }
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2201      	movs	r2, #1
 8002aa8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }

  return HAL_OK;
 8002aac:	2300      	movs	r3, #0
}
 8002aae:	4618      	mov	r0, r3
 8002ab0:	3718      	adds	r7, #24
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}
 8002ab6:	bf00      	nop
 8002ab8:	40020010 	.word	0x40020010
 8002abc:	40020028 	.word	0x40020028
 8002ac0:	40020040 	.word	0x40020040
 8002ac4:	40020058 	.word	0x40020058
 8002ac8:	40020070 	.word	0x40020070
 8002acc:	40020088 	.word	0x40020088
 8002ad0:	400200a0 	.word	0x400200a0
 8002ad4:	400200b8 	.word	0x400200b8
 8002ad8:	40020410 	.word	0x40020410
 8002adc:	40020428 	.word	0x40020428
 8002ae0:	40020440 	.word	0x40020440
 8002ae4:	40020458 	.word	0x40020458
 8002ae8:	40020470 	.word	0x40020470
 8002aec:	40020488 	.word	0x40020488
 8002af0:	400204a0 	.word	0x400204a0
 8002af4:	400204b8 	.word	0x400204b8
 8002af8:	58025408 	.word	0x58025408
 8002afc:	5802541c 	.word	0x5802541c
 8002b00:	58025430 	.word	0x58025430
 8002b04:	58025444 	.word	0x58025444
 8002b08:	58025458 	.word	0x58025458
 8002b0c:	5802546c 	.word	0x5802546c
 8002b10:	58025480 	.word	0x58025480
 8002b14:	58025494 	.word	0x58025494

08002b18 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b084      	sub	sp, #16
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d101      	bne.n	8002b2a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8002b26:	2301      	movs	r3, #1
 8002b28:	e205      	b.n	8002f36 <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002b30:	b2db      	uxtb	r3, r3
 8002b32:	2b02      	cmp	r3, #2
 8002b34:	d004      	beq.n	8002b40 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2280      	movs	r2, #128	; 0x80
 8002b3a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	e1fa      	b.n	8002f36 <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a8c      	ldr	r2, [pc, #560]	; (8002d78 <HAL_DMA_Abort_IT+0x260>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d04a      	beq.n	8002be0 <HAL_DMA_Abort_IT+0xc8>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4a8b      	ldr	r2, [pc, #556]	; (8002d7c <HAL_DMA_Abort_IT+0x264>)
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d045      	beq.n	8002be0 <HAL_DMA_Abort_IT+0xc8>
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4a89      	ldr	r2, [pc, #548]	; (8002d80 <HAL_DMA_Abort_IT+0x268>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d040      	beq.n	8002be0 <HAL_DMA_Abort_IT+0xc8>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4a88      	ldr	r2, [pc, #544]	; (8002d84 <HAL_DMA_Abort_IT+0x26c>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d03b      	beq.n	8002be0 <HAL_DMA_Abort_IT+0xc8>
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a86      	ldr	r2, [pc, #536]	; (8002d88 <HAL_DMA_Abort_IT+0x270>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d036      	beq.n	8002be0 <HAL_DMA_Abort_IT+0xc8>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4a85      	ldr	r2, [pc, #532]	; (8002d8c <HAL_DMA_Abort_IT+0x274>)
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d031      	beq.n	8002be0 <HAL_DMA_Abort_IT+0xc8>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a83      	ldr	r2, [pc, #524]	; (8002d90 <HAL_DMA_Abort_IT+0x278>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d02c      	beq.n	8002be0 <HAL_DMA_Abort_IT+0xc8>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4a82      	ldr	r2, [pc, #520]	; (8002d94 <HAL_DMA_Abort_IT+0x27c>)
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d027      	beq.n	8002be0 <HAL_DMA_Abort_IT+0xc8>
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a80      	ldr	r2, [pc, #512]	; (8002d98 <HAL_DMA_Abort_IT+0x280>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d022      	beq.n	8002be0 <HAL_DMA_Abort_IT+0xc8>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4a7f      	ldr	r2, [pc, #508]	; (8002d9c <HAL_DMA_Abort_IT+0x284>)
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d01d      	beq.n	8002be0 <HAL_DMA_Abort_IT+0xc8>
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a7d      	ldr	r2, [pc, #500]	; (8002da0 <HAL_DMA_Abort_IT+0x288>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d018      	beq.n	8002be0 <HAL_DMA_Abort_IT+0xc8>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4a7c      	ldr	r2, [pc, #496]	; (8002da4 <HAL_DMA_Abort_IT+0x28c>)
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d013      	beq.n	8002be0 <HAL_DMA_Abort_IT+0xc8>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a7a      	ldr	r2, [pc, #488]	; (8002da8 <HAL_DMA_Abort_IT+0x290>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d00e      	beq.n	8002be0 <HAL_DMA_Abort_IT+0xc8>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4a79      	ldr	r2, [pc, #484]	; (8002dac <HAL_DMA_Abort_IT+0x294>)
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d009      	beq.n	8002be0 <HAL_DMA_Abort_IT+0xc8>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a77      	ldr	r2, [pc, #476]	; (8002db0 <HAL_DMA_Abort_IT+0x298>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d004      	beq.n	8002be0 <HAL_DMA_Abort_IT+0xc8>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4a76      	ldr	r2, [pc, #472]	; (8002db4 <HAL_DMA_Abort_IT+0x29c>)
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d101      	bne.n	8002be4 <HAL_DMA_Abort_IT+0xcc>
 8002be0:	2301      	movs	r3, #1
 8002be2:	e000      	b.n	8002be6 <HAL_DMA_Abort_IT+0xce>
 8002be4:	2300      	movs	r3, #0
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d065      	beq.n	8002cb6 <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2204      	movs	r2, #4
 8002bee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4a60      	ldr	r2, [pc, #384]	; (8002d78 <HAL_DMA_Abort_IT+0x260>)
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d04a      	beq.n	8002c92 <HAL_DMA_Abort_IT+0x17a>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a5e      	ldr	r2, [pc, #376]	; (8002d7c <HAL_DMA_Abort_IT+0x264>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d045      	beq.n	8002c92 <HAL_DMA_Abort_IT+0x17a>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4a5d      	ldr	r2, [pc, #372]	; (8002d80 <HAL_DMA_Abort_IT+0x268>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d040      	beq.n	8002c92 <HAL_DMA_Abort_IT+0x17a>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a5b      	ldr	r2, [pc, #364]	; (8002d84 <HAL_DMA_Abort_IT+0x26c>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d03b      	beq.n	8002c92 <HAL_DMA_Abort_IT+0x17a>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4a5a      	ldr	r2, [pc, #360]	; (8002d88 <HAL_DMA_Abort_IT+0x270>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d036      	beq.n	8002c92 <HAL_DMA_Abort_IT+0x17a>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a58      	ldr	r2, [pc, #352]	; (8002d8c <HAL_DMA_Abort_IT+0x274>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d031      	beq.n	8002c92 <HAL_DMA_Abort_IT+0x17a>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a57      	ldr	r2, [pc, #348]	; (8002d90 <HAL_DMA_Abort_IT+0x278>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d02c      	beq.n	8002c92 <HAL_DMA_Abort_IT+0x17a>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a55      	ldr	r2, [pc, #340]	; (8002d94 <HAL_DMA_Abort_IT+0x27c>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d027      	beq.n	8002c92 <HAL_DMA_Abort_IT+0x17a>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4a54      	ldr	r2, [pc, #336]	; (8002d98 <HAL_DMA_Abort_IT+0x280>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d022      	beq.n	8002c92 <HAL_DMA_Abort_IT+0x17a>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a52      	ldr	r2, [pc, #328]	; (8002d9c <HAL_DMA_Abort_IT+0x284>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d01d      	beq.n	8002c92 <HAL_DMA_Abort_IT+0x17a>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4a51      	ldr	r2, [pc, #324]	; (8002da0 <HAL_DMA_Abort_IT+0x288>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d018      	beq.n	8002c92 <HAL_DMA_Abort_IT+0x17a>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a4f      	ldr	r2, [pc, #316]	; (8002da4 <HAL_DMA_Abort_IT+0x28c>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d013      	beq.n	8002c92 <HAL_DMA_Abort_IT+0x17a>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a4e      	ldr	r2, [pc, #312]	; (8002da8 <HAL_DMA_Abort_IT+0x290>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d00e      	beq.n	8002c92 <HAL_DMA_Abort_IT+0x17a>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a4c      	ldr	r2, [pc, #304]	; (8002dac <HAL_DMA_Abort_IT+0x294>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d009      	beq.n	8002c92 <HAL_DMA_Abort_IT+0x17a>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4a4b      	ldr	r2, [pc, #300]	; (8002db0 <HAL_DMA_Abort_IT+0x298>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d004      	beq.n	8002c92 <HAL_DMA_Abort_IT+0x17a>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a49      	ldr	r2, [pc, #292]	; (8002db4 <HAL_DMA_Abort_IT+0x29c>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d108      	bne.n	8002ca4 <HAL_DMA_Abort_IT+0x18c>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	681a      	ldr	r2, [r3, #0]
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f022 0201 	bic.w	r2, r2, #1
 8002ca0:	601a      	str	r2, [r3, #0]
 8002ca2:	e147      	b.n	8002f34 <HAL_DMA_Abort_IT+0x41c>
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	681a      	ldr	r2, [r3, #0]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f022 0201 	bic.w	r2, r2, #1
 8002cb2:	601a      	str	r2, [r3, #0]
 8002cb4:	e13e      	b.n	8002f34 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	681a      	ldr	r2, [r3, #0]
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f022 020e 	bic.w	r2, r2, #14
 8002cc4:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4a2b      	ldr	r2, [pc, #172]	; (8002d78 <HAL_DMA_Abort_IT+0x260>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d04a      	beq.n	8002d66 <HAL_DMA_Abort_IT+0x24e>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4a29      	ldr	r2, [pc, #164]	; (8002d7c <HAL_DMA_Abort_IT+0x264>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d045      	beq.n	8002d66 <HAL_DMA_Abort_IT+0x24e>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4a28      	ldr	r2, [pc, #160]	; (8002d80 <HAL_DMA_Abort_IT+0x268>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d040      	beq.n	8002d66 <HAL_DMA_Abort_IT+0x24e>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4a26      	ldr	r2, [pc, #152]	; (8002d84 <HAL_DMA_Abort_IT+0x26c>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d03b      	beq.n	8002d66 <HAL_DMA_Abort_IT+0x24e>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4a25      	ldr	r2, [pc, #148]	; (8002d88 <HAL_DMA_Abort_IT+0x270>)
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d036      	beq.n	8002d66 <HAL_DMA_Abort_IT+0x24e>
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4a23      	ldr	r2, [pc, #140]	; (8002d8c <HAL_DMA_Abort_IT+0x274>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d031      	beq.n	8002d66 <HAL_DMA_Abort_IT+0x24e>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4a22      	ldr	r2, [pc, #136]	; (8002d90 <HAL_DMA_Abort_IT+0x278>)
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d02c      	beq.n	8002d66 <HAL_DMA_Abort_IT+0x24e>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a20      	ldr	r2, [pc, #128]	; (8002d94 <HAL_DMA_Abort_IT+0x27c>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d027      	beq.n	8002d66 <HAL_DMA_Abort_IT+0x24e>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4a1f      	ldr	r2, [pc, #124]	; (8002d98 <HAL_DMA_Abort_IT+0x280>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d022      	beq.n	8002d66 <HAL_DMA_Abort_IT+0x24e>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4a1d      	ldr	r2, [pc, #116]	; (8002d9c <HAL_DMA_Abort_IT+0x284>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d01d      	beq.n	8002d66 <HAL_DMA_Abort_IT+0x24e>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4a1c      	ldr	r2, [pc, #112]	; (8002da0 <HAL_DMA_Abort_IT+0x288>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d018      	beq.n	8002d66 <HAL_DMA_Abort_IT+0x24e>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a1a      	ldr	r2, [pc, #104]	; (8002da4 <HAL_DMA_Abort_IT+0x28c>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d013      	beq.n	8002d66 <HAL_DMA_Abort_IT+0x24e>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4a19      	ldr	r2, [pc, #100]	; (8002da8 <HAL_DMA_Abort_IT+0x290>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d00e      	beq.n	8002d66 <HAL_DMA_Abort_IT+0x24e>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a17      	ldr	r2, [pc, #92]	; (8002dac <HAL_DMA_Abort_IT+0x294>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d009      	beq.n	8002d66 <HAL_DMA_Abort_IT+0x24e>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4a16      	ldr	r2, [pc, #88]	; (8002db0 <HAL_DMA_Abort_IT+0x298>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d004      	beq.n	8002d66 <HAL_DMA_Abort_IT+0x24e>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a14      	ldr	r2, [pc, #80]	; (8002db4 <HAL_DMA_Abort_IT+0x29c>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d128      	bne.n	8002db8 <HAL_DMA_Abort_IT+0x2a0>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	681a      	ldr	r2, [r3, #0]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f022 0201 	bic.w	r2, r2, #1
 8002d74:	601a      	str	r2, [r3, #0]
 8002d76:	e027      	b.n	8002dc8 <HAL_DMA_Abort_IT+0x2b0>
 8002d78:	40020010 	.word	0x40020010
 8002d7c:	40020028 	.word	0x40020028
 8002d80:	40020040 	.word	0x40020040
 8002d84:	40020058 	.word	0x40020058
 8002d88:	40020070 	.word	0x40020070
 8002d8c:	40020088 	.word	0x40020088
 8002d90:	400200a0 	.word	0x400200a0
 8002d94:	400200b8 	.word	0x400200b8
 8002d98:	40020410 	.word	0x40020410
 8002d9c:	40020428 	.word	0x40020428
 8002da0:	40020440 	.word	0x40020440
 8002da4:	40020458 	.word	0x40020458
 8002da8:	40020470 	.word	0x40020470
 8002dac:	40020488 	.word	0x40020488
 8002db0:	400204a0 	.word	0x400204a0
 8002db4:	400204b8 	.word	0x400204b8
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	681a      	ldr	r2, [r3, #0]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f022 0201 	bic.w	r2, r2, #1
 8002dc6:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a5c      	ldr	r2, [pc, #368]	; (8002f40 <HAL_DMA_Abort_IT+0x428>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d072      	beq.n	8002eb8 <HAL_DMA_Abort_IT+0x3a0>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a5b      	ldr	r2, [pc, #364]	; (8002f44 <HAL_DMA_Abort_IT+0x42c>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d06d      	beq.n	8002eb8 <HAL_DMA_Abort_IT+0x3a0>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a59      	ldr	r2, [pc, #356]	; (8002f48 <HAL_DMA_Abort_IT+0x430>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d068      	beq.n	8002eb8 <HAL_DMA_Abort_IT+0x3a0>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a58      	ldr	r2, [pc, #352]	; (8002f4c <HAL_DMA_Abort_IT+0x434>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d063      	beq.n	8002eb8 <HAL_DMA_Abort_IT+0x3a0>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a56      	ldr	r2, [pc, #344]	; (8002f50 <HAL_DMA_Abort_IT+0x438>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d05e      	beq.n	8002eb8 <HAL_DMA_Abort_IT+0x3a0>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a55      	ldr	r2, [pc, #340]	; (8002f54 <HAL_DMA_Abort_IT+0x43c>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d059      	beq.n	8002eb8 <HAL_DMA_Abort_IT+0x3a0>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a53      	ldr	r2, [pc, #332]	; (8002f58 <HAL_DMA_Abort_IT+0x440>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d054      	beq.n	8002eb8 <HAL_DMA_Abort_IT+0x3a0>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a52      	ldr	r2, [pc, #328]	; (8002f5c <HAL_DMA_Abort_IT+0x444>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d04f      	beq.n	8002eb8 <HAL_DMA_Abort_IT+0x3a0>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a50      	ldr	r2, [pc, #320]	; (8002f60 <HAL_DMA_Abort_IT+0x448>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d04a      	beq.n	8002eb8 <HAL_DMA_Abort_IT+0x3a0>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4a4f      	ldr	r2, [pc, #316]	; (8002f64 <HAL_DMA_Abort_IT+0x44c>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d045      	beq.n	8002eb8 <HAL_DMA_Abort_IT+0x3a0>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a4d      	ldr	r2, [pc, #308]	; (8002f68 <HAL_DMA_Abort_IT+0x450>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d040      	beq.n	8002eb8 <HAL_DMA_Abort_IT+0x3a0>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a4c      	ldr	r2, [pc, #304]	; (8002f6c <HAL_DMA_Abort_IT+0x454>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d03b      	beq.n	8002eb8 <HAL_DMA_Abort_IT+0x3a0>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a4a      	ldr	r2, [pc, #296]	; (8002f70 <HAL_DMA_Abort_IT+0x458>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d036      	beq.n	8002eb8 <HAL_DMA_Abort_IT+0x3a0>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a49      	ldr	r2, [pc, #292]	; (8002f74 <HAL_DMA_Abort_IT+0x45c>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d031      	beq.n	8002eb8 <HAL_DMA_Abort_IT+0x3a0>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a47      	ldr	r2, [pc, #284]	; (8002f78 <HAL_DMA_Abort_IT+0x460>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d02c      	beq.n	8002eb8 <HAL_DMA_Abort_IT+0x3a0>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4a46      	ldr	r2, [pc, #280]	; (8002f7c <HAL_DMA_Abort_IT+0x464>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d027      	beq.n	8002eb8 <HAL_DMA_Abort_IT+0x3a0>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a44      	ldr	r2, [pc, #272]	; (8002f80 <HAL_DMA_Abort_IT+0x468>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d022      	beq.n	8002eb8 <HAL_DMA_Abort_IT+0x3a0>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a43      	ldr	r2, [pc, #268]	; (8002f84 <HAL_DMA_Abort_IT+0x46c>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d01d      	beq.n	8002eb8 <HAL_DMA_Abort_IT+0x3a0>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a41      	ldr	r2, [pc, #260]	; (8002f88 <HAL_DMA_Abort_IT+0x470>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d018      	beq.n	8002eb8 <HAL_DMA_Abort_IT+0x3a0>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4a40      	ldr	r2, [pc, #256]	; (8002f8c <HAL_DMA_Abort_IT+0x474>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d013      	beq.n	8002eb8 <HAL_DMA_Abort_IT+0x3a0>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a3e      	ldr	r2, [pc, #248]	; (8002f90 <HAL_DMA_Abort_IT+0x478>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d00e      	beq.n	8002eb8 <HAL_DMA_Abort_IT+0x3a0>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4a3d      	ldr	r2, [pc, #244]	; (8002f94 <HAL_DMA_Abort_IT+0x47c>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d009      	beq.n	8002eb8 <HAL_DMA_Abort_IT+0x3a0>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a3b      	ldr	r2, [pc, #236]	; (8002f98 <HAL_DMA_Abort_IT+0x480>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d004      	beq.n	8002eb8 <HAL_DMA_Abort_IT+0x3a0>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4a3a      	ldr	r2, [pc, #232]	; (8002f9c <HAL_DMA_Abort_IT+0x484>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d101      	bne.n	8002ebc <HAL_DMA_Abort_IT+0x3a4>
 8002eb8:	2301      	movs	r3, #1
 8002eba:	e000      	b.n	8002ebe <HAL_DMA_Abort_IT+0x3a6>
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d028      	beq.n	8002f14 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ec6:	681a      	ldr	r2, [r3, #0]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ecc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002ed0:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ed6:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002edc:	f003 031f 	and.w	r3, r3, #31
 8002ee0:	2201      	movs	r2, #1
 8002ee2:	409a      	lsls	r2, r3
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002eec:	687a      	ldr	r2, [r7, #4]
 8002eee:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002ef0:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d00c      	beq.n	8002f14 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002efe:	681a      	ldr	r2, [r3, #0]
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f04:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f08:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f0e:	687a      	ldr	r2, [r7, #4]
 8002f10:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002f12:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2200      	movs	r2, #0
 8002f18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2201      	movs	r2, #1
 8002f20:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d003      	beq.n	8002f34 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f30:	6878      	ldr	r0, [r7, #4]
 8002f32:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8002f34:	2300      	movs	r3, #0
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	3710      	adds	r7, #16
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}
 8002f3e:	bf00      	nop
 8002f40:	40020010 	.word	0x40020010
 8002f44:	40020028 	.word	0x40020028
 8002f48:	40020040 	.word	0x40020040
 8002f4c:	40020058 	.word	0x40020058
 8002f50:	40020070 	.word	0x40020070
 8002f54:	40020088 	.word	0x40020088
 8002f58:	400200a0 	.word	0x400200a0
 8002f5c:	400200b8 	.word	0x400200b8
 8002f60:	40020410 	.word	0x40020410
 8002f64:	40020428 	.word	0x40020428
 8002f68:	40020440 	.word	0x40020440
 8002f6c:	40020458 	.word	0x40020458
 8002f70:	40020470 	.word	0x40020470
 8002f74:	40020488 	.word	0x40020488
 8002f78:	400204a0 	.word	0x400204a0
 8002f7c:	400204b8 	.word	0x400204b8
 8002f80:	58025408 	.word	0x58025408
 8002f84:	5802541c 	.word	0x5802541c
 8002f88:	58025430 	.word	0x58025430
 8002f8c:	58025444 	.word	0x58025444
 8002f90:	58025458 	.word	0x58025458
 8002f94:	5802546c 	.word	0x5802546c
 8002f98:	58025480 	.word	0x58025480
 8002f9c:	58025494 	.word	0x58025494

08002fa0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b08a      	sub	sp, #40	; 0x28
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8002fa8:	2300      	movs	r3, #0
 8002faa:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002fac:	4b67      	ldr	r3, [pc, #412]	; (800314c <HAL_DMA_IRQHandler+0x1ac>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a67      	ldr	r2, [pc, #412]	; (8003150 <HAL_DMA_IRQHandler+0x1b0>)
 8002fb2:	fba2 2303 	umull	r2, r3, r2, r3
 8002fb6:	0a9b      	lsrs	r3, r3, #10
 8002fb8:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fbe:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fc4:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8002fc6:	6a3b      	ldr	r3, [r7, #32]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8002fcc:	69fb      	ldr	r3, [r7, #28]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4a5f      	ldr	r2, [pc, #380]	; (8003154 <HAL_DMA_IRQHandler+0x1b4>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d04a      	beq.n	8003072 <HAL_DMA_IRQHandler+0xd2>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a5d      	ldr	r2, [pc, #372]	; (8003158 <HAL_DMA_IRQHandler+0x1b8>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d045      	beq.n	8003072 <HAL_DMA_IRQHandler+0xd2>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4a5c      	ldr	r2, [pc, #368]	; (800315c <HAL_DMA_IRQHandler+0x1bc>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d040      	beq.n	8003072 <HAL_DMA_IRQHandler+0xd2>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a5a      	ldr	r2, [pc, #360]	; (8003160 <HAL_DMA_IRQHandler+0x1c0>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d03b      	beq.n	8003072 <HAL_DMA_IRQHandler+0xd2>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4a59      	ldr	r2, [pc, #356]	; (8003164 <HAL_DMA_IRQHandler+0x1c4>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d036      	beq.n	8003072 <HAL_DMA_IRQHandler+0xd2>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a57      	ldr	r2, [pc, #348]	; (8003168 <HAL_DMA_IRQHandler+0x1c8>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d031      	beq.n	8003072 <HAL_DMA_IRQHandler+0xd2>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a56      	ldr	r2, [pc, #344]	; (800316c <HAL_DMA_IRQHandler+0x1cc>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d02c      	beq.n	8003072 <HAL_DMA_IRQHandler+0xd2>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a54      	ldr	r2, [pc, #336]	; (8003170 <HAL_DMA_IRQHandler+0x1d0>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d027      	beq.n	8003072 <HAL_DMA_IRQHandler+0xd2>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a53      	ldr	r2, [pc, #332]	; (8003174 <HAL_DMA_IRQHandler+0x1d4>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d022      	beq.n	8003072 <HAL_DMA_IRQHandler+0xd2>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a51      	ldr	r2, [pc, #324]	; (8003178 <HAL_DMA_IRQHandler+0x1d8>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d01d      	beq.n	8003072 <HAL_DMA_IRQHandler+0xd2>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a50      	ldr	r2, [pc, #320]	; (800317c <HAL_DMA_IRQHandler+0x1dc>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d018      	beq.n	8003072 <HAL_DMA_IRQHandler+0xd2>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a4e      	ldr	r2, [pc, #312]	; (8003180 <HAL_DMA_IRQHandler+0x1e0>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d013      	beq.n	8003072 <HAL_DMA_IRQHandler+0xd2>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a4d      	ldr	r2, [pc, #308]	; (8003184 <HAL_DMA_IRQHandler+0x1e4>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d00e      	beq.n	8003072 <HAL_DMA_IRQHandler+0xd2>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a4b      	ldr	r2, [pc, #300]	; (8003188 <HAL_DMA_IRQHandler+0x1e8>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d009      	beq.n	8003072 <HAL_DMA_IRQHandler+0xd2>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a4a      	ldr	r2, [pc, #296]	; (800318c <HAL_DMA_IRQHandler+0x1ec>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d004      	beq.n	8003072 <HAL_DMA_IRQHandler+0xd2>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a48      	ldr	r2, [pc, #288]	; (8003190 <HAL_DMA_IRQHandler+0x1f0>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d101      	bne.n	8003076 <HAL_DMA_IRQHandler+0xd6>
 8003072:	2301      	movs	r3, #1
 8003074:	e000      	b.n	8003078 <HAL_DMA_IRQHandler+0xd8>
 8003076:	2300      	movs	r3, #0
 8003078:	2b00      	cmp	r3, #0
 800307a:	f000 842b 	beq.w	80038d4 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003082:	f003 031f 	and.w	r3, r3, #31
 8003086:	2208      	movs	r2, #8
 8003088:	409a      	lsls	r2, r3
 800308a:	69bb      	ldr	r3, [r7, #24]
 800308c:	4013      	ands	r3, r2
 800308e:	2b00      	cmp	r3, #0
 8003090:	f000 80a2 	beq.w	80031d8 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a2e      	ldr	r2, [pc, #184]	; (8003154 <HAL_DMA_IRQHandler+0x1b4>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d04a      	beq.n	8003134 <HAL_DMA_IRQHandler+0x194>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a2d      	ldr	r2, [pc, #180]	; (8003158 <HAL_DMA_IRQHandler+0x1b8>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d045      	beq.n	8003134 <HAL_DMA_IRQHandler+0x194>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a2b      	ldr	r2, [pc, #172]	; (800315c <HAL_DMA_IRQHandler+0x1bc>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d040      	beq.n	8003134 <HAL_DMA_IRQHandler+0x194>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a2a      	ldr	r2, [pc, #168]	; (8003160 <HAL_DMA_IRQHandler+0x1c0>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d03b      	beq.n	8003134 <HAL_DMA_IRQHandler+0x194>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a28      	ldr	r2, [pc, #160]	; (8003164 <HAL_DMA_IRQHandler+0x1c4>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d036      	beq.n	8003134 <HAL_DMA_IRQHandler+0x194>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4a27      	ldr	r2, [pc, #156]	; (8003168 <HAL_DMA_IRQHandler+0x1c8>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d031      	beq.n	8003134 <HAL_DMA_IRQHandler+0x194>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4a25      	ldr	r2, [pc, #148]	; (800316c <HAL_DMA_IRQHandler+0x1cc>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d02c      	beq.n	8003134 <HAL_DMA_IRQHandler+0x194>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4a24      	ldr	r2, [pc, #144]	; (8003170 <HAL_DMA_IRQHandler+0x1d0>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d027      	beq.n	8003134 <HAL_DMA_IRQHandler+0x194>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a22      	ldr	r2, [pc, #136]	; (8003174 <HAL_DMA_IRQHandler+0x1d4>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d022      	beq.n	8003134 <HAL_DMA_IRQHandler+0x194>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4a21      	ldr	r2, [pc, #132]	; (8003178 <HAL_DMA_IRQHandler+0x1d8>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d01d      	beq.n	8003134 <HAL_DMA_IRQHandler+0x194>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a1f      	ldr	r2, [pc, #124]	; (800317c <HAL_DMA_IRQHandler+0x1dc>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d018      	beq.n	8003134 <HAL_DMA_IRQHandler+0x194>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a1e      	ldr	r2, [pc, #120]	; (8003180 <HAL_DMA_IRQHandler+0x1e0>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d013      	beq.n	8003134 <HAL_DMA_IRQHandler+0x194>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a1c      	ldr	r2, [pc, #112]	; (8003184 <HAL_DMA_IRQHandler+0x1e4>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d00e      	beq.n	8003134 <HAL_DMA_IRQHandler+0x194>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4a1b      	ldr	r2, [pc, #108]	; (8003188 <HAL_DMA_IRQHandler+0x1e8>)
 800311c:	4293      	cmp	r3, r2
 800311e:	d009      	beq.n	8003134 <HAL_DMA_IRQHandler+0x194>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4a19      	ldr	r2, [pc, #100]	; (800318c <HAL_DMA_IRQHandler+0x1ec>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d004      	beq.n	8003134 <HAL_DMA_IRQHandler+0x194>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4a18      	ldr	r2, [pc, #96]	; (8003190 <HAL_DMA_IRQHandler+0x1f0>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d12f      	bne.n	8003194 <HAL_DMA_IRQHandler+0x1f4>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f003 0304 	and.w	r3, r3, #4
 800313e:	2b00      	cmp	r3, #0
 8003140:	bf14      	ite	ne
 8003142:	2301      	movne	r3, #1
 8003144:	2300      	moveq	r3, #0
 8003146:	b2db      	uxtb	r3, r3
 8003148:	e02e      	b.n	80031a8 <HAL_DMA_IRQHandler+0x208>
 800314a:	bf00      	nop
 800314c:	24000400 	.word	0x24000400
 8003150:	1b4e81b5 	.word	0x1b4e81b5
 8003154:	40020010 	.word	0x40020010
 8003158:	40020028 	.word	0x40020028
 800315c:	40020040 	.word	0x40020040
 8003160:	40020058 	.word	0x40020058
 8003164:	40020070 	.word	0x40020070
 8003168:	40020088 	.word	0x40020088
 800316c:	400200a0 	.word	0x400200a0
 8003170:	400200b8 	.word	0x400200b8
 8003174:	40020410 	.word	0x40020410
 8003178:	40020428 	.word	0x40020428
 800317c:	40020440 	.word	0x40020440
 8003180:	40020458 	.word	0x40020458
 8003184:	40020470 	.word	0x40020470
 8003188:	40020488 	.word	0x40020488
 800318c:	400204a0 	.word	0x400204a0
 8003190:	400204b8 	.word	0x400204b8
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f003 0308 	and.w	r3, r3, #8
 800319e:	2b00      	cmp	r3, #0
 80031a0:	bf14      	ite	ne
 80031a2:	2301      	movne	r3, #1
 80031a4:	2300      	moveq	r3, #0
 80031a6:	b2db      	uxtb	r3, r3
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d015      	beq.n	80031d8 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	681a      	ldr	r2, [r3, #0]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f022 0204 	bic.w	r2, r2, #4
 80031ba:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031c0:	f003 031f 	and.w	r3, r3, #31
 80031c4:	2208      	movs	r2, #8
 80031c6:	409a      	lsls	r2, r3
 80031c8:	6a3b      	ldr	r3, [r7, #32]
 80031ca:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031d0:	f043 0201 	orr.w	r2, r3, #1
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031dc:	f003 031f 	and.w	r3, r3, #31
 80031e0:	69ba      	ldr	r2, [r7, #24]
 80031e2:	fa22 f303 	lsr.w	r3, r2, r3
 80031e6:	f003 0301 	and.w	r3, r3, #1
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d06e      	beq.n	80032cc <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4a69      	ldr	r2, [pc, #420]	; (8003398 <HAL_DMA_IRQHandler+0x3f8>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d04a      	beq.n	800328e <HAL_DMA_IRQHandler+0x2ee>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a67      	ldr	r2, [pc, #412]	; (800339c <HAL_DMA_IRQHandler+0x3fc>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d045      	beq.n	800328e <HAL_DMA_IRQHandler+0x2ee>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4a66      	ldr	r2, [pc, #408]	; (80033a0 <HAL_DMA_IRQHandler+0x400>)
 8003208:	4293      	cmp	r3, r2
 800320a:	d040      	beq.n	800328e <HAL_DMA_IRQHandler+0x2ee>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a64      	ldr	r2, [pc, #400]	; (80033a4 <HAL_DMA_IRQHandler+0x404>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d03b      	beq.n	800328e <HAL_DMA_IRQHandler+0x2ee>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a63      	ldr	r2, [pc, #396]	; (80033a8 <HAL_DMA_IRQHandler+0x408>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d036      	beq.n	800328e <HAL_DMA_IRQHandler+0x2ee>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a61      	ldr	r2, [pc, #388]	; (80033ac <HAL_DMA_IRQHandler+0x40c>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d031      	beq.n	800328e <HAL_DMA_IRQHandler+0x2ee>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a60      	ldr	r2, [pc, #384]	; (80033b0 <HAL_DMA_IRQHandler+0x410>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d02c      	beq.n	800328e <HAL_DMA_IRQHandler+0x2ee>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a5e      	ldr	r2, [pc, #376]	; (80033b4 <HAL_DMA_IRQHandler+0x414>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d027      	beq.n	800328e <HAL_DMA_IRQHandler+0x2ee>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a5d      	ldr	r2, [pc, #372]	; (80033b8 <HAL_DMA_IRQHandler+0x418>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d022      	beq.n	800328e <HAL_DMA_IRQHandler+0x2ee>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a5b      	ldr	r2, [pc, #364]	; (80033bc <HAL_DMA_IRQHandler+0x41c>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d01d      	beq.n	800328e <HAL_DMA_IRQHandler+0x2ee>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a5a      	ldr	r2, [pc, #360]	; (80033c0 <HAL_DMA_IRQHandler+0x420>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d018      	beq.n	800328e <HAL_DMA_IRQHandler+0x2ee>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a58      	ldr	r2, [pc, #352]	; (80033c4 <HAL_DMA_IRQHandler+0x424>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d013      	beq.n	800328e <HAL_DMA_IRQHandler+0x2ee>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a57      	ldr	r2, [pc, #348]	; (80033c8 <HAL_DMA_IRQHandler+0x428>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d00e      	beq.n	800328e <HAL_DMA_IRQHandler+0x2ee>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a55      	ldr	r2, [pc, #340]	; (80033cc <HAL_DMA_IRQHandler+0x42c>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d009      	beq.n	800328e <HAL_DMA_IRQHandler+0x2ee>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a54      	ldr	r2, [pc, #336]	; (80033d0 <HAL_DMA_IRQHandler+0x430>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d004      	beq.n	800328e <HAL_DMA_IRQHandler+0x2ee>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a52      	ldr	r2, [pc, #328]	; (80033d4 <HAL_DMA_IRQHandler+0x434>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d10a      	bne.n	80032a4 <HAL_DMA_IRQHandler+0x304>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	695b      	ldr	r3, [r3, #20]
 8003294:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003298:	2b00      	cmp	r3, #0
 800329a:	bf14      	ite	ne
 800329c:	2301      	movne	r3, #1
 800329e:	2300      	moveq	r3, #0
 80032a0:	b2db      	uxtb	r3, r3
 80032a2:	e003      	b.n	80032ac <HAL_DMA_IRQHandler+0x30c>
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	2300      	movs	r3, #0
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d00d      	beq.n	80032cc <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032b4:	f003 031f 	and.w	r3, r3, #31
 80032b8:	2201      	movs	r2, #1
 80032ba:	409a      	lsls	r2, r3
 80032bc:	6a3b      	ldr	r3, [r7, #32]
 80032be:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032c4:	f043 0202 	orr.w	r2, r3, #2
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032d0:	f003 031f 	and.w	r3, r3, #31
 80032d4:	2204      	movs	r2, #4
 80032d6:	409a      	lsls	r2, r3
 80032d8:	69bb      	ldr	r3, [r7, #24]
 80032da:	4013      	ands	r3, r2
 80032dc:	2b00      	cmp	r3, #0
 80032de:	f000 808f 	beq.w	8003400 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a2c      	ldr	r2, [pc, #176]	; (8003398 <HAL_DMA_IRQHandler+0x3f8>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d04a      	beq.n	8003382 <HAL_DMA_IRQHandler+0x3e2>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a2a      	ldr	r2, [pc, #168]	; (800339c <HAL_DMA_IRQHandler+0x3fc>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d045      	beq.n	8003382 <HAL_DMA_IRQHandler+0x3e2>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4a29      	ldr	r2, [pc, #164]	; (80033a0 <HAL_DMA_IRQHandler+0x400>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d040      	beq.n	8003382 <HAL_DMA_IRQHandler+0x3e2>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a27      	ldr	r2, [pc, #156]	; (80033a4 <HAL_DMA_IRQHandler+0x404>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d03b      	beq.n	8003382 <HAL_DMA_IRQHandler+0x3e2>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a26      	ldr	r2, [pc, #152]	; (80033a8 <HAL_DMA_IRQHandler+0x408>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d036      	beq.n	8003382 <HAL_DMA_IRQHandler+0x3e2>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a24      	ldr	r2, [pc, #144]	; (80033ac <HAL_DMA_IRQHandler+0x40c>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d031      	beq.n	8003382 <HAL_DMA_IRQHandler+0x3e2>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a23      	ldr	r2, [pc, #140]	; (80033b0 <HAL_DMA_IRQHandler+0x410>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d02c      	beq.n	8003382 <HAL_DMA_IRQHandler+0x3e2>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a21      	ldr	r2, [pc, #132]	; (80033b4 <HAL_DMA_IRQHandler+0x414>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d027      	beq.n	8003382 <HAL_DMA_IRQHandler+0x3e2>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4a20      	ldr	r2, [pc, #128]	; (80033b8 <HAL_DMA_IRQHandler+0x418>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d022      	beq.n	8003382 <HAL_DMA_IRQHandler+0x3e2>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a1e      	ldr	r2, [pc, #120]	; (80033bc <HAL_DMA_IRQHandler+0x41c>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d01d      	beq.n	8003382 <HAL_DMA_IRQHandler+0x3e2>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a1d      	ldr	r2, [pc, #116]	; (80033c0 <HAL_DMA_IRQHandler+0x420>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d018      	beq.n	8003382 <HAL_DMA_IRQHandler+0x3e2>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a1b      	ldr	r2, [pc, #108]	; (80033c4 <HAL_DMA_IRQHandler+0x424>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d013      	beq.n	8003382 <HAL_DMA_IRQHandler+0x3e2>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4a1a      	ldr	r2, [pc, #104]	; (80033c8 <HAL_DMA_IRQHandler+0x428>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d00e      	beq.n	8003382 <HAL_DMA_IRQHandler+0x3e2>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a18      	ldr	r2, [pc, #96]	; (80033cc <HAL_DMA_IRQHandler+0x42c>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d009      	beq.n	8003382 <HAL_DMA_IRQHandler+0x3e2>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a17      	ldr	r2, [pc, #92]	; (80033d0 <HAL_DMA_IRQHandler+0x430>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d004      	beq.n	8003382 <HAL_DMA_IRQHandler+0x3e2>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4a15      	ldr	r2, [pc, #84]	; (80033d4 <HAL_DMA_IRQHandler+0x434>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d12a      	bne.n	80033d8 <HAL_DMA_IRQHandler+0x438>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f003 0302 	and.w	r3, r3, #2
 800338c:	2b00      	cmp	r3, #0
 800338e:	bf14      	ite	ne
 8003390:	2301      	movne	r3, #1
 8003392:	2300      	moveq	r3, #0
 8003394:	b2db      	uxtb	r3, r3
 8003396:	e023      	b.n	80033e0 <HAL_DMA_IRQHandler+0x440>
 8003398:	40020010 	.word	0x40020010
 800339c:	40020028 	.word	0x40020028
 80033a0:	40020040 	.word	0x40020040
 80033a4:	40020058 	.word	0x40020058
 80033a8:	40020070 	.word	0x40020070
 80033ac:	40020088 	.word	0x40020088
 80033b0:	400200a0 	.word	0x400200a0
 80033b4:	400200b8 	.word	0x400200b8
 80033b8:	40020410 	.word	0x40020410
 80033bc:	40020428 	.word	0x40020428
 80033c0:	40020440 	.word	0x40020440
 80033c4:	40020458 	.word	0x40020458
 80033c8:	40020470 	.word	0x40020470
 80033cc:	40020488 	.word	0x40020488
 80033d0:	400204a0 	.word	0x400204a0
 80033d4:	400204b8 	.word	0x400204b8
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	2300      	movs	r3, #0
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d00d      	beq.n	8003400 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033e8:	f003 031f 	and.w	r3, r3, #31
 80033ec:	2204      	movs	r2, #4
 80033ee:	409a      	lsls	r2, r3
 80033f0:	6a3b      	ldr	r3, [r7, #32]
 80033f2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033f8:	f043 0204 	orr.w	r2, r3, #4
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003404:	f003 031f 	and.w	r3, r3, #31
 8003408:	2210      	movs	r2, #16
 800340a:	409a      	lsls	r2, r3
 800340c:	69bb      	ldr	r3, [r7, #24]
 800340e:	4013      	ands	r3, r2
 8003410:	2b00      	cmp	r3, #0
 8003412:	f000 80a6 	beq.w	8003562 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4a85      	ldr	r2, [pc, #532]	; (8003630 <HAL_DMA_IRQHandler+0x690>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d04a      	beq.n	80034b6 <HAL_DMA_IRQHandler+0x516>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a83      	ldr	r2, [pc, #524]	; (8003634 <HAL_DMA_IRQHandler+0x694>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d045      	beq.n	80034b6 <HAL_DMA_IRQHandler+0x516>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a82      	ldr	r2, [pc, #520]	; (8003638 <HAL_DMA_IRQHandler+0x698>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d040      	beq.n	80034b6 <HAL_DMA_IRQHandler+0x516>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a80      	ldr	r2, [pc, #512]	; (800363c <HAL_DMA_IRQHandler+0x69c>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d03b      	beq.n	80034b6 <HAL_DMA_IRQHandler+0x516>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4a7f      	ldr	r2, [pc, #508]	; (8003640 <HAL_DMA_IRQHandler+0x6a0>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d036      	beq.n	80034b6 <HAL_DMA_IRQHandler+0x516>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4a7d      	ldr	r2, [pc, #500]	; (8003644 <HAL_DMA_IRQHandler+0x6a4>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d031      	beq.n	80034b6 <HAL_DMA_IRQHandler+0x516>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4a7c      	ldr	r2, [pc, #496]	; (8003648 <HAL_DMA_IRQHandler+0x6a8>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d02c      	beq.n	80034b6 <HAL_DMA_IRQHandler+0x516>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a7a      	ldr	r2, [pc, #488]	; (800364c <HAL_DMA_IRQHandler+0x6ac>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d027      	beq.n	80034b6 <HAL_DMA_IRQHandler+0x516>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4a79      	ldr	r2, [pc, #484]	; (8003650 <HAL_DMA_IRQHandler+0x6b0>)
 800346c:	4293      	cmp	r3, r2
 800346e:	d022      	beq.n	80034b6 <HAL_DMA_IRQHandler+0x516>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4a77      	ldr	r2, [pc, #476]	; (8003654 <HAL_DMA_IRQHandler+0x6b4>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d01d      	beq.n	80034b6 <HAL_DMA_IRQHandler+0x516>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4a76      	ldr	r2, [pc, #472]	; (8003658 <HAL_DMA_IRQHandler+0x6b8>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d018      	beq.n	80034b6 <HAL_DMA_IRQHandler+0x516>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4a74      	ldr	r2, [pc, #464]	; (800365c <HAL_DMA_IRQHandler+0x6bc>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d013      	beq.n	80034b6 <HAL_DMA_IRQHandler+0x516>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4a73      	ldr	r2, [pc, #460]	; (8003660 <HAL_DMA_IRQHandler+0x6c0>)
 8003494:	4293      	cmp	r3, r2
 8003496:	d00e      	beq.n	80034b6 <HAL_DMA_IRQHandler+0x516>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a71      	ldr	r2, [pc, #452]	; (8003664 <HAL_DMA_IRQHandler+0x6c4>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d009      	beq.n	80034b6 <HAL_DMA_IRQHandler+0x516>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4a70      	ldr	r2, [pc, #448]	; (8003668 <HAL_DMA_IRQHandler+0x6c8>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d004      	beq.n	80034b6 <HAL_DMA_IRQHandler+0x516>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4a6e      	ldr	r2, [pc, #440]	; (800366c <HAL_DMA_IRQHandler+0x6cc>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d10a      	bne.n	80034cc <HAL_DMA_IRQHandler+0x52c>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f003 0308 	and.w	r3, r3, #8
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	bf14      	ite	ne
 80034c4:	2301      	movne	r3, #1
 80034c6:	2300      	moveq	r3, #0
 80034c8:	b2db      	uxtb	r3, r3
 80034ca:	e009      	b.n	80034e0 <HAL_DMA_IRQHandler+0x540>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f003 0304 	and.w	r3, r3, #4
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	bf14      	ite	ne
 80034da:	2301      	movne	r3, #1
 80034dc:	2300      	moveq	r3, #0
 80034de:	b2db      	uxtb	r3, r3
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d03e      	beq.n	8003562 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034e8:	f003 031f 	and.w	r3, r3, #31
 80034ec:	2210      	movs	r2, #16
 80034ee:	409a      	lsls	r2, r3
 80034f0:	6a3b      	ldr	r3, [r7, #32]
 80034f2:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d018      	beq.n	8003534 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800350c:	2b00      	cmp	r3, #0
 800350e:	d108      	bne.n	8003522 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003514:	2b00      	cmp	r3, #0
 8003516:	d024      	beq.n	8003562 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800351c:	6878      	ldr	r0, [r7, #4]
 800351e:	4798      	blx	r3
 8003520:	e01f      	b.n	8003562 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003526:	2b00      	cmp	r3, #0
 8003528:	d01b      	beq.n	8003562 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800352e:	6878      	ldr	r0, [r7, #4]
 8003530:	4798      	blx	r3
 8003532:	e016      	b.n	8003562 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800353e:	2b00      	cmp	r3, #0
 8003540:	d107      	bne.n	8003552 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	681a      	ldr	r2, [r3, #0]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f022 0208 	bic.w	r2, r2, #8
 8003550:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003556:	2b00      	cmp	r3, #0
 8003558:	d003      	beq.n	8003562 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800355e:	6878      	ldr	r0, [r7, #4]
 8003560:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003566:	f003 031f 	and.w	r3, r3, #31
 800356a:	2220      	movs	r2, #32
 800356c:	409a      	lsls	r2, r3
 800356e:	69bb      	ldr	r3, [r7, #24]
 8003570:	4013      	ands	r3, r2
 8003572:	2b00      	cmp	r3, #0
 8003574:	f000 8110 	beq.w	8003798 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a2c      	ldr	r2, [pc, #176]	; (8003630 <HAL_DMA_IRQHandler+0x690>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d04a      	beq.n	8003618 <HAL_DMA_IRQHandler+0x678>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4a2b      	ldr	r2, [pc, #172]	; (8003634 <HAL_DMA_IRQHandler+0x694>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d045      	beq.n	8003618 <HAL_DMA_IRQHandler+0x678>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a29      	ldr	r2, [pc, #164]	; (8003638 <HAL_DMA_IRQHandler+0x698>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d040      	beq.n	8003618 <HAL_DMA_IRQHandler+0x678>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4a28      	ldr	r2, [pc, #160]	; (800363c <HAL_DMA_IRQHandler+0x69c>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d03b      	beq.n	8003618 <HAL_DMA_IRQHandler+0x678>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a26      	ldr	r2, [pc, #152]	; (8003640 <HAL_DMA_IRQHandler+0x6a0>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d036      	beq.n	8003618 <HAL_DMA_IRQHandler+0x678>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a25      	ldr	r2, [pc, #148]	; (8003644 <HAL_DMA_IRQHandler+0x6a4>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d031      	beq.n	8003618 <HAL_DMA_IRQHandler+0x678>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a23      	ldr	r2, [pc, #140]	; (8003648 <HAL_DMA_IRQHandler+0x6a8>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d02c      	beq.n	8003618 <HAL_DMA_IRQHandler+0x678>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4a22      	ldr	r2, [pc, #136]	; (800364c <HAL_DMA_IRQHandler+0x6ac>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d027      	beq.n	8003618 <HAL_DMA_IRQHandler+0x678>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4a20      	ldr	r2, [pc, #128]	; (8003650 <HAL_DMA_IRQHandler+0x6b0>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d022      	beq.n	8003618 <HAL_DMA_IRQHandler+0x678>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4a1f      	ldr	r2, [pc, #124]	; (8003654 <HAL_DMA_IRQHandler+0x6b4>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d01d      	beq.n	8003618 <HAL_DMA_IRQHandler+0x678>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a1d      	ldr	r2, [pc, #116]	; (8003658 <HAL_DMA_IRQHandler+0x6b8>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d018      	beq.n	8003618 <HAL_DMA_IRQHandler+0x678>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a1c      	ldr	r2, [pc, #112]	; (800365c <HAL_DMA_IRQHandler+0x6bc>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d013      	beq.n	8003618 <HAL_DMA_IRQHandler+0x678>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4a1a      	ldr	r2, [pc, #104]	; (8003660 <HAL_DMA_IRQHandler+0x6c0>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d00e      	beq.n	8003618 <HAL_DMA_IRQHandler+0x678>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a19      	ldr	r2, [pc, #100]	; (8003664 <HAL_DMA_IRQHandler+0x6c4>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d009      	beq.n	8003618 <HAL_DMA_IRQHandler+0x678>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a17      	ldr	r2, [pc, #92]	; (8003668 <HAL_DMA_IRQHandler+0x6c8>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d004      	beq.n	8003618 <HAL_DMA_IRQHandler+0x678>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4a16      	ldr	r2, [pc, #88]	; (800366c <HAL_DMA_IRQHandler+0x6cc>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d12b      	bne.n	8003670 <HAL_DMA_IRQHandler+0x6d0>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f003 0310 	and.w	r3, r3, #16
 8003622:	2b00      	cmp	r3, #0
 8003624:	bf14      	ite	ne
 8003626:	2301      	movne	r3, #1
 8003628:	2300      	moveq	r3, #0
 800362a:	b2db      	uxtb	r3, r3
 800362c:	e02a      	b.n	8003684 <HAL_DMA_IRQHandler+0x6e4>
 800362e:	bf00      	nop
 8003630:	40020010 	.word	0x40020010
 8003634:	40020028 	.word	0x40020028
 8003638:	40020040 	.word	0x40020040
 800363c:	40020058 	.word	0x40020058
 8003640:	40020070 	.word	0x40020070
 8003644:	40020088 	.word	0x40020088
 8003648:	400200a0 	.word	0x400200a0
 800364c:	400200b8 	.word	0x400200b8
 8003650:	40020410 	.word	0x40020410
 8003654:	40020428 	.word	0x40020428
 8003658:	40020440 	.word	0x40020440
 800365c:	40020458 	.word	0x40020458
 8003660:	40020470 	.word	0x40020470
 8003664:	40020488 	.word	0x40020488
 8003668:	400204a0 	.word	0x400204a0
 800366c:	400204b8 	.word	0x400204b8
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f003 0302 	and.w	r3, r3, #2
 800367a:	2b00      	cmp	r3, #0
 800367c:	bf14      	ite	ne
 800367e:	2301      	movne	r3, #1
 8003680:	2300      	moveq	r3, #0
 8003682:	b2db      	uxtb	r3, r3
 8003684:	2b00      	cmp	r3, #0
 8003686:	f000 8087 	beq.w	8003798 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800368e:	f003 031f 	and.w	r3, r3, #31
 8003692:	2220      	movs	r2, #32
 8003694:	409a      	lsls	r2, r3
 8003696:	6a3b      	ldr	r3, [r7, #32]
 8003698:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80036a0:	b2db      	uxtb	r3, r3
 80036a2:	2b04      	cmp	r3, #4
 80036a4:	d139      	bne.n	800371a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	681a      	ldr	r2, [r3, #0]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f022 0216 	bic.w	r2, r2, #22
 80036b4:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	695a      	ldr	r2, [r3, #20]
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80036c4:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d103      	bne.n	80036d6 <HAL_DMA_IRQHandler+0x736>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d007      	beq.n	80036e6 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	681a      	ldr	r2, [r3, #0]
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f022 0208 	bic.w	r2, r2, #8
 80036e4:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036ea:	f003 031f 	and.w	r3, r3, #31
 80036ee:	223f      	movs	r2, #63	; 0x3f
 80036f0:	409a      	lsls	r2, r3
 80036f2:	6a3b      	ldr	r3, [r7, #32]
 80036f4:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2200      	movs	r2, #0
 80036fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2201      	movs	r2, #1
 8003702:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800370a:	2b00      	cmp	r3, #0
 800370c:	f000 834a 	beq.w	8003da4 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003714:	6878      	ldr	r0, [r7, #4]
 8003716:	4798      	blx	r3
          }
          return;
 8003718:	e344      	b.n	8003da4 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003724:	2b00      	cmp	r3, #0
 8003726:	d018      	beq.n	800375a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003732:	2b00      	cmp	r3, #0
 8003734:	d108      	bne.n	8003748 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800373a:	2b00      	cmp	r3, #0
 800373c:	d02c      	beq.n	8003798 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003742:	6878      	ldr	r0, [r7, #4]
 8003744:	4798      	blx	r3
 8003746:	e027      	b.n	8003798 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800374c:	2b00      	cmp	r3, #0
 800374e:	d023      	beq.n	8003798 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003754:	6878      	ldr	r0, [r7, #4]
 8003756:	4798      	blx	r3
 8003758:	e01e      	b.n	8003798 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003764:	2b00      	cmp	r3, #0
 8003766:	d10f      	bne.n	8003788 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	681a      	ldr	r2, [r3, #0]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f022 0210 	bic.w	r2, r2, #16
 8003776:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2200      	movs	r2, #0
 800377c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2201      	movs	r2, #1
 8003784:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800378c:	2b00      	cmp	r3, #0
 800378e:	d003      	beq.n	8003798 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003794:	6878      	ldr	r0, [r7, #4]
 8003796:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800379c:	2b00      	cmp	r3, #0
 800379e:	f000 8306 	beq.w	8003dae <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037a6:	f003 0301 	and.w	r3, r3, #1
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	f000 8088 	beq.w	80038c0 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2204      	movs	r2, #4
 80037b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a7a      	ldr	r2, [pc, #488]	; (80039a8 <HAL_DMA_IRQHandler+0xa08>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d04a      	beq.n	8003858 <HAL_DMA_IRQHandler+0x8b8>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4a79      	ldr	r2, [pc, #484]	; (80039ac <HAL_DMA_IRQHandler+0xa0c>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d045      	beq.n	8003858 <HAL_DMA_IRQHandler+0x8b8>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a77      	ldr	r2, [pc, #476]	; (80039b0 <HAL_DMA_IRQHandler+0xa10>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d040      	beq.n	8003858 <HAL_DMA_IRQHandler+0x8b8>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a76      	ldr	r2, [pc, #472]	; (80039b4 <HAL_DMA_IRQHandler+0xa14>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d03b      	beq.n	8003858 <HAL_DMA_IRQHandler+0x8b8>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a74      	ldr	r2, [pc, #464]	; (80039b8 <HAL_DMA_IRQHandler+0xa18>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d036      	beq.n	8003858 <HAL_DMA_IRQHandler+0x8b8>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4a73      	ldr	r2, [pc, #460]	; (80039bc <HAL_DMA_IRQHandler+0xa1c>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d031      	beq.n	8003858 <HAL_DMA_IRQHandler+0x8b8>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a71      	ldr	r2, [pc, #452]	; (80039c0 <HAL_DMA_IRQHandler+0xa20>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d02c      	beq.n	8003858 <HAL_DMA_IRQHandler+0x8b8>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4a70      	ldr	r2, [pc, #448]	; (80039c4 <HAL_DMA_IRQHandler+0xa24>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d027      	beq.n	8003858 <HAL_DMA_IRQHandler+0x8b8>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4a6e      	ldr	r2, [pc, #440]	; (80039c8 <HAL_DMA_IRQHandler+0xa28>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d022      	beq.n	8003858 <HAL_DMA_IRQHandler+0x8b8>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4a6d      	ldr	r2, [pc, #436]	; (80039cc <HAL_DMA_IRQHandler+0xa2c>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d01d      	beq.n	8003858 <HAL_DMA_IRQHandler+0x8b8>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4a6b      	ldr	r2, [pc, #428]	; (80039d0 <HAL_DMA_IRQHandler+0xa30>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d018      	beq.n	8003858 <HAL_DMA_IRQHandler+0x8b8>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4a6a      	ldr	r2, [pc, #424]	; (80039d4 <HAL_DMA_IRQHandler+0xa34>)
 800382c:	4293      	cmp	r3, r2
 800382e:	d013      	beq.n	8003858 <HAL_DMA_IRQHandler+0x8b8>
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4a68      	ldr	r2, [pc, #416]	; (80039d8 <HAL_DMA_IRQHandler+0xa38>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d00e      	beq.n	8003858 <HAL_DMA_IRQHandler+0x8b8>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4a67      	ldr	r2, [pc, #412]	; (80039dc <HAL_DMA_IRQHandler+0xa3c>)
 8003840:	4293      	cmp	r3, r2
 8003842:	d009      	beq.n	8003858 <HAL_DMA_IRQHandler+0x8b8>
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4a65      	ldr	r2, [pc, #404]	; (80039e0 <HAL_DMA_IRQHandler+0xa40>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d004      	beq.n	8003858 <HAL_DMA_IRQHandler+0x8b8>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4a64      	ldr	r2, [pc, #400]	; (80039e4 <HAL_DMA_IRQHandler+0xa44>)
 8003854:	4293      	cmp	r3, r2
 8003856:	d108      	bne.n	800386a <HAL_DMA_IRQHandler+0x8ca>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	681a      	ldr	r2, [r3, #0]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f022 0201 	bic.w	r2, r2, #1
 8003866:	601a      	str	r2, [r3, #0]
 8003868:	e007      	b.n	800387a <HAL_DMA_IRQHandler+0x8da>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	681a      	ldr	r2, [r3, #0]
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f022 0201 	bic.w	r2, r2, #1
 8003878:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	3301      	adds	r3, #1
 800387e:	60fb      	str	r3, [r7, #12]
 8003880:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003882:	429a      	cmp	r2, r3
 8003884:	d307      	bcc.n	8003896 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f003 0301 	and.w	r3, r3, #1
 8003890:	2b00      	cmp	r3, #0
 8003892:	d1f2      	bne.n	800387a <HAL_DMA_IRQHandler+0x8da>
 8003894:	e000      	b.n	8003898 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8003896:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2200      	movs	r2, #0
 800389c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f003 0301 	and.w	r3, r3, #1
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d004      	beq.n	80038b8 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2203      	movs	r2, #3
 80038b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80038b6:	e003      	b.n	80038c0 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2201      	movs	r2, #1
 80038bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	f000 8272 	beq.w	8003dae <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038ce:	6878      	ldr	r0, [r7, #4]
 80038d0:	4798      	blx	r3
 80038d2:	e26c      	b.n	8003dae <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a43      	ldr	r2, [pc, #268]	; (80039e8 <HAL_DMA_IRQHandler+0xa48>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d022      	beq.n	8003924 <HAL_DMA_IRQHandler+0x984>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4a42      	ldr	r2, [pc, #264]	; (80039ec <HAL_DMA_IRQHandler+0xa4c>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d01d      	beq.n	8003924 <HAL_DMA_IRQHandler+0x984>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a40      	ldr	r2, [pc, #256]	; (80039f0 <HAL_DMA_IRQHandler+0xa50>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d018      	beq.n	8003924 <HAL_DMA_IRQHandler+0x984>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a3f      	ldr	r2, [pc, #252]	; (80039f4 <HAL_DMA_IRQHandler+0xa54>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d013      	beq.n	8003924 <HAL_DMA_IRQHandler+0x984>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a3d      	ldr	r2, [pc, #244]	; (80039f8 <HAL_DMA_IRQHandler+0xa58>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d00e      	beq.n	8003924 <HAL_DMA_IRQHandler+0x984>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4a3c      	ldr	r2, [pc, #240]	; (80039fc <HAL_DMA_IRQHandler+0xa5c>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d009      	beq.n	8003924 <HAL_DMA_IRQHandler+0x984>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a3a      	ldr	r2, [pc, #232]	; (8003a00 <HAL_DMA_IRQHandler+0xa60>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d004      	beq.n	8003924 <HAL_DMA_IRQHandler+0x984>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4a39      	ldr	r2, [pc, #228]	; (8003a04 <HAL_DMA_IRQHandler+0xa64>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d101      	bne.n	8003928 <HAL_DMA_IRQHandler+0x988>
 8003924:	2301      	movs	r3, #1
 8003926:	e000      	b.n	800392a <HAL_DMA_IRQHandler+0x98a>
 8003928:	2300      	movs	r3, #0
 800392a:	2b00      	cmp	r3, #0
 800392c:	f000 823f 	beq.w	8003dae <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800393c:	f003 031f 	and.w	r3, r3, #31
 8003940:	2204      	movs	r2, #4
 8003942:	409a      	lsls	r2, r3
 8003944:	697b      	ldr	r3, [r7, #20]
 8003946:	4013      	ands	r3, r2
 8003948:	2b00      	cmp	r3, #0
 800394a:	f000 80cd 	beq.w	8003ae8 <HAL_DMA_IRQHandler+0xb48>
 800394e:	693b      	ldr	r3, [r7, #16]
 8003950:	f003 0304 	and.w	r3, r3, #4
 8003954:	2b00      	cmp	r3, #0
 8003956:	f000 80c7 	beq.w	8003ae8 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800395e:	f003 031f 	and.w	r3, r3, #31
 8003962:	2204      	movs	r2, #4
 8003964:	409a      	lsls	r2, r3
 8003966:	69fb      	ldr	r3, [r7, #28]
 8003968:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800396a:	693b      	ldr	r3, [r7, #16]
 800396c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003970:	2b00      	cmp	r3, #0
 8003972:	d049      	beq.n	8003a08 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003974:	693b      	ldr	r3, [r7, #16]
 8003976:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800397a:	2b00      	cmp	r3, #0
 800397c:	d109      	bne.n	8003992 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003982:	2b00      	cmp	r3, #0
 8003984:	f000 8210 	beq.w	8003da8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800398c:	6878      	ldr	r0, [r7, #4]
 800398e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003990:	e20a      	b.n	8003da8 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003996:	2b00      	cmp	r3, #0
 8003998:	f000 8206 	beq.w	8003da8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039a0:	6878      	ldr	r0, [r7, #4]
 80039a2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80039a4:	e200      	b.n	8003da8 <HAL_DMA_IRQHandler+0xe08>
 80039a6:	bf00      	nop
 80039a8:	40020010 	.word	0x40020010
 80039ac:	40020028 	.word	0x40020028
 80039b0:	40020040 	.word	0x40020040
 80039b4:	40020058 	.word	0x40020058
 80039b8:	40020070 	.word	0x40020070
 80039bc:	40020088 	.word	0x40020088
 80039c0:	400200a0 	.word	0x400200a0
 80039c4:	400200b8 	.word	0x400200b8
 80039c8:	40020410 	.word	0x40020410
 80039cc:	40020428 	.word	0x40020428
 80039d0:	40020440 	.word	0x40020440
 80039d4:	40020458 	.word	0x40020458
 80039d8:	40020470 	.word	0x40020470
 80039dc:	40020488 	.word	0x40020488
 80039e0:	400204a0 	.word	0x400204a0
 80039e4:	400204b8 	.word	0x400204b8
 80039e8:	58025408 	.word	0x58025408
 80039ec:	5802541c 	.word	0x5802541c
 80039f0:	58025430 	.word	0x58025430
 80039f4:	58025444 	.word	0x58025444
 80039f8:	58025458 	.word	0x58025458
 80039fc:	5802546c 	.word	0x5802546c
 8003a00:	58025480 	.word	0x58025480
 8003a04:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003a08:	693b      	ldr	r3, [r7, #16]
 8003a0a:	f003 0320 	and.w	r3, r3, #32
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d160      	bne.n	8003ad4 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a8c      	ldr	r2, [pc, #560]	; (8003c48 <HAL_DMA_IRQHandler+0xca8>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d04a      	beq.n	8003ab2 <HAL_DMA_IRQHandler+0xb12>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a8a      	ldr	r2, [pc, #552]	; (8003c4c <HAL_DMA_IRQHandler+0xcac>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d045      	beq.n	8003ab2 <HAL_DMA_IRQHandler+0xb12>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4a89      	ldr	r2, [pc, #548]	; (8003c50 <HAL_DMA_IRQHandler+0xcb0>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d040      	beq.n	8003ab2 <HAL_DMA_IRQHandler+0xb12>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a87      	ldr	r2, [pc, #540]	; (8003c54 <HAL_DMA_IRQHandler+0xcb4>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d03b      	beq.n	8003ab2 <HAL_DMA_IRQHandler+0xb12>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4a86      	ldr	r2, [pc, #536]	; (8003c58 <HAL_DMA_IRQHandler+0xcb8>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d036      	beq.n	8003ab2 <HAL_DMA_IRQHandler+0xb12>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a84      	ldr	r2, [pc, #528]	; (8003c5c <HAL_DMA_IRQHandler+0xcbc>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d031      	beq.n	8003ab2 <HAL_DMA_IRQHandler+0xb12>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4a83      	ldr	r2, [pc, #524]	; (8003c60 <HAL_DMA_IRQHandler+0xcc0>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d02c      	beq.n	8003ab2 <HAL_DMA_IRQHandler+0xb12>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4a81      	ldr	r2, [pc, #516]	; (8003c64 <HAL_DMA_IRQHandler+0xcc4>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d027      	beq.n	8003ab2 <HAL_DMA_IRQHandler+0xb12>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4a80      	ldr	r2, [pc, #512]	; (8003c68 <HAL_DMA_IRQHandler+0xcc8>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d022      	beq.n	8003ab2 <HAL_DMA_IRQHandler+0xb12>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a7e      	ldr	r2, [pc, #504]	; (8003c6c <HAL_DMA_IRQHandler+0xccc>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d01d      	beq.n	8003ab2 <HAL_DMA_IRQHandler+0xb12>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4a7d      	ldr	r2, [pc, #500]	; (8003c70 <HAL_DMA_IRQHandler+0xcd0>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d018      	beq.n	8003ab2 <HAL_DMA_IRQHandler+0xb12>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4a7b      	ldr	r2, [pc, #492]	; (8003c74 <HAL_DMA_IRQHandler+0xcd4>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d013      	beq.n	8003ab2 <HAL_DMA_IRQHandler+0xb12>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4a7a      	ldr	r2, [pc, #488]	; (8003c78 <HAL_DMA_IRQHandler+0xcd8>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d00e      	beq.n	8003ab2 <HAL_DMA_IRQHandler+0xb12>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4a78      	ldr	r2, [pc, #480]	; (8003c7c <HAL_DMA_IRQHandler+0xcdc>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d009      	beq.n	8003ab2 <HAL_DMA_IRQHandler+0xb12>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4a77      	ldr	r2, [pc, #476]	; (8003c80 <HAL_DMA_IRQHandler+0xce0>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d004      	beq.n	8003ab2 <HAL_DMA_IRQHandler+0xb12>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4a75      	ldr	r2, [pc, #468]	; (8003c84 <HAL_DMA_IRQHandler+0xce4>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d108      	bne.n	8003ac4 <HAL_DMA_IRQHandler+0xb24>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	681a      	ldr	r2, [r3, #0]
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f022 0208 	bic.w	r2, r2, #8
 8003ac0:	601a      	str	r2, [r3, #0]
 8003ac2:	e007      	b.n	8003ad4 <HAL_DMA_IRQHandler+0xb34>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	681a      	ldr	r2, [r3, #0]
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f022 0204 	bic.w	r2, r2, #4
 8003ad2:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	f000 8165 	beq.w	8003da8 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ae2:	6878      	ldr	r0, [r7, #4]
 8003ae4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003ae6:	e15f      	b.n	8003da8 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003aec:	f003 031f 	and.w	r3, r3, #31
 8003af0:	2202      	movs	r2, #2
 8003af2:	409a      	lsls	r2, r3
 8003af4:	697b      	ldr	r3, [r7, #20]
 8003af6:	4013      	ands	r3, r2
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	f000 80c5 	beq.w	8003c88 <HAL_DMA_IRQHandler+0xce8>
 8003afe:	693b      	ldr	r3, [r7, #16]
 8003b00:	f003 0302 	and.w	r3, r3, #2
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	f000 80bf 	beq.w	8003c88 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b0e:	f003 031f 	and.w	r3, r3, #31
 8003b12:	2202      	movs	r2, #2
 8003b14:	409a      	lsls	r2, r3
 8003b16:	69fb      	ldr	r3, [r7, #28]
 8003b18:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003b1a:	693b      	ldr	r3, [r7, #16]
 8003b1c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d018      	beq.n	8003b56 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003b24:	693b      	ldr	r3, [r7, #16]
 8003b26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d109      	bne.n	8003b42 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	f000 813a 	beq.w	8003dac <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b3c:	6878      	ldr	r0, [r7, #4]
 8003b3e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003b40:	e134      	b.n	8003dac <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	f000 8130 	beq.w	8003dac <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b50:	6878      	ldr	r0, [r7, #4]
 8003b52:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003b54:	e12a      	b.n	8003dac <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003b56:	693b      	ldr	r3, [r7, #16]
 8003b58:	f003 0320 	and.w	r3, r3, #32
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d168      	bne.n	8003c32 <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a38      	ldr	r2, [pc, #224]	; (8003c48 <HAL_DMA_IRQHandler+0xca8>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d04a      	beq.n	8003c00 <HAL_DMA_IRQHandler+0xc60>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4a37      	ldr	r2, [pc, #220]	; (8003c4c <HAL_DMA_IRQHandler+0xcac>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d045      	beq.n	8003c00 <HAL_DMA_IRQHandler+0xc60>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4a35      	ldr	r2, [pc, #212]	; (8003c50 <HAL_DMA_IRQHandler+0xcb0>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d040      	beq.n	8003c00 <HAL_DMA_IRQHandler+0xc60>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4a34      	ldr	r2, [pc, #208]	; (8003c54 <HAL_DMA_IRQHandler+0xcb4>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d03b      	beq.n	8003c00 <HAL_DMA_IRQHandler+0xc60>
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4a32      	ldr	r2, [pc, #200]	; (8003c58 <HAL_DMA_IRQHandler+0xcb8>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d036      	beq.n	8003c00 <HAL_DMA_IRQHandler+0xc60>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4a31      	ldr	r2, [pc, #196]	; (8003c5c <HAL_DMA_IRQHandler+0xcbc>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d031      	beq.n	8003c00 <HAL_DMA_IRQHandler+0xc60>
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4a2f      	ldr	r2, [pc, #188]	; (8003c60 <HAL_DMA_IRQHandler+0xcc0>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d02c      	beq.n	8003c00 <HAL_DMA_IRQHandler+0xc60>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4a2e      	ldr	r2, [pc, #184]	; (8003c64 <HAL_DMA_IRQHandler+0xcc4>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d027      	beq.n	8003c00 <HAL_DMA_IRQHandler+0xc60>
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4a2c      	ldr	r2, [pc, #176]	; (8003c68 <HAL_DMA_IRQHandler+0xcc8>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d022      	beq.n	8003c00 <HAL_DMA_IRQHandler+0xc60>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4a2b      	ldr	r2, [pc, #172]	; (8003c6c <HAL_DMA_IRQHandler+0xccc>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d01d      	beq.n	8003c00 <HAL_DMA_IRQHandler+0xc60>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4a29      	ldr	r2, [pc, #164]	; (8003c70 <HAL_DMA_IRQHandler+0xcd0>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d018      	beq.n	8003c00 <HAL_DMA_IRQHandler+0xc60>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4a28      	ldr	r2, [pc, #160]	; (8003c74 <HAL_DMA_IRQHandler+0xcd4>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d013      	beq.n	8003c00 <HAL_DMA_IRQHandler+0xc60>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4a26      	ldr	r2, [pc, #152]	; (8003c78 <HAL_DMA_IRQHandler+0xcd8>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d00e      	beq.n	8003c00 <HAL_DMA_IRQHandler+0xc60>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4a25      	ldr	r2, [pc, #148]	; (8003c7c <HAL_DMA_IRQHandler+0xcdc>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d009      	beq.n	8003c00 <HAL_DMA_IRQHandler+0xc60>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4a23      	ldr	r2, [pc, #140]	; (8003c80 <HAL_DMA_IRQHandler+0xce0>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d004      	beq.n	8003c00 <HAL_DMA_IRQHandler+0xc60>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4a22      	ldr	r2, [pc, #136]	; (8003c84 <HAL_DMA_IRQHandler+0xce4>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d108      	bne.n	8003c12 <HAL_DMA_IRQHandler+0xc72>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	681a      	ldr	r2, [r3, #0]
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f022 0214 	bic.w	r2, r2, #20
 8003c0e:	601a      	str	r2, [r3, #0]
 8003c10:	e007      	b.n	8003c22 <HAL_DMA_IRQHandler+0xc82>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	681a      	ldr	r2, [r3, #0]
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f022 020a 	bic.w	r2, r2, #10
 8003c20:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2200      	movs	r2, #0
 8003c26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2201      	movs	r2, #1
 8003c2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	f000 80b8 	beq.w	8003dac <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c40:	6878      	ldr	r0, [r7, #4]
 8003c42:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003c44:	e0b2      	b.n	8003dac <HAL_DMA_IRQHandler+0xe0c>
 8003c46:	bf00      	nop
 8003c48:	40020010 	.word	0x40020010
 8003c4c:	40020028 	.word	0x40020028
 8003c50:	40020040 	.word	0x40020040
 8003c54:	40020058 	.word	0x40020058
 8003c58:	40020070 	.word	0x40020070
 8003c5c:	40020088 	.word	0x40020088
 8003c60:	400200a0 	.word	0x400200a0
 8003c64:	400200b8 	.word	0x400200b8
 8003c68:	40020410 	.word	0x40020410
 8003c6c:	40020428 	.word	0x40020428
 8003c70:	40020440 	.word	0x40020440
 8003c74:	40020458 	.word	0x40020458
 8003c78:	40020470 	.word	0x40020470
 8003c7c:	40020488 	.word	0x40020488
 8003c80:	400204a0 	.word	0x400204a0
 8003c84:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c8c:	f003 031f 	and.w	r3, r3, #31
 8003c90:	2208      	movs	r2, #8
 8003c92:	409a      	lsls	r2, r3
 8003c94:	697b      	ldr	r3, [r7, #20]
 8003c96:	4013      	ands	r3, r2
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	f000 8088 	beq.w	8003dae <HAL_DMA_IRQHandler+0xe0e>
 8003c9e:	693b      	ldr	r3, [r7, #16]
 8003ca0:	f003 0308 	and.w	r3, r3, #8
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	f000 8082 	beq.w	8003dae <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4a41      	ldr	r2, [pc, #260]	; (8003db4 <HAL_DMA_IRQHandler+0xe14>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d04a      	beq.n	8003d4a <HAL_DMA_IRQHandler+0xdaa>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a3f      	ldr	r2, [pc, #252]	; (8003db8 <HAL_DMA_IRQHandler+0xe18>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d045      	beq.n	8003d4a <HAL_DMA_IRQHandler+0xdaa>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4a3e      	ldr	r2, [pc, #248]	; (8003dbc <HAL_DMA_IRQHandler+0xe1c>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d040      	beq.n	8003d4a <HAL_DMA_IRQHandler+0xdaa>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a3c      	ldr	r2, [pc, #240]	; (8003dc0 <HAL_DMA_IRQHandler+0xe20>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d03b      	beq.n	8003d4a <HAL_DMA_IRQHandler+0xdaa>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4a3b      	ldr	r2, [pc, #236]	; (8003dc4 <HAL_DMA_IRQHandler+0xe24>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d036      	beq.n	8003d4a <HAL_DMA_IRQHandler+0xdaa>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a39      	ldr	r2, [pc, #228]	; (8003dc8 <HAL_DMA_IRQHandler+0xe28>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d031      	beq.n	8003d4a <HAL_DMA_IRQHandler+0xdaa>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4a38      	ldr	r2, [pc, #224]	; (8003dcc <HAL_DMA_IRQHandler+0xe2c>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d02c      	beq.n	8003d4a <HAL_DMA_IRQHandler+0xdaa>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4a36      	ldr	r2, [pc, #216]	; (8003dd0 <HAL_DMA_IRQHandler+0xe30>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d027      	beq.n	8003d4a <HAL_DMA_IRQHandler+0xdaa>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4a35      	ldr	r2, [pc, #212]	; (8003dd4 <HAL_DMA_IRQHandler+0xe34>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d022      	beq.n	8003d4a <HAL_DMA_IRQHandler+0xdaa>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	4a33      	ldr	r2, [pc, #204]	; (8003dd8 <HAL_DMA_IRQHandler+0xe38>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d01d      	beq.n	8003d4a <HAL_DMA_IRQHandler+0xdaa>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4a32      	ldr	r2, [pc, #200]	; (8003ddc <HAL_DMA_IRQHandler+0xe3c>)
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d018      	beq.n	8003d4a <HAL_DMA_IRQHandler+0xdaa>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4a30      	ldr	r2, [pc, #192]	; (8003de0 <HAL_DMA_IRQHandler+0xe40>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d013      	beq.n	8003d4a <HAL_DMA_IRQHandler+0xdaa>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4a2f      	ldr	r2, [pc, #188]	; (8003de4 <HAL_DMA_IRQHandler+0xe44>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d00e      	beq.n	8003d4a <HAL_DMA_IRQHandler+0xdaa>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4a2d      	ldr	r2, [pc, #180]	; (8003de8 <HAL_DMA_IRQHandler+0xe48>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d009      	beq.n	8003d4a <HAL_DMA_IRQHandler+0xdaa>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4a2c      	ldr	r2, [pc, #176]	; (8003dec <HAL_DMA_IRQHandler+0xe4c>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d004      	beq.n	8003d4a <HAL_DMA_IRQHandler+0xdaa>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4a2a      	ldr	r2, [pc, #168]	; (8003df0 <HAL_DMA_IRQHandler+0xe50>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d108      	bne.n	8003d5c <HAL_DMA_IRQHandler+0xdbc>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	681a      	ldr	r2, [r3, #0]
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f022 021c 	bic.w	r2, r2, #28
 8003d58:	601a      	str	r2, [r3, #0]
 8003d5a:	e007      	b.n	8003d6c <HAL_DMA_IRQHandler+0xdcc>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	681a      	ldr	r2, [r3, #0]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f022 020e 	bic.w	r2, r2, #14
 8003d6a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d70:	f003 031f 	and.w	r3, r3, #31
 8003d74:	2201      	movs	r2, #1
 8003d76:	409a      	lsls	r2, r3
 8003d78:	69fb      	ldr	r3, [r7, #28]
 8003d7a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2201      	movs	r2, #1
 8003d80:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2200      	movs	r2, #0
 8003d86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2201      	movs	r2, #1
 8003d8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d009      	beq.n	8003dae <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d9e:	6878      	ldr	r0, [r7, #4]
 8003da0:	4798      	blx	r3
 8003da2:	e004      	b.n	8003dae <HAL_DMA_IRQHandler+0xe0e>
          return;
 8003da4:	bf00      	nop
 8003da6:	e002      	b.n	8003dae <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003da8:	bf00      	nop
 8003daa:	e000      	b.n	8003dae <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003dac:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003dae:	3728      	adds	r7, #40	; 0x28
 8003db0:	46bd      	mov	sp, r7
 8003db2:	bd80      	pop	{r7, pc}
 8003db4:	40020010 	.word	0x40020010
 8003db8:	40020028 	.word	0x40020028
 8003dbc:	40020040 	.word	0x40020040
 8003dc0:	40020058 	.word	0x40020058
 8003dc4:	40020070 	.word	0x40020070
 8003dc8:	40020088 	.word	0x40020088
 8003dcc:	400200a0 	.word	0x400200a0
 8003dd0:	400200b8 	.word	0x400200b8
 8003dd4:	40020410 	.word	0x40020410
 8003dd8:	40020428 	.word	0x40020428
 8003ddc:	40020440 	.word	0x40020440
 8003de0:	40020458 	.word	0x40020458
 8003de4:	40020470 	.word	0x40020470
 8003de8:	40020488 	.word	0x40020488
 8003dec:	400204a0 	.word	0x400204a0
 8003df0:	400204b8 	.word	0x400204b8

08003df4 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003df4:	b480      	push	{r7}
 8003df6:	b083      	sub	sp, #12
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8003e00:	4618      	mov	r0, r3
 8003e02:	370c      	adds	r7, #12
 8003e04:	46bd      	mov	sp, r7
 8003e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0a:	4770      	bx	lr

08003e0c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	b087      	sub	sp, #28
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	60f8      	str	r0, [r7, #12]
 8003e14:	60b9      	str	r1, [r7, #8]
 8003e16:	607a      	str	r2, [r7, #4]
 8003e18:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e1e:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e24:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4a84      	ldr	r2, [pc, #528]	; (800403c <DMA_SetConfig+0x230>)
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d072      	beq.n	8003f16 <DMA_SetConfig+0x10a>
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a82      	ldr	r2, [pc, #520]	; (8004040 <DMA_SetConfig+0x234>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d06d      	beq.n	8003f16 <DMA_SetConfig+0x10a>
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a81      	ldr	r2, [pc, #516]	; (8004044 <DMA_SetConfig+0x238>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d068      	beq.n	8003f16 <DMA_SetConfig+0x10a>
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4a7f      	ldr	r2, [pc, #508]	; (8004048 <DMA_SetConfig+0x23c>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d063      	beq.n	8003f16 <DMA_SetConfig+0x10a>
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a7e      	ldr	r2, [pc, #504]	; (800404c <DMA_SetConfig+0x240>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d05e      	beq.n	8003f16 <DMA_SetConfig+0x10a>
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4a7c      	ldr	r2, [pc, #496]	; (8004050 <DMA_SetConfig+0x244>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d059      	beq.n	8003f16 <DMA_SetConfig+0x10a>
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4a7b      	ldr	r2, [pc, #492]	; (8004054 <DMA_SetConfig+0x248>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d054      	beq.n	8003f16 <DMA_SetConfig+0x10a>
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a79      	ldr	r2, [pc, #484]	; (8004058 <DMA_SetConfig+0x24c>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d04f      	beq.n	8003f16 <DMA_SetConfig+0x10a>
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4a78      	ldr	r2, [pc, #480]	; (800405c <DMA_SetConfig+0x250>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d04a      	beq.n	8003f16 <DMA_SetConfig+0x10a>
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4a76      	ldr	r2, [pc, #472]	; (8004060 <DMA_SetConfig+0x254>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d045      	beq.n	8003f16 <DMA_SetConfig+0x10a>
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4a75      	ldr	r2, [pc, #468]	; (8004064 <DMA_SetConfig+0x258>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d040      	beq.n	8003f16 <DMA_SetConfig+0x10a>
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4a73      	ldr	r2, [pc, #460]	; (8004068 <DMA_SetConfig+0x25c>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d03b      	beq.n	8003f16 <DMA_SetConfig+0x10a>
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4a72      	ldr	r2, [pc, #456]	; (800406c <DMA_SetConfig+0x260>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d036      	beq.n	8003f16 <DMA_SetConfig+0x10a>
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4a70      	ldr	r2, [pc, #448]	; (8004070 <DMA_SetConfig+0x264>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d031      	beq.n	8003f16 <DMA_SetConfig+0x10a>
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4a6f      	ldr	r2, [pc, #444]	; (8004074 <DMA_SetConfig+0x268>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d02c      	beq.n	8003f16 <DMA_SetConfig+0x10a>
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4a6d      	ldr	r2, [pc, #436]	; (8004078 <DMA_SetConfig+0x26c>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d027      	beq.n	8003f16 <DMA_SetConfig+0x10a>
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4a6c      	ldr	r2, [pc, #432]	; (800407c <DMA_SetConfig+0x270>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d022      	beq.n	8003f16 <DMA_SetConfig+0x10a>
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4a6a      	ldr	r2, [pc, #424]	; (8004080 <DMA_SetConfig+0x274>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d01d      	beq.n	8003f16 <DMA_SetConfig+0x10a>
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4a69      	ldr	r2, [pc, #420]	; (8004084 <DMA_SetConfig+0x278>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d018      	beq.n	8003f16 <DMA_SetConfig+0x10a>
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4a67      	ldr	r2, [pc, #412]	; (8004088 <DMA_SetConfig+0x27c>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d013      	beq.n	8003f16 <DMA_SetConfig+0x10a>
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4a66      	ldr	r2, [pc, #408]	; (800408c <DMA_SetConfig+0x280>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d00e      	beq.n	8003f16 <DMA_SetConfig+0x10a>
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4a64      	ldr	r2, [pc, #400]	; (8004090 <DMA_SetConfig+0x284>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d009      	beq.n	8003f16 <DMA_SetConfig+0x10a>
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4a63      	ldr	r2, [pc, #396]	; (8004094 <DMA_SetConfig+0x288>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d004      	beq.n	8003f16 <DMA_SetConfig+0x10a>
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4a61      	ldr	r2, [pc, #388]	; (8004098 <DMA_SetConfig+0x28c>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d101      	bne.n	8003f1a <DMA_SetConfig+0x10e>
 8003f16:	2301      	movs	r3, #1
 8003f18:	e000      	b.n	8003f1c <DMA_SetConfig+0x110>
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d00d      	beq.n	8003f3c <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f24:	68fa      	ldr	r2, [r7, #12]
 8003f26:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003f28:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d004      	beq.n	8003f3c <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f36:	68fa      	ldr	r2, [r7, #12]
 8003f38:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003f3a:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4a3e      	ldr	r2, [pc, #248]	; (800403c <DMA_SetConfig+0x230>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d04a      	beq.n	8003fdc <DMA_SetConfig+0x1d0>
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4a3d      	ldr	r2, [pc, #244]	; (8004040 <DMA_SetConfig+0x234>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d045      	beq.n	8003fdc <DMA_SetConfig+0x1d0>
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4a3b      	ldr	r2, [pc, #236]	; (8004044 <DMA_SetConfig+0x238>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d040      	beq.n	8003fdc <DMA_SetConfig+0x1d0>
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4a3a      	ldr	r2, [pc, #232]	; (8004048 <DMA_SetConfig+0x23c>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d03b      	beq.n	8003fdc <DMA_SetConfig+0x1d0>
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4a38      	ldr	r2, [pc, #224]	; (800404c <DMA_SetConfig+0x240>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d036      	beq.n	8003fdc <DMA_SetConfig+0x1d0>
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4a37      	ldr	r2, [pc, #220]	; (8004050 <DMA_SetConfig+0x244>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d031      	beq.n	8003fdc <DMA_SetConfig+0x1d0>
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4a35      	ldr	r2, [pc, #212]	; (8004054 <DMA_SetConfig+0x248>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d02c      	beq.n	8003fdc <DMA_SetConfig+0x1d0>
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4a34      	ldr	r2, [pc, #208]	; (8004058 <DMA_SetConfig+0x24c>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d027      	beq.n	8003fdc <DMA_SetConfig+0x1d0>
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4a32      	ldr	r2, [pc, #200]	; (800405c <DMA_SetConfig+0x250>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d022      	beq.n	8003fdc <DMA_SetConfig+0x1d0>
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a31      	ldr	r2, [pc, #196]	; (8004060 <DMA_SetConfig+0x254>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d01d      	beq.n	8003fdc <DMA_SetConfig+0x1d0>
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a2f      	ldr	r2, [pc, #188]	; (8004064 <DMA_SetConfig+0x258>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d018      	beq.n	8003fdc <DMA_SetConfig+0x1d0>
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4a2e      	ldr	r2, [pc, #184]	; (8004068 <DMA_SetConfig+0x25c>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d013      	beq.n	8003fdc <DMA_SetConfig+0x1d0>
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4a2c      	ldr	r2, [pc, #176]	; (800406c <DMA_SetConfig+0x260>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d00e      	beq.n	8003fdc <DMA_SetConfig+0x1d0>
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4a2b      	ldr	r2, [pc, #172]	; (8004070 <DMA_SetConfig+0x264>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d009      	beq.n	8003fdc <DMA_SetConfig+0x1d0>
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a29      	ldr	r2, [pc, #164]	; (8004074 <DMA_SetConfig+0x268>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d004      	beq.n	8003fdc <DMA_SetConfig+0x1d0>
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4a28      	ldr	r2, [pc, #160]	; (8004078 <DMA_SetConfig+0x26c>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d101      	bne.n	8003fe0 <DMA_SetConfig+0x1d4>
 8003fdc:	2301      	movs	r3, #1
 8003fde:	e000      	b.n	8003fe2 <DMA_SetConfig+0x1d6>
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d05a      	beq.n	800409c <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fea:	f003 031f 	and.w	r3, r3, #31
 8003fee:	223f      	movs	r2, #63	; 0x3f
 8003ff0:	409a      	lsls	r2, r3
 8003ff2:	697b      	ldr	r3, [r7, #20]
 8003ff4:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	681a      	ldr	r2, [r3, #0]
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004004:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	683a      	ldr	r2, [r7, #0]
 800400c:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	689b      	ldr	r3, [r3, #8]
 8004012:	2b40      	cmp	r3, #64	; 0x40
 8004014:	d108      	bne.n	8004028 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	687a      	ldr	r2, [r7, #4]
 800401c:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	68ba      	ldr	r2, [r7, #8]
 8004024:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004026:	e087      	b.n	8004138 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	68ba      	ldr	r2, [r7, #8]
 800402e:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	687a      	ldr	r2, [r7, #4]
 8004036:	60da      	str	r2, [r3, #12]
}
 8004038:	e07e      	b.n	8004138 <DMA_SetConfig+0x32c>
 800403a:	bf00      	nop
 800403c:	40020010 	.word	0x40020010
 8004040:	40020028 	.word	0x40020028
 8004044:	40020040 	.word	0x40020040
 8004048:	40020058 	.word	0x40020058
 800404c:	40020070 	.word	0x40020070
 8004050:	40020088 	.word	0x40020088
 8004054:	400200a0 	.word	0x400200a0
 8004058:	400200b8 	.word	0x400200b8
 800405c:	40020410 	.word	0x40020410
 8004060:	40020428 	.word	0x40020428
 8004064:	40020440 	.word	0x40020440
 8004068:	40020458 	.word	0x40020458
 800406c:	40020470 	.word	0x40020470
 8004070:	40020488 	.word	0x40020488
 8004074:	400204a0 	.word	0x400204a0
 8004078:	400204b8 	.word	0x400204b8
 800407c:	58025408 	.word	0x58025408
 8004080:	5802541c 	.word	0x5802541c
 8004084:	58025430 	.word	0x58025430
 8004088:	58025444 	.word	0x58025444
 800408c:	58025458 	.word	0x58025458
 8004090:	5802546c 	.word	0x5802546c
 8004094:	58025480 	.word	0x58025480
 8004098:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4a28      	ldr	r2, [pc, #160]	; (8004144 <DMA_SetConfig+0x338>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d022      	beq.n	80040ec <DMA_SetConfig+0x2e0>
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4a27      	ldr	r2, [pc, #156]	; (8004148 <DMA_SetConfig+0x33c>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d01d      	beq.n	80040ec <DMA_SetConfig+0x2e0>
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4a25      	ldr	r2, [pc, #148]	; (800414c <DMA_SetConfig+0x340>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d018      	beq.n	80040ec <DMA_SetConfig+0x2e0>
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4a24      	ldr	r2, [pc, #144]	; (8004150 <DMA_SetConfig+0x344>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d013      	beq.n	80040ec <DMA_SetConfig+0x2e0>
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4a22      	ldr	r2, [pc, #136]	; (8004154 <DMA_SetConfig+0x348>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d00e      	beq.n	80040ec <DMA_SetConfig+0x2e0>
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4a21      	ldr	r2, [pc, #132]	; (8004158 <DMA_SetConfig+0x34c>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d009      	beq.n	80040ec <DMA_SetConfig+0x2e0>
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	4a1f      	ldr	r2, [pc, #124]	; (800415c <DMA_SetConfig+0x350>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d004      	beq.n	80040ec <DMA_SetConfig+0x2e0>
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4a1e      	ldr	r2, [pc, #120]	; (8004160 <DMA_SetConfig+0x354>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d101      	bne.n	80040f0 <DMA_SetConfig+0x2e4>
 80040ec:	2301      	movs	r3, #1
 80040ee:	e000      	b.n	80040f2 <DMA_SetConfig+0x2e6>
 80040f0:	2300      	movs	r3, #0
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d020      	beq.n	8004138 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040fa:	f003 031f 	and.w	r3, r3, #31
 80040fe:	2201      	movs	r2, #1
 8004100:	409a      	lsls	r2, r3
 8004102:	693b      	ldr	r3, [r7, #16]
 8004104:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	683a      	ldr	r2, [r7, #0]
 800410c:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	689b      	ldr	r3, [r3, #8]
 8004112:	2b40      	cmp	r3, #64	; 0x40
 8004114:	d108      	bne.n	8004128 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	687a      	ldr	r2, [r7, #4]
 800411c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	68ba      	ldr	r2, [r7, #8]
 8004124:	60da      	str	r2, [r3, #12]
}
 8004126:	e007      	b.n	8004138 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	68ba      	ldr	r2, [r7, #8]
 800412e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	687a      	ldr	r2, [r7, #4]
 8004136:	60da      	str	r2, [r3, #12]
}
 8004138:	bf00      	nop
 800413a:	371c      	adds	r7, #28
 800413c:	46bd      	mov	sp, r7
 800413e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004142:	4770      	bx	lr
 8004144:	58025408 	.word	0x58025408
 8004148:	5802541c 	.word	0x5802541c
 800414c:	58025430 	.word	0x58025430
 8004150:	58025444 	.word	0x58025444
 8004154:	58025458 	.word	0x58025458
 8004158:	5802546c 	.word	0x5802546c
 800415c:	58025480 	.word	0x58025480
 8004160:	58025494 	.word	0x58025494

08004164 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004164:	b480      	push	{r7}
 8004166:	b085      	sub	sp, #20
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	4a42      	ldr	r2, [pc, #264]	; (800427c <DMA_CalcBaseAndBitshift+0x118>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d04a      	beq.n	800420c <DMA_CalcBaseAndBitshift+0xa8>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	4a41      	ldr	r2, [pc, #260]	; (8004280 <DMA_CalcBaseAndBitshift+0x11c>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d045      	beq.n	800420c <DMA_CalcBaseAndBitshift+0xa8>
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4a3f      	ldr	r2, [pc, #252]	; (8004284 <DMA_CalcBaseAndBitshift+0x120>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d040      	beq.n	800420c <DMA_CalcBaseAndBitshift+0xa8>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4a3e      	ldr	r2, [pc, #248]	; (8004288 <DMA_CalcBaseAndBitshift+0x124>)
 8004190:	4293      	cmp	r3, r2
 8004192:	d03b      	beq.n	800420c <DMA_CalcBaseAndBitshift+0xa8>
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	4a3c      	ldr	r2, [pc, #240]	; (800428c <DMA_CalcBaseAndBitshift+0x128>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d036      	beq.n	800420c <DMA_CalcBaseAndBitshift+0xa8>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4a3b      	ldr	r2, [pc, #236]	; (8004290 <DMA_CalcBaseAndBitshift+0x12c>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d031      	beq.n	800420c <DMA_CalcBaseAndBitshift+0xa8>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4a39      	ldr	r2, [pc, #228]	; (8004294 <DMA_CalcBaseAndBitshift+0x130>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d02c      	beq.n	800420c <DMA_CalcBaseAndBitshift+0xa8>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4a38      	ldr	r2, [pc, #224]	; (8004298 <DMA_CalcBaseAndBitshift+0x134>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d027      	beq.n	800420c <DMA_CalcBaseAndBitshift+0xa8>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4a36      	ldr	r2, [pc, #216]	; (800429c <DMA_CalcBaseAndBitshift+0x138>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d022      	beq.n	800420c <DMA_CalcBaseAndBitshift+0xa8>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4a35      	ldr	r2, [pc, #212]	; (80042a0 <DMA_CalcBaseAndBitshift+0x13c>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d01d      	beq.n	800420c <DMA_CalcBaseAndBitshift+0xa8>
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4a33      	ldr	r2, [pc, #204]	; (80042a4 <DMA_CalcBaseAndBitshift+0x140>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d018      	beq.n	800420c <DMA_CalcBaseAndBitshift+0xa8>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4a32      	ldr	r2, [pc, #200]	; (80042a8 <DMA_CalcBaseAndBitshift+0x144>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d013      	beq.n	800420c <DMA_CalcBaseAndBitshift+0xa8>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4a30      	ldr	r2, [pc, #192]	; (80042ac <DMA_CalcBaseAndBitshift+0x148>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d00e      	beq.n	800420c <DMA_CalcBaseAndBitshift+0xa8>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4a2f      	ldr	r2, [pc, #188]	; (80042b0 <DMA_CalcBaseAndBitshift+0x14c>)
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d009      	beq.n	800420c <DMA_CalcBaseAndBitshift+0xa8>
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4a2d      	ldr	r2, [pc, #180]	; (80042b4 <DMA_CalcBaseAndBitshift+0x150>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d004      	beq.n	800420c <DMA_CalcBaseAndBitshift+0xa8>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4a2c      	ldr	r2, [pc, #176]	; (80042b8 <DMA_CalcBaseAndBitshift+0x154>)
 8004208:	4293      	cmp	r3, r2
 800420a:	d101      	bne.n	8004210 <DMA_CalcBaseAndBitshift+0xac>
 800420c:	2301      	movs	r3, #1
 800420e:	e000      	b.n	8004212 <DMA_CalcBaseAndBitshift+0xae>
 8004210:	2300      	movs	r3, #0
 8004212:	2b00      	cmp	r3, #0
 8004214:	d024      	beq.n	8004260 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	b2db      	uxtb	r3, r3
 800421c:	3b10      	subs	r3, #16
 800421e:	4a27      	ldr	r2, [pc, #156]	; (80042bc <DMA_CalcBaseAndBitshift+0x158>)
 8004220:	fba2 2303 	umull	r2, r3, r2, r3
 8004224:	091b      	lsrs	r3, r3, #4
 8004226:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	f003 0307 	and.w	r3, r3, #7
 800422e:	4a24      	ldr	r2, [pc, #144]	; (80042c0 <DMA_CalcBaseAndBitshift+0x15c>)
 8004230:	5cd3      	ldrb	r3, [r2, r3]
 8004232:	461a      	mov	r2, r3
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	2b03      	cmp	r3, #3
 800423c:	d908      	bls.n	8004250 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	461a      	mov	r2, r3
 8004244:	4b1f      	ldr	r3, [pc, #124]	; (80042c4 <DMA_CalcBaseAndBitshift+0x160>)
 8004246:	4013      	ands	r3, r2
 8004248:	1d1a      	adds	r2, r3, #4
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	659a      	str	r2, [r3, #88]	; 0x58
 800424e:	e00d      	b.n	800426c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	461a      	mov	r2, r3
 8004256:	4b1b      	ldr	r3, [pc, #108]	; (80042c4 <DMA_CalcBaseAndBitshift+0x160>)
 8004258:	4013      	ands	r3, r2
 800425a:	687a      	ldr	r2, [r7, #4]
 800425c:	6593      	str	r3, [r2, #88]	; 0x58
 800425e:	e005      	b.n	800426c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004270:	4618      	mov	r0, r3
 8004272:	3714      	adds	r7, #20
 8004274:	46bd      	mov	sp, r7
 8004276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427a:	4770      	bx	lr
 800427c:	40020010 	.word	0x40020010
 8004280:	40020028 	.word	0x40020028
 8004284:	40020040 	.word	0x40020040
 8004288:	40020058 	.word	0x40020058
 800428c:	40020070 	.word	0x40020070
 8004290:	40020088 	.word	0x40020088
 8004294:	400200a0 	.word	0x400200a0
 8004298:	400200b8 	.word	0x400200b8
 800429c:	40020410 	.word	0x40020410
 80042a0:	40020428 	.word	0x40020428
 80042a4:	40020440 	.word	0x40020440
 80042a8:	40020458 	.word	0x40020458
 80042ac:	40020470 	.word	0x40020470
 80042b0:	40020488 	.word	0x40020488
 80042b4:	400204a0 	.word	0x400204a0
 80042b8:	400204b8 	.word	0x400204b8
 80042bc:	aaaaaaab 	.word	0xaaaaaaab
 80042c0:	0800c9f8 	.word	0x0800c9f8
 80042c4:	fffffc00 	.word	0xfffffc00

080042c8 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80042c8:	b480      	push	{r7}
 80042ca:	b085      	sub	sp, #20
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80042d0:	2300      	movs	r3, #0
 80042d2:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	699b      	ldr	r3, [r3, #24]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d120      	bne.n	800431e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042e0:	2b03      	cmp	r3, #3
 80042e2:	d858      	bhi.n	8004396 <DMA_CheckFifoParam+0xce>
 80042e4:	a201      	add	r2, pc, #4	; (adr r2, 80042ec <DMA_CheckFifoParam+0x24>)
 80042e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042ea:	bf00      	nop
 80042ec:	080042fd 	.word	0x080042fd
 80042f0:	0800430f 	.word	0x0800430f
 80042f4:	080042fd 	.word	0x080042fd
 80042f8:	08004397 	.word	0x08004397
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004300:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004304:	2b00      	cmp	r3, #0
 8004306:	d048      	beq.n	800439a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004308:	2301      	movs	r3, #1
 800430a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800430c:	e045      	b.n	800439a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004312:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004316:	d142      	bne.n	800439e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004318:	2301      	movs	r3, #1
 800431a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800431c:	e03f      	b.n	800439e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	699b      	ldr	r3, [r3, #24]
 8004322:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004326:	d123      	bne.n	8004370 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800432c:	2b03      	cmp	r3, #3
 800432e:	d838      	bhi.n	80043a2 <DMA_CheckFifoParam+0xda>
 8004330:	a201      	add	r2, pc, #4	; (adr r2, 8004338 <DMA_CheckFifoParam+0x70>)
 8004332:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004336:	bf00      	nop
 8004338:	08004349 	.word	0x08004349
 800433c:	0800434f 	.word	0x0800434f
 8004340:	08004349 	.word	0x08004349
 8004344:	08004361 	.word	0x08004361
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004348:	2301      	movs	r3, #1
 800434a:	73fb      	strb	r3, [r7, #15]
        break;
 800434c:	e030      	b.n	80043b0 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004352:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004356:	2b00      	cmp	r3, #0
 8004358:	d025      	beq.n	80043a6 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800435a:	2301      	movs	r3, #1
 800435c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800435e:	e022      	b.n	80043a6 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004364:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004368:	d11f      	bne.n	80043aa <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800436a:	2301      	movs	r3, #1
 800436c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800436e:	e01c      	b.n	80043aa <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004374:	2b02      	cmp	r3, #2
 8004376:	d902      	bls.n	800437e <DMA_CheckFifoParam+0xb6>
 8004378:	2b03      	cmp	r3, #3
 800437a:	d003      	beq.n	8004384 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800437c:	e018      	b.n	80043b0 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800437e:	2301      	movs	r3, #1
 8004380:	73fb      	strb	r3, [r7, #15]
        break;
 8004382:	e015      	b.n	80043b0 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004388:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800438c:	2b00      	cmp	r3, #0
 800438e:	d00e      	beq.n	80043ae <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004390:	2301      	movs	r3, #1
 8004392:	73fb      	strb	r3, [r7, #15]
    break;
 8004394:	e00b      	b.n	80043ae <DMA_CheckFifoParam+0xe6>
        break;
 8004396:	bf00      	nop
 8004398:	e00a      	b.n	80043b0 <DMA_CheckFifoParam+0xe8>
        break;
 800439a:	bf00      	nop
 800439c:	e008      	b.n	80043b0 <DMA_CheckFifoParam+0xe8>
        break;
 800439e:	bf00      	nop
 80043a0:	e006      	b.n	80043b0 <DMA_CheckFifoParam+0xe8>
        break;
 80043a2:	bf00      	nop
 80043a4:	e004      	b.n	80043b0 <DMA_CheckFifoParam+0xe8>
        break;
 80043a6:	bf00      	nop
 80043a8:	e002      	b.n	80043b0 <DMA_CheckFifoParam+0xe8>
        break;
 80043aa:	bf00      	nop
 80043ac:	e000      	b.n	80043b0 <DMA_CheckFifoParam+0xe8>
    break;
 80043ae:	bf00      	nop
    }
  }

  return status;
 80043b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80043b2:	4618      	mov	r0, r3
 80043b4:	3714      	adds	r7, #20
 80043b6:	46bd      	mov	sp, r7
 80043b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043bc:	4770      	bx	lr
 80043be:	bf00      	nop

080043c0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80043c0:	b480      	push	{r7}
 80043c2:	b085      	sub	sp, #20
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4a38      	ldr	r2, [pc, #224]	; (80044b4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d022      	beq.n	800441e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4a36      	ldr	r2, [pc, #216]	; (80044b8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d01d      	beq.n	800441e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4a35      	ldr	r2, [pc, #212]	; (80044bc <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d018      	beq.n	800441e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4a33      	ldr	r2, [pc, #204]	; (80044c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d013      	beq.n	800441e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4a32      	ldr	r2, [pc, #200]	; (80044c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d00e      	beq.n	800441e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4a30      	ldr	r2, [pc, #192]	; (80044c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8004406:	4293      	cmp	r3, r2
 8004408:	d009      	beq.n	800441e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4a2f      	ldr	r2, [pc, #188]	; (80044cc <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004410:	4293      	cmp	r3, r2
 8004412:	d004      	beq.n	800441e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4a2d      	ldr	r2, [pc, #180]	; (80044d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d101      	bne.n	8004422 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800441e:	2301      	movs	r3, #1
 8004420:	e000      	b.n	8004424 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8004422:	2300      	movs	r3, #0
 8004424:	2b00      	cmp	r3, #0
 8004426:	d01a      	beq.n	800445e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	b2db      	uxtb	r3, r3
 800442e:	3b08      	subs	r3, #8
 8004430:	4a28      	ldr	r2, [pc, #160]	; (80044d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8004432:	fba2 2303 	umull	r2, r3, r2, r3
 8004436:	091b      	lsrs	r3, r3, #4
 8004438:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800443a:	68fa      	ldr	r2, [r7, #12]
 800443c:	4b26      	ldr	r3, [pc, #152]	; (80044d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800443e:	4413      	add	r3, r2
 8004440:	009b      	lsls	r3, r3, #2
 8004442:	461a      	mov	r2, r3
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	4a24      	ldr	r2, [pc, #144]	; (80044dc <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800444c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	f003 031f 	and.w	r3, r3, #31
 8004454:	2201      	movs	r2, #1
 8004456:	409a      	lsls	r2, r3
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800445c:	e024      	b.n	80044a8 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	b2db      	uxtb	r3, r3
 8004464:	3b10      	subs	r3, #16
 8004466:	4a1e      	ldr	r2, [pc, #120]	; (80044e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004468:	fba2 2303 	umull	r2, r3, r2, r3
 800446c:	091b      	lsrs	r3, r3, #4
 800446e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004470:	68bb      	ldr	r3, [r7, #8]
 8004472:	4a1c      	ldr	r2, [pc, #112]	; (80044e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d806      	bhi.n	8004486 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004478:	68bb      	ldr	r3, [r7, #8]
 800447a:	4a1b      	ldr	r2, [pc, #108]	; (80044e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d902      	bls.n	8004486 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	3308      	adds	r3, #8
 8004484:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004486:	68fa      	ldr	r2, [r7, #12]
 8004488:	4b18      	ldr	r3, [pc, #96]	; (80044ec <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800448a:	4413      	add	r3, r2
 800448c:	009b      	lsls	r3, r3, #2
 800448e:	461a      	mov	r2, r3
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	4a16      	ldr	r2, [pc, #88]	; (80044f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004498:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	f003 031f 	and.w	r3, r3, #31
 80044a0:	2201      	movs	r2, #1
 80044a2:	409a      	lsls	r2, r3
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	669a      	str	r2, [r3, #104]	; 0x68
}
 80044a8:	bf00      	nop
 80044aa:	3714      	adds	r7, #20
 80044ac:	46bd      	mov	sp, r7
 80044ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b2:	4770      	bx	lr
 80044b4:	58025408 	.word	0x58025408
 80044b8:	5802541c 	.word	0x5802541c
 80044bc:	58025430 	.word	0x58025430
 80044c0:	58025444 	.word	0x58025444
 80044c4:	58025458 	.word	0x58025458
 80044c8:	5802546c 	.word	0x5802546c
 80044cc:	58025480 	.word	0x58025480
 80044d0:	58025494 	.word	0x58025494
 80044d4:	cccccccd 	.word	0xcccccccd
 80044d8:	16009600 	.word	0x16009600
 80044dc:	58025880 	.word	0x58025880
 80044e0:	aaaaaaab 	.word	0xaaaaaaab
 80044e4:	400204b8 	.word	0x400204b8
 80044e8:	4002040f 	.word	0x4002040f
 80044ec:	10008200 	.word	0x10008200
 80044f0:	40020880 	.word	0x40020880

080044f4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80044f4:	b480      	push	{r7}
 80044f6:	b085      	sub	sp, #20
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	685b      	ldr	r3, [r3, #4]
 8004500:	b2db      	uxtb	r3, r3
 8004502:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d04a      	beq.n	80045a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	2b08      	cmp	r3, #8
 800450e:	d847      	bhi.n	80045a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4a25      	ldr	r2, [pc, #148]	; (80045ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d022      	beq.n	8004560 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4a24      	ldr	r2, [pc, #144]	; (80045b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004520:	4293      	cmp	r3, r2
 8004522:	d01d      	beq.n	8004560 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4a22      	ldr	r2, [pc, #136]	; (80045b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d018      	beq.n	8004560 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4a21      	ldr	r2, [pc, #132]	; (80045b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004534:	4293      	cmp	r3, r2
 8004536:	d013      	beq.n	8004560 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4a1f      	ldr	r2, [pc, #124]	; (80045bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d00e      	beq.n	8004560 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4a1e      	ldr	r2, [pc, #120]	; (80045c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004548:	4293      	cmp	r3, r2
 800454a:	d009      	beq.n	8004560 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4a1c      	ldr	r2, [pc, #112]	; (80045c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d004      	beq.n	8004560 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4a1b      	ldr	r2, [pc, #108]	; (80045c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800455c:	4293      	cmp	r3, r2
 800455e:	d101      	bne.n	8004564 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8004560:	2301      	movs	r3, #1
 8004562:	e000      	b.n	8004566 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004564:	2300      	movs	r3, #0
 8004566:	2b00      	cmp	r3, #0
 8004568:	d00a      	beq.n	8004580 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800456a:	68fa      	ldr	r2, [r7, #12]
 800456c:	4b17      	ldr	r3, [pc, #92]	; (80045cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800456e:	4413      	add	r3, r2
 8004570:	009b      	lsls	r3, r3, #2
 8004572:	461a      	mov	r2, r3
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	4a15      	ldr	r2, [pc, #84]	; (80045d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800457c:	671a      	str	r2, [r3, #112]	; 0x70
 800457e:	e009      	b.n	8004594 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004580:	68fa      	ldr	r2, [r7, #12]
 8004582:	4b14      	ldr	r3, [pc, #80]	; (80045d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004584:	4413      	add	r3, r2
 8004586:	009b      	lsls	r3, r3, #2
 8004588:	461a      	mov	r2, r3
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	4a11      	ldr	r2, [pc, #68]	; (80045d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8004592:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	3b01      	subs	r3, #1
 8004598:	2201      	movs	r2, #1
 800459a:	409a      	lsls	r2, r3
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80045a0:	bf00      	nop
 80045a2:	3714      	adds	r7, #20
 80045a4:	46bd      	mov	sp, r7
 80045a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045aa:	4770      	bx	lr
 80045ac:	58025408 	.word	0x58025408
 80045b0:	5802541c 	.word	0x5802541c
 80045b4:	58025430 	.word	0x58025430
 80045b8:	58025444 	.word	0x58025444
 80045bc:	58025458 	.word	0x58025458
 80045c0:	5802546c 	.word	0x5802546c
 80045c4:	58025480 	.word	0x58025480
 80045c8:	58025494 	.word	0x58025494
 80045cc:	1600963f 	.word	0x1600963f
 80045d0:	58025940 	.word	0x58025940
 80045d4:	1000823f 	.word	0x1000823f
 80045d8:	40020940 	.word	0x40020940

080045dc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80045dc:	b480      	push	{r7}
 80045de:	b089      	sub	sp, #36	; 0x24
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
 80045e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80045e6:	2300      	movs	r3, #0
 80045e8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80045ea:	4b89      	ldr	r3, [pc, #548]	; (8004810 <HAL_GPIO_Init+0x234>)
 80045ec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80045ee:	e194      	b.n	800491a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	681a      	ldr	r2, [r3, #0]
 80045f4:	2101      	movs	r1, #1
 80045f6:	69fb      	ldr	r3, [r7, #28]
 80045f8:	fa01 f303 	lsl.w	r3, r1, r3
 80045fc:	4013      	ands	r3, r2
 80045fe:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004600:	693b      	ldr	r3, [r7, #16]
 8004602:	2b00      	cmp	r3, #0
 8004604:	f000 8186 	beq.w	8004914 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	685b      	ldr	r3, [r3, #4]
 800460c:	2b01      	cmp	r3, #1
 800460e:	d00b      	beq.n	8004628 <HAL_GPIO_Init+0x4c>
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	685b      	ldr	r3, [r3, #4]
 8004614:	2b02      	cmp	r3, #2
 8004616:	d007      	beq.n	8004628 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800461c:	2b11      	cmp	r3, #17
 800461e:	d003      	beq.n	8004628 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	685b      	ldr	r3, [r3, #4]
 8004624:	2b12      	cmp	r3, #18
 8004626:	d130      	bne.n	800468a <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	689b      	ldr	r3, [r3, #8]
 800462c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800462e:	69fb      	ldr	r3, [r7, #28]
 8004630:	005b      	lsls	r3, r3, #1
 8004632:	2203      	movs	r2, #3
 8004634:	fa02 f303 	lsl.w	r3, r2, r3
 8004638:	43db      	mvns	r3, r3
 800463a:	69ba      	ldr	r2, [r7, #24]
 800463c:	4013      	ands	r3, r2
 800463e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	68da      	ldr	r2, [r3, #12]
 8004644:	69fb      	ldr	r3, [r7, #28]
 8004646:	005b      	lsls	r3, r3, #1
 8004648:	fa02 f303 	lsl.w	r3, r2, r3
 800464c:	69ba      	ldr	r2, [r7, #24]
 800464e:	4313      	orrs	r3, r2
 8004650:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	69ba      	ldr	r2, [r7, #24]
 8004656:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	685b      	ldr	r3, [r3, #4]
 800465c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800465e:	2201      	movs	r2, #1
 8004660:	69fb      	ldr	r3, [r7, #28]
 8004662:	fa02 f303 	lsl.w	r3, r2, r3
 8004666:	43db      	mvns	r3, r3
 8004668:	69ba      	ldr	r2, [r7, #24]
 800466a:	4013      	ands	r3, r2
 800466c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	685b      	ldr	r3, [r3, #4]
 8004672:	091b      	lsrs	r3, r3, #4
 8004674:	f003 0201 	and.w	r2, r3, #1
 8004678:	69fb      	ldr	r3, [r7, #28]
 800467a:	fa02 f303 	lsl.w	r3, r2, r3
 800467e:	69ba      	ldr	r2, [r7, #24]
 8004680:	4313      	orrs	r3, r2
 8004682:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	69ba      	ldr	r2, [r7, #24]
 8004688:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	68db      	ldr	r3, [r3, #12]
 800468e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004690:	69fb      	ldr	r3, [r7, #28]
 8004692:	005b      	lsls	r3, r3, #1
 8004694:	2203      	movs	r2, #3
 8004696:	fa02 f303 	lsl.w	r3, r2, r3
 800469a:	43db      	mvns	r3, r3
 800469c:	69ba      	ldr	r2, [r7, #24]
 800469e:	4013      	ands	r3, r2
 80046a0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	689a      	ldr	r2, [r3, #8]
 80046a6:	69fb      	ldr	r3, [r7, #28]
 80046a8:	005b      	lsls	r3, r3, #1
 80046aa:	fa02 f303 	lsl.w	r3, r2, r3
 80046ae:	69ba      	ldr	r2, [r7, #24]
 80046b0:	4313      	orrs	r3, r2
 80046b2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	69ba      	ldr	r2, [r7, #24]
 80046b8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	2b02      	cmp	r3, #2
 80046c0:	d003      	beq.n	80046ca <HAL_GPIO_Init+0xee>
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	685b      	ldr	r3, [r3, #4]
 80046c6:	2b12      	cmp	r3, #18
 80046c8:	d123      	bne.n	8004712 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80046ca:	69fb      	ldr	r3, [r7, #28]
 80046cc:	08da      	lsrs	r2, r3, #3
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	3208      	adds	r2, #8
 80046d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80046d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80046d8:	69fb      	ldr	r3, [r7, #28]
 80046da:	f003 0307 	and.w	r3, r3, #7
 80046de:	009b      	lsls	r3, r3, #2
 80046e0:	220f      	movs	r2, #15
 80046e2:	fa02 f303 	lsl.w	r3, r2, r3
 80046e6:	43db      	mvns	r3, r3
 80046e8:	69ba      	ldr	r2, [r7, #24]
 80046ea:	4013      	ands	r3, r2
 80046ec:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	691a      	ldr	r2, [r3, #16]
 80046f2:	69fb      	ldr	r3, [r7, #28]
 80046f4:	f003 0307 	and.w	r3, r3, #7
 80046f8:	009b      	lsls	r3, r3, #2
 80046fa:	fa02 f303 	lsl.w	r3, r2, r3
 80046fe:	69ba      	ldr	r2, [r7, #24]
 8004700:	4313      	orrs	r3, r2
 8004702:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004704:	69fb      	ldr	r3, [r7, #28]
 8004706:	08da      	lsrs	r2, r3, #3
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	3208      	adds	r2, #8
 800470c:	69b9      	ldr	r1, [r7, #24]
 800470e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004718:	69fb      	ldr	r3, [r7, #28]
 800471a:	005b      	lsls	r3, r3, #1
 800471c:	2203      	movs	r2, #3
 800471e:	fa02 f303 	lsl.w	r3, r2, r3
 8004722:	43db      	mvns	r3, r3
 8004724:	69ba      	ldr	r2, [r7, #24]
 8004726:	4013      	ands	r3, r2
 8004728:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	685b      	ldr	r3, [r3, #4]
 800472e:	f003 0203 	and.w	r2, r3, #3
 8004732:	69fb      	ldr	r3, [r7, #28]
 8004734:	005b      	lsls	r3, r3, #1
 8004736:	fa02 f303 	lsl.w	r3, r2, r3
 800473a:	69ba      	ldr	r2, [r7, #24]
 800473c:	4313      	orrs	r3, r2
 800473e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	69ba      	ldr	r2, [r7, #24]
 8004744:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	685b      	ldr	r3, [r3, #4]
 800474a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800474e:	2b00      	cmp	r3, #0
 8004750:	f000 80e0 	beq.w	8004914 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004754:	4b2f      	ldr	r3, [pc, #188]	; (8004814 <HAL_GPIO_Init+0x238>)
 8004756:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800475a:	4a2e      	ldr	r2, [pc, #184]	; (8004814 <HAL_GPIO_Init+0x238>)
 800475c:	f043 0302 	orr.w	r3, r3, #2
 8004760:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004764:	4b2b      	ldr	r3, [pc, #172]	; (8004814 <HAL_GPIO_Init+0x238>)
 8004766:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800476a:	f003 0302 	and.w	r3, r3, #2
 800476e:	60fb      	str	r3, [r7, #12]
 8004770:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004772:	4a29      	ldr	r2, [pc, #164]	; (8004818 <HAL_GPIO_Init+0x23c>)
 8004774:	69fb      	ldr	r3, [r7, #28]
 8004776:	089b      	lsrs	r3, r3, #2
 8004778:	3302      	adds	r3, #2
 800477a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800477e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004780:	69fb      	ldr	r3, [r7, #28]
 8004782:	f003 0303 	and.w	r3, r3, #3
 8004786:	009b      	lsls	r3, r3, #2
 8004788:	220f      	movs	r2, #15
 800478a:	fa02 f303 	lsl.w	r3, r2, r3
 800478e:	43db      	mvns	r3, r3
 8004790:	69ba      	ldr	r2, [r7, #24]
 8004792:	4013      	ands	r3, r2
 8004794:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	4a20      	ldr	r2, [pc, #128]	; (800481c <HAL_GPIO_Init+0x240>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d052      	beq.n	8004844 <HAL_GPIO_Init+0x268>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	4a1f      	ldr	r2, [pc, #124]	; (8004820 <HAL_GPIO_Init+0x244>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d031      	beq.n	800480a <HAL_GPIO_Init+0x22e>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	4a1e      	ldr	r2, [pc, #120]	; (8004824 <HAL_GPIO_Init+0x248>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d02b      	beq.n	8004806 <HAL_GPIO_Init+0x22a>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	4a1d      	ldr	r2, [pc, #116]	; (8004828 <HAL_GPIO_Init+0x24c>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d025      	beq.n	8004802 <HAL_GPIO_Init+0x226>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	4a1c      	ldr	r2, [pc, #112]	; (800482c <HAL_GPIO_Init+0x250>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d01f      	beq.n	80047fe <HAL_GPIO_Init+0x222>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	4a1b      	ldr	r2, [pc, #108]	; (8004830 <HAL_GPIO_Init+0x254>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d019      	beq.n	80047fa <HAL_GPIO_Init+0x21e>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	4a1a      	ldr	r2, [pc, #104]	; (8004834 <HAL_GPIO_Init+0x258>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d013      	beq.n	80047f6 <HAL_GPIO_Init+0x21a>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	4a19      	ldr	r2, [pc, #100]	; (8004838 <HAL_GPIO_Init+0x25c>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d00d      	beq.n	80047f2 <HAL_GPIO_Init+0x216>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	4a18      	ldr	r2, [pc, #96]	; (800483c <HAL_GPIO_Init+0x260>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d007      	beq.n	80047ee <HAL_GPIO_Init+0x212>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	4a17      	ldr	r2, [pc, #92]	; (8004840 <HAL_GPIO_Init+0x264>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d101      	bne.n	80047ea <HAL_GPIO_Init+0x20e>
 80047e6:	2309      	movs	r3, #9
 80047e8:	e02d      	b.n	8004846 <HAL_GPIO_Init+0x26a>
 80047ea:	230a      	movs	r3, #10
 80047ec:	e02b      	b.n	8004846 <HAL_GPIO_Init+0x26a>
 80047ee:	2308      	movs	r3, #8
 80047f0:	e029      	b.n	8004846 <HAL_GPIO_Init+0x26a>
 80047f2:	2307      	movs	r3, #7
 80047f4:	e027      	b.n	8004846 <HAL_GPIO_Init+0x26a>
 80047f6:	2306      	movs	r3, #6
 80047f8:	e025      	b.n	8004846 <HAL_GPIO_Init+0x26a>
 80047fa:	2305      	movs	r3, #5
 80047fc:	e023      	b.n	8004846 <HAL_GPIO_Init+0x26a>
 80047fe:	2304      	movs	r3, #4
 8004800:	e021      	b.n	8004846 <HAL_GPIO_Init+0x26a>
 8004802:	2303      	movs	r3, #3
 8004804:	e01f      	b.n	8004846 <HAL_GPIO_Init+0x26a>
 8004806:	2302      	movs	r3, #2
 8004808:	e01d      	b.n	8004846 <HAL_GPIO_Init+0x26a>
 800480a:	2301      	movs	r3, #1
 800480c:	e01b      	b.n	8004846 <HAL_GPIO_Init+0x26a>
 800480e:	bf00      	nop
 8004810:	58000080 	.word	0x58000080
 8004814:	58024400 	.word	0x58024400
 8004818:	58000400 	.word	0x58000400
 800481c:	58020000 	.word	0x58020000
 8004820:	58020400 	.word	0x58020400
 8004824:	58020800 	.word	0x58020800
 8004828:	58020c00 	.word	0x58020c00
 800482c:	58021000 	.word	0x58021000
 8004830:	58021400 	.word	0x58021400
 8004834:	58021800 	.word	0x58021800
 8004838:	58021c00 	.word	0x58021c00
 800483c:	58022000 	.word	0x58022000
 8004840:	58022400 	.word	0x58022400
 8004844:	2300      	movs	r3, #0
 8004846:	69fa      	ldr	r2, [r7, #28]
 8004848:	f002 0203 	and.w	r2, r2, #3
 800484c:	0092      	lsls	r2, r2, #2
 800484e:	4093      	lsls	r3, r2
 8004850:	69ba      	ldr	r2, [r7, #24]
 8004852:	4313      	orrs	r3, r2
 8004854:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004856:	4938      	ldr	r1, [pc, #224]	; (8004938 <HAL_GPIO_Init+0x35c>)
 8004858:	69fb      	ldr	r3, [r7, #28]
 800485a:	089b      	lsrs	r3, r3, #2
 800485c:	3302      	adds	r3, #2
 800485e:	69ba      	ldr	r2, [r7, #24]
 8004860:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004864:	697b      	ldr	r3, [r7, #20]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800486a:	693b      	ldr	r3, [r7, #16]
 800486c:	43db      	mvns	r3, r3
 800486e:	69ba      	ldr	r2, [r7, #24]
 8004870:	4013      	ands	r3, r2
 8004872:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	685b      	ldr	r3, [r3, #4]
 8004878:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800487c:	2b00      	cmp	r3, #0
 800487e:	d003      	beq.n	8004888 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004880:	69ba      	ldr	r2, [r7, #24]
 8004882:	693b      	ldr	r3, [r7, #16]
 8004884:	4313      	orrs	r3, r2
 8004886:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004888:	697b      	ldr	r3, [r7, #20]
 800488a:	69ba      	ldr	r2, [r7, #24]
 800488c:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 800488e:	697b      	ldr	r3, [r7, #20]
 8004890:	685b      	ldr	r3, [r3, #4]
 8004892:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004894:	693b      	ldr	r3, [r7, #16]
 8004896:	43db      	mvns	r3, r3
 8004898:	69ba      	ldr	r2, [r7, #24]
 800489a:	4013      	ands	r3, r2
 800489c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	685b      	ldr	r3, [r3, #4]
 80048a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d003      	beq.n	80048b2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80048aa:	69ba      	ldr	r2, [r7, #24]
 80048ac:	693b      	ldr	r3, [r7, #16]
 80048ae:	4313      	orrs	r3, r2
 80048b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80048b2:	697b      	ldr	r3, [r7, #20]
 80048b4:	69ba      	ldr	r2, [r7, #24]
 80048b6:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80048b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80048c0:	693b      	ldr	r3, [r7, #16]
 80048c2:	43db      	mvns	r3, r3
 80048c4:	69ba      	ldr	r2, [r7, #24]
 80048c6:	4013      	ands	r3, r2
 80048c8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	685b      	ldr	r3, [r3, #4]
 80048ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d003      	beq.n	80048de <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 80048d6:	69ba      	ldr	r2, [r7, #24]
 80048d8:	693b      	ldr	r3, [r7, #16]
 80048da:	4313      	orrs	r3, r2
 80048dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80048de:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80048e2:	69bb      	ldr	r3, [r7, #24]
 80048e4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80048e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048ea:	685b      	ldr	r3, [r3, #4]
 80048ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80048ee:	693b      	ldr	r3, [r7, #16]
 80048f0:	43db      	mvns	r3, r3
 80048f2:	69ba      	ldr	r2, [r7, #24]
 80048f4:	4013      	ands	r3, r2
 80048f6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	685b      	ldr	r3, [r3, #4]
 80048fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004900:	2b00      	cmp	r3, #0
 8004902:	d003      	beq.n	800490c <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8004904:	69ba      	ldr	r2, [r7, #24]
 8004906:	693b      	ldr	r3, [r7, #16]
 8004908:	4313      	orrs	r3, r2
 800490a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800490c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004910:	69bb      	ldr	r3, [r7, #24]
 8004912:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8004914:	69fb      	ldr	r3, [r7, #28]
 8004916:	3301      	adds	r3, #1
 8004918:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	681a      	ldr	r2, [r3, #0]
 800491e:	69fb      	ldr	r3, [r7, #28]
 8004920:	fa22 f303 	lsr.w	r3, r2, r3
 8004924:	2b00      	cmp	r3, #0
 8004926:	f47f ae63 	bne.w	80045f0 <HAL_GPIO_Init+0x14>
  }
}
 800492a:	bf00      	nop
 800492c:	bf00      	nop
 800492e:	3724      	adds	r7, #36	; 0x24
 8004930:	46bd      	mov	sp, r7
 8004932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004936:	4770      	bx	lr
 8004938:	58000400 	.word	0x58000400

0800493c <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 800493c:	b480      	push	{r7}
 800493e:	b083      	sub	sp, #12
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8004944:	4a08      	ldr	r2, [pc, #32]	; (8004968 <HAL_HSEM_FastTake+0x2c>)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	3320      	adds	r3, #32
 800494a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800494e:	4a07      	ldr	r2, [pc, #28]	; (800496c <HAL_HSEM_FastTake+0x30>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d101      	bne.n	8004958 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8004954:	2300      	movs	r3, #0
 8004956:	e000      	b.n	800495a <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8004958:	2301      	movs	r3, #1
}
 800495a:	4618      	mov	r0, r3
 800495c:	370c      	adds	r7, #12
 800495e:	46bd      	mov	sp, r7
 8004960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004964:	4770      	bx	lr
 8004966:	bf00      	nop
 8004968:	58026400 	.word	0x58026400
 800496c:	80000300 	.word	0x80000300

08004970 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8004970:	b480      	push	{r7}
 8004972:	b083      	sub	sp, #12
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
 8004978:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 800497a:	4906      	ldr	r1, [pc, #24]	; (8004994 <HAL_HSEM_Release+0x24>)
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8004988:	bf00      	nop
 800498a:	370c      	adds	r7, #12
 800498c:	46bd      	mov	sp, r7
 800498e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004992:	4770      	bx	lr
 8004994:	58026400 	.word	0x58026400

08004998 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b084      	sub	sp, #16
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80049a0:	4b29      	ldr	r3, [pc, #164]	; (8004a48 <HAL_PWREx_ConfigSupply+0xb0>)
 80049a2:	68db      	ldr	r3, [r3, #12]
 80049a4:	f003 0307 	and.w	r3, r3, #7
 80049a8:	2b06      	cmp	r3, #6
 80049aa:	d00a      	beq.n	80049c2 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80049ac:	4b26      	ldr	r3, [pc, #152]	; (8004a48 <HAL_PWREx_ConfigSupply+0xb0>)
 80049ae:	68db      	ldr	r3, [r3, #12]
 80049b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80049b4:	687a      	ldr	r2, [r7, #4]
 80049b6:	429a      	cmp	r2, r3
 80049b8:	d001      	beq.n	80049be <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80049ba:	2301      	movs	r3, #1
 80049bc:	e040      	b.n	8004a40 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80049be:	2300      	movs	r3, #0
 80049c0:	e03e      	b.n	8004a40 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80049c2:	4b21      	ldr	r3, [pc, #132]	; (8004a48 <HAL_PWREx_ConfigSupply+0xb0>)
 80049c4:	68db      	ldr	r3, [r3, #12]
 80049c6:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80049ca:	491f      	ldr	r1, [pc, #124]	; (8004a48 <HAL_PWREx_ConfigSupply+0xb0>)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	4313      	orrs	r3, r2
 80049d0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80049d2:	f7fc fdab 	bl	800152c <HAL_GetTick>
 80049d6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80049d8:	e009      	b.n	80049ee <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80049da:	f7fc fda7 	bl	800152c <HAL_GetTick>
 80049de:	4602      	mov	r2, r0
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	1ad3      	subs	r3, r2, r3
 80049e4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80049e8:	d901      	bls.n	80049ee <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80049ea:	2301      	movs	r3, #1
 80049ec:	e028      	b.n	8004a40 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80049ee:	4b16      	ldr	r3, [pc, #88]	; (8004a48 <HAL_PWREx_ConfigSupply+0xb0>)
 80049f0:	685b      	ldr	r3, [r3, #4]
 80049f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80049f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049fa:	d1ee      	bne.n	80049da <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2b1e      	cmp	r3, #30
 8004a00:	d008      	beq.n	8004a14 <HAL_PWREx_ConfigSupply+0x7c>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2b2e      	cmp	r3, #46	; 0x2e
 8004a06:	d005      	beq.n	8004a14 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2b1d      	cmp	r3, #29
 8004a0c:	d002      	beq.n	8004a14 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2b2d      	cmp	r3, #45	; 0x2d
 8004a12:	d114      	bne.n	8004a3e <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8004a14:	f7fc fd8a 	bl	800152c <HAL_GetTick>
 8004a18:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8004a1a:	e009      	b.n	8004a30 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004a1c:	f7fc fd86 	bl	800152c <HAL_GetTick>
 8004a20:	4602      	mov	r2, r0
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	1ad3      	subs	r3, r2, r3
 8004a26:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004a2a:	d901      	bls.n	8004a30 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	e007      	b.n	8004a40 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8004a30:	4b05      	ldr	r3, [pc, #20]	; (8004a48 <HAL_PWREx_ConfigSupply+0xb0>)
 8004a32:	68db      	ldr	r3, [r3, #12]
 8004a34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a3c:	d1ee      	bne.n	8004a1c <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004a3e:	2300      	movs	r3, #0
}
 8004a40:	4618      	mov	r0, r3
 8004a42:	3710      	adds	r7, #16
 8004a44:	46bd      	mov	sp, r7
 8004a46:	bd80      	pop	{r7, pc}
 8004a48:	58024800 	.word	0x58024800

08004a4c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b08c      	sub	sp, #48	; 0x30
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d101      	bne.n	8004a5e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	e3ff      	b.n	800525e <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f003 0301 	and.w	r3, r3, #1
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	f000 8087 	beq.w	8004b7a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a6c:	4b99      	ldr	r3, [pc, #612]	; (8004cd4 <HAL_RCC_OscConfig+0x288>)
 8004a6e:	691b      	ldr	r3, [r3, #16]
 8004a70:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004a74:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004a76:	4b97      	ldr	r3, [pc, #604]	; (8004cd4 <HAL_RCC_OscConfig+0x288>)
 8004a78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a7a:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004a7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a7e:	2b10      	cmp	r3, #16
 8004a80:	d007      	beq.n	8004a92 <HAL_RCC_OscConfig+0x46>
 8004a82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a84:	2b18      	cmp	r3, #24
 8004a86:	d110      	bne.n	8004aaa <HAL_RCC_OscConfig+0x5e>
 8004a88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a8a:	f003 0303 	and.w	r3, r3, #3
 8004a8e:	2b02      	cmp	r3, #2
 8004a90:	d10b      	bne.n	8004aaa <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a92:	4b90      	ldr	r3, [pc, #576]	; (8004cd4 <HAL_RCC_OscConfig+0x288>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d06c      	beq.n	8004b78 <HAL_RCC_OscConfig+0x12c>
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	685b      	ldr	r3, [r3, #4]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d168      	bne.n	8004b78 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	e3d9      	b.n	800525e <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	685b      	ldr	r3, [r3, #4]
 8004aae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ab2:	d106      	bne.n	8004ac2 <HAL_RCC_OscConfig+0x76>
 8004ab4:	4b87      	ldr	r3, [pc, #540]	; (8004cd4 <HAL_RCC_OscConfig+0x288>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4a86      	ldr	r2, [pc, #536]	; (8004cd4 <HAL_RCC_OscConfig+0x288>)
 8004aba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004abe:	6013      	str	r3, [r2, #0]
 8004ac0:	e02e      	b.n	8004b20 <HAL_RCC_OscConfig+0xd4>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	685b      	ldr	r3, [r3, #4]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d10c      	bne.n	8004ae4 <HAL_RCC_OscConfig+0x98>
 8004aca:	4b82      	ldr	r3, [pc, #520]	; (8004cd4 <HAL_RCC_OscConfig+0x288>)
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	4a81      	ldr	r2, [pc, #516]	; (8004cd4 <HAL_RCC_OscConfig+0x288>)
 8004ad0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ad4:	6013      	str	r3, [r2, #0]
 8004ad6:	4b7f      	ldr	r3, [pc, #508]	; (8004cd4 <HAL_RCC_OscConfig+0x288>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	4a7e      	ldr	r2, [pc, #504]	; (8004cd4 <HAL_RCC_OscConfig+0x288>)
 8004adc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004ae0:	6013      	str	r3, [r2, #0]
 8004ae2:	e01d      	b.n	8004b20 <HAL_RCC_OscConfig+0xd4>
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	685b      	ldr	r3, [r3, #4]
 8004ae8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004aec:	d10c      	bne.n	8004b08 <HAL_RCC_OscConfig+0xbc>
 8004aee:	4b79      	ldr	r3, [pc, #484]	; (8004cd4 <HAL_RCC_OscConfig+0x288>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	4a78      	ldr	r2, [pc, #480]	; (8004cd4 <HAL_RCC_OscConfig+0x288>)
 8004af4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004af8:	6013      	str	r3, [r2, #0]
 8004afa:	4b76      	ldr	r3, [pc, #472]	; (8004cd4 <HAL_RCC_OscConfig+0x288>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	4a75      	ldr	r2, [pc, #468]	; (8004cd4 <HAL_RCC_OscConfig+0x288>)
 8004b00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b04:	6013      	str	r3, [r2, #0]
 8004b06:	e00b      	b.n	8004b20 <HAL_RCC_OscConfig+0xd4>
 8004b08:	4b72      	ldr	r3, [pc, #456]	; (8004cd4 <HAL_RCC_OscConfig+0x288>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	4a71      	ldr	r2, [pc, #452]	; (8004cd4 <HAL_RCC_OscConfig+0x288>)
 8004b0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b12:	6013      	str	r3, [r2, #0]
 8004b14:	4b6f      	ldr	r3, [pc, #444]	; (8004cd4 <HAL_RCC_OscConfig+0x288>)
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	4a6e      	ldr	r2, [pc, #440]	; (8004cd4 <HAL_RCC_OscConfig+0x288>)
 8004b1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b1e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	685b      	ldr	r3, [r3, #4]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d013      	beq.n	8004b50 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b28:	f7fc fd00 	bl	800152c <HAL_GetTick>
 8004b2c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004b2e:	e008      	b.n	8004b42 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004b30:	f7fc fcfc 	bl	800152c <HAL_GetTick>
 8004b34:	4602      	mov	r2, r0
 8004b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b38:	1ad3      	subs	r3, r2, r3
 8004b3a:	2b64      	cmp	r3, #100	; 0x64
 8004b3c:	d901      	bls.n	8004b42 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004b3e:	2303      	movs	r3, #3
 8004b40:	e38d      	b.n	800525e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004b42:	4b64      	ldr	r3, [pc, #400]	; (8004cd4 <HAL_RCC_OscConfig+0x288>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d0f0      	beq.n	8004b30 <HAL_RCC_OscConfig+0xe4>
 8004b4e:	e014      	b.n	8004b7a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b50:	f7fc fcec 	bl	800152c <HAL_GetTick>
 8004b54:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004b56:	e008      	b.n	8004b6a <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004b58:	f7fc fce8 	bl	800152c <HAL_GetTick>
 8004b5c:	4602      	mov	r2, r0
 8004b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b60:	1ad3      	subs	r3, r2, r3
 8004b62:	2b64      	cmp	r3, #100	; 0x64
 8004b64:	d901      	bls.n	8004b6a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004b66:	2303      	movs	r3, #3
 8004b68:	e379      	b.n	800525e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004b6a:	4b5a      	ldr	r3, [pc, #360]	; (8004cd4 <HAL_RCC_OscConfig+0x288>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d1f0      	bne.n	8004b58 <HAL_RCC_OscConfig+0x10c>
 8004b76:	e000      	b.n	8004b7a <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f003 0302 	and.w	r3, r3, #2
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	f000 80ae 	beq.w	8004ce4 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004b88:	4b52      	ldr	r3, [pc, #328]	; (8004cd4 <HAL_RCC_OscConfig+0x288>)
 8004b8a:	691b      	ldr	r3, [r3, #16]
 8004b8c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004b90:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004b92:	4b50      	ldr	r3, [pc, #320]	; (8004cd4 <HAL_RCC_OscConfig+0x288>)
 8004b94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b96:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004b98:	6a3b      	ldr	r3, [r7, #32]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d007      	beq.n	8004bae <HAL_RCC_OscConfig+0x162>
 8004b9e:	6a3b      	ldr	r3, [r7, #32]
 8004ba0:	2b18      	cmp	r3, #24
 8004ba2:	d13a      	bne.n	8004c1a <HAL_RCC_OscConfig+0x1ce>
 8004ba4:	69fb      	ldr	r3, [r7, #28]
 8004ba6:	f003 0303 	and.w	r3, r3, #3
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d135      	bne.n	8004c1a <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004bae:	4b49      	ldr	r3, [pc, #292]	; (8004cd4 <HAL_RCC_OscConfig+0x288>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f003 0304 	and.w	r3, r3, #4
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d005      	beq.n	8004bc6 <HAL_RCC_OscConfig+0x17a>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	68db      	ldr	r3, [r3, #12]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d101      	bne.n	8004bc6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	e34b      	b.n	800525e <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bc6:	f7fc fcbd 	bl	8001544 <HAL_GetREVID>
 8004bca:	4603      	mov	r3, r0
 8004bcc:	f241 0203 	movw	r2, #4099	; 0x1003
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d817      	bhi.n	8004c04 <HAL_RCC_OscConfig+0x1b8>
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	691b      	ldr	r3, [r3, #16]
 8004bd8:	2b40      	cmp	r3, #64	; 0x40
 8004bda:	d108      	bne.n	8004bee <HAL_RCC_OscConfig+0x1a2>
 8004bdc:	4b3d      	ldr	r3, [pc, #244]	; (8004cd4 <HAL_RCC_OscConfig+0x288>)
 8004bde:	685b      	ldr	r3, [r3, #4]
 8004be0:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004be4:	4a3b      	ldr	r2, [pc, #236]	; (8004cd4 <HAL_RCC_OscConfig+0x288>)
 8004be6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004bea:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004bec:	e07a      	b.n	8004ce4 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bee:	4b39      	ldr	r3, [pc, #228]	; (8004cd4 <HAL_RCC_OscConfig+0x288>)
 8004bf0:	685b      	ldr	r3, [r3, #4]
 8004bf2:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	691b      	ldr	r3, [r3, #16]
 8004bfa:	031b      	lsls	r3, r3, #12
 8004bfc:	4935      	ldr	r1, [pc, #212]	; (8004cd4 <HAL_RCC_OscConfig+0x288>)
 8004bfe:	4313      	orrs	r3, r2
 8004c00:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004c02:	e06f      	b.n	8004ce4 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c04:	4b33      	ldr	r3, [pc, #204]	; (8004cd4 <HAL_RCC_OscConfig+0x288>)
 8004c06:	685b      	ldr	r3, [r3, #4]
 8004c08:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	691b      	ldr	r3, [r3, #16]
 8004c10:	061b      	lsls	r3, r3, #24
 8004c12:	4930      	ldr	r1, [pc, #192]	; (8004cd4 <HAL_RCC_OscConfig+0x288>)
 8004c14:	4313      	orrs	r3, r2
 8004c16:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004c18:	e064      	b.n	8004ce4 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	68db      	ldr	r3, [r3, #12]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d045      	beq.n	8004cae <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004c22:	4b2c      	ldr	r3, [pc, #176]	; (8004cd4 <HAL_RCC_OscConfig+0x288>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f023 0219 	bic.w	r2, r3, #25
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	68db      	ldr	r3, [r3, #12]
 8004c2e:	4929      	ldr	r1, [pc, #164]	; (8004cd4 <HAL_RCC_OscConfig+0x288>)
 8004c30:	4313      	orrs	r3, r2
 8004c32:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c34:	f7fc fc7a 	bl	800152c <HAL_GetTick>
 8004c38:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004c3a:	e008      	b.n	8004c4e <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c3c:	f7fc fc76 	bl	800152c <HAL_GetTick>
 8004c40:	4602      	mov	r2, r0
 8004c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c44:	1ad3      	subs	r3, r2, r3
 8004c46:	2b02      	cmp	r3, #2
 8004c48:	d901      	bls.n	8004c4e <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8004c4a:	2303      	movs	r3, #3
 8004c4c:	e307      	b.n	800525e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004c4e:	4b21      	ldr	r3, [pc, #132]	; (8004cd4 <HAL_RCC_OscConfig+0x288>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f003 0304 	and.w	r3, r3, #4
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d0f0      	beq.n	8004c3c <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c5a:	f7fc fc73 	bl	8001544 <HAL_GetREVID>
 8004c5e:	4603      	mov	r3, r0
 8004c60:	f241 0203 	movw	r2, #4099	; 0x1003
 8004c64:	4293      	cmp	r3, r2
 8004c66:	d817      	bhi.n	8004c98 <HAL_RCC_OscConfig+0x24c>
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	691b      	ldr	r3, [r3, #16]
 8004c6c:	2b40      	cmp	r3, #64	; 0x40
 8004c6e:	d108      	bne.n	8004c82 <HAL_RCC_OscConfig+0x236>
 8004c70:	4b18      	ldr	r3, [pc, #96]	; (8004cd4 <HAL_RCC_OscConfig+0x288>)
 8004c72:	685b      	ldr	r3, [r3, #4]
 8004c74:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004c78:	4a16      	ldr	r2, [pc, #88]	; (8004cd4 <HAL_RCC_OscConfig+0x288>)
 8004c7a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c7e:	6053      	str	r3, [r2, #4]
 8004c80:	e030      	b.n	8004ce4 <HAL_RCC_OscConfig+0x298>
 8004c82:	4b14      	ldr	r3, [pc, #80]	; (8004cd4 <HAL_RCC_OscConfig+0x288>)
 8004c84:	685b      	ldr	r3, [r3, #4]
 8004c86:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	691b      	ldr	r3, [r3, #16]
 8004c8e:	031b      	lsls	r3, r3, #12
 8004c90:	4910      	ldr	r1, [pc, #64]	; (8004cd4 <HAL_RCC_OscConfig+0x288>)
 8004c92:	4313      	orrs	r3, r2
 8004c94:	604b      	str	r3, [r1, #4]
 8004c96:	e025      	b.n	8004ce4 <HAL_RCC_OscConfig+0x298>
 8004c98:	4b0e      	ldr	r3, [pc, #56]	; (8004cd4 <HAL_RCC_OscConfig+0x288>)
 8004c9a:	685b      	ldr	r3, [r3, #4]
 8004c9c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	691b      	ldr	r3, [r3, #16]
 8004ca4:	061b      	lsls	r3, r3, #24
 8004ca6:	490b      	ldr	r1, [pc, #44]	; (8004cd4 <HAL_RCC_OscConfig+0x288>)
 8004ca8:	4313      	orrs	r3, r2
 8004caa:	604b      	str	r3, [r1, #4]
 8004cac:	e01a      	b.n	8004ce4 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004cae:	4b09      	ldr	r3, [pc, #36]	; (8004cd4 <HAL_RCC_OscConfig+0x288>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	4a08      	ldr	r2, [pc, #32]	; (8004cd4 <HAL_RCC_OscConfig+0x288>)
 8004cb4:	f023 0301 	bic.w	r3, r3, #1
 8004cb8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cba:	f7fc fc37 	bl	800152c <HAL_GetTick>
 8004cbe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004cc0:	e00a      	b.n	8004cd8 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004cc2:	f7fc fc33 	bl	800152c <HAL_GetTick>
 8004cc6:	4602      	mov	r2, r0
 8004cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cca:	1ad3      	subs	r3, r2, r3
 8004ccc:	2b02      	cmp	r3, #2
 8004cce:	d903      	bls.n	8004cd8 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8004cd0:	2303      	movs	r3, #3
 8004cd2:	e2c4      	b.n	800525e <HAL_RCC_OscConfig+0x812>
 8004cd4:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004cd8:	4ba4      	ldr	r3, [pc, #656]	; (8004f6c <HAL_RCC_OscConfig+0x520>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f003 0304 	and.w	r3, r3, #4
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d1ee      	bne.n	8004cc2 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f003 0310 	and.w	r3, r3, #16
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	f000 80a9 	beq.w	8004e44 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004cf2:	4b9e      	ldr	r3, [pc, #632]	; (8004f6c <HAL_RCC_OscConfig+0x520>)
 8004cf4:	691b      	ldr	r3, [r3, #16]
 8004cf6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004cfa:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004cfc:	4b9b      	ldr	r3, [pc, #620]	; (8004f6c <HAL_RCC_OscConfig+0x520>)
 8004cfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d00:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004d02:	69bb      	ldr	r3, [r7, #24]
 8004d04:	2b08      	cmp	r3, #8
 8004d06:	d007      	beq.n	8004d18 <HAL_RCC_OscConfig+0x2cc>
 8004d08:	69bb      	ldr	r3, [r7, #24]
 8004d0a:	2b18      	cmp	r3, #24
 8004d0c:	d13a      	bne.n	8004d84 <HAL_RCC_OscConfig+0x338>
 8004d0e:	697b      	ldr	r3, [r7, #20]
 8004d10:	f003 0303 	and.w	r3, r3, #3
 8004d14:	2b01      	cmp	r3, #1
 8004d16:	d135      	bne.n	8004d84 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004d18:	4b94      	ldr	r3, [pc, #592]	; (8004f6c <HAL_RCC_OscConfig+0x520>)
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d005      	beq.n	8004d30 <HAL_RCC_OscConfig+0x2e4>
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	69db      	ldr	r3, [r3, #28]
 8004d28:	2b80      	cmp	r3, #128	; 0x80
 8004d2a:	d001      	beq.n	8004d30 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8004d2c:	2301      	movs	r3, #1
 8004d2e:	e296      	b.n	800525e <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004d30:	f7fc fc08 	bl	8001544 <HAL_GetREVID>
 8004d34:	4603      	mov	r3, r0
 8004d36:	f241 0203 	movw	r2, #4099	; 0x1003
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d817      	bhi.n	8004d6e <HAL_RCC_OscConfig+0x322>
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6a1b      	ldr	r3, [r3, #32]
 8004d42:	2b20      	cmp	r3, #32
 8004d44:	d108      	bne.n	8004d58 <HAL_RCC_OscConfig+0x30c>
 8004d46:	4b89      	ldr	r3, [pc, #548]	; (8004f6c <HAL_RCC_OscConfig+0x520>)
 8004d48:	685b      	ldr	r3, [r3, #4]
 8004d4a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004d4e:	4a87      	ldr	r2, [pc, #540]	; (8004f6c <HAL_RCC_OscConfig+0x520>)
 8004d50:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004d54:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004d56:	e075      	b.n	8004e44 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004d58:	4b84      	ldr	r3, [pc, #528]	; (8004f6c <HAL_RCC_OscConfig+0x520>)
 8004d5a:	685b      	ldr	r3, [r3, #4]
 8004d5c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6a1b      	ldr	r3, [r3, #32]
 8004d64:	069b      	lsls	r3, r3, #26
 8004d66:	4981      	ldr	r1, [pc, #516]	; (8004f6c <HAL_RCC_OscConfig+0x520>)
 8004d68:	4313      	orrs	r3, r2
 8004d6a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004d6c:	e06a      	b.n	8004e44 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004d6e:	4b7f      	ldr	r3, [pc, #508]	; (8004f6c <HAL_RCC_OscConfig+0x520>)
 8004d70:	68db      	ldr	r3, [r3, #12]
 8004d72:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6a1b      	ldr	r3, [r3, #32]
 8004d7a:	061b      	lsls	r3, r3, #24
 8004d7c:	497b      	ldr	r1, [pc, #492]	; (8004f6c <HAL_RCC_OscConfig+0x520>)
 8004d7e:	4313      	orrs	r3, r2
 8004d80:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004d82:	e05f      	b.n	8004e44 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	69db      	ldr	r3, [r3, #28]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d042      	beq.n	8004e12 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004d8c:	4b77      	ldr	r3, [pc, #476]	; (8004f6c <HAL_RCC_OscConfig+0x520>)
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	4a76      	ldr	r2, [pc, #472]	; (8004f6c <HAL_RCC_OscConfig+0x520>)
 8004d92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d98:	f7fc fbc8 	bl	800152c <HAL_GetTick>
 8004d9c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004d9e:	e008      	b.n	8004db2 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004da0:	f7fc fbc4 	bl	800152c <HAL_GetTick>
 8004da4:	4602      	mov	r2, r0
 8004da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004da8:	1ad3      	subs	r3, r2, r3
 8004daa:	2b02      	cmp	r3, #2
 8004dac:	d901      	bls.n	8004db2 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8004dae:	2303      	movs	r3, #3
 8004db0:	e255      	b.n	800525e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004db2:	4b6e      	ldr	r3, [pc, #440]	; (8004f6c <HAL_RCC_OscConfig+0x520>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d0f0      	beq.n	8004da0 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004dbe:	f7fc fbc1 	bl	8001544 <HAL_GetREVID>
 8004dc2:	4603      	mov	r3, r0
 8004dc4:	f241 0203 	movw	r2, #4099	; 0x1003
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d817      	bhi.n	8004dfc <HAL_RCC_OscConfig+0x3b0>
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6a1b      	ldr	r3, [r3, #32]
 8004dd0:	2b20      	cmp	r3, #32
 8004dd2:	d108      	bne.n	8004de6 <HAL_RCC_OscConfig+0x39a>
 8004dd4:	4b65      	ldr	r3, [pc, #404]	; (8004f6c <HAL_RCC_OscConfig+0x520>)
 8004dd6:	685b      	ldr	r3, [r3, #4]
 8004dd8:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004ddc:	4a63      	ldr	r2, [pc, #396]	; (8004f6c <HAL_RCC_OscConfig+0x520>)
 8004dde:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004de2:	6053      	str	r3, [r2, #4]
 8004de4:	e02e      	b.n	8004e44 <HAL_RCC_OscConfig+0x3f8>
 8004de6:	4b61      	ldr	r3, [pc, #388]	; (8004f6c <HAL_RCC_OscConfig+0x520>)
 8004de8:	685b      	ldr	r3, [r3, #4]
 8004dea:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6a1b      	ldr	r3, [r3, #32]
 8004df2:	069b      	lsls	r3, r3, #26
 8004df4:	495d      	ldr	r1, [pc, #372]	; (8004f6c <HAL_RCC_OscConfig+0x520>)
 8004df6:	4313      	orrs	r3, r2
 8004df8:	604b      	str	r3, [r1, #4]
 8004dfa:	e023      	b.n	8004e44 <HAL_RCC_OscConfig+0x3f8>
 8004dfc:	4b5b      	ldr	r3, [pc, #364]	; (8004f6c <HAL_RCC_OscConfig+0x520>)
 8004dfe:	68db      	ldr	r3, [r3, #12]
 8004e00:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6a1b      	ldr	r3, [r3, #32]
 8004e08:	061b      	lsls	r3, r3, #24
 8004e0a:	4958      	ldr	r1, [pc, #352]	; (8004f6c <HAL_RCC_OscConfig+0x520>)
 8004e0c:	4313      	orrs	r3, r2
 8004e0e:	60cb      	str	r3, [r1, #12]
 8004e10:	e018      	b.n	8004e44 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004e12:	4b56      	ldr	r3, [pc, #344]	; (8004f6c <HAL_RCC_OscConfig+0x520>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	4a55      	ldr	r2, [pc, #340]	; (8004f6c <HAL_RCC_OscConfig+0x520>)
 8004e18:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004e1c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e1e:	f7fc fb85 	bl	800152c <HAL_GetTick>
 8004e22:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004e24:	e008      	b.n	8004e38 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004e26:	f7fc fb81 	bl	800152c <HAL_GetTick>
 8004e2a:	4602      	mov	r2, r0
 8004e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e2e:	1ad3      	subs	r3, r2, r3
 8004e30:	2b02      	cmp	r3, #2
 8004e32:	d901      	bls.n	8004e38 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8004e34:	2303      	movs	r3, #3
 8004e36:	e212      	b.n	800525e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004e38:	4b4c      	ldr	r3, [pc, #304]	; (8004f6c <HAL_RCC_OscConfig+0x520>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d1f0      	bne.n	8004e26 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f003 0308 	and.w	r3, r3, #8
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d036      	beq.n	8004ebe <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	695b      	ldr	r3, [r3, #20]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d019      	beq.n	8004e8c <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e58:	4b44      	ldr	r3, [pc, #272]	; (8004f6c <HAL_RCC_OscConfig+0x520>)
 8004e5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e5c:	4a43      	ldr	r2, [pc, #268]	; (8004f6c <HAL_RCC_OscConfig+0x520>)
 8004e5e:	f043 0301 	orr.w	r3, r3, #1
 8004e62:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e64:	f7fc fb62 	bl	800152c <HAL_GetTick>
 8004e68:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004e6a:	e008      	b.n	8004e7e <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004e6c:	f7fc fb5e 	bl	800152c <HAL_GetTick>
 8004e70:	4602      	mov	r2, r0
 8004e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e74:	1ad3      	subs	r3, r2, r3
 8004e76:	2b02      	cmp	r3, #2
 8004e78:	d901      	bls.n	8004e7e <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8004e7a:	2303      	movs	r3, #3
 8004e7c:	e1ef      	b.n	800525e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004e7e:	4b3b      	ldr	r3, [pc, #236]	; (8004f6c <HAL_RCC_OscConfig+0x520>)
 8004e80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e82:	f003 0302 	and.w	r3, r3, #2
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d0f0      	beq.n	8004e6c <HAL_RCC_OscConfig+0x420>
 8004e8a:	e018      	b.n	8004ebe <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004e8c:	4b37      	ldr	r3, [pc, #220]	; (8004f6c <HAL_RCC_OscConfig+0x520>)
 8004e8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e90:	4a36      	ldr	r2, [pc, #216]	; (8004f6c <HAL_RCC_OscConfig+0x520>)
 8004e92:	f023 0301 	bic.w	r3, r3, #1
 8004e96:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e98:	f7fc fb48 	bl	800152c <HAL_GetTick>
 8004e9c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004e9e:	e008      	b.n	8004eb2 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004ea0:	f7fc fb44 	bl	800152c <HAL_GetTick>
 8004ea4:	4602      	mov	r2, r0
 8004ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ea8:	1ad3      	subs	r3, r2, r3
 8004eaa:	2b02      	cmp	r3, #2
 8004eac:	d901      	bls.n	8004eb2 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8004eae:	2303      	movs	r3, #3
 8004eb0:	e1d5      	b.n	800525e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004eb2:	4b2e      	ldr	r3, [pc, #184]	; (8004f6c <HAL_RCC_OscConfig+0x520>)
 8004eb4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004eb6:	f003 0302 	and.w	r3, r3, #2
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d1f0      	bne.n	8004ea0 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f003 0320 	and.w	r3, r3, #32
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d036      	beq.n	8004f38 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	699b      	ldr	r3, [r3, #24]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d019      	beq.n	8004f06 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004ed2:	4b26      	ldr	r3, [pc, #152]	; (8004f6c <HAL_RCC_OscConfig+0x520>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	4a25      	ldr	r2, [pc, #148]	; (8004f6c <HAL_RCC_OscConfig+0x520>)
 8004ed8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004edc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004ede:	f7fc fb25 	bl	800152c <HAL_GetTick>
 8004ee2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004ee4:	e008      	b.n	8004ef8 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8004ee6:	f7fc fb21 	bl	800152c <HAL_GetTick>
 8004eea:	4602      	mov	r2, r0
 8004eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eee:	1ad3      	subs	r3, r2, r3
 8004ef0:	2b02      	cmp	r3, #2
 8004ef2:	d901      	bls.n	8004ef8 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8004ef4:	2303      	movs	r3, #3
 8004ef6:	e1b2      	b.n	800525e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004ef8:	4b1c      	ldr	r3, [pc, #112]	; (8004f6c <HAL_RCC_OscConfig+0x520>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d0f0      	beq.n	8004ee6 <HAL_RCC_OscConfig+0x49a>
 8004f04:	e018      	b.n	8004f38 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004f06:	4b19      	ldr	r3, [pc, #100]	; (8004f6c <HAL_RCC_OscConfig+0x520>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	4a18      	ldr	r2, [pc, #96]	; (8004f6c <HAL_RCC_OscConfig+0x520>)
 8004f0c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004f10:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004f12:	f7fc fb0b 	bl	800152c <HAL_GetTick>
 8004f16:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004f18:	e008      	b.n	8004f2c <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8004f1a:	f7fc fb07 	bl	800152c <HAL_GetTick>
 8004f1e:	4602      	mov	r2, r0
 8004f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f22:	1ad3      	subs	r3, r2, r3
 8004f24:	2b02      	cmp	r3, #2
 8004f26:	d901      	bls.n	8004f2c <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8004f28:	2303      	movs	r3, #3
 8004f2a:	e198      	b.n	800525e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004f2c:	4b0f      	ldr	r3, [pc, #60]	; (8004f6c <HAL_RCC_OscConfig+0x520>)
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d1f0      	bne.n	8004f1a <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f003 0304 	and.w	r3, r3, #4
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	f000 8085 	beq.w	8005050 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004f46:	4b0a      	ldr	r3, [pc, #40]	; (8004f70 <HAL_RCC_OscConfig+0x524>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	4a09      	ldr	r2, [pc, #36]	; (8004f70 <HAL_RCC_OscConfig+0x524>)
 8004f4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f50:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004f52:	f7fc faeb 	bl	800152c <HAL_GetTick>
 8004f56:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004f58:	e00c      	b.n	8004f74 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004f5a:	f7fc fae7 	bl	800152c <HAL_GetTick>
 8004f5e:	4602      	mov	r2, r0
 8004f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f62:	1ad3      	subs	r3, r2, r3
 8004f64:	2b64      	cmp	r3, #100	; 0x64
 8004f66:	d905      	bls.n	8004f74 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8004f68:	2303      	movs	r3, #3
 8004f6a:	e178      	b.n	800525e <HAL_RCC_OscConfig+0x812>
 8004f6c:	58024400 	.word	0x58024400
 8004f70:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004f74:	4b96      	ldr	r3, [pc, #600]	; (80051d0 <HAL_RCC_OscConfig+0x784>)
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d0ec      	beq.n	8004f5a <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	689b      	ldr	r3, [r3, #8]
 8004f84:	2b01      	cmp	r3, #1
 8004f86:	d106      	bne.n	8004f96 <HAL_RCC_OscConfig+0x54a>
 8004f88:	4b92      	ldr	r3, [pc, #584]	; (80051d4 <HAL_RCC_OscConfig+0x788>)
 8004f8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f8c:	4a91      	ldr	r2, [pc, #580]	; (80051d4 <HAL_RCC_OscConfig+0x788>)
 8004f8e:	f043 0301 	orr.w	r3, r3, #1
 8004f92:	6713      	str	r3, [r2, #112]	; 0x70
 8004f94:	e02d      	b.n	8004ff2 <HAL_RCC_OscConfig+0x5a6>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	689b      	ldr	r3, [r3, #8]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d10c      	bne.n	8004fb8 <HAL_RCC_OscConfig+0x56c>
 8004f9e:	4b8d      	ldr	r3, [pc, #564]	; (80051d4 <HAL_RCC_OscConfig+0x788>)
 8004fa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fa2:	4a8c      	ldr	r2, [pc, #560]	; (80051d4 <HAL_RCC_OscConfig+0x788>)
 8004fa4:	f023 0301 	bic.w	r3, r3, #1
 8004fa8:	6713      	str	r3, [r2, #112]	; 0x70
 8004faa:	4b8a      	ldr	r3, [pc, #552]	; (80051d4 <HAL_RCC_OscConfig+0x788>)
 8004fac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fae:	4a89      	ldr	r2, [pc, #548]	; (80051d4 <HAL_RCC_OscConfig+0x788>)
 8004fb0:	f023 0304 	bic.w	r3, r3, #4
 8004fb4:	6713      	str	r3, [r2, #112]	; 0x70
 8004fb6:	e01c      	b.n	8004ff2 <HAL_RCC_OscConfig+0x5a6>
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	689b      	ldr	r3, [r3, #8]
 8004fbc:	2b05      	cmp	r3, #5
 8004fbe:	d10c      	bne.n	8004fda <HAL_RCC_OscConfig+0x58e>
 8004fc0:	4b84      	ldr	r3, [pc, #528]	; (80051d4 <HAL_RCC_OscConfig+0x788>)
 8004fc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fc4:	4a83      	ldr	r2, [pc, #524]	; (80051d4 <HAL_RCC_OscConfig+0x788>)
 8004fc6:	f043 0304 	orr.w	r3, r3, #4
 8004fca:	6713      	str	r3, [r2, #112]	; 0x70
 8004fcc:	4b81      	ldr	r3, [pc, #516]	; (80051d4 <HAL_RCC_OscConfig+0x788>)
 8004fce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fd0:	4a80      	ldr	r2, [pc, #512]	; (80051d4 <HAL_RCC_OscConfig+0x788>)
 8004fd2:	f043 0301 	orr.w	r3, r3, #1
 8004fd6:	6713      	str	r3, [r2, #112]	; 0x70
 8004fd8:	e00b      	b.n	8004ff2 <HAL_RCC_OscConfig+0x5a6>
 8004fda:	4b7e      	ldr	r3, [pc, #504]	; (80051d4 <HAL_RCC_OscConfig+0x788>)
 8004fdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fde:	4a7d      	ldr	r2, [pc, #500]	; (80051d4 <HAL_RCC_OscConfig+0x788>)
 8004fe0:	f023 0301 	bic.w	r3, r3, #1
 8004fe4:	6713      	str	r3, [r2, #112]	; 0x70
 8004fe6:	4b7b      	ldr	r3, [pc, #492]	; (80051d4 <HAL_RCC_OscConfig+0x788>)
 8004fe8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fea:	4a7a      	ldr	r2, [pc, #488]	; (80051d4 <HAL_RCC_OscConfig+0x788>)
 8004fec:	f023 0304 	bic.w	r3, r3, #4
 8004ff0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	689b      	ldr	r3, [r3, #8]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d015      	beq.n	8005026 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ffa:	f7fc fa97 	bl	800152c <HAL_GetTick>
 8004ffe:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005000:	e00a      	b.n	8005018 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005002:	f7fc fa93 	bl	800152c <HAL_GetTick>
 8005006:	4602      	mov	r2, r0
 8005008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800500a:	1ad3      	subs	r3, r2, r3
 800500c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005010:	4293      	cmp	r3, r2
 8005012:	d901      	bls.n	8005018 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8005014:	2303      	movs	r3, #3
 8005016:	e122      	b.n	800525e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005018:	4b6e      	ldr	r3, [pc, #440]	; (80051d4 <HAL_RCC_OscConfig+0x788>)
 800501a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800501c:	f003 0302 	and.w	r3, r3, #2
 8005020:	2b00      	cmp	r3, #0
 8005022:	d0ee      	beq.n	8005002 <HAL_RCC_OscConfig+0x5b6>
 8005024:	e014      	b.n	8005050 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005026:	f7fc fa81 	bl	800152c <HAL_GetTick>
 800502a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800502c:	e00a      	b.n	8005044 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800502e:	f7fc fa7d 	bl	800152c <HAL_GetTick>
 8005032:	4602      	mov	r2, r0
 8005034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005036:	1ad3      	subs	r3, r2, r3
 8005038:	f241 3288 	movw	r2, #5000	; 0x1388
 800503c:	4293      	cmp	r3, r2
 800503e:	d901      	bls.n	8005044 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8005040:	2303      	movs	r3, #3
 8005042:	e10c      	b.n	800525e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005044:	4b63      	ldr	r3, [pc, #396]	; (80051d4 <HAL_RCC_OscConfig+0x788>)
 8005046:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005048:	f003 0302 	and.w	r3, r3, #2
 800504c:	2b00      	cmp	r3, #0
 800504e:	d1ee      	bne.n	800502e <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005054:	2b00      	cmp	r3, #0
 8005056:	f000 8101 	beq.w	800525c <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800505a:	4b5e      	ldr	r3, [pc, #376]	; (80051d4 <HAL_RCC_OscConfig+0x788>)
 800505c:	691b      	ldr	r3, [r3, #16]
 800505e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005062:	2b18      	cmp	r3, #24
 8005064:	f000 80bc 	beq.w	80051e0 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800506c:	2b02      	cmp	r3, #2
 800506e:	f040 8095 	bne.w	800519c <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005072:	4b58      	ldr	r3, [pc, #352]	; (80051d4 <HAL_RCC_OscConfig+0x788>)
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	4a57      	ldr	r2, [pc, #348]	; (80051d4 <HAL_RCC_OscConfig+0x788>)
 8005078:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800507c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800507e:	f7fc fa55 	bl	800152c <HAL_GetTick>
 8005082:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005084:	e008      	b.n	8005098 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005086:	f7fc fa51 	bl	800152c <HAL_GetTick>
 800508a:	4602      	mov	r2, r0
 800508c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800508e:	1ad3      	subs	r3, r2, r3
 8005090:	2b02      	cmp	r3, #2
 8005092:	d901      	bls.n	8005098 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8005094:	2303      	movs	r3, #3
 8005096:	e0e2      	b.n	800525e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005098:	4b4e      	ldr	r3, [pc, #312]	; (80051d4 <HAL_RCC_OscConfig+0x788>)
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d1f0      	bne.n	8005086 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80050a4:	4b4b      	ldr	r3, [pc, #300]	; (80051d4 <HAL_RCC_OscConfig+0x788>)
 80050a6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80050a8:	4b4b      	ldr	r3, [pc, #300]	; (80051d8 <HAL_RCC_OscConfig+0x78c>)
 80050aa:	4013      	ands	r3, r2
 80050ac:	687a      	ldr	r2, [r7, #4]
 80050ae:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80050b0:	687a      	ldr	r2, [r7, #4]
 80050b2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80050b4:	0112      	lsls	r2, r2, #4
 80050b6:	430a      	orrs	r2, r1
 80050b8:	4946      	ldr	r1, [pc, #280]	; (80051d4 <HAL_RCC_OscConfig+0x788>)
 80050ba:	4313      	orrs	r3, r2
 80050bc:	628b      	str	r3, [r1, #40]	; 0x28
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050c2:	3b01      	subs	r3, #1
 80050c4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050cc:	3b01      	subs	r3, #1
 80050ce:	025b      	lsls	r3, r3, #9
 80050d0:	b29b      	uxth	r3, r3
 80050d2:	431a      	orrs	r2, r3
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050d8:	3b01      	subs	r3, #1
 80050da:	041b      	lsls	r3, r3, #16
 80050dc:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80050e0:	431a      	orrs	r2, r3
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050e6:	3b01      	subs	r3, #1
 80050e8:	061b      	lsls	r3, r3, #24
 80050ea:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80050ee:	4939      	ldr	r1, [pc, #228]	; (80051d4 <HAL_RCC_OscConfig+0x788>)
 80050f0:	4313      	orrs	r3, r2
 80050f2:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80050f4:	4b37      	ldr	r3, [pc, #220]	; (80051d4 <HAL_RCC_OscConfig+0x788>)
 80050f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050f8:	4a36      	ldr	r2, [pc, #216]	; (80051d4 <HAL_RCC_OscConfig+0x788>)
 80050fa:	f023 0301 	bic.w	r3, r3, #1
 80050fe:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005100:	4b34      	ldr	r3, [pc, #208]	; (80051d4 <HAL_RCC_OscConfig+0x788>)
 8005102:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005104:	4b35      	ldr	r3, [pc, #212]	; (80051dc <HAL_RCC_OscConfig+0x790>)
 8005106:	4013      	ands	r3, r2
 8005108:	687a      	ldr	r2, [r7, #4]
 800510a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800510c:	00d2      	lsls	r2, r2, #3
 800510e:	4931      	ldr	r1, [pc, #196]	; (80051d4 <HAL_RCC_OscConfig+0x788>)
 8005110:	4313      	orrs	r3, r2
 8005112:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005114:	4b2f      	ldr	r3, [pc, #188]	; (80051d4 <HAL_RCC_OscConfig+0x788>)
 8005116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005118:	f023 020c 	bic.w	r2, r3, #12
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005120:	492c      	ldr	r1, [pc, #176]	; (80051d4 <HAL_RCC_OscConfig+0x788>)
 8005122:	4313      	orrs	r3, r2
 8005124:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005126:	4b2b      	ldr	r3, [pc, #172]	; (80051d4 <HAL_RCC_OscConfig+0x788>)
 8005128:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800512a:	f023 0202 	bic.w	r2, r3, #2
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005132:	4928      	ldr	r1, [pc, #160]	; (80051d4 <HAL_RCC_OscConfig+0x788>)
 8005134:	4313      	orrs	r3, r2
 8005136:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005138:	4b26      	ldr	r3, [pc, #152]	; (80051d4 <HAL_RCC_OscConfig+0x788>)
 800513a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800513c:	4a25      	ldr	r2, [pc, #148]	; (80051d4 <HAL_RCC_OscConfig+0x788>)
 800513e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005142:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005144:	4b23      	ldr	r3, [pc, #140]	; (80051d4 <HAL_RCC_OscConfig+0x788>)
 8005146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005148:	4a22      	ldr	r2, [pc, #136]	; (80051d4 <HAL_RCC_OscConfig+0x788>)
 800514a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800514e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005150:	4b20      	ldr	r3, [pc, #128]	; (80051d4 <HAL_RCC_OscConfig+0x788>)
 8005152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005154:	4a1f      	ldr	r2, [pc, #124]	; (80051d4 <HAL_RCC_OscConfig+0x788>)
 8005156:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800515a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800515c:	4b1d      	ldr	r3, [pc, #116]	; (80051d4 <HAL_RCC_OscConfig+0x788>)
 800515e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005160:	4a1c      	ldr	r2, [pc, #112]	; (80051d4 <HAL_RCC_OscConfig+0x788>)
 8005162:	f043 0301 	orr.w	r3, r3, #1
 8005166:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005168:	4b1a      	ldr	r3, [pc, #104]	; (80051d4 <HAL_RCC_OscConfig+0x788>)
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	4a19      	ldr	r2, [pc, #100]	; (80051d4 <HAL_RCC_OscConfig+0x788>)
 800516e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005172:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005174:	f7fc f9da 	bl	800152c <HAL_GetTick>
 8005178:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800517a:	e008      	b.n	800518e <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800517c:	f7fc f9d6 	bl	800152c <HAL_GetTick>
 8005180:	4602      	mov	r2, r0
 8005182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005184:	1ad3      	subs	r3, r2, r3
 8005186:	2b02      	cmp	r3, #2
 8005188:	d901      	bls.n	800518e <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 800518a:	2303      	movs	r3, #3
 800518c:	e067      	b.n	800525e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800518e:	4b11      	ldr	r3, [pc, #68]	; (80051d4 <HAL_RCC_OscConfig+0x788>)
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005196:	2b00      	cmp	r3, #0
 8005198:	d0f0      	beq.n	800517c <HAL_RCC_OscConfig+0x730>
 800519a:	e05f      	b.n	800525c <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800519c:	4b0d      	ldr	r3, [pc, #52]	; (80051d4 <HAL_RCC_OscConfig+0x788>)
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	4a0c      	ldr	r2, [pc, #48]	; (80051d4 <HAL_RCC_OscConfig+0x788>)
 80051a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80051a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051a8:	f7fc f9c0 	bl	800152c <HAL_GetTick>
 80051ac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80051ae:	e008      	b.n	80051c2 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80051b0:	f7fc f9bc 	bl	800152c <HAL_GetTick>
 80051b4:	4602      	mov	r2, r0
 80051b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051b8:	1ad3      	subs	r3, r2, r3
 80051ba:	2b02      	cmp	r3, #2
 80051bc:	d901      	bls.n	80051c2 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 80051be:	2303      	movs	r3, #3
 80051c0:	e04d      	b.n	800525e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80051c2:	4b04      	ldr	r3, [pc, #16]	; (80051d4 <HAL_RCC_OscConfig+0x788>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d1f0      	bne.n	80051b0 <HAL_RCC_OscConfig+0x764>
 80051ce:	e045      	b.n	800525c <HAL_RCC_OscConfig+0x810>
 80051d0:	58024800 	.word	0x58024800
 80051d4:	58024400 	.word	0x58024400
 80051d8:	fffffc0c 	.word	0xfffffc0c
 80051dc:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80051e0:	4b21      	ldr	r3, [pc, #132]	; (8005268 <HAL_RCC_OscConfig+0x81c>)
 80051e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051e4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80051e6:	4b20      	ldr	r3, [pc, #128]	; (8005268 <HAL_RCC_OscConfig+0x81c>)
 80051e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051ea:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051f0:	2b01      	cmp	r3, #1
 80051f2:	d031      	beq.n	8005258 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80051f4:	693b      	ldr	r3, [r7, #16]
 80051f6:	f003 0203 	and.w	r2, r3, #3
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80051fe:	429a      	cmp	r2, r3
 8005200:	d12a      	bne.n	8005258 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005202:	693b      	ldr	r3, [r7, #16]
 8005204:	091b      	lsrs	r3, r3, #4
 8005206:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800520e:	429a      	cmp	r2, r3
 8005210:	d122      	bne.n	8005258 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800521c:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800521e:	429a      	cmp	r2, r3
 8005220:	d11a      	bne.n	8005258 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	0a5b      	lsrs	r3, r3, #9
 8005226:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800522e:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005230:	429a      	cmp	r2, r3
 8005232:	d111      	bne.n	8005258 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	0c1b      	lsrs	r3, r3, #16
 8005238:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005240:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005242:	429a      	cmp	r2, r3
 8005244:	d108      	bne.n	8005258 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	0e1b      	lsrs	r3, r3, #24
 800524a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005252:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005254:	429a      	cmp	r2, r3
 8005256:	d001      	beq.n	800525c <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8005258:	2301      	movs	r3, #1
 800525a:	e000      	b.n	800525e <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 800525c:	2300      	movs	r3, #0
}
 800525e:	4618      	mov	r0, r3
 8005260:	3730      	adds	r7, #48	; 0x30
 8005262:	46bd      	mov	sp, r7
 8005264:	bd80      	pop	{r7, pc}
 8005266:	bf00      	nop
 8005268:	58024400 	.word	0x58024400

0800526c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800526c:	b580      	push	{r7, lr}
 800526e:	b086      	sub	sp, #24
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
 8005274:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d101      	bne.n	8005280 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800527c:	2301      	movs	r3, #1
 800527e:	e19c      	b.n	80055ba <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005280:	4b8a      	ldr	r3, [pc, #552]	; (80054ac <HAL_RCC_ClockConfig+0x240>)
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f003 030f 	and.w	r3, r3, #15
 8005288:	683a      	ldr	r2, [r7, #0]
 800528a:	429a      	cmp	r2, r3
 800528c:	d910      	bls.n	80052b0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800528e:	4b87      	ldr	r3, [pc, #540]	; (80054ac <HAL_RCC_ClockConfig+0x240>)
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f023 020f 	bic.w	r2, r3, #15
 8005296:	4985      	ldr	r1, [pc, #532]	; (80054ac <HAL_RCC_ClockConfig+0x240>)
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	4313      	orrs	r3, r2
 800529c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800529e:	4b83      	ldr	r3, [pc, #524]	; (80054ac <HAL_RCC_ClockConfig+0x240>)
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f003 030f 	and.w	r3, r3, #15
 80052a6:	683a      	ldr	r2, [r7, #0]
 80052a8:	429a      	cmp	r2, r3
 80052aa:	d001      	beq.n	80052b0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80052ac:	2301      	movs	r3, #1
 80052ae:	e184      	b.n	80055ba <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f003 0304 	and.w	r3, r3, #4
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d010      	beq.n	80052de <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	691a      	ldr	r2, [r3, #16]
 80052c0:	4b7b      	ldr	r3, [pc, #492]	; (80054b0 <HAL_RCC_ClockConfig+0x244>)
 80052c2:	699b      	ldr	r3, [r3, #24]
 80052c4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80052c8:	429a      	cmp	r2, r3
 80052ca:	d908      	bls.n	80052de <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80052cc:	4b78      	ldr	r3, [pc, #480]	; (80054b0 <HAL_RCC_ClockConfig+0x244>)
 80052ce:	699b      	ldr	r3, [r3, #24]
 80052d0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	691b      	ldr	r3, [r3, #16]
 80052d8:	4975      	ldr	r1, [pc, #468]	; (80054b0 <HAL_RCC_ClockConfig+0x244>)
 80052da:	4313      	orrs	r3, r2
 80052dc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f003 0308 	and.w	r3, r3, #8
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d010      	beq.n	800530c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	695a      	ldr	r2, [r3, #20]
 80052ee:	4b70      	ldr	r3, [pc, #448]	; (80054b0 <HAL_RCC_ClockConfig+0x244>)
 80052f0:	69db      	ldr	r3, [r3, #28]
 80052f2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80052f6:	429a      	cmp	r2, r3
 80052f8:	d908      	bls.n	800530c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80052fa:	4b6d      	ldr	r3, [pc, #436]	; (80054b0 <HAL_RCC_ClockConfig+0x244>)
 80052fc:	69db      	ldr	r3, [r3, #28]
 80052fe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	695b      	ldr	r3, [r3, #20]
 8005306:	496a      	ldr	r1, [pc, #424]	; (80054b0 <HAL_RCC_ClockConfig+0x244>)
 8005308:	4313      	orrs	r3, r2
 800530a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f003 0310 	and.w	r3, r3, #16
 8005314:	2b00      	cmp	r3, #0
 8005316:	d010      	beq.n	800533a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	699a      	ldr	r2, [r3, #24]
 800531c:	4b64      	ldr	r3, [pc, #400]	; (80054b0 <HAL_RCC_ClockConfig+0x244>)
 800531e:	69db      	ldr	r3, [r3, #28]
 8005320:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005324:	429a      	cmp	r2, r3
 8005326:	d908      	bls.n	800533a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005328:	4b61      	ldr	r3, [pc, #388]	; (80054b0 <HAL_RCC_ClockConfig+0x244>)
 800532a:	69db      	ldr	r3, [r3, #28]
 800532c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	699b      	ldr	r3, [r3, #24]
 8005334:	495e      	ldr	r1, [pc, #376]	; (80054b0 <HAL_RCC_ClockConfig+0x244>)
 8005336:	4313      	orrs	r3, r2
 8005338:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f003 0320 	and.w	r3, r3, #32
 8005342:	2b00      	cmp	r3, #0
 8005344:	d010      	beq.n	8005368 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	69da      	ldr	r2, [r3, #28]
 800534a:	4b59      	ldr	r3, [pc, #356]	; (80054b0 <HAL_RCC_ClockConfig+0x244>)
 800534c:	6a1b      	ldr	r3, [r3, #32]
 800534e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005352:	429a      	cmp	r2, r3
 8005354:	d908      	bls.n	8005368 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005356:	4b56      	ldr	r3, [pc, #344]	; (80054b0 <HAL_RCC_ClockConfig+0x244>)
 8005358:	6a1b      	ldr	r3, [r3, #32]
 800535a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	69db      	ldr	r3, [r3, #28]
 8005362:	4953      	ldr	r1, [pc, #332]	; (80054b0 <HAL_RCC_ClockConfig+0x244>)
 8005364:	4313      	orrs	r3, r2
 8005366:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f003 0302 	and.w	r3, r3, #2
 8005370:	2b00      	cmp	r3, #0
 8005372:	d010      	beq.n	8005396 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	68da      	ldr	r2, [r3, #12]
 8005378:	4b4d      	ldr	r3, [pc, #308]	; (80054b0 <HAL_RCC_ClockConfig+0x244>)
 800537a:	699b      	ldr	r3, [r3, #24]
 800537c:	f003 030f 	and.w	r3, r3, #15
 8005380:	429a      	cmp	r2, r3
 8005382:	d908      	bls.n	8005396 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005384:	4b4a      	ldr	r3, [pc, #296]	; (80054b0 <HAL_RCC_ClockConfig+0x244>)
 8005386:	699b      	ldr	r3, [r3, #24]
 8005388:	f023 020f 	bic.w	r2, r3, #15
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	68db      	ldr	r3, [r3, #12]
 8005390:	4947      	ldr	r1, [pc, #284]	; (80054b0 <HAL_RCC_ClockConfig+0x244>)
 8005392:	4313      	orrs	r3, r2
 8005394:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f003 0301 	and.w	r3, r3, #1
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d055      	beq.n	800544e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80053a2:	4b43      	ldr	r3, [pc, #268]	; (80054b0 <HAL_RCC_ClockConfig+0x244>)
 80053a4:	699b      	ldr	r3, [r3, #24]
 80053a6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	689b      	ldr	r3, [r3, #8]
 80053ae:	4940      	ldr	r1, [pc, #256]	; (80054b0 <HAL_RCC_ClockConfig+0x244>)
 80053b0:	4313      	orrs	r3, r2
 80053b2:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	685b      	ldr	r3, [r3, #4]
 80053b8:	2b02      	cmp	r3, #2
 80053ba:	d107      	bne.n	80053cc <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80053bc:	4b3c      	ldr	r3, [pc, #240]	; (80054b0 <HAL_RCC_ClockConfig+0x244>)
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d121      	bne.n	800540c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80053c8:	2301      	movs	r3, #1
 80053ca:	e0f6      	b.n	80055ba <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	685b      	ldr	r3, [r3, #4]
 80053d0:	2b03      	cmp	r3, #3
 80053d2:	d107      	bne.n	80053e4 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80053d4:	4b36      	ldr	r3, [pc, #216]	; (80054b0 <HAL_RCC_ClockConfig+0x244>)
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d115      	bne.n	800540c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80053e0:	2301      	movs	r3, #1
 80053e2:	e0ea      	b.n	80055ba <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	685b      	ldr	r3, [r3, #4]
 80053e8:	2b01      	cmp	r3, #1
 80053ea:	d107      	bne.n	80053fc <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80053ec:	4b30      	ldr	r3, [pc, #192]	; (80054b0 <HAL_RCC_ClockConfig+0x244>)
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d109      	bne.n	800540c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80053f8:	2301      	movs	r3, #1
 80053fa:	e0de      	b.n	80055ba <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80053fc:	4b2c      	ldr	r3, [pc, #176]	; (80054b0 <HAL_RCC_ClockConfig+0x244>)
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f003 0304 	and.w	r3, r3, #4
 8005404:	2b00      	cmp	r3, #0
 8005406:	d101      	bne.n	800540c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005408:	2301      	movs	r3, #1
 800540a:	e0d6      	b.n	80055ba <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800540c:	4b28      	ldr	r3, [pc, #160]	; (80054b0 <HAL_RCC_ClockConfig+0x244>)
 800540e:	691b      	ldr	r3, [r3, #16]
 8005410:	f023 0207 	bic.w	r2, r3, #7
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	685b      	ldr	r3, [r3, #4]
 8005418:	4925      	ldr	r1, [pc, #148]	; (80054b0 <HAL_RCC_ClockConfig+0x244>)
 800541a:	4313      	orrs	r3, r2
 800541c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800541e:	f7fc f885 	bl	800152c <HAL_GetTick>
 8005422:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005424:	e00a      	b.n	800543c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005426:	f7fc f881 	bl	800152c <HAL_GetTick>
 800542a:	4602      	mov	r2, r0
 800542c:	697b      	ldr	r3, [r7, #20]
 800542e:	1ad3      	subs	r3, r2, r3
 8005430:	f241 3288 	movw	r2, #5000	; 0x1388
 8005434:	4293      	cmp	r3, r2
 8005436:	d901      	bls.n	800543c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8005438:	2303      	movs	r3, #3
 800543a:	e0be      	b.n	80055ba <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800543c:	4b1c      	ldr	r3, [pc, #112]	; (80054b0 <HAL_RCC_ClockConfig+0x244>)
 800543e:	691b      	ldr	r3, [r3, #16]
 8005440:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	685b      	ldr	r3, [r3, #4]
 8005448:	00db      	lsls	r3, r3, #3
 800544a:	429a      	cmp	r2, r3
 800544c:	d1eb      	bne.n	8005426 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f003 0302 	and.w	r3, r3, #2
 8005456:	2b00      	cmp	r3, #0
 8005458:	d010      	beq.n	800547c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	68da      	ldr	r2, [r3, #12]
 800545e:	4b14      	ldr	r3, [pc, #80]	; (80054b0 <HAL_RCC_ClockConfig+0x244>)
 8005460:	699b      	ldr	r3, [r3, #24]
 8005462:	f003 030f 	and.w	r3, r3, #15
 8005466:	429a      	cmp	r2, r3
 8005468:	d208      	bcs.n	800547c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800546a:	4b11      	ldr	r3, [pc, #68]	; (80054b0 <HAL_RCC_ClockConfig+0x244>)
 800546c:	699b      	ldr	r3, [r3, #24]
 800546e:	f023 020f 	bic.w	r2, r3, #15
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	68db      	ldr	r3, [r3, #12]
 8005476:	490e      	ldr	r1, [pc, #56]	; (80054b0 <HAL_RCC_ClockConfig+0x244>)
 8005478:	4313      	orrs	r3, r2
 800547a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800547c:	4b0b      	ldr	r3, [pc, #44]	; (80054ac <HAL_RCC_ClockConfig+0x240>)
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f003 030f 	and.w	r3, r3, #15
 8005484:	683a      	ldr	r2, [r7, #0]
 8005486:	429a      	cmp	r2, r3
 8005488:	d214      	bcs.n	80054b4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800548a:	4b08      	ldr	r3, [pc, #32]	; (80054ac <HAL_RCC_ClockConfig+0x240>)
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f023 020f 	bic.w	r2, r3, #15
 8005492:	4906      	ldr	r1, [pc, #24]	; (80054ac <HAL_RCC_ClockConfig+0x240>)
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	4313      	orrs	r3, r2
 8005498:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800549a:	4b04      	ldr	r3, [pc, #16]	; (80054ac <HAL_RCC_ClockConfig+0x240>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f003 030f 	and.w	r3, r3, #15
 80054a2:	683a      	ldr	r2, [r7, #0]
 80054a4:	429a      	cmp	r2, r3
 80054a6:	d005      	beq.n	80054b4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80054a8:	2301      	movs	r3, #1
 80054aa:	e086      	b.n	80055ba <HAL_RCC_ClockConfig+0x34e>
 80054ac:	52002000 	.word	0x52002000
 80054b0:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f003 0304 	and.w	r3, r3, #4
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d010      	beq.n	80054e2 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	691a      	ldr	r2, [r3, #16]
 80054c4:	4b3f      	ldr	r3, [pc, #252]	; (80055c4 <HAL_RCC_ClockConfig+0x358>)
 80054c6:	699b      	ldr	r3, [r3, #24]
 80054c8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80054cc:	429a      	cmp	r2, r3
 80054ce:	d208      	bcs.n	80054e2 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80054d0:	4b3c      	ldr	r3, [pc, #240]	; (80055c4 <HAL_RCC_ClockConfig+0x358>)
 80054d2:	699b      	ldr	r3, [r3, #24]
 80054d4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	691b      	ldr	r3, [r3, #16]
 80054dc:	4939      	ldr	r1, [pc, #228]	; (80055c4 <HAL_RCC_ClockConfig+0x358>)
 80054de:	4313      	orrs	r3, r2
 80054e0:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f003 0308 	and.w	r3, r3, #8
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d010      	beq.n	8005510 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	695a      	ldr	r2, [r3, #20]
 80054f2:	4b34      	ldr	r3, [pc, #208]	; (80055c4 <HAL_RCC_ClockConfig+0x358>)
 80054f4:	69db      	ldr	r3, [r3, #28]
 80054f6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80054fa:	429a      	cmp	r2, r3
 80054fc:	d208      	bcs.n	8005510 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80054fe:	4b31      	ldr	r3, [pc, #196]	; (80055c4 <HAL_RCC_ClockConfig+0x358>)
 8005500:	69db      	ldr	r3, [r3, #28]
 8005502:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	695b      	ldr	r3, [r3, #20]
 800550a:	492e      	ldr	r1, [pc, #184]	; (80055c4 <HAL_RCC_ClockConfig+0x358>)
 800550c:	4313      	orrs	r3, r2
 800550e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f003 0310 	and.w	r3, r3, #16
 8005518:	2b00      	cmp	r3, #0
 800551a:	d010      	beq.n	800553e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	699a      	ldr	r2, [r3, #24]
 8005520:	4b28      	ldr	r3, [pc, #160]	; (80055c4 <HAL_RCC_ClockConfig+0x358>)
 8005522:	69db      	ldr	r3, [r3, #28]
 8005524:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005528:	429a      	cmp	r2, r3
 800552a:	d208      	bcs.n	800553e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800552c:	4b25      	ldr	r3, [pc, #148]	; (80055c4 <HAL_RCC_ClockConfig+0x358>)
 800552e:	69db      	ldr	r3, [r3, #28]
 8005530:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	699b      	ldr	r3, [r3, #24]
 8005538:	4922      	ldr	r1, [pc, #136]	; (80055c4 <HAL_RCC_ClockConfig+0x358>)
 800553a:	4313      	orrs	r3, r2
 800553c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f003 0320 	and.w	r3, r3, #32
 8005546:	2b00      	cmp	r3, #0
 8005548:	d010      	beq.n	800556c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	69da      	ldr	r2, [r3, #28]
 800554e:	4b1d      	ldr	r3, [pc, #116]	; (80055c4 <HAL_RCC_ClockConfig+0x358>)
 8005550:	6a1b      	ldr	r3, [r3, #32]
 8005552:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005556:	429a      	cmp	r2, r3
 8005558:	d208      	bcs.n	800556c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800555a:	4b1a      	ldr	r3, [pc, #104]	; (80055c4 <HAL_RCC_ClockConfig+0x358>)
 800555c:	6a1b      	ldr	r3, [r3, #32]
 800555e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	69db      	ldr	r3, [r3, #28]
 8005566:	4917      	ldr	r1, [pc, #92]	; (80055c4 <HAL_RCC_ClockConfig+0x358>)
 8005568:	4313      	orrs	r3, r2
 800556a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800556c:	f000 f834 	bl	80055d8 <HAL_RCC_GetSysClockFreq>
 8005570:	4602      	mov	r2, r0
 8005572:	4b14      	ldr	r3, [pc, #80]	; (80055c4 <HAL_RCC_ClockConfig+0x358>)
 8005574:	699b      	ldr	r3, [r3, #24]
 8005576:	0a1b      	lsrs	r3, r3, #8
 8005578:	f003 030f 	and.w	r3, r3, #15
 800557c:	4912      	ldr	r1, [pc, #72]	; (80055c8 <HAL_RCC_ClockConfig+0x35c>)
 800557e:	5ccb      	ldrb	r3, [r1, r3]
 8005580:	f003 031f 	and.w	r3, r3, #31
 8005584:	fa22 f303 	lsr.w	r3, r2, r3
 8005588:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800558a:	4b0e      	ldr	r3, [pc, #56]	; (80055c4 <HAL_RCC_ClockConfig+0x358>)
 800558c:	699b      	ldr	r3, [r3, #24]
 800558e:	f003 030f 	and.w	r3, r3, #15
 8005592:	4a0d      	ldr	r2, [pc, #52]	; (80055c8 <HAL_RCC_ClockConfig+0x35c>)
 8005594:	5cd3      	ldrb	r3, [r2, r3]
 8005596:	f003 031f 	and.w	r3, r3, #31
 800559a:	693a      	ldr	r2, [r7, #16]
 800559c:	fa22 f303 	lsr.w	r3, r2, r3
 80055a0:	4a0a      	ldr	r2, [pc, #40]	; (80055cc <HAL_RCC_ClockConfig+0x360>)
 80055a2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80055a4:	4a0a      	ldr	r2, [pc, #40]	; (80055d0 <HAL_RCC_ClockConfig+0x364>)
 80055a6:	693b      	ldr	r3, [r7, #16]
 80055a8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80055aa:	4b0a      	ldr	r3, [pc, #40]	; (80055d4 <HAL_RCC_ClockConfig+0x368>)
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	4618      	mov	r0, r3
 80055b0:	f7fb ff72 	bl	8001498 <HAL_InitTick>
 80055b4:	4603      	mov	r3, r0
 80055b6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80055b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80055ba:	4618      	mov	r0, r3
 80055bc:	3718      	adds	r7, #24
 80055be:	46bd      	mov	sp, r7
 80055c0:	bd80      	pop	{r7, pc}
 80055c2:	bf00      	nop
 80055c4:	58024400 	.word	0x58024400
 80055c8:	0800c9e8 	.word	0x0800c9e8
 80055cc:	24000404 	.word	0x24000404
 80055d0:	24000400 	.word	0x24000400
 80055d4:	24000408 	.word	0x24000408

080055d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80055d8:	b480      	push	{r7}
 80055da:	b089      	sub	sp, #36	; 0x24
 80055dc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80055de:	4bb3      	ldr	r3, [pc, #716]	; (80058ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80055e0:	691b      	ldr	r3, [r3, #16]
 80055e2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80055e6:	2b18      	cmp	r3, #24
 80055e8:	f200 8155 	bhi.w	8005896 <HAL_RCC_GetSysClockFreq+0x2be>
 80055ec:	a201      	add	r2, pc, #4	; (adr r2, 80055f4 <HAL_RCC_GetSysClockFreq+0x1c>)
 80055ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055f2:	bf00      	nop
 80055f4:	08005659 	.word	0x08005659
 80055f8:	08005897 	.word	0x08005897
 80055fc:	08005897 	.word	0x08005897
 8005600:	08005897 	.word	0x08005897
 8005604:	08005897 	.word	0x08005897
 8005608:	08005897 	.word	0x08005897
 800560c:	08005897 	.word	0x08005897
 8005610:	08005897 	.word	0x08005897
 8005614:	0800567f 	.word	0x0800567f
 8005618:	08005897 	.word	0x08005897
 800561c:	08005897 	.word	0x08005897
 8005620:	08005897 	.word	0x08005897
 8005624:	08005897 	.word	0x08005897
 8005628:	08005897 	.word	0x08005897
 800562c:	08005897 	.word	0x08005897
 8005630:	08005897 	.word	0x08005897
 8005634:	08005685 	.word	0x08005685
 8005638:	08005897 	.word	0x08005897
 800563c:	08005897 	.word	0x08005897
 8005640:	08005897 	.word	0x08005897
 8005644:	08005897 	.word	0x08005897
 8005648:	08005897 	.word	0x08005897
 800564c:	08005897 	.word	0x08005897
 8005650:	08005897 	.word	0x08005897
 8005654:	0800568b 	.word	0x0800568b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005658:	4b94      	ldr	r3, [pc, #592]	; (80058ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f003 0320 	and.w	r3, r3, #32
 8005660:	2b00      	cmp	r3, #0
 8005662:	d009      	beq.n	8005678 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005664:	4b91      	ldr	r3, [pc, #580]	; (80058ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	08db      	lsrs	r3, r3, #3
 800566a:	f003 0303 	and.w	r3, r3, #3
 800566e:	4a90      	ldr	r2, [pc, #576]	; (80058b0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005670:	fa22 f303 	lsr.w	r3, r2, r3
 8005674:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8005676:	e111      	b.n	800589c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005678:	4b8d      	ldr	r3, [pc, #564]	; (80058b0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800567a:	61bb      	str	r3, [r7, #24]
    break;
 800567c:	e10e      	b.n	800589c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800567e:	4b8d      	ldr	r3, [pc, #564]	; (80058b4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005680:	61bb      	str	r3, [r7, #24]
    break;
 8005682:	e10b      	b.n	800589c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8005684:	4b8c      	ldr	r3, [pc, #560]	; (80058b8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005686:	61bb      	str	r3, [r7, #24]
    break;
 8005688:	e108      	b.n	800589c <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800568a:	4b88      	ldr	r3, [pc, #544]	; (80058ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 800568c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800568e:	f003 0303 	and.w	r3, r3, #3
 8005692:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8005694:	4b85      	ldr	r3, [pc, #532]	; (80058ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005696:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005698:	091b      	lsrs	r3, r3, #4
 800569a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800569e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80056a0:	4b82      	ldr	r3, [pc, #520]	; (80058ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80056a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056a4:	f003 0301 	and.w	r3, r3, #1
 80056a8:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80056aa:	4b80      	ldr	r3, [pc, #512]	; (80058ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80056ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056ae:	08db      	lsrs	r3, r3, #3
 80056b0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80056b4:	68fa      	ldr	r2, [r7, #12]
 80056b6:	fb02 f303 	mul.w	r3, r2, r3
 80056ba:	ee07 3a90 	vmov	s15, r3
 80056be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056c2:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80056c6:	693b      	ldr	r3, [r7, #16]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	f000 80e1 	beq.w	8005890 <HAL_RCC_GetSysClockFreq+0x2b8>
 80056ce:	697b      	ldr	r3, [r7, #20]
 80056d0:	2b02      	cmp	r3, #2
 80056d2:	f000 8083 	beq.w	80057dc <HAL_RCC_GetSysClockFreq+0x204>
 80056d6:	697b      	ldr	r3, [r7, #20]
 80056d8:	2b02      	cmp	r3, #2
 80056da:	f200 80a1 	bhi.w	8005820 <HAL_RCC_GetSysClockFreq+0x248>
 80056de:	697b      	ldr	r3, [r7, #20]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d003      	beq.n	80056ec <HAL_RCC_GetSysClockFreq+0x114>
 80056e4:	697b      	ldr	r3, [r7, #20]
 80056e6:	2b01      	cmp	r3, #1
 80056e8:	d056      	beq.n	8005798 <HAL_RCC_GetSysClockFreq+0x1c0>
 80056ea:	e099      	b.n	8005820 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80056ec:	4b6f      	ldr	r3, [pc, #444]	; (80058ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f003 0320 	and.w	r3, r3, #32
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d02d      	beq.n	8005754 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80056f8:	4b6c      	ldr	r3, [pc, #432]	; (80058ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	08db      	lsrs	r3, r3, #3
 80056fe:	f003 0303 	and.w	r3, r3, #3
 8005702:	4a6b      	ldr	r2, [pc, #428]	; (80058b0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005704:	fa22 f303 	lsr.w	r3, r2, r3
 8005708:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	ee07 3a90 	vmov	s15, r3
 8005710:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005714:	693b      	ldr	r3, [r7, #16]
 8005716:	ee07 3a90 	vmov	s15, r3
 800571a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800571e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005722:	4b62      	ldr	r3, [pc, #392]	; (80058ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005726:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800572a:	ee07 3a90 	vmov	s15, r3
 800572e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005732:	ed97 6a02 	vldr	s12, [r7, #8]
 8005736:	eddf 5a61 	vldr	s11, [pc, #388]	; 80058bc <HAL_RCC_GetSysClockFreq+0x2e4>
 800573a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800573e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005742:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005746:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800574a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800574e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8005752:	e087      	b.n	8005864 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005754:	693b      	ldr	r3, [r7, #16]
 8005756:	ee07 3a90 	vmov	s15, r3
 800575a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800575e:	eddf 6a58 	vldr	s13, [pc, #352]	; 80058c0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8005762:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005766:	4b51      	ldr	r3, [pc, #324]	; (80058ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800576a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800576e:	ee07 3a90 	vmov	s15, r3
 8005772:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005776:	ed97 6a02 	vldr	s12, [r7, #8]
 800577a:	eddf 5a50 	vldr	s11, [pc, #320]	; 80058bc <HAL_RCC_GetSysClockFreq+0x2e4>
 800577e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005782:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005786:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800578a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800578e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005792:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005796:	e065      	b.n	8005864 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005798:	693b      	ldr	r3, [r7, #16]
 800579a:	ee07 3a90 	vmov	s15, r3
 800579e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057a2:	eddf 6a48 	vldr	s13, [pc, #288]	; 80058c4 <HAL_RCC_GetSysClockFreq+0x2ec>
 80057a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80057aa:	4b40      	ldr	r3, [pc, #256]	; (80058ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80057ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057b2:	ee07 3a90 	vmov	s15, r3
 80057b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057ba:	ed97 6a02 	vldr	s12, [r7, #8]
 80057be:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80058bc <HAL_RCC_GetSysClockFreq+0x2e4>
 80057c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80057c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80057ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80057ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80057d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80057da:	e043      	b.n	8005864 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80057dc:	693b      	ldr	r3, [r7, #16]
 80057de:	ee07 3a90 	vmov	s15, r3
 80057e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057e6:	eddf 6a38 	vldr	s13, [pc, #224]	; 80058c8 <HAL_RCC_GetSysClockFreq+0x2f0>
 80057ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80057ee:	4b2f      	ldr	r3, [pc, #188]	; (80058ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80057f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057f6:	ee07 3a90 	vmov	s15, r3
 80057fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057fe:	ed97 6a02 	vldr	s12, [r7, #8]
 8005802:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80058bc <HAL_RCC_GetSysClockFreq+0x2e4>
 8005806:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800580a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800580e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005812:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005816:	ee67 7a27 	vmul.f32	s15, s14, s15
 800581a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800581e:	e021      	b.n	8005864 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005820:	693b      	ldr	r3, [r7, #16]
 8005822:	ee07 3a90 	vmov	s15, r3
 8005826:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800582a:	eddf 6a26 	vldr	s13, [pc, #152]	; 80058c4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800582e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005832:	4b1e      	ldr	r3, [pc, #120]	; (80058ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005836:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800583a:	ee07 3a90 	vmov	s15, r3
 800583e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005842:	ed97 6a02 	vldr	s12, [r7, #8]
 8005846:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80058bc <HAL_RCC_GetSysClockFreq+0x2e4>
 800584a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800584e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005852:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005856:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800585a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800585e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005862:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8005864:	4b11      	ldr	r3, [pc, #68]	; (80058ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005868:	0a5b      	lsrs	r3, r3, #9
 800586a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800586e:	3301      	adds	r3, #1
 8005870:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	ee07 3a90 	vmov	s15, r3
 8005878:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800587c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005880:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005884:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005888:	ee17 3a90 	vmov	r3, s15
 800588c:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800588e:	e005      	b.n	800589c <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8005890:	2300      	movs	r3, #0
 8005892:	61bb      	str	r3, [r7, #24]
    break;
 8005894:	e002      	b.n	800589c <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8005896:	4b07      	ldr	r3, [pc, #28]	; (80058b4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005898:	61bb      	str	r3, [r7, #24]
    break;
 800589a:	bf00      	nop
  }

  return sysclockfreq;
 800589c:	69bb      	ldr	r3, [r7, #24]
}
 800589e:	4618      	mov	r0, r3
 80058a0:	3724      	adds	r7, #36	; 0x24
 80058a2:	46bd      	mov	sp, r7
 80058a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a8:	4770      	bx	lr
 80058aa:	bf00      	nop
 80058ac:	58024400 	.word	0x58024400
 80058b0:	03d09000 	.word	0x03d09000
 80058b4:	003d0900 	.word	0x003d0900
 80058b8:	007a1200 	.word	0x007a1200
 80058bc:	46000000 	.word	0x46000000
 80058c0:	4c742400 	.word	0x4c742400
 80058c4:	4a742400 	.word	0x4a742400
 80058c8:	4af42400 	.word	0x4af42400

080058cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b082      	sub	sp, #8
 80058d0:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80058d2:	f7ff fe81 	bl	80055d8 <HAL_RCC_GetSysClockFreq>
 80058d6:	4602      	mov	r2, r0
 80058d8:	4b10      	ldr	r3, [pc, #64]	; (800591c <HAL_RCC_GetHCLKFreq+0x50>)
 80058da:	699b      	ldr	r3, [r3, #24]
 80058dc:	0a1b      	lsrs	r3, r3, #8
 80058de:	f003 030f 	and.w	r3, r3, #15
 80058e2:	490f      	ldr	r1, [pc, #60]	; (8005920 <HAL_RCC_GetHCLKFreq+0x54>)
 80058e4:	5ccb      	ldrb	r3, [r1, r3]
 80058e6:	f003 031f 	and.w	r3, r3, #31
 80058ea:	fa22 f303 	lsr.w	r3, r2, r3
 80058ee:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80058f0:	4b0a      	ldr	r3, [pc, #40]	; (800591c <HAL_RCC_GetHCLKFreq+0x50>)
 80058f2:	699b      	ldr	r3, [r3, #24]
 80058f4:	f003 030f 	and.w	r3, r3, #15
 80058f8:	4a09      	ldr	r2, [pc, #36]	; (8005920 <HAL_RCC_GetHCLKFreq+0x54>)
 80058fa:	5cd3      	ldrb	r3, [r2, r3]
 80058fc:	f003 031f 	and.w	r3, r3, #31
 8005900:	687a      	ldr	r2, [r7, #4]
 8005902:	fa22 f303 	lsr.w	r3, r2, r3
 8005906:	4a07      	ldr	r2, [pc, #28]	; (8005924 <HAL_RCC_GetHCLKFreq+0x58>)
 8005908:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800590a:	4a07      	ldr	r2, [pc, #28]	; (8005928 <HAL_RCC_GetHCLKFreq+0x5c>)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005910:	4b04      	ldr	r3, [pc, #16]	; (8005924 <HAL_RCC_GetHCLKFreq+0x58>)
 8005912:	681b      	ldr	r3, [r3, #0]
}
 8005914:	4618      	mov	r0, r3
 8005916:	3708      	adds	r7, #8
 8005918:	46bd      	mov	sp, r7
 800591a:	bd80      	pop	{r7, pc}
 800591c:	58024400 	.word	0x58024400
 8005920:	0800c9e8 	.word	0x0800c9e8
 8005924:	24000404 	.word	0x24000404
 8005928:	24000400 	.word	0x24000400

0800592c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800592c:	b580      	push	{r7, lr}
 800592e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005930:	f7ff ffcc 	bl	80058cc <HAL_RCC_GetHCLKFreq>
 8005934:	4602      	mov	r2, r0
 8005936:	4b06      	ldr	r3, [pc, #24]	; (8005950 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005938:	69db      	ldr	r3, [r3, #28]
 800593a:	091b      	lsrs	r3, r3, #4
 800593c:	f003 0307 	and.w	r3, r3, #7
 8005940:	4904      	ldr	r1, [pc, #16]	; (8005954 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005942:	5ccb      	ldrb	r3, [r1, r3]
 8005944:	f003 031f 	and.w	r3, r3, #31
 8005948:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800594c:	4618      	mov	r0, r3
 800594e:	bd80      	pop	{r7, pc}
 8005950:	58024400 	.word	0x58024400
 8005954:	0800c9e8 	.word	0x0800c9e8

08005958 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005958:	b580      	push	{r7, lr}
 800595a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800595c:	f7ff ffb6 	bl	80058cc <HAL_RCC_GetHCLKFreq>
 8005960:	4602      	mov	r2, r0
 8005962:	4b06      	ldr	r3, [pc, #24]	; (800597c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005964:	69db      	ldr	r3, [r3, #28]
 8005966:	0a1b      	lsrs	r3, r3, #8
 8005968:	f003 0307 	and.w	r3, r3, #7
 800596c:	4904      	ldr	r1, [pc, #16]	; (8005980 <HAL_RCC_GetPCLK2Freq+0x28>)
 800596e:	5ccb      	ldrb	r3, [r1, r3]
 8005970:	f003 031f 	and.w	r3, r3, #31
 8005974:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8005978:	4618      	mov	r0, r3
 800597a:	bd80      	pop	{r7, pc}
 800597c:	58024400 	.word	0x58024400
 8005980:	0800c9e8 	.word	0x0800c9e8

08005984 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005984:	b580      	push	{r7, lr}
 8005986:	b086      	sub	sp, #24
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800598c:	2300      	movs	r3, #0
 800598e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005990:	2300      	movs	r3, #0
 8005992:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800599c:	2b00      	cmp	r3, #0
 800599e:	d03f      	beq.n	8005a20 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80059a4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80059a8:	d02a      	beq.n	8005a00 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80059aa:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80059ae:	d824      	bhi.n	80059fa <HAL_RCCEx_PeriphCLKConfig+0x76>
 80059b0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80059b4:	d018      	beq.n	80059e8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80059b6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80059ba:	d81e      	bhi.n	80059fa <HAL_RCCEx_PeriphCLKConfig+0x76>
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d003      	beq.n	80059c8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80059c0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80059c4:	d007      	beq.n	80059d6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80059c6:	e018      	b.n	80059fa <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80059c8:	4bab      	ldr	r3, [pc, #684]	; (8005c78 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80059ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059cc:	4aaa      	ldr	r2, [pc, #680]	; (8005c78 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80059ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80059d2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80059d4:	e015      	b.n	8005a02 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	3304      	adds	r3, #4
 80059da:	2102      	movs	r1, #2
 80059dc:	4618      	mov	r0, r3
 80059de:	f001 fff3 	bl	80079c8 <RCCEx_PLL2_Config>
 80059e2:	4603      	mov	r3, r0
 80059e4:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80059e6:	e00c      	b.n	8005a02 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	3324      	adds	r3, #36	; 0x24
 80059ec:	2102      	movs	r1, #2
 80059ee:	4618      	mov	r0, r3
 80059f0:	f002 f89c 	bl	8007b2c <RCCEx_PLL3_Config>
 80059f4:	4603      	mov	r3, r0
 80059f6:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80059f8:	e003      	b.n	8005a02 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80059fa:	2301      	movs	r3, #1
 80059fc:	75fb      	strb	r3, [r7, #23]
      break;
 80059fe:	e000      	b.n	8005a02 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005a00:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005a02:	7dfb      	ldrb	r3, [r7, #23]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d109      	bne.n	8005a1c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005a08:	4b9b      	ldr	r3, [pc, #620]	; (8005c78 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005a0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a0c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a14:	4998      	ldr	r1, [pc, #608]	; (8005c78 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005a16:	4313      	orrs	r3, r2
 8005a18:	650b      	str	r3, [r1, #80]	; 0x50
 8005a1a:	e001      	b.n	8005a20 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a1c:	7dfb      	ldrb	r3, [r7, #23]
 8005a1e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d03d      	beq.n	8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a30:	2b04      	cmp	r3, #4
 8005a32:	d826      	bhi.n	8005a82 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8005a34:	a201      	add	r2, pc, #4	; (adr r2, 8005a3c <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8005a36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a3a:	bf00      	nop
 8005a3c:	08005a51 	.word	0x08005a51
 8005a40:	08005a5f 	.word	0x08005a5f
 8005a44:	08005a71 	.word	0x08005a71
 8005a48:	08005a89 	.word	0x08005a89
 8005a4c:	08005a89 	.word	0x08005a89
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a50:	4b89      	ldr	r3, [pc, #548]	; (8005c78 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a54:	4a88      	ldr	r2, [pc, #544]	; (8005c78 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005a56:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a5a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005a5c:	e015      	b.n	8005a8a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	3304      	adds	r3, #4
 8005a62:	2100      	movs	r1, #0
 8005a64:	4618      	mov	r0, r3
 8005a66:	f001 ffaf 	bl	80079c8 <RCCEx_PLL2_Config>
 8005a6a:	4603      	mov	r3, r0
 8005a6c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005a6e:	e00c      	b.n	8005a8a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	3324      	adds	r3, #36	; 0x24
 8005a74:	2100      	movs	r1, #0
 8005a76:	4618      	mov	r0, r3
 8005a78:	f002 f858 	bl	8007b2c <RCCEx_PLL3_Config>
 8005a7c:	4603      	mov	r3, r0
 8005a7e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005a80:	e003      	b.n	8005a8a <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005a82:	2301      	movs	r3, #1
 8005a84:	75fb      	strb	r3, [r7, #23]
      break;
 8005a86:	e000      	b.n	8005a8a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8005a88:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005a8a:	7dfb      	ldrb	r3, [r7, #23]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d109      	bne.n	8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005a90:	4b79      	ldr	r3, [pc, #484]	; (8005c78 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005a92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a94:	f023 0207 	bic.w	r2, r3, #7
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a9c:	4976      	ldr	r1, [pc, #472]	; (8005c78 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005a9e:	4313      	orrs	r3, r2
 8005aa0:	650b      	str	r3, [r1, #80]	; 0x50
 8005aa2:	e001      	b.n	8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005aa4:	7dfb      	ldrb	r3, [r7, #23]
 8005aa6:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d042      	beq.n	8005b3a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ab8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005abc:	d02b      	beq.n	8005b16 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8005abe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ac2:	d825      	bhi.n	8005b10 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8005ac4:	2bc0      	cmp	r3, #192	; 0xc0
 8005ac6:	d028      	beq.n	8005b1a <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005ac8:	2bc0      	cmp	r3, #192	; 0xc0
 8005aca:	d821      	bhi.n	8005b10 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8005acc:	2b80      	cmp	r3, #128	; 0x80
 8005ace:	d016      	beq.n	8005afe <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8005ad0:	2b80      	cmp	r3, #128	; 0x80
 8005ad2:	d81d      	bhi.n	8005b10 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d002      	beq.n	8005ade <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8005ad8:	2b40      	cmp	r3, #64	; 0x40
 8005ada:	d007      	beq.n	8005aec <HAL_RCCEx_PeriphCLKConfig+0x168>
 8005adc:	e018      	b.n	8005b10 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ade:	4b66      	ldr	r3, [pc, #408]	; (8005c78 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005ae0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ae2:	4a65      	ldr	r2, [pc, #404]	; (8005c78 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005ae4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005ae8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8005aea:	e017      	b.n	8005b1c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	3304      	adds	r3, #4
 8005af0:	2100      	movs	r1, #0
 8005af2:	4618      	mov	r0, r3
 8005af4:	f001 ff68 	bl	80079c8 <RCCEx_PLL2_Config>
 8005af8:	4603      	mov	r3, r0
 8005afa:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8005afc:	e00e      	b.n	8005b1c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	3324      	adds	r3, #36	; 0x24
 8005b02:	2100      	movs	r1, #0
 8005b04:	4618      	mov	r0, r3
 8005b06:	f002 f811 	bl	8007b2c <RCCEx_PLL3_Config>
 8005b0a:	4603      	mov	r3, r0
 8005b0c:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8005b0e:	e005      	b.n	8005b1c <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005b10:	2301      	movs	r3, #1
 8005b12:	75fb      	strb	r3, [r7, #23]
      break;
 8005b14:	e002      	b.n	8005b1c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8005b16:	bf00      	nop
 8005b18:	e000      	b.n	8005b1c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8005b1a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005b1c:	7dfb      	ldrb	r3, [r7, #23]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d109      	bne.n	8005b36 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8005b22:	4b55      	ldr	r3, [pc, #340]	; (8005c78 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005b24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b26:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b2e:	4952      	ldr	r1, [pc, #328]	; (8005c78 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005b30:	4313      	orrs	r3, r2
 8005b32:	650b      	str	r3, [r1, #80]	; 0x50
 8005b34:	e001      	b.n	8005b3a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b36:	7dfb      	ldrb	r3, [r7, #23]
 8005b38:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d049      	beq.n	8005bda <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005b4c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005b50:	d030      	beq.n	8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8005b52:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005b56:	d82a      	bhi.n	8005bae <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005b58:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005b5c:	d02c      	beq.n	8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8005b5e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005b62:	d824      	bhi.n	8005bae <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005b64:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005b68:	d018      	beq.n	8005b9c <HAL_RCCEx_PeriphCLKConfig+0x218>
 8005b6a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005b6e:	d81e      	bhi.n	8005bae <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d003      	beq.n	8005b7c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8005b74:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005b78:	d007      	beq.n	8005b8a <HAL_RCCEx_PeriphCLKConfig+0x206>
 8005b7a:	e018      	b.n	8005bae <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b7c:	4b3e      	ldr	r3, [pc, #248]	; (8005c78 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005b7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b80:	4a3d      	ldr	r2, [pc, #244]	; (8005c78 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005b82:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005b86:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005b88:	e017      	b.n	8005bba <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	3304      	adds	r3, #4
 8005b8e:	2100      	movs	r1, #0
 8005b90:	4618      	mov	r0, r3
 8005b92:	f001 ff19 	bl	80079c8 <RCCEx_PLL2_Config>
 8005b96:	4603      	mov	r3, r0
 8005b98:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8005b9a:	e00e      	b.n	8005bba <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	3324      	adds	r3, #36	; 0x24
 8005ba0:	2100      	movs	r1, #0
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	f001 ffc2 	bl	8007b2c <RCCEx_PLL3_Config>
 8005ba8:	4603      	mov	r3, r0
 8005baa:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005bac:	e005      	b.n	8005bba <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8005bae:	2301      	movs	r3, #1
 8005bb0:	75fb      	strb	r3, [r7, #23]
      break;
 8005bb2:	e002      	b.n	8005bba <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8005bb4:	bf00      	nop
 8005bb6:	e000      	b.n	8005bba <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8005bb8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005bba:	7dfb      	ldrb	r3, [r7, #23]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d10a      	bne.n	8005bd6 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005bc0:	4b2d      	ldr	r3, [pc, #180]	; (8005c78 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005bc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bc4:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005bce:	492a      	ldr	r1, [pc, #168]	; (8005c78 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005bd0:	4313      	orrs	r3, r2
 8005bd2:	658b      	str	r3, [r1, #88]	; 0x58
 8005bd4:	e001      	b.n	8005bda <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bd6:	7dfb      	ldrb	r3, [r7, #23]
 8005bd8:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d04c      	beq.n	8005c80 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005bec:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005bf0:	d030      	beq.n	8005c54 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8005bf2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005bf6:	d82a      	bhi.n	8005c4e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8005bf8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005bfc:	d02c      	beq.n	8005c58 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8005bfe:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005c02:	d824      	bhi.n	8005c4e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8005c04:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005c08:	d018      	beq.n	8005c3c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8005c0a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005c0e:	d81e      	bhi.n	8005c4e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d003      	beq.n	8005c1c <HAL_RCCEx_PeriphCLKConfig+0x298>
 8005c14:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005c18:	d007      	beq.n	8005c2a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8005c1a:	e018      	b.n	8005c4e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c1c:	4b16      	ldr	r3, [pc, #88]	; (8005c78 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005c1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c20:	4a15      	ldr	r2, [pc, #84]	; (8005c78 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005c22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005c26:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005c28:	e017      	b.n	8005c5a <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	3304      	adds	r3, #4
 8005c2e:	2100      	movs	r1, #0
 8005c30:	4618      	mov	r0, r3
 8005c32:	f001 fec9 	bl	80079c8 <RCCEx_PLL2_Config>
 8005c36:	4603      	mov	r3, r0
 8005c38:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8005c3a:	e00e      	b.n	8005c5a <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	3324      	adds	r3, #36	; 0x24
 8005c40:	2100      	movs	r1, #0
 8005c42:	4618      	mov	r0, r3
 8005c44:	f001 ff72 	bl	8007b2c <RCCEx_PLL3_Config>
 8005c48:	4603      	mov	r3, r0
 8005c4a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005c4c:	e005      	b.n	8005c5a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8005c4e:	2301      	movs	r3, #1
 8005c50:	75fb      	strb	r3, [r7, #23]
      break;
 8005c52:	e002      	b.n	8005c5a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8005c54:	bf00      	nop
 8005c56:	e000      	b.n	8005c5a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8005c58:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005c5a:	7dfb      	ldrb	r3, [r7, #23]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d10d      	bne.n	8005c7c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005c60:	4b05      	ldr	r3, [pc, #20]	; (8005c78 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005c62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c64:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005c6e:	4902      	ldr	r1, [pc, #8]	; (8005c78 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005c70:	4313      	orrs	r3, r2
 8005c72:	658b      	str	r3, [r1, #88]	; 0x58
 8005c74:	e004      	b.n	8005c80 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8005c76:	bf00      	nop
 8005c78:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c7c:	7dfb      	ldrb	r3, [r7, #23]
 8005c7e:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d032      	beq.n	8005cf2 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c90:	2b30      	cmp	r3, #48	; 0x30
 8005c92:	d01c      	beq.n	8005cce <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8005c94:	2b30      	cmp	r3, #48	; 0x30
 8005c96:	d817      	bhi.n	8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8005c98:	2b20      	cmp	r3, #32
 8005c9a:	d00c      	beq.n	8005cb6 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8005c9c:	2b20      	cmp	r3, #32
 8005c9e:	d813      	bhi.n	8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d016      	beq.n	8005cd2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8005ca4:	2b10      	cmp	r3, #16
 8005ca6:	d10f      	bne.n	8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ca8:	4baf      	ldr	r3, [pc, #700]	; (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cac:	4aae      	ldr	r2, [pc, #696]	; (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005cae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005cb2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8005cb4:	e00e      	b.n	8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	3304      	adds	r3, #4
 8005cba:	2102      	movs	r1, #2
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	f001 fe83 	bl	80079c8 <RCCEx_PLL2_Config>
 8005cc2:	4603      	mov	r3, r0
 8005cc4:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8005cc6:	e005      	b.n	8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005cc8:	2301      	movs	r3, #1
 8005cca:	75fb      	strb	r3, [r7, #23]
      break;
 8005ccc:	e002      	b.n	8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8005cce:	bf00      	nop
 8005cd0:	e000      	b.n	8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8005cd2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005cd4:	7dfb      	ldrb	r3, [r7, #23]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d109      	bne.n	8005cee <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005cda:	4ba3      	ldr	r3, [pc, #652]	; (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005cdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005cde:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ce6:	49a0      	ldr	r1, [pc, #640]	; (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005ce8:	4313      	orrs	r3, r2
 8005cea:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005cec:	e001      	b.n	8005cf2 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cee:	7dfb      	ldrb	r3, [r7, #23]
 8005cf0:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d047      	beq.n	8005d8e <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d02:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005d06:	d030      	beq.n	8005d6a <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8005d08:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005d0c:	d82a      	bhi.n	8005d64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8005d0e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005d12:	d02c      	beq.n	8005d6e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8005d14:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005d18:	d824      	bhi.n	8005d64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8005d1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d1e:	d018      	beq.n	8005d52 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8005d20:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d24:	d81e      	bhi.n	8005d64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d003      	beq.n	8005d32 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8005d2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d2e:	d007      	beq.n	8005d40 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8005d30:	e018      	b.n	8005d64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d32:	4b8d      	ldr	r3, [pc, #564]	; (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005d34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d36:	4a8c      	ldr	r2, [pc, #560]	; (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005d38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005d3c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005d3e:	e017      	b.n	8005d70 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	3304      	adds	r3, #4
 8005d44:	2100      	movs	r1, #0
 8005d46:	4618      	mov	r0, r3
 8005d48:	f001 fe3e 	bl	80079c8 <RCCEx_PLL2_Config>
 8005d4c:	4603      	mov	r3, r0
 8005d4e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005d50:	e00e      	b.n	8005d70 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	3324      	adds	r3, #36	; 0x24
 8005d56:	2100      	movs	r1, #0
 8005d58:	4618      	mov	r0, r3
 8005d5a:	f001 fee7 	bl	8007b2c <RCCEx_PLL3_Config>
 8005d5e:	4603      	mov	r3, r0
 8005d60:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005d62:	e005      	b.n	8005d70 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005d64:	2301      	movs	r3, #1
 8005d66:	75fb      	strb	r3, [r7, #23]
      break;
 8005d68:	e002      	b.n	8005d70 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8005d6a:	bf00      	nop
 8005d6c:	e000      	b.n	8005d70 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8005d6e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005d70:	7dfb      	ldrb	r3, [r7, #23]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d109      	bne.n	8005d8a <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005d76:	4b7c      	ldr	r3, [pc, #496]	; (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005d78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d7a:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d82:	4979      	ldr	r1, [pc, #484]	; (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005d84:	4313      	orrs	r3, r2
 8005d86:	650b      	str	r3, [r1, #80]	; 0x50
 8005d88:	e001      	b.n	8005d8e <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d8a:	7dfb      	ldrb	r3, [r7, #23]
 8005d8c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d049      	beq.n	8005e2e <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d9e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005da2:	d02e      	beq.n	8005e02 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8005da4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005da8:	d828      	bhi.n	8005dfc <HAL_RCCEx_PeriphCLKConfig+0x478>
 8005daa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005dae:	d02a      	beq.n	8005e06 <HAL_RCCEx_PeriphCLKConfig+0x482>
 8005db0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005db4:	d822      	bhi.n	8005dfc <HAL_RCCEx_PeriphCLKConfig+0x478>
 8005db6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005dba:	d026      	beq.n	8005e0a <HAL_RCCEx_PeriphCLKConfig+0x486>
 8005dbc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005dc0:	d81c      	bhi.n	8005dfc <HAL_RCCEx_PeriphCLKConfig+0x478>
 8005dc2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005dc6:	d010      	beq.n	8005dea <HAL_RCCEx_PeriphCLKConfig+0x466>
 8005dc8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005dcc:	d816      	bhi.n	8005dfc <HAL_RCCEx_PeriphCLKConfig+0x478>
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d01d      	beq.n	8005e0e <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8005dd2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005dd6:	d111      	bne.n	8005dfc <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	3304      	adds	r3, #4
 8005ddc:	2101      	movs	r1, #1
 8005dde:	4618      	mov	r0, r3
 8005de0:	f001 fdf2 	bl	80079c8 <RCCEx_PLL2_Config>
 8005de4:	4603      	mov	r3, r0
 8005de6:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8005de8:	e012      	b.n	8005e10 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	3324      	adds	r3, #36	; 0x24
 8005dee:	2101      	movs	r1, #1
 8005df0:	4618      	mov	r0, r3
 8005df2:	f001 fe9b 	bl	8007b2c <RCCEx_PLL3_Config>
 8005df6:	4603      	mov	r3, r0
 8005df8:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8005dfa:	e009      	b.n	8005e10 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005dfc:	2301      	movs	r3, #1
 8005dfe:	75fb      	strb	r3, [r7, #23]
      break;
 8005e00:	e006      	b.n	8005e10 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8005e02:	bf00      	nop
 8005e04:	e004      	b.n	8005e10 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8005e06:	bf00      	nop
 8005e08:	e002      	b.n	8005e10 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8005e0a:	bf00      	nop
 8005e0c:	e000      	b.n	8005e10 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8005e0e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005e10:	7dfb      	ldrb	r3, [r7, #23]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d109      	bne.n	8005e2a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005e16:	4b54      	ldr	r3, [pc, #336]	; (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005e18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e1a:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e22:	4951      	ldr	r1, [pc, #324]	; (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005e24:	4313      	orrs	r3, r2
 8005e26:	650b      	str	r3, [r1, #80]	; 0x50
 8005e28:	e001      	b.n	8005e2e <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e2a:	7dfb      	ldrb	r3, [r7, #23]
 8005e2c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d04b      	beq.n	8005ed2 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005e40:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005e44:	d02e      	beq.n	8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8005e46:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005e4a:	d828      	bhi.n	8005e9e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8005e4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e50:	d02a      	beq.n	8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8005e52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e56:	d822      	bhi.n	8005e9e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8005e58:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005e5c:	d026      	beq.n	8005eac <HAL_RCCEx_PeriphCLKConfig+0x528>
 8005e5e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005e62:	d81c      	bhi.n	8005e9e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8005e64:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005e68:	d010      	beq.n	8005e8c <HAL_RCCEx_PeriphCLKConfig+0x508>
 8005e6a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005e6e:	d816      	bhi.n	8005e9e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d01d      	beq.n	8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8005e74:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005e78:	d111      	bne.n	8005e9e <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	3304      	adds	r3, #4
 8005e7e:	2101      	movs	r1, #1
 8005e80:	4618      	mov	r0, r3
 8005e82:	f001 fda1 	bl	80079c8 <RCCEx_PLL2_Config>
 8005e86:	4603      	mov	r3, r0
 8005e88:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8005e8a:	e012      	b.n	8005eb2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	3324      	adds	r3, #36	; 0x24
 8005e90:	2101      	movs	r1, #1
 8005e92:	4618      	mov	r0, r3
 8005e94:	f001 fe4a 	bl	8007b2c <RCCEx_PLL3_Config>
 8005e98:	4603      	mov	r3, r0
 8005e9a:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8005e9c:	e009      	b.n	8005eb2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8005e9e:	2301      	movs	r3, #1
 8005ea0:	75fb      	strb	r3, [r7, #23]
      break;
 8005ea2:	e006      	b.n	8005eb2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8005ea4:	bf00      	nop
 8005ea6:	e004      	b.n	8005eb2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8005ea8:	bf00      	nop
 8005eaa:	e002      	b.n	8005eb2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8005eac:	bf00      	nop
 8005eae:	e000      	b.n	8005eb2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8005eb0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005eb2:	7dfb      	ldrb	r3, [r7, #23]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d10a      	bne.n	8005ece <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005eb8:	4b2b      	ldr	r3, [pc, #172]	; (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005eba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ebc:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005ec6:	4928      	ldr	r1, [pc, #160]	; (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005ec8:	4313      	orrs	r3, r2
 8005eca:	658b      	str	r3, [r1, #88]	; 0x58
 8005ecc:	e001      	b.n	8005ed2 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ece:	7dfb      	ldrb	r3, [r7, #23]
 8005ed0:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d02f      	beq.n	8005f3e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005ee2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005ee6:	d00e      	beq.n	8005f06 <HAL_RCCEx_PeriphCLKConfig+0x582>
 8005ee8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005eec:	d814      	bhi.n	8005f18 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d015      	beq.n	8005f1e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8005ef2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005ef6:	d10f      	bne.n	8005f18 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ef8:	4b1b      	ldr	r3, [pc, #108]	; (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005efa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005efc:	4a1a      	ldr	r2, [pc, #104]	; (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005efe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005f02:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8005f04:	e00c      	b.n	8005f20 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	3304      	adds	r3, #4
 8005f0a:	2101      	movs	r1, #1
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	f001 fd5b 	bl	80079c8 <RCCEx_PLL2_Config>
 8005f12:	4603      	mov	r3, r0
 8005f14:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8005f16:	e003      	b.n	8005f20 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005f18:	2301      	movs	r3, #1
 8005f1a:	75fb      	strb	r3, [r7, #23]
      break;
 8005f1c:	e000      	b.n	8005f20 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8005f1e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005f20:	7dfb      	ldrb	r3, [r7, #23]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d109      	bne.n	8005f3a <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005f26:	4b10      	ldr	r3, [pc, #64]	; (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005f28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f2a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f32:	490d      	ldr	r1, [pc, #52]	; (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005f34:	4313      	orrs	r3, r2
 8005f36:	650b      	str	r3, [r1, #80]	; 0x50
 8005f38:	e001      	b.n	8005f3e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f3a:	7dfb      	ldrb	r3, [r7, #23]
 8005f3c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d033      	beq.n	8005fb2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f4e:	2b03      	cmp	r3, #3
 8005f50:	d81c      	bhi.n	8005f8c <HAL_RCCEx_PeriphCLKConfig+0x608>
 8005f52:	a201      	add	r2, pc, #4	; (adr r2, 8005f58 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8005f54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f58:	08005f93 	.word	0x08005f93
 8005f5c:	08005f6d 	.word	0x08005f6d
 8005f60:	08005f7b 	.word	0x08005f7b
 8005f64:	08005f93 	.word	0x08005f93
 8005f68:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005f6c:	4bb8      	ldr	r3, [pc, #736]	; (8006250 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f70:	4ab7      	ldr	r2, [pc, #732]	; (8006250 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005f72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005f76:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8005f78:	e00c      	b.n	8005f94 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	3304      	adds	r3, #4
 8005f7e:	2102      	movs	r1, #2
 8005f80:	4618      	mov	r0, r3
 8005f82:	f001 fd21 	bl	80079c8 <RCCEx_PLL2_Config>
 8005f86:	4603      	mov	r3, r0
 8005f88:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8005f8a:	e003      	b.n	8005f94 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005f8c:	2301      	movs	r3, #1
 8005f8e:	75fb      	strb	r3, [r7, #23]
      break;
 8005f90:	e000      	b.n	8005f94 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8005f92:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005f94:	7dfb      	ldrb	r3, [r7, #23]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d109      	bne.n	8005fae <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005f9a:	4bad      	ldr	r3, [pc, #692]	; (8006250 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005f9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f9e:	f023 0203 	bic.w	r2, r3, #3
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fa6:	49aa      	ldr	r1, [pc, #680]	; (8006250 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005fa8:	4313      	orrs	r3, r2
 8005faa:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005fac:	e001      	b.n	8005fb2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fae:	7dfb      	ldrb	r3, [r7, #23]
 8005fb0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	f000 8086 	beq.w	80060cc <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005fc0:	4ba4      	ldr	r3, [pc, #656]	; (8006254 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	4aa3      	ldr	r2, [pc, #652]	; (8006254 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8005fc6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005fca:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005fcc:	f7fb faae 	bl	800152c <HAL_GetTick>
 8005fd0:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005fd2:	e009      	b.n	8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005fd4:	f7fb faaa 	bl	800152c <HAL_GetTick>
 8005fd8:	4602      	mov	r2, r0
 8005fda:	693b      	ldr	r3, [r7, #16]
 8005fdc:	1ad3      	subs	r3, r2, r3
 8005fde:	2b64      	cmp	r3, #100	; 0x64
 8005fe0:	d902      	bls.n	8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8005fe2:	2303      	movs	r3, #3
 8005fe4:	75fb      	strb	r3, [r7, #23]
        break;
 8005fe6:	e005      	b.n	8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005fe8:	4b9a      	ldr	r3, [pc, #616]	; (8006254 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d0ef      	beq.n	8005fd4 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8005ff4:	7dfb      	ldrb	r3, [r7, #23]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d166      	bne.n	80060c8 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005ffa:	4b95      	ldr	r3, [pc, #596]	; (8006250 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005ffc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006004:	4053      	eors	r3, r2
 8006006:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800600a:	2b00      	cmp	r3, #0
 800600c:	d013      	beq.n	8006036 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800600e:	4b90      	ldr	r3, [pc, #576]	; (8006250 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006010:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006012:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006016:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006018:	4b8d      	ldr	r3, [pc, #564]	; (8006250 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800601a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800601c:	4a8c      	ldr	r2, [pc, #560]	; (8006250 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800601e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006022:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006024:	4b8a      	ldr	r3, [pc, #552]	; (8006250 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006026:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006028:	4a89      	ldr	r2, [pc, #548]	; (8006250 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800602a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800602e:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006030:	4a87      	ldr	r2, [pc, #540]	; (8006250 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800603c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006040:	d115      	bne.n	800606e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006042:	f7fb fa73 	bl	800152c <HAL_GetTick>
 8006046:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006048:	e00b      	b.n	8006062 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800604a:	f7fb fa6f 	bl	800152c <HAL_GetTick>
 800604e:	4602      	mov	r2, r0
 8006050:	693b      	ldr	r3, [r7, #16]
 8006052:	1ad3      	subs	r3, r2, r3
 8006054:	f241 3288 	movw	r2, #5000	; 0x1388
 8006058:	4293      	cmp	r3, r2
 800605a:	d902      	bls.n	8006062 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 800605c:	2303      	movs	r3, #3
 800605e:	75fb      	strb	r3, [r7, #23]
            break;
 8006060:	e005      	b.n	800606e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006062:	4b7b      	ldr	r3, [pc, #492]	; (8006250 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006064:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006066:	f003 0302 	and.w	r3, r3, #2
 800606a:	2b00      	cmp	r3, #0
 800606c:	d0ed      	beq.n	800604a <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 800606e:	7dfb      	ldrb	r3, [r7, #23]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d126      	bne.n	80060c2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800607a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800607e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006082:	d10d      	bne.n	80060a0 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8006084:	4b72      	ldr	r3, [pc, #456]	; (8006250 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006086:	691b      	ldr	r3, [r3, #16]
 8006088:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006092:	0919      	lsrs	r1, r3, #4
 8006094:	4b70      	ldr	r3, [pc, #448]	; (8006258 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8006096:	400b      	ands	r3, r1
 8006098:	496d      	ldr	r1, [pc, #436]	; (8006250 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800609a:	4313      	orrs	r3, r2
 800609c:	610b      	str	r3, [r1, #16]
 800609e:	e005      	b.n	80060ac <HAL_RCCEx_PeriphCLKConfig+0x728>
 80060a0:	4b6b      	ldr	r3, [pc, #428]	; (8006250 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80060a2:	691b      	ldr	r3, [r3, #16]
 80060a4:	4a6a      	ldr	r2, [pc, #424]	; (8006250 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80060a6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80060aa:	6113      	str	r3, [r2, #16]
 80060ac:	4b68      	ldr	r3, [pc, #416]	; (8006250 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80060ae:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80060b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80060ba:	4965      	ldr	r1, [pc, #404]	; (8006250 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80060bc:	4313      	orrs	r3, r2
 80060be:	670b      	str	r3, [r1, #112]	; 0x70
 80060c0:	e004      	b.n	80060cc <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80060c2:	7dfb      	ldrb	r3, [r7, #23]
 80060c4:	75bb      	strb	r3, [r7, #22]
 80060c6:	e001      	b.n	80060cc <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060c8:	7dfb      	ldrb	r3, [r7, #23]
 80060ca:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	f003 0301 	and.w	r3, r3, #1
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d07e      	beq.n	80061d6 <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80060dc:	2b28      	cmp	r3, #40	; 0x28
 80060de:	d867      	bhi.n	80061b0 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 80060e0:	a201      	add	r2, pc, #4	; (adr r2, 80060e8 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 80060e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060e6:	bf00      	nop
 80060e8:	080061b7 	.word	0x080061b7
 80060ec:	080061b1 	.word	0x080061b1
 80060f0:	080061b1 	.word	0x080061b1
 80060f4:	080061b1 	.word	0x080061b1
 80060f8:	080061b1 	.word	0x080061b1
 80060fc:	080061b1 	.word	0x080061b1
 8006100:	080061b1 	.word	0x080061b1
 8006104:	080061b1 	.word	0x080061b1
 8006108:	0800618d 	.word	0x0800618d
 800610c:	080061b1 	.word	0x080061b1
 8006110:	080061b1 	.word	0x080061b1
 8006114:	080061b1 	.word	0x080061b1
 8006118:	080061b1 	.word	0x080061b1
 800611c:	080061b1 	.word	0x080061b1
 8006120:	080061b1 	.word	0x080061b1
 8006124:	080061b1 	.word	0x080061b1
 8006128:	0800619f 	.word	0x0800619f
 800612c:	080061b1 	.word	0x080061b1
 8006130:	080061b1 	.word	0x080061b1
 8006134:	080061b1 	.word	0x080061b1
 8006138:	080061b1 	.word	0x080061b1
 800613c:	080061b1 	.word	0x080061b1
 8006140:	080061b1 	.word	0x080061b1
 8006144:	080061b1 	.word	0x080061b1
 8006148:	080061b7 	.word	0x080061b7
 800614c:	080061b1 	.word	0x080061b1
 8006150:	080061b1 	.word	0x080061b1
 8006154:	080061b1 	.word	0x080061b1
 8006158:	080061b1 	.word	0x080061b1
 800615c:	080061b1 	.word	0x080061b1
 8006160:	080061b1 	.word	0x080061b1
 8006164:	080061b1 	.word	0x080061b1
 8006168:	080061b7 	.word	0x080061b7
 800616c:	080061b1 	.word	0x080061b1
 8006170:	080061b1 	.word	0x080061b1
 8006174:	080061b1 	.word	0x080061b1
 8006178:	080061b1 	.word	0x080061b1
 800617c:	080061b1 	.word	0x080061b1
 8006180:	080061b1 	.word	0x080061b1
 8006184:	080061b1 	.word	0x080061b1
 8006188:	080061b7 	.word	0x080061b7
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	3304      	adds	r3, #4
 8006190:	2101      	movs	r1, #1
 8006192:	4618      	mov	r0, r3
 8006194:	f001 fc18 	bl	80079c8 <RCCEx_PLL2_Config>
 8006198:	4603      	mov	r3, r0
 800619a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800619c:	e00c      	b.n	80061b8 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	3324      	adds	r3, #36	; 0x24
 80061a2:	2101      	movs	r1, #1
 80061a4:	4618      	mov	r0, r3
 80061a6:	f001 fcc1 	bl	8007b2c <RCCEx_PLL3_Config>
 80061aa:	4603      	mov	r3, r0
 80061ac:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80061ae:	e003      	b.n	80061b8 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80061b0:	2301      	movs	r3, #1
 80061b2:	75fb      	strb	r3, [r7, #23]
      break;
 80061b4:	e000      	b.n	80061b8 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 80061b6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80061b8:	7dfb      	ldrb	r3, [r7, #23]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d109      	bne.n	80061d2 <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80061be:	4b24      	ldr	r3, [pc, #144]	; (8006250 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80061c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061c2:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80061ca:	4921      	ldr	r1, [pc, #132]	; (8006250 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80061cc:	4313      	orrs	r3, r2
 80061ce:	654b      	str	r3, [r1, #84]	; 0x54
 80061d0:	e001      	b.n	80061d6 <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061d2:	7dfb      	ldrb	r3, [r7, #23]
 80061d4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f003 0302 	and.w	r3, r3, #2
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d03e      	beq.n	8006260 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80061e6:	2b05      	cmp	r3, #5
 80061e8:	d820      	bhi.n	800622c <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 80061ea:	a201      	add	r2, pc, #4	; (adr r2, 80061f0 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 80061ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061f0:	08006233 	.word	0x08006233
 80061f4:	08006209 	.word	0x08006209
 80061f8:	0800621b 	.word	0x0800621b
 80061fc:	08006233 	.word	0x08006233
 8006200:	08006233 	.word	0x08006233
 8006204:	08006233 	.word	0x08006233
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	3304      	adds	r3, #4
 800620c:	2101      	movs	r1, #1
 800620e:	4618      	mov	r0, r3
 8006210:	f001 fbda 	bl	80079c8 <RCCEx_PLL2_Config>
 8006214:	4603      	mov	r3, r0
 8006216:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006218:	e00c      	b.n	8006234 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	3324      	adds	r3, #36	; 0x24
 800621e:	2101      	movs	r1, #1
 8006220:	4618      	mov	r0, r3
 8006222:	f001 fc83 	bl	8007b2c <RCCEx_PLL3_Config>
 8006226:	4603      	mov	r3, r0
 8006228:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800622a:	e003      	b.n	8006234 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800622c:	2301      	movs	r3, #1
 800622e:	75fb      	strb	r3, [r7, #23]
      break;
 8006230:	e000      	b.n	8006234 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 8006232:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006234:	7dfb      	ldrb	r3, [r7, #23]
 8006236:	2b00      	cmp	r3, #0
 8006238:	d110      	bne.n	800625c <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800623a:	4b05      	ldr	r3, [pc, #20]	; (8006250 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800623c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800623e:	f023 0207 	bic.w	r2, r3, #7
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006246:	4902      	ldr	r1, [pc, #8]	; (8006250 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006248:	4313      	orrs	r3, r2
 800624a:	654b      	str	r3, [r1, #84]	; 0x54
 800624c:	e008      	b.n	8006260 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 800624e:	bf00      	nop
 8006250:	58024400 	.word	0x58024400
 8006254:	58024800 	.word	0x58024800
 8006258:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 800625c:	7dfb      	ldrb	r3, [r7, #23]
 800625e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f003 0304 	and.w	r3, r3, #4
 8006268:	2b00      	cmp	r3, #0
 800626a:	d039      	beq.n	80062e0 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006272:	2b05      	cmp	r3, #5
 8006274:	d820      	bhi.n	80062b8 <HAL_RCCEx_PeriphCLKConfig+0x934>
 8006276:	a201      	add	r2, pc, #4	; (adr r2, 800627c <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8006278:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800627c:	080062bf 	.word	0x080062bf
 8006280:	08006295 	.word	0x08006295
 8006284:	080062a7 	.word	0x080062a7
 8006288:	080062bf 	.word	0x080062bf
 800628c:	080062bf 	.word	0x080062bf
 8006290:	080062bf 	.word	0x080062bf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	3304      	adds	r3, #4
 8006298:	2101      	movs	r1, #1
 800629a:	4618      	mov	r0, r3
 800629c:	f001 fb94 	bl	80079c8 <RCCEx_PLL2_Config>
 80062a0:	4603      	mov	r3, r0
 80062a2:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80062a4:	e00c      	b.n	80062c0 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	3324      	adds	r3, #36	; 0x24
 80062aa:	2101      	movs	r1, #1
 80062ac:	4618      	mov	r0, r3
 80062ae:	f001 fc3d 	bl	8007b2c <RCCEx_PLL3_Config>
 80062b2:	4603      	mov	r3, r0
 80062b4:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80062b6:	e003      	b.n	80062c0 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80062b8:	2301      	movs	r3, #1
 80062ba:	75fb      	strb	r3, [r7, #23]
      break;
 80062bc:	e000      	b.n	80062c0 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 80062be:	bf00      	nop
    }

    if(ret == HAL_OK)
 80062c0:	7dfb      	ldrb	r3, [r7, #23]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d10a      	bne.n	80062dc <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80062c6:	4bb7      	ldr	r3, [pc, #732]	; (80065a4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80062c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062ca:	f023 0207 	bic.w	r2, r3, #7
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062d4:	49b3      	ldr	r1, [pc, #716]	; (80065a4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80062d6:	4313      	orrs	r3, r2
 80062d8:	658b      	str	r3, [r1, #88]	; 0x58
 80062da:	e001      	b.n	80062e0 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062dc:	7dfb      	ldrb	r3, [r7, #23]
 80062de:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	f003 0320 	and.w	r3, r3, #32
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d04b      	beq.n	8006384 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80062f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80062f6:	d02e      	beq.n	8006356 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 80062f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80062fc:	d828      	bhi.n	8006350 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80062fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006302:	d02a      	beq.n	800635a <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8006304:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006308:	d822      	bhi.n	8006350 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800630a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800630e:	d026      	beq.n	800635e <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8006310:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006314:	d81c      	bhi.n	8006350 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8006316:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800631a:	d010      	beq.n	800633e <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 800631c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006320:	d816      	bhi.n	8006350 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8006322:	2b00      	cmp	r3, #0
 8006324:	d01d      	beq.n	8006362 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8006326:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800632a:	d111      	bne.n	8006350 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	3304      	adds	r3, #4
 8006330:	2100      	movs	r1, #0
 8006332:	4618      	mov	r0, r3
 8006334:	f001 fb48 	bl	80079c8 <RCCEx_PLL2_Config>
 8006338:	4603      	mov	r3, r0
 800633a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800633c:	e012      	b.n	8006364 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	3324      	adds	r3, #36	; 0x24
 8006342:	2102      	movs	r1, #2
 8006344:	4618      	mov	r0, r3
 8006346:	f001 fbf1 	bl	8007b2c <RCCEx_PLL3_Config>
 800634a:	4603      	mov	r3, r0
 800634c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800634e:	e009      	b.n	8006364 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006350:	2301      	movs	r3, #1
 8006352:	75fb      	strb	r3, [r7, #23]
      break;
 8006354:	e006      	b.n	8006364 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8006356:	bf00      	nop
 8006358:	e004      	b.n	8006364 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800635a:	bf00      	nop
 800635c:	e002      	b.n	8006364 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800635e:	bf00      	nop
 8006360:	e000      	b.n	8006364 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8006362:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006364:	7dfb      	ldrb	r3, [r7, #23]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d10a      	bne.n	8006380 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800636a:	4b8e      	ldr	r3, [pc, #568]	; (80065a4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800636c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800636e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006378:	498a      	ldr	r1, [pc, #552]	; (80065a4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800637a:	4313      	orrs	r3, r2
 800637c:	654b      	str	r3, [r1, #84]	; 0x54
 800637e:	e001      	b.n	8006384 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006380:	7dfb      	ldrb	r3, [r7, #23]
 8006382:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800638c:	2b00      	cmp	r3, #0
 800638e:	d04b      	beq.n	8006428 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006396:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800639a:	d02e      	beq.n	80063fa <HAL_RCCEx_PeriphCLKConfig+0xa76>
 800639c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80063a0:	d828      	bhi.n	80063f4 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80063a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063a6:	d02a      	beq.n	80063fe <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 80063a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063ac:	d822      	bhi.n	80063f4 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80063ae:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80063b2:	d026      	beq.n	8006402 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 80063b4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80063b8:	d81c      	bhi.n	80063f4 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80063ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80063be:	d010      	beq.n	80063e2 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 80063c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80063c4:	d816      	bhi.n	80063f4 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d01d      	beq.n	8006406 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 80063ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80063ce:	d111      	bne.n	80063f4 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	3304      	adds	r3, #4
 80063d4:	2100      	movs	r1, #0
 80063d6:	4618      	mov	r0, r3
 80063d8:	f001 faf6 	bl	80079c8 <RCCEx_PLL2_Config>
 80063dc:	4603      	mov	r3, r0
 80063de:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80063e0:	e012      	b.n	8006408 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	3324      	adds	r3, #36	; 0x24
 80063e6:	2102      	movs	r1, #2
 80063e8:	4618      	mov	r0, r3
 80063ea:	f001 fb9f 	bl	8007b2c <RCCEx_PLL3_Config>
 80063ee:	4603      	mov	r3, r0
 80063f0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80063f2:	e009      	b.n	8006408 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80063f4:	2301      	movs	r3, #1
 80063f6:	75fb      	strb	r3, [r7, #23]
      break;
 80063f8:	e006      	b.n	8006408 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80063fa:	bf00      	nop
 80063fc:	e004      	b.n	8006408 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80063fe:	bf00      	nop
 8006400:	e002      	b.n	8006408 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8006402:	bf00      	nop
 8006404:	e000      	b.n	8006408 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8006406:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006408:	7dfb      	ldrb	r3, [r7, #23]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d10a      	bne.n	8006424 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800640e:	4b65      	ldr	r3, [pc, #404]	; (80065a4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006410:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006412:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800641c:	4961      	ldr	r1, [pc, #388]	; (80065a4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800641e:	4313      	orrs	r3, r2
 8006420:	658b      	str	r3, [r1, #88]	; 0x58
 8006422:	e001      	b.n	8006428 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006424:	7dfb      	ldrb	r3, [r7, #23]
 8006426:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006430:	2b00      	cmp	r3, #0
 8006432:	d04b      	beq.n	80064cc <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800643a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800643e:	d02e      	beq.n	800649e <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8006440:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006444:	d828      	bhi.n	8006498 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8006446:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800644a:	d02a      	beq.n	80064a2 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 800644c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006450:	d822      	bhi.n	8006498 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8006452:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006456:	d026      	beq.n	80064a6 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8006458:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800645c:	d81c      	bhi.n	8006498 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800645e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006462:	d010      	beq.n	8006486 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8006464:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006468:	d816      	bhi.n	8006498 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800646a:	2b00      	cmp	r3, #0
 800646c:	d01d      	beq.n	80064aa <HAL_RCCEx_PeriphCLKConfig+0xb26>
 800646e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006472:	d111      	bne.n	8006498 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	3304      	adds	r3, #4
 8006478:	2100      	movs	r1, #0
 800647a:	4618      	mov	r0, r3
 800647c:	f001 faa4 	bl	80079c8 <RCCEx_PLL2_Config>
 8006480:	4603      	mov	r3, r0
 8006482:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006484:	e012      	b.n	80064ac <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	3324      	adds	r3, #36	; 0x24
 800648a:	2102      	movs	r1, #2
 800648c:	4618      	mov	r0, r3
 800648e:	f001 fb4d 	bl	8007b2c <RCCEx_PLL3_Config>
 8006492:	4603      	mov	r3, r0
 8006494:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006496:	e009      	b.n	80064ac <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006498:	2301      	movs	r3, #1
 800649a:	75fb      	strb	r3, [r7, #23]
      break;
 800649c:	e006      	b.n	80064ac <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800649e:	bf00      	nop
 80064a0:	e004      	b.n	80064ac <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80064a2:	bf00      	nop
 80064a4:	e002      	b.n	80064ac <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80064a6:	bf00      	nop
 80064a8:	e000      	b.n	80064ac <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80064aa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80064ac:	7dfb      	ldrb	r3, [r7, #23]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d10a      	bne.n	80064c8 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80064b2:	4b3c      	ldr	r3, [pc, #240]	; (80065a4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80064b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064b6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80064c0:	4938      	ldr	r1, [pc, #224]	; (80065a4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80064c2:	4313      	orrs	r3, r2
 80064c4:	658b      	str	r3, [r1, #88]	; 0x58
 80064c6:	e001      	b.n	80064cc <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064c8:	7dfb      	ldrb	r3, [r7, #23]
 80064ca:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f003 0308 	and.w	r3, r3, #8
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d01a      	beq.n	800650e <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80064de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064e2:	d10a      	bne.n	80064fa <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	3324      	adds	r3, #36	; 0x24
 80064e8:	2102      	movs	r1, #2
 80064ea:	4618      	mov	r0, r3
 80064ec:	f001 fb1e 	bl	8007b2c <RCCEx_PLL3_Config>
 80064f0:	4603      	mov	r3, r0
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d001      	beq.n	80064fa <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 80064f6:	2301      	movs	r3, #1
 80064f8:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80064fa:	4b2a      	ldr	r3, [pc, #168]	; (80065a4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80064fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064fe:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006508:	4926      	ldr	r1, [pc, #152]	; (80065a4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800650a:	4313      	orrs	r3, r2
 800650c:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	f003 0310 	and.w	r3, r3, #16
 8006516:	2b00      	cmp	r3, #0
 8006518:	d01a      	beq.n	8006550 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006520:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006524:	d10a      	bne.n	800653c <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	3324      	adds	r3, #36	; 0x24
 800652a:	2102      	movs	r1, #2
 800652c:	4618      	mov	r0, r3
 800652e:	f001 fafd 	bl	8007b2c <RCCEx_PLL3_Config>
 8006532:	4603      	mov	r3, r0
 8006534:	2b00      	cmp	r3, #0
 8006536:	d001      	beq.n	800653c <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8006538:	2301      	movs	r3, #1
 800653a:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800653c:	4b19      	ldr	r3, [pc, #100]	; (80065a4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800653e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006540:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800654a:	4916      	ldr	r1, [pc, #88]	; (80065a4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800654c:	4313      	orrs	r3, r2
 800654e:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006558:	2b00      	cmp	r3, #0
 800655a:	d036      	beq.n	80065ca <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006562:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006566:	d01f      	beq.n	80065a8 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8006568:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800656c:	d817      	bhi.n	800659e <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 800656e:	2b00      	cmp	r3, #0
 8006570:	d003      	beq.n	800657a <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8006572:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006576:	d009      	beq.n	800658c <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8006578:	e011      	b.n	800659e <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	3304      	adds	r3, #4
 800657e:	2100      	movs	r1, #0
 8006580:	4618      	mov	r0, r3
 8006582:	f001 fa21 	bl	80079c8 <RCCEx_PLL2_Config>
 8006586:	4603      	mov	r3, r0
 8006588:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800658a:	e00e      	b.n	80065aa <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	3324      	adds	r3, #36	; 0x24
 8006590:	2102      	movs	r1, #2
 8006592:	4618      	mov	r0, r3
 8006594:	f001 faca 	bl	8007b2c <RCCEx_PLL3_Config>
 8006598:	4603      	mov	r3, r0
 800659a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800659c:	e005      	b.n	80065aa <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800659e:	2301      	movs	r3, #1
 80065a0:	75fb      	strb	r3, [r7, #23]
      break;
 80065a2:	e002      	b.n	80065aa <HAL_RCCEx_PeriphCLKConfig+0xc26>
 80065a4:	58024400 	.word	0x58024400
      break;
 80065a8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80065aa:	7dfb      	ldrb	r3, [r7, #23]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d10a      	bne.n	80065c6 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80065b0:	4b93      	ldr	r3, [pc, #588]	; (8006800 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80065b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065b4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80065be:	4990      	ldr	r1, [pc, #576]	; (8006800 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80065c0:	4313      	orrs	r3, r2
 80065c2:	658b      	str	r3, [r1, #88]	; 0x58
 80065c4:	e001      	b.n	80065ca <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065c6:	7dfb      	ldrb	r3, [r7, #23]
 80065c8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d033      	beq.n	800663e <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80065dc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80065e0:	d01c      	beq.n	800661c <HAL_RCCEx_PeriphCLKConfig+0xc98>
 80065e2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80065e6:	d816      	bhi.n	8006616 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 80065e8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80065ec:	d003      	beq.n	80065f6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 80065ee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80065f2:	d007      	beq.n	8006604 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 80065f4:	e00f      	b.n	8006616 <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80065f6:	4b82      	ldr	r3, [pc, #520]	; (8006800 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80065f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065fa:	4a81      	ldr	r2, [pc, #516]	; (8006800 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80065fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006600:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8006602:	e00c      	b.n	800661e <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	3324      	adds	r3, #36	; 0x24
 8006608:	2101      	movs	r1, #1
 800660a:	4618      	mov	r0, r3
 800660c:	f001 fa8e 	bl	8007b2c <RCCEx_PLL3_Config>
 8006610:	4603      	mov	r3, r0
 8006612:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8006614:	e003      	b.n	800661e <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006616:	2301      	movs	r3, #1
 8006618:	75fb      	strb	r3, [r7, #23]
      break;
 800661a:	e000      	b.n	800661e <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 800661c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800661e:	7dfb      	ldrb	r3, [r7, #23]
 8006620:	2b00      	cmp	r3, #0
 8006622:	d10a      	bne.n	800663a <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006624:	4b76      	ldr	r3, [pc, #472]	; (8006800 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006626:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006628:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006632:	4973      	ldr	r1, [pc, #460]	; (8006800 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006634:	4313      	orrs	r3, r2
 8006636:	654b      	str	r3, [r1, #84]	; 0x54
 8006638:	e001      	b.n	800663e <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800663a:	7dfb      	ldrb	r3, [r7, #23]
 800663c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006646:	2b00      	cmp	r3, #0
 8006648:	d029      	beq.n	800669e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800664e:	2b00      	cmp	r3, #0
 8006650:	d003      	beq.n	800665a <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 8006652:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006656:	d007      	beq.n	8006668 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8006658:	e00f      	b.n	800667a <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800665a:	4b69      	ldr	r3, [pc, #420]	; (8006800 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800665c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800665e:	4a68      	ldr	r2, [pc, #416]	; (8006800 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006660:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006664:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006666:	e00b      	b.n	8006680 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	3304      	adds	r3, #4
 800666c:	2102      	movs	r1, #2
 800666e:	4618      	mov	r0, r3
 8006670:	f001 f9aa 	bl	80079c8 <RCCEx_PLL2_Config>
 8006674:	4603      	mov	r3, r0
 8006676:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006678:	e002      	b.n	8006680 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 800667a:	2301      	movs	r3, #1
 800667c:	75fb      	strb	r3, [r7, #23]
      break;
 800667e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006680:	7dfb      	ldrb	r3, [r7, #23]
 8006682:	2b00      	cmp	r3, #0
 8006684:	d109      	bne.n	800669a <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006686:	4b5e      	ldr	r3, [pc, #376]	; (8006800 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006688:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800668a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006692:	495b      	ldr	r1, [pc, #364]	; (8006800 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006694:	4313      	orrs	r3, r2
 8006696:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006698:	e001      	b.n	800669e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800669a:	7dfb      	ldrb	r3, [r7, #23]
 800669c:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d00a      	beq.n	80066c0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	3324      	adds	r3, #36	; 0x24
 80066ae:	2102      	movs	r1, #2
 80066b0:	4618      	mov	r0, r3
 80066b2:	f001 fa3b 	bl	8007b2c <RCCEx_PLL3_Config>
 80066b6:	4603      	mov	r3, r0
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d001      	beq.n	80066c0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 80066bc:	2301      	movs	r3, #1
 80066be:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d030      	beq.n	800672e <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80066d0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80066d4:	d017      	beq.n	8006706 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 80066d6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80066da:	d811      	bhi.n	8006700 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 80066dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80066e0:	d013      	beq.n	800670a <HAL_RCCEx_PeriphCLKConfig+0xd86>
 80066e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80066e6:	d80b      	bhi.n	8006700 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d010      	beq.n	800670e <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 80066ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80066f0:	d106      	bne.n	8006700 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80066f2:	4b43      	ldr	r3, [pc, #268]	; (8006800 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80066f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066f6:	4a42      	ldr	r2, [pc, #264]	; (8006800 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80066f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80066fc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80066fe:	e007      	b.n	8006710 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006700:	2301      	movs	r3, #1
 8006702:	75fb      	strb	r3, [r7, #23]
      break;
 8006704:	e004      	b.n	8006710 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8006706:	bf00      	nop
 8006708:	e002      	b.n	8006710 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800670a:	bf00      	nop
 800670c:	e000      	b.n	8006710 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800670e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006710:	7dfb      	ldrb	r3, [r7, #23]
 8006712:	2b00      	cmp	r3, #0
 8006714:	d109      	bne.n	800672a <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006716:	4b3a      	ldr	r3, [pc, #232]	; (8006800 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006718:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800671a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006722:	4937      	ldr	r1, [pc, #220]	; (8006800 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006724:	4313      	orrs	r3, r2
 8006726:	654b      	str	r3, [r1, #84]	; 0x54
 8006728:	e001      	b.n	800672e <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800672a:	7dfb      	ldrb	r3, [r7, #23]
 800672c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006736:	2b00      	cmp	r3, #0
 8006738:	d008      	beq.n	800674c <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800673a:	4b31      	ldr	r3, [pc, #196]	; (8006800 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800673c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800673e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006746:	492e      	ldr	r1, [pc, #184]	; (8006800 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006748:	4313      	orrs	r3, r2
 800674a:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006754:	2b00      	cmp	r3, #0
 8006756:	d009      	beq.n	800676c <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8006758:	4b29      	ldr	r3, [pc, #164]	; (8006800 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800675a:	691b      	ldr	r3, [r3, #16]
 800675c:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006766:	4926      	ldr	r1, [pc, #152]	; (8006800 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006768:	4313      	orrs	r3, r2
 800676a:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006774:	2b00      	cmp	r3, #0
 8006776:	d008      	beq.n	800678a <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006778:	4b21      	ldr	r3, [pc, #132]	; (8006800 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800677a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800677c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006784:	491e      	ldr	r1, [pc, #120]	; (8006800 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006786:	4313      	orrs	r3, r2
 8006788:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006792:	2b00      	cmp	r3, #0
 8006794:	d00d      	beq.n	80067b2 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006796:	4b1a      	ldr	r3, [pc, #104]	; (8006800 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006798:	691b      	ldr	r3, [r3, #16]
 800679a:	4a19      	ldr	r2, [pc, #100]	; (8006800 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800679c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80067a0:	6113      	str	r3, [r2, #16]
 80067a2:	4b17      	ldr	r3, [pc, #92]	; (8006800 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80067a4:	691a      	ldr	r2, [r3, #16]
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80067ac:	4914      	ldr	r1, [pc, #80]	; (8006800 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80067ae:	4313      	orrs	r3, r2
 80067b0:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	da08      	bge.n	80067cc <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80067ba:	4b11      	ldr	r3, [pc, #68]	; (8006800 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80067bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067be:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067c6:	490e      	ldr	r1, [pc, #56]	; (8006800 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80067c8:	4313      	orrs	r3, r2
 80067ca:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d009      	beq.n	80067ec <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80067d8:	4b09      	ldr	r3, [pc, #36]	; (8006800 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80067da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067dc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067e6:	4906      	ldr	r1, [pc, #24]	; (8006800 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80067e8:	4313      	orrs	r3, r2
 80067ea:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80067ec:	7dbb      	ldrb	r3, [r7, #22]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d101      	bne.n	80067f6 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 80067f2:	2300      	movs	r3, #0
 80067f4:	e000      	b.n	80067f8 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 80067f6:	2301      	movs	r3, #1
}
 80067f8:	4618      	mov	r0, r3
 80067fa:	3718      	adds	r7, #24
 80067fc:	46bd      	mov	sp, r7
 80067fe:	bd80      	pop	{r7, pc}
 8006800:	58024400 	.word	0x58024400

08006804 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006804:	b580      	push	{r7, lr}
 8006806:	b090      	sub	sp, #64	; 0x40
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006812:	f040 8095 	bne.w	8006940 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8006816:	4bae      	ldr	r3, [pc, #696]	; (8006ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8006818:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800681a:	f003 0307 	and.w	r3, r3, #7
 800681e:	633b      	str	r3, [r7, #48]	; 0x30
 8006820:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006822:	2b04      	cmp	r3, #4
 8006824:	f200 8088 	bhi.w	8006938 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8006828:	a201      	add	r2, pc, #4	; (adr r2, 8006830 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 800682a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800682e:	bf00      	nop
 8006830:	08006845 	.word	0x08006845
 8006834:	0800686d 	.word	0x0800686d
 8006838:	08006895 	.word	0x08006895
 800683c:	08006931 	.word	0x08006931
 8006840:	080068bd 	.word	0x080068bd

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006844:	4ba2      	ldr	r3, [pc, #648]	; (8006ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800684c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006850:	d108      	bne.n	8006864 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006852:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006856:	4618      	mov	r0, r3
 8006858:	f000 ff64 	bl	8007724 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 800685c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800685e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006860:	f000 bc95 	b.w	800718e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8006864:	2300      	movs	r3, #0
 8006866:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006868:	f000 bc91 	b.w	800718e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800686c:	4b98      	ldr	r3, [pc, #608]	; (8006ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006874:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006878:	d108      	bne.n	800688c <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800687a:	f107 0318 	add.w	r3, r7, #24
 800687e:	4618      	mov	r0, r3
 8006880:	f000 fca8 	bl	80071d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006884:	69bb      	ldr	r3, [r7, #24]
 8006886:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006888:	f000 bc81 	b.w	800718e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800688c:	2300      	movs	r3, #0
 800688e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006890:	f000 bc7d 	b.w	800718e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006894:	4b8e      	ldr	r3, [pc, #568]	; (8006ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800689c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80068a0:	d108      	bne.n	80068b4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80068a2:	f107 030c 	add.w	r3, r7, #12
 80068a6:	4618      	mov	r0, r3
 80068a8:	f000 fde8 	bl	800747c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80068b0:	f000 bc6d 	b.w	800718e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80068b4:	2300      	movs	r3, #0
 80068b6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80068b8:	f000 bc69 	b.w	800718e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80068bc:	4b84      	ldr	r3, [pc, #528]	; (8006ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80068be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068c0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80068c4:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80068c6:	4b82      	ldr	r3, [pc, #520]	; (8006ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	f003 0304 	and.w	r3, r3, #4
 80068ce:	2b04      	cmp	r3, #4
 80068d0:	d10c      	bne.n	80068ec <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 80068d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d109      	bne.n	80068ec <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80068d8:	4b7d      	ldr	r3, [pc, #500]	; (8006ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	08db      	lsrs	r3, r3, #3
 80068de:	f003 0303 	and.w	r3, r3, #3
 80068e2:	4a7c      	ldr	r2, [pc, #496]	; (8006ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 80068e4:	fa22 f303 	lsr.w	r3, r2, r3
 80068e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80068ea:	e01f      	b.n	800692c <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80068ec:	4b78      	ldr	r3, [pc, #480]	; (8006ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80068f8:	d106      	bne.n	8006908 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 80068fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068fc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006900:	d102      	bne.n	8006908 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8006902:	4b75      	ldr	r3, [pc, #468]	; (8006ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8006904:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006906:	e011      	b.n	800692c <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006908:	4b71      	ldr	r3, [pc, #452]	; (8006ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006910:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006914:	d106      	bne.n	8006924 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 8006916:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006918:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800691c:	d102      	bne.n	8006924 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800691e:	4b6f      	ldr	r3, [pc, #444]	; (8006adc <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8006920:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006922:	e003      	b.n	800692c <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8006924:	2300      	movs	r3, #0
 8006926:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8006928:	f000 bc31 	b.w	800718e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800692c:	f000 bc2f 	b.w	800718e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8006930:	4b6b      	ldr	r3, [pc, #428]	; (8006ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8006932:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006934:	f000 bc2b 	b.w	800718e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8006938:	2300      	movs	r3, #0
 800693a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800693c:	f000 bc27 	b.w	800718e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006946:	f040 8095 	bne.w	8006a74 <HAL_RCCEx_GetPeriphCLKFreq+0x270>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 800694a:	4b61      	ldr	r3, [pc, #388]	; (8006ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800694c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800694e:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8006952:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8006954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006956:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800695a:	d04d      	beq.n	80069f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 800695c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800695e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006962:	f200 8084 	bhi.w	8006a6e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8006966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006968:	2bc0      	cmp	r3, #192	; 0xc0
 800696a:	d07d      	beq.n	8006a68 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 800696c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800696e:	2bc0      	cmp	r3, #192	; 0xc0
 8006970:	d87d      	bhi.n	8006a6e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8006972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006974:	2b80      	cmp	r3, #128	; 0x80
 8006976:	d02d      	beq.n	80069d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 8006978:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800697a:	2b80      	cmp	r3, #128	; 0x80
 800697c:	d877      	bhi.n	8006a6e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800697e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006980:	2b00      	cmp	r3, #0
 8006982:	d003      	beq.n	800698c <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 8006984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006986:	2b40      	cmp	r3, #64	; 0x40
 8006988:	d012      	beq.n	80069b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 800698a:	e070      	b.n	8006a6e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800698c:	4b50      	ldr	r3, [pc, #320]	; (8006ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006994:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006998:	d107      	bne.n	80069aa <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800699a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800699e:	4618      	mov	r0, r3
 80069a0:	f000 fec0 	bl	8007724 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80069a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069a6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80069a8:	e3f1      	b.n	800718e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80069aa:	2300      	movs	r3, #0
 80069ac:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80069ae:	e3ee      	b.n	800718e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80069b0:	4b47      	ldr	r3, [pc, #284]	; (8006ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80069b8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80069bc:	d107      	bne.n	80069ce <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80069be:	f107 0318 	add.w	r3, r7, #24
 80069c2:	4618      	mov	r0, r3
 80069c4:	f000 fc06 	bl	80071d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80069c8:	69bb      	ldr	r3, [r7, #24]
 80069ca:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80069cc:	e3df      	b.n	800718e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80069ce:	2300      	movs	r3, #0
 80069d0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80069d2:	e3dc      	b.n	800718e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80069d4:	4b3e      	ldr	r3, [pc, #248]	; (8006ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80069dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80069e0:	d107      	bne.n	80069f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80069e2:	f107 030c 	add.w	r3, r7, #12
 80069e6:	4618      	mov	r0, r3
 80069e8:	f000 fd48 	bl	800747c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80069f0:	e3cd      	b.n	800718e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80069f2:	2300      	movs	r3, #0
 80069f4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80069f6:	e3ca      	b.n	800718e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80069f8:	4b35      	ldr	r3, [pc, #212]	; (8006ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80069fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069fc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006a00:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006a02:	4b33      	ldr	r3, [pc, #204]	; (8006ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	f003 0304 	and.w	r3, r3, #4
 8006a0a:	2b04      	cmp	r3, #4
 8006a0c:	d10c      	bne.n	8006a28 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 8006a0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d109      	bne.n	8006a28 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006a14:	4b2e      	ldr	r3, [pc, #184]	; (8006ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	08db      	lsrs	r3, r3, #3
 8006a1a:	f003 0303 	and.w	r3, r3, #3
 8006a1e:	4a2d      	ldr	r2, [pc, #180]	; (8006ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 8006a20:	fa22 f303 	lsr.w	r3, r2, r3
 8006a24:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a26:	e01e      	b.n	8006a66 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006a28:	4b29      	ldr	r3, [pc, #164]	; (8006ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a34:	d106      	bne.n	8006a44 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 8006a36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a38:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006a3c:	d102      	bne.n	8006a44 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8006a3e:	4b26      	ldr	r3, [pc, #152]	; (8006ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8006a40:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a42:	e010      	b.n	8006a66 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006a44:	4b22      	ldr	r3, [pc, #136]	; (8006ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a4c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006a50:	d106      	bne.n	8006a60 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 8006a52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a54:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006a58:	d102      	bne.n	8006a60 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8006a5a:	4b20      	ldr	r3, [pc, #128]	; (8006adc <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8006a5c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a5e:	e002      	b.n	8006a66 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8006a60:	2300      	movs	r3, #0
 8006a62:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8006a64:	e393      	b.n	800718e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8006a66:	e392      	b.n	800718e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8006a68:	4b1d      	ldr	r3, [pc, #116]	; (8006ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8006a6a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006a6c:	e38f      	b.n	800718e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8006a6e:	2300      	movs	r3, #0
 8006a70:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006a72:	e38c      	b.n	800718e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a7a:	f040 80a7 	bne.w	8006bcc <HAL_RCCEx_GetPeriphCLKFreq+0x3c8>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8006a7e:	4b14      	ldr	r3, [pc, #80]	; (8006ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8006a80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a82:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8006a86:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8006a88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a8a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006a8e:	d05f      	beq.n	8006b50 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8006a90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a92:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006a96:	f200 8096 	bhi.w	8006bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8006a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a9c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006aa0:	f000 808e 	beq.w	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
 8006aa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aa6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006aaa:	f200 808c 	bhi.w	8006bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8006aae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ab0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006ab4:	d03a      	beq.n	8006b2c <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 8006ab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ab8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006abc:	f200 8083 	bhi.w	8006bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8006ac0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d00e      	beq.n	8006ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>
 8006ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ac8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006acc:	d01c      	beq.n	8006b08 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 8006ace:	e07a      	b.n	8006bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8006ad0:	58024400 	.word	0x58024400
 8006ad4:	03d09000 	.word	0x03d09000
 8006ad8:	003d0900 	.word	0x003d0900
 8006adc:	007a1200 	.word	0x007a1200
 8006ae0:	00bb8000 	.word	0x00bb8000
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006ae4:	4baa      	ldr	r3, [pc, #680]	; (8006d90 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006aec:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006af0:	d107      	bne.n	8006b02 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006af2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006af6:	4618      	mov	r0, r3
 8006af8:	f000 fe14 	bl	8007724 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006afc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006afe:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006b00:	e345      	b.n	800718e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8006b02:	2300      	movs	r3, #0
 8006b04:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006b06:	e342      	b.n	800718e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006b08:	4ba1      	ldr	r3, [pc, #644]	; (8006d90 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006b10:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006b14:	d107      	bne.n	8006b26 <HAL_RCCEx_GetPeriphCLKFreq+0x322>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006b16:	f107 0318 	add.w	r3, r7, #24
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	f000 fb5a 	bl	80071d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006b20:	69bb      	ldr	r3, [r7, #24]
 8006b22:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006b24:	e333      	b.n	800718e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8006b26:	2300      	movs	r3, #0
 8006b28:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006b2a:	e330      	b.n	800718e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006b2c:	4b98      	ldr	r3, [pc, #608]	; (8006d90 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006b34:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006b38:	d107      	bne.n	8006b4a <HAL_RCCEx_GetPeriphCLKFreq+0x346>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006b3a:	f107 030c 	add.w	r3, r7, #12
 8006b3e:	4618      	mov	r0, r3
 8006b40:	f000 fc9c 	bl	800747c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006b48:	e321      	b.n	800718e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006b4e:	e31e      	b.n	800718e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006b50:	4b8f      	ldr	r3, [pc, #572]	; (8006d90 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006b52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b54:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006b58:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006b5a:	4b8d      	ldr	r3, [pc, #564]	; (8006d90 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	f003 0304 	and.w	r3, r3, #4
 8006b62:	2b04      	cmp	r3, #4
 8006b64:	d10c      	bne.n	8006b80 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 8006b66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d109      	bne.n	8006b80 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006b6c:	4b88      	ldr	r3, [pc, #544]	; (8006d90 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	08db      	lsrs	r3, r3, #3
 8006b72:	f003 0303 	and.w	r3, r3, #3
 8006b76:	4a87      	ldr	r2, [pc, #540]	; (8006d94 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006b78:	fa22 f303 	lsr.w	r3, r2, r3
 8006b7c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006b7e:	e01e      	b.n	8006bbe <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006b80:	4b83      	ldr	r3, [pc, #524]	; (8006d90 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b88:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b8c:	d106      	bne.n	8006b9c <HAL_RCCEx_GetPeriphCLKFreq+0x398>
 8006b8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b90:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006b94:	d102      	bne.n	8006b9c <HAL_RCCEx_GetPeriphCLKFreq+0x398>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8006b96:	4b80      	ldr	r3, [pc, #512]	; (8006d98 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8006b98:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006b9a:	e010      	b.n	8006bbe <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006b9c:	4b7c      	ldr	r3, [pc, #496]	; (8006d90 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ba4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006ba8:	d106      	bne.n	8006bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
 8006baa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006bb0:	d102      	bne.n	8006bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8006bb2:	4b7a      	ldr	r3, [pc, #488]	; (8006d9c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8006bb4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006bb6:	e002      	b.n	8006bbe <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8006bb8:	2300      	movs	r3, #0
 8006bba:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8006bbc:	e2e7      	b.n	800718e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8006bbe:	e2e6      	b.n	800718e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8006bc0:	4b77      	ldr	r3, [pc, #476]	; (8006da0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8006bc2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006bc4:	e2e3      	b.n	800718e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8006bc6:	2300      	movs	r3, #0
 8006bc8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006bca:	e2e0      	b.n	800718e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006bd2:	f040 809c 	bne.w	8006d0e <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8006bd6:	4b6e      	ldr	r3, [pc, #440]	; (8006d90 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006bd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bda:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8006bde:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8006be0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006be2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006be6:	d054      	beq.n	8006c92 <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 8006be8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bea:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006bee:	f200 808b 	bhi.w	8006d08 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 8006bf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bf4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006bf8:	f000 8083 	beq.w	8006d02 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 8006bfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bfe:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006c02:	f200 8081 	bhi.w	8006d08 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 8006c06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c08:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006c0c:	d02f      	beq.n	8006c6e <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 8006c0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c10:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006c14:	d878      	bhi.n	8006d08 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 8006c16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d004      	beq.n	8006c26 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8006c1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c1e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006c22:	d012      	beq.n	8006c4a <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 8006c24:	e070      	b.n	8006d08 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006c26:	4b5a      	ldr	r3, [pc, #360]	; (8006d90 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c2e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006c32:	d107      	bne.n	8006c44 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006c34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006c38:	4618      	mov	r0, r3
 8006c3a:	f000 fd73 	bl	8007724 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006c3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c40:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006c42:	e2a4      	b.n	800718e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8006c44:	2300      	movs	r3, #0
 8006c46:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006c48:	e2a1      	b.n	800718e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006c4a:	4b51      	ldr	r3, [pc, #324]	; (8006d90 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006c52:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006c56:	d107      	bne.n	8006c68 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006c58:	f107 0318 	add.w	r3, r7, #24
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	f000 fab9 	bl	80071d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006c62:	69bb      	ldr	r3, [r7, #24]
 8006c64:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 8006c66:	e292      	b.n	800718e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8006c68:	2300      	movs	r3, #0
 8006c6a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006c6c:	e28f      	b.n	800718e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006c6e:	4b48      	ldr	r3, [pc, #288]	; (8006d90 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006c76:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006c7a:	d107      	bne.n	8006c8c <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006c7c:	f107 030c 	add.w	r3, r7, #12
 8006c80:	4618      	mov	r0, r3
 8006c82:	f000 fbfb 	bl	800747c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006c8a:	e280      	b.n	800718e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8006c8c:	2300      	movs	r3, #0
 8006c8e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006c90:	e27d      	b.n	800718e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006c92:	4b3f      	ldr	r3, [pc, #252]	; (8006d90 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006c94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c96:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006c9a:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006c9c:	4b3c      	ldr	r3, [pc, #240]	; (8006d90 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	f003 0304 	and.w	r3, r3, #4
 8006ca4:	2b04      	cmp	r3, #4
 8006ca6:	d10c      	bne.n	8006cc2 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 8006ca8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d109      	bne.n	8006cc2 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006cae:	4b38      	ldr	r3, [pc, #224]	; (8006d90 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	08db      	lsrs	r3, r3, #3
 8006cb4:	f003 0303 	and.w	r3, r3, #3
 8006cb8:	4a36      	ldr	r2, [pc, #216]	; (8006d94 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006cba:	fa22 f303 	lsr.w	r3, r2, r3
 8006cbe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006cc0:	e01e      	b.n	8006d00 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006cc2:	4b33      	ldr	r3, [pc, #204]	; (8006d90 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006cce:	d106      	bne.n	8006cde <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 8006cd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cd2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006cd6:	d102      	bne.n	8006cde <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8006cd8:	4b2f      	ldr	r3, [pc, #188]	; (8006d98 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8006cda:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006cdc:	e010      	b.n	8006d00 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006cde:	4b2c      	ldr	r3, [pc, #176]	; (8006d90 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ce6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006cea:	d106      	bne.n	8006cfa <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 8006cec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006cf2:	d102      	bne.n	8006cfa <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8006cf4:	4b29      	ldr	r3, [pc, #164]	; (8006d9c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8006cf6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006cf8:	e002      	b.n	8006d00 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8006cfe:	e246      	b.n	800718e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8006d00:	e245      	b.n	800718e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8006d02:	4b27      	ldr	r3, [pc, #156]	; (8006da0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8006d04:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006d06:	e242      	b.n	800718e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8006d08:	2300      	movs	r3, #0
 8006d0a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006d0c:	e23f      	b.n	800718e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d14:	f040 80a8 	bne.w	8006e68 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8006d18:	4b1d      	ldr	r3, [pc, #116]	; (8006d90 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006d1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d1c:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8006d20:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8006d22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d24:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006d28:	d060      	beq.n	8006dec <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
 8006d2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d2c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006d30:	f200 8097 	bhi.w	8006e62 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8006d34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d36:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006d3a:	f000 808f 	beq.w	8006e5c <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 8006d3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d40:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006d44:	f200 808d 	bhi.w	8006e62 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8006d48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d4e:	d03b      	beq.n	8006dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x5c4>
 8006d50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d56:	f200 8084 	bhi.w	8006e62 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8006d5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d004      	beq.n	8006d6a <HAL_RCCEx_GetPeriphCLKFreq+0x566>
 8006d60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d66:	d01d      	beq.n	8006da4 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
 8006d68:	e07b      	b.n	8006e62 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006d6a:	4b09      	ldr	r3, [pc, #36]	; (8006d90 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d72:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006d76:	d107      	bne.n	8006d88 <HAL_RCCEx_GetPeriphCLKFreq+0x584>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006d78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006d7c:	4618      	mov	r0, r3
 8006d7e:	f000 fcd1 	bl	8007724 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006d82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d84:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006d86:	e202      	b.n	800718e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8006d88:	2300      	movs	r3, #0
 8006d8a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006d8c:	e1ff      	b.n	800718e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8006d8e:	bf00      	nop
 8006d90:	58024400 	.word	0x58024400
 8006d94:	03d09000 	.word	0x03d09000
 8006d98:	003d0900 	.word	0x003d0900
 8006d9c:	007a1200 	.word	0x007a1200
 8006da0:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006da4:	4ba3      	ldr	r3, [pc, #652]	; (8007034 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006dac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006db0:	d107      	bne.n	8006dc2 <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006db2:	f107 0318 	add.w	r3, r7, #24
 8006db6:	4618      	mov	r0, r3
 8006db8:	f000 fa0c 	bl	80071d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006dbc:	69bb      	ldr	r3, [r7, #24]
 8006dbe:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006dc0:	e1e5      	b.n	800718e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8006dc2:	2300      	movs	r3, #0
 8006dc4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006dc6:	e1e2      	b.n	800718e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006dc8:	4b9a      	ldr	r3, [pc, #616]	; (8007034 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006dd0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006dd4:	d107      	bne.n	8006de6 <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006dd6:	f107 030c 	add.w	r3, r7, #12
 8006dda:	4618      	mov	r0, r3
 8006ddc:	f000 fb4e 	bl	800747c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006de4:	e1d3      	b.n	800718e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8006de6:	2300      	movs	r3, #0
 8006de8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006dea:	e1d0      	b.n	800718e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006dec:	4b91      	ldr	r3, [pc, #580]	; (8007034 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006dee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006df0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006df4:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006df6:	4b8f      	ldr	r3, [pc, #572]	; (8007034 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	f003 0304 	and.w	r3, r3, #4
 8006dfe:	2b04      	cmp	r3, #4
 8006e00:	d10c      	bne.n	8006e1c <HAL_RCCEx_GetPeriphCLKFreq+0x618>
 8006e02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d109      	bne.n	8006e1c <HAL_RCCEx_GetPeriphCLKFreq+0x618>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006e08:	4b8a      	ldr	r3, [pc, #552]	; (8007034 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	08db      	lsrs	r3, r3, #3
 8006e0e:	f003 0303 	and.w	r3, r3, #3
 8006e12:	4a89      	ldr	r2, [pc, #548]	; (8007038 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006e14:	fa22 f303 	lsr.w	r3, r2, r3
 8006e18:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e1a:	e01e      	b.n	8006e5a <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006e1c:	4b85      	ldr	r3, [pc, #532]	; (8007034 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e24:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e28:	d106      	bne.n	8006e38 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
 8006e2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e2c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006e30:	d102      	bne.n	8006e38 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8006e32:	4b82      	ldr	r3, [pc, #520]	; (800703c <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8006e34:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e36:	e010      	b.n	8006e5a <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006e38:	4b7e      	ldr	r3, [pc, #504]	; (8007034 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e40:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006e44:	d106      	bne.n	8006e54 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8006e46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e48:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006e4c:	d102      	bne.n	8006e54 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8006e4e:	4b7c      	ldr	r3, [pc, #496]	; (8007040 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006e50:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e52:	e002      	b.n	8006e5a <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8006e54:	2300      	movs	r3, #0
 8006e56:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8006e58:	e199      	b.n	800718e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8006e5a:	e198      	b.n	800718e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8006e5c:	4b79      	ldr	r3, [pc, #484]	; (8007044 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006e5e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006e60:	e195      	b.n	800718e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8006e62:	2300      	movs	r3, #0
 8006e64:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006e66:	e192      	b.n	800718e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006e6e:	d173      	bne.n	8006f58 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8006e70:	4b70      	ldr	r3, [pc, #448]	; (8007034 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006e72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e74:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006e78:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8006e7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e7c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006e80:	d02f      	beq.n	8006ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
 8006e82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e84:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006e88:	d863      	bhi.n	8006f52 <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 8006e8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d004      	beq.n	8006e9a <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 8006e90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e96:	d012      	beq.n	8006ebe <HAL_RCCEx_GetPeriphCLKFreq+0x6ba>
 8006e98:	e05b      	b.n	8006f52 <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006e9a:	4b66      	ldr	r3, [pc, #408]	; (8007034 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006ea2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006ea6:	d107      	bne.n	8006eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006ea8:	f107 0318 	add.w	r3, r7, #24
 8006eac:	4618      	mov	r0, r3
 8006eae:	f000 f991 	bl	80071d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006eb2:	69bb      	ldr	r3, [r7, #24]
 8006eb4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006eb6:	e16a      	b.n	800718e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8006eb8:	2300      	movs	r3, #0
 8006eba:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006ebc:	e167      	b.n	800718e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006ebe:	4b5d      	ldr	r3, [pc, #372]	; (8007034 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006ec6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006eca:	d107      	bne.n	8006edc <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006ecc:	f107 030c 	add.w	r3, r7, #12
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	f000 fad3 	bl	800747c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006ed6:	697b      	ldr	r3, [r7, #20]
 8006ed8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006eda:	e158      	b.n	800718e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8006edc:	2300      	movs	r3, #0
 8006ede:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006ee0:	e155      	b.n	800718e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006ee2:	4b54      	ldr	r3, [pc, #336]	; (8007034 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006ee4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ee6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006eea:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006eec:	4b51      	ldr	r3, [pc, #324]	; (8007034 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	f003 0304 	and.w	r3, r3, #4
 8006ef4:	2b04      	cmp	r3, #4
 8006ef6:	d10c      	bne.n	8006f12 <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
 8006ef8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d109      	bne.n	8006f12 <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006efe:	4b4d      	ldr	r3, [pc, #308]	; (8007034 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	08db      	lsrs	r3, r3, #3
 8006f04:	f003 0303 	and.w	r3, r3, #3
 8006f08:	4a4b      	ldr	r2, [pc, #300]	; (8007038 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006f0a:	fa22 f303 	lsr.w	r3, r2, r3
 8006f0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006f10:	e01e      	b.n	8006f50 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006f12:	4b48      	ldr	r3, [pc, #288]	; (8007034 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f1e:	d106      	bne.n	8006f2e <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
 8006f20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f22:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006f26:	d102      	bne.n	8006f2e <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8006f28:	4b44      	ldr	r3, [pc, #272]	; (800703c <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8006f2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006f2c:	e010      	b.n	8006f50 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006f2e:	4b41      	ldr	r3, [pc, #260]	; (8007034 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f36:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006f3a:	d106      	bne.n	8006f4a <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 8006f3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f3e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006f42:	d102      	bne.n	8006f4a <HAL_RCCEx_GetPeriphCLKFreq+0x746>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8006f44:	4b3e      	ldr	r3, [pc, #248]	; (8007040 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006f46:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006f48:	e002      	b.n	8006f50 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8006f4e:	e11e      	b.n	800718e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8006f50:	e11d      	b.n	800718e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8006f52:	2300      	movs	r3, #0
 8006f54:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006f56:	e11a      	b.n	800718e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f5e:	d133      	bne.n	8006fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8006f60:	4b34      	ldr	r3, [pc, #208]	; (8007034 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006f62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006f68:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8006f6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d004      	beq.n	8006f7a <HAL_RCCEx_GetPeriphCLKFreq+0x776>
 8006f70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f76:	d012      	beq.n	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
 8006f78:	e023      	b.n	8006fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x7be>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006f7a:	4b2e      	ldr	r3, [pc, #184]	; (8007034 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f82:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006f86:	d107      	bne.n	8006f98 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006f88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	f000 fbc9 	bl	8007724 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006f92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f94:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006f96:	e0fa      	b.n	800718e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006f98:	2300      	movs	r3, #0
 8006f9a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006f9c:	e0f7      	b.n	800718e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006f9e:	4b25      	ldr	r3, [pc, #148]	; (8007034 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006fa6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006faa:	d107      	bne.n	8006fbc <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006fac:	f107 0318 	add.w	r3, r7, #24
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	f000 f90f 	bl	80071d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8006fb6:	6a3b      	ldr	r3, [r7, #32]
 8006fb8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006fba:	e0e8      	b.n	800718e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006fbc:	2300      	movs	r3, #0
 8006fbe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006fc0:	e0e5      	b.n	800718e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8006fc2:	2300      	movs	r3, #0
 8006fc4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006fc6:	e0e2      	b.n	800718e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006fce:	f040 808f 	bne.w	80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8006fd2:	4b18      	ldr	r3, [pc, #96]	; (8007034 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006fd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006fd6:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8006fda:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8006fdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fde:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006fe2:	d075      	beq.n	80070d0 <HAL_RCCEx_GetPeriphCLKFreq+0x8cc>
 8006fe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fe6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006fea:	d87e      	bhi.n	80070ea <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8006fec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ff2:	d060      	beq.n	80070b6 <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 8006ff4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ff6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ffa:	d876      	bhi.n	80070ea <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8006ffc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ffe:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007002:	d045      	beq.n	8007090 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>
 8007004:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007006:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800700a:	d86e      	bhi.n	80070ea <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 800700c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800700e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007012:	d02b      	beq.n	800706c <HAL_RCCEx_GetPeriphCLKFreq+0x868>
 8007014:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007016:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800701a:	d866      	bhi.n	80070ea <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 800701c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800701e:	2b00      	cmp	r3, #0
 8007020:	d004      	beq.n	800702c <HAL_RCCEx_GetPeriphCLKFreq+0x828>
 8007022:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007024:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007028:	d00e      	beq.n	8007048 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 800702a:	e05e      	b.n	80070ea <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800702c:	f000 f8bc 	bl	80071a8 <HAL_RCCEx_GetD3PCLK1Freq>
 8007030:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8007032:	e0ac      	b.n	800718e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8007034:	58024400 	.word	0x58024400
 8007038:	03d09000 	.word	0x03d09000
 800703c:	003d0900 	.word	0x003d0900
 8007040:	007a1200 	.word	0x007a1200
 8007044:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007048:	4b53      	ldr	r3, [pc, #332]	; (8007198 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007050:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007054:	d107      	bne.n	8007066 <HAL_RCCEx_GetPeriphCLKFreq+0x862>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007056:	f107 0318 	add.w	r3, r7, #24
 800705a:	4618      	mov	r0, r3
 800705c:	f000 f8ba 	bl	80071d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007060:	69fb      	ldr	r3, [r7, #28]
 8007062:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007064:	e093      	b.n	800718e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007066:	2300      	movs	r3, #0
 8007068:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800706a:	e090      	b.n	800718e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800706c:	4b4a      	ldr	r3, [pc, #296]	; (8007198 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007074:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007078:	d107      	bne.n	800708a <HAL_RCCEx_GetPeriphCLKFreq+0x886>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800707a:	f107 030c 	add.w	r3, r7, #12
 800707e:	4618      	mov	r0, r3
 8007080:	f000 f9fc 	bl	800747c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007084:	693b      	ldr	r3, [r7, #16]
 8007086:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007088:	e081      	b.n	800718e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800708a:	2300      	movs	r3, #0
 800708c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800708e:	e07e      	b.n	800718e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007090:	4b41      	ldr	r3, [pc, #260]	; (8007198 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	f003 0304 	and.w	r3, r3, #4
 8007098:	2b04      	cmp	r3, #4
 800709a:	d109      	bne.n	80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800709c:	4b3e      	ldr	r3, [pc, #248]	; (8007198 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	08db      	lsrs	r3, r3, #3
 80070a2:	f003 0303 	and.w	r3, r3, #3
 80070a6:	4a3d      	ldr	r2, [pc, #244]	; (800719c <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 80070a8:	fa22 f303 	lsr.w	r3, r2, r3
 80070ac:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80070ae:	e06e      	b.n	800718e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80070b0:	2300      	movs	r3, #0
 80070b2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80070b4:	e06b      	b.n	800718e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80070b6:	4b38      	ldr	r3, [pc, #224]	; (8007198 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80070c2:	d102      	bne.n	80070ca <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
         {
          frequency = CSI_VALUE;
 80070c4:	4b36      	ldr	r3, [pc, #216]	; (80071a0 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80070c6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80070c8:	e061      	b.n	800718e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80070ca:	2300      	movs	r3, #0
 80070cc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80070ce:	e05e      	b.n	800718e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80070d0:	4b31      	ldr	r3, [pc, #196]	; (8007198 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070d8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80070dc:	d102      	bne.n	80070e4 <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>
         {
          frequency = HSE_VALUE;
 80070de:	4b31      	ldr	r3, [pc, #196]	; (80071a4 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 80070e0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80070e2:	e054      	b.n	800718e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80070e4:	2300      	movs	r3, #0
 80070e6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80070e8:	e051      	b.n	800718e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 80070ea:	2300      	movs	r3, #0
 80070ec:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80070ee:	e04e      	b.n	800718e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80070f6:	d148      	bne.n	800718a <HAL_RCCEx_GetPeriphCLKFreq+0x986>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 80070f8:	4b27      	ldr	r3, [pc, #156]	; (8007198 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80070fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070fc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007100:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007102:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007104:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007108:	d02a      	beq.n	8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800710a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800710c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007110:	d838      	bhi.n	8007184 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 8007112:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007114:	2b00      	cmp	r3, #0
 8007116:	d004      	beq.n	8007122 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 8007118:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800711a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800711e:	d00d      	beq.n	800713c <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 8007120:	e030      	b.n	8007184 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007122:	4b1d      	ldr	r3, [pc, #116]	; (8007198 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800712a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800712e:	d102      	bne.n	8007136 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
         {
          frequency = HSE_VALUE;
 8007130:	4b1c      	ldr	r3, [pc, #112]	; (80071a4 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8007132:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007134:	e02b      	b.n	800718e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007136:	2300      	movs	r3, #0
 8007138:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800713a:	e028      	b.n	800718e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800713c:	4b16      	ldr	r3, [pc, #88]	; (8007198 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007144:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007148:	d107      	bne.n	800715a <HAL_RCCEx_GetPeriphCLKFreq+0x956>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800714a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800714e:	4618      	mov	r0, r3
 8007150:	f000 fae8 	bl	8007724 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007156:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007158:	e019      	b.n	800718e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800715a:	2300      	movs	r3, #0
 800715c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800715e:	e016      	b.n	800718e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007160:	4b0d      	ldr	r3, [pc, #52]	; (8007198 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007168:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800716c:	d107      	bne.n	800717e <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800716e:	f107 0318 	add.w	r3, r7, #24
 8007172:	4618      	mov	r0, r3
 8007174:	f000 f82e 	bl	80071d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007178:	69fb      	ldr	r3, [r7, #28]
 800717a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800717c:	e007      	b.n	800718e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800717e:	2300      	movs	r3, #0
 8007180:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007182:	e004      	b.n	800718e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8007184:	2300      	movs	r3, #0
 8007186:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007188:	e001      	b.n	800718e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else
    {
      frequency = 0;
 800718a:	2300      	movs	r3, #0
 800718c:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 800718e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007190:	4618      	mov	r0, r3
 8007192:	3740      	adds	r7, #64	; 0x40
 8007194:	46bd      	mov	sp, r7
 8007196:	bd80      	pop	{r7, pc}
 8007198:	58024400 	.word	0x58024400
 800719c:	03d09000 	.word	0x03d09000
 80071a0:	003d0900 	.word	0x003d0900
 80071a4:	007a1200 	.word	0x007a1200

080071a8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80071a8:	b580      	push	{r7, lr}
 80071aa:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80071ac:	f7fe fb8e 	bl	80058cc <HAL_RCC_GetHCLKFreq>
 80071b0:	4602      	mov	r2, r0
 80071b2:	4b06      	ldr	r3, [pc, #24]	; (80071cc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80071b4:	6a1b      	ldr	r3, [r3, #32]
 80071b6:	091b      	lsrs	r3, r3, #4
 80071b8:	f003 0307 	and.w	r3, r3, #7
 80071bc:	4904      	ldr	r1, [pc, #16]	; (80071d0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80071be:	5ccb      	ldrb	r3, [r1, r3]
 80071c0:	f003 031f 	and.w	r3, r3, #31
 80071c4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80071c8:	4618      	mov	r0, r3
 80071ca:	bd80      	pop	{r7, pc}
 80071cc:	58024400 	.word	0x58024400
 80071d0:	0800c9e8 	.word	0x0800c9e8

080071d4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80071d4:	b480      	push	{r7}
 80071d6:	b089      	sub	sp, #36	; 0x24
 80071d8:	af00      	add	r7, sp, #0
 80071da:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80071dc:	4ba1      	ldr	r3, [pc, #644]	; (8007464 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80071de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071e0:	f003 0303 	and.w	r3, r3, #3
 80071e4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80071e6:	4b9f      	ldr	r3, [pc, #636]	; (8007464 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80071e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071ea:	0b1b      	lsrs	r3, r3, #12
 80071ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80071f0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80071f2:	4b9c      	ldr	r3, [pc, #624]	; (8007464 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80071f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071f6:	091b      	lsrs	r3, r3, #4
 80071f8:	f003 0301 	and.w	r3, r3, #1
 80071fc:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80071fe:	4b99      	ldr	r3, [pc, #612]	; (8007464 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007200:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007202:	08db      	lsrs	r3, r3, #3
 8007204:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007208:	693a      	ldr	r2, [r7, #16]
 800720a:	fb02 f303 	mul.w	r3, r2, r3
 800720e:	ee07 3a90 	vmov	s15, r3
 8007212:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007216:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800721a:	697b      	ldr	r3, [r7, #20]
 800721c:	2b00      	cmp	r3, #0
 800721e:	f000 8111 	beq.w	8007444 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8007222:	69bb      	ldr	r3, [r7, #24]
 8007224:	2b02      	cmp	r3, #2
 8007226:	f000 8083 	beq.w	8007330 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800722a:	69bb      	ldr	r3, [r7, #24]
 800722c:	2b02      	cmp	r3, #2
 800722e:	f200 80a1 	bhi.w	8007374 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8007232:	69bb      	ldr	r3, [r7, #24]
 8007234:	2b00      	cmp	r3, #0
 8007236:	d003      	beq.n	8007240 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8007238:	69bb      	ldr	r3, [r7, #24]
 800723a:	2b01      	cmp	r3, #1
 800723c:	d056      	beq.n	80072ec <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800723e:	e099      	b.n	8007374 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007240:	4b88      	ldr	r3, [pc, #544]	; (8007464 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	f003 0320 	and.w	r3, r3, #32
 8007248:	2b00      	cmp	r3, #0
 800724a:	d02d      	beq.n	80072a8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800724c:	4b85      	ldr	r3, [pc, #532]	; (8007464 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	08db      	lsrs	r3, r3, #3
 8007252:	f003 0303 	and.w	r3, r3, #3
 8007256:	4a84      	ldr	r2, [pc, #528]	; (8007468 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8007258:	fa22 f303 	lsr.w	r3, r2, r3
 800725c:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800725e:	68bb      	ldr	r3, [r7, #8]
 8007260:	ee07 3a90 	vmov	s15, r3
 8007264:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007268:	697b      	ldr	r3, [r7, #20]
 800726a:	ee07 3a90 	vmov	s15, r3
 800726e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007272:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007276:	4b7b      	ldr	r3, [pc, #492]	; (8007464 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007278:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800727a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800727e:	ee07 3a90 	vmov	s15, r3
 8007282:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007286:	ed97 6a03 	vldr	s12, [r7, #12]
 800728a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800746c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800728e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007292:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007296:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800729a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800729e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072a2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80072a6:	e087      	b.n	80073b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80072a8:	697b      	ldr	r3, [r7, #20]
 80072aa:	ee07 3a90 	vmov	s15, r3
 80072ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072b2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007470 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80072b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80072ba:	4b6a      	ldr	r3, [pc, #424]	; (8007464 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80072bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072c2:	ee07 3a90 	vmov	s15, r3
 80072c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80072ce:	eddf 5a67 	vldr	s11, [pc, #412]	; 800746c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80072d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80072d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80072da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80072de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80072e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072e6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80072ea:	e065      	b.n	80073b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80072ec:	697b      	ldr	r3, [r7, #20]
 80072ee:	ee07 3a90 	vmov	s15, r3
 80072f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072f6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007474 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80072fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80072fe:	4b59      	ldr	r3, [pc, #356]	; (8007464 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007300:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007302:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007306:	ee07 3a90 	vmov	s15, r3
 800730a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800730e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007312:	eddf 5a56 	vldr	s11, [pc, #344]	; 800746c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007316:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800731a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800731e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007322:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007326:	ee67 7a27 	vmul.f32	s15, s14, s15
 800732a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800732e:	e043      	b.n	80073b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007330:	697b      	ldr	r3, [r7, #20]
 8007332:	ee07 3a90 	vmov	s15, r3
 8007336:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800733a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007478 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800733e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007342:	4b48      	ldr	r3, [pc, #288]	; (8007464 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007344:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007346:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800734a:	ee07 3a90 	vmov	s15, r3
 800734e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007352:	ed97 6a03 	vldr	s12, [r7, #12]
 8007356:	eddf 5a45 	vldr	s11, [pc, #276]	; 800746c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800735a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800735e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007362:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007366:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800736a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800736e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007372:	e021      	b.n	80073b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007374:	697b      	ldr	r3, [r7, #20]
 8007376:	ee07 3a90 	vmov	s15, r3
 800737a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800737e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007474 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007382:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007386:	4b37      	ldr	r3, [pc, #220]	; (8007464 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007388:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800738a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800738e:	ee07 3a90 	vmov	s15, r3
 8007392:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007396:	ed97 6a03 	vldr	s12, [r7, #12]
 800739a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800746c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800739e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80073a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80073a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80073aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80073ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80073b2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80073b6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80073b8:	4b2a      	ldr	r3, [pc, #168]	; (8007464 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80073ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073bc:	0a5b      	lsrs	r3, r3, #9
 80073be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80073c2:	ee07 3a90 	vmov	s15, r3
 80073c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073ca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80073ce:	ee37 7a87 	vadd.f32	s14, s15, s14
 80073d2:	edd7 6a07 	vldr	s13, [r7, #28]
 80073d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80073da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80073de:	ee17 2a90 	vmov	r2, s15
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80073e6:	4b1f      	ldr	r3, [pc, #124]	; (8007464 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80073e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073ea:	0c1b      	lsrs	r3, r3, #16
 80073ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80073f0:	ee07 3a90 	vmov	s15, r3
 80073f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073f8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80073fc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007400:	edd7 6a07 	vldr	s13, [r7, #28]
 8007404:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007408:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800740c:	ee17 2a90 	vmov	r2, s15
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8007414:	4b13      	ldr	r3, [pc, #76]	; (8007464 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007416:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007418:	0e1b      	lsrs	r3, r3, #24
 800741a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800741e:	ee07 3a90 	vmov	s15, r3
 8007422:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007426:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800742a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800742e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007432:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007436:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800743a:	ee17 2a90 	vmov	r2, s15
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007442:	e008      	b.n	8007456 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	2200      	movs	r2, #0
 8007448:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	2200      	movs	r2, #0
 800744e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	2200      	movs	r2, #0
 8007454:	609a      	str	r2, [r3, #8]
}
 8007456:	bf00      	nop
 8007458:	3724      	adds	r7, #36	; 0x24
 800745a:	46bd      	mov	sp, r7
 800745c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007460:	4770      	bx	lr
 8007462:	bf00      	nop
 8007464:	58024400 	.word	0x58024400
 8007468:	03d09000 	.word	0x03d09000
 800746c:	46000000 	.word	0x46000000
 8007470:	4c742400 	.word	0x4c742400
 8007474:	4a742400 	.word	0x4a742400
 8007478:	4af42400 	.word	0x4af42400

0800747c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800747c:	b480      	push	{r7}
 800747e:	b089      	sub	sp, #36	; 0x24
 8007480:	af00      	add	r7, sp, #0
 8007482:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007484:	4ba1      	ldr	r3, [pc, #644]	; (800770c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007486:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007488:	f003 0303 	and.w	r3, r3, #3
 800748c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800748e:	4b9f      	ldr	r3, [pc, #636]	; (800770c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007490:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007492:	0d1b      	lsrs	r3, r3, #20
 8007494:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007498:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800749a:	4b9c      	ldr	r3, [pc, #624]	; (800770c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800749c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800749e:	0a1b      	lsrs	r3, r3, #8
 80074a0:	f003 0301 	and.w	r3, r3, #1
 80074a4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80074a6:	4b99      	ldr	r3, [pc, #612]	; (800770c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80074a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074aa:	08db      	lsrs	r3, r3, #3
 80074ac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80074b0:	693a      	ldr	r2, [r7, #16]
 80074b2:	fb02 f303 	mul.w	r3, r2, r3
 80074b6:	ee07 3a90 	vmov	s15, r3
 80074ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074be:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80074c2:	697b      	ldr	r3, [r7, #20]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	f000 8111 	beq.w	80076ec <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80074ca:	69bb      	ldr	r3, [r7, #24]
 80074cc:	2b02      	cmp	r3, #2
 80074ce:	f000 8083 	beq.w	80075d8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80074d2:	69bb      	ldr	r3, [r7, #24]
 80074d4:	2b02      	cmp	r3, #2
 80074d6:	f200 80a1 	bhi.w	800761c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80074da:	69bb      	ldr	r3, [r7, #24]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d003      	beq.n	80074e8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80074e0:	69bb      	ldr	r3, [r7, #24]
 80074e2:	2b01      	cmp	r3, #1
 80074e4:	d056      	beq.n	8007594 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80074e6:	e099      	b.n	800761c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80074e8:	4b88      	ldr	r3, [pc, #544]	; (800770c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	f003 0320 	and.w	r3, r3, #32
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d02d      	beq.n	8007550 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80074f4:	4b85      	ldr	r3, [pc, #532]	; (800770c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	08db      	lsrs	r3, r3, #3
 80074fa:	f003 0303 	and.w	r3, r3, #3
 80074fe:	4a84      	ldr	r2, [pc, #528]	; (8007710 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007500:	fa22 f303 	lsr.w	r3, r2, r3
 8007504:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007506:	68bb      	ldr	r3, [r7, #8]
 8007508:	ee07 3a90 	vmov	s15, r3
 800750c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007510:	697b      	ldr	r3, [r7, #20]
 8007512:	ee07 3a90 	vmov	s15, r3
 8007516:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800751a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800751e:	4b7b      	ldr	r3, [pc, #492]	; (800770c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007522:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007526:	ee07 3a90 	vmov	s15, r3
 800752a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800752e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007532:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007714 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007536:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800753a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800753e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007542:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007546:	ee67 7a27 	vmul.f32	s15, s14, s15
 800754a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800754e:	e087      	b.n	8007660 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007550:	697b      	ldr	r3, [r7, #20]
 8007552:	ee07 3a90 	vmov	s15, r3
 8007556:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800755a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007718 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800755e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007562:	4b6a      	ldr	r3, [pc, #424]	; (800770c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007566:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800756a:	ee07 3a90 	vmov	s15, r3
 800756e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007572:	ed97 6a03 	vldr	s12, [r7, #12]
 8007576:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007714 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800757a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800757e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007582:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007586:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800758a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800758e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007592:	e065      	b.n	8007660 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007594:	697b      	ldr	r3, [r7, #20]
 8007596:	ee07 3a90 	vmov	s15, r3
 800759a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800759e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800771c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80075a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80075a6:	4b59      	ldr	r3, [pc, #356]	; (800770c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80075a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075ae:	ee07 3a90 	vmov	s15, r3
 80075b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80075ba:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007714 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80075be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80075c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80075c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80075ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80075ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075d2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80075d6:	e043      	b.n	8007660 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80075d8:	697b      	ldr	r3, [r7, #20]
 80075da:	ee07 3a90 	vmov	s15, r3
 80075de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075e2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007720 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80075e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80075ea:	4b48      	ldr	r3, [pc, #288]	; (800770c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80075ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075f2:	ee07 3a90 	vmov	s15, r3
 80075f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80075fe:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007714 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007602:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007606:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800760a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800760e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007612:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007616:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800761a:	e021      	b.n	8007660 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800761c:	697b      	ldr	r3, [r7, #20]
 800761e:	ee07 3a90 	vmov	s15, r3
 8007622:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007626:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800771c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800762a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800762e:	4b37      	ldr	r3, [pc, #220]	; (800770c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007632:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007636:	ee07 3a90 	vmov	s15, r3
 800763a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800763e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007642:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007714 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007646:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800764a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800764e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007652:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007656:	ee67 7a27 	vmul.f32	s15, s14, s15
 800765a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800765e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8007660:	4b2a      	ldr	r3, [pc, #168]	; (800770c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007664:	0a5b      	lsrs	r3, r3, #9
 8007666:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800766a:	ee07 3a90 	vmov	s15, r3
 800766e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007672:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007676:	ee37 7a87 	vadd.f32	s14, s15, s14
 800767a:	edd7 6a07 	vldr	s13, [r7, #28]
 800767e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007682:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007686:	ee17 2a90 	vmov	r2, s15
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800768e:	4b1f      	ldr	r3, [pc, #124]	; (800770c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007692:	0c1b      	lsrs	r3, r3, #16
 8007694:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007698:	ee07 3a90 	vmov	s15, r3
 800769c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076a0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80076a4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80076a8:	edd7 6a07 	vldr	s13, [r7, #28]
 80076ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80076b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80076b4:	ee17 2a90 	vmov	r2, s15
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80076bc:	4b13      	ldr	r3, [pc, #76]	; (800770c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80076be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076c0:	0e1b      	lsrs	r3, r3, #24
 80076c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80076c6:	ee07 3a90 	vmov	s15, r3
 80076ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076ce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80076d2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80076d6:	edd7 6a07 	vldr	s13, [r7, #28]
 80076da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80076de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80076e2:	ee17 2a90 	vmov	r2, s15
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80076ea:	e008      	b.n	80076fe <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	2200      	movs	r2, #0
 80076f0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	2200      	movs	r2, #0
 80076f6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	2200      	movs	r2, #0
 80076fc:	609a      	str	r2, [r3, #8]
}
 80076fe:	bf00      	nop
 8007700:	3724      	adds	r7, #36	; 0x24
 8007702:	46bd      	mov	sp, r7
 8007704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007708:	4770      	bx	lr
 800770a:	bf00      	nop
 800770c:	58024400 	.word	0x58024400
 8007710:	03d09000 	.word	0x03d09000
 8007714:	46000000 	.word	0x46000000
 8007718:	4c742400 	.word	0x4c742400
 800771c:	4a742400 	.word	0x4a742400
 8007720:	4af42400 	.word	0x4af42400

08007724 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8007724:	b480      	push	{r7}
 8007726:	b089      	sub	sp, #36	; 0x24
 8007728:	af00      	add	r7, sp, #0
 800772a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800772c:	4ba0      	ldr	r3, [pc, #640]	; (80079b0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800772e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007730:	f003 0303 	and.w	r3, r3, #3
 8007734:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8007736:	4b9e      	ldr	r3, [pc, #632]	; (80079b0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007738:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800773a:	091b      	lsrs	r3, r3, #4
 800773c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007740:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8007742:	4b9b      	ldr	r3, [pc, #620]	; (80079b0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007746:	f003 0301 	and.w	r3, r3, #1
 800774a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800774c:	4b98      	ldr	r3, [pc, #608]	; (80079b0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800774e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007750:	08db      	lsrs	r3, r3, #3
 8007752:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007756:	693a      	ldr	r2, [r7, #16]
 8007758:	fb02 f303 	mul.w	r3, r2, r3
 800775c:	ee07 3a90 	vmov	s15, r3
 8007760:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007764:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8007768:	697b      	ldr	r3, [r7, #20]
 800776a:	2b00      	cmp	r3, #0
 800776c:	f000 8111 	beq.w	8007992 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8007770:	69bb      	ldr	r3, [r7, #24]
 8007772:	2b02      	cmp	r3, #2
 8007774:	f000 8083 	beq.w	800787e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8007778:	69bb      	ldr	r3, [r7, #24]
 800777a:	2b02      	cmp	r3, #2
 800777c:	f200 80a1 	bhi.w	80078c2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8007780:	69bb      	ldr	r3, [r7, #24]
 8007782:	2b00      	cmp	r3, #0
 8007784:	d003      	beq.n	800778e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8007786:	69bb      	ldr	r3, [r7, #24]
 8007788:	2b01      	cmp	r3, #1
 800778a:	d056      	beq.n	800783a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800778c:	e099      	b.n	80078c2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800778e:	4b88      	ldr	r3, [pc, #544]	; (80079b0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	f003 0320 	and.w	r3, r3, #32
 8007796:	2b00      	cmp	r3, #0
 8007798:	d02d      	beq.n	80077f6 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800779a:	4b85      	ldr	r3, [pc, #532]	; (80079b0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	08db      	lsrs	r3, r3, #3
 80077a0:	f003 0303 	and.w	r3, r3, #3
 80077a4:	4a83      	ldr	r2, [pc, #524]	; (80079b4 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 80077a6:	fa22 f303 	lsr.w	r3, r2, r3
 80077aa:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80077ac:	68bb      	ldr	r3, [r7, #8]
 80077ae:	ee07 3a90 	vmov	s15, r3
 80077b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80077b6:	697b      	ldr	r3, [r7, #20]
 80077b8:	ee07 3a90 	vmov	s15, r3
 80077bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077c0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80077c4:	4b7a      	ldr	r3, [pc, #488]	; (80079b0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80077c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077cc:	ee07 3a90 	vmov	s15, r3
 80077d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80077d4:	ed97 6a03 	vldr	s12, [r7, #12]
 80077d8:	eddf 5a77 	vldr	s11, [pc, #476]	; 80079b8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80077dc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80077e0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80077e4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80077e8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80077ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80077f0:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80077f4:	e087      	b.n	8007906 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80077f6:	697b      	ldr	r3, [r7, #20]
 80077f8:	ee07 3a90 	vmov	s15, r3
 80077fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007800:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80079bc <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8007804:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007808:	4b69      	ldr	r3, [pc, #420]	; (80079b0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800780a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800780c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007810:	ee07 3a90 	vmov	s15, r3
 8007814:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007818:	ed97 6a03 	vldr	s12, [r7, #12]
 800781c:	eddf 5a66 	vldr	s11, [pc, #408]	; 80079b8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007820:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007824:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007828:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800782c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007830:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007834:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007838:	e065      	b.n	8007906 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800783a:	697b      	ldr	r3, [r7, #20]
 800783c:	ee07 3a90 	vmov	s15, r3
 8007840:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007844:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80079c0 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8007848:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800784c:	4b58      	ldr	r3, [pc, #352]	; (80079b0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800784e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007850:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007854:	ee07 3a90 	vmov	s15, r3
 8007858:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800785c:	ed97 6a03 	vldr	s12, [r7, #12]
 8007860:	eddf 5a55 	vldr	s11, [pc, #340]	; 80079b8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007864:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007868:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800786c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007870:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007874:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007878:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800787c:	e043      	b.n	8007906 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800787e:	697b      	ldr	r3, [r7, #20]
 8007880:	ee07 3a90 	vmov	s15, r3
 8007884:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007888:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80079c4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800788c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007890:	4b47      	ldr	r3, [pc, #284]	; (80079b0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007892:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007894:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007898:	ee07 3a90 	vmov	s15, r3
 800789c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80078a0:	ed97 6a03 	vldr	s12, [r7, #12]
 80078a4:	eddf 5a44 	vldr	s11, [pc, #272]	; 80079b8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80078a8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80078ac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80078b0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80078b4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80078b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80078bc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80078c0:	e021      	b.n	8007906 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80078c2:	697b      	ldr	r3, [r7, #20]
 80078c4:	ee07 3a90 	vmov	s15, r3
 80078c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078cc:	eddf 6a3b 	vldr	s13, [pc, #236]	; 80079bc <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80078d0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80078d4:	4b36      	ldr	r3, [pc, #216]	; (80079b0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80078d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078dc:	ee07 3a90 	vmov	s15, r3
 80078e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80078e4:	ed97 6a03 	vldr	s12, [r7, #12]
 80078e8:	eddf 5a33 	vldr	s11, [pc, #204]	; 80079b8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80078ec:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80078f0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80078f4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80078f8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80078fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007900:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007904:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8007906:	4b2a      	ldr	r3, [pc, #168]	; (80079b0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800790a:	0a5b      	lsrs	r3, r3, #9
 800790c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007910:	ee07 3a90 	vmov	s15, r3
 8007914:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007918:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800791c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007920:	edd7 6a07 	vldr	s13, [r7, #28]
 8007924:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007928:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800792c:	ee17 2a90 	vmov	r2, s15
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8007934:	4b1e      	ldr	r3, [pc, #120]	; (80079b0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007936:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007938:	0c1b      	lsrs	r3, r3, #16
 800793a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800793e:	ee07 3a90 	vmov	s15, r3
 8007942:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007946:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800794a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800794e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007952:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007956:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800795a:	ee17 2a90 	vmov	r2, s15
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8007962:	4b13      	ldr	r3, [pc, #76]	; (80079b0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007966:	0e1b      	lsrs	r3, r3, #24
 8007968:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800796c:	ee07 3a90 	vmov	s15, r3
 8007970:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007974:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007978:	ee37 7a87 	vadd.f32	s14, s15, s14
 800797c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007980:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007984:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007988:	ee17 2a90 	vmov	r2, s15
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8007990:	e008      	b.n	80079a4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	2200      	movs	r2, #0
 8007996:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	2200      	movs	r2, #0
 800799c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	2200      	movs	r2, #0
 80079a2:	609a      	str	r2, [r3, #8]
}
 80079a4:	bf00      	nop
 80079a6:	3724      	adds	r7, #36	; 0x24
 80079a8:	46bd      	mov	sp, r7
 80079aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ae:	4770      	bx	lr
 80079b0:	58024400 	.word	0x58024400
 80079b4:	03d09000 	.word	0x03d09000
 80079b8:	46000000 	.word	0x46000000
 80079bc:	4c742400 	.word	0x4c742400
 80079c0:	4a742400 	.word	0x4a742400
 80079c4:	4af42400 	.word	0x4af42400

080079c8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80079c8:	b580      	push	{r7, lr}
 80079ca:	b084      	sub	sp, #16
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	6078      	str	r0, [r7, #4]
 80079d0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80079d2:	2300      	movs	r3, #0
 80079d4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80079d6:	4b53      	ldr	r3, [pc, #332]	; (8007b24 <RCCEx_PLL2_Config+0x15c>)
 80079d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079da:	f003 0303 	and.w	r3, r3, #3
 80079de:	2b03      	cmp	r3, #3
 80079e0:	d101      	bne.n	80079e6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80079e2:	2301      	movs	r3, #1
 80079e4:	e099      	b.n	8007b1a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80079e6:	4b4f      	ldr	r3, [pc, #316]	; (8007b24 <RCCEx_PLL2_Config+0x15c>)
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	4a4e      	ldr	r2, [pc, #312]	; (8007b24 <RCCEx_PLL2_Config+0x15c>)
 80079ec:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80079f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80079f2:	f7f9 fd9b 	bl	800152c <HAL_GetTick>
 80079f6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80079f8:	e008      	b.n	8007a0c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80079fa:	f7f9 fd97 	bl	800152c <HAL_GetTick>
 80079fe:	4602      	mov	r2, r0
 8007a00:	68bb      	ldr	r3, [r7, #8]
 8007a02:	1ad3      	subs	r3, r2, r3
 8007a04:	2b02      	cmp	r3, #2
 8007a06:	d901      	bls.n	8007a0c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007a08:	2303      	movs	r3, #3
 8007a0a:	e086      	b.n	8007b1a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007a0c:	4b45      	ldr	r3, [pc, #276]	; (8007b24 <RCCEx_PLL2_Config+0x15c>)
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d1f0      	bne.n	80079fa <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007a18:	4b42      	ldr	r3, [pc, #264]	; (8007b24 <RCCEx_PLL2_Config+0x15c>)
 8007a1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a1c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	031b      	lsls	r3, r3, #12
 8007a26:	493f      	ldr	r1, [pc, #252]	; (8007b24 <RCCEx_PLL2_Config+0x15c>)
 8007a28:	4313      	orrs	r3, r2
 8007a2a:	628b      	str	r3, [r1, #40]	; 0x28
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	685b      	ldr	r3, [r3, #4]
 8007a30:	3b01      	subs	r3, #1
 8007a32:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	689b      	ldr	r3, [r3, #8]
 8007a3a:	3b01      	subs	r3, #1
 8007a3c:	025b      	lsls	r3, r3, #9
 8007a3e:	b29b      	uxth	r3, r3
 8007a40:	431a      	orrs	r2, r3
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	68db      	ldr	r3, [r3, #12]
 8007a46:	3b01      	subs	r3, #1
 8007a48:	041b      	lsls	r3, r3, #16
 8007a4a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007a4e:	431a      	orrs	r2, r3
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	691b      	ldr	r3, [r3, #16]
 8007a54:	3b01      	subs	r3, #1
 8007a56:	061b      	lsls	r3, r3, #24
 8007a58:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007a5c:	4931      	ldr	r1, [pc, #196]	; (8007b24 <RCCEx_PLL2_Config+0x15c>)
 8007a5e:	4313      	orrs	r3, r2
 8007a60:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007a62:	4b30      	ldr	r3, [pc, #192]	; (8007b24 <RCCEx_PLL2_Config+0x15c>)
 8007a64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a66:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	695b      	ldr	r3, [r3, #20]
 8007a6e:	492d      	ldr	r1, [pc, #180]	; (8007b24 <RCCEx_PLL2_Config+0x15c>)
 8007a70:	4313      	orrs	r3, r2
 8007a72:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007a74:	4b2b      	ldr	r3, [pc, #172]	; (8007b24 <RCCEx_PLL2_Config+0x15c>)
 8007a76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a78:	f023 0220 	bic.w	r2, r3, #32
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	699b      	ldr	r3, [r3, #24]
 8007a80:	4928      	ldr	r1, [pc, #160]	; (8007b24 <RCCEx_PLL2_Config+0x15c>)
 8007a82:	4313      	orrs	r3, r2
 8007a84:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007a86:	4b27      	ldr	r3, [pc, #156]	; (8007b24 <RCCEx_PLL2_Config+0x15c>)
 8007a88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a8a:	4a26      	ldr	r2, [pc, #152]	; (8007b24 <RCCEx_PLL2_Config+0x15c>)
 8007a8c:	f023 0310 	bic.w	r3, r3, #16
 8007a90:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007a92:	4b24      	ldr	r3, [pc, #144]	; (8007b24 <RCCEx_PLL2_Config+0x15c>)
 8007a94:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007a96:	4b24      	ldr	r3, [pc, #144]	; (8007b28 <RCCEx_PLL2_Config+0x160>)
 8007a98:	4013      	ands	r3, r2
 8007a9a:	687a      	ldr	r2, [r7, #4]
 8007a9c:	69d2      	ldr	r2, [r2, #28]
 8007a9e:	00d2      	lsls	r2, r2, #3
 8007aa0:	4920      	ldr	r1, [pc, #128]	; (8007b24 <RCCEx_PLL2_Config+0x15c>)
 8007aa2:	4313      	orrs	r3, r2
 8007aa4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007aa6:	4b1f      	ldr	r3, [pc, #124]	; (8007b24 <RCCEx_PLL2_Config+0x15c>)
 8007aa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007aaa:	4a1e      	ldr	r2, [pc, #120]	; (8007b24 <RCCEx_PLL2_Config+0x15c>)
 8007aac:	f043 0310 	orr.w	r3, r3, #16
 8007ab0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8007ab2:	683b      	ldr	r3, [r7, #0]
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d106      	bne.n	8007ac6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007ab8:	4b1a      	ldr	r3, [pc, #104]	; (8007b24 <RCCEx_PLL2_Config+0x15c>)
 8007aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007abc:	4a19      	ldr	r2, [pc, #100]	; (8007b24 <RCCEx_PLL2_Config+0x15c>)
 8007abe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007ac2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007ac4:	e00f      	b.n	8007ae6 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8007ac6:	683b      	ldr	r3, [r7, #0]
 8007ac8:	2b01      	cmp	r3, #1
 8007aca:	d106      	bne.n	8007ada <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007acc:	4b15      	ldr	r3, [pc, #84]	; (8007b24 <RCCEx_PLL2_Config+0x15c>)
 8007ace:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ad0:	4a14      	ldr	r2, [pc, #80]	; (8007b24 <RCCEx_PLL2_Config+0x15c>)
 8007ad2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007ad6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007ad8:	e005      	b.n	8007ae6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007ada:	4b12      	ldr	r3, [pc, #72]	; (8007b24 <RCCEx_PLL2_Config+0x15c>)
 8007adc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ade:	4a11      	ldr	r2, [pc, #68]	; (8007b24 <RCCEx_PLL2_Config+0x15c>)
 8007ae0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007ae4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007ae6:	4b0f      	ldr	r3, [pc, #60]	; (8007b24 <RCCEx_PLL2_Config+0x15c>)
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	4a0e      	ldr	r2, [pc, #56]	; (8007b24 <RCCEx_PLL2_Config+0x15c>)
 8007aec:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007af0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007af2:	f7f9 fd1b 	bl	800152c <HAL_GetTick>
 8007af6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007af8:	e008      	b.n	8007b0c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007afa:	f7f9 fd17 	bl	800152c <HAL_GetTick>
 8007afe:	4602      	mov	r2, r0
 8007b00:	68bb      	ldr	r3, [r7, #8]
 8007b02:	1ad3      	subs	r3, r2, r3
 8007b04:	2b02      	cmp	r3, #2
 8007b06:	d901      	bls.n	8007b0c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007b08:	2303      	movs	r3, #3
 8007b0a:	e006      	b.n	8007b1a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007b0c:	4b05      	ldr	r3, [pc, #20]	; (8007b24 <RCCEx_PLL2_Config+0x15c>)
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d0f0      	beq.n	8007afa <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007b18:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b1a:	4618      	mov	r0, r3
 8007b1c:	3710      	adds	r7, #16
 8007b1e:	46bd      	mov	sp, r7
 8007b20:	bd80      	pop	{r7, pc}
 8007b22:	bf00      	nop
 8007b24:	58024400 	.word	0x58024400
 8007b28:	ffff0007 	.word	0xffff0007

08007b2c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007b2c:	b580      	push	{r7, lr}
 8007b2e:	b084      	sub	sp, #16
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	6078      	str	r0, [r7, #4]
 8007b34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007b36:	2300      	movs	r3, #0
 8007b38:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007b3a:	4b53      	ldr	r3, [pc, #332]	; (8007c88 <RCCEx_PLL3_Config+0x15c>)
 8007b3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b3e:	f003 0303 	and.w	r3, r3, #3
 8007b42:	2b03      	cmp	r3, #3
 8007b44:	d101      	bne.n	8007b4a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007b46:	2301      	movs	r3, #1
 8007b48:	e099      	b.n	8007c7e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007b4a:	4b4f      	ldr	r3, [pc, #316]	; (8007c88 <RCCEx_PLL3_Config+0x15c>)
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	4a4e      	ldr	r2, [pc, #312]	; (8007c88 <RCCEx_PLL3_Config+0x15c>)
 8007b50:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007b54:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007b56:	f7f9 fce9 	bl	800152c <HAL_GetTick>
 8007b5a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007b5c:	e008      	b.n	8007b70 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8007b5e:	f7f9 fce5 	bl	800152c <HAL_GetTick>
 8007b62:	4602      	mov	r2, r0
 8007b64:	68bb      	ldr	r3, [r7, #8]
 8007b66:	1ad3      	subs	r3, r2, r3
 8007b68:	2b02      	cmp	r3, #2
 8007b6a:	d901      	bls.n	8007b70 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007b6c:	2303      	movs	r3, #3
 8007b6e:	e086      	b.n	8007c7e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007b70:	4b45      	ldr	r3, [pc, #276]	; (8007c88 <RCCEx_PLL3_Config+0x15c>)
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d1f0      	bne.n	8007b5e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007b7c:	4b42      	ldr	r3, [pc, #264]	; (8007c88 <RCCEx_PLL3_Config+0x15c>)
 8007b7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b80:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	051b      	lsls	r3, r3, #20
 8007b8a:	493f      	ldr	r1, [pc, #252]	; (8007c88 <RCCEx_PLL3_Config+0x15c>)
 8007b8c:	4313      	orrs	r3, r2
 8007b8e:	628b      	str	r3, [r1, #40]	; 0x28
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	685b      	ldr	r3, [r3, #4]
 8007b94:	3b01      	subs	r3, #1
 8007b96:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	689b      	ldr	r3, [r3, #8]
 8007b9e:	3b01      	subs	r3, #1
 8007ba0:	025b      	lsls	r3, r3, #9
 8007ba2:	b29b      	uxth	r3, r3
 8007ba4:	431a      	orrs	r2, r3
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	68db      	ldr	r3, [r3, #12]
 8007baa:	3b01      	subs	r3, #1
 8007bac:	041b      	lsls	r3, r3, #16
 8007bae:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007bb2:	431a      	orrs	r2, r3
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	691b      	ldr	r3, [r3, #16]
 8007bb8:	3b01      	subs	r3, #1
 8007bba:	061b      	lsls	r3, r3, #24
 8007bbc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007bc0:	4931      	ldr	r1, [pc, #196]	; (8007c88 <RCCEx_PLL3_Config+0x15c>)
 8007bc2:	4313      	orrs	r3, r2
 8007bc4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007bc6:	4b30      	ldr	r3, [pc, #192]	; (8007c88 <RCCEx_PLL3_Config+0x15c>)
 8007bc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bca:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	695b      	ldr	r3, [r3, #20]
 8007bd2:	492d      	ldr	r1, [pc, #180]	; (8007c88 <RCCEx_PLL3_Config+0x15c>)
 8007bd4:	4313      	orrs	r3, r2
 8007bd6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007bd8:	4b2b      	ldr	r3, [pc, #172]	; (8007c88 <RCCEx_PLL3_Config+0x15c>)
 8007bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bdc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	699b      	ldr	r3, [r3, #24]
 8007be4:	4928      	ldr	r1, [pc, #160]	; (8007c88 <RCCEx_PLL3_Config+0x15c>)
 8007be6:	4313      	orrs	r3, r2
 8007be8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007bea:	4b27      	ldr	r3, [pc, #156]	; (8007c88 <RCCEx_PLL3_Config+0x15c>)
 8007bec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bee:	4a26      	ldr	r2, [pc, #152]	; (8007c88 <RCCEx_PLL3_Config+0x15c>)
 8007bf0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007bf4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007bf6:	4b24      	ldr	r3, [pc, #144]	; (8007c88 <RCCEx_PLL3_Config+0x15c>)
 8007bf8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007bfa:	4b24      	ldr	r3, [pc, #144]	; (8007c8c <RCCEx_PLL3_Config+0x160>)
 8007bfc:	4013      	ands	r3, r2
 8007bfe:	687a      	ldr	r2, [r7, #4]
 8007c00:	69d2      	ldr	r2, [r2, #28]
 8007c02:	00d2      	lsls	r2, r2, #3
 8007c04:	4920      	ldr	r1, [pc, #128]	; (8007c88 <RCCEx_PLL3_Config+0x15c>)
 8007c06:	4313      	orrs	r3, r2
 8007c08:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007c0a:	4b1f      	ldr	r3, [pc, #124]	; (8007c88 <RCCEx_PLL3_Config+0x15c>)
 8007c0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c0e:	4a1e      	ldr	r2, [pc, #120]	; (8007c88 <RCCEx_PLL3_Config+0x15c>)
 8007c10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007c14:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8007c16:	683b      	ldr	r3, [r7, #0]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d106      	bne.n	8007c2a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007c1c:	4b1a      	ldr	r3, [pc, #104]	; (8007c88 <RCCEx_PLL3_Config+0x15c>)
 8007c1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c20:	4a19      	ldr	r2, [pc, #100]	; (8007c88 <RCCEx_PLL3_Config+0x15c>)
 8007c22:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007c26:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007c28:	e00f      	b.n	8007c4a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8007c2a:	683b      	ldr	r3, [r7, #0]
 8007c2c:	2b01      	cmp	r3, #1
 8007c2e:	d106      	bne.n	8007c3e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007c30:	4b15      	ldr	r3, [pc, #84]	; (8007c88 <RCCEx_PLL3_Config+0x15c>)
 8007c32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c34:	4a14      	ldr	r2, [pc, #80]	; (8007c88 <RCCEx_PLL3_Config+0x15c>)
 8007c36:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007c3a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007c3c:	e005      	b.n	8007c4a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007c3e:	4b12      	ldr	r3, [pc, #72]	; (8007c88 <RCCEx_PLL3_Config+0x15c>)
 8007c40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c42:	4a11      	ldr	r2, [pc, #68]	; (8007c88 <RCCEx_PLL3_Config+0x15c>)
 8007c44:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007c48:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007c4a:	4b0f      	ldr	r3, [pc, #60]	; (8007c88 <RCCEx_PLL3_Config+0x15c>)
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	4a0e      	ldr	r2, [pc, #56]	; (8007c88 <RCCEx_PLL3_Config+0x15c>)
 8007c50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007c54:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007c56:	f7f9 fc69 	bl	800152c <HAL_GetTick>
 8007c5a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007c5c:	e008      	b.n	8007c70 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8007c5e:	f7f9 fc65 	bl	800152c <HAL_GetTick>
 8007c62:	4602      	mov	r2, r0
 8007c64:	68bb      	ldr	r3, [r7, #8]
 8007c66:	1ad3      	subs	r3, r2, r3
 8007c68:	2b02      	cmp	r3, #2
 8007c6a:	d901      	bls.n	8007c70 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007c6c:	2303      	movs	r3, #3
 8007c6e:	e006      	b.n	8007c7e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007c70:	4b05      	ldr	r3, [pc, #20]	; (8007c88 <RCCEx_PLL3_Config+0x15c>)
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d0f0      	beq.n	8007c5e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007c7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c7e:	4618      	mov	r0, r3
 8007c80:	3710      	adds	r7, #16
 8007c82:	46bd      	mov	sp, r7
 8007c84:	bd80      	pop	{r7, pc}
 8007c86:	bf00      	nop
 8007c88:	58024400 	.word	0x58024400
 8007c8c:	ffff0007 	.word	0xffff0007

08007c90 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8007c90:	b580      	push	{r7, lr}
 8007c92:	b08a      	sub	sp, #40	; 0x28
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	6078      	str	r0, [r7, #4]
  uint32_t ckstr_bits;
  uint32_t syncen_bits;
  SAI_TypeDef *SaiBaseAddress;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d101      	bne.n	8007ca2 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 8007c9e:	2301      	movs	r3, #1
 8007ca0:	e283      	b.n	80081aa <HAL_SAI_Init+0x51a>
  assert_param(IS_SAI_BLOCK_FIRST_BIT(hsai->Init.FirstBit));
  assert_param(IS_SAI_BLOCK_CLOCK_STROBING(hsai->Init.ClockStrobing));
  assert_param(IS_SAI_BLOCK_SYNCHRO(hsai->Init.Synchro));
#if defined(SAI_VER_V2_X) 
  /* SAI Peripheral version depends on STM32H7 device revision ID */
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 8007ca2:	f7f9 fc4f 	bl	8001544 <HAL_GetREVID>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007cac:	2b01      	cmp	r3, #1
 8007cae:	d113      	bne.n	8007cd8 <HAL_SAI_Init+0x48>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 or SAI4 sub-block A, in master RX mode with free protocol */
#if defined(SAI4)
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	4a94      	ldr	r2, [pc, #592]	; (8007f08 <HAL_SAI_Init+0x278>)
 8007cb6:	4293      	cmp	r3, r2
 8007cb8:	d004      	beq.n	8007cc4 <HAL_SAI_Init+0x34>
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	4a93      	ldr	r2, [pc, #588]	; (8007f0c <HAL_SAI_Init+0x27c>)
 8007cc0:	4293      	cmp	r3, r2
 8007cc2:	d107      	bne.n	8007cd4 <HAL_SAI_Init+0x44>
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	685b      	ldr	r3, [r3, #4]
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 8007cc8:	2b01      	cmp	r3, #1
 8007cca:	d103      	bne.n	8007cd4 <HAL_SAI_Init+0x44>
         (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d001      	beq.n	8007cd8 <HAL_SAI_Init+0x48>
    {
      return HAL_ERROR;
 8007cd4:	2301      	movs	r3, #1
 8007cd6:	e268      	b.n	80081aa <HAL_SAI_Init+0x51a>
    }
#endif /* SAI4 */
  }

  /* Get the SAI base address according to the SAI handle */
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	4a8a      	ldr	r2, [pc, #552]	; (8007f08 <HAL_SAI_Init+0x278>)
 8007cde:	4293      	cmp	r3, r2
 8007ce0:	d004      	beq.n	8007cec <HAL_SAI_Init+0x5c>
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	4a8a      	ldr	r2, [pc, #552]	; (8007f10 <HAL_SAI_Init+0x280>)
 8007ce8:	4293      	cmp	r3, r2
 8007cea:	d102      	bne.n	8007cf2 <HAL_SAI_Init+0x62>
  {
    SaiBaseAddress = SAI1;
 8007cec:	4b89      	ldr	r3, [pc, #548]	; (8007f14 <HAL_SAI_Init+0x284>)
 8007cee:	61bb      	str	r3, [r7, #24]
 8007cf0:	e028      	b.n	8007d44 <HAL_SAI_Init+0xb4>
  }
#if defined(SAI2)
  else if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	4a88      	ldr	r2, [pc, #544]	; (8007f18 <HAL_SAI_Init+0x288>)
 8007cf8:	4293      	cmp	r3, r2
 8007cfa:	d004      	beq.n	8007d06 <HAL_SAI_Init+0x76>
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	4a86      	ldr	r2, [pc, #536]	; (8007f1c <HAL_SAI_Init+0x28c>)
 8007d02:	4293      	cmp	r3, r2
 8007d04:	d102      	bne.n	8007d0c <HAL_SAI_Init+0x7c>
  {
    SaiBaseAddress = SAI2;
 8007d06:	4b86      	ldr	r3, [pc, #536]	; (8007f20 <HAL_SAI_Init+0x290>)
 8007d08:	61bb      	str	r3, [r7, #24]
 8007d0a:	e01b      	b.n	8007d44 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI2 */
#if defined(SAI3)
  else if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	4a84      	ldr	r2, [pc, #528]	; (8007f24 <HAL_SAI_Init+0x294>)
 8007d12:	4293      	cmp	r3, r2
 8007d14:	d004      	beq.n	8007d20 <HAL_SAI_Init+0x90>
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	4a83      	ldr	r2, [pc, #524]	; (8007f28 <HAL_SAI_Init+0x298>)
 8007d1c:	4293      	cmp	r3, r2
 8007d1e:	d102      	bne.n	8007d26 <HAL_SAI_Init+0x96>
  {
    SaiBaseAddress = SAI3;
 8007d20:	4b82      	ldr	r3, [pc, #520]	; (8007f2c <HAL_SAI_Init+0x29c>)
 8007d22:	61bb      	str	r3, [r7, #24]
 8007d24:	e00e      	b.n	8007d44 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI3 */
#if defined(SAI4)
  else if ((hsai->Instance == SAI4_Block_A) || (hsai->Instance == SAI4_Block_B))
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	4a78      	ldr	r2, [pc, #480]	; (8007f0c <HAL_SAI_Init+0x27c>)
 8007d2c:	4293      	cmp	r3, r2
 8007d2e:	d004      	beq.n	8007d3a <HAL_SAI_Init+0xaa>
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	4a7e      	ldr	r2, [pc, #504]	; (8007f30 <HAL_SAI_Init+0x2a0>)
 8007d36:	4293      	cmp	r3, r2
 8007d38:	d102      	bne.n	8007d40 <HAL_SAI_Init+0xb0>
  {
    SaiBaseAddress = SAI4;
 8007d3a:	4b7e      	ldr	r3, [pc, #504]	; (8007f34 <HAL_SAI_Init+0x2a4>)
 8007d3c:	61bb      	str	r3, [r7, #24]
 8007d3e:	e001      	b.n	8007d44 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI4 */
  else
  {
    return HAL_ERROR;
 8007d40:	2301      	movs	r3, #1
 8007d42:	e232      	b.n	80081aa <HAL_SAI_Init+0x51a>
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 8007d4a:	b2db      	uxtb	r3, r3
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d106      	bne.n	8007d5e <HAL_SAI_Init+0xce>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	2200      	movs	r2, #0
 8007d54:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8007d58:	6878      	ldr	r0, [r7, #4]
 8007d5a:	f7f9 fa2f 	bl	80011bc <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if(SAI_Disable(hsai) != HAL_OK)
 8007d5e:	6878      	ldr	r0, [r7, #4]
 8007d60:	f000 fb0c 	bl	800837c <SAI_Disable>
 8007d64:	4603      	mov	r3, r0
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d001      	beq.n	8007d6e <HAL_SAI_Init+0xde>
  {
    return HAL_ERROR;
 8007d6a:	2301      	movs	r3, #1
 8007d6c:	e21d      	b.n	80081aa <HAL_SAI_Init+0x51a>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	2202      	movs	r2, #2
 8007d72:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	68db      	ldr	r3, [r3, #12]
 8007d7a:	2b02      	cmp	r3, #2
 8007d7c:	d00c      	beq.n	8007d98 <HAL_SAI_Init+0x108>
 8007d7e:	2b02      	cmp	r3, #2
 8007d80:	d80d      	bhi.n	8007d9e <HAL_SAI_Init+0x10e>
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d002      	beq.n	8007d8c <HAL_SAI_Init+0xfc>
 8007d86:	2b01      	cmp	r3, #1
 8007d88:	d003      	beq.n	8007d92 <HAL_SAI_Init+0x102>
 8007d8a:	e008      	b.n	8007d9e <HAL_SAI_Init+0x10e>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 8007d8c:	2300      	movs	r3, #0
 8007d8e:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8007d90:	e008      	b.n	8007da4 <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8007d92:	2310      	movs	r3, #16
 8007d94:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8007d96:	e005      	b.n	8007da4 <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8007d98:	2320      	movs	r3, #32
 8007d9a:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8007d9c:	e002      	b.n	8007da4 <HAL_SAI_Init+0x114>
    default:
      tmpregisterGCR = 0;
 8007d9e:	2300      	movs	r3, #0
 8007da0:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8007da2:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	689b      	ldr	r3, [r3, #8]
 8007da8:	2b05      	cmp	r3, #5
 8007daa:	d832      	bhi.n	8007e12 <HAL_SAI_Init+0x182>
 8007dac:	a201      	add	r2, pc, #4	; (adr r2, 8007db4 <HAL_SAI_Init+0x124>)
 8007dae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007db2:	bf00      	nop
 8007db4:	08007dcd 	.word	0x08007dcd
 8007db8:	08007dd3 	.word	0x08007dd3
 8007dbc:	08007ddb 	.word	0x08007ddb
 8007dc0:	08007de3 	.word	0x08007de3
 8007dc4:	08007df3 	.word	0x08007df3
 8007dc8:	08007e03 	.word	0x08007e03
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 8007dcc:	2300      	movs	r3, #0
 8007dce:	61fb      	str	r3, [r7, #28]
      break;
 8007dd0:	e022      	b.n	8007e18 <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8007dd2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007dd6:	61fb      	str	r3, [r7, #28]
      break;
 8007dd8:	e01e      	b.n	8007e18 <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8007dda:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007dde:	61fb      	str	r3, [r7, #28]
      break;
 8007de0:	e01a      	b.n	8007e18 <HAL_SAI_Init+0x188>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8007de2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007de6:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8007de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dea:	f043 0301 	orr.w	r3, r3, #1
 8007dee:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8007df0:	e012      	b.n	8007e18 <HAL_SAI_Init+0x188>
#endif /* SAI2 */
#if defined(SAI3)
    case SAI_SYNCHRONOUS_EXT_SAI3 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8007df2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007df6:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
 8007df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dfa:	f043 0302 	orr.w	r3, r3, #2
 8007dfe:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8007e00:	e00a      	b.n	8007e18 <HAL_SAI_Init+0x188>
#endif /* SAI3 */
#if defined(SAI4)
    case SAI_SYNCHRONOUS_EXT_SAI4 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8007e02:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007e06:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
 8007e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e0a:	f043 0303 	orr.w	r3, r3, #3
 8007e0e:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8007e10:	e002      	b.n	8007e18 <HAL_SAI_Init+0x188>
#endif /* SAI4 */
    default:
      syncen_bits = 0;
 8007e12:	2300      	movs	r3, #0
 8007e14:	61fb      	str	r3, [r7, #28]
      break;
 8007e16:	bf00      	nop
  }

  /* Set the SAI Block Synchro Configuration */
  SaiBaseAddress->GCR = tmpregisterGCR;
 8007e18:	69bb      	ldr	r3, [r7, #24]
 8007e1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e1c:	601a      	str	r2, [r3, #0]

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	6a1b      	ldr	r3, [r3, #32]
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	f000 80ba 	beq.w	8007f9c <HAL_SAI_Init+0x30c>
  {
    uint32_t freq = 0;
 8007e28:	2300      	movs	r3, #0
 8007e2a:	617b      	str	r3, [r7, #20]
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	4a35      	ldr	r2, [pc, #212]	; (8007f08 <HAL_SAI_Init+0x278>)
 8007e32:	4293      	cmp	r3, r2
 8007e34:	d004      	beq.n	8007e40 <HAL_SAI_Init+0x1b0>
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	4a35      	ldr	r2, [pc, #212]	; (8007f10 <HAL_SAI_Init+0x280>)
 8007e3c:	4293      	cmp	r3, r2
 8007e3e:	d104      	bne.n	8007e4a <HAL_SAI_Init+0x1ba>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8007e40:	f44f 7080 	mov.w	r0, #256	; 0x100
 8007e44:	f7fe fcde 	bl	8006804 <HAL_RCCEx_GetPeriphCLKFreq>
 8007e48:	6178      	str	r0, [r7, #20]
    }

#if defined(SAI2)
#if defined(RCC_PERIPHCLK_SAI2)
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	4a32      	ldr	r2, [pc, #200]	; (8007f18 <HAL_SAI_Init+0x288>)
 8007e50:	4293      	cmp	r3, r2
 8007e52:	d004      	beq.n	8007e5e <HAL_SAI_Init+0x1ce>
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	4a30      	ldr	r2, [pc, #192]	; (8007f1c <HAL_SAI_Init+0x28c>)
 8007e5a:	4293      	cmp	r3, r2
 8007e5c:	d104      	bne.n	8007e68 <HAL_SAI_Init+0x1d8>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8007e5e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8007e62:	f7fe fccf 	bl	8006804 <HAL_RCCEx_GetPeriphCLKFreq>
 8007e66:	6178      	str	r0, [r7, #20]
    }
#endif /* RCC_PERIPHCLK_SAI2 */
#endif /* SAI2 */

#if defined(SAI3)
    if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	4a2d      	ldr	r2, [pc, #180]	; (8007f24 <HAL_SAI_Init+0x294>)
 8007e6e:	4293      	cmp	r3, r2
 8007e70:	d004      	beq.n	8007e7c <HAL_SAI_Init+0x1ec>
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	4a2c      	ldr	r2, [pc, #176]	; (8007f28 <HAL_SAI_Init+0x298>)
 8007e78:	4293      	cmp	r3, r2
 8007e7a:	d104      	bne.n	8007e86 <HAL_SAI_Init+0x1f6>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
 8007e7c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8007e80:	f7fe fcc0 	bl	8006804 <HAL_RCCEx_GetPeriphCLKFreq>
 8007e84:	6178      	str	r0, [r7, #20]
    }
#endif /* SAI3 */
#if defined(SAI4)
    if (hsai->Instance == SAI4_Block_A)
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	4a20      	ldr	r2, [pc, #128]	; (8007f0c <HAL_SAI_Init+0x27c>)
 8007e8c:	4293      	cmp	r3, r2
 8007e8e:	d104      	bne.n	8007e9a <HAL_SAI_Init+0x20a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
 8007e90:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8007e94:	f7fe fcb6 	bl	8006804 <HAL_RCCEx_GetPeriphCLKFreq>
 8007e98:	6178      	str	r0, [r7, #20]
    }
    if (hsai->Instance == SAI4_Block_B)
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	4a24      	ldr	r2, [pc, #144]	; (8007f30 <HAL_SAI_Init+0x2a0>)
 8007ea0:	4293      	cmp	r3, r2
 8007ea2:	d104      	bne.n	8007eae <HAL_SAI_Init+0x21e>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
 8007ea4:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8007ea8:	f7fe fcac 	bl	8006804 <HAL_RCCEx_GetPeriphCLKFreq>
 8007eac:	6178      	str	r0, [r7, #20]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	699b      	ldr	r3, [r3, #24]
 8007eb2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007eb6:	d120      	bne.n	8007efa <HAL_SAI_Init+0x26a>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ebc:	2b04      	cmp	r3, #4
 8007ebe:	d102      	bne.n	8007ec6 <HAL_SAI_Init+0x236>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = 64U;
 8007ec0:	2340      	movs	r3, #64	; 0x40
 8007ec2:	60fb      	str	r3, [r7, #12]
 8007ec4:	e00a      	b.n	8007edc <HAL_SAI_Init+0x24c>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007eca:	2b08      	cmp	r3, #8
 8007ecc:	d103      	bne.n	8007ed6 <HAL_SAI_Init+0x246>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = 256U;
 8007ece:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007ed2:	60fb      	str	r3, [r7, #12]
 8007ed4:	e002      	b.n	8007edc <HAL_SAI_Init+0x24c>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007eda:	60fb      	str	r3, [r7, #12]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 8007edc:	697a      	ldr	r2, [r7, #20]
 8007ede:	4613      	mov	r3, r2
 8007ee0:	009b      	lsls	r3, r3, #2
 8007ee2:	4413      	add	r3, r2
 8007ee4:	005b      	lsls	r3, r3, #1
 8007ee6:	4619      	mov	r1, r3
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	6a1b      	ldr	r3, [r3, #32]
 8007eec:	68fa      	ldr	r2, [r7, #12]
 8007eee:	fb02 f303 	mul.w	r3, r2, r3
 8007ef2:	fbb1 f3f3 	udiv	r3, r1, r3
 8007ef6:	613b      	str	r3, [r7, #16]
 8007ef8:	e02f      	b.n	8007f5a <HAL_SAI_Init+0x2ca>
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007efe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007f02:	d119      	bne.n	8007f38 <HAL_SAI_Init+0x2a8>
 8007f04:	2302      	movs	r3, #2
 8007f06:	e018      	b.n	8007f3a <HAL_SAI_Init+0x2aa>
 8007f08:	40015804 	.word	0x40015804
 8007f0c:	58005404 	.word	0x58005404
 8007f10:	40015824 	.word	0x40015824
 8007f14:	40015800 	.word	0x40015800
 8007f18:	40015c04 	.word	0x40015c04
 8007f1c:	40015c24 	.word	0x40015c24
 8007f20:	40015c00 	.word	0x40015c00
 8007f24:	40016004 	.word	0x40016004
 8007f28:	40016024 	.word	0x40016024
 8007f2c:	40016000 	.word	0x40016000
 8007f30:	58005424 	.word	0x58005424
 8007f34:	58005400 	.word	0x58005400
 8007f38:	2301      	movs	r3, #1
 8007f3a:	60bb      	str	r3, [r7, #8]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 8007f3c:	697a      	ldr	r2, [r7, #20]
 8007f3e:	4613      	mov	r3, r2
 8007f40:	009b      	lsls	r3, r3, #2
 8007f42:	4413      	add	r3, r2
 8007f44:	005b      	lsls	r3, r3, #1
 8007f46:	4619      	mov	r1, r3
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	6a1b      	ldr	r3, [r3, #32]
 8007f4c:	68ba      	ldr	r2, [r7, #8]
 8007f4e:	fb02 f303 	mul.w	r3, r2, r3
 8007f52:	021b      	lsls	r3, r3, #8
 8007f54:	fbb1 f3f3 	udiv	r3, r1, r3
 8007f58:	613b      	str	r3, [r7, #16]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 8007f5a:	693b      	ldr	r3, [r7, #16]
 8007f5c:	4a95      	ldr	r2, [pc, #596]	; (80081b4 <HAL_SAI_Init+0x524>)
 8007f5e:	fba2 2303 	umull	r2, r3, r2, r3
 8007f62:	08da      	lsrs	r2, r3, #3
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	625a      	str	r2, [r3, #36]	; 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 8007f68:	6939      	ldr	r1, [r7, #16]
 8007f6a:	4b92      	ldr	r3, [pc, #584]	; (80081b4 <HAL_SAI_Init+0x524>)
 8007f6c:	fba3 2301 	umull	r2, r3, r3, r1
 8007f70:	08da      	lsrs	r2, r3, #3
 8007f72:	4613      	mov	r3, r2
 8007f74:	009b      	lsls	r3, r3, #2
 8007f76:	4413      	add	r3, r2
 8007f78:	005b      	lsls	r3, r3, #1
 8007f7a:	1aca      	subs	r2, r1, r3
 8007f7c:	2a08      	cmp	r2, #8
 8007f7e:	d904      	bls.n	8007f8a <HAL_SAI_Init+0x2fa>
    {
      hsai->Init.Mckdiv += 1U;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f84:	1c5a      	adds	r2, r3, #1
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f8e:	2b04      	cmp	r3, #4
 8007f90:	d104      	bne.n	8007f9c <HAL_SAI_Init+0x30c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f96:	085a      	lsrs	r2, r3, #1
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	685b      	ldr	r3, [r3, #4]
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d003      	beq.n	8007fac <HAL_SAI_Init+0x31c>
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	685b      	ldr	r3, [r3, #4]
 8007fa8:	2b02      	cmp	r3, #2
 8007faa:	d109      	bne.n	8007fc0 <HAL_SAI_Init+0x330>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007fb0:	2b01      	cmp	r3, #1
 8007fb2:	d101      	bne.n	8007fb8 <HAL_SAI_Init+0x328>
 8007fb4:	2300      	movs	r3, #0
 8007fb6:	e001      	b.n	8007fbc <HAL_SAI_Init+0x32c>
 8007fb8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007fbc:	623b      	str	r3, [r7, #32]
 8007fbe:	e008      	b.n	8007fd2 <HAL_SAI_Init+0x342>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007fc4:	2b01      	cmp	r3, #1
 8007fc6:	d102      	bne.n	8007fce <HAL_SAI_Init+0x33e>
 8007fc8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007fcc:	e000      	b.n	8007fd0 <HAL_SAI_Init+0x340>
 8007fce:	2300      	movs	r3, #0
 8007fd0:	623b      	str	r3, [r7, #32]

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
#if defined(SAI_VER_V2_X) /* SAI Peripheral version depends on STM32H7 device revision ID */

  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 8007fd2:	f7f9 fab7 	bl	8001544 <HAL_GetREVID>
 8007fd6:	4603      	mov	r3, r0
 8007fd8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007fdc:	d331      	bcc.n	8008042 <HAL_SAI_Init+0x3b2>
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	6819      	ldr	r1, [r3, #0]
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681a      	ldr	r2, [r3, #0]
 8007fe8:	4b73      	ldr	r3, [pc, #460]	; (80081b8 <HAL_SAI_Init+0x528>)
 8007fea:	400b      	ands	r3, r1
 8007fec:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                             SAI_xCR1_MCKEN);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	6819      	ldr	r1, [r3, #0]
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	685a      	ldr	r2, [r3, #4]
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ffc:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008002:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008008:	431a      	orrs	r2, r3
 800800a:	6a3b      	ldr	r3, [r7, #32]
 800800c:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 800800e:	69fb      	ldr	r3, [r7, #28]
 8008010:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                            ckstr_bits | syncen_bits |                             \
 8008016:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	695b      	ldr	r3, [r3, #20]
 800801c:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8008022:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008028:	051b      	lsls	r3, r3, #20
 800802a:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8008030:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	691b      	ldr	r3, [r3, #16]
 8008036:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	430a      	orrs	r2, r1
 800803e:	601a      	str	r2, [r3, #0]
 8008040:	e02d      	b.n	800809e <HAL_SAI_Init+0x40e>
  }
  else /* STM32H7xx Rev.Y */
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	6819      	ldr	r1, [r3, #0]
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681a      	ldr	r2, [r3, #0]
 800804c:	4b5b      	ldr	r3, [pc, #364]	; (80081bc <HAL_SAI_Init+0x52c>)
 800804e:	400b      	ands	r3, r1
 8008050:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	6819      	ldr	r1, [r3, #0]
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	685a      	ldr	r2, [r3, #4]
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008060:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008066:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800806c:	431a      	orrs	r2, r3
 800806e:	6a3b      	ldr	r3, [r7, #32]
 8008070:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 8008072:	69fb      	ldr	r3, [r7, #28]
 8008074:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                            ckstr_bits | syncen_bits |                             \
 800807a:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	695b      	ldr	r3, [r3, #20]
 8008080:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8008086:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800808c:	051b      	lsls	r3, r3, #20
 800808e:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling);
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8008094:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	430a      	orrs	r2, r1
 800809c:	601a      	str	r2, [r3, #0]
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
#endif /* SAI_VER_V2_X */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	6859      	ldr	r1, [r3, #4]
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681a      	ldr	r2, [r3, #0]
 80080a8:	4b45      	ldr	r3, [pc, #276]	; (80081c0 <HAL_SAI_Init+0x530>)
 80080aa:	400b      	ands	r3, r1
 80080ac:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	6859      	ldr	r1, [r3, #4]
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	69da      	ldr	r2, [r3, #28]
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080bc:	431a      	orrs	r2, r3
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080c2:	431a      	orrs	r2, r3
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	430a      	orrs	r2, r1
 80080ca:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	6899      	ldr	r1, [r3, #8]
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681a      	ldr	r2, [r3, #0]
 80080d6:	4b3b      	ldr	r3, [pc, #236]	; (80081c4 <HAL_SAI_Init+0x534>)
 80080d8:	400b      	ands	r3, r1
 80080da:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	6899      	ldr	r1, [r3, #8]
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080e6:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80080ec:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                           hsai->FrameInit.FSOffset |
 80080f2:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                           hsai->FrameInit.FSDefinition |
 80080f8:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80080fe:	3b01      	subs	r3, #1
 8008100:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8008102:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	430a      	orrs	r2, r1
 800810a:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	68d9      	ldr	r1, [r3, #12]
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681a      	ldr	r2, [r3, #0]
 8008116:	f24f 0320 	movw	r3, #61472	; 0xf020
 800811a:	400b      	ands	r3, r1
 800811c:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	68d9      	ldr	r1, [r3, #12]
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800812c:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008132:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8008134:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800813a:	3b01      	subs	r3, #1
 800813c:	021b      	lsls	r3, r3, #8
 800813e:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	430a      	orrs	r2, r1
 8008146:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
#if defined(SAI4)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	4a1e      	ldr	r2, [pc, #120]	; (80081c8 <HAL_SAI_Init+0x538>)
 800814e:	4293      	cmp	r3, r2
 8008150:	d004      	beq.n	800815c <HAL_SAI_Init+0x4cc>
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	4a1d      	ldr	r2, [pc, #116]	; (80081cc <HAL_SAI_Init+0x53c>)
 8008158:	4293      	cmp	r3, r2
 800815a:	d119      	bne.n	8008190 <HAL_SAI_Init+0x500>
#else
  if (hsai->Instance == SAI1_Block_A)
#endif /* SAI4 */
  {
    /* Disable PDM interface */
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 800815c:	69bb      	ldr	r3, [r7, #24]
 800815e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008160:	f023 0201 	bic.w	r2, r3, #1
 8008164:	69bb      	ldr	r3, [r7, #24]
 8008166:	645a      	str	r2, [r3, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800816e:	2b01      	cmp	r3, #1
 8008170:	d10e      	bne.n	8008190 <HAL_SAI_Init+0x500>
    {
      /* Configure and enable PDM interface */
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800817a:	3b01      	subs	r3, #1
 800817c:	011b      	lsls	r3, r3, #4
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800817e:	431a      	orrs	r2, r3
 8008180:	69bb      	ldr	r3, [r7, #24]
 8008182:	645a      	str	r2, [r3, #68]	; 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
 8008184:	69bb      	ldr	r3, [r7, #24]
 8008186:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008188:	f043 0201 	orr.w	r2, r3, #1
 800818c:	69bb      	ldr	r3, [r7, #24]
 800818e:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	2200      	movs	r2, #0
 8008194:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	2201      	movs	r2, #1
 800819c:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	2200      	movs	r2, #0
 80081a4:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

  return HAL_OK;
 80081a8:	2300      	movs	r3, #0
}
 80081aa:	4618      	mov	r0, r3
 80081ac:	3728      	adds	r7, #40	; 0x28
 80081ae:	46bd      	mov	sp, r7
 80081b0:	bd80      	pop	{r7, pc}
 80081b2:	bf00      	nop
 80081b4:	cccccccd 	.word	0xcccccccd
 80081b8:	f005c010 	.word	0xf005c010
 80081bc:	f805c010 	.word	0xf805c010
 80081c0:	ffff1ff0 	.word	0xffff1ff0
 80081c4:	fff88000 	.word	0xfff88000
 80081c8:	40015804 	.word	0x40015804
 80081cc:	58005404 	.word	0x58005404

080081d0 <HAL_SAI_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Receive_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 80081d0:	b580      	push	{r7, lr}
 80081d2:	b084      	sub	sp, #16
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	60f8      	str	r0, [r7, #12]
 80081d8:	60b9      	str	r1, [r7, #8]
 80081da:	4613      	mov	r3, r2
 80081dc:	80fb      	strh	r3, [r7, #6]

  if ((pData == NULL) || (Size == 0U))
 80081de:	68bb      	ldr	r3, [r7, #8]
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d002      	beq.n	80081ea <HAL_SAI_Receive_DMA+0x1a>
 80081e4:	88fb      	ldrh	r3, [r7, #6]
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d101      	bne.n	80081ee <HAL_SAI_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 80081ea:	2301      	movs	r3, #1
 80081ec:	e079      	b.n	80082e2 <HAL_SAI_Receive_DMA+0x112>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 80081f4:	b2db      	uxtb	r3, r3
 80081f6:	2b01      	cmp	r3, #1
 80081f8:	d172      	bne.n	80082e0 <HAL_SAI_Receive_DMA+0x110>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8008200:	2b01      	cmp	r3, #1
 8008202:	d101      	bne.n	8008208 <HAL_SAI_Receive_DMA+0x38>
 8008204:	2302      	movs	r3, #2
 8008206:	e06c      	b.n	80082e2 <HAL_SAI_Receive_DMA+0x112>
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	2201      	movs	r2, #1
 800820c:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    hsai->pBuffPtr = pData;
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	68ba      	ldr	r2, [r7, #8]
 8008214:	679a      	str	r2, [r3, #120]	; 0x78
    hsai->XferSize = Size;
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	88fa      	ldrh	r2, [r7, #6]
 800821a:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
    hsai->XferCount = Size;
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	88fa      	ldrh	r2, [r7, #6]
 8008222:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	2200      	movs	r2, #0
 800822a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	2222      	movs	r2, #34	; 0x22
 8008232:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

    /* Set the SAI Rx DMA Half transfer complete callback */
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800823c:	4a2b      	ldr	r2, [pc, #172]	; (80082ec <HAL_SAI_Receive_DMA+0x11c>)
 800823e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the SAI Rx DMA transfer complete callback */
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008246:	4a2a      	ldr	r2, [pc, #168]	; (80082f0 <HAL_SAI_Receive_DMA+0x120>)
 8008248:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008250:	4a28      	ldr	r2, [pc, #160]	; (80082f4 <HAL_SAI_Receive_DMA+0x124>)
 8008252:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Rx abort callback */
    hsai->hdmarx->XferAbortCallback = NULL;
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800825a:	2200      	movs	r2, #0
 800825c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the Rx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	331c      	adds	r3, #28
 800826a:	4619      	mov	r1, r3
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008270:	461a      	mov	r2, r3
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 8008278:	f7f9 fec6 	bl	8002008 <HAL_DMA_Start_IT>
 800827c:	4603      	mov	r3, r0
 800827e:	2b00      	cmp	r3, #0
 8008280:	d005      	beq.n	800828e <HAL_SAI_Receive_DMA+0xbe>
    {
      __HAL_UNLOCK(hsai);
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	2200      	movs	r2, #0
 8008286:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      return  HAL_ERROR;
 800828a:	2301      	movs	r3, #1
 800828c:	e029      	b.n	80082e2 <HAL_SAI_Receive_DMA+0x112>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800828e:	2100      	movs	r1, #0
 8008290:	68f8      	ldr	r0, [r7, #12]
 8008292:	f000 f83b 	bl	800830c <SAI_InterruptFlag>
 8008296:	4601      	mov	r1, r0
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	691a      	ldr	r2, [r3, #16]
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	430a      	orrs	r2, r1
 80082a4:	611a      	str	r2, [r3, #16]

    /* Enable SAI Rx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	681a      	ldr	r2, [r3, #0]
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80082b4:	601a      	str	r2, [r3, #0]

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d107      	bne.n	80082d4 <HAL_SAI_Receive_DMA+0x104>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	681a      	ldr	r2, [r3, #0]
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80082d2:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	2200      	movs	r2, #0
 80082d8:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    return HAL_OK;
 80082dc:	2300      	movs	r3, #0
 80082de:	e000      	b.n	80082e2 <HAL_SAI_Receive_DMA+0x112>
  }
  else
  {
    return HAL_BUSY;
 80082e0:	2302      	movs	r3, #2
  }
}
 80082e2:	4618      	mov	r0, r3
 80082e4:	3710      	adds	r7, #16
 80082e6:	46bd      	mov	sp, r7
 80082e8:	bd80      	pop	{r7, pc}
 80082ea:	bf00      	nop
 80082ec:	08008451 	.word	0x08008451
 80082f0:	080083f1 	.word	0x080083f1
 80082f4:	0800846d 	.word	0x0800846d

080082f8 <HAL_SAI_ErrorCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 80082f8:	b480      	push	{r7}
 80082fa:	b083      	sub	sp, #12
 80082fc:	af00      	add	r7, sp, #0
 80082fe:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_ErrorCallback could be implemented in the user file
   */
}
 8008300:	bf00      	nop
 8008302:	370c      	adds	r7, #12
 8008304:	46bd      	mov	sp, r7
 8008306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800830a:	4770      	bx	lr

0800830c <SAI_InterruptFlag>:
  *              the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
  */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, SAI_ModeTypedef mode)
{
 800830c:	b480      	push	{r7}
 800830e:	b085      	sub	sp, #20
 8008310:	af00      	add	r7, sp, #0
 8008312:	6078      	str	r0, [r7, #4]
 8008314:	460b      	mov	r3, r1
 8008316:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 8008318:	2301      	movs	r3, #1
 800831a:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 800831c:	78fb      	ldrb	r3, [r7, #3]
 800831e:	2b01      	cmp	r3, #1
 8008320:	d103      	bne.n	800832a <SAI_InterruptFlag+0x1e>
  {
    tmpIT |= SAI_IT_FREQ;
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	f043 0308 	orr.w	r3, r3, #8
 8008328:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800832e:	2b08      	cmp	r3, #8
 8008330:	d10b      	bne.n	800834a <SAI_InterruptFlag+0x3e>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8008336:	2b03      	cmp	r3, #3
 8008338:	d003      	beq.n	8008342 <SAI_InterruptFlag+0x36>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	685b      	ldr	r3, [r3, #4]
 800833e:	2b01      	cmp	r3, #1
 8008340:	d103      	bne.n	800834a <SAI_InterruptFlag+0x3e>
  {
    tmpIT |= SAI_IT_CNRDY;
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	f043 0310 	orr.w	r3, r3, #16
 8008348:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	685b      	ldr	r3, [r3, #4]
 800834e:	2b03      	cmp	r3, #3
 8008350:	d003      	beq.n	800835a <SAI_InterruptFlag+0x4e>
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	685b      	ldr	r3, [r3, #4]
 8008356:	2b02      	cmp	r3, #2
 8008358:	d104      	bne.n	8008364 <SAI_InterruptFlag+0x58>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8008360:	60fb      	str	r3, [r7, #12]
 8008362:	e003      	b.n	800836c <SAI_InterruptFlag+0x60>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	f043 0304 	orr.w	r3, r3, #4
 800836a:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 800836c:	68fb      	ldr	r3, [r7, #12]
}
 800836e:	4618      	mov	r0, r3
 8008370:	3714      	adds	r7, #20
 8008372:	46bd      	mov	sp, r7
 8008374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008378:	4770      	bx	lr
	...

0800837c <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800837c:	b480      	push	{r7}
 800837e:	b085      	sub	sp, #20
 8008380:	af00      	add	r7, sp, #0
 8008382:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8008384:	4b18      	ldr	r3, [pc, #96]	; (80083e8 <SAI_Disable+0x6c>)
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	4a18      	ldr	r2, [pc, #96]	; (80083ec <SAI_Disable+0x70>)
 800838a:	fba2 2303 	umull	r2, r3, r2, r3
 800838e:	0b1b      	lsrs	r3, r3, #12
 8008390:	009b      	lsls	r3, r3, #2
 8008392:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8008394:	2300      	movs	r3, #0
 8008396:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	681a      	ldr	r2, [r3, #0]
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80083a6:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d10a      	bne.n	80083c4 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80083b4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      status = HAL_TIMEOUT;
 80083be:	2303      	movs	r3, #3
 80083c0:	72fb      	strb	r3, [r7, #11]
      break;
 80083c2:	e009      	b.n	80083d8 <SAI_Disable+0x5c>
    }
    count--;
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	3b01      	subs	r3, #1
 80083c8:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d1e7      	bne.n	80083a8 <SAI_Disable+0x2c>

  return status;
 80083d8:	7afb      	ldrb	r3, [r7, #11]
}
 80083da:	4618      	mov	r0, r3
 80083dc:	3714      	adds	r7, #20
 80083de:	46bd      	mov	sp, r7
 80083e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e4:	4770      	bx	lr
 80083e6:	bf00      	nop
 80083e8:	24000400 	.word	0x24000400
 80083ec:	95cbec1b 	.word	0x95cbec1b

080083f0 <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 80083f0:	b580      	push	{r7, lr}
 80083f2:	b084      	sub	sp, #16
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083fc:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	69db      	ldr	r3, [r3, #28]
 8008402:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008406:	d01c      	beq.n	8008442 <SAI_DMARxCplt+0x52>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	681a      	ldr	r2, [r3, #0]
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8008416:	601a      	str	r2, [r3, #0]
    hsai->XferCount = 0;
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	2200      	movs	r2, #0
 800841c:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8008420:	2100      	movs	r1, #0
 8008422:	68f8      	ldr	r0, [r7, #12]
 8008424:	f7ff ff72 	bl	800830c <SAI_InterruptFlag>
 8008428:	4603      	mov	r3, r0
 800842a:	43d9      	mvns	r1, r3
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	691a      	ldr	r2, [r3, #16]
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	400a      	ands	r2, r1
 8008438:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	2201      	movs	r2, #1
 800843e:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 8008442:	68f8      	ldr	r0, [r7, #12]
 8008444:	f7f8 fd78 	bl	8000f38 <HAL_SAI_RxCpltCallback>
#endif
}
 8008448:	bf00      	nop
 800844a:	3710      	adds	r7, #16
 800844c:	46bd      	mov	sp, r7
 800844e:	bd80      	pop	{r7, pc}

08008450 <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008450:	b580      	push	{r7, lr}
 8008452:	b084      	sub	sp, #16
 8008454:	af00      	add	r7, sp, #0
 8008456:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800845c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 800845e:	68f8      	ldr	r0, [r7, #12]
 8008460:	f7f8 fd5a 	bl	8000f18 <HAL_SAI_RxHalfCpltCallback>
#endif
}
 8008464:	bf00      	nop
 8008466:	3710      	adds	r7, #16
 8008468:	46bd      	mov	sp, r7
 800846a:	bd80      	pop	{r7, pc}

0800846c <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 800846c:	b580      	push	{r7, lr}
 800846e:	b084      	sub	sp, #16
 8008470:	af00      	add	r7, sp, #0
 8008472:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008478:	60fb      	str	r3, [r7, #12]

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800847a:	6878      	ldr	r0, [r7, #4]
 800847c:	f7fb fcba 	bl	8003df4 <HAL_DMA_GetError>
 8008480:	4603      	mov	r3, r0
 8008482:	2b02      	cmp	r3, #2
 8008484:	d01d      	beq.n	80084c2 <SAI_DMAError+0x56>
  {
    /* Set SAI error code */
    hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800848c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	681a      	ldr	r2, [r3, #0]
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80084a4:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral */
    /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
    (void) SAI_Disable(hsai);
 80084a6:	68f8      	ldr	r0, [r7, #12]
 80084a8:	f7ff ff68 	bl	800837c <SAI_Disable>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	2201      	movs	r2, #1
 80084b0:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	2200      	movs	r2, #0
 80084b8:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

    /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
    hsai->ErrorCallback(hsai);
#else
    HAL_SAI_ErrorCallback(hsai);
 80084bc:	68f8      	ldr	r0, [r7, #12]
 80084be:	f7ff ff1b 	bl	80082f8 <HAL_SAI_ErrorCallback>
#endif
  }
}
 80084c2:	bf00      	nop
 80084c4:	3710      	adds	r7, #16
 80084c6:	46bd      	mov	sp, r7
 80084c8:	bd80      	pop	{r7, pc}

080084ca <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80084ca:	b580      	push	{r7, lr}
 80084cc:	b082      	sub	sp, #8
 80084ce:	af00      	add	r7, sp, #0
 80084d0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d101      	bne.n	80084dc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80084d8:	2301      	movs	r3, #1
 80084da:	e049      	b.n	8008570 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80084e2:	b2db      	uxtb	r3, r3
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d106      	bne.n	80084f6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	2200      	movs	r2, #0
 80084ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80084f0:	6878      	ldr	r0, [r7, #4]
 80084f2:	f7f8 fd89 	bl	8001008 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	2202      	movs	r2, #2
 80084fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	681a      	ldr	r2, [r3, #0]
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	3304      	adds	r3, #4
 8008506:	4619      	mov	r1, r3
 8008508:	4610      	mov	r0, r2
 800850a:	f000 fb0f 	bl	8008b2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	2201      	movs	r2, #1
 8008512:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	2201      	movs	r2, #1
 800851a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	2201      	movs	r2, #1
 8008522:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	2201      	movs	r2, #1
 800852a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	2201      	movs	r2, #1
 8008532:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	2201      	movs	r2, #1
 800853a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	2201      	movs	r2, #1
 8008542:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	2201      	movs	r2, #1
 800854a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	2201      	movs	r2, #1
 8008552:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	2201      	movs	r2, #1
 800855a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	2201      	movs	r2, #1
 8008562:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	2201      	movs	r2, #1
 800856a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800856e:	2300      	movs	r3, #0
}
 8008570:	4618      	mov	r0, r3
 8008572:	3708      	adds	r7, #8
 8008574:	46bd      	mov	sp, r7
 8008576:	bd80      	pop	{r7, pc}

08008578 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008578:	b480      	push	{r7}
 800857a:	b085      	sub	sp, #20
 800857c:	af00      	add	r7, sp, #0
 800857e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008586:	b2db      	uxtb	r3, r3
 8008588:	2b01      	cmp	r3, #1
 800858a:	d001      	beq.n	8008590 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800858c:	2301      	movs	r3, #1
 800858e:	e04f      	b.n	8008630 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	2202      	movs	r2, #2
 8008594:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	68da      	ldr	r2, [r3, #12]
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	f042 0201 	orr.w	r2, r2, #1
 80085a6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	4a23      	ldr	r2, [pc, #140]	; (800863c <HAL_TIM_Base_Start_IT+0xc4>)
 80085ae:	4293      	cmp	r3, r2
 80085b0:	d01d      	beq.n	80085ee <HAL_TIM_Base_Start_IT+0x76>
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80085ba:	d018      	beq.n	80085ee <HAL_TIM_Base_Start_IT+0x76>
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	4a1f      	ldr	r2, [pc, #124]	; (8008640 <HAL_TIM_Base_Start_IT+0xc8>)
 80085c2:	4293      	cmp	r3, r2
 80085c4:	d013      	beq.n	80085ee <HAL_TIM_Base_Start_IT+0x76>
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	4a1e      	ldr	r2, [pc, #120]	; (8008644 <HAL_TIM_Base_Start_IT+0xcc>)
 80085cc:	4293      	cmp	r3, r2
 80085ce:	d00e      	beq.n	80085ee <HAL_TIM_Base_Start_IT+0x76>
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	4a1c      	ldr	r2, [pc, #112]	; (8008648 <HAL_TIM_Base_Start_IT+0xd0>)
 80085d6:	4293      	cmp	r3, r2
 80085d8:	d009      	beq.n	80085ee <HAL_TIM_Base_Start_IT+0x76>
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	4a1b      	ldr	r2, [pc, #108]	; (800864c <HAL_TIM_Base_Start_IT+0xd4>)
 80085e0:	4293      	cmp	r3, r2
 80085e2:	d004      	beq.n	80085ee <HAL_TIM_Base_Start_IT+0x76>
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	4a19      	ldr	r2, [pc, #100]	; (8008650 <HAL_TIM_Base_Start_IT+0xd8>)
 80085ea:	4293      	cmp	r3, r2
 80085ec:	d115      	bne.n	800861a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	689a      	ldr	r2, [r3, #8]
 80085f4:	4b17      	ldr	r3, [pc, #92]	; (8008654 <HAL_TIM_Base_Start_IT+0xdc>)
 80085f6:	4013      	ands	r3, r2
 80085f8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	2b06      	cmp	r3, #6
 80085fe:	d015      	beq.n	800862c <HAL_TIM_Base_Start_IT+0xb4>
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008606:	d011      	beq.n	800862c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	681a      	ldr	r2, [r3, #0]
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	f042 0201 	orr.w	r2, r2, #1
 8008616:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008618:	e008      	b.n	800862c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	681a      	ldr	r2, [r3, #0]
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	f042 0201 	orr.w	r2, r2, #1
 8008628:	601a      	str	r2, [r3, #0]
 800862a:	e000      	b.n	800862e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800862c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800862e:	2300      	movs	r3, #0
}
 8008630:	4618      	mov	r0, r3
 8008632:	3714      	adds	r7, #20
 8008634:	46bd      	mov	sp, r7
 8008636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800863a:	4770      	bx	lr
 800863c:	40010000 	.word	0x40010000
 8008640:	40000400 	.word	0x40000400
 8008644:	40000800 	.word	0x40000800
 8008648:	40000c00 	.word	0x40000c00
 800864c:	40010400 	.word	0x40010400
 8008650:	40001800 	.word	0x40001800
 8008654:	00010007 	.word	0x00010007

08008658 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8008658:	b480      	push	{r7}
 800865a:	b083      	sub	sp, #12
 800865c:	af00      	add	r7, sp, #0
 800865e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	68da      	ldr	r2, [r3, #12]
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	f022 0201 	bic.w	r2, r2, #1
 800866e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	6a1a      	ldr	r2, [r3, #32]
 8008676:	f241 1311 	movw	r3, #4369	; 0x1111
 800867a:	4013      	ands	r3, r2
 800867c:	2b00      	cmp	r3, #0
 800867e:	d10f      	bne.n	80086a0 <HAL_TIM_Base_Stop_IT+0x48>
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	6a1a      	ldr	r2, [r3, #32]
 8008686:	f240 4344 	movw	r3, #1092	; 0x444
 800868a:	4013      	ands	r3, r2
 800868c:	2b00      	cmp	r3, #0
 800868e:	d107      	bne.n	80086a0 <HAL_TIM_Base_Stop_IT+0x48>
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	681a      	ldr	r2, [r3, #0]
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	f022 0201 	bic.w	r2, r2, #1
 800869e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	2201      	movs	r2, #1
 80086a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80086a8:	2300      	movs	r3, #0
}
 80086aa:	4618      	mov	r0, r3
 80086ac:	370c      	adds	r7, #12
 80086ae:	46bd      	mov	sp, r7
 80086b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b4:	4770      	bx	lr

080086b6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80086b6:	b580      	push	{r7, lr}
 80086b8:	b082      	sub	sp, #8
 80086ba:	af00      	add	r7, sp, #0
 80086bc:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	691b      	ldr	r3, [r3, #16]
 80086c4:	f003 0302 	and.w	r3, r3, #2
 80086c8:	2b02      	cmp	r3, #2
 80086ca:	d122      	bne.n	8008712 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	68db      	ldr	r3, [r3, #12]
 80086d2:	f003 0302 	and.w	r3, r3, #2
 80086d6:	2b02      	cmp	r3, #2
 80086d8:	d11b      	bne.n	8008712 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	f06f 0202 	mvn.w	r2, #2
 80086e2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	2201      	movs	r2, #1
 80086e8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	699b      	ldr	r3, [r3, #24]
 80086f0:	f003 0303 	and.w	r3, r3, #3
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d003      	beq.n	8008700 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80086f8:	6878      	ldr	r0, [r7, #4]
 80086fa:	f000 f9f9 	bl	8008af0 <HAL_TIM_IC_CaptureCallback>
 80086fe:	e005      	b.n	800870c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008700:	6878      	ldr	r0, [r7, #4]
 8008702:	f000 f9eb 	bl	8008adc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008706:	6878      	ldr	r0, [r7, #4]
 8008708:	f000 f9fc 	bl	8008b04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	2200      	movs	r2, #0
 8008710:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	691b      	ldr	r3, [r3, #16]
 8008718:	f003 0304 	and.w	r3, r3, #4
 800871c:	2b04      	cmp	r3, #4
 800871e:	d122      	bne.n	8008766 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	68db      	ldr	r3, [r3, #12]
 8008726:	f003 0304 	and.w	r3, r3, #4
 800872a:	2b04      	cmp	r3, #4
 800872c:	d11b      	bne.n	8008766 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	f06f 0204 	mvn.w	r2, #4
 8008736:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	2202      	movs	r2, #2
 800873c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	699b      	ldr	r3, [r3, #24]
 8008744:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008748:	2b00      	cmp	r3, #0
 800874a:	d003      	beq.n	8008754 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800874c:	6878      	ldr	r0, [r7, #4]
 800874e:	f000 f9cf 	bl	8008af0 <HAL_TIM_IC_CaptureCallback>
 8008752:	e005      	b.n	8008760 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008754:	6878      	ldr	r0, [r7, #4]
 8008756:	f000 f9c1 	bl	8008adc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800875a:	6878      	ldr	r0, [r7, #4]
 800875c:	f000 f9d2 	bl	8008b04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	2200      	movs	r2, #0
 8008764:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	691b      	ldr	r3, [r3, #16]
 800876c:	f003 0308 	and.w	r3, r3, #8
 8008770:	2b08      	cmp	r3, #8
 8008772:	d122      	bne.n	80087ba <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	68db      	ldr	r3, [r3, #12]
 800877a:	f003 0308 	and.w	r3, r3, #8
 800877e:	2b08      	cmp	r3, #8
 8008780:	d11b      	bne.n	80087ba <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	f06f 0208 	mvn.w	r2, #8
 800878a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	2204      	movs	r2, #4
 8008790:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	69db      	ldr	r3, [r3, #28]
 8008798:	f003 0303 	and.w	r3, r3, #3
 800879c:	2b00      	cmp	r3, #0
 800879e:	d003      	beq.n	80087a8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80087a0:	6878      	ldr	r0, [r7, #4]
 80087a2:	f000 f9a5 	bl	8008af0 <HAL_TIM_IC_CaptureCallback>
 80087a6:	e005      	b.n	80087b4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80087a8:	6878      	ldr	r0, [r7, #4]
 80087aa:	f000 f997 	bl	8008adc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80087ae:	6878      	ldr	r0, [r7, #4]
 80087b0:	f000 f9a8 	bl	8008b04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	2200      	movs	r2, #0
 80087b8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	691b      	ldr	r3, [r3, #16]
 80087c0:	f003 0310 	and.w	r3, r3, #16
 80087c4:	2b10      	cmp	r3, #16
 80087c6:	d122      	bne.n	800880e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	68db      	ldr	r3, [r3, #12]
 80087ce:	f003 0310 	and.w	r3, r3, #16
 80087d2:	2b10      	cmp	r3, #16
 80087d4:	d11b      	bne.n	800880e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	f06f 0210 	mvn.w	r2, #16
 80087de:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	2208      	movs	r2, #8
 80087e4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	69db      	ldr	r3, [r3, #28]
 80087ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d003      	beq.n	80087fc <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80087f4:	6878      	ldr	r0, [r7, #4]
 80087f6:	f000 f97b 	bl	8008af0 <HAL_TIM_IC_CaptureCallback>
 80087fa:	e005      	b.n	8008808 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80087fc:	6878      	ldr	r0, [r7, #4]
 80087fe:	f000 f96d 	bl	8008adc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008802:	6878      	ldr	r0, [r7, #4]
 8008804:	f000 f97e 	bl	8008b04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	2200      	movs	r2, #0
 800880c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	691b      	ldr	r3, [r3, #16]
 8008814:	f003 0301 	and.w	r3, r3, #1
 8008818:	2b01      	cmp	r3, #1
 800881a:	d10e      	bne.n	800883a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	68db      	ldr	r3, [r3, #12]
 8008822:	f003 0301 	and.w	r3, r3, #1
 8008826:	2b01      	cmp	r3, #1
 8008828:	d107      	bne.n	800883a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	f06f 0201 	mvn.w	r2, #1
 8008832:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008834:	6878      	ldr	r0, [r7, #4]
 8008836:	f7f8 fb8f 	bl	8000f58 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	691b      	ldr	r3, [r3, #16]
 8008840:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008844:	2b80      	cmp	r3, #128	; 0x80
 8008846:	d10e      	bne.n	8008866 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	68db      	ldr	r3, [r3, #12]
 800884e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008852:	2b80      	cmp	r3, #128	; 0x80
 8008854:	d107      	bne.n	8008866 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800885e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008860:	6878      	ldr	r0, [r7, #4]
 8008862:	f000 fb2d 	bl	8008ec0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	691b      	ldr	r3, [r3, #16]
 800886c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008870:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008874:	d10e      	bne.n	8008894 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	68db      	ldr	r3, [r3, #12]
 800887c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008880:	2b80      	cmp	r3, #128	; 0x80
 8008882:	d107      	bne.n	8008894 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800888c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800888e:	6878      	ldr	r0, [r7, #4]
 8008890:	f000 fb20 	bl	8008ed4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	691b      	ldr	r3, [r3, #16]
 800889a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800889e:	2b40      	cmp	r3, #64	; 0x40
 80088a0:	d10e      	bne.n	80088c0 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	68db      	ldr	r3, [r3, #12]
 80088a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088ac:	2b40      	cmp	r3, #64	; 0x40
 80088ae:	d107      	bne.n	80088c0 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80088b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80088ba:	6878      	ldr	r0, [r7, #4]
 80088bc:	f000 f92c 	bl	8008b18 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	691b      	ldr	r3, [r3, #16]
 80088c6:	f003 0320 	and.w	r3, r3, #32
 80088ca:	2b20      	cmp	r3, #32
 80088cc:	d10e      	bne.n	80088ec <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	68db      	ldr	r3, [r3, #12]
 80088d4:	f003 0320 	and.w	r3, r3, #32
 80088d8:	2b20      	cmp	r3, #32
 80088da:	d107      	bne.n	80088ec <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	f06f 0220 	mvn.w	r2, #32
 80088e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80088e6:	6878      	ldr	r0, [r7, #4]
 80088e8:	f000 fae0 	bl	8008eac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80088ec:	bf00      	nop
 80088ee:	3708      	adds	r7, #8
 80088f0:	46bd      	mov	sp, r7
 80088f2:	bd80      	pop	{r7, pc}

080088f4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80088f4:	b580      	push	{r7, lr}
 80088f6:	b084      	sub	sp, #16
 80088f8:	af00      	add	r7, sp, #0
 80088fa:	6078      	str	r0, [r7, #4]
 80088fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008904:	2b01      	cmp	r3, #1
 8008906:	d101      	bne.n	800890c <HAL_TIM_ConfigClockSource+0x18>
 8008908:	2302      	movs	r3, #2
 800890a:	e0db      	b.n	8008ac4 <HAL_TIM_ConfigClockSource+0x1d0>
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	2201      	movs	r2, #1
 8008910:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	2202      	movs	r2, #2
 8008918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	689b      	ldr	r3, [r3, #8]
 8008922:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008924:	68fa      	ldr	r2, [r7, #12]
 8008926:	4b69      	ldr	r3, [pc, #420]	; (8008acc <HAL_TIM_ConfigClockSource+0x1d8>)
 8008928:	4013      	ands	r3, r2
 800892a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008932:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	68fa      	ldr	r2, [r7, #12]
 800893a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800893c:	683b      	ldr	r3, [r7, #0]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	4a63      	ldr	r2, [pc, #396]	; (8008ad0 <HAL_TIM_ConfigClockSource+0x1dc>)
 8008942:	4293      	cmp	r3, r2
 8008944:	f000 80a9 	beq.w	8008a9a <HAL_TIM_ConfigClockSource+0x1a6>
 8008948:	4a61      	ldr	r2, [pc, #388]	; (8008ad0 <HAL_TIM_ConfigClockSource+0x1dc>)
 800894a:	4293      	cmp	r3, r2
 800894c:	f200 80ae 	bhi.w	8008aac <HAL_TIM_ConfigClockSource+0x1b8>
 8008950:	4a60      	ldr	r2, [pc, #384]	; (8008ad4 <HAL_TIM_ConfigClockSource+0x1e0>)
 8008952:	4293      	cmp	r3, r2
 8008954:	f000 80a1 	beq.w	8008a9a <HAL_TIM_ConfigClockSource+0x1a6>
 8008958:	4a5e      	ldr	r2, [pc, #376]	; (8008ad4 <HAL_TIM_ConfigClockSource+0x1e0>)
 800895a:	4293      	cmp	r3, r2
 800895c:	f200 80a6 	bhi.w	8008aac <HAL_TIM_ConfigClockSource+0x1b8>
 8008960:	4a5d      	ldr	r2, [pc, #372]	; (8008ad8 <HAL_TIM_ConfigClockSource+0x1e4>)
 8008962:	4293      	cmp	r3, r2
 8008964:	f000 8099 	beq.w	8008a9a <HAL_TIM_ConfigClockSource+0x1a6>
 8008968:	4a5b      	ldr	r2, [pc, #364]	; (8008ad8 <HAL_TIM_ConfigClockSource+0x1e4>)
 800896a:	4293      	cmp	r3, r2
 800896c:	f200 809e 	bhi.w	8008aac <HAL_TIM_ConfigClockSource+0x1b8>
 8008970:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8008974:	f000 8091 	beq.w	8008a9a <HAL_TIM_ConfigClockSource+0x1a6>
 8008978:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800897c:	f200 8096 	bhi.w	8008aac <HAL_TIM_ConfigClockSource+0x1b8>
 8008980:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008984:	f000 8089 	beq.w	8008a9a <HAL_TIM_ConfigClockSource+0x1a6>
 8008988:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800898c:	f200 808e 	bhi.w	8008aac <HAL_TIM_ConfigClockSource+0x1b8>
 8008990:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008994:	d03e      	beq.n	8008a14 <HAL_TIM_ConfigClockSource+0x120>
 8008996:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800899a:	f200 8087 	bhi.w	8008aac <HAL_TIM_ConfigClockSource+0x1b8>
 800899e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80089a2:	f000 8085 	beq.w	8008ab0 <HAL_TIM_ConfigClockSource+0x1bc>
 80089a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80089aa:	d87f      	bhi.n	8008aac <HAL_TIM_ConfigClockSource+0x1b8>
 80089ac:	2b70      	cmp	r3, #112	; 0x70
 80089ae:	d01a      	beq.n	80089e6 <HAL_TIM_ConfigClockSource+0xf2>
 80089b0:	2b70      	cmp	r3, #112	; 0x70
 80089b2:	d87b      	bhi.n	8008aac <HAL_TIM_ConfigClockSource+0x1b8>
 80089b4:	2b60      	cmp	r3, #96	; 0x60
 80089b6:	d050      	beq.n	8008a5a <HAL_TIM_ConfigClockSource+0x166>
 80089b8:	2b60      	cmp	r3, #96	; 0x60
 80089ba:	d877      	bhi.n	8008aac <HAL_TIM_ConfigClockSource+0x1b8>
 80089bc:	2b50      	cmp	r3, #80	; 0x50
 80089be:	d03c      	beq.n	8008a3a <HAL_TIM_ConfigClockSource+0x146>
 80089c0:	2b50      	cmp	r3, #80	; 0x50
 80089c2:	d873      	bhi.n	8008aac <HAL_TIM_ConfigClockSource+0x1b8>
 80089c4:	2b40      	cmp	r3, #64	; 0x40
 80089c6:	d058      	beq.n	8008a7a <HAL_TIM_ConfigClockSource+0x186>
 80089c8:	2b40      	cmp	r3, #64	; 0x40
 80089ca:	d86f      	bhi.n	8008aac <HAL_TIM_ConfigClockSource+0x1b8>
 80089cc:	2b30      	cmp	r3, #48	; 0x30
 80089ce:	d064      	beq.n	8008a9a <HAL_TIM_ConfigClockSource+0x1a6>
 80089d0:	2b30      	cmp	r3, #48	; 0x30
 80089d2:	d86b      	bhi.n	8008aac <HAL_TIM_ConfigClockSource+0x1b8>
 80089d4:	2b20      	cmp	r3, #32
 80089d6:	d060      	beq.n	8008a9a <HAL_TIM_ConfigClockSource+0x1a6>
 80089d8:	2b20      	cmp	r3, #32
 80089da:	d867      	bhi.n	8008aac <HAL_TIM_ConfigClockSource+0x1b8>
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d05c      	beq.n	8008a9a <HAL_TIM_ConfigClockSource+0x1a6>
 80089e0:	2b10      	cmp	r3, #16
 80089e2:	d05a      	beq.n	8008a9a <HAL_TIM_ConfigClockSource+0x1a6>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80089e4:	e062      	b.n	8008aac <HAL_TIM_ConfigClockSource+0x1b8>
      TIM_ETR_SetConfig(htim->Instance,
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	6818      	ldr	r0, [r3, #0]
 80089ea:	683b      	ldr	r3, [r7, #0]
 80089ec:	6899      	ldr	r1, [r3, #8]
 80089ee:	683b      	ldr	r3, [r7, #0]
 80089f0:	685a      	ldr	r2, [r3, #4]
 80089f2:	683b      	ldr	r3, [r7, #0]
 80089f4:	68db      	ldr	r3, [r3, #12]
 80089f6:	f000 f9b1 	bl	8008d5c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	689b      	ldr	r3, [r3, #8]
 8008a00:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008a08:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	68fa      	ldr	r2, [r7, #12]
 8008a10:	609a      	str	r2, [r3, #8]
      break;
 8008a12:	e04e      	b.n	8008ab2 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_ETR_SetConfig(htim->Instance,
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	6818      	ldr	r0, [r3, #0]
 8008a18:	683b      	ldr	r3, [r7, #0]
 8008a1a:	6899      	ldr	r1, [r3, #8]
 8008a1c:	683b      	ldr	r3, [r7, #0]
 8008a1e:	685a      	ldr	r2, [r3, #4]
 8008a20:	683b      	ldr	r3, [r7, #0]
 8008a22:	68db      	ldr	r3, [r3, #12]
 8008a24:	f000 f99a 	bl	8008d5c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	689a      	ldr	r2, [r3, #8]
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008a36:	609a      	str	r2, [r3, #8]
      break;
 8008a38:	e03b      	b.n	8008ab2 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	6818      	ldr	r0, [r3, #0]
 8008a3e:	683b      	ldr	r3, [r7, #0]
 8008a40:	6859      	ldr	r1, [r3, #4]
 8008a42:	683b      	ldr	r3, [r7, #0]
 8008a44:	68db      	ldr	r3, [r3, #12]
 8008a46:	461a      	mov	r2, r3
 8008a48:	f000 f90a 	bl	8008c60 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	2150      	movs	r1, #80	; 0x50
 8008a52:	4618      	mov	r0, r3
 8008a54:	f000 f964 	bl	8008d20 <TIM_ITRx_SetConfig>
      break;
 8008a58:	e02b      	b.n	8008ab2 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	6818      	ldr	r0, [r3, #0]
 8008a5e:	683b      	ldr	r3, [r7, #0]
 8008a60:	6859      	ldr	r1, [r3, #4]
 8008a62:	683b      	ldr	r3, [r7, #0]
 8008a64:	68db      	ldr	r3, [r3, #12]
 8008a66:	461a      	mov	r2, r3
 8008a68:	f000 f929 	bl	8008cbe <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	2160      	movs	r1, #96	; 0x60
 8008a72:	4618      	mov	r0, r3
 8008a74:	f000 f954 	bl	8008d20 <TIM_ITRx_SetConfig>
      break;
 8008a78:	e01b      	b.n	8008ab2 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	6818      	ldr	r0, [r3, #0]
 8008a7e:	683b      	ldr	r3, [r7, #0]
 8008a80:	6859      	ldr	r1, [r3, #4]
 8008a82:	683b      	ldr	r3, [r7, #0]
 8008a84:	68db      	ldr	r3, [r3, #12]
 8008a86:	461a      	mov	r2, r3
 8008a88:	f000 f8ea 	bl	8008c60 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	2140      	movs	r1, #64	; 0x40
 8008a92:	4618      	mov	r0, r3
 8008a94:	f000 f944 	bl	8008d20 <TIM_ITRx_SetConfig>
      break;
 8008a98:	e00b      	b.n	8008ab2 <HAL_TIM_ConfigClockSource+0x1be>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681a      	ldr	r2, [r3, #0]
 8008a9e:	683b      	ldr	r3, [r7, #0]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	4619      	mov	r1, r3
 8008aa4:	4610      	mov	r0, r2
 8008aa6:	f000 f93b 	bl	8008d20 <TIM_ITRx_SetConfig>
        break;
 8008aaa:	e002      	b.n	8008ab2 <HAL_TIM_ConfigClockSource+0x1be>
      break;
 8008aac:	bf00      	nop
 8008aae:	e000      	b.n	8008ab2 <HAL_TIM_ConfigClockSource+0x1be>
      break;
 8008ab0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	2201      	movs	r2, #1
 8008ab6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	2200      	movs	r2, #0
 8008abe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008ac2:	2300      	movs	r3, #0
}
 8008ac4:	4618      	mov	r0, r3
 8008ac6:	3710      	adds	r7, #16
 8008ac8:	46bd      	mov	sp, r7
 8008aca:	bd80      	pop	{r7, pc}
 8008acc:	ffceff88 	.word	0xffceff88
 8008ad0:	00100040 	.word	0x00100040
 8008ad4:	00100030 	.word	0x00100030
 8008ad8:	00100020 	.word	0x00100020

08008adc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008adc:	b480      	push	{r7}
 8008ade:	b083      	sub	sp, #12
 8008ae0:	af00      	add	r7, sp, #0
 8008ae2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008ae4:	bf00      	nop
 8008ae6:	370c      	adds	r7, #12
 8008ae8:	46bd      	mov	sp, r7
 8008aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aee:	4770      	bx	lr

08008af0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008af0:	b480      	push	{r7}
 8008af2:	b083      	sub	sp, #12
 8008af4:	af00      	add	r7, sp, #0
 8008af6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008af8:	bf00      	nop
 8008afa:	370c      	adds	r7, #12
 8008afc:	46bd      	mov	sp, r7
 8008afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b02:	4770      	bx	lr

08008b04 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008b04:	b480      	push	{r7}
 8008b06:	b083      	sub	sp, #12
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008b0c:	bf00      	nop
 8008b0e:	370c      	adds	r7, #12
 8008b10:	46bd      	mov	sp, r7
 8008b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b16:	4770      	bx	lr

08008b18 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008b18:	b480      	push	{r7}
 8008b1a:	b083      	sub	sp, #12
 8008b1c:	af00      	add	r7, sp, #0
 8008b1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008b20:	bf00      	nop
 8008b22:	370c      	adds	r7, #12
 8008b24:	46bd      	mov	sp, r7
 8008b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b2a:	4770      	bx	lr

08008b2c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008b2c:	b480      	push	{r7}
 8008b2e:	b085      	sub	sp, #20
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	6078      	str	r0, [r7, #4]
 8008b34:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	4a40      	ldr	r2, [pc, #256]	; (8008c40 <TIM_Base_SetConfig+0x114>)
 8008b40:	4293      	cmp	r3, r2
 8008b42:	d013      	beq.n	8008b6c <TIM_Base_SetConfig+0x40>
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b4a:	d00f      	beq.n	8008b6c <TIM_Base_SetConfig+0x40>
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	4a3d      	ldr	r2, [pc, #244]	; (8008c44 <TIM_Base_SetConfig+0x118>)
 8008b50:	4293      	cmp	r3, r2
 8008b52:	d00b      	beq.n	8008b6c <TIM_Base_SetConfig+0x40>
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	4a3c      	ldr	r2, [pc, #240]	; (8008c48 <TIM_Base_SetConfig+0x11c>)
 8008b58:	4293      	cmp	r3, r2
 8008b5a:	d007      	beq.n	8008b6c <TIM_Base_SetConfig+0x40>
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	4a3b      	ldr	r2, [pc, #236]	; (8008c4c <TIM_Base_SetConfig+0x120>)
 8008b60:	4293      	cmp	r3, r2
 8008b62:	d003      	beq.n	8008b6c <TIM_Base_SetConfig+0x40>
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	4a3a      	ldr	r2, [pc, #232]	; (8008c50 <TIM_Base_SetConfig+0x124>)
 8008b68:	4293      	cmp	r3, r2
 8008b6a:	d108      	bne.n	8008b7e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b72:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008b74:	683b      	ldr	r3, [r7, #0]
 8008b76:	685b      	ldr	r3, [r3, #4]
 8008b78:	68fa      	ldr	r2, [r7, #12]
 8008b7a:	4313      	orrs	r3, r2
 8008b7c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	4a2f      	ldr	r2, [pc, #188]	; (8008c40 <TIM_Base_SetConfig+0x114>)
 8008b82:	4293      	cmp	r3, r2
 8008b84:	d01f      	beq.n	8008bc6 <TIM_Base_SetConfig+0x9a>
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b8c:	d01b      	beq.n	8008bc6 <TIM_Base_SetConfig+0x9a>
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	4a2c      	ldr	r2, [pc, #176]	; (8008c44 <TIM_Base_SetConfig+0x118>)
 8008b92:	4293      	cmp	r3, r2
 8008b94:	d017      	beq.n	8008bc6 <TIM_Base_SetConfig+0x9a>
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	4a2b      	ldr	r2, [pc, #172]	; (8008c48 <TIM_Base_SetConfig+0x11c>)
 8008b9a:	4293      	cmp	r3, r2
 8008b9c:	d013      	beq.n	8008bc6 <TIM_Base_SetConfig+0x9a>
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	4a2a      	ldr	r2, [pc, #168]	; (8008c4c <TIM_Base_SetConfig+0x120>)
 8008ba2:	4293      	cmp	r3, r2
 8008ba4:	d00f      	beq.n	8008bc6 <TIM_Base_SetConfig+0x9a>
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	4a29      	ldr	r2, [pc, #164]	; (8008c50 <TIM_Base_SetConfig+0x124>)
 8008baa:	4293      	cmp	r3, r2
 8008bac:	d00b      	beq.n	8008bc6 <TIM_Base_SetConfig+0x9a>
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	4a28      	ldr	r2, [pc, #160]	; (8008c54 <TIM_Base_SetConfig+0x128>)
 8008bb2:	4293      	cmp	r3, r2
 8008bb4:	d007      	beq.n	8008bc6 <TIM_Base_SetConfig+0x9a>
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	4a27      	ldr	r2, [pc, #156]	; (8008c58 <TIM_Base_SetConfig+0x12c>)
 8008bba:	4293      	cmp	r3, r2
 8008bbc:	d003      	beq.n	8008bc6 <TIM_Base_SetConfig+0x9a>
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	4a26      	ldr	r2, [pc, #152]	; (8008c5c <TIM_Base_SetConfig+0x130>)
 8008bc2:	4293      	cmp	r3, r2
 8008bc4:	d108      	bne.n	8008bd8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008bcc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008bce:	683b      	ldr	r3, [r7, #0]
 8008bd0:	68db      	ldr	r3, [r3, #12]
 8008bd2:	68fa      	ldr	r2, [r7, #12]
 8008bd4:	4313      	orrs	r3, r2
 8008bd6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008bde:	683b      	ldr	r3, [r7, #0]
 8008be0:	695b      	ldr	r3, [r3, #20]
 8008be2:	4313      	orrs	r3, r2
 8008be4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	68fa      	ldr	r2, [r7, #12]
 8008bea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008bec:	683b      	ldr	r3, [r7, #0]
 8008bee:	689a      	ldr	r2, [r3, #8]
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008bf4:	683b      	ldr	r3, [r7, #0]
 8008bf6:	681a      	ldr	r2, [r3, #0]
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	4a10      	ldr	r2, [pc, #64]	; (8008c40 <TIM_Base_SetConfig+0x114>)
 8008c00:	4293      	cmp	r3, r2
 8008c02:	d00f      	beq.n	8008c24 <TIM_Base_SetConfig+0xf8>
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	4a12      	ldr	r2, [pc, #72]	; (8008c50 <TIM_Base_SetConfig+0x124>)
 8008c08:	4293      	cmp	r3, r2
 8008c0a:	d00b      	beq.n	8008c24 <TIM_Base_SetConfig+0xf8>
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	4a11      	ldr	r2, [pc, #68]	; (8008c54 <TIM_Base_SetConfig+0x128>)
 8008c10:	4293      	cmp	r3, r2
 8008c12:	d007      	beq.n	8008c24 <TIM_Base_SetConfig+0xf8>
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	4a10      	ldr	r2, [pc, #64]	; (8008c58 <TIM_Base_SetConfig+0x12c>)
 8008c18:	4293      	cmp	r3, r2
 8008c1a:	d003      	beq.n	8008c24 <TIM_Base_SetConfig+0xf8>
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	4a0f      	ldr	r2, [pc, #60]	; (8008c5c <TIM_Base_SetConfig+0x130>)
 8008c20:	4293      	cmp	r3, r2
 8008c22:	d103      	bne.n	8008c2c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008c24:	683b      	ldr	r3, [r7, #0]
 8008c26:	691a      	ldr	r2, [r3, #16]
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	2201      	movs	r2, #1
 8008c30:	615a      	str	r2, [r3, #20]
}
 8008c32:	bf00      	nop
 8008c34:	3714      	adds	r7, #20
 8008c36:	46bd      	mov	sp, r7
 8008c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c3c:	4770      	bx	lr
 8008c3e:	bf00      	nop
 8008c40:	40010000 	.word	0x40010000
 8008c44:	40000400 	.word	0x40000400
 8008c48:	40000800 	.word	0x40000800
 8008c4c:	40000c00 	.word	0x40000c00
 8008c50:	40010400 	.word	0x40010400
 8008c54:	40014000 	.word	0x40014000
 8008c58:	40014400 	.word	0x40014400
 8008c5c:	40014800 	.word	0x40014800

08008c60 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008c60:	b480      	push	{r7}
 8008c62:	b087      	sub	sp, #28
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	60f8      	str	r0, [r7, #12]
 8008c68:	60b9      	str	r1, [r7, #8]
 8008c6a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	6a1b      	ldr	r3, [r3, #32]
 8008c70:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	6a1b      	ldr	r3, [r3, #32]
 8008c76:	f023 0201 	bic.w	r2, r3, #1
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	699b      	ldr	r3, [r3, #24]
 8008c82:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008c84:	693b      	ldr	r3, [r7, #16]
 8008c86:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008c8a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	011b      	lsls	r3, r3, #4
 8008c90:	693a      	ldr	r2, [r7, #16]
 8008c92:	4313      	orrs	r3, r2
 8008c94:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008c96:	697b      	ldr	r3, [r7, #20]
 8008c98:	f023 030a 	bic.w	r3, r3, #10
 8008c9c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008c9e:	697a      	ldr	r2, [r7, #20]
 8008ca0:	68bb      	ldr	r3, [r7, #8]
 8008ca2:	4313      	orrs	r3, r2
 8008ca4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	693a      	ldr	r2, [r7, #16]
 8008caa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	697a      	ldr	r2, [r7, #20]
 8008cb0:	621a      	str	r2, [r3, #32]
}
 8008cb2:	bf00      	nop
 8008cb4:	371c      	adds	r7, #28
 8008cb6:	46bd      	mov	sp, r7
 8008cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cbc:	4770      	bx	lr

08008cbe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008cbe:	b480      	push	{r7}
 8008cc0:	b087      	sub	sp, #28
 8008cc2:	af00      	add	r7, sp, #0
 8008cc4:	60f8      	str	r0, [r7, #12]
 8008cc6:	60b9      	str	r1, [r7, #8]
 8008cc8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	6a1b      	ldr	r3, [r3, #32]
 8008cce:	f023 0210 	bic.w	r2, r3, #16
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	699b      	ldr	r3, [r3, #24]
 8008cda:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	6a1b      	ldr	r3, [r3, #32]
 8008ce0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008ce2:	697b      	ldr	r3, [r7, #20]
 8008ce4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008ce8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	031b      	lsls	r3, r3, #12
 8008cee:	697a      	ldr	r2, [r7, #20]
 8008cf0:	4313      	orrs	r3, r2
 8008cf2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008cf4:	693b      	ldr	r3, [r7, #16]
 8008cf6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008cfa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008cfc:	68bb      	ldr	r3, [r7, #8]
 8008cfe:	011b      	lsls	r3, r3, #4
 8008d00:	693a      	ldr	r2, [r7, #16]
 8008d02:	4313      	orrs	r3, r2
 8008d04:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	697a      	ldr	r2, [r7, #20]
 8008d0a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	693a      	ldr	r2, [r7, #16]
 8008d10:	621a      	str	r2, [r3, #32]
}
 8008d12:	bf00      	nop
 8008d14:	371c      	adds	r7, #28
 8008d16:	46bd      	mov	sp, r7
 8008d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d1c:	4770      	bx	lr
	...

08008d20 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008d20:	b480      	push	{r7}
 8008d22:	b085      	sub	sp, #20
 8008d24:	af00      	add	r7, sp, #0
 8008d26:	6078      	str	r0, [r7, #4]
 8008d28:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	689b      	ldr	r3, [r3, #8]
 8008d2e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008d30:	68fa      	ldr	r2, [r7, #12]
 8008d32:	4b09      	ldr	r3, [pc, #36]	; (8008d58 <TIM_ITRx_SetConfig+0x38>)
 8008d34:	4013      	ands	r3, r2
 8008d36:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008d38:	683a      	ldr	r2, [r7, #0]
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	4313      	orrs	r3, r2
 8008d3e:	f043 0307 	orr.w	r3, r3, #7
 8008d42:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	68fa      	ldr	r2, [r7, #12]
 8008d48:	609a      	str	r2, [r3, #8]
}
 8008d4a:	bf00      	nop
 8008d4c:	3714      	adds	r7, #20
 8008d4e:	46bd      	mov	sp, r7
 8008d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d54:	4770      	bx	lr
 8008d56:	bf00      	nop
 8008d58:	ffcfff8f 	.word	0xffcfff8f

08008d5c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008d5c:	b480      	push	{r7}
 8008d5e:	b087      	sub	sp, #28
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	60f8      	str	r0, [r7, #12]
 8008d64:	60b9      	str	r1, [r7, #8]
 8008d66:	607a      	str	r2, [r7, #4]
 8008d68:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	689b      	ldr	r3, [r3, #8]
 8008d6e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008d70:	697b      	ldr	r3, [r7, #20]
 8008d72:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008d76:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008d78:	683b      	ldr	r3, [r7, #0]
 8008d7a:	021a      	lsls	r2, r3, #8
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	431a      	orrs	r2, r3
 8008d80:	68bb      	ldr	r3, [r7, #8]
 8008d82:	4313      	orrs	r3, r2
 8008d84:	697a      	ldr	r2, [r7, #20]
 8008d86:	4313      	orrs	r3, r2
 8008d88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	697a      	ldr	r2, [r7, #20]
 8008d8e:	609a      	str	r2, [r3, #8]
}
 8008d90:	bf00      	nop
 8008d92:	371c      	adds	r7, #28
 8008d94:	46bd      	mov	sp, r7
 8008d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d9a:	4770      	bx	lr

08008d9c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008d9c:	b480      	push	{r7}
 8008d9e:	b085      	sub	sp, #20
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	6078      	str	r0, [r7, #4]
 8008da4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008dac:	2b01      	cmp	r3, #1
 8008dae:	d101      	bne.n	8008db4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008db0:	2302      	movs	r3, #2
 8008db2:	e068      	b.n	8008e86 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	2201      	movs	r2, #1
 8008db8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	2202      	movs	r2, #2
 8008dc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	685b      	ldr	r3, [r3, #4]
 8008dca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	689b      	ldr	r3, [r3, #8]
 8008dd2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	4a2e      	ldr	r2, [pc, #184]	; (8008e94 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8008dda:	4293      	cmp	r3, r2
 8008ddc:	d004      	beq.n	8008de8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	4a2d      	ldr	r2, [pc, #180]	; (8008e98 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008de4:	4293      	cmp	r3, r2
 8008de6:	d108      	bne.n	8008dfa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008dee:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008df0:	683b      	ldr	r3, [r7, #0]
 8008df2:	685b      	ldr	r3, [r3, #4]
 8008df4:	68fa      	ldr	r2, [r7, #12]
 8008df6:	4313      	orrs	r3, r2
 8008df8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e00:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008e02:	683b      	ldr	r3, [r7, #0]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	68fa      	ldr	r2, [r7, #12]
 8008e08:	4313      	orrs	r3, r2
 8008e0a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	68fa      	ldr	r2, [r7, #12]
 8008e12:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	4a1e      	ldr	r2, [pc, #120]	; (8008e94 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8008e1a:	4293      	cmp	r3, r2
 8008e1c:	d01d      	beq.n	8008e5a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e26:	d018      	beq.n	8008e5a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	4a1b      	ldr	r2, [pc, #108]	; (8008e9c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008e2e:	4293      	cmp	r3, r2
 8008e30:	d013      	beq.n	8008e5a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	4a1a      	ldr	r2, [pc, #104]	; (8008ea0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008e38:	4293      	cmp	r3, r2
 8008e3a:	d00e      	beq.n	8008e5a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	4a18      	ldr	r2, [pc, #96]	; (8008ea4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008e42:	4293      	cmp	r3, r2
 8008e44:	d009      	beq.n	8008e5a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	4a13      	ldr	r2, [pc, #76]	; (8008e98 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008e4c:	4293      	cmp	r3, r2
 8008e4e:	d004      	beq.n	8008e5a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	4a14      	ldr	r2, [pc, #80]	; (8008ea8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008e56:	4293      	cmp	r3, r2
 8008e58:	d10c      	bne.n	8008e74 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008e5a:	68bb      	ldr	r3, [r7, #8]
 8008e5c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008e60:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008e62:	683b      	ldr	r3, [r7, #0]
 8008e64:	689b      	ldr	r3, [r3, #8]
 8008e66:	68ba      	ldr	r2, [r7, #8]
 8008e68:	4313      	orrs	r3, r2
 8008e6a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	68ba      	ldr	r2, [r7, #8]
 8008e72:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	2201      	movs	r2, #1
 8008e78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	2200      	movs	r2, #0
 8008e80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008e84:	2300      	movs	r3, #0
}
 8008e86:	4618      	mov	r0, r3
 8008e88:	3714      	adds	r7, #20
 8008e8a:	46bd      	mov	sp, r7
 8008e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e90:	4770      	bx	lr
 8008e92:	bf00      	nop
 8008e94:	40010000 	.word	0x40010000
 8008e98:	40010400 	.word	0x40010400
 8008e9c:	40000400 	.word	0x40000400
 8008ea0:	40000800 	.word	0x40000800
 8008ea4:	40000c00 	.word	0x40000c00
 8008ea8:	40001800 	.word	0x40001800

08008eac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008eac:	b480      	push	{r7}
 8008eae:	b083      	sub	sp, #12
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008eb4:	bf00      	nop
 8008eb6:	370c      	adds	r7, #12
 8008eb8:	46bd      	mov	sp, r7
 8008eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ebe:	4770      	bx	lr

08008ec0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008ec0:	b480      	push	{r7}
 8008ec2:	b083      	sub	sp, #12
 8008ec4:	af00      	add	r7, sp, #0
 8008ec6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008ec8:	bf00      	nop
 8008eca:	370c      	adds	r7, #12
 8008ecc:	46bd      	mov	sp, r7
 8008ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed2:	4770      	bx	lr

08008ed4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008ed4:	b480      	push	{r7}
 8008ed6:	b083      	sub	sp, #12
 8008ed8:	af00      	add	r7, sp, #0
 8008eda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008edc:	bf00      	nop
 8008ede:	370c      	adds	r7, #12
 8008ee0:	46bd      	mov	sp, r7
 8008ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee6:	4770      	bx	lr

08008ee8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008ee8:	b580      	push	{r7, lr}
 8008eea:	b082      	sub	sp, #8
 8008eec:	af00      	add	r7, sp, #0
 8008eee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d101      	bne.n	8008efa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008ef6:	2301      	movs	r3, #1
 8008ef8:	e042      	b.n	8008f80 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d106      	bne.n	8008f12 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	2200      	movs	r2, #0
 8008f08:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008f0c:	6878      	ldr	r0, [r7, #4]
 8008f0e:	f7f8 f8a3 	bl	8001058 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	2224      	movs	r2, #36	; 0x24
 8008f16:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	681a      	ldr	r2, [r3, #0]
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	f022 0201 	bic.w	r2, r2, #1
 8008f28:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008f2a:	6878      	ldr	r0, [r7, #4]
 8008f2c:	f000 fb90 	bl	8009650 <UART_SetConfig>
 8008f30:	4603      	mov	r3, r0
 8008f32:	2b01      	cmp	r3, #1
 8008f34:	d101      	bne.n	8008f3a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8008f36:	2301      	movs	r3, #1
 8008f38:	e022      	b.n	8008f80 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d002      	beq.n	8008f48 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8008f42:	6878      	ldr	r0, [r7, #4]
 8008f44:	f001 f8e4 	bl	800a110 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	685a      	ldr	r2, [r3, #4]
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008f56:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	689a      	ldr	r2, [r3, #8]
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008f66:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	681a      	ldr	r2, [r3, #0]
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	f042 0201 	orr.w	r2, r2, #1
 8008f76:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008f78:	6878      	ldr	r0, [r7, #4]
 8008f7a:	f001 f96b 	bl	800a254 <UART_CheckIdleState>
 8008f7e:	4603      	mov	r3, r0
}
 8008f80:	4618      	mov	r0, r3
 8008f82:	3708      	adds	r7, #8
 8008f84:	46bd      	mov	sp, r7
 8008f86:	bd80      	pop	{r7, pc}

08008f88 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008f88:	b580      	push	{r7, lr}
 8008f8a:	b084      	sub	sp, #16
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	60f8      	str	r0, [r7, #12]
 8008f90:	60b9      	str	r1, [r7, #8]
 8008f92:	4613      	mov	r3, r2
 8008f94:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008f9c:	2b20      	cmp	r3, #32
 8008f9e:	d168      	bne.n	8009072 <HAL_UART_Transmit_DMA+0xea>
  {
    if ((pData == NULL) || (Size == 0U))
 8008fa0:	68bb      	ldr	r3, [r7, #8]
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d002      	beq.n	8008fac <HAL_UART_Transmit_DMA+0x24>
 8008fa6:	88fb      	ldrh	r3, [r7, #6]
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d101      	bne.n	8008fb0 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8008fac:	2301      	movs	r3, #1
 8008fae:	e061      	b.n	8009074 <HAL_UART_Transmit_DMA+0xec>
    }

    __HAL_LOCK(huart);
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008fb6:	2b01      	cmp	r3, #1
 8008fb8:	d101      	bne.n	8008fbe <HAL_UART_Transmit_DMA+0x36>
 8008fba:	2302      	movs	r3, #2
 8008fbc:	e05a      	b.n	8009074 <HAL_UART_Transmit_DMA+0xec>
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	2201      	movs	r2, #1
 8008fc2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	68ba      	ldr	r2, [r7, #8]
 8008fca:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	88fa      	ldrh	r2, [r7, #6]
 8008fd0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	88fa      	ldrh	r2, [r7, #6]
 8008fd8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	2200      	movs	r2, #0
 8008fe0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	2221      	movs	r2, #33	; 0x21
 8008fe8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d02c      	beq.n	800904e <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008ff8:	4a20      	ldr	r2, [pc, #128]	; (800907c <HAL_UART_Transmit_DMA+0xf4>)
 8008ffa:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009000:	4a1f      	ldr	r2, [pc, #124]	; (8009080 <HAL_UART_Transmit_DMA+0xf8>)
 8009002:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009008:	4a1e      	ldr	r2, [pc, #120]	; (8009084 <HAL_UART_Transmit_DMA+0xfc>)
 800900a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009010:	2200      	movs	r2, #0
 8009012:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800901c:	4619      	mov	r1, r3
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	3328      	adds	r3, #40	; 0x28
 8009024:	461a      	mov	r2, r3
 8009026:	88fb      	ldrh	r3, [r7, #6]
 8009028:	f7f8 ffee 	bl	8002008 <HAL_DMA_Start_IT>
 800902c:	4603      	mov	r3, r0
 800902e:	2b00      	cmp	r3, #0
 8009030:	d00d      	beq.n	800904e <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	2210      	movs	r2, #16
 8009036:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	2200      	movs	r2, #0
 800903e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	2220      	movs	r2, #32
 8009046:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 800904a:	2301      	movs	r3, #1
 800904c:	e012      	b.n	8009074 <HAL_UART_Transmit_DMA+0xec>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	2240      	movs	r2, #64	; 0x40
 8009054:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	2200      	movs	r2, #0
 800905a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	689a      	ldr	r2, [r3, #8]
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800906c:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 800906e:	2300      	movs	r3, #0
 8009070:	e000      	b.n	8009074 <HAL_UART_Transmit_DMA+0xec>
  }
  else
  {
    return HAL_BUSY;
 8009072:	2302      	movs	r3, #2
  }
}
 8009074:	4618      	mov	r0, r3
 8009076:	3710      	adds	r7, #16
 8009078:	46bd      	mov	sp, r7
 800907a:	bd80      	pop	{r7, pc}
 800907c:	0800a48d 	.word	0x0800a48d
 8009080:	0800a4dd 	.word	0x0800a4dd
 8009084:	0800a4f9 	.word	0x0800a4f9

08009088 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009088:	b580      	push	{r7, lr}
 800908a:	b088      	sub	sp, #32
 800908c:	af00      	add	r7, sp, #0
 800908e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	69db      	ldr	r3, [r3, #28]
 8009096:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	689b      	ldr	r3, [r3, #8]
 80090a6:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80090a8:	69fa      	ldr	r2, [r7, #28]
 80090aa:	f640 030f 	movw	r3, #2063	; 0x80f
 80090ae:	4013      	ands	r3, r2
 80090b0:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80090b2:	693b      	ldr	r3, [r7, #16]
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d118      	bne.n	80090ea <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80090b8:	69fb      	ldr	r3, [r7, #28]
 80090ba:	f003 0320 	and.w	r3, r3, #32
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d013      	beq.n	80090ea <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80090c2:	69bb      	ldr	r3, [r7, #24]
 80090c4:	f003 0320 	and.w	r3, r3, #32
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d104      	bne.n	80090d6 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80090cc:	697b      	ldr	r3, [r7, #20]
 80090ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d009      	beq.n	80090ea <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090da:	2b00      	cmp	r3, #0
 80090dc:	f000 8282 	beq.w	80095e4 <HAL_UART_IRQHandler+0x55c>
      {
        huart->RxISR(huart);
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090e4:	6878      	ldr	r0, [r7, #4]
 80090e6:	4798      	blx	r3
      }
      return;
 80090e8:	e27c      	b.n	80095e4 <HAL_UART_IRQHandler+0x55c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80090ea:	693b      	ldr	r3, [r7, #16]
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	f000 80ef 	beq.w	80092d0 <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80090f2:	697a      	ldr	r2, [r7, #20]
 80090f4:	4b73      	ldr	r3, [pc, #460]	; (80092c4 <HAL_UART_IRQHandler+0x23c>)
 80090f6:	4013      	ands	r3, r2
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d105      	bne.n	8009108 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80090fc:	69ba      	ldr	r2, [r7, #24]
 80090fe:	4b72      	ldr	r3, [pc, #456]	; (80092c8 <HAL_UART_IRQHandler+0x240>)
 8009100:	4013      	ands	r3, r2
 8009102:	2b00      	cmp	r3, #0
 8009104:	f000 80e4 	beq.w	80092d0 <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009108:	69fb      	ldr	r3, [r7, #28]
 800910a:	f003 0301 	and.w	r3, r3, #1
 800910e:	2b00      	cmp	r3, #0
 8009110:	d010      	beq.n	8009134 <HAL_UART_IRQHandler+0xac>
 8009112:	69bb      	ldr	r3, [r7, #24]
 8009114:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009118:	2b00      	cmp	r3, #0
 800911a:	d00b      	beq.n	8009134 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	2201      	movs	r2, #1
 8009122:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800912a:	f043 0201 	orr.w	r2, r3, #1
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009134:	69fb      	ldr	r3, [r7, #28]
 8009136:	f003 0302 	and.w	r3, r3, #2
 800913a:	2b00      	cmp	r3, #0
 800913c:	d010      	beq.n	8009160 <HAL_UART_IRQHandler+0xd8>
 800913e:	697b      	ldr	r3, [r7, #20]
 8009140:	f003 0301 	and.w	r3, r3, #1
 8009144:	2b00      	cmp	r3, #0
 8009146:	d00b      	beq.n	8009160 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	2202      	movs	r2, #2
 800914e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009156:	f043 0204 	orr.w	r2, r3, #4
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009160:	69fb      	ldr	r3, [r7, #28]
 8009162:	f003 0304 	and.w	r3, r3, #4
 8009166:	2b00      	cmp	r3, #0
 8009168:	d010      	beq.n	800918c <HAL_UART_IRQHandler+0x104>
 800916a:	697b      	ldr	r3, [r7, #20]
 800916c:	f003 0301 	and.w	r3, r3, #1
 8009170:	2b00      	cmp	r3, #0
 8009172:	d00b      	beq.n	800918c <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	2204      	movs	r2, #4
 800917a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009182:	f043 0202 	orr.w	r2, r3, #2
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800918c:	69fb      	ldr	r3, [r7, #28]
 800918e:	f003 0308 	and.w	r3, r3, #8
 8009192:	2b00      	cmp	r3, #0
 8009194:	d015      	beq.n	80091c2 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009196:	69bb      	ldr	r3, [r7, #24]
 8009198:	f003 0320 	and.w	r3, r3, #32
 800919c:	2b00      	cmp	r3, #0
 800919e:	d104      	bne.n	80091aa <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80091a0:	697a      	ldr	r2, [r7, #20]
 80091a2:	4b48      	ldr	r3, [pc, #288]	; (80092c4 <HAL_UART_IRQHandler+0x23c>)
 80091a4:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d00b      	beq.n	80091c2 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	2208      	movs	r2, #8
 80091b0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80091b8:	f043 0208 	orr.w	r2, r3, #8
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80091c2:	69fb      	ldr	r3, [r7, #28]
 80091c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d011      	beq.n	80091f0 <HAL_UART_IRQHandler+0x168>
 80091cc:	69bb      	ldr	r3, [r7, #24]
 80091ce:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d00c      	beq.n	80091f0 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80091de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80091e6:	f043 0220 	orr.w	r2, r3, #32
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	f000 81f6 	beq.w	80095e8 <HAL_UART_IRQHandler+0x560>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80091fc:	69fb      	ldr	r3, [r7, #28]
 80091fe:	f003 0320 	and.w	r3, r3, #32
 8009202:	2b00      	cmp	r3, #0
 8009204:	d011      	beq.n	800922a <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009206:	69bb      	ldr	r3, [r7, #24]
 8009208:	f003 0320 	and.w	r3, r3, #32
 800920c:	2b00      	cmp	r3, #0
 800920e:	d104      	bne.n	800921a <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009210:	697b      	ldr	r3, [r7, #20]
 8009212:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009216:	2b00      	cmp	r3, #0
 8009218:	d007      	beq.n	800922a <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800921e:	2b00      	cmp	r3, #0
 8009220:	d003      	beq.n	800922a <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009226:	6878      	ldr	r0, [r7, #4]
 8009228:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009230:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	689b      	ldr	r3, [r3, #8]
 8009238:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800923c:	2b40      	cmp	r3, #64	; 0x40
 800923e:	d004      	beq.n	800924a <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009246:	2b00      	cmp	r3, #0
 8009248:	d031      	beq.n	80092ae <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800924a:	6878      	ldr	r0, [r7, #4]
 800924c:	f001 f8ec 	bl	800a428 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	689b      	ldr	r3, [r3, #8]
 8009256:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800925a:	2b40      	cmp	r3, #64	; 0x40
 800925c:	d123      	bne.n	80092a6 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	689a      	ldr	r2, [r3, #8]
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800926c:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009272:	2b00      	cmp	r3, #0
 8009274:	d013      	beq.n	800929e <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800927a:	4a14      	ldr	r2, [pc, #80]	; (80092cc <HAL_UART_IRQHandler+0x244>)
 800927c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009282:	4618      	mov	r0, r3
 8009284:	f7f9 fc48 	bl	8002b18 <HAL_DMA_Abort_IT>
 8009288:	4603      	mov	r3, r0
 800928a:	2b00      	cmp	r3, #0
 800928c:	d017      	beq.n	80092be <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009292:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009294:	687a      	ldr	r2, [r7, #4]
 8009296:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8009298:	4610      	mov	r0, r2
 800929a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800929c:	e00f      	b.n	80092be <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800929e:	6878      	ldr	r0, [r7, #4]
 80092a0:	f000 f9c0 	bl	8009624 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80092a4:	e00b      	b.n	80092be <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80092a6:	6878      	ldr	r0, [r7, #4]
 80092a8:	f000 f9bc 	bl	8009624 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80092ac:	e007      	b.n	80092be <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80092ae:	6878      	ldr	r0, [r7, #4]
 80092b0:	f000 f9b8 	bl	8009624 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	2200      	movs	r2, #0
 80092b8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 80092bc:	e194      	b.n	80095e8 <HAL_UART_IRQHandler+0x560>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80092be:	bf00      	nop
    return;
 80092c0:	e192      	b.n	80095e8 <HAL_UART_IRQHandler+0x560>
 80092c2:	bf00      	nop
 80092c4:	10000001 	.word	0x10000001
 80092c8:	04000120 	.word	0x04000120
 80092cc:	0800a579 	.word	0x0800a579

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80092d4:	2b01      	cmp	r3, #1
 80092d6:	f040 810f 	bne.w	80094f8 <HAL_UART_IRQHandler+0x470>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80092da:	69fb      	ldr	r3, [r7, #28]
 80092dc:	f003 0310 	and.w	r3, r3, #16
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	f000 8109 	beq.w	80094f8 <HAL_UART_IRQHandler+0x470>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80092e6:	69bb      	ldr	r3, [r7, #24]
 80092e8:	f003 0310 	and.w	r3, r3, #16
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	f000 8103 	beq.w	80094f8 <HAL_UART_IRQHandler+0x470>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	2210      	movs	r2, #16
 80092f8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	689b      	ldr	r3, [r3, #8]
 8009300:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009304:	2b40      	cmp	r3, #64	; 0x40
 8009306:	f040 80bb 	bne.w	8009480 <HAL_UART_IRQHandler+0x3f8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	4a96      	ldr	r2, [pc, #600]	; (800956c <HAL_UART_IRQHandler+0x4e4>)
 8009312:	4293      	cmp	r3, r2
 8009314:	d059      	beq.n	80093ca <HAL_UART_IRQHandler+0x342>
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	4a94      	ldr	r2, [pc, #592]	; (8009570 <HAL_UART_IRQHandler+0x4e8>)
 800931e:	4293      	cmp	r3, r2
 8009320:	d053      	beq.n	80093ca <HAL_UART_IRQHandler+0x342>
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	4a92      	ldr	r2, [pc, #584]	; (8009574 <HAL_UART_IRQHandler+0x4ec>)
 800932a:	4293      	cmp	r3, r2
 800932c:	d04d      	beq.n	80093ca <HAL_UART_IRQHandler+0x342>
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	4a90      	ldr	r2, [pc, #576]	; (8009578 <HAL_UART_IRQHandler+0x4f0>)
 8009336:	4293      	cmp	r3, r2
 8009338:	d047      	beq.n	80093ca <HAL_UART_IRQHandler+0x342>
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	4a8e      	ldr	r2, [pc, #568]	; (800957c <HAL_UART_IRQHandler+0x4f4>)
 8009342:	4293      	cmp	r3, r2
 8009344:	d041      	beq.n	80093ca <HAL_UART_IRQHandler+0x342>
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	4a8c      	ldr	r2, [pc, #560]	; (8009580 <HAL_UART_IRQHandler+0x4f8>)
 800934e:	4293      	cmp	r3, r2
 8009350:	d03b      	beq.n	80093ca <HAL_UART_IRQHandler+0x342>
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	4a8a      	ldr	r2, [pc, #552]	; (8009584 <HAL_UART_IRQHandler+0x4fc>)
 800935a:	4293      	cmp	r3, r2
 800935c:	d035      	beq.n	80093ca <HAL_UART_IRQHandler+0x342>
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	4a88      	ldr	r2, [pc, #544]	; (8009588 <HAL_UART_IRQHandler+0x500>)
 8009366:	4293      	cmp	r3, r2
 8009368:	d02f      	beq.n	80093ca <HAL_UART_IRQHandler+0x342>
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	4a86      	ldr	r2, [pc, #536]	; (800958c <HAL_UART_IRQHandler+0x504>)
 8009372:	4293      	cmp	r3, r2
 8009374:	d029      	beq.n	80093ca <HAL_UART_IRQHandler+0x342>
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	4a84      	ldr	r2, [pc, #528]	; (8009590 <HAL_UART_IRQHandler+0x508>)
 800937e:	4293      	cmp	r3, r2
 8009380:	d023      	beq.n	80093ca <HAL_UART_IRQHandler+0x342>
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	4a82      	ldr	r2, [pc, #520]	; (8009594 <HAL_UART_IRQHandler+0x50c>)
 800938a:	4293      	cmp	r3, r2
 800938c:	d01d      	beq.n	80093ca <HAL_UART_IRQHandler+0x342>
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	4a80      	ldr	r2, [pc, #512]	; (8009598 <HAL_UART_IRQHandler+0x510>)
 8009396:	4293      	cmp	r3, r2
 8009398:	d017      	beq.n	80093ca <HAL_UART_IRQHandler+0x342>
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	4a7e      	ldr	r2, [pc, #504]	; (800959c <HAL_UART_IRQHandler+0x514>)
 80093a2:	4293      	cmp	r3, r2
 80093a4:	d011      	beq.n	80093ca <HAL_UART_IRQHandler+0x342>
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	4a7c      	ldr	r2, [pc, #496]	; (80095a0 <HAL_UART_IRQHandler+0x518>)
 80093ae:	4293      	cmp	r3, r2
 80093b0:	d00b      	beq.n	80093ca <HAL_UART_IRQHandler+0x342>
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	4a7a      	ldr	r2, [pc, #488]	; (80095a4 <HAL_UART_IRQHandler+0x51c>)
 80093ba:	4293      	cmp	r3, r2
 80093bc:	d005      	beq.n	80093ca <HAL_UART_IRQHandler+0x342>
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	4a78      	ldr	r2, [pc, #480]	; (80095a8 <HAL_UART_IRQHandler+0x520>)
 80093c6:	4293      	cmp	r3, r2
 80093c8:	d105      	bne.n	80093d6 <HAL_UART_IRQHandler+0x34e>
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	685b      	ldr	r3, [r3, #4]
 80093d2:	b29b      	uxth	r3, r3
 80093d4:	e004      	b.n	80093e0 <HAL_UART_IRQHandler+0x358>
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	685b      	ldr	r3, [r3, #4]
 80093de:	b29b      	uxth	r3, r3
 80093e0:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 80093e2:	893b      	ldrh	r3, [r7, #8]
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	f000 8101 	beq.w	80095ec <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80093f0:	893a      	ldrh	r2, [r7, #8]
 80093f2:	429a      	cmp	r2, r3
 80093f4:	f080 80fa 	bcs.w	80095ec <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	893a      	ldrh	r2, [r7, #8]
 80093fc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009404:	69db      	ldr	r3, [r3, #28]
 8009406:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800940a:	d02b      	beq.n	8009464 <HAL_UART_IRQHandler+0x3dc>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	681a      	ldr	r2, [r3, #0]
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800941a:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	689a      	ldr	r2, [r3, #8]
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	f022 0201 	bic.w	r2, r2, #1
 800942a:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	689a      	ldr	r2, [r3, #8]
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800943a:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	2220      	movs	r2, #32
 8009440:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	2200      	movs	r2, #0
 8009448:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	681a      	ldr	r2, [r3, #0]
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	f022 0210 	bic.w	r2, r2, #16
 8009458:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800945e:	4618      	mov	r0, r3
 8009460:	f7f9 f83c 	bl	80024dc <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009470:	b29b      	uxth	r3, r3
 8009472:	1ad3      	subs	r3, r2, r3
 8009474:	b29b      	uxth	r3, r3
 8009476:	4619      	mov	r1, r3
 8009478:	6878      	ldr	r0, [r7, #4]
 800947a:	f000 f8dd 	bl	8009638 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800947e:	e0b5      	b.n	80095ec <HAL_UART_IRQHandler+0x564>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800948c:	b29b      	uxth	r3, r3
 800948e:	1ad3      	subs	r3, r2, r3
 8009490:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009498:	b29b      	uxth	r3, r3
 800949a:	2b00      	cmp	r3, #0
 800949c:	f000 80a8 	beq.w	80095f0 <HAL_UART_IRQHandler+0x568>
          && (nb_rx_data > 0U))
 80094a0:	897b      	ldrh	r3, [r7, #10]
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	f000 80a4 	beq.w	80095f0 <HAL_UART_IRQHandler+0x568>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	681a      	ldr	r2, [r3, #0]
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80094b6:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	6899      	ldr	r1, [r3, #8]
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	681a      	ldr	r2, [r3, #0]
 80094c2:	4b3a      	ldr	r3, [pc, #232]	; (80095ac <HAL_UART_IRQHandler+0x524>)
 80094c4:	400b      	ands	r3, r1
 80094c6:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	2220      	movs	r2, #32
 80094cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	2200      	movs	r2, #0
 80094d4:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	2200      	movs	r2, #0
 80094da:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	681a      	ldr	r2, [r3, #0]
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	f022 0210 	bic.w	r2, r2, #16
 80094ea:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80094ec:	897b      	ldrh	r3, [r7, #10]
 80094ee:	4619      	mov	r1, r3
 80094f0:	6878      	ldr	r0, [r7, #4]
 80094f2:	f000 f8a1 	bl	8009638 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80094f6:	e07b      	b.n	80095f0 <HAL_UART_IRQHandler+0x568>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80094f8:	69fb      	ldr	r3, [r7, #28]
 80094fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d00d      	beq.n	800951e <HAL_UART_IRQHandler+0x496>
 8009502:	697b      	ldr	r3, [r7, #20]
 8009504:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009508:	2b00      	cmp	r3, #0
 800950a:	d008      	beq.n	800951e <HAL_UART_IRQHandler+0x496>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8009514:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009516:	6878      	ldr	r0, [r7, #4]
 8009518:	f001 f85e 	bl	800a5d8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800951c:	e06b      	b.n	80095f6 <HAL_UART_IRQHandler+0x56e>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800951e:	69fb      	ldr	r3, [r7, #28]
 8009520:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009524:	2b00      	cmp	r3, #0
 8009526:	d012      	beq.n	800954e <HAL_UART_IRQHandler+0x4c6>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009528:	69bb      	ldr	r3, [r7, #24]
 800952a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800952e:	2b00      	cmp	r3, #0
 8009530:	d104      	bne.n	800953c <HAL_UART_IRQHandler+0x4b4>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8009532:	697b      	ldr	r3, [r7, #20]
 8009534:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009538:	2b00      	cmp	r3, #0
 800953a:	d008      	beq.n	800954e <HAL_UART_IRQHandler+0x4c6>
  {
    if (huart->TxISR != NULL)
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009540:	2b00      	cmp	r3, #0
 8009542:	d057      	beq.n	80095f4 <HAL_UART_IRQHandler+0x56c>
    {
      huart->TxISR(huart);
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009548:	6878      	ldr	r0, [r7, #4]
 800954a:	4798      	blx	r3
    }
    return;
 800954c:	e052      	b.n	80095f4 <HAL_UART_IRQHandler+0x56c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800954e:	69fb      	ldr	r3, [r7, #28]
 8009550:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009554:	2b00      	cmp	r3, #0
 8009556:	d02b      	beq.n	80095b0 <HAL_UART_IRQHandler+0x528>
 8009558:	69bb      	ldr	r3, [r7, #24]
 800955a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800955e:	2b00      	cmp	r3, #0
 8009560:	d026      	beq.n	80095b0 <HAL_UART_IRQHandler+0x528>
  {
    UART_EndTransmit_IT(huart);
 8009562:	6878      	ldr	r0, [r7, #4]
 8009564:	f001 f81e 	bl	800a5a4 <UART_EndTransmit_IT>
    return;
 8009568:	e045      	b.n	80095f6 <HAL_UART_IRQHandler+0x56e>
 800956a:	bf00      	nop
 800956c:	40020010 	.word	0x40020010
 8009570:	40020028 	.word	0x40020028
 8009574:	40020040 	.word	0x40020040
 8009578:	40020058 	.word	0x40020058
 800957c:	40020070 	.word	0x40020070
 8009580:	40020088 	.word	0x40020088
 8009584:	400200a0 	.word	0x400200a0
 8009588:	400200b8 	.word	0x400200b8
 800958c:	40020410 	.word	0x40020410
 8009590:	40020428 	.word	0x40020428
 8009594:	40020440 	.word	0x40020440
 8009598:	40020458 	.word	0x40020458
 800959c:	40020470 	.word	0x40020470
 80095a0:	40020488 	.word	0x40020488
 80095a4:	400204a0 	.word	0x400204a0
 80095a8:	400204b8 	.word	0x400204b8
 80095ac:	effffffe 	.word	0xeffffffe
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80095b0:	69fb      	ldr	r3, [r7, #28]
 80095b2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d008      	beq.n	80095cc <HAL_UART_IRQHandler+0x544>
 80095ba:	69bb      	ldr	r3, [r7, #24]
 80095bc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d003      	beq.n	80095cc <HAL_UART_IRQHandler+0x544>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80095c4:	6878      	ldr	r0, [r7, #4]
 80095c6:	f001 f81b 	bl	800a600 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80095ca:	e014      	b.n	80095f6 <HAL_UART_IRQHandler+0x56e>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80095cc:	69fb      	ldr	r3, [r7, #28]
 80095ce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d00f      	beq.n	80095f6 <HAL_UART_IRQHandler+0x56e>
 80095d6:	69bb      	ldr	r3, [r7, #24]
 80095d8:	2b00      	cmp	r3, #0
 80095da:	da0c      	bge.n	80095f6 <HAL_UART_IRQHandler+0x56e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80095dc:	6878      	ldr	r0, [r7, #4]
 80095de:	f001 f805 	bl	800a5ec <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80095e2:	e008      	b.n	80095f6 <HAL_UART_IRQHandler+0x56e>
      return;
 80095e4:	bf00      	nop
 80095e6:	e006      	b.n	80095f6 <HAL_UART_IRQHandler+0x56e>
    return;
 80095e8:	bf00      	nop
 80095ea:	e004      	b.n	80095f6 <HAL_UART_IRQHandler+0x56e>
      return;
 80095ec:	bf00      	nop
 80095ee:	e002      	b.n	80095f6 <HAL_UART_IRQHandler+0x56e>
      return;
 80095f0:	bf00      	nop
 80095f2:	e000      	b.n	80095f6 <HAL_UART_IRQHandler+0x56e>
    return;
 80095f4:	bf00      	nop
  }
}
 80095f6:	3720      	adds	r7, #32
 80095f8:	46bd      	mov	sp, r7
 80095fa:	bd80      	pop	{r7, pc}

080095fc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80095fc:	b480      	push	{r7}
 80095fe:	b083      	sub	sp, #12
 8009600:	af00      	add	r7, sp, #0
 8009602:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009604:	bf00      	nop
 8009606:	370c      	adds	r7, #12
 8009608:	46bd      	mov	sp, r7
 800960a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800960e:	4770      	bx	lr

08009610 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009610:	b480      	push	{r7}
 8009612:	b083      	sub	sp, #12
 8009614:	af00      	add	r7, sp, #0
 8009616:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8009618:	bf00      	nop
 800961a:	370c      	adds	r7, #12
 800961c:	46bd      	mov	sp, r7
 800961e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009622:	4770      	bx	lr

08009624 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009624:	b480      	push	{r7}
 8009626:	b083      	sub	sp, #12
 8009628:	af00      	add	r7, sp, #0
 800962a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800962c:	bf00      	nop
 800962e:	370c      	adds	r7, #12
 8009630:	46bd      	mov	sp, r7
 8009632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009636:	4770      	bx	lr

08009638 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009638:	b480      	push	{r7}
 800963a:	b083      	sub	sp, #12
 800963c:	af00      	add	r7, sp, #0
 800963e:	6078      	str	r0, [r7, #4]
 8009640:	460b      	mov	r3, r1
 8009642:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009644:	bf00      	nop
 8009646:	370c      	adds	r7, #12
 8009648:	46bd      	mov	sp, r7
 800964a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800964e:	4770      	bx	lr

08009650 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009650:	b5b0      	push	{r4, r5, r7, lr}
 8009652:	b08e      	sub	sp, #56	; 0x38
 8009654:	af00      	add	r7, sp, #0
 8009656:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009658:	2300      	movs	r3, #0
 800965a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	689a      	ldr	r2, [r3, #8]
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	691b      	ldr	r3, [r3, #16]
 8009666:	431a      	orrs	r2, r3
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	695b      	ldr	r3, [r3, #20]
 800966c:	431a      	orrs	r2, r3
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	69db      	ldr	r3, [r3, #28]
 8009672:	4313      	orrs	r3, r2
 8009674:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	681a      	ldr	r2, [r3, #0]
 800967c:	4bbf      	ldr	r3, [pc, #764]	; (800997c <UART_SetConfig+0x32c>)
 800967e:	4013      	ands	r3, r2
 8009680:	687a      	ldr	r2, [r7, #4]
 8009682:	6812      	ldr	r2, [r2, #0]
 8009684:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009686:	430b      	orrs	r3, r1
 8009688:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	685b      	ldr	r3, [r3, #4]
 8009690:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	68da      	ldr	r2, [r3, #12]
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	430a      	orrs	r2, r1
 800969e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	699b      	ldr	r3, [r3, #24]
 80096a4:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	4ab5      	ldr	r2, [pc, #724]	; (8009980 <UART_SetConfig+0x330>)
 80096ac:	4293      	cmp	r3, r2
 80096ae:	d004      	beq.n	80096ba <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	6a1b      	ldr	r3, [r3, #32]
 80096b4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80096b6:	4313      	orrs	r3, r2
 80096b8:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	689a      	ldr	r2, [r3, #8]
 80096c0:	4bb0      	ldr	r3, [pc, #704]	; (8009984 <UART_SetConfig+0x334>)
 80096c2:	4013      	ands	r3, r2
 80096c4:	687a      	ldr	r2, [r7, #4]
 80096c6:	6812      	ldr	r2, [r2, #0]
 80096c8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80096ca:	430b      	orrs	r3, r1
 80096cc:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096d4:	f023 010f 	bic.w	r1, r3, #15
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	430a      	orrs	r2, r1
 80096e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	4aa7      	ldr	r2, [pc, #668]	; (8009988 <UART_SetConfig+0x338>)
 80096ea:	4293      	cmp	r3, r2
 80096ec:	d176      	bne.n	80097dc <UART_SetConfig+0x18c>
 80096ee:	4ba7      	ldr	r3, [pc, #668]	; (800998c <UART_SetConfig+0x33c>)
 80096f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80096f2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80096f6:	2b28      	cmp	r3, #40	; 0x28
 80096f8:	d86c      	bhi.n	80097d4 <UART_SetConfig+0x184>
 80096fa:	a201      	add	r2, pc, #4	; (adr r2, 8009700 <UART_SetConfig+0xb0>)
 80096fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009700:	080097a5 	.word	0x080097a5
 8009704:	080097d5 	.word	0x080097d5
 8009708:	080097d5 	.word	0x080097d5
 800970c:	080097d5 	.word	0x080097d5
 8009710:	080097d5 	.word	0x080097d5
 8009714:	080097d5 	.word	0x080097d5
 8009718:	080097d5 	.word	0x080097d5
 800971c:	080097d5 	.word	0x080097d5
 8009720:	080097ad 	.word	0x080097ad
 8009724:	080097d5 	.word	0x080097d5
 8009728:	080097d5 	.word	0x080097d5
 800972c:	080097d5 	.word	0x080097d5
 8009730:	080097d5 	.word	0x080097d5
 8009734:	080097d5 	.word	0x080097d5
 8009738:	080097d5 	.word	0x080097d5
 800973c:	080097d5 	.word	0x080097d5
 8009740:	080097b5 	.word	0x080097b5
 8009744:	080097d5 	.word	0x080097d5
 8009748:	080097d5 	.word	0x080097d5
 800974c:	080097d5 	.word	0x080097d5
 8009750:	080097d5 	.word	0x080097d5
 8009754:	080097d5 	.word	0x080097d5
 8009758:	080097d5 	.word	0x080097d5
 800975c:	080097d5 	.word	0x080097d5
 8009760:	080097bd 	.word	0x080097bd
 8009764:	080097d5 	.word	0x080097d5
 8009768:	080097d5 	.word	0x080097d5
 800976c:	080097d5 	.word	0x080097d5
 8009770:	080097d5 	.word	0x080097d5
 8009774:	080097d5 	.word	0x080097d5
 8009778:	080097d5 	.word	0x080097d5
 800977c:	080097d5 	.word	0x080097d5
 8009780:	080097c5 	.word	0x080097c5
 8009784:	080097d5 	.word	0x080097d5
 8009788:	080097d5 	.word	0x080097d5
 800978c:	080097d5 	.word	0x080097d5
 8009790:	080097d5 	.word	0x080097d5
 8009794:	080097d5 	.word	0x080097d5
 8009798:	080097d5 	.word	0x080097d5
 800979c:	080097d5 	.word	0x080097d5
 80097a0:	080097cd 	.word	0x080097cd
 80097a4:	2301      	movs	r3, #1
 80097a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80097aa:	e222      	b.n	8009bf2 <UART_SetConfig+0x5a2>
 80097ac:	2304      	movs	r3, #4
 80097ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80097b2:	e21e      	b.n	8009bf2 <UART_SetConfig+0x5a2>
 80097b4:	2308      	movs	r3, #8
 80097b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80097ba:	e21a      	b.n	8009bf2 <UART_SetConfig+0x5a2>
 80097bc:	2310      	movs	r3, #16
 80097be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80097c2:	e216      	b.n	8009bf2 <UART_SetConfig+0x5a2>
 80097c4:	2320      	movs	r3, #32
 80097c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80097ca:	e212      	b.n	8009bf2 <UART_SetConfig+0x5a2>
 80097cc:	2340      	movs	r3, #64	; 0x40
 80097ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80097d2:	e20e      	b.n	8009bf2 <UART_SetConfig+0x5a2>
 80097d4:	2380      	movs	r3, #128	; 0x80
 80097d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80097da:	e20a      	b.n	8009bf2 <UART_SetConfig+0x5a2>
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	4a6b      	ldr	r2, [pc, #428]	; (8009990 <UART_SetConfig+0x340>)
 80097e2:	4293      	cmp	r3, r2
 80097e4:	d130      	bne.n	8009848 <UART_SetConfig+0x1f8>
 80097e6:	4b69      	ldr	r3, [pc, #420]	; (800998c <UART_SetConfig+0x33c>)
 80097e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80097ea:	f003 0307 	and.w	r3, r3, #7
 80097ee:	2b05      	cmp	r3, #5
 80097f0:	d826      	bhi.n	8009840 <UART_SetConfig+0x1f0>
 80097f2:	a201      	add	r2, pc, #4	; (adr r2, 80097f8 <UART_SetConfig+0x1a8>)
 80097f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097f8:	08009811 	.word	0x08009811
 80097fc:	08009819 	.word	0x08009819
 8009800:	08009821 	.word	0x08009821
 8009804:	08009829 	.word	0x08009829
 8009808:	08009831 	.word	0x08009831
 800980c:	08009839 	.word	0x08009839
 8009810:	2300      	movs	r3, #0
 8009812:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009816:	e1ec      	b.n	8009bf2 <UART_SetConfig+0x5a2>
 8009818:	2304      	movs	r3, #4
 800981a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800981e:	e1e8      	b.n	8009bf2 <UART_SetConfig+0x5a2>
 8009820:	2308      	movs	r3, #8
 8009822:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009826:	e1e4      	b.n	8009bf2 <UART_SetConfig+0x5a2>
 8009828:	2310      	movs	r3, #16
 800982a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800982e:	e1e0      	b.n	8009bf2 <UART_SetConfig+0x5a2>
 8009830:	2320      	movs	r3, #32
 8009832:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009836:	e1dc      	b.n	8009bf2 <UART_SetConfig+0x5a2>
 8009838:	2340      	movs	r3, #64	; 0x40
 800983a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800983e:	e1d8      	b.n	8009bf2 <UART_SetConfig+0x5a2>
 8009840:	2380      	movs	r3, #128	; 0x80
 8009842:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009846:	e1d4      	b.n	8009bf2 <UART_SetConfig+0x5a2>
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	4a51      	ldr	r2, [pc, #324]	; (8009994 <UART_SetConfig+0x344>)
 800984e:	4293      	cmp	r3, r2
 8009850:	d130      	bne.n	80098b4 <UART_SetConfig+0x264>
 8009852:	4b4e      	ldr	r3, [pc, #312]	; (800998c <UART_SetConfig+0x33c>)
 8009854:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009856:	f003 0307 	and.w	r3, r3, #7
 800985a:	2b05      	cmp	r3, #5
 800985c:	d826      	bhi.n	80098ac <UART_SetConfig+0x25c>
 800985e:	a201      	add	r2, pc, #4	; (adr r2, 8009864 <UART_SetConfig+0x214>)
 8009860:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009864:	0800987d 	.word	0x0800987d
 8009868:	08009885 	.word	0x08009885
 800986c:	0800988d 	.word	0x0800988d
 8009870:	08009895 	.word	0x08009895
 8009874:	0800989d 	.word	0x0800989d
 8009878:	080098a5 	.word	0x080098a5
 800987c:	2300      	movs	r3, #0
 800987e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009882:	e1b6      	b.n	8009bf2 <UART_SetConfig+0x5a2>
 8009884:	2304      	movs	r3, #4
 8009886:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800988a:	e1b2      	b.n	8009bf2 <UART_SetConfig+0x5a2>
 800988c:	2308      	movs	r3, #8
 800988e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009892:	e1ae      	b.n	8009bf2 <UART_SetConfig+0x5a2>
 8009894:	2310      	movs	r3, #16
 8009896:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800989a:	e1aa      	b.n	8009bf2 <UART_SetConfig+0x5a2>
 800989c:	2320      	movs	r3, #32
 800989e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80098a2:	e1a6      	b.n	8009bf2 <UART_SetConfig+0x5a2>
 80098a4:	2340      	movs	r3, #64	; 0x40
 80098a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80098aa:	e1a2      	b.n	8009bf2 <UART_SetConfig+0x5a2>
 80098ac:	2380      	movs	r3, #128	; 0x80
 80098ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80098b2:	e19e      	b.n	8009bf2 <UART_SetConfig+0x5a2>
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	4a37      	ldr	r2, [pc, #220]	; (8009998 <UART_SetConfig+0x348>)
 80098ba:	4293      	cmp	r3, r2
 80098bc:	d130      	bne.n	8009920 <UART_SetConfig+0x2d0>
 80098be:	4b33      	ldr	r3, [pc, #204]	; (800998c <UART_SetConfig+0x33c>)
 80098c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80098c2:	f003 0307 	and.w	r3, r3, #7
 80098c6:	2b05      	cmp	r3, #5
 80098c8:	d826      	bhi.n	8009918 <UART_SetConfig+0x2c8>
 80098ca:	a201      	add	r2, pc, #4	; (adr r2, 80098d0 <UART_SetConfig+0x280>)
 80098cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098d0:	080098e9 	.word	0x080098e9
 80098d4:	080098f1 	.word	0x080098f1
 80098d8:	080098f9 	.word	0x080098f9
 80098dc:	08009901 	.word	0x08009901
 80098e0:	08009909 	.word	0x08009909
 80098e4:	08009911 	.word	0x08009911
 80098e8:	2300      	movs	r3, #0
 80098ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80098ee:	e180      	b.n	8009bf2 <UART_SetConfig+0x5a2>
 80098f0:	2304      	movs	r3, #4
 80098f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80098f6:	e17c      	b.n	8009bf2 <UART_SetConfig+0x5a2>
 80098f8:	2308      	movs	r3, #8
 80098fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80098fe:	e178      	b.n	8009bf2 <UART_SetConfig+0x5a2>
 8009900:	2310      	movs	r3, #16
 8009902:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009906:	e174      	b.n	8009bf2 <UART_SetConfig+0x5a2>
 8009908:	2320      	movs	r3, #32
 800990a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800990e:	e170      	b.n	8009bf2 <UART_SetConfig+0x5a2>
 8009910:	2340      	movs	r3, #64	; 0x40
 8009912:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009916:	e16c      	b.n	8009bf2 <UART_SetConfig+0x5a2>
 8009918:	2380      	movs	r3, #128	; 0x80
 800991a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800991e:	e168      	b.n	8009bf2 <UART_SetConfig+0x5a2>
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	4a1d      	ldr	r2, [pc, #116]	; (800999c <UART_SetConfig+0x34c>)
 8009926:	4293      	cmp	r3, r2
 8009928:	d142      	bne.n	80099b0 <UART_SetConfig+0x360>
 800992a:	4b18      	ldr	r3, [pc, #96]	; (800998c <UART_SetConfig+0x33c>)
 800992c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800992e:	f003 0307 	and.w	r3, r3, #7
 8009932:	2b05      	cmp	r3, #5
 8009934:	d838      	bhi.n	80099a8 <UART_SetConfig+0x358>
 8009936:	a201      	add	r2, pc, #4	; (adr r2, 800993c <UART_SetConfig+0x2ec>)
 8009938:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800993c:	08009955 	.word	0x08009955
 8009940:	0800995d 	.word	0x0800995d
 8009944:	08009965 	.word	0x08009965
 8009948:	0800996d 	.word	0x0800996d
 800994c:	08009975 	.word	0x08009975
 8009950:	080099a1 	.word	0x080099a1
 8009954:	2300      	movs	r3, #0
 8009956:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800995a:	e14a      	b.n	8009bf2 <UART_SetConfig+0x5a2>
 800995c:	2304      	movs	r3, #4
 800995e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009962:	e146      	b.n	8009bf2 <UART_SetConfig+0x5a2>
 8009964:	2308      	movs	r3, #8
 8009966:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800996a:	e142      	b.n	8009bf2 <UART_SetConfig+0x5a2>
 800996c:	2310      	movs	r3, #16
 800996e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009972:	e13e      	b.n	8009bf2 <UART_SetConfig+0x5a2>
 8009974:	2320      	movs	r3, #32
 8009976:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800997a:	e13a      	b.n	8009bf2 <UART_SetConfig+0x5a2>
 800997c:	cfff69f3 	.word	0xcfff69f3
 8009980:	58000c00 	.word	0x58000c00
 8009984:	11fff4ff 	.word	0x11fff4ff
 8009988:	40011000 	.word	0x40011000
 800998c:	58024400 	.word	0x58024400
 8009990:	40004400 	.word	0x40004400
 8009994:	40004800 	.word	0x40004800
 8009998:	40004c00 	.word	0x40004c00
 800999c:	40005000 	.word	0x40005000
 80099a0:	2340      	movs	r3, #64	; 0x40
 80099a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80099a6:	e124      	b.n	8009bf2 <UART_SetConfig+0x5a2>
 80099a8:	2380      	movs	r3, #128	; 0x80
 80099aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80099ae:	e120      	b.n	8009bf2 <UART_SetConfig+0x5a2>
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	4acc      	ldr	r2, [pc, #816]	; (8009ce8 <UART_SetConfig+0x698>)
 80099b6:	4293      	cmp	r3, r2
 80099b8:	d176      	bne.n	8009aa8 <UART_SetConfig+0x458>
 80099ba:	4bcc      	ldr	r3, [pc, #816]	; (8009cec <UART_SetConfig+0x69c>)
 80099bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80099be:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80099c2:	2b28      	cmp	r3, #40	; 0x28
 80099c4:	d86c      	bhi.n	8009aa0 <UART_SetConfig+0x450>
 80099c6:	a201      	add	r2, pc, #4	; (adr r2, 80099cc <UART_SetConfig+0x37c>)
 80099c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099cc:	08009a71 	.word	0x08009a71
 80099d0:	08009aa1 	.word	0x08009aa1
 80099d4:	08009aa1 	.word	0x08009aa1
 80099d8:	08009aa1 	.word	0x08009aa1
 80099dc:	08009aa1 	.word	0x08009aa1
 80099e0:	08009aa1 	.word	0x08009aa1
 80099e4:	08009aa1 	.word	0x08009aa1
 80099e8:	08009aa1 	.word	0x08009aa1
 80099ec:	08009a79 	.word	0x08009a79
 80099f0:	08009aa1 	.word	0x08009aa1
 80099f4:	08009aa1 	.word	0x08009aa1
 80099f8:	08009aa1 	.word	0x08009aa1
 80099fc:	08009aa1 	.word	0x08009aa1
 8009a00:	08009aa1 	.word	0x08009aa1
 8009a04:	08009aa1 	.word	0x08009aa1
 8009a08:	08009aa1 	.word	0x08009aa1
 8009a0c:	08009a81 	.word	0x08009a81
 8009a10:	08009aa1 	.word	0x08009aa1
 8009a14:	08009aa1 	.word	0x08009aa1
 8009a18:	08009aa1 	.word	0x08009aa1
 8009a1c:	08009aa1 	.word	0x08009aa1
 8009a20:	08009aa1 	.word	0x08009aa1
 8009a24:	08009aa1 	.word	0x08009aa1
 8009a28:	08009aa1 	.word	0x08009aa1
 8009a2c:	08009a89 	.word	0x08009a89
 8009a30:	08009aa1 	.word	0x08009aa1
 8009a34:	08009aa1 	.word	0x08009aa1
 8009a38:	08009aa1 	.word	0x08009aa1
 8009a3c:	08009aa1 	.word	0x08009aa1
 8009a40:	08009aa1 	.word	0x08009aa1
 8009a44:	08009aa1 	.word	0x08009aa1
 8009a48:	08009aa1 	.word	0x08009aa1
 8009a4c:	08009a91 	.word	0x08009a91
 8009a50:	08009aa1 	.word	0x08009aa1
 8009a54:	08009aa1 	.word	0x08009aa1
 8009a58:	08009aa1 	.word	0x08009aa1
 8009a5c:	08009aa1 	.word	0x08009aa1
 8009a60:	08009aa1 	.word	0x08009aa1
 8009a64:	08009aa1 	.word	0x08009aa1
 8009a68:	08009aa1 	.word	0x08009aa1
 8009a6c:	08009a99 	.word	0x08009a99
 8009a70:	2301      	movs	r3, #1
 8009a72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a76:	e0bc      	b.n	8009bf2 <UART_SetConfig+0x5a2>
 8009a78:	2304      	movs	r3, #4
 8009a7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a7e:	e0b8      	b.n	8009bf2 <UART_SetConfig+0x5a2>
 8009a80:	2308      	movs	r3, #8
 8009a82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a86:	e0b4      	b.n	8009bf2 <UART_SetConfig+0x5a2>
 8009a88:	2310      	movs	r3, #16
 8009a8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a8e:	e0b0      	b.n	8009bf2 <UART_SetConfig+0x5a2>
 8009a90:	2320      	movs	r3, #32
 8009a92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a96:	e0ac      	b.n	8009bf2 <UART_SetConfig+0x5a2>
 8009a98:	2340      	movs	r3, #64	; 0x40
 8009a9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a9e:	e0a8      	b.n	8009bf2 <UART_SetConfig+0x5a2>
 8009aa0:	2380      	movs	r3, #128	; 0x80
 8009aa2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009aa6:	e0a4      	b.n	8009bf2 <UART_SetConfig+0x5a2>
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	4a90      	ldr	r2, [pc, #576]	; (8009cf0 <UART_SetConfig+0x6a0>)
 8009aae:	4293      	cmp	r3, r2
 8009ab0:	d130      	bne.n	8009b14 <UART_SetConfig+0x4c4>
 8009ab2:	4b8e      	ldr	r3, [pc, #568]	; (8009cec <UART_SetConfig+0x69c>)
 8009ab4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ab6:	f003 0307 	and.w	r3, r3, #7
 8009aba:	2b05      	cmp	r3, #5
 8009abc:	d826      	bhi.n	8009b0c <UART_SetConfig+0x4bc>
 8009abe:	a201      	add	r2, pc, #4	; (adr r2, 8009ac4 <UART_SetConfig+0x474>)
 8009ac0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ac4:	08009add 	.word	0x08009add
 8009ac8:	08009ae5 	.word	0x08009ae5
 8009acc:	08009aed 	.word	0x08009aed
 8009ad0:	08009af5 	.word	0x08009af5
 8009ad4:	08009afd 	.word	0x08009afd
 8009ad8:	08009b05 	.word	0x08009b05
 8009adc:	2300      	movs	r3, #0
 8009ade:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ae2:	e086      	b.n	8009bf2 <UART_SetConfig+0x5a2>
 8009ae4:	2304      	movs	r3, #4
 8009ae6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009aea:	e082      	b.n	8009bf2 <UART_SetConfig+0x5a2>
 8009aec:	2308      	movs	r3, #8
 8009aee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009af2:	e07e      	b.n	8009bf2 <UART_SetConfig+0x5a2>
 8009af4:	2310      	movs	r3, #16
 8009af6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009afa:	e07a      	b.n	8009bf2 <UART_SetConfig+0x5a2>
 8009afc:	2320      	movs	r3, #32
 8009afe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b02:	e076      	b.n	8009bf2 <UART_SetConfig+0x5a2>
 8009b04:	2340      	movs	r3, #64	; 0x40
 8009b06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b0a:	e072      	b.n	8009bf2 <UART_SetConfig+0x5a2>
 8009b0c:	2380      	movs	r3, #128	; 0x80
 8009b0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b12:	e06e      	b.n	8009bf2 <UART_SetConfig+0x5a2>
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	4a76      	ldr	r2, [pc, #472]	; (8009cf4 <UART_SetConfig+0x6a4>)
 8009b1a:	4293      	cmp	r3, r2
 8009b1c:	d130      	bne.n	8009b80 <UART_SetConfig+0x530>
 8009b1e:	4b73      	ldr	r3, [pc, #460]	; (8009cec <UART_SetConfig+0x69c>)
 8009b20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b22:	f003 0307 	and.w	r3, r3, #7
 8009b26:	2b05      	cmp	r3, #5
 8009b28:	d826      	bhi.n	8009b78 <UART_SetConfig+0x528>
 8009b2a:	a201      	add	r2, pc, #4	; (adr r2, 8009b30 <UART_SetConfig+0x4e0>)
 8009b2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b30:	08009b49 	.word	0x08009b49
 8009b34:	08009b51 	.word	0x08009b51
 8009b38:	08009b59 	.word	0x08009b59
 8009b3c:	08009b61 	.word	0x08009b61
 8009b40:	08009b69 	.word	0x08009b69
 8009b44:	08009b71 	.word	0x08009b71
 8009b48:	2300      	movs	r3, #0
 8009b4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b4e:	e050      	b.n	8009bf2 <UART_SetConfig+0x5a2>
 8009b50:	2304      	movs	r3, #4
 8009b52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b56:	e04c      	b.n	8009bf2 <UART_SetConfig+0x5a2>
 8009b58:	2308      	movs	r3, #8
 8009b5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b5e:	e048      	b.n	8009bf2 <UART_SetConfig+0x5a2>
 8009b60:	2310      	movs	r3, #16
 8009b62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b66:	e044      	b.n	8009bf2 <UART_SetConfig+0x5a2>
 8009b68:	2320      	movs	r3, #32
 8009b6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b6e:	e040      	b.n	8009bf2 <UART_SetConfig+0x5a2>
 8009b70:	2340      	movs	r3, #64	; 0x40
 8009b72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b76:	e03c      	b.n	8009bf2 <UART_SetConfig+0x5a2>
 8009b78:	2380      	movs	r3, #128	; 0x80
 8009b7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b7e:	e038      	b.n	8009bf2 <UART_SetConfig+0x5a2>
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	4a5c      	ldr	r2, [pc, #368]	; (8009cf8 <UART_SetConfig+0x6a8>)
 8009b86:	4293      	cmp	r3, r2
 8009b88:	d130      	bne.n	8009bec <UART_SetConfig+0x59c>
 8009b8a:	4b58      	ldr	r3, [pc, #352]	; (8009cec <UART_SetConfig+0x69c>)
 8009b8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009b8e:	f003 0307 	and.w	r3, r3, #7
 8009b92:	2b05      	cmp	r3, #5
 8009b94:	d826      	bhi.n	8009be4 <UART_SetConfig+0x594>
 8009b96:	a201      	add	r2, pc, #4	; (adr r2, 8009b9c <UART_SetConfig+0x54c>)
 8009b98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b9c:	08009bb5 	.word	0x08009bb5
 8009ba0:	08009bbd 	.word	0x08009bbd
 8009ba4:	08009bc5 	.word	0x08009bc5
 8009ba8:	08009bcd 	.word	0x08009bcd
 8009bac:	08009bd5 	.word	0x08009bd5
 8009bb0:	08009bdd 	.word	0x08009bdd
 8009bb4:	2302      	movs	r3, #2
 8009bb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009bba:	e01a      	b.n	8009bf2 <UART_SetConfig+0x5a2>
 8009bbc:	2304      	movs	r3, #4
 8009bbe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009bc2:	e016      	b.n	8009bf2 <UART_SetConfig+0x5a2>
 8009bc4:	2308      	movs	r3, #8
 8009bc6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009bca:	e012      	b.n	8009bf2 <UART_SetConfig+0x5a2>
 8009bcc:	2310      	movs	r3, #16
 8009bce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009bd2:	e00e      	b.n	8009bf2 <UART_SetConfig+0x5a2>
 8009bd4:	2320      	movs	r3, #32
 8009bd6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009bda:	e00a      	b.n	8009bf2 <UART_SetConfig+0x5a2>
 8009bdc:	2340      	movs	r3, #64	; 0x40
 8009bde:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009be2:	e006      	b.n	8009bf2 <UART_SetConfig+0x5a2>
 8009be4:	2380      	movs	r3, #128	; 0x80
 8009be6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009bea:	e002      	b.n	8009bf2 <UART_SetConfig+0x5a2>
 8009bec:	2380      	movs	r3, #128	; 0x80
 8009bee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	4a40      	ldr	r2, [pc, #256]	; (8009cf8 <UART_SetConfig+0x6a8>)
 8009bf8:	4293      	cmp	r3, r2
 8009bfa:	f040 80ef 	bne.w	8009ddc <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009bfe:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009c02:	2b20      	cmp	r3, #32
 8009c04:	dc46      	bgt.n	8009c94 <UART_SetConfig+0x644>
 8009c06:	2b02      	cmp	r3, #2
 8009c08:	f2c0 8081 	blt.w	8009d0e <UART_SetConfig+0x6be>
 8009c0c:	3b02      	subs	r3, #2
 8009c0e:	2b1e      	cmp	r3, #30
 8009c10:	d87d      	bhi.n	8009d0e <UART_SetConfig+0x6be>
 8009c12:	a201      	add	r2, pc, #4	; (adr r2, 8009c18 <UART_SetConfig+0x5c8>)
 8009c14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c18:	08009c9b 	.word	0x08009c9b
 8009c1c:	08009d0f 	.word	0x08009d0f
 8009c20:	08009ca3 	.word	0x08009ca3
 8009c24:	08009d0f 	.word	0x08009d0f
 8009c28:	08009d0f 	.word	0x08009d0f
 8009c2c:	08009d0f 	.word	0x08009d0f
 8009c30:	08009cb3 	.word	0x08009cb3
 8009c34:	08009d0f 	.word	0x08009d0f
 8009c38:	08009d0f 	.word	0x08009d0f
 8009c3c:	08009d0f 	.word	0x08009d0f
 8009c40:	08009d0f 	.word	0x08009d0f
 8009c44:	08009d0f 	.word	0x08009d0f
 8009c48:	08009d0f 	.word	0x08009d0f
 8009c4c:	08009d0f 	.word	0x08009d0f
 8009c50:	08009cc3 	.word	0x08009cc3
 8009c54:	08009d0f 	.word	0x08009d0f
 8009c58:	08009d0f 	.word	0x08009d0f
 8009c5c:	08009d0f 	.word	0x08009d0f
 8009c60:	08009d0f 	.word	0x08009d0f
 8009c64:	08009d0f 	.word	0x08009d0f
 8009c68:	08009d0f 	.word	0x08009d0f
 8009c6c:	08009d0f 	.word	0x08009d0f
 8009c70:	08009d0f 	.word	0x08009d0f
 8009c74:	08009d0f 	.word	0x08009d0f
 8009c78:	08009d0f 	.word	0x08009d0f
 8009c7c:	08009d0f 	.word	0x08009d0f
 8009c80:	08009d0f 	.word	0x08009d0f
 8009c84:	08009d0f 	.word	0x08009d0f
 8009c88:	08009d0f 	.word	0x08009d0f
 8009c8c:	08009d0f 	.word	0x08009d0f
 8009c90:	08009d01 	.word	0x08009d01
 8009c94:	2b40      	cmp	r3, #64	; 0x40
 8009c96:	d036      	beq.n	8009d06 <UART_SetConfig+0x6b6>
 8009c98:	e039      	b.n	8009d0e <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8009c9a:	f7fd fa85 	bl	80071a8 <HAL_RCCEx_GetD3PCLK1Freq>
 8009c9e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009ca0:	e03b      	b.n	8009d1a <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009ca2:	f107 0314 	add.w	r3, r7, #20
 8009ca6:	4618      	mov	r0, r3
 8009ca8:	f7fd fa94 	bl	80071d4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009cac:	69bb      	ldr	r3, [r7, #24]
 8009cae:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009cb0:	e033      	b.n	8009d1a <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009cb2:	f107 0308 	add.w	r3, r7, #8
 8009cb6:	4618      	mov	r0, r3
 8009cb8:	f7fd fbe0 	bl	800747c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009cc0:	e02b      	b.n	8009d1a <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009cc2:	4b0a      	ldr	r3, [pc, #40]	; (8009cec <UART_SetConfig+0x69c>)
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	f003 0320 	and.w	r3, r3, #32
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d009      	beq.n	8009ce2 <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009cce:	4b07      	ldr	r3, [pc, #28]	; (8009cec <UART_SetConfig+0x69c>)
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	08db      	lsrs	r3, r3, #3
 8009cd4:	f003 0303 	and.w	r3, r3, #3
 8009cd8:	4a08      	ldr	r2, [pc, #32]	; (8009cfc <UART_SetConfig+0x6ac>)
 8009cda:	fa22 f303 	lsr.w	r3, r2, r3
 8009cde:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009ce0:	e01b      	b.n	8009d1a <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 8009ce2:	4b06      	ldr	r3, [pc, #24]	; (8009cfc <UART_SetConfig+0x6ac>)
 8009ce4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009ce6:	e018      	b.n	8009d1a <UART_SetConfig+0x6ca>
 8009ce8:	40011400 	.word	0x40011400
 8009cec:	58024400 	.word	0x58024400
 8009cf0:	40007800 	.word	0x40007800
 8009cf4:	40007c00 	.word	0x40007c00
 8009cf8:	58000c00 	.word	0x58000c00
 8009cfc:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009d00:	4bc4      	ldr	r3, [pc, #784]	; (800a014 <UART_SetConfig+0x9c4>)
 8009d02:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009d04:	e009      	b.n	8009d1a <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009d06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009d0a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009d0c:	e005      	b.n	8009d1a <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 8009d0e:	2300      	movs	r3, #0
 8009d10:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8009d12:	2301      	movs	r3, #1
 8009d14:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8009d18:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009d1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	f000 81da 	beq.w	800a0d6 <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d26:	4abc      	ldr	r2, [pc, #752]	; (800a018 <UART_SetConfig+0x9c8>)
 8009d28:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009d2c:	461a      	mov	r2, r3
 8009d2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d30:	fbb3 f3f2 	udiv	r3, r3, r2
 8009d34:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	685a      	ldr	r2, [r3, #4]
 8009d3a:	4613      	mov	r3, r2
 8009d3c:	005b      	lsls	r3, r3, #1
 8009d3e:	4413      	add	r3, r2
 8009d40:	6a3a      	ldr	r2, [r7, #32]
 8009d42:	429a      	cmp	r2, r3
 8009d44:	d305      	bcc.n	8009d52 <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	685b      	ldr	r3, [r3, #4]
 8009d4a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009d4c:	6a3a      	ldr	r2, [r7, #32]
 8009d4e:	429a      	cmp	r2, r3
 8009d50:	d903      	bls.n	8009d5a <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 8009d52:	2301      	movs	r3, #1
 8009d54:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8009d58:	e1bd      	b.n	800a0d6 <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009d5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d5c:	4618      	mov	r0, r3
 8009d5e:	f04f 0100 	mov.w	r1, #0
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d66:	4aac      	ldr	r2, [pc, #688]	; (800a018 <UART_SetConfig+0x9c8>)
 8009d68:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009d6c:	b29a      	uxth	r2, r3
 8009d6e:	f04f 0300 	mov.w	r3, #0
 8009d72:	f7f6 fab1 	bl	80002d8 <__aeabi_uldivmod>
 8009d76:	4602      	mov	r2, r0
 8009d78:	460b      	mov	r3, r1
 8009d7a:	4610      	mov	r0, r2
 8009d7c:	4619      	mov	r1, r3
 8009d7e:	f04f 0200 	mov.w	r2, #0
 8009d82:	f04f 0300 	mov.w	r3, #0
 8009d86:	020b      	lsls	r3, r1, #8
 8009d88:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009d8c:	0202      	lsls	r2, r0, #8
 8009d8e:	6879      	ldr	r1, [r7, #4]
 8009d90:	6849      	ldr	r1, [r1, #4]
 8009d92:	0849      	lsrs	r1, r1, #1
 8009d94:	4608      	mov	r0, r1
 8009d96:	f04f 0100 	mov.w	r1, #0
 8009d9a:	1814      	adds	r4, r2, r0
 8009d9c:	eb43 0501 	adc.w	r5, r3, r1
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	685b      	ldr	r3, [r3, #4]
 8009da4:	461a      	mov	r2, r3
 8009da6:	f04f 0300 	mov.w	r3, #0
 8009daa:	4620      	mov	r0, r4
 8009dac:	4629      	mov	r1, r5
 8009dae:	f7f6 fa93 	bl	80002d8 <__aeabi_uldivmod>
 8009db2:	4602      	mov	r2, r0
 8009db4:	460b      	mov	r3, r1
 8009db6:	4613      	mov	r3, r2
 8009db8:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009dba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dbc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009dc0:	d308      	bcc.n	8009dd4 <UART_SetConfig+0x784>
 8009dc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dc4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009dc8:	d204      	bcs.n	8009dd4 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009dd0:	60da      	str	r2, [r3, #12]
 8009dd2:	e180      	b.n	800a0d6 <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 8009dd4:	2301      	movs	r3, #1
 8009dd6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8009dda:	e17c      	b.n	800a0d6 <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	69db      	ldr	r3, [r3, #28]
 8009de0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009de4:	f040 80bf 	bne.w	8009f66 <UART_SetConfig+0x916>
  {
    switch (clocksource)
 8009de8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009dec:	2b20      	cmp	r3, #32
 8009dee:	dc49      	bgt.n	8009e84 <UART_SetConfig+0x834>
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	db7c      	blt.n	8009eee <UART_SetConfig+0x89e>
 8009df4:	2b20      	cmp	r3, #32
 8009df6:	d87a      	bhi.n	8009eee <UART_SetConfig+0x89e>
 8009df8:	a201      	add	r2, pc, #4	; (adr r2, 8009e00 <UART_SetConfig+0x7b0>)
 8009dfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009dfe:	bf00      	nop
 8009e00:	08009e8b 	.word	0x08009e8b
 8009e04:	08009e93 	.word	0x08009e93
 8009e08:	08009eef 	.word	0x08009eef
 8009e0c:	08009eef 	.word	0x08009eef
 8009e10:	08009e9b 	.word	0x08009e9b
 8009e14:	08009eef 	.word	0x08009eef
 8009e18:	08009eef 	.word	0x08009eef
 8009e1c:	08009eef 	.word	0x08009eef
 8009e20:	08009eab 	.word	0x08009eab
 8009e24:	08009eef 	.word	0x08009eef
 8009e28:	08009eef 	.word	0x08009eef
 8009e2c:	08009eef 	.word	0x08009eef
 8009e30:	08009eef 	.word	0x08009eef
 8009e34:	08009eef 	.word	0x08009eef
 8009e38:	08009eef 	.word	0x08009eef
 8009e3c:	08009eef 	.word	0x08009eef
 8009e40:	08009ebb 	.word	0x08009ebb
 8009e44:	08009eef 	.word	0x08009eef
 8009e48:	08009eef 	.word	0x08009eef
 8009e4c:	08009eef 	.word	0x08009eef
 8009e50:	08009eef 	.word	0x08009eef
 8009e54:	08009eef 	.word	0x08009eef
 8009e58:	08009eef 	.word	0x08009eef
 8009e5c:	08009eef 	.word	0x08009eef
 8009e60:	08009eef 	.word	0x08009eef
 8009e64:	08009eef 	.word	0x08009eef
 8009e68:	08009eef 	.word	0x08009eef
 8009e6c:	08009eef 	.word	0x08009eef
 8009e70:	08009eef 	.word	0x08009eef
 8009e74:	08009eef 	.word	0x08009eef
 8009e78:	08009eef 	.word	0x08009eef
 8009e7c:	08009eef 	.word	0x08009eef
 8009e80:	08009ee1 	.word	0x08009ee1
 8009e84:	2b40      	cmp	r3, #64	; 0x40
 8009e86:	d02e      	beq.n	8009ee6 <UART_SetConfig+0x896>
 8009e88:	e031      	b.n	8009eee <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009e8a:	f7fb fd4f 	bl	800592c <HAL_RCC_GetPCLK1Freq>
 8009e8e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009e90:	e033      	b.n	8009efa <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009e92:	f7fb fd61 	bl	8005958 <HAL_RCC_GetPCLK2Freq>
 8009e96:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009e98:	e02f      	b.n	8009efa <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009e9a:	f107 0314 	add.w	r3, r7, #20
 8009e9e:	4618      	mov	r0, r3
 8009ea0:	f7fd f998 	bl	80071d4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009ea4:	69bb      	ldr	r3, [r7, #24]
 8009ea6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009ea8:	e027      	b.n	8009efa <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009eaa:	f107 0308 	add.w	r3, r7, #8
 8009eae:	4618      	mov	r0, r3
 8009eb0:	f7fd fae4 	bl	800747c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009eb8:	e01f      	b.n	8009efa <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009eba:	4b58      	ldr	r3, [pc, #352]	; (800a01c <UART_SetConfig+0x9cc>)
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	f003 0320 	and.w	r3, r3, #32
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d009      	beq.n	8009eda <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009ec6:	4b55      	ldr	r3, [pc, #340]	; (800a01c <UART_SetConfig+0x9cc>)
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	08db      	lsrs	r3, r3, #3
 8009ecc:	f003 0303 	and.w	r3, r3, #3
 8009ed0:	4a53      	ldr	r2, [pc, #332]	; (800a020 <UART_SetConfig+0x9d0>)
 8009ed2:	fa22 f303 	lsr.w	r3, r2, r3
 8009ed6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009ed8:	e00f      	b.n	8009efa <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 8009eda:	4b51      	ldr	r3, [pc, #324]	; (800a020 <UART_SetConfig+0x9d0>)
 8009edc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009ede:	e00c      	b.n	8009efa <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009ee0:	4b4c      	ldr	r3, [pc, #304]	; (800a014 <UART_SetConfig+0x9c4>)
 8009ee2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009ee4:	e009      	b.n	8009efa <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009ee6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009eea:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009eec:	e005      	b.n	8009efa <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 8009eee:	2300      	movs	r3, #0
 8009ef0:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8009ef2:	2301      	movs	r3, #1
 8009ef4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8009ef8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009efa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	f000 80ea 	beq.w	800a0d6 <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f06:	4a44      	ldr	r2, [pc, #272]	; (800a018 <UART_SetConfig+0x9c8>)
 8009f08:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009f0c:	461a      	mov	r2, r3
 8009f0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f10:	fbb3 f3f2 	udiv	r3, r3, r2
 8009f14:	005a      	lsls	r2, r3, #1
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	685b      	ldr	r3, [r3, #4]
 8009f1a:	085b      	lsrs	r3, r3, #1
 8009f1c:	441a      	add	r2, r3
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	685b      	ldr	r3, [r3, #4]
 8009f22:	fbb2 f3f3 	udiv	r3, r2, r3
 8009f26:	b29b      	uxth	r3, r3
 8009f28:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009f2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f2c:	2b0f      	cmp	r3, #15
 8009f2e:	d916      	bls.n	8009f5e <UART_SetConfig+0x90e>
 8009f30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009f36:	d212      	bcs.n	8009f5e <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009f38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f3a:	b29b      	uxth	r3, r3
 8009f3c:	f023 030f 	bic.w	r3, r3, #15
 8009f40:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009f42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f44:	085b      	lsrs	r3, r3, #1
 8009f46:	b29b      	uxth	r3, r3
 8009f48:	f003 0307 	and.w	r3, r3, #7
 8009f4c:	b29a      	uxth	r2, r3
 8009f4e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009f50:	4313      	orrs	r3, r2
 8009f52:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8009f5a:	60da      	str	r2, [r3, #12]
 8009f5c:	e0bb      	b.n	800a0d6 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8009f5e:	2301      	movs	r3, #1
 8009f60:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8009f64:	e0b7      	b.n	800a0d6 <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009f66:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009f6a:	2b20      	cmp	r3, #32
 8009f6c:	dc4a      	bgt.n	800a004 <UART_SetConfig+0x9b4>
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	f2c0 8086 	blt.w	800a080 <UART_SetConfig+0xa30>
 8009f74:	2b20      	cmp	r3, #32
 8009f76:	f200 8083 	bhi.w	800a080 <UART_SetConfig+0xa30>
 8009f7a:	a201      	add	r2, pc, #4	; (adr r2, 8009f80 <UART_SetConfig+0x930>)
 8009f7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f80:	0800a00b 	.word	0x0800a00b
 8009f84:	0800a025 	.word	0x0800a025
 8009f88:	0800a081 	.word	0x0800a081
 8009f8c:	0800a081 	.word	0x0800a081
 8009f90:	0800a02d 	.word	0x0800a02d
 8009f94:	0800a081 	.word	0x0800a081
 8009f98:	0800a081 	.word	0x0800a081
 8009f9c:	0800a081 	.word	0x0800a081
 8009fa0:	0800a03d 	.word	0x0800a03d
 8009fa4:	0800a081 	.word	0x0800a081
 8009fa8:	0800a081 	.word	0x0800a081
 8009fac:	0800a081 	.word	0x0800a081
 8009fb0:	0800a081 	.word	0x0800a081
 8009fb4:	0800a081 	.word	0x0800a081
 8009fb8:	0800a081 	.word	0x0800a081
 8009fbc:	0800a081 	.word	0x0800a081
 8009fc0:	0800a04d 	.word	0x0800a04d
 8009fc4:	0800a081 	.word	0x0800a081
 8009fc8:	0800a081 	.word	0x0800a081
 8009fcc:	0800a081 	.word	0x0800a081
 8009fd0:	0800a081 	.word	0x0800a081
 8009fd4:	0800a081 	.word	0x0800a081
 8009fd8:	0800a081 	.word	0x0800a081
 8009fdc:	0800a081 	.word	0x0800a081
 8009fe0:	0800a081 	.word	0x0800a081
 8009fe4:	0800a081 	.word	0x0800a081
 8009fe8:	0800a081 	.word	0x0800a081
 8009fec:	0800a081 	.word	0x0800a081
 8009ff0:	0800a081 	.word	0x0800a081
 8009ff4:	0800a081 	.word	0x0800a081
 8009ff8:	0800a081 	.word	0x0800a081
 8009ffc:	0800a081 	.word	0x0800a081
 800a000:	0800a073 	.word	0x0800a073
 800a004:	2b40      	cmp	r3, #64	; 0x40
 800a006:	d037      	beq.n	800a078 <UART_SetConfig+0xa28>
 800a008:	e03a      	b.n	800a080 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a00a:	f7fb fc8f 	bl	800592c <HAL_RCC_GetPCLK1Freq>
 800a00e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a010:	e03c      	b.n	800a08c <UART_SetConfig+0xa3c>
 800a012:	bf00      	nop
 800a014:	003d0900 	.word	0x003d0900
 800a018:	0800ca00 	.word	0x0800ca00
 800a01c:	58024400 	.word	0x58024400
 800a020:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a024:	f7fb fc98 	bl	8005958 <HAL_RCC_GetPCLK2Freq>
 800a028:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a02a:	e02f      	b.n	800a08c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a02c:	f107 0314 	add.w	r3, r7, #20
 800a030:	4618      	mov	r0, r3
 800a032:	f7fd f8cf 	bl	80071d4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a036:	69bb      	ldr	r3, [r7, #24]
 800a038:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a03a:	e027      	b.n	800a08c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a03c:	f107 0308 	add.w	r3, r7, #8
 800a040:	4618      	mov	r0, r3
 800a042:	f7fd fa1b 	bl	800747c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a04a:	e01f      	b.n	800a08c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a04c:	4b2c      	ldr	r3, [pc, #176]	; (800a100 <UART_SetConfig+0xab0>)
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	f003 0320 	and.w	r3, r3, #32
 800a054:	2b00      	cmp	r3, #0
 800a056:	d009      	beq.n	800a06c <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a058:	4b29      	ldr	r3, [pc, #164]	; (800a100 <UART_SetConfig+0xab0>)
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	08db      	lsrs	r3, r3, #3
 800a05e:	f003 0303 	and.w	r3, r3, #3
 800a062:	4a28      	ldr	r2, [pc, #160]	; (800a104 <UART_SetConfig+0xab4>)
 800a064:	fa22 f303 	lsr.w	r3, r2, r3
 800a068:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a06a:	e00f      	b.n	800a08c <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 800a06c:	4b25      	ldr	r3, [pc, #148]	; (800a104 <UART_SetConfig+0xab4>)
 800a06e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a070:	e00c      	b.n	800a08c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a072:	4b25      	ldr	r3, [pc, #148]	; (800a108 <UART_SetConfig+0xab8>)
 800a074:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a076:	e009      	b.n	800a08c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a078:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a07c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a07e:	e005      	b.n	800a08c <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 800a080:	2300      	movs	r3, #0
 800a082:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800a084:	2301      	movs	r3, #1
 800a086:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800a08a:	bf00      	nop
    }

    if (pclk != 0U)
 800a08c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d021      	beq.n	800a0d6 <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a096:	4a1d      	ldr	r2, [pc, #116]	; (800a10c <UART_SetConfig+0xabc>)
 800a098:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a09c:	461a      	mov	r2, r3
 800a09e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0a0:	fbb3 f2f2 	udiv	r2, r3, r2
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	685b      	ldr	r3, [r3, #4]
 800a0a8:	085b      	lsrs	r3, r3, #1
 800a0aa:	441a      	add	r2, r3
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	685b      	ldr	r3, [r3, #4]
 800a0b0:	fbb2 f3f3 	udiv	r3, r2, r3
 800a0b4:	b29b      	uxth	r3, r3
 800a0b6:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a0b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0ba:	2b0f      	cmp	r3, #15
 800a0bc:	d908      	bls.n	800a0d0 <UART_SetConfig+0xa80>
 800a0be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a0c4:	d204      	bcs.n	800a0d0 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a0cc:	60da      	str	r2, [r3, #12]
 800a0ce:	e002      	b.n	800a0d6 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800a0d0:	2301      	movs	r3, #1
 800a0d2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	2201      	movs	r2, #1
 800a0da:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	2201      	movs	r2, #1
 800a0e2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	2200      	movs	r2, #0
 800a0ea:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	2200      	movs	r2, #0
 800a0f0:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800a0f2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800a0f6:	4618      	mov	r0, r3
 800a0f8:	3738      	adds	r7, #56	; 0x38
 800a0fa:	46bd      	mov	sp, r7
 800a0fc:	bdb0      	pop	{r4, r5, r7, pc}
 800a0fe:	bf00      	nop
 800a100:	58024400 	.word	0x58024400
 800a104:	03d09000 	.word	0x03d09000
 800a108:	003d0900 	.word	0x003d0900
 800a10c:	0800ca00 	.word	0x0800ca00

0800a110 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a110:	b480      	push	{r7}
 800a112:	b083      	sub	sp, #12
 800a114:	af00      	add	r7, sp, #0
 800a116:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a11c:	f003 0301 	and.w	r3, r3, #1
 800a120:	2b00      	cmp	r3, #0
 800a122:	d00a      	beq.n	800a13a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	685b      	ldr	r3, [r3, #4]
 800a12a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	430a      	orrs	r2, r1
 800a138:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a13e:	f003 0302 	and.w	r3, r3, #2
 800a142:	2b00      	cmp	r3, #0
 800a144:	d00a      	beq.n	800a15c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	685b      	ldr	r3, [r3, #4]
 800a14c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	430a      	orrs	r2, r1
 800a15a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a160:	f003 0304 	and.w	r3, r3, #4
 800a164:	2b00      	cmp	r3, #0
 800a166:	d00a      	beq.n	800a17e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	685b      	ldr	r3, [r3, #4]
 800a16e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	430a      	orrs	r2, r1
 800a17c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a182:	f003 0308 	and.w	r3, r3, #8
 800a186:	2b00      	cmp	r3, #0
 800a188:	d00a      	beq.n	800a1a0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	685b      	ldr	r3, [r3, #4]
 800a190:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	430a      	orrs	r2, r1
 800a19e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1a4:	f003 0310 	and.w	r3, r3, #16
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d00a      	beq.n	800a1c2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	689b      	ldr	r3, [r3, #8]
 800a1b2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	430a      	orrs	r2, r1
 800a1c0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1c6:	f003 0320 	and.w	r3, r3, #32
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d00a      	beq.n	800a1e4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	689b      	ldr	r3, [r3, #8]
 800a1d4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	430a      	orrs	r2, r1
 800a1e2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d01a      	beq.n	800a226 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	685b      	ldr	r3, [r3, #4]
 800a1f6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	430a      	orrs	r2, r1
 800a204:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a20a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a20e:	d10a      	bne.n	800a226 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	685b      	ldr	r3, [r3, #4]
 800a216:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	430a      	orrs	r2, r1
 800a224:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a22a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d00a      	beq.n	800a248 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	685b      	ldr	r3, [r3, #4]
 800a238:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	430a      	orrs	r2, r1
 800a246:	605a      	str	r2, [r3, #4]
  }
}
 800a248:	bf00      	nop
 800a24a:	370c      	adds	r7, #12
 800a24c:	46bd      	mov	sp, r7
 800a24e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a252:	4770      	bx	lr

0800a254 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a254:	b580      	push	{r7, lr}
 800a256:	b086      	sub	sp, #24
 800a258:	af02      	add	r7, sp, #8
 800a25a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	2200      	movs	r2, #0
 800a260:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a264:	f7f7 f962 	bl	800152c <HAL_GetTick>
 800a268:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	f003 0308 	and.w	r3, r3, #8
 800a274:	2b08      	cmp	r3, #8
 800a276:	d10e      	bne.n	800a296 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a278:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a27c:	9300      	str	r3, [sp, #0]
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	2200      	movs	r2, #0
 800a282:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a286:	6878      	ldr	r0, [r7, #4]
 800a288:	f000 f82f 	bl	800a2ea <UART_WaitOnFlagUntilTimeout>
 800a28c:	4603      	mov	r3, r0
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d001      	beq.n	800a296 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a292:	2303      	movs	r3, #3
 800a294:	e025      	b.n	800a2e2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	f003 0304 	and.w	r3, r3, #4
 800a2a0:	2b04      	cmp	r3, #4
 800a2a2:	d10e      	bne.n	800a2c2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a2a4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a2a8:	9300      	str	r3, [sp, #0]
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	2200      	movs	r2, #0
 800a2ae:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a2b2:	6878      	ldr	r0, [r7, #4]
 800a2b4:	f000 f819 	bl	800a2ea <UART_WaitOnFlagUntilTimeout>
 800a2b8:	4603      	mov	r3, r0
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d001      	beq.n	800a2c2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a2be:	2303      	movs	r3, #3
 800a2c0:	e00f      	b.n	800a2e2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	2220      	movs	r2, #32
 800a2c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	2220      	movs	r2, #32
 800a2ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	2200      	movs	r2, #0
 800a2d6:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	2200      	movs	r2, #0
 800a2dc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a2e0:	2300      	movs	r3, #0
}
 800a2e2:	4618      	mov	r0, r3
 800a2e4:	3710      	adds	r7, #16
 800a2e6:	46bd      	mov	sp, r7
 800a2e8:	bd80      	pop	{r7, pc}

0800a2ea <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a2ea:	b580      	push	{r7, lr}
 800a2ec:	b084      	sub	sp, #16
 800a2ee:	af00      	add	r7, sp, #0
 800a2f0:	60f8      	str	r0, [r7, #12]
 800a2f2:	60b9      	str	r1, [r7, #8]
 800a2f4:	603b      	str	r3, [r7, #0]
 800a2f6:	4613      	mov	r3, r2
 800a2f8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a2fa:	e062      	b.n	800a3c2 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a2fc:	69bb      	ldr	r3, [r7, #24]
 800a2fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a302:	d05e      	beq.n	800a3c2 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a304:	f7f7 f912 	bl	800152c <HAL_GetTick>
 800a308:	4602      	mov	r2, r0
 800a30a:	683b      	ldr	r3, [r7, #0]
 800a30c:	1ad3      	subs	r3, r2, r3
 800a30e:	69ba      	ldr	r2, [r7, #24]
 800a310:	429a      	cmp	r2, r3
 800a312:	d302      	bcc.n	800a31a <UART_WaitOnFlagUntilTimeout+0x30>
 800a314:	69bb      	ldr	r3, [r7, #24]
 800a316:	2b00      	cmp	r3, #0
 800a318:	d11d      	bne.n	800a356 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	681a      	ldr	r2, [r3, #0]
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a328:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	689a      	ldr	r2, [r3, #8]
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	f022 0201 	bic.w	r2, r2, #1
 800a338:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	2220      	movs	r2, #32
 800a33e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	2220      	movs	r2, #32
 800a346:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	2200      	movs	r2, #0
 800a34e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800a352:	2303      	movs	r3, #3
 800a354:	e045      	b.n	800a3e2 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	f003 0304 	and.w	r3, r3, #4
 800a360:	2b00      	cmp	r3, #0
 800a362:	d02e      	beq.n	800a3c2 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	69db      	ldr	r3, [r3, #28]
 800a36a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a36e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a372:	d126      	bne.n	800a3c2 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a37c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	681a      	ldr	r2, [r3, #0]
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a38c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	689a      	ldr	r2, [r3, #8]
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	f022 0201 	bic.w	r2, r2, #1
 800a39c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	2220      	movs	r2, #32
 800a3a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	2220      	movs	r2, #32
 800a3aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	2220      	movs	r2, #32
 800a3b2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	2200      	movs	r2, #0
 800a3ba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800a3be:	2303      	movs	r3, #3
 800a3c0:	e00f      	b.n	800a3e2 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	69da      	ldr	r2, [r3, #28]
 800a3c8:	68bb      	ldr	r3, [r7, #8]
 800a3ca:	4013      	ands	r3, r2
 800a3cc:	68ba      	ldr	r2, [r7, #8]
 800a3ce:	429a      	cmp	r2, r3
 800a3d0:	bf0c      	ite	eq
 800a3d2:	2301      	moveq	r3, #1
 800a3d4:	2300      	movne	r3, #0
 800a3d6:	b2db      	uxtb	r3, r3
 800a3d8:	461a      	mov	r2, r3
 800a3da:	79fb      	ldrb	r3, [r7, #7]
 800a3dc:	429a      	cmp	r2, r3
 800a3de:	d08d      	beq.n	800a2fc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a3e0:	2300      	movs	r3, #0
}
 800a3e2:	4618      	mov	r0, r3
 800a3e4:	3710      	adds	r7, #16
 800a3e6:	46bd      	mov	sp, r7
 800a3e8:	bd80      	pop	{r7, pc}

0800a3ea <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a3ea:	b480      	push	{r7}
 800a3ec:	b083      	sub	sp, #12
 800a3ee:	af00      	add	r7, sp, #0
 800a3f0:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	681a      	ldr	r2, [r3, #0]
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800a400:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	689a      	ldr	r2, [r3, #8]
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800a410:	609a      	str	r2, [r3, #8]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	2220      	movs	r2, #32
 800a416:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800a41a:	bf00      	nop
 800a41c:	370c      	adds	r7, #12
 800a41e:	46bd      	mov	sp, r7
 800a420:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a424:	4770      	bx	lr
	...

0800a428 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a428:	b480      	push	{r7}
 800a42a:	b083      	sub	sp, #12
 800a42c:	af00      	add	r7, sp, #0
 800a42e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	681a      	ldr	r2, [r3, #0]
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800a43e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	6899      	ldr	r1, [r3, #8]
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	681a      	ldr	r2, [r3, #0]
 800a44a:	4b0f      	ldr	r3, [pc, #60]	; (800a488 <UART_EndRxTransfer+0x60>)
 800a44c:	400b      	ands	r3, r1
 800a44e:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a454:	2b01      	cmp	r3, #1
 800a456:	d107      	bne.n	800a468 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	681a      	ldr	r2, [r3, #0]
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	f022 0210 	bic.w	r2, r2, #16
 800a466:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	2220      	movs	r2, #32
 800a46c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	2200      	movs	r2, #0
 800a474:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	2200      	movs	r2, #0
 800a47a:	671a      	str	r2, [r3, #112]	; 0x70
}
 800a47c:	bf00      	nop
 800a47e:	370c      	adds	r7, #12
 800a480:	46bd      	mov	sp, r7
 800a482:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a486:	4770      	bx	lr
 800a488:	effffffe 	.word	0xeffffffe

0800a48c <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a48c:	b580      	push	{r7, lr}
 800a48e:	b084      	sub	sp, #16
 800a490:	af00      	add	r7, sp, #0
 800a492:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a498:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	69db      	ldr	r3, [r3, #28]
 800a49e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a4a2:	d014      	beq.n	800a4ce <UART_DMATransmitCplt+0x42>
  {
    huart->TxXferCount = 0U;
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	2200      	movs	r2, #0
 800a4a8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	689a      	ldr	r2, [r3, #8]
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a4ba:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	681a      	ldr	r2, [r3, #0]
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a4ca:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a4cc:	e002      	b.n	800a4d4 <UART_DMATransmitCplt+0x48>
    HAL_UART_TxCpltCallback(huart);
 800a4ce:	68f8      	ldr	r0, [r7, #12]
 800a4d0:	f7ff f894 	bl	80095fc <HAL_UART_TxCpltCallback>
}
 800a4d4:	bf00      	nop
 800a4d6:	3710      	adds	r7, #16
 800a4d8:	46bd      	mov	sp, r7
 800a4da:	bd80      	pop	{r7, pc}

0800a4dc <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a4dc:	b580      	push	{r7, lr}
 800a4de:	b084      	sub	sp, #16
 800a4e0:	af00      	add	r7, sp, #0
 800a4e2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4e8:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800a4ea:	68f8      	ldr	r0, [r7, #12]
 800a4ec:	f7ff f890 	bl	8009610 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a4f0:	bf00      	nop
 800a4f2:	3710      	adds	r7, #16
 800a4f4:	46bd      	mov	sp, r7
 800a4f6:	bd80      	pop	{r7, pc}

0800a4f8 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a4f8:	b580      	push	{r7, lr}
 800a4fa:	b086      	sub	sp, #24
 800a4fc:	af00      	add	r7, sp, #0
 800a4fe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a504:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800a506:	697b      	ldr	r3, [r7, #20]
 800a508:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a50c:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800a50e:	697b      	ldr	r3, [r7, #20]
 800a510:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a514:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800a516:	697b      	ldr	r3, [r7, #20]
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	689b      	ldr	r3, [r3, #8]
 800a51c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a520:	2b80      	cmp	r3, #128	; 0x80
 800a522:	d109      	bne.n	800a538 <UART_DMAError+0x40>
 800a524:	693b      	ldr	r3, [r7, #16]
 800a526:	2b21      	cmp	r3, #33	; 0x21
 800a528:	d106      	bne.n	800a538 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800a52a:	697b      	ldr	r3, [r7, #20]
 800a52c:	2200      	movs	r2, #0
 800a52e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800a532:	6978      	ldr	r0, [r7, #20]
 800a534:	f7ff ff59 	bl	800a3ea <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800a538:	697b      	ldr	r3, [r7, #20]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	689b      	ldr	r3, [r3, #8]
 800a53e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a542:	2b40      	cmp	r3, #64	; 0x40
 800a544:	d109      	bne.n	800a55a <UART_DMAError+0x62>
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	2b22      	cmp	r3, #34	; 0x22
 800a54a:	d106      	bne.n	800a55a <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800a54c:	697b      	ldr	r3, [r7, #20]
 800a54e:	2200      	movs	r2, #0
 800a550:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800a554:	6978      	ldr	r0, [r7, #20]
 800a556:	f7ff ff67 	bl	800a428 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a55a:	697b      	ldr	r3, [r7, #20]
 800a55c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a560:	f043 0210 	orr.w	r2, r3, #16
 800a564:	697b      	ldr	r3, [r7, #20]
 800a566:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a56a:	6978      	ldr	r0, [r7, #20]
 800a56c:	f7ff f85a 	bl	8009624 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a570:	bf00      	nop
 800a572:	3718      	adds	r7, #24
 800a574:	46bd      	mov	sp, r7
 800a576:	bd80      	pop	{r7, pc}

0800a578 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a578:	b580      	push	{r7, lr}
 800a57a:	b084      	sub	sp, #16
 800a57c:	af00      	add	r7, sp, #0
 800a57e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a584:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	2200      	movs	r2, #0
 800a58a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	2200      	movs	r2, #0
 800a592:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a596:	68f8      	ldr	r0, [r7, #12]
 800a598:	f7ff f844 	bl	8009624 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a59c:	bf00      	nop
 800a59e:	3710      	adds	r7, #16
 800a5a0:	46bd      	mov	sp, r7
 800a5a2:	bd80      	pop	{r7, pc}

0800a5a4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a5a4:	b580      	push	{r7, lr}
 800a5a6:	b082      	sub	sp, #8
 800a5a8:	af00      	add	r7, sp, #0
 800a5aa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	681a      	ldr	r2, [r3, #0]
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a5ba:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	2220      	movs	r2, #32
 800a5c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	2200      	movs	r2, #0
 800a5c8:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a5ca:	6878      	ldr	r0, [r7, #4]
 800a5cc:	f7ff f816 	bl	80095fc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a5d0:	bf00      	nop
 800a5d2:	3708      	adds	r7, #8
 800a5d4:	46bd      	mov	sp, r7
 800a5d6:	bd80      	pop	{r7, pc}

0800a5d8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a5d8:	b480      	push	{r7}
 800a5da:	b083      	sub	sp, #12
 800a5dc:	af00      	add	r7, sp, #0
 800a5de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a5e0:	bf00      	nop
 800a5e2:	370c      	adds	r7, #12
 800a5e4:	46bd      	mov	sp, r7
 800a5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ea:	4770      	bx	lr

0800a5ec <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800a5ec:	b480      	push	{r7}
 800a5ee:	b083      	sub	sp, #12
 800a5f0:	af00      	add	r7, sp, #0
 800a5f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800a5f4:	bf00      	nop
 800a5f6:	370c      	adds	r7, #12
 800a5f8:	46bd      	mov	sp, r7
 800a5fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5fe:	4770      	bx	lr

0800a600 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800a600:	b480      	push	{r7}
 800a602:	b083      	sub	sp, #12
 800a604:	af00      	add	r7, sp, #0
 800a606:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a608:	bf00      	nop
 800a60a:	370c      	adds	r7, #12
 800a60c:	46bd      	mov	sp, r7
 800a60e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a612:	4770      	bx	lr

0800a614 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a614:	b480      	push	{r7}
 800a616:	b085      	sub	sp, #20
 800a618:	af00      	add	r7, sp, #0
 800a61a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a622:	2b01      	cmp	r3, #1
 800a624:	d101      	bne.n	800a62a <HAL_UARTEx_DisableFifoMode+0x16>
 800a626:	2302      	movs	r3, #2
 800a628:	e027      	b.n	800a67a <HAL_UARTEx_DisableFifoMode+0x66>
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	2201      	movs	r2, #1
 800a62e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	2224      	movs	r2, #36	; 0x24
 800a636:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	681a      	ldr	r2, [r3, #0]
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	f022 0201 	bic.w	r2, r2, #1
 800a650:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a658:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	2200      	movs	r2, #0
 800a65e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	68fa      	ldr	r2, [r7, #12]
 800a666:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	2220      	movs	r2, #32
 800a66c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	2200      	movs	r2, #0
 800a674:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a678:	2300      	movs	r3, #0
}
 800a67a:	4618      	mov	r0, r3
 800a67c:	3714      	adds	r7, #20
 800a67e:	46bd      	mov	sp, r7
 800a680:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a684:	4770      	bx	lr

0800a686 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a686:	b580      	push	{r7, lr}
 800a688:	b084      	sub	sp, #16
 800a68a:	af00      	add	r7, sp, #0
 800a68c:	6078      	str	r0, [r7, #4]
 800a68e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a696:	2b01      	cmp	r3, #1
 800a698:	d101      	bne.n	800a69e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a69a:	2302      	movs	r3, #2
 800a69c:	e02d      	b.n	800a6fa <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	2201      	movs	r2, #1
 800a6a2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	2224      	movs	r2, #36	; 0x24
 800a6aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	681a      	ldr	r2, [r3, #0]
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	f022 0201 	bic.w	r2, r2, #1
 800a6c4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	689b      	ldr	r3, [r3, #8]
 800a6cc:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	683a      	ldr	r2, [r7, #0]
 800a6d6:	430a      	orrs	r2, r1
 800a6d8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a6da:	6878      	ldr	r0, [r7, #4]
 800a6dc:	f000 f850 	bl	800a780 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	68fa      	ldr	r2, [r7, #12]
 800a6e6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	2220      	movs	r2, #32
 800a6ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	2200      	movs	r2, #0
 800a6f4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a6f8:	2300      	movs	r3, #0
}
 800a6fa:	4618      	mov	r0, r3
 800a6fc:	3710      	adds	r7, #16
 800a6fe:	46bd      	mov	sp, r7
 800a700:	bd80      	pop	{r7, pc}

0800a702 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a702:	b580      	push	{r7, lr}
 800a704:	b084      	sub	sp, #16
 800a706:	af00      	add	r7, sp, #0
 800a708:	6078      	str	r0, [r7, #4]
 800a70a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a712:	2b01      	cmp	r3, #1
 800a714:	d101      	bne.n	800a71a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a716:	2302      	movs	r3, #2
 800a718:	e02d      	b.n	800a776 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	2201      	movs	r2, #1
 800a71e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	2224      	movs	r2, #36	; 0x24
 800a726:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	681a      	ldr	r2, [r3, #0]
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	f022 0201 	bic.w	r2, r2, #1
 800a740:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	689b      	ldr	r3, [r3, #8]
 800a748:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	683a      	ldr	r2, [r7, #0]
 800a752:	430a      	orrs	r2, r1
 800a754:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a756:	6878      	ldr	r0, [r7, #4]
 800a758:	f000 f812 	bl	800a780 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	68fa      	ldr	r2, [r7, #12]
 800a762:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	2220      	movs	r2, #32
 800a768:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	2200      	movs	r2, #0
 800a770:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a774:	2300      	movs	r3, #0
}
 800a776:	4618      	mov	r0, r3
 800a778:	3710      	adds	r7, #16
 800a77a:	46bd      	mov	sp, r7
 800a77c:	bd80      	pop	{r7, pc}
	...

0800a780 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a780:	b480      	push	{r7}
 800a782:	b085      	sub	sp, #20
 800a784:	af00      	add	r7, sp, #0
 800a786:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d108      	bne.n	800a7a2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	2201      	movs	r2, #1
 800a794:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	2201      	movs	r2, #1
 800a79c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a7a0:	e031      	b.n	800a806 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a7a2:	2310      	movs	r3, #16
 800a7a4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a7a6:	2310      	movs	r3, #16
 800a7a8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	689b      	ldr	r3, [r3, #8]
 800a7b0:	0e5b      	lsrs	r3, r3, #25
 800a7b2:	b2db      	uxtb	r3, r3
 800a7b4:	f003 0307 	and.w	r3, r3, #7
 800a7b8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	689b      	ldr	r3, [r3, #8]
 800a7c0:	0f5b      	lsrs	r3, r3, #29
 800a7c2:	b2db      	uxtb	r3, r3
 800a7c4:	f003 0307 	and.w	r3, r3, #7
 800a7c8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a7ca:	7bbb      	ldrb	r3, [r7, #14]
 800a7cc:	7b3a      	ldrb	r2, [r7, #12]
 800a7ce:	4911      	ldr	r1, [pc, #68]	; (800a814 <UARTEx_SetNbDataToProcess+0x94>)
 800a7d0:	5c8a      	ldrb	r2, [r1, r2]
 800a7d2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a7d6:	7b3a      	ldrb	r2, [r7, #12]
 800a7d8:	490f      	ldr	r1, [pc, #60]	; (800a818 <UARTEx_SetNbDataToProcess+0x98>)
 800a7da:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a7dc:	fb93 f3f2 	sdiv	r3, r3, r2
 800a7e0:	b29a      	uxth	r2, r3
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a7e8:	7bfb      	ldrb	r3, [r7, #15]
 800a7ea:	7b7a      	ldrb	r2, [r7, #13]
 800a7ec:	4909      	ldr	r1, [pc, #36]	; (800a814 <UARTEx_SetNbDataToProcess+0x94>)
 800a7ee:	5c8a      	ldrb	r2, [r1, r2]
 800a7f0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a7f4:	7b7a      	ldrb	r2, [r7, #13]
 800a7f6:	4908      	ldr	r1, [pc, #32]	; (800a818 <UARTEx_SetNbDataToProcess+0x98>)
 800a7f8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a7fa:	fb93 f3f2 	sdiv	r3, r3, r2
 800a7fe:	b29a      	uxth	r2, r3
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800a806:	bf00      	nop
 800a808:	3714      	adds	r7, #20
 800a80a:	46bd      	mov	sp, r7
 800a80c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a810:	4770      	bx	lr
 800a812:	bf00      	nop
 800a814:	0800ca18 	.word	0x0800ca18
 800a818:	0800ca20 	.word	0x0800ca20

0800a81c <D16_GENERIC>:
 800a81c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a820:	b089      	sub	sp, #36	; 0x24
 800a822:	6993      	ldr	r3, [r2, #24]
 800a824:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 800a826:	9103      	str	r1, [sp, #12]
 800a828:	9307      	str	r3, [sp, #28]
 800a82a:	69d3      	ldr	r3, [r2, #28]
 800a82c:	e9d2 c102 	ldrd	ip, r1, [r2, #8]
 800a830:	e9d2 4a04 	ldrd	r4, sl, [r2, #16]
 800a834:	9106      	str	r1, [sp, #24]
 800a836:	e9d2 810c 	ldrd	r8, r1, [r2, #48]	; 0x30
 800a83a:	2d00      	cmp	r5, #0
 800a83c:	d063      	beq.n	800a906 <D16_GENERIC+0xea>
 800a83e:	f001 0520 	and.w	r5, r1, #32
 800a842:	f001 0110 	and.w	r1, r1, #16
 800a846:	f8df e0e0 	ldr.w	lr, [pc, #224]	; 800a928 <D16_GENERIC+0x10c>
 800a84a:	46c1      	mov	r9, r8
 800a84c:	9104      	str	r1, [sp, #16]
 800a84e:	2100      	movs	r1, #0
 800a850:	9505      	str	r5, [sp, #20]
 800a852:	e04d      	b.n	800a8f0 <D16_GENERIC+0xd4>
 800a854:	5d87      	ldrb	r7, [r0, r6]
 800a856:	7805      	ldrb	r5, [r0, #0]
 800a858:	eb00 0046 	add.w	r0, r0, r6, lsl #1
 800a85c:	eb05 2707 	add.w	r7, r5, r7, lsl #8
 800a860:	b2fe      	uxtb	r6, r7
 800a862:	f3c7 2707 	ubfx	r7, r7, #8, #8
 800a866:	f85e 5026 	ldr.w	r5, [lr, r6, lsl #2]
 800a86a:	f85e 6027 	ldr.w	r6, [lr, r7, lsl #2]
 800a86e:	441d      	add	r5, r3
 800a870:	eb06 2395 	add.w	r3, r6, r5, lsr #10
 800a874:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800a878:	f3c3 0609 	ubfx	r6, r3, #0, #10
 800a87c:	0a9b      	lsrs	r3, r3, #10
 800a87e:	ea46 4605 	orr.w	r6, r6, r5, lsl #16
 800a882:	4d27      	ldr	r5, [pc, #156]	; (800a920 <D16_GENERIC+0x104>)
 800a884:	fb26 c505 	smlad	r5, r6, r5, ip
 800a888:	4f26      	ldr	r7, [pc, #152]	; (800a924 <D16_GENERIC+0x108>)
 800a88a:	fb26 fc07 	smuad	ip, r6, r7
 800a88e:	9e04      	ldr	r6, [sp, #16]
 800a890:	f101 0801 	add.w	r8, r1, #1
 800a894:	f5a5 6500 	sub.w	r5, r5, #2048	; 0x800
 800a898:	b1ae      	cbz	r6, 800a8c6 <D16_GENERIC+0xaa>
 800a89a:	442c      	add	r4, r5
 800a89c:	f8d2 b020 	ldr.w	fp, [r2, #32]
 800a8a0:	eba4 040a 	sub.w	r4, r4, sl
 800a8a4:	46aa      	mov	sl, r5
 800a8a6:	17e7      	asrs	r7, r4, #31
 800a8a8:	fba4 450b 	umull	r4, r5, r4, fp
 800a8ac:	e9cd 4500 	strd	r4, r5, [sp]
 800a8b0:	fb0b 5407 	mla	r4, fp, r7, r5
 800a8b4:	9401      	str	r4, [sp, #4]
 800a8b6:	e9dd 4500 	ldrd	r4, r5, [sp]
 800a8ba:	f114 4400 	adds.w	r4, r4, #2147483648	; 0x80000000
 800a8be:	f145 0500 	adc.w	r5, r5, #0
 800a8c2:	006c      	lsls	r4, r5, #1
 800a8c4:	4625      	mov	r5, r4
 800a8c6:	f8b2 b028 	ldrh.w	fp, [r2, #40]	; 0x28
 800a8ca:	042d      	lsls	r5, r5, #16
 800a8cc:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800a8d0:	2700      	movs	r7, #0
 800a8d2:	fb01 fb0b 	mul.w	fp, r1, fp
 800a8d6:	fa1f f188 	uxth.w	r1, r8
 800a8da:	fbc9 6705 	smlal	r6, r7, r9, r5
 800a8de:	9e03      	ldr	r6, [sp, #12]
 800a8e0:	10bd      	asrs	r5, r7, #2
 800a8e2:	f305 050f 	ssat	r5, #16, r5
 800a8e6:	f826 501b 	strh.w	r5, [r6, fp, lsl #1]
 800a8ea:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 800a8ec:	428d      	cmp	r5, r1
 800a8ee:	d90a      	bls.n	800a906 <D16_GENERIC+0xea>
 800a8f0:	8d55      	ldrh	r5, [r2, #42]	; 0x2a
 800a8f2:	2d01      	cmp	r5, #1
 800a8f4:	b2ee      	uxtb	r6, r5
 800a8f6:	d1ad      	bne.n	800a854 <D16_GENERIC+0x38>
 800a8f8:	9d05      	ldr	r5, [sp, #20]
 800a8fa:	f850 7b02 	ldr.w	r7, [r0], #2
 800a8fe:	2d00      	cmp	r5, #0
 800a900:	d0ae      	beq.n	800a860 <D16_GENERIC+0x44>
 800a902:	ba7f      	rev16	r7, r7
 800a904:	e7ac      	b.n	800a860 <D16_GENERIC+0x44>
 800a906:	2000      	movs	r0, #0
 800a908:	9906      	ldr	r1, [sp, #24]
 800a90a:	61d3      	str	r3, [r2, #28]
 800a90c:	9b07      	ldr	r3, [sp, #28]
 800a90e:	f8c2 c008 	str.w	ip, [r2, #8]
 800a912:	60d1      	str	r1, [r2, #12]
 800a914:	6193      	str	r3, [r2, #24]
 800a916:	e9c2 4a04 	strd	r4, sl, [r2, #16]
 800a91a:	b009      	add	sp, #36	; 0x24
 800a91c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a920:	00030001 	.word	0x00030001
 800a924:	00010003 	.word	0x00010003
 800a928:	24000000 	.word	0x24000000

0800a92c <D24_GENERIC>:
 800a92c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a930:	e9d2 4304 	ldrd	r4, r3, [r2, #16]
 800a934:	b089      	sub	sp, #36	; 0x24
 800a936:	8cd6      	ldrh	r6, [r2, #38]	; 0x26
 800a938:	9303      	str	r3, [sp, #12]
 800a93a:	6993      	ldr	r3, [r2, #24]
 800a93c:	9104      	str	r1, [sp, #16]
 800a93e:	9307      	str	r3, [sp, #28]
 800a940:	69d1      	ldr	r1, [r2, #28]
 800a942:	e9d2 3802 	ldrd	r3, r8, [r2, #8]
 800a946:	e9d2 a50c 	ldrd	sl, r5, [r2, #48]	; 0x30
 800a94a:	2e00      	cmp	r6, #0
 800a94c:	f000 8088 	beq.w	800aa60 <D24_GENERIC+0x134>
 800a950:	f005 0620 	and.w	r6, r5, #32
 800a954:	f005 0510 	and.w	r5, r5, #16
 800a958:	f04f 0c00 	mov.w	ip, #0
 800a95c:	f8df e140 	ldr.w	lr, [pc, #320]	; 800aaa0 <D24_GENERIC+0x174>
 800a960:	9606      	str	r6, [sp, #24]
 800a962:	9505      	str	r5, [sp, #20]
 800a964:	e064      	b.n	800aa30 <D24_GENERIC+0x104>
 800a966:	f810 5016 	ldrb.w	r5, [r0, r6, lsl #1]
 800a96a:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 800a96e:	f810 b007 	ldrb.w	fp, [r0, r7]
 800a972:	042d      	lsls	r5, r5, #16
 800a974:	19f0      	adds	r0, r6, r7
 800a976:	eb05 250b 	add.w	r5, r5, fp, lsl #8
 800a97a:	44a9      	add	r9, r5
 800a97c:	fa5f f689 	uxtb.w	r6, r9
 800a980:	f3c9 2707 	ubfx	r7, r9, #8, #8
 800a984:	ea4f 4919 	mov.w	r9, r9, lsr #16
 800a988:	f85e 6026 	ldr.w	r6, [lr, r6, lsl #2]
 800a98c:	f85e 7027 	ldr.w	r7, [lr, r7, lsl #2]
 800a990:	eb06 2691 	add.w	r6, r6, r1, lsr #10
 800a994:	f85e 1029 	ldr.w	r1, [lr, r9, lsl #2]
 800a998:	eb07 2796 	add.w	r7, r7, r6, lsr #10
 800a99c:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800a9a0:	f3c7 0509 	ubfx	r5, r7, #0, #10
 800a9a4:	eb01 2197 	add.w	r1, r1, r7, lsr #10
 800a9a8:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
 800a9ac:	4d3a      	ldr	r5, [pc, #232]	; (800aa98 <D24_GENERIC+0x16c>)
 800a9ae:	fb26 8705 	smlad	r7, r6, r5, r8
 800a9b2:	4d3a      	ldr	r5, [pc, #232]	; (800aa9c <D24_GENERIC+0x170>)
 800a9b4:	fb26 3805 	smlad	r8, r6, r5, r3
 800a9b8:	f3c1 0309 	ubfx	r3, r1, #0, #10
 800a9bc:	eb03 0b43 	add.w	fp, r3, r3, lsl #1
 800a9c0:	2301      	movs	r3, #1
 800a9c2:	eb08 084b 	add.w	r8, r8, fp, lsl #1
 800a9c6:	fb26 f603 	smuad	r6, r6, r3
 800a9ca:	eb0c 0903 	add.w	r9, ip, r3
 800a9ce:	eb0b 0306 	add.w	r3, fp, r6
 800a9d2:	9e05      	ldr	r6, [sp, #20]
 800a9d4:	f5a7 55d8 	sub.w	r5, r7, #6912	; 0x1b00
 800a9d8:	b1ae      	cbz	r6, 800aa06 <D24_GENERIC+0xda>
 800a9da:	442c      	add	r4, r5
 800a9dc:	9e03      	ldr	r6, [sp, #12]
 800a9de:	f8d2 b020 	ldr.w	fp, [r2, #32]
 800a9e2:	1ba4      	subs	r4, r4, r6
 800a9e4:	9503      	str	r5, [sp, #12]
 800a9e6:	17e7      	asrs	r7, r4, #31
 800a9e8:	fba4 450b 	umull	r4, r5, r4, fp
 800a9ec:	e9cd 4500 	strd	r4, r5, [sp]
 800a9f0:	fb0b 5407 	mla	r4, fp, r7, r5
 800a9f4:	9401      	str	r4, [sp, #4]
 800a9f6:	e9dd 4500 	ldrd	r4, r5, [sp]
 800a9fa:	f114 4400 	adds.w	r4, r4, #2147483648	; 0x80000000
 800a9fe:	f145 0500 	adc.w	r5, r5, #0
 800aa02:	006c      	lsls	r4, r5, #1
 800aa04:	4625      	mov	r5, r4
 800aa06:	f8b2 b028 	ldrh.w	fp, [r2, #40]	; 0x28
 800aa0a:	03ad      	lsls	r5, r5, #14
 800aa0c:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800aa10:	2700      	movs	r7, #0
 800aa12:	fb0c fb0b 	mul.w	fp, ip, fp
 800aa16:	fa1f fc89 	uxth.w	ip, r9
 800aa1a:	fbca 6705 	smlal	r6, r7, sl, r5
 800aa1e:	9e04      	ldr	r6, [sp, #16]
 800aa20:	10bd      	asrs	r5, r7, #2
 800aa22:	f305 050f 	ssat	r5, #16, r5
 800aa26:	f826 501b 	strh.w	r5, [r6, fp, lsl #1]
 800aa2a:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 800aa2c:	4565      	cmp	r5, ip
 800aa2e:	d917      	bls.n	800aa60 <D24_GENERIC+0x134>
 800aa30:	8d55      	ldrh	r5, [r2, #42]	; 0x2a
 800aa32:	f890 9000 	ldrb.w	r9, [r0]
 800aa36:	b2ef      	uxtb	r7, r5
 800aa38:	2d01      	cmp	r5, #1
 800aa3a:	b23e      	sxth	r6, r7
 800aa3c:	d193      	bne.n	800a966 <D24_GENERIC+0x3a>
 800aa3e:	9d06      	ldr	r5, [sp, #24]
 800aa40:	b1dd      	cbz	r5, 800aa7a <D24_GENERIC+0x14e>
 800aa42:	78c7      	ldrb	r7, [r0, #3]
 800aa44:	ea4f 2609 	mov.w	r6, r9, lsl #8
 800aa48:	f01c 0f01 	tst.w	ip, #1
 800aa4c:	ea4f 2507 	mov.w	r5, r7, lsl #8
 800aa50:	eb06 4607 	add.w	r6, r6, r7, lsl #16
 800aa54:	d11a      	bne.n	800aa8c <D24_GENERIC+0x160>
 800aa56:	f890 9001 	ldrb.w	r9, [r0, #1]
 800aa5a:	3002      	adds	r0, #2
 800aa5c:	44b1      	add	r9, r6
 800aa5e:	e78d      	b.n	800a97c <D24_GENERIC+0x50>
 800aa60:	6093      	str	r3, [r2, #8]
 800aa62:	2000      	movs	r0, #0
 800aa64:	9b03      	ldr	r3, [sp, #12]
 800aa66:	f8c2 800c 	str.w	r8, [r2, #12]
 800aa6a:	6153      	str	r3, [r2, #20]
 800aa6c:	9b07      	ldr	r3, [sp, #28]
 800aa6e:	61d1      	str	r1, [r2, #28]
 800aa70:	6114      	str	r4, [r2, #16]
 800aa72:	6193      	str	r3, [r2, #24]
 800aa74:	b009      	add	sp, #36	; 0x24
 800aa76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa7a:	7845      	ldrb	r5, [r0, #1]
 800aa7c:	3003      	adds	r0, #3
 800aa7e:	f810 6c01 	ldrb.w	r6, [r0, #-1]
 800aa82:	022d      	lsls	r5, r5, #8
 800aa84:	eb05 4506 	add.w	r5, r5, r6, lsl #16
 800aa88:	44a9      	add	r9, r5
 800aa8a:	e777      	b.n	800a97c <D24_GENERIC+0x50>
 800aa8c:	7886      	ldrb	r6, [r0, #2]
 800aa8e:	3004      	adds	r0, #4
 800aa90:	eb05 4506 	add.w	r5, r5, r6, lsl #16
 800aa94:	44a9      	add	r9, r5
 800aa96:	e771      	b.n	800a97c <D24_GENERIC+0x50>
 800aa98:	00030001 	.word	0x00030001
 800aa9c:	00060007 	.word	0x00060007
 800aaa0:	24000000 	.word	0x24000000

0800aaa4 <D32_GENERIC>:
 800aaa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aaa8:	e9d2 4304 	ldrd	r4, r3, [r2, #16]
 800aaac:	b089      	sub	sp, #36	; 0x24
 800aaae:	6b15      	ldr	r5, [r2, #48]	; 0x30
 800aab0:	8cd6      	ldrh	r6, [r2, #38]	; 0x26
 800aab2:	9302      	str	r3, [sp, #8]
 800aab4:	6993      	ldr	r3, [r2, #24]
 800aab6:	9104      	str	r1, [sp, #16]
 800aab8:	9307      	str	r3, [sp, #28]
 800aaba:	9503      	str	r5, [sp, #12]
 800aabc:	69d1      	ldr	r1, [r2, #28]
 800aabe:	6b55      	ldr	r5, [r2, #52]	; 0x34
 800aac0:	e9d2 3802 	ldrd	r3, r8, [r2, #8]
 800aac4:	2e00      	cmp	r6, #0
 800aac6:	f000 8097 	beq.w	800abf8 <D32_GENERIC+0x154>
 800aaca:	f005 0620 	and.w	r6, r5, #32
 800aace:	f005 0510 	and.w	r5, r5, #16
 800aad2:	f04f 0e00 	mov.w	lr, #0
 800aad6:	f8df c150 	ldr.w	ip, [pc, #336]	; 800ac28 <D32_GENERIC+0x184>
 800aada:	9606      	str	r6, [sp, #24]
 800aadc:	9505      	str	r5, [sp, #20]
 800aade:	e079      	b.n	800abd4 <D32_GENERIC+0x130>
 800aae0:	783d      	ldrb	r5, [r7, #0]
 800aae2:	f810 b009 	ldrb.w	fp, [r0, r9]
 800aae6:	042d      	lsls	r5, r5, #16
 800aae8:	f810 a006 	ldrb.w	sl, [r0, r6]
 800aaec:	f890 9000 	ldrb.w	r9, [r0]
 800aaf0:	eb07 0046 	add.w	r0, r7, r6, lsl #1
 800aaf4:	eb05 650b 	add.w	r5, r5, fp, lsl #24
 800aaf8:	eb05 250a 	add.w	r5, r5, sl, lsl #8
 800aafc:	44a9      	add	r9, r5
 800aafe:	fa5f f789 	uxtb.w	r7, r9
 800ab02:	f3c9 2507 	ubfx	r5, r9, #8, #8
 800ab06:	f3c9 4607 	ubfx	r6, r9, #16, #8
 800ab0a:	ea4f 6919 	mov.w	r9, r9, lsr #24
 800ab0e:	f85c 7027 	ldr.w	r7, [ip, r7, lsl #2]
 800ab12:	f85c 5025 	ldr.w	r5, [ip, r5, lsl #2]
 800ab16:	eb07 2191 	add.w	r1, r7, r1, lsr #10
 800ab1a:	f85c 6026 	ldr.w	r6, [ip, r6, lsl #2]
 800ab1e:	f85c 7029 	ldr.w	r7, [ip, r9, lsl #2]
 800ab22:	eb05 2591 	add.w	r5, r5, r1, lsr #10
 800ab26:	f3c1 0909 	ubfx	r9, r1, #0, #10
 800ab2a:	eb06 2695 	add.w	r6, r6, r5, lsr #10
 800ab2e:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800ab32:	eb07 2196 	add.w	r1, r7, r6, lsr #10
 800ab36:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800ab3a:	ea45 4909 	orr.w	r9, r5, r9, lsl #16
 800ab3e:	f3c1 0509 	ubfx	r5, r1, #0, #10
 800ab42:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
 800ab46:	4d34      	ldr	r5, [pc, #208]	; (800ac18 <D32_GENERIC+0x174>)
 800ab48:	fb29 8805 	smlad	r8, r9, r5, r8
 800ab4c:	f44f 3580 	mov.w	r5, #65536	; 0x10000
 800ab50:	fb26 8705 	smlad	r7, r6, r5, r8
 800ab54:	4d31      	ldr	r5, [pc, #196]	; (800ac1c <D32_GENERIC+0x178>)
 800ab56:	fb29 3305 	smlad	r3, r9, r5, r3
 800ab5a:	4d31      	ldr	r5, [pc, #196]	; (800ac20 <D32_GENERIC+0x17c>)
 800ab5c:	fb26 3805 	smlad	r8, r6, r5, r3
 800ab60:	2301      	movs	r3, #1
 800ab62:	fb29 f903 	smuad	r9, r9, r3
 800ab66:	4b2f      	ldr	r3, [pc, #188]	; (800ac24 <D32_GENERIC+0x180>)
 800ab68:	fb26 9303 	smlad	r3, r6, r3, r9
 800ab6c:	9e05      	ldr	r6, [sp, #20]
 800ab6e:	f10e 0901 	add.w	r9, lr, #1
 800ab72:	f5a7 4580 	sub.w	r5, r7, #16384	; 0x4000
 800ab76:	b1ae      	cbz	r6, 800aba4 <D32_GENERIC+0x100>
 800ab78:	442c      	add	r4, r5
 800ab7a:	9e02      	ldr	r6, [sp, #8]
 800ab7c:	f8d2 a020 	ldr.w	sl, [r2, #32]
 800ab80:	1ba4      	subs	r4, r4, r6
 800ab82:	9502      	str	r5, [sp, #8]
 800ab84:	17e7      	asrs	r7, r4, #31
 800ab86:	fba4 450a 	umull	r4, r5, r4, sl
 800ab8a:	e9cd 4500 	strd	r4, r5, [sp]
 800ab8e:	fb0a 5407 	mla	r4, sl, r7, r5
 800ab92:	9401      	str	r4, [sp, #4]
 800ab94:	e9dd 4500 	ldrd	r4, r5, [sp]
 800ab98:	f114 4400 	adds.w	r4, r4, #2147483648	; 0x80000000
 800ab9c:	f145 0500 	adc.w	r5, r5, #0
 800aba0:	006c      	lsls	r4, r5, #1
 800aba2:	4625      	mov	r5, r4
 800aba4:	f8b2 a028 	ldrh.w	sl, [r2, #40]	; 0x28
 800aba8:	036d      	lsls	r5, r5, #13
 800abaa:	9f03      	ldr	r7, [sp, #12]
 800abac:	fb0e fb0a 	mul.w	fp, lr, sl
 800abb0:	fa1f fe89 	uxth.w	lr, r9
 800abb4:	f04f 0a00 	mov.w	sl, #0
 800abb8:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
 800abbc:	9e04      	ldr	r6, [sp, #16]
 800abbe:	fbc7 9a05 	smlal	r9, sl, r7, r5
 800abc2:	4657      	mov	r7, sl
 800abc4:	10bd      	asrs	r5, r7, #2
 800abc6:	f305 050f 	ssat	r5, #16, r5
 800abca:	f826 501b 	strh.w	r5, [r6, fp, lsl #1]
 800abce:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 800abd0:	4575      	cmp	r5, lr
 800abd2:	d911      	bls.n	800abf8 <D32_GENERIC+0x154>
 800abd4:	8d55      	ldrh	r5, [r2, #42]	; 0x2a
 800abd6:	b2ee      	uxtb	r6, r5
 800abd8:	2d01      	cmp	r5, #1
 800abda:	eb00 0746 	add.w	r7, r0, r6, lsl #1
 800abde:	eb06 0946 	add.w	r9, r6, r6, lsl #1
 800abe2:	f47f af7d 	bne.w	800aae0 <D32_GENERIC+0x3c>
 800abe6:	1d05      	adds	r5, r0, #4
 800abe8:	f8d0 9000 	ldr.w	r9, [r0]
 800abec:	9806      	ldr	r0, [sp, #24]
 800abee:	b180      	cbz	r0, 800ac12 <D32_GENERIC+0x16e>
 800abf0:	fa99 f999 	rev16.w	r9, r9
 800abf4:	4628      	mov	r0, r5
 800abf6:	e782      	b.n	800aafe <D32_GENERIC+0x5a>
 800abf8:	6093      	str	r3, [r2, #8]
 800abfa:	2000      	movs	r0, #0
 800abfc:	9b02      	ldr	r3, [sp, #8]
 800abfe:	f8c2 800c 	str.w	r8, [r2, #12]
 800ac02:	6153      	str	r3, [r2, #20]
 800ac04:	9b07      	ldr	r3, [sp, #28]
 800ac06:	61d1      	str	r1, [r2, #28]
 800ac08:	6114      	str	r4, [r2, #16]
 800ac0a:	6193      	str	r3, [r2, #24]
 800ac0c:	b009      	add	sp, #36	; 0x24
 800ac0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac12:	4628      	mov	r0, r5
 800ac14:	e773      	b.n	800aafe <D32_GENERIC+0x5a>
 800ac16:	bf00      	nop
 800ac18:	00060003 	.word	0x00060003
 800ac1c:	000a000c 	.word	0x000a000c
 800ac20:	000c000a 	.word	0x000c000a
 800ac24:	00030006 	.word	0x00030006
 800ac28:	24000000 	.word	0x24000000

0800ac2c <D48_GENERIC>:
 800ac2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac30:	6913      	ldr	r3, [r2, #16]
 800ac32:	b089      	sub	sp, #36	; 0x24
 800ac34:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 800ac36:	9301      	str	r3, [sp, #4]
 800ac38:	6953      	ldr	r3, [r2, #20]
 800ac3a:	9104      	str	r1, [sp, #16]
 800ac3c:	9302      	str	r3, [sp, #8]
 800ac3e:	6993      	ldr	r3, [r2, #24]
 800ac40:	f8d2 c01c 	ldr.w	ip, [r2, #28]
 800ac44:	9307      	str	r3, [sp, #28]
 800ac46:	e9d2 3102 	ldrd	r3, r1, [r2, #8]
 800ac4a:	9100      	str	r1, [sp, #0]
 800ac4c:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800ac4e:	9103      	str	r1, [sp, #12]
 800ac50:	6b51      	ldr	r1, [r2, #52]	; 0x34
 800ac52:	2c00      	cmp	r4, #0
 800ac54:	f000 80be 	beq.w	800add4 <D48_GENERIC+0x1a8>
 800ac58:	f001 0420 	and.w	r4, r1, #32
 800ac5c:	f001 0110 	and.w	r1, r1, #16
 800ac60:	f04f 0e00 	mov.w	lr, #0
 800ac64:	9105      	str	r1, [sp, #20]
 800ac66:	9406      	str	r4, [sp, #24]
 800ac68:	4962      	ldr	r1, [pc, #392]	; (800adf4 <D48_GENERIC+0x1c8>)
 800ac6a:	e0a0      	b.n	800adae <D48_GENERIC+0x182>
 800ac6c:	eb00 0608 	add.w	r6, r0, r8
 800ac70:	f810 a008 	ldrb.w	sl, [r0, r8]
 800ac74:	f810 9005 	ldrb.w	r9, [r0, r5]
 800ac78:	5df4      	ldrb	r4, [r6, r7]
 800ac7a:	443e      	add	r6, r7
 800ac7c:	f890 b000 	ldrb.w	fp, [r0]
 800ac80:	0420      	lsls	r0, r4, #16
 800ac82:	eb06 0408 	add.w	r4, r6, r8
 800ac86:	f816 6008 	ldrb.w	r6, [r6, r8]
 800ac8a:	eb00 6a0a 	add.w	sl, r0, sl, lsl #24
 800ac8e:	f814 8007 	ldrb.w	r8, [r4, r7]
 800ac92:	4427      	add	r7, r4
 800ac94:	eb0a 2a09 	add.w	sl, sl, r9, lsl #8
 800ac98:	eb08 2606 	add.w	r6, r8, r6, lsl #8
 800ac9c:	eb0a 040b 	add.w	r4, sl, fp
 800aca0:	eb07 0045 	add.w	r0, r7, r5, lsl #1
 800aca4:	f3c6 2807 	ubfx	r8, r6, #8, #8
 800aca8:	b2f7      	uxtb	r7, r6
 800acaa:	b2e6      	uxtb	r6, r4
 800acac:	f3c4 2507 	ubfx	r5, r4, #8, #8
 800acb0:	f3c4 4907 	ubfx	r9, r4, #16, #8
 800acb4:	ea4f 6b14 	mov.w	fp, r4, lsr #24
 800acb8:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 800acbc:	f851 5025 	ldr.w	r5, [r1, r5, lsl #2]
 800acc0:	eb06 269c 	add.w	r6, r6, ip, lsr #10
 800acc4:	f851 9029 	ldr.w	r9, [r1, r9, lsl #2]
 800acc8:	f851 402b 	ldr.w	r4, [r1, fp, lsl #2]
 800accc:	eb05 2596 	add.w	r5, r5, r6, lsr #10
 800acd0:	f851 7027 	ldr.w	r7, [r1, r7, lsl #2]
 800acd4:	f851 c028 	ldr.w	ip, [r1, r8, lsl #2]
 800acd8:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800acdc:	eb09 2995 	add.w	r9, r9, r5, lsr #10
 800ace0:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800ace4:	eb04 2499 	add.w	r4, r4, r9, lsr #10
 800ace8:	f3c9 0909 	ubfx	r9, r9, #0, #10
 800acec:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
 800acf0:	9d00      	ldr	r5, [sp, #0]
 800acf2:	eb07 2794 	add.w	r7, r7, r4, lsr #10
 800acf6:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800acfa:	eb0c 2c97 	add.w	ip, ip, r7, lsr #10
 800acfe:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800ad02:	ea44 4909 	orr.w	r9, r4, r9, lsl #16
 800ad06:	f3cc 0409 	ubfx	r4, ip, #0, #10
 800ad0a:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 800ad0e:	4c3a      	ldr	r4, [pc, #232]	; (800adf8 <D48_GENERIC+0x1cc>)
 800ad10:	fb26 5a04 	smlad	sl, r6, r4, r5
 800ad14:	4c39      	ldr	r4, [pc, #228]	; (800adfc <D48_GENERIC+0x1d0>)
 800ad16:	fb29 aa04 	smlad	sl, r9, r4, sl
 800ad1a:	f44f 3480 	mov.w	r4, #65536	; 0x10000
 800ad1e:	fb27 aa04 	smlad	sl, r7, r4, sl
 800ad22:	4c37      	ldr	r4, [pc, #220]	; (800ae00 <D48_GENERIC+0x1d4>)
 800ad24:	fb26 3304 	smlad	r3, r6, r4, r3
 800ad28:	f04f 141b 	mov.w	r4, #1769499	; 0x1b001b
 800ad2c:	fb29 3304 	smlad	r3, r9, r4, r3
 800ad30:	4c34      	ldr	r4, [pc, #208]	; (800ae04 <D48_GENERIC+0x1d8>)
 800ad32:	fb27 3304 	smlad	r3, r7, r4, r3
 800ad36:	2501      	movs	r5, #1
 800ad38:	9300      	str	r3, [sp, #0]
 800ad3a:	fb26 f605 	smuad	r6, r6, r5
 800ad3e:	4b32      	ldr	r3, [pc, #200]	; (800ae08 <D48_GENERIC+0x1dc>)
 800ad40:	fb29 6903 	smlad	r9, r9, r3, r6
 800ad44:	4b31      	ldr	r3, [pc, #196]	; (800ae0c <D48_GENERIC+0x1e0>)
 800ad46:	fb27 9303 	smlad	r3, r7, r3, r9
 800ad4a:	9c05      	ldr	r4, [sp, #20]
 800ad4c:	eb0e 0805 	add.w	r8, lr, r5
 800ad50:	f5aa 4a58 	sub.w	sl, sl, #55296	; 0xd800
 800ad54:	b19c      	cbz	r4, 800ad7e <D48_GENERIC+0x152>
 800ad56:	9c01      	ldr	r4, [sp, #4]
 800ad58:	9d02      	ldr	r5, [sp, #8]
 800ad5a:	4454      	add	r4, sl
 800ad5c:	f8d2 9020 	ldr.w	r9, [r2, #32]
 800ad60:	f8cd a008 	str.w	sl, [sp, #8]
 800ad64:	1b64      	subs	r4, r4, r5
 800ad66:	fba4 ab09 	umull	sl, fp, r4, r9
 800ad6a:	17e7      	asrs	r7, r4, #31
 800ad6c:	f11a 4400 	adds.w	r4, sl, #2147483648	; 0x80000000
 800ad70:	fb09 bb07 	mla	fp, r9, r7, fp
 800ad74:	f14b 0500 	adc.w	r5, fp, #0
 800ad78:	006c      	lsls	r4, r5, #1
 800ad7a:	46a2      	mov	sl, r4
 800ad7c:	9401      	str	r4, [sp, #4]
 800ad7e:	8d16      	ldrh	r6, [r2, #40]	; 0x28
 800ad80:	ea4f 2aca 	mov.w	sl, sl, lsl #11
 800ad84:	9d03      	ldr	r5, [sp, #12]
 800ad86:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 800ad8a:	fb0e f606 	mul.w	r6, lr, r6
 800ad8e:	fa1f fe88 	uxth.w	lr, r8
 800ad92:	f04f 0800 	mov.w	r8, #0
 800ad96:	fbc5 780a 	smlal	r7, r8, r5, sl
 800ad9a:	4645      	mov	r5, r8
 800ad9c:	10ac      	asrs	r4, r5, #2
 800ad9e:	9d04      	ldr	r5, [sp, #16]
 800ada0:	f304 040f 	ssat	r4, #16, r4
 800ada4:	f825 4016 	strh.w	r4, [r5, r6, lsl #1]
 800ada8:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 800adaa:	4574      	cmp	r4, lr
 800adac:	d912      	bls.n	800add4 <D48_GENERIC+0x1a8>
 800adae:	8d54      	ldrh	r4, [r2, #42]	; 0x2a
 800adb0:	b2e5      	uxtb	r5, r4
 800adb2:	2c01      	cmp	r4, #1
 800adb4:	eb05 0845 	add.w	r8, r5, r5, lsl #1
 800adb8:	f1c5 0700 	rsb	r7, r5, #0
 800adbc:	f47f af56 	bne.w	800ac6c <D48_GENERIC+0x40>
 800adc0:	9d06      	ldr	r5, [sp, #24]
 800adc2:	e9d0 4600 	ldrd	r4, r6, [r0]
 800adc6:	3006      	adds	r0, #6
 800adc8:	2d00      	cmp	r5, #0
 800adca:	f43f af6b 	beq.w	800aca4 <D48_GENERIC+0x78>
 800adce:	ba64      	rev16	r4, r4
 800add0:	ba76      	rev16	r6, r6
 800add2:	e767      	b.n	800aca4 <D48_GENERIC+0x78>
 800add4:	6093      	str	r3, [r2, #8]
 800add6:	2000      	movs	r0, #0
 800add8:	9b00      	ldr	r3, [sp, #0]
 800adda:	f8c2 c01c 	str.w	ip, [r2, #28]
 800adde:	60d3      	str	r3, [r2, #12]
 800ade0:	9b01      	ldr	r3, [sp, #4]
 800ade2:	6113      	str	r3, [r2, #16]
 800ade4:	9b02      	ldr	r3, [sp, #8]
 800ade6:	6153      	str	r3, [r2, #20]
 800ade8:	9b07      	ldr	r3, [sp, #28]
 800adea:	6193      	str	r3, [r2, #24]
 800adec:	b009      	add	sp, #36	; 0x24
 800adee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800adf2:	bf00      	nop
 800adf4:	24000000 	.word	0x24000000
 800adf8:	000f000a 	.word	0x000f000a
 800adfc:	00060003 	.word	0x00060003
 800ae00:	00150019 	.word	0x00150019
 800ae04:	00190015 	.word	0x00190015
 800ae08:	00030006 	.word	0x00030006
 800ae0c:	000a000f 	.word	0x000a000f

0800ae10 <D64_GENERIC>:
 800ae10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae14:	6913      	ldr	r3, [r2, #16]
 800ae16:	b089      	sub	sp, #36	; 0x24
 800ae18:	6b15      	ldr	r5, [r2, #48]	; 0x30
 800ae1a:	9300      	str	r3, [sp, #0]
 800ae1c:	6953      	ldr	r3, [r2, #20]
 800ae1e:	9105      	str	r1, [sp, #20]
 800ae20:	9303      	str	r3, [sp, #12]
 800ae22:	8cd1      	ldrh	r1, [r2, #38]	; 0x26
 800ae24:	6993      	ldr	r3, [r2, #24]
 800ae26:	69d4      	ldr	r4, [r2, #28]
 800ae28:	9307      	str	r3, [sp, #28]
 800ae2a:	9504      	str	r5, [sp, #16]
 800ae2c:	e9d2 3602 	ldrd	r3, r6, [r2, #8]
 800ae30:	2900      	cmp	r1, #0
 800ae32:	f000 80e8 	beq.w	800b006 <D64_GENERIC+0x1f6>
 800ae36:	6a11      	ldr	r1, [r2, #32]
 800ae38:	2500      	movs	r5, #0
 800ae3a:	46b3      	mov	fp, r6
 800ae3c:	9302      	str	r3, [sp, #8]
 800ae3e:	9106      	str	r1, [sp, #24]
 800ae40:	4978      	ldr	r1, [pc, #480]	; (800b024 <D64_GENERIC+0x214>)
 800ae42:	e0cc      	b.n	800afde <D64_GENERIC+0x1ce>
 800ae44:	eb0e 084e 	add.w	r8, lr, lr, lsl #1
 800ae48:	f1ce 0c00 	rsb	ip, lr, #0
 800ae4c:	f890 9000 	ldrb.w	r9, [r0]
 800ae50:	eb00 0708 	add.w	r7, r0, r8
 800ae54:	f810 6008 	ldrb.w	r6, [r0, r8]
 800ae58:	eb07 0a4c 	add.w	sl, r7, ip, lsl #1
 800ae5c:	f817 000c 	ldrb.w	r0, [r7, ip]
 800ae60:	f817 301c 	ldrb.w	r3, [r7, ip, lsl #1]
 800ae64:	eb0a 0748 	add.w	r7, sl, r8, lsl #1
 800ae68:	f81a a018 	ldrb.w	sl, [sl, r8, lsl #1]
 800ae6c:	ea4f 4800 	mov.w	r8, r0, lsl #16
 800ae70:	f817 000c 	ldrb.w	r0, [r7, ip]
 800ae74:	eb08 6606 	add.w	r6, r8, r6, lsl #24
 800ae78:	f817 801c 	ldrb.w	r8, [r7, ip, lsl #1]
 800ae7c:	0400      	lsls	r0, r0, #16
 800ae7e:	4467      	add	r7, ip
 800ae80:	eb06 2603 	add.w	r6, r6, r3, lsl #8
 800ae84:	eb00 600a 	add.w	r0, r0, sl, lsl #24
 800ae88:	f817 a01c 	ldrb.w	sl, [r7, ip, lsl #1]
 800ae8c:	eb07 074c 	add.w	r7, r7, ip, lsl #1
 800ae90:	444e      	add	r6, r9
 800ae92:	eb00 2808 	add.w	r8, r0, r8, lsl #8
 800ae96:	eb07 008e 	add.w	r0, r7, lr, lsl #2
 800ae9a:	44c2      	add	sl, r8
 800ae9c:	b2f7      	uxtb	r7, r6
 800ae9e:	f3c6 2807 	ubfx	r8, r6, #8, #8
 800aea2:	f3c6 4e07 	ubfx	lr, r6, #16, #8
 800aea6:	0e36      	lsrs	r6, r6, #24
 800aea8:	f851 7027 	ldr.w	r7, [r1, r7, lsl #2]
 800aeac:	fa5f fc8a 	uxtb.w	ip, sl
 800aeb0:	f851 8028 	ldr.w	r8, [r1, r8, lsl #2]
 800aeb4:	f3ca 2907 	ubfx	r9, sl, #8, #8
 800aeb8:	443c      	add	r4, r7
 800aeba:	f851 702e 	ldr.w	r7, [r1, lr, lsl #2]
 800aebe:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 800aec2:	eb08 2894 	add.w	r8, r8, r4, lsr #10
 800aec6:	f851 c02c 	ldr.w	ip, [r1, ip, lsl #2]
 800aeca:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800aece:	4b56      	ldr	r3, [pc, #344]	; (800b028 <D64_GENERIC+0x218>)
 800aed0:	eb07 2e98 	add.w	lr, r7, r8, lsr #10
 800aed4:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800aed8:	f851 7029 	ldr.w	r7, [r1, r9, lsl #2]
 800aedc:	eb06 269e 	add.w	r6, r6, lr, lsr #10
 800aee0:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800aee4:	ea48 4804 	orr.w	r8, r8, r4, lsl #16
 800aee8:	f3ca 4407 	ubfx	r4, sl, #16, #8
 800aeec:	eb0c 2c96 	add.w	ip, ip, r6, lsr #10
 800aef0:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800aef4:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 800aef8:	ea4f 6a1a 	mov.w	sl, sl, lsr #24
 800aefc:	eb07 279c 	add.w	r7, r7, ip, lsr #10
 800af00:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 800af04:	f851 902a 	ldr.w	r9, [r1, sl, lsl #2]
 800af08:	ea46 460e 	orr.w	r6, r6, lr, lsl #16
 800af0c:	eb04 2a97 	add.w	sl, r4, r7, lsr #10
 800af10:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800af14:	eb09 299a 	add.w	r9, r9, sl, lsr #10
 800af18:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 800af1c:	ea47 4c0c 	orr.w	ip, r7, ip, lsl #16
 800af20:	f3c9 0709 	ubfx	r7, r9, #0, #10
 800af24:	ea4f 2499 	mov.w	r4, r9, lsr #10
 800af28:	ea47 4a0a 	orr.w	sl, r7, sl, lsl #16
 800af2c:	fb28 b903 	smlad	r9, r8, r3, fp
 800af30:	4b3e      	ldr	r3, [pc, #248]	; (800b02c <D64_GENERIC+0x21c>)
 800af32:	fb26 9903 	smlad	r9, r6, r3, r9
 800af36:	4b3e      	ldr	r3, [pc, #248]	; (800b030 <D64_GENERIC+0x220>)
 800af38:	fb2c 9703 	smlad	r7, ip, r3, r9
 800af3c:	f44f 3980 	mov.w	r9, #65536	; 0x10000
 800af40:	fb2a 7909 	smlad	r9, sl, r9, r7
 800af44:	4f3b      	ldr	r7, [pc, #236]	; (800b034 <D64_GENERIC+0x224>)
 800af46:	9b02      	ldr	r3, [sp, #8]
 800af48:	fb28 3307 	smlad	r3, r8, r7, r3
 800af4c:	fb2a 3317 	smladx	r3, sl, r7, r3
 800af50:	4f39      	ldr	r7, [pc, #228]	; (800b038 <D64_GENERIC+0x228>)
 800af52:	fb26 3307 	smlad	r3, r6, r7, r3
 800af56:	fb2c 3b17 	smladx	fp, ip, r7, r3
 800af5a:	f04f 0e01 	mov.w	lr, #1
 800af5e:	fb28 f80e 	smuad	r8, r8, lr
 800af62:	4b36      	ldr	r3, [pc, #216]	; (800b03c <D64_GENERIC+0x22c>)
 800af64:	fb26 8603 	smlad	r6, r6, r3, r8
 800af68:	4b35      	ldr	r3, [pc, #212]	; (800b040 <D64_GENERIC+0x230>)
 800af6a:	fb2c 6c03 	smlad	ip, ip, r3, r6
 800af6e:	4b35      	ldr	r3, [pc, #212]	; (800b044 <D64_GENERIC+0x234>)
 800af70:	fb2a c303 	smlad	r3, sl, r3, ip
 800af74:	9f06      	ldr	r7, [sp, #24]
 800af76:	f5a9 3900 	sub.w	r9, r9, #131072	; 0x20000
 800af7a:	9302      	str	r3, [sp, #8]
 800af7c:	b1cf      	cbz	r7, 800afb2 <D64_GENERIC+0x1a2>
 800af7e:	9b00      	ldr	r3, [sp, #0]
 800af80:	444b      	add	r3, r9
 800af82:	461e      	mov	r6, r3
 800af84:	9b03      	ldr	r3, [sp, #12]
 800af86:	f8cd 900c 	str.w	r9, [sp, #12]
 800af8a:	1af6      	subs	r6, r6, r3
 800af8c:	46b0      	mov	r8, r6
 800af8e:	ea4f 79e6 	mov.w	r9, r6, asr #31
 800af92:	e9cd 8900 	strd	r8, r9, [sp]
 800af96:	fba6 8907 	umull	r8, r9, r6, r7
 800af9a:	9e01      	ldr	r6, [sp, #4]
 800af9c:	fb07 9306 	mla	r3, r7, r6, r9
 800afa0:	4646      	mov	r6, r8
 800afa2:	f116 4600 	adds.w	r6, r6, #2147483648	; 0x80000000
 800afa6:	f143 0700 	adc.w	r7, r3, #0
 800afaa:	fa07 f30e 	lsl.w	r3, r7, lr
 800afae:	4699      	mov	r9, r3
 800afb0:	9300      	str	r3, [sp, #0]
 800afb2:	f8b2 c028 	ldrh.w	ip, [r2, #40]	; 0x28
 800afb6:	ea4f 2989 	mov.w	r9, r9, lsl #10
 800afba:	9b04      	ldr	r3, [sp, #16]
 800afbc:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800afc0:	2700      	movs	r7, #0
 800afc2:	fb05 fc0c 	mul.w	ip, r5, ip
 800afc6:	3501      	adds	r5, #1
 800afc8:	fbc3 6709 	smlal	r6, r7, r3, r9
 800afcc:	9b05      	ldr	r3, [sp, #20]
 800afce:	10be      	asrs	r6, r7, #2
 800afd0:	f306 060f 	ssat	r6, #16, r6
 800afd4:	f823 601c 	strh.w	r6, [r3, ip, lsl #1]
 800afd8:	8cd6      	ldrh	r6, [r2, #38]	; 0x26
 800afda:	42ae      	cmp	r6, r5
 800afdc:	dd11      	ble.n	800b002 <D64_GENERIC+0x1f2>
 800afde:	f8b2 e02a 	ldrh.w	lr, [r2, #42]	; 0x2a
 800afe2:	f1be 0f01 	cmp.w	lr, #1
 800afe6:	f47f af2d 	bne.w	800ae44 <D64_GENERIC+0x34>
 800afea:	6b57      	ldr	r7, [r2, #52]	; 0x34
 800afec:	f100 0c08 	add.w	ip, r0, #8
 800aff0:	06bb      	lsls	r3, r7, #26
 800aff2:	e9d0 6a00 	ldrd	r6, sl, [r0]
 800aff6:	d513      	bpl.n	800b020 <D64_GENERIC+0x210>
 800aff8:	ba76      	rev16	r6, r6
 800affa:	fa9a fa9a 	rev16.w	sl, sl
 800affe:	4660      	mov	r0, ip
 800b000:	e74c      	b.n	800ae9c <D64_GENERIC+0x8c>
 800b002:	465e      	mov	r6, fp
 800b004:	9b02      	ldr	r3, [sp, #8]
 800b006:	6093      	str	r3, [r2, #8]
 800b008:	2000      	movs	r0, #0
 800b00a:	9b00      	ldr	r3, [sp, #0]
 800b00c:	60d6      	str	r6, [r2, #12]
 800b00e:	6113      	str	r3, [r2, #16]
 800b010:	9b03      	ldr	r3, [sp, #12]
 800b012:	61d4      	str	r4, [r2, #28]
 800b014:	6153      	str	r3, [r2, #20]
 800b016:	9b07      	ldr	r3, [sp, #28]
 800b018:	6193      	str	r3, [r2, #24]
 800b01a:	b009      	add	sp, #36	; 0x24
 800b01c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b020:	4660      	mov	r0, ip
 800b022:	e73b      	b.n	800ae9c <D64_GENERIC+0x8c>
 800b024:	24000000 	.word	0x24000000
 800b028:	001c0015 	.word	0x001c0015
 800b02c:	000f000a 	.word	0x000f000a
 800b030:	00060003 	.word	0x00060003
 800b034:	0024002a 	.word	0x0024002a
 800b038:	002e0030 	.word	0x002e0030
 800b03c:	00030006 	.word	0x00030006
 800b040:	000a000f 	.word	0x000a000f
 800b044:	0015001c 	.word	0x0015001c

0800b048 <D80_GENERIC>:
 800b048:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b04c:	b08b      	sub	sp, #44	; 0x2c
 800b04e:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 800b050:	9107      	str	r1, [sp, #28]
 800b052:	6911      	ldr	r1, [r2, #16]
 800b054:	9104      	str	r1, [sp, #16]
 800b056:	6951      	ldr	r1, [r2, #20]
 800b058:	9105      	str	r1, [sp, #20]
 800b05a:	6991      	ldr	r1, [r2, #24]
 800b05c:	9109      	str	r1, [sp, #36]	; 0x24
 800b05e:	69d1      	ldr	r1, [r2, #28]
 800b060:	9102      	str	r1, [sp, #8]
 800b062:	6891      	ldr	r1, [r2, #8]
 800b064:	9103      	str	r1, [sp, #12]
 800b066:	68d1      	ldr	r1, [r2, #12]
 800b068:	9101      	str	r1, [sp, #4]
 800b06a:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800b06c:	9106      	str	r1, [sp, #24]
 800b06e:	2b00      	cmp	r3, #0
 800b070:	f000 810b 	beq.w	800b28a <D80_GENERIC+0x242>
 800b074:	6a13      	ldr	r3, [r2, #32]
 800b076:	f04f 0800 	mov.w	r8, #0
 800b07a:	f8df c260 	ldr.w	ip, [pc, #608]	; 800b2dc <D80_GENERIC+0x294>
 800b07e:	9308      	str	r3, [sp, #32]
 800b080:	9200      	str	r2, [sp, #0]
 800b082:	e0ee      	b.n	800b262 <D80_GENERIC+0x21a>
 800b084:	b2db      	uxtb	r3, r3
 800b086:	f890 e000 	ldrb.w	lr, [r0]
 800b08a:	b219      	sxth	r1, r3
 800b08c:	425c      	negs	r4, r3
 800b08e:	f810 9003 	ldrb.w	r9, [r0, r3]
 800b092:	004e      	lsls	r6, r1, #1
 800b094:	eb01 0581 	add.w	r5, r1, r1, lsl #2
 800b098:	4431      	add	r1, r6
 800b09a:	1843      	adds	r3, r0, r1
 800b09c:	f810 b001 	ldrb.w	fp, [r0, r1]
 800b0a0:	1919      	adds	r1, r3, r4
 800b0a2:	5d1b      	ldrb	r3, [r3, r4]
 800b0a4:	1948      	adds	r0, r1, r5
 800b0a6:	f811 a005 	ldrb.w	sl, [r1, r5]
 800b0aa:	041b      	lsls	r3, r3, #16
 800b0ac:	1907      	adds	r7, r0, r4
 800b0ae:	5d01      	ldrb	r1, [r0, r4]
 800b0b0:	eb03 630b 	add.w	r3, r3, fp, lsl #24
 800b0b4:	f810 0014 	ldrb.w	r0, [r0, r4, lsl #1]
 800b0b8:	eb07 0b44 	add.w	fp, r7, r4, lsl #1
 800b0bc:	f817 7014 	ldrb.w	r7, [r7, r4, lsl #1]
 800b0c0:	0409      	lsls	r1, r1, #16
 800b0c2:	eb03 2309 	add.w	r3, r3, r9, lsl #8
 800b0c6:	eb0b 0905 	add.w	r9, fp, r5
 800b0ca:	eb01 610a 	add.w	r1, r1, sl, lsl #24
 800b0ce:	f81b 5005 	ldrb.w	r5, [fp, r5]
 800b0d2:	eb09 0b04 	add.w	fp, r9, r4
 800b0d6:	f819 4004 	ldrb.w	r4, [r9, r4]
 800b0da:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 800b0de:	4473      	add	r3, lr
 800b0e0:	eb0b 0006 	add.w	r0, fp, r6
 800b0e4:	eb04 2505 	add.w	r5, r4, r5, lsl #8
 800b0e8:	4439      	add	r1, r7
 800b0ea:	f3c3 2407 	ubfx	r4, r3, #8, #8
 800b0ee:	b2df      	uxtb	r7, r3
 800b0f0:	f3c3 4607 	ubfx	r6, r3, #16, #8
 800b0f4:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 800b0f8:	f85c 3027 	ldr.w	r3, [ip, r7, lsl #2]
 800b0fc:	fa5f fa81 	uxtb.w	sl, r1
 800b100:	f85c 7024 	ldr.w	r7, [ip, r4, lsl #2]
 800b104:	9c02      	ldr	r4, [sp, #8]
 800b106:	f85c 9026 	ldr.w	r9, [ip, r6, lsl #2]
 800b10a:	441c      	add	r4, r3
 800b10c:	f85c 602e 	ldr.w	r6, [ip, lr, lsl #2]
 800b110:	f85c e02a 	ldr.w	lr, [ip, sl, lsl #2]
 800b114:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 800b118:	eb07 2794 	add.w	r7, r7, r4, lsr #10
 800b11c:	f3c4 0309 	ubfx	r3, r4, #0, #10
 800b120:	f3c1 2407 	ubfx	r4, r1, #8, #8
 800b124:	b2ed      	uxtb	r5, r5
 800b126:	eb09 2997 	add.w	r9, r9, r7, lsr #10
 800b12a:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800b12e:	f85c 4024 	ldr.w	r4, [ip, r4, lsl #2]
 800b132:	eb06 2699 	add.w	r6, r6, r9, lsr #10
 800b136:	f85c 5025 	ldr.w	r5, [ip, r5, lsl #2]
 800b13a:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
 800b13e:	f3c1 4707 	ubfx	r7, r1, #16, #8
 800b142:	eb0e 2e96 	add.w	lr, lr, r6, lsr #10
 800b146:	f85c a02a 	ldr.w	sl, [ip, sl, lsl #2]
 800b14a:	f85c 7027 	ldr.w	r7, [ip, r7, lsl #2]
 800b14e:	0e09      	lsrs	r1, r1, #24
 800b150:	eb04 249e 	add.w	r4, r4, lr, lsr #10
 800b154:	f3c9 0909 	ubfx	r9, r9, #0, #10
 800b158:	f85c 1021 	ldr.w	r1, [ip, r1, lsl #2]
 800b15c:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800b160:	eb07 2794 	add.w	r7, r7, r4, lsr #10
 800b164:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800b168:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800b16c:	eb01 2197 	add.w	r1, r1, r7, lsr #10
 800b170:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800b174:	ea46 4609 	orr.w	r6, r6, r9, lsl #16
 800b178:	eb05 2591 	add.w	r5, r5, r1, lsr #10
 800b17c:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800b180:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 800b184:	eb0a 2a95 	add.w	sl, sl, r5, lsr #10
 800b188:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800b18c:	ea41 4107 	orr.w	r1, r1, r7, lsl #16
 800b190:	ea4f 229a 	mov.w	r2, sl, lsr #10
 800b194:	f3ca 0709 	ubfx	r7, sl, #0, #10
 800b198:	9202      	str	r2, [sp, #8]
 800b19a:	ea47 4505 	orr.w	r5, r7, r5, lsl #16
 800b19e:	4a43      	ldr	r2, [pc, #268]	; (800b2ac <D80_GENERIC+0x264>)
 800b1a0:	9f01      	ldr	r7, [sp, #4]
 800b1a2:	fb23 7a02 	smlad	sl, r3, r2, r7
 800b1a6:	4a42      	ldr	r2, [pc, #264]	; (800b2b0 <D80_GENERIC+0x268>)
 800b1a8:	fb26 aa02 	smlad	sl, r6, r2, sl
 800b1ac:	4a41      	ldr	r2, [pc, #260]	; (800b2b4 <D80_GENERIC+0x26c>)
 800b1ae:	fb24 aa02 	smlad	sl, r4, r2, sl
 800b1b2:	4a41      	ldr	r2, [pc, #260]	; (800b2b8 <D80_GENERIC+0x270>)
 800b1b4:	fb21 a702 	smlad	r7, r1, r2, sl
 800b1b8:	f44f 3a80 	mov.w	sl, #65536	; 0x10000
 800b1bc:	fb25 7a0a 	smlad	sl, r5, sl, r7
 800b1c0:	4a3e      	ldr	r2, [pc, #248]	; (800b2bc <D80_GENERIC+0x274>)
 800b1c2:	9f03      	ldr	r7, [sp, #12]
 800b1c4:	fb23 7e02 	smlad	lr, r3, r2, r7
 800b1c8:	4a3d      	ldr	r2, [pc, #244]	; (800b2c0 <D80_GENERIC+0x278>)
 800b1ca:	fb26 ee02 	smlad	lr, r6, r2, lr
 800b1ce:	f04f 174b 	mov.w	r7, #4915275	; 0x4b004b
 800b1d2:	fb24 e707 	smlad	r7, r4, r7, lr
 800b1d6:	4a3b      	ldr	r2, [pc, #236]	; (800b2c4 <D80_GENERIC+0x27c>)
 800b1d8:	fb21 7702 	smlad	r7, r1, r2, r7
 800b1dc:	4a3a      	ldr	r2, [pc, #232]	; (800b2c8 <D80_GENERIC+0x280>)
 800b1de:	fb25 7202 	smlad	r2, r5, r2, r7
 800b1e2:	f04f 0901 	mov.w	r9, #1
 800b1e6:	9201      	str	r2, [sp, #4]
 800b1e8:	fb23 f909 	smuad	r9, r3, r9
 800b1ec:	4b37      	ldr	r3, [pc, #220]	; (800b2cc <D80_GENERIC+0x284>)
 800b1ee:	fb26 9603 	smlad	r6, r6, r3, r9
 800b1f2:	4f37      	ldr	r7, [pc, #220]	; (800b2d0 <D80_GENERIC+0x288>)
 800b1f4:	fb24 6407 	smlad	r4, r4, r7, r6
 800b1f8:	4f36      	ldr	r7, [pc, #216]	; (800b2d4 <D80_GENERIC+0x28c>)
 800b1fa:	fb21 4707 	smlad	r7, r1, r7, r4
 800b1fe:	4936      	ldr	r1, [pc, #216]	; (800b2d8 <D80_GENERIC+0x290>)
 800b200:	fb25 7301 	smlad	r3, r5, r1, r7
 800b204:	9303      	str	r3, [sp, #12]
 800b206:	f5aa 3a7a 	sub.w	sl, sl, #256000	; 0x3e800
 800b20a:	9b08      	ldr	r3, [sp, #32]
 800b20c:	b193      	cbz	r3, 800b234 <D80_GENERIC+0x1ec>
 800b20e:	9a04      	ldr	r2, [sp, #16]
 800b210:	4452      	add	r2, sl
 800b212:	4614      	mov	r4, r2
 800b214:	9a05      	ldr	r2, [sp, #20]
 800b216:	f8cd a014 	str.w	sl, [sp, #20]
 800b21a:	1aa4      	subs	r4, r4, r2
 800b21c:	fba4 1203 	umull	r1, r2, r4, r3
 800b220:	17e7      	asrs	r7, r4, #31
 800b222:	f111 4400 	adds.w	r4, r1, #2147483648	; 0x80000000
 800b226:	fb03 2207 	mla	r2, r3, r7, r2
 800b22a:	f142 0500 	adc.w	r5, r2, #0
 800b22e:	006b      	lsls	r3, r5, #1
 800b230:	469a      	mov	sl, r3
 800b232:	9304      	str	r3, [sp, #16]
 800b234:	9e00      	ldr	r6, [sp, #0]
 800b236:	ea4f 2a4a 	mov.w	sl, sl, lsl #9
 800b23a:	9a06      	ldr	r2, [sp, #24]
 800b23c:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800b240:	8d33      	ldrh	r3, [r6, #40]	; 0x28
 800b242:	2500      	movs	r5, #0
 800b244:	fb08 f303 	mul.w	r3, r8, r3
 800b248:	fbc2 450a 	smlal	r4, r5, r2, sl
 800b24c:	9a07      	ldr	r2, [sp, #28]
 800b24e:	f108 0801 	add.w	r8, r8, #1
 800b252:	10a9      	asrs	r1, r5, #2
 800b254:	f301 010f 	ssat	r1, #16, r1
 800b258:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800b25c:	8cf3      	ldrh	r3, [r6, #38]	; 0x26
 800b25e:	4543      	cmp	r3, r8
 800b260:	dd12      	ble.n	800b288 <D80_GENERIC+0x240>
 800b262:	9b00      	ldr	r3, [sp, #0]
 800b264:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b266:	2b01      	cmp	r3, #1
 800b268:	f47f af0c 	bne.w	800b084 <D80_GENERIC+0x3c>
 800b26c:	9b00      	ldr	r3, [sp, #0]
 800b26e:	6885      	ldr	r5, [r0, #8]
 800b270:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 800b272:	06b2      	lsls	r2, r6, #26
 800b274:	e9d0 3100 	ldrd	r3, r1, [r0]
 800b278:	f100 000a 	add.w	r0, r0, #10
 800b27c:	f57f af35 	bpl.w	800b0ea <D80_GENERIC+0xa2>
 800b280:	ba5b      	rev16	r3, r3
 800b282:	ba49      	rev16	r1, r1
 800b284:	ba6d      	rev16	r5, r5
 800b286:	e730      	b.n	800b0ea <D80_GENERIC+0xa2>
 800b288:	4632      	mov	r2, r6
 800b28a:	9b03      	ldr	r3, [sp, #12]
 800b28c:	2000      	movs	r0, #0
 800b28e:	6093      	str	r3, [r2, #8]
 800b290:	9b01      	ldr	r3, [sp, #4]
 800b292:	60d3      	str	r3, [r2, #12]
 800b294:	9b02      	ldr	r3, [sp, #8]
 800b296:	61d3      	str	r3, [r2, #28]
 800b298:	9b04      	ldr	r3, [sp, #16]
 800b29a:	6113      	str	r3, [r2, #16]
 800b29c:	9b05      	ldr	r3, [sp, #20]
 800b29e:	6153      	str	r3, [r2, #20]
 800b2a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b2a2:	6193      	str	r3, [r2, #24]
 800b2a4:	b00b      	add	sp, #44	; 0x2c
 800b2a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b2aa:	bf00      	nop
 800b2ac:	002d0024 	.word	0x002d0024
 800b2b0:	001c0015 	.word	0x001c0015
 800b2b4:	000f000a 	.word	0x000f000a
 800b2b8:	00060003 	.word	0x00060003
 800b2bc:	0037003f 	.word	0x0037003f
 800b2c0:	00450049 	.word	0x00450049
 800b2c4:	00490045 	.word	0x00490045
 800b2c8:	003f0037 	.word	0x003f0037
 800b2cc:	00030006 	.word	0x00030006
 800b2d0:	000a000f 	.word	0x000a000f
 800b2d4:	0015001c 	.word	0x0015001c
 800b2d8:	0024002d 	.word	0x0024002d
 800b2dc:	24000000 	.word	0x24000000

0800b2e0 <D128_GENERIC>:
 800b2e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2e4:	b08d      	sub	sp, #52	; 0x34
 800b2e6:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 800b2e8:	f8d2 a01c 	ldr.w	sl, [r2, #28]
 800b2ec:	9109      	str	r1, [sp, #36]	; 0x24
 800b2ee:	6911      	ldr	r1, [r2, #16]
 800b2f0:	9201      	str	r2, [sp, #4]
 800b2f2:	9106      	str	r1, [sp, #24]
 800b2f4:	6951      	ldr	r1, [r2, #20]
 800b2f6:	9107      	str	r1, [sp, #28]
 800b2f8:	6991      	ldr	r1, [r2, #24]
 800b2fa:	910b      	str	r1, [sp, #44]	; 0x2c
 800b2fc:	6891      	ldr	r1, [r2, #8]
 800b2fe:	9103      	str	r1, [sp, #12]
 800b300:	68d1      	ldr	r1, [r2, #12]
 800b302:	9102      	str	r1, [sp, #8]
 800b304:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800b306:	9108      	str	r1, [sp, #32]
 800b308:	2b00      	cmp	r3, #0
 800b30a:	f000 8183 	beq.w	800b614 <D128_GENERIC+0x334>
 800b30e:	2300      	movs	r3, #0
 800b310:	6a12      	ldr	r2, [r2, #32]
 800b312:	4681      	mov	r9, r0
 800b314:	920a      	str	r2, [sp, #40]	; 0x28
 800b316:	e9cd a304 	strd	sl, r3, [sp, #16]
 800b31a:	e165      	b.n	800b5e8 <D128_GENERIC+0x308>
 800b31c:	b2d2      	uxtb	r2, r2
 800b31e:	f899 b000 	ldrb.w	fp, [r9]
 800b322:	b213      	sxth	r3, r2
 800b324:	4255      	negs	r5, r2
 800b326:	f819 0002 	ldrb.w	r0, [r9, r2]
 800b32a:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 800b32e:	009f      	lsls	r7, r3, #2
 800b330:	eb09 0402 	add.w	r4, r9, r2
 800b334:	ebc3 06c3 	rsb	r6, r3, r3, lsl #3
 800b338:	f819 8002 	ldrb.w	r8, [r9, r2]
 800b33c:	443b      	add	r3, r7
 800b33e:	1962      	adds	r2, r4, r5
 800b340:	5d64      	ldrb	r4, [r4, r5]
 800b342:	eb02 0c03 	add.w	ip, r2, r3
 800b346:	0424      	lsls	r4, r4, #16
 800b348:	5cd3      	ldrb	r3, [r2, r3]
 800b34a:	eb0c 0e05 	add.w	lr, ip, r5
 800b34e:	f81c 9015 	ldrb.w	r9, [ip, r5, lsl #1]
 800b352:	f81c 2005 	ldrb.w	r2, [ip, r5]
 800b356:	eb04 6408 	add.w	r4, r4, r8, lsl #24
 800b35a:	eb0e 0c45 	add.w	ip, lr, r5, lsl #1
 800b35e:	f81e 8015 	ldrb.w	r8, [lr, r5, lsl #1]
 800b362:	eb04 2400 	add.w	r4, r4, r0, lsl #8
 800b366:	eb0c 0e06 	add.w	lr, ip, r6
 800b36a:	f81c a006 	ldrb.w	sl, [ip, r6]
 800b36e:	0412      	lsls	r2, r2, #16
 800b370:	445c      	add	r4, fp
 800b372:	eb0e 0c05 	add.w	ip, lr, r5
 800b376:	eb02 6203 	add.w	r2, r2, r3, lsl #24
 800b37a:	f81e 3005 	ldrb.w	r3, [lr, r5]
 800b37e:	eb0c 0045 	add.w	r0, ip, r5, lsl #1
 800b382:	f81e e015 	ldrb.w	lr, [lr, r5, lsl #1]
 800b386:	041b      	lsls	r3, r3, #16
 800b388:	f81c c015 	ldrb.w	ip, [ip, r5, lsl #1]
 800b38c:	eb00 0b06 	add.w	fp, r0, r6
 800b390:	5d80      	ldrb	r0, [r0, r6]
 800b392:	eb03 630a 	add.w	r3, r3, sl, lsl #24
 800b396:	f81b 6005 	ldrb.w	r6, [fp, r5]
 800b39a:	eb0b 0a05 	add.w	sl, fp, r5
 800b39e:	eb02 2209 	add.w	r2, r2, r9, lsl #8
 800b3a2:	f81b b015 	ldrb.w	fp, [fp, r5, lsl #1]
 800b3a6:	0436      	lsls	r6, r6, #16
 800b3a8:	eb0a 0945 	add.w	r9, sl, r5, lsl #1
 800b3ac:	4442      	add	r2, r8
 800b3ae:	eb06 6600 	add.w	r6, r6, r0, lsl #24
 800b3b2:	f81a 8015 	ldrb.w	r8, [sl, r5, lsl #1]
 800b3b6:	eb03 230e 	add.w	r3, r3, lr, lsl #8
 800b3ba:	44b9      	add	r9, r7
 800b3bc:	eb06 260b 	add.w	r6, r6, fp, lsl #8
 800b3c0:	4463      	add	r3, ip
 800b3c2:	eb06 0508 	add.w	r5, r6, r8
 800b3c6:	b2e7      	uxtb	r7, r4
 800b3c8:	f3c4 2607 	ubfx	r6, r4, #8, #8
 800b3cc:	499b      	ldr	r1, [pc, #620]	; (800b63c <D128_GENERIC+0x35c>)
 800b3ce:	f3c4 4007 	ubfx	r0, r4, #16, #8
 800b3d2:	0e24      	lsrs	r4, r4, #24
 800b3d4:	f851 c027 	ldr.w	ip, [r1, r7, lsl #2]
 800b3d8:	b2d7      	uxtb	r7, r2
 800b3da:	f851 b026 	ldr.w	fp, [r1, r6, lsl #2]
 800b3de:	f3c2 2607 	ubfx	r6, r2, #8, #8
 800b3e2:	9904      	ldr	r1, [sp, #16]
 800b3e4:	4461      	add	r1, ip
 800b3e6:	468c      	mov	ip, r1
 800b3e8:	4994      	ldr	r1, [pc, #592]	; (800b63c <D128_GENERIC+0x35c>)
 800b3ea:	eb0b 2b9c 	add.w	fp, fp, ip, lsr #10
 800b3ee:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 800b3f2:	f851 8024 	ldr.w	r8, [r1, r4, lsl #2]
 800b3f6:	f3c2 4407 	ubfx	r4, r2, #16, #8
 800b3fa:	eb00 209b 	add.w	r0, r0, fp, lsr #10
 800b3fe:	f851 e027 	ldr.w	lr, [r1, r7, lsl #2]
 800b402:	f851 7026 	ldr.w	r7, [r1, r6, lsl #2]
 800b406:	0e12      	lsrs	r2, r2, #24
 800b408:	eb08 2890 	add.w	r8, r8, r0, lsr #10
 800b40c:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 800b410:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 800b414:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800b418:	eb0e 2e98 	add.w	lr, lr, r8, lsr #10
 800b41c:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800b420:	b2da      	uxtb	r2, r3
 800b422:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 800b426:	eb07 279e 	add.w	r7, r7, lr, lsr #10
 800b42a:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 800b42e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800b432:	ea48 4800 	orr.w	r8, r8, r0, lsl #16
 800b436:	eb04 2a97 	add.w	sl, r4, r7, lsr #10
 800b43a:	f3c3 2007 	ubfx	r0, r3, #8, #8
 800b43e:	ea4b 4b0c 	orr.w	fp, fp, ip, lsl #16
 800b442:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800b446:	eb06 269a 	add.w	r6, r6, sl, lsr #10
 800b44a:	f851 c020 	ldr.w	ip, [r1, r0, lsl #2]
 800b44e:	f3c3 4007 	ubfx	r0, r3, #16, #8
 800b452:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800b456:	eb02 2296 	add.w	r2, r2, r6, lsr #10
 800b45a:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 800b45e:	f851 4020 	ldr.w	r4, [r1, r0, lsl #2]
 800b462:	0e1b      	lsrs	r3, r3, #24
 800b464:	eb0c 2c92 	add.w	ip, ip, r2, lsr #10
 800b468:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800b46c:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
 800b470:	ea47 470e 	orr.w	r7, r7, lr, lsl #16
 800b474:	b2eb      	uxtb	r3, r5
 800b476:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800b47a:	eb04 2e9c 	add.w	lr, r4, ip, lsr #10
 800b47e:	f3cc 0409 	ubfx	r4, ip, #0, #10
 800b482:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800b486:	ea46 460a 	orr.w	r6, r6, sl, lsl #16
 800b48a:	eb00 209e 	add.w	r0, r0, lr, lsr #10
 800b48e:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 800b492:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800b496:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800b49a:	eb03 2c90 	add.w	ip, r3, r0, lsr #10
 800b49e:	f851 202a 	ldr.w	r2, [r1, sl, lsl #2]
 800b4a2:	f3c5 4307 	ubfx	r3, r5, #16, #8
 800b4a6:	ea4f 6a15 	mov.w	sl, r5, lsr #24
 800b4aa:	eb02 229c 	add.w	r2, r2, ip, lsr #10
 800b4ae:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800b4b2:	f851 5023 	ldr.w	r5, [r1, r3, lsl #2]
 800b4b6:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 800b4ba:	f851 302a 	ldr.w	r3, [r1, sl, lsl #2]
 800b4be:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 800b4c2:	eb05 2592 	add.w	r5, r5, r2, lsr #10
 800b4c6:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800b4ca:	eb03 2e95 	add.w	lr, r3, r5, lsr #10
 800b4ce:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800b4d2:	ea42 430c 	orr.w	r3, r2, ip, lsl #16
 800b4d6:	ea4f 219e 	mov.w	r1, lr, lsr #10
 800b4da:	f3ce 0209 	ubfx	r2, lr, #0, #10
 800b4de:	9104      	str	r1, [sp, #16]
 800b4e0:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 800b4e4:	9902      	ldr	r1, [sp, #8]
 800b4e6:	4a56      	ldr	r2, [pc, #344]	; (800b640 <D128_GENERIC+0x360>)
 800b4e8:	fb2b 1202 	smlad	r2, fp, r2, r1
 800b4ec:	4955      	ldr	r1, [pc, #340]	; (800b644 <D128_GENERIC+0x364>)
 800b4ee:	fb28 2201 	smlad	r2, r8, r1, r2
 800b4f2:	4955      	ldr	r1, [pc, #340]	; (800b648 <D128_GENERIC+0x368>)
 800b4f4:	fb27 2201 	smlad	r2, r7, r1, r2
 800b4f8:	4954      	ldr	r1, [pc, #336]	; (800b64c <D128_GENERIC+0x36c>)
 800b4fa:	fb26 2201 	smlad	r2, r6, r1, r2
 800b4fe:	4954      	ldr	r1, [pc, #336]	; (800b650 <D128_GENERIC+0x370>)
 800b500:	fb24 2201 	smlad	r2, r4, r1, r2
 800b504:	4953      	ldr	r1, [pc, #332]	; (800b654 <D128_GENERIC+0x374>)
 800b506:	fb20 2201 	smlad	r2, r0, r1, r2
 800b50a:	4953      	ldr	r1, [pc, #332]	; (800b658 <D128_GENERIC+0x378>)
 800b50c:	fb23 2201 	smlad	r2, r3, r1, r2
 800b510:	f44f 3c80 	mov.w	ip, #65536	; 0x10000
 800b514:	fb25 2a0c 	smlad	sl, r5, ip, r2
 800b518:	4950      	ldr	r1, [pc, #320]	; (800b65c <D128_GENERIC+0x37c>)
 800b51a:	9a03      	ldr	r2, [sp, #12]
 800b51c:	fb2b 2c01 	smlad	ip, fp, r1, r2
 800b520:	4a4f      	ldr	r2, [pc, #316]	; (800b660 <D128_GENERIC+0x380>)
 800b522:	fb28 ce02 	smlad	lr, r8, r2, ip
 800b526:	f8df c150 	ldr.w	ip, [pc, #336]	; 800b678 <D128_GENERIC+0x398>
 800b52a:	fb27 ec0c 	smlad	ip, r7, ip, lr
 800b52e:	f8df e14c 	ldr.w	lr, [pc, #332]	; 800b67c <D128_GENERIC+0x39c>
 800b532:	fb26 cc0e 	smlad	ip, r6, lr, ip
 800b536:	f8df e148 	ldr.w	lr, [pc, #328]	; 800b680 <D128_GENERIC+0x3a0>
 800b53a:	fb24 ce0e 	smlad	lr, r4, lr, ip
 800b53e:	f8df c144 	ldr.w	ip, [pc, #324]	; 800b684 <D128_GENERIC+0x3a4>
 800b542:	fb20 ee0c 	smlad	lr, r0, ip, lr
 800b546:	f8df c140 	ldr.w	ip, [pc, #320]	; 800b688 <D128_GENERIC+0x3a8>
 800b54a:	fb23 ec0c 	smlad	ip, r3, ip, lr
 800b54e:	f8df e13c 	ldr.w	lr, [pc, #316]	; 800b68c <D128_GENERIC+0x3ac>
 800b552:	fb25 c20e 	smlad	r2, r5, lr, ip
 800b556:	f04f 0c01 	mov.w	ip, #1
 800b55a:	9202      	str	r2, [sp, #8]
 800b55c:	fb2b fb0c 	smuad	fp, fp, ip
 800b560:	f8df c12c 	ldr.w	ip, [pc, #300]	; 800b690 <D128_GENERIC+0x3b0>
 800b564:	fb28 bb0c 	smlad	fp, r8, ip, fp
 800b568:	f8df c128 	ldr.w	ip, [pc, #296]	; 800b694 <D128_GENERIC+0x3b4>
 800b56c:	fb27 bb0c 	smlad	fp, r7, ip, fp
 800b570:	4f3c      	ldr	r7, [pc, #240]	; (800b664 <D128_GENERIC+0x384>)
 800b572:	fb26 bb07 	smlad	fp, r6, r7, fp
 800b576:	4f3c      	ldr	r7, [pc, #240]	; (800b668 <D128_GENERIC+0x388>)
 800b578:	fb24 bb07 	smlad	fp, r4, r7, fp
 800b57c:	4f3b      	ldr	r7, [pc, #236]	; (800b66c <D128_GENERIC+0x38c>)
 800b57e:	fb20 bb07 	smlad	fp, r0, r7, fp
 800b582:	4f3b      	ldr	r7, [pc, #236]	; (800b670 <D128_GENERIC+0x390>)
 800b584:	fb23 bb07 	smlad	fp, r3, r7, fp
 800b588:	4b3a      	ldr	r3, [pc, #232]	; (800b674 <D128_GENERIC+0x394>)
 800b58a:	fb25 b303 	smlad	r3, r5, r3, fp
 800b58e:	9303      	str	r3, [sp, #12]
 800b590:	f5aa 1480 	sub.w	r4, sl, #1048576	; 0x100000
 800b594:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b596:	b183      	cbz	r3, 800b5ba <D128_GENERIC+0x2da>
 800b598:	9a06      	ldr	r2, [sp, #24]
 800b59a:	9907      	ldr	r1, [sp, #28]
 800b59c:	4422      	add	r2, r4
 800b59e:	9407      	str	r4, [sp, #28]
 800b5a0:	1a52      	subs	r2, r2, r1
 800b5a2:	fba2 0103 	umull	r0, r1, r2, r3
 800b5a6:	17d5      	asrs	r5, r2, #31
 800b5a8:	f110 4200 	adds.w	r2, r0, #2147483648	; 0x80000000
 800b5ac:	fb03 1105 	mla	r1, r3, r5, r1
 800b5b0:	f141 0300 	adc.w	r3, r1, #0
 800b5b4:	005b      	lsls	r3, r3, #1
 800b5b6:	461c      	mov	r4, r3
 800b5b8:	9306      	str	r3, [sp, #24]
 800b5ba:	9d01      	ldr	r5, [sp, #4]
 800b5bc:	01e4      	lsls	r4, r4, #7
 800b5be:	9e05      	ldr	r6, [sp, #20]
 800b5c0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b5c4:	8d28      	ldrh	r0, [r5, #40]	; 0x28
 800b5c6:	2300      	movs	r3, #0
 800b5c8:	9908      	ldr	r1, [sp, #32]
 800b5ca:	fb06 f000 	mul.w	r0, r6, r0
 800b5ce:	3601      	adds	r6, #1
 800b5d0:	fbc1 2304 	smlal	r2, r3, r1, r4
 800b5d4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b5d6:	109b      	asrs	r3, r3, #2
 800b5d8:	9605      	str	r6, [sp, #20]
 800b5da:	f303 030f 	ssat	r3, #16, r3
 800b5de:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
 800b5e2:	8ceb      	ldrh	r3, [r5, #38]	; 0x26
 800b5e4:	42b3      	cmp	r3, r6
 800b5e6:	dd13      	ble.n	800b610 <D128_GENERIC+0x330>
 800b5e8:	9b01      	ldr	r3, [sp, #4]
 800b5ea:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800b5ec:	2a01      	cmp	r2, #1
 800b5ee:	f47f ae95 	bne.w	800b31c <D128_GENERIC+0x3c>
 800b5f2:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800b5f4:	f109 0610 	add.w	r6, r9, #16
 800b5f8:	0681      	lsls	r1, r0, #26
 800b5fa:	e9d9 4200 	ldrd	r4, r2, [r9]
 800b5fe:	e9d9 3502 	ldrd	r3, r5, [r9, #8]
 800b602:	d518      	bpl.n	800b636 <D128_GENERIC+0x356>
 800b604:	ba64      	rev16	r4, r4
 800b606:	ba52      	rev16	r2, r2
 800b608:	ba5b      	rev16	r3, r3
 800b60a:	ba6d      	rev16	r5, r5
 800b60c:	46b1      	mov	r9, r6
 800b60e:	e6da      	b.n	800b3c6 <D128_GENERIC+0xe6>
 800b610:	f8dd a010 	ldr.w	sl, [sp, #16]
 800b614:	9b01      	ldr	r3, [sp, #4]
 800b616:	2000      	movs	r0, #0
 800b618:	9903      	ldr	r1, [sp, #12]
 800b61a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b61c:	6099      	str	r1, [r3, #8]
 800b61e:	9902      	ldr	r1, [sp, #8]
 800b620:	f8c3 a01c 	str.w	sl, [r3, #28]
 800b624:	60d9      	str	r1, [r3, #12]
 800b626:	9906      	ldr	r1, [sp, #24]
 800b628:	619a      	str	r2, [r3, #24]
 800b62a:	6119      	str	r1, [r3, #16]
 800b62c:	9907      	ldr	r1, [sp, #28]
 800b62e:	6159      	str	r1, [r3, #20]
 800b630:	b00d      	add	sp, #52	; 0x34
 800b632:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b636:	46b1      	mov	r9, r6
 800b638:	e6c5      	b.n	800b3c6 <D128_GENERIC+0xe6>
 800b63a:	bf00      	nop
 800b63c:	24000000 	.word	0x24000000
 800b640:	00780069 	.word	0x00780069
 800b644:	005b004e 	.word	0x005b004e
 800b648:	00420037 	.word	0x00420037
 800b64c:	002d0024 	.word	0x002d0024
 800b650:	001c0015 	.word	0x001c0015
 800b654:	000f000a 	.word	0x000f000a
 800b658:	00060003 	.word	0x00060003
 800b65c:	00880096 	.word	0x00880096
 800b660:	00a200ac 	.word	0x00a200ac
 800b664:	0015001c 	.word	0x0015001c
 800b668:	0024002d 	.word	0x0024002d
 800b66c:	00370042 	.word	0x00370042
 800b670:	004e005b 	.word	0x004e005b
 800b674:	00690078 	.word	0x00690078
 800b678:	00b400ba 	.word	0x00b400ba
 800b67c:	00be00c0 	.word	0x00be00c0
 800b680:	00c000be 	.word	0x00c000be
 800b684:	00ba00b4 	.word	0x00ba00b4
 800b688:	00ac00a2 	.word	0x00ac00a2
 800b68c:	00960088 	.word	0x00960088
 800b690:	00030006 	.word	0x00030006
 800b694:	000a000f 	.word	0x000a000f

0800b698 <D16_1CH_HTONS_VOL_HP>:
 800b698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b69c:	6993      	ldr	r3, [r2, #24]
 800b69e:	b087      	sub	sp, #28
 800b6a0:	4682      	mov	sl, r0
 800b6a2:	8cd0      	ldrh	r0, [r2, #38]	; 0x26
 800b6a4:	9304      	str	r3, [sp, #16]
 800b6a6:	f8d2 b030 	ldr.w	fp, [r2, #48]	; 0x30
 800b6aa:	69d3      	ldr	r3, [r2, #28]
 800b6ac:	f8d2 e020 	ldr.w	lr, [r2, #32]
 800b6b0:	e9d2 5402 	ldrd	r5, r4, [r2, #8]
 800b6b4:	e9d2 6c04 	ldrd	r6, ip, [r2, #16]
 800b6b8:	9403      	str	r4, [sp, #12]
 800b6ba:	2800      	cmp	r0, #0
 800b6bc:	d054      	beq.n	800b768 <D16_1CH_HTONS_VOL_HP+0xd0>
 800b6be:	f1a1 0902 	sub.w	r9, r1, #2
 800b6c2:	eb0a 0140 	add.w	r1, sl, r0, lsl #1
 800b6c6:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 800b774 <D16_1CH_HTONS_VOL_HP+0xdc>
 800b6ca:	4650      	mov	r0, sl
 800b6cc:	9101      	str	r1, [sp, #4]
 800b6ce:	4619      	mov	r1, r3
 800b6d0:	f8cd b008 	str.w	fp, [sp, #8]
 800b6d4:	9205      	str	r2, [sp, #20]
 800b6d6:	f850 3b02 	ldr.w	r3, [r0], #2
 800b6da:	ba5b      	rev16	r3, r3
 800b6dc:	b2dc      	uxtb	r4, r3
 800b6de:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800b6e2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b6e6:	f858 4022 	ldr.w	r4, [r8, r2, lsl #2]
 800b6ea:	4419      	add	r1, r3
 800b6ec:	eb04 2491 	add.w	r4, r4, r1, lsr #10
 800b6f0:	f3c1 0309 	ubfx	r3, r1, #0, #10
 800b6f4:	f3c4 0209 	ubfx	r2, r4, #0, #10
 800b6f8:	0aa1      	lsrs	r1, r4, #10
 800b6fa:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 800b6fe:	4a1b      	ldr	r2, [pc, #108]	; (800b76c <D16_1CH_HTONS_VOL_HP+0xd4>)
 800b700:	fb23 5402 	smlad	r4, r3, r2, r5
 800b704:	4a1a      	ldr	r2, [pc, #104]	; (800b770 <D16_1CH_HTONS_VOL_HP+0xd8>)
 800b706:	fb23 f502 	smuad	r5, r3, r2
 800b70a:	f5a4 6400 	sub.w	r4, r4, #2048	; 0x800
 800b70e:	f04f 4a00 	mov.w	sl, #2147483648	; 0x80000000
 800b712:	f04f 0b00 	mov.w	fp, #0
 800b716:	19a2      	adds	r2, r4, r6
 800b718:	eba2 020c 	sub.w	r2, r2, ip
 800b71c:	46a4      	mov	ip, r4
 800b71e:	17d7      	asrs	r7, r2, #31
 800b720:	fba2 230e 	umull	r2, r3, r2, lr
 800b724:	f112 4600 	adds.w	r6, r2, #2147483648	; 0x80000000
 800b728:	fb0e 3307 	mla	r3, lr, r7, r3
 800b72c:	f143 0700 	adc.w	r7, r3, #0
 800b730:	9b02      	ldr	r3, [sp, #8]
 800b732:	047a      	lsls	r2, r7, #17
 800b734:	007e      	lsls	r6, r7, #1
 800b736:	fbc3 ab02 	smlal	sl, fp, r3, r2
 800b73a:	ea4f 03ab 	mov.w	r3, fp, asr #2
 800b73e:	f303 030f 	ssat	r3, #16, r3
 800b742:	f829 3f02 	strh.w	r3, [r9, #2]!
 800b746:	9b01      	ldr	r3, [sp, #4]
 800b748:	4298      	cmp	r0, r3
 800b74a:	d1c4      	bne.n	800b6d6 <D16_1CH_HTONS_VOL_HP+0x3e>
 800b74c:	460b      	mov	r3, r1
 800b74e:	9a05      	ldr	r2, [sp, #20]
 800b750:	2000      	movs	r0, #0
 800b752:	9903      	ldr	r1, [sp, #12]
 800b754:	61d3      	str	r3, [r2, #28]
 800b756:	9b04      	ldr	r3, [sp, #16]
 800b758:	6095      	str	r5, [r2, #8]
 800b75a:	60d1      	str	r1, [r2, #12]
 800b75c:	6193      	str	r3, [r2, #24]
 800b75e:	e9c2 6404 	strd	r6, r4, [r2, #16]
 800b762:	b007      	add	sp, #28
 800b764:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b768:	4664      	mov	r4, ip
 800b76a:	e7f1      	b.n	800b750 <D16_1CH_HTONS_VOL_HP+0xb8>
 800b76c:	00030001 	.word	0x00030001
 800b770:	00010003 	.word	0x00010003
 800b774:	24000000 	.word	0x24000000

0800b778 <D24_1CH_HTONS_VOL_HP>:
 800b778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b77c:	6b16      	ldr	r6, [r2, #48]	; 0x30
 800b77e:	b089      	sub	sp, #36	; 0x24
 800b780:	6993      	ldr	r3, [r2, #24]
 800b782:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 800b784:	9604      	str	r6, [sp, #16]
 800b786:	6a16      	ldr	r6, [r2, #32]
 800b788:	9306      	str	r3, [sp, #24]
 800b78a:	9505      	str	r5, [sp, #20]
 800b78c:	69d3      	ldr	r3, [r2, #28]
 800b78e:	9600      	str	r6, [sp, #0]
 800b790:	e9d2 4a04 	ldrd	r4, sl, [r2, #16]
 800b794:	e9d2 ce02 	ldrd	ip, lr, [r2, #8]
 800b798:	2d00      	cmp	r5, #0
 800b79a:	f000 8083 	beq.w	800b8a4 <D24_1CH_HTONS_VOL_HP+0x12c>
 800b79e:	9207      	str	r2, [sp, #28]
 800b7a0:	2600      	movs	r6, #0
 800b7a2:	4622      	mov	r2, r4
 800b7a4:	f1a1 0b02 	sub.w	fp, r1, #2
 800b7a8:	4f3f      	ldr	r7, [pc, #252]	; (800b8a8 <D24_1CH_HTONS_VOL_HP+0x130>)
 800b7aa:	461d      	mov	r5, r3
 800b7ac:	f8cd a00c 	str.w	sl, [sp, #12]
 800b7b0:	9c00      	ldr	r4, [sp, #0]
 800b7b2:	e056      	b.n	800b862 <D24_1CH_HTONS_VOL_HP+0xea>
 800b7b4:	7841      	ldrb	r1, [r0, #1]
 800b7b6:	eb08 4809 	add.w	r8, r8, r9, lsl #16
 800b7ba:	3002      	adds	r0, #2
 800b7bc:	4488      	add	r8, r1
 800b7be:	fa5f f388 	uxtb.w	r3, r8
 800b7c2:	f3c8 2907 	ubfx	r9, r8, #8, #8
 800b7c6:	ea4f 4818 	mov.w	r8, r8, lsr #16
 800b7ca:	f857 1023 	ldr.w	r1, [r7, r3, lsl #2]
 800b7ce:	f857 3029 	ldr.w	r3, [r7, r9, lsl #2]
 800b7d2:	eb01 2195 	add.w	r1, r1, r5, lsr #10
 800b7d6:	f857 5028 	ldr.w	r5, [r7, r8, lsl #2]
 800b7da:	eb03 2891 	add.w	r8, r3, r1, lsr #10
 800b7de:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800b7e2:	f3c8 0309 	ubfx	r3, r8, #0, #10
 800b7e6:	eb05 2598 	add.w	r5, r5, r8, lsr #10
 800b7ea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800b7ee:	492f      	ldr	r1, [pc, #188]	; (800b8ac <D24_1CH_HTONS_VOL_HP+0x134>)
 800b7f0:	fb23 e901 	smlad	r9, r3, r1, lr
 800b7f4:	492e      	ldr	r1, [pc, #184]	; (800b8b0 <D24_1CH_HTONS_VOL_HP+0x138>)
 800b7f6:	fb23 ce01 	smlad	lr, r3, r1, ip
 800b7fa:	f3c5 0c09 	ubfx	ip, r5, #0, #10
 800b7fe:	2101      	movs	r1, #1
 800b800:	eb0c 084c 	add.w	r8, ip, ip, lsl #1
 800b804:	eb0e 0e48 	add.w	lr, lr, r8, lsl #1
 800b808:	fb23 f301 	smuad	r3, r3, r1
 800b80c:	f5a9 51d8 	sub.w	r1, r9, #6912	; 0x1b00
 800b810:	eb08 0c03 	add.w	ip, r8, r3
 800b814:	9b03      	ldr	r3, [sp, #12]
 800b816:	f04f 0a00 	mov.w	sl, #0
 800b81a:	440a      	add	r2, r1
 800b81c:	3601      	adds	r6, #1
 800b81e:	9103      	str	r1, [sp, #12]
 800b820:	1ad2      	subs	r2, r2, r3
 800b822:	ea4f 79e2 	mov.w	r9, r2, asr #31
 800b826:	fba2 2304 	umull	r2, r3, r2, r4
 800b82a:	e9cd 2300 	strd	r2, r3, [sp]
 800b82e:	fb04 3309 	mla	r3, r4, r9, r3
 800b832:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
 800b836:	9301      	str	r3, [sp, #4]
 800b838:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b83c:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 800b840:	f143 0300 	adc.w	r3, r3, #0
 800b844:	ea4f 38c3 	mov.w	r8, r3, lsl #15
 800b848:	005a      	lsls	r2, r3, #1
 800b84a:	9b04      	ldr	r3, [sp, #16]
 800b84c:	fbc3 9a08 	smlal	r9, sl, r3, r8
 800b850:	ea4f 03aa 	mov.w	r3, sl, asr #2
 800b854:	f303 030f 	ssat	r3, #16, r3
 800b858:	f82b 3f02 	strh.w	r3, [fp, #2]!
 800b85c:	9b05      	ldr	r3, [sp, #20]
 800b85e:	429e      	cmp	r6, r3
 800b860:	d010      	beq.n	800b884 <D24_1CH_HTONS_VOL_HP+0x10c>
 800b862:	f890 9003 	ldrb.w	r9, [r0, #3]
 800b866:	f016 0f01 	tst.w	r6, #1
 800b86a:	7801      	ldrb	r1, [r0, #0]
 800b86c:	ea4f 2309 	mov.w	r3, r9, lsl #8
 800b870:	ea4f 2801 	mov.w	r8, r1, lsl #8
 800b874:	d09e      	beq.n	800b7b4 <D24_1CH_HTONS_VOL_HP+0x3c>
 800b876:	f890 8002 	ldrb.w	r8, [r0, #2]
 800b87a:	3004      	adds	r0, #4
 800b87c:	eb03 4808 	add.w	r8, r3, r8, lsl #16
 800b880:	4488      	add	r8, r1
 800b882:	e79c      	b.n	800b7be <D24_1CH_HTONS_VOL_HP+0x46>
 800b884:	4614      	mov	r4, r2
 800b886:	462b      	mov	r3, r5
 800b888:	9a07      	ldr	r2, [sp, #28]
 800b88a:	2000      	movs	r0, #0
 800b88c:	61d3      	str	r3, [r2, #28]
 800b88e:	9b06      	ldr	r3, [sp, #24]
 800b890:	f8c2 c008 	str.w	ip, [r2, #8]
 800b894:	f8c2 e00c 	str.w	lr, [r2, #12]
 800b898:	6193      	str	r3, [r2, #24]
 800b89a:	e9c2 4104 	strd	r4, r1, [r2, #16]
 800b89e:	b009      	add	sp, #36	; 0x24
 800b8a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8a4:	4651      	mov	r1, sl
 800b8a6:	e7f0      	b.n	800b88a <D24_1CH_HTONS_VOL_HP+0x112>
 800b8a8:	24000000 	.word	0x24000000
 800b8ac:	00030001 	.word	0x00030001
 800b8b0:	00060007 	.word	0x00060007

0800b8b4 <D32_1CH_HTONS_VOL_HP>:
 800b8b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8b8:	6993      	ldr	r3, [r2, #24]
 800b8ba:	b087      	sub	sp, #28
 800b8bc:	4683      	mov	fp, r0
 800b8be:	8cd0      	ldrh	r0, [r2, #38]	; 0x26
 800b8c0:	9304      	str	r3, [sp, #16]
 800b8c2:	69d5      	ldr	r5, [r2, #28]
 800b8c4:	6b14      	ldr	r4, [r2, #48]	; 0x30
 800b8c6:	f8d2 a020 	ldr.w	sl, [r2, #32]
 800b8ca:	e9d2 8e04 	ldrd	r8, lr, [r2, #16]
 800b8ce:	e9d2 3c02 	ldrd	r3, ip, [r2, #8]
 800b8d2:	2800      	cmp	r0, #0
 800b8d4:	d077      	beq.n	800b9c6 <D32_1CH_HTONS_VOL_HP+0x112>
 800b8d6:	460f      	mov	r7, r1
 800b8d8:	46f1      	mov	r9, lr
 800b8da:	eb01 0140 	add.w	r1, r1, r0, lsl #1
 800b8de:	f8cd 8000 	str.w	r8, [sp]
 800b8e2:	4e3a      	ldr	r6, [pc, #232]	; (800b9cc <D32_1CH_HTONS_VOL_HP+0x118>)
 800b8e4:	469e      	mov	lr, r3
 800b8e6:	46a0      	mov	r8, r4
 800b8e8:	9103      	str	r1, [sp, #12]
 800b8ea:	9205      	str	r2, [sp, #20]
 800b8ec:	f85b 4b04 	ldr.w	r4, [fp], #4
 800b8f0:	ba64      	rev16	r4, r4
 800b8f2:	b2e0      	uxtb	r0, r4
 800b8f4:	f3c4 2307 	ubfx	r3, r4, #8, #8
 800b8f8:	f3c4 4107 	ubfx	r1, r4, #16, #8
 800b8fc:	0e24      	lsrs	r4, r4, #24
 800b8fe:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 800b902:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 800b906:	eb00 2095 	add.w	r0, r0, r5, lsr #10
 800b90a:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 800b90e:	f856 5024 	ldr.w	r5, [r6, r4, lsl #2]
 800b912:	eb03 2390 	add.w	r3, r3, r0, lsr #10
 800b916:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800b91a:	eb01 2193 	add.w	r1, r1, r3, lsr #10
 800b91e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b922:	eb05 2591 	add.w	r5, r5, r1, lsr #10
 800b926:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800b92a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800b92e:	f3c5 0009 	ubfx	r0, r5, #0, #10
 800b932:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800b936:	4826      	ldr	r0, [pc, #152]	; (800b9d0 <D32_1CH_HTONS_VOL_HP+0x11c>)
 800b938:	fb23 c400 	smlad	r4, r3, r0, ip
 800b93c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800b940:	fb21 4402 	smlad	r4, r1, r2, r4
 800b944:	4823      	ldr	r0, [pc, #140]	; (800b9d4 <D32_1CH_HTONS_VOL_HP+0x120>)
 800b946:	fb23 ec00 	smlad	ip, r3, r0, lr
 800b94a:	4823      	ldr	r0, [pc, #140]	; (800b9d8 <D32_1CH_HTONS_VOL_HP+0x124>)
 800b94c:	fb21 cc00 	smlad	ip, r1, r0, ip
 800b950:	2201      	movs	r2, #1
 800b952:	fb23 f302 	smuad	r3, r3, r2
 800b956:	4821      	ldr	r0, [pc, #132]	; (800b9dc <D32_1CH_HTONS_VOL_HP+0x128>)
 800b958:	fb21 3e00 	smlad	lr, r1, r0, r3
 800b95c:	9b00      	ldr	r3, [sp, #0]
 800b95e:	f5a4 4480 	sub.w	r4, r4, #16384	; 0x4000
 800b962:	4423      	add	r3, r4
 800b964:	eba3 0209 	sub.w	r2, r3, r9
 800b968:	46a1      	mov	r9, r4
 800b96a:	17d1      	asrs	r1, r2, #31
 800b96c:	fba2 230a 	umull	r2, r3, r2, sl
 800b970:	e9cd 2300 	strd	r2, r3, [sp]
 800b974:	fb0a 3301 	mla	r3, sl, r1, r3
 800b978:	9301      	str	r3, [sp, #4]
 800b97a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b97e:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 800b982:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b986:	f143 0300 	adc.w	r3, r3, #0
 800b98a:	0399      	lsls	r1, r3, #14
 800b98c:	005b      	lsls	r3, r3, #1
 800b98e:	9300      	str	r3, [sp, #0]
 800b990:	2300      	movs	r3, #0
 800b992:	fbc8 2301 	smlal	r2, r3, r8, r1
 800b996:	109b      	asrs	r3, r3, #2
 800b998:	f303 030f 	ssat	r3, #16, r3
 800b99c:	f827 3b02 	strh.w	r3, [r7], #2
 800b9a0:	9b03      	ldr	r3, [sp, #12]
 800b9a2:	429f      	cmp	r7, r3
 800b9a4:	d1a2      	bne.n	800b8ec <D32_1CH_HTONS_VOL_HP+0x38>
 800b9a6:	4673      	mov	r3, lr
 800b9a8:	f8dd 8000 	ldr.w	r8, [sp]
 800b9ac:	9a05      	ldr	r2, [sp, #20]
 800b9ae:	6093      	str	r3, [r2, #8]
 800b9b0:	2000      	movs	r0, #0
 800b9b2:	9b04      	ldr	r3, [sp, #16]
 800b9b4:	f8c2 c00c 	str.w	ip, [r2, #12]
 800b9b8:	61d5      	str	r5, [r2, #28]
 800b9ba:	6193      	str	r3, [r2, #24]
 800b9bc:	e9c2 8404 	strd	r8, r4, [r2, #16]
 800b9c0:	b007      	add	sp, #28
 800b9c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9c6:	4674      	mov	r4, lr
 800b9c8:	e7f1      	b.n	800b9ae <D32_1CH_HTONS_VOL_HP+0xfa>
 800b9ca:	bf00      	nop
 800b9cc:	24000000 	.word	0x24000000
 800b9d0:	00060003 	.word	0x00060003
 800b9d4:	000a000c 	.word	0x000a000c
 800b9d8:	000c000a 	.word	0x000c000a
 800b9dc:	00030006 	.word	0x00030006

0800b9e0 <D48_1CH_HTONS_VOL_HP>:
 800b9e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9e4:	6b17      	ldr	r7, [r2, #48]	; 0x30
 800b9e6:	b087      	sub	sp, #28
 800b9e8:	6993      	ldr	r3, [r2, #24]
 800b9ea:	9701      	str	r7, [sp, #4]
 800b9ec:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 800b9ee:	6a17      	ldr	r7, [r2, #32]
 800b9f0:	9304      	str	r3, [sp, #16]
 800b9f2:	69d6      	ldr	r6, [r2, #28]
 800b9f4:	9702      	str	r7, [sp, #8]
 800b9f6:	e9d2 4e04 	ldrd	r4, lr, [r2, #16]
 800b9fa:	e9d2 3c02 	ldrd	r3, ip, [r2, #8]
 800b9fe:	2d00      	cmp	r5, #0
 800ba00:	f000 8093 	beq.w	800bb2a <D48_1CH_HTONS_VOL_HP+0x14a>
 800ba04:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ba08:	f1a1 0b02 	sub.w	fp, r1, #2
 800ba0c:	46f2      	mov	sl, lr
 800ba0e:	4f48      	ldr	r7, [pc, #288]	; (800bb30 <D48_1CH_HTONS_VOL_HP+0x150>)
 800ba10:	eb00 0145 	add.w	r1, r0, r5, lsl #1
 800ba14:	469e      	mov	lr, r3
 800ba16:	9205      	str	r2, [sp, #20]
 800ba18:	9103      	str	r1, [sp, #12]
 800ba1a:	e9d0 3200 	ldrd	r3, r2, [r0]
 800ba1e:	3006      	adds	r0, #6
 800ba20:	ba5b      	rev16	r3, r3
 800ba22:	fa92 f992 	rev16.w	r9, r2
 800ba26:	b2dd      	uxtb	r5, r3
 800ba28:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800ba2c:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800ba30:	0e1b      	lsrs	r3, r3, #24
 800ba32:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 800ba36:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 800ba3a:	eb05 2696 	add.w	r6, r5, r6, lsr #10
 800ba3e:	f857 5022 	ldr.w	r5, [r7, r2, lsl #2]
 800ba42:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 800ba46:	fa5f f289 	uxtb.w	r2, r9
 800ba4a:	eb01 2196 	add.w	r1, r1, r6, lsr #10
 800ba4e:	f3c9 2907 	ubfx	r9, r9, #8, #8
 800ba52:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 800ba56:	f3c6 0809 	ubfx	r8, r6, #0, #10
 800ba5a:	eb05 2591 	add.w	r5, r5, r1, lsr #10
 800ba5e:	f857 6029 	ldr.w	r6, [r7, r9, lsl #2]
 800ba62:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800ba66:	eb03 2395 	add.w	r3, r3, r5, lsr #10
 800ba6a:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800ba6e:	ea41 4808 	orr.w	r8, r1, r8, lsl #16
 800ba72:	eb02 2293 	add.w	r2, r2, r3, lsr #10
 800ba76:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ba7a:	eb06 2692 	add.w	r6, r6, r2, lsr #10
 800ba7e:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800ba82:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
 800ba86:	f3c6 0309 	ubfx	r3, r6, #0, #10
 800ba8a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 800ba8e:	4b29      	ldr	r3, [pc, #164]	; (800bb34 <D48_1CH_HTONS_VOL_HP+0x154>)
 800ba90:	fb28 c103 	smlad	r1, r8, r3, ip
 800ba94:	4b28      	ldr	r3, [pc, #160]	; (800bb38 <D48_1CH_HTONS_VOL_HP+0x158>)
 800ba96:	fb25 1103 	smlad	r1, r5, r3, r1
 800ba9a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800ba9e:	fb22 1903 	smlad	r9, r2, r3, r1
 800baa2:	4b26      	ldr	r3, [pc, #152]	; (800bb3c <D48_1CH_HTONS_VOL_HP+0x15c>)
 800baa4:	fb28 ec03 	smlad	ip, r8, r3, lr
 800baa8:	f04f 131b 	mov.w	r3, #1769499	; 0x1b001b
 800baac:	fb25 cc03 	smlad	ip, r5, r3, ip
 800bab0:	4b23      	ldr	r3, [pc, #140]	; (800bb40 <D48_1CH_HTONS_VOL_HP+0x160>)
 800bab2:	fb22 cc03 	smlad	ip, r2, r3, ip
 800bab6:	2101      	movs	r1, #1
 800bab8:	fb28 f801 	smuad	r8, r8, r1
 800babc:	4b21      	ldr	r3, [pc, #132]	; (800bb44 <D48_1CH_HTONS_VOL_HP+0x164>)
 800babe:	fb25 8503 	smlad	r5, r5, r3, r8
 800bac2:	4b21      	ldr	r3, [pc, #132]	; (800bb48 <D48_1CH_HTONS_VOL_HP+0x168>)
 800bac4:	fb22 5e03 	smlad	lr, r2, r3, r5
 800bac8:	f5a9 4158 	sub.w	r1, r9, #55296	; 0xd800
 800bacc:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 800bad0:	190a      	adds	r2, r1, r4
 800bad2:	9c02      	ldr	r4, [sp, #8]
 800bad4:	eba2 020a 	sub.w	r2, r2, sl
 800bad8:	468a      	mov	sl, r1
 800bada:	ea4f 79e2 	mov.w	r9, r2, asr #31
 800bade:	fba2 2304 	umull	r2, r3, r2, r4
 800bae2:	fb04 3309 	mla	r3, r4, r9, r3
 800bae6:	f112 4400 	adds.w	r4, r2, #2147483648	; 0x80000000
 800baea:	f04f 0900 	mov.w	r9, #0
 800baee:	f143 0500 	adc.w	r5, r3, #0
 800baf2:	9b01      	ldr	r3, [sp, #4]
 800baf4:	032a      	lsls	r2, r5, #12
 800baf6:	006c      	lsls	r4, r5, #1
 800baf8:	fbc3 8902 	smlal	r8, r9, r3, r2
 800bafc:	ea4f 03a9 	mov.w	r3, r9, asr #2
 800bb00:	f303 030f 	ssat	r3, #16, r3
 800bb04:	f82b 3f02 	strh.w	r3, [fp, #2]!
 800bb08:	9b03      	ldr	r3, [sp, #12]
 800bb0a:	4283      	cmp	r3, r0
 800bb0c:	d185      	bne.n	800ba1a <D48_1CH_HTONS_VOL_HP+0x3a>
 800bb0e:	4673      	mov	r3, lr
 800bb10:	9a05      	ldr	r2, [sp, #20]
 800bb12:	6093      	str	r3, [r2, #8]
 800bb14:	2000      	movs	r0, #0
 800bb16:	9b04      	ldr	r3, [sp, #16]
 800bb18:	f8c2 c00c 	str.w	ip, [r2, #12]
 800bb1c:	61d6      	str	r6, [r2, #28]
 800bb1e:	6193      	str	r3, [r2, #24]
 800bb20:	e9c2 4104 	strd	r4, r1, [r2, #16]
 800bb24:	b007      	add	sp, #28
 800bb26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb2a:	4671      	mov	r1, lr
 800bb2c:	e7f1      	b.n	800bb12 <D48_1CH_HTONS_VOL_HP+0x132>
 800bb2e:	bf00      	nop
 800bb30:	24000000 	.word	0x24000000
 800bb34:	000f000a 	.word	0x000f000a
 800bb38:	00060003 	.word	0x00060003
 800bb3c:	00150019 	.word	0x00150019
 800bb40:	00190015 	.word	0x00190015
 800bb44:	00030006 	.word	0x00030006
 800bb48:	000a000f 	.word	0x000a000f

0800bb4c <D64_1CH_HTONS_VOL_HP>:
 800bb4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb50:	6b15      	ldr	r5, [r2, #48]	; 0x30
 800bb52:	b089      	sub	sp, #36	; 0x24
 800bb54:	6993      	ldr	r3, [r2, #24]
 800bb56:	4686      	mov	lr, r0
 800bb58:	9503      	str	r5, [sp, #12]
 800bb5a:	8cd0      	ldrh	r0, [r2, #38]	; 0x26
 800bb5c:	6a15      	ldr	r5, [r2, #32]
 800bb5e:	9306      	str	r3, [sp, #24]
 800bb60:	69d6      	ldr	r6, [r2, #28]
 800bb62:	9504      	str	r5, [sp, #16]
 800bb64:	e9d2 8404 	ldrd	r8, r4, [r2, #16]
 800bb68:	e9d2 3c02 	ldrd	r3, ip, [r2, #8]
 800bb6c:	2800      	cmp	r0, #0
 800bb6e:	f000 80a4 	beq.w	800bcba <D64_1CH_HTONS_VOL_HP+0x16e>
 800bb72:	460f      	mov	r7, r1
 800bb74:	46f1      	mov	r9, lr
 800bb76:	eb01 0140 	add.w	r1, r1, r0, lsl #1
 800bb7a:	4d56      	ldr	r5, [pc, #344]	; (800bcd4 <D64_1CH_HTONS_VOL_HP+0x188>)
 800bb7c:	46a2      	mov	sl, r4
 800bb7e:	469e      	mov	lr, r3
 800bb80:	9105      	str	r1, [sp, #20]
 800bb82:	9207      	str	r2, [sp, #28]
 800bb84:	f859 1b08 	ldr.w	r1, [r9], #8
 800bb88:	f859 3c04 	ldr.w	r3, [r9, #-4]
 800bb8c:	ba49      	rev16	r1, r1
 800bb8e:	fa93 fb93 	rev16.w	fp, r3
 800bb92:	b2cb      	uxtb	r3, r1
 800bb94:	f3c1 2207 	ubfx	r2, r1, #8, #8
 800bb98:	f3c1 4007 	ubfx	r0, r1, #16, #8
 800bb9c:	0e09      	lsrs	r1, r1, #24
 800bb9e:	f855 4023 	ldr.w	r4, [r5, r3, lsl #2]
 800bba2:	fa5f f38b 	uxtb.w	r3, fp
 800bba6:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 800bbaa:	4426      	add	r6, r4
 800bbac:	f855 4020 	ldr.w	r4, [r5, r0, lsl #2]
 800bbb0:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 800bbb4:	eb02 2296 	add.w	r2, r2, r6, lsr #10
 800bbb8:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
 800bbbc:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800bbc0:	f3cb 2307 	ubfx	r3, fp, #8, #8
 800bbc4:	eb04 2492 	add.w	r4, r4, r2, lsr #10
 800bbc8:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800bbcc:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 800bbd0:	eb01 2194 	add.w	r1, r1, r4, lsr #10
 800bbd4:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800bbd8:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 800bbdc:	f3cb 4607 	ubfx	r6, fp, #16, #8
 800bbe0:	eb00 2091 	add.w	r0, r0, r1, lsr #10
 800bbe4:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800bbe8:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 800bbec:	ea4f 6b1b 	mov.w	fp, fp, lsr #24
 800bbf0:	eb03 2390 	add.w	r3, r3, r0, lsr #10
 800bbf4:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800bbf8:	f855 b02b 	ldr.w	fp, [r5, fp, lsl #2]
 800bbfc:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800bc00:	eb06 2693 	add.w	r6, r6, r3, lsr #10
 800bc04:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bc08:	eb0b 2b96 	add.w	fp, fp, r6, lsr #10
 800bc0c:	f3c6 0409 	ubfx	r4, r6, #0, #10
 800bc10:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800bc14:	f3cb 0009 	ubfx	r0, fp, #0, #10
 800bc18:	ea4f 269b 	mov.w	r6, fp, lsr #10
 800bc1c:	ea40 4b04 	orr.w	fp, r0, r4, lsl #16
 800bc20:	482d      	ldr	r0, [pc, #180]	; (800bcd8 <D64_1CH_HTONS_VOL_HP+0x18c>)
 800bc22:	fb22 cc00 	smlad	ip, r2, r0, ip
 800bc26:	482d      	ldr	r0, [pc, #180]	; (800bcdc <D64_1CH_HTONS_VOL_HP+0x190>)
 800bc28:	fb21 cc00 	smlad	ip, r1, r0, ip
 800bc2c:	482c      	ldr	r0, [pc, #176]	; (800bce0 <D64_1CH_HTONS_VOL_HP+0x194>)
 800bc2e:	fb23 cc00 	smlad	ip, r3, r0, ip
 800bc32:	f44f 3480 	mov.w	r4, #65536	; 0x10000
 800bc36:	fb2b c404 	smlad	r4, fp, r4, ip
 800bc3a:	482a      	ldr	r0, [pc, #168]	; (800bce4 <D64_1CH_HTONS_VOL_HP+0x198>)
 800bc3c:	fb22 ec00 	smlad	ip, r2, r0, lr
 800bc40:	fb2b cc10 	smladx	ip, fp, r0, ip
 800bc44:	4828      	ldr	r0, [pc, #160]	; (800bce8 <D64_1CH_HTONS_VOL_HP+0x19c>)
 800bc46:	fb21 cc00 	smlad	ip, r1, r0, ip
 800bc4a:	fb23 cc10 	smladx	ip, r3, r0, ip
 800bc4e:	f04f 0e01 	mov.w	lr, #1
 800bc52:	fb22 f20e 	smuad	r2, r2, lr
 800bc56:	4825      	ldr	r0, [pc, #148]	; (800bcec <D64_1CH_HTONS_VOL_HP+0x1a0>)
 800bc58:	fb21 2100 	smlad	r1, r1, r0, r2
 800bc5c:	4a24      	ldr	r2, [pc, #144]	; (800bcf0 <D64_1CH_HTONS_VOL_HP+0x1a4>)
 800bc5e:	fb23 1302 	smlad	r3, r3, r2, r1
 800bc62:	4a24      	ldr	r2, [pc, #144]	; (800bcf4 <D64_1CH_HTONS_VOL_HP+0x1a8>)
 800bc64:	fb2b 3e02 	smlad	lr, fp, r2, r3
 800bc68:	f5a4 3400 	sub.w	r4, r4, #131072	; 0x20000
 800bc6c:	eb04 0208 	add.w	r2, r4, r8
 800bc70:	eba2 020a 	sub.w	r2, r2, sl
 800bc74:	46a2      	mov	sl, r4
 800bc76:	4610      	mov	r0, r2
 800bc78:	17d1      	asrs	r1, r2, #31
 800bc7a:	e9cd 0100 	strd	r0, r1, [sp]
 800bc7e:	9904      	ldr	r1, [sp, #16]
 800bc80:	9801      	ldr	r0, [sp, #4]
 800bc82:	fba2 2301 	umull	r2, r3, r2, r1
 800bc86:	fb01 3300 	mla	r3, r1, r0, r3
 800bc8a:	f112 4000 	adds.w	r0, r2, #2147483648	; 0x80000000
 800bc8e:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800bc92:	f143 0100 	adc.w	r1, r3, #0
 800bc96:	9b03      	ldr	r3, [sp, #12]
 800bc98:	02ca      	lsls	r2, r1, #11
 800bc9a:	ea4f 0841 	mov.w	r8, r1, lsl #1
 800bc9e:	2100      	movs	r1, #0
 800bca0:	fbc3 0102 	smlal	r0, r1, r3, r2
 800bca4:	108b      	asrs	r3, r1, #2
 800bca6:	f303 030f 	ssat	r3, #16, r3
 800bcaa:	f827 3b02 	strh.w	r3, [r7], #2
 800bcae:	9b05      	ldr	r3, [sp, #20]
 800bcb0:	429f      	cmp	r7, r3
 800bcb2:	f47f af67 	bne.w	800bb84 <D64_1CH_HTONS_VOL_HP+0x38>
 800bcb6:	4673      	mov	r3, lr
 800bcb8:	9a07      	ldr	r2, [sp, #28]
 800bcba:	6093      	str	r3, [r2, #8]
 800bcbc:	2000      	movs	r0, #0
 800bcbe:	9b06      	ldr	r3, [sp, #24]
 800bcc0:	f8c2 c00c 	str.w	ip, [r2, #12]
 800bcc4:	61d6      	str	r6, [r2, #28]
 800bcc6:	6193      	str	r3, [r2, #24]
 800bcc8:	e9c2 8404 	strd	r8, r4, [r2, #16]
 800bccc:	b009      	add	sp, #36	; 0x24
 800bcce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bcd2:	bf00      	nop
 800bcd4:	24000000 	.word	0x24000000
 800bcd8:	001c0015 	.word	0x001c0015
 800bcdc:	000f000a 	.word	0x000f000a
 800bce0:	00060003 	.word	0x00060003
 800bce4:	0024002a 	.word	0x0024002a
 800bce8:	002e0030 	.word	0x002e0030
 800bcec:	00030006 	.word	0x00030006
 800bcf0:	000a000f 	.word	0x000a000f
 800bcf4:	0015001c 	.word	0x0015001c

0800bcf8 <D80_1CH_HTONS_VOL_HP>:
 800bcf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bcfc:	6913      	ldr	r3, [r2, #16]
 800bcfe:	b089      	sub	sp, #36	; 0x24
 800bd00:	6b16      	ldr	r6, [r2, #48]	; 0x30
 800bd02:	9301      	str	r3, [sp, #4]
 800bd04:	9603      	str	r6, [sp, #12]
 800bd06:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 800bd08:	6a16      	ldr	r6, [r2, #32]
 800bd0a:	e9d2 5305 	ldrd	r5, r3, [r2, #20]
 800bd0e:	e9d2 7c02 	ldrd	r7, ip, [r2, #8]
 800bd12:	9306      	str	r3, [sp, #24]
 800bd14:	9604      	str	r6, [sp, #16]
 800bd16:	69d3      	ldr	r3, [r2, #28]
 800bd18:	2c00      	cmp	r4, #0
 800bd1a:	f000 80ce 	beq.w	800beba <D80_1CH_HTONS_VOL_HP+0x1c2>
 800bd1e:	3902      	subs	r1, #2
 800bd20:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 800bd24:	4e66      	ldr	r6, [pc, #408]	; (800bec0 <D80_1CH_HTONS_VOL_HP+0x1c8>)
 800bd26:	469e      	mov	lr, r3
 800bd28:	9102      	str	r1, [sp, #8]
 800bd2a:	46aa      	mov	sl, r5
 800bd2c:	eb00 0144 	add.w	r1, r0, r4, lsl #1
 800bd30:	9207      	str	r2, [sp, #28]
 800bd32:	9105      	str	r1, [sp, #20]
 800bd34:	6883      	ldr	r3, [r0, #8]
 800bd36:	e9d0 4200 	ldrd	r4, r2, [r0]
 800bd3a:	300a      	adds	r0, #10
 800bd3c:	ba64      	rev16	r4, r4
 800bd3e:	ba52      	rev16	r2, r2
 800bd40:	fa93 fb93 	rev16.w	fp, r3
 800bd44:	b2e5      	uxtb	r5, r4
 800bd46:	f3c4 2307 	ubfx	r3, r4, #8, #8
 800bd4a:	f3c4 4107 	ubfx	r1, r4, #16, #8
 800bd4e:	0e24      	lsrs	r4, r4, #24
 800bd50:	f856 8025 	ldr.w	r8, [r6, r5, lsl #2]
 800bd54:	b2d5      	uxtb	r5, r2
 800bd56:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 800bd5a:	44c6      	add	lr, r8
 800bd5c:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 800bd60:	f856 4024 	ldr.w	r4, [r6, r4, lsl #2]
 800bd64:	eb03 239e 	add.w	r3, r3, lr, lsr #10
 800bd68:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
 800bd6c:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800bd70:	eb01 2993 	add.w	r9, r1, r3, lsr #10
 800bd74:	f3c2 2107 	ubfx	r1, r2, #8, #8
 800bd78:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bd7c:	eb04 2499 	add.w	r4, r4, r9, lsr #10
 800bd80:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 800bd84:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 800bd88:	f3cb 2e07 	ubfx	lr, fp, #8, #8
 800bd8c:	eb05 2894 	add.w	r8, r5, r4, lsr #10
 800bd90:	f3c2 4507 	ubfx	r5, r2, #16, #8
 800bd94:	0e12      	lsrs	r2, r2, #24
 800bd96:	f856 e02e 	ldr.w	lr, [r6, lr, lsl #2]
 800bd9a:	eb01 2198 	add.w	r1, r1, r8, lsr #10
 800bd9e:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
 800bda2:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
 800bda6:	fa5f fb8b 	uxtb.w	fp, fp
 800bdaa:	eb05 2591 	add.w	r5, r5, r1, lsr #10
 800bdae:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800bdb2:	f856 b02b 	ldr.w	fp, [r6, fp, lsl #2]
 800bdb6:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800bdba:	eb02 2295 	add.w	r2, r2, r5, lsr #10
 800bdbe:	f3c9 0909 	ubfx	r9, r9, #0, #10
 800bdc2:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800bdc6:	ea41 4808 	orr.w	r8, r1, r8, lsl #16
 800bdca:	eb0b 2b92 	add.w	fp, fp, r2, lsr #10
 800bdce:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800bdd2:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800bdd6:	eb0e 2e9b 	add.w	lr, lr, fp, lsr #10
 800bdda:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 800bdde:	ea44 4409 	orr.w	r4, r4, r9, lsl #16
 800bde2:	f3ce 0109 	ubfx	r1, lr, #0, #10
 800bde6:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
 800bdea:	ea4f 2e9e 	mov.w	lr, lr, lsr #10
 800bdee:	ea41 4b0b 	orr.w	fp, r1, fp, lsl #16
 800bdf2:	4934      	ldr	r1, [pc, #208]	; (800bec4 <D80_1CH_HTONS_VOL_HP+0x1cc>)
 800bdf4:	fb23 cc01 	smlad	ip, r3, r1, ip
 800bdf8:	4933      	ldr	r1, [pc, #204]	; (800bec8 <D80_1CH_HTONS_VOL_HP+0x1d0>)
 800bdfa:	fb24 cc01 	smlad	ip, r4, r1, ip
 800bdfe:	4933      	ldr	r1, [pc, #204]	; (800becc <D80_1CH_HTONS_VOL_HP+0x1d4>)
 800be00:	fb28 cc01 	smlad	ip, r8, r1, ip
 800be04:	4932      	ldr	r1, [pc, #200]	; (800bed0 <D80_1CH_HTONS_VOL_HP+0x1d8>)
 800be06:	fb22 cc01 	smlad	ip, r2, r1, ip
 800be0a:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800be0e:	fb2b c901 	smlad	r9, fp, r1, ip
 800be12:	4930      	ldr	r1, [pc, #192]	; (800bed4 <D80_1CH_HTONS_VOL_HP+0x1dc>)
 800be14:	fb23 7701 	smlad	r7, r3, r1, r7
 800be18:	492f      	ldr	r1, [pc, #188]	; (800bed8 <D80_1CH_HTONS_VOL_HP+0x1e0>)
 800be1a:	fb24 7701 	smlad	r7, r4, r1, r7
 800be1e:	f04f 1c4b 	mov.w	ip, #4915275	; 0x4b004b
 800be22:	fb28 7c0c 	smlad	ip, r8, ip, r7
 800be26:	492d      	ldr	r1, [pc, #180]	; (800bedc <D80_1CH_HTONS_VOL_HP+0x1e4>)
 800be28:	fb22 cc01 	smlad	ip, r2, r1, ip
 800be2c:	492c      	ldr	r1, [pc, #176]	; (800bee0 <D80_1CH_HTONS_VOL_HP+0x1e8>)
 800be2e:	fb2b cc01 	smlad	ip, fp, r1, ip
 800be32:	2101      	movs	r1, #1
 800be34:	fb23 f301 	smuad	r3, r3, r1
 800be38:	492a      	ldr	r1, [pc, #168]	; (800bee4 <D80_1CH_HTONS_VOL_HP+0x1ec>)
 800be3a:	fb24 3401 	smlad	r4, r4, r1, r3
 800be3e:	492a      	ldr	r1, [pc, #168]	; (800bee8 <D80_1CH_HTONS_VOL_HP+0x1f0>)
 800be40:	fb28 4101 	smlad	r1, r8, r1, r4
 800be44:	4f29      	ldr	r7, [pc, #164]	; (800beec <D80_1CH_HTONS_VOL_HP+0x1f4>)
 800be46:	fb22 1207 	smlad	r2, r2, r7, r1
 800be4a:	4f29      	ldr	r7, [pc, #164]	; (800bef0 <D80_1CH_HTONS_VOL_HP+0x1f8>)
 800be4c:	fb2b 2707 	smlad	r7, fp, r7, r2
 800be50:	f5a9 317a 	sub.w	r1, r9, #256000	; 0x3e800
 800be54:	9b01      	ldr	r3, [sp, #4]
 800be56:	9c04      	ldr	r4, [sp, #16]
 800be58:	440b      	add	r3, r1
 800be5a:	eba3 020a 	sub.w	r2, r3, sl
 800be5e:	468a      	mov	sl, r1
 800be60:	ea4f 79e2 	mov.w	r9, r2, asr #31
 800be64:	fba2 2304 	umull	r2, r3, r2, r4
 800be68:	fb04 3309 	mla	r3, r4, r9, r3
 800be6c:	f112 4400 	adds.w	r4, r2, #2147483648	; 0x80000000
 800be70:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800be74:	f143 0500 	adc.w	r5, r3, #0
 800be78:	006b      	lsls	r3, r5, #1
 800be7a:	02aa      	lsls	r2, r5, #10
 800be7c:	2500      	movs	r5, #0
 800be7e:	9301      	str	r3, [sp, #4]
 800be80:	9b03      	ldr	r3, [sp, #12]
 800be82:	fbc3 4502 	smlal	r4, r5, r3, r2
 800be86:	9a02      	ldr	r2, [sp, #8]
 800be88:	10ab      	asrs	r3, r5, #2
 800be8a:	f303 030f 	ssat	r3, #16, r3
 800be8e:	f822 3f02 	strh.w	r3, [r2, #2]!
 800be92:	9b05      	ldr	r3, [sp, #20]
 800be94:	9202      	str	r2, [sp, #8]
 800be96:	4298      	cmp	r0, r3
 800be98:	f47f af4c 	bne.w	800bd34 <D80_1CH_HTONS_VOL_HP+0x3c>
 800be9c:	4673      	mov	r3, lr
 800be9e:	9a07      	ldr	r2, [sp, #28]
 800bea0:	61d3      	str	r3, [r2, #28]
 800bea2:	2000      	movs	r0, #0
 800bea4:	9b01      	ldr	r3, [sp, #4]
 800bea6:	6097      	str	r7, [r2, #8]
 800bea8:	f8c2 c00c 	str.w	ip, [r2, #12]
 800beac:	e9c2 3104 	strd	r3, r1, [r2, #16]
 800beb0:	9b06      	ldr	r3, [sp, #24]
 800beb2:	6193      	str	r3, [r2, #24]
 800beb4:	b009      	add	sp, #36	; 0x24
 800beb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800beba:	4629      	mov	r1, r5
 800bebc:	e7f0      	b.n	800bea0 <D80_1CH_HTONS_VOL_HP+0x1a8>
 800bebe:	bf00      	nop
 800bec0:	24000000 	.word	0x24000000
 800bec4:	002d0024 	.word	0x002d0024
 800bec8:	001c0015 	.word	0x001c0015
 800becc:	000f000a 	.word	0x000f000a
 800bed0:	00060003 	.word	0x00060003
 800bed4:	0037003f 	.word	0x0037003f
 800bed8:	00450049 	.word	0x00450049
 800bedc:	00490045 	.word	0x00490045
 800bee0:	003f0037 	.word	0x003f0037
 800bee4:	00030006 	.word	0x00030006
 800bee8:	000a000f 	.word	0x000a000f
 800beec:	0015001c 	.word	0x0015001c
 800bef0:	0024002d 	.word	0x0024002d

0800bef4 <D128_1CH_HTONS_VOL_HP>:
 800bef4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bef8:	6914      	ldr	r4, [r2, #16]
 800befa:	b08d      	sub	sp, #52	; 0x34
 800befc:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 800befe:	9404      	str	r4, [sp, #16]
 800bf00:	6954      	ldr	r4, [r2, #20]
 800bf02:	920b      	str	r2, [sp, #44]	; 0x2c
 800bf04:	9405      	str	r4, [sp, #20]
 800bf06:	6994      	ldr	r4, [r2, #24]
 800bf08:	f8d2 c01c 	ldr.w	ip, [r2, #28]
 800bf0c:	940a      	str	r4, [sp, #40]	; 0x28
 800bf0e:	6894      	ldr	r4, [r2, #8]
 800bf10:	9403      	str	r4, [sp, #12]
 800bf12:	68d4      	ldr	r4, [r2, #12]
 800bf14:	9402      	str	r4, [sp, #8]
 800bf16:	6b14      	ldr	r4, [r2, #48]	; 0x30
 800bf18:	6a12      	ldr	r2, [r2, #32]
 800bf1a:	9407      	str	r4, [sp, #28]
 800bf1c:	9208      	str	r2, [sp, #32]
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	f000 812e 	beq.w	800c180 <D128_1CH_HTONS_VOL_HP+0x28c>
 800bf24:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 800bf28:	f100 0b10 	add.w	fp, r0, #16
 800bf2c:	f8df 9290 	ldr.w	r9, [pc, #656]	; 800c1c0 <D128_1CH_HTONS_VOL_HP+0x2cc>
 800bf30:	9106      	str	r1, [sp, #24]
 800bf32:	9309      	str	r3, [sp, #36]	; 0x24
 800bf34:	e95b 0204 	ldrd	r0, r2, [fp, #-16]
 800bf38:	e95b 3602 	ldrd	r3, r6, [fp, #-8]
 800bf3c:	ba40      	rev16	r0, r0
 800bf3e:	ba52      	rev16	r2, r2
 800bf40:	ba5b      	rev16	r3, r3
 800bf42:	ba76      	rev16	r6, r6
 800bf44:	b2c5      	uxtb	r5, r0
 800bf46:	f3c0 2407 	ubfx	r4, r0, #8, #8
 800bf4a:	f3c0 4107 	ubfx	r1, r0, #16, #8
 800bf4e:	0e00      	lsrs	r0, r0, #24
 800bf50:	f859 7025 	ldr.w	r7, [r9, r5, lsl #2]
 800bf54:	b2d5      	uxtb	r5, r2
 800bf56:	f859 e024 	ldr.w	lr, [r9, r4, lsl #2]
 800bf5a:	f3c2 2407 	ubfx	r4, r2, #8, #8
 800bf5e:	44bc      	add	ip, r7
 800bf60:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800bf64:	f859 7020 	ldr.w	r7, [r9, r0, lsl #2]
 800bf68:	f3c2 4007 	ubfx	r0, r2, #16, #8
 800bf6c:	eb0e 2e9c 	add.w	lr, lr, ip, lsr #10
 800bf70:	f859 a025 	ldr.w	sl, [r9, r5, lsl #2]
 800bf74:	f859 5024 	ldr.w	r5, [r9, r4, lsl #2]
 800bf78:	0e12      	lsrs	r2, r2, #24
 800bf7a:	eb01 219e 	add.w	r1, r1, lr, lsr #10
 800bf7e:	f859 0020 	ldr.w	r0, [r9, r0, lsl #2]
 800bf82:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 800bf86:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800bf8a:	eb07 2791 	add.w	r7, r7, r1, lsr #10
 800bf8e:	f859 4022 	ldr.w	r4, [r9, r2, lsl #2]
 800bf92:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800bf96:	b2da      	uxtb	r2, r3
 800bf98:	eb0a 2a97 	add.w	sl, sl, r7, lsr #10
 800bf9c:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800bfa0:	ea4e 4e0c 	orr.w	lr, lr, ip, lsl #16
 800bfa4:	f859 2022 	ldr.w	r2, [r9, r2, lsl #2]
 800bfa8:	eb05 259a 	add.w	r5, r5, sl, lsr #10
 800bfac:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 800bfb0:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800bfb4:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800bfb8:	eb00 2c95 	add.w	ip, r0, r5, lsr #10
 800bfbc:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800bfc0:	f859 8021 	ldr.w	r8, [r9, r1, lsl #2]
 800bfc4:	f3c3 4107 	ubfx	r1, r3, #16, #8
 800bfc8:	eb04 249c 	add.w	r4, r4, ip, lsr #10
 800bfcc:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 800bfd0:	f859 0021 	ldr.w	r0, [r9, r1, lsl #2]
 800bfd4:	0e1b      	lsrs	r3, r3, #24
 800bfd6:	eb02 2294 	add.w	r2, r2, r4, lsr #10
 800bfda:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800bfde:	f859 1023 	ldr.w	r1, [r9, r3, lsl #2]
 800bfe2:	ea45 450a 	orr.w	r5, r5, sl, lsl #16
 800bfe6:	eb08 2892 	add.w	r8, r8, r2, lsr #10
 800bfea:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800bfee:	b2f3      	uxtb	r3, r6
 800bff0:	eb00 2a98 	add.w	sl, r0, r8, lsr #10
 800bff4:	f3c8 0009 	ubfx	r0, r8, #0, #10
 800bff8:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800bffc:	ea44 440c 	orr.w	r4, r4, ip, lsl #16
 800c000:	eb01 219a 	add.w	r1, r1, sl, lsr #10
 800c004:	f3c6 2c07 	ubfx	ip, r6, #8, #8
 800c008:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 800c00c:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 800c010:	eb03 2891 	add.w	r8, r3, r1, lsr #10
 800c014:	f859 202c 	ldr.w	r2, [r9, ip, lsl #2]
 800c018:	f3c6 4c07 	ubfx	ip, r6, #16, #8
 800c01c:	0e36      	lsrs	r6, r6, #24
 800c01e:	eb02 2298 	add.w	r2, r2, r8, lsr #10
 800c022:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800c026:	f859 302c 	ldr.w	r3, [r9, ip, lsl #2]
 800c02a:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800c02e:	f859 c026 	ldr.w	ip, [r9, r6, lsl #2]
 800c032:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800c036:	eb03 2692 	add.w	r6, r3, r2, lsr #10
 800c03a:	f3c2 0309 	ubfx	r3, r2, #0, #10
 800c03e:	9101      	str	r1, [sp, #4]
 800c040:	ea43 4208 	orr.w	r2, r3, r8, lsl #16
 800c044:	9b02      	ldr	r3, [sp, #8]
 800c046:	eb0c 2c96 	add.w	ip, ip, r6, lsr #10
 800c04a:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800c04e:	4611      	mov	r1, r2
 800c050:	f3cc 0209 	ubfx	r2, ip, #0, #10
 800c054:	ea4f 2c9c 	mov.w	ip, ip, lsr #10
 800c058:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
 800c05c:	4a49      	ldr	r2, [pc, #292]	; (800c184 <D128_1CH_HTONS_VOL_HP+0x290>)
 800c05e:	fb2e 3202 	smlad	r2, lr, r2, r3
 800c062:	4b49      	ldr	r3, [pc, #292]	; (800c188 <D128_1CH_HTONS_VOL_HP+0x294>)
 800c064:	fb27 2203 	smlad	r2, r7, r3, r2
 800c068:	4b48      	ldr	r3, [pc, #288]	; (800c18c <D128_1CH_HTONS_VOL_HP+0x298>)
 800c06a:	fb25 2203 	smlad	r2, r5, r3, r2
 800c06e:	4b48      	ldr	r3, [pc, #288]	; (800c190 <D128_1CH_HTONS_VOL_HP+0x29c>)
 800c070:	fb24 2203 	smlad	r2, r4, r3, r2
 800c074:	4b47      	ldr	r3, [pc, #284]	; (800c194 <D128_1CH_HTONS_VOL_HP+0x2a0>)
 800c076:	fb20 2803 	smlad	r8, r0, r3, r2
 800c07a:	4b47      	ldr	r3, [pc, #284]	; (800c198 <D128_1CH_HTONS_VOL_HP+0x2a4>)
 800c07c:	9a01      	ldr	r2, [sp, #4]
 800c07e:	fb22 8203 	smlad	r2, r2, r3, r8
 800c082:	4b46      	ldr	r3, [pc, #280]	; (800c19c <D128_1CH_HTONS_VOL_HP+0x2a8>)
 800c084:	9102      	str	r1, [sp, #8]
 800c086:	fb21 2203 	smlad	r2, r1, r3, r2
 800c08a:	f44f 3880 	mov.w	r8, #65536	; 0x10000
 800c08e:	fb26 2308 	smlad	r3, r6, r8, r2
 800c092:	4619      	mov	r1, r3
 800c094:	9a03      	ldr	r2, [sp, #12]
 800c096:	4b42      	ldr	r3, [pc, #264]	; (800c1a0 <D128_1CH_HTONS_VOL_HP+0x2ac>)
 800c098:	fb2e 2803 	smlad	r8, lr, r3, r2
 800c09c:	4b41      	ldr	r3, [pc, #260]	; (800c1a4 <D128_1CH_HTONS_VOL_HP+0x2b0>)
 800c09e:	fb27 8a03 	smlad	sl, r7, r3, r8
 800c0a2:	f8df 8120 	ldr.w	r8, [pc, #288]	; 800c1c4 <D128_1CH_HTONS_VOL_HP+0x2d0>
 800c0a6:	fb25 a808 	smlad	r8, r5, r8, sl
 800c0aa:	f8df a11c 	ldr.w	sl, [pc, #284]	; 800c1c8 <D128_1CH_HTONS_VOL_HP+0x2d4>
 800c0ae:	fb24 880a 	smlad	r8, r4, sl, r8
 800c0b2:	f8df a118 	ldr.w	sl, [pc, #280]	; 800c1cc <D128_1CH_HTONS_VOL_HP+0x2d8>
 800c0b6:	fb20 8a0a 	smlad	sl, r0, sl, r8
 800c0ba:	f8df 8114 	ldr.w	r8, [pc, #276]	; 800c1d0 <D128_1CH_HTONS_VOL_HP+0x2dc>
 800c0be:	9b01      	ldr	r3, [sp, #4]
 800c0c0:	fb23 aa08 	smlad	sl, r3, r8, sl
 800c0c4:	f8df 810c 	ldr.w	r8, [pc, #268]	; 800c1d4 <D128_1CH_HTONS_VOL_HP+0x2e0>
 800c0c8:	9a02      	ldr	r2, [sp, #8]
 800c0ca:	fb22 a808 	smlad	r8, r2, r8, sl
 800c0ce:	f8df a108 	ldr.w	sl, [pc, #264]	; 800c1d8 <D128_1CH_HTONS_VOL_HP+0x2e4>
 800c0d2:	fb26 830a 	smlad	r3, r6, sl, r8
 800c0d6:	f04f 0801 	mov.w	r8, #1
 800c0da:	9302      	str	r3, [sp, #8]
 800c0dc:	fb2e fe08 	smuad	lr, lr, r8
 800c0e0:	f8df 80f8 	ldr.w	r8, [pc, #248]	; 800c1dc <D128_1CH_HTONS_VOL_HP+0x2e8>
 800c0e4:	fb27 ee08 	smlad	lr, r7, r8, lr
 800c0e8:	4f2f      	ldr	r7, [pc, #188]	; (800c1a8 <D128_1CH_HTONS_VOL_HP+0x2b4>)
 800c0ea:	fb25 ee07 	smlad	lr, r5, r7, lr
 800c0ee:	4f2f      	ldr	r7, [pc, #188]	; (800c1ac <D128_1CH_HTONS_VOL_HP+0x2b8>)
 800c0f0:	fb24 ee07 	smlad	lr, r4, r7, lr
 800c0f4:	4f2e      	ldr	r7, [pc, #184]	; (800c1b0 <D128_1CH_HTONS_VOL_HP+0x2bc>)
 800c0f6:	fb20 ee07 	smlad	lr, r0, r7, lr
 800c0fa:	4f2e      	ldr	r7, [pc, #184]	; (800c1b4 <D128_1CH_HTONS_VOL_HP+0x2c0>)
 800c0fc:	9b01      	ldr	r3, [sp, #4]
 800c0fe:	fb23 ee07 	smlad	lr, r3, r7, lr
 800c102:	4f2d      	ldr	r7, [pc, #180]	; (800c1b8 <D128_1CH_HTONS_VOL_HP+0x2c4>)
 800c104:	fb22 e707 	smlad	r7, r2, r7, lr
 800c108:	4b2c      	ldr	r3, [pc, #176]	; (800c1bc <D128_1CH_HTONS_VOL_HP+0x2c8>)
 800c10a:	fb26 7303 	smlad	r3, r6, r3, r7
 800c10e:	f5a1 1680 	sub.w	r6, r1, #1048576	; 0x100000
 800c112:	9303      	str	r3, [sp, #12]
 800c114:	9b04      	ldr	r3, [sp, #16]
 800c116:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800c11a:	9f08      	ldr	r7, [sp, #32]
 800c11c:	2100      	movs	r1, #0
 800c11e:	4433      	add	r3, r6
 800c120:	f10b 0b10 	add.w	fp, fp, #16
 800c124:	461a      	mov	r2, r3
 800c126:	9b05      	ldr	r3, [sp, #20]
 800c128:	9605      	str	r6, [sp, #20]
 800c12a:	1ad2      	subs	r2, r2, r3
 800c12c:	17d5      	asrs	r5, r2, #31
 800c12e:	fba2 2307 	umull	r2, r3, r2, r7
 800c132:	1814      	adds	r4, r2, r0
 800c134:	fb07 3305 	mla	r3, r7, r5, r3
 800c138:	eb43 0501 	adc.w	r5, r3, r1
 800c13c:	006b      	lsls	r3, r5, #1
 800c13e:	022a      	lsls	r2, r5, #8
 800c140:	9304      	str	r3, [sp, #16]
 800c142:	9b07      	ldr	r3, [sp, #28]
 800c144:	fbc3 0102 	smlal	r0, r1, r3, r2
 800c148:	9a06      	ldr	r2, [sp, #24]
 800c14a:	108b      	asrs	r3, r1, #2
 800c14c:	f303 030f 	ssat	r3, #16, r3
 800c150:	f822 3b02 	strh.w	r3, [r2], #2
 800c154:	4613      	mov	r3, r2
 800c156:	9206      	str	r2, [sp, #24]
 800c158:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c15a:	4293      	cmp	r3, r2
 800c15c:	f47f aeea 	bne.w	800bf34 <D128_1CH_HTONS_VOL_HP+0x40>
 800c160:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c162:	2000      	movs	r0, #0
 800c164:	9903      	ldr	r1, [sp, #12]
 800c166:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c168:	6099      	str	r1, [r3, #8]
 800c16a:	9902      	ldr	r1, [sp, #8]
 800c16c:	f8c3 c01c 	str.w	ip, [r3, #28]
 800c170:	60d9      	str	r1, [r3, #12]
 800c172:	9904      	ldr	r1, [sp, #16]
 800c174:	619a      	str	r2, [r3, #24]
 800c176:	e9c3 1604 	strd	r1, r6, [r3, #16]
 800c17a:	b00d      	add	sp, #52	; 0x34
 800c17c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c180:	9e05      	ldr	r6, [sp, #20]
 800c182:	e7ed      	b.n	800c160 <D128_1CH_HTONS_VOL_HP+0x26c>
 800c184:	00780069 	.word	0x00780069
 800c188:	005b004e 	.word	0x005b004e
 800c18c:	00420037 	.word	0x00420037
 800c190:	002d0024 	.word	0x002d0024
 800c194:	001c0015 	.word	0x001c0015
 800c198:	000f000a 	.word	0x000f000a
 800c19c:	00060003 	.word	0x00060003
 800c1a0:	00880096 	.word	0x00880096
 800c1a4:	00a200ac 	.word	0x00a200ac
 800c1a8:	000a000f 	.word	0x000a000f
 800c1ac:	0015001c 	.word	0x0015001c
 800c1b0:	0024002d 	.word	0x0024002d
 800c1b4:	00370042 	.word	0x00370042
 800c1b8:	004e005b 	.word	0x004e005b
 800c1bc:	00690078 	.word	0x00690078
 800c1c0:	24000000 	.word	0x24000000
 800c1c4:	00b400ba 	.word	0x00b400ba
 800c1c8:	00be00c0 	.word	0x00be00c0
 800c1cc:	00c000be 	.word	0x00c000be
 800c1d0:	00ba00b4 	.word	0x00ba00b4
 800c1d4:	00ac00a2 	.word	0x00ac00a2
 800c1d8:	00960088 	.word	0x00960088
 800c1dc:	00030006 	.word	0x00030006

0800c1e0 <PDM_Filter_Init>:
 800c1e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c1e2:	2240      	movs	r2, #64	; 0x40
 800c1e4:	2100      	movs	r1, #0
 800c1e6:	4604      	mov	r4, r0
 800c1e8:	300c      	adds	r0, #12
 800c1ea:	f000 fa07 	bl	800c5fc <memset>
 800c1ee:	4a56      	ldr	r2, [pc, #344]	; (800c348 <PDM_Filter_Init+0x168>)
 800c1f0:	4856      	ldr	r0, [pc, #344]	; (800c34c <PDM_Filter_Init+0x16c>)
 800c1f2:	f64f 71f0 	movw	r1, #65520	; 0xfff0
 800c1f6:	6813      	ldr	r3, [r2, #0]
 800c1f8:	f24c 2540 	movw	r5, #49728	; 0xc240
 800c1fc:	f023 0301 	bic.w	r3, r3, #1
 800c200:	6013      	str	r3, [r2, #0]
 800c202:	6803      	ldr	r3, [r0, #0]
 800c204:	400b      	ands	r3, r1
 800c206:	42ab      	cmp	r3, r5
 800c208:	d040      	beq.n	800c28c <PDM_Filter_Init+0xac>
 800c20a:	6803      	ldr	r3, [r0, #0]
 800c20c:	f24c 2270 	movw	r2, #49776	; 0xc270
 800c210:	4019      	ands	r1, r3
 800c212:	4291      	cmp	r1, r2
 800c214:	d03a      	beq.n	800c28c <PDM_Filter_Init+0xac>
 800c216:	4b4e      	ldr	r3, [pc, #312]	; (800c350 <PDM_Filter_Init+0x170>)
 800c218:	2101      	movs	r1, #1
 800c21a:	461a      	mov	r2, r3
 800c21c:	6019      	str	r1, [r3, #0]
 800c21e:	6813      	ldr	r3, [r2, #0]
 800c220:	2b00      	cmp	r3, #0
 800c222:	d1fc      	bne.n	800c21e <PDM_Filter_Init+0x3e>
 800c224:	4b4b      	ldr	r3, [pc, #300]	; (800c354 <PDM_Filter_Init+0x174>)
 800c226:	494c      	ldr	r1, [pc, #304]	; (800c358 <PDM_Filter_Init+0x178>)
 800c228:	4a4c      	ldr	r2, [pc, #304]	; (800c35c <PDM_Filter_Init+0x17c>)
 800c22a:	6019      	str	r1, [r3, #0]
 800c22c:	681b      	ldr	r3, [r3, #0]
 800c22e:	8820      	ldrh	r0, [r4, #0]
 800c230:	4293      	cmp	r3, r2
 800c232:	8961      	ldrh	r1, [r4, #10]
 800c234:	f04f 0300 	mov.w	r3, #0
 800c238:	8922      	ldrh	r2, [r4, #8]
 800c23a:	bf14      	ite	ne
 800c23c:	2500      	movne	r5, #0
 800c23e:	4d47      	ldreq	r5, [pc, #284]	; (800c35c <PDM_Filter_Init+0x17c>)
 800c240:	2801      	cmp	r0, #1
 800c242:	61a3      	str	r3, [r4, #24]
 800c244:	6465      	str	r5, [r4, #68]	; 0x44
 800c246:	60e3      	str	r3, [r4, #12]
 800c248:	6263      	str	r3, [r4, #36]	; 0x24
 800c24a:	6423      	str	r3, [r4, #64]	; 0x40
 800c24c:	86a1      	strh	r1, [r4, #52]	; 0x34
 800c24e:	86e2      	strh	r2, [r4, #54]	; 0x36
 800c250:	e9c4 3304 	strd	r3, r3, [r4, #16]
 800c254:	e9c4 3307 	strd	r3, r3, [r4, #28]
 800c258:	d936      	bls.n	800c2c8 <PDM_Filter_Init+0xe8>
 800c25a:	2003      	movs	r0, #3
 800c25c:	2302      	movs	r3, #2
 800c25e:	8862      	ldrh	r2, [r4, #2]
 800c260:	2a01      	cmp	r2, #1
 800c262:	d92e      	bls.n	800c2c2 <PDM_Filter_Init+0xe2>
 800c264:	2140      	movs	r1, #64	; 0x40
 800c266:	2300      	movs	r3, #0
 800c268:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800c26a:	f1b2 1f01 	cmp.w	r2, #65537	; 0x10001
 800c26e:	d101      	bne.n	800c274 <PDM_Filter_Init+0x94>
 800c270:	460b      	mov	r3, r1
 800c272:	6421      	str	r1, [r4, #64]	; 0x40
 800c274:	6862      	ldr	r2, [r4, #4]
 800c276:	b11a      	cbz	r2, 800c280 <PDM_Filter_Init+0xa0>
 800c278:	f043 0310 	orr.w	r3, r3, #16
 800c27c:	62e2      	str	r2, [r4, #44]	; 0x2c
 800c27e:	6423      	str	r3, [r4, #64]	; 0x40
 800c280:	2200      	movs	r2, #0
 800c282:	8722      	strh	r2, [r4, #56]	; 0x38
 800c284:	b908      	cbnz	r0, 800c28a <PDM_Filter_Init+0xaa>
 800c286:	3380      	adds	r3, #128	; 0x80
 800c288:	6423      	str	r3, [r4, #64]	; 0x40
 800c28a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c28c:	4b34      	ldr	r3, [pc, #208]	; (800c360 <PDM_Filter_Init+0x180>)
 800c28e:	681b      	ldr	r3, [r3, #0]
 800c290:	2b00      	cmp	r3, #0
 800c292:	d1c0      	bne.n	800c216 <PDM_Filter_Init+0x36>
 800c294:	4a33      	ldr	r2, [pc, #204]	; (800c364 <PDM_Filter_Init+0x184>)
 800c296:	6813      	ldr	r3, [r2, #0]
 800c298:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c29c:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800c2a0:	d006      	beq.n	800c2b0 <PDM_Filter_Init+0xd0>
 800c2a2:	6813      	ldr	r3, [r2, #0]
 800c2a4:	f240 4283 	movw	r2, #1155	; 0x483
 800c2a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c2ac:	4293      	cmp	r3, r2
 800c2ae:	d1b2      	bne.n	800c216 <PDM_Filter_Init+0x36>
 800c2b0:	4b2d      	ldr	r3, [pc, #180]	; (800c368 <PDM_Filter_Init+0x188>)
 800c2b2:	2101      	movs	r1, #1
 800c2b4:	461a      	mov	r2, r3
 800c2b6:	6019      	str	r1, [r3, #0]
 800c2b8:	6813      	ldr	r3, [r2, #0]
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	d1fc      	bne.n	800c2b8 <PDM_Filter_Init+0xd8>
 800c2be:	4b2b      	ldr	r3, [pc, #172]	; (800c36c <PDM_Filter_Init+0x18c>)
 800c2c0:	e7b1      	b.n	800c226 <PDM_Filter_Init+0x46>
 800c2c2:	d03a      	beq.n	800c33a <PDM_Filter_Init+0x15a>
 800c2c4:	4618      	mov	r0, r3
 800c2c6:	e7cd      	b.n	800c264 <PDM_Filter_Init+0x84>
 800c2c8:	4d29      	ldr	r5, [pc, #164]	; (800c370 <PDM_Filter_Init+0x190>)
 800c2ca:	782a      	ldrb	r2, [r5, #0]
 800c2cc:	d01b      	beq.n	800c306 <PDM_Filter_Init+0x126>
 800c2ce:	2a01      	cmp	r2, #1
 800c2d0:	d001      	beq.n	800c2d6 <PDM_Filter_Init+0xf6>
 800c2d2:	2001      	movs	r0, #1
 800c2d4:	e7c3      	b.n	800c25e <PDM_Filter_Init+0x7e>
 800c2d6:	4927      	ldr	r1, [pc, #156]	; (800c374 <PDM_Filter_Init+0x194>)
 800c2d8:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 800c37c <PDM_Filter_Init+0x19c>
 800c2dc:	f501 6780 	add.w	r7, r1, #1024	; 0x400
 800c2e0:	4e25      	ldr	r6, [pc, #148]	; (800c378 <PDM_Filter_Init+0x198>)
 800c2e2:	f851 2f04 	ldr.w	r2, [r1, #4]!
 800c2e6:	ea0c 5302 	and.w	r3, ip, r2, lsl #20
 800c2ea:	ea02 0006 	and.w	r0, r2, r6
 800c2ee:	f3c2 5209 	ubfx	r2, r2, #20, #10
 800c2f2:	428f      	cmp	r7, r1
 800c2f4:	ea43 0300 	orr.w	r3, r3, r0
 800c2f8:	4413      	add	r3, r2
 800c2fa:	600b      	str	r3, [r1, #0]
 800c2fc:	d1f1      	bne.n	800c2e2 <PDM_Filter_Init+0x102>
 800c2fe:	2300      	movs	r3, #0
 800c300:	2001      	movs	r0, #1
 800c302:	702b      	strb	r3, [r5, #0]
 800c304:	e7ab      	b.n	800c25e <PDM_Filter_Init+0x7e>
 800c306:	2a00      	cmp	r2, #0
 800c308:	d1a9      	bne.n	800c25e <PDM_Filter_Init+0x7e>
 800c30a:	491a      	ldr	r1, [pc, #104]	; (800c374 <PDM_Filter_Init+0x194>)
 800c30c:	f8df c06c 	ldr.w	ip, [pc, #108]	; 800c37c <PDM_Filter_Init+0x19c>
 800c310:	f501 6780 	add.w	r7, r1, #1024	; 0x400
 800c314:	4e18      	ldr	r6, [pc, #96]	; (800c378 <PDM_Filter_Init+0x198>)
 800c316:	f851 2f04 	ldr.w	r2, [r1, #4]!
 800c31a:	ea0c 5302 	and.w	r3, ip, r2, lsl #20
 800c31e:	ea02 0006 	and.w	r0, r2, r6
 800c322:	f3c2 5209 	ubfx	r2, r2, #20, #10
 800c326:	428f      	cmp	r7, r1
 800c328:	ea43 0300 	orr.w	r3, r3, r0
 800c32c:	4413      	add	r3, r2
 800c32e:	600b      	str	r3, [r1, #0]
 800c330:	d1f1      	bne.n	800c316 <PDM_Filter_Init+0x136>
 800c332:	2001      	movs	r0, #1
 800c334:	2300      	movs	r3, #0
 800c336:	7028      	strb	r0, [r5, #0]
 800c338:	e791      	b.n	800c25e <PDM_Filter_Init+0x7e>
 800c33a:	2220      	movs	r2, #32
 800c33c:	4618      	mov	r0, r3
 800c33e:	2160      	movs	r1, #96	; 0x60
 800c340:	6422      	str	r2, [r4, #64]	; 0x40
 800c342:	4613      	mov	r3, r2
 800c344:	e790      	b.n	800c268 <PDM_Filter_Init+0x88>
 800c346:	bf00      	nop
 800c348:	e0002000 	.word	0xe0002000
 800c34c:	e000ed00 	.word	0xe000ed00
 800c350:	40023008 	.word	0x40023008
 800c354:	40023000 	.word	0x40023000
 800c358:	f407a5c2 	.word	0xf407a5c2
 800c35c:	b5e8b5cd 	.word	0xb5e8b5cd
 800c360:	e0042000 	.word	0xe0042000
 800c364:	5c001000 	.word	0x5c001000
 800c368:	58024c08 	.word	0x58024c08
 800c36c:	58024c00 	.word	0x58024c00
 800c370:	24000490 	.word	0x24000490
 800c374:	23fffffc 	.word	0x23fffffc
 800c378:	000ffc00 	.word	0x000ffc00
 800c37c:	3ff00000 	.word	0x3ff00000

0800c380 <PDM_Filter_setConfig>:
 800c380:	4b67      	ldr	r3, [pc, #412]	; (800c520 <PDM_Filter_setConfig+0x1a0>)
 800c382:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c384:	429a      	cmp	r2, r3
 800c386:	d128      	bne.n	800c3da <PDM_Filter_setConfig+0x5a>
 800c388:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800c38a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c38c:	880e      	ldrh	r6, [r1, #0]
 800c38e:	460d      	mov	r5, r1
 800c390:	4604      	mov	r4, r0
 800c392:	f422 7180 	bic.w	r1, r2, #256	; 0x100
 800c396:	1e73      	subs	r3, r6, #1
 800c398:	f9b5 7004 	ldrsh.w	r7, [r5, #4]
 800c39c:	f9b0 0038 	ldrsh.w	r0, [r0, #56]	; 0x38
 800c3a0:	2b06      	cmp	r3, #6
 800c3a2:	ed2d 8b02 	vpush	{d8}
 800c3a6:	6421      	str	r1, [r4, #64]	; 0x40
 800c3a8:	b083      	sub	sp, #12
 800c3aa:	d820      	bhi.n	800c3ee <PDM_Filter_setConfig+0x6e>
 800c3ac:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 800c3ae:	42b3      	cmp	r3, r6
 800c3b0:	d03d      	beq.n	800c42e <PDM_Filter_setConfig+0xae>
 800c3b2:	4b5c      	ldr	r3, [pc, #368]	; (800c524 <PDM_Filter_setConfig+0x1a4>)
 800c3b4:	4013      	ands	r3, r2
 800c3b6:	4333      	orrs	r3, r6
 800c3b8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800c3bc:	6423      	str	r3, [r4, #64]	; 0x40
 800c3be:	f003 030f 	and.w	r3, r3, #15
 800c3c2:	2a70      	cmp	r2, #112	; 0x70
 800c3c4:	f103 33ff 	add.w	r3, r3, #4294967295
 800c3c8:	d009      	beq.n	800c3de <PDM_Filter_setConfig+0x5e>
 800c3ca:	2b06      	cmp	r3, #6
 800c3cc:	d824      	bhi.n	800c418 <PDM_Filter_setConfig+0x98>
 800c3ce:	e8df f003 	tbb	[pc, r3]
 800c3d2:	878a      	.short	0x878a
 800c3d4:	7b7e8184 	.word	0x7b7e8184
 800c3d8:	78          	.byte	0x78
 800c3d9:	00          	.byte	0x00
 800c3da:	2004      	movs	r0, #4
 800c3dc:	4770      	bx	lr
 800c3de:	2b06      	cmp	r3, #6
 800c3e0:	d81a      	bhi.n	800c418 <PDM_Filter_setConfig+0x98>
 800c3e2:	e8df f003 	tbb	[pc, r3]
 800c3e6:	8f92      	.short	0x8f92
 800c3e8:	8617898c 	.word	0x8617898c
 800c3ec:	83          	.byte	0x83
 800c3ed:	00          	.byte	0x00
 800c3ee:	4287      	cmp	r7, r0
 800c3f0:	f000 808e 	beq.w	800c510 <PDM_Filter_setConfig+0x190>
 800c3f4:	f117 0f0c 	cmn.w	r7, #12
 800c3f8:	f04f 0008 	mov.w	r0, #8
 800c3fc:	da11      	bge.n	800c422 <PDM_Filter_setConfig+0xa2>
 800c3fe:	f64f 73f4 	movw	r3, #65524	; 0xfff4
 800c402:	3040      	adds	r0, #64	; 0x40
 800c404:	80ab      	strh	r3, [r5, #4]
 800c406:	886b      	ldrh	r3, [r5, #2]
 800c408:	8626      	strh	r6, [r4, #48]	; 0x30
 800c40a:	8663      	strh	r3, [r4, #50]	; 0x32
 800c40c:	b003      	add	sp, #12
 800c40e:	ecbd 8b02 	vpop	{d8}
 800c412:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c414:	4b44      	ldr	r3, [pc, #272]	; (800c528 <PDM_Filter_setConfig+0x1a8>)
 800c416:	64a3      	str	r3, [r4, #72]	; 0x48
 800c418:	f117 0f0c 	cmn.w	r7, #12
 800c41c:	f04f 0000 	mov.w	r0, #0
 800c420:	dbed      	blt.n	800c3fe <PDM_Filter_setConfig+0x7e>
 800c422:	2f33      	cmp	r7, #51	; 0x33
 800c424:	dd10      	ble.n	800c448 <PDM_Filter_setConfig+0xc8>
 800c426:	2333      	movs	r3, #51	; 0x33
 800c428:	3040      	adds	r0, #64	; 0x40
 800c42a:	80ab      	strh	r3, [r5, #4]
 800c42c:	e7eb      	b.n	800c406 <PDM_Filter_setConfig+0x86>
 800c42e:	4287      	cmp	r7, r0
 800c430:	d1f2      	bne.n	800c418 <PDM_Filter_setConfig+0x98>
 800c432:	886b      	ldrh	r3, [r5, #2]
 800c434:	8663      	strh	r3, [r4, #50]	; 0x32
 800c436:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c438:	2000      	movs	r0, #0
 800c43a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c43e:	6423      	str	r3, [r4, #64]	; 0x40
 800c440:	b003      	add	sp, #12
 800c442:	ecbd 8b02 	vpop	{d8}
 800c446:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c448:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c44a:	f003 030f 	and.w	r3, r3, #15
 800c44e:	3b01      	subs	r3, #1
 800c450:	2b06      	cmp	r3, #6
 800c452:	d831      	bhi.n	800c4b8 <PDM_Filter_setConfig+0x138>
 800c454:	4a35      	ldr	r2, [pc, #212]	; (800c52c <PDM_Filter_setConfig+0x1ac>)
 800c456:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 800c45a:	eddf 0a35 	vldr	s1, [pc, #212]	; 800c530 <PDM_Filter_setConfig+0x1b0>
 800c45e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c462:	9001      	str	r0, [sp, #4]
 800c464:	edd3 7a07 	vldr	s15, [r3, #28]
 800c468:	ed93 8a00 	vldr	s16, [r3]
 800c46c:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800c470:	f000 f8e6 	bl	800c640 <powf>
 800c474:	eef0 8a40 	vmov.f32	s17, s0
 800c478:	9801      	ldr	r0, [sp, #4]
 800c47a:	ee07 7a90 	vmov	s15, r7
 800c47e:	ee28 8a28 	vmul.f32	s16, s16, s17
 800c482:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 800c486:	9001      	str	r0, [sp, #4]
 800c488:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 800c48c:	eddf 7a29 	vldr	s15, [pc, #164]	; 800c534 <PDM_Filter_setConfig+0x1b4>
 800c490:	ee60 0aa7 	vmul.f32	s1, s1, s15
 800c494:	f000 f8d4 	bl	800c640 <powf>
 800c498:	ee28 8a00 	vmul.f32	s16, s16, s0
 800c49c:	886b      	ldrh	r3, [r5, #2]
 800c49e:	9801      	ldr	r0, [sp, #4]
 800c4a0:	feb8 8a48 	vrinta.f32	s16, s16
 800c4a4:	eebc 8ac8 	vcvt.u32.f32	s16, s16
 800c4a8:	8727      	strh	r7, [r4, #56]	; 0x38
 800c4aa:	8663      	strh	r3, [r4, #50]	; 0x32
 800c4ac:	8626      	strh	r6, [r4, #48]	; 0x30
 800c4ae:	ed84 8a0f 	vstr	s16, [r4, #60]	; 0x3c
 800c4b2:	2800      	cmp	r0, #0
 800c4b4:	d0bf      	beq.n	800c436 <PDM_Filter_setConfig+0xb6>
 800c4b6:	e7a9      	b.n	800c40c <PDM_Filter_setConfig+0x8c>
 800c4b8:	eddf 8a1f 	vldr	s17, [pc, #124]	; 800c538 <PDM_Filter_setConfig+0x1b8>
 800c4bc:	ed9f 8a1f 	vldr	s16, [pc, #124]	; 800c53c <PDM_Filter_setConfig+0x1bc>
 800c4c0:	e7db      	b.n	800c47a <PDM_Filter_setConfig+0xfa>
 800c4c2:	4b1f      	ldr	r3, [pc, #124]	; (800c540 <PDM_Filter_setConfig+0x1c0>)
 800c4c4:	64a3      	str	r3, [r4, #72]	; 0x48
 800c4c6:	e7a7      	b.n	800c418 <PDM_Filter_setConfig+0x98>
 800c4c8:	4b1e      	ldr	r3, [pc, #120]	; (800c544 <PDM_Filter_setConfig+0x1c4>)
 800c4ca:	64a3      	str	r3, [r4, #72]	; 0x48
 800c4cc:	e7a4      	b.n	800c418 <PDM_Filter_setConfig+0x98>
 800c4ce:	4b1e      	ldr	r3, [pc, #120]	; (800c548 <PDM_Filter_setConfig+0x1c8>)
 800c4d0:	64a3      	str	r3, [r4, #72]	; 0x48
 800c4d2:	e7a1      	b.n	800c418 <PDM_Filter_setConfig+0x98>
 800c4d4:	4b1d      	ldr	r3, [pc, #116]	; (800c54c <PDM_Filter_setConfig+0x1cc>)
 800c4d6:	64a3      	str	r3, [r4, #72]	; 0x48
 800c4d8:	e79e      	b.n	800c418 <PDM_Filter_setConfig+0x98>
 800c4da:	4b1d      	ldr	r3, [pc, #116]	; (800c550 <PDM_Filter_setConfig+0x1d0>)
 800c4dc:	64a3      	str	r3, [r4, #72]	; 0x48
 800c4de:	e79b      	b.n	800c418 <PDM_Filter_setConfig+0x98>
 800c4e0:	4b1c      	ldr	r3, [pc, #112]	; (800c554 <PDM_Filter_setConfig+0x1d4>)
 800c4e2:	64a3      	str	r3, [r4, #72]	; 0x48
 800c4e4:	e798      	b.n	800c418 <PDM_Filter_setConfig+0x98>
 800c4e6:	4b1c      	ldr	r3, [pc, #112]	; (800c558 <PDM_Filter_setConfig+0x1d8>)
 800c4e8:	64a3      	str	r3, [r4, #72]	; 0x48
 800c4ea:	e795      	b.n	800c418 <PDM_Filter_setConfig+0x98>
 800c4ec:	4b1b      	ldr	r3, [pc, #108]	; (800c55c <PDM_Filter_setConfig+0x1dc>)
 800c4ee:	64a3      	str	r3, [r4, #72]	; 0x48
 800c4f0:	e792      	b.n	800c418 <PDM_Filter_setConfig+0x98>
 800c4f2:	4b1b      	ldr	r3, [pc, #108]	; (800c560 <PDM_Filter_setConfig+0x1e0>)
 800c4f4:	64a3      	str	r3, [r4, #72]	; 0x48
 800c4f6:	e78f      	b.n	800c418 <PDM_Filter_setConfig+0x98>
 800c4f8:	4b1a      	ldr	r3, [pc, #104]	; (800c564 <PDM_Filter_setConfig+0x1e4>)
 800c4fa:	64a3      	str	r3, [r4, #72]	; 0x48
 800c4fc:	e78c      	b.n	800c418 <PDM_Filter_setConfig+0x98>
 800c4fe:	4b1a      	ldr	r3, [pc, #104]	; (800c568 <PDM_Filter_setConfig+0x1e8>)
 800c500:	64a3      	str	r3, [r4, #72]	; 0x48
 800c502:	e789      	b.n	800c418 <PDM_Filter_setConfig+0x98>
 800c504:	4b19      	ldr	r3, [pc, #100]	; (800c56c <PDM_Filter_setConfig+0x1ec>)
 800c506:	64a3      	str	r3, [r4, #72]	; 0x48
 800c508:	e786      	b.n	800c418 <PDM_Filter_setConfig+0x98>
 800c50a:	4b19      	ldr	r3, [pc, #100]	; (800c570 <PDM_Filter_setConfig+0x1f0>)
 800c50c:	64a3      	str	r3, [r4, #72]	; 0x48
 800c50e:	e783      	b.n	800c418 <PDM_Filter_setConfig+0x98>
 800c510:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 800c512:	42b3      	cmp	r3, r6
 800c514:	f47f af6e 	bne.w	800c3f4 <PDM_Filter_setConfig+0x74>
 800c518:	886b      	ldrh	r3, [r5, #2]
 800c51a:	2008      	movs	r0, #8
 800c51c:	8663      	strh	r3, [r4, #50]	; 0x32
 800c51e:	e775      	b.n	800c40c <PDM_Filter_setConfig+0x8c>
 800c520:	b5e8b5cd 	.word	0xb5e8b5cd
 800c524:	fffffef0 	.word	0xfffffef0
 800c528:	0800b699 	.word	0x0800b699
 800c52c:	0800c9b0 	.word	0x0800c9b0
 800c530:	42000000 	.word	0x42000000
 800c534:	3d4ccccd 	.word	0x3d4ccccd
 800c538:	4f800000 	.word	0x4f800000
 800c53c:	00000000 	.word	0x00000000
 800c540:	0800aaa5 	.word	0x0800aaa5
 800c544:	0800a92d 	.word	0x0800a92d
 800c548:	0800a81d 	.word	0x0800a81d
 800c54c:	0800b2e1 	.word	0x0800b2e1
 800c550:	0800b049 	.word	0x0800b049
 800c554:	0800ae11 	.word	0x0800ae11
 800c558:	0800ac2d 	.word	0x0800ac2d
 800c55c:	0800b8b5 	.word	0x0800b8b5
 800c560:	0800b779 	.word	0x0800b779
 800c564:	0800bef5 	.word	0x0800bef5
 800c568:	0800bcf9 	.word	0x0800bcf9
 800c56c:	0800bb4d 	.word	0x0800bb4d
 800c570:	0800b9e1 	.word	0x0800b9e1

0800c574 <PDM_Filter>:
 800c574:	b410      	push	{r4}
 800c576:	4b0b      	ldr	r3, [pc, #44]	; (800c5a4 <PDM_Filter+0x30>)
 800c578:	6c54      	ldr	r4, [r2, #68]	; 0x44
 800c57a:	429c      	cmp	r4, r3
 800c57c:	d107      	bne.n	800c58e <PDM_Filter+0x1a>
 800c57e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800c580:	05dc      	lsls	r4, r3, #23
 800c582:	d508      	bpl.n	800c596 <PDM_Filter+0x22>
 800c584:	6c93      	ldr	r3, [r2, #72]	; 0x48
 800c586:	320c      	adds	r2, #12
 800c588:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c58c:	4718      	bx	r3
 800c58e:	2004      	movs	r0, #4
 800c590:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c594:	4770      	bx	lr
 800c596:	f013 0f80 	tst.w	r3, #128	; 0x80
 800c59a:	bf14      	ite	ne
 800c59c:	2020      	movne	r0, #32
 800c59e:	2030      	moveq	r0, #48	; 0x30
 800c5a0:	e7f6      	b.n	800c590 <PDM_Filter+0x1c>
 800c5a2:	bf00      	nop
 800c5a4:	b5e8b5cd 	.word	0xb5e8b5cd

0800c5a8 <__errno>:
 800c5a8:	4b01      	ldr	r3, [pc, #4]	; (800c5b0 <__errno+0x8>)
 800c5aa:	6818      	ldr	r0, [r3, #0]
 800c5ac:	4770      	bx	lr
 800c5ae:	bf00      	nop
 800c5b0:	24000410 	.word	0x24000410

0800c5b4 <__libc_init_array>:
 800c5b4:	b570      	push	{r4, r5, r6, lr}
 800c5b6:	4d0d      	ldr	r5, [pc, #52]	; (800c5ec <__libc_init_array+0x38>)
 800c5b8:	4c0d      	ldr	r4, [pc, #52]	; (800c5f0 <__libc_init_array+0x3c>)
 800c5ba:	1b64      	subs	r4, r4, r5
 800c5bc:	10a4      	asrs	r4, r4, #2
 800c5be:	2600      	movs	r6, #0
 800c5c0:	42a6      	cmp	r6, r4
 800c5c2:	d109      	bne.n	800c5d8 <__libc_init_array+0x24>
 800c5c4:	4d0b      	ldr	r5, [pc, #44]	; (800c5f4 <__libc_init_array+0x40>)
 800c5c6:	4c0c      	ldr	r4, [pc, #48]	; (800c5f8 <__libc_init_array+0x44>)
 800c5c8:	f000 f9e6 	bl	800c998 <_init>
 800c5cc:	1b64      	subs	r4, r4, r5
 800c5ce:	10a4      	asrs	r4, r4, #2
 800c5d0:	2600      	movs	r6, #0
 800c5d2:	42a6      	cmp	r6, r4
 800c5d4:	d105      	bne.n	800c5e2 <__libc_init_array+0x2e>
 800c5d6:	bd70      	pop	{r4, r5, r6, pc}
 800c5d8:	f855 3b04 	ldr.w	r3, [r5], #4
 800c5dc:	4798      	blx	r3
 800c5de:	3601      	adds	r6, #1
 800c5e0:	e7ee      	b.n	800c5c0 <__libc_init_array+0xc>
 800c5e2:	f855 3b04 	ldr.w	r3, [r5], #4
 800c5e6:	4798      	blx	r3
 800c5e8:	3601      	adds	r6, #1
 800c5ea:	e7f2      	b.n	800c5d2 <__libc_init_array+0x1e>
 800c5ec:	0800cca0 	.word	0x0800cca0
 800c5f0:	0800cca0 	.word	0x0800cca0
 800c5f4:	0800cca0 	.word	0x0800cca0
 800c5f8:	0800cca4 	.word	0x0800cca4

0800c5fc <memset>:
 800c5fc:	4402      	add	r2, r0
 800c5fe:	4603      	mov	r3, r0
 800c600:	4293      	cmp	r3, r2
 800c602:	d100      	bne.n	800c606 <memset+0xa>
 800c604:	4770      	bx	lr
 800c606:	f803 1b01 	strb.w	r1, [r3], #1
 800c60a:	e7f9      	b.n	800c600 <memset+0x4>

0800c60c <checkint>:
 800c60c:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800c610:	2b7e      	cmp	r3, #126	; 0x7e
 800c612:	dd10      	ble.n	800c636 <checkint+0x2a>
 800c614:	2b96      	cmp	r3, #150	; 0x96
 800c616:	dc0c      	bgt.n	800c632 <checkint+0x26>
 800c618:	2201      	movs	r2, #1
 800c61a:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 800c61e:	fa02 f303 	lsl.w	r3, r2, r3
 800c622:	1e5a      	subs	r2, r3, #1
 800c624:	4202      	tst	r2, r0
 800c626:	d106      	bne.n	800c636 <checkint+0x2a>
 800c628:	4203      	tst	r3, r0
 800c62a:	bf0c      	ite	eq
 800c62c:	2002      	moveq	r0, #2
 800c62e:	2001      	movne	r0, #1
 800c630:	4770      	bx	lr
 800c632:	2002      	movs	r0, #2
 800c634:	4770      	bx	lr
 800c636:	2000      	movs	r0, #0
 800c638:	4770      	bx	lr
 800c63a:	0000      	movs	r0, r0
 800c63c:	0000      	movs	r0, r0
	...

0800c640 <powf>:
 800c640:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c642:	ee10 1a10 	vmov	r1, s0
 800c646:	ee10 6a90 	vmov	r6, s1
 800c64a:	f5a1 0300 	sub.w	r3, r1, #8388608	; 0x800000
 800c64e:	0072      	lsls	r2, r6, #1
 800c650:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 800c654:	b085      	sub	sp, #20
 800c656:	f102 30ff 	add.w	r0, r2, #4294967295
 800c65a:	f06f 7380 	mvn.w	r3, #16777216	; 0x1000000
 800c65e:	d256      	bcs.n	800c70e <powf+0xce>
 800c660:	4298      	cmp	r0, r3
 800c662:	d256      	bcs.n	800c712 <powf+0xd2>
 800c664:	2000      	movs	r0, #0
 800c666:	f101 4240 	add.w	r2, r1, #3221225472	; 0xc0000000
 800c66a:	4ea3      	ldr	r6, [pc, #652]	; (800c8f8 <powf+0x2b8>)
 800c66c:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 800c670:	f502 024d 	add.w	r2, r2, #13434880	; 0xcd0000
 800c674:	f3c2 47c3 	ubfx	r7, r2, #19, #4
 800c678:	0dd2      	lsrs	r2, r2, #23
 800c67a:	eb06 1707 	add.w	r7, r6, r7, lsl #4
 800c67e:	05d2      	lsls	r2, r2, #23
 800c680:	1a8b      	subs	r3, r1, r2
 800c682:	ed97 5b00 	vldr	d5, [r7]
 800c686:	ee07 3a90 	vmov	s15, r3
 800c68a:	15d2      	asrs	r2, r2, #23
 800c68c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800c690:	eea5 6b07 	vfma.f64	d6, d5, d7
 800c694:	ed97 5b02 	vldr	d5, [r7, #8]
 800c698:	ee26 2b06 	vmul.f64	d2, d6, d6
 800c69c:	ee22 1b02 	vmul.f64	d1, d2, d2
 800c6a0:	ee07 2a90 	vmov	s15, r2
 800c6a4:	ed96 4b40 	vldr	d4, [r6, #256]	; 0x100
 800c6a8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800c6ac:	ee37 7b05 	vadd.f64	d7, d7, d5
 800c6b0:	ed96 5b42 	vldr	d5, [r6, #264]	; 0x108
 800c6b4:	ed96 3b44 	vldr	d3, [r6, #272]	; 0x110
 800c6b8:	eea6 5b04 	vfma.f64	d5, d6, d4
 800c6bc:	ed96 4b46 	vldr	d4, [r6, #280]	; 0x118
 800c6c0:	eea6 4b03 	vfma.f64	d4, d6, d3
 800c6c4:	ed96 3b48 	vldr	d3, [r6, #288]	; 0x120
 800c6c8:	eeb7 0ae0 	vcvt.f64.f32	d0, s1
 800c6cc:	eea6 7b03 	vfma.f64	d7, d6, d3
 800c6d0:	eea2 7b04 	vfma.f64	d7, d2, d4
 800c6d4:	eea5 7b01 	vfma.f64	d7, d5, d1
 800c6d8:	ee20 0b07 	vmul.f64	d0, d0, d7
 800c6dc:	ee10 1a90 	vmov	r1, s1
 800c6e0:	2300      	movs	r3, #0
 800c6e2:	2700      	movs	r7, #0
 800c6e4:	f3c1 32cf 	ubfx	r2, r1, #15, #16
 800c6e8:	f248 06be 	movw	r6, #32958	; 0x80be
 800c6ec:	429f      	cmp	r7, r3
 800c6ee:	bf08      	it	eq
 800c6f0:	4296      	cmpeq	r6, r2
 800c6f2:	f080 80b1 	bcs.w	800c858 <powf+0x218>
 800c6f6:	ed9f 7b78 	vldr	d7, [pc, #480]	; 800c8d8 <powf+0x298>
 800c6fa:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800c6fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c702:	dd79      	ble.n	800c7f8 <powf+0x1b8>
 800c704:	b005      	add	sp, #20
 800c706:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800c70a:	f000 b91f 	b.w	800c94c <__math_oflowf>
 800c70e:	4298      	cmp	r0, r3
 800c710:	d32d      	bcc.n	800c76e <powf+0x12e>
 800c712:	b952      	cbnz	r2, 800c72a <powf+0xea>
 800c714:	f481 0380 	eor.w	r3, r1, #4194304	; 0x400000
 800c718:	005b      	lsls	r3, r3, #1
 800c71a:	f513 0f00 	cmn.w	r3, #8388608	; 0x800000
 800c71e:	f240 80cd 	bls.w	800c8bc <powf+0x27c>
 800c722:	ee30 0a20 	vadd.f32	s0, s0, s1
 800c726:	b005      	add	sp, #20
 800c728:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c72a:	f1b1 5f7e 	cmp.w	r1, #1065353216	; 0x3f800000
 800c72e:	d105      	bne.n	800c73c <powf+0xfc>
 800c730:	f486 0680 	eor.w	r6, r6, #4194304	; 0x400000
 800c734:	0076      	lsls	r6, r6, #1
 800c736:	f516 0f00 	cmn.w	r6, #8388608	; 0x800000
 800c73a:	e7f0      	b.n	800c71e <powf+0xde>
 800c73c:	004b      	lsls	r3, r1, #1
 800c73e:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
 800c742:	d8ee      	bhi.n	800c722 <powf+0xe2>
 800c744:	f1b2 4f7f 	cmp.w	r2, #4278190080	; 0xff000000
 800c748:	d1eb      	bne.n	800c722 <powf+0xe2>
 800c74a:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 800c74e:	f000 80b5 	beq.w	800c8bc <powf+0x27c>
 800c752:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 800c756:	ea6f 0606 	mvn.w	r6, r6
 800c75a:	bf34      	ite	cc
 800c75c:	2300      	movcc	r3, #0
 800c75e:	2301      	movcs	r3, #1
 800c760:	0ff6      	lsrs	r6, r6, #31
 800c762:	42b3      	cmp	r3, r6
 800c764:	f040 80ad 	bne.w	800c8c2 <powf+0x282>
 800c768:	ee20 0aa0 	vmul.f32	s0, s1, s1
 800c76c:	e7db      	b.n	800c726 <powf+0xe6>
 800c76e:	004f      	lsls	r7, r1, #1
 800c770:	1e7a      	subs	r2, r7, #1
 800c772:	429a      	cmp	r2, r3
 800c774:	d31c      	bcc.n	800c7b0 <powf+0x170>
 800c776:	2900      	cmp	r1, #0
 800c778:	ee20 0a00 	vmul.f32	s0, s0, s0
 800c77c:	da0f      	bge.n	800c79e <powf+0x15e>
 800c77e:	ee10 0a90 	vmov	r0, s1
 800c782:	f7ff ff43 	bl	800c60c <checkint>
 800c786:	2801      	cmp	r0, #1
 800c788:	d109      	bne.n	800c79e <powf+0x15e>
 800c78a:	eeb1 0a40 	vneg.f32	s0, s0
 800c78e:	b947      	cbnz	r7, 800c7a2 <powf+0x162>
 800c790:	2e00      	cmp	r6, #0
 800c792:	dac8      	bge.n	800c726 <powf+0xe6>
 800c794:	b005      	add	sp, #20
 800c796:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800c79a:	f000 b8dd 	b.w	800c958 <__math_divzerof>
 800c79e:	2000      	movs	r0, #0
 800c7a0:	e7f5      	b.n	800c78e <powf+0x14e>
 800c7a2:	2e00      	cmp	r6, #0
 800c7a4:	dabf      	bge.n	800c726 <powf+0xe6>
 800c7a6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800c7aa:	ee87 0a80 	vdiv.f32	s0, s15, s0
 800c7ae:	e7ba      	b.n	800c726 <powf+0xe6>
 800c7b0:	2900      	cmp	r1, #0
 800c7b2:	da1f      	bge.n	800c7f4 <powf+0x1b4>
 800c7b4:	ee10 0a90 	vmov	r0, s1
 800c7b8:	f7ff ff28 	bl	800c60c <checkint>
 800c7bc:	b920      	cbnz	r0, 800c7c8 <powf+0x188>
 800c7be:	b005      	add	sp, #20
 800c7c0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800c7c4:	f000 b8d8 	b.w	800c978 <__math_invalidf>
 800c7c8:	2801      	cmp	r0, #1
 800c7ca:	bf14      	ite	ne
 800c7cc:	2000      	movne	r0, #0
 800c7ce:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 800c7d2:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800c7d6:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 800c7da:	f4bf af44 	bcs.w	800c666 <powf+0x26>
 800c7de:	eddf 7a47 	vldr	s15, [pc, #284]	; 800c8fc <powf+0x2bc>
 800c7e2:	ee20 0a27 	vmul.f32	s0, s0, s15
 800c7e6:	ee10 3a10 	vmov	r3, s0
 800c7ea:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c7ee:	f1a3 6138 	sub.w	r1, r3, #192937984	; 0xb800000
 800c7f2:	e738      	b.n	800c666 <powf+0x26>
 800c7f4:	2000      	movs	r0, #0
 800c7f6:	e7ee      	b.n	800c7d6 <powf+0x196>
 800c7f8:	ed9f 7b39 	vldr	d7, [pc, #228]	; 800c8e0 <powf+0x2a0>
 800c7fc:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800c800:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c804:	dd10      	ble.n	800c828 <powf+0x1e8>
 800c806:	f04f 534c 	mov.w	r3, #855638016	; 0x33000000
 800c80a:	2800      	cmp	r0, #0
 800c80c:	d15c      	bne.n	800c8c8 <powf+0x288>
 800c80e:	9302      	str	r3, [sp, #8]
 800c810:	eddd 7a02 	vldr	s15, [sp, #8]
 800c814:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c818:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c81c:	eef4 7a47 	vcmp.f32	s15, s14
 800c820:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c824:	f47f af6e 	bne.w	800c704 <powf+0xc4>
 800c828:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 800c8e8 <powf+0x2a8>
 800c82c:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800c830:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c834:	d804      	bhi.n	800c840 <powf+0x200>
 800c836:	b005      	add	sp, #20
 800c838:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800c83c:	f000 b87a 	b.w	800c934 <__math_uflowf>
 800c840:	ed9f 7b2b 	vldr	d7, [pc, #172]	; 800c8f0 <powf+0x2b0>
 800c844:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800c848:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c84c:	d504      	bpl.n	800c858 <powf+0x218>
 800c84e:	b005      	add	sp, #20
 800c850:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800c854:	f000 b874 	b.w	800c940 <__math_may_uflowf>
 800c858:	4b29      	ldr	r3, [pc, #164]	; (800c900 <powf+0x2c0>)
 800c85a:	ed93 7b40 	vldr	d7, [r3, #256]	; 0x100
 800c85e:	ee30 6b07 	vadd.f64	d6, d0, d7
 800c862:	ed8d 6b00 	vstr	d6, [sp]
 800c866:	ee36 7b47 	vsub.f64	d7, d6, d7
 800c86a:	ee30 7b47 	vsub.f64	d7, d0, d7
 800c86e:	e9dd 6700 	ldrd	r6, r7, [sp]
 800c872:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800c876:	f006 011f 	and.w	r1, r6, #31
 800c87a:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800c87e:	e9d1 ce00 	ldrd	ip, lr, [r1]
 800c882:	ed93 5b42 	vldr	d5, [r3, #264]	; 0x108
 800c886:	ed93 6b44 	vldr	d6, [r3, #272]	; 0x110
 800c88a:	ed93 4b46 	vldr	d4, [r3, #280]	; 0x118
 800c88e:	eea7 6b05 	vfma.f64	d6, d7, d5
 800c892:	ee27 5b07 	vmul.f64	d5, d7, d7
 800c896:	1836      	adds	r6, r6, r0
 800c898:	2300      	movs	r3, #0
 800c89a:	eb13 040c 	adds.w	r4, r3, ip
 800c89e:	ea4f 31c6 	mov.w	r1, r6, lsl #15
 800c8a2:	eb41 050e 	adc.w	r5, r1, lr
 800c8a6:	eea7 0b04 	vfma.f64	d0, d7, d4
 800c8aa:	ec45 4b17 	vmov	d7, r4, r5
 800c8ae:	eea6 0b05 	vfma.f64	d0, d6, d5
 800c8b2:	ee20 0b07 	vmul.f64	d0, d0, d7
 800c8b6:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800c8ba:	e734      	b.n	800c726 <powf+0xe6>
 800c8bc:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800c8c0:	e731      	b.n	800c726 <powf+0xe6>
 800c8c2:	ed9f 0a10 	vldr	s0, [pc, #64]	; 800c904 <powf+0x2c4>
 800c8c6:	e72e      	b.n	800c726 <powf+0xe6>
 800c8c8:	9303      	str	r3, [sp, #12]
 800c8ca:	eddd 7a03 	vldr	s15, [sp, #12]
 800c8ce:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800c8d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c8d6:	e7a1      	b.n	800c81c <powf+0x1dc>
 800c8d8:	ffd1d571 	.word	0xffd1d571
 800c8dc:	405fffff 	.word	0x405fffff
 800c8e0:	ffa3aae2 	.word	0xffa3aae2
 800c8e4:	405fffff 	.word	0x405fffff
 800c8e8:	00000000 	.word	0x00000000
 800c8ec:	c062c000 	.word	0xc062c000
 800c8f0:	00000000 	.word	0x00000000
 800c8f4:	c062a000 	.word	0xc062a000
 800c8f8:	0800ca28 	.word	0x0800ca28
 800c8fc:	4b000000 	.word	0x4b000000
 800c900:	0800cb50 	.word	0x0800cb50
 800c904:	00000000 	.word	0x00000000

0800c908 <with_errnof>:
 800c908:	b513      	push	{r0, r1, r4, lr}
 800c90a:	4604      	mov	r4, r0
 800c90c:	ed8d 0a01 	vstr	s0, [sp, #4]
 800c910:	f7ff fe4a 	bl	800c5a8 <__errno>
 800c914:	ed9d 0a01 	vldr	s0, [sp, #4]
 800c918:	6004      	str	r4, [r0, #0]
 800c91a:	b002      	add	sp, #8
 800c91c:	bd10      	pop	{r4, pc}

0800c91e <xflowf>:
 800c91e:	b130      	cbz	r0, 800c92e <xflowf+0x10>
 800c920:	eef1 7a40 	vneg.f32	s15, s0
 800c924:	ee27 0a80 	vmul.f32	s0, s15, s0
 800c928:	2022      	movs	r0, #34	; 0x22
 800c92a:	f7ff bfed 	b.w	800c908 <with_errnof>
 800c92e:	eef0 7a40 	vmov.f32	s15, s0
 800c932:	e7f7      	b.n	800c924 <xflowf+0x6>

0800c934 <__math_uflowf>:
 800c934:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800c93c <__math_uflowf+0x8>
 800c938:	f7ff bff1 	b.w	800c91e <xflowf>
 800c93c:	10000000 	.word	0x10000000

0800c940 <__math_may_uflowf>:
 800c940:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800c948 <__math_may_uflowf+0x8>
 800c944:	f7ff bfeb 	b.w	800c91e <xflowf>
 800c948:	1a200000 	.word	0x1a200000

0800c94c <__math_oflowf>:
 800c94c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800c954 <__math_oflowf+0x8>
 800c950:	f7ff bfe5 	b.w	800c91e <xflowf>
 800c954:	70000000 	.word	0x70000000

0800c958 <__math_divzerof>:
 800c958:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800c95c:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 800c960:	2800      	cmp	r0, #0
 800c962:	fe40 7a27 	vseleq.f32	s15, s0, s15
 800c966:	ed9f 0a03 	vldr	s0, [pc, #12]	; 800c974 <__math_divzerof+0x1c>
 800c96a:	2022      	movs	r0, #34	; 0x22
 800c96c:	ee87 0a80 	vdiv.f32	s0, s15, s0
 800c970:	f7ff bfca 	b.w	800c908 <with_errnof>
 800c974:	00000000 	.word	0x00000000

0800c978 <__math_invalidf>:
 800c978:	eef0 7a40 	vmov.f32	s15, s0
 800c97c:	ee30 7a40 	vsub.f32	s14, s0, s0
 800c980:	eef4 7a67 	vcmp.f32	s15, s15
 800c984:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c988:	ee87 0a07 	vdiv.f32	s0, s14, s14
 800c98c:	d602      	bvs.n	800c994 <__math_invalidf+0x1c>
 800c98e:	2021      	movs	r0, #33	; 0x21
 800c990:	f7ff bfba 	b.w	800c908 <with_errnof>
 800c994:	4770      	bx	lr
	...

0800c998 <_init>:
 800c998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c99a:	bf00      	nop
 800c99c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c99e:	bc08      	pop	{r3}
 800c9a0:	469e      	mov	lr, r3
 800c9a2:	4770      	bx	lr

0800c9a4 <_fini>:
 800c9a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c9a6:	bf00      	nop
 800c9a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c9aa:	bc08      	pop	{r3}
 800c9ac:	469e      	mov	lr, r3
 800c9ae:	4770      	bx	lr
