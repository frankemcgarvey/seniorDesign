
microphone_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c990  08000298  08000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004d0  0800cc28  0800cc28  0001cc28  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d0f8  0800d0f8  00020474  2**0
                  CONTENTS
  4 .ARM          00000008  0800d0f8  0800d0f8  0001d0f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d100  0800d100  00020474  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d100  0800d100  0001d100  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d104  0800d104  0001d104  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000474  24000000  0800d108  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c98  24000474  0800d57c  00020474  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2400110c  0800d57c  0002110c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020474  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003b868  00000000  00000000  000204a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004668  00000000  00000000  0005bd0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018b8  00000000  00000000  00060378  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001788  00000000  00000000  00061c30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003c874  00000000  00000000  000633b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002b0c3  00000000  00000000  0009fc2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0018c7bf  00000000  00000000  000cacef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000d1  00000000  00000000  002574ae  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006e54  00000000  00000000  00257580  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000474 	.word	0x24000474
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800cc10 	.word	0x0800cc10

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000478 	.word	0x24000478
 80002d4:	0800cc10 	.word	0x0800cc10

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96e 	b.w	80005cc <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468c      	mov	ip, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	f040 8083 	bne.w	800041e <__udivmoddi4+0x116>
 8000318:	428a      	cmp	r2, r1
 800031a:	4617      	mov	r7, r2
 800031c:	d947      	bls.n	80003ae <__udivmoddi4+0xa6>
 800031e:	fab2 f282 	clz	r2, r2
 8000322:	b142      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000324:	f1c2 0020 	rsb	r0, r2, #32
 8000328:	fa24 f000 	lsr.w	r0, r4, r0
 800032c:	4091      	lsls	r1, r2
 800032e:	4097      	lsls	r7, r2
 8000330:	ea40 0c01 	orr.w	ip, r0, r1
 8000334:	4094      	lsls	r4, r2
 8000336:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fbbc f6f8 	udiv	r6, ip, r8
 8000340:	fa1f fe87 	uxth.w	lr, r7
 8000344:	fb08 c116 	mls	r1, r8, r6, ip
 8000348:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034c:	fb06 f10e 	mul.w	r1, r6, lr
 8000350:	4299      	cmp	r1, r3
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x60>
 8000354:	18fb      	adds	r3, r7, r3
 8000356:	f106 30ff 	add.w	r0, r6, #4294967295
 800035a:	f080 8119 	bcs.w	8000590 <__udivmoddi4+0x288>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 8116 	bls.w	8000590 <__udivmoddi4+0x288>
 8000364:	3e02      	subs	r6, #2
 8000366:	443b      	add	r3, r7
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000370:	fb08 3310 	mls	r3, r8, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 fe0e 	mul.w	lr, r0, lr
 800037c:	45a6      	cmp	lr, r4
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x8c>
 8000380:	193c      	adds	r4, r7, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	f080 8105 	bcs.w	8000594 <__udivmoddi4+0x28c>
 800038a:	45a6      	cmp	lr, r4
 800038c:	f240 8102 	bls.w	8000594 <__udivmoddi4+0x28c>
 8000390:	3802      	subs	r0, #2
 8000392:	443c      	add	r4, r7
 8000394:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	2600      	movs	r6, #0
 800039e:	b11d      	cbz	r5, 80003a8 <__udivmoddi4+0xa0>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c5 4300 	strd	r4, r3, [r5]
 80003a8:	4631      	mov	r1, r6
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	b902      	cbnz	r2, 80003b2 <__udivmoddi4+0xaa>
 80003b0:	deff      	udf	#255	; 0xff
 80003b2:	fab2 f282 	clz	r2, r2
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d150      	bne.n	800045c <__udivmoddi4+0x154>
 80003ba:	1bcb      	subs	r3, r1, r7
 80003bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c0:	fa1f f887 	uxth.w	r8, r7
 80003c4:	2601      	movs	r6, #1
 80003c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80003ca:	0c21      	lsrs	r1, r4, #16
 80003cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003d4:	fb08 f30c 	mul.w	r3, r8, ip
 80003d8:	428b      	cmp	r3, r1
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0xe4>
 80003dc:	1879      	adds	r1, r7, r1
 80003de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0xe2>
 80003e4:	428b      	cmp	r3, r1
 80003e6:	f200 80e9 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 80003ea:	4684      	mov	ip, r0
 80003ec:	1ac9      	subs	r1, r1, r3
 80003ee:	b2a3      	uxth	r3, r4
 80003f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80003f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80003f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003fc:	fb08 f800 	mul.w	r8, r8, r0
 8000400:	45a0      	cmp	r8, r4
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x10c>
 8000404:	193c      	adds	r4, r7, r4
 8000406:	f100 33ff 	add.w	r3, r0, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x10a>
 800040c:	45a0      	cmp	r8, r4
 800040e:	f200 80d9 	bhi.w	80005c4 <__udivmoddi4+0x2bc>
 8000412:	4618      	mov	r0, r3
 8000414:	eba4 0408 	sub.w	r4, r4, r8
 8000418:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800041c:	e7bf      	b.n	800039e <__udivmoddi4+0x96>
 800041e:	428b      	cmp	r3, r1
 8000420:	d909      	bls.n	8000436 <__udivmoddi4+0x12e>
 8000422:	2d00      	cmp	r5, #0
 8000424:	f000 80b1 	beq.w	800058a <__udivmoddi4+0x282>
 8000428:	2600      	movs	r6, #0
 800042a:	e9c5 0100 	strd	r0, r1, [r5]
 800042e:	4630      	mov	r0, r6
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	fab3 f683 	clz	r6, r3
 800043a:	2e00      	cmp	r6, #0
 800043c:	d14a      	bne.n	80004d4 <__udivmoddi4+0x1cc>
 800043e:	428b      	cmp	r3, r1
 8000440:	d302      	bcc.n	8000448 <__udivmoddi4+0x140>
 8000442:	4282      	cmp	r2, r0
 8000444:	f200 80b8 	bhi.w	80005b8 <__udivmoddi4+0x2b0>
 8000448:	1a84      	subs	r4, r0, r2
 800044a:	eb61 0103 	sbc.w	r1, r1, r3
 800044e:	2001      	movs	r0, #1
 8000450:	468c      	mov	ip, r1
 8000452:	2d00      	cmp	r5, #0
 8000454:	d0a8      	beq.n	80003a8 <__udivmoddi4+0xa0>
 8000456:	e9c5 4c00 	strd	r4, ip, [r5]
 800045a:	e7a5      	b.n	80003a8 <__udivmoddi4+0xa0>
 800045c:	f1c2 0320 	rsb	r3, r2, #32
 8000460:	fa20 f603 	lsr.w	r6, r0, r3
 8000464:	4097      	lsls	r7, r2
 8000466:	fa01 f002 	lsl.w	r0, r1, r2
 800046a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800046e:	40d9      	lsrs	r1, r3
 8000470:	4330      	orrs	r0, r6
 8000472:	0c03      	lsrs	r3, r0, #16
 8000474:	fbb1 f6fe 	udiv	r6, r1, lr
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000480:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000484:	fb06 f108 	mul.w	r1, r6, r8
 8000488:	4299      	cmp	r1, r3
 800048a:	fa04 f402 	lsl.w	r4, r4, r2
 800048e:	d909      	bls.n	80004a4 <__udivmoddi4+0x19c>
 8000490:	18fb      	adds	r3, r7, r3
 8000492:	f106 3cff 	add.w	ip, r6, #4294967295
 8000496:	f080 808d 	bcs.w	80005b4 <__udivmoddi4+0x2ac>
 800049a:	4299      	cmp	r1, r3
 800049c:	f240 808a 	bls.w	80005b4 <__udivmoddi4+0x2ac>
 80004a0:	3e02      	subs	r6, #2
 80004a2:	443b      	add	r3, r7
 80004a4:	1a5b      	subs	r3, r3, r1
 80004a6:	b281      	uxth	r1, r0
 80004a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80004ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b4:	fb00 f308 	mul.w	r3, r0, r8
 80004b8:	428b      	cmp	r3, r1
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x1c4>
 80004bc:	1879      	adds	r1, r7, r1
 80004be:	f100 3cff 	add.w	ip, r0, #4294967295
 80004c2:	d273      	bcs.n	80005ac <__udivmoddi4+0x2a4>
 80004c4:	428b      	cmp	r3, r1
 80004c6:	d971      	bls.n	80005ac <__udivmoddi4+0x2a4>
 80004c8:	3802      	subs	r0, #2
 80004ca:	4439      	add	r1, r7
 80004cc:	1acb      	subs	r3, r1, r3
 80004ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004d2:	e778      	b.n	80003c6 <__udivmoddi4+0xbe>
 80004d4:	f1c6 0c20 	rsb	ip, r6, #32
 80004d8:	fa03 f406 	lsl.w	r4, r3, r6
 80004dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e0:	431c      	orrs	r4, r3
 80004e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80004e6:	fa01 f306 	lsl.w	r3, r1, r6
 80004ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80004f2:	431f      	orrs	r7, r3
 80004f4:	0c3b      	lsrs	r3, r7, #16
 80004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fa:	fa1f f884 	uxth.w	r8, r4
 80004fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000502:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000506:	fb09 fa08 	mul.w	sl, r9, r8
 800050a:	458a      	cmp	sl, r1
 800050c:	fa02 f206 	lsl.w	r2, r2, r6
 8000510:	fa00 f306 	lsl.w	r3, r0, r6
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x220>
 8000516:	1861      	adds	r1, r4, r1
 8000518:	f109 30ff 	add.w	r0, r9, #4294967295
 800051c:	d248      	bcs.n	80005b0 <__udivmoddi4+0x2a8>
 800051e:	458a      	cmp	sl, r1
 8000520:	d946      	bls.n	80005b0 <__udivmoddi4+0x2a8>
 8000522:	f1a9 0902 	sub.w	r9, r9, #2
 8000526:	4421      	add	r1, r4
 8000528:	eba1 010a 	sub.w	r1, r1, sl
 800052c:	b2bf      	uxth	r7, r7
 800052e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000532:	fb0e 1110 	mls	r1, lr, r0, r1
 8000536:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800053a:	fb00 f808 	mul.w	r8, r0, r8
 800053e:	45b8      	cmp	r8, r7
 8000540:	d907      	bls.n	8000552 <__udivmoddi4+0x24a>
 8000542:	19e7      	adds	r7, r4, r7
 8000544:	f100 31ff 	add.w	r1, r0, #4294967295
 8000548:	d22e      	bcs.n	80005a8 <__udivmoddi4+0x2a0>
 800054a:	45b8      	cmp	r8, r7
 800054c:	d92c      	bls.n	80005a8 <__udivmoddi4+0x2a0>
 800054e:	3802      	subs	r0, #2
 8000550:	4427      	add	r7, r4
 8000552:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000556:	eba7 0708 	sub.w	r7, r7, r8
 800055a:	fba0 8902 	umull	r8, r9, r0, r2
 800055e:	454f      	cmp	r7, r9
 8000560:	46c6      	mov	lr, r8
 8000562:	4649      	mov	r1, r9
 8000564:	d31a      	bcc.n	800059c <__udivmoddi4+0x294>
 8000566:	d017      	beq.n	8000598 <__udivmoddi4+0x290>
 8000568:	b15d      	cbz	r5, 8000582 <__udivmoddi4+0x27a>
 800056a:	ebb3 020e 	subs.w	r2, r3, lr
 800056e:	eb67 0701 	sbc.w	r7, r7, r1
 8000572:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000576:	40f2      	lsrs	r2, r6
 8000578:	ea4c 0202 	orr.w	r2, ip, r2
 800057c:	40f7      	lsrs	r7, r6
 800057e:	e9c5 2700 	strd	r2, r7, [r5]
 8000582:	2600      	movs	r6, #0
 8000584:	4631      	mov	r1, r6
 8000586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800058a:	462e      	mov	r6, r5
 800058c:	4628      	mov	r0, r5
 800058e:	e70b      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000590:	4606      	mov	r6, r0
 8000592:	e6e9      	b.n	8000368 <__udivmoddi4+0x60>
 8000594:	4618      	mov	r0, r3
 8000596:	e6fd      	b.n	8000394 <__udivmoddi4+0x8c>
 8000598:	4543      	cmp	r3, r8
 800059a:	d2e5      	bcs.n	8000568 <__udivmoddi4+0x260>
 800059c:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a0:	eb69 0104 	sbc.w	r1, r9, r4
 80005a4:	3801      	subs	r0, #1
 80005a6:	e7df      	b.n	8000568 <__udivmoddi4+0x260>
 80005a8:	4608      	mov	r0, r1
 80005aa:	e7d2      	b.n	8000552 <__udivmoddi4+0x24a>
 80005ac:	4660      	mov	r0, ip
 80005ae:	e78d      	b.n	80004cc <__udivmoddi4+0x1c4>
 80005b0:	4681      	mov	r9, r0
 80005b2:	e7b9      	b.n	8000528 <__udivmoddi4+0x220>
 80005b4:	4666      	mov	r6, ip
 80005b6:	e775      	b.n	80004a4 <__udivmoddi4+0x19c>
 80005b8:	4630      	mov	r0, r6
 80005ba:	e74a      	b.n	8000452 <__udivmoddi4+0x14a>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	4439      	add	r1, r7
 80005c2:	e713      	b.n	80003ec <__udivmoddi4+0xe4>
 80005c4:	3802      	subs	r0, #2
 80005c6:	443c      	add	r4, r7
 80005c8:	e724      	b.n	8000414 <__udivmoddi4+0x10c>
 80005ca:	bf00      	nop

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005d0:	b480      	push	{r7}
 80005d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005d4:	4b3f      	ldr	r3, [pc, #252]	; (80006d4 <SystemInit+0x104>)
 80005d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005da:	4a3e      	ldr	r2, [pc, #248]	; (80006d4 <SystemInit+0x104>)
 80005dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80005e4:	4b3b      	ldr	r3, [pc, #236]	; (80006d4 <SystemInit+0x104>)
 80005e6:	691b      	ldr	r3, [r3, #16]
 80005e8:	4a3a      	ldr	r2, [pc, #232]	; (80006d4 <SystemInit+0x104>)
 80005ea:	f043 0310 	orr.w	r3, r3, #16
 80005ee:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005f0:	4b39      	ldr	r3, [pc, #228]	; (80006d8 <SystemInit+0x108>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	f003 030f 	and.w	r3, r3, #15
 80005f8:	2b06      	cmp	r3, #6
 80005fa:	d807      	bhi.n	800060c <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80005fc:	4b36      	ldr	r3, [pc, #216]	; (80006d8 <SystemInit+0x108>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	f023 030f 	bic.w	r3, r3, #15
 8000604:	4a34      	ldr	r2, [pc, #208]	; (80006d8 <SystemInit+0x108>)
 8000606:	f043 0307 	orr.w	r3, r3, #7
 800060a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800060c:	4b33      	ldr	r3, [pc, #204]	; (80006dc <SystemInit+0x10c>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	4a32      	ldr	r2, [pc, #200]	; (80006dc <SystemInit+0x10c>)
 8000612:	f043 0301 	orr.w	r3, r3, #1
 8000616:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000618:	4b30      	ldr	r3, [pc, #192]	; (80006dc <SystemInit+0x10c>)
 800061a:	2200      	movs	r2, #0
 800061c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800061e:	4b2f      	ldr	r3, [pc, #188]	; (80006dc <SystemInit+0x10c>)
 8000620:	681a      	ldr	r2, [r3, #0]
 8000622:	492e      	ldr	r1, [pc, #184]	; (80006dc <SystemInit+0x10c>)
 8000624:	4b2e      	ldr	r3, [pc, #184]	; (80006e0 <SystemInit+0x110>)
 8000626:	4013      	ands	r3, r2
 8000628:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800062a:	4b2b      	ldr	r3, [pc, #172]	; (80006d8 <SystemInit+0x108>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	f003 0308 	and.w	r3, r3, #8
 8000632:	2b00      	cmp	r3, #0
 8000634:	d007      	beq.n	8000646 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000636:	4b28      	ldr	r3, [pc, #160]	; (80006d8 <SystemInit+0x108>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	f023 030f 	bic.w	r3, r3, #15
 800063e:	4a26      	ldr	r2, [pc, #152]	; (80006d8 <SystemInit+0x108>)
 8000640:	f043 0307 	orr.w	r3, r3, #7
 8000644:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000646:	4b25      	ldr	r3, [pc, #148]	; (80006dc <SystemInit+0x10c>)
 8000648:	2200      	movs	r2, #0
 800064a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800064c:	4b23      	ldr	r3, [pc, #140]	; (80006dc <SystemInit+0x10c>)
 800064e:	2200      	movs	r2, #0
 8000650:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000652:	4b22      	ldr	r3, [pc, #136]	; (80006dc <SystemInit+0x10c>)
 8000654:	2200      	movs	r2, #0
 8000656:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000658:	4b20      	ldr	r3, [pc, #128]	; (80006dc <SystemInit+0x10c>)
 800065a:	4a22      	ldr	r2, [pc, #136]	; (80006e4 <SystemInit+0x114>)
 800065c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800065e:	4b1f      	ldr	r3, [pc, #124]	; (80006dc <SystemInit+0x10c>)
 8000660:	4a21      	ldr	r2, [pc, #132]	; (80006e8 <SystemInit+0x118>)
 8000662:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000664:	4b1d      	ldr	r3, [pc, #116]	; (80006dc <SystemInit+0x10c>)
 8000666:	4a21      	ldr	r2, [pc, #132]	; (80006ec <SystemInit+0x11c>)
 8000668:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800066a:	4b1c      	ldr	r3, [pc, #112]	; (80006dc <SystemInit+0x10c>)
 800066c:	2200      	movs	r2, #0
 800066e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000670:	4b1a      	ldr	r3, [pc, #104]	; (80006dc <SystemInit+0x10c>)
 8000672:	4a1e      	ldr	r2, [pc, #120]	; (80006ec <SystemInit+0x11c>)
 8000674:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000676:	4b19      	ldr	r3, [pc, #100]	; (80006dc <SystemInit+0x10c>)
 8000678:	2200      	movs	r2, #0
 800067a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800067c:	4b17      	ldr	r3, [pc, #92]	; (80006dc <SystemInit+0x10c>)
 800067e:	4a1b      	ldr	r2, [pc, #108]	; (80006ec <SystemInit+0x11c>)
 8000680:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000682:	4b16      	ldr	r3, [pc, #88]	; (80006dc <SystemInit+0x10c>)
 8000684:	2200      	movs	r2, #0
 8000686:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000688:	4b14      	ldr	r3, [pc, #80]	; (80006dc <SystemInit+0x10c>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	4a13      	ldr	r2, [pc, #76]	; (80006dc <SystemInit+0x10c>)
 800068e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000692:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000694:	4b11      	ldr	r3, [pc, #68]	; (80006dc <SystemInit+0x10c>)
 8000696:	2200      	movs	r2, #0
 8000698:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800069a:	4b15      	ldr	r3, [pc, #84]	; (80006f0 <SystemInit+0x120>)
 800069c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800069e:	4a14      	ldr	r2, [pc, #80]	; (80006f0 <SystemInit+0x120>)
 80006a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006a4:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80006a6:	4b13      	ldr	r3, [pc, #76]	; (80006f4 <SystemInit+0x124>)
 80006a8:	681a      	ldr	r2, [r3, #0]
 80006aa:	4b13      	ldr	r3, [pc, #76]	; (80006f8 <SystemInit+0x128>)
 80006ac:	4013      	ands	r3, r2
 80006ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80006b2:	d202      	bcs.n	80006ba <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006b4:	4b11      	ldr	r3, [pc, #68]	; (80006fc <SystemInit+0x12c>)
 80006b6:	2201      	movs	r2, #1
 80006b8:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006ba:	4b11      	ldr	r3, [pc, #68]	; (8000700 <SystemInit+0x130>)
 80006bc:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80006c0:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 80006c2:	4b04      	ldr	r3, [pc, #16]	; (80006d4 <SystemInit+0x104>)
 80006c4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80006c8:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 80006ca:	bf00      	nop
 80006cc:	46bd      	mov	sp, r7
 80006ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d2:	4770      	bx	lr
 80006d4:	e000ed00 	.word	0xe000ed00
 80006d8:	52002000 	.word	0x52002000
 80006dc:	58024400 	.word	0x58024400
 80006e0:	eaf6ed7f 	.word	0xeaf6ed7f
 80006e4:	02020200 	.word	0x02020200
 80006e8:	01ff0000 	.word	0x01ff0000
 80006ec:	01010280 	.word	0x01010280
 80006f0:	580000c0 	.word	0x580000c0
 80006f4:	5c001000 	.word	0x5c001000
 80006f8:	ffff0000 	.word	0xffff0000
 80006fc:	51008108 	.word	0x51008108
 8000700:	52004000 	.word	0x52004000

08000704 <matrix_init>:


static const float coeff[TAPS+1] = {0.000000e+00,-8.592732e-05,-3.193261e-04,-6.232598e-04,-8.840666e-04,-9.854609e-04,-8.521635e-04,-4.894706e-04,3.102859e-13,4.383326e-04,6.357459e-04,4.777282e-04,-6.137172e-13,-5.894618e-04,-9.668234e-04,-8.197004e-04,6.015608e-13,1.367077e-03,2.881604e-03,3.999644e-03,4.260699e-03,3.521501e-03,2.084361e-03,6.375122e-04,0.000000e+00,7.562056e-04,2.933325e-03,5.881905e-03,8.451249e-03,9.428289e-03,8.079900e-03,4.564261e-03,-1.523545e-12,-3.893430e-03,-5.487076e-03,-4.001685e-03,2.494134e-12,4.651880e-03,7.417786e-03,6.125483e-03,-1.994844e-12,-9.763350e-03,-2.020926e-02,-2.764194e-02,-2.913081e-02,-2.392262e-02,-1.413737e-02,-4.340795e-03,-3.155686e-18,-5.291800e-03,-2.106097e-02,-4.376907e-02,-6.598798e-02,-7.845736e-02,-7.312953e-02,-4.619562e-02,2.564661e-12,5.693579e-02,1.119381e-01,1.517002e-01,1.661947e-01,1.517002e-01,1.119381e-01,5.693579e-02,2.564661e-12,-4.619562e-02,-7.312953e-02,-7.845736e-02,-6.598798e-02,-4.376907e-02,-2.106097e-02,-5.291800e-03,-3.155686e-18,-4.340795e-03,-1.413737e-02,-2.392262e-02,-2.913081e-02,-2.764194e-02,-2.020926e-02,-9.763350e-03,-1.994844e-12,6.125483e-03,7.417786e-03,4.651880e-03,2.494134e-12,-4.001685e-03,-5.487076e-03,-3.893430e-03,-1.523545e-12,4.564261e-03,8.079900e-03,9.428289e-03,8.451249e-03,5.881905e-03,2.933325e-03,7.562056e-04,0.000000e+00,6.375122e-04,2.084361e-03,3.521501e-03,4.260699e-03,3.999644e-03,2.881604e-03,1.367077e-03,6.015608e-13,-8.197004e-04,-9.668234e-04,-5.894618e-04,-6.137172e-13,4.777282e-04,6.357459e-04,4.383326e-04,3.102859e-13,-4.894706e-04,-8.521635e-04,-9.854609e-04,-8.840666e-04,-6.232598e-04,-3.193261e-04,-8.592732e-05,0.000000e+00};


void matrix_init(uint32_t numRow, uint32_t numCol, uint16_t* matrix, arm_matrix_instance_q15* instance, uint32_t offset){
 8000704:	b590      	push	{r4, r7, lr}
 8000706:	b087      	sub	sp, #28
 8000708:	af00      	add	r7, sp, #0
 800070a:	60f8      	str	r0, [r7, #12]
 800070c:	60b9      	str	r1, [r7, #8]
 800070e:	607a      	str	r2, [r7, #4]
 8000710:	603b      	str	r3, [r7, #0]

	for(uint32_t i = 0; i < 2; i++){
 8000712:	2300      	movs	r3, #0
 8000714:	617b      	str	r3, [r7, #20]
 8000716:	e014      	b.n	8000742 <matrix_init+0x3e>
		arm_mat_init_q15(&instance[i], numRow, numCol, (q15_t*)&matrix[offset*i]);
 8000718:	697b      	ldr	r3, [r7, #20]
 800071a:	00db      	lsls	r3, r3, #3
 800071c:	683a      	ldr	r2, [r7, #0]
 800071e:	18d0      	adds	r0, r2, r3
 8000720:	68fb      	ldr	r3, [r7, #12]
 8000722:	b299      	uxth	r1, r3
 8000724:	68bb      	ldr	r3, [r7, #8]
 8000726:	b29c      	uxth	r4, r3
 8000728:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800072a:	697a      	ldr	r2, [r7, #20]
 800072c:	fb02 f303 	mul.w	r3, r2, r3
 8000730:	005b      	lsls	r3, r3, #1
 8000732:	687a      	ldr	r2, [r7, #4]
 8000734:	4413      	add	r3, r2
 8000736:	4622      	mov	r2, r4
 8000738:	f00a f951 	bl	800a9de <arm_mat_init_q15>
	for(uint32_t i = 0; i < 2; i++){
 800073c:	697b      	ldr	r3, [r7, #20]
 800073e:	3301      	adds	r3, #1
 8000740:	617b      	str	r3, [r7, #20]
 8000742:	697b      	ldr	r3, [r7, #20]
 8000744:	2b01      	cmp	r3, #1
 8000746:	d9e7      	bls.n	8000718 <matrix_init+0x14>
	}
}
 8000748:	bf00      	nop
 800074a:	bf00      	nop
 800074c:	371c      	adds	r7, #28
 800074e:	46bd      	mov	sp, r7
 8000750:	bd90      	pop	{r4, r7, pc}
	...

08000754 <FIR_Filter_Init>:

void FIR_Filter_Init(dsp_buffer_t* buff, uint32_t channelNumber){
 8000754:	b580      	push	{r7, lr}
 8000756:	b086      	sub	sp, #24
 8000758:	af02      	add	r7, sp, #8
 800075a:	6078      	str	r0, [r7, #4]
 800075c:	6039      	str	r1, [r7, #0]
	for(uint32_t i = 0; i < channelNumber; i++){
 800075e:	2300      	movs	r3, #0
 8000760:	60fb      	str	r3, [r7, #12]
 8000762:	e01a      	b.n	800079a <FIR_Filter_Init+0x46>
		arm_fir_init_f32(buff[i].lpFilter_inst, TAPS, &coeff[0], buff[i].state, BLOCK_SIZE);
 8000764:	68fa      	ldr	r2, [r7, #12]
 8000766:	4613      	mov	r3, r2
 8000768:	011b      	lsls	r3, r3, #4
 800076a:	4413      	add	r3, r2
 800076c:	015b      	lsls	r3, r3, #5
 800076e:	461a      	mov	r2, r3
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	4413      	add	r3, r2
 8000774:	6818      	ldr	r0, [r3, #0]
 8000776:	68fa      	ldr	r2, [r7, #12]
 8000778:	4613      	mov	r3, r2
 800077a:	011b      	lsls	r3, r3, #4
 800077c:	4413      	add	r3, r2
 800077e:	015b      	lsls	r3, r3, #5
 8000780:	461a      	mov	r2, r3
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	4413      	add	r3, r2
 8000786:	3304      	adds	r3, #4
 8000788:	2210      	movs	r2, #16
 800078a:	9200      	str	r2, [sp, #0]
 800078c:	4a07      	ldr	r2, [pc, #28]	; (80007ac <FIR_Filter_Init+0x58>)
 800078e:	2178      	movs	r1, #120	; 0x78
 8000790:	f00a f906 	bl	800a9a0 <arm_fir_init_f32>
	for(uint32_t i = 0; i < channelNumber; i++){
 8000794:	68fb      	ldr	r3, [r7, #12]
 8000796:	3301      	adds	r3, #1
 8000798:	60fb      	str	r3, [r7, #12]
 800079a:	68fa      	ldr	r2, [r7, #12]
 800079c:	683b      	ldr	r3, [r7, #0]
 800079e:	429a      	cmp	r2, r3
 80007a0:	d3e0      	bcc.n	8000764 <FIR_Filter_Init+0x10>
	}
}
 80007a2:	bf00      	nop
 80007a4:	bf00      	nop
 80007a6:	3710      	adds	r7, #16
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	0800cc70 	.word	0x0800cc70

080007b0 <pdm_to_pcm_init>:
 */


#include "pdm_to_pcm.h"

void pdm_to_pcm_init(PDM_Filter_Handler_t* PDM_FilterHandler, PDM_Filter_Config_t* PDM_FilterConfig, uint32_t channelNumber){
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b086      	sub	sp, #24
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	60f8      	str	r0, [r7, #12]
 80007b8:	60b9      	str	r1, [r7, #8]
 80007ba:	607a      	str	r2, [r7, #4]

	  for(uint32_t index = 0; index < channelNumber; index++)
 80007bc:	2300      	movs	r3, #0
 80007be:	617b      	str	r3, [r7, #20]
 80007c0:	e064      	b.n	800088c <pdm_to_pcm_init+0xdc>
	  {
	    /* Init PDM filters */
	    PDM_FilterHandler[index].bit_order  = PDM_FILTER_BIT_ORDER_MSB;
 80007c2:	697b      	ldr	r3, [r7, #20]
 80007c4:	224c      	movs	r2, #76	; 0x4c
 80007c6:	fb02 f303 	mul.w	r3, r2, r3
 80007ca:	68fa      	ldr	r2, [r7, #12]
 80007cc:	4413      	add	r3, r2
 80007ce:	2201      	movs	r2, #1
 80007d0:	801a      	strh	r2, [r3, #0]
	    PDM_FilterHandler[index].endianness = PDM_FILTER_ENDIANNESS_LE;
 80007d2:	697b      	ldr	r3, [r7, #20]
 80007d4:	224c      	movs	r2, #76	; 0x4c
 80007d6:	fb02 f303 	mul.w	r3, r2, r3
 80007da:	68fa      	ldr	r2, [r7, #12]
 80007dc:	4413      	add	r3, r2
 80007de:	2200      	movs	r2, #0
 80007e0:	805a      	strh	r2, [r3, #2]
	    PDM_FilterHandler[index].high_pass_tap = HIGH_PASS;
 80007e2:	697b      	ldr	r3, [r7, #20]
 80007e4:	224c      	movs	r2, #76	; 0x4c
 80007e6:	fb02 f303 	mul.w	r3, r2, r3
 80007ea:	68fa      	ldr	r2, [r7, #12]
 80007ec:	4413      	add	r3, r2
 80007ee:	4a2c      	ldr	r2, [pc, #176]	; (80008a0 <pdm_to_pcm_init+0xf0>)
 80007f0:	605a      	str	r2, [r3, #4]
	    PDM_FilterHandler[index].out_ptr_channels = 1;
 80007f2:	697b      	ldr	r3, [r7, #20]
 80007f4:	224c      	movs	r2, #76	; 0x4c
 80007f6:	fb02 f303 	mul.w	r3, r2, r3
 80007fa:	68fa      	ldr	r2, [r7, #12]
 80007fc:	4413      	add	r3, r2
 80007fe:	2201      	movs	r2, #1
 8000800:	815a      	strh	r2, [r3, #10]
	    PDM_FilterHandler[index].in_ptr_channels  = channelNumber;
 8000802:	697b      	ldr	r3, [r7, #20]
 8000804:	224c      	movs	r2, #76	; 0x4c
 8000806:	fb02 f303 	mul.w	r3, r2, r3
 800080a:	68fa      	ldr	r2, [r7, #12]
 800080c:	4413      	add	r3, r2
 800080e:	687a      	ldr	r2, [r7, #4]
 8000810:	b292      	uxth	r2, r2
 8000812:	811a      	strh	r2, [r3, #8]
	    PDM_Filter_Init((PDM_Filter_Handler_t *)(&PDM_FilterHandler[index]));
 8000814:	697b      	ldr	r3, [r7, #20]
 8000816:	224c      	movs	r2, #76	; 0x4c
 8000818:	fb02 f303 	mul.w	r3, r2, r3
 800081c:	68fa      	ldr	r2, [r7, #12]
 800081e:	4413      	add	r3, r2
 8000820:	4618      	mov	r0, r3
 8000822:	f00b fe19 	bl	800c458 <PDM_Filter_Init>

	    /* Configure PDM filters */
	    PDM_FilterConfig[index].output_samples_number = PCM_CHUNK_SIZE;
 8000826:	697a      	ldr	r2, [r7, #20]
 8000828:	4613      	mov	r3, r2
 800082a:	005b      	lsls	r3, r3, #1
 800082c:	4413      	add	r3, r2
 800082e:	005b      	lsls	r3, r3, #1
 8000830:	461a      	mov	r2, r3
 8000832:	68bb      	ldr	r3, [r7, #8]
 8000834:	4413      	add	r3, r2
 8000836:	f44f 7280 	mov.w	r2, #256	; 0x100
 800083a:	805a      	strh	r2, [r3, #2]
	    PDM_FilterConfig[index].mic_gain = MIC_GAIN;
 800083c:	697a      	ldr	r2, [r7, #20]
 800083e:	4613      	mov	r3, r2
 8000840:	005b      	lsls	r3, r3, #1
 8000842:	4413      	add	r3, r2
 8000844:	005b      	lsls	r3, r3, #1
 8000846:	461a      	mov	r2, r3
 8000848:	68bb      	ldr	r3, [r7, #8]
 800084a:	4413      	add	r3, r2
 800084c:	2208      	movs	r2, #8
 800084e:	809a      	strh	r2, [r3, #4]
	    PDM_FilterConfig[index].decimation_factor = DECIMATION;
 8000850:	697a      	ldr	r2, [r7, #20]
 8000852:	4613      	mov	r3, r2
 8000854:	005b      	lsls	r3, r3, #1
 8000856:	4413      	add	r3, r2
 8000858:	005b      	lsls	r3, r3, #1
 800085a:	461a      	mov	r2, r3
 800085c:	68bb      	ldr	r3, [r7, #8]
 800085e:	4413      	add	r3, r2
 8000860:	2202      	movs	r2, #2
 8000862:	801a      	strh	r2, [r3, #0]
	    PDM_Filter_setConfig((PDM_Filter_Handler_t*)&PDM_FilterHandler[index], (PDM_Filter_Config_t*)&PDM_FilterConfig[index]);
 8000864:	697b      	ldr	r3, [r7, #20]
 8000866:	224c      	movs	r2, #76	; 0x4c
 8000868:	fb02 f303 	mul.w	r3, r2, r3
 800086c:	68fa      	ldr	r2, [r7, #12]
 800086e:	18d0      	adds	r0, r2, r3
 8000870:	697a      	ldr	r2, [r7, #20]
 8000872:	4613      	mov	r3, r2
 8000874:	005b      	lsls	r3, r3, #1
 8000876:	4413      	add	r3, r2
 8000878:	005b      	lsls	r3, r3, #1
 800087a:	461a      	mov	r2, r3
 800087c:	68bb      	ldr	r3, [r7, #8]
 800087e:	4413      	add	r3, r2
 8000880:	4619      	mov	r1, r3
 8000882:	f00b feb9 	bl	800c5f8 <PDM_Filter_setConfig>
	  for(uint32_t index = 0; index < channelNumber; index++)
 8000886:	697b      	ldr	r3, [r7, #20]
 8000888:	3301      	adds	r3, #1
 800088a:	617b      	str	r3, [r7, #20]
 800088c:	697a      	ldr	r2, [r7, #20]
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	429a      	cmp	r2, r3
 8000892:	d396      	bcc.n	80007c2 <pdm_to_pcm_init+0x12>
	  }
}
 8000894:	bf00      	nop
 8000896:	bf00      	nop
 8000898:	3718      	adds	r7, #24
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	7f5c28f4 	.word	0x7f5c28f4

080008a4 <pdm_to_pcm>:

void pdm_to_pcm(PDM_Filter_Handler_t* PDM_FilterHandler, uint8_t *pdm, uint16_t (*pcm)[PCM_CHUNK_SIZE],  uint32_t channelNumber){
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b08a      	sub	sp, #40	; 0x28
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	60f8      	str	r0, [r7, #12]
 80008ac:	60b9      	str	r1, [r7, #8]
 80008ae:	607a      	str	r2, [r7, #4]
 80008b0:	603b      	str	r3, [r7, #0]
 80008b2:	68bb      	ldr	r3, [r7, #8]
 80008b4:	623b      	str	r3, [r7, #32]
 80008b6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008ba:	61fb      	str	r3, [r7, #28]
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_InvalidateDCache_by_Addr (void *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 80008bc:	69fb      	ldr	r3, [r7, #28]
 80008be:	2b00      	cmp	r3, #0
 80008c0:	dd1d      	ble.n	80008fe <pdm_to_pcm+0x5a>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 80008c2:	6a3b      	ldr	r3, [r7, #32]
 80008c4:	f003 021f 	and.w	r2, r3, #31
 80008c8:	69fb      	ldr	r3, [r7, #28]
 80008ca:	4413      	add	r3, r2
 80008cc:	61bb      	str	r3, [r7, #24]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 80008ce:	6a3b      	ldr	r3, [r7, #32]
 80008d0:	617b      	str	r3, [r7, #20]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80008d2:	f3bf 8f4f 	dsb	sy
}
 80008d6:	bf00      	nop
    
      __DSB();

      do {
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 80008d8:	4a19      	ldr	r2, [pc, #100]	; (8000940 <pdm_to_pcm+0x9c>)
 80008da:	697b      	ldr	r3, [r7, #20]
 80008dc:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 80008e0:	697b      	ldr	r3, [r7, #20]
 80008e2:	3320      	adds	r3, #32
 80008e4:	617b      	str	r3, [r7, #20]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 80008e6:	69bb      	ldr	r3, [r7, #24]
 80008e8:	3b20      	subs	r3, #32
 80008ea:	61bb      	str	r3, [r7, #24]
      } while ( op_size > 0 );
 80008ec:	69bb      	ldr	r3, [r7, #24]
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	dcf2      	bgt.n	80008d8 <pdm_to_pcm+0x34>
  __ASM volatile ("dsb 0xF":::"memory");
 80008f2:	f3bf 8f4f 	dsb	sy
}
 80008f6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80008f8:	f3bf 8f6f 	isb	sy
}
 80008fc:	bf00      	nop

      __DSB();
      __ISB();
    }
  #endif
}
 80008fe:	bf00      	nop

	SCB_InvalidateDCache_by_Addr((uint32_t*)&pdm[0], (uint32_t)((float)BUFFER_SIZE*((float)CHANNEL_NUMBER/2.0)));

	for(uint32_t i = 0; i < channelNumber; i++){
 8000900:	2300      	movs	r3, #0
 8000902:	627b      	str	r3, [r7, #36]	; 0x24
 8000904:	e013      	b.n	800092e <pdm_to_pcm+0x8a>
		PDM_Filter(&pdm[i], &pcm[i][0], &PDM_FilterHandler[i]);
 8000906:	68ba      	ldr	r2, [r7, #8]
 8000908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800090a:	18d0      	adds	r0, r2, r3
 800090c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800090e:	025b      	lsls	r3, r3, #9
 8000910:	687a      	ldr	r2, [r7, #4]
 8000912:	4413      	add	r3, r2
 8000914:	4619      	mov	r1, r3
 8000916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000918:	224c      	movs	r2, #76	; 0x4c
 800091a:	fb02 f303 	mul.w	r3, r2, r3
 800091e:	68fa      	ldr	r2, [r7, #12]
 8000920:	4413      	add	r3, r2
 8000922:	461a      	mov	r2, r3
 8000924:	f00b ff62 	bl	800c7ec <PDM_Filter>
	for(uint32_t i = 0; i < channelNumber; i++){
 8000928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800092a:	3301      	adds	r3, #1
 800092c:	627b      	str	r3, [r7, #36]	; 0x24
 800092e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000930:	683b      	ldr	r3, [r7, #0]
 8000932:	429a      	cmp	r2, r3
 8000934:	d3e7      	bcc.n	8000906 <pdm_to_pcm+0x62>
	}


}
 8000936:	bf00      	nop
 8000938:	bf00      	nop
 800093a:	3728      	adds	r7, #40	; 0x28
 800093c:	46bd      	mov	sp, r7
 800093e:	bd80      	pop	{r7, pc}
 8000940:	e000ed00 	.word	0xe000ed00

08000944 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b088      	sub	sp, #32
 8000948:	af02      	add	r7, sp, #8
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800094a:	4b88      	ldr	r3, [pc, #544]	; (8000b6c <main+0x228>)
 800094c:	695b      	ldr	r3, [r3, #20]
 800094e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000952:	2b00      	cmp	r3, #0
 8000954:	d11b      	bne.n	800098e <main+0x4a>
  __ASM volatile ("dsb 0xF":::"memory");
 8000956:	f3bf 8f4f 	dsb	sy
}
 800095a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800095c:	f3bf 8f6f 	isb	sy
}
 8000960:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000962:	4b82      	ldr	r3, [pc, #520]	; (8000b6c <main+0x228>)
 8000964:	2200      	movs	r2, #0
 8000966:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800096a:	f3bf 8f4f 	dsb	sy
}
 800096e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000970:	f3bf 8f6f 	isb	sy
}
 8000974:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000976:	4b7d      	ldr	r3, [pc, #500]	; (8000b6c <main+0x228>)
 8000978:	695b      	ldr	r3, [r3, #20]
 800097a:	4a7c      	ldr	r2, [pc, #496]	; (8000b6c <main+0x228>)
 800097c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000980:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000982:	f3bf 8f4f 	dsb	sy
}
 8000986:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000988:	f3bf 8f6f 	isb	sy
}
 800098c:	e000      	b.n	8000990 <main+0x4c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800098e:	bf00      	nop
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000990:	4b76      	ldr	r3, [pc, #472]	; (8000b6c <main+0x228>)
 8000992:	695b      	ldr	r3, [r3, #20]
 8000994:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000998:	2b00      	cmp	r3, #0
 800099a:	d138      	bne.n	8000a0e <main+0xca>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 800099c:	4b73      	ldr	r3, [pc, #460]	; (8000b6c <main+0x228>)
 800099e:	2200      	movs	r2, #0
 80009a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80009a4:	f3bf 8f4f 	dsb	sy
}
 80009a8:	bf00      	nop
    ccsidr = SCB->CCSIDR;
 80009aa:	4b70      	ldr	r3, [pc, #448]	; (8000b6c <main+0x228>)
 80009ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80009b0:	613b      	str	r3, [r7, #16]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80009b2:	693b      	ldr	r3, [r7, #16]
 80009b4:	0b5b      	lsrs	r3, r3, #13
 80009b6:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80009ba:	60fb      	str	r3, [r7, #12]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80009bc:	693b      	ldr	r3, [r7, #16]
 80009be:	08db      	lsrs	r3, r3, #3
 80009c0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80009c4:	60bb      	str	r3, [r7, #8]
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80009c6:	68fb      	ldr	r3, [r7, #12]
 80009c8:	015a      	lsls	r2, r3, #5
 80009ca:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80009ce:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80009d0:	68ba      	ldr	r2, [r7, #8]
 80009d2:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80009d4:	4965      	ldr	r1, [pc, #404]	; (8000b6c <main+0x228>)
 80009d6:	4313      	orrs	r3, r2
 80009d8:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
      } while (ways-- != 0U);
 80009dc:	68bb      	ldr	r3, [r7, #8]
 80009de:	1e5a      	subs	r2, r3, #1
 80009e0:	60ba      	str	r2, [r7, #8]
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d1ef      	bne.n	80009c6 <main+0x82>
    } while(sets-- != 0U);
 80009e6:	68fb      	ldr	r3, [r7, #12]
 80009e8:	1e5a      	subs	r2, r3, #1
 80009ea:	60fa      	str	r2, [r7, #12]
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d1e5      	bne.n	80009bc <main+0x78>
  __ASM volatile ("dsb 0xF":::"memory");
 80009f0:	f3bf 8f4f 	dsb	sy
}
 80009f4:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80009f6:	4b5d      	ldr	r3, [pc, #372]	; (8000b6c <main+0x228>)
 80009f8:	695b      	ldr	r3, [r3, #20]
 80009fa:	4a5c      	ldr	r2, [pc, #368]	; (8000b6c <main+0x228>)
 80009fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000a00:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000a02:	f3bf 8f4f 	dsb	sy
}
 8000a06:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000a08:	f3bf 8f6f 	isb	sy
}
 8000a0c:	e000      	b.n	8000a10 <main+0xcc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000a0e:	bf00      	nop

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a10:	f000 fdc8 	bl	80015a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a14:	f000 f8c8 	bl	8000ba8 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000a18:	4b55      	ldr	r3, [pc, #340]	; (8000b70 <main+0x22c>)
 8000a1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a1e:	4a54      	ldr	r2, [pc, #336]	; (8000b70 <main+0x22c>)
 8000a20:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000a24:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a28:	4b51      	ldr	r3, [pc, #324]	; (8000b70 <main+0x22c>)
 8000a2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000a32:	607b      	str	r3, [r7, #4]
 8000a34:	687b      	ldr	r3, [r7, #4]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000a36:	2000      	movs	r0, #0
 8000a38:	f004 f842 	bl	8004ac0 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000a3c:	2100      	movs	r1, #0
 8000a3e:	2000      	movs	r0, #0
 8000a40:	f004 f858 	bl	8004af4 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000a44:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000a48:	617b      	str	r3, [r7, #20]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000a4a:	bf00      	nop
 8000a4c:	4b48      	ldr	r3, [pc, #288]	; (8000b70 <main+0x22c>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d104      	bne.n	8000a62 <main+0x11e>
 8000a58:	697b      	ldr	r3, [r7, #20]
 8000a5a:	1e5a      	subs	r2, r3, #1
 8000a5c:	617a      	str	r2, [r7, #20]
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	dcf4      	bgt.n	8000a4c <main+0x108>
if ( timeout < 0 )
 8000a62:	697b      	ldr	r3, [r7, #20]
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	da01      	bge.n	8000a6c <main+0x128>
{
Error_Handler();
 8000a68:	f000 fb36 	bl	80010d8 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a6c:	f000 fa7e 	bl	8000f6c <MX_GPIO_Init>
  MX_DMA_Init();
 8000a70:	f000 fa54 	bl	8000f1c <MX_DMA_Init>
  MX_USART3_UART_Init();
 8000a74:	f000 fa02 	bl	8000e7c <MX_USART3_UART_Init>
  MX_CRC_Init();
 8000a78:	f000 f91a 	bl	8000cb0 <MX_CRC_Init>
  MX_SAI1_Init();
 8000a7c:	f000 f942 	bl	8000d04 <MX_SAI1_Init>
  MX_TIM1_Init();
 8000a80:	f000 f9a2 	bl	8000dc8 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  matrix_init(CHANNEL_NUMBER, PCM_CHUNK_SIZE, (uint16_t*)&buffer->pcmBuffer[0][0], &pcmMatrix[0], PCM_CHUNK_SIZE*CHANNEL_NUMBER);
 8000a84:	4b3b      	ldr	r3, [pc, #236]	; (8000b74 <main+0x230>)
 8000a86:	f503 4280 	add.w	r2, r3, #16384	; 0x4000
 8000a8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a8e:	9300      	str	r3, [sp, #0]
 8000a90:	4b39      	ldr	r3, [pc, #228]	; (8000b78 <main+0x234>)
 8000a92:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a96:	2004      	movs	r0, #4
 8000a98:	f7ff fe34 	bl	8000704 <matrix_init>
  matrix_init(PCM_CHUNK_SIZE, CHANNEL_NUMBER, (uint16_t*)&buffer->pcmBuffer_Trans[0][0], &pcmMatrix_Trans[0], PCM_CHUNK_SIZE*CHANNEL_NUMBER);
 8000a9c:	4b35      	ldr	r3, [pc, #212]	; (8000b74 <main+0x230>)
 8000a9e:	f503 42a0 	add.w	r2, r3, #20480	; 0x5000
 8000aa2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000aa6:	9300      	str	r3, [sp, #0]
 8000aa8:	4b34      	ldr	r3, [pc, #208]	; (8000b7c <main+0x238>)
 8000aaa:	2104      	movs	r1, #4
 8000aac:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000ab0:	f7ff fe28 	bl	8000704 <matrix_init>

  FIR_Filter_Init(&dsp[0], CHANNEL_NUMBER);
 8000ab4:	2104      	movs	r1, #4
 8000ab6:	4832      	ldr	r0, [pc, #200]	; (8000b80 <main+0x23c>)
 8000ab8:	f7ff fe4c 	bl	8000754 <FIR_Filter_Init>

  pdm_to_pcm_init((PDM_Filter_Handler_t*)&PDM_FilterHandler[0], (PDM_Filter_Config_t*)&PDM_FilterConfig[0], CHANNEL_NUMBER);
 8000abc:	2204      	movs	r2, #4
 8000abe:	4931      	ldr	r1, [pc, #196]	; (8000b84 <main+0x240>)
 8000ac0:	4831      	ldr	r0, [pc, #196]	; (8000b88 <main+0x244>)
 8000ac2:	f7ff fe75 	bl	80007b0 <pdm_to_pcm_init>

  timFlag = NONE;
 8000ac6:	4b31      	ldr	r3, [pc, #196]	; (8000b8c <main+0x248>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  HAL_SAI_Receive_DMA(&hsai_BlockA1, (uint8_t*)&buffer->pdmBuffer[0], BUFFER_SIZE);
 8000acc:	4b29      	ldr	r3, [pc, #164]	; (8000b74 <main+0x230>)
 8000ace:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000ad2:	4619      	mov	r1, r3
 8000ad4:	482e      	ldr	r0, [pc, #184]	; (8000b90 <main+0x24c>)
 8000ad6:	f007 fc3d 	bl	8008354 <HAL_SAI_Receive_DMA>

  HAL_TIM_Base_Start_IT(&htim1);
 8000ada:	482e      	ldr	r0, [pc, #184]	; (8000b94 <main+0x250>)
 8000adc:	f007 fe0e 	bl	80086fc <HAL_TIM_Base_Start_IT>

  while (timFlag != DONE){
 8000ae0:	e03e      	b.n	8000b60 <main+0x21c>

	  //Wait for Half of the buffer to be filled
	  while(dmaFlag != HALF){}
 8000ae2:	bf00      	nop
 8000ae4:	4b2c      	ldr	r3, [pc, #176]	; (8000b98 <main+0x254>)
 8000ae6:	781b      	ldrb	r3, [r3, #0]
 8000ae8:	b2db      	uxtb	r3, r3
 8000aea:	2b04      	cmp	r3, #4
 8000aec:	d1fa      	bne.n	8000ae4 <main+0x1a0>
	  //Reset Flag
	  dmaFlag = NONE;
 8000aee:	4b2a      	ldr	r3, [pc, #168]	; (8000b98 <main+0x254>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	701a      	strb	r2, [r3, #0]
	  //Filter PDM to PCM
	  pdm_to_pcm(&PDM_FilterHandler[0],	(uint8_t*)&buffer->pdmBuffer[0], (uint16_t(*)[PCM_CHUNK_SIZE])&buffer->pcmBuffer[0][0], CHANNEL_NUMBER);
 8000af4:	4b1f      	ldr	r3, [pc, #124]	; (8000b74 <main+0x230>)
 8000af6:	4619      	mov	r1, r3
 8000af8:	4b1e      	ldr	r3, [pc, #120]	; (8000b74 <main+0x230>)
 8000afa:	f503 4280 	add.w	r2, r3, #16384	; 0x4000
 8000afe:	2304      	movs	r3, #4
 8000b00:	4821      	ldr	r0, [pc, #132]	; (8000b88 <main+0x244>)
 8000b02:	f7ff fecf 	bl	80008a4 <pdm_to_pcm>
	  //FIR Filter
	//  FIR_Filter(&dsp[0], (uint16_t(*)[PCM_CHUNK_SIZE])&buffer->pcmBuffer[0][0], (uint16_t(*)[PCM_CHUNK_SIZE])&buffer->pcmBuffer[0][0], CHANNEL_NUMBER);
	  //Transpose
	  Transpose_Clean(&pcmMatrix[0], &pcmMatrix_Trans[0]);
 8000b06:	491d      	ldr	r1, [pc, #116]	; (8000b7c <main+0x238>)
 8000b08:	481b      	ldr	r0, [pc, #108]	; (8000b78 <main+0x234>)
 8000b0a:	f000 fa77 	bl	8000ffc <Transpose_Clean>
	  //Transmit PCM
	  HAL_UART_Transmit_DMA(&huart3, (uint8_t*)&buffer->pcmBuffer_Trans[0][0], 2*PCM_CHUNK_SIZE*CHANNEL_NUMBER);
 8000b0e:	4b19      	ldr	r3, [pc, #100]	; (8000b74 <main+0x230>)
 8000b10:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
 8000b14:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000b18:	4619      	mov	r1, r3
 8000b1a:	4820      	ldr	r0, [pc, #128]	; (8000b9c <main+0x258>)
 8000b1c:	f008 faf6 	bl	800910c <HAL_UART_Transmit_DMA>

	  //Wait for Half of the buffer to be filled
	  while(dmaFlag != FULL){}
 8000b20:	bf00      	nop
 8000b22:	4b1d      	ldr	r3, [pc, #116]	; (8000b98 <main+0x254>)
 8000b24:	781b      	ldrb	r3, [r3, #0]
 8000b26:	b2db      	uxtb	r3, r3
 8000b28:	2b05      	cmp	r3, #5
 8000b2a:	d1fa      	bne.n	8000b22 <main+0x1de>
	  //Reset Flag
	  dmaFlag = NONE;
 8000b2c:	4b1a      	ldr	r3, [pc, #104]	; (8000b98 <main+0x254>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	701a      	strb	r2, [r3, #0]
	  //Filter PDM to PCM
	  pdm_to_pcm(&PDM_FilterHandler[0],	(uint8_t*)&buffer->pdmBuffer[BUFFER_SIZE/2], (uint16_t(*)[PCM_CHUNK_SIZE])&buffer->pcmBuffer[CHANNEL_NUMBER][0], CHANNEL_NUMBER);
 8000b32:	4b10      	ldr	r3, [pc, #64]	; (8000b74 <main+0x230>)
 8000b34:	f503 5100 	add.w	r1, r3, #8192	; 0x2000
 8000b38:	4b0e      	ldr	r3, [pc, #56]	; (8000b74 <main+0x230>)
 8000b3a:	f503 4290 	add.w	r2, r3, #18432	; 0x4800
 8000b3e:	2304      	movs	r3, #4
 8000b40:	4811      	ldr	r0, [pc, #68]	; (8000b88 <main+0x244>)
 8000b42:	f7ff feaf 	bl	80008a4 <pdm_to_pcm>
	  //FIR Filter
	 // FIR_Filter(&dsp[0], (uint16_t(*)[PCM_CHUNK_SIZE])&buffer->pcmBuffer[CHANNEL_NUMBER][0], (uint16_t(*)[PCM_CHUNK_SIZE])&buffer->pcmBuffer[CHANNEL_NUMBER][0], CHANNEL_NUMBER);
	  //Transpose
	  Transpose_Clean(&pcmMatrix[1], &pcmMatrix_Trans[1]);
 8000b46:	4916      	ldr	r1, [pc, #88]	; (8000ba0 <main+0x25c>)
 8000b48:	4816      	ldr	r0, [pc, #88]	; (8000ba4 <main+0x260>)
 8000b4a:	f000 fa57 	bl	8000ffc <Transpose_Clean>
	  //Transmit PCM
	  HAL_UART_Transmit_DMA(&huart3, (uint8_t*)&buffer->pcmBuffer_Trans[PCM_CHUNK_SIZE][0], 2*PCM_CHUNK_SIZE*CHANNEL_NUMBER);
 8000b4e:	4b09      	ldr	r3, [pc, #36]	; (8000b74 <main+0x230>)
 8000b50:	f503 43b0 	add.w	r3, r3, #22528	; 0x5800
 8000b54:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000b58:	4619      	mov	r1, r3
 8000b5a:	4810      	ldr	r0, [pc, #64]	; (8000b9c <main+0x258>)
 8000b5c:	f008 fad6 	bl	800910c <HAL_UART_Transmit_DMA>
  while (timFlag != DONE){
 8000b60:	4b0a      	ldr	r3, [pc, #40]	; (8000b8c <main+0x248>)
 8000b62:	781b      	ldrb	r3, [r3, #0]
 8000b64:	b2db      	uxtb	r3, r3
 8000b66:	2b03      	cmp	r3, #3
 8000b68:	d1bb      	bne.n	8000ae2 <main+0x19e>

    /* USER CODE BEGIN 3 */
  }


  while(1){}
 8000b6a:	e7fe      	b.n	8000b6a <main+0x226>
 8000b6c:	e000ed00 	.word	0xe000ed00
 8000b70:	58024400 	.word	0x58024400
 8000b74:	30040000 	.word	0x30040000
 8000b78:	24000494 	.word	0x24000494
 8000b7c:	240004a4 	.word	0x240004a4
 8000b80:	240004b4 	.word	0x240004b4
 8000b84:	24000d38 	.word	0x24000d38
 8000b88:	24000d50 	.word	0x24000d50
 8000b8c:	24000492 	.word	0x24000492
 8000b90:	24001070 	.word	0x24001070
 8000b94:	24001024 	.word	0x24001024
 8000b98:	24000491 	.word	0x24000491
 8000b9c:	24000e80 	.word	0x24000e80
 8000ba0:	240004ac 	.word	0x240004ac
 8000ba4:	2400049c 	.word	0x2400049c

08000ba8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b09c      	sub	sp, #112	; 0x70
 8000bac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bb2:	224c      	movs	r2, #76	; 0x4c
 8000bb4:	2100      	movs	r1, #0
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	f00b fe5c 	bl	800c874 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bbc:	1d3b      	adds	r3, r7, #4
 8000bbe:	2220      	movs	r2, #32
 8000bc0:	2100      	movs	r1, #0
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f00b fe56 	bl	800c874 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000bc8:	2004      	movs	r0, #4
 8000bca:	f003 ffa7 	bl	8004b1c <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000bce:	2300      	movs	r3, #0
 8000bd0:	603b      	str	r3, [r7, #0]
 8000bd2:	4b34      	ldr	r3, [pc, #208]	; (8000ca4 <SystemClock_Config+0xfc>)
 8000bd4:	699b      	ldr	r3, [r3, #24]
 8000bd6:	4a33      	ldr	r2, [pc, #204]	; (8000ca4 <SystemClock_Config+0xfc>)
 8000bd8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000bdc:	6193      	str	r3, [r2, #24]
 8000bde:	4b31      	ldr	r3, [pc, #196]	; (8000ca4 <SystemClock_Config+0xfc>)
 8000be0:	699b      	ldr	r3, [r3, #24]
 8000be2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000be6:	603b      	str	r3, [r7, #0]
 8000be8:	4b2f      	ldr	r3, [pc, #188]	; (8000ca8 <SystemClock_Config+0x100>)
 8000bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bec:	4a2e      	ldr	r2, [pc, #184]	; (8000ca8 <SystemClock_Config+0x100>)
 8000bee:	f043 0301 	orr.w	r3, r3, #1
 8000bf2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000bf4:	4b2c      	ldr	r3, [pc, #176]	; (8000ca8 <SystemClock_Config+0x100>)
 8000bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bf8:	f003 0301 	and.w	r3, r3, #1
 8000bfc:	603b      	str	r3, [r7, #0]
 8000bfe:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000c00:	bf00      	nop
 8000c02:	4b28      	ldr	r3, [pc, #160]	; (8000ca4 <SystemClock_Config+0xfc>)
 8000c04:	699b      	ldr	r3, [r3, #24]
 8000c06:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000c0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000c0e:	d1f8      	bne.n	8000c02 <SystemClock_Config+0x5a>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000c10:	4b26      	ldr	r3, [pc, #152]	; (8000cac <SystemClock_Config+0x104>)
 8000c12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c14:	f023 0303 	bic.w	r3, r3, #3
 8000c18:	4a24      	ldr	r2, [pc, #144]	; (8000cac <SystemClock_Config+0x104>)
 8000c1a:	f043 0302 	orr.w	r3, r3, #2
 8000c1e:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c20:	2301      	movs	r3, #1
 8000c22:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000c24:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000c28:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c2a:	2302      	movs	r3, #2
 8000c2c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c2e:	2302      	movs	r3, #2
 8000c30:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000c32:	2301      	movs	r3, #1
 8000c34:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 120;
 8000c36:	2378      	movs	r3, #120	; 0x78
 8000c38:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000c3a:	2302      	movs	r3, #2
 8000c3c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000c3e:	2304      	movs	r3, #4
 8000c40:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000c42:	2302      	movs	r3, #2
 8000c44:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000c46:	230c      	movs	r3, #12
 8000c48:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c56:	4618      	mov	r0, r3
 8000c58:	f003 ffba 	bl	8004bd0 <HAL_RCC_OscConfig>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d001      	beq.n	8000c66 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8000c62:	f000 fa39 	bl	80010d8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c66:	233f      	movs	r3, #63	; 0x3f
 8000c68:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c6a:	2303      	movs	r3, #3
 8000c6c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000c72:	2308      	movs	r3, #8
 8000c74:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV4;
 8000c76:	2350      	movs	r3, #80	; 0x50
 8000c78:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV4;
 8000c7a:	2350      	movs	r3, #80	; 0x50
 8000c7c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV4;
 8000c7e:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8000c82:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV4;
 8000c84:	2350      	movs	r3, #80	; 0x50
 8000c86:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000c88:	1d3b      	adds	r3, r7, #4
 8000c8a:	2104      	movs	r1, #4
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	f004 fbaf 	bl	80053f0 <HAL_RCC_ClockConfig>
 8000c92:	4603      	mov	r3, r0
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d001      	beq.n	8000c9c <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8000c98:	f000 fa1e 	bl	80010d8 <Error_Handler>
  }
}
 8000c9c:	bf00      	nop
 8000c9e:	3770      	adds	r7, #112	; 0x70
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	58024800 	.word	0x58024800
 8000ca8:	58000400 	.word	0x58000400
 8000cac:	58024400 	.word	0x58024400

08000cb0 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000cb4:	4b11      	ldr	r3, [pc, #68]	; (8000cfc <MX_CRC_Init+0x4c>)
 8000cb6:	4a12      	ldr	r2, [pc, #72]	; (8000d00 <MX_CRC_Init+0x50>)
 8000cb8:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000cba:	4b10      	ldr	r3, [pc, #64]	; (8000cfc <MX_CRC_Init+0x4c>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000cc0:	4b0e      	ldr	r3, [pc, #56]	; (8000cfc <MX_CRC_Init+0x4c>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000cc6:	4b0d      	ldr	r3, [pc, #52]	; (8000cfc <MX_CRC_Init+0x4c>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000ccc:	4b0b      	ldr	r3, [pc, #44]	; (8000cfc <MX_CRC_Init+0x4c>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000cd2:	4b0a      	ldr	r3, [pc, #40]	; (8000cfc <MX_CRC_Init+0x4c>)
 8000cd4:	2201      	movs	r2, #1
 8000cd6:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000cd8:	4808      	ldr	r0, [pc, #32]	; (8000cfc <MX_CRC_Init+0x4c>)
 8000cda:	f000 fe11 	bl	8001900 <HAL_CRC_Init>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d001      	beq.n	8000ce8 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000ce4:	f000 f9f8 	bl	80010d8 <Error_Handler>
  }
  __HAL_CRC_DR_RESET(&hcrc);
 8000ce8:	4b04      	ldr	r3, [pc, #16]	; (8000cfc <MX_CRC_Init+0x4c>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	689a      	ldr	r2, [r3, #8]
 8000cee:	4b03      	ldr	r3, [pc, #12]	; (8000cfc <MX_CRC_Init+0x4c>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	f042 0201 	orr.w	r2, r2, #1
 8000cf6:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000cf8:	bf00      	nop
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	24000f10 	.word	0x24000f10
 8000d00:	58024c00 	.word	0x58024c00

08000d04 <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockA1.Instance = SAI1_Block_A;
 8000d08:	4b2d      	ldr	r3, [pc, #180]	; (8000dc0 <MX_SAI1_Init+0xbc>)
 8000d0a:	4a2e      	ldr	r2, [pc, #184]	; (8000dc4 <MX_SAI1_Init+0xc0>)
 8000d0c:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
 8000d0e:	4b2c      	ldr	r3, [pc, #176]	; (8000dc0 <MX_SAI1_Init+0xbc>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_RX;
 8000d14:	4b2a      	ldr	r3, [pc, #168]	; (8000dc0 <MX_SAI1_Init+0xbc>)
 8000d16:	2201      	movs	r2, #1
 8000d18:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.DataSize = SAI_DATASIZE_32;
 8000d1a:	4b29      	ldr	r3, [pc, #164]	; (8000dc0 <MX_SAI1_Init+0xbc>)
 8000d1c:	22e0      	movs	r2, #224	; 0xe0
 8000d1e:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000d20:	4b27      	ldr	r3, [pc, #156]	; (8000dc0 <MX_SAI1_Init+0xbc>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000d26:	4b26      	ldr	r3, [pc, #152]	; (8000dc0 <MX_SAI1_Init+0xbc>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8000d2c:	4b24      	ldr	r3, [pc, #144]	; (8000dc0 <MX_SAI1_Init+0xbc>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000d32:	4b23      	ldr	r3, [pc, #140]	; (8000dc0 <MX_SAI1_Init+0xbc>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_DISABLE;
 8000d38:	4b21      	ldr	r3, [pc, #132]	; (8000dc0 <MX_SAI1_Init+0xbc>)
 8000d3a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000d3e:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_FULL;
 8000d40:	4b1f      	ldr	r3, [pc, #124]	; (8000dc0 <MX_SAI1_Init+0xbc>)
 8000d42:	2204      	movs	r2, #4
 8000d44:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_MCKDIV;
 8000d46:	4b1e      	ldr	r3, [pc, #120]	; (8000dc0 <MX_SAI1_Init+0xbc>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	621a      	str	r2, [r3, #32]
  hsai_BlockA1.Init.Mckdiv = 0;
 8000d4c:	4b1c      	ldr	r3, [pc, #112]	; (8000dc0 <MX_SAI1_Init+0xbc>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8000d52:	4b1b      	ldr	r3, [pc, #108]	; (8000dc0 <MX_SAI1_Init+0xbc>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8000d58:	4b19      	ldr	r3, [pc, #100]	; (8000dc0 <MX_SAI1_Init+0xbc>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA1.Init.PdmInit.Activation = ENABLE;
 8000d5e:	4b18      	ldr	r3, [pc, #96]	; (8000dc0 <MX_SAI1_Init+0xbc>)
 8000d60:	2201      	movs	r2, #1
 8000d62:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hsai_BlockA1.Init.PdmInit.MicPairsNbr = 2;
 8000d66:	4b16      	ldr	r3, [pc, #88]	; (8000dc0 <MX_SAI1_Init+0xbc>)
 8000d68:	2202      	movs	r2, #2
 8000d6a:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA1.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 8000d6c:	4b14      	ldr	r3, [pc, #80]	; (8000dc0 <MX_SAI1_Init+0xbc>)
 8000d6e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d72:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA1.FrameInit.FrameLength = 32;
 8000d74:	4b12      	ldr	r3, [pc, #72]	; (8000dc0 <MX_SAI1_Init+0xbc>)
 8000d76:	2220      	movs	r2, #32
 8000d78:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA1.FrameInit.ActiveFrameLength = 1;
 8000d7a:	4b11      	ldr	r3, [pc, #68]	; (8000dc0 <MX_SAI1_Init+0xbc>)
 8000d7c:	2201      	movs	r2, #1
 8000d7e:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8000d80:	4b0f      	ldr	r3, [pc, #60]	; (8000dc0 <MX_SAI1_Init+0xbc>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA1.FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 8000d86:	4b0e      	ldr	r3, [pc, #56]	; (8000dc0 <MX_SAI1_Init+0xbc>)
 8000d88:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000d8c:	661a      	str	r2, [r3, #96]	; 0x60
  hsai_BlockA1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8000d8e:	4b0c      	ldr	r3, [pc, #48]	; (8000dc0 <MX_SAI1_Init+0xbc>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	665a      	str	r2, [r3, #100]	; 0x64
  hsai_BlockA1.SlotInit.FirstBitOffset = 0;
 8000d94:	4b0a      	ldr	r3, [pc, #40]	; (8000dc0 <MX_SAI1_Init+0xbc>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	669a      	str	r2, [r3, #104]	; 0x68
  hsai_BlockA1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8000d9a:	4b09      	ldr	r3, [pc, #36]	; (8000dc0 <MX_SAI1_Init+0xbc>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai_BlockA1.SlotInit.SlotNumber = 1;
 8000da0:	4b07      	ldr	r3, [pc, #28]	; (8000dc0 <MX_SAI1_Init+0xbc>)
 8000da2:	2201      	movs	r2, #1
 8000da4:	671a      	str	r2, [r3, #112]	; 0x70
  hsai_BlockA1.SlotInit.SlotActive = 0x00000001;
 8000da6:	4b06      	ldr	r3, [pc, #24]	; (8000dc0 <MX_SAI1_Init+0xbc>)
 8000da8:	2201      	movs	r2, #1
 8000daa:	675a      	str	r2, [r3, #116]	; 0x74
  if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
 8000dac:	4804      	ldr	r0, [pc, #16]	; (8000dc0 <MX_SAI1_Init+0xbc>)
 8000dae:	f007 f831 	bl	8007e14 <HAL_SAI_Init>
 8000db2:	4603      	mov	r3, r0
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d001      	beq.n	8000dbc <MX_SAI1_Init+0xb8>
  {
    Error_Handler();
 8000db8:	f000 f98e 	bl	80010d8 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8000dbc:	bf00      	nop
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	24001070 	.word	0x24001070
 8000dc4:	40015804 	.word	0x40015804

08000dc8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b088      	sub	sp, #32
 8000dcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dce:	f107 0310 	add.w	r3, r7, #16
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	601a      	str	r2, [r3, #0]
 8000dd6:	605a      	str	r2, [r3, #4]
 8000dd8:	609a      	str	r2, [r3, #8]
 8000dda:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ddc:	1d3b      	adds	r3, r7, #4
 8000dde:	2200      	movs	r2, #0
 8000de0:	601a      	str	r2, [r3, #0]
 8000de2:	605a      	str	r2, [r3, #4]
 8000de4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000de6:	4b23      	ldr	r3, [pc, #140]	; (8000e74 <MX_TIM1_Init+0xac>)
 8000de8:	4a23      	ldr	r2, [pc, #140]	; (8000e78 <MX_TIM1_Init+0xb0>)
 8000dea:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 20000;
 8000dec:	4b21      	ldr	r3, [pc, #132]	; (8000e74 <MX_TIM1_Init+0xac>)
 8000dee:	f644 6220 	movw	r2, #20000	; 0x4e20
 8000df2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000df4:	4b1f      	ldr	r3, [pc, #124]	; (8000e74 <MX_TIM1_Init+0xac>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 60000;
 8000dfa:	4b1e      	ldr	r3, [pc, #120]	; (8000e74 <MX_TIM1_Init+0xac>)
 8000dfc:	f64e 2260 	movw	r2, #60000	; 0xea60
 8000e00:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e02:	4b1c      	ldr	r3, [pc, #112]	; (8000e74 <MX_TIM1_Init+0xac>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000e08:	4b1a      	ldr	r3, [pc, #104]	; (8000e74 <MX_TIM1_Init+0xac>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e0e:	4b19      	ldr	r3, [pc, #100]	; (8000e74 <MX_TIM1_Init+0xac>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000e14:	4817      	ldr	r0, [pc, #92]	; (8000e74 <MX_TIM1_Init+0xac>)
 8000e16:	f007 fc1a 	bl	800864e <HAL_TIM_Base_Init>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d001      	beq.n	8000e24 <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 8000e20:	f000 f95a 	bl	80010d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e24:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e28:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000e2a:	f107 0310 	add.w	r3, r7, #16
 8000e2e:	4619      	mov	r1, r3
 8000e30:	4810      	ldr	r0, [pc, #64]	; (8000e74 <MX_TIM1_Init+0xac>)
 8000e32:	f007 fe21 	bl	8008a78 <HAL_TIM_ConfigClockSource>
 8000e36:	4603      	mov	r3, r0
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d001      	beq.n	8000e40 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8000e3c:	f000 f94c 	bl	80010d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e40:	2300      	movs	r3, #0
 8000e42:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000e44:	2300      	movs	r3, #0
 8000e46:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000e4c:	1d3b      	adds	r3, r7, #4
 8000e4e:	4619      	mov	r1, r3
 8000e50:	4808      	ldr	r0, [pc, #32]	; (8000e74 <MX_TIM1_Init+0xac>)
 8000e52:	f008 f865 	bl	8008f20 <HAL_TIMEx_MasterConfigSynchronization>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d001      	beq.n	8000e60 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000e5c:	f000 f93c 	bl	80010d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  __HAL_TIM_CLEAR_IT(&htim1, TIM_FLAG_UPDATE);
 8000e60:	4b04      	ldr	r3, [pc, #16]	; (8000e74 <MX_TIM1_Init+0xac>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	f06f 0201 	mvn.w	r2, #1
 8000e68:	611a      	str	r2, [r3, #16]
  /* USER CODE END TIM1_Init 2 */

}
 8000e6a:	bf00      	nop
 8000e6c:	3720      	adds	r7, #32
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	24001024 	.word	0x24001024
 8000e78:	40010000 	.word	0x40010000

08000e7c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000e80:	4b23      	ldr	r3, [pc, #140]	; (8000f10 <MX_USART3_UART_Init+0x94>)
 8000e82:	4a24      	ldr	r2, [pc, #144]	; (8000f14 <MX_USART3_UART_Init+0x98>)
 8000e84:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 4000000;
 8000e86:	4b22      	ldr	r3, [pc, #136]	; (8000f10 <MX_USART3_UART_Init+0x94>)
 8000e88:	4a23      	ldr	r2, [pc, #140]	; (8000f18 <MX_USART3_UART_Init+0x9c>)
 8000e8a:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000e8c:	4b20      	ldr	r3, [pc, #128]	; (8000f10 <MX_USART3_UART_Init+0x94>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000e92:	4b1f      	ldr	r3, [pc, #124]	; (8000f10 <MX_USART3_UART_Init+0x94>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000e98:	4b1d      	ldr	r3, [pc, #116]	; (8000f10 <MX_USART3_UART_Init+0x94>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000e9e:	4b1c      	ldr	r3, [pc, #112]	; (8000f10 <MX_USART3_UART_Init+0x94>)
 8000ea0:	220c      	movs	r2, #12
 8000ea2:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ea4:	4b1a      	ldr	r3, [pc, #104]	; (8000f10 <MX_USART3_UART_Init+0x94>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000eaa:	4b19      	ldr	r3, [pc, #100]	; (8000f10 <MX_USART3_UART_Init+0x94>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000eb0:	4b17      	ldr	r3, [pc, #92]	; (8000f10 <MX_USART3_UART_Init+0x94>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000eb6:	4b16      	ldr	r3, [pc, #88]	; (8000f10 <MX_USART3_UART_Init+0x94>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ebc:	4b14      	ldr	r3, [pc, #80]	; (8000f10 <MX_USART3_UART_Init+0x94>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000ec2:	4813      	ldr	r0, [pc, #76]	; (8000f10 <MX_USART3_UART_Init+0x94>)
 8000ec4:	f008 f8d2 	bl	800906c <HAL_UART_Init>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d001      	beq.n	8000ed2 <MX_USART3_UART_Init+0x56>
  {
    Error_Handler();
 8000ece:	f000 f903 	bl	80010d8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_8_8) != HAL_OK)
 8000ed2:	f04f 4120 	mov.w	r1, #2684354560	; 0xa0000000
 8000ed6:	480e      	ldr	r0, [pc, #56]	; (8000f10 <MX_USART3_UART_Init+0x94>)
 8000ed8:	f009 fc97 	bl	800a80a <HAL_UARTEx_SetTxFifoThreshold>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d001      	beq.n	8000ee6 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000ee2:	f000 f8f9 	bl	80010d8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_8_8) != HAL_OK)
 8000ee6:	f04f 6120 	mov.w	r1, #167772160	; 0xa000000
 8000eea:	4809      	ldr	r0, [pc, #36]	; (8000f10 <MX_USART3_UART_Init+0x94>)
 8000eec:	f009 fccb 	bl	800a886 <HAL_UARTEx_SetRxFifoThreshold>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d001      	beq.n	8000efa <MX_USART3_UART_Init+0x7e>
  {
    Error_Handler();
 8000ef6:	f000 f8ef 	bl	80010d8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000efa:	4805      	ldr	r0, [pc, #20]	; (8000f10 <MX_USART3_UART_Init+0x94>)
 8000efc:	f009 fc4c 	bl	800a798 <HAL_UARTEx_DisableFifoMode>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d001      	beq.n	8000f0a <MX_USART3_UART_Init+0x8e>
  {
    Error_Handler();
 8000f06:	f000 f8e7 	bl	80010d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000f0a:	bf00      	nop
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	24000e80 	.word	0x24000e80
 8000f14:	40004800 	.word	0x40004800
 8000f18:	003d0900 	.word	0x003d0900

08000f1c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f22:	4b11      	ldr	r3, [pc, #68]	; (8000f68 <MX_DMA_Init+0x4c>)
 8000f24:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000f28:	4a0f      	ldr	r2, [pc, #60]	; (8000f68 <MX_DMA_Init+0x4c>)
 8000f2a:	f043 0301 	orr.w	r3, r3, #1
 8000f2e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000f32:	4b0d      	ldr	r3, [pc, #52]	; (8000f68 <MX_DMA_Init+0x4c>)
 8000f34:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000f38:	f003 0301 	and.w	r3, r3, #1
 8000f3c:	607b      	str	r3, [r7, #4]
 8000f3e:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000f40:	2200      	movs	r2, #0
 8000f42:	2100      	movs	r1, #0
 8000f44:	200b      	movs	r0, #11
 8000f46:	f000 fca6 	bl	8001896 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000f4a:	200b      	movs	r0, #11
 8000f4c:	f000 fcbd 	bl	80018ca <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000f50:	2200      	movs	r2, #0
 8000f52:	2100      	movs	r1, #0
 8000f54:	200c      	movs	r0, #12
 8000f56:	f000 fc9e 	bl	8001896 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000f5a:	200c      	movs	r0, #12
 8000f5c:	f000 fcb5 	bl	80018ca <HAL_NVIC_EnableIRQ>

}
 8000f60:	bf00      	nop
 8000f62:	3708      	adds	r7, #8
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	58024400 	.word	0x58024400

08000f6c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b085      	sub	sp, #20
 8000f70:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f72:	4b21      	ldr	r3, [pc, #132]	; (8000ff8 <MX_GPIO_Init+0x8c>)
 8000f74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f78:	4a1f      	ldr	r2, [pc, #124]	; (8000ff8 <MX_GPIO_Init+0x8c>)
 8000f7a:	f043 0310 	orr.w	r3, r3, #16
 8000f7e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f82:	4b1d      	ldr	r3, [pc, #116]	; (8000ff8 <MX_GPIO_Init+0x8c>)
 8000f84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f88:	f003 0310 	and.w	r3, r3, #16
 8000f8c:	60fb      	str	r3, [r7, #12]
 8000f8e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f90:	4b19      	ldr	r3, [pc, #100]	; (8000ff8 <MX_GPIO_Init+0x8c>)
 8000f92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f96:	4a18      	ldr	r2, [pc, #96]	; (8000ff8 <MX_GPIO_Init+0x8c>)
 8000f98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f9c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fa0:	4b15      	ldr	r3, [pc, #84]	; (8000ff8 <MX_GPIO_Init+0x8c>)
 8000fa2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fa6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000faa:	60bb      	str	r3, [r7, #8]
 8000fac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fae:	4b12      	ldr	r3, [pc, #72]	; (8000ff8 <MX_GPIO_Init+0x8c>)
 8000fb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fb4:	4a10      	ldr	r2, [pc, #64]	; (8000ff8 <MX_GPIO_Init+0x8c>)
 8000fb6:	f043 0304 	orr.w	r3, r3, #4
 8000fba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fbe:	4b0e      	ldr	r3, [pc, #56]	; (8000ff8 <MX_GPIO_Init+0x8c>)
 8000fc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fc4:	f003 0304 	and.w	r3, r3, #4
 8000fc8:	607b      	str	r3, [r7, #4]
 8000fca:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fcc:	4b0a      	ldr	r3, [pc, #40]	; (8000ff8 <MX_GPIO_Init+0x8c>)
 8000fce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fd2:	4a09      	ldr	r2, [pc, #36]	; (8000ff8 <MX_GPIO_Init+0x8c>)
 8000fd4:	f043 0308 	orr.w	r3, r3, #8
 8000fd8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fdc:	4b06      	ldr	r3, [pc, #24]	; (8000ff8 <MX_GPIO_Init+0x8c>)
 8000fde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fe2:	f003 0308 	and.w	r3, r3, #8
 8000fe6:	603b      	str	r3, [r7, #0]
 8000fe8:	683b      	ldr	r3, [r7, #0]

}
 8000fea:	bf00      	nop
 8000fec:	3714      	adds	r7, #20
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop
 8000ff8:	58024400 	.word	0x58024400

08000ffc <Transpose_Clean>:

/* USER CODE BEGIN 4 */

static void Transpose_Clean(arm_matrix_instance_q15* m1, arm_matrix_instance_q15* m2){
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b086      	sub	sp, #24
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
 8001004:	6039      	str	r1, [r7, #0]
	arm_mat_trans_q15(&m1[0], &m2[0]);
 8001006:	6839      	ldr	r1, [r7, #0]
 8001008:	6878      	ldr	r0, [r7, #4]
 800100a:	f009 fd00 	bl	800aa0e <arm_mat_trans_q15>
	SCB_CleanDCache_by_Addr((uint32_t*)m2->pData, 2*CHANNEL_NUMBER*PCM_CHUNK_SIZE);
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	685b      	ldr	r3, [r3, #4]
 8001012:	617b      	str	r3, [r7, #20]
 8001014:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001018:	613b      	str	r3, [r7, #16]
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_CleanDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 800101a:	693b      	ldr	r3, [r7, #16]
 800101c:	2b00      	cmp	r3, #0
 800101e:	dd1d      	ble.n	800105c <Transpose_Clean+0x60>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8001020:	697b      	ldr	r3, [r7, #20]
 8001022:	f003 021f 	and.w	r2, r3, #31
 8001026:	693b      	ldr	r3, [r7, #16]
 8001028:	4413      	add	r3, r2
 800102a:	60fb      	str	r3, [r7, #12]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 800102c:	697b      	ldr	r3, [r7, #20]
 800102e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("dsb 0xF":::"memory");
 8001030:	f3bf 8f4f 	dsb	sy
}
 8001034:	bf00      	nop
    
      __DSB();

      do {
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8001036:	4a0c      	ldr	r2, [pc, #48]	; (8001068 <Transpose_Clean+0x6c>)
 8001038:	68bb      	ldr	r3, [r7, #8]
 800103a:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 800103e:	68bb      	ldr	r3, [r7, #8]
 8001040:	3320      	adds	r3, #32
 8001042:	60bb      	str	r3, [r7, #8]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	3b20      	subs	r3, #32
 8001048:	60fb      	str	r3, [r7, #12]
      } while ( op_size > 0 );
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	2b00      	cmp	r3, #0
 800104e:	dcf2      	bgt.n	8001036 <Transpose_Clean+0x3a>
  __ASM volatile ("dsb 0xF":::"memory");
 8001050:	f3bf 8f4f 	dsb	sy
}
 8001054:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001056:	f3bf 8f6f 	isb	sy
}
 800105a:	bf00      	nop

      __DSB();
      __ISB();
    }
  #endif
}
 800105c:	bf00      	nop
}
 800105e:	bf00      	nop
 8001060:	3718      	adds	r7, #24
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	e000ed00 	.word	0xe000ed00

0800106c <HAL_SAI_RxHalfCpltCallback>:

void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai){
 800106c:	b480      	push	{r7}
 800106e:	b083      	sub	sp, #12
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
	dmaFlag = HALF;
 8001074:	4b04      	ldr	r3, [pc, #16]	; (8001088 <HAL_SAI_RxHalfCpltCallback+0x1c>)
 8001076:	2204      	movs	r2, #4
 8001078:	701a      	strb	r2, [r3, #0]
}
 800107a:	bf00      	nop
 800107c:	370c      	adds	r7, #12
 800107e:	46bd      	mov	sp, r7
 8001080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001084:	4770      	bx	lr
 8001086:	bf00      	nop
 8001088:	24000491 	.word	0x24000491

0800108c <HAL_SAI_RxCpltCallback>:

void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai){
 800108c:	b480      	push	{r7}
 800108e:	b083      	sub	sp, #12
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
	dmaFlag = FULL;
 8001094:	4b04      	ldr	r3, [pc, #16]	; (80010a8 <HAL_SAI_RxCpltCallback+0x1c>)
 8001096:	2205      	movs	r2, #5
 8001098:	701a      	strb	r2, [r3, #0]
}
 800109a:	bf00      	nop
 800109c:	370c      	adds	r7, #12
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop
 80010a8:	24000491 	.word	0x24000491

080010ac <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  if(htim == &htim1){
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	4a06      	ldr	r2, [pc, #24]	; (80010d0 <HAL_TIM_PeriodElapsedCallback+0x24>)
 80010b8:	4293      	cmp	r3, r2
 80010ba:	d105      	bne.n	80010c8 <HAL_TIM_PeriodElapsedCallback+0x1c>
	  HAL_TIM_Base_Stop_IT(htim);
 80010bc:	6878      	ldr	r0, [r7, #4]
 80010be:	f007 fb8d 	bl	80087dc <HAL_TIM_Base_Stop_IT>
	  timFlag = DONE;
 80010c2:	4b04      	ldr	r3, [pc, #16]	; (80010d4 <HAL_TIM_PeriodElapsedCallback+0x28>)
 80010c4:	2203      	movs	r2, #3
 80010c6:	701a      	strb	r2, [r3, #0]
  }
}
 80010c8:	bf00      	nop
 80010ca:	3708      	adds	r7, #8
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	24001024 	.word	0x24001024
 80010d4:	24000492 	.word	0x24000492

080010d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80010dc:	b672      	cpsid	i
}
 80010de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010e0:	e7fe      	b.n	80010e0 <Error_Handler+0x8>
	...

080010e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	b083      	sub	sp, #12
 80010e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010ea:	4b0a      	ldr	r3, [pc, #40]	; (8001114 <HAL_MspInit+0x30>)
 80010ec:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80010f0:	4a08      	ldr	r2, [pc, #32]	; (8001114 <HAL_MspInit+0x30>)
 80010f2:	f043 0302 	orr.w	r3, r3, #2
 80010f6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80010fa:	4b06      	ldr	r3, [pc, #24]	; (8001114 <HAL_MspInit+0x30>)
 80010fc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001100:	f003 0302 	and.w	r3, r3, #2
 8001104:	607b      	str	r3, [r7, #4]
 8001106:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001108:	bf00      	nop
 800110a:	370c      	adds	r7, #12
 800110c:	46bd      	mov	sp, r7
 800110e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001112:	4770      	bx	lr
 8001114:	58024400 	.word	0x58024400

08001118 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001118:	b480      	push	{r7}
 800111a:	b085      	sub	sp, #20
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4a0b      	ldr	r2, [pc, #44]	; (8001154 <HAL_CRC_MspInit+0x3c>)
 8001126:	4293      	cmp	r3, r2
 8001128:	d10e      	bne.n	8001148 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800112a:	4b0b      	ldr	r3, [pc, #44]	; (8001158 <HAL_CRC_MspInit+0x40>)
 800112c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001130:	4a09      	ldr	r2, [pc, #36]	; (8001158 <HAL_CRC_MspInit+0x40>)
 8001132:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001136:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800113a:	4b07      	ldr	r3, [pc, #28]	; (8001158 <HAL_CRC_MspInit+0x40>)
 800113c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001140:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001144:	60fb      	str	r3, [r7, #12]
 8001146:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001148:	bf00      	nop
 800114a:	3714      	adds	r7, #20
 800114c:	46bd      	mov	sp, r7
 800114e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001152:	4770      	bx	lr
 8001154:	58024c00 	.word	0x58024c00
 8001158:	58024400 	.word	0x58024400

0800115c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b084      	sub	sp, #16
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4a0e      	ldr	r2, [pc, #56]	; (80011a4 <HAL_TIM_Base_MspInit+0x48>)
 800116a:	4293      	cmp	r3, r2
 800116c:	d116      	bne.n	800119c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800116e:	4b0e      	ldr	r3, [pc, #56]	; (80011a8 <HAL_TIM_Base_MspInit+0x4c>)
 8001170:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001174:	4a0c      	ldr	r2, [pc, #48]	; (80011a8 <HAL_TIM_Base_MspInit+0x4c>)
 8001176:	f043 0301 	orr.w	r3, r3, #1
 800117a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800117e:	4b0a      	ldr	r3, [pc, #40]	; (80011a8 <HAL_TIM_Base_MspInit+0x4c>)
 8001180:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001184:	f003 0301 	and.w	r3, r3, #1
 8001188:	60fb      	str	r3, [r7, #12]
 800118a:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 800118c:	2200      	movs	r2, #0
 800118e:	2100      	movs	r1, #0
 8001190:	2019      	movs	r0, #25
 8001192:	f000 fb80 	bl	8001896 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001196:	2019      	movs	r0, #25
 8001198:	f000 fb97 	bl	80018ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800119c:	bf00      	nop
 800119e:	3710      	adds	r7, #16
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	40010000 	.word	0x40010000
 80011a8:	58024400 	.word	0x58024400

080011ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b0b8      	sub	sp, #224	; 0xe0
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011b4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80011b8:	2200      	movs	r2, #0
 80011ba:	601a      	str	r2, [r3, #0]
 80011bc:	605a      	str	r2, [r3, #4]
 80011be:	609a      	str	r2, [r3, #8]
 80011c0:	60da      	str	r2, [r3, #12]
 80011c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011c4:	f107 0310 	add.w	r3, r7, #16
 80011c8:	22bc      	movs	r2, #188	; 0xbc
 80011ca:	2100      	movs	r1, #0
 80011cc:	4618      	mov	r0, r3
 80011ce:	f00b fb51 	bl	800c874 <memset>
  if(huart->Instance==USART3)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	4a49      	ldr	r2, [pc, #292]	; (80012fc <HAL_UART_MspInit+0x150>)
 80011d8:	4293      	cmp	r3, r2
 80011da:	f040 808b 	bne.w	80012f4 <HAL_UART_MspInit+0x148>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80011de:	2302      	movs	r3, #2
 80011e0:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 1;
 80011e2:	2301      	movs	r3, #1
 80011e4:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL3.PLL3N = 19;
 80011e6:	2313      	movs	r3, #19
 80011e8:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 80011ea:	2302      	movs	r3, #2
 80011ec:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 80011ee:	2302      	movs	r3, #2
 80011f0:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 80011f2:	2302      	movs	r3, #2
 80011f4:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 80011f6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80011fa:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
 80011fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001200:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8001202:	2300      	movs	r3, #0
 8001204:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_PLL3;
 8001206:	2302      	movs	r3, #2
 8001208:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800120c:	f107 0310 	add.w	r3, r7, #16
 8001210:	4618      	mov	r0, r3
 8001212:	f004 fc79 	bl	8005b08 <HAL_RCCEx_PeriphCLKConfig>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d001      	beq.n	8001220 <HAL_UART_MspInit+0x74>
    {
      Error_Handler();
 800121c:	f7ff ff5c 	bl	80010d8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001220:	4b37      	ldr	r3, [pc, #220]	; (8001300 <HAL_UART_MspInit+0x154>)
 8001222:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001226:	4a36      	ldr	r2, [pc, #216]	; (8001300 <HAL_UART_MspInit+0x154>)
 8001228:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800122c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001230:	4b33      	ldr	r3, [pc, #204]	; (8001300 <HAL_UART_MspInit+0x154>)
 8001232:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001236:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800123a:	60fb      	str	r3, [r7, #12]
 800123c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800123e:	4b30      	ldr	r3, [pc, #192]	; (8001300 <HAL_UART_MspInit+0x154>)
 8001240:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001244:	4a2e      	ldr	r2, [pc, #184]	; (8001300 <HAL_UART_MspInit+0x154>)
 8001246:	f043 0308 	orr.w	r3, r3, #8
 800124a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800124e:	4b2c      	ldr	r3, [pc, #176]	; (8001300 <HAL_UART_MspInit+0x154>)
 8001250:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001254:	f003 0308 	and.w	r3, r3, #8
 8001258:	60bb      	str	r3, [r7, #8]
 800125a:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800125c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001260:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001264:	2302      	movs	r3, #2
 8001266:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126a:	2300      	movs	r3, #0
 800126c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001270:	2300      	movs	r3, #0
 8001272:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001276:	2307      	movs	r3, #7
 8001278:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800127c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001280:	4619      	mov	r1, r3
 8001282:	4820      	ldr	r0, [pc, #128]	; (8001304 <HAL_UART_MspInit+0x158>)
 8001284:	f003 fa6c 	bl	8004760 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream1;
 8001288:	4b1f      	ldr	r3, [pc, #124]	; (8001308 <HAL_UART_MspInit+0x15c>)
 800128a:	4a20      	ldr	r2, [pc, #128]	; (800130c <HAL_UART_MspInit+0x160>)
 800128c:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 800128e:	4b1e      	ldr	r3, [pc, #120]	; (8001308 <HAL_UART_MspInit+0x15c>)
 8001290:	222e      	movs	r2, #46	; 0x2e
 8001292:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001294:	4b1c      	ldr	r3, [pc, #112]	; (8001308 <HAL_UART_MspInit+0x15c>)
 8001296:	2240      	movs	r2, #64	; 0x40
 8001298:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800129a:	4b1b      	ldr	r3, [pc, #108]	; (8001308 <HAL_UART_MspInit+0x15c>)
 800129c:	2200      	movs	r2, #0
 800129e:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80012a0:	4b19      	ldr	r3, [pc, #100]	; (8001308 <HAL_UART_MspInit+0x15c>)
 80012a2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80012a6:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80012a8:	4b17      	ldr	r3, [pc, #92]	; (8001308 <HAL_UART_MspInit+0x15c>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80012ae:	4b16      	ldr	r3, [pc, #88]	; (8001308 <HAL_UART_MspInit+0x15c>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 80012b4:	4b14      	ldr	r3, [pc, #80]	; (8001308 <HAL_UART_MspInit+0x15c>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_HIGH;
 80012ba:	4b13      	ldr	r3, [pc, #76]	; (8001308 <HAL_UART_MspInit+0x15c>)
 80012bc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80012c0:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80012c2:	4b11      	ldr	r3, [pc, #68]	; (8001308 <HAL_UART_MspInit+0x15c>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80012c8:	480f      	ldr	r0, [pc, #60]	; (8001308 <HAL_UART_MspInit+0x15c>)
 80012ca:	f000 fc03 	bl	8001ad4 <HAL_DMA_Init>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d001      	beq.n	80012d8 <HAL_UART_MspInit+0x12c>
    {
      Error_Handler();
 80012d4:	f7ff ff00 	bl	80010d8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	4a0b      	ldr	r2, [pc, #44]	; (8001308 <HAL_UART_MspInit+0x15c>)
 80012dc:	679a      	str	r2, [r3, #120]	; 0x78
 80012de:	4a0a      	ldr	r2, [pc, #40]	; (8001308 <HAL_UART_MspInit+0x15c>)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80012e4:	2200      	movs	r2, #0
 80012e6:	2100      	movs	r1, #0
 80012e8:	2027      	movs	r0, #39	; 0x27
 80012ea:	f000 fad4 	bl	8001896 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80012ee:	2027      	movs	r0, #39	; 0x27
 80012f0:	f000 faeb 	bl	80018ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80012f4:	bf00      	nop
 80012f6:	37e0      	adds	r7, #224	; 0xe0
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	40004800 	.word	0x40004800
 8001300:	58024400 	.word	0x58024400
 8001304:	58020c00 	.word	0x58020c00
 8001308:	24000f34 	.word	0x24000f34
 800130c:	40020028 	.word	0x40020028

08001310 <HAL_SAI_MspInit>:
extern DMA_HandleTypeDef hdma_sai1_a;

static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b0b8      	sub	sp, #224	; 0xe0
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001318:	f107 0310 	add.w	r3, r7, #16
 800131c:	22bc      	movs	r2, #188	; 0xbc
 800131e:	2100      	movs	r1, #0
 8001320:	4618      	mov	r0, r3
 8001322:	f00b faa7 	bl	800c874 <memset>
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	4a55      	ldr	r2, [pc, #340]	; (8001480 <HAL_SAI_MspInit+0x170>)
 800132c:	4293      	cmp	r3, r2
 800132e:	f040 80a2 	bne.w	8001476 <HAL_SAI_MspInit+0x166>
    {
    /* Peripheral clock enable */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 8001332:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001336:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 5;
 8001338:	2305      	movs	r3, #5
 800133a:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLL2.PLL2N = 192;
 800133c:	23c0      	movs	r3, #192	; 0xc0
 800133e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2P = 25;
 8001340:	2319      	movs	r3, #25
 8001342:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001344:	2302      	movs	r3, #2
 8001346:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001348:	2302      	movs	r3, #2
 800134a:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_0;
 800134c:	2300      	movs	r3, #0
 800134e:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8001350:	2300      	movs	r3, #0
 8001352:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001354:	2300      	movs	r3, #0
 8001356:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL2;
 8001358:	2301      	movs	r3, #1
 800135a:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800135c:	f107 0310 	add.w	r3, r7, #16
 8001360:	4618      	mov	r0, r3
 8001362:	f004 fbd1 	bl	8005b08 <HAL_RCCEx_PeriphCLKConfig>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d001      	beq.n	8001370 <HAL_SAI_MspInit+0x60>
    {
      Error_Handler();
 800136c:	f7ff feb4 	bl	80010d8 <Error_Handler>
    }

    if (SAI1_client == 0)
 8001370:	4b44      	ldr	r3, [pc, #272]	; (8001484 <HAL_SAI_MspInit+0x174>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	2b00      	cmp	r3, #0
 8001376:	d116      	bne.n	80013a6 <HAL_SAI_MspInit+0x96>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8001378:	4b43      	ldr	r3, [pc, #268]	; (8001488 <HAL_SAI_MspInit+0x178>)
 800137a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800137e:	4a42      	ldr	r2, [pc, #264]	; (8001488 <HAL_SAI_MspInit+0x178>)
 8001380:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001384:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001388:	4b3f      	ldr	r3, [pc, #252]	; (8001488 <HAL_SAI_MspInit+0x178>)
 800138a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800138e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001392:	60fb      	str	r3, [r7, #12]
 8001394:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(SAI1_IRQn, 0, 0);
 8001396:	2200      	movs	r2, #0
 8001398:	2100      	movs	r1, #0
 800139a:	2057      	movs	r0, #87	; 0x57
 800139c:	f000 fa7b 	bl	8001896 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SAI1_IRQn);
 80013a0:	2057      	movs	r0, #87	; 0x57
 80013a2:	f000 fa92 	bl	80018ca <HAL_NVIC_EnableIRQ>
    }
    SAI1_client ++;
 80013a6:	4b37      	ldr	r3, [pc, #220]	; (8001484 <HAL_SAI_MspInit+0x174>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	3301      	adds	r3, #1
 80013ac:	4a35      	ldr	r2, [pc, #212]	; (8001484 <HAL_SAI_MspInit+0x174>)
 80013ae:	6013      	str	r3, [r2, #0]
    /**SAI1_A_Block_A GPIO Configuration
    PE2     ------> SAI1_CK1
    PE4     ------> SAI1_D2
    PC1     ------> SAI1_D1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4;
 80013b0:	2314      	movs	r3, #20
 80013b2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013b6:	2302      	movs	r3, #2
 80013b8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013bc:	2300      	movs	r3, #0
 80013be:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013c2:	2300      	movs	r3, #0
 80013c4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF2_SAI1;
 80013c8:	2302      	movs	r3, #2
 80013ca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80013ce:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80013d2:	4619      	mov	r1, r3
 80013d4:	482d      	ldr	r0, [pc, #180]	; (800148c <HAL_SAI_MspInit+0x17c>)
 80013d6:	f003 f9c3 	bl	8004760 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80013da:	2302      	movs	r3, #2
 80013dc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013e0:	2302      	movs	r3, #2
 80013e2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e6:	2300      	movs	r3, #0
 80013e8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ec:	2300      	movs	r3, #0
 80013ee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF2_SAI1;
 80013f2:	2302      	movs	r3, #2
 80013f4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013f8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80013fc:	4619      	mov	r1, r3
 80013fe:	4824      	ldr	r0, [pc, #144]	; (8001490 <HAL_SAI_MspInit+0x180>)
 8001400:	f003 f9ae 	bl	8004760 <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai1_a.Instance = DMA1_Stream0;
 8001404:	4b23      	ldr	r3, [pc, #140]	; (8001494 <HAL_SAI_MspInit+0x184>)
 8001406:	4a24      	ldr	r2, [pc, #144]	; (8001498 <HAL_SAI_MspInit+0x188>)
 8001408:	601a      	str	r2, [r3, #0]
    hdma_sai1_a.Init.Request = DMA_REQUEST_SAI1_A;
 800140a:	4b22      	ldr	r3, [pc, #136]	; (8001494 <HAL_SAI_MspInit+0x184>)
 800140c:	2257      	movs	r2, #87	; 0x57
 800140e:	605a      	str	r2, [r3, #4]
    hdma_sai1_a.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001410:	4b20      	ldr	r3, [pc, #128]	; (8001494 <HAL_SAI_MspInit+0x184>)
 8001412:	2200      	movs	r2, #0
 8001414:	609a      	str	r2, [r3, #8]
    hdma_sai1_a.Init.PeriphInc = DMA_PINC_DISABLE;
 8001416:	4b1f      	ldr	r3, [pc, #124]	; (8001494 <HAL_SAI_MspInit+0x184>)
 8001418:	2200      	movs	r2, #0
 800141a:	60da      	str	r2, [r3, #12]
    hdma_sai1_a.Init.MemInc = DMA_MINC_ENABLE;
 800141c:	4b1d      	ldr	r3, [pc, #116]	; (8001494 <HAL_SAI_MspInit+0x184>)
 800141e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001422:	611a      	str	r2, [r3, #16]
    hdma_sai1_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001424:	4b1b      	ldr	r3, [pc, #108]	; (8001494 <HAL_SAI_MspInit+0x184>)
 8001426:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800142a:	615a      	str	r2, [r3, #20]
    hdma_sai1_a.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800142c:	4b19      	ldr	r3, [pc, #100]	; (8001494 <HAL_SAI_MspInit+0x184>)
 800142e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001432:	619a      	str	r2, [r3, #24]
    hdma_sai1_a.Init.Mode = DMA_CIRCULAR;
 8001434:	4b17      	ldr	r3, [pc, #92]	; (8001494 <HAL_SAI_MspInit+0x184>)
 8001436:	f44f 7280 	mov.w	r2, #256	; 0x100
 800143a:	61da      	str	r2, [r3, #28]
    hdma_sai1_a.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800143c:	4b15      	ldr	r3, [pc, #84]	; (8001494 <HAL_SAI_MspInit+0x184>)
 800143e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001442:	621a      	str	r2, [r3, #32]
    hdma_sai1_a.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001444:	4b13      	ldr	r3, [pc, #76]	; (8001494 <HAL_SAI_MspInit+0x184>)
 8001446:	2200      	movs	r2, #0
 8001448:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
 800144a:	4812      	ldr	r0, [pc, #72]	; (8001494 <HAL_SAI_MspInit+0x184>)
 800144c:	f000 fb42 	bl	8001ad4 <HAL_DMA_Init>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d001      	beq.n	800145a <HAL_SAI_MspInit+0x14a>
    {
      Error_Handler();
 8001456:	f7ff fe3f 	bl	80010d8 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_a);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	4a0d      	ldr	r2, [pc, #52]	; (8001494 <HAL_SAI_MspInit+0x184>)
 800145e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8001462:	4a0c      	ldr	r2, [pc, #48]	; (8001494 <HAL_SAI_MspInit+0x184>)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	6393      	str	r3, [r2, #56]	; 0x38

    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_a);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	4a0a      	ldr	r2, [pc, #40]	; (8001494 <HAL_SAI_MspInit+0x184>)
 800146c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8001470:	4a08      	ldr	r2, [pc, #32]	; (8001494 <HAL_SAI_MspInit+0x184>)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	6393      	str	r3, [r2, #56]	; 0x38

    }
}
 8001476:	bf00      	nop
 8001478:	37e0      	adds	r7, #224	; 0xe0
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	40015804 	.word	0x40015804
 8001484:	24000d34 	.word	0x24000d34
 8001488:	58024400 	.word	0x58024400
 800148c:	58021000 	.word	0x58021000
 8001490:	58020800 	.word	0x58020800
 8001494:	24000fac 	.word	0x24000fac
 8001498:	40020010 	.word	0x40020010

0800149c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014a0:	e7fe      	b.n	80014a0 <NMI_Handler+0x4>

080014a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014a2:	b480      	push	{r7}
 80014a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014a6:	e7fe      	b.n	80014a6 <HardFault_Handler+0x4>

080014a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014ac:	e7fe      	b.n	80014ac <MemManage_Handler+0x4>

080014ae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014ae:	b480      	push	{r7}
 80014b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014b2:	e7fe      	b.n	80014b2 <BusFault_Handler+0x4>

080014b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014b4:	b480      	push	{r7}
 80014b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014b8:	e7fe      	b.n	80014b8 <UsageFault_Handler+0x4>

080014ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014ba:	b480      	push	{r7}
 80014bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014be:	bf00      	nop
 80014c0:	46bd      	mov	sp, r7
 80014c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c6:	4770      	bx	lr

080014c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014cc:	bf00      	nop
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr

080014d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014d6:	b480      	push	{r7}
 80014d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014da:	bf00      	nop
 80014dc:	46bd      	mov	sp, r7
 80014de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e2:	4770      	bx	lr

080014e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014e8:	f000 f8ce 	bl	8001688 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014ec:	bf00      	nop
 80014ee:	bd80      	pop	{r7, pc}

080014f0 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_a);
 80014f4:	4802      	ldr	r0, [pc, #8]	; (8001500 <DMA1_Stream0_IRQHandler+0x10>)
 80014f6:	f001 fe15 	bl	8003124 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80014fa:	bf00      	nop
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	24000fac 	.word	0x24000fac

08001504 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8001508:	4802      	ldr	r0, [pc, #8]	; (8001514 <DMA1_Stream1_IRQHandler+0x10>)
 800150a:	f001 fe0b 	bl	8003124 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800150e:	bf00      	nop
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	24000f34 	.word	0x24000f34

08001518 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800151c:	4802      	ldr	r0, [pc, #8]	; (8001528 <TIM1_UP_IRQHandler+0x10>)
 800151e:	f007 f98c 	bl	800883a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001522:	bf00      	nop
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	24001024 	.word	0x24001024

0800152c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001530:	4802      	ldr	r0, [pc, #8]	; (800153c <USART3_IRQHandler+0x10>)
 8001532:	f007 fe6b 	bl	800920c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001536:	bf00      	nop
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	24000e80 	.word	0x24000e80

08001540 <SAI1_IRQHandler>:

/**
  * @brief This function handles SAI1 global interrupt.
  */
void SAI1_IRQHandler(void)
{
 8001540:	b480      	push	{r7}
 8001542:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_IRQn 0 */

  /* USER CODE BEGIN SAI1_IRQn 1 */

  /* USER CODE END SAI1_IRQn 1 */
}
 8001544:	bf00      	nop
 8001546:	46bd      	mov	sp, r7
 8001548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154c:	4770      	bx	lr
	...

08001550 <Reset_Handler>:
*/

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  ldr   sp, =_estack      /* set stack pointer */
 8001550:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001588 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001554:	f7ff f83c 	bl	80005d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001558:	480c      	ldr	r0, [pc, #48]	; (800158c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800155a:	490d      	ldr	r1, [pc, #52]	; (8001590 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800155c:	4a0d      	ldr	r2, [pc, #52]	; (8001594 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800155e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001560:	e002      	b.n	8001568 <LoopCopyDataInit>

08001562 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001562:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001564:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001566:	3304      	adds	r3, #4

08001568 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001568:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800156a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800156c:	d3f9      	bcc.n	8001562 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800156e:	4a0a      	ldr	r2, [pc, #40]	; (8001598 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001570:	4c0a      	ldr	r4, [pc, #40]	; (800159c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001572:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001574:	e001      	b.n	800157a <LoopFillZerobss>

08001576 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001576:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001578:	3204      	adds	r2, #4

0800157a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800157a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800157c:	d3fb      	bcc.n	8001576 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800157e:	f00b f955 	bl	800c82c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001582:	f7ff f9df 	bl	8000944 <main>
  bx  lr
 8001586:	4770      	bx	lr
Reset_Handler:  ldr   sp, =_estack      /* set stack pointer */
 8001588:	24040000 	.word	0x24040000
  ldr r0, =_sdata
 800158c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001590:	24000474 	.word	0x24000474
  ldr r2, =_sidata
 8001594:	0800d108 	.word	0x0800d108
  ldr r2, =_sbss
 8001598:	24000474 	.word	0x24000474
  ldr r4, =_ebss
 800159c:	2400110c 	.word	0x2400110c

080015a0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015a0:	e7fe      	b.n	80015a0 <ADC3_IRQHandler>
	...

080015a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b082      	sub	sp, #8
 80015a8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015aa:	2003      	movs	r0, #3
 80015ac:	f000 f968 	bl	8001880 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80015b0:	f004 f8d4 	bl	800575c <HAL_RCC_GetSysClockFreq>
 80015b4:	4602      	mov	r2, r0
 80015b6:	4b15      	ldr	r3, [pc, #84]	; (800160c <HAL_Init+0x68>)
 80015b8:	699b      	ldr	r3, [r3, #24]
 80015ba:	0a1b      	lsrs	r3, r3, #8
 80015bc:	f003 030f 	and.w	r3, r3, #15
 80015c0:	4913      	ldr	r1, [pc, #76]	; (8001610 <HAL_Init+0x6c>)
 80015c2:	5ccb      	ldrb	r3, [r1, r3]
 80015c4:	f003 031f 	and.w	r3, r3, #31
 80015c8:	fa22 f303 	lsr.w	r3, r2, r3
 80015cc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80015ce:	4b0f      	ldr	r3, [pc, #60]	; (800160c <HAL_Init+0x68>)
 80015d0:	699b      	ldr	r3, [r3, #24]
 80015d2:	f003 030f 	and.w	r3, r3, #15
 80015d6:	4a0e      	ldr	r2, [pc, #56]	; (8001610 <HAL_Init+0x6c>)
 80015d8:	5cd3      	ldrb	r3, [r2, r3]
 80015da:	f003 031f 	and.w	r3, r3, #31
 80015de:	687a      	ldr	r2, [r7, #4]
 80015e0:	fa22 f303 	lsr.w	r3, r2, r3
 80015e4:	4a0b      	ldr	r2, [pc, #44]	; (8001614 <HAL_Init+0x70>)
 80015e6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80015e8:	4a0b      	ldr	r2, [pc, #44]	; (8001618 <HAL_Init+0x74>)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80015ee:	2000      	movs	r0, #0
 80015f0:	f000 f814 	bl	800161c <HAL_InitTick>
 80015f4:	4603      	mov	r3, r0
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d001      	beq.n	80015fe <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80015fa:	2301      	movs	r3, #1
 80015fc:	e002      	b.n	8001604 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80015fe:	f7ff fd71 	bl	80010e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001602:	2300      	movs	r3, #0
}
 8001604:	4618      	mov	r0, r3
 8001606:	3708      	adds	r7, #8
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}
 800160c:	58024400 	.word	0x58024400
 8001610:	0800cc60 	.word	0x0800cc60
 8001614:	24000404 	.word	0x24000404
 8001618:	24000400 	.word	0x24000400

0800161c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b082      	sub	sp, #8
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001624:	4b15      	ldr	r3, [pc, #84]	; (800167c <HAL_InitTick+0x60>)
 8001626:	781b      	ldrb	r3, [r3, #0]
 8001628:	2b00      	cmp	r3, #0
 800162a:	d101      	bne.n	8001630 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800162c:	2301      	movs	r3, #1
 800162e:	e021      	b.n	8001674 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001630:	4b13      	ldr	r3, [pc, #76]	; (8001680 <HAL_InitTick+0x64>)
 8001632:	681a      	ldr	r2, [r3, #0]
 8001634:	4b11      	ldr	r3, [pc, #68]	; (800167c <HAL_InitTick+0x60>)
 8001636:	781b      	ldrb	r3, [r3, #0]
 8001638:	4619      	mov	r1, r3
 800163a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800163e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001642:	fbb2 f3f3 	udiv	r3, r2, r3
 8001646:	4618      	mov	r0, r3
 8001648:	f000 f94d 	bl	80018e6 <HAL_SYSTICK_Config>
 800164c:	4603      	mov	r3, r0
 800164e:	2b00      	cmp	r3, #0
 8001650:	d001      	beq.n	8001656 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001652:	2301      	movs	r3, #1
 8001654:	e00e      	b.n	8001674 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	2b0f      	cmp	r3, #15
 800165a:	d80a      	bhi.n	8001672 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800165c:	2200      	movs	r2, #0
 800165e:	6879      	ldr	r1, [r7, #4]
 8001660:	f04f 30ff 	mov.w	r0, #4294967295
 8001664:	f000 f917 	bl	8001896 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001668:	4a06      	ldr	r2, [pc, #24]	; (8001684 <HAL_InitTick+0x68>)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800166e:	2300      	movs	r3, #0
 8001670:	e000      	b.n	8001674 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001672:	2301      	movs	r3, #1
}
 8001674:	4618      	mov	r0, r3
 8001676:	3708      	adds	r7, #8
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}
 800167c:	2400040c 	.word	0x2400040c
 8001680:	24000400 	.word	0x24000400
 8001684:	24000408 	.word	0x24000408

08001688 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800168c:	4b06      	ldr	r3, [pc, #24]	; (80016a8 <HAL_IncTick+0x20>)
 800168e:	781b      	ldrb	r3, [r3, #0]
 8001690:	461a      	mov	r2, r3
 8001692:	4b06      	ldr	r3, [pc, #24]	; (80016ac <HAL_IncTick+0x24>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4413      	add	r3, r2
 8001698:	4a04      	ldr	r2, [pc, #16]	; (80016ac <HAL_IncTick+0x24>)
 800169a:	6013      	str	r3, [r2, #0]
}
 800169c:	bf00      	nop
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr
 80016a6:	bf00      	nop
 80016a8:	2400040c 	.word	0x2400040c
 80016ac:	24001108 	.word	0x24001108

080016b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016b0:	b480      	push	{r7}
 80016b2:	af00      	add	r7, sp, #0
  return uwTick;
 80016b4:	4b03      	ldr	r3, [pc, #12]	; (80016c4 <HAL_GetTick+0x14>)
 80016b6:	681b      	ldr	r3, [r3, #0]
}
 80016b8:	4618      	mov	r0, r3
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr
 80016c2:	bf00      	nop
 80016c4:	24001108 	.word	0x24001108

080016c8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80016c8:	b480      	push	{r7}
 80016ca:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80016cc:	4b03      	ldr	r3, [pc, #12]	; (80016dc <HAL_GetREVID+0x14>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	0c1b      	lsrs	r3, r3, #16
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	46bd      	mov	sp, r7
 80016d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016da:	4770      	bx	lr
 80016dc:	5c001000 	.word	0x5c001000

080016e0 <__NVIC_SetPriorityGrouping>:
{
 80016e0:	b480      	push	{r7}
 80016e2:	b085      	sub	sp, #20
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	f003 0307 	and.w	r3, r3, #7
 80016ee:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016f0:	4b0b      	ldr	r3, [pc, #44]	; (8001720 <__NVIC_SetPriorityGrouping+0x40>)
 80016f2:	68db      	ldr	r3, [r3, #12]
 80016f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016f6:	68ba      	ldr	r2, [r7, #8]
 80016f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016fc:	4013      	ands	r3, r2
 80016fe:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001704:	68bb      	ldr	r3, [r7, #8]
 8001706:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001708:	4b06      	ldr	r3, [pc, #24]	; (8001724 <__NVIC_SetPriorityGrouping+0x44>)
 800170a:	4313      	orrs	r3, r2
 800170c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800170e:	4a04      	ldr	r2, [pc, #16]	; (8001720 <__NVIC_SetPriorityGrouping+0x40>)
 8001710:	68bb      	ldr	r3, [r7, #8]
 8001712:	60d3      	str	r3, [r2, #12]
}
 8001714:	bf00      	nop
 8001716:	3714      	adds	r7, #20
 8001718:	46bd      	mov	sp, r7
 800171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171e:	4770      	bx	lr
 8001720:	e000ed00 	.word	0xe000ed00
 8001724:	05fa0000 	.word	0x05fa0000

08001728 <__NVIC_GetPriorityGrouping>:
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800172c:	4b04      	ldr	r3, [pc, #16]	; (8001740 <__NVIC_GetPriorityGrouping+0x18>)
 800172e:	68db      	ldr	r3, [r3, #12]
 8001730:	0a1b      	lsrs	r3, r3, #8
 8001732:	f003 0307 	and.w	r3, r3, #7
}
 8001736:	4618      	mov	r0, r3
 8001738:	46bd      	mov	sp, r7
 800173a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173e:	4770      	bx	lr
 8001740:	e000ed00 	.word	0xe000ed00

08001744 <__NVIC_EnableIRQ>:
{
 8001744:	b480      	push	{r7}
 8001746:	b083      	sub	sp, #12
 8001748:	af00      	add	r7, sp, #0
 800174a:	4603      	mov	r3, r0
 800174c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800174e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001752:	2b00      	cmp	r3, #0
 8001754:	db0b      	blt.n	800176e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001756:	88fb      	ldrh	r3, [r7, #6]
 8001758:	f003 021f 	and.w	r2, r3, #31
 800175c:	4907      	ldr	r1, [pc, #28]	; (800177c <__NVIC_EnableIRQ+0x38>)
 800175e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001762:	095b      	lsrs	r3, r3, #5
 8001764:	2001      	movs	r0, #1
 8001766:	fa00 f202 	lsl.w	r2, r0, r2
 800176a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800176e:	bf00      	nop
 8001770:	370c      	adds	r7, #12
 8001772:	46bd      	mov	sp, r7
 8001774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001778:	4770      	bx	lr
 800177a:	bf00      	nop
 800177c:	e000e100 	.word	0xe000e100

08001780 <__NVIC_SetPriority>:
{
 8001780:	b480      	push	{r7}
 8001782:	b083      	sub	sp, #12
 8001784:	af00      	add	r7, sp, #0
 8001786:	4603      	mov	r3, r0
 8001788:	6039      	str	r1, [r7, #0]
 800178a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800178c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001790:	2b00      	cmp	r3, #0
 8001792:	db0a      	blt.n	80017aa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	b2da      	uxtb	r2, r3
 8001798:	490c      	ldr	r1, [pc, #48]	; (80017cc <__NVIC_SetPriority+0x4c>)
 800179a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800179e:	0112      	lsls	r2, r2, #4
 80017a0:	b2d2      	uxtb	r2, r2
 80017a2:	440b      	add	r3, r1
 80017a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80017a8:	e00a      	b.n	80017c0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	b2da      	uxtb	r2, r3
 80017ae:	4908      	ldr	r1, [pc, #32]	; (80017d0 <__NVIC_SetPriority+0x50>)
 80017b0:	88fb      	ldrh	r3, [r7, #6]
 80017b2:	f003 030f 	and.w	r3, r3, #15
 80017b6:	3b04      	subs	r3, #4
 80017b8:	0112      	lsls	r2, r2, #4
 80017ba:	b2d2      	uxtb	r2, r2
 80017bc:	440b      	add	r3, r1
 80017be:	761a      	strb	r2, [r3, #24]
}
 80017c0:	bf00      	nop
 80017c2:	370c      	adds	r7, #12
 80017c4:	46bd      	mov	sp, r7
 80017c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ca:	4770      	bx	lr
 80017cc:	e000e100 	.word	0xe000e100
 80017d0:	e000ed00 	.word	0xe000ed00

080017d4 <NVIC_EncodePriority>:
{
 80017d4:	b480      	push	{r7}
 80017d6:	b089      	sub	sp, #36	; 0x24
 80017d8:	af00      	add	r7, sp, #0
 80017da:	60f8      	str	r0, [r7, #12]
 80017dc:	60b9      	str	r1, [r7, #8]
 80017de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	f003 0307 	and.w	r3, r3, #7
 80017e6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017e8:	69fb      	ldr	r3, [r7, #28]
 80017ea:	f1c3 0307 	rsb	r3, r3, #7
 80017ee:	2b04      	cmp	r3, #4
 80017f0:	bf28      	it	cs
 80017f2:	2304      	movcs	r3, #4
 80017f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017f6:	69fb      	ldr	r3, [r7, #28]
 80017f8:	3304      	adds	r3, #4
 80017fa:	2b06      	cmp	r3, #6
 80017fc:	d902      	bls.n	8001804 <NVIC_EncodePriority+0x30>
 80017fe:	69fb      	ldr	r3, [r7, #28]
 8001800:	3b03      	subs	r3, #3
 8001802:	e000      	b.n	8001806 <NVIC_EncodePriority+0x32>
 8001804:	2300      	movs	r3, #0
 8001806:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001808:	f04f 32ff 	mov.w	r2, #4294967295
 800180c:	69bb      	ldr	r3, [r7, #24]
 800180e:	fa02 f303 	lsl.w	r3, r2, r3
 8001812:	43da      	mvns	r2, r3
 8001814:	68bb      	ldr	r3, [r7, #8]
 8001816:	401a      	ands	r2, r3
 8001818:	697b      	ldr	r3, [r7, #20]
 800181a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800181c:	f04f 31ff 	mov.w	r1, #4294967295
 8001820:	697b      	ldr	r3, [r7, #20]
 8001822:	fa01 f303 	lsl.w	r3, r1, r3
 8001826:	43d9      	mvns	r1, r3
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800182c:	4313      	orrs	r3, r2
}
 800182e:	4618      	mov	r0, r3
 8001830:	3724      	adds	r7, #36	; 0x24
 8001832:	46bd      	mov	sp, r7
 8001834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001838:	4770      	bx	lr
	...

0800183c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b082      	sub	sp, #8
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	3b01      	subs	r3, #1
 8001848:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800184c:	d301      	bcc.n	8001852 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800184e:	2301      	movs	r3, #1
 8001850:	e00f      	b.n	8001872 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001852:	4a0a      	ldr	r2, [pc, #40]	; (800187c <SysTick_Config+0x40>)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	3b01      	subs	r3, #1
 8001858:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800185a:	210f      	movs	r1, #15
 800185c:	f04f 30ff 	mov.w	r0, #4294967295
 8001860:	f7ff ff8e 	bl	8001780 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001864:	4b05      	ldr	r3, [pc, #20]	; (800187c <SysTick_Config+0x40>)
 8001866:	2200      	movs	r2, #0
 8001868:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800186a:	4b04      	ldr	r3, [pc, #16]	; (800187c <SysTick_Config+0x40>)
 800186c:	2207      	movs	r2, #7
 800186e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001870:	2300      	movs	r3, #0
}
 8001872:	4618      	mov	r0, r3
 8001874:	3708      	adds	r7, #8
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	e000e010 	.word	0xe000e010

08001880 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b082      	sub	sp, #8
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001888:	6878      	ldr	r0, [r7, #4]
 800188a:	f7ff ff29 	bl	80016e0 <__NVIC_SetPriorityGrouping>
}
 800188e:	bf00      	nop
 8001890:	3708      	adds	r7, #8
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}

08001896 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001896:	b580      	push	{r7, lr}
 8001898:	b086      	sub	sp, #24
 800189a:	af00      	add	r7, sp, #0
 800189c:	4603      	mov	r3, r0
 800189e:	60b9      	str	r1, [r7, #8]
 80018a0:	607a      	str	r2, [r7, #4]
 80018a2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80018a4:	f7ff ff40 	bl	8001728 <__NVIC_GetPriorityGrouping>
 80018a8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018aa:	687a      	ldr	r2, [r7, #4]
 80018ac:	68b9      	ldr	r1, [r7, #8]
 80018ae:	6978      	ldr	r0, [r7, #20]
 80018b0:	f7ff ff90 	bl	80017d4 <NVIC_EncodePriority>
 80018b4:	4602      	mov	r2, r0
 80018b6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80018ba:	4611      	mov	r1, r2
 80018bc:	4618      	mov	r0, r3
 80018be:	f7ff ff5f 	bl	8001780 <__NVIC_SetPriority>
}
 80018c2:	bf00      	nop
 80018c4:	3718      	adds	r7, #24
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}

080018ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018ca:	b580      	push	{r7, lr}
 80018cc:	b082      	sub	sp, #8
 80018ce:	af00      	add	r7, sp, #0
 80018d0:	4603      	mov	r3, r0
 80018d2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018d4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018d8:	4618      	mov	r0, r3
 80018da:	f7ff ff33 	bl	8001744 <__NVIC_EnableIRQ>
}
 80018de:	bf00      	nop
 80018e0:	3708      	adds	r7, #8
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}

080018e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018e6:	b580      	push	{r7, lr}
 80018e8:	b082      	sub	sp, #8
 80018ea:	af00      	add	r7, sp, #0
 80018ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018ee:	6878      	ldr	r0, [r7, #4]
 80018f0:	f7ff ffa4 	bl	800183c <SysTick_Config>
 80018f4:	4603      	mov	r3, r0
}
 80018f6:	4618      	mov	r0, r3
 80018f8:	3708      	adds	r7, #8
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}
	...

08001900 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b082      	sub	sp, #8
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d101      	bne.n	8001912 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800190e:	2301      	movs	r3, #1
 8001910:	e054      	b.n	80019bc <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	7f5b      	ldrb	r3, [r3, #29]
 8001916:	b2db      	uxtb	r3, r3
 8001918:	2b00      	cmp	r3, #0
 800191a:	d105      	bne.n	8001928 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2200      	movs	r2, #0
 8001920:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001922:	6878      	ldr	r0, [r7, #4]
 8001924:	f7ff fbf8 	bl	8001118 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2202      	movs	r2, #2
 800192c:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	791b      	ldrb	r3, [r3, #4]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d10c      	bne.n	8001950 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4a22      	ldr	r2, [pc, #136]	; (80019c4 <HAL_CRC_Init+0xc4>)
 800193c:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	689a      	ldr	r2, [r3, #8]
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f022 0218 	bic.w	r2, r2, #24
 800194c:	609a      	str	r2, [r3, #8]
 800194e:	e00c      	b.n	800196a <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6899      	ldr	r1, [r3, #8]
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	68db      	ldr	r3, [r3, #12]
 8001958:	461a      	mov	r2, r3
 800195a:	6878      	ldr	r0, [r7, #4]
 800195c:	f000 f834 	bl	80019c8 <HAL_CRCEx_Polynomial_Set>
 8001960:	4603      	mov	r3, r0
 8001962:	2b00      	cmp	r3, #0
 8001964:	d001      	beq.n	800196a <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8001966:	2301      	movs	r3, #1
 8001968:	e028      	b.n	80019bc <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	795b      	ldrb	r3, [r3, #5]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d105      	bne.n	800197e <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f04f 32ff 	mov.w	r2, #4294967295
 800197a:	611a      	str	r2, [r3, #16]
 800197c:	e004      	b.n	8001988 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	687a      	ldr	r2, [r7, #4]
 8001984:	6912      	ldr	r2, [r2, #16]
 8001986:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	689b      	ldr	r3, [r3, #8]
 800198e:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	695a      	ldr	r2, [r3, #20]
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	430a      	orrs	r2, r1
 800199c:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	689b      	ldr	r3, [r3, #8]
 80019a4:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	699a      	ldr	r2, [r3, #24]
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	430a      	orrs	r2, r1
 80019b2:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2201      	movs	r2, #1
 80019b8:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80019ba:	2300      	movs	r3, #0
}
 80019bc:	4618      	mov	r0, r3
 80019be:	3708      	adds	r7, #8
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd80      	pop	{r7, pc}
 80019c4:	04c11db7 	.word	0x04c11db7

080019c8 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b087      	sub	sp, #28
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	60f8      	str	r0, [r7, #12]
 80019d0:	60b9      	str	r1, [r7, #8]
 80019d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80019d4:	2300      	movs	r3, #0
 80019d6:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80019d8:	231f      	movs	r3, #31
 80019da:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80019dc:	bf00      	nop
 80019de:	693b      	ldr	r3, [r7, #16]
 80019e0:	1e5a      	subs	r2, r3, #1
 80019e2:	613a      	str	r2, [r7, #16]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d009      	beq.n	80019fc <HAL_CRCEx_Polynomial_Set+0x34>
 80019e8:	693b      	ldr	r3, [r7, #16]
 80019ea:	f003 031f 	and.w	r3, r3, #31
 80019ee:	68ba      	ldr	r2, [r7, #8]
 80019f0:	fa22 f303 	lsr.w	r3, r2, r3
 80019f4:	f003 0301 	and.w	r3, r3, #1
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d0f0      	beq.n	80019de <HAL_CRCEx_Polynomial_Set+0x16>
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2b18      	cmp	r3, #24
 8001a00:	d846      	bhi.n	8001a90 <HAL_CRCEx_Polynomial_Set+0xc8>
 8001a02:	a201      	add	r2, pc, #4	; (adr r2, 8001a08 <HAL_CRCEx_Polynomial_Set+0x40>)
 8001a04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a08:	08001a97 	.word	0x08001a97
 8001a0c:	08001a91 	.word	0x08001a91
 8001a10:	08001a91 	.word	0x08001a91
 8001a14:	08001a91 	.word	0x08001a91
 8001a18:	08001a91 	.word	0x08001a91
 8001a1c:	08001a91 	.word	0x08001a91
 8001a20:	08001a91 	.word	0x08001a91
 8001a24:	08001a91 	.word	0x08001a91
 8001a28:	08001a85 	.word	0x08001a85
 8001a2c:	08001a91 	.word	0x08001a91
 8001a30:	08001a91 	.word	0x08001a91
 8001a34:	08001a91 	.word	0x08001a91
 8001a38:	08001a91 	.word	0x08001a91
 8001a3c:	08001a91 	.word	0x08001a91
 8001a40:	08001a91 	.word	0x08001a91
 8001a44:	08001a91 	.word	0x08001a91
 8001a48:	08001a79 	.word	0x08001a79
 8001a4c:	08001a91 	.word	0x08001a91
 8001a50:	08001a91 	.word	0x08001a91
 8001a54:	08001a91 	.word	0x08001a91
 8001a58:	08001a91 	.word	0x08001a91
 8001a5c:	08001a91 	.word	0x08001a91
 8001a60:	08001a91 	.word	0x08001a91
 8001a64:	08001a91 	.word	0x08001a91
 8001a68:	08001a6d 	.word	0x08001a6d
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8001a6c:	693b      	ldr	r3, [r7, #16]
 8001a6e:	2b06      	cmp	r3, #6
 8001a70:	d913      	bls.n	8001a9a <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8001a72:	2301      	movs	r3, #1
 8001a74:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8001a76:	e010      	b.n	8001a9a <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8001a78:	693b      	ldr	r3, [r7, #16]
 8001a7a:	2b07      	cmp	r3, #7
 8001a7c:	d90f      	bls.n	8001a9e <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8001a82:	e00c      	b.n	8001a9e <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8001a84:	693b      	ldr	r3, [r7, #16]
 8001a86:	2b0f      	cmp	r3, #15
 8001a88:	d90b      	bls.n	8001aa2 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8001a8e:	e008      	b.n	8001aa2 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8001a90:	2301      	movs	r3, #1
 8001a92:	75fb      	strb	r3, [r7, #23]
      break;
 8001a94:	e006      	b.n	8001aa4 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001a96:	bf00      	nop
 8001a98:	e004      	b.n	8001aa4 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001a9a:	bf00      	nop
 8001a9c:	e002      	b.n	8001aa4 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001a9e:	bf00      	nop
 8001aa0:	e000      	b.n	8001aa4 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001aa2:	bf00      	nop
  }
  if (status == HAL_OK)
 8001aa4:	7dfb      	ldrb	r3, [r7, #23]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d10d      	bne.n	8001ac6 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	68ba      	ldr	r2, [r7, #8]
 8001ab0:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	689b      	ldr	r3, [r3, #8]
 8001ab8:	f023 0118 	bic.w	r1, r3, #24
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	687a      	ldr	r2, [r7, #4]
 8001ac2:	430a      	orrs	r2, r1
 8001ac4:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8001ac6:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	371c      	adds	r7, #28
 8001acc:	46bd      	mov	sp, r7
 8001ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad2:	4770      	bx	lr

08001ad4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b086      	sub	sp, #24
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001adc:	f7ff fde8 	bl	80016b0 <HAL_GetTick>
 8001ae0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d101      	bne.n	8001aec <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001ae8:	2301      	movs	r3, #1
 8001aea:	e316      	b.n	800211a <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a66      	ldr	r2, [pc, #408]	; (8001c8c <HAL_DMA_Init+0x1b8>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d04a      	beq.n	8001b8c <HAL_DMA_Init+0xb8>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4a65      	ldr	r2, [pc, #404]	; (8001c90 <HAL_DMA_Init+0x1bc>)
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d045      	beq.n	8001b8c <HAL_DMA_Init+0xb8>
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a63      	ldr	r2, [pc, #396]	; (8001c94 <HAL_DMA_Init+0x1c0>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d040      	beq.n	8001b8c <HAL_DMA_Init+0xb8>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4a62      	ldr	r2, [pc, #392]	; (8001c98 <HAL_DMA_Init+0x1c4>)
 8001b10:	4293      	cmp	r3, r2
 8001b12:	d03b      	beq.n	8001b8c <HAL_DMA_Init+0xb8>
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4a60      	ldr	r2, [pc, #384]	; (8001c9c <HAL_DMA_Init+0x1c8>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d036      	beq.n	8001b8c <HAL_DMA_Init+0xb8>
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4a5f      	ldr	r2, [pc, #380]	; (8001ca0 <HAL_DMA_Init+0x1cc>)
 8001b24:	4293      	cmp	r3, r2
 8001b26:	d031      	beq.n	8001b8c <HAL_DMA_Init+0xb8>
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a5d      	ldr	r2, [pc, #372]	; (8001ca4 <HAL_DMA_Init+0x1d0>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d02c      	beq.n	8001b8c <HAL_DMA_Init+0xb8>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4a5c      	ldr	r2, [pc, #368]	; (8001ca8 <HAL_DMA_Init+0x1d4>)
 8001b38:	4293      	cmp	r3, r2
 8001b3a:	d027      	beq.n	8001b8c <HAL_DMA_Init+0xb8>
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a5a      	ldr	r2, [pc, #360]	; (8001cac <HAL_DMA_Init+0x1d8>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d022      	beq.n	8001b8c <HAL_DMA_Init+0xb8>
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4a59      	ldr	r2, [pc, #356]	; (8001cb0 <HAL_DMA_Init+0x1dc>)
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	d01d      	beq.n	8001b8c <HAL_DMA_Init+0xb8>
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a57      	ldr	r2, [pc, #348]	; (8001cb4 <HAL_DMA_Init+0x1e0>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d018      	beq.n	8001b8c <HAL_DMA_Init+0xb8>
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4a56      	ldr	r2, [pc, #344]	; (8001cb8 <HAL_DMA_Init+0x1e4>)
 8001b60:	4293      	cmp	r3, r2
 8001b62:	d013      	beq.n	8001b8c <HAL_DMA_Init+0xb8>
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a54      	ldr	r2, [pc, #336]	; (8001cbc <HAL_DMA_Init+0x1e8>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d00e      	beq.n	8001b8c <HAL_DMA_Init+0xb8>
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4a53      	ldr	r2, [pc, #332]	; (8001cc0 <HAL_DMA_Init+0x1ec>)
 8001b74:	4293      	cmp	r3, r2
 8001b76:	d009      	beq.n	8001b8c <HAL_DMA_Init+0xb8>
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a51      	ldr	r2, [pc, #324]	; (8001cc4 <HAL_DMA_Init+0x1f0>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d004      	beq.n	8001b8c <HAL_DMA_Init+0xb8>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4a50      	ldr	r2, [pc, #320]	; (8001cc8 <HAL_DMA_Init+0x1f4>)
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d101      	bne.n	8001b90 <HAL_DMA_Init+0xbc>
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	e000      	b.n	8001b92 <HAL_DMA_Init+0xbe>
 8001b90:	2300      	movs	r3, #0
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	f000 813b 	beq.w	8001e0e <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2202      	movs	r2, #2
 8001ba4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a37      	ldr	r2, [pc, #220]	; (8001c8c <HAL_DMA_Init+0x1b8>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d04a      	beq.n	8001c48 <HAL_DMA_Init+0x174>
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4a36      	ldr	r2, [pc, #216]	; (8001c90 <HAL_DMA_Init+0x1bc>)
 8001bb8:	4293      	cmp	r3, r2
 8001bba:	d045      	beq.n	8001c48 <HAL_DMA_Init+0x174>
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a34      	ldr	r2, [pc, #208]	; (8001c94 <HAL_DMA_Init+0x1c0>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d040      	beq.n	8001c48 <HAL_DMA_Init+0x174>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4a33      	ldr	r2, [pc, #204]	; (8001c98 <HAL_DMA_Init+0x1c4>)
 8001bcc:	4293      	cmp	r3, r2
 8001bce:	d03b      	beq.n	8001c48 <HAL_DMA_Init+0x174>
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4a31      	ldr	r2, [pc, #196]	; (8001c9c <HAL_DMA_Init+0x1c8>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d036      	beq.n	8001c48 <HAL_DMA_Init+0x174>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4a30      	ldr	r2, [pc, #192]	; (8001ca0 <HAL_DMA_Init+0x1cc>)
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d031      	beq.n	8001c48 <HAL_DMA_Init+0x174>
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a2e      	ldr	r2, [pc, #184]	; (8001ca4 <HAL_DMA_Init+0x1d0>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d02c      	beq.n	8001c48 <HAL_DMA_Init+0x174>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4a2d      	ldr	r2, [pc, #180]	; (8001ca8 <HAL_DMA_Init+0x1d4>)
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	d027      	beq.n	8001c48 <HAL_DMA_Init+0x174>
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a2b      	ldr	r2, [pc, #172]	; (8001cac <HAL_DMA_Init+0x1d8>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d022      	beq.n	8001c48 <HAL_DMA_Init+0x174>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4a2a      	ldr	r2, [pc, #168]	; (8001cb0 <HAL_DMA_Init+0x1dc>)
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d01d      	beq.n	8001c48 <HAL_DMA_Init+0x174>
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a28      	ldr	r2, [pc, #160]	; (8001cb4 <HAL_DMA_Init+0x1e0>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d018      	beq.n	8001c48 <HAL_DMA_Init+0x174>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4a27      	ldr	r2, [pc, #156]	; (8001cb8 <HAL_DMA_Init+0x1e4>)
 8001c1c:	4293      	cmp	r3, r2
 8001c1e:	d013      	beq.n	8001c48 <HAL_DMA_Init+0x174>
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4a25      	ldr	r2, [pc, #148]	; (8001cbc <HAL_DMA_Init+0x1e8>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d00e      	beq.n	8001c48 <HAL_DMA_Init+0x174>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4a24      	ldr	r2, [pc, #144]	; (8001cc0 <HAL_DMA_Init+0x1ec>)
 8001c30:	4293      	cmp	r3, r2
 8001c32:	d009      	beq.n	8001c48 <HAL_DMA_Init+0x174>
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a22      	ldr	r2, [pc, #136]	; (8001cc4 <HAL_DMA_Init+0x1f0>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d004      	beq.n	8001c48 <HAL_DMA_Init+0x174>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4a21      	ldr	r2, [pc, #132]	; (8001cc8 <HAL_DMA_Init+0x1f4>)
 8001c44:	4293      	cmp	r3, r2
 8001c46:	d108      	bne.n	8001c5a <HAL_DMA_Init+0x186>
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	681a      	ldr	r2, [r3, #0]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f022 0201 	bic.w	r2, r2, #1
 8001c56:	601a      	str	r2, [r3, #0]
 8001c58:	e007      	b.n	8001c6a <HAL_DMA_Init+0x196>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	681a      	ldr	r2, [r3, #0]
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f022 0201 	bic.w	r2, r2, #1
 8001c68:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001c6a:	e02f      	b.n	8001ccc <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001c6c:	f7ff fd20 	bl	80016b0 <HAL_GetTick>
 8001c70:	4602      	mov	r2, r0
 8001c72:	693b      	ldr	r3, [r7, #16]
 8001c74:	1ad3      	subs	r3, r2, r3
 8001c76:	2b05      	cmp	r3, #5
 8001c78:	d928      	bls.n	8001ccc <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2220      	movs	r2, #32
 8001c7e:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2203      	movs	r2, #3
 8001c84:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8001c88:	2301      	movs	r3, #1
 8001c8a:	e246      	b.n	800211a <HAL_DMA_Init+0x646>
 8001c8c:	40020010 	.word	0x40020010
 8001c90:	40020028 	.word	0x40020028
 8001c94:	40020040 	.word	0x40020040
 8001c98:	40020058 	.word	0x40020058
 8001c9c:	40020070 	.word	0x40020070
 8001ca0:	40020088 	.word	0x40020088
 8001ca4:	400200a0 	.word	0x400200a0
 8001ca8:	400200b8 	.word	0x400200b8
 8001cac:	40020410 	.word	0x40020410
 8001cb0:	40020428 	.word	0x40020428
 8001cb4:	40020440 	.word	0x40020440
 8001cb8:	40020458 	.word	0x40020458
 8001cbc:	40020470 	.word	0x40020470
 8001cc0:	40020488 	.word	0x40020488
 8001cc4:	400204a0 	.word	0x400204a0
 8001cc8:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f003 0301 	and.w	r3, r3, #1
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d1c8      	bne.n	8001c6c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001ce2:	697a      	ldr	r2, [r7, #20]
 8001ce4:	4b83      	ldr	r3, [pc, #524]	; (8001ef4 <HAL_DMA_Init+0x420>)
 8001ce6:	4013      	ands	r3, r2
 8001ce8:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8001cf2:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	691b      	ldr	r3, [r3, #16]
 8001cf8:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001cfe:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	699b      	ldr	r3, [r3, #24]
 8001d04:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d0a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6a1b      	ldr	r3, [r3, #32]
 8001d10:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8001d12:	697a      	ldr	r2, [r7, #20]
 8001d14:	4313      	orrs	r3, r2
 8001d16:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d1c:	2b04      	cmp	r3, #4
 8001d1e:	d107      	bne.n	8001d30 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d28:	4313      	orrs	r3, r2
 8001d2a:	697a      	ldr	r2, [r7, #20]
 8001d2c:	4313      	orrs	r3, r2
 8001d2e:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8001d30:	4b71      	ldr	r3, [pc, #452]	; (8001ef8 <HAL_DMA_Init+0x424>)
 8001d32:	681a      	ldr	r2, [r3, #0]
 8001d34:	4b71      	ldr	r3, [pc, #452]	; (8001efc <HAL_DMA_Init+0x428>)
 8001d36:	4013      	ands	r3, r2
 8001d38:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001d3c:	d328      	bcc.n	8001d90 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	2b28      	cmp	r3, #40	; 0x28
 8001d44:	d903      	bls.n	8001d4e <HAL_DMA_Init+0x27a>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	2b2e      	cmp	r3, #46	; 0x2e
 8001d4c:	d917      	bls.n	8001d7e <HAL_DMA_Init+0x2aa>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	2b3e      	cmp	r3, #62	; 0x3e
 8001d54:	d903      	bls.n	8001d5e <HAL_DMA_Init+0x28a>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	2b42      	cmp	r3, #66	; 0x42
 8001d5c:	d90f      	bls.n	8001d7e <HAL_DMA_Init+0x2aa>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	2b46      	cmp	r3, #70	; 0x46
 8001d64:	d903      	bls.n	8001d6e <HAL_DMA_Init+0x29a>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	2b48      	cmp	r3, #72	; 0x48
 8001d6c:	d907      	bls.n	8001d7e <HAL_DMA_Init+0x2aa>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	2b4e      	cmp	r3, #78	; 0x4e
 8001d74:	d905      	bls.n	8001d82 <HAL_DMA_Init+0x2ae>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	2b52      	cmp	r3, #82	; 0x52
 8001d7c:	d801      	bhi.n	8001d82 <HAL_DMA_Init+0x2ae>
 8001d7e:	2301      	movs	r3, #1
 8001d80:	e000      	b.n	8001d84 <HAL_DMA_Init+0x2b0>
 8001d82:	2300      	movs	r3, #0
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d003      	beq.n	8001d90 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8001d88:	697b      	ldr	r3, [r7, #20]
 8001d8a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001d8e:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	697a      	ldr	r2, [r7, #20]
 8001d96:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	695b      	ldr	r3, [r3, #20]
 8001d9e:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	f023 0307 	bic.w	r3, r3, #7
 8001da6:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dac:	697a      	ldr	r2, [r7, #20]
 8001dae:	4313      	orrs	r3, r2
 8001db0:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db6:	2b04      	cmp	r3, #4
 8001db8:	d117      	bne.n	8001dea <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dbe:	697a      	ldr	r2, [r7, #20]
 8001dc0:	4313      	orrs	r3, r2
 8001dc2:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d00e      	beq.n	8001dea <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001dcc:	6878      	ldr	r0, [r7, #4]
 8001dce:	f002 fb3d 	bl	800444c <DMA_CheckFifoParam>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d008      	beq.n	8001dea <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2240      	movs	r2, #64	; 0x40
 8001ddc:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2201      	movs	r2, #1
 8001de2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8001de6:	2301      	movs	r3, #1
 8001de8:	e197      	b.n	800211a <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	697a      	ldr	r2, [r7, #20]
 8001df0:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001df2:	6878      	ldr	r0, [r7, #4]
 8001df4:	f002 fa78 	bl	80042e8 <DMA_CalcBaseAndBitshift>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e00:	f003 031f 	and.w	r3, r3, #31
 8001e04:	223f      	movs	r2, #63	; 0x3f
 8001e06:	409a      	lsls	r2, r3
 8001e08:	68bb      	ldr	r3, [r7, #8]
 8001e0a:	609a      	str	r2, [r3, #8]
 8001e0c:	e0cd      	b.n	8001faa <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4a3b      	ldr	r2, [pc, #236]	; (8001f00 <HAL_DMA_Init+0x42c>)
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d022      	beq.n	8001e5e <HAL_DMA_Init+0x38a>
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a39      	ldr	r2, [pc, #228]	; (8001f04 <HAL_DMA_Init+0x430>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d01d      	beq.n	8001e5e <HAL_DMA_Init+0x38a>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4a38      	ldr	r2, [pc, #224]	; (8001f08 <HAL_DMA_Init+0x434>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d018      	beq.n	8001e5e <HAL_DMA_Init+0x38a>
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a36      	ldr	r2, [pc, #216]	; (8001f0c <HAL_DMA_Init+0x438>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d013      	beq.n	8001e5e <HAL_DMA_Init+0x38a>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4a35      	ldr	r2, [pc, #212]	; (8001f10 <HAL_DMA_Init+0x43c>)
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d00e      	beq.n	8001e5e <HAL_DMA_Init+0x38a>
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a33      	ldr	r2, [pc, #204]	; (8001f14 <HAL_DMA_Init+0x440>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d009      	beq.n	8001e5e <HAL_DMA_Init+0x38a>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4a32      	ldr	r2, [pc, #200]	; (8001f18 <HAL_DMA_Init+0x444>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d004      	beq.n	8001e5e <HAL_DMA_Init+0x38a>
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a30      	ldr	r2, [pc, #192]	; (8001f1c <HAL_DMA_Init+0x448>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d101      	bne.n	8001e62 <HAL_DMA_Init+0x38e>
 8001e5e:	2301      	movs	r3, #1
 8001e60:	e000      	b.n	8001e64 <HAL_DMA_Init+0x390>
 8001e62:	2300      	movs	r3, #0
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	f000 8097 	beq.w	8001f98 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4a24      	ldr	r2, [pc, #144]	; (8001f00 <HAL_DMA_Init+0x42c>)
 8001e70:	4293      	cmp	r3, r2
 8001e72:	d021      	beq.n	8001eb8 <HAL_DMA_Init+0x3e4>
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a22      	ldr	r2, [pc, #136]	; (8001f04 <HAL_DMA_Init+0x430>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d01c      	beq.n	8001eb8 <HAL_DMA_Init+0x3e4>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4a21      	ldr	r2, [pc, #132]	; (8001f08 <HAL_DMA_Init+0x434>)
 8001e84:	4293      	cmp	r3, r2
 8001e86:	d017      	beq.n	8001eb8 <HAL_DMA_Init+0x3e4>
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a1f      	ldr	r2, [pc, #124]	; (8001f0c <HAL_DMA_Init+0x438>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d012      	beq.n	8001eb8 <HAL_DMA_Init+0x3e4>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4a1e      	ldr	r2, [pc, #120]	; (8001f10 <HAL_DMA_Init+0x43c>)
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d00d      	beq.n	8001eb8 <HAL_DMA_Init+0x3e4>
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a1c      	ldr	r2, [pc, #112]	; (8001f14 <HAL_DMA_Init+0x440>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d008      	beq.n	8001eb8 <HAL_DMA_Init+0x3e4>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4a1b      	ldr	r2, [pc, #108]	; (8001f18 <HAL_DMA_Init+0x444>)
 8001eac:	4293      	cmp	r3, r2
 8001eae:	d003      	beq.n	8001eb8 <HAL_DMA_Init+0x3e4>
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a19      	ldr	r2, [pc, #100]	; (8001f1c <HAL_DMA_Init+0x448>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2202      	movs	r2, #2
 8001ec6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8001ed2:	697a      	ldr	r2, [r7, #20]
 8001ed4:	4b12      	ldr	r3, [pc, #72]	; (8001f20 <HAL_DMA_Init+0x44c>)
 8001ed6:	4013      	ands	r3, r2
 8001ed8:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	689b      	ldr	r3, [r3, #8]
 8001ede:	2b40      	cmp	r3, #64	; 0x40
 8001ee0:	d020      	beq.n	8001f24 <HAL_DMA_Init+0x450>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	689b      	ldr	r3, [r3, #8]
 8001ee6:	2b80      	cmp	r3, #128	; 0x80
 8001ee8:	d102      	bne.n	8001ef0 <HAL_DMA_Init+0x41c>
 8001eea:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001eee:	e01a      	b.n	8001f26 <HAL_DMA_Init+0x452>
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	e018      	b.n	8001f26 <HAL_DMA_Init+0x452>
 8001ef4:	fe10803f 	.word	0xfe10803f
 8001ef8:	5c001000 	.word	0x5c001000
 8001efc:	ffff0000 	.word	0xffff0000
 8001f00:	58025408 	.word	0x58025408
 8001f04:	5802541c 	.word	0x5802541c
 8001f08:	58025430 	.word	0x58025430
 8001f0c:	58025444 	.word	0x58025444
 8001f10:	58025458 	.word	0x58025458
 8001f14:	5802546c 	.word	0x5802546c
 8001f18:	58025480 	.word	0x58025480
 8001f1c:	58025494 	.word	0x58025494
 8001f20:	fffe000f 	.word	0xfffe000f
 8001f24:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001f26:	687a      	ldr	r2, [r7, #4]
 8001f28:	68d2      	ldr	r2, [r2, #12]
 8001f2a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001f2c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	691b      	ldr	r3, [r3, #16]
 8001f32:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001f34:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	695b      	ldr	r3, [r3, #20]
 8001f3a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001f3c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	699b      	ldr	r3, [r3, #24]
 8001f42:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001f44:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	69db      	ldr	r3, [r3, #28]
 8001f4a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001f4c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6a1b      	ldr	r3, [r3, #32]
 8001f52:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001f54:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001f56:	697a      	ldr	r2, [r7, #20]
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	697a      	ldr	r2, [r7, #20]
 8001f62:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	461a      	mov	r2, r3
 8001f6a:	4b6e      	ldr	r3, [pc, #440]	; (8002124 <HAL_DMA_Init+0x650>)
 8001f6c:	4413      	add	r3, r2
 8001f6e:	4a6e      	ldr	r2, [pc, #440]	; (8002128 <HAL_DMA_Init+0x654>)
 8001f70:	fba2 2303 	umull	r2, r3, r2, r3
 8001f74:	091b      	lsrs	r3, r3, #4
 8001f76:	009a      	lsls	r2, r3, #2
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001f7c:	6878      	ldr	r0, [r7, #4]
 8001f7e:	f002 f9b3 	bl	80042e8 <DMA_CalcBaseAndBitshift>
 8001f82:	4603      	mov	r3, r0
 8001f84:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f8a:	f003 031f 	and.w	r3, r3, #31
 8001f8e:	2201      	movs	r2, #1
 8001f90:	409a      	lsls	r2, r3
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	605a      	str	r2, [r3, #4]
 8001f96:	e008      	b.n	8001faa <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2240      	movs	r2, #64	; 0x40
 8001f9c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2203      	movs	r2, #3
 8001fa2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e0b7      	b.n	800211a <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4a5f      	ldr	r2, [pc, #380]	; (800212c <HAL_DMA_Init+0x658>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d072      	beq.n	800209a <HAL_DMA_Init+0x5c6>
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a5d      	ldr	r2, [pc, #372]	; (8002130 <HAL_DMA_Init+0x65c>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d06d      	beq.n	800209a <HAL_DMA_Init+0x5c6>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4a5c      	ldr	r2, [pc, #368]	; (8002134 <HAL_DMA_Init+0x660>)
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d068      	beq.n	800209a <HAL_DMA_Init+0x5c6>
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4a5a      	ldr	r2, [pc, #360]	; (8002138 <HAL_DMA_Init+0x664>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d063      	beq.n	800209a <HAL_DMA_Init+0x5c6>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4a59      	ldr	r2, [pc, #356]	; (800213c <HAL_DMA_Init+0x668>)
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d05e      	beq.n	800209a <HAL_DMA_Init+0x5c6>
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a57      	ldr	r2, [pc, #348]	; (8002140 <HAL_DMA_Init+0x66c>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d059      	beq.n	800209a <HAL_DMA_Init+0x5c6>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4a56      	ldr	r2, [pc, #344]	; (8002144 <HAL_DMA_Init+0x670>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d054      	beq.n	800209a <HAL_DMA_Init+0x5c6>
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a54      	ldr	r2, [pc, #336]	; (8002148 <HAL_DMA_Init+0x674>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d04f      	beq.n	800209a <HAL_DMA_Init+0x5c6>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4a53      	ldr	r2, [pc, #332]	; (800214c <HAL_DMA_Init+0x678>)
 8002000:	4293      	cmp	r3, r2
 8002002:	d04a      	beq.n	800209a <HAL_DMA_Init+0x5c6>
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a51      	ldr	r2, [pc, #324]	; (8002150 <HAL_DMA_Init+0x67c>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d045      	beq.n	800209a <HAL_DMA_Init+0x5c6>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4a50      	ldr	r2, [pc, #320]	; (8002154 <HAL_DMA_Init+0x680>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d040      	beq.n	800209a <HAL_DMA_Init+0x5c6>
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a4e      	ldr	r2, [pc, #312]	; (8002158 <HAL_DMA_Init+0x684>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d03b      	beq.n	800209a <HAL_DMA_Init+0x5c6>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4a4d      	ldr	r2, [pc, #308]	; (800215c <HAL_DMA_Init+0x688>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d036      	beq.n	800209a <HAL_DMA_Init+0x5c6>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a4b      	ldr	r2, [pc, #300]	; (8002160 <HAL_DMA_Init+0x68c>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d031      	beq.n	800209a <HAL_DMA_Init+0x5c6>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4a4a      	ldr	r2, [pc, #296]	; (8002164 <HAL_DMA_Init+0x690>)
 800203c:	4293      	cmp	r3, r2
 800203e:	d02c      	beq.n	800209a <HAL_DMA_Init+0x5c6>
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a48      	ldr	r2, [pc, #288]	; (8002168 <HAL_DMA_Init+0x694>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d027      	beq.n	800209a <HAL_DMA_Init+0x5c6>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4a47      	ldr	r2, [pc, #284]	; (800216c <HAL_DMA_Init+0x698>)
 8002050:	4293      	cmp	r3, r2
 8002052:	d022      	beq.n	800209a <HAL_DMA_Init+0x5c6>
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a45      	ldr	r2, [pc, #276]	; (8002170 <HAL_DMA_Init+0x69c>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d01d      	beq.n	800209a <HAL_DMA_Init+0x5c6>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4a44      	ldr	r2, [pc, #272]	; (8002174 <HAL_DMA_Init+0x6a0>)
 8002064:	4293      	cmp	r3, r2
 8002066:	d018      	beq.n	800209a <HAL_DMA_Init+0x5c6>
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4a42      	ldr	r2, [pc, #264]	; (8002178 <HAL_DMA_Init+0x6a4>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d013      	beq.n	800209a <HAL_DMA_Init+0x5c6>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4a41      	ldr	r2, [pc, #260]	; (800217c <HAL_DMA_Init+0x6a8>)
 8002078:	4293      	cmp	r3, r2
 800207a:	d00e      	beq.n	800209a <HAL_DMA_Init+0x5c6>
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4a3f      	ldr	r2, [pc, #252]	; (8002180 <HAL_DMA_Init+0x6ac>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d009      	beq.n	800209a <HAL_DMA_Init+0x5c6>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4a3e      	ldr	r2, [pc, #248]	; (8002184 <HAL_DMA_Init+0x6b0>)
 800208c:	4293      	cmp	r3, r2
 800208e:	d004      	beq.n	800209a <HAL_DMA_Init+0x5c6>
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a3c      	ldr	r2, [pc, #240]	; (8002188 <HAL_DMA_Init+0x6b4>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d101      	bne.n	800209e <HAL_DMA_Init+0x5ca>
 800209a:	2301      	movs	r3, #1
 800209c:	e000      	b.n	80020a0 <HAL_DMA_Init+0x5cc>
 800209e:	2300      	movs	r3, #0
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d032      	beq.n	800210a <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80020a4:	6878      	ldr	r0, [r7, #4]
 80020a6:	f002 fa4d 	bl	8004544 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	689b      	ldr	r3, [r3, #8]
 80020ae:	2b80      	cmp	r3, #128	; 0x80
 80020b0:	d102      	bne.n	80020b8 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2200      	movs	r2, #0
 80020b6:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	685a      	ldr	r2, [r3, #4]
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020c0:	b2d2      	uxtb	r2, r2
 80020c2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80020c8:	687a      	ldr	r2, [r7, #4]
 80020ca:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80020cc:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d010      	beq.n	80020f8 <HAL_DMA_Init+0x624>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	2b08      	cmp	r3, #8
 80020dc:	d80c      	bhi.n	80020f8 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80020de:	6878      	ldr	r0, [r7, #4]
 80020e0:	f002 faca 	bl	8004678 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80020e8:	2200      	movs	r2, #0
 80020ea:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020f0:	687a      	ldr	r2, [r7, #4]
 80020f2:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80020f4:	605a      	str	r2, [r3, #4]
 80020f6:	e008      	b.n	800210a <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2200      	movs	r2, #0
 80020fc:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2200      	movs	r2, #0
 8002102:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2200      	movs	r2, #0
 8002108:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2200      	movs	r2, #0
 800210e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2201      	movs	r2, #1
 8002114:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002118:	2300      	movs	r3, #0
}
 800211a:	4618      	mov	r0, r3
 800211c:	3718      	adds	r7, #24
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}
 8002122:	bf00      	nop
 8002124:	a7fdabf8 	.word	0xa7fdabf8
 8002128:	cccccccd 	.word	0xcccccccd
 800212c:	40020010 	.word	0x40020010
 8002130:	40020028 	.word	0x40020028
 8002134:	40020040 	.word	0x40020040
 8002138:	40020058 	.word	0x40020058
 800213c:	40020070 	.word	0x40020070
 8002140:	40020088 	.word	0x40020088
 8002144:	400200a0 	.word	0x400200a0
 8002148:	400200b8 	.word	0x400200b8
 800214c:	40020410 	.word	0x40020410
 8002150:	40020428 	.word	0x40020428
 8002154:	40020440 	.word	0x40020440
 8002158:	40020458 	.word	0x40020458
 800215c:	40020470 	.word	0x40020470
 8002160:	40020488 	.word	0x40020488
 8002164:	400204a0 	.word	0x400204a0
 8002168:	400204b8 	.word	0x400204b8
 800216c:	58025408 	.word	0x58025408
 8002170:	5802541c 	.word	0x5802541c
 8002174:	58025430 	.word	0x58025430
 8002178:	58025444 	.word	0x58025444
 800217c:	58025458 	.word	0x58025458
 8002180:	5802546c 	.word	0x5802546c
 8002184:	58025480 	.word	0x58025480
 8002188:	58025494 	.word	0x58025494

0800218c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b086      	sub	sp, #24
 8002190:	af00      	add	r7, sp, #0
 8002192:	60f8      	str	r0, [r7, #12]
 8002194:	60b9      	str	r1, [r7, #8]
 8002196:	607a      	str	r2, [r7, #4]
 8002198:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800219a:	2300      	movs	r3, #0
 800219c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d101      	bne.n	80021a8 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80021a4:	2301      	movs	r3, #1
 80021a6:	e226      	b.n	80025f6 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80021ae:	2b01      	cmp	r3, #1
 80021b0:	d101      	bne.n	80021b6 <HAL_DMA_Start_IT+0x2a>
 80021b2:	2302      	movs	r3, #2
 80021b4:	e21f      	b.n	80025f6 <HAL_DMA_Start_IT+0x46a>
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	2201      	movs	r2, #1
 80021ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80021c4:	b2db      	uxtb	r3, r3
 80021c6:	2b01      	cmp	r3, #1
 80021c8:	f040 820a 	bne.w	80025e0 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	2202      	movs	r2, #2
 80021d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	2200      	movs	r2, #0
 80021d8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4a68      	ldr	r2, [pc, #416]	; (8002380 <HAL_DMA_Start_IT+0x1f4>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d04a      	beq.n	800227a <HAL_DMA_Start_IT+0xee>
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a66      	ldr	r2, [pc, #408]	; (8002384 <HAL_DMA_Start_IT+0x1f8>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d045      	beq.n	800227a <HAL_DMA_Start_IT+0xee>
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4a65      	ldr	r2, [pc, #404]	; (8002388 <HAL_DMA_Start_IT+0x1fc>)
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d040      	beq.n	800227a <HAL_DMA_Start_IT+0xee>
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a63      	ldr	r2, [pc, #396]	; (800238c <HAL_DMA_Start_IT+0x200>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d03b      	beq.n	800227a <HAL_DMA_Start_IT+0xee>
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4a62      	ldr	r2, [pc, #392]	; (8002390 <HAL_DMA_Start_IT+0x204>)
 8002208:	4293      	cmp	r3, r2
 800220a:	d036      	beq.n	800227a <HAL_DMA_Start_IT+0xee>
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4a60      	ldr	r2, [pc, #384]	; (8002394 <HAL_DMA_Start_IT+0x208>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d031      	beq.n	800227a <HAL_DMA_Start_IT+0xee>
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4a5f      	ldr	r2, [pc, #380]	; (8002398 <HAL_DMA_Start_IT+0x20c>)
 800221c:	4293      	cmp	r3, r2
 800221e:	d02c      	beq.n	800227a <HAL_DMA_Start_IT+0xee>
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a5d      	ldr	r2, [pc, #372]	; (800239c <HAL_DMA_Start_IT+0x210>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d027      	beq.n	800227a <HAL_DMA_Start_IT+0xee>
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4a5c      	ldr	r2, [pc, #368]	; (80023a0 <HAL_DMA_Start_IT+0x214>)
 8002230:	4293      	cmp	r3, r2
 8002232:	d022      	beq.n	800227a <HAL_DMA_Start_IT+0xee>
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a5a      	ldr	r2, [pc, #360]	; (80023a4 <HAL_DMA_Start_IT+0x218>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d01d      	beq.n	800227a <HAL_DMA_Start_IT+0xee>
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4a59      	ldr	r2, [pc, #356]	; (80023a8 <HAL_DMA_Start_IT+0x21c>)
 8002244:	4293      	cmp	r3, r2
 8002246:	d018      	beq.n	800227a <HAL_DMA_Start_IT+0xee>
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a57      	ldr	r2, [pc, #348]	; (80023ac <HAL_DMA_Start_IT+0x220>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d013      	beq.n	800227a <HAL_DMA_Start_IT+0xee>
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4a56      	ldr	r2, [pc, #344]	; (80023b0 <HAL_DMA_Start_IT+0x224>)
 8002258:	4293      	cmp	r3, r2
 800225a:	d00e      	beq.n	800227a <HAL_DMA_Start_IT+0xee>
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a54      	ldr	r2, [pc, #336]	; (80023b4 <HAL_DMA_Start_IT+0x228>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d009      	beq.n	800227a <HAL_DMA_Start_IT+0xee>
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4a53      	ldr	r2, [pc, #332]	; (80023b8 <HAL_DMA_Start_IT+0x22c>)
 800226c:	4293      	cmp	r3, r2
 800226e:	d004      	beq.n	800227a <HAL_DMA_Start_IT+0xee>
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a51      	ldr	r2, [pc, #324]	; (80023bc <HAL_DMA_Start_IT+0x230>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d108      	bne.n	800228c <HAL_DMA_Start_IT+0x100>
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	681a      	ldr	r2, [r3, #0]
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f022 0201 	bic.w	r2, r2, #1
 8002288:	601a      	str	r2, [r3, #0]
 800228a:	e007      	b.n	800229c <HAL_DMA_Start_IT+0x110>
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	681a      	ldr	r2, [r3, #0]
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f022 0201 	bic.w	r2, r2, #1
 800229a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	687a      	ldr	r2, [r7, #4]
 80022a0:	68b9      	ldr	r1, [r7, #8]
 80022a2:	68f8      	ldr	r0, [r7, #12]
 80022a4:	f001 fe74 	bl	8003f90 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a34      	ldr	r2, [pc, #208]	; (8002380 <HAL_DMA_Start_IT+0x1f4>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d04a      	beq.n	8002348 <HAL_DMA_Start_IT+0x1bc>
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4a33      	ldr	r2, [pc, #204]	; (8002384 <HAL_DMA_Start_IT+0x1f8>)
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d045      	beq.n	8002348 <HAL_DMA_Start_IT+0x1bc>
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a31      	ldr	r2, [pc, #196]	; (8002388 <HAL_DMA_Start_IT+0x1fc>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d040      	beq.n	8002348 <HAL_DMA_Start_IT+0x1bc>
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4a30      	ldr	r2, [pc, #192]	; (800238c <HAL_DMA_Start_IT+0x200>)
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d03b      	beq.n	8002348 <HAL_DMA_Start_IT+0x1bc>
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a2e      	ldr	r2, [pc, #184]	; (8002390 <HAL_DMA_Start_IT+0x204>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d036      	beq.n	8002348 <HAL_DMA_Start_IT+0x1bc>
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4a2d      	ldr	r2, [pc, #180]	; (8002394 <HAL_DMA_Start_IT+0x208>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d031      	beq.n	8002348 <HAL_DMA_Start_IT+0x1bc>
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a2b      	ldr	r2, [pc, #172]	; (8002398 <HAL_DMA_Start_IT+0x20c>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d02c      	beq.n	8002348 <HAL_DMA_Start_IT+0x1bc>
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4a2a      	ldr	r2, [pc, #168]	; (800239c <HAL_DMA_Start_IT+0x210>)
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d027      	beq.n	8002348 <HAL_DMA_Start_IT+0x1bc>
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a28      	ldr	r2, [pc, #160]	; (80023a0 <HAL_DMA_Start_IT+0x214>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d022      	beq.n	8002348 <HAL_DMA_Start_IT+0x1bc>
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4a27      	ldr	r2, [pc, #156]	; (80023a4 <HAL_DMA_Start_IT+0x218>)
 8002308:	4293      	cmp	r3, r2
 800230a:	d01d      	beq.n	8002348 <HAL_DMA_Start_IT+0x1bc>
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4a25      	ldr	r2, [pc, #148]	; (80023a8 <HAL_DMA_Start_IT+0x21c>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d018      	beq.n	8002348 <HAL_DMA_Start_IT+0x1bc>
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4a24      	ldr	r2, [pc, #144]	; (80023ac <HAL_DMA_Start_IT+0x220>)
 800231c:	4293      	cmp	r3, r2
 800231e:	d013      	beq.n	8002348 <HAL_DMA_Start_IT+0x1bc>
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a22      	ldr	r2, [pc, #136]	; (80023b0 <HAL_DMA_Start_IT+0x224>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d00e      	beq.n	8002348 <HAL_DMA_Start_IT+0x1bc>
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4a21      	ldr	r2, [pc, #132]	; (80023b4 <HAL_DMA_Start_IT+0x228>)
 8002330:	4293      	cmp	r3, r2
 8002332:	d009      	beq.n	8002348 <HAL_DMA_Start_IT+0x1bc>
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a1f      	ldr	r2, [pc, #124]	; (80023b8 <HAL_DMA_Start_IT+0x22c>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d004      	beq.n	8002348 <HAL_DMA_Start_IT+0x1bc>
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4a1e      	ldr	r2, [pc, #120]	; (80023bc <HAL_DMA_Start_IT+0x230>)
 8002344:	4293      	cmp	r3, r2
 8002346:	d101      	bne.n	800234c <HAL_DMA_Start_IT+0x1c0>
 8002348:	2301      	movs	r3, #1
 800234a:	e000      	b.n	800234e <HAL_DMA_Start_IT+0x1c2>
 800234c:	2300      	movs	r3, #0
 800234e:	2b00      	cmp	r3, #0
 8002350:	d036      	beq.n	80023c0 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f023 021e 	bic.w	r2, r3, #30
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f042 0216 	orr.w	r2, r2, #22
 8002364:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800236a:	2b00      	cmp	r3, #0
 800236c:	d03e      	beq.n	80023ec <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	681a      	ldr	r2, [r3, #0]
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f042 0208 	orr.w	r2, r2, #8
 800237c:	601a      	str	r2, [r3, #0]
 800237e:	e035      	b.n	80023ec <HAL_DMA_Start_IT+0x260>
 8002380:	40020010 	.word	0x40020010
 8002384:	40020028 	.word	0x40020028
 8002388:	40020040 	.word	0x40020040
 800238c:	40020058 	.word	0x40020058
 8002390:	40020070 	.word	0x40020070
 8002394:	40020088 	.word	0x40020088
 8002398:	400200a0 	.word	0x400200a0
 800239c:	400200b8 	.word	0x400200b8
 80023a0:	40020410 	.word	0x40020410
 80023a4:	40020428 	.word	0x40020428
 80023a8:	40020440 	.word	0x40020440
 80023ac:	40020458 	.word	0x40020458
 80023b0:	40020470 	.word	0x40020470
 80023b4:	40020488 	.word	0x40020488
 80023b8:	400204a0 	.word	0x400204a0
 80023bc:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f023 020e 	bic.w	r2, r3, #14
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f042 020a 	orr.w	r2, r2, #10
 80023d2:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d007      	beq.n	80023ec <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	681a      	ldr	r2, [r3, #0]
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f042 0204 	orr.w	r2, r2, #4
 80023ea:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a83      	ldr	r2, [pc, #524]	; (8002600 <HAL_DMA_Start_IT+0x474>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d072      	beq.n	80024dc <HAL_DMA_Start_IT+0x350>
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4a82      	ldr	r2, [pc, #520]	; (8002604 <HAL_DMA_Start_IT+0x478>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d06d      	beq.n	80024dc <HAL_DMA_Start_IT+0x350>
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a80      	ldr	r2, [pc, #512]	; (8002608 <HAL_DMA_Start_IT+0x47c>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d068      	beq.n	80024dc <HAL_DMA_Start_IT+0x350>
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4a7f      	ldr	r2, [pc, #508]	; (800260c <HAL_DMA_Start_IT+0x480>)
 8002410:	4293      	cmp	r3, r2
 8002412:	d063      	beq.n	80024dc <HAL_DMA_Start_IT+0x350>
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4a7d      	ldr	r2, [pc, #500]	; (8002610 <HAL_DMA_Start_IT+0x484>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d05e      	beq.n	80024dc <HAL_DMA_Start_IT+0x350>
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4a7c      	ldr	r2, [pc, #496]	; (8002614 <HAL_DMA_Start_IT+0x488>)
 8002424:	4293      	cmp	r3, r2
 8002426:	d059      	beq.n	80024dc <HAL_DMA_Start_IT+0x350>
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4a7a      	ldr	r2, [pc, #488]	; (8002618 <HAL_DMA_Start_IT+0x48c>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d054      	beq.n	80024dc <HAL_DMA_Start_IT+0x350>
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4a79      	ldr	r2, [pc, #484]	; (800261c <HAL_DMA_Start_IT+0x490>)
 8002438:	4293      	cmp	r3, r2
 800243a:	d04f      	beq.n	80024dc <HAL_DMA_Start_IT+0x350>
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a77      	ldr	r2, [pc, #476]	; (8002620 <HAL_DMA_Start_IT+0x494>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d04a      	beq.n	80024dc <HAL_DMA_Start_IT+0x350>
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4a76      	ldr	r2, [pc, #472]	; (8002624 <HAL_DMA_Start_IT+0x498>)
 800244c:	4293      	cmp	r3, r2
 800244e:	d045      	beq.n	80024dc <HAL_DMA_Start_IT+0x350>
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a74      	ldr	r2, [pc, #464]	; (8002628 <HAL_DMA_Start_IT+0x49c>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d040      	beq.n	80024dc <HAL_DMA_Start_IT+0x350>
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4a73      	ldr	r2, [pc, #460]	; (800262c <HAL_DMA_Start_IT+0x4a0>)
 8002460:	4293      	cmp	r3, r2
 8002462:	d03b      	beq.n	80024dc <HAL_DMA_Start_IT+0x350>
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a71      	ldr	r2, [pc, #452]	; (8002630 <HAL_DMA_Start_IT+0x4a4>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d036      	beq.n	80024dc <HAL_DMA_Start_IT+0x350>
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4a70      	ldr	r2, [pc, #448]	; (8002634 <HAL_DMA_Start_IT+0x4a8>)
 8002474:	4293      	cmp	r3, r2
 8002476:	d031      	beq.n	80024dc <HAL_DMA_Start_IT+0x350>
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a6e      	ldr	r2, [pc, #440]	; (8002638 <HAL_DMA_Start_IT+0x4ac>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d02c      	beq.n	80024dc <HAL_DMA_Start_IT+0x350>
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4a6d      	ldr	r2, [pc, #436]	; (800263c <HAL_DMA_Start_IT+0x4b0>)
 8002488:	4293      	cmp	r3, r2
 800248a:	d027      	beq.n	80024dc <HAL_DMA_Start_IT+0x350>
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a6b      	ldr	r2, [pc, #428]	; (8002640 <HAL_DMA_Start_IT+0x4b4>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d022      	beq.n	80024dc <HAL_DMA_Start_IT+0x350>
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4a6a      	ldr	r2, [pc, #424]	; (8002644 <HAL_DMA_Start_IT+0x4b8>)
 800249c:	4293      	cmp	r3, r2
 800249e:	d01d      	beq.n	80024dc <HAL_DMA_Start_IT+0x350>
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a68      	ldr	r2, [pc, #416]	; (8002648 <HAL_DMA_Start_IT+0x4bc>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d018      	beq.n	80024dc <HAL_DMA_Start_IT+0x350>
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4a67      	ldr	r2, [pc, #412]	; (800264c <HAL_DMA_Start_IT+0x4c0>)
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d013      	beq.n	80024dc <HAL_DMA_Start_IT+0x350>
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a65      	ldr	r2, [pc, #404]	; (8002650 <HAL_DMA_Start_IT+0x4c4>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d00e      	beq.n	80024dc <HAL_DMA_Start_IT+0x350>
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4a64      	ldr	r2, [pc, #400]	; (8002654 <HAL_DMA_Start_IT+0x4c8>)
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d009      	beq.n	80024dc <HAL_DMA_Start_IT+0x350>
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a62      	ldr	r2, [pc, #392]	; (8002658 <HAL_DMA_Start_IT+0x4cc>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d004      	beq.n	80024dc <HAL_DMA_Start_IT+0x350>
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4a61      	ldr	r2, [pc, #388]	; (800265c <HAL_DMA_Start_IT+0x4d0>)
 80024d8:	4293      	cmp	r3, r2
 80024da:	d101      	bne.n	80024e0 <HAL_DMA_Start_IT+0x354>
 80024dc:	2301      	movs	r3, #1
 80024de:	e000      	b.n	80024e2 <HAL_DMA_Start_IT+0x356>
 80024e0:	2300      	movs	r3, #0
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d01a      	beq.n	800251c <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d007      	beq.n	8002504 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024f8:	681a      	ldr	r2, [r3, #0]
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024fe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002502:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002508:	2b00      	cmp	r3, #0
 800250a:	d007      	beq.n	800251c <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002510:	681a      	ldr	r2, [r3, #0]
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002516:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800251a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a37      	ldr	r2, [pc, #220]	; (8002600 <HAL_DMA_Start_IT+0x474>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d04a      	beq.n	80025bc <HAL_DMA_Start_IT+0x430>
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a36      	ldr	r2, [pc, #216]	; (8002604 <HAL_DMA_Start_IT+0x478>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d045      	beq.n	80025bc <HAL_DMA_Start_IT+0x430>
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a34      	ldr	r2, [pc, #208]	; (8002608 <HAL_DMA_Start_IT+0x47c>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d040      	beq.n	80025bc <HAL_DMA_Start_IT+0x430>
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4a33      	ldr	r2, [pc, #204]	; (800260c <HAL_DMA_Start_IT+0x480>)
 8002540:	4293      	cmp	r3, r2
 8002542:	d03b      	beq.n	80025bc <HAL_DMA_Start_IT+0x430>
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a31      	ldr	r2, [pc, #196]	; (8002610 <HAL_DMA_Start_IT+0x484>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d036      	beq.n	80025bc <HAL_DMA_Start_IT+0x430>
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4a30      	ldr	r2, [pc, #192]	; (8002614 <HAL_DMA_Start_IT+0x488>)
 8002554:	4293      	cmp	r3, r2
 8002556:	d031      	beq.n	80025bc <HAL_DMA_Start_IT+0x430>
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a2e      	ldr	r2, [pc, #184]	; (8002618 <HAL_DMA_Start_IT+0x48c>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d02c      	beq.n	80025bc <HAL_DMA_Start_IT+0x430>
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a2d      	ldr	r2, [pc, #180]	; (800261c <HAL_DMA_Start_IT+0x490>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d027      	beq.n	80025bc <HAL_DMA_Start_IT+0x430>
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a2b      	ldr	r2, [pc, #172]	; (8002620 <HAL_DMA_Start_IT+0x494>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d022      	beq.n	80025bc <HAL_DMA_Start_IT+0x430>
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4a2a      	ldr	r2, [pc, #168]	; (8002624 <HAL_DMA_Start_IT+0x498>)
 800257c:	4293      	cmp	r3, r2
 800257e:	d01d      	beq.n	80025bc <HAL_DMA_Start_IT+0x430>
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a28      	ldr	r2, [pc, #160]	; (8002628 <HAL_DMA_Start_IT+0x49c>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d018      	beq.n	80025bc <HAL_DMA_Start_IT+0x430>
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a27      	ldr	r2, [pc, #156]	; (800262c <HAL_DMA_Start_IT+0x4a0>)
 8002590:	4293      	cmp	r3, r2
 8002592:	d013      	beq.n	80025bc <HAL_DMA_Start_IT+0x430>
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a25      	ldr	r2, [pc, #148]	; (8002630 <HAL_DMA_Start_IT+0x4a4>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d00e      	beq.n	80025bc <HAL_DMA_Start_IT+0x430>
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a24      	ldr	r2, [pc, #144]	; (8002634 <HAL_DMA_Start_IT+0x4a8>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d009      	beq.n	80025bc <HAL_DMA_Start_IT+0x430>
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a22      	ldr	r2, [pc, #136]	; (8002638 <HAL_DMA_Start_IT+0x4ac>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d004      	beq.n	80025bc <HAL_DMA_Start_IT+0x430>
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4a21      	ldr	r2, [pc, #132]	; (800263c <HAL_DMA_Start_IT+0x4b0>)
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d108      	bne.n	80025ce <HAL_DMA_Start_IT+0x442>
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	681a      	ldr	r2, [r3, #0]
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f042 0201 	orr.w	r2, r2, #1
 80025ca:	601a      	str	r2, [r3, #0]
 80025cc:	e012      	b.n	80025f4 <HAL_DMA_Start_IT+0x468>
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	681a      	ldr	r2, [r3, #0]
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f042 0201 	orr.w	r2, r2, #1
 80025dc:	601a      	str	r2, [r3, #0]
 80025de:	e009      	b.n	80025f4 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	2200      	movs	r2, #0
 80025e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80025ee:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 80025f0:	2301      	movs	r3, #1
 80025f2:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80025f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	3718      	adds	r7, #24
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}
 80025fe:	bf00      	nop
 8002600:	40020010 	.word	0x40020010
 8002604:	40020028 	.word	0x40020028
 8002608:	40020040 	.word	0x40020040
 800260c:	40020058 	.word	0x40020058
 8002610:	40020070 	.word	0x40020070
 8002614:	40020088 	.word	0x40020088
 8002618:	400200a0 	.word	0x400200a0
 800261c:	400200b8 	.word	0x400200b8
 8002620:	40020410 	.word	0x40020410
 8002624:	40020428 	.word	0x40020428
 8002628:	40020440 	.word	0x40020440
 800262c:	40020458 	.word	0x40020458
 8002630:	40020470 	.word	0x40020470
 8002634:	40020488 	.word	0x40020488
 8002638:	400204a0 	.word	0x400204a0
 800263c:	400204b8 	.word	0x400204b8
 8002640:	58025408 	.word	0x58025408
 8002644:	5802541c 	.word	0x5802541c
 8002648:	58025430 	.word	0x58025430
 800264c:	58025444 	.word	0x58025444
 8002650:	58025458 	.word	0x58025458
 8002654:	5802546c 	.word	0x5802546c
 8002658:	58025480 	.word	0x58025480
 800265c:	58025494 	.word	0x58025494

08002660 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b086      	sub	sp, #24
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8002668:	f7ff f822 	bl	80016b0 <HAL_GetTick>
 800266c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d101      	bne.n	8002678 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002674:	2301      	movs	r3, #1
 8002676:	e2dc      	b.n	8002c32 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800267e:	b2db      	uxtb	r3, r3
 8002680:	2b02      	cmp	r3, #2
 8002682:	d008      	beq.n	8002696 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2280      	movs	r2, #128	; 0x80
 8002688:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2200      	movs	r2, #0
 800268e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8002692:	2301      	movs	r3, #1
 8002694:	e2cd      	b.n	8002c32 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4a76      	ldr	r2, [pc, #472]	; (8002874 <HAL_DMA_Abort+0x214>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d04a      	beq.n	8002736 <HAL_DMA_Abort+0xd6>
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a74      	ldr	r2, [pc, #464]	; (8002878 <HAL_DMA_Abort+0x218>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d045      	beq.n	8002736 <HAL_DMA_Abort+0xd6>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4a73      	ldr	r2, [pc, #460]	; (800287c <HAL_DMA_Abort+0x21c>)
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d040      	beq.n	8002736 <HAL_DMA_Abort+0xd6>
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a71      	ldr	r2, [pc, #452]	; (8002880 <HAL_DMA_Abort+0x220>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d03b      	beq.n	8002736 <HAL_DMA_Abort+0xd6>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4a70      	ldr	r2, [pc, #448]	; (8002884 <HAL_DMA_Abort+0x224>)
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d036      	beq.n	8002736 <HAL_DMA_Abort+0xd6>
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a6e      	ldr	r2, [pc, #440]	; (8002888 <HAL_DMA_Abort+0x228>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d031      	beq.n	8002736 <HAL_DMA_Abort+0xd6>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4a6d      	ldr	r2, [pc, #436]	; (800288c <HAL_DMA_Abort+0x22c>)
 80026d8:	4293      	cmp	r3, r2
 80026da:	d02c      	beq.n	8002736 <HAL_DMA_Abort+0xd6>
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a6b      	ldr	r2, [pc, #428]	; (8002890 <HAL_DMA_Abort+0x230>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d027      	beq.n	8002736 <HAL_DMA_Abort+0xd6>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4a6a      	ldr	r2, [pc, #424]	; (8002894 <HAL_DMA_Abort+0x234>)
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d022      	beq.n	8002736 <HAL_DMA_Abort+0xd6>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a68      	ldr	r2, [pc, #416]	; (8002898 <HAL_DMA_Abort+0x238>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d01d      	beq.n	8002736 <HAL_DMA_Abort+0xd6>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4a67      	ldr	r2, [pc, #412]	; (800289c <HAL_DMA_Abort+0x23c>)
 8002700:	4293      	cmp	r3, r2
 8002702:	d018      	beq.n	8002736 <HAL_DMA_Abort+0xd6>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a65      	ldr	r2, [pc, #404]	; (80028a0 <HAL_DMA_Abort+0x240>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d013      	beq.n	8002736 <HAL_DMA_Abort+0xd6>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a64      	ldr	r2, [pc, #400]	; (80028a4 <HAL_DMA_Abort+0x244>)
 8002714:	4293      	cmp	r3, r2
 8002716:	d00e      	beq.n	8002736 <HAL_DMA_Abort+0xd6>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a62      	ldr	r2, [pc, #392]	; (80028a8 <HAL_DMA_Abort+0x248>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d009      	beq.n	8002736 <HAL_DMA_Abort+0xd6>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4a61      	ldr	r2, [pc, #388]	; (80028ac <HAL_DMA_Abort+0x24c>)
 8002728:	4293      	cmp	r3, r2
 800272a:	d004      	beq.n	8002736 <HAL_DMA_Abort+0xd6>
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a5f      	ldr	r2, [pc, #380]	; (80028b0 <HAL_DMA_Abort+0x250>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d101      	bne.n	800273a <HAL_DMA_Abort+0xda>
 8002736:	2301      	movs	r3, #1
 8002738:	e000      	b.n	800273c <HAL_DMA_Abort+0xdc>
 800273a:	2300      	movs	r3, #0
 800273c:	2b00      	cmp	r3, #0
 800273e:	d013      	beq.n	8002768 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	681a      	ldr	r2, [r3, #0]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f022 021e 	bic.w	r2, r2, #30
 800274e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	695a      	ldr	r2, [r3, #20]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800275e:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	617b      	str	r3, [r7, #20]
 8002766:	e00a      	b.n	800277e <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	681a      	ldr	r2, [r3, #0]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f022 020e 	bic.w	r2, r2, #14
 8002776:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4a3c      	ldr	r2, [pc, #240]	; (8002874 <HAL_DMA_Abort+0x214>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d072      	beq.n	800286e <HAL_DMA_Abort+0x20e>
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a3a      	ldr	r2, [pc, #232]	; (8002878 <HAL_DMA_Abort+0x218>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d06d      	beq.n	800286e <HAL_DMA_Abort+0x20e>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4a39      	ldr	r2, [pc, #228]	; (800287c <HAL_DMA_Abort+0x21c>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d068      	beq.n	800286e <HAL_DMA_Abort+0x20e>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a37      	ldr	r2, [pc, #220]	; (8002880 <HAL_DMA_Abort+0x220>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d063      	beq.n	800286e <HAL_DMA_Abort+0x20e>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a36      	ldr	r2, [pc, #216]	; (8002884 <HAL_DMA_Abort+0x224>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d05e      	beq.n	800286e <HAL_DMA_Abort+0x20e>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a34      	ldr	r2, [pc, #208]	; (8002888 <HAL_DMA_Abort+0x228>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d059      	beq.n	800286e <HAL_DMA_Abort+0x20e>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4a33      	ldr	r2, [pc, #204]	; (800288c <HAL_DMA_Abort+0x22c>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d054      	beq.n	800286e <HAL_DMA_Abort+0x20e>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4a31      	ldr	r2, [pc, #196]	; (8002890 <HAL_DMA_Abort+0x230>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d04f      	beq.n	800286e <HAL_DMA_Abort+0x20e>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4a30      	ldr	r2, [pc, #192]	; (8002894 <HAL_DMA_Abort+0x234>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d04a      	beq.n	800286e <HAL_DMA_Abort+0x20e>
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a2e      	ldr	r2, [pc, #184]	; (8002898 <HAL_DMA_Abort+0x238>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d045      	beq.n	800286e <HAL_DMA_Abort+0x20e>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4a2d      	ldr	r2, [pc, #180]	; (800289c <HAL_DMA_Abort+0x23c>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d040      	beq.n	800286e <HAL_DMA_Abort+0x20e>
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a2b      	ldr	r2, [pc, #172]	; (80028a0 <HAL_DMA_Abort+0x240>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d03b      	beq.n	800286e <HAL_DMA_Abort+0x20e>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4a2a      	ldr	r2, [pc, #168]	; (80028a4 <HAL_DMA_Abort+0x244>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d036      	beq.n	800286e <HAL_DMA_Abort+0x20e>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a28      	ldr	r2, [pc, #160]	; (80028a8 <HAL_DMA_Abort+0x248>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d031      	beq.n	800286e <HAL_DMA_Abort+0x20e>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a27      	ldr	r2, [pc, #156]	; (80028ac <HAL_DMA_Abort+0x24c>)
 8002810:	4293      	cmp	r3, r2
 8002812:	d02c      	beq.n	800286e <HAL_DMA_Abort+0x20e>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a25      	ldr	r2, [pc, #148]	; (80028b0 <HAL_DMA_Abort+0x250>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d027      	beq.n	800286e <HAL_DMA_Abort+0x20e>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4a24      	ldr	r2, [pc, #144]	; (80028b4 <HAL_DMA_Abort+0x254>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d022      	beq.n	800286e <HAL_DMA_Abort+0x20e>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a22      	ldr	r2, [pc, #136]	; (80028b8 <HAL_DMA_Abort+0x258>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d01d      	beq.n	800286e <HAL_DMA_Abort+0x20e>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4a21      	ldr	r2, [pc, #132]	; (80028bc <HAL_DMA_Abort+0x25c>)
 8002838:	4293      	cmp	r3, r2
 800283a:	d018      	beq.n	800286e <HAL_DMA_Abort+0x20e>
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a1f      	ldr	r2, [pc, #124]	; (80028c0 <HAL_DMA_Abort+0x260>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d013      	beq.n	800286e <HAL_DMA_Abort+0x20e>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4a1e      	ldr	r2, [pc, #120]	; (80028c4 <HAL_DMA_Abort+0x264>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d00e      	beq.n	800286e <HAL_DMA_Abort+0x20e>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a1c      	ldr	r2, [pc, #112]	; (80028c8 <HAL_DMA_Abort+0x268>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d009      	beq.n	800286e <HAL_DMA_Abort+0x20e>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4a1b      	ldr	r2, [pc, #108]	; (80028cc <HAL_DMA_Abort+0x26c>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d004      	beq.n	800286e <HAL_DMA_Abort+0x20e>
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a19      	ldr	r2, [pc, #100]	; (80028d0 <HAL_DMA_Abort+0x270>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d132      	bne.n	80028d4 <HAL_DMA_Abort+0x274>
 800286e:	2301      	movs	r3, #1
 8002870:	e031      	b.n	80028d6 <HAL_DMA_Abort+0x276>
 8002872:	bf00      	nop
 8002874:	40020010 	.word	0x40020010
 8002878:	40020028 	.word	0x40020028
 800287c:	40020040 	.word	0x40020040
 8002880:	40020058 	.word	0x40020058
 8002884:	40020070 	.word	0x40020070
 8002888:	40020088 	.word	0x40020088
 800288c:	400200a0 	.word	0x400200a0
 8002890:	400200b8 	.word	0x400200b8
 8002894:	40020410 	.word	0x40020410
 8002898:	40020428 	.word	0x40020428
 800289c:	40020440 	.word	0x40020440
 80028a0:	40020458 	.word	0x40020458
 80028a4:	40020470 	.word	0x40020470
 80028a8:	40020488 	.word	0x40020488
 80028ac:	400204a0 	.word	0x400204a0
 80028b0:	400204b8 	.word	0x400204b8
 80028b4:	58025408 	.word	0x58025408
 80028b8:	5802541c 	.word	0x5802541c
 80028bc:	58025430 	.word	0x58025430
 80028c0:	58025444 	.word	0x58025444
 80028c4:	58025458 	.word	0x58025458
 80028c8:	5802546c 	.word	0x5802546c
 80028cc:	58025480 	.word	0x58025480
 80028d0:	58025494 	.word	0x58025494
 80028d4:	2300      	movs	r3, #0
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d007      	beq.n	80028ea <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028de:	681a      	ldr	r2, [r3, #0]
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028e4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80028e8:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4a6d      	ldr	r2, [pc, #436]	; (8002aa4 <HAL_DMA_Abort+0x444>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d04a      	beq.n	800298a <HAL_DMA_Abort+0x32a>
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a6b      	ldr	r2, [pc, #428]	; (8002aa8 <HAL_DMA_Abort+0x448>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d045      	beq.n	800298a <HAL_DMA_Abort+0x32a>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4a6a      	ldr	r2, [pc, #424]	; (8002aac <HAL_DMA_Abort+0x44c>)
 8002904:	4293      	cmp	r3, r2
 8002906:	d040      	beq.n	800298a <HAL_DMA_Abort+0x32a>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4a68      	ldr	r2, [pc, #416]	; (8002ab0 <HAL_DMA_Abort+0x450>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d03b      	beq.n	800298a <HAL_DMA_Abort+0x32a>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4a67      	ldr	r2, [pc, #412]	; (8002ab4 <HAL_DMA_Abort+0x454>)
 8002918:	4293      	cmp	r3, r2
 800291a:	d036      	beq.n	800298a <HAL_DMA_Abort+0x32a>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a65      	ldr	r2, [pc, #404]	; (8002ab8 <HAL_DMA_Abort+0x458>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d031      	beq.n	800298a <HAL_DMA_Abort+0x32a>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4a64      	ldr	r2, [pc, #400]	; (8002abc <HAL_DMA_Abort+0x45c>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d02c      	beq.n	800298a <HAL_DMA_Abort+0x32a>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a62      	ldr	r2, [pc, #392]	; (8002ac0 <HAL_DMA_Abort+0x460>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d027      	beq.n	800298a <HAL_DMA_Abort+0x32a>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4a61      	ldr	r2, [pc, #388]	; (8002ac4 <HAL_DMA_Abort+0x464>)
 8002940:	4293      	cmp	r3, r2
 8002942:	d022      	beq.n	800298a <HAL_DMA_Abort+0x32a>
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4a5f      	ldr	r2, [pc, #380]	; (8002ac8 <HAL_DMA_Abort+0x468>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d01d      	beq.n	800298a <HAL_DMA_Abort+0x32a>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4a5e      	ldr	r2, [pc, #376]	; (8002acc <HAL_DMA_Abort+0x46c>)
 8002954:	4293      	cmp	r3, r2
 8002956:	d018      	beq.n	800298a <HAL_DMA_Abort+0x32a>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a5c      	ldr	r2, [pc, #368]	; (8002ad0 <HAL_DMA_Abort+0x470>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d013      	beq.n	800298a <HAL_DMA_Abort+0x32a>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4a5b      	ldr	r2, [pc, #364]	; (8002ad4 <HAL_DMA_Abort+0x474>)
 8002968:	4293      	cmp	r3, r2
 800296a:	d00e      	beq.n	800298a <HAL_DMA_Abort+0x32a>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a59      	ldr	r2, [pc, #356]	; (8002ad8 <HAL_DMA_Abort+0x478>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d009      	beq.n	800298a <HAL_DMA_Abort+0x32a>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4a58      	ldr	r2, [pc, #352]	; (8002adc <HAL_DMA_Abort+0x47c>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d004      	beq.n	800298a <HAL_DMA_Abort+0x32a>
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a56      	ldr	r2, [pc, #344]	; (8002ae0 <HAL_DMA_Abort+0x480>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d108      	bne.n	800299c <HAL_DMA_Abort+0x33c>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	681a      	ldr	r2, [r3, #0]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f022 0201 	bic.w	r2, r2, #1
 8002998:	601a      	str	r2, [r3, #0]
 800299a:	e007      	b.n	80029ac <HAL_DMA_Abort+0x34c>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	681a      	ldr	r2, [r3, #0]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f022 0201 	bic.w	r2, r2, #1
 80029aa:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80029ac:	e013      	b.n	80029d6 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80029ae:	f7fe fe7f 	bl	80016b0 <HAL_GetTick>
 80029b2:	4602      	mov	r2, r0
 80029b4:	693b      	ldr	r3, [r7, #16]
 80029b6:	1ad3      	subs	r3, r2, r3
 80029b8:	2b05      	cmp	r3, #5
 80029ba:	d90c      	bls.n	80029d6 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2220      	movs	r2, #32
 80029c0:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2200      	movs	r2, #0
 80029c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2203      	movs	r2, #3
 80029ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80029d2:	2301      	movs	r3, #1
 80029d4:	e12d      	b.n	8002c32 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80029d6:	697b      	ldr	r3, [r7, #20]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f003 0301 	and.w	r3, r3, #1
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d1e5      	bne.n	80029ae <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4a2f      	ldr	r2, [pc, #188]	; (8002aa4 <HAL_DMA_Abort+0x444>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d04a      	beq.n	8002a82 <HAL_DMA_Abort+0x422>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a2d      	ldr	r2, [pc, #180]	; (8002aa8 <HAL_DMA_Abort+0x448>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d045      	beq.n	8002a82 <HAL_DMA_Abort+0x422>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4a2c      	ldr	r2, [pc, #176]	; (8002aac <HAL_DMA_Abort+0x44c>)
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d040      	beq.n	8002a82 <HAL_DMA_Abort+0x422>
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a2a      	ldr	r2, [pc, #168]	; (8002ab0 <HAL_DMA_Abort+0x450>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d03b      	beq.n	8002a82 <HAL_DMA_Abort+0x422>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4a29      	ldr	r2, [pc, #164]	; (8002ab4 <HAL_DMA_Abort+0x454>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d036      	beq.n	8002a82 <HAL_DMA_Abort+0x422>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a27      	ldr	r2, [pc, #156]	; (8002ab8 <HAL_DMA_Abort+0x458>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d031      	beq.n	8002a82 <HAL_DMA_Abort+0x422>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4a26      	ldr	r2, [pc, #152]	; (8002abc <HAL_DMA_Abort+0x45c>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d02c      	beq.n	8002a82 <HAL_DMA_Abort+0x422>
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a24      	ldr	r2, [pc, #144]	; (8002ac0 <HAL_DMA_Abort+0x460>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d027      	beq.n	8002a82 <HAL_DMA_Abort+0x422>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4a23      	ldr	r2, [pc, #140]	; (8002ac4 <HAL_DMA_Abort+0x464>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d022      	beq.n	8002a82 <HAL_DMA_Abort+0x422>
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4a21      	ldr	r2, [pc, #132]	; (8002ac8 <HAL_DMA_Abort+0x468>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d01d      	beq.n	8002a82 <HAL_DMA_Abort+0x422>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4a20      	ldr	r2, [pc, #128]	; (8002acc <HAL_DMA_Abort+0x46c>)
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d018      	beq.n	8002a82 <HAL_DMA_Abort+0x422>
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a1e      	ldr	r2, [pc, #120]	; (8002ad0 <HAL_DMA_Abort+0x470>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d013      	beq.n	8002a82 <HAL_DMA_Abort+0x422>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4a1d      	ldr	r2, [pc, #116]	; (8002ad4 <HAL_DMA_Abort+0x474>)
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d00e      	beq.n	8002a82 <HAL_DMA_Abort+0x422>
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a1b      	ldr	r2, [pc, #108]	; (8002ad8 <HAL_DMA_Abort+0x478>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d009      	beq.n	8002a82 <HAL_DMA_Abort+0x422>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4a1a      	ldr	r2, [pc, #104]	; (8002adc <HAL_DMA_Abort+0x47c>)
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d004      	beq.n	8002a82 <HAL_DMA_Abort+0x422>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a18      	ldr	r2, [pc, #96]	; (8002ae0 <HAL_DMA_Abort+0x480>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d101      	bne.n	8002a86 <HAL_DMA_Abort+0x426>
 8002a82:	2301      	movs	r3, #1
 8002a84:	e000      	b.n	8002a88 <HAL_DMA_Abort+0x428>
 8002a86:	2300      	movs	r3, #0
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d02b      	beq.n	8002ae4 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a90:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a96:	f003 031f 	and.w	r3, r3, #31
 8002a9a:	223f      	movs	r2, #63	; 0x3f
 8002a9c:	409a      	lsls	r2, r3
 8002a9e:	68bb      	ldr	r3, [r7, #8]
 8002aa0:	609a      	str	r2, [r3, #8]
 8002aa2:	e02a      	b.n	8002afa <HAL_DMA_Abort+0x49a>
 8002aa4:	40020010 	.word	0x40020010
 8002aa8:	40020028 	.word	0x40020028
 8002aac:	40020040 	.word	0x40020040
 8002ab0:	40020058 	.word	0x40020058
 8002ab4:	40020070 	.word	0x40020070
 8002ab8:	40020088 	.word	0x40020088
 8002abc:	400200a0 	.word	0x400200a0
 8002ac0:	400200b8 	.word	0x400200b8
 8002ac4:	40020410 	.word	0x40020410
 8002ac8:	40020428 	.word	0x40020428
 8002acc:	40020440 	.word	0x40020440
 8002ad0:	40020458 	.word	0x40020458
 8002ad4:	40020470 	.word	0x40020470
 8002ad8:	40020488 	.word	0x40020488
 8002adc:	400204a0 	.word	0x400204a0
 8002ae0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ae8:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002aee:	f003 031f 	and.w	r3, r3, #31
 8002af2:	2201      	movs	r2, #1
 8002af4:	409a      	lsls	r2, r3
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4a4f      	ldr	r2, [pc, #316]	; (8002c3c <HAL_DMA_Abort+0x5dc>)
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d072      	beq.n	8002bea <HAL_DMA_Abort+0x58a>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a4d      	ldr	r2, [pc, #308]	; (8002c40 <HAL_DMA_Abort+0x5e0>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d06d      	beq.n	8002bea <HAL_DMA_Abort+0x58a>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a4c      	ldr	r2, [pc, #304]	; (8002c44 <HAL_DMA_Abort+0x5e4>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d068      	beq.n	8002bea <HAL_DMA_Abort+0x58a>
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4a4a      	ldr	r2, [pc, #296]	; (8002c48 <HAL_DMA_Abort+0x5e8>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d063      	beq.n	8002bea <HAL_DMA_Abort+0x58a>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4a49      	ldr	r2, [pc, #292]	; (8002c4c <HAL_DMA_Abort+0x5ec>)
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d05e      	beq.n	8002bea <HAL_DMA_Abort+0x58a>
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a47      	ldr	r2, [pc, #284]	; (8002c50 <HAL_DMA_Abort+0x5f0>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d059      	beq.n	8002bea <HAL_DMA_Abort+0x58a>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4a46      	ldr	r2, [pc, #280]	; (8002c54 <HAL_DMA_Abort+0x5f4>)
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d054      	beq.n	8002bea <HAL_DMA_Abort+0x58a>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a44      	ldr	r2, [pc, #272]	; (8002c58 <HAL_DMA_Abort+0x5f8>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d04f      	beq.n	8002bea <HAL_DMA_Abort+0x58a>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4a43      	ldr	r2, [pc, #268]	; (8002c5c <HAL_DMA_Abort+0x5fc>)
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d04a      	beq.n	8002bea <HAL_DMA_Abort+0x58a>
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4a41      	ldr	r2, [pc, #260]	; (8002c60 <HAL_DMA_Abort+0x600>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d045      	beq.n	8002bea <HAL_DMA_Abort+0x58a>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4a40      	ldr	r2, [pc, #256]	; (8002c64 <HAL_DMA_Abort+0x604>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d040      	beq.n	8002bea <HAL_DMA_Abort+0x58a>
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a3e      	ldr	r2, [pc, #248]	; (8002c68 <HAL_DMA_Abort+0x608>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d03b      	beq.n	8002bea <HAL_DMA_Abort+0x58a>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4a3d      	ldr	r2, [pc, #244]	; (8002c6c <HAL_DMA_Abort+0x60c>)
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d036      	beq.n	8002bea <HAL_DMA_Abort+0x58a>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a3b      	ldr	r2, [pc, #236]	; (8002c70 <HAL_DMA_Abort+0x610>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d031      	beq.n	8002bea <HAL_DMA_Abort+0x58a>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4a3a      	ldr	r2, [pc, #232]	; (8002c74 <HAL_DMA_Abort+0x614>)
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d02c      	beq.n	8002bea <HAL_DMA_Abort+0x58a>
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a38      	ldr	r2, [pc, #224]	; (8002c78 <HAL_DMA_Abort+0x618>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d027      	beq.n	8002bea <HAL_DMA_Abort+0x58a>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4a37      	ldr	r2, [pc, #220]	; (8002c7c <HAL_DMA_Abort+0x61c>)
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d022      	beq.n	8002bea <HAL_DMA_Abort+0x58a>
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a35      	ldr	r2, [pc, #212]	; (8002c80 <HAL_DMA_Abort+0x620>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d01d      	beq.n	8002bea <HAL_DMA_Abort+0x58a>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4a34      	ldr	r2, [pc, #208]	; (8002c84 <HAL_DMA_Abort+0x624>)
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d018      	beq.n	8002bea <HAL_DMA_Abort+0x58a>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a32      	ldr	r2, [pc, #200]	; (8002c88 <HAL_DMA_Abort+0x628>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d013      	beq.n	8002bea <HAL_DMA_Abort+0x58a>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4a31      	ldr	r2, [pc, #196]	; (8002c8c <HAL_DMA_Abort+0x62c>)
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d00e      	beq.n	8002bea <HAL_DMA_Abort+0x58a>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a2f      	ldr	r2, [pc, #188]	; (8002c90 <HAL_DMA_Abort+0x630>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d009      	beq.n	8002bea <HAL_DMA_Abort+0x58a>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4a2e      	ldr	r2, [pc, #184]	; (8002c94 <HAL_DMA_Abort+0x634>)
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d004      	beq.n	8002bea <HAL_DMA_Abort+0x58a>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a2c      	ldr	r2, [pc, #176]	; (8002c98 <HAL_DMA_Abort+0x638>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d101      	bne.n	8002bee <HAL_DMA_Abort+0x58e>
 8002bea:	2301      	movs	r3, #1
 8002bec:	e000      	b.n	8002bf0 <HAL_DMA_Abort+0x590>
 8002bee:	2300      	movs	r3, #0
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d015      	beq.n	8002c20 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002bf8:	687a      	ldr	r2, [r7, #4]
 8002bfa:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002bfc:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d00c      	beq.n	8002c20 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c0a:	681a      	ldr	r2, [r3, #0]
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c10:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002c14:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c1a:	687a      	ldr	r2, [r7, #4]
 8002c1c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002c1e:	605a      	str	r2, [r3, #4]
      }
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2200      	movs	r2, #0
 8002c24:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2201      	movs	r2, #1
 8002c2c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }

  return HAL_OK;
 8002c30:	2300      	movs	r3, #0
}
 8002c32:	4618      	mov	r0, r3
 8002c34:	3718      	adds	r7, #24
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bd80      	pop	{r7, pc}
 8002c3a:	bf00      	nop
 8002c3c:	40020010 	.word	0x40020010
 8002c40:	40020028 	.word	0x40020028
 8002c44:	40020040 	.word	0x40020040
 8002c48:	40020058 	.word	0x40020058
 8002c4c:	40020070 	.word	0x40020070
 8002c50:	40020088 	.word	0x40020088
 8002c54:	400200a0 	.word	0x400200a0
 8002c58:	400200b8 	.word	0x400200b8
 8002c5c:	40020410 	.word	0x40020410
 8002c60:	40020428 	.word	0x40020428
 8002c64:	40020440 	.word	0x40020440
 8002c68:	40020458 	.word	0x40020458
 8002c6c:	40020470 	.word	0x40020470
 8002c70:	40020488 	.word	0x40020488
 8002c74:	400204a0 	.word	0x400204a0
 8002c78:	400204b8 	.word	0x400204b8
 8002c7c:	58025408 	.word	0x58025408
 8002c80:	5802541c 	.word	0x5802541c
 8002c84:	58025430 	.word	0x58025430
 8002c88:	58025444 	.word	0x58025444
 8002c8c:	58025458 	.word	0x58025458
 8002c90:	5802546c 	.word	0x5802546c
 8002c94:	58025480 	.word	0x58025480
 8002c98:	58025494 	.word	0x58025494

08002c9c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b084      	sub	sp, #16
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d101      	bne.n	8002cae <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8002caa:	2301      	movs	r3, #1
 8002cac:	e205      	b.n	80030ba <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002cb4:	b2db      	uxtb	r3, r3
 8002cb6:	2b02      	cmp	r3, #2
 8002cb8:	d004      	beq.n	8002cc4 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2280      	movs	r2, #128	; 0x80
 8002cbe:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	e1fa      	b.n	80030ba <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4a8c      	ldr	r2, [pc, #560]	; (8002efc <HAL_DMA_Abort_IT+0x260>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d04a      	beq.n	8002d64 <HAL_DMA_Abort_IT+0xc8>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4a8b      	ldr	r2, [pc, #556]	; (8002f00 <HAL_DMA_Abort_IT+0x264>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d045      	beq.n	8002d64 <HAL_DMA_Abort_IT+0xc8>
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a89      	ldr	r2, [pc, #548]	; (8002f04 <HAL_DMA_Abort_IT+0x268>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d040      	beq.n	8002d64 <HAL_DMA_Abort_IT+0xc8>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4a88      	ldr	r2, [pc, #544]	; (8002f08 <HAL_DMA_Abort_IT+0x26c>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d03b      	beq.n	8002d64 <HAL_DMA_Abort_IT+0xc8>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4a86      	ldr	r2, [pc, #536]	; (8002f0c <HAL_DMA_Abort_IT+0x270>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d036      	beq.n	8002d64 <HAL_DMA_Abort_IT+0xc8>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4a85      	ldr	r2, [pc, #532]	; (8002f10 <HAL_DMA_Abort_IT+0x274>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d031      	beq.n	8002d64 <HAL_DMA_Abort_IT+0xc8>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a83      	ldr	r2, [pc, #524]	; (8002f14 <HAL_DMA_Abort_IT+0x278>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d02c      	beq.n	8002d64 <HAL_DMA_Abort_IT+0xc8>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4a82      	ldr	r2, [pc, #520]	; (8002f18 <HAL_DMA_Abort_IT+0x27c>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d027      	beq.n	8002d64 <HAL_DMA_Abort_IT+0xc8>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a80      	ldr	r2, [pc, #512]	; (8002f1c <HAL_DMA_Abort_IT+0x280>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d022      	beq.n	8002d64 <HAL_DMA_Abort_IT+0xc8>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4a7f      	ldr	r2, [pc, #508]	; (8002f20 <HAL_DMA_Abort_IT+0x284>)
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d01d      	beq.n	8002d64 <HAL_DMA_Abort_IT+0xc8>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a7d      	ldr	r2, [pc, #500]	; (8002f24 <HAL_DMA_Abort_IT+0x288>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d018      	beq.n	8002d64 <HAL_DMA_Abort_IT+0xc8>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4a7c      	ldr	r2, [pc, #496]	; (8002f28 <HAL_DMA_Abort_IT+0x28c>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d013      	beq.n	8002d64 <HAL_DMA_Abort_IT+0xc8>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a7a      	ldr	r2, [pc, #488]	; (8002f2c <HAL_DMA_Abort_IT+0x290>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d00e      	beq.n	8002d64 <HAL_DMA_Abort_IT+0xc8>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4a79      	ldr	r2, [pc, #484]	; (8002f30 <HAL_DMA_Abort_IT+0x294>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d009      	beq.n	8002d64 <HAL_DMA_Abort_IT+0xc8>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a77      	ldr	r2, [pc, #476]	; (8002f34 <HAL_DMA_Abort_IT+0x298>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d004      	beq.n	8002d64 <HAL_DMA_Abort_IT+0xc8>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4a76      	ldr	r2, [pc, #472]	; (8002f38 <HAL_DMA_Abort_IT+0x29c>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d101      	bne.n	8002d68 <HAL_DMA_Abort_IT+0xcc>
 8002d64:	2301      	movs	r3, #1
 8002d66:	e000      	b.n	8002d6a <HAL_DMA_Abort_IT+0xce>
 8002d68:	2300      	movs	r3, #0
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d065      	beq.n	8002e3a <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2204      	movs	r2, #4
 8002d72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4a60      	ldr	r2, [pc, #384]	; (8002efc <HAL_DMA_Abort_IT+0x260>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d04a      	beq.n	8002e16 <HAL_DMA_Abort_IT+0x17a>
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a5e      	ldr	r2, [pc, #376]	; (8002f00 <HAL_DMA_Abort_IT+0x264>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d045      	beq.n	8002e16 <HAL_DMA_Abort_IT+0x17a>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4a5d      	ldr	r2, [pc, #372]	; (8002f04 <HAL_DMA_Abort_IT+0x268>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d040      	beq.n	8002e16 <HAL_DMA_Abort_IT+0x17a>
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a5b      	ldr	r2, [pc, #364]	; (8002f08 <HAL_DMA_Abort_IT+0x26c>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d03b      	beq.n	8002e16 <HAL_DMA_Abort_IT+0x17a>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4a5a      	ldr	r2, [pc, #360]	; (8002f0c <HAL_DMA_Abort_IT+0x270>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d036      	beq.n	8002e16 <HAL_DMA_Abort_IT+0x17a>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a58      	ldr	r2, [pc, #352]	; (8002f10 <HAL_DMA_Abort_IT+0x274>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d031      	beq.n	8002e16 <HAL_DMA_Abort_IT+0x17a>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4a57      	ldr	r2, [pc, #348]	; (8002f14 <HAL_DMA_Abort_IT+0x278>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d02c      	beq.n	8002e16 <HAL_DMA_Abort_IT+0x17a>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a55      	ldr	r2, [pc, #340]	; (8002f18 <HAL_DMA_Abort_IT+0x27c>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d027      	beq.n	8002e16 <HAL_DMA_Abort_IT+0x17a>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4a54      	ldr	r2, [pc, #336]	; (8002f1c <HAL_DMA_Abort_IT+0x280>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d022      	beq.n	8002e16 <HAL_DMA_Abort_IT+0x17a>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a52      	ldr	r2, [pc, #328]	; (8002f20 <HAL_DMA_Abort_IT+0x284>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d01d      	beq.n	8002e16 <HAL_DMA_Abort_IT+0x17a>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4a51      	ldr	r2, [pc, #324]	; (8002f24 <HAL_DMA_Abort_IT+0x288>)
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d018      	beq.n	8002e16 <HAL_DMA_Abort_IT+0x17a>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a4f      	ldr	r2, [pc, #316]	; (8002f28 <HAL_DMA_Abort_IT+0x28c>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d013      	beq.n	8002e16 <HAL_DMA_Abort_IT+0x17a>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4a4e      	ldr	r2, [pc, #312]	; (8002f2c <HAL_DMA_Abort_IT+0x290>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d00e      	beq.n	8002e16 <HAL_DMA_Abort_IT+0x17a>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a4c      	ldr	r2, [pc, #304]	; (8002f30 <HAL_DMA_Abort_IT+0x294>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d009      	beq.n	8002e16 <HAL_DMA_Abort_IT+0x17a>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4a4b      	ldr	r2, [pc, #300]	; (8002f34 <HAL_DMA_Abort_IT+0x298>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d004      	beq.n	8002e16 <HAL_DMA_Abort_IT+0x17a>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a49      	ldr	r2, [pc, #292]	; (8002f38 <HAL_DMA_Abort_IT+0x29c>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d108      	bne.n	8002e28 <HAL_DMA_Abort_IT+0x18c>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	681a      	ldr	r2, [r3, #0]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f022 0201 	bic.w	r2, r2, #1
 8002e24:	601a      	str	r2, [r3, #0]
 8002e26:	e147      	b.n	80030b8 <HAL_DMA_Abort_IT+0x41c>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	681a      	ldr	r2, [r3, #0]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f022 0201 	bic.w	r2, r2, #1
 8002e36:	601a      	str	r2, [r3, #0]
 8002e38:	e13e      	b.n	80030b8 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	681a      	ldr	r2, [r3, #0]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f022 020e 	bic.w	r2, r2, #14
 8002e48:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a2b      	ldr	r2, [pc, #172]	; (8002efc <HAL_DMA_Abort_IT+0x260>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d04a      	beq.n	8002eea <HAL_DMA_Abort_IT+0x24e>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a29      	ldr	r2, [pc, #164]	; (8002f00 <HAL_DMA_Abort_IT+0x264>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d045      	beq.n	8002eea <HAL_DMA_Abort_IT+0x24e>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4a28      	ldr	r2, [pc, #160]	; (8002f04 <HAL_DMA_Abort_IT+0x268>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d040      	beq.n	8002eea <HAL_DMA_Abort_IT+0x24e>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a26      	ldr	r2, [pc, #152]	; (8002f08 <HAL_DMA_Abort_IT+0x26c>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d03b      	beq.n	8002eea <HAL_DMA_Abort_IT+0x24e>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a25      	ldr	r2, [pc, #148]	; (8002f0c <HAL_DMA_Abort_IT+0x270>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d036      	beq.n	8002eea <HAL_DMA_Abort_IT+0x24e>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a23      	ldr	r2, [pc, #140]	; (8002f10 <HAL_DMA_Abort_IT+0x274>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d031      	beq.n	8002eea <HAL_DMA_Abort_IT+0x24e>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4a22      	ldr	r2, [pc, #136]	; (8002f14 <HAL_DMA_Abort_IT+0x278>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d02c      	beq.n	8002eea <HAL_DMA_Abort_IT+0x24e>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a20      	ldr	r2, [pc, #128]	; (8002f18 <HAL_DMA_Abort_IT+0x27c>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d027      	beq.n	8002eea <HAL_DMA_Abort_IT+0x24e>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4a1f      	ldr	r2, [pc, #124]	; (8002f1c <HAL_DMA_Abort_IT+0x280>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d022      	beq.n	8002eea <HAL_DMA_Abort_IT+0x24e>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a1d      	ldr	r2, [pc, #116]	; (8002f20 <HAL_DMA_Abort_IT+0x284>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d01d      	beq.n	8002eea <HAL_DMA_Abort_IT+0x24e>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4a1c      	ldr	r2, [pc, #112]	; (8002f24 <HAL_DMA_Abort_IT+0x288>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d018      	beq.n	8002eea <HAL_DMA_Abort_IT+0x24e>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a1a      	ldr	r2, [pc, #104]	; (8002f28 <HAL_DMA_Abort_IT+0x28c>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d013      	beq.n	8002eea <HAL_DMA_Abort_IT+0x24e>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4a19      	ldr	r2, [pc, #100]	; (8002f2c <HAL_DMA_Abort_IT+0x290>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d00e      	beq.n	8002eea <HAL_DMA_Abort_IT+0x24e>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a17      	ldr	r2, [pc, #92]	; (8002f30 <HAL_DMA_Abort_IT+0x294>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d009      	beq.n	8002eea <HAL_DMA_Abort_IT+0x24e>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a16      	ldr	r2, [pc, #88]	; (8002f34 <HAL_DMA_Abort_IT+0x298>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d004      	beq.n	8002eea <HAL_DMA_Abort_IT+0x24e>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a14      	ldr	r2, [pc, #80]	; (8002f38 <HAL_DMA_Abort_IT+0x29c>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d128      	bne.n	8002f3c <HAL_DMA_Abort_IT+0x2a0>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	681a      	ldr	r2, [r3, #0]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f022 0201 	bic.w	r2, r2, #1
 8002ef8:	601a      	str	r2, [r3, #0]
 8002efa:	e027      	b.n	8002f4c <HAL_DMA_Abort_IT+0x2b0>
 8002efc:	40020010 	.word	0x40020010
 8002f00:	40020028 	.word	0x40020028
 8002f04:	40020040 	.word	0x40020040
 8002f08:	40020058 	.word	0x40020058
 8002f0c:	40020070 	.word	0x40020070
 8002f10:	40020088 	.word	0x40020088
 8002f14:	400200a0 	.word	0x400200a0
 8002f18:	400200b8 	.word	0x400200b8
 8002f1c:	40020410 	.word	0x40020410
 8002f20:	40020428 	.word	0x40020428
 8002f24:	40020440 	.word	0x40020440
 8002f28:	40020458 	.word	0x40020458
 8002f2c:	40020470 	.word	0x40020470
 8002f30:	40020488 	.word	0x40020488
 8002f34:	400204a0 	.word	0x400204a0
 8002f38:	400204b8 	.word	0x400204b8
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	681a      	ldr	r2, [r3, #0]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f022 0201 	bic.w	r2, r2, #1
 8002f4a:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a5c      	ldr	r2, [pc, #368]	; (80030c4 <HAL_DMA_Abort_IT+0x428>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d072      	beq.n	800303c <HAL_DMA_Abort_IT+0x3a0>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a5b      	ldr	r2, [pc, #364]	; (80030c8 <HAL_DMA_Abort_IT+0x42c>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d06d      	beq.n	800303c <HAL_DMA_Abort_IT+0x3a0>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a59      	ldr	r2, [pc, #356]	; (80030cc <HAL_DMA_Abort_IT+0x430>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d068      	beq.n	800303c <HAL_DMA_Abort_IT+0x3a0>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a58      	ldr	r2, [pc, #352]	; (80030d0 <HAL_DMA_Abort_IT+0x434>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d063      	beq.n	800303c <HAL_DMA_Abort_IT+0x3a0>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a56      	ldr	r2, [pc, #344]	; (80030d4 <HAL_DMA_Abort_IT+0x438>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d05e      	beq.n	800303c <HAL_DMA_Abort_IT+0x3a0>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a55      	ldr	r2, [pc, #340]	; (80030d8 <HAL_DMA_Abort_IT+0x43c>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d059      	beq.n	800303c <HAL_DMA_Abort_IT+0x3a0>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a53      	ldr	r2, [pc, #332]	; (80030dc <HAL_DMA_Abort_IT+0x440>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d054      	beq.n	800303c <HAL_DMA_Abort_IT+0x3a0>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a52      	ldr	r2, [pc, #328]	; (80030e0 <HAL_DMA_Abort_IT+0x444>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d04f      	beq.n	800303c <HAL_DMA_Abort_IT+0x3a0>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a50      	ldr	r2, [pc, #320]	; (80030e4 <HAL_DMA_Abort_IT+0x448>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d04a      	beq.n	800303c <HAL_DMA_Abort_IT+0x3a0>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4a4f      	ldr	r2, [pc, #316]	; (80030e8 <HAL_DMA_Abort_IT+0x44c>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d045      	beq.n	800303c <HAL_DMA_Abort_IT+0x3a0>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a4d      	ldr	r2, [pc, #308]	; (80030ec <HAL_DMA_Abort_IT+0x450>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d040      	beq.n	800303c <HAL_DMA_Abort_IT+0x3a0>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4a4c      	ldr	r2, [pc, #304]	; (80030f0 <HAL_DMA_Abort_IT+0x454>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d03b      	beq.n	800303c <HAL_DMA_Abort_IT+0x3a0>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a4a      	ldr	r2, [pc, #296]	; (80030f4 <HAL_DMA_Abort_IT+0x458>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d036      	beq.n	800303c <HAL_DMA_Abort_IT+0x3a0>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4a49      	ldr	r2, [pc, #292]	; (80030f8 <HAL_DMA_Abort_IT+0x45c>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d031      	beq.n	800303c <HAL_DMA_Abort_IT+0x3a0>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4a47      	ldr	r2, [pc, #284]	; (80030fc <HAL_DMA_Abort_IT+0x460>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d02c      	beq.n	800303c <HAL_DMA_Abort_IT+0x3a0>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4a46      	ldr	r2, [pc, #280]	; (8003100 <HAL_DMA_Abort_IT+0x464>)
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d027      	beq.n	800303c <HAL_DMA_Abort_IT+0x3a0>
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a44      	ldr	r2, [pc, #272]	; (8003104 <HAL_DMA_Abort_IT+0x468>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d022      	beq.n	800303c <HAL_DMA_Abort_IT+0x3a0>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4a43      	ldr	r2, [pc, #268]	; (8003108 <HAL_DMA_Abort_IT+0x46c>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d01d      	beq.n	800303c <HAL_DMA_Abort_IT+0x3a0>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a41      	ldr	r2, [pc, #260]	; (800310c <HAL_DMA_Abort_IT+0x470>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d018      	beq.n	800303c <HAL_DMA_Abort_IT+0x3a0>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4a40      	ldr	r2, [pc, #256]	; (8003110 <HAL_DMA_Abort_IT+0x474>)
 8003010:	4293      	cmp	r3, r2
 8003012:	d013      	beq.n	800303c <HAL_DMA_Abort_IT+0x3a0>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4a3e      	ldr	r2, [pc, #248]	; (8003114 <HAL_DMA_Abort_IT+0x478>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d00e      	beq.n	800303c <HAL_DMA_Abort_IT+0x3a0>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4a3d      	ldr	r2, [pc, #244]	; (8003118 <HAL_DMA_Abort_IT+0x47c>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d009      	beq.n	800303c <HAL_DMA_Abort_IT+0x3a0>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4a3b      	ldr	r2, [pc, #236]	; (800311c <HAL_DMA_Abort_IT+0x480>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d004      	beq.n	800303c <HAL_DMA_Abort_IT+0x3a0>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4a3a      	ldr	r2, [pc, #232]	; (8003120 <HAL_DMA_Abort_IT+0x484>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d101      	bne.n	8003040 <HAL_DMA_Abort_IT+0x3a4>
 800303c:	2301      	movs	r3, #1
 800303e:	e000      	b.n	8003042 <HAL_DMA_Abort_IT+0x3a6>
 8003040:	2300      	movs	r3, #0
 8003042:	2b00      	cmp	r3, #0
 8003044:	d028      	beq.n	8003098 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800304a:	681a      	ldr	r2, [r3, #0]
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003050:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003054:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800305a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003060:	f003 031f 	and.w	r3, r3, #31
 8003064:	2201      	movs	r2, #1
 8003066:	409a      	lsls	r2, r3
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003070:	687a      	ldr	r2, [r7, #4]
 8003072:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003074:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800307a:	2b00      	cmp	r3, #0
 800307c:	d00c      	beq.n	8003098 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003082:	681a      	ldr	r2, [r3, #0]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003088:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800308c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003092:	687a      	ldr	r2, [r7, #4]
 8003094:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003096:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2200      	movs	r2, #0
 800309c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2201      	movs	r2, #1
 80030a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d003      	beq.n	80030b8 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030b4:	6878      	ldr	r0, [r7, #4]
 80030b6:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80030b8:	2300      	movs	r3, #0
}
 80030ba:	4618      	mov	r0, r3
 80030bc:	3710      	adds	r7, #16
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd80      	pop	{r7, pc}
 80030c2:	bf00      	nop
 80030c4:	40020010 	.word	0x40020010
 80030c8:	40020028 	.word	0x40020028
 80030cc:	40020040 	.word	0x40020040
 80030d0:	40020058 	.word	0x40020058
 80030d4:	40020070 	.word	0x40020070
 80030d8:	40020088 	.word	0x40020088
 80030dc:	400200a0 	.word	0x400200a0
 80030e0:	400200b8 	.word	0x400200b8
 80030e4:	40020410 	.word	0x40020410
 80030e8:	40020428 	.word	0x40020428
 80030ec:	40020440 	.word	0x40020440
 80030f0:	40020458 	.word	0x40020458
 80030f4:	40020470 	.word	0x40020470
 80030f8:	40020488 	.word	0x40020488
 80030fc:	400204a0 	.word	0x400204a0
 8003100:	400204b8 	.word	0x400204b8
 8003104:	58025408 	.word	0x58025408
 8003108:	5802541c 	.word	0x5802541c
 800310c:	58025430 	.word	0x58025430
 8003110:	58025444 	.word	0x58025444
 8003114:	58025458 	.word	0x58025458
 8003118:	5802546c 	.word	0x5802546c
 800311c:	58025480 	.word	0x58025480
 8003120:	58025494 	.word	0x58025494

08003124 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b08a      	sub	sp, #40	; 0x28
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800312c:	2300      	movs	r3, #0
 800312e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003130:	4b67      	ldr	r3, [pc, #412]	; (80032d0 <HAL_DMA_IRQHandler+0x1ac>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a67      	ldr	r2, [pc, #412]	; (80032d4 <HAL_DMA_IRQHandler+0x1b0>)
 8003136:	fba2 2303 	umull	r2, r3, r2, r3
 800313a:	0a9b      	lsrs	r3, r3, #10
 800313c:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003142:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003148:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800314a:	6a3b      	ldr	r3, [r7, #32]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003150:	69fb      	ldr	r3, [r7, #28]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4a5f      	ldr	r2, [pc, #380]	; (80032d8 <HAL_DMA_IRQHandler+0x1b4>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d04a      	beq.n	80031f6 <HAL_DMA_IRQHandler+0xd2>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a5d      	ldr	r2, [pc, #372]	; (80032dc <HAL_DMA_IRQHandler+0x1b8>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d045      	beq.n	80031f6 <HAL_DMA_IRQHandler+0xd2>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4a5c      	ldr	r2, [pc, #368]	; (80032e0 <HAL_DMA_IRQHandler+0x1bc>)
 8003170:	4293      	cmp	r3, r2
 8003172:	d040      	beq.n	80031f6 <HAL_DMA_IRQHandler+0xd2>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4a5a      	ldr	r2, [pc, #360]	; (80032e4 <HAL_DMA_IRQHandler+0x1c0>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d03b      	beq.n	80031f6 <HAL_DMA_IRQHandler+0xd2>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4a59      	ldr	r2, [pc, #356]	; (80032e8 <HAL_DMA_IRQHandler+0x1c4>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d036      	beq.n	80031f6 <HAL_DMA_IRQHandler+0xd2>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a57      	ldr	r2, [pc, #348]	; (80032ec <HAL_DMA_IRQHandler+0x1c8>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d031      	beq.n	80031f6 <HAL_DMA_IRQHandler+0xd2>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4a56      	ldr	r2, [pc, #344]	; (80032f0 <HAL_DMA_IRQHandler+0x1cc>)
 8003198:	4293      	cmp	r3, r2
 800319a:	d02c      	beq.n	80031f6 <HAL_DMA_IRQHandler+0xd2>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a54      	ldr	r2, [pc, #336]	; (80032f4 <HAL_DMA_IRQHandler+0x1d0>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d027      	beq.n	80031f6 <HAL_DMA_IRQHandler+0xd2>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4a53      	ldr	r2, [pc, #332]	; (80032f8 <HAL_DMA_IRQHandler+0x1d4>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d022      	beq.n	80031f6 <HAL_DMA_IRQHandler+0xd2>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a51      	ldr	r2, [pc, #324]	; (80032fc <HAL_DMA_IRQHandler+0x1d8>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d01d      	beq.n	80031f6 <HAL_DMA_IRQHandler+0xd2>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4a50      	ldr	r2, [pc, #320]	; (8003300 <HAL_DMA_IRQHandler+0x1dc>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d018      	beq.n	80031f6 <HAL_DMA_IRQHandler+0xd2>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a4e      	ldr	r2, [pc, #312]	; (8003304 <HAL_DMA_IRQHandler+0x1e0>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d013      	beq.n	80031f6 <HAL_DMA_IRQHandler+0xd2>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4a4d      	ldr	r2, [pc, #308]	; (8003308 <HAL_DMA_IRQHandler+0x1e4>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d00e      	beq.n	80031f6 <HAL_DMA_IRQHandler+0xd2>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a4b      	ldr	r2, [pc, #300]	; (800330c <HAL_DMA_IRQHandler+0x1e8>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d009      	beq.n	80031f6 <HAL_DMA_IRQHandler+0xd2>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4a4a      	ldr	r2, [pc, #296]	; (8003310 <HAL_DMA_IRQHandler+0x1ec>)
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d004      	beq.n	80031f6 <HAL_DMA_IRQHandler+0xd2>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a48      	ldr	r2, [pc, #288]	; (8003314 <HAL_DMA_IRQHandler+0x1f0>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d101      	bne.n	80031fa <HAL_DMA_IRQHandler+0xd6>
 80031f6:	2301      	movs	r3, #1
 80031f8:	e000      	b.n	80031fc <HAL_DMA_IRQHandler+0xd8>
 80031fa:	2300      	movs	r3, #0
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	f000 842b 	beq.w	8003a58 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003206:	f003 031f 	and.w	r3, r3, #31
 800320a:	2208      	movs	r2, #8
 800320c:	409a      	lsls	r2, r3
 800320e:	69bb      	ldr	r3, [r7, #24]
 8003210:	4013      	ands	r3, r2
 8003212:	2b00      	cmp	r3, #0
 8003214:	f000 80a2 	beq.w	800335c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a2e      	ldr	r2, [pc, #184]	; (80032d8 <HAL_DMA_IRQHandler+0x1b4>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d04a      	beq.n	80032b8 <HAL_DMA_IRQHandler+0x194>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4a2d      	ldr	r2, [pc, #180]	; (80032dc <HAL_DMA_IRQHandler+0x1b8>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d045      	beq.n	80032b8 <HAL_DMA_IRQHandler+0x194>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4a2b      	ldr	r2, [pc, #172]	; (80032e0 <HAL_DMA_IRQHandler+0x1bc>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d040      	beq.n	80032b8 <HAL_DMA_IRQHandler+0x194>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4a2a      	ldr	r2, [pc, #168]	; (80032e4 <HAL_DMA_IRQHandler+0x1c0>)
 800323c:	4293      	cmp	r3, r2
 800323e:	d03b      	beq.n	80032b8 <HAL_DMA_IRQHandler+0x194>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a28      	ldr	r2, [pc, #160]	; (80032e8 <HAL_DMA_IRQHandler+0x1c4>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d036      	beq.n	80032b8 <HAL_DMA_IRQHandler+0x194>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4a27      	ldr	r2, [pc, #156]	; (80032ec <HAL_DMA_IRQHandler+0x1c8>)
 8003250:	4293      	cmp	r3, r2
 8003252:	d031      	beq.n	80032b8 <HAL_DMA_IRQHandler+0x194>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a25      	ldr	r2, [pc, #148]	; (80032f0 <HAL_DMA_IRQHandler+0x1cc>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d02c      	beq.n	80032b8 <HAL_DMA_IRQHandler+0x194>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4a24      	ldr	r2, [pc, #144]	; (80032f4 <HAL_DMA_IRQHandler+0x1d0>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d027      	beq.n	80032b8 <HAL_DMA_IRQHandler+0x194>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a22      	ldr	r2, [pc, #136]	; (80032f8 <HAL_DMA_IRQHandler+0x1d4>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d022      	beq.n	80032b8 <HAL_DMA_IRQHandler+0x194>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4a21      	ldr	r2, [pc, #132]	; (80032fc <HAL_DMA_IRQHandler+0x1d8>)
 8003278:	4293      	cmp	r3, r2
 800327a:	d01d      	beq.n	80032b8 <HAL_DMA_IRQHandler+0x194>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4a1f      	ldr	r2, [pc, #124]	; (8003300 <HAL_DMA_IRQHandler+0x1dc>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d018      	beq.n	80032b8 <HAL_DMA_IRQHandler+0x194>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4a1e      	ldr	r2, [pc, #120]	; (8003304 <HAL_DMA_IRQHandler+0x1e0>)
 800328c:	4293      	cmp	r3, r2
 800328e:	d013      	beq.n	80032b8 <HAL_DMA_IRQHandler+0x194>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4a1c      	ldr	r2, [pc, #112]	; (8003308 <HAL_DMA_IRQHandler+0x1e4>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d00e      	beq.n	80032b8 <HAL_DMA_IRQHandler+0x194>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4a1b      	ldr	r2, [pc, #108]	; (800330c <HAL_DMA_IRQHandler+0x1e8>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d009      	beq.n	80032b8 <HAL_DMA_IRQHandler+0x194>
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4a19      	ldr	r2, [pc, #100]	; (8003310 <HAL_DMA_IRQHandler+0x1ec>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d004      	beq.n	80032b8 <HAL_DMA_IRQHandler+0x194>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4a18      	ldr	r2, [pc, #96]	; (8003314 <HAL_DMA_IRQHandler+0x1f0>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d12f      	bne.n	8003318 <HAL_DMA_IRQHandler+0x1f4>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f003 0304 	and.w	r3, r3, #4
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	bf14      	ite	ne
 80032c6:	2301      	movne	r3, #1
 80032c8:	2300      	moveq	r3, #0
 80032ca:	b2db      	uxtb	r3, r3
 80032cc:	e02e      	b.n	800332c <HAL_DMA_IRQHandler+0x208>
 80032ce:	bf00      	nop
 80032d0:	24000400 	.word	0x24000400
 80032d4:	1b4e81b5 	.word	0x1b4e81b5
 80032d8:	40020010 	.word	0x40020010
 80032dc:	40020028 	.word	0x40020028
 80032e0:	40020040 	.word	0x40020040
 80032e4:	40020058 	.word	0x40020058
 80032e8:	40020070 	.word	0x40020070
 80032ec:	40020088 	.word	0x40020088
 80032f0:	400200a0 	.word	0x400200a0
 80032f4:	400200b8 	.word	0x400200b8
 80032f8:	40020410 	.word	0x40020410
 80032fc:	40020428 	.word	0x40020428
 8003300:	40020440 	.word	0x40020440
 8003304:	40020458 	.word	0x40020458
 8003308:	40020470 	.word	0x40020470
 800330c:	40020488 	.word	0x40020488
 8003310:	400204a0 	.word	0x400204a0
 8003314:	400204b8 	.word	0x400204b8
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f003 0308 	and.w	r3, r3, #8
 8003322:	2b00      	cmp	r3, #0
 8003324:	bf14      	ite	ne
 8003326:	2301      	movne	r3, #1
 8003328:	2300      	moveq	r3, #0
 800332a:	b2db      	uxtb	r3, r3
 800332c:	2b00      	cmp	r3, #0
 800332e:	d015      	beq.n	800335c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	681a      	ldr	r2, [r3, #0]
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f022 0204 	bic.w	r2, r2, #4
 800333e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003344:	f003 031f 	and.w	r3, r3, #31
 8003348:	2208      	movs	r2, #8
 800334a:	409a      	lsls	r2, r3
 800334c:	6a3b      	ldr	r3, [r7, #32]
 800334e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003354:	f043 0201 	orr.w	r2, r3, #1
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003360:	f003 031f 	and.w	r3, r3, #31
 8003364:	69ba      	ldr	r2, [r7, #24]
 8003366:	fa22 f303 	lsr.w	r3, r2, r3
 800336a:	f003 0301 	and.w	r3, r3, #1
 800336e:	2b00      	cmp	r3, #0
 8003370:	d06e      	beq.n	8003450 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a69      	ldr	r2, [pc, #420]	; (800351c <HAL_DMA_IRQHandler+0x3f8>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d04a      	beq.n	8003412 <HAL_DMA_IRQHandler+0x2ee>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a67      	ldr	r2, [pc, #412]	; (8003520 <HAL_DMA_IRQHandler+0x3fc>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d045      	beq.n	8003412 <HAL_DMA_IRQHandler+0x2ee>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a66      	ldr	r2, [pc, #408]	; (8003524 <HAL_DMA_IRQHandler+0x400>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d040      	beq.n	8003412 <HAL_DMA_IRQHandler+0x2ee>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a64      	ldr	r2, [pc, #400]	; (8003528 <HAL_DMA_IRQHandler+0x404>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d03b      	beq.n	8003412 <HAL_DMA_IRQHandler+0x2ee>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4a63      	ldr	r2, [pc, #396]	; (800352c <HAL_DMA_IRQHandler+0x408>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d036      	beq.n	8003412 <HAL_DMA_IRQHandler+0x2ee>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a61      	ldr	r2, [pc, #388]	; (8003530 <HAL_DMA_IRQHandler+0x40c>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d031      	beq.n	8003412 <HAL_DMA_IRQHandler+0x2ee>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4a60      	ldr	r2, [pc, #384]	; (8003534 <HAL_DMA_IRQHandler+0x410>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d02c      	beq.n	8003412 <HAL_DMA_IRQHandler+0x2ee>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a5e      	ldr	r2, [pc, #376]	; (8003538 <HAL_DMA_IRQHandler+0x414>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d027      	beq.n	8003412 <HAL_DMA_IRQHandler+0x2ee>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4a5d      	ldr	r2, [pc, #372]	; (800353c <HAL_DMA_IRQHandler+0x418>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d022      	beq.n	8003412 <HAL_DMA_IRQHandler+0x2ee>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a5b      	ldr	r2, [pc, #364]	; (8003540 <HAL_DMA_IRQHandler+0x41c>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d01d      	beq.n	8003412 <HAL_DMA_IRQHandler+0x2ee>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4a5a      	ldr	r2, [pc, #360]	; (8003544 <HAL_DMA_IRQHandler+0x420>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d018      	beq.n	8003412 <HAL_DMA_IRQHandler+0x2ee>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a58      	ldr	r2, [pc, #352]	; (8003548 <HAL_DMA_IRQHandler+0x424>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d013      	beq.n	8003412 <HAL_DMA_IRQHandler+0x2ee>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4a57      	ldr	r2, [pc, #348]	; (800354c <HAL_DMA_IRQHandler+0x428>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d00e      	beq.n	8003412 <HAL_DMA_IRQHandler+0x2ee>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4a55      	ldr	r2, [pc, #340]	; (8003550 <HAL_DMA_IRQHandler+0x42c>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d009      	beq.n	8003412 <HAL_DMA_IRQHandler+0x2ee>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a54      	ldr	r2, [pc, #336]	; (8003554 <HAL_DMA_IRQHandler+0x430>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d004      	beq.n	8003412 <HAL_DMA_IRQHandler+0x2ee>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a52      	ldr	r2, [pc, #328]	; (8003558 <HAL_DMA_IRQHandler+0x434>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d10a      	bne.n	8003428 <HAL_DMA_IRQHandler+0x304>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	695b      	ldr	r3, [r3, #20]
 8003418:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800341c:	2b00      	cmp	r3, #0
 800341e:	bf14      	ite	ne
 8003420:	2301      	movne	r3, #1
 8003422:	2300      	moveq	r3, #0
 8003424:	b2db      	uxtb	r3, r3
 8003426:	e003      	b.n	8003430 <HAL_DMA_IRQHandler+0x30c>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	2300      	movs	r3, #0
 8003430:	2b00      	cmp	r3, #0
 8003432:	d00d      	beq.n	8003450 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003438:	f003 031f 	and.w	r3, r3, #31
 800343c:	2201      	movs	r2, #1
 800343e:	409a      	lsls	r2, r3
 8003440:	6a3b      	ldr	r3, [r7, #32]
 8003442:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003448:	f043 0202 	orr.w	r2, r3, #2
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003454:	f003 031f 	and.w	r3, r3, #31
 8003458:	2204      	movs	r2, #4
 800345a:	409a      	lsls	r2, r3
 800345c:	69bb      	ldr	r3, [r7, #24]
 800345e:	4013      	ands	r3, r2
 8003460:	2b00      	cmp	r3, #0
 8003462:	f000 808f 	beq.w	8003584 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4a2c      	ldr	r2, [pc, #176]	; (800351c <HAL_DMA_IRQHandler+0x3f8>)
 800346c:	4293      	cmp	r3, r2
 800346e:	d04a      	beq.n	8003506 <HAL_DMA_IRQHandler+0x3e2>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4a2a      	ldr	r2, [pc, #168]	; (8003520 <HAL_DMA_IRQHandler+0x3fc>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d045      	beq.n	8003506 <HAL_DMA_IRQHandler+0x3e2>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4a29      	ldr	r2, [pc, #164]	; (8003524 <HAL_DMA_IRQHandler+0x400>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d040      	beq.n	8003506 <HAL_DMA_IRQHandler+0x3e2>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4a27      	ldr	r2, [pc, #156]	; (8003528 <HAL_DMA_IRQHandler+0x404>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d03b      	beq.n	8003506 <HAL_DMA_IRQHandler+0x3e2>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4a26      	ldr	r2, [pc, #152]	; (800352c <HAL_DMA_IRQHandler+0x408>)
 8003494:	4293      	cmp	r3, r2
 8003496:	d036      	beq.n	8003506 <HAL_DMA_IRQHandler+0x3e2>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a24      	ldr	r2, [pc, #144]	; (8003530 <HAL_DMA_IRQHandler+0x40c>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d031      	beq.n	8003506 <HAL_DMA_IRQHandler+0x3e2>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4a23      	ldr	r2, [pc, #140]	; (8003534 <HAL_DMA_IRQHandler+0x410>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d02c      	beq.n	8003506 <HAL_DMA_IRQHandler+0x3e2>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4a21      	ldr	r2, [pc, #132]	; (8003538 <HAL_DMA_IRQHandler+0x414>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d027      	beq.n	8003506 <HAL_DMA_IRQHandler+0x3e2>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a20      	ldr	r2, [pc, #128]	; (800353c <HAL_DMA_IRQHandler+0x418>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d022      	beq.n	8003506 <HAL_DMA_IRQHandler+0x3e2>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a1e      	ldr	r2, [pc, #120]	; (8003540 <HAL_DMA_IRQHandler+0x41c>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d01d      	beq.n	8003506 <HAL_DMA_IRQHandler+0x3e2>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4a1d      	ldr	r2, [pc, #116]	; (8003544 <HAL_DMA_IRQHandler+0x420>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d018      	beq.n	8003506 <HAL_DMA_IRQHandler+0x3e2>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a1b      	ldr	r2, [pc, #108]	; (8003548 <HAL_DMA_IRQHandler+0x424>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d013      	beq.n	8003506 <HAL_DMA_IRQHandler+0x3e2>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4a1a      	ldr	r2, [pc, #104]	; (800354c <HAL_DMA_IRQHandler+0x428>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d00e      	beq.n	8003506 <HAL_DMA_IRQHandler+0x3e2>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a18      	ldr	r2, [pc, #96]	; (8003550 <HAL_DMA_IRQHandler+0x42c>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d009      	beq.n	8003506 <HAL_DMA_IRQHandler+0x3e2>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4a17      	ldr	r2, [pc, #92]	; (8003554 <HAL_DMA_IRQHandler+0x430>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d004      	beq.n	8003506 <HAL_DMA_IRQHandler+0x3e2>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4a15      	ldr	r2, [pc, #84]	; (8003558 <HAL_DMA_IRQHandler+0x434>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d12a      	bne.n	800355c <HAL_DMA_IRQHandler+0x438>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f003 0302 	and.w	r3, r3, #2
 8003510:	2b00      	cmp	r3, #0
 8003512:	bf14      	ite	ne
 8003514:	2301      	movne	r3, #1
 8003516:	2300      	moveq	r3, #0
 8003518:	b2db      	uxtb	r3, r3
 800351a:	e023      	b.n	8003564 <HAL_DMA_IRQHandler+0x440>
 800351c:	40020010 	.word	0x40020010
 8003520:	40020028 	.word	0x40020028
 8003524:	40020040 	.word	0x40020040
 8003528:	40020058 	.word	0x40020058
 800352c:	40020070 	.word	0x40020070
 8003530:	40020088 	.word	0x40020088
 8003534:	400200a0 	.word	0x400200a0
 8003538:	400200b8 	.word	0x400200b8
 800353c:	40020410 	.word	0x40020410
 8003540:	40020428 	.word	0x40020428
 8003544:	40020440 	.word	0x40020440
 8003548:	40020458 	.word	0x40020458
 800354c:	40020470 	.word	0x40020470
 8003550:	40020488 	.word	0x40020488
 8003554:	400204a0 	.word	0x400204a0
 8003558:	400204b8 	.word	0x400204b8
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	2300      	movs	r3, #0
 8003564:	2b00      	cmp	r3, #0
 8003566:	d00d      	beq.n	8003584 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800356c:	f003 031f 	and.w	r3, r3, #31
 8003570:	2204      	movs	r2, #4
 8003572:	409a      	lsls	r2, r3
 8003574:	6a3b      	ldr	r3, [r7, #32]
 8003576:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800357c:	f043 0204 	orr.w	r2, r3, #4
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003588:	f003 031f 	and.w	r3, r3, #31
 800358c:	2210      	movs	r2, #16
 800358e:	409a      	lsls	r2, r3
 8003590:	69bb      	ldr	r3, [r7, #24]
 8003592:	4013      	ands	r3, r2
 8003594:	2b00      	cmp	r3, #0
 8003596:	f000 80a6 	beq.w	80036e6 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a85      	ldr	r2, [pc, #532]	; (80037b4 <HAL_DMA_IRQHandler+0x690>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d04a      	beq.n	800363a <HAL_DMA_IRQHandler+0x516>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a83      	ldr	r2, [pc, #524]	; (80037b8 <HAL_DMA_IRQHandler+0x694>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d045      	beq.n	800363a <HAL_DMA_IRQHandler+0x516>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a82      	ldr	r2, [pc, #520]	; (80037bc <HAL_DMA_IRQHandler+0x698>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d040      	beq.n	800363a <HAL_DMA_IRQHandler+0x516>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a80      	ldr	r2, [pc, #512]	; (80037c0 <HAL_DMA_IRQHandler+0x69c>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d03b      	beq.n	800363a <HAL_DMA_IRQHandler+0x516>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a7f      	ldr	r2, [pc, #508]	; (80037c4 <HAL_DMA_IRQHandler+0x6a0>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d036      	beq.n	800363a <HAL_DMA_IRQHandler+0x516>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a7d      	ldr	r2, [pc, #500]	; (80037c8 <HAL_DMA_IRQHandler+0x6a4>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d031      	beq.n	800363a <HAL_DMA_IRQHandler+0x516>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4a7c      	ldr	r2, [pc, #496]	; (80037cc <HAL_DMA_IRQHandler+0x6a8>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d02c      	beq.n	800363a <HAL_DMA_IRQHandler+0x516>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a7a      	ldr	r2, [pc, #488]	; (80037d0 <HAL_DMA_IRQHandler+0x6ac>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d027      	beq.n	800363a <HAL_DMA_IRQHandler+0x516>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4a79      	ldr	r2, [pc, #484]	; (80037d4 <HAL_DMA_IRQHandler+0x6b0>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d022      	beq.n	800363a <HAL_DMA_IRQHandler+0x516>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a77      	ldr	r2, [pc, #476]	; (80037d8 <HAL_DMA_IRQHandler+0x6b4>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d01d      	beq.n	800363a <HAL_DMA_IRQHandler+0x516>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4a76      	ldr	r2, [pc, #472]	; (80037dc <HAL_DMA_IRQHandler+0x6b8>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d018      	beq.n	800363a <HAL_DMA_IRQHandler+0x516>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a74      	ldr	r2, [pc, #464]	; (80037e0 <HAL_DMA_IRQHandler+0x6bc>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d013      	beq.n	800363a <HAL_DMA_IRQHandler+0x516>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4a73      	ldr	r2, [pc, #460]	; (80037e4 <HAL_DMA_IRQHandler+0x6c0>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d00e      	beq.n	800363a <HAL_DMA_IRQHandler+0x516>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a71      	ldr	r2, [pc, #452]	; (80037e8 <HAL_DMA_IRQHandler+0x6c4>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d009      	beq.n	800363a <HAL_DMA_IRQHandler+0x516>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a70      	ldr	r2, [pc, #448]	; (80037ec <HAL_DMA_IRQHandler+0x6c8>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d004      	beq.n	800363a <HAL_DMA_IRQHandler+0x516>
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a6e      	ldr	r2, [pc, #440]	; (80037f0 <HAL_DMA_IRQHandler+0x6cc>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d10a      	bne.n	8003650 <HAL_DMA_IRQHandler+0x52c>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f003 0308 	and.w	r3, r3, #8
 8003644:	2b00      	cmp	r3, #0
 8003646:	bf14      	ite	ne
 8003648:	2301      	movne	r3, #1
 800364a:	2300      	moveq	r3, #0
 800364c:	b2db      	uxtb	r3, r3
 800364e:	e009      	b.n	8003664 <HAL_DMA_IRQHandler+0x540>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f003 0304 	and.w	r3, r3, #4
 800365a:	2b00      	cmp	r3, #0
 800365c:	bf14      	ite	ne
 800365e:	2301      	movne	r3, #1
 8003660:	2300      	moveq	r3, #0
 8003662:	b2db      	uxtb	r3, r3
 8003664:	2b00      	cmp	r3, #0
 8003666:	d03e      	beq.n	80036e6 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800366c:	f003 031f 	and.w	r3, r3, #31
 8003670:	2210      	movs	r2, #16
 8003672:	409a      	lsls	r2, r3
 8003674:	6a3b      	ldr	r3, [r7, #32]
 8003676:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003682:	2b00      	cmp	r3, #0
 8003684:	d018      	beq.n	80036b8 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003690:	2b00      	cmp	r3, #0
 8003692:	d108      	bne.n	80036a6 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003698:	2b00      	cmp	r3, #0
 800369a:	d024      	beq.n	80036e6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a0:	6878      	ldr	r0, [r7, #4]
 80036a2:	4798      	blx	r3
 80036a4:	e01f      	b.n	80036e6 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d01b      	beq.n	80036e6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036b2:	6878      	ldr	r0, [r7, #4]
 80036b4:	4798      	blx	r3
 80036b6:	e016      	b.n	80036e6 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d107      	bne.n	80036d6 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	681a      	ldr	r2, [r3, #0]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f022 0208 	bic.w	r2, r2, #8
 80036d4:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d003      	beq.n	80036e6 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036e2:	6878      	ldr	r0, [r7, #4]
 80036e4:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036ea:	f003 031f 	and.w	r3, r3, #31
 80036ee:	2220      	movs	r2, #32
 80036f0:	409a      	lsls	r2, r3
 80036f2:	69bb      	ldr	r3, [r7, #24]
 80036f4:	4013      	ands	r3, r2
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	f000 8110 	beq.w	800391c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a2c      	ldr	r2, [pc, #176]	; (80037b4 <HAL_DMA_IRQHandler+0x690>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d04a      	beq.n	800379c <HAL_DMA_IRQHandler+0x678>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4a2b      	ldr	r2, [pc, #172]	; (80037b8 <HAL_DMA_IRQHandler+0x694>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d045      	beq.n	800379c <HAL_DMA_IRQHandler+0x678>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a29      	ldr	r2, [pc, #164]	; (80037bc <HAL_DMA_IRQHandler+0x698>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d040      	beq.n	800379c <HAL_DMA_IRQHandler+0x678>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4a28      	ldr	r2, [pc, #160]	; (80037c0 <HAL_DMA_IRQHandler+0x69c>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d03b      	beq.n	800379c <HAL_DMA_IRQHandler+0x678>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a26      	ldr	r2, [pc, #152]	; (80037c4 <HAL_DMA_IRQHandler+0x6a0>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d036      	beq.n	800379c <HAL_DMA_IRQHandler+0x678>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a25      	ldr	r2, [pc, #148]	; (80037c8 <HAL_DMA_IRQHandler+0x6a4>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d031      	beq.n	800379c <HAL_DMA_IRQHandler+0x678>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a23      	ldr	r2, [pc, #140]	; (80037cc <HAL_DMA_IRQHandler+0x6a8>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d02c      	beq.n	800379c <HAL_DMA_IRQHandler+0x678>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a22      	ldr	r2, [pc, #136]	; (80037d0 <HAL_DMA_IRQHandler+0x6ac>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d027      	beq.n	800379c <HAL_DMA_IRQHandler+0x678>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a20      	ldr	r2, [pc, #128]	; (80037d4 <HAL_DMA_IRQHandler+0x6b0>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d022      	beq.n	800379c <HAL_DMA_IRQHandler+0x678>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a1f      	ldr	r2, [pc, #124]	; (80037d8 <HAL_DMA_IRQHandler+0x6b4>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d01d      	beq.n	800379c <HAL_DMA_IRQHandler+0x678>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a1d      	ldr	r2, [pc, #116]	; (80037dc <HAL_DMA_IRQHandler+0x6b8>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d018      	beq.n	800379c <HAL_DMA_IRQHandler+0x678>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4a1c      	ldr	r2, [pc, #112]	; (80037e0 <HAL_DMA_IRQHandler+0x6bc>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d013      	beq.n	800379c <HAL_DMA_IRQHandler+0x678>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a1a      	ldr	r2, [pc, #104]	; (80037e4 <HAL_DMA_IRQHandler+0x6c0>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d00e      	beq.n	800379c <HAL_DMA_IRQHandler+0x678>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a19      	ldr	r2, [pc, #100]	; (80037e8 <HAL_DMA_IRQHandler+0x6c4>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d009      	beq.n	800379c <HAL_DMA_IRQHandler+0x678>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a17      	ldr	r2, [pc, #92]	; (80037ec <HAL_DMA_IRQHandler+0x6c8>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d004      	beq.n	800379c <HAL_DMA_IRQHandler+0x678>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4a16      	ldr	r2, [pc, #88]	; (80037f0 <HAL_DMA_IRQHandler+0x6cc>)
 8003798:	4293      	cmp	r3, r2
 800379a:	d12b      	bne.n	80037f4 <HAL_DMA_IRQHandler+0x6d0>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f003 0310 	and.w	r3, r3, #16
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	bf14      	ite	ne
 80037aa:	2301      	movne	r3, #1
 80037ac:	2300      	moveq	r3, #0
 80037ae:	b2db      	uxtb	r3, r3
 80037b0:	e02a      	b.n	8003808 <HAL_DMA_IRQHandler+0x6e4>
 80037b2:	bf00      	nop
 80037b4:	40020010 	.word	0x40020010
 80037b8:	40020028 	.word	0x40020028
 80037bc:	40020040 	.word	0x40020040
 80037c0:	40020058 	.word	0x40020058
 80037c4:	40020070 	.word	0x40020070
 80037c8:	40020088 	.word	0x40020088
 80037cc:	400200a0 	.word	0x400200a0
 80037d0:	400200b8 	.word	0x400200b8
 80037d4:	40020410 	.word	0x40020410
 80037d8:	40020428 	.word	0x40020428
 80037dc:	40020440 	.word	0x40020440
 80037e0:	40020458 	.word	0x40020458
 80037e4:	40020470 	.word	0x40020470
 80037e8:	40020488 	.word	0x40020488
 80037ec:	400204a0 	.word	0x400204a0
 80037f0:	400204b8 	.word	0x400204b8
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f003 0302 	and.w	r3, r3, #2
 80037fe:	2b00      	cmp	r3, #0
 8003800:	bf14      	ite	ne
 8003802:	2301      	movne	r3, #1
 8003804:	2300      	moveq	r3, #0
 8003806:	b2db      	uxtb	r3, r3
 8003808:	2b00      	cmp	r3, #0
 800380a:	f000 8087 	beq.w	800391c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003812:	f003 031f 	and.w	r3, r3, #31
 8003816:	2220      	movs	r2, #32
 8003818:	409a      	lsls	r2, r3
 800381a:	6a3b      	ldr	r3, [r7, #32]
 800381c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003824:	b2db      	uxtb	r3, r3
 8003826:	2b04      	cmp	r3, #4
 8003828:	d139      	bne.n	800389e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	681a      	ldr	r2, [r3, #0]
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f022 0216 	bic.w	r2, r2, #22
 8003838:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	695a      	ldr	r2, [r3, #20]
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003848:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800384e:	2b00      	cmp	r3, #0
 8003850:	d103      	bne.n	800385a <HAL_DMA_IRQHandler+0x736>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003856:	2b00      	cmp	r3, #0
 8003858:	d007      	beq.n	800386a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	681a      	ldr	r2, [r3, #0]
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f022 0208 	bic.w	r2, r2, #8
 8003868:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800386e:	f003 031f 	and.w	r3, r3, #31
 8003872:	223f      	movs	r2, #63	; 0x3f
 8003874:	409a      	lsls	r2, r3
 8003876:	6a3b      	ldr	r3, [r7, #32]
 8003878:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2200      	movs	r2, #0
 800387e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2201      	movs	r2, #1
 8003886:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800388e:	2b00      	cmp	r3, #0
 8003890:	f000 834a 	beq.w	8003f28 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003898:	6878      	ldr	r0, [r7, #4]
 800389a:	4798      	blx	r3
          }
          return;
 800389c:	e344      	b.n	8003f28 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d018      	beq.n	80038de <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d108      	bne.n	80038cc <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d02c      	beq.n	800391c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038c6:	6878      	ldr	r0, [r7, #4]
 80038c8:	4798      	blx	r3
 80038ca:	e027      	b.n	800391c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d023      	beq.n	800391c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038d8:	6878      	ldr	r0, [r7, #4]
 80038da:	4798      	blx	r3
 80038dc:	e01e      	b.n	800391c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d10f      	bne.n	800390c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	681a      	ldr	r2, [r3, #0]
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f022 0210 	bic.w	r2, r2, #16
 80038fa:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2200      	movs	r2, #0
 8003900:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2201      	movs	r2, #1
 8003908:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003910:	2b00      	cmp	r3, #0
 8003912:	d003      	beq.n	800391c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003918:	6878      	ldr	r0, [r7, #4]
 800391a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003920:	2b00      	cmp	r3, #0
 8003922:	f000 8306 	beq.w	8003f32 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800392a:	f003 0301 	and.w	r3, r3, #1
 800392e:	2b00      	cmp	r3, #0
 8003930:	f000 8088 	beq.w	8003a44 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2204      	movs	r2, #4
 8003938:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4a7a      	ldr	r2, [pc, #488]	; (8003b2c <HAL_DMA_IRQHandler+0xa08>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d04a      	beq.n	80039dc <HAL_DMA_IRQHandler+0x8b8>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4a79      	ldr	r2, [pc, #484]	; (8003b30 <HAL_DMA_IRQHandler+0xa0c>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d045      	beq.n	80039dc <HAL_DMA_IRQHandler+0x8b8>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4a77      	ldr	r2, [pc, #476]	; (8003b34 <HAL_DMA_IRQHandler+0xa10>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d040      	beq.n	80039dc <HAL_DMA_IRQHandler+0x8b8>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4a76      	ldr	r2, [pc, #472]	; (8003b38 <HAL_DMA_IRQHandler+0xa14>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d03b      	beq.n	80039dc <HAL_DMA_IRQHandler+0x8b8>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a74      	ldr	r2, [pc, #464]	; (8003b3c <HAL_DMA_IRQHandler+0xa18>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d036      	beq.n	80039dc <HAL_DMA_IRQHandler+0x8b8>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4a73      	ldr	r2, [pc, #460]	; (8003b40 <HAL_DMA_IRQHandler+0xa1c>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d031      	beq.n	80039dc <HAL_DMA_IRQHandler+0x8b8>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4a71      	ldr	r2, [pc, #452]	; (8003b44 <HAL_DMA_IRQHandler+0xa20>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d02c      	beq.n	80039dc <HAL_DMA_IRQHandler+0x8b8>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4a70      	ldr	r2, [pc, #448]	; (8003b48 <HAL_DMA_IRQHandler+0xa24>)
 8003988:	4293      	cmp	r3, r2
 800398a:	d027      	beq.n	80039dc <HAL_DMA_IRQHandler+0x8b8>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4a6e      	ldr	r2, [pc, #440]	; (8003b4c <HAL_DMA_IRQHandler+0xa28>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d022      	beq.n	80039dc <HAL_DMA_IRQHandler+0x8b8>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4a6d      	ldr	r2, [pc, #436]	; (8003b50 <HAL_DMA_IRQHandler+0xa2c>)
 800399c:	4293      	cmp	r3, r2
 800399e:	d01d      	beq.n	80039dc <HAL_DMA_IRQHandler+0x8b8>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4a6b      	ldr	r2, [pc, #428]	; (8003b54 <HAL_DMA_IRQHandler+0xa30>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d018      	beq.n	80039dc <HAL_DMA_IRQHandler+0x8b8>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4a6a      	ldr	r2, [pc, #424]	; (8003b58 <HAL_DMA_IRQHandler+0xa34>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d013      	beq.n	80039dc <HAL_DMA_IRQHandler+0x8b8>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4a68      	ldr	r2, [pc, #416]	; (8003b5c <HAL_DMA_IRQHandler+0xa38>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d00e      	beq.n	80039dc <HAL_DMA_IRQHandler+0x8b8>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4a67      	ldr	r2, [pc, #412]	; (8003b60 <HAL_DMA_IRQHandler+0xa3c>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d009      	beq.n	80039dc <HAL_DMA_IRQHandler+0x8b8>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4a65      	ldr	r2, [pc, #404]	; (8003b64 <HAL_DMA_IRQHandler+0xa40>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d004      	beq.n	80039dc <HAL_DMA_IRQHandler+0x8b8>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4a64      	ldr	r2, [pc, #400]	; (8003b68 <HAL_DMA_IRQHandler+0xa44>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d108      	bne.n	80039ee <HAL_DMA_IRQHandler+0x8ca>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	681a      	ldr	r2, [r3, #0]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f022 0201 	bic.w	r2, r2, #1
 80039ea:	601a      	str	r2, [r3, #0]
 80039ec:	e007      	b.n	80039fe <HAL_DMA_IRQHandler+0x8da>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	681a      	ldr	r2, [r3, #0]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f022 0201 	bic.w	r2, r2, #1
 80039fc:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	3301      	adds	r3, #1
 8003a02:	60fb      	str	r3, [r7, #12]
 8003a04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a06:	429a      	cmp	r2, r3
 8003a08:	d307      	bcc.n	8003a1a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f003 0301 	and.w	r3, r3, #1
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d1f2      	bne.n	80039fe <HAL_DMA_IRQHandler+0x8da>
 8003a18:	e000      	b.n	8003a1c <HAL_DMA_IRQHandler+0x8f8>
            break;
 8003a1a:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2200      	movs	r2, #0
 8003a20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f003 0301 	and.w	r3, r3, #1
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d004      	beq.n	8003a3c <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2203      	movs	r2, #3
 8003a36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8003a3a:	e003      	b.n	8003a44 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2201      	movs	r2, #1
 8003a40:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	f000 8272 	beq.w	8003f32 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a52:	6878      	ldr	r0, [r7, #4]
 8003a54:	4798      	blx	r3
 8003a56:	e26c      	b.n	8003f32 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4a43      	ldr	r2, [pc, #268]	; (8003b6c <HAL_DMA_IRQHandler+0xa48>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d022      	beq.n	8003aa8 <HAL_DMA_IRQHandler+0x984>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4a42      	ldr	r2, [pc, #264]	; (8003b70 <HAL_DMA_IRQHandler+0xa4c>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d01d      	beq.n	8003aa8 <HAL_DMA_IRQHandler+0x984>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a40      	ldr	r2, [pc, #256]	; (8003b74 <HAL_DMA_IRQHandler+0xa50>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d018      	beq.n	8003aa8 <HAL_DMA_IRQHandler+0x984>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4a3f      	ldr	r2, [pc, #252]	; (8003b78 <HAL_DMA_IRQHandler+0xa54>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d013      	beq.n	8003aa8 <HAL_DMA_IRQHandler+0x984>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4a3d      	ldr	r2, [pc, #244]	; (8003b7c <HAL_DMA_IRQHandler+0xa58>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d00e      	beq.n	8003aa8 <HAL_DMA_IRQHandler+0x984>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4a3c      	ldr	r2, [pc, #240]	; (8003b80 <HAL_DMA_IRQHandler+0xa5c>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d009      	beq.n	8003aa8 <HAL_DMA_IRQHandler+0x984>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4a3a      	ldr	r2, [pc, #232]	; (8003b84 <HAL_DMA_IRQHandler+0xa60>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d004      	beq.n	8003aa8 <HAL_DMA_IRQHandler+0x984>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4a39      	ldr	r2, [pc, #228]	; (8003b88 <HAL_DMA_IRQHandler+0xa64>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d101      	bne.n	8003aac <HAL_DMA_IRQHandler+0x988>
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	e000      	b.n	8003aae <HAL_DMA_IRQHandler+0x98a>
 8003aac:	2300      	movs	r3, #0
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	f000 823f 	beq.w	8003f32 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ac0:	f003 031f 	and.w	r3, r3, #31
 8003ac4:	2204      	movs	r2, #4
 8003ac6:	409a      	lsls	r2, r3
 8003ac8:	697b      	ldr	r3, [r7, #20]
 8003aca:	4013      	ands	r3, r2
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	f000 80cd 	beq.w	8003c6c <HAL_DMA_IRQHandler+0xb48>
 8003ad2:	693b      	ldr	r3, [r7, #16]
 8003ad4:	f003 0304 	and.w	r3, r3, #4
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	f000 80c7 	beq.w	8003c6c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ae2:	f003 031f 	and.w	r3, r3, #31
 8003ae6:	2204      	movs	r2, #4
 8003ae8:	409a      	lsls	r2, r3
 8003aea:	69fb      	ldr	r3, [r7, #28]
 8003aec:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003aee:	693b      	ldr	r3, [r7, #16]
 8003af0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d049      	beq.n	8003b8c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003af8:	693b      	ldr	r3, [r7, #16]
 8003afa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d109      	bne.n	8003b16 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	f000 8210 	beq.w	8003f2c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b10:	6878      	ldr	r0, [r7, #4]
 8003b12:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003b14:	e20a      	b.n	8003f2c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	f000 8206 	beq.w	8003f2c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b24:	6878      	ldr	r0, [r7, #4]
 8003b26:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003b28:	e200      	b.n	8003f2c <HAL_DMA_IRQHandler+0xe08>
 8003b2a:	bf00      	nop
 8003b2c:	40020010 	.word	0x40020010
 8003b30:	40020028 	.word	0x40020028
 8003b34:	40020040 	.word	0x40020040
 8003b38:	40020058 	.word	0x40020058
 8003b3c:	40020070 	.word	0x40020070
 8003b40:	40020088 	.word	0x40020088
 8003b44:	400200a0 	.word	0x400200a0
 8003b48:	400200b8 	.word	0x400200b8
 8003b4c:	40020410 	.word	0x40020410
 8003b50:	40020428 	.word	0x40020428
 8003b54:	40020440 	.word	0x40020440
 8003b58:	40020458 	.word	0x40020458
 8003b5c:	40020470 	.word	0x40020470
 8003b60:	40020488 	.word	0x40020488
 8003b64:	400204a0 	.word	0x400204a0
 8003b68:	400204b8 	.word	0x400204b8
 8003b6c:	58025408 	.word	0x58025408
 8003b70:	5802541c 	.word	0x5802541c
 8003b74:	58025430 	.word	0x58025430
 8003b78:	58025444 	.word	0x58025444
 8003b7c:	58025458 	.word	0x58025458
 8003b80:	5802546c 	.word	0x5802546c
 8003b84:	58025480 	.word	0x58025480
 8003b88:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003b8c:	693b      	ldr	r3, [r7, #16]
 8003b8e:	f003 0320 	and.w	r3, r3, #32
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d160      	bne.n	8003c58 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4a8c      	ldr	r2, [pc, #560]	; (8003dcc <HAL_DMA_IRQHandler+0xca8>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d04a      	beq.n	8003c36 <HAL_DMA_IRQHandler+0xb12>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4a8a      	ldr	r2, [pc, #552]	; (8003dd0 <HAL_DMA_IRQHandler+0xcac>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d045      	beq.n	8003c36 <HAL_DMA_IRQHandler+0xb12>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4a89      	ldr	r2, [pc, #548]	; (8003dd4 <HAL_DMA_IRQHandler+0xcb0>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d040      	beq.n	8003c36 <HAL_DMA_IRQHandler+0xb12>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4a87      	ldr	r2, [pc, #540]	; (8003dd8 <HAL_DMA_IRQHandler+0xcb4>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d03b      	beq.n	8003c36 <HAL_DMA_IRQHandler+0xb12>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4a86      	ldr	r2, [pc, #536]	; (8003ddc <HAL_DMA_IRQHandler+0xcb8>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d036      	beq.n	8003c36 <HAL_DMA_IRQHandler+0xb12>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a84      	ldr	r2, [pc, #528]	; (8003de0 <HAL_DMA_IRQHandler+0xcbc>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d031      	beq.n	8003c36 <HAL_DMA_IRQHandler+0xb12>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4a83      	ldr	r2, [pc, #524]	; (8003de4 <HAL_DMA_IRQHandler+0xcc0>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d02c      	beq.n	8003c36 <HAL_DMA_IRQHandler+0xb12>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4a81      	ldr	r2, [pc, #516]	; (8003de8 <HAL_DMA_IRQHandler+0xcc4>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d027      	beq.n	8003c36 <HAL_DMA_IRQHandler+0xb12>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4a80      	ldr	r2, [pc, #512]	; (8003dec <HAL_DMA_IRQHandler+0xcc8>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d022      	beq.n	8003c36 <HAL_DMA_IRQHandler+0xb12>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4a7e      	ldr	r2, [pc, #504]	; (8003df0 <HAL_DMA_IRQHandler+0xccc>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d01d      	beq.n	8003c36 <HAL_DMA_IRQHandler+0xb12>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4a7d      	ldr	r2, [pc, #500]	; (8003df4 <HAL_DMA_IRQHandler+0xcd0>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d018      	beq.n	8003c36 <HAL_DMA_IRQHandler+0xb12>
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a7b      	ldr	r2, [pc, #492]	; (8003df8 <HAL_DMA_IRQHandler+0xcd4>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d013      	beq.n	8003c36 <HAL_DMA_IRQHandler+0xb12>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4a7a      	ldr	r2, [pc, #488]	; (8003dfc <HAL_DMA_IRQHandler+0xcd8>)
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d00e      	beq.n	8003c36 <HAL_DMA_IRQHandler+0xb12>
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4a78      	ldr	r2, [pc, #480]	; (8003e00 <HAL_DMA_IRQHandler+0xcdc>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d009      	beq.n	8003c36 <HAL_DMA_IRQHandler+0xb12>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4a77      	ldr	r2, [pc, #476]	; (8003e04 <HAL_DMA_IRQHandler+0xce0>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d004      	beq.n	8003c36 <HAL_DMA_IRQHandler+0xb12>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a75      	ldr	r2, [pc, #468]	; (8003e08 <HAL_DMA_IRQHandler+0xce4>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d108      	bne.n	8003c48 <HAL_DMA_IRQHandler+0xb24>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	681a      	ldr	r2, [r3, #0]
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f022 0208 	bic.w	r2, r2, #8
 8003c44:	601a      	str	r2, [r3, #0]
 8003c46:	e007      	b.n	8003c58 <HAL_DMA_IRQHandler+0xb34>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	681a      	ldr	r2, [r3, #0]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f022 0204 	bic.w	r2, r2, #4
 8003c56:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	f000 8165 	beq.w	8003f2c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c66:	6878      	ldr	r0, [r7, #4]
 8003c68:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003c6a:	e15f      	b.n	8003f2c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c70:	f003 031f 	and.w	r3, r3, #31
 8003c74:	2202      	movs	r2, #2
 8003c76:	409a      	lsls	r2, r3
 8003c78:	697b      	ldr	r3, [r7, #20]
 8003c7a:	4013      	ands	r3, r2
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	f000 80c5 	beq.w	8003e0c <HAL_DMA_IRQHandler+0xce8>
 8003c82:	693b      	ldr	r3, [r7, #16]
 8003c84:	f003 0302 	and.w	r3, r3, #2
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	f000 80bf 	beq.w	8003e0c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c92:	f003 031f 	and.w	r3, r3, #31
 8003c96:	2202      	movs	r2, #2
 8003c98:	409a      	lsls	r2, r3
 8003c9a:	69fb      	ldr	r3, [r7, #28]
 8003c9c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003c9e:	693b      	ldr	r3, [r7, #16]
 8003ca0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d018      	beq.n	8003cda <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003ca8:	693b      	ldr	r3, [r7, #16]
 8003caa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d109      	bne.n	8003cc6 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	f000 813a 	beq.w	8003f30 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cc0:	6878      	ldr	r0, [r7, #4]
 8003cc2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003cc4:	e134      	b.n	8003f30 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	f000 8130 	beq.w	8003f30 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cd4:	6878      	ldr	r0, [r7, #4]
 8003cd6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003cd8:	e12a      	b.n	8003f30 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003cda:	693b      	ldr	r3, [r7, #16]
 8003cdc:	f003 0320 	and.w	r3, r3, #32
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d168      	bne.n	8003db6 <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a38      	ldr	r2, [pc, #224]	; (8003dcc <HAL_DMA_IRQHandler+0xca8>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d04a      	beq.n	8003d84 <HAL_DMA_IRQHandler+0xc60>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4a37      	ldr	r2, [pc, #220]	; (8003dd0 <HAL_DMA_IRQHandler+0xcac>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d045      	beq.n	8003d84 <HAL_DMA_IRQHandler+0xc60>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a35      	ldr	r2, [pc, #212]	; (8003dd4 <HAL_DMA_IRQHandler+0xcb0>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d040      	beq.n	8003d84 <HAL_DMA_IRQHandler+0xc60>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4a34      	ldr	r2, [pc, #208]	; (8003dd8 <HAL_DMA_IRQHandler+0xcb4>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d03b      	beq.n	8003d84 <HAL_DMA_IRQHandler+0xc60>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a32      	ldr	r2, [pc, #200]	; (8003ddc <HAL_DMA_IRQHandler+0xcb8>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d036      	beq.n	8003d84 <HAL_DMA_IRQHandler+0xc60>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4a31      	ldr	r2, [pc, #196]	; (8003de0 <HAL_DMA_IRQHandler+0xcbc>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d031      	beq.n	8003d84 <HAL_DMA_IRQHandler+0xc60>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a2f      	ldr	r2, [pc, #188]	; (8003de4 <HAL_DMA_IRQHandler+0xcc0>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d02c      	beq.n	8003d84 <HAL_DMA_IRQHandler+0xc60>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4a2e      	ldr	r2, [pc, #184]	; (8003de8 <HAL_DMA_IRQHandler+0xcc4>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d027      	beq.n	8003d84 <HAL_DMA_IRQHandler+0xc60>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4a2c      	ldr	r2, [pc, #176]	; (8003dec <HAL_DMA_IRQHandler+0xcc8>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d022      	beq.n	8003d84 <HAL_DMA_IRQHandler+0xc60>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4a2b      	ldr	r2, [pc, #172]	; (8003df0 <HAL_DMA_IRQHandler+0xccc>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d01d      	beq.n	8003d84 <HAL_DMA_IRQHandler+0xc60>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4a29      	ldr	r2, [pc, #164]	; (8003df4 <HAL_DMA_IRQHandler+0xcd0>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d018      	beq.n	8003d84 <HAL_DMA_IRQHandler+0xc60>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4a28      	ldr	r2, [pc, #160]	; (8003df8 <HAL_DMA_IRQHandler+0xcd4>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d013      	beq.n	8003d84 <HAL_DMA_IRQHandler+0xc60>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a26      	ldr	r2, [pc, #152]	; (8003dfc <HAL_DMA_IRQHandler+0xcd8>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d00e      	beq.n	8003d84 <HAL_DMA_IRQHandler+0xc60>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a25      	ldr	r2, [pc, #148]	; (8003e00 <HAL_DMA_IRQHandler+0xcdc>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d009      	beq.n	8003d84 <HAL_DMA_IRQHandler+0xc60>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a23      	ldr	r2, [pc, #140]	; (8003e04 <HAL_DMA_IRQHandler+0xce0>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d004      	beq.n	8003d84 <HAL_DMA_IRQHandler+0xc60>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4a22      	ldr	r2, [pc, #136]	; (8003e08 <HAL_DMA_IRQHandler+0xce4>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d108      	bne.n	8003d96 <HAL_DMA_IRQHandler+0xc72>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	681a      	ldr	r2, [r3, #0]
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f022 0214 	bic.w	r2, r2, #20
 8003d92:	601a      	str	r2, [r3, #0]
 8003d94:	e007      	b.n	8003da6 <HAL_DMA_IRQHandler+0xc82>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	681a      	ldr	r2, [r3, #0]
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f022 020a 	bic.w	r2, r2, #10
 8003da4:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2200      	movs	r2, #0
 8003daa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2201      	movs	r2, #1
 8003db2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	f000 80b8 	beq.w	8003f30 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dc4:	6878      	ldr	r0, [r7, #4]
 8003dc6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003dc8:	e0b2      	b.n	8003f30 <HAL_DMA_IRQHandler+0xe0c>
 8003dca:	bf00      	nop
 8003dcc:	40020010 	.word	0x40020010
 8003dd0:	40020028 	.word	0x40020028
 8003dd4:	40020040 	.word	0x40020040
 8003dd8:	40020058 	.word	0x40020058
 8003ddc:	40020070 	.word	0x40020070
 8003de0:	40020088 	.word	0x40020088
 8003de4:	400200a0 	.word	0x400200a0
 8003de8:	400200b8 	.word	0x400200b8
 8003dec:	40020410 	.word	0x40020410
 8003df0:	40020428 	.word	0x40020428
 8003df4:	40020440 	.word	0x40020440
 8003df8:	40020458 	.word	0x40020458
 8003dfc:	40020470 	.word	0x40020470
 8003e00:	40020488 	.word	0x40020488
 8003e04:	400204a0 	.word	0x400204a0
 8003e08:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e10:	f003 031f 	and.w	r3, r3, #31
 8003e14:	2208      	movs	r2, #8
 8003e16:	409a      	lsls	r2, r3
 8003e18:	697b      	ldr	r3, [r7, #20]
 8003e1a:	4013      	ands	r3, r2
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	f000 8088 	beq.w	8003f32 <HAL_DMA_IRQHandler+0xe0e>
 8003e22:	693b      	ldr	r3, [r7, #16]
 8003e24:	f003 0308 	and.w	r3, r3, #8
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	f000 8082 	beq.w	8003f32 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4a41      	ldr	r2, [pc, #260]	; (8003f38 <HAL_DMA_IRQHandler+0xe14>)
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d04a      	beq.n	8003ece <HAL_DMA_IRQHandler+0xdaa>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4a3f      	ldr	r2, [pc, #252]	; (8003f3c <HAL_DMA_IRQHandler+0xe18>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d045      	beq.n	8003ece <HAL_DMA_IRQHandler+0xdaa>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4a3e      	ldr	r2, [pc, #248]	; (8003f40 <HAL_DMA_IRQHandler+0xe1c>)
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d040      	beq.n	8003ece <HAL_DMA_IRQHandler+0xdaa>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4a3c      	ldr	r2, [pc, #240]	; (8003f44 <HAL_DMA_IRQHandler+0xe20>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d03b      	beq.n	8003ece <HAL_DMA_IRQHandler+0xdaa>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4a3b      	ldr	r2, [pc, #236]	; (8003f48 <HAL_DMA_IRQHandler+0xe24>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d036      	beq.n	8003ece <HAL_DMA_IRQHandler+0xdaa>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4a39      	ldr	r2, [pc, #228]	; (8003f4c <HAL_DMA_IRQHandler+0xe28>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d031      	beq.n	8003ece <HAL_DMA_IRQHandler+0xdaa>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4a38      	ldr	r2, [pc, #224]	; (8003f50 <HAL_DMA_IRQHandler+0xe2c>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d02c      	beq.n	8003ece <HAL_DMA_IRQHandler+0xdaa>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a36      	ldr	r2, [pc, #216]	; (8003f54 <HAL_DMA_IRQHandler+0xe30>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d027      	beq.n	8003ece <HAL_DMA_IRQHandler+0xdaa>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4a35      	ldr	r2, [pc, #212]	; (8003f58 <HAL_DMA_IRQHandler+0xe34>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d022      	beq.n	8003ece <HAL_DMA_IRQHandler+0xdaa>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4a33      	ldr	r2, [pc, #204]	; (8003f5c <HAL_DMA_IRQHandler+0xe38>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d01d      	beq.n	8003ece <HAL_DMA_IRQHandler+0xdaa>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4a32      	ldr	r2, [pc, #200]	; (8003f60 <HAL_DMA_IRQHandler+0xe3c>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d018      	beq.n	8003ece <HAL_DMA_IRQHandler+0xdaa>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4a30      	ldr	r2, [pc, #192]	; (8003f64 <HAL_DMA_IRQHandler+0xe40>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d013      	beq.n	8003ece <HAL_DMA_IRQHandler+0xdaa>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4a2f      	ldr	r2, [pc, #188]	; (8003f68 <HAL_DMA_IRQHandler+0xe44>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d00e      	beq.n	8003ece <HAL_DMA_IRQHandler+0xdaa>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4a2d      	ldr	r2, [pc, #180]	; (8003f6c <HAL_DMA_IRQHandler+0xe48>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d009      	beq.n	8003ece <HAL_DMA_IRQHandler+0xdaa>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4a2c      	ldr	r2, [pc, #176]	; (8003f70 <HAL_DMA_IRQHandler+0xe4c>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d004      	beq.n	8003ece <HAL_DMA_IRQHandler+0xdaa>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4a2a      	ldr	r2, [pc, #168]	; (8003f74 <HAL_DMA_IRQHandler+0xe50>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d108      	bne.n	8003ee0 <HAL_DMA_IRQHandler+0xdbc>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	681a      	ldr	r2, [r3, #0]
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f022 021c 	bic.w	r2, r2, #28
 8003edc:	601a      	str	r2, [r3, #0]
 8003ede:	e007      	b.n	8003ef0 <HAL_DMA_IRQHandler+0xdcc>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	681a      	ldr	r2, [r3, #0]
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f022 020e 	bic.w	r2, r2, #14
 8003eee:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ef4:	f003 031f 	and.w	r3, r3, #31
 8003ef8:	2201      	movs	r2, #1
 8003efa:	409a      	lsls	r2, r3
 8003efc:	69fb      	ldr	r3, [r7, #28]
 8003efe:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2201      	movs	r2, #1
 8003f04:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2201      	movs	r2, #1
 8003f12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d009      	beq.n	8003f32 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f22:	6878      	ldr	r0, [r7, #4]
 8003f24:	4798      	blx	r3
 8003f26:	e004      	b.n	8003f32 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8003f28:	bf00      	nop
 8003f2a:	e002      	b.n	8003f32 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003f2c:	bf00      	nop
 8003f2e:	e000      	b.n	8003f32 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003f30:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003f32:	3728      	adds	r7, #40	; 0x28
 8003f34:	46bd      	mov	sp, r7
 8003f36:	bd80      	pop	{r7, pc}
 8003f38:	40020010 	.word	0x40020010
 8003f3c:	40020028 	.word	0x40020028
 8003f40:	40020040 	.word	0x40020040
 8003f44:	40020058 	.word	0x40020058
 8003f48:	40020070 	.word	0x40020070
 8003f4c:	40020088 	.word	0x40020088
 8003f50:	400200a0 	.word	0x400200a0
 8003f54:	400200b8 	.word	0x400200b8
 8003f58:	40020410 	.word	0x40020410
 8003f5c:	40020428 	.word	0x40020428
 8003f60:	40020440 	.word	0x40020440
 8003f64:	40020458 	.word	0x40020458
 8003f68:	40020470 	.word	0x40020470
 8003f6c:	40020488 	.word	0x40020488
 8003f70:	400204a0 	.word	0x400204a0
 8003f74:	400204b8 	.word	0x400204b8

08003f78 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003f78:	b480      	push	{r7}
 8003f7a:	b083      	sub	sp, #12
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8003f84:	4618      	mov	r0, r3
 8003f86:	370c      	adds	r7, #12
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8e:	4770      	bx	lr

08003f90 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003f90:	b480      	push	{r7}
 8003f92:	b087      	sub	sp, #28
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	60f8      	str	r0, [r7, #12]
 8003f98:	60b9      	str	r1, [r7, #8]
 8003f9a:	607a      	str	r2, [r7, #4]
 8003f9c:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fa2:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fa8:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4a84      	ldr	r2, [pc, #528]	; (80041c0 <DMA_SetConfig+0x230>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d072      	beq.n	800409a <DMA_SetConfig+0x10a>
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4a82      	ldr	r2, [pc, #520]	; (80041c4 <DMA_SetConfig+0x234>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d06d      	beq.n	800409a <DMA_SetConfig+0x10a>
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4a81      	ldr	r2, [pc, #516]	; (80041c8 <DMA_SetConfig+0x238>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d068      	beq.n	800409a <DMA_SetConfig+0x10a>
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a7f      	ldr	r2, [pc, #508]	; (80041cc <DMA_SetConfig+0x23c>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d063      	beq.n	800409a <DMA_SetConfig+0x10a>
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4a7e      	ldr	r2, [pc, #504]	; (80041d0 <DMA_SetConfig+0x240>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d05e      	beq.n	800409a <DMA_SetConfig+0x10a>
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4a7c      	ldr	r2, [pc, #496]	; (80041d4 <DMA_SetConfig+0x244>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d059      	beq.n	800409a <DMA_SetConfig+0x10a>
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4a7b      	ldr	r2, [pc, #492]	; (80041d8 <DMA_SetConfig+0x248>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d054      	beq.n	800409a <DMA_SetConfig+0x10a>
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4a79      	ldr	r2, [pc, #484]	; (80041dc <DMA_SetConfig+0x24c>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d04f      	beq.n	800409a <DMA_SetConfig+0x10a>
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4a78      	ldr	r2, [pc, #480]	; (80041e0 <DMA_SetConfig+0x250>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d04a      	beq.n	800409a <DMA_SetConfig+0x10a>
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a76      	ldr	r2, [pc, #472]	; (80041e4 <DMA_SetConfig+0x254>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d045      	beq.n	800409a <DMA_SetConfig+0x10a>
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4a75      	ldr	r2, [pc, #468]	; (80041e8 <DMA_SetConfig+0x258>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d040      	beq.n	800409a <DMA_SetConfig+0x10a>
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4a73      	ldr	r2, [pc, #460]	; (80041ec <DMA_SetConfig+0x25c>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d03b      	beq.n	800409a <DMA_SetConfig+0x10a>
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4a72      	ldr	r2, [pc, #456]	; (80041f0 <DMA_SetConfig+0x260>)
 8004028:	4293      	cmp	r3, r2
 800402a:	d036      	beq.n	800409a <DMA_SetConfig+0x10a>
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4a70      	ldr	r2, [pc, #448]	; (80041f4 <DMA_SetConfig+0x264>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d031      	beq.n	800409a <DMA_SetConfig+0x10a>
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4a6f      	ldr	r2, [pc, #444]	; (80041f8 <DMA_SetConfig+0x268>)
 800403c:	4293      	cmp	r3, r2
 800403e:	d02c      	beq.n	800409a <DMA_SetConfig+0x10a>
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4a6d      	ldr	r2, [pc, #436]	; (80041fc <DMA_SetConfig+0x26c>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d027      	beq.n	800409a <DMA_SetConfig+0x10a>
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4a6c      	ldr	r2, [pc, #432]	; (8004200 <DMA_SetConfig+0x270>)
 8004050:	4293      	cmp	r3, r2
 8004052:	d022      	beq.n	800409a <DMA_SetConfig+0x10a>
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4a6a      	ldr	r2, [pc, #424]	; (8004204 <DMA_SetConfig+0x274>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d01d      	beq.n	800409a <DMA_SetConfig+0x10a>
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4a69      	ldr	r2, [pc, #420]	; (8004208 <DMA_SetConfig+0x278>)
 8004064:	4293      	cmp	r3, r2
 8004066:	d018      	beq.n	800409a <DMA_SetConfig+0x10a>
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4a67      	ldr	r2, [pc, #412]	; (800420c <DMA_SetConfig+0x27c>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d013      	beq.n	800409a <DMA_SetConfig+0x10a>
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4a66      	ldr	r2, [pc, #408]	; (8004210 <DMA_SetConfig+0x280>)
 8004078:	4293      	cmp	r3, r2
 800407a:	d00e      	beq.n	800409a <DMA_SetConfig+0x10a>
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4a64      	ldr	r2, [pc, #400]	; (8004214 <DMA_SetConfig+0x284>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d009      	beq.n	800409a <DMA_SetConfig+0x10a>
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4a63      	ldr	r2, [pc, #396]	; (8004218 <DMA_SetConfig+0x288>)
 800408c:	4293      	cmp	r3, r2
 800408e:	d004      	beq.n	800409a <DMA_SetConfig+0x10a>
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4a61      	ldr	r2, [pc, #388]	; (800421c <DMA_SetConfig+0x28c>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d101      	bne.n	800409e <DMA_SetConfig+0x10e>
 800409a:	2301      	movs	r3, #1
 800409c:	e000      	b.n	80040a0 <DMA_SetConfig+0x110>
 800409e:	2300      	movs	r3, #0
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d00d      	beq.n	80040c0 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80040a8:	68fa      	ldr	r2, [r7, #12]
 80040aa:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80040ac:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d004      	beq.n	80040c0 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040ba:	68fa      	ldr	r2, [r7, #12]
 80040bc:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80040be:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4a3e      	ldr	r2, [pc, #248]	; (80041c0 <DMA_SetConfig+0x230>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d04a      	beq.n	8004160 <DMA_SetConfig+0x1d0>
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4a3d      	ldr	r2, [pc, #244]	; (80041c4 <DMA_SetConfig+0x234>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d045      	beq.n	8004160 <DMA_SetConfig+0x1d0>
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a3b      	ldr	r2, [pc, #236]	; (80041c8 <DMA_SetConfig+0x238>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d040      	beq.n	8004160 <DMA_SetConfig+0x1d0>
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4a3a      	ldr	r2, [pc, #232]	; (80041cc <DMA_SetConfig+0x23c>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d03b      	beq.n	8004160 <DMA_SetConfig+0x1d0>
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a38      	ldr	r2, [pc, #224]	; (80041d0 <DMA_SetConfig+0x240>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d036      	beq.n	8004160 <DMA_SetConfig+0x1d0>
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4a37      	ldr	r2, [pc, #220]	; (80041d4 <DMA_SetConfig+0x244>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d031      	beq.n	8004160 <DMA_SetConfig+0x1d0>
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a35      	ldr	r2, [pc, #212]	; (80041d8 <DMA_SetConfig+0x248>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d02c      	beq.n	8004160 <DMA_SetConfig+0x1d0>
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4a34      	ldr	r2, [pc, #208]	; (80041dc <DMA_SetConfig+0x24c>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d027      	beq.n	8004160 <DMA_SetConfig+0x1d0>
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4a32      	ldr	r2, [pc, #200]	; (80041e0 <DMA_SetConfig+0x250>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d022      	beq.n	8004160 <DMA_SetConfig+0x1d0>
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4a31      	ldr	r2, [pc, #196]	; (80041e4 <DMA_SetConfig+0x254>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d01d      	beq.n	8004160 <DMA_SetConfig+0x1d0>
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a2f      	ldr	r2, [pc, #188]	; (80041e8 <DMA_SetConfig+0x258>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d018      	beq.n	8004160 <DMA_SetConfig+0x1d0>
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4a2e      	ldr	r2, [pc, #184]	; (80041ec <DMA_SetConfig+0x25c>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d013      	beq.n	8004160 <DMA_SetConfig+0x1d0>
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4a2c      	ldr	r2, [pc, #176]	; (80041f0 <DMA_SetConfig+0x260>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d00e      	beq.n	8004160 <DMA_SetConfig+0x1d0>
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4a2b      	ldr	r2, [pc, #172]	; (80041f4 <DMA_SetConfig+0x264>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d009      	beq.n	8004160 <DMA_SetConfig+0x1d0>
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4a29      	ldr	r2, [pc, #164]	; (80041f8 <DMA_SetConfig+0x268>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d004      	beq.n	8004160 <DMA_SetConfig+0x1d0>
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4a28      	ldr	r2, [pc, #160]	; (80041fc <DMA_SetConfig+0x26c>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d101      	bne.n	8004164 <DMA_SetConfig+0x1d4>
 8004160:	2301      	movs	r3, #1
 8004162:	e000      	b.n	8004166 <DMA_SetConfig+0x1d6>
 8004164:	2300      	movs	r3, #0
 8004166:	2b00      	cmp	r3, #0
 8004168:	d05a      	beq.n	8004220 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800416e:	f003 031f 	and.w	r3, r3, #31
 8004172:	223f      	movs	r2, #63	; 0x3f
 8004174:	409a      	lsls	r2, r3
 8004176:	697b      	ldr	r3, [r7, #20]
 8004178:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	681a      	ldr	r2, [r3, #0]
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004188:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	683a      	ldr	r2, [r7, #0]
 8004190:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	689b      	ldr	r3, [r3, #8]
 8004196:	2b40      	cmp	r3, #64	; 0x40
 8004198:	d108      	bne.n	80041ac <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	687a      	ldr	r2, [r7, #4]
 80041a0:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	68ba      	ldr	r2, [r7, #8]
 80041a8:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80041aa:	e087      	b.n	80042bc <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	68ba      	ldr	r2, [r7, #8]
 80041b2:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	687a      	ldr	r2, [r7, #4]
 80041ba:	60da      	str	r2, [r3, #12]
}
 80041bc:	e07e      	b.n	80042bc <DMA_SetConfig+0x32c>
 80041be:	bf00      	nop
 80041c0:	40020010 	.word	0x40020010
 80041c4:	40020028 	.word	0x40020028
 80041c8:	40020040 	.word	0x40020040
 80041cc:	40020058 	.word	0x40020058
 80041d0:	40020070 	.word	0x40020070
 80041d4:	40020088 	.word	0x40020088
 80041d8:	400200a0 	.word	0x400200a0
 80041dc:	400200b8 	.word	0x400200b8
 80041e0:	40020410 	.word	0x40020410
 80041e4:	40020428 	.word	0x40020428
 80041e8:	40020440 	.word	0x40020440
 80041ec:	40020458 	.word	0x40020458
 80041f0:	40020470 	.word	0x40020470
 80041f4:	40020488 	.word	0x40020488
 80041f8:	400204a0 	.word	0x400204a0
 80041fc:	400204b8 	.word	0x400204b8
 8004200:	58025408 	.word	0x58025408
 8004204:	5802541c 	.word	0x5802541c
 8004208:	58025430 	.word	0x58025430
 800420c:	58025444 	.word	0x58025444
 8004210:	58025458 	.word	0x58025458
 8004214:	5802546c 	.word	0x5802546c
 8004218:	58025480 	.word	0x58025480
 800421c:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4a28      	ldr	r2, [pc, #160]	; (80042c8 <DMA_SetConfig+0x338>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d022      	beq.n	8004270 <DMA_SetConfig+0x2e0>
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4a27      	ldr	r2, [pc, #156]	; (80042cc <DMA_SetConfig+0x33c>)
 8004230:	4293      	cmp	r3, r2
 8004232:	d01d      	beq.n	8004270 <DMA_SetConfig+0x2e0>
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4a25      	ldr	r2, [pc, #148]	; (80042d0 <DMA_SetConfig+0x340>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d018      	beq.n	8004270 <DMA_SetConfig+0x2e0>
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4a24      	ldr	r2, [pc, #144]	; (80042d4 <DMA_SetConfig+0x344>)
 8004244:	4293      	cmp	r3, r2
 8004246:	d013      	beq.n	8004270 <DMA_SetConfig+0x2e0>
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	4a22      	ldr	r2, [pc, #136]	; (80042d8 <DMA_SetConfig+0x348>)
 800424e:	4293      	cmp	r3, r2
 8004250:	d00e      	beq.n	8004270 <DMA_SetConfig+0x2e0>
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4a21      	ldr	r2, [pc, #132]	; (80042dc <DMA_SetConfig+0x34c>)
 8004258:	4293      	cmp	r3, r2
 800425a:	d009      	beq.n	8004270 <DMA_SetConfig+0x2e0>
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4a1f      	ldr	r2, [pc, #124]	; (80042e0 <DMA_SetConfig+0x350>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d004      	beq.n	8004270 <DMA_SetConfig+0x2e0>
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4a1e      	ldr	r2, [pc, #120]	; (80042e4 <DMA_SetConfig+0x354>)
 800426c:	4293      	cmp	r3, r2
 800426e:	d101      	bne.n	8004274 <DMA_SetConfig+0x2e4>
 8004270:	2301      	movs	r3, #1
 8004272:	e000      	b.n	8004276 <DMA_SetConfig+0x2e6>
 8004274:	2300      	movs	r3, #0
 8004276:	2b00      	cmp	r3, #0
 8004278:	d020      	beq.n	80042bc <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800427e:	f003 031f 	and.w	r3, r3, #31
 8004282:	2201      	movs	r2, #1
 8004284:	409a      	lsls	r2, r3
 8004286:	693b      	ldr	r3, [r7, #16]
 8004288:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	683a      	ldr	r2, [r7, #0]
 8004290:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	689b      	ldr	r3, [r3, #8]
 8004296:	2b40      	cmp	r3, #64	; 0x40
 8004298:	d108      	bne.n	80042ac <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	687a      	ldr	r2, [r7, #4]
 80042a0:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	68ba      	ldr	r2, [r7, #8]
 80042a8:	60da      	str	r2, [r3, #12]
}
 80042aa:	e007      	b.n	80042bc <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	68ba      	ldr	r2, [r7, #8]
 80042b2:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	687a      	ldr	r2, [r7, #4]
 80042ba:	60da      	str	r2, [r3, #12]
}
 80042bc:	bf00      	nop
 80042be:	371c      	adds	r7, #28
 80042c0:	46bd      	mov	sp, r7
 80042c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c6:	4770      	bx	lr
 80042c8:	58025408 	.word	0x58025408
 80042cc:	5802541c 	.word	0x5802541c
 80042d0:	58025430 	.word	0x58025430
 80042d4:	58025444 	.word	0x58025444
 80042d8:	58025458 	.word	0x58025458
 80042dc:	5802546c 	.word	0x5802546c
 80042e0:	58025480 	.word	0x58025480
 80042e4:	58025494 	.word	0x58025494

080042e8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80042e8:	b480      	push	{r7}
 80042ea:	b085      	sub	sp, #20
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4a42      	ldr	r2, [pc, #264]	; (8004400 <DMA_CalcBaseAndBitshift+0x118>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d04a      	beq.n	8004390 <DMA_CalcBaseAndBitshift+0xa8>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4a41      	ldr	r2, [pc, #260]	; (8004404 <DMA_CalcBaseAndBitshift+0x11c>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d045      	beq.n	8004390 <DMA_CalcBaseAndBitshift+0xa8>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4a3f      	ldr	r2, [pc, #252]	; (8004408 <DMA_CalcBaseAndBitshift+0x120>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d040      	beq.n	8004390 <DMA_CalcBaseAndBitshift+0xa8>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4a3e      	ldr	r2, [pc, #248]	; (800440c <DMA_CalcBaseAndBitshift+0x124>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d03b      	beq.n	8004390 <DMA_CalcBaseAndBitshift+0xa8>
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4a3c      	ldr	r2, [pc, #240]	; (8004410 <DMA_CalcBaseAndBitshift+0x128>)
 800431e:	4293      	cmp	r3, r2
 8004320:	d036      	beq.n	8004390 <DMA_CalcBaseAndBitshift+0xa8>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4a3b      	ldr	r2, [pc, #236]	; (8004414 <DMA_CalcBaseAndBitshift+0x12c>)
 8004328:	4293      	cmp	r3, r2
 800432a:	d031      	beq.n	8004390 <DMA_CalcBaseAndBitshift+0xa8>
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4a39      	ldr	r2, [pc, #228]	; (8004418 <DMA_CalcBaseAndBitshift+0x130>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d02c      	beq.n	8004390 <DMA_CalcBaseAndBitshift+0xa8>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4a38      	ldr	r2, [pc, #224]	; (800441c <DMA_CalcBaseAndBitshift+0x134>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d027      	beq.n	8004390 <DMA_CalcBaseAndBitshift+0xa8>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4a36      	ldr	r2, [pc, #216]	; (8004420 <DMA_CalcBaseAndBitshift+0x138>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d022      	beq.n	8004390 <DMA_CalcBaseAndBitshift+0xa8>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4a35      	ldr	r2, [pc, #212]	; (8004424 <DMA_CalcBaseAndBitshift+0x13c>)
 8004350:	4293      	cmp	r3, r2
 8004352:	d01d      	beq.n	8004390 <DMA_CalcBaseAndBitshift+0xa8>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4a33      	ldr	r2, [pc, #204]	; (8004428 <DMA_CalcBaseAndBitshift+0x140>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d018      	beq.n	8004390 <DMA_CalcBaseAndBitshift+0xa8>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4a32      	ldr	r2, [pc, #200]	; (800442c <DMA_CalcBaseAndBitshift+0x144>)
 8004364:	4293      	cmp	r3, r2
 8004366:	d013      	beq.n	8004390 <DMA_CalcBaseAndBitshift+0xa8>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4a30      	ldr	r2, [pc, #192]	; (8004430 <DMA_CalcBaseAndBitshift+0x148>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d00e      	beq.n	8004390 <DMA_CalcBaseAndBitshift+0xa8>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4a2f      	ldr	r2, [pc, #188]	; (8004434 <DMA_CalcBaseAndBitshift+0x14c>)
 8004378:	4293      	cmp	r3, r2
 800437a:	d009      	beq.n	8004390 <DMA_CalcBaseAndBitshift+0xa8>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4a2d      	ldr	r2, [pc, #180]	; (8004438 <DMA_CalcBaseAndBitshift+0x150>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d004      	beq.n	8004390 <DMA_CalcBaseAndBitshift+0xa8>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4a2c      	ldr	r2, [pc, #176]	; (800443c <DMA_CalcBaseAndBitshift+0x154>)
 800438c:	4293      	cmp	r3, r2
 800438e:	d101      	bne.n	8004394 <DMA_CalcBaseAndBitshift+0xac>
 8004390:	2301      	movs	r3, #1
 8004392:	e000      	b.n	8004396 <DMA_CalcBaseAndBitshift+0xae>
 8004394:	2300      	movs	r3, #0
 8004396:	2b00      	cmp	r3, #0
 8004398:	d024      	beq.n	80043e4 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	b2db      	uxtb	r3, r3
 80043a0:	3b10      	subs	r3, #16
 80043a2:	4a27      	ldr	r2, [pc, #156]	; (8004440 <DMA_CalcBaseAndBitshift+0x158>)
 80043a4:	fba2 2303 	umull	r2, r3, r2, r3
 80043a8:	091b      	lsrs	r3, r3, #4
 80043aa:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	f003 0307 	and.w	r3, r3, #7
 80043b2:	4a24      	ldr	r2, [pc, #144]	; (8004444 <DMA_CalcBaseAndBitshift+0x15c>)
 80043b4:	5cd3      	ldrb	r3, [r2, r3]
 80043b6:	461a      	mov	r2, r3
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	2b03      	cmp	r3, #3
 80043c0:	d908      	bls.n	80043d4 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	461a      	mov	r2, r3
 80043c8:	4b1f      	ldr	r3, [pc, #124]	; (8004448 <DMA_CalcBaseAndBitshift+0x160>)
 80043ca:	4013      	ands	r3, r2
 80043cc:	1d1a      	adds	r2, r3, #4
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	659a      	str	r2, [r3, #88]	; 0x58
 80043d2:	e00d      	b.n	80043f0 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	461a      	mov	r2, r3
 80043da:	4b1b      	ldr	r3, [pc, #108]	; (8004448 <DMA_CalcBaseAndBitshift+0x160>)
 80043dc:	4013      	ands	r3, r2
 80043de:	687a      	ldr	r2, [r7, #4]
 80043e0:	6593      	str	r3, [r2, #88]	; 0x58
 80043e2:	e005      	b.n	80043f0 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80043f4:	4618      	mov	r0, r3
 80043f6:	3714      	adds	r7, #20
 80043f8:	46bd      	mov	sp, r7
 80043fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fe:	4770      	bx	lr
 8004400:	40020010 	.word	0x40020010
 8004404:	40020028 	.word	0x40020028
 8004408:	40020040 	.word	0x40020040
 800440c:	40020058 	.word	0x40020058
 8004410:	40020070 	.word	0x40020070
 8004414:	40020088 	.word	0x40020088
 8004418:	400200a0 	.word	0x400200a0
 800441c:	400200b8 	.word	0x400200b8
 8004420:	40020410 	.word	0x40020410
 8004424:	40020428 	.word	0x40020428
 8004428:	40020440 	.word	0x40020440
 800442c:	40020458 	.word	0x40020458
 8004430:	40020470 	.word	0x40020470
 8004434:	40020488 	.word	0x40020488
 8004438:	400204a0 	.word	0x400204a0
 800443c:	400204b8 	.word	0x400204b8
 8004440:	aaaaaaab 	.word	0xaaaaaaab
 8004444:	0800ce54 	.word	0x0800ce54
 8004448:	fffffc00 	.word	0xfffffc00

0800444c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800444c:	b480      	push	{r7}
 800444e:	b085      	sub	sp, #20
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004454:	2300      	movs	r3, #0
 8004456:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	699b      	ldr	r3, [r3, #24]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d120      	bne.n	80044a2 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004464:	2b03      	cmp	r3, #3
 8004466:	d858      	bhi.n	800451a <DMA_CheckFifoParam+0xce>
 8004468:	a201      	add	r2, pc, #4	; (adr r2, 8004470 <DMA_CheckFifoParam+0x24>)
 800446a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800446e:	bf00      	nop
 8004470:	08004481 	.word	0x08004481
 8004474:	08004493 	.word	0x08004493
 8004478:	08004481 	.word	0x08004481
 800447c:	0800451b 	.word	0x0800451b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004484:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004488:	2b00      	cmp	r3, #0
 800448a:	d048      	beq.n	800451e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800448c:	2301      	movs	r3, #1
 800448e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004490:	e045      	b.n	800451e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004496:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800449a:	d142      	bne.n	8004522 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800449c:	2301      	movs	r3, #1
 800449e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80044a0:	e03f      	b.n	8004522 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	699b      	ldr	r3, [r3, #24]
 80044a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80044aa:	d123      	bne.n	80044f4 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044b0:	2b03      	cmp	r3, #3
 80044b2:	d838      	bhi.n	8004526 <DMA_CheckFifoParam+0xda>
 80044b4:	a201      	add	r2, pc, #4	; (adr r2, 80044bc <DMA_CheckFifoParam+0x70>)
 80044b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044ba:	bf00      	nop
 80044bc:	080044cd 	.word	0x080044cd
 80044c0:	080044d3 	.word	0x080044d3
 80044c4:	080044cd 	.word	0x080044cd
 80044c8:	080044e5 	.word	0x080044e5
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80044cc:	2301      	movs	r3, #1
 80044ce:	73fb      	strb	r3, [r7, #15]
        break;
 80044d0:	e030      	b.n	8004534 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044d6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d025      	beq.n	800452a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80044de:	2301      	movs	r3, #1
 80044e0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80044e2:	e022      	b.n	800452a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044e8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80044ec:	d11f      	bne.n	800452e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80044ee:	2301      	movs	r3, #1
 80044f0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80044f2:	e01c      	b.n	800452e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044f8:	2b02      	cmp	r3, #2
 80044fa:	d902      	bls.n	8004502 <DMA_CheckFifoParam+0xb6>
 80044fc:	2b03      	cmp	r3, #3
 80044fe:	d003      	beq.n	8004508 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004500:	e018      	b.n	8004534 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8004502:	2301      	movs	r3, #1
 8004504:	73fb      	strb	r3, [r7, #15]
        break;
 8004506:	e015      	b.n	8004534 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800450c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004510:	2b00      	cmp	r3, #0
 8004512:	d00e      	beq.n	8004532 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004514:	2301      	movs	r3, #1
 8004516:	73fb      	strb	r3, [r7, #15]
    break;
 8004518:	e00b      	b.n	8004532 <DMA_CheckFifoParam+0xe6>
        break;
 800451a:	bf00      	nop
 800451c:	e00a      	b.n	8004534 <DMA_CheckFifoParam+0xe8>
        break;
 800451e:	bf00      	nop
 8004520:	e008      	b.n	8004534 <DMA_CheckFifoParam+0xe8>
        break;
 8004522:	bf00      	nop
 8004524:	e006      	b.n	8004534 <DMA_CheckFifoParam+0xe8>
        break;
 8004526:	bf00      	nop
 8004528:	e004      	b.n	8004534 <DMA_CheckFifoParam+0xe8>
        break;
 800452a:	bf00      	nop
 800452c:	e002      	b.n	8004534 <DMA_CheckFifoParam+0xe8>
        break;
 800452e:	bf00      	nop
 8004530:	e000      	b.n	8004534 <DMA_CheckFifoParam+0xe8>
    break;
 8004532:	bf00      	nop
    }
  }

  return status;
 8004534:	7bfb      	ldrb	r3, [r7, #15]
}
 8004536:	4618      	mov	r0, r3
 8004538:	3714      	adds	r7, #20
 800453a:	46bd      	mov	sp, r7
 800453c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004540:	4770      	bx	lr
 8004542:	bf00      	nop

08004544 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004544:	b480      	push	{r7}
 8004546:	b085      	sub	sp, #20
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4a38      	ldr	r2, [pc, #224]	; (8004638 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d022      	beq.n	80045a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4a36      	ldr	r2, [pc, #216]	; (800463c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d01d      	beq.n	80045a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4a35      	ldr	r2, [pc, #212]	; (8004640 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d018      	beq.n	80045a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4a33      	ldr	r2, [pc, #204]	; (8004644 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d013      	beq.n	80045a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4a32      	ldr	r2, [pc, #200]	; (8004648 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d00e      	beq.n	80045a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4a30      	ldr	r2, [pc, #192]	; (800464c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d009      	beq.n	80045a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4a2f      	ldr	r2, [pc, #188]	; (8004650 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004594:	4293      	cmp	r3, r2
 8004596:	d004      	beq.n	80045a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4a2d      	ldr	r2, [pc, #180]	; (8004654 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d101      	bne.n	80045a6 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80045a2:	2301      	movs	r3, #1
 80045a4:	e000      	b.n	80045a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80045a6:	2300      	movs	r3, #0
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d01a      	beq.n	80045e2 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	b2db      	uxtb	r3, r3
 80045b2:	3b08      	subs	r3, #8
 80045b4:	4a28      	ldr	r2, [pc, #160]	; (8004658 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80045b6:	fba2 2303 	umull	r2, r3, r2, r3
 80045ba:	091b      	lsrs	r3, r3, #4
 80045bc:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80045be:	68fa      	ldr	r2, [r7, #12]
 80045c0:	4b26      	ldr	r3, [pc, #152]	; (800465c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80045c2:	4413      	add	r3, r2
 80045c4:	009b      	lsls	r3, r3, #2
 80045c6:	461a      	mov	r2, r3
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	4a24      	ldr	r2, [pc, #144]	; (8004660 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80045d0:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	f003 031f 	and.w	r3, r3, #31
 80045d8:	2201      	movs	r2, #1
 80045da:	409a      	lsls	r2, r3
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80045e0:	e024      	b.n	800462c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	b2db      	uxtb	r3, r3
 80045e8:	3b10      	subs	r3, #16
 80045ea:	4a1e      	ldr	r2, [pc, #120]	; (8004664 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80045ec:	fba2 2303 	umull	r2, r3, r2, r3
 80045f0:	091b      	lsrs	r3, r3, #4
 80045f2:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80045f4:	68bb      	ldr	r3, [r7, #8]
 80045f6:	4a1c      	ldr	r2, [pc, #112]	; (8004668 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d806      	bhi.n	800460a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80045fc:	68bb      	ldr	r3, [r7, #8]
 80045fe:	4a1b      	ldr	r2, [pc, #108]	; (800466c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d902      	bls.n	800460a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	3308      	adds	r3, #8
 8004608:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800460a:	68fa      	ldr	r2, [r7, #12]
 800460c:	4b18      	ldr	r3, [pc, #96]	; (8004670 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800460e:	4413      	add	r3, r2
 8004610:	009b      	lsls	r3, r3, #2
 8004612:	461a      	mov	r2, r3
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	4a16      	ldr	r2, [pc, #88]	; (8004674 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800461c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	f003 031f 	and.w	r3, r3, #31
 8004624:	2201      	movs	r2, #1
 8004626:	409a      	lsls	r2, r3
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	669a      	str	r2, [r3, #104]	; 0x68
}
 800462c:	bf00      	nop
 800462e:	3714      	adds	r7, #20
 8004630:	46bd      	mov	sp, r7
 8004632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004636:	4770      	bx	lr
 8004638:	58025408 	.word	0x58025408
 800463c:	5802541c 	.word	0x5802541c
 8004640:	58025430 	.word	0x58025430
 8004644:	58025444 	.word	0x58025444
 8004648:	58025458 	.word	0x58025458
 800464c:	5802546c 	.word	0x5802546c
 8004650:	58025480 	.word	0x58025480
 8004654:	58025494 	.word	0x58025494
 8004658:	cccccccd 	.word	0xcccccccd
 800465c:	16009600 	.word	0x16009600
 8004660:	58025880 	.word	0x58025880
 8004664:	aaaaaaab 	.word	0xaaaaaaab
 8004668:	400204b8 	.word	0x400204b8
 800466c:	4002040f 	.word	0x4002040f
 8004670:	10008200 	.word	0x10008200
 8004674:	40020880 	.word	0x40020880

08004678 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004678:	b480      	push	{r7}
 800467a:	b085      	sub	sp, #20
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	685b      	ldr	r3, [r3, #4]
 8004684:	b2db      	uxtb	r3, r3
 8004686:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d04a      	beq.n	8004724 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	2b08      	cmp	r3, #8
 8004692:	d847      	bhi.n	8004724 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4a25      	ldr	r2, [pc, #148]	; (8004730 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d022      	beq.n	80046e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4a24      	ldr	r2, [pc, #144]	; (8004734 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d01d      	beq.n	80046e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4a22      	ldr	r2, [pc, #136]	; (8004738 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d018      	beq.n	80046e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4a21      	ldr	r2, [pc, #132]	; (800473c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d013      	beq.n	80046e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4a1f      	ldr	r2, [pc, #124]	; (8004740 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d00e      	beq.n	80046e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4a1e      	ldr	r2, [pc, #120]	; (8004744 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d009      	beq.n	80046e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4a1c      	ldr	r2, [pc, #112]	; (8004748 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d004      	beq.n	80046e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4a1b      	ldr	r2, [pc, #108]	; (800474c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d101      	bne.n	80046e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80046e4:	2301      	movs	r3, #1
 80046e6:	e000      	b.n	80046ea <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80046e8:	2300      	movs	r3, #0
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d00a      	beq.n	8004704 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80046ee:	68fa      	ldr	r2, [r7, #12]
 80046f0:	4b17      	ldr	r3, [pc, #92]	; (8004750 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80046f2:	4413      	add	r3, r2
 80046f4:	009b      	lsls	r3, r3, #2
 80046f6:	461a      	mov	r2, r3
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	4a15      	ldr	r2, [pc, #84]	; (8004754 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004700:	671a      	str	r2, [r3, #112]	; 0x70
 8004702:	e009      	b.n	8004718 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004704:	68fa      	ldr	r2, [r7, #12]
 8004706:	4b14      	ldr	r3, [pc, #80]	; (8004758 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004708:	4413      	add	r3, r2
 800470a:	009b      	lsls	r3, r3, #2
 800470c:	461a      	mov	r2, r3
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	4a11      	ldr	r2, [pc, #68]	; (800475c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8004716:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	3b01      	subs	r3, #1
 800471c:	2201      	movs	r2, #1
 800471e:	409a      	lsls	r2, r3
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8004724:	bf00      	nop
 8004726:	3714      	adds	r7, #20
 8004728:	46bd      	mov	sp, r7
 800472a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472e:	4770      	bx	lr
 8004730:	58025408 	.word	0x58025408
 8004734:	5802541c 	.word	0x5802541c
 8004738:	58025430 	.word	0x58025430
 800473c:	58025444 	.word	0x58025444
 8004740:	58025458 	.word	0x58025458
 8004744:	5802546c 	.word	0x5802546c
 8004748:	58025480 	.word	0x58025480
 800474c:	58025494 	.word	0x58025494
 8004750:	1600963f 	.word	0x1600963f
 8004754:	58025940 	.word	0x58025940
 8004758:	1000823f 	.word	0x1000823f
 800475c:	40020940 	.word	0x40020940

08004760 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004760:	b480      	push	{r7}
 8004762:	b089      	sub	sp, #36	; 0x24
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
 8004768:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800476a:	2300      	movs	r3, #0
 800476c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800476e:	4b89      	ldr	r3, [pc, #548]	; (8004994 <HAL_GPIO_Init+0x234>)
 8004770:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004772:	e194      	b.n	8004a9e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	681a      	ldr	r2, [r3, #0]
 8004778:	2101      	movs	r1, #1
 800477a:	69fb      	ldr	r3, [r7, #28]
 800477c:	fa01 f303 	lsl.w	r3, r1, r3
 8004780:	4013      	ands	r3, r2
 8004782:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004784:	693b      	ldr	r3, [r7, #16]
 8004786:	2b00      	cmp	r3, #0
 8004788:	f000 8186 	beq.w	8004a98 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	685b      	ldr	r3, [r3, #4]
 8004790:	2b01      	cmp	r3, #1
 8004792:	d00b      	beq.n	80047ac <HAL_GPIO_Init+0x4c>
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	685b      	ldr	r3, [r3, #4]
 8004798:	2b02      	cmp	r3, #2
 800479a:	d007      	beq.n	80047ac <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80047a0:	2b11      	cmp	r3, #17
 80047a2:	d003      	beq.n	80047ac <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	685b      	ldr	r3, [r3, #4]
 80047a8:	2b12      	cmp	r3, #18
 80047aa:	d130      	bne.n	800480e <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	689b      	ldr	r3, [r3, #8]
 80047b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80047b2:	69fb      	ldr	r3, [r7, #28]
 80047b4:	005b      	lsls	r3, r3, #1
 80047b6:	2203      	movs	r2, #3
 80047b8:	fa02 f303 	lsl.w	r3, r2, r3
 80047bc:	43db      	mvns	r3, r3
 80047be:	69ba      	ldr	r2, [r7, #24]
 80047c0:	4013      	ands	r3, r2
 80047c2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	68da      	ldr	r2, [r3, #12]
 80047c8:	69fb      	ldr	r3, [r7, #28]
 80047ca:	005b      	lsls	r3, r3, #1
 80047cc:	fa02 f303 	lsl.w	r3, r2, r3
 80047d0:	69ba      	ldr	r2, [r7, #24]
 80047d2:	4313      	orrs	r3, r2
 80047d4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	69ba      	ldr	r2, [r7, #24]
 80047da:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	685b      	ldr	r3, [r3, #4]
 80047e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80047e2:	2201      	movs	r2, #1
 80047e4:	69fb      	ldr	r3, [r7, #28]
 80047e6:	fa02 f303 	lsl.w	r3, r2, r3
 80047ea:	43db      	mvns	r3, r3
 80047ec:	69ba      	ldr	r2, [r7, #24]
 80047ee:	4013      	ands	r3, r2
 80047f0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	091b      	lsrs	r3, r3, #4
 80047f8:	f003 0201 	and.w	r2, r3, #1
 80047fc:	69fb      	ldr	r3, [r7, #28]
 80047fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004802:	69ba      	ldr	r2, [r7, #24]
 8004804:	4313      	orrs	r3, r2
 8004806:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	69ba      	ldr	r2, [r7, #24]
 800480c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	68db      	ldr	r3, [r3, #12]
 8004812:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004814:	69fb      	ldr	r3, [r7, #28]
 8004816:	005b      	lsls	r3, r3, #1
 8004818:	2203      	movs	r2, #3
 800481a:	fa02 f303 	lsl.w	r3, r2, r3
 800481e:	43db      	mvns	r3, r3
 8004820:	69ba      	ldr	r2, [r7, #24]
 8004822:	4013      	ands	r3, r2
 8004824:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	689a      	ldr	r2, [r3, #8]
 800482a:	69fb      	ldr	r3, [r7, #28]
 800482c:	005b      	lsls	r3, r3, #1
 800482e:	fa02 f303 	lsl.w	r3, r2, r3
 8004832:	69ba      	ldr	r2, [r7, #24]
 8004834:	4313      	orrs	r3, r2
 8004836:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	69ba      	ldr	r2, [r7, #24]
 800483c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	685b      	ldr	r3, [r3, #4]
 8004842:	2b02      	cmp	r3, #2
 8004844:	d003      	beq.n	800484e <HAL_GPIO_Init+0xee>
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	2b12      	cmp	r3, #18
 800484c:	d123      	bne.n	8004896 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800484e:	69fb      	ldr	r3, [r7, #28]
 8004850:	08da      	lsrs	r2, r3, #3
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	3208      	adds	r2, #8
 8004856:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800485a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800485c:	69fb      	ldr	r3, [r7, #28]
 800485e:	f003 0307 	and.w	r3, r3, #7
 8004862:	009b      	lsls	r3, r3, #2
 8004864:	220f      	movs	r2, #15
 8004866:	fa02 f303 	lsl.w	r3, r2, r3
 800486a:	43db      	mvns	r3, r3
 800486c:	69ba      	ldr	r2, [r7, #24]
 800486e:	4013      	ands	r3, r2
 8004870:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	691a      	ldr	r2, [r3, #16]
 8004876:	69fb      	ldr	r3, [r7, #28]
 8004878:	f003 0307 	and.w	r3, r3, #7
 800487c:	009b      	lsls	r3, r3, #2
 800487e:	fa02 f303 	lsl.w	r3, r2, r3
 8004882:	69ba      	ldr	r2, [r7, #24]
 8004884:	4313      	orrs	r3, r2
 8004886:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004888:	69fb      	ldr	r3, [r7, #28]
 800488a:	08da      	lsrs	r2, r3, #3
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	3208      	adds	r2, #8
 8004890:	69b9      	ldr	r1, [r7, #24]
 8004892:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800489c:	69fb      	ldr	r3, [r7, #28]
 800489e:	005b      	lsls	r3, r3, #1
 80048a0:	2203      	movs	r2, #3
 80048a2:	fa02 f303 	lsl.w	r3, r2, r3
 80048a6:	43db      	mvns	r3, r3
 80048a8:	69ba      	ldr	r2, [r7, #24]
 80048aa:	4013      	ands	r3, r2
 80048ac:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	685b      	ldr	r3, [r3, #4]
 80048b2:	f003 0203 	and.w	r2, r3, #3
 80048b6:	69fb      	ldr	r3, [r7, #28]
 80048b8:	005b      	lsls	r3, r3, #1
 80048ba:	fa02 f303 	lsl.w	r3, r2, r3
 80048be:	69ba      	ldr	r2, [r7, #24]
 80048c0:	4313      	orrs	r3, r2
 80048c2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	69ba      	ldr	r2, [r7, #24]
 80048c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	685b      	ldr	r3, [r3, #4]
 80048ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	f000 80e0 	beq.w	8004a98 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80048d8:	4b2f      	ldr	r3, [pc, #188]	; (8004998 <HAL_GPIO_Init+0x238>)
 80048da:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80048de:	4a2e      	ldr	r2, [pc, #184]	; (8004998 <HAL_GPIO_Init+0x238>)
 80048e0:	f043 0302 	orr.w	r3, r3, #2
 80048e4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80048e8:	4b2b      	ldr	r3, [pc, #172]	; (8004998 <HAL_GPIO_Init+0x238>)
 80048ea:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80048ee:	f003 0302 	and.w	r3, r3, #2
 80048f2:	60fb      	str	r3, [r7, #12]
 80048f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80048f6:	4a29      	ldr	r2, [pc, #164]	; (800499c <HAL_GPIO_Init+0x23c>)
 80048f8:	69fb      	ldr	r3, [r7, #28]
 80048fa:	089b      	lsrs	r3, r3, #2
 80048fc:	3302      	adds	r3, #2
 80048fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004902:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004904:	69fb      	ldr	r3, [r7, #28]
 8004906:	f003 0303 	and.w	r3, r3, #3
 800490a:	009b      	lsls	r3, r3, #2
 800490c:	220f      	movs	r2, #15
 800490e:	fa02 f303 	lsl.w	r3, r2, r3
 8004912:	43db      	mvns	r3, r3
 8004914:	69ba      	ldr	r2, [r7, #24]
 8004916:	4013      	ands	r3, r2
 8004918:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	4a20      	ldr	r2, [pc, #128]	; (80049a0 <HAL_GPIO_Init+0x240>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d052      	beq.n	80049c8 <HAL_GPIO_Init+0x268>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	4a1f      	ldr	r2, [pc, #124]	; (80049a4 <HAL_GPIO_Init+0x244>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d031      	beq.n	800498e <HAL_GPIO_Init+0x22e>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	4a1e      	ldr	r2, [pc, #120]	; (80049a8 <HAL_GPIO_Init+0x248>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d02b      	beq.n	800498a <HAL_GPIO_Init+0x22a>
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	4a1d      	ldr	r2, [pc, #116]	; (80049ac <HAL_GPIO_Init+0x24c>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d025      	beq.n	8004986 <HAL_GPIO_Init+0x226>
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	4a1c      	ldr	r2, [pc, #112]	; (80049b0 <HAL_GPIO_Init+0x250>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d01f      	beq.n	8004982 <HAL_GPIO_Init+0x222>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	4a1b      	ldr	r2, [pc, #108]	; (80049b4 <HAL_GPIO_Init+0x254>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d019      	beq.n	800497e <HAL_GPIO_Init+0x21e>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	4a1a      	ldr	r2, [pc, #104]	; (80049b8 <HAL_GPIO_Init+0x258>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d013      	beq.n	800497a <HAL_GPIO_Init+0x21a>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	4a19      	ldr	r2, [pc, #100]	; (80049bc <HAL_GPIO_Init+0x25c>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d00d      	beq.n	8004976 <HAL_GPIO_Init+0x216>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	4a18      	ldr	r2, [pc, #96]	; (80049c0 <HAL_GPIO_Init+0x260>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d007      	beq.n	8004972 <HAL_GPIO_Init+0x212>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	4a17      	ldr	r2, [pc, #92]	; (80049c4 <HAL_GPIO_Init+0x264>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d101      	bne.n	800496e <HAL_GPIO_Init+0x20e>
 800496a:	2309      	movs	r3, #9
 800496c:	e02d      	b.n	80049ca <HAL_GPIO_Init+0x26a>
 800496e:	230a      	movs	r3, #10
 8004970:	e02b      	b.n	80049ca <HAL_GPIO_Init+0x26a>
 8004972:	2308      	movs	r3, #8
 8004974:	e029      	b.n	80049ca <HAL_GPIO_Init+0x26a>
 8004976:	2307      	movs	r3, #7
 8004978:	e027      	b.n	80049ca <HAL_GPIO_Init+0x26a>
 800497a:	2306      	movs	r3, #6
 800497c:	e025      	b.n	80049ca <HAL_GPIO_Init+0x26a>
 800497e:	2305      	movs	r3, #5
 8004980:	e023      	b.n	80049ca <HAL_GPIO_Init+0x26a>
 8004982:	2304      	movs	r3, #4
 8004984:	e021      	b.n	80049ca <HAL_GPIO_Init+0x26a>
 8004986:	2303      	movs	r3, #3
 8004988:	e01f      	b.n	80049ca <HAL_GPIO_Init+0x26a>
 800498a:	2302      	movs	r3, #2
 800498c:	e01d      	b.n	80049ca <HAL_GPIO_Init+0x26a>
 800498e:	2301      	movs	r3, #1
 8004990:	e01b      	b.n	80049ca <HAL_GPIO_Init+0x26a>
 8004992:	bf00      	nop
 8004994:	58000080 	.word	0x58000080
 8004998:	58024400 	.word	0x58024400
 800499c:	58000400 	.word	0x58000400
 80049a0:	58020000 	.word	0x58020000
 80049a4:	58020400 	.word	0x58020400
 80049a8:	58020800 	.word	0x58020800
 80049ac:	58020c00 	.word	0x58020c00
 80049b0:	58021000 	.word	0x58021000
 80049b4:	58021400 	.word	0x58021400
 80049b8:	58021800 	.word	0x58021800
 80049bc:	58021c00 	.word	0x58021c00
 80049c0:	58022000 	.word	0x58022000
 80049c4:	58022400 	.word	0x58022400
 80049c8:	2300      	movs	r3, #0
 80049ca:	69fa      	ldr	r2, [r7, #28]
 80049cc:	f002 0203 	and.w	r2, r2, #3
 80049d0:	0092      	lsls	r2, r2, #2
 80049d2:	4093      	lsls	r3, r2
 80049d4:	69ba      	ldr	r2, [r7, #24]
 80049d6:	4313      	orrs	r3, r2
 80049d8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80049da:	4938      	ldr	r1, [pc, #224]	; (8004abc <HAL_GPIO_Init+0x35c>)
 80049dc:	69fb      	ldr	r3, [r7, #28]
 80049de:	089b      	lsrs	r3, r3, #2
 80049e0:	3302      	adds	r3, #2
 80049e2:	69ba      	ldr	r2, [r7, #24]
 80049e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80049e8:	697b      	ldr	r3, [r7, #20]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80049ee:	693b      	ldr	r3, [r7, #16]
 80049f0:	43db      	mvns	r3, r3
 80049f2:	69ba      	ldr	r2, [r7, #24]
 80049f4:	4013      	ands	r3, r2
 80049f6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	685b      	ldr	r3, [r3, #4]
 80049fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d003      	beq.n	8004a0c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004a04:	69ba      	ldr	r2, [r7, #24]
 8004a06:	693b      	ldr	r3, [r7, #16]
 8004a08:	4313      	orrs	r3, r2
 8004a0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004a0c:	697b      	ldr	r3, [r7, #20]
 8004a0e:	69ba      	ldr	r2, [r7, #24]
 8004a10:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8004a12:	697b      	ldr	r3, [r7, #20]
 8004a14:	685b      	ldr	r3, [r3, #4]
 8004a16:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004a18:	693b      	ldr	r3, [r7, #16]
 8004a1a:	43db      	mvns	r3, r3
 8004a1c:	69ba      	ldr	r2, [r7, #24]
 8004a1e:	4013      	ands	r3, r2
 8004a20:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d003      	beq.n	8004a36 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004a2e:	69ba      	ldr	r2, [r7, #24]
 8004a30:	693b      	ldr	r3, [r7, #16]
 8004a32:	4313      	orrs	r3, r2
 8004a34:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004a36:	697b      	ldr	r3, [r7, #20]
 8004a38:	69ba      	ldr	r2, [r7, #24]
 8004a3a:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004a3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004a44:	693b      	ldr	r3, [r7, #16]
 8004a46:	43db      	mvns	r3, r3
 8004a48:	69ba      	ldr	r2, [r7, #24]
 8004a4a:	4013      	ands	r3, r2
 8004a4c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	685b      	ldr	r3, [r3, #4]
 8004a52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d003      	beq.n	8004a62 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8004a5a:	69ba      	ldr	r2, [r7, #24]
 8004a5c:	693b      	ldr	r3, [r7, #16]
 8004a5e:	4313      	orrs	r3, r2
 8004a60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004a62:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004a66:	69bb      	ldr	r3, [r7, #24]
 8004a68:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004a6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a6e:	685b      	ldr	r3, [r3, #4]
 8004a70:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004a72:	693b      	ldr	r3, [r7, #16]
 8004a74:	43db      	mvns	r3, r3
 8004a76:	69ba      	ldr	r2, [r7, #24]
 8004a78:	4013      	ands	r3, r2
 8004a7a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	685b      	ldr	r3, [r3, #4]
 8004a80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d003      	beq.n	8004a90 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8004a88:	69ba      	ldr	r2, [r7, #24]
 8004a8a:	693b      	ldr	r3, [r7, #16]
 8004a8c:	4313      	orrs	r3, r2
 8004a8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004a90:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004a94:	69bb      	ldr	r3, [r7, #24]
 8004a96:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8004a98:	69fb      	ldr	r3, [r7, #28]
 8004a9a:	3301      	adds	r3, #1
 8004a9c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	681a      	ldr	r2, [r3, #0]
 8004aa2:	69fb      	ldr	r3, [r7, #28]
 8004aa4:	fa22 f303 	lsr.w	r3, r2, r3
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	f47f ae63 	bne.w	8004774 <HAL_GPIO_Init+0x14>
  }
}
 8004aae:	bf00      	nop
 8004ab0:	bf00      	nop
 8004ab2:	3724      	adds	r7, #36	; 0x24
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aba:	4770      	bx	lr
 8004abc:	58000400 	.word	0x58000400

08004ac0 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8004ac0:	b480      	push	{r7}
 8004ac2:	b083      	sub	sp, #12
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8004ac8:	4a08      	ldr	r2, [pc, #32]	; (8004aec <HAL_HSEM_FastTake+0x2c>)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	3320      	adds	r3, #32
 8004ace:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ad2:	4a07      	ldr	r2, [pc, #28]	; (8004af0 <HAL_HSEM_FastTake+0x30>)
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d101      	bne.n	8004adc <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8004ad8:	2300      	movs	r3, #0
 8004ada:	e000      	b.n	8004ade <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8004adc:	2301      	movs	r3, #1
}
 8004ade:	4618      	mov	r0, r3
 8004ae0:	370c      	adds	r7, #12
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae8:	4770      	bx	lr
 8004aea:	bf00      	nop
 8004aec:	58026400 	.word	0x58026400
 8004af0:	80000300 	.word	0x80000300

08004af4 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8004af4:	b480      	push	{r7}
 8004af6:	b083      	sub	sp, #12
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
 8004afc:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8004afe:	4906      	ldr	r1, [pc, #24]	; (8004b18 <HAL_HSEM_Release+0x24>)
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8004b0c:	bf00      	nop
 8004b0e:	370c      	adds	r7, #12
 8004b10:	46bd      	mov	sp, r7
 8004b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b16:	4770      	bx	lr
 8004b18:	58026400 	.word	0x58026400

08004b1c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b084      	sub	sp, #16
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8004b24:	4b29      	ldr	r3, [pc, #164]	; (8004bcc <HAL_PWREx_ConfigSupply+0xb0>)
 8004b26:	68db      	ldr	r3, [r3, #12]
 8004b28:	f003 0307 	and.w	r3, r3, #7
 8004b2c:	2b06      	cmp	r3, #6
 8004b2e:	d00a      	beq.n	8004b46 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004b30:	4b26      	ldr	r3, [pc, #152]	; (8004bcc <HAL_PWREx_ConfigSupply+0xb0>)
 8004b32:	68db      	ldr	r3, [r3, #12]
 8004b34:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004b38:	687a      	ldr	r2, [r7, #4]
 8004b3a:	429a      	cmp	r2, r3
 8004b3c:	d001      	beq.n	8004b42 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004b3e:	2301      	movs	r3, #1
 8004b40:	e040      	b.n	8004bc4 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004b42:	2300      	movs	r3, #0
 8004b44:	e03e      	b.n	8004bc4 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004b46:	4b21      	ldr	r3, [pc, #132]	; (8004bcc <HAL_PWREx_ConfigSupply+0xb0>)
 8004b48:	68db      	ldr	r3, [r3, #12]
 8004b4a:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8004b4e:	491f      	ldr	r1, [pc, #124]	; (8004bcc <HAL_PWREx_ConfigSupply+0xb0>)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	4313      	orrs	r3, r2
 8004b54:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004b56:	f7fc fdab 	bl	80016b0 <HAL_GetTick>
 8004b5a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004b5c:	e009      	b.n	8004b72 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004b5e:	f7fc fda7 	bl	80016b0 <HAL_GetTick>
 8004b62:	4602      	mov	r2, r0
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	1ad3      	subs	r3, r2, r3
 8004b68:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004b6c:	d901      	bls.n	8004b72 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004b6e:	2301      	movs	r3, #1
 8004b70:	e028      	b.n	8004bc4 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004b72:	4b16      	ldr	r3, [pc, #88]	; (8004bcc <HAL_PWREx_ConfigSupply+0xb0>)
 8004b74:	685b      	ldr	r3, [r3, #4]
 8004b76:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004b7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b7e:	d1ee      	bne.n	8004b5e <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2b1e      	cmp	r3, #30
 8004b84:	d008      	beq.n	8004b98 <HAL_PWREx_ConfigSupply+0x7c>
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2b2e      	cmp	r3, #46	; 0x2e
 8004b8a:	d005      	beq.n	8004b98 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2b1d      	cmp	r3, #29
 8004b90:	d002      	beq.n	8004b98 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2b2d      	cmp	r3, #45	; 0x2d
 8004b96:	d114      	bne.n	8004bc2 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8004b98:	f7fc fd8a 	bl	80016b0 <HAL_GetTick>
 8004b9c:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8004b9e:	e009      	b.n	8004bb4 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004ba0:	f7fc fd86 	bl	80016b0 <HAL_GetTick>
 8004ba4:	4602      	mov	r2, r0
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	1ad3      	subs	r3, r2, r3
 8004baa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004bae:	d901      	bls.n	8004bb4 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8004bb0:	2301      	movs	r3, #1
 8004bb2:	e007      	b.n	8004bc4 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8004bb4:	4b05      	ldr	r3, [pc, #20]	; (8004bcc <HAL_PWREx_ConfigSupply+0xb0>)
 8004bb6:	68db      	ldr	r3, [r3, #12]
 8004bb8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004bbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bc0:	d1ee      	bne.n	8004ba0 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004bc2:	2300      	movs	r3, #0
}
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	3710      	adds	r7, #16
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	bd80      	pop	{r7, pc}
 8004bcc:	58024800 	.word	0x58024800

08004bd0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b08c      	sub	sp, #48	; 0x30
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d101      	bne.n	8004be2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004bde:	2301      	movs	r3, #1
 8004be0:	e3ff      	b.n	80053e2 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f003 0301 	and.w	r3, r3, #1
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	f000 8087 	beq.w	8004cfe <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004bf0:	4b99      	ldr	r3, [pc, #612]	; (8004e58 <HAL_RCC_OscConfig+0x288>)
 8004bf2:	691b      	ldr	r3, [r3, #16]
 8004bf4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004bf8:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004bfa:	4b97      	ldr	r3, [pc, #604]	; (8004e58 <HAL_RCC_OscConfig+0x288>)
 8004bfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bfe:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004c00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c02:	2b10      	cmp	r3, #16
 8004c04:	d007      	beq.n	8004c16 <HAL_RCC_OscConfig+0x46>
 8004c06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c08:	2b18      	cmp	r3, #24
 8004c0a:	d110      	bne.n	8004c2e <HAL_RCC_OscConfig+0x5e>
 8004c0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c0e:	f003 0303 	and.w	r3, r3, #3
 8004c12:	2b02      	cmp	r3, #2
 8004c14:	d10b      	bne.n	8004c2e <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c16:	4b90      	ldr	r3, [pc, #576]	; (8004e58 <HAL_RCC_OscConfig+0x288>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d06c      	beq.n	8004cfc <HAL_RCC_OscConfig+0x12c>
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	685b      	ldr	r3, [r3, #4]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d168      	bne.n	8004cfc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	e3d9      	b.n	80053e2 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	685b      	ldr	r3, [r3, #4]
 8004c32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c36:	d106      	bne.n	8004c46 <HAL_RCC_OscConfig+0x76>
 8004c38:	4b87      	ldr	r3, [pc, #540]	; (8004e58 <HAL_RCC_OscConfig+0x288>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4a86      	ldr	r2, [pc, #536]	; (8004e58 <HAL_RCC_OscConfig+0x288>)
 8004c3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c42:	6013      	str	r3, [r2, #0]
 8004c44:	e02e      	b.n	8004ca4 <HAL_RCC_OscConfig+0xd4>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	685b      	ldr	r3, [r3, #4]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d10c      	bne.n	8004c68 <HAL_RCC_OscConfig+0x98>
 8004c4e:	4b82      	ldr	r3, [pc, #520]	; (8004e58 <HAL_RCC_OscConfig+0x288>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	4a81      	ldr	r2, [pc, #516]	; (8004e58 <HAL_RCC_OscConfig+0x288>)
 8004c54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c58:	6013      	str	r3, [r2, #0]
 8004c5a:	4b7f      	ldr	r3, [pc, #508]	; (8004e58 <HAL_RCC_OscConfig+0x288>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	4a7e      	ldr	r2, [pc, #504]	; (8004e58 <HAL_RCC_OscConfig+0x288>)
 8004c60:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c64:	6013      	str	r3, [r2, #0]
 8004c66:	e01d      	b.n	8004ca4 <HAL_RCC_OscConfig+0xd4>
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	685b      	ldr	r3, [r3, #4]
 8004c6c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004c70:	d10c      	bne.n	8004c8c <HAL_RCC_OscConfig+0xbc>
 8004c72:	4b79      	ldr	r3, [pc, #484]	; (8004e58 <HAL_RCC_OscConfig+0x288>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	4a78      	ldr	r2, [pc, #480]	; (8004e58 <HAL_RCC_OscConfig+0x288>)
 8004c78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004c7c:	6013      	str	r3, [r2, #0]
 8004c7e:	4b76      	ldr	r3, [pc, #472]	; (8004e58 <HAL_RCC_OscConfig+0x288>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	4a75      	ldr	r2, [pc, #468]	; (8004e58 <HAL_RCC_OscConfig+0x288>)
 8004c84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c88:	6013      	str	r3, [r2, #0]
 8004c8a:	e00b      	b.n	8004ca4 <HAL_RCC_OscConfig+0xd4>
 8004c8c:	4b72      	ldr	r3, [pc, #456]	; (8004e58 <HAL_RCC_OscConfig+0x288>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4a71      	ldr	r2, [pc, #452]	; (8004e58 <HAL_RCC_OscConfig+0x288>)
 8004c92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c96:	6013      	str	r3, [r2, #0]
 8004c98:	4b6f      	ldr	r3, [pc, #444]	; (8004e58 <HAL_RCC_OscConfig+0x288>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4a6e      	ldr	r2, [pc, #440]	; (8004e58 <HAL_RCC_OscConfig+0x288>)
 8004c9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004ca2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	685b      	ldr	r3, [r3, #4]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d013      	beq.n	8004cd4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cac:	f7fc fd00 	bl	80016b0 <HAL_GetTick>
 8004cb0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004cb2:	e008      	b.n	8004cc6 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004cb4:	f7fc fcfc 	bl	80016b0 <HAL_GetTick>
 8004cb8:	4602      	mov	r2, r0
 8004cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cbc:	1ad3      	subs	r3, r2, r3
 8004cbe:	2b64      	cmp	r3, #100	; 0x64
 8004cc0:	d901      	bls.n	8004cc6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004cc2:	2303      	movs	r3, #3
 8004cc4:	e38d      	b.n	80053e2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004cc6:	4b64      	ldr	r3, [pc, #400]	; (8004e58 <HAL_RCC_OscConfig+0x288>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d0f0      	beq.n	8004cb4 <HAL_RCC_OscConfig+0xe4>
 8004cd2:	e014      	b.n	8004cfe <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cd4:	f7fc fcec 	bl	80016b0 <HAL_GetTick>
 8004cd8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004cda:	e008      	b.n	8004cee <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004cdc:	f7fc fce8 	bl	80016b0 <HAL_GetTick>
 8004ce0:	4602      	mov	r2, r0
 8004ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ce4:	1ad3      	subs	r3, r2, r3
 8004ce6:	2b64      	cmp	r3, #100	; 0x64
 8004ce8:	d901      	bls.n	8004cee <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004cea:	2303      	movs	r3, #3
 8004cec:	e379      	b.n	80053e2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004cee:	4b5a      	ldr	r3, [pc, #360]	; (8004e58 <HAL_RCC_OscConfig+0x288>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d1f0      	bne.n	8004cdc <HAL_RCC_OscConfig+0x10c>
 8004cfa:	e000      	b.n	8004cfe <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004cfc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f003 0302 	and.w	r3, r3, #2
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	f000 80ae 	beq.w	8004e68 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d0c:	4b52      	ldr	r3, [pc, #328]	; (8004e58 <HAL_RCC_OscConfig+0x288>)
 8004d0e:	691b      	ldr	r3, [r3, #16]
 8004d10:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004d14:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004d16:	4b50      	ldr	r3, [pc, #320]	; (8004e58 <HAL_RCC_OscConfig+0x288>)
 8004d18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d1a:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004d1c:	6a3b      	ldr	r3, [r7, #32]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d007      	beq.n	8004d32 <HAL_RCC_OscConfig+0x162>
 8004d22:	6a3b      	ldr	r3, [r7, #32]
 8004d24:	2b18      	cmp	r3, #24
 8004d26:	d13a      	bne.n	8004d9e <HAL_RCC_OscConfig+0x1ce>
 8004d28:	69fb      	ldr	r3, [r7, #28]
 8004d2a:	f003 0303 	and.w	r3, r3, #3
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d135      	bne.n	8004d9e <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004d32:	4b49      	ldr	r3, [pc, #292]	; (8004e58 <HAL_RCC_OscConfig+0x288>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f003 0304 	and.w	r3, r3, #4
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d005      	beq.n	8004d4a <HAL_RCC_OscConfig+0x17a>
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	68db      	ldr	r3, [r3, #12]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d101      	bne.n	8004d4a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004d46:	2301      	movs	r3, #1
 8004d48:	e34b      	b.n	80053e2 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d4a:	f7fc fcbd 	bl	80016c8 <HAL_GetREVID>
 8004d4e:	4603      	mov	r3, r0
 8004d50:	f241 0203 	movw	r2, #4099	; 0x1003
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d817      	bhi.n	8004d88 <HAL_RCC_OscConfig+0x1b8>
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	691b      	ldr	r3, [r3, #16]
 8004d5c:	2b40      	cmp	r3, #64	; 0x40
 8004d5e:	d108      	bne.n	8004d72 <HAL_RCC_OscConfig+0x1a2>
 8004d60:	4b3d      	ldr	r3, [pc, #244]	; (8004e58 <HAL_RCC_OscConfig+0x288>)
 8004d62:	685b      	ldr	r3, [r3, #4]
 8004d64:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004d68:	4a3b      	ldr	r2, [pc, #236]	; (8004e58 <HAL_RCC_OscConfig+0x288>)
 8004d6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d6e:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004d70:	e07a      	b.n	8004e68 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d72:	4b39      	ldr	r3, [pc, #228]	; (8004e58 <HAL_RCC_OscConfig+0x288>)
 8004d74:	685b      	ldr	r3, [r3, #4]
 8004d76:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	691b      	ldr	r3, [r3, #16]
 8004d7e:	031b      	lsls	r3, r3, #12
 8004d80:	4935      	ldr	r1, [pc, #212]	; (8004e58 <HAL_RCC_OscConfig+0x288>)
 8004d82:	4313      	orrs	r3, r2
 8004d84:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004d86:	e06f      	b.n	8004e68 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d88:	4b33      	ldr	r3, [pc, #204]	; (8004e58 <HAL_RCC_OscConfig+0x288>)
 8004d8a:	685b      	ldr	r3, [r3, #4]
 8004d8c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	691b      	ldr	r3, [r3, #16]
 8004d94:	061b      	lsls	r3, r3, #24
 8004d96:	4930      	ldr	r1, [pc, #192]	; (8004e58 <HAL_RCC_OscConfig+0x288>)
 8004d98:	4313      	orrs	r3, r2
 8004d9a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004d9c:	e064      	b.n	8004e68 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	68db      	ldr	r3, [r3, #12]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d045      	beq.n	8004e32 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004da6:	4b2c      	ldr	r3, [pc, #176]	; (8004e58 <HAL_RCC_OscConfig+0x288>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f023 0219 	bic.w	r2, r3, #25
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	68db      	ldr	r3, [r3, #12]
 8004db2:	4929      	ldr	r1, [pc, #164]	; (8004e58 <HAL_RCC_OscConfig+0x288>)
 8004db4:	4313      	orrs	r3, r2
 8004db6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004db8:	f7fc fc7a 	bl	80016b0 <HAL_GetTick>
 8004dbc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004dbe:	e008      	b.n	8004dd2 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004dc0:	f7fc fc76 	bl	80016b0 <HAL_GetTick>
 8004dc4:	4602      	mov	r2, r0
 8004dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dc8:	1ad3      	subs	r3, r2, r3
 8004dca:	2b02      	cmp	r3, #2
 8004dcc:	d901      	bls.n	8004dd2 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8004dce:	2303      	movs	r3, #3
 8004dd0:	e307      	b.n	80053e2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004dd2:	4b21      	ldr	r3, [pc, #132]	; (8004e58 <HAL_RCC_OscConfig+0x288>)
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f003 0304 	and.w	r3, r3, #4
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d0f0      	beq.n	8004dc0 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004dde:	f7fc fc73 	bl	80016c8 <HAL_GetREVID>
 8004de2:	4603      	mov	r3, r0
 8004de4:	f241 0203 	movw	r2, #4099	; 0x1003
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d817      	bhi.n	8004e1c <HAL_RCC_OscConfig+0x24c>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	691b      	ldr	r3, [r3, #16]
 8004df0:	2b40      	cmp	r3, #64	; 0x40
 8004df2:	d108      	bne.n	8004e06 <HAL_RCC_OscConfig+0x236>
 8004df4:	4b18      	ldr	r3, [pc, #96]	; (8004e58 <HAL_RCC_OscConfig+0x288>)
 8004df6:	685b      	ldr	r3, [r3, #4]
 8004df8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004dfc:	4a16      	ldr	r2, [pc, #88]	; (8004e58 <HAL_RCC_OscConfig+0x288>)
 8004dfe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e02:	6053      	str	r3, [r2, #4]
 8004e04:	e030      	b.n	8004e68 <HAL_RCC_OscConfig+0x298>
 8004e06:	4b14      	ldr	r3, [pc, #80]	; (8004e58 <HAL_RCC_OscConfig+0x288>)
 8004e08:	685b      	ldr	r3, [r3, #4]
 8004e0a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	691b      	ldr	r3, [r3, #16]
 8004e12:	031b      	lsls	r3, r3, #12
 8004e14:	4910      	ldr	r1, [pc, #64]	; (8004e58 <HAL_RCC_OscConfig+0x288>)
 8004e16:	4313      	orrs	r3, r2
 8004e18:	604b      	str	r3, [r1, #4]
 8004e1a:	e025      	b.n	8004e68 <HAL_RCC_OscConfig+0x298>
 8004e1c:	4b0e      	ldr	r3, [pc, #56]	; (8004e58 <HAL_RCC_OscConfig+0x288>)
 8004e1e:	685b      	ldr	r3, [r3, #4]
 8004e20:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	691b      	ldr	r3, [r3, #16]
 8004e28:	061b      	lsls	r3, r3, #24
 8004e2a:	490b      	ldr	r1, [pc, #44]	; (8004e58 <HAL_RCC_OscConfig+0x288>)
 8004e2c:	4313      	orrs	r3, r2
 8004e2e:	604b      	str	r3, [r1, #4]
 8004e30:	e01a      	b.n	8004e68 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e32:	4b09      	ldr	r3, [pc, #36]	; (8004e58 <HAL_RCC_OscConfig+0x288>)
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	4a08      	ldr	r2, [pc, #32]	; (8004e58 <HAL_RCC_OscConfig+0x288>)
 8004e38:	f023 0301 	bic.w	r3, r3, #1
 8004e3c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e3e:	f7fc fc37 	bl	80016b0 <HAL_GetTick>
 8004e42:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004e44:	e00a      	b.n	8004e5c <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004e46:	f7fc fc33 	bl	80016b0 <HAL_GetTick>
 8004e4a:	4602      	mov	r2, r0
 8004e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e4e:	1ad3      	subs	r3, r2, r3
 8004e50:	2b02      	cmp	r3, #2
 8004e52:	d903      	bls.n	8004e5c <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8004e54:	2303      	movs	r3, #3
 8004e56:	e2c4      	b.n	80053e2 <HAL_RCC_OscConfig+0x812>
 8004e58:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004e5c:	4ba4      	ldr	r3, [pc, #656]	; (80050f0 <HAL_RCC_OscConfig+0x520>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f003 0304 	and.w	r3, r3, #4
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d1ee      	bne.n	8004e46 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f003 0310 	and.w	r3, r3, #16
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	f000 80a9 	beq.w	8004fc8 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004e76:	4b9e      	ldr	r3, [pc, #632]	; (80050f0 <HAL_RCC_OscConfig+0x520>)
 8004e78:	691b      	ldr	r3, [r3, #16]
 8004e7a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004e7e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004e80:	4b9b      	ldr	r3, [pc, #620]	; (80050f0 <HAL_RCC_OscConfig+0x520>)
 8004e82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e84:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004e86:	69bb      	ldr	r3, [r7, #24]
 8004e88:	2b08      	cmp	r3, #8
 8004e8a:	d007      	beq.n	8004e9c <HAL_RCC_OscConfig+0x2cc>
 8004e8c:	69bb      	ldr	r3, [r7, #24]
 8004e8e:	2b18      	cmp	r3, #24
 8004e90:	d13a      	bne.n	8004f08 <HAL_RCC_OscConfig+0x338>
 8004e92:	697b      	ldr	r3, [r7, #20]
 8004e94:	f003 0303 	and.w	r3, r3, #3
 8004e98:	2b01      	cmp	r3, #1
 8004e9a:	d135      	bne.n	8004f08 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004e9c:	4b94      	ldr	r3, [pc, #592]	; (80050f0 <HAL_RCC_OscConfig+0x520>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d005      	beq.n	8004eb4 <HAL_RCC_OscConfig+0x2e4>
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	69db      	ldr	r3, [r3, #28]
 8004eac:	2b80      	cmp	r3, #128	; 0x80
 8004eae:	d001      	beq.n	8004eb4 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8004eb0:	2301      	movs	r3, #1
 8004eb2:	e296      	b.n	80053e2 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004eb4:	f7fc fc08 	bl	80016c8 <HAL_GetREVID>
 8004eb8:	4603      	mov	r3, r0
 8004eba:	f241 0203 	movw	r2, #4099	; 0x1003
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d817      	bhi.n	8004ef2 <HAL_RCC_OscConfig+0x322>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6a1b      	ldr	r3, [r3, #32]
 8004ec6:	2b20      	cmp	r3, #32
 8004ec8:	d108      	bne.n	8004edc <HAL_RCC_OscConfig+0x30c>
 8004eca:	4b89      	ldr	r3, [pc, #548]	; (80050f0 <HAL_RCC_OscConfig+0x520>)
 8004ecc:	685b      	ldr	r3, [r3, #4]
 8004ece:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004ed2:	4a87      	ldr	r2, [pc, #540]	; (80050f0 <HAL_RCC_OscConfig+0x520>)
 8004ed4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004ed8:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004eda:	e075      	b.n	8004fc8 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004edc:	4b84      	ldr	r3, [pc, #528]	; (80050f0 <HAL_RCC_OscConfig+0x520>)
 8004ede:	685b      	ldr	r3, [r3, #4]
 8004ee0:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6a1b      	ldr	r3, [r3, #32]
 8004ee8:	069b      	lsls	r3, r3, #26
 8004eea:	4981      	ldr	r1, [pc, #516]	; (80050f0 <HAL_RCC_OscConfig+0x520>)
 8004eec:	4313      	orrs	r3, r2
 8004eee:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004ef0:	e06a      	b.n	8004fc8 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004ef2:	4b7f      	ldr	r3, [pc, #508]	; (80050f0 <HAL_RCC_OscConfig+0x520>)
 8004ef4:	68db      	ldr	r3, [r3, #12]
 8004ef6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6a1b      	ldr	r3, [r3, #32]
 8004efe:	061b      	lsls	r3, r3, #24
 8004f00:	497b      	ldr	r1, [pc, #492]	; (80050f0 <HAL_RCC_OscConfig+0x520>)
 8004f02:	4313      	orrs	r3, r2
 8004f04:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004f06:	e05f      	b.n	8004fc8 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	69db      	ldr	r3, [r3, #28]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d042      	beq.n	8004f96 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004f10:	4b77      	ldr	r3, [pc, #476]	; (80050f0 <HAL_RCC_OscConfig+0x520>)
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	4a76      	ldr	r2, [pc, #472]	; (80050f0 <HAL_RCC_OscConfig+0x520>)
 8004f16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f1a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f1c:	f7fc fbc8 	bl	80016b0 <HAL_GetTick>
 8004f20:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004f22:	e008      	b.n	8004f36 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004f24:	f7fc fbc4 	bl	80016b0 <HAL_GetTick>
 8004f28:	4602      	mov	r2, r0
 8004f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f2c:	1ad3      	subs	r3, r2, r3
 8004f2e:	2b02      	cmp	r3, #2
 8004f30:	d901      	bls.n	8004f36 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8004f32:	2303      	movs	r3, #3
 8004f34:	e255      	b.n	80053e2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004f36:	4b6e      	ldr	r3, [pc, #440]	; (80050f0 <HAL_RCC_OscConfig+0x520>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d0f0      	beq.n	8004f24 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004f42:	f7fc fbc1 	bl	80016c8 <HAL_GetREVID>
 8004f46:	4603      	mov	r3, r0
 8004f48:	f241 0203 	movw	r2, #4099	; 0x1003
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d817      	bhi.n	8004f80 <HAL_RCC_OscConfig+0x3b0>
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6a1b      	ldr	r3, [r3, #32]
 8004f54:	2b20      	cmp	r3, #32
 8004f56:	d108      	bne.n	8004f6a <HAL_RCC_OscConfig+0x39a>
 8004f58:	4b65      	ldr	r3, [pc, #404]	; (80050f0 <HAL_RCC_OscConfig+0x520>)
 8004f5a:	685b      	ldr	r3, [r3, #4]
 8004f5c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004f60:	4a63      	ldr	r2, [pc, #396]	; (80050f0 <HAL_RCC_OscConfig+0x520>)
 8004f62:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004f66:	6053      	str	r3, [r2, #4]
 8004f68:	e02e      	b.n	8004fc8 <HAL_RCC_OscConfig+0x3f8>
 8004f6a:	4b61      	ldr	r3, [pc, #388]	; (80050f0 <HAL_RCC_OscConfig+0x520>)
 8004f6c:	685b      	ldr	r3, [r3, #4]
 8004f6e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6a1b      	ldr	r3, [r3, #32]
 8004f76:	069b      	lsls	r3, r3, #26
 8004f78:	495d      	ldr	r1, [pc, #372]	; (80050f0 <HAL_RCC_OscConfig+0x520>)
 8004f7a:	4313      	orrs	r3, r2
 8004f7c:	604b      	str	r3, [r1, #4]
 8004f7e:	e023      	b.n	8004fc8 <HAL_RCC_OscConfig+0x3f8>
 8004f80:	4b5b      	ldr	r3, [pc, #364]	; (80050f0 <HAL_RCC_OscConfig+0x520>)
 8004f82:	68db      	ldr	r3, [r3, #12]
 8004f84:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6a1b      	ldr	r3, [r3, #32]
 8004f8c:	061b      	lsls	r3, r3, #24
 8004f8e:	4958      	ldr	r1, [pc, #352]	; (80050f0 <HAL_RCC_OscConfig+0x520>)
 8004f90:	4313      	orrs	r3, r2
 8004f92:	60cb      	str	r3, [r1, #12]
 8004f94:	e018      	b.n	8004fc8 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004f96:	4b56      	ldr	r3, [pc, #344]	; (80050f0 <HAL_RCC_OscConfig+0x520>)
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	4a55      	ldr	r2, [pc, #340]	; (80050f0 <HAL_RCC_OscConfig+0x520>)
 8004f9c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004fa0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fa2:	f7fc fb85 	bl	80016b0 <HAL_GetTick>
 8004fa6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004fa8:	e008      	b.n	8004fbc <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004faa:	f7fc fb81 	bl	80016b0 <HAL_GetTick>
 8004fae:	4602      	mov	r2, r0
 8004fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fb2:	1ad3      	subs	r3, r2, r3
 8004fb4:	2b02      	cmp	r3, #2
 8004fb6:	d901      	bls.n	8004fbc <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8004fb8:	2303      	movs	r3, #3
 8004fba:	e212      	b.n	80053e2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004fbc:	4b4c      	ldr	r3, [pc, #304]	; (80050f0 <HAL_RCC_OscConfig+0x520>)
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d1f0      	bne.n	8004faa <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f003 0308 	and.w	r3, r3, #8
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d036      	beq.n	8005042 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	695b      	ldr	r3, [r3, #20]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d019      	beq.n	8005010 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004fdc:	4b44      	ldr	r3, [pc, #272]	; (80050f0 <HAL_RCC_OscConfig+0x520>)
 8004fde:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004fe0:	4a43      	ldr	r2, [pc, #268]	; (80050f0 <HAL_RCC_OscConfig+0x520>)
 8004fe2:	f043 0301 	orr.w	r3, r3, #1
 8004fe6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fe8:	f7fc fb62 	bl	80016b0 <HAL_GetTick>
 8004fec:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004fee:	e008      	b.n	8005002 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004ff0:	f7fc fb5e 	bl	80016b0 <HAL_GetTick>
 8004ff4:	4602      	mov	r2, r0
 8004ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ff8:	1ad3      	subs	r3, r2, r3
 8004ffa:	2b02      	cmp	r3, #2
 8004ffc:	d901      	bls.n	8005002 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8004ffe:	2303      	movs	r3, #3
 8005000:	e1ef      	b.n	80053e2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005002:	4b3b      	ldr	r3, [pc, #236]	; (80050f0 <HAL_RCC_OscConfig+0x520>)
 8005004:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005006:	f003 0302 	and.w	r3, r3, #2
 800500a:	2b00      	cmp	r3, #0
 800500c:	d0f0      	beq.n	8004ff0 <HAL_RCC_OscConfig+0x420>
 800500e:	e018      	b.n	8005042 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005010:	4b37      	ldr	r3, [pc, #220]	; (80050f0 <HAL_RCC_OscConfig+0x520>)
 8005012:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005014:	4a36      	ldr	r2, [pc, #216]	; (80050f0 <HAL_RCC_OscConfig+0x520>)
 8005016:	f023 0301 	bic.w	r3, r3, #1
 800501a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800501c:	f7fc fb48 	bl	80016b0 <HAL_GetTick>
 8005020:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005022:	e008      	b.n	8005036 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005024:	f7fc fb44 	bl	80016b0 <HAL_GetTick>
 8005028:	4602      	mov	r2, r0
 800502a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800502c:	1ad3      	subs	r3, r2, r3
 800502e:	2b02      	cmp	r3, #2
 8005030:	d901      	bls.n	8005036 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8005032:	2303      	movs	r3, #3
 8005034:	e1d5      	b.n	80053e2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005036:	4b2e      	ldr	r3, [pc, #184]	; (80050f0 <HAL_RCC_OscConfig+0x520>)
 8005038:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800503a:	f003 0302 	and.w	r3, r3, #2
 800503e:	2b00      	cmp	r3, #0
 8005040:	d1f0      	bne.n	8005024 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f003 0320 	and.w	r3, r3, #32
 800504a:	2b00      	cmp	r3, #0
 800504c:	d036      	beq.n	80050bc <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	699b      	ldr	r3, [r3, #24]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d019      	beq.n	800508a <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005056:	4b26      	ldr	r3, [pc, #152]	; (80050f0 <HAL_RCC_OscConfig+0x520>)
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	4a25      	ldr	r2, [pc, #148]	; (80050f0 <HAL_RCC_OscConfig+0x520>)
 800505c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005060:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005062:	f7fc fb25 	bl	80016b0 <HAL_GetTick>
 8005066:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005068:	e008      	b.n	800507c <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800506a:	f7fc fb21 	bl	80016b0 <HAL_GetTick>
 800506e:	4602      	mov	r2, r0
 8005070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005072:	1ad3      	subs	r3, r2, r3
 8005074:	2b02      	cmp	r3, #2
 8005076:	d901      	bls.n	800507c <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8005078:	2303      	movs	r3, #3
 800507a:	e1b2      	b.n	80053e2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800507c:	4b1c      	ldr	r3, [pc, #112]	; (80050f0 <HAL_RCC_OscConfig+0x520>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005084:	2b00      	cmp	r3, #0
 8005086:	d0f0      	beq.n	800506a <HAL_RCC_OscConfig+0x49a>
 8005088:	e018      	b.n	80050bc <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800508a:	4b19      	ldr	r3, [pc, #100]	; (80050f0 <HAL_RCC_OscConfig+0x520>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	4a18      	ldr	r2, [pc, #96]	; (80050f0 <HAL_RCC_OscConfig+0x520>)
 8005090:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005094:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005096:	f7fc fb0b 	bl	80016b0 <HAL_GetTick>
 800509a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800509c:	e008      	b.n	80050b0 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800509e:	f7fc fb07 	bl	80016b0 <HAL_GetTick>
 80050a2:	4602      	mov	r2, r0
 80050a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050a6:	1ad3      	subs	r3, r2, r3
 80050a8:	2b02      	cmp	r3, #2
 80050aa:	d901      	bls.n	80050b0 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 80050ac:	2303      	movs	r3, #3
 80050ae:	e198      	b.n	80053e2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80050b0:	4b0f      	ldr	r3, [pc, #60]	; (80050f0 <HAL_RCC_OscConfig+0x520>)
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d1f0      	bne.n	800509e <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f003 0304 	and.w	r3, r3, #4
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	f000 8085 	beq.w	80051d4 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80050ca:	4b0a      	ldr	r3, [pc, #40]	; (80050f4 <HAL_RCC_OscConfig+0x524>)
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	4a09      	ldr	r2, [pc, #36]	; (80050f4 <HAL_RCC_OscConfig+0x524>)
 80050d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050d4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80050d6:	f7fc faeb 	bl	80016b0 <HAL_GetTick>
 80050da:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80050dc:	e00c      	b.n	80050f8 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80050de:	f7fc fae7 	bl	80016b0 <HAL_GetTick>
 80050e2:	4602      	mov	r2, r0
 80050e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050e6:	1ad3      	subs	r3, r2, r3
 80050e8:	2b64      	cmp	r3, #100	; 0x64
 80050ea:	d905      	bls.n	80050f8 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 80050ec:	2303      	movs	r3, #3
 80050ee:	e178      	b.n	80053e2 <HAL_RCC_OscConfig+0x812>
 80050f0:	58024400 	.word	0x58024400
 80050f4:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80050f8:	4b96      	ldr	r3, [pc, #600]	; (8005354 <HAL_RCC_OscConfig+0x784>)
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005100:	2b00      	cmp	r3, #0
 8005102:	d0ec      	beq.n	80050de <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	689b      	ldr	r3, [r3, #8]
 8005108:	2b01      	cmp	r3, #1
 800510a:	d106      	bne.n	800511a <HAL_RCC_OscConfig+0x54a>
 800510c:	4b92      	ldr	r3, [pc, #584]	; (8005358 <HAL_RCC_OscConfig+0x788>)
 800510e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005110:	4a91      	ldr	r2, [pc, #580]	; (8005358 <HAL_RCC_OscConfig+0x788>)
 8005112:	f043 0301 	orr.w	r3, r3, #1
 8005116:	6713      	str	r3, [r2, #112]	; 0x70
 8005118:	e02d      	b.n	8005176 <HAL_RCC_OscConfig+0x5a6>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	689b      	ldr	r3, [r3, #8]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d10c      	bne.n	800513c <HAL_RCC_OscConfig+0x56c>
 8005122:	4b8d      	ldr	r3, [pc, #564]	; (8005358 <HAL_RCC_OscConfig+0x788>)
 8005124:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005126:	4a8c      	ldr	r2, [pc, #560]	; (8005358 <HAL_RCC_OscConfig+0x788>)
 8005128:	f023 0301 	bic.w	r3, r3, #1
 800512c:	6713      	str	r3, [r2, #112]	; 0x70
 800512e:	4b8a      	ldr	r3, [pc, #552]	; (8005358 <HAL_RCC_OscConfig+0x788>)
 8005130:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005132:	4a89      	ldr	r2, [pc, #548]	; (8005358 <HAL_RCC_OscConfig+0x788>)
 8005134:	f023 0304 	bic.w	r3, r3, #4
 8005138:	6713      	str	r3, [r2, #112]	; 0x70
 800513a:	e01c      	b.n	8005176 <HAL_RCC_OscConfig+0x5a6>
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	689b      	ldr	r3, [r3, #8]
 8005140:	2b05      	cmp	r3, #5
 8005142:	d10c      	bne.n	800515e <HAL_RCC_OscConfig+0x58e>
 8005144:	4b84      	ldr	r3, [pc, #528]	; (8005358 <HAL_RCC_OscConfig+0x788>)
 8005146:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005148:	4a83      	ldr	r2, [pc, #524]	; (8005358 <HAL_RCC_OscConfig+0x788>)
 800514a:	f043 0304 	orr.w	r3, r3, #4
 800514e:	6713      	str	r3, [r2, #112]	; 0x70
 8005150:	4b81      	ldr	r3, [pc, #516]	; (8005358 <HAL_RCC_OscConfig+0x788>)
 8005152:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005154:	4a80      	ldr	r2, [pc, #512]	; (8005358 <HAL_RCC_OscConfig+0x788>)
 8005156:	f043 0301 	orr.w	r3, r3, #1
 800515a:	6713      	str	r3, [r2, #112]	; 0x70
 800515c:	e00b      	b.n	8005176 <HAL_RCC_OscConfig+0x5a6>
 800515e:	4b7e      	ldr	r3, [pc, #504]	; (8005358 <HAL_RCC_OscConfig+0x788>)
 8005160:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005162:	4a7d      	ldr	r2, [pc, #500]	; (8005358 <HAL_RCC_OscConfig+0x788>)
 8005164:	f023 0301 	bic.w	r3, r3, #1
 8005168:	6713      	str	r3, [r2, #112]	; 0x70
 800516a:	4b7b      	ldr	r3, [pc, #492]	; (8005358 <HAL_RCC_OscConfig+0x788>)
 800516c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800516e:	4a7a      	ldr	r2, [pc, #488]	; (8005358 <HAL_RCC_OscConfig+0x788>)
 8005170:	f023 0304 	bic.w	r3, r3, #4
 8005174:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	689b      	ldr	r3, [r3, #8]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d015      	beq.n	80051aa <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800517e:	f7fc fa97 	bl	80016b0 <HAL_GetTick>
 8005182:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005184:	e00a      	b.n	800519c <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005186:	f7fc fa93 	bl	80016b0 <HAL_GetTick>
 800518a:	4602      	mov	r2, r0
 800518c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800518e:	1ad3      	subs	r3, r2, r3
 8005190:	f241 3288 	movw	r2, #5000	; 0x1388
 8005194:	4293      	cmp	r3, r2
 8005196:	d901      	bls.n	800519c <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8005198:	2303      	movs	r3, #3
 800519a:	e122      	b.n	80053e2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800519c:	4b6e      	ldr	r3, [pc, #440]	; (8005358 <HAL_RCC_OscConfig+0x788>)
 800519e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051a0:	f003 0302 	and.w	r3, r3, #2
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d0ee      	beq.n	8005186 <HAL_RCC_OscConfig+0x5b6>
 80051a8:	e014      	b.n	80051d4 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051aa:	f7fc fa81 	bl	80016b0 <HAL_GetTick>
 80051ae:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80051b0:	e00a      	b.n	80051c8 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80051b2:	f7fc fa7d 	bl	80016b0 <HAL_GetTick>
 80051b6:	4602      	mov	r2, r0
 80051b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ba:	1ad3      	subs	r3, r2, r3
 80051bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d901      	bls.n	80051c8 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 80051c4:	2303      	movs	r3, #3
 80051c6:	e10c      	b.n	80053e2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80051c8:	4b63      	ldr	r3, [pc, #396]	; (8005358 <HAL_RCC_OscConfig+0x788>)
 80051ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051cc:	f003 0302 	and.w	r3, r3, #2
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d1ee      	bne.n	80051b2 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051d8:	2b00      	cmp	r3, #0
 80051da:	f000 8101 	beq.w	80053e0 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80051de:	4b5e      	ldr	r3, [pc, #376]	; (8005358 <HAL_RCC_OscConfig+0x788>)
 80051e0:	691b      	ldr	r3, [r3, #16]
 80051e2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80051e6:	2b18      	cmp	r3, #24
 80051e8:	f000 80bc 	beq.w	8005364 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051f0:	2b02      	cmp	r3, #2
 80051f2:	f040 8095 	bne.w	8005320 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051f6:	4b58      	ldr	r3, [pc, #352]	; (8005358 <HAL_RCC_OscConfig+0x788>)
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	4a57      	ldr	r2, [pc, #348]	; (8005358 <HAL_RCC_OscConfig+0x788>)
 80051fc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005200:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005202:	f7fc fa55 	bl	80016b0 <HAL_GetTick>
 8005206:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005208:	e008      	b.n	800521c <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800520a:	f7fc fa51 	bl	80016b0 <HAL_GetTick>
 800520e:	4602      	mov	r2, r0
 8005210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005212:	1ad3      	subs	r3, r2, r3
 8005214:	2b02      	cmp	r3, #2
 8005216:	d901      	bls.n	800521c <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8005218:	2303      	movs	r3, #3
 800521a:	e0e2      	b.n	80053e2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800521c:	4b4e      	ldr	r3, [pc, #312]	; (8005358 <HAL_RCC_OscConfig+0x788>)
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005224:	2b00      	cmp	r3, #0
 8005226:	d1f0      	bne.n	800520a <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005228:	4b4b      	ldr	r3, [pc, #300]	; (8005358 <HAL_RCC_OscConfig+0x788>)
 800522a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800522c:	4b4b      	ldr	r3, [pc, #300]	; (800535c <HAL_RCC_OscConfig+0x78c>)
 800522e:	4013      	ands	r3, r2
 8005230:	687a      	ldr	r2, [r7, #4]
 8005232:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8005234:	687a      	ldr	r2, [r7, #4]
 8005236:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005238:	0112      	lsls	r2, r2, #4
 800523a:	430a      	orrs	r2, r1
 800523c:	4946      	ldr	r1, [pc, #280]	; (8005358 <HAL_RCC_OscConfig+0x788>)
 800523e:	4313      	orrs	r3, r2
 8005240:	628b      	str	r3, [r1, #40]	; 0x28
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005246:	3b01      	subs	r3, #1
 8005248:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005250:	3b01      	subs	r3, #1
 8005252:	025b      	lsls	r3, r3, #9
 8005254:	b29b      	uxth	r3, r3
 8005256:	431a      	orrs	r2, r3
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800525c:	3b01      	subs	r3, #1
 800525e:	041b      	lsls	r3, r3, #16
 8005260:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005264:	431a      	orrs	r2, r3
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800526a:	3b01      	subs	r3, #1
 800526c:	061b      	lsls	r3, r3, #24
 800526e:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005272:	4939      	ldr	r1, [pc, #228]	; (8005358 <HAL_RCC_OscConfig+0x788>)
 8005274:	4313      	orrs	r3, r2
 8005276:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8005278:	4b37      	ldr	r3, [pc, #220]	; (8005358 <HAL_RCC_OscConfig+0x788>)
 800527a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800527c:	4a36      	ldr	r2, [pc, #216]	; (8005358 <HAL_RCC_OscConfig+0x788>)
 800527e:	f023 0301 	bic.w	r3, r3, #1
 8005282:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005284:	4b34      	ldr	r3, [pc, #208]	; (8005358 <HAL_RCC_OscConfig+0x788>)
 8005286:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005288:	4b35      	ldr	r3, [pc, #212]	; (8005360 <HAL_RCC_OscConfig+0x790>)
 800528a:	4013      	ands	r3, r2
 800528c:	687a      	ldr	r2, [r7, #4]
 800528e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005290:	00d2      	lsls	r2, r2, #3
 8005292:	4931      	ldr	r1, [pc, #196]	; (8005358 <HAL_RCC_OscConfig+0x788>)
 8005294:	4313      	orrs	r3, r2
 8005296:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005298:	4b2f      	ldr	r3, [pc, #188]	; (8005358 <HAL_RCC_OscConfig+0x788>)
 800529a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800529c:	f023 020c 	bic.w	r2, r3, #12
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052a4:	492c      	ldr	r1, [pc, #176]	; (8005358 <HAL_RCC_OscConfig+0x788>)
 80052a6:	4313      	orrs	r3, r2
 80052a8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80052aa:	4b2b      	ldr	r3, [pc, #172]	; (8005358 <HAL_RCC_OscConfig+0x788>)
 80052ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052ae:	f023 0202 	bic.w	r2, r3, #2
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052b6:	4928      	ldr	r1, [pc, #160]	; (8005358 <HAL_RCC_OscConfig+0x788>)
 80052b8:	4313      	orrs	r3, r2
 80052ba:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80052bc:	4b26      	ldr	r3, [pc, #152]	; (8005358 <HAL_RCC_OscConfig+0x788>)
 80052be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052c0:	4a25      	ldr	r2, [pc, #148]	; (8005358 <HAL_RCC_OscConfig+0x788>)
 80052c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052c6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80052c8:	4b23      	ldr	r3, [pc, #140]	; (8005358 <HAL_RCC_OscConfig+0x788>)
 80052ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052cc:	4a22      	ldr	r2, [pc, #136]	; (8005358 <HAL_RCC_OscConfig+0x788>)
 80052ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80052d2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80052d4:	4b20      	ldr	r3, [pc, #128]	; (8005358 <HAL_RCC_OscConfig+0x788>)
 80052d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052d8:	4a1f      	ldr	r2, [pc, #124]	; (8005358 <HAL_RCC_OscConfig+0x788>)
 80052da:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80052de:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80052e0:	4b1d      	ldr	r3, [pc, #116]	; (8005358 <HAL_RCC_OscConfig+0x788>)
 80052e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052e4:	4a1c      	ldr	r2, [pc, #112]	; (8005358 <HAL_RCC_OscConfig+0x788>)
 80052e6:	f043 0301 	orr.w	r3, r3, #1
 80052ea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80052ec:	4b1a      	ldr	r3, [pc, #104]	; (8005358 <HAL_RCC_OscConfig+0x788>)
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	4a19      	ldr	r2, [pc, #100]	; (8005358 <HAL_RCC_OscConfig+0x788>)
 80052f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80052f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052f8:	f7fc f9da 	bl	80016b0 <HAL_GetTick>
 80052fc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80052fe:	e008      	b.n	8005312 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005300:	f7fc f9d6 	bl	80016b0 <HAL_GetTick>
 8005304:	4602      	mov	r2, r0
 8005306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005308:	1ad3      	subs	r3, r2, r3
 800530a:	2b02      	cmp	r3, #2
 800530c:	d901      	bls.n	8005312 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 800530e:	2303      	movs	r3, #3
 8005310:	e067      	b.n	80053e2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005312:	4b11      	ldr	r3, [pc, #68]	; (8005358 <HAL_RCC_OscConfig+0x788>)
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800531a:	2b00      	cmp	r3, #0
 800531c:	d0f0      	beq.n	8005300 <HAL_RCC_OscConfig+0x730>
 800531e:	e05f      	b.n	80053e0 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005320:	4b0d      	ldr	r3, [pc, #52]	; (8005358 <HAL_RCC_OscConfig+0x788>)
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	4a0c      	ldr	r2, [pc, #48]	; (8005358 <HAL_RCC_OscConfig+0x788>)
 8005326:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800532a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800532c:	f7fc f9c0 	bl	80016b0 <HAL_GetTick>
 8005330:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005332:	e008      	b.n	8005346 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005334:	f7fc f9bc 	bl	80016b0 <HAL_GetTick>
 8005338:	4602      	mov	r2, r0
 800533a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800533c:	1ad3      	subs	r3, r2, r3
 800533e:	2b02      	cmp	r3, #2
 8005340:	d901      	bls.n	8005346 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8005342:	2303      	movs	r3, #3
 8005344:	e04d      	b.n	80053e2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005346:	4b04      	ldr	r3, [pc, #16]	; (8005358 <HAL_RCC_OscConfig+0x788>)
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800534e:	2b00      	cmp	r3, #0
 8005350:	d1f0      	bne.n	8005334 <HAL_RCC_OscConfig+0x764>
 8005352:	e045      	b.n	80053e0 <HAL_RCC_OscConfig+0x810>
 8005354:	58024800 	.word	0x58024800
 8005358:	58024400 	.word	0x58024400
 800535c:	fffffc0c 	.word	0xfffffc0c
 8005360:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005364:	4b21      	ldr	r3, [pc, #132]	; (80053ec <HAL_RCC_OscConfig+0x81c>)
 8005366:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005368:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800536a:	4b20      	ldr	r3, [pc, #128]	; (80053ec <HAL_RCC_OscConfig+0x81c>)
 800536c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800536e:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005374:	2b01      	cmp	r3, #1
 8005376:	d031      	beq.n	80053dc <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005378:	693b      	ldr	r3, [r7, #16]
 800537a:	f003 0203 	and.w	r2, r3, #3
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005382:	429a      	cmp	r2, r3
 8005384:	d12a      	bne.n	80053dc <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005386:	693b      	ldr	r3, [r7, #16]
 8005388:	091b      	lsrs	r3, r3, #4
 800538a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005392:	429a      	cmp	r2, r3
 8005394:	d122      	bne.n	80053dc <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053a0:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80053a2:	429a      	cmp	r2, r3
 80053a4:	d11a      	bne.n	80053dc <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	0a5b      	lsrs	r3, r3, #9
 80053aa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053b2:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80053b4:	429a      	cmp	r2, r3
 80053b6:	d111      	bne.n	80053dc <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	0c1b      	lsrs	r3, r3, #16
 80053bc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053c4:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80053c6:	429a      	cmp	r2, r3
 80053c8:	d108      	bne.n	80053dc <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	0e1b      	lsrs	r3, r3, #24
 80053ce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053d6:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80053d8:	429a      	cmp	r2, r3
 80053da:	d001      	beq.n	80053e0 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 80053dc:	2301      	movs	r3, #1
 80053de:	e000      	b.n	80053e2 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 80053e0:	2300      	movs	r3, #0
}
 80053e2:	4618      	mov	r0, r3
 80053e4:	3730      	adds	r7, #48	; 0x30
 80053e6:	46bd      	mov	sp, r7
 80053e8:	bd80      	pop	{r7, pc}
 80053ea:	bf00      	nop
 80053ec:	58024400 	.word	0x58024400

080053f0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b086      	sub	sp, #24
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
 80053f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d101      	bne.n	8005404 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005400:	2301      	movs	r3, #1
 8005402:	e19c      	b.n	800573e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005404:	4b8a      	ldr	r3, [pc, #552]	; (8005630 <HAL_RCC_ClockConfig+0x240>)
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f003 030f 	and.w	r3, r3, #15
 800540c:	683a      	ldr	r2, [r7, #0]
 800540e:	429a      	cmp	r2, r3
 8005410:	d910      	bls.n	8005434 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005412:	4b87      	ldr	r3, [pc, #540]	; (8005630 <HAL_RCC_ClockConfig+0x240>)
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f023 020f 	bic.w	r2, r3, #15
 800541a:	4985      	ldr	r1, [pc, #532]	; (8005630 <HAL_RCC_ClockConfig+0x240>)
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	4313      	orrs	r3, r2
 8005420:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005422:	4b83      	ldr	r3, [pc, #524]	; (8005630 <HAL_RCC_ClockConfig+0x240>)
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f003 030f 	and.w	r3, r3, #15
 800542a:	683a      	ldr	r2, [r7, #0]
 800542c:	429a      	cmp	r2, r3
 800542e:	d001      	beq.n	8005434 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005430:	2301      	movs	r3, #1
 8005432:	e184      	b.n	800573e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f003 0304 	and.w	r3, r3, #4
 800543c:	2b00      	cmp	r3, #0
 800543e:	d010      	beq.n	8005462 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	691a      	ldr	r2, [r3, #16]
 8005444:	4b7b      	ldr	r3, [pc, #492]	; (8005634 <HAL_RCC_ClockConfig+0x244>)
 8005446:	699b      	ldr	r3, [r3, #24]
 8005448:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800544c:	429a      	cmp	r2, r3
 800544e:	d908      	bls.n	8005462 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005450:	4b78      	ldr	r3, [pc, #480]	; (8005634 <HAL_RCC_ClockConfig+0x244>)
 8005452:	699b      	ldr	r3, [r3, #24]
 8005454:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	691b      	ldr	r3, [r3, #16]
 800545c:	4975      	ldr	r1, [pc, #468]	; (8005634 <HAL_RCC_ClockConfig+0x244>)
 800545e:	4313      	orrs	r3, r2
 8005460:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f003 0308 	and.w	r3, r3, #8
 800546a:	2b00      	cmp	r3, #0
 800546c:	d010      	beq.n	8005490 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	695a      	ldr	r2, [r3, #20]
 8005472:	4b70      	ldr	r3, [pc, #448]	; (8005634 <HAL_RCC_ClockConfig+0x244>)
 8005474:	69db      	ldr	r3, [r3, #28]
 8005476:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800547a:	429a      	cmp	r2, r3
 800547c:	d908      	bls.n	8005490 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800547e:	4b6d      	ldr	r3, [pc, #436]	; (8005634 <HAL_RCC_ClockConfig+0x244>)
 8005480:	69db      	ldr	r3, [r3, #28]
 8005482:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	695b      	ldr	r3, [r3, #20]
 800548a:	496a      	ldr	r1, [pc, #424]	; (8005634 <HAL_RCC_ClockConfig+0x244>)
 800548c:	4313      	orrs	r3, r2
 800548e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f003 0310 	and.w	r3, r3, #16
 8005498:	2b00      	cmp	r3, #0
 800549a:	d010      	beq.n	80054be <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	699a      	ldr	r2, [r3, #24]
 80054a0:	4b64      	ldr	r3, [pc, #400]	; (8005634 <HAL_RCC_ClockConfig+0x244>)
 80054a2:	69db      	ldr	r3, [r3, #28]
 80054a4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80054a8:	429a      	cmp	r2, r3
 80054aa:	d908      	bls.n	80054be <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80054ac:	4b61      	ldr	r3, [pc, #388]	; (8005634 <HAL_RCC_ClockConfig+0x244>)
 80054ae:	69db      	ldr	r3, [r3, #28]
 80054b0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	699b      	ldr	r3, [r3, #24]
 80054b8:	495e      	ldr	r1, [pc, #376]	; (8005634 <HAL_RCC_ClockConfig+0x244>)
 80054ba:	4313      	orrs	r3, r2
 80054bc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f003 0320 	and.w	r3, r3, #32
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d010      	beq.n	80054ec <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	69da      	ldr	r2, [r3, #28]
 80054ce:	4b59      	ldr	r3, [pc, #356]	; (8005634 <HAL_RCC_ClockConfig+0x244>)
 80054d0:	6a1b      	ldr	r3, [r3, #32]
 80054d2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80054d6:	429a      	cmp	r2, r3
 80054d8:	d908      	bls.n	80054ec <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80054da:	4b56      	ldr	r3, [pc, #344]	; (8005634 <HAL_RCC_ClockConfig+0x244>)
 80054dc:	6a1b      	ldr	r3, [r3, #32]
 80054de:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	69db      	ldr	r3, [r3, #28]
 80054e6:	4953      	ldr	r1, [pc, #332]	; (8005634 <HAL_RCC_ClockConfig+0x244>)
 80054e8:	4313      	orrs	r3, r2
 80054ea:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f003 0302 	and.w	r3, r3, #2
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d010      	beq.n	800551a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	68da      	ldr	r2, [r3, #12]
 80054fc:	4b4d      	ldr	r3, [pc, #308]	; (8005634 <HAL_RCC_ClockConfig+0x244>)
 80054fe:	699b      	ldr	r3, [r3, #24]
 8005500:	f003 030f 	and.w	r3, r3, #15
 8005504:	429a      	cmp	r2, r3
 8005506:	d908      	bls.n	800551a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005508:	4b4a      	ldr	r3, [pc, #296]	; (8005634 <HAL_RCC_ClockConfig+0x244>)
 800550a:	699b      	ldr	r3, [r3, #24]
 800550c:	f023 020f 	bic.w	r2, r3, #15
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	68db      	ldr	r3, [r3, #12]
 8005514:	4947      	ldr	r1, [pc, #284]	; (8005634 <HAL_RCC_ClockConfig+0x244>)
 8005516:	4313      	orrs	r3, r2
 8005518:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f003 0301 	and.w	r3, r3, #1
 8005522:	2b00      	cmp	r3, #0
 8005524:	d055      	beq.n	80055d2 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005526:	4b43      	ldr	r3, [pc, #268]	; (8005634 <HAL_RCC_ClockConfig+0x244>)
 8005528:	699b      	ldr	r3, [r3, #24]
 800552a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	689b      	ldr	r3, [r3, #8]
 8005532:	4940      	ldr	r1, [pc, #256]	; (8005634 <HAL_RCC_ClockConfig+0x244>)
 8005534:	4313      	orrs	r3, r2
 8005536:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	685b      	ldr	r3, [r3, #4]
 800553c:	2b02      	cmp	r3, #2
 800553e:	d107      	bne.n	8005550 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005540:	4b3c      	ldr	r3, [pc, #240]	; (8005634 <HAL_RCC_ClockConfig+0x244>)
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005548:	2b00      	cmp	r3, #0
 800554a:	d121      	bne.n	8005590 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800554c:	2301      	movs	r3, #1
 800554e:	e0f6      	b.n	800573e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	685b      	ldr	r3, [r3, #4]
 8005554:	2b03      	cmp	r3, #3
 8005556:	d107      	bne.n	8005568 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005558:	4b36      	ldr	r3, [pc, #216]	; (8005634 <HAL_RCC_ClockConfig+0x244>)
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005560:	2b00      	cmp	r3, #0
 8005562:	d115      	bne.n	8005590 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005564:	2301      	movs	r3, #1
 8005566:	e0ea      	b.n	800573e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	685b      	ldr	r3, [r3, #4]
 800556c:	2b01      	cmp	r3, #1
 800556e:	d107      	bne.n	8005580 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005570:	4b30      	ldr	r3, [pc, #192]	; (8005634 <HAL_RCC_ClockConfig+0x244>)
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005578:	2b00      	cmp	r3, #0
 800557a:	d109      	bne.n	8005590 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800557c:	2301      	movs	r3, #1
 800557e:	e0de      	b.n	800573e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005580:	4b2c      	ldr	r3, [pc, #176]	; (8005634 <HAL_RCC_ClockConfig+0x244>)
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f003 0304 	and.w	r3, r3, #4
 8005588:	2b00      	cmp	r3, #0
 800558a:	d101      	bne.n	8005590 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800558c:	2301      	movs	r3, #1
 800558e:	e0d6      	b.n	800573e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005590:	4b28      	ldr	r3, [pc, #160]	; (8005634 <HAL_RCC_ClockConfig+0x244>)
 8005592:	691b      	ldr	r3, [r3, #16]
 8005594:	f023 0207 	bic.w	r2, r3, #7
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	685b      	ldr	r3, [r3, #4]
 800559c:	4925      	ldr	r1, [pc, #148]	; (8005634 <HAL_RCC_ClockConfig+0x244>)
 800559e:	4313      	orrs	r3, r2
 80055a0:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055a2:	f7fc f885 	bl	80016b0 <HAL_GetTick>
 80055a6:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80055a8:	e00a      	b.n	80055c0 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80055aa:	f7fc f881 	bl	80016b0 <HAL_GetTick>
 80055ae:	4602      	mov	r2, r0
 80055b0:	697b      	ldr	r3, [r7, #20]
 80055b2:	1ad3      	subs	r3, r2, r3
 80055b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80055b8:	4293      	cmp	r3, r2
 80055ba:	d901      	bls.n	80055c0 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80055bc:	2303      	movs	r3, #3
 80055be:	e0be      	b.n	800573e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80055c0:	4b1c      	ldr	r3, [pc, #112]	; (8005634 <HAL_RCC_ClockConfig+0x244>)
 80055c2:	691b      	ldr	r3, [r3, #16]
 80055c4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	685b      	ldr	r3, [r3, #4]
 80055cc:	00db      	lsls	r3, r3, #3
 80055ce:	429a      	cmp	r2, r3
 80055d0:	d1eb      	bne.n	80055aa <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f003 0302 	and.w	r3, r3, #2
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d010      	beq.n	8005600 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	68da      	ldr	r2, [r3, #12]
 80055e2:	4b14      	ldr	r3, [pc, #80]	; (8005634 <HAL_RCC_ClockConfig+0x244>)
 80055e4:	699b      	ldr	r3, [r3, #24]
 80055e6:	f003 030f 	and.w	r3, r3, #15
 80055ea:	429a      	cmp	r2, r3
 80055ec:	d208      	bcs.n	8005600 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80055ee:	4b11      	ldr	r3, [pc, #68]	; (8005634 <HAL_RCC_ClockConfig+0x244>)
 80055f0:	699b      	ldr	r3, [r3, #24]
 80055f2:	f023 020f 	bic.w	r2, r3, #15
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	68db      	ldr	r3, [r3, #12]
 80055fa:	490e      	ldr	r1, [pc, #56]	; (8005634 <HAL_RCC_ClockConfig+0x244>)
 80055fc:	4313      	orrs	r3, r2
 80055fe:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005600:	4b0b      	ldr	r3, [pc, #44]	; (8005630 <HAL_RCC_ClockConfig+0x240>)
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f003 030f 	and.w	r3, r3, #15
 8005608:	683a      	ldr	r2, [r7, #0]
 800560a:	429a      	cmp	r2, r3
 800560c:	d214      	bcs.n	8005638 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800560e:	4b08      	ldr	r3, [pc, #32]	; (8005630 <HAL_RCC_ClockConfig+0x240>)
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f023 020f 	bic.w	r2, r3, #15
 8005616:	4906      	ldr	r1, [pc, #24]	; (8005630 <HAL_RCC_ClockConfig+0x240>)
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	4313      	orrs	r3, r2
 800561c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800561e:	4b04      	ldr	r3, [pc, #16]	; (8005630 <HAL_RCC_ClockConfig+0x240>)
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f003 030f 	and.w	r3, r3, #15
 8005626:	683a      	ldr	r2, [r7, #0]
 8005628:	429a      	cmp	r2, r3
 800562a:	d005      	beq.n	8005638 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800562c:	2301      	movs	r3, #1
 800562e:	e086      	b.n	800573e <HAL_RCC_ClockConfig+0x34e>
 8005630:	52002000 	.word	0x52002000
 8005634:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f003 0304 	and.w	r3, r3, #4
 8005640:	2b00      	cmp	r3, #0
 8005642:	d010      	beq.n	8005666 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	691a      	ldr	r2, [r3, #16]
 8005648:	4b3f      	ldr	r3, [pc, #252]	; (8005748 <HAL_RCC_ClockConfig+0x358>)
 800564a:	699b      	ldr	r3, [r3, #24]
 800564c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005650:	429a      	cmp	r2, r3
 8005652:	d208      	bcs.n	8005666 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005654:	4b3c      	ldr	r3, [pc, #240]	; (8005748 <HAL_RCC_ClockConfig+0x358>)
 8005656:	699b      	ldr	r3, [r3, #24]
 8005658:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	691b      	ldr	r3, [r3, #16]
 8005660:	4939      	ldr	r1, [pc, #228]	; (8005748 <HAL_RCC_ClockConfig+0x358>)
 8005662:	4313      	orrs	r3, r2
 8005664:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f003 0308 	and.w	r3, r3, #8
 800566e:	2b00      	cmp	r3, #0
 8005670:	d010      	beq.n	8005694 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	695a      	ldr	r2, [r3, #20]
 8005676:	4b34      	ldr	r3, [pc, #208]	; (8005748 <HAL_RCC_ClockConfig+0x358>)
 8005678:	69db      	ldr	r3, [r3, #28]
 800567a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800567e:	429a      	cmp	r2, r3
 8005680:	d208      	bcs.n	8005694 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005682:	4b31      	ldr	r3, [pc, #196]	; (8005748 <HAL_RCC_ClockConfig+0x358>)
 8005684:	69db      	ldr	r3, [r3, #28]
 8005686:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	695b      	ldr	r3, [r3, #20]
 800568e:	492e      	ldr	r1, [pc, #184]	; (8005748 <HAL_RCC_ClockConfig+0x358>)
 8005690:	4313      	orrs	r3, r2
 8005692:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f003 0310 	and.w	r3, r3, #16
 800569c:	2b00      	cmp	r3, #0
 800569e:	d010      	beq.n	80056c2 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	699a      	ldr	r2, [r3, #24]
 80056a4:	4b28      	ldr	r3, [pc, #160]	; (8005748 <HAL_RCC_ClockConfig+0x358>)
 80056a6:	69db      	ldr	r3, [r3, #28]
 80056a8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80056ac:	429a      	cmp	r2, r3
 80056ae:	d208      	bcs.n	80056c2 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80056b0:	4b25      	ldr	r3, [pc, #148]	; (8005748 <HAL_RCC_ClockConfig+0x358>)
 80056b2:	69db      	ldr	r3, [r3, #28]
 80056b4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	699b      	ldr	r3, [r3, #24]
 80056bc:	4922      	ldr	r1, [pc, #136]	; (8005748 <HAL_RCC_ClockConfig+0x358>)
 80056be:	4313      	orrs	r3, r2
 80056c0:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f003 0320 	and.w	r3, r3, #32
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d010      	beq.n	80056f0 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	69da      	ldr	r2, [r3, #28]
 80056d2:	4b1d      	ldr	r3, [pc, #116]	; (8005748 <HAL_RCC_ClockConfig+0x358>)
 80056d4:	6a1b      	ldr	r3, [r3, #32]
 80056d6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80056da:	429a      	cmp	r2, r3
 80056dc:	d208      	bcs.n	80056f0 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80056de:	4b1a      	ldr	r3, [pc, #104]	; (8005748 <HAL_RCC_ClockConfig+0x358>)
 80056e0:	6a1b      	ldr	r3, [r3, #32]
 80056e2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	69db      	ldr	r3, [r3, #28]
 80056ea:	4917      	ldr	r1, [pc, #92]	; (8005748 <HAL_RCC_ClockConfig+0x358>)
 80056ec:	4313      	orrs	r3, r2
 80056ee:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80056f0:	f000 f834 	bl	800575c <HAL_RCC_GetSysClockFreq>
 80056f4:	4602      	mov	r2, r0
 80056f6:	4b14      	ldr	r3, [pc, #80]	; (8005748 <HAL_RCC_ClockConfig+0x358>)
 80056f8:	699b      	ldr	r3, [r3, #24]
 80056fa:	0a1b      	lsrs	r3, r3, #8
 80056fc:	f003 030f 	and.w	r3, r3, #15
 8005700:	4912      	ldr	r1, [pc, #72]	; (800574c <HAL_RCC_ClockConfig+0x35c>)
 8005702:	5ccb      	ldrb	r3, [r1, r3]
 8005704:	f003 031f 	and.w	r3, r3, #31
 8005708:	fa22 f303 	lsr.w	r3, r2, r3
 800570c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800570e:	4b0e      	ldr	r3, [pc, #56]	; (8005748 <HAL_RCC_ClockConfig+0x358>)
 8005710:	699b      	ldr	r3, [r3, #24]
 8005712:	f003 030f 	and.w	r3, r3, #15
 8005716:	4a0d      	ldr	r2, [pc, #52]	; (800574c <HAL_RCC_ClockConfig+0x35c>)
 8005718:	5cd3      	ldrb	r3, [r2, r3]
 800571a:	f003 031f 	and.w	r3, r3, #31
 800571e:	693a      	ldr	r2, [r7, #16]
 8005720:	fa22 f303 	lsr.w	r3, r2, r3
 8005724:	4a0a      	ldr	r2, [pc, #40]	; (8005750 <HAL_RCC_ClockConfig+0x360>)
 8005726:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005728:	4a0a      	ldr	r2, [pc, #40]	; (8005754 <HAL_RCC_ClockConfig+0x364>)
 800572a:	693b      	ldr	r3, [r7, #16]
 800572c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800572e:	4b0a      	ldr	r3, [pc, #40]	; (8005758 <HAL_RCC_ClockConfig+0x368>)
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	4618      	mov	r0, r3
 8005734:	f7fb ff72 	bl	800161c <HAL_InitTick>
 8005738:	4603      	mov	r3, r0
 800573a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800573c:	7bfb      	ldrb	r3, [r7, #15]
}
 800573e:	4618      	mov	r0, r3
 8005740:	3718      	adds	r7, #24
 8005742:	46bd      	mov	sp, r7
 8005744:	bd80      	pop	{r7, pc}
 8005746:	bf00      	nop
 8005748:	58024400 	.word	0x58024400
 800574c:	0800cc60 	.word	0x0800cc60
 8005750:	24000404 	.word	0x24000404
 8005754:	24000400 	.word	0x24000400
 8005758:	24000408 	.word	0x24000408

0800575c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800575c:	b480      	push	{r7}
 800575e:	b089      	sub	sp, #36	; 0x24
 8005760:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005762:	4bb3      	ldr	r3, [pc, #716]	; (8005a30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005764:	691b      	ldr	r3, [r3, #16]
 8005766:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800576a:	2b18      	cmp	r3, #24
 800576c:	f200 8155 	bhi.w	8005a1a <HAL_RCC_GetSysClockFreq+0x2be>
 8005770:	a201      	add	r2, pc, #4	; (adr r2, 8005778 <HAL_RCC_GetSysClockFreq+0x1c>)
 8005772:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005776:	bf00      	nop
 8005778:	080057dd 	.word	0x080057dd
 800577c:	08005a1b 	.word	0x08005a1b
 8005780:	08005a1b 	.word	0x08005a1b
 8005784:	08005a1b 	.word	0x08005a1b
 8005788:	08005a1b 	.word	0x08005a1b
 800578c:	08005a1b 	.word	0x08005a1b
 8005790:	08005a1b 	.word	0x08005a1b
 8005794:	08005a1b 	.word	0x08005a1b
 8005798:	08005803 	.word	0x08005803
 800579c:	08005a1b 	.word	0x08005a1b
 80057a0:	08005a1b 	.word	0x08005a1b
 80057a4:	08005a1b 	.word	0x08005a1b
 80057a8:	08005a1b 	.word	0x08005a1b
 80057ac:	08005a1b 	.word	0x08005a1b
 80057b0:	08005a1b 	.word	0x08005a1b
 80057b4:	08005a1b 	.word	0x08005a1b
 80057b8:	08005809 	.word	0x08005809
 80057bc:	08005a1b 	.word	0x08005a1b
 80057c0:	08005a1b 	.word	0x08005a1b
 80057c4:	08005a1b 	.word	0x08005a1b
 80057c8:	08005a1b 	.word	0x08005a1b
 80057cc:	08005a1b 	.word	0x08005a1b
 80057d0:	08005a1b 	.word	0x08005a1b
 80057d4:	08005a1b 	.word	0x08005a1b
 80057d8:	0800580f 	.word	0x0800580f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80057dc:	4b94      	ldr	r3, [pc, #592]	; (8005a30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f003 0320 	and.w	r3, r3, #32
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d009      	beq.n	80057fc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80057e8:	4b91      	ldr	r3, [pc, #580]	; (8005a30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	08db      	lsrs	r3, r3, #3
 80057ee:	f003 0303 	and.w	r3, r3, #3
 80057f2:	4a90      	ldr	r2, [pc, #576]	; (8005a34 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80057f4:	fa22 f303 	lsr.w	r3, r2, r3
 80057f8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80057fa:	e111      	b.n	8005a20 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80057fc:	4b8d      	ldr	r3, [pc, #564]	; (8005a34 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80057fe:	61bb      	str	r3, [r7, #24]
    break;
 8005800:	e10e      	b.n	8005a20 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8005802:	4b8d      	ldr	r3, [pc, #564]	; (8005a38 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005804:	61bb      	str	r3, [r7, #24]
    break;
 8005806:	e10b      	b.n	8005a20 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8005808:	4b8c      	ldr	r3, [pc, #560]	; (8005a3c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800580a:	61bb      	str	r3, [r7, #24]
    break;
 800580c:	e108      	b.n	8005a20 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800580e:	4b88      	ldr	r3, [pc, #544]	; (8005a30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005810:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005812:	f003 0303 	and.w	r3, r3, #3
 8005816:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8005818:	4b85      	ldr	r3, [pc, #532]	; (8005a30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800581a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800581c:	091b      	lsrs	r3, r3, #4
 800581e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005822:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005824:	4b82      	ldr	r3, [pc, #520]	; (8005a30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005828:	f003 0301 	and.w	r3, r3, #1
 800582c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800582e:	4b80      	ldr	r3, [pc, #512]	; (8005a30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005830:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005832:	08db      	lsrs	r3, r3, #3
 8005834:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005838:	68fa      	ldr	r2, [r7, #12]
 800583a:	fb02 f303 	mul.w	r3, r2, r3
 800583e:	ee07 3a90 	vmov	s15, r3
 8005842:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005846:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800584a:	693b      	ldr	r3, [r7, #16]
 800584c:	2b00      	cmp	r3, #0
 800584e:	f000 80e1 	beq.w	8005a14 <HAL_RCC_GetSysClockFreq+0x2b8>
 8005852:	697b      	ldr	r3, [r7, #20]
 8005854:	2b02      	cmp	r3, #2
 8005856:	f000 8083 	beq.w	8005960 <HAL_RCC_GetSysClockFreq+0x204>
 800585a:	697b      	ldr	r3, [r7, #20]
 800585c:	2b02      	cmp	r3, #2
 800585e:	f200 80a1 	bhi.w	80059a4 <HAL_RCC_GetSysClockFreq+0x248>
 8005862:	697b      	ldr	r3, [r7, #20]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d003      	beq.n	8005870 <HAL_RCC_GetSysClockFreq+0x114>
 8005868:	697b      	ldr	r3, [r7, #20]
 800586a:	2b01      	cmp	r3, #1
 800586c:	d056      	beq.n	800591c <HAL_RCC_GetSysClockFreq+0x1c0>
 800586e:	e099      	b.n	80059a4 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005870:	4b6f      	ldr	r3, [pc, #444]	; (8005a30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f003 0320 	and.w	r3, r3, #32
 8005878:	2b00      	cmp	r3, #0
 800587a:	d02d      	beq.n	80058d8 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800587c:	4b6c      	ldr	r3, [pc, #432]	; (8005a30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	08db      	lsrs	r3, r3, #3
 8005882:	f003 0303 	and.w	r3, r3, #3
 8005886:	4a6b      	ldr	r2, [pc, #428]	; (8005a34 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005888:	fa22 f303 	lsr.w	r3, r2, r3
 800588c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	ee07 3a90 	vmov	s15, r3
 8005894:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005898:	693b      	ldr	r3, [r7, #16]
 800589a:	ee07 3a90 	vmov	s15, r3
 800589e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80058a6:	4b62      	ldr	r3, [pc, #392]	; (8005a30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80058a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058ae:	ee07 3a90 	vmov	s15, r3
 80058b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058b6:	ed97 6a02 	vldr	s12, [r7, #8]
 80058ba:	eddf 5a61 	vldr	s11, [pc, #388]	; 8005a40 <HAL_RCC_GetSysClockFreq+0x2e4>
 80058be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80058c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80058c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80058ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80058ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058d2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80058d6:	e087      	b.n	80059e8 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80058d8:	693b      	ldr	r3, [r7, #16]
 80058da:	ee07 3a90 	vmov	s15, r3
 80058de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058e2:	eddf 6a58 	vldr	s13, [pc, #352]	; 8005a44 <HAL_RCC_GetSysClockFreq+0x2e8>
 80058e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80058ea:	4b51      	ldr	r3, [pc, #324]	; (8005a30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80058ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058f2:	ee07 3a90 	vmov	s15, r3
 80058f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058fa:	ed97 6a02 	vldr	s12, [r7, #8]
 80058fe:	eddf 5a50 	vldr	s11, [pc, #320]	; 8005a40 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005902:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005906:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800590a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800590e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005912:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005916:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800591a:	e065      	b.n	80059e8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800591c:	693b      	ldr	r3, [r7, #16]
 800591e:	ee07 3a90 	vmov	s15, r3
 8005922:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005926:	eddf 6a48 	vldr	s13, [pc, #288]	; 8005a48 <HAL_RCC_GetSysClockFreq+0x2ec>
 800592a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800592e:	4b40      	ldr	r3, [pc, #256]	; (8005a30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005932:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005936:	ee07 3a90 	vmov	s15, r3
 800593a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800593e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005942:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8005a40 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005946:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800594a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800594e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005952:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005956:	ee67 7a27 	vmul.f32	s15, s14, s15
 800595a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800595e:	e043      	b.n	80059e8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005960:	693b      	ldr	r3, [r7, #16]
 8005962:	ee07 3a90 	vmov	s15, r3
 8005966:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800596a:	eddf 6a38 	vldr	s13, [pc, #224]	; 8005a4c <HAL_RCC_GetSysClockFreq+0x2f0>
 800596e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005972:	4b2f      	ldr	r3, [pc, #188]	; (8005a30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005976:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800597a:	ee07 3a90 	vmov	s15, r3
 800597e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005982:	ed97 6a02 	vldr	s12, [r7, #8]
 8005986:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8005a40 <HAL_RCC_GetSysClockFreq+0x2e4>
 800598a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800598e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005992:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005996:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800599a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800599e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80059a2:	e021      	b.n	80059e8 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80059a4:	693b      	ldr	r3, [r7, #16]
 80059a6:	ee07 3a90 	vmov	s15, r3
 80059aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059ae:	eddf 6a26 	vldr	s13, [pc, #152]	; 8005a48 <HAL_RCC_GetSysClockFreq+0x2ec>
 80059b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80059b6:	4b1e      	ldr	r3, [pc, #120]	; (8005a30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80059b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059be:	ee07 3a90 	vmov	s15, r3
 80059c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059c6:	ed97 6a02 	vldr	s12, [r7, #8]
 80059ca:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8005a40 <HAL_RCC_GetSysClockFreq+0x2e4>
 80059ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80059d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80059d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80059da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80059de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80059e6:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80059e8:	4b11      	ldr	r3, [pc, #68]	; (8005a30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80059ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059ec:	0a5b      	lsrs	r3, r3, #9
 80059ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80059f2:	3301      	adds	r3, #1
 80059f4:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	ee07 3a90 	vmov	s15, r3
 80059fc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005a00:	edd7 6a07 	vldr	s13, [r7, #28]
 8005a04:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005a08:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005a0c:	ee17 3a90 	vmov	r3, s15
 8005a10:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8005a12:	e005      	b.n	8005a20 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8005a14:	2300      	movs	r3, #0
 8005a16:	61bb      	str	r3, [r7, #24]
    break;
 8005a18:	e002      	b.n	8005a20 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8005a1a:	4b07      	ldr	r3, [pc, #28]	; (8005a38 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005a1c:	61bb      	str	r3, [r7, #24]
    break;
 8005a1e:	bf00      	nop
  }

  return sysclockfreq;
 8005a20:	69bb      	ldr	r3, [r7, #24]
}
 8005a22:	4618      	mov	r0, r3
 8005a24:	3724      	adds	r7, #36	; 0x24
 8005a26:	46bd      	mov	sp, r7
 8005a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2c:	4770      	bx	lr
 8005a2e:	bf00      	nop
 8005a30:	58024400 	.word	0x58024400
 8005a34:	03d09000 	.word	0x03d09000
 8005a38:	003d0900 	.word	0x003d0900
 8005a3c:	007a1200 	.word	0x007a1200
 8005a40:	46000000 	.word	0x46000000
 8005a44:	4c742400 	.word	0x4c742400
 8005a48:	4a742400 	.word	0x4a742400
 8005a4c:	4af42400 	.word	0x4af42400

08005a50 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b082      	sub	sp, #8
 8005a54:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005a56:	f7ff fe81 	bl	800575c <HAL_RCC_GetSysClockFreq>
 8005a5a:	4602      	mov	r2, r0
 8005a5c:	4b10      	ldr	r3, [pc, #64]	; (8005aa0 <HAL_RCC_GetHCLKFreq+0x50>)
 8005a5e:	699b      	ldr	r3, [r3, #24]
 8005a60:	0a1b      	lsrs	r3, r3, #8
 8005a62:	f003 030f 	and.w	r3, r3, #15
 8005a66:	490f      	ldr	r1, [pc, #60]	; (8005aa4 <HAL_RCC_GetHCLKFreq+0x54>)
 8005a68:	5ccb      	ldrb	r3, [r1, r3]
 8005a6a:	f003 031f 	and.w	r3, r3, #31
 8005a6e:	fa22 f303 	lsr.w	r3, r2, r3
 8005a72:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005a74:	4b0a      	ldr	r3, [pc, #40]	; (8005aa0 <HAL_RCC_GetHCLKFreq+0x50>)
 8005a76:	699b      	ldr	r3, [r3, #24]
 8005a78:	f003 030f 	and.w	r3, r3, #15
 8005a7c:	4a09      	ldr	r2, [pc, #36]	; (8005aa4 <HAL_RCC_GetHCLKFreq+0x54>)
 8005a7e:	5cd3      	ldrb	r3, [r2, r3]
 8005a80:	f003 031f 	and.w	r3, r3, #31
 8005a84:	687a      	ldr	r2, [r7, #4]
 8005a86:	fa22 f303 	lsr.w	r3, r2, r3
 8005a8a:	4a07      	ldr	r2, [pc, #28]	; (8005aa8 <HAL_RCC_GetHCLKFreq+0x58>)
 8005a8c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005a8e:	4a07      	ldr	r2, [pc, #28]	; (8005aac <HAL_RCC_GetHCLKFreq+0x5c>)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005a94:	4b04      	ldr	r3, [pc, #16]	; (8005aa8 <HAL_RCC_GetHCLKFreq+0x58>)
 8005a96:	681b      	ldr	r3, [r3, #0]
}
 8005a98:	4618      	mov	r0, r3
 8005a9a:	3708      	adds	r7, #8
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	bd80      	pop	{r7, pc}
 8005aa0:	58024400 	.word	0x58024400
 8005aa4:	0800cc60 	.word	0x0800cc60
 8005aa8:	24000404 	.word	0x24000404
 8005aac:	24000400 	.word	0x24000400

08005ab0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005ab4:	f7ff ffcc 	bl	8005a50 <HAL_RCC_GetHCLKFreq>
 8005ab8:	4602      	mov	r2, r0
 8005aba:	4b06      	ldr	r3, [pc, #24]	; (8005ad4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005abc:	69db      	ldr	r3, [r3, #28]
 8005abe:	091b      	lsrs	r3, r3, #4
 8005ac0:	f003 0307 	and.w	r3, r3, #7
 8005ac4:	4904      	ldr	r1, [pc, #16]	; (8005ad8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005ac6:	5ccb      	ldrb	r3, [r1, r3]
 8005ac8:	f003 031f 	and.w	r3, r3, #31
 8005acc:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	bd80      	pop	{r7, pc}
 8005ad4:	58024400 	.word	0x58024400
 8005ad8:	0800cc60 	.word	0x0800cc60

08005adc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005ae0:	f7ff ffb6 	bl	8005a50 <HAL_RCC_GetHCLKFreq>
 8005ae4:	4602      	mov	r2, r0
 8005ae6:	4b06      	ldr	r3, [pc, #24]	; (8005b00 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005ae8:	69db      	ldr	r3, [r3, #28]
 8005aea:	0a1b      	lsrs	r3, r3, #8
 8005aec:	f003 0307 	and.w	r3, r3, #7
 8005af0:	4904      	ldr	r1, [pc, #16]	; (8005b04 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005af2:	5ccb      	ldrb	r3, [r1, r3]
 8005af4:	f003 031f 	and.w	r3, r3, #31
 8005af8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8005afc:	4618      	mov	r0, r3
 8005afe:	bd80      	pop	{r7, pc}
 8005b00:	58024400 	.word	0x58024400
 8005b04:	0800cc60 	.word	0x0800cc60

08005b08 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b086      	sub	sp, #24
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005b10:	2300      	movs	r3, #0
 8005b12:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005b14:	2300      	movs	r3, #0
 8005b16:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d03f      	beq.n	8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005b28:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005b2c:	d02a      	beq.n	8005b84 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8005b2e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005b32:	d824      	bhi.n	8005b7e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005b34:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005b38:	d018      	beq.n	8005b6c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005b3a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005b3e:	d81e      	bhi.n	8005b7e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d003      	beq.n	8005b4c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005b44:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005b48:	d007      	beq.n	8005b5a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005b4a:	e018      	b.n	8005b7e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b4c:	4bab      	ldr	r3, [pc, #684]	; (8005dfc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b50:	4aaa      	ldr	r2, [pc, #680]	; (8005dfc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005b52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005b56:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005b58:	e015      	b.n	8005b86 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	3304      	adds	r3, #4
 8005b5e:	2102      	movs	r1, #2
 8005b60:	4618      	mov	r0, r3
 8005b62:	f001 fff3 	bl	8007b4c <RCCEx_PLL2_Config>
 8005b66:	4603      	mov	r3, r0
 8005b68:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005b6a:	e00c      	b.n	8005b86 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	3324      	adds	r3, #36	; 0x24
 8005b70:	2102      	movs	r1, #2
 8005b72:	4618      	mov	r0, r3
 8005b74:	f002 f89c 	bl	8007cb0 <RCCEx_PLL3_Config>
 8005b78:	4603      	mov	r3, r0
 8005b7a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005b7c:	e003      	b.n	8005b86 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005b7e:	2301      	movs	r3, #1
 8005b80:	75fb      	strb	r3, [r7, #23]
      break;
 8005b82:	e000      	b.n	8005b86 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005b84:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005b86:	7dfb      	ldrb	r3, [r7, #23]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d109      	bne.n	8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005b8c:	4b9b      	ldr	r3, [pc, #620]	; (8005dfc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005b8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b90:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005b98:	4998      	ldr	r1, [pc, #608]	; (8005dfc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005b9a:	4313      	orrs	r3, r2
 8005b9c:	650b      	str	r3, [r1, #80]	; 0x50
 8005b9e:	e001      	b.n	8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ba0:	7dfb      	ldrb	r3, [r7, #23]
 8005ba2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d03d      	beq.n	8005c2c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bb4:	2b04      	cmp	r3, #4
 8005bb6:	d826      	bhi.n	8005c06 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8005bb8:	a201      	add	r2, pc, #4	; (adr r2, 8005bc0 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8005bba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bbe:	bf00      	nop
 8005bc0:	08005bd5 	.word	0x08005bd5
 8005bc4:	08005be3 	.word	0x08005be3
 8005bc8:	08005bf5 	.word	0x08005bf5
 8005bcc:	08005c0d 	.word	0x08005c0d
 8005bd0:	08005c0d 	.word	0x08005c0d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005bd4:	4b89      	ldr	r3, [pc, #548]	; (8005dfc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005bd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bd8:	4a88      	ldr	r2, [pc, #544]	; (8005dfc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005bda:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005bde:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005be0:	e015      	b.n	8005c0e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	3304      	adds	r3, #4
 8005be6:	2100      	movs	r1, #0
 8005be8:	4618      	mov	r0, r3
 8005bea:	f001 ffaf 	bl	8007b4c <RCCEx_PLL2_Config>
 8005bee:	4603      	mov	r3, r0
 8005bf0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005bf2:	e00c      	b.n	8005c0e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	3324      	adds	r3, #36	; 0x24
 8005bf8:	2100      	movs	r1, #0
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	f002 f858 	bl	8007cb0 <RCCEx_PLL3_Config>
 8005c00:	4603      	mov	r3, r0
 8005c02:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005c04:	e003      	b.n	8005c0e <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005c06:	2301      	movs	r3, #1
 8005c08:	75fb      	strb	r3, [r7, #23]
      break;
 8005c0a:	e000      	b.n	8005c0e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8005c0c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005c0e:	7dfb      	ldrb	r3, [r7, #23]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d109      	bne.n	8005c28 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005c14:	4b79      	ldr	r3, [pc, #484]	; (8005dfc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005c16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c18:	f023 0207 	bic.w	r2, r3, #7
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c20:	4976      	ldr	r1, [pc, #472]	; (8005dfc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005c22:	4313      	orrs	r3, r2
 8005c24:	650b      	str	r3, [r1, #80]	; 0x50
 8005c26:	e001      	b.n	8005c2c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c28:	7dfb      	ldrb	r3, [r7, #23]
 8005c2a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d042      	beq.n	8005cbe <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c40:	d02b      	beq.n	8005c9a <HAL_RCCEx_PeriphCLKConfig+0x192>
 8005c42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c46:	d825      	bhi.n	8005c94 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8005c48:	2bc0      	cmp	r3, #192	; 0xc0
 8005c4a:	d028      	beq.n	8005c9e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005c4c:	2bc0      	cmp	r3, #192	; 0xc0
 8005c4e:	d821      	bhi.n	8005c94 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8005c50:	2b80      	cmp	r3, #128	; 0x80
 8005c52:	d016      	beq.n	8005c82 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8005c54:	2b80      	cmp	r3, #128	; 0x80
 8005c56:	d81d      	bhi.n	8005c94 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d002      	beq.n	8005c62 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8005c5c:	2b40      	cmp	r3, #64	; 0x40
 8005c5e:	d007      	beq.n	8005c70 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8005c60:	e018      	b.n	8005c94 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c62:	4b66      	ldr	r3, [pc, #408]	; (8005dfc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005c64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c66:	4a65      	ldr	r2, [pc, #404]	; (8005dfc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005c68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005c6c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8005c6e:	e017      	b.n	8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	3304      	adds	r3, #4
 8005c74:	2100      	movs	r1, #0
 8005c76:	4618      	mov	r0, r3
 8005c78:	f001 ff68 	bl	8007b4c <RCCEx_PLL2_Config>
 8005c7c:	4603      	mov	r3, r0
 8005c7e:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8005c80:	e00e      	b.n	8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	3324      	adds	r3, #36	; 0x24
 8005c86:	2100      	movs	r1, #0
 8005c88:	4618      	mov	r0, r3
 8005c8a:	f002 f811 	bl	8007cb0 <RCCEx_PLL3_Config>
 8005c8e:	4603      	mov	r3, r0
 8005c90:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8005c92:	e005      	b.n	8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005c94:	2301      	movs	r3, #1
 8005c96:	75fb      	strb	r3, [r7, #23]
      break;
 8005c98:	e002      	b.n	8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8005c9a:	bf00      	nop
 8005c9c:	e000      	b.n	8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8005c9e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005ca0:	7dfb      	ldrb	r3, [r7, #23]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d109      	bne.n	8005cba <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8005ca6:	4b55      	ldr	r3, [pc, #340]	; (8005dfc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005ca8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005caa:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cb2:	4952      	ldr	r1, [pc, #328]	; (8005dfc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005cb4:	4313      	orrs	r3, r2
 8005cb6:	650b      	str	r3, [r1, #80]	; 0x50
 8005cb8:	e001      	b.n	8005cbe <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cba:	7dfb      	ldrb	r3, [r7, #23]
 8005cbc:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d049      	beq.n	8005d5e <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005cd0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005cd4:	d030      	beq.n	8005d38 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8005cd6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005cda:	d82a      	bhi.n	8005d32 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005cdc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005ce0:	d02c      	beq.n	8005d3c <HAL_RCCEx_PeriphCLKConfig+0x234>
 8005ce2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005ce6:	d824      	bhi.n	8005d32 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005ce8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005cec:	d018      	beq.n	8005d20 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8005cee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005cf2:	d81e      	bhi.n	8005d32 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d003      	beq.n	8005d00 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8005cf8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005cfc:	d007      	beq.n	8005d0e <HAL_RCCEx_PeriphCLKConfig+0x206>
 8005cfe:	e018      	b.n	8005d32 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d00:	4b3e      	ldr	r3, [pc, #248]	; (8005dfc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005d02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d04:	4a3d      	ldr	r2, [pc, #244]	; (8005dfc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005d06:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005d0a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005d0c:	e017      	b.n	8005d3e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	3304      	adds	r3, #4
 8005d12:	2100      	movs	r1, #0
 8005d14:	4618      	mov	r0, r3
 8005d16:	f001 ff19 	bl	8007b4c <RCCEx_PLL2_Config>
 8005d1a:	4603      	mov	r3, r0
 8005d1c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8005d1e:	e00e      	b.n	8005d3e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	3324      	adds	r3, #36	; 0x24
 8005d24:	2100      	movs	r1, #0
 8005d26:	4618      	mov	r0, r3
 8005d28:	f001 ffc2 	bl	8007cb0 <RCCEx_PLL3_Config>
 8005d2c:	4603      	mov	r3, r0
 8005d2e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005d30:	e005      	b.n	8005d3e <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8005d32:	2301      	movs	r3, #1
 8005d34:	75fb      	strb	r3, [r7, #23]
      break;
 8005d36:	e002      	b.n	8005d3e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8005d38:	bf00      	nop
 8005d3a:	e000      	b.n	8005d3e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8005d3c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005d3e:	7dfb      	ldrb	r3, [r7, #23]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d10a      	bne.n	8005d5a <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005d44:	4b2d      	ldr	r3, [pc, #180]	; (8005dfc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005d46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d48:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005d52:	492a      	ldr	r1, [pc, #168]	; (8005dfc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005d54:	4313      	orrs	r3, r2
 8005d56:	658b      	str	r3, [r1, #88]	; 0x58
 8005d58:	e001      	b.n	8005d5e <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d5a:	7dfb      	ldrb	r3, [r7, #23]
 8005d5c:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d04c      	beq.n	8005e04 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005d70:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005d74:	d030      	beq.n	8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8005d76:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005d7a:	d82a      	bhi.n	8005dd2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8005d7c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005d80:	d02c      	beq.n	8005ddc <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8005d82:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005d86:	d824      	bhi.n	8005dd2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8005d88:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005d8c:	d018      	beq.n	8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8005d8e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005d92:	d81e      	bhi.n	8005dd2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d003      	beq.n	8005da0 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8005d98:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005d9c:	d007      	beq.n	8005dae <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8005d9e:	e018      	b.n	8005dd2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005da0:	4b16      	ldr	r3, [pc, #88]	; (8005dfc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005da2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005da4:	4a15      	ldr	r2, [pc, #84]	; (8005dfc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005da6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005daa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005dac:	e017      	b.n	8005dde <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	3304      	adds	r3, #4
 8005db2:	2100      	movs	r1, #0
 8005db4:	4618      	mov	r0, r3
 8005db6:	f001 fec9 	bl	8007b4c <RCCEx_PLL2_Config>
 8005dba:	4603      	mov	r3, r0
 8005dbc:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8005dbe:	e00e      	b.n	8005dde <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	3324      	adds	r3, #36	; 0x24
 8005dc4:	2100      	movs	r1, #0
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	f001 ff72 	bl	8007cb0 <RCCEx_PLL3_Config>
 8005dcc:	4603      	mov	r3, r0
 8005dce:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005dd0:	e005      	b.n	8005dde <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8005dd2:	2301      	movs	r3, #1
 8005dd4:	75fb      	strb	r3, [r7, #23]
      break;
 8005dd6:	e002      	b.n	8005dde <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8005dd8:	bf00      	nop
 8005dda:	e000      	b.n	8005dde <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8005ddc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005dde:	7dfb      	ldrb	r3, [r7, #23]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d10d      	bne.n	8005e00 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005de4:	4b05      	ldr	r3, [pc, #20]	; (8005dfc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005de6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005de8:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005df2:	4902      	ldr	r1, [pc, #8]	; (8005dfc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005df4:	4313      	orrs	r3, r2
 8005df6:	658b      	str	r3, [r1, #88]	; 0x58
 8005df8:	e004      	b.n	8005e04 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8005dfa:	bf00      	nop
 8005dfc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e00:	7dfb      	ldrb	r3, [r7, #23]
 8005e02:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d032      	beq.n	8005e76 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e14:	2b30      	cmp	r3, #48	; 0x30
 8005e16:	d01c      	beq.n	8005e52 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8005e18:	2b30      	cmp	r3, #48	; 0x30
 8005e1a:	d817      	bhi.n	8005e4c <HAL_RCCEx_PeriphCLKConfig+0x344>
 8005e1c:	2b20      	cmp	r3, #32
 8005e1e:	d00c      	beq.n	8005e3a <HAL_RCCEx_PeriphCLKConfig+0x332>
 8005e20:	2b20      	cmp	r3, #32
 8005e22:	d813      	bhi.n	8005e4c <HAL_RCCEx_PeriphCLKConfig+0x344>
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d016      	beq.n	8005e56 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8005e28:	2b10      	cmp	r3, #16
 8005e2a:	d10f      	bne.n	8005e4c <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e2c:	4baf      	ldr	r3, [pc, #700]	; (80060ec <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005e2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e30:	4aae      	ldr	r2, [pc, #696]	; (80060ec <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005e32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005e36:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8005e38:	e00e      	b.n	8005e58 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	3304      	adds	r3, #4
 8005e3e:	2102      	movs	r1, #2
 8005e40:	4618      	mov	r0, r3
 8005e42:	f001 fe83 	bl	8007b4c <RCCEx_PLL2_Config>
 8005e46:	4603      	mov	r3, r0
 8005e48:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8005e4a:	e005      	b.n	8005e58 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005e4c:	2301      	movs	r3, #1
 8005e4e:	75fb      	strb	r3, [r7, #23]
      break;
 8005e50:	e002      	b.n	8005e58 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8005e52:	bf00      	nop
 8005e54:	e000      	b.n	8005e58 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8005e56:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005e58:	7dfb      	ldrb	r3, [r7, #23]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d109      	bne.n	8005e72 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005e5e:	4ba3      	ldr	r3, [pc, #652]	; (80060ec <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005e60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e62:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e6a:	49a0      	ldr	r1, [pc, #640]	; (80060ec <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005e6c:	4313      	orrs	r3, r2
 8005e6e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005e70:	e001      	b.n	8005e76 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e72:	7dfb      	ldrb	r3, [r7, #23]
 8005e74:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d047      	beq.n	8005f12 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e86:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005e8a:	d030      	beq.n	8005eee <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8005e8c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005e90:	d82a      	bhi.n	8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8005e92:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005e96:	d02c      	beq.n	8005ef2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8005e98:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005e9c:	d824      	bhi.n	8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8005e9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ea2:	d018      	beq.n	8005ed6 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8005ea4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ea8:	d81e      	bhi.n	8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d003      	beq.n	8005eb6 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8005eae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005eb2:	d007      	beq.n	8005ec4 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8005eb4:	e018      	b.n	8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005eb6:	4b8d      	ldr	r3, [pc, #564]	; (80060ec <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005eb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eba:	4a8c      	ldr	r2, [pc, #560]	; (80060ec <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005ebc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005ec0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005ec2:	e017      	b.n	8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	3304      	adds	r3, #4
 8005ec8:	2100      	movs	r1, #0
 8005eca:	4618      	mov	r0, r3
 8005ecc:	f001 fe3e 	bl	8007b4c <RCCEx_PLL2_Config>
 8005ed0:	4603      	mov	r3, r0
 8005ed2:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005ed4:	e00e      	b.n	8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	3324      	adds	r3, #36	; 0x24
 8005eda:	2100      	movs	r1, #0
 8005edc:	4618      	mov	r0, r3
 8005ede:	f001 fee7 	bl	8007cb0 <RCCEx_PLL3_Config>
 8005ee2:	4603      	mov	r3, r0
 8005ee4:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005ee6:	e005      	b.n	8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005ee8:	2301      	movs	r3, #1
 8005eea:	75fb      	strb	r3, [r7, #23]
      break;
 8005eec:	e002      	b.n	8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8005eee:	bf00      	nop
 8005ef0:	e000      	b.n	8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8005ef2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005ef4:	7dfb      	ldrb	r3, [r7, #23]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d109      	bne.n	8005f0e <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005efa:	4b7c      	ldr	r3, [pc, #496]	; (80060ec <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005efc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005efe:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f06:	4979      	ldr	r1, [pc, #484]	; (80060ec <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005f08:	4313      	orrs	r3, r2
 8005f0a:	650b      	str	r3, [r1, #80]	; 0x50
 8005f0c:	e001      	b.n	8005f12 <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f0e:	7dfb      	ldrb	r3, [r7, #23]
 8005f10:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d049      	beq.n	8005fb2 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f22:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005f26:	d02e      	beq.n	8005f86 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8005f28:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005f2c:	d828      	bhi.n	8005f80 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8005f2e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005f32:	d02a      	beq.n	8005f8a <HAL_RCCEx_PeriphCLKConfig+0x482>
 8005f34:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005f38:	d822      	bhi.n	8005f80 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8005f3a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005f3e:	d026      	beq.n	8005f8e <HAL_RCCEx_PeriphCLKConfig+0x486>
 8005f40:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005f44:	d81c      	bhi.n	8005f80 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8005f46:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005f4a:	d010      	beq.n	8005f6e <HAL_RCCEx_PeriphCLKConfig+0x466>
 8005f4c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005f50:	d816      	bhi.n	8005f80 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d01d      	beq.n	8005f92 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8005f56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f5a:	d111      	bne.n	8005f80 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	3304      	adds	r3, #4
 8005f60:	2101      	movs	r1, #1
 8005f62:	4618      	mov	r0, r3
 8005f64:	f001 fdf2 	bl	8007b4c <RCCEx_PLL2_Config>
 8005f68:	4603      	mov	r3, r0
 8005f6a:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8005f6c:	e012      	b.n	8005f94 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	3324      	adds	r3, #36	; 0x24
 8005f72:	2101      	movs	r1, #1
 8005f74:	4618      	mov	r0, r3
 8005f76:	f001 fe9b 	bl	8007cb0 <RCCEx_PLL3_Config>
 8005f7a:	4603      	mov	r3, r0
 8005f7c:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8005f7e:	e009      	b.n	8005f94 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005f80:	2301      	movs	r3, #1
 8005f82:	75fb      	strb	r3, [r7, #23]
      break;
 8005f84:	e006      	b.n	8005f94 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8005f86:	bf00      	nop
 8005f88:	e004      	b.n	8005f94 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8005f8a:	bf00      	nop
 8005f8c:	e002      	b.n	8005f94 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8005f8e:	bf00      	nop
 8005f90:	e000      	b.n	8005f94 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8005f92:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005f94:	7dfb      	ldrb	r3, [r7, #23]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d109      	bne.n	8005fae <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005f9a:	4b54      	ldr	r3, [pc, #336]	; (80060ec <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005f9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f9e:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005fa6:	4951      	ldr	r1, [pc, #324]	; (80060ec <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005fa8:	4313      	orrs	r3, r2
 8005faa:	650b      	str	r3, [r1, #80]	; 0x50
 8005fac:	e001      	b.n	8005fb2 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fae:	7dfb      	ldrb	r3, [r7, #23]
 8005fb0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d04b      	beq.n	8006056 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005fc4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005fc8:	d02e      	beq.n	8006028 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8005fca:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005fce:	d828      	bhi.n	8006022 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8005fd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fd4:	d02a      	beq.n	800602c <HAL_RCCEx_PeriphCLKConfig+0x524>
 8005fd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fda:	d822      	bhi.n	8006022 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8005fdc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005fe0:	d026      	beq.n	8006030 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8005fe2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005fe6:	d81c      	bhi.n	8006022 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8005fe8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005fec:	d010      	beq.n	8006010 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8005fee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005ff2:	d816      	bhi.n	8006022 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d01d      	beq.n	8006034 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8005ff8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005ffc:	d111      	bne.n	8006022 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	3304      	adds	r3, #4
 8006002:	2101      	movs	r1, #1
 8006004:	4618      	mov	r0, r3
 8006006:	f001 fda1 	bl	8007b4c <RCCEx_PLL2_Config>
 800600a:	4603      	mov	r3, r0
 800600c:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800600e:	e012      	b.n	8006036 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	3324      	adds	r3, #36	; 0x24
 8006014:	2101      	movs	r1, #1
 8006016:	4618      	mov	r0, r3
 8006018:	f001 fe4a 	bl	8007cb0 <RCCEx_PLL3_Config>
 800601c:	4603      	mov	r3, r0
 800601e:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8006020:	e009      	b.n	8006036 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8006022:	2301      	movs	r3, #1
 8006024:	75fb      	strb	r3, [r7, #23]
      break;
 8006026:	e006      	b.n	8006036 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8006028:	bf00      	nop
 800602a:	e004      	b.n	8006036 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800602c:	bf00      	nop
 800602e:	e002      	b.n	8006036 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8006030:	bf00      	nop
 8006032:	e000      	b.n	8006036 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8006034:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006036:	7dfb      	ldrb	r3, [r7, #23]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d10a      	bne.n	8006052 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800603c:	4b2b      	ldr	r3, [pc, #172]	; (80060ec <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800603e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006040:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800604a:	4928      	ldr	r1, [pc, #160]	; (80060ec <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800604c:	4313      	orrs	r3, r2
 800604e:	658b      	str	r3, [r1, #88]	; 0x58
 8006050:	e001      	b.n	8006056 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006052:	7dfb      	ldrb	r3, [r7, #23]
 8006054:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800605e:	2b00      	cmp	r3, #0
 8006060:	d02f      	beq.n	80060c2 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006066:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800606a:	d00e      	beq.n	800608a <HAL_RCCEx_PeriphCLKConfig+0x582>
 800606c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006070:	d814      	bhi.n	800609c <HAL_RCCEx_PeriphCLKConfig+0x594>
 8006072:	2b00      	cmp	r3, #0
 8006074:	d015      	beq.n	80060a2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8006076:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800607a:	d10f      	bne.n	800609c <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800607c:	4b1b      	ldr	r3, [pc, #108]	; (80060ec <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800607e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006080:	4a1a      	ldr	r2, [pc, #104]	; (80060ec <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006082:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006086:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8006088:	e00c      	b.n	80060a4 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	3304      	adds	r3, #4
 800608e:	2101      	movs	r1, #1
 8006090:	4618      	mov	r0, r3
 8006092:	f001 fd5b 	bl	8007b4c <RCCEx_PLL2_Config>
 8006096:	4603      	mov	r3, r0
 8006098:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800609a:	e003      	b.n	80060a4 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800609c:	2301      	movs	r3, #1
 800609e:	75fb      	strb	r3, [r7, #23]
      break;
 80060a0:	e000      	b.n	80060a4 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 80060a2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80060a4:	7dfb      	ldrb	r3, [r7, #23]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d109      	bne.n	80060be <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80060aa:	4b10      	ldr	r3, [pc, #64]	; (80060ec <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80060ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060ae:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80060b6:	490d      	ldr	r1, [pc, #52]	; (80060ec <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80060b8:	4313      	orrs	r3, r2
 80060ba:	650b      	str	r3, [r1, #80]	; 0x50
 80060bc:	e001      	b.n	80060c2 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060be:	7dfb      	ldrb	r3, [r7, #23]
 80060c0:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d033      	beq.n	8006136 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060d2:	2b03      	cmp	r3, #3
 80060d4:	d81c      	bhi.n	8006110 <HAL_RCCEx_PeriphCLKConfig+0x608>
 80060d6:	a201      	add	r2, pc, #4	; (adr r2, 80060dc <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 80060d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060dc:	08006117 	.word	0x08006117
 80060e0:	080060f1 	.word	0x080060f1
 80060e4:	080060ff 	.word	0x080060ff
 80060e8:	08006117 	.word	0x08006117
 80060ec:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80060f0:	4bb8      	ldr	r3, [pc, #736]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80060f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060f4:	4ab7      	ldr	r2, [pc, #732]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80060f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80060fa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80060fc:	e00c      	b.n	8006118 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	3304      	adds	r3, #4
 8006102:	2102      	movs	r1, #2
 8006104:	4618      	mov	r0, r3
 8006106:	f001 fd21 	bl	8007b4c <RCCEx_PLL2_Config>
 800610a:	4603      	mov	r3, r0
 800610c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800610e:	e003      	b.n	8006118 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8006110:	2301      	movs	r3, #1
 8006112:	75fb      	strb	r3, [r7, #23]
      break;
 8006114:	e000      	b.n	8006118 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8006116:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006118:	7dfb      	ldrb	r3, [r7, #23]
 800611a:	2b00      	cmp	r3, #0
 800611c:	d109      	bne.n	8006132 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800611e:	4bad      	ldr	r3, [pc, #692]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006120:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006122:	f023 0203 	bic.w	r2, r3, #3
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800612a:	49aa      	ldr	r1, [pc, #680]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800612c:	4313      	orrs	r3, r2
 800612e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006130:	e001      	b.n	8006136 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006132:	7dfb      	ldrb	r3, [r7, #23]
 8006134:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800613e:	2b00      	cmp	r3, #0
 8006140:	f000 8086 	beq.w	8006250 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006144:	4ba4      	ldr	r3, [pc, #656]	; (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	4aa3      	ldr	r2, [pc, #652]	; (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800614a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800614e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006150:	f7fb faae 	bl	80016b0 <HAL_GetTick>
 8006154:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006156:	e009      	b.n	800616c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006158:	f7fb faaa 	bl	80016b0 <HAL_GetTick>
 800615c:	4602      	mov	r2, r0
 800615e:	693b      	ldr	r3, [r7, #16]
 8006160:	1ad3      	subs	r3, r2, r3
 8006162:	2b64      	cmp	r3, #100	; 0x64
 8006164:	d902      	bls.n	800616c <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8006166:	2303      	movs	r3, #3
 8006168:	75fb      	strb	r3, [r7, #23]
        break;
 800616a:	e005      	b.n	8006178 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800616c:	4b9a      	ldr	r3, [pc, #616]	; (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006174:	2b00      	cmp	r3, #0
 8006176:	d0ef      	beq.n	8006158 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8006178:	7dfb      	ldrb	r3, [r7, #23]
 800617a:	2b00      	cmp	r3, #0
 800617c:	d166      	bne.n	800624c <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800617e:	4b95      	ldr	r3, [pc, #596]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006180:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006188:	4053      	eors	r3, r2
 800618a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800618e:	2b00      	cmp	r3, #0
 8006190:	d013      	beq.n	80061ba <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006192:	4b90      	ldr	r3, [pc, #576]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006194:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006196:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800619a:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800619c:	4b8d      	ldr	r3, [pc, #564]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800619e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061a0:	4a8c      	ldr	r2, [pc, #560]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80061a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80061a6:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80061a8:	4b8a      	ldr	r3, [pc, #552]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80061aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061ac:	4a89      	ldr	r2, [pc, #548]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80061ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80061b2:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80061b4:	4a87      	ldr	r2, [pc, #540]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80061c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80061c4:	d115      	bne.n	80061f2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061c6:	f7fb fa73 	bl	80016b0 <HAL_GetTick>
 80061ca:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80061cc:	e00b      	b.n	80061e6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80061ce:	f7fb fa6f 	bl	80016b0 <HAL_GetTick>
 80061d2:	4602      	mov	r2, r0
 80061d4:	693b      	ldr	r3, [r7, #16]
 80061d6:	1ad3      	subs	r3, r2, r3
 80061d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80061dc:	4293      	cmp	r3, r2
 80061de:	d902      	bls.n	80061e6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 80061e0:	2303      	movs	r3, #3
 80061e2:	75fb      	strb	r3, [r7, #23]
            break;
 80061e4:	e005      	b.n	80061f2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80061e6:	4b7b      	ldr	r3, [pc, #492]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80061e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061ea:	f003 0302 	and.w	r3, r3, #2
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d0ed      	beq.n	80061ce <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 80061f2:	7dfb      	ldrb	r3, [r7, #23]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d126      	bne.n	8006246 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80061fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006202:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006206:	d10d      	bne.n	8006224 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8006208:	4b72      	ldr	r3, [pc, #456]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800620a:	691b      	ldr	r3, [r3, #16]
 800620c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006216:	0919      	lsrs	r1, r3, #4
 8006218:	4b70      	ldr	r3, [pc, #448]	; (80063dc <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 800621a:	400b      	ands	r3, r1
 800621c:	496d      	ldr	r1, [pc, #436]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800621e:	4313      	orrs	r3, r2
 8006220:	610b      	str	r3, [r1, #16]
 8006222:	e005      	b.n	8006230 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8006224:	4b6b      	ldr	r3, [pc, #428]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006226:	691b      	ldr	r3, [r3, #16]
 8006228:	4a6a      	ldr	r2, [pc, #424]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800622a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800622e:	6113      	str	r3, [r2, #16]
 8006230:	4b68      	ldr	r3, [pc, #416]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006232:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800623a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800623e:	4965      	ldr	r1, [pc, #404]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006240:	4313      	orrs	r3, r2
 8006242:	670b      	str	r3, [r1, #112]	; 0x70
 8006244:	e004      	b.n	8006250 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006246:	7dfb      	ldrb	r3, [r7, #23]
 8006248:	75bb      	strb	r3, [r7, #22]
 800624a:	e001      	b.n	8006250 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800624c:	7dfb      	ldrb	r3, [r7, #23]
 800624e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f003 0301 	and.w	r3, r3, #1
 8006258:	2b00      	cmp	r3, #0
 800625a:	d07e      	beq.n	800635a <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006260:	2b28      	cmp	r3, #40	; 0x28
 8006262:	d867      	bhi.n	8006334 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8006264:	a201      	add	r2, pc, #4	; (adr r2, 800626c <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8006266:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800626a:	bf00      	nop
 800626c:	0800633b 	.word	0x0800633b
 8006270:	08006335 	.word	0x08006335
 8006274:	08006335 	.word	0x08006335
 8006278:	08006335 	.word	0x08006335
 800627c:	08006335 	.word	0x08006335
 8006280:	08006335 	.word	0x08006335
 8006284:	08006335 	.word	0x08006335
 8006288:	08006335 	.word	0x08006335
 800628c:	08006311 	.word	0x08006311
 8006290:	08006335 	.word	0x08006335
 8006294:	08006335 	.word	0x08006335
 8006298:	08006335 	.word	0x08006335
 800629c:	08006335 	.word	0x08006335
 80062a0:	08006335 	.word	0x08006335
 80062a4:	08006335 	.word	0x08006335
 80062a8:	08006335 	.word	0x08006335
 80062ac:	08006323 	.word	0x08006323
 80062b0:	08006335 	.word	0x08006335
 80062b4:	08006335 	.word	0x08006335
 80062b8:	08006335 	.word	0x08006335
 80062bc:	08006335 	.word	0x08006335
 80062c0:	08006335 	.word	0x08006335
 80062c4:	08006335 	.word	0x08006335
 80062c8:	08006335 	.word	0x08006335
 80062cc:	0800633b 	.word	0x0800633b
 80062d0:	08006335 	.word	0x08006335
 80062d4:	08006335 	.word	0x08006335
 80062d8:	08006335 	.word	0x08006335
 80062dc:	08006335 	.word	0x08006335
 80062e0:	08006335 	.word	0x08006335
 80062e4:	08006335 	.word	0x08006335
 80062e8:	08006335 	.word	0x08006335
 80062ec:	0800633b 	.word	0x0800633b
 80062f0:	08006335 	.word	0x08006335
 80062f4:	08006335 	.word	0x08006335
 80062f8:	08006335 	.word	0x08006335
 80062fc:	08006335 	.word	0x08006335
 8006300:	08006335 	.word	0x08006335
 8006304:	08006335 	.word	0x08006335
 8006308:	08006335 	.word	0x08006335
 800630c:	0800633b 	.word	0x0800633b
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	3304      	adds	r3, #4
 8006314:	2101      	movs	r1, #1
 8006316:	4618      	mov	r0, r3
 8006318:	f001 fc18 	bl	8007b4c <RCCEx_PLL2_Config>
 800631c:	4603      	mov	r3, r0
 800631e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8006320:	e00c      	b.n	800633c <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	3324      	adds	r3, #36	; 0x24
 8006326:	2101      	movs	r1, #1
 8006328:	4618      	mov	r0, r3
 800632a:	f001 fcc1 	bl	8007cb0 <RCCEx_PLL3_Config>
 800632e:	4603      	mov	r3, r0
 8006330:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8006332:	e003      	b.n	800633c <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006334:	2301      	movs	r3, #1
 8006336:	75fb      	strb	r3, [r7, #23]
      break;
 8006338:	e000      	b.n	800633c <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 800633a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800633c:	7dfb      	ldrb	r3, [r7, #23]
 800633e:	2b00      	cmp	r3, #0
 8006340:	d109      	bne.n	8006356 <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006342:	4b24      	ldr	r3, [pc, #144]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006344:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006346:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800634e:	4921      	ldr	r1, [pc, #132]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006350:	4313      	orrs	r3, r2
 8006352:	654b      	str	r3, [r1, #84]	; 0x54
 8006354:	e001      	b.n	800635a <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006356:	7dfb      	ldrb	r3, [r7, #23]
 8006358:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f003 0302 	and.w	r3, r3, #2
 8006362:	2b00      	cmp	r3, #0
 8006364:	d03e      	beq.n	80063e4 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800636a:	2b05      	cmp	r3, #5
 800636c:	d820      	bhi.n	80063b0 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 800636e:	a201      	add	r2, pc, #4	; (adr r2, 8006374 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 8006370:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006374:	080063b7 	.word	0x080063b7
 8006378:	0800638d 	.word	0x0800638d
 800637c:	0800639f 	.word	0x0800639f
 8006380:	080063b7 	.word	0x080063b7
 8006384:	080063b7 	.word	0x080063b7
 8006388:	080063b7 	.word	0x080063b7
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	3304      	adds	r3, #4
 8006390:	2101      	movs	r1, #1
 8006392:	4618      	mov	r0, r3
 8006394:	f001 fbda 	bl	8007b4c <RCCEx_PLL2_Config>
 8006398:	4603      	mov	r3, r0
 800639a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800639c:	e00c      	b.n	80063b8 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	3324      	adds	r3, #36	; 0x24
 80063a2:	2101      	movs	r1, #1
 80063a4:	4618      	mov	r0, r3
 80063a6:	f001 fc83 	bl	8007cb0 <RCCEx_PLL3_Config>
 80063aa:	4603      	mov	r3, r0
 80063ac:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80063ae:	e003      	b.n	80063b8 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80063b0:	2301      	movs	r3, #1
 80063b2:	75fb      	strb	r3, [r7, #23]
      break;
 80063b4:	e000      	b.n	80063b8 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 80063b6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80063b8:	7dfb      	ldrb	r3, [r7, #23]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d110      	bne.n	80063e0 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80063be:	4b05      	ldr	r3, [pc, #20]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80063c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063c2:	f023 0207 	bic.w	r2, r3, #7
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80063ca:	4902      	ldr	r1, [pc, #8]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80063cc:	4313      	orrs	r3, r2
 80063ce:	654b      	str	r3, [r1, #84]	; 0x54
 80063d0:	e008      	b.n	80063e4 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 80063d2:	bf00      	nop
 80063d4:	58024400 	.word	0x58024400
 80063d8:	58024800 	.word	0x58024800
 80063dc:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063e0:	7dfb      	ldrb	r3, [r7, #23]
 80063e2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f003 0304 	and.w	r3, r3, #4
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d039      	beq.n	8006464 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063f6:	2b05      	cmp	r3, #5
 80063f8:	d820      	bhi.n	800643c <HAL_RCCEx_PeriphCLKConfig+0x934>
 80063fa:	a201      	add	r2, pc, #4	; (adr r2, 8006400 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 80063fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006400:	08006443 	.word	0x08006443
 8006404:	08006419 	.word	0x08006419
 8006408:	0800642b 	.word	0x0800642b
 800640c:	08006443 	.word	0x08006443
 8006410:	08006443 	.word	0x08006443
 8006414:	08006443 	.word	0x08006443
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	3304      	adds	r3, #4
 800641c:	2101      	movs	r1, #1
 800641e:	4618      	mov	r0, r3
 8006420:	f001 fb94 	bl	8007b4c <RCCEx_PLL2_Config>
 8006424:	4603      	mov	r3, r0
 8006426:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006428:	e00c      	b.n	8006444 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	3324      	adds	r3, #36	; 0x24
 800642e:	2101      	movs	r1, #1
 8006430:	4618      	mov	r0, r3
 8006432:	f001 fc3d 	bl	8007cb0 <RCCEx_PLL3_Config>
 8006436:	4603      	mov	r3, r0
 8006438:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800643a:	e003      	b.n	8006444 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800643c:	2301      	movs	r3, #1
 800643e:	75fb      	strb	r3, [r7, #23]
      break;
 8006440:	e000      	b.n	8006444 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 8006442:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006444:	7dfb      	ldrb	r3, [r7, #23]
 8006446:	2b00      	cmp	r3, #0
 8006448:	d10a      	bne.n	8006460 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800644a:	4bb7      	ldr	r3, [pc, #732]	; (8006728 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800644c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800644e:	f023 0207 	bic.w	r2, r3, #7
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006458:	49b3      	ldr	r1, [pc, #716]	; (8006728 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800645a:	4313      	orrs	r3, r2
 800645c:	658b      	str	r3, [r1, #88]	; 0x58
 800645e:	e001      	b.n	8006464 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006460:	7dfb      	ldrb	r3, [r7, #23]
 8006462:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f003 0320 	and.w	r3, r3, #32
 800646c:	2b00      	cmp	r3, #0
 800646e:	d04b      	beq.n	8006508 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006476:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800647a:	d02e      	beq.n	80064da <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 800647c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006480:	d828      	bhi.n	80064d4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8006482:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006486:	d02a      	beq.n	80064de <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8006488:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800648c:	d822      	bhi.n	80064d4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800648e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006492:	d026      	beq.n	80064e2 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8006494:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006498:	d81c      	bhi.n	80064d4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800649a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800649e:	d010      	beq.n	80064c2 <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 80064a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80064a4:	d816      	bhi.n	80064d4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d01d      	beq.n	80064e6 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 80064aa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80064ae:	d111      	bne.n	80064d4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	3304      	adds	r3, #4
 80064b4:	2100      	movs	r1, #0
 80064b6:	4618      	mov	r0, r3
 80064b8:	f001 fb48 	bl	8007b4c <RCCEx_PLL2_Config>
 80064bc:	4603      	mov	r3, r0
 80064be:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80064c0:	e012      	b.n	80064e8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	3324      	adds	r3, #36	; 0x24
 80064c6:	2102      	movs	r1, #2
 80064c8:	4618      	mov	r0, r3
 80064ca:	f001 fbf1 	bl	8007cb0 <RCCEx_PLL3_Config>
 80064ce:	4603      	mov	r3, r0
 80064d0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80064d2:	e009      	b.n	80064e8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80064d4:	2301      	movs	r3, #1
 80064d6:	75fb      	strb	r3, [r7, #23]
      break;
 80064d8:	e006      	b.n	80064e8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80064da:	bf00      	nop
 80064dc:	e004      	b.n	80064e8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80064de:	bf00      	nop
 80064e0:	e002      	b.n	80064e8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80064e2:	bf00      	nop
 80064e4:	e000      	b.n	80064e8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80064e6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80064e8:	7dfb      	ldrb	r3, [r7, #23]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d10a      	bne.n	8006504 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80064ee:	4b8e      	ldr	r3, [pc, #568]	; (8006728 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80064f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064f2:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80064fc:	498a      	ldr	r1, [pc, #552]	; (8006728 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80064fe:	4313      	orrs	r3, r2
 8006500:	654b      	str	r3, [r1, #84]	; 0x54
 8006502:	e001      	b.n	8006508 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006504:	7dfb      	ldrb	r3, [r7, #23]
 8006506:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006510:	2b00      	cmp	r3, #0
 8006512:	d04b      	beq.n	80065ac <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800651a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800651e:	d02e      	beq.n	800657e <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8006520:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006524:	d828      	bhi.n	8006578 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8006526:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800652a:	d02a      	beq.n	8006582 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 800652c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006530:	d822      	bhi.n	8006578 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8006532:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006536:	d026      	beq.n	8006586 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8006538:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800653c:	d81c      	bhi.n	8006578 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800653e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006542:	d010      	beq.n	8006566 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8006544:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006548:	d816      	bhi.n	8006578 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800654a:	2b00      	cmp	r3, #0
 800654c:	d01d      	beq.n	800658a <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800654e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006552:	d111      	bne.n	8006578 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	3304      	adds	r3, #4
 8006558:	2100      	movs	r1, #0
 800655a:	4618      	mov	r0, r3
 800655c:	f001 faf6 	bl	8007b4c <RCCEx_PLL2_Config>
 8006560:	4603      	mov	r3, r0
 8006562:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006564:	e012      	b.n	800658c <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	3324      	adds	r3, #36	; 0x24
 800656a:	2102      	movs	r1, #2
 800656c:	4618      	mov	r0, r3
 800656e:	f001 fb9f 	bl	8007cb0 <RCCEx_PLL3_Config>
 8006572:	4603      	mov	r3, r0
 8006574:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006576:	e009      	b.n	800658c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006578:	2301      	movs	r3, #1
 800657a:	75fb      	strb	r3, [r7, #23]
      break;
 800657c:	e006      	b.n	800658c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800657e:	bf00      	nop
 8006580:	e004      	b.n	800658c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8006582:	bf00      	nop
 8006584:	e002      	b.n	800658c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8006586:	bf00      	nop
 8006588:	e000      	b.n	800658c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800658a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800658c:	7dfb      	ldrb	r3, [r7, #23]
 800658e:	2b00      	cmp	r3, #0
 8006590:	d10a      	bne.n	80065a8 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006592:	4b65      	ldr	r3, [pc, #404]	; (8006728 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006594:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006596:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80065a0:	4961      	ldr	r1, [pc, #388]	; (8006728 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80065a2:	4313      	orrs	r3, r2
 80065a4:	658b      	str	r3, [r1, #88]	; 0x58
 80065a6:	e001      	b.n	80065ac <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065a8:	7dfb      	ldrb	r3, [r7, #23]
 80065aa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d04b      	beq.n	8006650 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80065be:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80065c2:	d02e      	beq.n	8006622 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 80065c4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80065c8:	d828      	bhi.n	800661c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80065ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80065ce:	d02a      	beq.n	8006626 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 80065d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80065d4:	d822      	bhi.n	800661c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80065d6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80065da:	d026      	beq.n	800662a <HAL_RCCEx_PeriphCLKConfig+0xb22>
 80065dc:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80065e0:	d81c      	bhi.n	800661c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80065e2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80065e6:	d010      	beq.n	800660a <HAL_RCCEx_PeriphCLKConfig+0xb02>
 80065e8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80065ec:	d816      	bhi.n	800661c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d01d      	beq.n	800662e <HAL_RCCEx_PeriphCLKConfig+0xb26>
 80065f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80065f6:	d111      	bne.n	800661c <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	3304      	adds	r3, #4
 80065fc:	2100      	movs	r1, #0
 80065fe:	4618      	mov	r0, r3
 8006600:	f001 faa4 	bl	8007b4c <RCCEx_PLL2_Config>
 8006604:	4603      	mov	r3, r0
 8006606:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006608:	e012      	b.n	8006630 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	3324      	adds	r3, #36	; 0x24
 800660e:	2102      	movs	r1, #2
 8006610:	4618      	mov	r0, r3
 8006612:	f001 fb4d 	bl	8007cb0 <RCCEx_PLL3_Config>
 8006616:	4603      	mov	r3, r0
 8006618:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800661a:	e009      	b.n	8006630 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800661c:	2301      	movs	r3, #1
 800661e:	75fb      	strb	r3, [r7, #23]
      break;
 8006620:	e006      	b.n	8006630 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8006622:	bf00      	nop
 8006624:	e004      	b.n	8006630 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8006626:	bf00      	nop
 8006628:	e002      	b.n	8006630 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800662a:	bf00      	nop
 800662c:	e000      	b.n	8006630 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800662e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006630:	7dfb      	ldrb	r3, [r7, #23]
 8006632:	2b00      	cmp	r3, #0
 8006634:	d10a      	bne.n	800664c <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006636:	4b3c      	ldr	r3, [pc, #240]	; (8006728 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006638:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800663a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006644:	4938      	ldr	r1, [pc, #224]	; (8006728 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006646:	4313      	orrs	r3, r2
 8006648:	658b      	str	r3, [r1, #88]	; 0x58
 800664a:	e001      	b.n	8006650 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800664c:	7dfb      	ldrb	r3, [r7, #23]
 800664e:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f003 0308 	and.w	r3, r3, #8
 8006658:	2b00      	cmp	r3, #0
 800665a:	d01a      	beq.n	8006692 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006662:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006666:	d10a      	bne.n	800667e <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	3324      	adds	r3, #36	; 0x24
 800666c:	2102      	movs	r1, #2
 800666e:	4618      	mov	r0, r3
 8006670:	f001 fb1e 	bl	8007cb0 <RCCEx_PLL3_Config>
 8006674:	4603      	mov	r3, r0
 8006676:	2b00      	cmp	r3, #0
 8006678:	d001      	beq.n	800667e <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 800667a:	2301      	movs	r3, #1
 800667c:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800667e:	4b2a      	ldr	r3, [pc, #168]	; (8006728 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006680:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006682:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800668c:	4926      	ldr	r1, [pc, #152]	; (8006728 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800668e:	4313      	orrs	r3, r2
 8006690:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	f003 0310 	and.w	r3, r3, #16
 800669a:	2b00      	cmp	r3, #0
 800669c:	d01a      	beq.n	80066d4 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80066a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80066a8:	d10a      	bne.n	80066c0 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	3324      	adds	r3, #36	; 0x24
 80066ae:	2102      	movs	r1, #2
 80066b0:	4618      	mov	r0, r3
 80066b2:	f001 fafd 	bl	8007cb0 <RCCEx_PLL3_Config>
 80066b6:	4603      	mov	r3, r0
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d001      	beq.n	80066c0 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 80066bc:	2301      	movs	r3, #1
 80066be:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80066c0:	4b19      	ldr	r3, [pc, #100]	; (8006728 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80066c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066c4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80066ce:	4916      	ldr	r1, [pc, #88]	; (8006728 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80066d0:	4313      	orrs	r3, r2
 80066d2:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d036      	beq.n	800674e <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80066e6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80066ea:	d01f      	beq.n	800672c <HAL_RCCEx_PeriphCLKConfig+0xc24>
 80066ec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80066f0:	d817      	bhi.n	8006722 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d003      	beq.n	80066fe <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 80066f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80066fa:	d009      	beq.n	8006710 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 80066fc:	e011      	b.n	8006722 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	3304      	adds	r3, #4
 8006702:	2100      	movs	r1, #0
 8006704:	4618      	mov	r0, r3
 8006706:	f001 fa21 	bl	8007b4c <RCCEx_PLL2_Config>
 800670a:	4603      	mov	r3, r0
 800670c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800670e:	e00e      	b.n	800672e <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	3324      	adds	r3, #36	; 0x24
 8006714:	2102      	movs	r1, #2
 8006716:	4618      	mov	r0, r3
 8006718:	f001 faca 	bl	8007cb0 <RCCEx_PLL3_Config>
 800671c:	4603      	mov	r3, r0
 800671e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006720:	e005      	b.n	800672e <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006722:	2301      	movs	r3, #1
 8006724:	75fb      	strb	r3, [r7, #23]
      break;
 8006726:	e002      	b.n	800672e <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8006728:	58024400 	.word	0x58024400
      break;
 800672c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800672e:	7dfb      	ldrb	r3, [r7, #23]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d10a      	bne.n	800674a <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006734:	4b93      	ldr	r3, [pc, #588]	; (8006984 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006736:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006738:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006742:	4990      	ldr	r1, [pc, #576]	; (8006984 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006744:	4313      	orrs	r3, r2
 8006746:	658b      	str	r3, [r1, #88]	; 0x58
 8006748:	e001      	b.n	800674e <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800674a:	7dfb      	ldrb	r3, [r7, #23]
 800674c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006756:	2b00      	cmp	r3, #0
 8006758:	d033      	beq.n	80067c2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006760:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006764:	d01c      	beq.n	80067a0 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 8006766:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800676a:	d816      	bhi.n	800679a <HAL_RCCEx_PeriphCLKConfig+0xc92>
 800676c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006770:	d003      	beq.n	800677a <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8006772:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006776:	d007      	beq.n	8006788 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8006778:	e00f      	b.n	800679a <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800677a:	4b82      	ldr	r3, [pc, #520]	; (8006984 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800677c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800677e:	4a81      	ldr	r2, [pc, #516]	; (8006984 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006780:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006784:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8006786:	e00c      	b.n	80067a2 <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	3324      	adds	r3, #36	; 0x24
 800678c:	2101      	movs	r1, #1
 800678e:	4618      	mov	r0, r3
 8006790:	f001 fa8e 	bl	8007cb0 <RCCEx_PLL3_Config>
 8006794:	4603      	mov	r3, r0
 8006796:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8006798:	e003      	b.n	80067a2 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800679a:	2301      	movs	r3, #1
 800679c:	75fb      	strb	r3, [r7, #23]
      break;
 800679e:	e000      	b.n	80067a2 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 80067a0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80067a2:	7dfb      	ldrb	r3, [r7, #23]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d10a      	bne.n	80067be <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80067a8:	4b76      	ldr	r3, [pc, #472]	; (8006984 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80067aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067ac:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80067b6:	4973      	ldr	r1, [pc, #460]	; (8006984 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80067b8:	4313      	orrs	r3, r2
 80067ba:	654b      	str	r3, [r1, #84]	; 0x54
 80067bc:	e001      	b.n	80067c2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067be:	7dfb      	ldrb	r3, [r7, #23]
 80067c0:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d029      	beq.n	8006822 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d003      	beq.n	80067de <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 80067d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80067da:	d007      	beq.n	80067ec <HAL_RCCEx_PeriphCLKConfig+0xce4>
 80067dc:	e00f      	b.n	80067fe <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80067de:	4b69      	ldr	r3, [pc, #420]	; (8006984 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80067e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067e2:	4a68      	ldr	r2, [pc, #416]	; (8006984 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80067e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80067e8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80067ea:	e00b      	b.n	8006804 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	3304      	adds	r3, #4
 80067f0:	2102      	movs	r1, #2
 80067f2:	4618      	mov	r0, r3
 80067f4:	f001 f9aa 	bl	8007b4c <RCCEx_PLL2_Config>
 80067f8:	4603      	mov	r3, r0
 80067fa:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80067fc:	e002      	b.n	8006804 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 80067fe:	2301      	movs	r3, #1
 8006800:	75fb      	strb	r3, [r7, #23]
      break;
 8006802:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006804:	7dfb      	ldrb	r3, [r7, #23]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d109      	bne.n	800681e <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800680a:	4b5e      	ldr	r3, [pc, #376]	; (8006984 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800680c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800680e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006816:	495b      	ldr	r1, [pc, #364]	; (8006984 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006818:	4313      	orrs	r3, r2
 800681a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800681c:	e001      	b.n	8006822 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800681e:	7dfb      	ldrb	r3, [r7, #23]
 8006820:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800682a:	2b00      	cmp	r3, #0
 800682c:	d00a      	beq.n	8006844 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	3324      	adds	r3, #36	; 0x24
 8006832:	2102      	movs	r1, #2
 8006834:	4618      	mov	r0, r3
 8006836:	f001 fa3b 	bl	8007cb0 <RCCEx_PLL3_Config>
 800683a:	4603      	mov	r3, r0
 800683c:	2b00      	cmp	r3, #0
 800683e:	d001      	beq.n	8006844 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8006840:	2301      	movs	r3, #1
 8006842:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800684c:	2b00      	cmp	r3, #0
 800684e:	d030      	beq.n	80068b2 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006854:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006858:	d017      	beq.n	800688a <HAL_RCCEx_PeriphCLKConfig+0xd82>
 800685a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800685e:	d811      	bhi.n	8006884 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8006860:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006864:	d013      	beq.n	800688e <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8006866:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800686a:	d80b      	bhi.n	8006884 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 800686c:	2b00      	cmp	r3, #0
 800686e:	d010      	beq.n	8006892 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8006870:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006874:	d106      	bne.n	8006884 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006876:	4b43      	ldr	r3, [pc, #268]	; (8006984 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006878:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800687a:	4a42      	ldr	r2, [pc, #264]	; (8006984 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800687c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006880:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8006882:	e007      	b.n	8006894 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006884:	2301      	movs	r3, #1
 8006886:	75fb      	strb	r3, [r7, #23]
      break;
 8006888:	e004      	b.n	8006894 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800688a:	bf00      	nop
 800688c:	e002      	b.n	8006894 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800688e:	bf00      	nop
 8006890:	e000      	b.n	8006894 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8006892:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006894:	7dfb      	ldrb	r3, [r7, #23]
 8006896:	2b00      	cmp	r3, #0
 8006898:	d109      	bne.n	80068ae <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800689a:	4b3a      	ldr	r3, [pc, #232]	; (8006984 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800689c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800689e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80068a6:	4937      	ldr	r1, [pc, #220]	; (8006984 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80068a8:	4313      	orrs	r3, r2
 80068aa:	654b      	str	r3, [r1, #84]	; 0x54
 80068ac:	e001      	b.n	80068b2 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068ae:	7dfb      	ldrb	r3, [r7, #23]
 80068b0:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d008      	beq.n	80068d0 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80068be:	4b31      	ldr	r3, [pc, #196]	; (8006984 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80068c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068c2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068ca:	492e      	ldr	r1, [pc, #184]	; (8006984 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80068cc:	4313      	orrs	r3, r2
 80068ce:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d009      	beq.n	80068f0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80068dc:	4b29      	ldr	r3, [pc, #164]	; (8006984 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80068de:	691b      	ldr	r3, [r3, #16]
 80068e0:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80068ea:	4926      	ldr	r1, [pc, #152]	; (8006984 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80068ec:	4313      	orrs	r3, r2
 80068ee:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d008      	beq.n	800690e <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80068fc:	4b21      	ldr	r3, [pc, #132]	; (8006984 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80068fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006900:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006908:	491e      	ldr	r1, [pc, #120]	; (8006984 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800690a:	4313      	orrs	r3, r2
 800690c:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006916:	2b00      	cmp	r3, #0
 8006918:	d00d      	beq.n	8006936 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800691a:	4b1a      	ldr	r3, [pc, #104]	; (8006984 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800691c:	691b      	ldr	r3, [r3, #16]
 800691e:	4a19      	ldr	r2, [pc, #100]	; (8006984 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006920:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006924:	6113      	str	r3, [r2, #16]
 8006926:	4b17      	ldr	r3, [pc, #92]	; (8006984 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006928:	691a      	ldr	r2, [r3, #16]
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8006930:	4914      	ldr	r1, [pc, #80]	; (8006984 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006932:	4313      	orrs	r3, r2
 8006934:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	2b00      	cmp	r3, #0
 800693c:	da08      	bge.n	8006950 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800693e:	4b11      	ldr	r3, [pc, #68]	; (8006984 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006940:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006942:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800694a:	490e      	ldr	r1, [pc, #56]	; (8006984 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800694c:	4313      	orrs	r3, r2
 800694e:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006958:	2b00      	cmp	r3, #0
 800695a:	d009      	beq.n	8006970 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800695c:	4b09      	ldr	r3, [pc, #36]	; (8006984 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800695e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006960:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800696a:	4906      	ldr	r1, [pc, #24]	; (8006984 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800696c:	4313      	orrs	r3, r2
 800696e:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8006970:	7dbb      	ldrb	r3, [r7, #22]
 8006972:	2b00      	cmp	r3, #0
 8006974:	d101      	bne.n	800697a <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 8006976:	2300      	movs	r3, #0
 8006978:	e000      	b.n	800697c <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 800697a:	2301      	movs	r3, #1
}
 800697c:	4618      	mov	r0, r3
 800697e:	3718      	adds	r7, #24
 8006980:	46bd      	mov	sp, r7
 8006982:	bd80      	pop	{r7, pc}
 8006984:	58024400 	.word	0x58024400

08006988 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006988:	b580      	push	{r7, lr}
 800698a:	b090      	sub	sp, #64	; 0x40
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006996:	f040 8095 	bne.w	8006ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 800699a:	4bae      	ldr	r3, [pc, #696]	; (8006c54 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800699c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800699e:	f003 0307 	and.w	r3, r3, #7
 80069a2:	633b      	str	r3, [r7, #48]	; 0x30
 80069a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069a6:	2b04      	cmp	r3, #4
 80069a8:	f200 8088 	bhi.w	8006abc <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 80069ac:	a201      	add	r2, pc, #4	; (adr r2, 80069b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 80069ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069b2:	bf00      	nop
 80069b4:	080069c9 	.word	0x080069c9
 80069b8:	080069f1 	.word	0x080069f1
 80069bc:	08006a19 	.word	0x08006a19
 80069c0:	08006ab5 	.word	0x08006ab5
 80069c4:	08006a41 	.word	0x08006a41

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80069c8:	4ba2      	ldr	r3, [pc, #648]	; (8006c54 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80069d0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80069d4:	d108      	bne.n	80069e8 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80069d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80069da:	4618      	mov	r0, r3
 80069dc:	f000 ff64 	bl	80078a8 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 80069e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069e2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80069e4:	f000 bc95 	b.w	8007312 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80069e8:	2300      	movs	r3, #0
 80069ea:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80069ec:	f000 bc91 	b.w	8007312 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80069f0:	4b98      	ldr	r3, [pc, #608]	; (8006c54 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80069f8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80069fc:	d108      	bne.n	8006a10 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80069fe:	f107 0318 	add.w	r3, r7, #24
 8006a02:	4618      	mov	r0, r3
 8006a04:	f000 fca8 	bl	8007358 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006a08:	69bb      	ldr	r3, [r7, #24]
 8006a0a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006a0c:	f000 bc81 	b.w	8007312 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8006a10:	2300      	movs	r3, #0
 8006a12:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006a14:	f000 bc7d 	b.w	8007312 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006a18:	4b8e      	ldr	r3, [pc, #568]	; (8006c54 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006a20:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006a24:	d108      	bne.n	8006a38 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006a26:	f107 030c 	add.w	r3, r7, #12
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	f000 fde8 	bl	8007600 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006a34:	f000 bc6d 	b.w	8007312 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8006a38:	2300      	movs	r3, #0
 8006a3a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006a3c:	f000 bc69 	b.w	8007312 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006a40:	4b84      	ldr	r3, [pc, #528]	; (8006c54 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8006a42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a44:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006a48:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006a4a:	4b82      	ldr	r3, [pc, #520]	; (8006c54 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	f003 0304 	and.w	r3, r3, #4
 8006a52:	2b04      	cmp	r3, #4
 8006a54:	d10c      	bne.n	8006a70 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 8006a56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d109      	bne.n	8006a70 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006a5c:	4b7d      	ldr	r3, [pc, #500]	; (8006c54 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	08db      	lsrs	r3, r3, #3
 8006a62:	f003 0303 	and.w	r3, r3, #3
 8006a66:	4a7c      	ldr	r2, [pc, #496]	; (8006c58 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 8006a68:	fa22 f303 	lsr.w	r3, r2, r3
 8006a6c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a6e:	e01f      	b.n	8006ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006a70:	4b78      	ldr	r3, [pc, #480]	; (8006c54 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a7c:	d106      	bne.n	8006a8c <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 8006a7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a80:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006a84:	d102      	bne.n	8006a8c <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8006a86:	4b75      	ldr	r3, [pc, #468]	; (8006c5c <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8006a88:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a8a:	e011      	b.n	8006ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006a8c:	4b71      	ldr	r3, [pc, #452]	; (8006c54 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a94:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006a98:	d106      	bne.n	8006aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 8006a9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a9c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006aa0:	d102      	bne.n	8006aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8006aa2:	4b6f      	ldr	r3, [pc, #444]	; (8006c60 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8006aa4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006aa6:	e003      	b.n	8006ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8006aa8:	2300      	movs	r3, #0
 8006aaa:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8006aac:	f000 bc31 	b.w	8007312 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8006ab0:	f000 bc2f 	b.w	8007312 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8006ab4:	4b6b      	ldr	r3, [pc, #428]	; (8006c64 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8006ab6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006ab8:	f000 bc2b 	b.w	8007312 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8006abc:	2300      	movs	r3, #0
 8006abe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006ac0:	f000 bc27 	b.w	8007312 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006aca:	f040 8095 	bne.w	8006bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8006ace:	4b61      	ldr	r3, [pc, #388]	; (8006c54 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8006ad0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ad2:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8006ad6:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8006ad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ada:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ade:	d04d      	beq.n	8006b7c <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 8006ae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ae2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ae6:	f200 8084 	bhi.w	8006bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8006aea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aec:	2bc0      	cmp	r3, #192	; 0xc0
 8006aee:	d07d      	beq.n	8006bec <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8006af0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006af2:	2bc0      	cmp	r3, #192	; 0xc0
 8006af4:	d87d      	bhi.n	8006bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8006af6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006af8:	2b80      	cmp	r3, #128	; 0x80
 8006afa:	d02d      	beq.n	8006b58 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 8006afc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006afe:	2b80      	cmp	r3, #128	; 0x80
 8006b00:	d877      	bhi.n	8006bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8006b02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d003      	beq.n	8006b10 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 8006b08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b0a:	2b40      	cmp	r3, #64	; 0x40
 8006b0c:	d012      	beq.n	8006b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 8006b0e:	e070      	b.n	8006bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006b10:	4b50      	ldr	r3, [pc, #320]	; (8006c54 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b18:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006b1c:	d107      	bne.n	8006b2e <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006b1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006b22:	4618      	mov	r0, r3
 8006b24:	f000 fec0 	bl	80078a8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006b28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b2a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006b2c:	e3f1      	b.n	8007312 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8006b2e:	2300      	movs	r3, #0
 8006b30:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006b32:	e3ee      	b.n	8007312 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006b34:	4b47      	ldr	r3, [pc, #284]	; (8006c54 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006b3c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006b40:	d107      	bne.n	8006b52 <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006b42:	f107 0318 	add.w	r3, r7, #24
 8006b46:	4618      	mov	r0, r3
 8006b48:	f000 fc06 	bl	8007358 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006b4c:	69bb      	ldr	r3, [r7, #24]
 8006b4e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006b50:	e3df      	b.n	8007312 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8006b52:	2300      	movs	r3, #0
 8006b54:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006b56:	e3dc      	b.n	8007312 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006b58:	4b3e      	ldr	r3, [pc, #248]	; (8006c54 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006b60:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006b64:	d107      	bne.n	8006b76 <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006b66:	f107 030c 	add.w	r3, r7, #12
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	f000 fd48 	bl	8007600 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006b74:	e3cd      	b.n	8007312 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8006b76:	2300      	movs	r3, #0
 8006b78:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006b7a:	e3ca      	b.n	8007312 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006b7c:	4b35      	ldr	r3, [pc, #212]	; (8006c54 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8006b7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b80:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006b84:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006b86:	4b33      	ldr	r3, [pc, #204]	; (8006c54 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	f003 0304 	and.w	r3, r3, #4
 8006b8e:	2b04      	cmp	r3, #4
 8006b90:	d10c      	bne.n	8006bac <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 8006b92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d109      	bne.n	8006bac <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006b98:	4b2e      	ldr	r3, [pc, #184]	; (8006c54 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	08db      	lsrs	r3, r3, #3
 8006b9e:	f003 0303 	and.w	r3, r3, #3
 8006ba2:	4a2d      	ldr	r2, [pc, #180]	; (8006c58 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 8006ba4:	fa22 f303 	lsr.w	r3, r2, r3
 8006ba8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006baa:	e01e      	b.n	8006bea <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006bac:	4b29      	ldr	r3, [pc, #164]	; (8006c54 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bb4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006bb8:	d106      	bne.n	8006bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 8006bba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bbc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006bc0:	d102      	bne.n	8006bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8006bc2:	4b26      	ldr	r3, [pc, #152]	; (8006c5c <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8006bc4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006bc6:	e010      	b.n	8006bea <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006bc8:	4b22      	ldr	r3, [pc, #136]	; (8006c54 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006bd0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006bd4:	d106      	bne.n	8006be4 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 8006bd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bd8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006bdc:	d102      	bne.n	8006be4 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8006bde:	4b20      	ldr	r3, [pc, #128]	; (8006c60 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8006be0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006be2:	e002      	b.n	8006bea <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8006be4:	2300      	movs	r3, #0
 8006be6:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8006be8:	e393      	b.n	8007312 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8006bea:	e392      	b.n	8007312 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8006bec:	4b1d      	ldr	r3, [pc, #116]	; (8006c64 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8006bee:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006bf0:	e38f      	b.n	8007312 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8006bf2:	2300      	movs	r3, #0
 8006bf4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006bf6:	e38c      	b.n	8007312 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006bfe:	f040 80a7 	bne.w	8006d50 <HAL_RCCEx_GetPeriphCLKFreq+0x3c8>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8006c02:	4b14      	ldr	r3, [pc, #80]	; (8006c54 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8006c04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c06:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8006c0a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8006c0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c0e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006c12:	d05f      	beq.n	8006cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8006c14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c16:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006c1a:	f200 8096 	bhi.w	8006d4a <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8006c1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c20:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006c24:	f000 808e 	beq.w	8006d44 <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
 8006c28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c2a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006c2e:	f200 808c 	bhi.w	8006d4a <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8006c32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c34:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006c38:	d03a      	beq.n	8006cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 8006c3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c3c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006c40:	f200 8083 	bhi.w	8006d4a <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8006c44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d00e      	beq.n	8006c68 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>
 8006c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c4c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006c50:	d01c      	beq.n	8006c8c <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 8006c52:	e07a      	b.n	8006d4a <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8006c54:	58024400 	.word	0x58024400
 8006c58:	03d09000 	.word	0x03d09000
 8006c5c:	003d0900 	.word	0x003d0900
 8006c60:	007a1200 	.word	0x007a1200
 8006c64:	00bb8000 	.word	0x00bb8000
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006c68:	4baa      	ldr	r3, [pc, #680]	; (8006f14 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c70:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006c74:	d107      	bne.n	8006c86 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006c76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	f000 fe14 	bl	80078a8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006c80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c82:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006c84:	e345      	b.n	8007312 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8006c86:	2300      	movs	r3, #0
 8006c88:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006c8a:	e342      	b.n	8007312 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006c8c:	4ba1      	ldr	r3, [pc, #644]	; (8006f14 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006c94:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006c98:	d107      	bne.n	8006caa <HAL_RCCEx_GetPeriphCLKFreq+0x322>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006c9a:	f107 0318 	add.w	r3, r7, #24
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	f000 fb5a 	bl	8007358 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006ca4:	69bb      	ldr	r3, [r7, #24]
 8006ca6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006ca8:	e333      	b.n	8007312 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8006caa:	2300      	movs	r3, #0
 8006cac:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006cae:	e330      	b.n	8007312 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006cb0:	4b98      	ldr	r3, [pc, #608]	; (8006f14 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006cb8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006cbc:	d107      	bne.n	8006cce <HAL_RCCEx_GetPeriphCLKFreq+0x346>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006cbe:	f107 030c 	add.w	r3, r7, #12
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	f000 fc9c 	bl	8007600 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006ccc:	e321      	b.n	8007312 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8006cce:	2300      	movs	r3, #0
 8006cd0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006cd2:	e31e      	b.n	8007312 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006cd4:	4b8f      	ldr	r3, [pc, #572]	; (8006f14 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006cd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006cd8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006cdc:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006cde:	4b8d      	ldr	r3, [pc, #564]	; (8006f14 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	f003 0304 	and.w	r3, r3, #4
 8006ce6:	2b04      	cmp	r3, #4
 8006ce8:	d10c      	bne.n	8006d04 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 8006cea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d109      	bne.n	8006d04 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006cf0:	4b88      	ldr	r3, [pc, #544]	; (8006f14 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	08db      	lsrs	r3, r3, #3
 8006cf6:	f003 0303 	and.w	r3, r3, #3
 8006cfa:	4a87      	ldr	r2, [pc, #540]	; (8006f18 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006cfc:	fa22 f303 	lsr.w	r3, r2, r3
 8006d00:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006d02:	e01e      	b.n	8006d42 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006d04:	4b83      	ldr	r3, [pc, #524]	; (8006f14 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d10:	d106      	bne.n	8006d20 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
 8006d12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d14:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006d18:	d102      	bne.n	8006d20 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8006d1a:	4b80      	ldr	r3, [pc, #512]	; (8006f1c <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8006d1c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006d1e:	e010      	b.n	8006d42 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006d20:	4b7c      	ldr	r3, [pc, #496]	; (8006f14 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d28:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006d2c:	d106      	bne.n	8006d3c <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
 8006d2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d30:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006d34:	d102      	bne.n	8006d3c <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8006d36:	4b7a      	ldr	r3, [pc, #488]	; (8006f20 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8006d38:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006d3a:	e002      	b.n	8006d42 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8006d3c:	2300      	movs	r3, #0
 8006d3e:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8006d40:	e2e7      	b.n	8007312 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8006d42:	e2e6      	b.n	8007312 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8006d44:	4b77      	ldr	r3, [pc, #476]	; (8006f24 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8006d46:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006d48:	e2e3      	b.n	8007312 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006d4e:	e2e0      	b.n	8007312 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d56:	f040 809c 	bne.w	8006e92 <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8006d5a:	4b6e      	ldr	r3, [pc, #440]	; (8006f14 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006d5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d5e:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8006d62:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8006d64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d66:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006d6a:	d054      	beq.n	8006e16 <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 8006d6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d6e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006d72:	f200 808b 	bhi.w	8006e8c <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 8006d76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d78:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006d7c:	f000 8083 	beq.w	8006e86 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 8006d80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d82:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006d86:	f200 8081 	bhi.w	8006e8c <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 8006d8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d8c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006d90:	d02f      	beq.n	8006df2 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 8006d92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d94:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006d98:	d878      	bhi.n	8006e8c <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 8006d9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d004      	beq.n	8006daa <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8006da0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006da2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006da6:	d012      	beq.n	8006dce <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 8006da8:	e070      	b.n	8006e8c <HAL_RCCEx_GetPeriphCLKFreq+0x504>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006daa:	4b5a      	ldr	r3, [pc, #360]	; (8006f14 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006db2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006db6:	d107      	bne.n	8006dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006db8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	f000 fd73 	bl	80078a8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006dc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dc4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006dc6:	e2a4      	b.n	8007312 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8006dc8:	2300      	movs	r3, #0
 8006dca:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006dcc:	e2a1      	b.n	8007312 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006dce:	4b51      	ldr	r3, [pc, #324]	; (8006f14 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006dd6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006dda:	d107      	bne.n	8006dec <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006ddc:	f107 0318 	add.w	r3, r7, #24
 8006de0:	4618      	mov	r0, r3
 8006de2:	f000 fab9 	bl	8007358 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006de6:	69bb      	ldr	r3, [r7, #24]
 8006de8:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 8006dea:	e292      	b.n	8007312 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8006dec:	2300      	movs	r3, #0
 8006dee:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006df0:	e28f      	b.n	8007312 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006df2:	4b48      	ldr	r3, [pc, #288]	; (8006f14 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006dfa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006dfe:	d107      	bne.n	8006e10 <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006e00:	f107 030c 	add.w	r3, r7, #12
 8006e04:	4618      	mov	r0, r3
 8006e06:	f000 fbfb 	bl	8007600 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006e0e:	e280      	b.n	8007312 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8006e10:	2300      	movs	r3, #0
 8006e12:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006e14:	e27d      	b.n	8007312 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006e16:	4b3f      	ldr	r3, [pc, #252]	; (8006f14 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006e18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e1a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006e1e:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006e20:	4b3c      	ldr	r3, [pc, #240]	; (8006f14 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	f003 0304 	and.w	r3, r3, #4
 8006e28:	2b04      	cmp	r3, #4
 8006e2a:	d10c      	bne.n	8006e46 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 8006e2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d109      	bne.n	8006e46 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006e32:	4b38      	ldr	r3, [pc, #224]	; (8006f14 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	08db      	lsrs	r3, r3, #3
 8006e38:	f003 0303 	and.w	r3, r3, #3
 8006e3c:	4a36      	ldr	r2, [pc, #216]	; (8006f18 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006e3e:	fa22 f303 	lsr.w	r3, r2, r3
 8006e42:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e44:	e01e      	b.n	8006e84 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006e46:	4b33      	ldr	r3, [pc, #204]	; (8006f14 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e52:	d106      	bne.n	8006e62 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 8006e54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e56:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006e5a:	d102      	bne.n	8006e62 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8006e5c:	4b2f      	ldr	r3, [pc, #188]	; (8006f1c <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8006e5e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e60:	e010      	b.n	8006e84 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006e62:	4b2c      	ldr	r3, [pc, #176]	; (8006f14 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e6a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006e6e:	d106      	bne.n	8006e7e <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 8006e70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e72:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006e76:	d102      	bne.n	8006e7e <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8006e78:	4b29      	ldr	r3, [pc, #164]	; (8006f20 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8006e7a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e7c:	e002      	b.n	8006e84 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8006e7e:	2300      	movs	r3, #0
 8006e80:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8006e82:	e246      	b.n	8007312 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8006e84:	e245      	b.n	8007312 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8006e86:	4b27      	ldr	r3, [pc, #156]	; (8006f24 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8006e88:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006e8a:	e242      	b.n	8007312 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8006e8c:	2300      	movs	r3, #0
 8006e8e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006e90:	e23f      	b.n	8007312 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e98:	f040 80a8 	bne.w	8006fec <HAL_RCCEx_GetPeriphCLKFreq+0x664>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8006e9c:	4b1d      	ldr	r3, [pc, #116]	; (8006f14 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006e9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ea0:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8006ea4:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8006ea6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ea8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006eac:	d060      	beq.n	8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
 8006eae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eb0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006eb4:	f200 8097 	bhi.w	8006fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8006eb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eba:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006ebe:	f000 808f 	beq.w	8006fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 8006ec2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ec4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006ec8:	f200 808d 	bhi.w	8006fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8006ecc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ece:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ed2:	d03b      	beq.n	8006f4c <HAL_RCCEx_GetPeriphCLKFreq+0x5c4>
 8006ed4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ed6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006eda:	f200 8084 	bhi.w	8006fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8006ede:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d004      	beq.n	8006eee <HAL_RCCEx_GetPeriphCLKFreq+0x566>
 8006ee4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ee6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006eea:	d01d      	beq.n	8006f28 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
 8006eec:	e07b      	b.n	8006fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006eee:	4b09      	ldr	r3, [pc, #36]	; (8006f14 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ef6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006efa:	d107      	bne.n	8006f0c <HAL_RCCEx_GetPeriphCLKFreq+0x584>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006efc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006f00:	4618      	mov	r0, r3
 8006f02:	f000 fcd1 	bl	80078a8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006f06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f08:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006f0a:	e202      	b.n	8007312 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8006f0c:	2300      	movs	r3, #0
 8006f0e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006f10:	e1ff      	b.n	8007312 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8006f12:	bf00      	nop
 8006f14:	58024400 	.word	0x58024400
 8006f18:	03d09000 	.word	0x03d09000
 8006f1c:	003d0900 	.word	0x003d0900
 8006f20:	007a1200 	.word	0x007a1200
 8006f24:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006f28:	4ba3      	ldr	r3, [pc, #652]	; (80071b8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006f30:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006f34:	d107      	bne.n	8006f46 <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006f36:	f107 0318 	add.w	r3, r7, #24
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	f000 fa0c 	bl	8007358 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006f40:	69bb      	ldr	r3, [r7, #24]
 8006f42:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006f44:	e1e5      	b.n	8007312 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8006f46:	2300      	movs	r3, #0
 8006f48:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006f4a:	e1e2      	b.n	8007312 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006f4c:	4b9a      	ldr	r3, [pc, #616]	; (80071b8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006f54:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006f58:	d107      	bne.n	8006f6a <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006f5a:	f107 030c 	add.w	r3, r7, #12
 8006f5e:	4618      	mov	r0, r3
 8006f60:	f000 fb4e 	bl	8007600 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006f68:	e1d3      	b.n	8007312 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8006f6a:	2300      	movs	r3, #0
 8006f6c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006f6e:	e1d0      	b.n	8007312 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006f70:	4b91      	ldr	r3, [pc, #580]	; (80071b8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006f72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f74:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006f78:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006f7a:	4b8f      	ldr	r3, [pc, #572]	; (80071b8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	f003 0304 	and.w	r3, r3, #4
 8006f82:	2b04      	cmp	r3, #4
 8006f84:	d10c      	bne.n	8006fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
 8006f86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d109      	bne.n	8006fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006f8c:	4b8a      	ldr	r3, [pc, #552]	; (80071b8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	08db      	lsrs	r3, r3, #3
 8006f92:	f003 0303 	and.w	r3, r3, #3
 8006f96:	4a89      	ldr	r2, [pc, #548]	; (80071bc <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006f98:	fa22 f303 	lsr.w	r3, r2, r3
 8006f9c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006f9e:	e01e      	b.n	8006fde <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006fa0:	4b85      	ldr	r3, [pc, #532]	; (80071b8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fa8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006fac:	d106      	bne.n	8006fbc <HAL_RCCEx_GetPeriphCLKFreq+0x634>
 8006fae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fb0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006fb4:	d102      	bne.n	8006fbc <HAL_RCCEx_GetPeriphCLKFreq+0x634>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8006fb6:	4b82      	ldr	r3, [pc, #520]	; (80071c0 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8006fb8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006fba:	e010      	b.n	8006fde <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006fbc:	4b7e      	ldr	r3, [pc, #504]	; (80071b8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006fc4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006fc8:	d106      	bne.n	8006fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8006fca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fcc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006fd0:	d102      	bne.n	8006fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8006fd2:	4b7c      	ldr	r3, [pc, #496]	; (80071c4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006fd4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006fd6:	e002      	b.n	8006fde <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8006fd8:	2300      	movs	r3, #0
 8006fda:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8006fdc:	e199      	b.n	8007312 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8006fde:	e198      	b.n	8007312 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8006fe0:	4b79      	ldr	r3, [pc, #484]	; (80071c8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006fe2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006fe4:	e195      	b.n	8007312 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8006fe6:	2300      	movs	r3, #0
 8006fe8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006fea:	e192      	b.n	8007312 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006ff2:	d173      	bne.n	80070dc <HAL_RCCEx_GetPeriphCLKFreq+0x754>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8006ff4:	4b70      	ldr	r3, [pc, #448]	; (80071b8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006ff6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ff8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006ffc:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8006ffe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007000:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007004:	d02f      	beq.n	8007066 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
 8007006:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007008:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800700c:	d863      	bhi.n	80070d6 <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 800700e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007010:	2b00      	cmp	r3, #0
 8007012:	d004      	beq.n	800701e <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 8007014:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007016:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800701a:	d012      	beq.n	8007042 <HAL_RCCEx_GetPeriphCLKFreq+0x6ba>
 800701c:	e05b      	b.n	80070d6 <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800701e:	4b66      	ldr	r3, [pc, #408]	; (80071b8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007026:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800702a:	d107      	bne.n	800703c <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800702c:	f107 0318 	add.w	r3, r7, #24
 8007030:	4618      	mov	r0, r3
 8007032:	f000 f991 	bl	8007358 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007036:	69bb      	ldr	r3, [r7, #24]
 8007038:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800703a:	e16a      	b.n	8007312 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800703c:	2300      	movs	r3, #0
 800703e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007040:	e167      	b.n	8007312 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007042:	4b5d      	ldr	r3, [pc, #372]	; (80071b8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800704a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800704e:	d107      	bne.n	8007060 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007050:	f107 030c 	add.w	r3, r7, #12
 8007054:	4618      	mov	r0, r3
 8007056:	f000 fad3 	bl	8007600 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800705a:	697b      	ldr	r3, [r7, #20]
 800705c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800705e:	e158      	b.n	8007312 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8007060:	2300      	movs	r3, #0
 8007062:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007064:	e155      	b.n	8007312 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007066:	4b54      	ldr	r3, [pc, #336]	; (80071b8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007068:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800706a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800706e:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007070:	4b51      	ldr	r3, [pc, #324]	; (80071b8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	f003 0304 	and.w	r3, r3, #4
 8007078:	2b04      	cmp	r3, #4
 800707a:	d10c      	bne.n	8007096 <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
 800707c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800707e:	2b00      	cmp	r3, #0
 8007080:	d109      	bne.n	8007096 <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007082:	4b4d      	ldr	r3, [pc, #308]	; (80071b8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	08db      	lsrs	r3, r3, #3
 8007088:	f003 0303 	and.w	r3, r3, #3
 800708c:	4a4b      	ldr	r2, [pc, #300]	; (80071bc <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800708e:	fa22 f303 	lsr.w	r3, r2, r3
 8007092:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007094:	e01e      	b.n	80070d4 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007096:	4b48      	ldr	r3, [pc, #288]	; (80071b8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800709e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80070a2:	d106      	bne.n	80070b2 <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
 80070a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070a6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80070aa:	d102      	bne.n	80070b2 <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80070ac:	4b44      	ldr	r3, [pc, #272]	; (80071c0 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 80070ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80070b0:	e010      	b.n	80070d4 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80070b2:	4b41      	ldr	r3, [pc, #260]	; (80071b8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070ba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80070be:	d106      	bne.n	80070ce <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 80070c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80070c6:	d102      	bne.n	80070ce <HAL_RCCEx_GetPeriphCLKFreq+0x746>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80070c8:	4b3e      	ldr	r3, [pc, #248]	; (80071c4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80070ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80070cc:	e002      	b.n	80070d4 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80070ce:	2300      	movs	r3, #0
 80070d0:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80070d2:	e11e      	b.n	8007312 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80070d4:	e11d      	b.n	8007312 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 80070d6:	2300      	movs	r3, #0
 80070d8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80070da:	e11a      	b.n	8007312 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80070e2:	d133      	bne.n	800714c <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 80070e4:	4b34      	ldr	r3, [pc, #208]	; (80071b8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80070e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80070e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80070ec:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80070ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d004      	beq.n	80070fe <HAL_RCCEx_GetPeriphCLKFreq+0x776>
 80070f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80070fa:	d012      	beq.n	8007122 <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
 80070fc:	e023      	b.n	8007146 <HAL_RCCEx_GetPeriphCLKFreq+0x7be>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80070fe:	4b2e      	ldr	r3, [pc, #184]	; (80071b8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007106:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800710a:	d107      	bne.n	800711c <HAL_RCCEx_GetPeriphCLKFreq+0x794>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800710c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007110:	4618      	mov	r0, r3
 8007112:	f000 fbc9 	bl	80078a8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007116:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007118:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800711a:	e0fa      	b.n	8007312 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800711c:	2300      	movs	r3, #0
 800711e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007120:	e0f7      	b.n	8007312 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007122:	4b25      	ldr	r3, [pc, #148]	; (80071b8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800712a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800712e:	d107      	bne.n	8007140 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007130:	f107 0318 	add.w	r3, r7, #24
 8007134:	4618      	mov	r0, r3
 8007136:	f000 f90f 	bl	8007358 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800713a:	6a3b      	ldr	r3, [r7, #32]
 800713c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800713e:	e0e8      	b.n	8007312 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007140:	2300      	movs	r3, #0
 8007142:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007144:	e0e5      	b.n	8007312 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8007146:	2300      	movs	r3, #0
 8007148:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800714a:	e0e2      	b.n	8007312 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007152:	f040 808f 	bne.w	8007274 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8007156:	4b18      	ldr	r3, [pc, #96]	; (80071b8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007158:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800715a:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800715e:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007160:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007162:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007166:	d075      	beq.n	8007254 <HAL_RCCEx_GetPeriphCLKFreq+0x8cc>
 8007168:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800716a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800716e:	d87e      	bhi.n	800726e <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8007170:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007172:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007176:	d060      	beq.n	800723a <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 8007178:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800717a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800717e:	d876      	bhi.n	800726e <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8007180:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007182:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007186:	d045      	beq.n	8007214 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>
 8007188:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800718a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800718e:	d86e      	bhi.n	800726e <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8007190:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007192:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007196:	d02b      	beq.n	80071f0 <HAL_RCCEx_GetPeriphCLKFreq+0x868>
 8007198:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800719a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800719e:	d866      	bhi.n	800726e <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 80071a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d004      	beq.n	80071b0 <HAL_RCCEx_GetPeriphCLKFreq+0x828>
 80071a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071a8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80071ac:	d00e      	beq.n	80071cc <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 80071ae:	e05e      	b.n	800726e <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80071b0:	f000 f8bc 	bl	800732c <HAL_RCCEx_GetD3PCLK1Freq>
 80071b4:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 80071b6:	e0ac      	b.n	8007312 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80071b8:	58024400 	.word	0x58024400
 80071bc:	03d09000 	.word	0x03d09000
 80071c0:	003d0900 	.word	0x003d0900
 80071c4:	007a1200 	.word	0x007a1200
 80071c8:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80071cc:	4b53      	ldr	r3, [pc, #332]	; (800731c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80071d4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80071d8:	d107      	bne.n	80071ea <HAL_RCCEx_GetPeriphCLKFreq+0x862>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80071da:	f107 0318 	add.w	r3, r7, #24
 80071de:	4618      	mov	r0, r3
 80071e0:	f000 f8ba 	bl	8007358 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80071e4:	69fb      	ldr	r3, [r7, #28]
 80071e6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80071e8:	e093      	b.n	8007312 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80071ea:	2300      	movs	r3, #0
 80071ec:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80071ee:	e090      	b.n	8007312 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80071f0:	4b4a      	ldr	r3, [pc, #296]	; (800731c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80071f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80071fc:	d107      	bne.n	800720e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80071fe:	f107 030c 	add.w	r3, r7, #12
 8007202:	4618      	mov	r0, r3
 8007204:	f000 f9fc 	bl	8007600 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007208:	693b      	ldr	r3, [r7, #16]
 800720a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800720c:	e081      	b.n	8007312 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800720e:	2300      	movs	r3, #0
 8007210:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007212:	e07e      	b.n	8007312 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007214:	4b41      	ldr	r3, [pc, #260]	; (800731c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	f003 0304 	and.w	r3, r3, #4
 800721c:	2b04      	cmp	r3, #4
 800721e:	d109      	bne.n	8007234 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007220:	4b3e      	ldr	r3, [pc, #248]	; (800731c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	08db      	lsrs	r3, r3, #3
 8007226:	f003 0303 	and.w	r3, r3, #3
 800722a:	4a3d      	ldr	r2, [pc, #244]	; (8007320 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800722c:	fa22 f303 	lsr.w	r3, r2, r3
 8007230:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007232:	e06e      	b.n	8007312 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007234:	2300      	movs	r3, #0
 8007236:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007238:	e06b      	b.n	8007312 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800723a:	4b38      	ldr	r3, [pc, #224]	; (800731c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007242:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007246:	d102      	bne.n	800724e <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
         {
          frequency = CSI_VALUE;
 8007248:	4b36      	ldr	r3, [pc, #216]	; (8007324 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800724a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800724c:	e061      	b.n	8007312 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800724e:	2300      	movs	r3, #0
 8007250:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007252:	e05e      	b.n	8007312 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007254:	4b31      	ldr	r3, [pc, #196]	; (800731c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800725c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007260:	d102      	bne.n	8007268 <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>
         {
          frequency = HSE_VALUE;
 8007262:	4b31      	ldr	r3, [pc, #196]	; (8007328 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8007264:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007266:	e054      	b.n	8007312 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007268:	2300      	movs	r3, #0
 800726a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800726c:	e051      	b.n	8007312 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 800726e:	2300      	movs	r3, #0
 8007270:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007272:	e04e      	b.n	8007312 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800727a:	d148      	bne.n	800730e <HAL_RCCEx_GetPeriphCLKFreq+0x986>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 800727c:	4b27      	ldr	r3, [pc, #156]	; (800731c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800727e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007280:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007284:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007286:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007288:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800728c:	d02a      	beq.n	80072e4 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800728e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007290:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007294:	d838      	bhi.n	8007308 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 8007296:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007298:	2b00      	cmp	r3, #0
 800729a:	d004      	beq.n	80072a6 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 800729c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800729e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80072a2:	d00d      	beq.n	80072c0 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 80072a4:	e030      	b.n	8007308 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80072a6:	4b1d      	ldr	r3, [pc, #116]	; (800731c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80072ae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80072b2:	d102      	bne.n	80072ba <HAL_RCCEx_GetPeriphCLKFreq+0x932>
         {
          frequency = HSE_VALUE;
 80072b4:	4b1c      	ldr	r3, [pc, #112]	; (8007328 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 80072b6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80072b8:	e02b      	b.n	8007312 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80072ba:	2300      	movs	r3, #0
 80072bc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80072be:	e028      	b.n	8007312 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80072c0:	4b16      	ldr	r3, [pc, #88]	; (800731c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80072c8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80072cc:	d107      	bne.n	80072de <HAL_RCCEx_GetPeriphCLKFreq+0x956>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80072ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80072d2:	4618      	mov	r0, r3
 80072d4:	f000 fae8 	bl	80078a8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80072d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072da:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80072dc:	e019      	b.n	8007312 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80072de:	2300      	movs	r3, #0
 80072e0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80072e2:	e016      	b.n	8007312 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80072e4:	4b0d      	ldr	r3, [pc, #52]	; (800731c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80072ec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80072f0:	d107      	bne.n	8007302 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80072f2:	f107 0318 	add.w	r3, r7, #24
 80072f6:	4618      	mov	r0, r3
 80072f8:	f000 f82e 	bl	8007358 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80072fc:	69fb      	ldr	r3, [r7, #28]
 80072fe:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007300:	e007      	b.n	8007312 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007302:	2300      	movs	r3, #0
 8007304:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007306:	e004      	b.n	8007312 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8007308:	2300      	movs	r3, #0
 800730a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800730c:	e001      	b.n	8007312 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else
    {
      frequency = 0;
 800730e:	2300      	movs	r3, #0
 8007310:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8007312:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007314:	4618      	mov	r0, r3
 8007316:	3740      	adds	r7, #64	; 0x40
 8007318:	46bd      	mov	sp, r7
 800731a:	bd80      	pop	{r7, pc}
 800731c:	58024400 	.word	0x58024400
 8007320:	03d09000 	.word	0x03d09000
 8007324:	003d0900 	.word	0x003d0900
 8007328:	007a1200 	.word	0x007a1200

0800732c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800732c:	b580      	push	{r7, lr}
 800732e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007330:	f7fe fb8e 	bl	8005a50 <HAL_RCC_GetHCLKFreq>
 8007334:	4602      	mov	r2, r0
 8007336:	4b06      	ldr	r3, [pc, #24]	; (8007350 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007338:	6a1b      	ldr	r3, [r3, #32]
 800733a:	091b      	lsrs	r3, r3, #4
 800733c:	f003 0307 	and.w	r3, r3, #7
 8007340:	4904      	ldr	r1, [pc, #16]	; (8007354 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8007342:	5ccb      	ldrb	r3, [r1, r3]
 8007344:	f003 031f 	and.w	r3, r3, #31
 8007348:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800734c:	4618      	mov	r0, r3
 800734e:	bd80      	pop	{r7, pc}
 8007350:	58024400 	.word	0x58024400
 8007354:	0800cc60 	.word	0x0800cc60

08007358 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8007358:	b480      	push	{r7}
 800735a:	b089      	sub	sp, #36	; 0x24
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007360:	4ba1      	ldr	r3, [pc, #644]	; (80075e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007362:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007364:	f003 0303 	and.w	r3, r3, #3
 8007368:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800736a:	4b9f      	ldr	r3, [pc, #636]	; (80075e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800736c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800736e:	0b1b      	lsrs	r3, r3, #12
 8007370:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007374:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007376:	4b9c      	ldr	r3, [pc, #624]	; (80075e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007378:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800737a:	091b      	lsrs	r3, r3, #4
 800737c:	f003 0301 	and.w	r3, r3, #1
 8007380:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8007382:	4b99      	ldr	r3, [pc, #612]	; (80075e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007384:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007386:	08db      	lsrs	r3, r3, #3
 8007388:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800738c:	693a      	ldr	r2, [r7, #16]
 800738e:	fb02 f303 	mul.w	r3, r2, r3
 8007392:	ee07 3a90 	vmov	s15, r3
 8007396:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800739a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800739e:	697b      	ldr	r3, [r7, #20]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	f000 8111 	beq.w	80075c8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80073a6:	69bb      	ldr	r3, [r7, #24]
 80073a8:	2b02      	cmp	r3, #2
 80073aa:	f000 8083 	beq.w	80074b4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80073ae:	69bb      	ldr	r3, [r7, #24]
 80073b0:	2b02      	cmp	r3, #2
 80073b2:	f200 80a1 	bhi.w	80074f8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80073b6:	69bb      	ldr	r3, [r7, #24]
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d003      	beq.n	80073c4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80073bc:	69bb      	ldr	r3, [r7, #24]
 80073be:	2b01      	cmp	r3, #1
 80073c0:	d056      	beq.n	8007470 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80073c2:	e099      	b.n	80074f8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80073c4:	4b88      	ldr	r3, [pc, #544]	; (80075e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	f003 0320 	and.w	r3, r3, #32
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d02d      	beq.n	800742c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80073d0:	4b85      	ldr	r3, [pc, #532]	; (80075e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	08db      	lsrs	r3, r3, #3
 80073d6:	f003 0303 	and.w	r3, r3, #3
 80073da:	4a84      	ldr	r2, [pc, #528]	; (80075ec <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80073dc:	fa22 f303 	lsr.w	r3, r2, r3
 80073e0:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80073e2:	68bb      	ldr	r3, [r7, #8]
 80073e4:	ee07 3a90 	vmov	s15, r3
 80073e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80073ec:	697b      	ldr	r3, [r7, #20]
 80073ee:	ee07 3a90 	vmov	s15, r3
 80073f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80073fa:	4b7b      	ldr	r3, [pc, #492]	; (80075e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80073fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007402:	ee07 3a90 	vmov	s15, r3
 8007406:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800740a:	ed97 6a03 	vldr	s12, [r7, #12]
 800740e:	eddf 5a78 	vldr	s11, [pc, #480]	; 80075f0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007412:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007416:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800741a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800741e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007422:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007426:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800742a:	e087      	b.n	800753c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800742c:	697b      	ldr	r3, [r7, #20]
 800742e:	ee07 3a90 	vmov	s15, r3
 8007432:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007436:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80075f4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800743a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800743e:	4b6a      	ldr	r3, [pc, #424]	; (80075e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007440:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007442:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007446:	ee07 3a90 	vmov	s15, r3
 800744a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800744e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007452:	eddf 5a67 	vldr	s11, [pc, #412]	; 80075f0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007456:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800745a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800745e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007462:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007466:	ee67 7a27 	vmul.f32	s15, s14, s15
 800746a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800746e:	e065      	b.n	800753c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007470:	697b      	ldr	r3, [r7, #20]
 8007472:	ee07 3a90 	vmov	s15, r3
 8007476:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800747a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80075f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800747e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007482:	4b59      	ldr	r3, [pc, #356]	; (80075e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007484:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007486:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800748a:	ee07 3a90 	vmov	s15, r3
 800748e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007492:	ed97 6a03 	vldr	s12, [r7, #12]
 8007496:	eddf 5a56 	vldr	s11, [pc, #344]	; 80075f0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800749a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800749e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80074a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80074aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074ae:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80074b2:	e043      	b.n	800753c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80074b4:	697b      	ldr	r3, [r7, #20]
 80074b6:	ee07 3a90 	vmov	s15, r3
 80074ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074be:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80075fc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80074c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80074c6:	4b48      	ldr	r3, [pc, #288]	; (80075e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80074c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074ce:	ee07 3a90 	vmov	s15, r3
 80074d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80074da:	eddf 5a45 	vldr	s11, [pc, #276]	; 80075f0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80074de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80074e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80074ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80074ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074f2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80074f6:	e021      	b.n	800753c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80074f8:	697b      	ldr	r3, [r7, #20]
 80074fa:	ee07 3a90 	vmov	s15, r3
 80074fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007502:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80075f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007506:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800750a:	4b37      	ldr	r3, [pc, #220]	; (80075e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800750c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800750e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007512:	ee07 3a90 	vmov	s15, r3
 8007516:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800751a:	ed97 6a03 	vldr	s12, [r7, #12]
 800751e:	eddf 5a34 	vldr	s11, [pc, #208]	; 80075f0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007522:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007526:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800752a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800752e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007532:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007536:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800753a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800753c:	4b2a      	ldr	r3, [pc, #168]	; (80075e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800753e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007540:	0a5b      	lsrs	r3, r3, #9
 8007542:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007546:	ee07 3a90 	vmov	s15, r3
 800754a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800754e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007552:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007556:	edd7 6a07 	vldr	s13, [r7, #28]
 800755a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800755e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007562:	ee17 2a90 	vmov	r2, s15
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800756a:	4b1f      	ldr	r3, [pc, #124]	; (80075e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800756c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800756e:	0c1b      	lsrs	r3, r3, #16
 8007570:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007574:	ee07 3a90 	vmov	s15, r3
 8007578:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800757c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007580:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007584:	edd7 6a07 	vldr	s13, [r7, #28]
 8007588:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800758c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007590:	ee17 2a90 	vmov	r2, s15
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8007598:	4b13      	ldr	r3, [pc, #76]	; (80075e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800759a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800759c:	0e1b      	lsrs	r3, r3, #24
 800759e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80075a2:	ee07 3a90 	vmov	s15, r3
 80075a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075aa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80075ae:	ee37 7a87 	vadd.f32	s14, s15, s14
 80075b2:	edd7 6a07 	vldr	s13, [r7, #28]
 80075b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80075ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80075be:	ee17 2a90 	vmov	r2, s15
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80075c6:	e008      	b.n	80075da <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	2200      	movs	r2, #0
 80075cc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	2200      	movs	r2, #0
 80075d2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	2200      	movs	r2, #0
 80075d8:	609a      	str	r2, [r3, #8]
}
 80075da:	bf00      	nop
 80075dc:	3724      	adds	r7, #36	; 0x24
 80075de:	46bd      	mov	sp, r7
 80075e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e4:	4770      	bx	lr
 80075e6:	bf00      	nop
 80075e8:	58024400 	.word	0x58024400
 80075ec:	03d09000 	.word	0x03d09000
 80075f0:	46000000 	.word	0x46000000
 80075f4:	4c742400 	.word	0x4c742400
 80075f8:	4a742400 	.word	0x4a742400
 80075fc:	4af42400 	.word	0x4af42400

08007600 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8007600:	b480      	push	{r7}
 8007602:	b089      	sub	sp, #36	; 0x24
 8007604:	af00      	add	r7, sp, #0
 8007606:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007608:	4ba1      	ldr	r3, [pc, #644]	; (8007890 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800760a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800760c:	f003 0303 	and.w	r3, r3, #3
 8007610:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8007612:	4b9f      	ldr	r3, [pc, #636]	; (8007890 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007614:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007616:	0d1b      	lsrs	r3, r3, #20
 8007618:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800761c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800761e:	4b9c      	ldr	r3, [pc, #624]	; (8007890 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007620:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007622:	0a1b      	lsrs	r3, r3, #8
 8007624:	f003 0301 	and.w	r3, r3, #1
 8007628:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800762a:	4b99      	ldr	r3, [pc, #612]	; (8007890 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800762c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800762e:	08db      	lsrs	r3, r3, #3
 8007630:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007634:	693a      	ldr	r2, [r7, #16]
 8007636:	fb02 f303 	mul.w	r3, r2, r3
 800763a:	ee07 3a90 	vmov	s15, r3
 800763e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007642:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007646:	697b      	ldr	r3, [r7, #20]
 8007648:	2b00      	cmp	r3, #0
 800764a:	f000 8111 	beq.w	8007870 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800764e:	69bb      	ldr	r3, [r7, #24]
 8007650:	2b02      	cmp	r3, #2
 8007652:	f000 8083 	beq.w	800775c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8007656:	69bb      	ldr	r3, [r7, #24]
 8007658:	2b02      	cmp	r3, #2
 800765a:	f200 80a1 	bhi.w	80077a0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800765e:	69bb      	ldr	r3, [r7, #24]
 8007660:	2b00      	cmp	r3, #0
 8007662:	d003      	beq.n	800766c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007664:	69bb      	ldr	r3, [r7, #24]
 8007666:	2b01      	cmp	r3, #1
 8007668:	d056      	beq.n	8007718 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800766a:	e099      	b.n	80077a0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800766c:	4b88      	ldr	r3, [pc, #544]	; (8007890 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	f003 0320 	and.w	r3, r3, #32
 8007674:	2b00      	cmp	r3, #0
 8007676:	d02d      	beq.n	80076d4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007678:	4b85      	ldr	r3, [pc, #532]	; (8007890 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	08db      	lsrs	r3, r3, #3
 800767e:	f003 0303 	and.w	r3, r3, #3
 8007682:	4a84      	ldr	r2, [pc, #528]	; (8007894 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007684:	fa22 f303 	lsr.w	r3, r2, r3
 8007688:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800768a:	68bb      	ldr	r3, [r7, #8]
 800768c:	ee07 3a90 	vmov	s15, r3
 8007690:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007694:	697b      	ldr	r3, [r7, #20]
 8007696:	ee07 3a90 	vmov	s15, r3
 800769a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800769e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80076a2:	4b7b      	ldr	r3, [pc, #492]	; (8007890 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80076a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076aa:	ee07 3a90 	vmov	s15, r3
 80076ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80076b6:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007898 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80076ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80076be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80076c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80076c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80076ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076ce:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80076d2:	e087      	b.n	80077e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80076d4:	697b      	ldr	r3, [r7, #20]
 80076d6:	ee07 3a90 	vmov	s15, r3
 80076da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076de:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800789c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80076e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80076e6:	4b6a      	ldr	r3, [pc, #424]	; (8007890 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80076e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076ee:	ee07 3a90 	vmov	s15, r3
 80076f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80076fa:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007898 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80076fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007702:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007706:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800770a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800770e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007712:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007716:	e065      	b.n	80077e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007718:	697b      	ldr	r3, [r7, #20]
 800771a:	ee07 3a90 	vmov	s15, r3
 800771e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007722:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80078a0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007726:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800772a:	4b59      	ldr	r3, [pc, #356]	; (8007890 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800772c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800772e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007732:	ee07 3a90 	vmov	s15, r3
 8007736:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800773a:	ed97 6a03 	vldr	s12, [r7, #12]
 800773e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007898 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007742:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007746:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800774a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800774e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007752:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007756:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800775a:	e043      	b.n	80077e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800775c:	697b      	ldr	r3, [r7, #20]
 800775e:	ee07 3a90 	vmov	s15, r3
 8007762:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007766:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80078a4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800776a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800776e:	4b48      	ldr	r3, [pc, #288]	; (8007890 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007772:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007776:	ee07 3a90 	vmov	s15, r3
 800777a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800777e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007782:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007898 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007786:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800778a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800778e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007792:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007796:	ee67 7a27 	vmul.f32	s15, s14, s15
 800779a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800779e:	e021      	b.n	80077e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80077a0:	697b      	ldr	r3, [r7, #20]
 80077a2:	ee07 3a90 	vmov	s15, r3
 80077a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077aa:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80078a0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80077ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80077b2:	4b37      	ldr	r3, [pc, #220]	; (8007890 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80077b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077ba:	ee07 3a90 	vmov	s15, r3
 80077be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80077c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80077c6:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007898 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80077ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80077ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80077d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80077d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80077da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80077de:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80077e2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80077e4:	4b2a      	ldr	r3, [pc, #168]	; (8007890 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80077e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077e8:	0a5b      	lsrs	r3, r3, #9
 80077ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80077ee:	ee07 3a90 	vmov	s15, r3
 80077f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80077fa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80077fe:	edd7 6a07 	vldr	s13, [r7, #28]
 8007802:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007806:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800780a:	ee17 2a90 	vmov	r2, s15
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8007812:	4b1f      	ldr	r3, [pc, #124]	; (8007890 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007816:	0c1b      	lsrs	r3, r3, #16
 8007818:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800781c:	ee07 3a90 	vmov	s15, r3
 8007820:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007824:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007828:	ee37 7a87 	vadd.f32	s14, s15, s14
 800782c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007830:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007834:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007838:	ee17 2a90 	vmov	r2, s15
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8007840:	4b13      	ldr	r3, [pc, #76]	; (8007890 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007844:	0e1b      	lsrs	r3, r3, #24
 8007846:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800784a:	ee07 3a90 	vmov	s15, r3
 800784e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007852:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007856:	ee37 7a87 	vadd.f32	s14, s15, s14
 800785a:	edd7 6a07 	vldr	s13, [r7, #28]
 800785e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007862:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007866:	ee17 2a90 	vmov	r2, s15
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800786e:	e008      	b.n	8007882 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	2200      	movs	r2, #0
 8007874:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	2200      	movs	r2, #0
 800787a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	2200      	movs	r2, #0
 8007880:	609a      	str	r2, [r3, #8]
}
 8007882:	bf00      	nop
 8007884:	3724      	adds	r7, #36	; 0x24
 8007886:	46bd      	mov	sp, r7
 8007888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788c:	4770      	bx	lr
 800788e:	bf00      	nop
 8007890:	58024400 	.word	0x58024400
 8007894:	03d09000 	.word	0x03d09000
 8007898:	46000000 	.word	0x46000000
 800789c:	4c742400 	.word	0x4c742400
 80078a0:	4a742400 	.word	0x4a742400
 80078a4:	4af42400 	.word	0x4af42400

080078a8 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 80078a8:	b480      	push	{r7}
 80078aa:	b089      	sub	sp, #36	; 0x24
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80078b0:	4ba0      	ldr	r3, [pc, #640]	; (8007b34 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80078b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078b4:	f003 0303 	and.w	r3, r3, #3
 80078b8:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 80078ba:	4b9e      	ldr	r3, [pc, #632]	; (8007b34 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80078bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078be:	091b      	lsrs	r3, r3, #4
 80078c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80078c4:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80078c6:	4b9b      	ldr	r3, [pc, #620]	; (8007b34 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80078c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078ca:	f003 0301 	and.w	r3, r3, #1
 80078ce:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80078d0:	4b98      	ldr	r3, [pc, #608]	; (8007b34 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80078d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078d4:	08db      	lsrs	r3, r3, #3
 80078d6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80078da:	693a      	ldr	r2, [r7, #16]
 80078dc:	fb02 f303 	mul.w	r3, r2, r3
 80078e0:	ee07 3a90 	vmov	s15, r3
 80078e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078e8:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 80078ec:	697b      	ldr	r3, [r7, #20]
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	f000 8111 	beq.w	8007b16 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 80078f4:	69bb      	ldr	r3, [r7, #24]
 80078f6:	2b02      	cmp	r3, #2
 80078f8:	f000 8083 	beq.w	8007a02 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 80078fc:	69bb      	ldr	r3, [r7, #24]
 80078fe:	2b02      	cmp	r3, #2
 8007900:	f200 80a1 	bhi.w	8007a46 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8007904:	69bb      	ldr	r3, [r7, #24]
 8007906:	2b00      	cmp	r3, #0
 8007908:	d003      	beq.n	8007912 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800790a:	69bb      	ldr	r3, [r7, #24]
 800790c:	2b01      	cmp	r3, #1
 800790e:	d056      	beq.n	80079be <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8007910:	e099      	b.n	8007a46 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007912:	4b88      	ldr	r3, [pc, #544]	; (8007b34 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	f003 0320 	and.w	r3, r3, #32
 800791a:	2b00      	cmp	r3, #0
 800791c:	d02d      	beq.n	800797a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800791e:	4b85      	ldr	r3, [pc, #532]	; (8007b34 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	08db      	lsrs	r3, r3, #3
 8007924:	f003 0303 	and.w	r3, r3, #3
 8007928:	4a83      	ldr	r2, [pc, #524]	; (8007b38 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800792a:	fa22 f303 	lsr.w	r3, r2, r3
 800792e:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007930:	68bb      	ldr	r3, [r7, #8]
 8007932:	ee07 3a90 	vmov	s15, r3
 8007936:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800793a:	697b      	ldr	r3, [r7, #20]
 800793c:	ee07 3a90 	vmov	s15, r3
 8007940:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007944:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007948:	4b7a      	ldr	r3, [pc, #488]	; (8007b34 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800794a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800794c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007950:	ee07 3a90 	vmov	s15, r3
 8007954:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007958:	ed97 6a03 	vldr	s12, [r7, #12]
 800795c:	eddf 5a77 	vldr	s11, [pc, #476]	; 8007b3c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007960:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007964:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007968:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800796c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007970:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007974:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007978:	e087      	b.n	8007a8a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800797a:	697b      	ldr	r3, [r7, #20]
 800797c:	ee07 3a90 	vmov	s15, r3
 8007980:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007984:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8007b40 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8007988:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800798c:	4b69      	ldr	r3, [pc, #420]	; (8007b34 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800798e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007990:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007994:	ee07 3a90 	vmov	s15, r3
 8007998:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800799c:	ed97 6a03 	vldr	s12, [r7, #12]
 80079a0:	eddf 5a66 	vldr	s11, [pc, #408]	; 8007b3c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80079a4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80079a8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80079ac:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80079b0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80079b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80079b8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80079bc:	e065      	b.n	8007a8a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80079be:	697b      	ldr	r3, [r7, #20]
 80079c0:	ee07 3a90 	vmov	s15, r3
 80079c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079c8:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8007b44 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 80079cc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80079d0:	4b58      	ldr	r3, [pc, #352]	; (8007b34 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80079d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079d8:	ee07 3a90 	vmov	s15, r3
 80079dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80079e0:	ed97 6a03 	vldr	s12, [r7, #12]
 80079e4:	eddf 5a55 	vldr	s11, [pc, #340]	; 8007b3c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80079e8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80079ec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80079f0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80079f4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80079f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80079fc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007a00:	e043      	b.n	8007a8a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007a02:	697b      	ldr	r3, [r7, #20]
 8007a04:	ee07 3a90 	vmov	s15, r3
 8007a08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a0c:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8007b48 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8007a10:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a14:	4b47      	ldr	r3, [pc, #284]	; (8007b34 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007a16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a1c:	ee07 3a90 	vmov	s15, r3
 8007a20:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a24:	ed97 6a03 	vldr	s12, [r7, #12]
 8007a28:	eddf 5a44 	vldr	s11, [pc, #272]	; 8007b3c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007a2c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a30:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a34:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007a38:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a40:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007a44:	e021      	b.n	8007a8a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007a46:	697b      	ldr	r3, [r7, #20]
 8007a48:	ee07 3a90 	vmov	s15, r3
 8007a4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a50:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8007b40 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8007a54:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a58:	4b36      	ldr	r3, [pc, #216]	; (8007b34 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007a5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a60:	ee07 3a90 	vmov	s15, r3
 8007a64:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a68:	ed97 6a03 	vldr	s12, [r7, #12]
 8007a6c:	eddf 5a33 	vldr	s11, [pc, #204]	; 8007b3c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007a70:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a74:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a78:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007a7c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a84:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007a88:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8007a8a:	4b2a      	ldr	r3, [pc, #168]	; (8007b34 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a8e:	0a5b      	lsrs	r3, r3, #9
 8007a90:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a94:	ee07 3a90 	vmov	s15, r3
 8007a98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a9c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007aa0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007aa4:	edd7 6a07 	vldr	s13, [r7, #28]
 8007aa8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007aac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007ab0:	ee17 2a90 	vmov	r2, s15
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8007ab8:	4b1e      	ldr	r3, [pc, #120]	; (8007b34 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007aba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007abc:	0c1b      	lsrs	r3, r3, #16
 8007abe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007ac2:	ee07 3a90 	vmov	s15, r3
 8007ac6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007aca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007ace:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007ad2:	edd7 6a07 	vldr	s13, [r7, #28]
 8007ad6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007ada:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007ade:	ee17 2a90 	vmov	r2, s15
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8007ae6:	4b13      	ldr	r3, [pc, #76]	; (8007b34 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007aea:	0e1b      	lsrs	r3, r3, #24
 8007aec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007af0:	ee07 3a90 	vmov	s15, r3
 8007af4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007af8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007afc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007b00:	edd7 6a07 	vldr	s13, [r7, #28]
 8007b04:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007b08:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007b0c:	ee17 2a90 	vmov	r2, s15
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8007b14:	e008      	b.n	8007b28 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	2200      	movs	r2, #0
 8007b1a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	2200      	movs	r2, #0
 8007b20:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	2200      	movs	r2, #0
 8007b26:	609a      	str	r2, [r3, #8]
}
 8007b28:	bf00      	nop
 8007b2a:	3724      	adds	r7, #36	; 0x24
 8007b2c:	46bd      	mov	sp, r7
 8007b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b32:	4770      	bx	lr
 8007b34:	58024400 	.word	0x58024400
 8007b38:	03d09000 	.word	0x03d09000
 8007b3c:	46000000 	.word	0x46000000
 8007b40:	4c742400 	.word	0x4c742400
 8007b44:	4a742400 	.word	0x4a742400
 8007b48:	4af42400 	.word	0x4af42400

08007b4c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007b4c:	b580      	push	{r7, lr}
 8007b4e:	b084      	sub	sp, #16
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	6078      	str	r0, [r7, #4]
 8007b54:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007b56:	2300      	movs	r3, #0
 8007b58:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007b5a:	4b53      	ldr	r3, [pc, #332]	; (8007ca8 <RCCEx_PLL2_Config+0x15c>)
 8007b5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b5e:	f003 0303 	and.w	r3, r3, #3
 8007b62:	2b03      	cmp	r3, #3
 8007b64:	d101      	bne.n	8007b6a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8007b66:	2301      	movs	r3, #1
 8007b68:	e099      	b.n	8007c9e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007b6a:	4b4f      	ldr	r3, [pc, #316]	; (8007ca8 <RCCEx_PLL2_Config+0x15c>)
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	4a4e      	ldr	r2, [pc, #312]	; (8007ca8 <RCCEx_PLL2_Config+0x15c>)
 8007b70:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007b74:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007b76:	f7f9 fd9b 	bl	80016b0 <HAL_GetTick>
 8007b7a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007b7c:	e008      	b.n	8007b90 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007b7e:	f7f9 fd97 	bl	80016b0 <HAL_GetTick>
 8007b82:	4602      	mov	r2, r0
 8007b84:	68bb      	ldr	r3, [r7, #8]
 8007b86:	1ad3      	subs	r3, r2, r3
 8007b88:	2b02      	cmp	r3, #2
 8007b8a:	d901      	bls.n	8007b90 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007b8c:	2303      	movs	r3, #3
 8007b8e:	e086      	b.n	8007c9e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007b90:	4b45      	ldr	r3, [pc, #276]	; (8007ca8 <RCCEx_PLL2_Config+0x15c>)
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d1f0      	bne.n	8007b7e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007b9c:	4b42      	ldr	r3, [pc, #264]	; (8007ca8 <RCCEx_PLL2_Config+0x15c>)
 8007b9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ba0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	031b      	lsls	r3, r3, #12
 8007baa:	493f      	ldr	r1, [pc, #252]	; (8007ca8 <RCCEx_PLL2_Config+0x15c>)
 8007bac:	4313      	orrs	r3, r2
 8007bae:	628b      	str	r3, [r1, #40]	; 0x28
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	685b      	ldr	r3, [r3, #4]
 8007bb4:	3b01      	subs	r3, #1
 8007bb6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	689b      	ldr	r3, [r3, #8]
 8007bbe:	3b01      	subs	r3, #1
 8007bc0:	025b      	lsls	r3, r3, #9
 8007bc2:	b29b      	uxth	r3, r3
 8007bc4:	431a      	orrs	r2, r3
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	68db      	ldr	r3, [r3, #12]
 8007bca:	3b01      	subs	r3, #1
 8007bcc:	041b      	lsls	r3, r3, #16
 8007bce:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007bd2:	431a      	orrs	r2, r3
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	691b      	ldr	r3, [r3, #16]
 8007bd8:	3b01      	subs	r3, #1
 8007bda:	061b      	lsls	r3, r3, #24
 8007bdc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007be0:	4931      	ldr	r1, [pc, #196]	; (8007ca8 <RCCEx_PLL2_Config+0x15c>)
 8007be2:	4313      	orrs	r3, r2
 8007be4:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007be6:	4b30      	ldr	r3, [pc, #192]	; (8007ca8 <RCCEx_PLL2_Config+0x15c>)
 8007be8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bea:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	695b      	ldr	r3, [r3, #20]
 8007bf2:	492d      	ldr	r1, [pc, #180]	; (8007ca8 <RCCEx_PLL2_Config+0x15c>)
 8007bf4:	4313      	orrs	r3, r2
 8007bf6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007bf8:	4b2b      	ldr	r3, [pc, #172]	; (8007ca8 <RCCEx_PLL2_Config+0x15c>)
 8007bfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bfc:	f023 0220 	bic.w	r2, r3, #32
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	699b      	ldr	r3, [r3, #24]
 8007c04:	4928      	ldr	r1, [pc, #160]	; (8007ca8 <RCCEx_PLL2_Config+0x15c>)
 8007c06:	4313      	orrs	r3, r2
 8007c08:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007c0a:	4b27      	ldr	r3, [pc, #156]	; (8007ca8 <RCCEx_PLL2_Config+0x15c>)
 8007c0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c0e:	4a26      	ldr	r2, [pc, #152]	; (8007ca8 <RCCEx_PLL2_Config+0x15c>)
 8007c10:	f023 0310 	bic.w	r3, r3, #16
 8007c14:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007c16:	4b24      	ldr	r3, [pc, #144]	; (8007ca8 <RCCEx_PLL2_Config+0x15c>)
 8007c18:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007c1a:	4b24      	ldr	r3, [pc, #144]	; (8007cac <RCCEx_PLL2_Config+0x160>)
 8007c1c:	4013      	ands	r3, r2
 8007c1e:	687a      	ldr	r2, [r7, #4]
 8007c20:	69d2      	ldr	r2, [r2, #28]
 8007c22:	00d2      	lsls	r2, r2, #3
 8007c24:	4920      	ldr	r1, [pc, #128]	; (8007ca8 <RCCEx_PLL2_Config+0x15c>)
 8007c26:	4313      	orrs	r3, r2
 8007c28:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007c2a:	4b1f      	ldr	r3, [pc, #124]	; (8007ca8 <RCCEx_PLL2_Config+0x15c>)
 8007c2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c2e:	4a1e      	ldr	r2, [pc, #120]	; (8007ca8 <RCCEx_PLL2_Config+0x15c>)
 8007c30:	f043 0310 	orr.w	r3, r3, #16
 8007c34:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8007c36:	683b      	ldr	r3, [r7, #0]
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d106      	bne.n	8007c4a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007c3c:	4b1a      	ldr	r3, [pc, #104]	; (8007ca8 <RCCEx_PLL2_Config+0x15c>)
 8007c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c40:	4a19      	ldr	r2, [pc, #100]	; (8007ca8 <RCCEx_PLL2_Config+0x15c>)
 8007c42:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007c46:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007c48:	e00f      	b.n	8007c6a <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8007c4a:	683b      	ldr	r3, [r7, #0]
 8007c4c:	2b01      	cmp	r3, #1
 8007c4e:	d106      	bne.n	8007c5e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007c50:	4b15      	ldr	r3, [pc, #84]	; (8007ca8 <RCCEx_PLL2_Config+0x15c>)
 8007c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c54:	4a14      	ldr	r2, [pc, #80]	; (8007ca8 <RCCEx_PLL2_Config+0x15c>)
 8007c56:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007c5a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007c5c:	e005      	b.n	8007c6a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007c5e:	4b12      	ldr	r3, [pc, #72]	; (8007ca8 <RCCEx_PLL2_Config+0x15c>)
 8007c60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c62:	4a11      	ldr	r2, [pc, #68]	; (8007ca8 <RCCEx_PLL2_Config+0x15c>)
 8007c64:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007c68:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007c6a:	4b0f      	ldr	r3, [pc, #60]	; (8007ca8 <RCCEx_PLL2_Config+0x15c>)
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	4a0e      	ldr	r2, [pc, #56]	; (8007ca8 <RCCEx_PLL2_Config+0x15c>)
 8007c70:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007c74:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007c76:	f7f9 fd1b 	bl	80016b0 <HAL_GetTick>
 8007c7a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007c7c:	e008      	b.n	8007c90 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007c7e:	f7f9 fd17 	bl	80016b0 <HAL_GetTick>
 8007c82:	4602      	mov	r2, r0
 8007c84:	68bb      	ldr	r3, [r7, #8]
 8007c86:	1ad3      	subs	r3, r2, r3
 8007c88:	2b02      	cmp	r3, #2
 8007c8a:	d901      	bls.n	8007c90 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007c8c:	2303      	movs	r3, #3
 8007c8e:	e006      	b.n	8007c9e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007c90:	4b05      	ldr	r3, [pc, #20]	; (8007ca8 <RCCEx_PLL2_Config+0x15c>)
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d0f0      	beq.n	8007c7e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007c9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c9e:	4618      	mov	r0, r3
 8007ca0:	3710      	adds	r7, #16
 8007ca2:	46bd      	mov	sp, r7
 8007ca4:	bd80      	pop	{r7, pc}
 8007ca6:	bf00      	nop
 8007ca8:	58024400 	.word	0x58024400
 8007cac:	ffff0007 	.word	0xffff0007

08007cb0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007cb0:	b580      	push	{r7, lr}
 8007cb2:	b084      	sub	sp, #16
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	6078      	str	r0, [r7, #4]
 8007cb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007cba:	2300      	movs	r3, #0
 8007cbc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007cbe:	4b53      	ldr	r3, [pc, #332]	; (8007e0c <RCCEx_PLL3_Config+0x15c>)
 8007cc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cc2:	f003 0303 	and.w	r3, r3, #3
 8007cc6:	2b03      	cmp	r3, #3
 8007cc8:	d101      	bne.n	8007cce <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007cca:	2301      	movs	r3, #1
 8007ccc:	e099      	b.n	8007e02 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007cce:	4b4f      	ldr	r3, [pc, #316]	; (8007e0c <RCCEx_PLL3_Config+0x15c>)
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	4a4e      	ldr	r2, [pc, #312]	; (8007e0c <RCCEx_PLL3_Config+0x15c>)
 8007cd4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007cd8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007cda:	f7f9 fce9 	bl	80016b0 <HAL_GetTick>
 8007cde:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007ce0:	e008      	b.n	8007cf4 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8007ce2:	f7f9 fce5 	bl	80016b0 <HAL_GetTick>
 8007ce6:	4602      	mov	r2, r0
 8007ce8:	68bb      	ldr	r3, [r7, #8]
 8007cea:	1ad3      	subs	r3, r2, r3
 8007cec:	2b02      	cmp	r3, #2
 8007cee:	d901      	bls.n	8007cf4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007cf0:	2303      	movs	r3, #3
 8007cf2:	e086      	b.n	8007e02 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007cf4:	4b45      	ldr	r3, [pc, #276]	; (8007e0c <RCCEx_PLL3_Config+0x15c>)
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d1f0      	bne.n	8007ce2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007d00:	4b42      	ldr	r3, [pc, #264]	; (8007e0c <RCCEx_PLL3_Config+0x15c>)
 8007d02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d04:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	051b      	lsls	r3, r3, #20
 8007d0e:	493f      	ldr	r1, [pc, #252]	; (8007e0c <RCCEx_PLL3_Config+0x15c>)
 8007d10:	4313      	orrs	r3, r2
 8007d12:	628b      	str	r3, [r1, #40]	; 0x28
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	685b      	ldr	r3, [r3, #4]
 8007d18:	3b01      	subs	r3, #1
 8007d1a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	689b      	ldr	r3, [r3, #8]
 8007d22:	3b01      	subs	r3, #1
 8007d24:	025b      	lsls	r3, r3, #9
 8007d26:	b29b      	uxth	r3, r3
 8007d28:	431a      	orrs	r2, r3
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	68db      	ldr	r3, [r3, #12]
 8007d2e:	3b01      	subs	r3, #1
 8007d30:	041b      	lsls	r3, r3, #16
 8007d32:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007d36:	431a      	orrs	r2, r3
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	691b      	ldr	r3, [r3, #16]
 8007d3c:	3b01      	subs	r3, #1
 8007d3e:	061b      	lsls	r3, r3, #24
 8007d40:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007d44:	4931      	ldr	r1, [pc, #196]	; (8007e0c <RCCEx_PLL3_Config+0x15c>)
 8007d46:	4313      	orrs	r3, r2
 8007d48:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007d4a:	4b30      	ldr	r3, [pc, #192]	; (8007e0c <RCCEx_PLL3_Config+0x15c>)
 8007d4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d4e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	695b      	ldr	r3, [r3, #20]
 8007d56:	492d      	ldr	r1, [pc, #180]	; (8007e0c <RCCEx_PLL3_Config+0x15c>)
 8007d58:	4313      	orrs	r3, r2
 8007d5a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007d5c:	4b2b      	ldr	r3, [pc, #172]	; (8007e0c <RCCEx_PLL3_Config+0x15c>)
 8007d5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d60:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	699b      	ldr	r3, [r3, #24]
 8007d68:	4928      	ldr	r1, [pc, #160]	; (8007e0c <RCCEx_PLL3_Config+0x15c>)
 8007d6a:	4313      	orrs	r3, r2
 8007d6c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007d6e:	4b27      	ldr	r3, [pc, #156]	; (8007e0c <RCCEx_PLL3_Config+0x15c>)
 8007d70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d72:	4a26      	ldr	r2, [pc, #152]	; (8007e0c <RCCEx_PLL3_Config+0x15c>)
 8007d74:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007d78:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007d7a:	4b24      	ldr	r3, [pc, #144]	; (8007e0c <RCCEx_PLL3_Config+0x15c>)
 8007d7c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007d7e:	4b24      	ldr	r3, [pc, #144]	; (8007e10 <RCCEx_PLL3_Config+0x160>)
 8007d80:	4013      	ands	r3, r2
 8007d82:	687a      	ldr	r2, [r7, #4]
 8007d84:	69d2      	ldr	r2, [r2, #28]
 8007d86:	00d2      	lsls	r2, r2, #3
 8007d88:	4920      	ldr	r1, [pc, #128]	; (8007e0c <RCCEx_PLL3_Config+0x15c>)
 8007d8a:	4313      	orrs	r3, r2
 8007d8c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007d8e:	4b1f      	ldr	r3, [pc, #124]	; (8007e0c <RCCEx_PLL3_Config+0x15c>)
 8007d90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d92:	4a1e      	ldr	r2, [pc, #120]	; (8007e0c <RCCEx_PLL3_Config+0x15c>)
 8007d94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007d98:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8007d9a:	683b      	ldr	r3, [r7, #0]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d106      	bne.n	8007dae <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007da0:	4b1a      	ldr	r3, [pc, #104]	; (8007e0c <RCCEx_PLL3_Config+0x15c>)
 8007da2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007da4:	4a19      	ldr	r2, [pc, #100]	; (8007e0c <RCCEx_PLL3_Config+0x15c>)
 8007da6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007daa:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007dac:	e00f      	b.n	8007dce <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8007dae:	683b      	ldr	r3, [r7, #0]
 8007db0:	2b01      	cmp	r3, #1
 8007db2:	d106      	bne.n	8007dc2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007db4:	4b15      	ldr	r3, [pc, #84]	; (8007e0c <RCCEx_PLL3_Config+0x15c>)
 8007db6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007db8:	4a14      	ldr	r2, [pc, #80]	; (8007e0c <RCCEx_PLL3_Config+0x15c>)
 8007dba:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007dbe:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007dc0:	e005      	b.n	8007dce <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007dc2:	4b12      	ldr	r3, [pc, #72]	; (8007e0c <RCCEx_PLL3_Config+0x15c>)
 8007dc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dc6:	4a11      	ldr	r2, [pc, #68]	; (8007e0c <RCCEx_PLL3_Config+0x15c>)
 8007dc8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007dcc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007dce:	4b0f      	ldr	r3, [pc, #60]	; (8007e0c <RCCEx_PLL3_Config+0x15c>)
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	4a0e      	ldr	r2, [pc, #56]	; (8007e0c <RCCEx_PLL3_Config+0x15c>)
 8007dd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007dd8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007dda:	f7f9 fc69 	bl	80016b0 <HAL_GetTick>
 8007dde:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007de0:	e008      	b.n	8007df4 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8007de2:	f7f9 fc65 	bl	80016b0 <HAL_GetTick>
 8007de6:	4602      	mov	r2, r0
 8007de8:	68bb      	ldr	r3, [r7, #8]
 8007dea:	1ad3      	subs	r3, r2, r3
 8007dec:	2b02      	cmp	r3, #2
 8007dee:	d901      	bls.n	8007df4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007df0:	2303      	movs	r3, #3
 8007df2:	e006      	b.n	8007e02 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007df4:	4b05      	ldr	r3, [pc, #20]	; (8007e0c <RCCEx_PLL3_Config+0x15c>)
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d0f0      	beq.n	8007de2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007e00:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e02:	4618      	mov	r0, r3
 8007e04:	3710      	adds	r7, #16
 8007e06:	46bd      	mov	sp, r7
 8007e08:	bd80      	pop	{r7, pc}
 8007e0a:	bf00      	nop
 8007e0c:	58024400 	.word	0x58024400
 8007e10:	ffff0007 	.word	0xffff0007

08007e14 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8007e14:	b580      	push	{r7, lr}
 8007e16:	b08a      	sub	sp, #40	; 0x28
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	6078      	str	r0, [r7, #4]
  uint32_t ckstr_bits;
  uint32_t syncen_bits;
  SAI_TypeDef *SaiBaseAddress;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d101      	bne.n	8007e26 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 8007e22:	2301      	movs	r3, #1
 8007e24:	e283      	b.n	800832e <HAL_SAI_Init+0x51a>
  assert_param(IS_SAI_BLOCK_FIRST_BIT(hsai->Init.FirstBit));
  assert_param(IS_SAI_BLOCK_CLOCK_STROBING(hsai->Init.ClockStrobing));
  assert_param(IS_SAI_BLOCK_SYNCHRO(hsai->Init.Synchro));
#if defined(SAI_VER_V2_X) 
  /* SAI Peripheral version depends on STM32H7 device revision ID */
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 8007e26:	f7f9 fc4f 	bl	80016c8 <HAL_GetREVID>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007e30:	2b01      	cmp	r3, #1
 8007e32:	d113      	bne.n	8007e5c <HAL_SAI_Init+0x48>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 or SAI4 sub-block A, in master RX mode with free protocol */
#if defined(SAI4)
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	4a94      	ldr	r2, [pc, #592]	; (800808c <HAL_SAI_Init+0x278>)
 8007e3a:	4293      	cmp	r3, r2
 8007e3c:	d004      	beq.n	8007e48 <HAL_SAI_Init+0x34>
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	4a93      	ldr	r2, [pc, #588]	; (8008090 <HAL_SAI_Init+0x27c>)
 8007e44:	4293      	cmp	r3, r2
 8007e46:	d107      	bne.n	8007e58 <HAL_SAI_Init+0x44>
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	685b      	ldr	r3, [r3, #4]
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 8007e4c:	2b01      	cmp	r3, #1
 8007e4e:	d103      	bne.n	8007e58 <HAL_SAI_Init+0x44>
         (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d001      	beq.n	8007e5c <HAL_SAI_Init+0x48>
    {
      return HAL_ERROR;
 8007e58:	2301      	movs	r3, #1
 8007e5a:	e268      	b.n	800832e <HAL_SAI_Init+0x51a>
    }
#endif /* SAI4 */
  }

  /* Get the SAI base address according to the SAI handle */
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	4a8a      	ldr	r2, [pc, #552]	; (800808c <HAL_SAI_Init+0x278>)
 8007e62:	4293      	cmp	r3, r2
 8007e64:	d004      	beq.n	8007e70 <HAL_SAI_Init+0x5c>
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	4a8a      	ldr	r2, [pc, #552]	; (8008094 <HAL_SAI_Init+0x280>)
 8007e6c:	4293      	cmp	r3, r2
 8007e6e:	d102      	bne.n	8007e76 <HAL_SAI_Init+0x62>
  {
    SaiBaseAddress = SAI1;
 8007e70:	4b89      	ldr	r3, [pc, #548]	; (8008098 <HAL_SAI_Init+0x284>)
 8007e72:	61bb      	str	r3, [r7, #24]
 8007e74:	e028      	b.n	8007ec8 <HAL_SAI_Init+0xb4>
  }
#if defined(SAI2)
  else if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	4a88      	ldr	r2, [pc, #544]	; (800809c <HAL_SAI_Init+0x288>)
 8007e7c:	4293      	cmp	r3, r2
 8007e7e:	d004      	beq.n	8007e8a <HAL_SAI_Init+0x76>
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	4a86      	ldr	r2, [pc, #536]	; (80080a0 <HAL_SAI_Init+0x28c>)
 8007e86:	4293      	cmp	r3, r2
 8007e88:	d102      	bne.n	8007e90 <HAL_SAI_Init+0x7c>
  {
    SaiBaseAddress = SAI2;
 8007e8a:	4b86      	ldr	r3, [pc, #536]	; (80080a4 <HAL_SAI_Init+0x290>)
 8007e8c:	61bb      	str	r3, [r7, #24]
 8007e8e:	e01b      	b.n	8007ec8 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI2 */
#if defined(SAI3)
  else if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	4a84      	ldr	r2, [pc, #528]	; (80080a8 <HAL_SAI_Init+0x294>)
 8007e96:	4293      	cmp	r3, r2
 8007e98:	d004      	beq.n	8007ea4 <HAL_SAI_Init+0x90>
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	4a83      	ldr	r2, [pc, #524]	; (80080ac <HAL_SAI_Init+0x298>)
 8007ea0:	4293      	cmp	r3, r2
 8007ea2:	d102      	bne.n	8007eaa <HAL_SAI_Init+0x96>
  {
    SaiBaseAddress = SAI3;
 8007ea4:	4b82      	ldr	r3, [pc, #520]	; (80080b0 <HAL_SAI_Init+0x29c>)
 8007ea6:	61bb      	str	r3, [r7, #24]
 8007ea8:	e00e      	b.n	8007ec8 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI3 */
#if defined(SAI4)
  else if ((hsai->Instance == SAI4_Block_A) || (hsai->Instance == SAI4_Block_B))
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	4a78      	ldr	r2, [pc, #480]	; (8008090 <HAL_SAI_Init+0x27c>)
 8007eb0:	4293      	cmp	r3, r2
 8007eb2:	d004      	beq.n	8007ebe <HAL_SAI_Init+0xaa>
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	4a7e      	ldr	r2, [pc, #504]	; (80080b4 <HAL_SAI_Init+0x2a0>)
 8007eba:	4293      	cmp	r3, r2
 8007ebc:	d102      	bne.n	8007ec4 <HAL_SAI_Init+0xb0>
  {
    SaiBaseAddress = SAI4;
 8007ebe:	4b7e      	ldr	r3, [pc, #504]	; (80080b8 <HAL_SAI_Init+0x2a4>)
 8007ec0:	61bb      	str	r3, [r7, #24]
 8007ec2:	e001      	b.n	8007ec8 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI4 */
  else
  {
    return HAL_ERROR;
 8007ec4:	2301      	movs	r3, #1
 8007ec6:	e232      	b.n	800832e <HAL_SAI_Init+0x51a>
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 8007ece:	b2db      	uxtb	r3, r3
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d106      	bne.n	8007ee2 <HAL_SAI_Init+0xce>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	2200      	movs	r2, #0
 8007ed8:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8007edc:	6878      	ldr	r0, [r7, #4]
 8007ede:	f7f9 fa17 	bl	8001310 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if(SAI_Disable(hsai) != HAL_OK)
 8007ee2:	6878      	ldr	r0, [r7, #4]
 8007ee4:	f000 fb0c 	bl	8008500 <SAI_Disable>
 8007ee8:	4603      	mov	r3, r0
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d001      	beq.n	8007ef2 <HAL_SAI_Init+0xde>
  {
    return HAL_ERROR;
 8007eee:	2301      	movs	r3, #1
 8007ef0:	e21d      	b.n	800832e <HAL_SAI_Init+0x51a>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	2202      	movs	r2, #2
 8007ef6:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	68db      	ldr	r3, [r3, #12]
 8007efe:	2b02      	cmp	r3, #2
 8007f00:	d00c      	beq.n	8007f1c <HAL_SAI_Init+0x108>
 8007f02:	2b02      	cmp	r3, #2
 8007f04:	d80d      	bhi.n	8007f22 <HAL_SAI_Init+0x10e>
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d002      	beq.n	8007f10 <HAL_SAI_Init+0xfc>
 8007f0a:	2b01      	cmp	r3, #1
 8007f0c:	d003      	beq.n	8007f16 <HAL_SAI_Init+0x102>
 8007f0e:	e008      	b.n	8007f22 <HAL_SAI_Init+0x10e>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 8007f10:	2300      	movs	r3, #0
 8007f12:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8007f14:	e008      	b.n	8007f28 <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8007f16:	2310      	movs	r3, #16
 8007f18:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8007f1a:	e005      	b.n	8007f28 <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8007f1c:	2320      	movs	r3, #32
 8007f1e:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8007f20:	e002      	b.n	8007f28 <HAL_SAI_Init+0x114>
    default:
      tmpregisterGCR = 0;
 8007f22:	2300      	movs	r3, #0
 8007f24:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8007f26:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	689b      	ldr	r3, [r3, #8]
 8007f2c:	2b05      	cmp	r3, #5
 8007f2e:	d832      	bhi.n	8007f96 <HAL_SAI_Init+0x182>
 8007f30:	a201      	add	r2, pc, #4	; (adr r2, 8007f38 <HAL_SAI_Init+0x124>)
 8007f32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f36:	bf00      	nop
 8007f38:	08007f51 	.word	0x08007f51
 8007f3c:	08007f57 	.word	0x08007f57
 8007f40:	08007f5f 	.word	0x08007f5f
 8007f44:	08007f67 	.word	0x08007f67
 8007f48:	08007f77 	.word	0x08007f77
 8007f4c:	08007f87 	.word	0x08007f87
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 8007f50:	2300      	movs	r3, #0
 8007f52:	61fb      	str	r3, [r7, #28]
      break;
 8007f54:	e022      	b.n	8007f9c <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8007f56:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007f5a:	61fb      	str	r3, [r7, #28]
      break;
 8007f5c:	e01e      	b.n	8007f9c <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8007f5e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007f62:	61fb      	str	r3, [r7, #28]
      break;
 8007f64:	e01a      	b.n	8007f9c <HAL_SAI_Init+0x188>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8007f66:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007f6a:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8007f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f6e:	f043 0301 	orr.w	r3, r3, #1
 8007f72:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8007f74:	e012      	b.n	8007f9c <HAL_SAI_Init+0x188>
#endif /* SAI2 */
#if defined(SAI3)
    case SAI_SYNCHRONOUS_EXT_SAI3 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8007f76:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007f7a:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
 8007f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f7e:	f043 0302 	orr.w	r3, r3, #2
 8007f82:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8007f84:	e00a      	b.n	8007f9c <HAL_SAI_Init+0x188>
#endif /* SAI3 */
#if defined(SAI4)
    case SAI_SYNCHRONOUS_EXT_SAI4 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8007f86:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007f8a:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
 8007f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f8e:	f043 0303 	orr.w	r3, r3, #3
 8007f92:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8007f94:	e002      	b.n	8007f9c <HAL_SAI_Init+0x188>
#endif /* SAI4 */
    default:
      syncen_bits = 0;
 8007f96:	2300      	movs	r3, #0
 8007f98:	61fb      	str	r3, [r7, #28]
      break;
 8007f9a:	bf00      	nop
  }

  /* Set the SAI Block Synchro Configuration */
  SaiBaseAddress->GCR = tmpregisterGCR;
 8007f9c:	69bb      	ldr	r3, [r7, #24]
 8007f9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007fa0:	601a      	str	r2, [r3, #0]

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	6a1b      	ldr	r3, [r3, #32]
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	f000 80ba 	beq.w	8008120 <HAL_SAI_Init+0x30c>
  {
    uint32_t freq = 0;
 8007fac:	2300      	movs	r3, #0
 8007fae:	617b      	str	r3, [r7, #20]
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	4a35      	ldr	r2, [pc, #212]	; (800808c <HAL_SAI_Init+0x278>)
 8007fb6:	4293      	cmp	r3, r2
 8007fb8:	d004      	beq.n	8007fc4 <HAL_SAI_Init+0x1b0>
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	4a35      	ldr	r2, [pc, #212]	; (8008094 <HAL_SAI_Init+0x280>)
 8007fc0:	4293      	cmp	r3, r2
 8007fc2:	d104      	bne.n	8007fce <HAL_SAI_Init+0x1ba>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8007fc4:	f44f 7080 	mov.w	r0, #256	; 0x100
 8007fc8:	f7fe fcde 	bl	8006988 <HAL_RCCEx_GetPeriphCLKFreq>
 8007fcc:	6178      	str	r0, [r7, #20]
    }

#if defined(SAI2)
#if defined(RCC_PERIPHCLK_SAI2)
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	4a32      	ldr	r2, [pc, #200]	; (800809c <HAL_SAI_Init+0x288>)
 8007fd4:	4293      	cmp	r3, r2
 8007fd6:	d004      	beq.n	8007fe2 <HAL_SAI_Init+0x1ce>
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	4a30      	ldr	r2, [pc, #192]	; (80080a0 <HAL_SAI_Init+0x28c>)
 8007fde:	4293      	cmp	r3, r2
 8007fe0:	d104      	bne.n	8007fec <HAL_SAI_Init+0x1d8>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8007fe2:	f44f 7000 	mov.w	r0, #512	; 0x200
 8007fe6:	f7fe fccf 	bl	8006988 <HAL_RCCEx_GetPeriphCLKFreq>
 8007fea:	6178      	str	r0, [r7, #20]
    }
#endif /* RCC_PERIPHCLK_SAI2 */
#endif /* SAI2 */

#if defined(SAI3)
    if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	4a2d      	ldr	r2, [pc, #180]	; (80080a8 <HAL_SAI_Init+0x294>)
 8007ff2:	4293      	cmp	r3, r2
 8007ff4:	d004      	beq.n	8008000 <HAL_SAI_Init+0x1ec>
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	4a2c      	ldr	r2, [pc, #176]	; (80080ac <HAL_SAI_Init+0x298>)
 8007ffc:	4293      	cmp	r3, r2
 8007ffe:	d104      	bne.n	800800a <HAL_SAI_Init+0x1f6>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
 8008000:	f44f 7000 	mov.w	r0, #512	; 0x200
 8008004:	f7fe fcc0 	bl	8006988 <HAL_RCCEx_GetPeriphCLKFreq>
 8008008:	6178      	str	r0, [r7, #20]
    }
#endif /* SAI3 */
#if defined(SAI4)
    if (hsai->Instance == SAI4_Block_A)
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	4a20      	ldr	r2, [pc, #128]	; (8008090 <HAL_SAI_Init+0x27c>)
 8008010:	4293      	cmp	r3, r2
 8008012:	d104      	bne.n	800801e <HAL_SAI_Init+0x20a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
 8008014:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8008018:	f7fe fcb6 	bl	8006988 <HAL_RCCEx_GetPeriphCLKFreq>
 800801c:	6178      	str	r0, [r7, #20]
    }
    if (hsai->Instance == SAI4_Block_B)
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	4a24      	ldr	r2, [pc, #144]	; (80080b4 <HAL_SAI_Init+0x2a0>)
 8008024:	4293      	cmp	r3, r2
 8008026:	d104      	bne.n	8008032 <HAL_SAI_Init+0x21e>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
 8008028:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800802c:	f7fe fcac 	bl	8006988 <HAL_RCCEx_GetPeriphCLKFreq>
 8008030:	6178      	str	r0, [r7, #20]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	699b      	ldr	r3, [r3, #24]
 8008036:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800803a:	d120      	bne.n	800807e <HAL_SAI_Init+0x26a>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008040:	2b04      	cmp	r3, #4
 8008042:	d102      	bne.n	800804a <HAL_SAI_Init+0x236>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = 64U;
 8008044:	2340      	movs	r3, #64	; 0x40
 8008046:	60fb      	str	r3, [r7, #12]
 8008048:	e00a      	b.n	8008060 <HAL_SAI_Init+0x24c>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800804e:	2b08      	cmp	r3, #8
 8008050:	d103      	bne.n	800805a <HAL_SAI_Init+0x246>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = 256U;
 8008052:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008056:	60fb      	str	r3, [r7, #12]
 8008058:	e002      	b.n	8008060 <HAL_SAI_Init+0x24c>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800805e:	60fb      	str	r3, [r7, #12]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 8008060:	697a      	ldr	r2, [r7, #20]
 8008062:	4613      	mov	r3, r2
 8008064:	009b      	lsls	r3, r3, #2
 8008066:	4413      	add	r3, r2
 8008068:	005b      	lsls	r3, r3, #1
 800806a:	4619      	mov	r1, r3
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	6a1b      	ldr	r3, [r3, #32]
 8008070:	68fa      	ldr	r2, [r7, #12]
 8008072:	fb02 f303 	mul.w	r3, r2, r3
 8008076:	fbb1 f3f3 	udiv	r3, r1, r3
 800807a:	613b      	str	r3, [r7, #16]
 800807c:	e02f      	b.n	80080de <HAL_SAI_Init+0x2ca>
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008082:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008086:	d119      	bne.n	80080bc <HAL_SAI_Init+0x2a8>
 8008088:	2302      	movs	r3, #2
 800808a:	e018      	b.n	80080be <HAL_SAI_Init+0x2aa>
 800808c:	40015804 	.word	0x40015804
 8008090:	58005404 	.word	0x58005404
 8008094:	40015824 	.word	0x40015824
 8008098:	40015800 	.word	0x40015800
 800809c:	40015c04 	.word	0x40015c04
 80080a0:	40015c24 	.word	0x40015c24
 80080a4:	40015c00 	.word	0x40015c00
 80080a8:	40016004 	.word	0x40016004
 80080ac:	40016024 	.word	0x40016024
 80080b0:	40016000 	.word	0x40016000
 80080b4:	58005424 	.word	0x58005424
 80080b8:	58005400 	.word	0x58005400
 80080bc:	2301      	movs	r3, #1
 80080be:	60bb      	str	r3, [r7, #8]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 80080c0:	697a      	ldr	r2, [r7, #20]
 80080c2:	4613      	mov	r3, r2
 80080c4:	009b      	lsls	r3, r3, #2
 80080c6:	4413      	add	r3, r2
 80080c8:	005b      	lsls	r3, r3, #1
 80080ca:	4619      	mov	r1, r3
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	6a1b      	ldr	r3, [r3, #32]
 80080d0:	68ba      	ldr	r2, [r7, #8]
 80080d2:	fb02 f303 	mul.w	r3, r2, r3
 80080d6:	021b      	lsls	r3, r3, #8
 80080d8:	fbb1 f3f3 	udiv	r3, r1, r3
 80080dc:	613b      	str	r3, [r7, #16]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 80080de:	693b      	ldr	r3, [r7, #16]
 80080e0:	4a95      	ldr	r2, [pc, #596]	; (8008338 <HAL_SAI_Init+0x524>)
 80080e2:	fba2 2303 	umull	r2, r3, r2, r3
 80080e6:	08da      	lsrs	r2, r3, #3
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	625a      	str	r2, [r3, #36]	; 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 80080ec:	6939      	ldr	r1, [r7, #16]
 80080ee:	4b92      	ldr	r3, [pc, #584]	; (8008338 <HAL_SAI_Init+0x524>)
 80080f0:	fba3 2301 	umull	r2, r3, r3, r1
 80080f4:	08da      	lsrs	r2, r3, #3
 80080f6:	4613      	mov	r3, r2
 80080f8:	009b      	lsls	r3, r3, #2
 80080fa:	4413      	add	r3, r2
 80080fc:	005b      	lsls	r3, r3, #1
 80080fe:	1aca      	subs	r2, r1, r3
 8008100:	2a08      	cmp	r2, #8
 8008102:	d904      	bls.n	800810e <HAL_SAI_Init+0x2fa>
    {
      hsai->Init.Mckdiv += 1U;
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008108:	1c5a      	adds	r2, r3, #1
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008112:	2b04      	cmp	r3, #4
 8008114:	d104      	bne.n	8008120 <HAL_SAI_Init+0x30c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800811a:	085a      	lsrs	r2, r3, #1
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	685b      	ldr	r3, [r3, #4]
 8008124:	2b00      	cmp	r3, #0
 8008126:	d003      	beq.n	8008130 <HAL_SAI_Init+0x31c>
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	685b      	ldr	r3, [r3, #4]
 800812c:	2b02      	cmp	r3, #2
 800812e:	d109      	bne.n	8008144 <HAL_SAI_Init+0x330>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008134:	2b01      	cmp	r3, #1
 8008136:	d101      	bne.n	800813c <HAL_SAI_Init+0x328>
 8008138:	2300      	movs	r3, #0
 800813a:	e001      	b.n	8008140 <HAL_SAI_Init+0x32c>
 800813c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008140:	623b      	str	r3, [r7, #32]
 8008142:	e008      	b.n	8008156 <HAL_SAI_Init+0x342>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008148:	2b01      	cmp	r3, #1
 800814a:	d102      	bne.n	8008152 <HAL_SAI_Init+0x33e>
 800814c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008150:	e000      	b.n	8008154 <HAL_SAI_Init+0x340>
 8008152:	2300      	movs	r3, #0
 8008154:	623b      	str	r3, [r7, #32]

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
#if defined(SAI_VER_V2_X) /* SAI Peripheral version depends on STM32H7 device revision ID */

  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 8008156:	f7f9 fab7 	bl	80016c8 <HAL_GetREVID>
 800815a:	4603      	mov	r3, r0
 800815c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008160:	d331      	bcc.n	80081c6 <HAL_SAI_Init+0x3b2>
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	6819      	ldr	r1, [r3, #0]
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681a      	ldr	r2, [r3, #0]
 800816c:	4b73      	ldr	r3, [pc, #460]	; (800833c <HAL_SAI_Init+0x528>)
 800816e:	400b      	ands	r3, r1
 8008170:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                             SAI_xCR1_MCKEN);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	6819      	ldr	r1, [r3, #0]
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	685a      	ldr	r2, [r3, #4]
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008180:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008186:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800818c:	431a      	orrs	r2, r3
 800818e:	6a3b      	ldr	r3, [r7, #32]
 8008190:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 8008192:	69fb      	ldr	r3, [r7, #28]
 8008194:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                            ckstr_bits | syncen_bits |                             \
 800819a:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	695b      	ldr	r3, [r3, #20]
 80081a0:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80081a6:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081ac:	051b      	lsls	r3, r3, #20
 80081ae:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 80081b4:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	691b      	ldr	r3, [r3, #16]
 80081ba:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	430a      	orrs	r2, r1
 80081c2:	601a      	str	r2, [r3, #0]
 80081c4:	e02d      	b.n	8008222 <HAL_SAI_Init+0x40e>
  }
  else /* STM32H7xx Rev.Y */
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	6819      	ldr	r1, [r3, #0]
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681a      	ldr	r2, [r3, #0]
 80081d0:	4b5b      	ldr	r3, [pc, #364]	; (8008340 <HAL_SAI_Init+0x52c>)
 80081d2:	400b      	ands	r3, r1
 80081d4:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	6819      	ldr	r1, [r3, #0]
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	685a      	ldr	r2, [r3, #4]
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081e4:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80081ea:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80081f0:	431a      	orrs	r2, r3
 80081f2:	6a3b      	ldr	r3, [r7, #32]
 80081f4:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 80081f6:	69fb      	ldr	r3, [r7, #28]
 80081f8:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                            ckstr_bits | syncen_bits |                             \
 80081fe:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	695b      	ldr	r3, [r3, #20]
 8008204:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800820a:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008210:	051b      	lsls	r3, r3, #20
 8008212:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling);
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8008218:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	430a      	orrs	r2, r1
 8008220:	601a      	str	r2, [r3, #0]
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
#endif /* SAI_VER_V2_X */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	6859      	ldr	r1, [r3, #4]
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681a      	ldr	r2, [r3, #0]
 800822c:	4b45      	ldr	r3, [pc, #276]	; (8008344 <HAL_SAI_Init+0x530>)
 800822e:	400b      	ands	r3, r1
 8008230:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	6859      	ldr	r1, [r3, #4]
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	69da      	ldr	r2, [r3, #28]
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008240:	431a      	orrs	r2, r3
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008246:	431a      	orrs	r2, r3
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	430a      	orrs	r2, r1
 800824e:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	6899      	ldr	r1, [r3, #8]
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681a      	ldr	r2, [r3, #0]
 800825a:	4b3b      	ldr	r3, [pc, #236]	; (8008348 <HAL_SAI_Init+0x534>)
 800825c:	400b      	ands	r3, r1
 800825e:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	6899      	ldr	r1, [r3, #8]
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800826a:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8008270:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                           hsai->FrameInit.FSOffset |
 8008276:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                           hsai->FrameInit.FSDefinition |
 800827c:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008282:	3b01      	subs	r3, #1
 8008284:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8008286:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	430a      	orrs	r2, r1
 800828e:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	68d9      	ldr	r1, [r3, #12]
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681a      	ldr	r2, [r3, #0]
 800829a:	f24f 0320 	movw	r3, #61472	; 0xf020
 800829e:	400b      	ands	r3, r1
 80082a0:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	68d9      	ldr	r1, [r3, #12]
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80082b0:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80082b6:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 80082b8:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082be:	3b01      	subs	r3, #1
 80082c0:	021b      	lsls	r3, r3, #8
 80082c2:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	430a      	orrs	r2, r1
 80082ca:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
#if defined(SAI4)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	4a1e      	ldr	r2, [pc, #120]	; (800834c <HAL_SAI_Init+0x538>)
 80082d2:	4293      	cmp	r3, r2
 80082d4:	d004      	beq.n	80082e0 <HAL_SAI_Init+0x4cc>
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	4a1d      	ldr	r2, [pc, #116]	; (8008350 <HAL_SAI_Init+0x53c>)
 80082dc:	4293      	cmp	r3, r2
 80082de:	d119      	bne.n	8008314 <HAL_SAI_Init+0x500>
#else
  if (hsai->Instance == SAI1_Block_A)
#endif /* SAI4 */
  {
    /* Disable PDM interface */
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 80082e0:	69bb      	ldr	r3, [r7, #24]
 80082e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80082e4:	f023 0201 	bic.w	r2, r3, #1
 80082e8:	69bb      	ldr	r3, [r7, #24]
 80082ea:	645a      	str	r2, [r3, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80082f2:	2b01      	cmp	r3, #1
 80082f4:	d10e      	bne.n	8008314 <HAL_SAI_Init+0x500>
    {
      /* Configure and enable PDM interface */
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082fe:	3b01      	subs	r3, #1
 8008300:	011b      	lsls	r3, r3, #4
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8008302:	431a      	orrs	r2, r3
 8008304:	69bb      	ldr	r3, [r7, #24]
 8008306:	645a      	str	r2, [r3, #68]	; 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
 8008308:	69bb      	ldr	r3, [r7, #24]
 800830a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800830c:	f043 0201 	orr.w	r2, r3, #1
 8008310:	69bb      	ldr	r3, [r7, #24]
 8008312:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	2200      	movs	r2, #0
 8008318:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	2201      	movs	r2, #1
 8008320:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	2200      	movs	r2, #0
 8008328:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

  return HAL_OK;
 800832c:	2300      	movs	r3, #0
}
 800832e:	4618      	mov	r0, r3
 8008330:	3728      	adds	r7, #40	; 0x28
 8008332:	46bd      	mov	sp, r7
 8008334:	bd80      	pop	{r7, pc}
 8008336:	bf00      	nop
 8008338:	cccccccd 	.word	0xcccccccd
 800833c:	f005c010 	.word	0xf005c010
 8008340:	f805c010 	.word	0xf805c010
 8008344:	ffff1ff0 	.word	0xffff1ff0
 8008348:	fff88000 	.word	0xfff88000
 800834c:	40015804 	.word	0x40015804
 8008350:	58005404 	.word	0x58005404

08008354 <HAL_SAI_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Receive_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 8008354:	b580      	push	{r7, lr}
 8008356:	b084      	sub	sp, #16
 8008358:	af00      	add	r7, sp, #0
 800835a:	60f8      	str	r0, [r7, #12]
 800835c:	60b9      	str	r1, [r7, #8]
 800835e:	4613      	mov	r3, r2
 8008360:	80fb      	strh	r3, [r7, #6]

  if ((pData == NULL) || (Size == 0U))
 8008362:	68bb      	ldr	r3, [r7, #8]
 8008364:	2b00      	cmp	r3, #0
 8008366:	d002      	beq.n	800836e <HAL_SAI_Receive_DMA+0x1a>
 8008368:	88fb      	ldrh	r3, [r7, #6]
 800836a:	2b00      	cmp	r3, #0
 800836c:	d101      	bne.n	8008372 <HAL_SAI_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 800836e:	2301      	movs	r3, #1
 8008370:	e079      	b.n	8008466 <HAL_SAI_Receive_DMA+0x112>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 8008378:	b2db      	uxtb	r3, r3
 800837a:	2b01      	cmp	r3, #1
 800837c:	d172      	bne.n	8008464 <HAL_SAI_Receive_DMA+0x110>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8008384:	2b01      	cmp	r3, #1
 8008386:	d101      	bne.n	800838c <HAL_SAI_Receive_DMA+0x38>
 8008388:	2302      	movs	r3, #2
 800838a:	e06c      	b.n	8008466 <HAL_SAI_Receive_DMA+0x112>
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	2201      	movs	r2, #1
 8008390:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    hsai->pBuffPtr = pData;
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	68ba      	ldr	r2, [r7, #8]
 8008398:	679a      	str	r2, [r3, #120]	; 0x78
    hsai->XferSize = Size;
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	88fa      	ldrh	r2, [r7, #6]
 800839e:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
    hsai->XferCount = Size;
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	88fa      	ldrh	r2, [r7, #6]
 80083a6:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	2200      	movs	r2, #0
 80083ae:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	2222      	movs	r2, #34	; 0x22
 80083b6:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

    /* Set the SAI Rx DMA Half transfer complete callback */
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80083c0:	4a2b      	ldr	r2, [pc, #172]	; (8008470 <HAL_SAI_Receive_DMA+0x11c>)
 80083c2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the SAI Rx DMA transfer complete callback */
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80083ca:	4a2a      	ldr	r2, [pc, #168]	; (8008474 <HAL_SAI_Receive_DMA+0x120>)
 80083cc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80083d4:	4a28      	ldr	r2, [pc, #160]	; (8008478 <HAL_SAI_Receive_DMA+0x124>)
 80083d6:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Rx abort callback */
    hsai->hdmarx->XferAbortCallback = NULL;
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80083de:	2200      	movs	r2, #0
 80083e0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the Rx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	331c      	adds	r3, #28
 80083ee:	4619      	mov	r1, r3
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80083f4:	461a      	mov	r2, r3
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 80083fc:	f7f9 fec6 	bl	800218c <HAL_DMA_Start_IT>
 8008400:	4603      	mov	r3, r0
 8008402:	2b00      	cmp	r3, #0
 8008404:	d005      	beq.n	8008412 <HAL_SAI_Receive_DMA+0xbe>
    {
      __HAL_UNLOCK(hsai);
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	2200      	movs	r2, #0
 800840a:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      return  HAL_ERROR;
 800840e:	2301      	movs	r3, #1
 8008410:	e029      	b.n	8008466 <HAL_SAI_Receive_DMA+0x112>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8008412:	2100      	movs	r1, #0
 8008414:	68f8      	ldr	r0, [r7, #12]
 8008416:	f000 f83b 	bl	8008490 <SAI_InterruptFlag>
 800841a:	4601      	mov	r1, r0
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	691a      	ldr	r2, [r3, #16]
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	430a      	orrs	r2, r1
 8008428:	611a      	str	r2, [r3, #16]

    /* Enable SAI Rx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	681a      	ldr	r2, [r3, #0]
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8008438:	601a      	str	r2, [r3, #0]

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008444:	2b00      	cmp	r3, #0
 8008446:	d107      	bne.n	8008458 <HAL_SAI_Receive_DMA+0x104>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	681a      	ldr	r2, [r3, #0]
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8008456:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	2200      	movs	r2, #0
 800845c:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    return HAL_OK;
 8008460:	2300      	movs	r3, #0
 8008462:	e000      	b.n	8008466 <HAL_SAI_Receive_DMA+0x112>
  }
  else
  {
    return HAL_BUSY;
 8008464:	2302      	movs	r3, #2
  }
}
 8008466:	4618      	mov	r0, r3
 8008468:	3710      	adds	r7, #16
 800846a:	46bd      	mov	sp, r7
 800846c:	bd80      	pop	{r7, pc}
 800846e:	bf00      	nop
 8008470:	080085d5 	.word	0x080085d5
 8008474:	08008575 	.word	0x08008575
 8008478:	080085f1 	.word	0x080085f1

0800847c <HAL_SAI_ErrorCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 800847c:	b480      	push	{r7}
 800847e:	b083      	sub	sp, #12
 8008480:	af00      	add	r7, sp, #0
 8008482:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_ErrorCallback could be implemented in the user file
   */
}
 8008484:	bf00      	nop
 8008486:	370c      	adds	r7, #12
 8008488:	46bd      	mov	sp, r7
 800848a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800848e:	4770      	bx	lr

08008490 <SAI_InterruptFlag>:
  *              the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
  */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, SAI_ModeTypedef mode)
{
 8008490:	b480      	push	{r7}
 8008492:	b085      	sub	sp, #20
 8008494:	af00      	add	r7, sp, #0
 8008496:	6078      	str	r0, [r7, #4]
 8008498:	460b      	mov	r3, r1
 800849a:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 800849c:	2301      	movs	r3, #1
 800849e:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 80084a0:	78fb      	ldrb	r3, [r7, #3]
 80084a2:	2b01      	cmp	r3, #1
 80084a4:	d103      	bne.n	80084ae <SAI_InterruptFlag+0x1e>
  {
    tmpIT |= SAI_IT_FREQ;
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	f043 0308 	orr.w	r3, r3, #8
 80084ac:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80084b2:	2b08      	cmp	r3, #8
 80084b4:	d10b      	bne.n	80084ce <SAI_InterruptFlag+0x3e>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 80084ba:	2b03      	cmp	r3, #3
 80084bc:	d003      	beq.n	80084c6 <SAI_InterruptFlag+0x36>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	685b      	ldr	r3, [r3, #4]
 80084c2:	2b01      	cmp	r3, #1
 80084c4:	d103      	bne.n	80084ce <SAI_InterruptFlag+0x3e>
  {
    tmpIT |= SAI_IT_CNRDY;
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	f043 0310 	orr.w	r3, r3, #16
 80084cc:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	685b      	ldr	r3, [r3, #4]
 80084d2:	2b03      	cmp	r3, #3
 80084d4:	d003      	beq.n	80084de <SAI_InterruptFlag+0x4e>
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	685b      	ldr	r3, [r3, #4]
 80084da:	2b02      	cmp	r3, #2
 80084dc:	d104      	bne.n	80084e8 <SAI_InterruptFlag+0x58>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80084e4:	60fb      	str	r3, [r7, #12]
 80084e6:	e003      	b.n	80084f0 <SAI_InterruptFlag+0x60>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	f043 0304 	orr.w	r3, r3, #4
 80084ee:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 80084f0:	68fb      	ldr	r3, [r7, #12]
}
 80084f2:	4618      	mov	r0, r3
 80084f4:	3714      	adds	r7, #20
 80084f6:	46bd      	mov	sp, r7
 80084f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084fc:	4770      	bx	lr
	...

08008500 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8008500:	b480      	push	{r7}
 8008502:	b085      	sub	sp, #20
 8008504:	af00      	add	r7, sp, #0
 8008506:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8008508:	4b18      	ldr	r3, [pc, #96]	; (800856c <SAI_Disable+0x6c>)
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	4a18      	ldr	r2, [pc, #96]	; (8008570 <SAI_Disable+0x70>)
 800850e:	fba2 2303 	umull	r2, r3, r2, r3
 8008512:	0b1b      	lsrs	r3, r3, #12
 8008514:	009b      	lsls	r3, r3, #2
 8008516:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8008518:	2300      	movs	r3, #0
 800851a:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	681a      	ldr	r2, [r3, #0]
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800852a:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	2b00      	cmp	r3, #0
 8008530:	d10a      	bne.n	8008548 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008538:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      status = HAL_TIMEOUT;
 8008542:	2303      	movs	r3, #3
 8008544:	72fb      	strb	r3, [r7, #11]
      break;
 8008546:	e009      	b.n	800855c <SAI_Disable+0x5c>
    }
    count--;
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	3b01      	subs	r3, #1
 800854c:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008558:	2b00      	cmp	r3, #0
 800855a:	d1e7      	bne.n	800852c <SAI_Disable+0x2c>

  return status;
 800855c:	7afb      	ldrb	r3, [r7, #11]
}
 800855e:	4618      	mov	r0, r3
 8008560:	3714      	adds	r7, #20
 8008562:	46bd      	mov	sp, r7
 8008564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008568:	4770      	bx	lr
 800856a:	bf00      	nop
 800856c:	24000400 	.word	0x24000400
 8008570:	95cbec1b 	.word	0x95cbec1b

08008574 <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8008574:	b580      	push	{r7, lr}
 8008576:	b084      	sub	sp, #16
 8008578:	af00      	add	r7, sp, #0
 800857a:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008580:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	69db      	ldr	r3, [r3, #28]
 8008586:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800858a:	d01c      	beq.n	80085c6 <SAI_DMARxCplt+0x52>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	681a      	ldr	r2, [r3, #0]
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800859a:	601a      	str	r2, [r3, #0]
    hsai->XferCount = 0;
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	2200      	movs	r2, #0
 80085a0:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 80085a4:	2100      	movs	r1, #0
 80085a6:	68f8      	ldr	r0, [r7, #12]
 80085a8:	f7ff ff72 	bl	8008490 <SAI_InterruptFlag>
 80085ac:	4603      	mov	r3, r0
 80085ae:	43d9      	mvns	r1, r3
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	691a      	ldr	r2, [r3, #16]
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	400a      	ands	r2, r1
 80085bc:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	2201      	movs	r2, #1
 80085c2:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 80085c6:	68f8      	ldr	r0, [r7, #12]
 80085c8:	f7f8 fd60 	bl	800108c <HAL_SAI_RxCpltCallback>
#endif
}
 80085cc:	bf00      	nop
 80085ce:	3710      	adds	r7, #16
 80085d0:	46bd      	mov	sp, r7
 80085d2:	bd80      	pop	{r7, pc}

080085d4 <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80085d4:	b580      	push	{r7, lr}
 80085d6:	b084      	sub	sp, #16
 80085d8:	af00      	add	r7, sp, #0
 80085da:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085e0:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 80085e2:	68f8      	ldr	r0, [r7, #12]
 80085e4:	f7f8 fd42 	bl	800106c <HAL_SAI_RxHalfCpltCallback>
#endif
}
 80085e8:	bf00      	nop
 80085ea:	3710      	adds	r7, #16
 80085ec:	46bd      	mov	sp, r7
 80085ee:	bd80      	pop	{r7, pc}

080085f0 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 80085f0:	b580      	push	{r7, lr}
 80085f2:	b084      	sub	sp, #16
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085fc:	60fb      	str	r3, [r7, #12]

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 80085fe:	6878      	ldr	r0, [r7, #4]
 8008600:	f7fb fcba 	bl	8003f78 <HAL_DMA_GetError>
 8008604:	4603      	mov	r3, r0
 8008606:	2b02      	cmp	r3, #2
 8008608:	d01d      	beq.n	8008646 <SAI_DMAError+0x56>
  {
    /* Set SAI error code */
    hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008610:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	681a      	ldr	r2, [r3, #0]
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8008628:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral */
    /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
    (void) SAI_Disable(hsai);
 800862a:	68f8      	ldr	r0, [r7, #12]
 800862c:	f7ff ff68 	bl	8008500 <SAI_Disable>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	2201      	movs	r2, #1
 8008634:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	2200      	movs	r2, #0
 800863c:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

    /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
    hsai->ErrorCallback(hsai);
#else
    HAL_SAI_ErrorCallback(hsai);
 8008640:	68f8      	ldr	r0, [r7, #12]
 8008642:	f7ff ff1b 	bl	800847c <HAL_SAI_ErrorCallback>
#endif
  }
}
 8008646:	bf00      	nop
 8008648:	3710      	adds	r7, #16
 800864a:	46bd      	mov	sp, r7
 800864c:	bd80      	pop	{r7, pc}

0800864e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800864e:	b580      	push	{r7, lr}
 8008650:	b082      	sub	sp, #8
 8008652:	af00      	add	r7, sp, #0
 8008654:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	2b00      	cmp	r3, #0
 800865a:	d101      	bne.n	8008660 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800865c:	2301      	movs	r3, #1
 800865e:	e049      	b.n	80086f4 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008666:	b2db      	uxtb	r3, r3
 8008668:	2b00      	cmp	r3, #0
 800866a:	d106      	bne.n	800867a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	2200      	movs	r2, #0
 8008670:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008674:	6878      	ldr	r0, [r7, #4]
 8008676:	f7f8 fd71 	bl	800115c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	2202      	movs	r2, #2
 800867e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681a      	ldr	r2, [r3, #0]
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	3304      	adds	r3, #4
 800868a:	4619      	mov	r1, r3
 800868c:	4610      	mov	r0, r2
 800868e:	f000 fb0f 	bl	8008cb0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	2201      	movs	r2, #1
 8008696:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	2201      	movs	r2, #1
 800869e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	2201      	movs	r2, #1
 80086a6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	2201      	movs	r2, #1
 80086ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	2201      	movs	r2, #1
 80086b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	2201      	movs	r2, #1
 80086be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	2201      	movs	r2, #1
 80086c6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	2201      	movs	r2, #1
 80086ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	2201      	movs	r2, #1
 80086d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	2201      	movs	r2, #1
 80086de:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	2201      	movs	r2, #1
 80086e6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	2201      	movs	r2, #1
 80086ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80086f2:	2300      	movs	r3, #0
}
 80086f4:	4618      	mov	r0, r3
 80086f6:	3708      	adds	r7, #8
 80086f8:	46bd      	mov	sp, r7
 80086fa:	bd80      	pop	{r7, pc}

080086fc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80086fc:	b480      	push	{r7}
 80086fe:	b085      	sub	sp, #20
 8008700:	af00      	add	r7, sp, #0
 8008702:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800870a:	b2db      	uxtb	r3, r3
 800870c:	2b01      	cmp	r3, #1
 800870e:	d001      	beq.n	8008714 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008710:	2301      	movs	r3, #1
 8008712:	e04f      	b.n	80087b4 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	2202      	movs	r2, #2
 8008718:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	68da      	ldr	r2, [r3, #12]
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	f042 0201 	orr.w	r2, r2, #1
 800872a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	4a23      	ldr	r2, [pc, #140]	; (80087c0 <HAL_TIM_Base_Start_IT+0xc4>)
 8008732:	4293      	cmp	r3, r2
 8008734:	d01d      	beq.n	8008772 <HAL_TIM_Base_Start_IT+0x76>
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800873e:	d018      	beq.n	8008772 <HAL_TIM_Base_Start_IT+0x76>
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	4a1f      	ldr	r2, [pc, #124]	; (80087c4 <HAL_TIM_Base_Start_IT+0xc8>)
 8008746:	4293      	cmp	r3, r2
 8008748:	d013      	beq.n	8008772 <HAL_TIM_Base_Start_IT+0x76>
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	4a1e      	ldr	r2, [pc, #120]	; (80087c8 <HAL_TIM_Base_Start_IT+0xcc>)
 8008750:	4293      	cmp	r3, r2
 8008752:	d00e      	beq.n	8008772 <HAL_TIM_Base_Start_IT+0x76>
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	4a1c      	ldr	r2, [pc, #112]	; (80087cc <HAL_TIM_Base_Start_IT+0xd0>)
 800875a:	4293      	cmp	r3, r2
 800875c:	d009      	beq.n	8008772 <HAL_TIM_Base_Start_IT+0x76>
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	4a1b      	ldr	r2, [pc, #108]	; (80087d0 <HAL_TIM_Base_Start_IT+0xd4>)
 8008764:	4293      	cmp	r3, r2
 8008766:	d004      	beq.n	8008772 <HAL_TIM_Base_Start_IT+0x76>
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	4a19      	ldr	r2, [pc, #100]	; (80087d4 <HAL_TIM_Base_Start_IT+0xd8>)
 800876e:	4293      	cmp	r3, r2
 8008770:	d115      	bne.n	800879e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	689a      	ldr	r2, [r3, #8]
 8008778:	4b17      	ldr	r3, [pc, #92]	; (80087d8 <HAL_TIM_Base_Start_IT+0xdc>)
 800877a:	4013      	ands	r3, r2
 800877c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	2b06      	cmp	r3, #6
 8008782:	d015      	beq.n	80087b0 <HAL_TIM_Base_Start_IT+0xb4>
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800878a:	d011      	beq.n	80087b0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	681a      	ldr	r2, [r3, #0]
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	f042 0201 	orr.w	r2, r2, #1
 800879a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800879c:	e008      	b.n	80087b0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	681a      	ldr	r2, [r3, #0]
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	f042 0201 	orr.w	r2, r2, #1
 80087ac:	601a      	str	r2, [r3, #0]
 80087ae:	e000      	b.n	80087b2 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80087b0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80087b2:	2300      	movs	r3, #0
}
 80087b4:	4618      	mov	r0, r3
 80087b6:	3714      	adds	r7, #20
 80087b8:	46bd      	mov	sp, r7
 80087ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087be:	4770      	bx	lr
 80087c0:	40010000 	.word	0x40010000
 80087c4:	40000400 	.word	0x40000400
 80087c8:	40000800 	.word	0x40000800
 80087cc:	40000c00 	.word	0x40000c00
 80087d0:	40010400 	.word	0x40010400
 80087d4:	40001800 	.word	0x40001800
 80087d8:	00010007 	.word	0x00010007

080087dc <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80087dc:	b480      	push	{r7}
 80087de:	b083      	sub	sp, #12
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	68da      	ldr	r2, [r3, #12]
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	f022 0201 	bic.w	r2, r2, #1
 80087f2:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	6a1a      	ldr	r2, [r3, #32]
 80087fa:	f241 1311 	movw	r3, #4369	; 0x1111
 80087fe:	4013      	ands	r3, r2
 8008800:	2b00      	cmp	r3, #0
 8008802:	d10f      	bne.n	8008824 <HAL_TIM_Base_Stop_IT+0x48>
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	6a1a      	ldr	r2, [r3, #32]
 800880a:	f240 4344 	movw	r3, #1092	; 0x444
 800880e:	4013      	ands	r3, r2
 8008810:	2b00      	cmp	r3, #0
 8008812:	d107      	bne.n	8008824 <HAL_TIM_Base_Stop_IT+0x48>
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	681a      	ldr	r2, [r3, #0]
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	f022 0201 	bic.w	r2, r2, #1
 8008822:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	2201      	movs	r2, #1
 8008828:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800882c:	2300      	movs	r3, #0
}
 800882e:	4618      	mov	r0, r3
 8008830:	370c      	adds	r7, #12
 8008832:	46bd      	mov	sp, r7
 8008834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008838:	4770      	bx	lr

0800883a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800883a:	b580      	push	{r7, lr}
 800883c:	b082      	sub	sp, #8
 800883e:	af00      	add	r7, sp, #0
 8008840:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	691b      	ldr	r3, [r3, #16]
 8008848:	f003 0302 	and.w	r3, r3, #2
 800884c:	2b02      	cmp	r3, #2
 800884e:	d122      	bne.n	8008896 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	68db      	ldr	r3, [r3, #12]
 8008856:	f003 0302 	and.w	r3, r3, #2
 800885a:	2b02      	cmp	r3, #2
 800885c:	d11b      	bne.n	8008896 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	f06f 0202 	mvn.w	r2, #2
 8008866:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	2201      	movs	r2, #1
 800886c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	699b      	ldr	r3, [r3, #24]
 8008874:	f003 0303 	and.w	r3, r3, #3
 8008878:	2b00      	cmp	r3, #0
 800887a:	d003      	beq.n	8008884 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800887c:	6878      	ldr	r0, [r7, #4]
 800887e:	f000 f9f9 	bl	8008c74 <HAL_TIM_IC_CaptureCallback>
 8008882:	e005      	b.n	8008890 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008884:	6878      	ldr	r0, [r7, #4]
 8008886:	f000 f9eb 	bl	8008c60 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800888a:	6878      	ldr	r0, [r7, #4]
 800888c:	f000 f9fc 	bl	8008c88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	2200      	movs	r2, #0
 8008894:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	691b      	ldr	r3, [r3, #16]
 800889c:	f003 0304 	and.w	r3, r3, #4
 80088a0:	2b04      	cmp	r3, #4
 80088a2:	d122      	bne.n	80088ea <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	68db      	ldr	r3, [r3, #12]
 80088aa:	f003 0304 	and.w	r3, r3, #4
 80088ae:	2b04      	cmp	r3, #4
 80088b0:	d11b      	bne.n	80088ea <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	f06f 0204 	mvn.w	r2, #4
 80088ba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	2202      	movs	r2, #2
 80088c0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	699b      	ldr	r3, [r3, #24]
 80088c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d003      	beq.n	80088d8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80088d0:	6878      	ldr	r0, [r7, #4]
 80088d2:	f000 f9cf 	bl	8008c74 <HAL_TIM_IC_CaptureCallback>
 80088d6:	e005      	b.n	80088e4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80088d8:	6878      	ldr	r0, [r7, #4]
 80088da:	f000 f9c1 	bl	8008c60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80088de:	6878      	ldr	r0, [r7, #4]
 80088e0:	f000 f9d2 	bl	8008c88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	2200      	movs	r2, #0
 80088e8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	691b      	ldr	r3, [r3, #16]
 80088f0:	f003 0308 	and.w	r3, r3, #8
 80088f4:	2b08      	cmp	r3, #8
 80088f6:	d122      	bne.n	800893e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	68db      	ldr	r3, [r3, #12]
 80088fe:	f003 0308 	and.w	r3, r3, #8
 8008902:	2b08      	cmp	r3, #8
 8008904:	d11b      	bne.n	800893e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	f06f 0208 	mvn.w	r2, #8
 800890e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	2204      	movs	r2, #4
 8008914:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	69db      	ldr	r3, [r3, #28]
 800891c:	f003 0303 	and.w	r3, r3, #3
 8008920:	2b00      	cmp	r3, #0
 8008922:	d003      	beq.n	800892c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008924:	6878      	ldr	r0, [r7, #4]
 8008926:	f000 f9a5 	bl	8008c74 <HAL_TIM_IC_CaptureCallback>
 800892a:	e005      	b.n	8008938 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800892c:	6878      	ldr	r0, [r7, #4]
 800892e:	f000 f997 	bl	8008c60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008932:	6878      	ldr	r0, [r7, #4]
 8008934:	f000 f9a8 	bl	8008c88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	2200      	movs	r2, #0
 800893c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	691b      	ldr	r3, [r3, #16]
 8008944:	f003 0310 	and.w	r3, r3, #16
 8008948:	2b10      	cmp	r3, #16
 800894a:	d122      	bne.n	8008992 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	68db      	ldr	r3, [r3, #12]
 8008952:	f003 0310 	and.w	r3, r3, #16
 8008956:	2b10      	cmp	r3, #16
 8008958:	d11b      	bne.n	8008992 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	f06f 0210 	mvn.w	r2, #16
 8008962:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	2208      	movs	r2, #8
 8008968:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	69db      	ldr	r3, [r3, #28]
 8008970:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008974:	2b00      	cmp	r3, #0
 8008976:	d003      	beq.n	8008980 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008978:	6878      	ldr	r0, [r7, #4]
 800897a:	f000 f97b 	bl	8008c74 <HAL_TIM_IC_CaptureCallback>
 800897e:	e005      	b.n	800898c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008980:	6878      	ldr	r0, [r7, #4]
 8008982:	f000 f96d 	bl	8008c60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008986:	6878      	ldr	r0, [r7, #4]
 8008988:	f000 f97e 	bl	8008c88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	2200      	movs	r2, #0
 8008990:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	691b      	ldr	r3, [r3, #16]
 8008998:	f003 0301 	and.w	r3, r3, #1
 800899c:	2b01      	cmp	r3, #1
 800899e:	d10e      	bne.n	80089be <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	68db      	ldr	r3, [r3, #12]
 80089a6:	f003 0301 	and.w	r3, r3, #1
 80089aa:	2b01      	cmp	r3, #1
 80089ac:	d107      	bne.n	80089be <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	f06f 0201 	mvn.w	r2, #1
 80089b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80089b8:	6878      	ldr	r0, [r7, #4]
 80089ba:	f7f8 fb77 	bl	80010ac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	691b      	ldr	r3, [r3, #16]
 80089c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80089c8:	2b80      	cmp	r3, #128	; 0x80
 80089ca:	d10e      	bne.n	80089ea <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	68db      	ldr	r3, [r3, #12]
 80089d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80089d6:	2b80      	cmp	r3, #128	; 0x80
 80089d8:	d107      	bne.n	80089ea <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80089e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80089e4:	6878      	ldr	r0, [r7, #4]
 80089e6:	f000 fb2d 	bl	8009044 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	691b      	ldr	r3, [r3, #16]
 80089f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80089f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80089f8:	d10e      	bne.n	8008a18 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	68db      	ldr	r3, [r3, #12]
 8008a00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a04:	2b80      	cmp	r3, #128	; 0x80
 8008a06:	d107      	bne.n	8008a18 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008a10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008a12:	6878      	ldr	r0, [r7, #4]
 8008a14:	f000 fb20 	bl	8009058 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	691b      	ldr	r3, [r3, #16]
 8008a1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a22:	2b40      	cmp	r3, #64	; 0x40
 8008a24:	d10e      	bne.n	8008a44 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	68db      	ldr	r3, [r3, #12]
 8008a2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a30:	2b40      	cmp	r3, #64	; 0x40
 8008a32:	d107      	bne.n	8008a44 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008a3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008a3e:	6878      	ldr	r0, [r7, #4]
 8008a40:	f000 f92c 	bl	8008c9c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	691b      	ldr	r3, [r3, #16]
 8008a4a:	f003 0320 	and.w	r3, r3, #32
 8008a4e:	2b20      	cmp	r3, #32
 8008a50:	d10e      	bne.n	8008a70 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	68db      	ldr	r3, [r3, #12]
 8008a58:	f003 0320 	and.w	r3, r3, #32
 8008a5c:	2b20      	cmp	r3, #32
 8008a5e:	d107      	bne.n	8008a70 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	f06f 0220 	mvn.w	r2, #32
 8008a68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008a6a:	6878      	ldr	r0, [r7, #4]
 8008a6c:	f000 fae0 	bl	8009030 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008a70:	bf00      	nop
 8008a72:	3708      	adds	r7, #8
 8008a74:	46bd      	mov	sp, r7
 8008a76:	bd80      	pop	{r7, pc}

08008a78 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008a78:	b580      	push	{r7, lr}
 8008a7a:	b084      	sub	sp, #16
 8008a7c:	af00      	add	r7, sp, #0
 8008a7e:	6078      	str	r0, [r7, #4]
 8008a80:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008a88:	2b01      	cmp	r3, #1
 8008a8a:	d101      	bne.n	8008a90 <HAL_TIM_ConfigClockSource+0x18>
 8008a8c:	2302      	movs	r3, #2
 8008a8e:	e0db      	b.n	8008c48 <HAL_TIM_ConfigClockSource+0x1d0>
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	2201      	movs	r2, #1
 8008a94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	2202      	movs	r2, #2
 8008a9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	689b      	ldr	r3, [r3, #8]
 8008aa6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008aa8:	68fa      	ldr	r2, [r7, #12]
 8008aaa:	4b69      	ldr	r3, [pc, #420]	; (8008c50 <HAL_TIM_ConfigClockSource+0x1d8>)
 8008aac:	4013      	ands	r3, r2
 8008aae:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008ab6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	68fa      	ldr	r2, [r7, #12]
 8008abe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008ac0:	683b      	ldr	r3, [r7, #0]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	4a63      	ldr	r2, [pc, #396]	; (8008c54 <HAL_TIM_ConfigClockSource+0x1dc>)
 8008ac6:	4293      	cmp	r3, r2
 8008ac8:	f000 80a9 	beq.w	8008c1e <HAL_TIM_ConfigClockSource+0x1a6>
 8008acc:	4a61      	ldr	r2, [pc, #388]	; (8008c54 <HAL_TIM_ConfigClockSource+0x1dc>)
 8008ace:	4293      	cmp	r3, r2
 8008ad0:	f200 80ae 	bhi.w	8008c30 <HAL_TIM_ConfigClockSource+0x1b8>
 8008ad4:	4a60      	ldr	r2, [pc, #384]	; (8008c58 <HAL_TIM_ConfigClockSource+0x1e0>)
 8008ad6:	4293      	cmp	r3, r2
 8008ad8:	f000 80a1 	beq.w	8008c1e <HAL_TIM_ConfigClockSource+0x1a6>
 8008adc:	4a5e      	ldr	r2, [pc, #376]	; (8008c58 <HAL_TIM_ConfigClockSource+0x1e0>)
 8008ade:	4293      	cmp	r3, r2
 8008ae0:	f200 80a6 	bhi.w	8008c30 <HAL_TIM_ConfigClockSource+0x1b8>
 8008ae4:	4a5d      	ldr	r2, [pc, #372]	; (8008c5c <HAL_TIM_ConfigClockSource+0x1e4>)
 8008ae6:	4293      	cmp	r3, r2
 8008ae8:	f000 8099 	beq.w	8008c1e <HAL_TIM_ConfigClockSource+0x1a6>
 8008aec:	4a5b      	ldr	r2, [pc, #364]	; (8008c5c <HAL_TIM_ConfigClockSource+0x1e4>)
 8008aee:	4293      	cmp	r3, r2
 8008af0:	f200 809e 	bhi.w	8008c30 <HAL_TIM_ConfigClockSource+0x1b8>
 8008af4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8008af8:	f000 8091 	beq.w	8008c1e <HAL_TIM_ConfigClockSource+0x1a6>
 8008afc:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8008b00:	f200 8096 	bhi.w	8008c30 <HAL_TIM_ConfigClockSource+0x1b8>
 8008b04:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008b08:	f000 8089 	beq.w	8008c1e <HAL_TIM_ConfigClockSource+0x1a6>
 8008b0c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008b10:	f200 808e 	bhi.w	8008c30 <HAL_TIM_ConfigClockSource+0x1b8>
 8008b14:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008b18:	d03e      	beq.n	8008b98 <HAL_TIM_ConfigClockSource+0x120>
 8008b1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008b1e:	f200 8087 	bhi.w	8008c30 <HAL_TIM_ConfigClockSource+0x1b8>
 8008b22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b26:	f000 8085 	beq.w	8008c34 <HAL_TIM_ConfigClockSource+0x1bc>
 8008b2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b2e:	d87f      	bhi.n	8008c30 <HAL_TIM_ConfigClockSource+0x1b8>
 8008b30:	2b70      	cmp	r3, #112	; 0x70
 8008b32:	d01a      	beq.n	8008b6a <HAL_TIM_ConfigClockSource+0xf2>
 8008b34:	2b70      	cmp	r3, #112	; 0x70
 8008b36:	d87b      	bhi.n	8008c30 <HAL_TIM_ConfigClockSource+0x1b8>
 8008b38:	2b60      	cmp	r3, #96	; 0x60
 8008b3a:	d050      	beq.n	8008bde <HAL_TIM_ConfigClockSource+0x166>
 8008b3c:	2b60      	cmp	r3, #96	; 0x60
 8008b3e:	d877      	bhi.n	8008c30 <HAL_TIM_ConfigClockSource+0x1b8>
 8008b40:	2b50      	cmp	r3, #80	; 0x50
 8008b42:	d03c      	beq.n	8008bbe <HAL_TIM_ConfigClockSource+0x146>
 8008b44:	2b50      	cmp	r3, #80	; 0x50
 8008b46:	d873      	bhi.n	8008c30 <HAL_TIM_ConfigClockSource+0x1b8>
 8008b48:	2b40      	cmp	r3, #64	; 0x40
 8008b4a:	d058      	beq.n	8008bfe <HAL_TIM_ConfigClockSource+0x186>
 8008b4c:	2b40      	cmp	r3, #64	; 0x40
 8008b4e:	d86f      	bhi.n	8008c30 <HAL_TIM_ConfigClockSource+0x1b8>
 8008b50:	2b30      	cmp	r3, #48	; 0x30
 8008b52:	d064      	beq.n	8008c1e <HAL_TIM_ConfigClockSource+0x1a6>
 8008b54:	2b30      	cmp	r3, #48	; 0x30
 8008b56:	d86b      	bhi.n	8008c30 <HAL_TIM_ConfigClockSource+0x1b8>
 8008b58:	2b20      	cmp	r3, #32
 8008b5a:	d060      	beq.n	8008c1e <HAL_TIM_ConfigClockSource+0x1a6>
 8008b5c:	2b20      	cmp	r3, #32
 8008b5e:	d867      	bhi.n	8008c30 <HAL_TIM_ConfigClockSource+0x1b8>
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d05c      	beq.n	8008c1e <HAL_TIM_ConfigClockSource+0x1a6>
 8008b64:	2b10      	cmp	r3, #16
 8008b66:	d05a      	beq.n	8008c1e <HAL_TIM_ConfigClockSource+0x1a6>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8008b68:	e062      	b.n	8008c30 <HAL_TIM_ConfigClockSource+0x1b8>
      TIM_ETR_SetConfig(htim->Instance,
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	6818      	ldr	r0, [r3, #0]
 8008b6e:	683b      	ldr	r3, [r7, #0]
 8008b70:	6899      	ldr	r1, [r3, #8]
 8008b72:	683b      	ldr	r3, [r7, #0]
 8008b74:	685a      	ldr	r2, [r3, #4]
 8008b76:	683b      	ldr	r3, [r7, #0]
 8008b78:	68db      	ldr	r3, [r3, #12]
 8008b7a:	f000 f9b1 	bl	8008ee0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	689b      	ldr	r3, [r3, #8]
 8008b84:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008b8c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	68fa      	ldr	r2, [r7, #12]
 8008b94:	609a      	str	r2, [r3, #8]
      break;
 8008b96:	e04e      	b.n	8008c36 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_ETR_SetConfig(htim->Instance,
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	6818      	ldr	r0, [r3, #0]
 8008b9c:	683b      	ldr	r3, [r7, #0]
 8008b9e:	6899      	ldr	r1, [r3, #8]
 8008ba0:	683b      	ldr	r3, [r7, #0]
 8008ba2:	685a      	ldr	r2, [r3, #4]
 8008ba4:	683b      	ldr	r3, [r7, #0]
 8008ba6:	68db      	ldr	r3, [r3, #12]
 8008ba8:	f000 f99a 	bl	8008ee0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	689a      	ldr	r2, [r3, #8]
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008bba:	609a      	str	r2, [r3, #8]
      break;
 8008bbc:	e03b      	b.n	8008c36 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	6818      	ldr	r0, [r3, #0]
 8008bc2:	683b      	ldr	r3, [r7, #0]
 8008bc4:	6859      	ldr	r1, [r3, #4]
 8008bc6:	683b      	ldr	r3, [r7, #0]
 8008bc8:	68db      	ldr	r3, [r3, #12]
 8008bca:	461a      	mov	r2, r3
 8008bcc:	f000 f90a 	bl	8008de4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	2150      	movs	r1, #80	; 0x50
 8008bd6:	4618      	mov	r0, r3
 8008bd8:	f000 f964 	bl	8008ea4 <TIM_ITRx_SetConfig>
      break;
 8008bdc:	e02b      	b.n	8008c36 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	6818      	ldr	r0, [r3, #0]
 8008be2:	683b      	ldr	r3, [r7, #0]
 8008be4:	6859      	ldr	r1, [r3, #4]
 8008be6:	683b      	ldr	r3, [r7, #0]
 8008be8:	68db      	ldr	r3, [r3, #12]
 8008bea:	461a      	mov	r2, r3
 8008bec:	f000 f929 	bl	8008e42 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	2160      	movs	r1, #96	; 0x60
 8008bf6:	4618      	mov	r0, r3
 8008bf8:	f000 f954 	bl	8008ea4 <TIM_ITRx_SetConfig>
      break;
 8008bfc:	e01b      	b.n	8008c36 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	6818      	ldr	r0, [r3, #0]
 8008c02:	683b      	ldr	r3, [r7, #0]
 8008c04:	6859      	ldr	r1, [r3, #4]
 8008c06:	683b      	ldr	r3, [r7, #0]
 8008c08:	68db      	ldr	r3, [r3, #12]
 8008c0a:	461a      	mov	r2, r3
 8008c0c:	f000 f8ea 	bl	8008de4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	2140      	movs	r1, #64	; 0x40
 8008c16:	4618      	mov	r0, r3
 8008c18:	f000 f944 	bl	8008ea4 <TIM_ITRx_SetConfig>
      break;
 8008c1c:	e00b      	b.n	8008c36 <HAL_TIM_ConfigClockSource+0x1be>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681a      	ldr	r2, [r3, #0]
 8008c22:	683b      	ldr	r3, [r7, #0]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	4619      	mov	r1, r3
 8008c28:	4610      	mov	r0, r2
 8008c2a:	f000 f93b 	bl	8008ea4 <TIM_ITRx_SetConfig>
        break;
 8008c2e:	e002      	b.n	8008c36 <HAL_TIM_ConfigClockSource+0x1be>
      break;
 8008c30:	bf00      	nop
 8008c32:	e000      	b.n	8008c36 <HAL_TIM_ConfigClockSource+0x1be>
      break;
 8008c34:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	2201      	movs	r2, #1
 8008c3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	2200      	movs	r2, #0
 8008c42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008c46:	2300      	movs	r3, #0
}
 8008c48:	4618      	mov	r0, r3
 8008c4a:	3710      	adds	r7, #16
 8008c4c:	46bd      	mov	sp, r7
 8008c4e:	bd80      	pop	{r7, pc}
 8008c50:	ffceff88 	.word	0xffceff88
 8008c54:	00100040 	.word	0x00100040
 8008c58:	00100030 	.word	0x00100030
 8008c5c:	00100020 	.word	0x00100020

08008c60 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008c60:	b480      	push	{r7}
 8008c62:	b083      	sub	sp, #12
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008c68:	bf00      	nop
 8008c6a:	370c      	adds	r7, #12
 8008c6c:	46bd      	mov	sp, r7
 8008c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c72:	4770      	bx	lr

08008c74 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008c74:	b480      	push	{r7}
 8008c76:	b083      	sub	sp, #12
 8008c78:	af00      	add	r7, sp, #0
 8008c7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008c7c:	bf00      	nop
 8008c7e:	370c      	adds	r7, #12
 8008c80:	46bd      	mov	sp, r7
 8008c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c86:	4770      	bx	lr

08008c88 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008c88:	b480      	push	{r7}
 8008c8a:	b083      	sub	sp, #12
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008c90:	bf00      	nop
 8008c92:	370c      	adds	r7, #12
 8008c94:	46bd      	mov	sp, r7
 8008c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c9a:	4770      	bx	lr

08008c9c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008c9c:	b480      	push	{r7}
 8008c9e:	b083      	sub	sp, #12
 8008ca0:	af00      	add	r7, sp, #0
 8008ca2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008ca4:	bf00      	nop
 8008ca6:	370c      	adds	r7, #12
 8008ca8:	46bd      	mov	sp, r7
 8008caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cae:	4770      	bx	lr

08008cb0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008cb0:	b480      	push	{r7}
 8008cb2:	b085      	sub	sp, #20
 8008cb4:	af00      	add	r7, sp, #0
 8008cb6:	6078      	str	r0, [r7, #4]
 8008cb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	4a40      	ldr	r2, [pc, #256]	; (8008dc4 <TIM_Base_SetConfig+0x114>)
 8008cc4:	4293      	cmp	r3, r2
 8008cc6:	d013      	beq.n	8008cf0 <TIM_Base_SetConfig+0x40>
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008cce:	d00f      	beq.n	8008cf0 <TIM_Base_SetConfig+0x40>
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	4a3d      	ldr	r2, [pc, #244]	; (8008dc8 <TIM_Base_SetConfig+0x118>)
 8008cd4:	4293      	cmp	r3, r2
 8008cd6:	d00b      	beq.n	8008cf0 <TIM_Base_SetConfig+0x40>
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	4a3c      	ldr	r2, [pc, #240]	; (8008dcc <TIM_Base_SetConfig+0x11c>)
 8008cdc:	4293      	cmp	r3, r2
 8008cde:	d007      	beq.n	8008cf0 <TIM_Base_SetConfig+0x40>
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	4a3b      	ldr	r2, [pc, #236]	; (8008dd0 <TIM_Base_SetConfig+0x120>)
 8008ce4:	4293      	cmp	r3, r2
 8008ce6:	d003      	beq.n	8008cf0 <TIM_Base_SetConfig+0x40>
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	4a3a      	ldr	r2, [pc, #232]	; (8008dd4 <TIM_Base_SetConfig+0x124>)
 8008cec:	4293      	cmp	r3, r2
 8008cee:	d108      	bne.n	8008d02 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008cf6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008cf8:	683b      	ldr	r3, [r7, #0]
 8008cfa:	685b      	ldr	r3, [r3, #4]
 8008cfc:	68fa      	ldr	r2, [r7, #12]
 8008cfe:	4313      	orrs	r3, r2
 8008d00:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	4a2f      	ldr	r2, [pc, #188]	; (8008dc4 <TIM_Base_SetConfig+0x114>)
 8008d06:	4293      	cmp	r3, r2
 8008d08:	d01f      	beq.n	8008d4a <TIM_Base_SetConfig+0x9a>
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008d10:	d01b      	beq.n	8008d4a <TIM_Base_SetConfig+0x9a>
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	4a2c      	ldr	r2, [pc, #176]	; (8008dc8 <TIM_Base_SetConfig+0x118>)
 8008d16:	4293      	cmp	r3, r2
 8008d18:	d017      	beq.n	8008d4a <TIM_Base_SetConfig+0x9a>
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	4a2b      	ldr	r2, [pc, #172]	; (8008dcc <TIM_Base_SetConfig+0x11c>)
 8008d1e:	4293      	cmp	r3, r2
 8008d20:	d013      	beq.n	8008d4a <TIM_Base_SetConfig+0x9a>
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	4a2a      	ldr	r2, [pc, #168]	; (8008dd0 <TIM_Base_SetConfig+0x120>)
 8008d26:	4293      	cmp	r3, r2
 8008d28:	d00f      	beq.n	8008d4a <TIM_Base_SetConfig+0x9a>
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	4a29      	ldr	r2, [pc, #164]	; (8008dd4 <TIM_Base_SetConfig+0x124>)
 8008d2e:	4293      	cmp	r3, r2
 8008d30:	d00b      	beq.n	8008d4a <TIM_Base_SetConfig+0x9a>
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	4a28      	ldr	r2, [pc, #160]	; (8008dd8 <TIM_Base_SetConfig+0x128>)
 8008d36:	4293      	cmp	r3, r2
 8008d38:	d007      	beq.n	8008d4a <TIM_Base_SetConfig+0x9a>
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	4a27      	ldr	r2, [pc, #156]	; (8008ddc <TIM_Base_SetConfig+0x12c>)
 8008d3e:	4293      	cmp	r3, r2
 8008d40:	d003      	beq.n	8008d4a <TIM_Base_SetConfig+0x9a>
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	4a26      	ldr	r2, [pc, #152]	; (8008de0 <TIM_Base_SetConfig+0x130>)
 8008d46:	4293      	cmp	r3, r2
 8008d48:	d108      	bne.n	8008d5c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008d50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008d52:	683b      	ldr	r3, [r7, #0]
 8008d54:	68db      	ldr	r3, [r3, #12]
 8008d56:	68fa      	ldr	r2, [r7, #12]
 8008d58:	4313      	orrs	r3, r2
 8008d5a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008d62:	683b      	ldr	r3, [r7, #0]
 8008d64:	695b      	ldr	r3, [r3, #20]
 8008d66:	4313      	orrs	r3, r2
 8008d68:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	68fa      	ldr	r2, [r7, #12]
 8008d6e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008d70:	683b      	ldr	r3, [r7, #0]
 8008d72:	689a      	ldr	r2, [r3, #8]
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008d78:	683b      	ldr	r3, [r7, #0]
 8008d7a:	681a      	ldr	r2, [r3, #0]
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	4a10      	ldr	r2, [pc, #64]	; (8008dc4 <TIM_Base_SetConfig+0x114>)
 8008d84:	4293      	cmp	r3, r2
 8008d86:	d00f      	beq.n	8008da8 <TIM_Base_SetConfig+0xf8>
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	4a12      	ldr	r2, [pc, #72]	; (8008dd4 <TIM_Base_SetConfig+0x124>)
 8008d8c:	4293      	cmp	r3, r2
 8008d8e:	d00b      	beq.n	8008da8 <TIM_Base_SetConfig+0xf8>
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	4a11      	ldr	r2, [pc, #68]	; (8008dd8 <TIM_Base_SetConfig+0x128>)
 8008d94:	4293      	cmp	r3, r2
 8008d96:	d007      	beq.n	8008da8 <TIM_Base_SetConfig+0xf8>
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	4a10      	ldr	r2, [pc, #64]	; (8008ddc <TIM_Base_SetConfig+0x12c>)
 8008d9c:	4293      	cmp	r3, r2
 8008d9e:	d003      	beq.n	8008da8 <TIM_Base_SetConfig+0xf8>
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	4a0f      	ldr	r2, [pc, #60]	; (8008de0 <TIM_Base_SetConfig+0x130>)
 8008da4:	4293      	cmp	r3, r2
 8008da6:	d103      	bne.n	8008db0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008da8:	683b      	ldr	r3, [r7, #0]
 8008daa:	691a      	ldr	r2, [r3, #16]
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	2201      	movs	r2, #1
 8008db4:	615a      	str	r2, [r3, #20]
}
 8008db6:	bf00      	nop
 8008db8:	3714      	adds	r7, #20
 8008dba:	46bd      	mov	sp, r7
 8008dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc0:	4770      	bx	lr
 8008dc2:	bf00      	nop
 8008dc4:	40010000 	.word	0x40010000
 8008dc8:	40000400 	.word	0x40000400
 8008dcc:	40000800 	.word	0x40000800
 8008dd0:	40000c00 	.word	0x40000c00
 8008dd4:	40010400 	.word	0x40010400
 8008dd8:	40014000 	.word	0x40014000
 8008ddc:	40014400 	.word	0x40014400
 8008de0:	40014800 	.word	0x40014800

08008de4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008de4:	b480      	push	{r7}
 8008de6:	b087      	sub	sp, #28
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	60f8      	str	r0, [r7, #12]
 8008dec:	60b9      	str	r1, [r7, #8]
 8008dee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	6a1b      	ldr	r3, [r3, #32]
 8008df4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	6a1b      	ldr	r3, [r3, #32]
 8008dfa:	f023 0201 	bic.w	r2, r3, #1
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	699b      	ldr	r3, [r3, #24]
 8008e06:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008e08:	693b      	ldr	r3, [r7, #16]
 8008e0a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008e0e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	011b      	lsls	r3, r3, #4
 8008e14:	693a      	ldr	r2, [r7, #16]
 8008e16:	4313      	orrs	r3, r2
 8008e18:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008e1a:	697b      	ldr	r3, [r7, #20]
 8008e1c:	f023 030a 	bic.w	r3, r3, #10
 8008e20:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008e22:	697a      	ldr	r2, [r7, #20]
 8008e24:	68bb      	ldr	r3, [r7, #8]
 8008e26:	4313      	orrs	r3, r2
 8008e28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	693a      	ldr	r2, [r7, #16]
 8008e2e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	697a      	ldr	r2, [r7, #20]
 8008e34:	621a      	str	r2, [r3, #32]
}
 8008e36:	bf00      	nop
 8008e38:	371c      	adds	r7, #28
 8008e3a:	46bd      	mov	sp, r7
 8008e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e40:	4770      	bx	lr

08008e42 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008e42:	b480      	push	{r7}
 8008e44:	b087      	sub	sp, #28
 8008e46:	af00      	add	r7, sp, #0
 8008e48:	60f8      	str	r0, [r7, #12]
 8008e4a:	60b9      	str	r1, [r7, #8]
 8008e4c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	6a1b      	ldr	r3, [r3, #32]
 8008e52:	f023 0210 	bic.w	r2, r3, #16
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	699b      	ldr	r3, [r3, #24]
 8008e5e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	6a1b      	ldr	r3, [r3, #32]
 8008e64:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008e66:	697b      	ldr	r3, [r7, #20]
 8008e68:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008e6c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	031b      	lsls	r3, r3, #12
 8008e72:	697a      	ldr	r2, [r7, #20]
 8008e74:	4313      	orrs	r3, r2
 8008e76:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008e78:	693b      	ldr	r3, [r7, #16]
 8008e7a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008e7e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008e80:	68bb      	ldr	r3, [r7, #8]
 8008e82:	011b      	lsls	r3, r3, #4
 8008e84:	693a      	ldr	r2, [r7, #16]
 8008e86:	4313      	orrs	r3, r2
 8008e88:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	697a      	ldr	r2, [r7, #20]
 8008e8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	693a      	ldr	r2, [r7, #16]
 8008e94:	621a      	str	r2, [r3, #32]
}
 8008e96:	bf00      	nop
 8008e98:	371c      	adds	r7, #28
 8008e9a:	46bd      	mov	sp, r7
 8008e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea0:	4770      	bx	lr
	...

08008ea4 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008ea4:	b480      	push	{r7}
 8008ea6:	b085      	sub	sp, #20
 8008ea8:	af00      	add	r7, sp, #0
 8008eaa:	6078      	str	r0, [r7, #4]
 8008eac:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	689b      	ldr	r3, [r3, #8]
 8008eb2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008eb4:	68fa      	ldr	r2, [r7, #12]
 8008eb6:	4b09      	ldr	r3, [pc, #36]	; (8008edc <TIM_ITRx_SetConfig+0x38>)
 8008eb8:	4013      	ands	r3, r2
 8008eba:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008ebc:	683a      	ldr	r2, [r7, #0]
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	4313      	orrs	r3, r2
 8008ec2:	f043 0307 	orr.w	r3, r3, #7
 8008ec6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	68fa      	ldr	r2, [r7, #12]
 8008ecc:	609a      	str	r2, [r3, #8]
}
 8008ece:	bf00      	nop
 8008ed0:	3714      	adds	r7, #20
 8008ed2:	46bd      	mov	sp, r7
 8008ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed8:	4770      	bx	lr
 8008eda:	bf00      	nop
 8008edc:	ffcfff8f 	.word	0xffcfff8f

08008ee0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008ee0:	b480      	push	{r7}
 8008ee2:	b087      	sub	sp, #28
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	60f8      	str	r0, [r7, #12]
 8008ee8:	60b9      	str	r1, [r7, #8]
 8008eea:	607a      	str	r2, [r7, #4]
 8008eec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	689b      	ldr	r3, [r3, #8]
 8008ef2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008ef4:	697b      	ldr	r3, [r7, #20]
 8008ef6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008efa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008efc:	683b      	ldr	r3, [r7, #0]
 8008efe:	021a      	lsls	r2, r3, #8
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	431a      	orrs	r2, r3
 8008f04:	68bb      	ldr	r3, [r7, #8]
 8008f06:	4313      	orrs	r3, r2
 8008f08:	697a      	ldr	r2, [r7, #20]
 8008f0a:	4313      	orrs	r3, r2
 8008f0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	697a      	ldr	r2, [r7, #20]
 8008f12:	609a      	str	r2, [r3, #8]
}
 8008f14:	bf00      	nop
 8008f16:	371c      	adds	r7, #28
 8008f18:	46bd      	mov	sp, r7
 8008f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f1e:	4770      	bx	lr

08008f20 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008f20:	b480      	push	{r7}
 8008f22:	b085      	sub	sp, #20
 8008f24:	af00      	add	r7, sp, #0
 8008f26:	6078      	str	r0, [r7, #4]
 8008f28:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008f30:	2b01      	cmp	r3, #1
 8008f32:	d101      	bne.n	8008f38 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008f34:	2302      	movs	r3, #2
 8008f36:	e068      	b.n	800900a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	2201      	movs	r2, #1
 8008f3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	2202      	movs	r2, #2
 8008f44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	685b      	ldr	r3, [r3, #4]
 8008f4e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	689b      	ldr	r3, [r3, #8]
 8008f56:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	4a2e      	ldr	r2, [pc, #184]	; (8009018 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8008f5e:	4293      	cmp	r3, r2
 8008f60:	d004      	beq.n	8008f6c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	4a2d      	ldr	r2, [pc, #180]	; (800901c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008f68:	4293      	cmp	r3, r2
 8008f6a:	d108      	bne.n	8008f7e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008f72:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008f74:	683b      	ldr	r3, [r7, #0]
 8008f76:	685b      	ldr	r3, [r3, #4]
 8008f78:	68fa      	ldr	r2, [r7, #12]
 8008f7a:	4313      	orrs	r3, r2
 8008f7c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f84:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008f86:	683b      	ldr	r3, [r7, #0]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	68fa      	ldr	r2, [r7, #12]
 8008f8c:	4313      	orrs	r3, r2
 8008f8e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	68fa      	ldr	r2, [r7, #12]
 8008f96:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	4a1e      	ldr	r2, [pc, #120]	; (8009018 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8008f9e:	4293      	cmp	r3, r2
 8008fa0:	d01d      	beq.n	8008fde <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008faa:	d018      	beq.n	8008fde <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	4a1b      	ldr	r2, [pc, #108]	; (8009020 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008fb2:	4293      	cmp	r3, r2
 8008fb4:	d013      	beq.n	8008fde <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	4a1a      	ldr	r2, [pc, #104]	; (8009024 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008fbc:	4293      	cmp	r3, r2
 8008fbe:	d00e      	beq.n	8008fde <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	4a18      	ldr	r2, [pc, #96]	; (8009028 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008fc6:	4293      	cmp	r3, r2
 8008fc8:	d009      	beq.n	8008fde <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	4a13      	ldr	r2, [pc, #76]	; (800901c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008fd0:	4293      	cmp	r3, r2
 8008fd2:	d004      	beq.n	8008fde <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	4a14      	ldr	r2, [pc, #80]	; (800902c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008fda:	4293      	cmp	r3, r2
 8008fdc:	d10c      	bne.n	8008ff8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008fde:	68bb      	ldr	r3, [r7, #8]
 8008fe0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008fe4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008fe6:	683b      	ldr	r3, [r7, #0]
 8008fe8:	689b      	ldr	r3, [r3, #8]
 8008fea:	68ba      	ldr	r2, [r7, #8]
 8008fec:	4313      	orrs	r3, r2
 8008fee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	68ba      	ldr	r2, [r7, #8]
 8008ff6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	2201      	movs	r2, #1
 8008ffc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	2200      	movs	r2, #0
 8009004:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009008:	2300      	movs	r3, #0
}
 800900a:	4618      	mov	r0, r3
 800900c:	3714      	adds	r7, #20
 800900e:	46bd      	mov	sp, r7
 8009010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009014:	4770      	bx	lr
 8009016:	bf00      	nop
 8009018:	40010000 	.word	0x40010000
 800901c:	40010400 	.word	0x40010400
 8009020:	40000400 	.word	0x40000400
 8009024:	40000800 	.word	0x40000800
 8009028:	40000c00 	.word	0x40000c00
 800902c:	40001800 	.word	0x40001800

08009030 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009030:	b480      	push	{r7}
 8009032:	b083      	sub	sp, #12
 8009034:	af00      	add	r7, sp, #0
 8009036:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009038:	bf00      	nop
 800903a:	370c      	adds	r7, #12
 800903c:	46bd      	mov	sp, r7
 800903e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009042:	4770      	bx	lr

08009044 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009044:	b480      	push	{r7}
 8009046:	b083      	sub	sp, #12
 8009048:	af00      	add	r7, sp, #0
 800904a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800904c:	bf00      	nop
 800904e:	370c      	adds	r7, #12
 8009050:	46bd      	mov	sp, r7
 8009052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009056:	4770      	bx	lr

08009058 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009058:	b480      	push	{r7}
 800905a:	b083      	sub	sp, #12
 800905c:	af00      	add	r7, sp, #0
 800905e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009060:	bf00      	nop
 8009062:	370c      	adds	r7, #12
 8009064:	46bd      	mov	sp, r7
 8009066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800906a:	4770      	bx	lr

0800906c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800906c:	b580      	push	{r7, lr}
 800906e:	b082      	sub	sp, #8
 8009070:	af00      	add	r7, sp, #0
 8009072:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	2b00      	cmp	r3, #0
 8009078:	d101      	bne.n	800907e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800907a:	2301      	movs	r3, #1
 800907c:	e042      	b.n	8009104 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009084:	2b00      	cmp	r3, #0
 8009086:	d106      	bne.n	8009096 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	2200      	movs	r2, #0
 800908c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009090:	6878      	ldr	r0, [r7, #4]
 8009092:	f7f8 f88b 	bl	80011ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	2224      	movs	r2, #36	; 0x24
 800909a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	681a      	ldr	r2, [r3, #0]
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	f022 0201 	bic.w	r2, r2, #1
 80090ac:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80090ae:	6878      	ldr	r0, [r7, #4]
 80090b0:	f000 fb90 	bl	80097d4 <UART_SetConfig>
 80090b4:	4603      	mov	r3, r0
 80090b6:	2b01      	cmp	r3, #1
 80090b8:	d101      	bne.n	80090be <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80090ba:	2301      	movs	r3, #1
 80090bc:	e022      	b.n	8009104 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d002      	beq.n	80090cc <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80090c6:	6878      	ldr	r0, [r7, #4]
 80090c8:	f001 f8e4 	bl	800a294 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	685a      	ldr	r2, [r3, #4]
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80090da:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	689a      	ldr	r2, [r3, #8]
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80090ea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	681a      	ldr	r2, [r3, #0]
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	f042 0201 	orr.w	r2, r2, #1
 80090fa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80090fc:	6878      	ldr	r0, [r7, #4]
 80090fe:	f001 f96b 	bl	800a3d8 <UART_CheckIdleState>
 8009102:	4603      	mov	r3, r0
}
 8009104:	4618      	mov	r0, r3
 8009106:	3708      	adds	r7, #8
 8009108:	46bd      	mov	sp, r7
 800910a:	bd80      	pop	{r7, pc}

0800910c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800910c:	b580      	push	{r7, lr}
 800910e:	b084      	sub	sp, #16
 8009110:	af00      	add	r7, sp, #0
 8009112:	60f8      	str	r0, [r7, #12]
 8009114:	60b9      	str	r1, [r7, #8]
 8009116:	4613      	mov	r3, r2
 8009118:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009120:	2b20      	cmp	r3, #32
 8009122:	d168      	bne.n	80091f6 <HAL_UART_Transmit_DMA+0xea>
  {
    if ((pData == NULL) || (Size == 0U))
 8009124:	68bb      	ldr	r3, [r7, #8]
 8009126:	2b00      	cmp	r3, #0
 8009128:	d002      	beq.n	8009130 <HAL_UART_Transmit_DMA+0x24>
 800912a:	88fb      	ldrh	r3, [r7, #6]
 800912c:	2b00      	cmp	r3, #0
 800912e:	d101      	bne.n	8009134 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8009130:	2301      	movs	r3, #1
 8009132:	e061      	b.n	80091f8 <HAL_UART_Transmit_DMA+0xec>
    }

    __HAL_LOCK(huart);
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800913a:	2b01      	cmp	r3, #1
 800913c:	d101      	bne.n	8009142 <HAL_UART_Transmit_DMA+0x36>
 800913e:	2302      	movs	r3, #2
 8009140:	e05a      	b.n	80091f8 <HAL_UART_Transmit_DMA+0xec>
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	2201      	movs	r2, #1
 8009146:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	68ba      	ldr	r2, [r7, #8]
 800914e:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	88fa      	ldrh	r2, [r7, #6]
 8009154:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	88fa      	ldrh	r2, [r7, #6]
 800915c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	2200      	movs	r2, #0
 8009164:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	2221      	movs	r2, #33	; 0x21
 800916c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009174:	2b00      	cmp	r3, #0
 8009176:	d02c      	beq.n	80091d2 <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800917c:	4a20      	ldr	r2, [pc, #128]	; (8009200 <HAL_UART_Transmit_DMA+0xf4>)
 800917e:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009184:	4a1f      	ldr	r2, [pc, #124]	; (8009204 <HAL_UART_Transmit_DMA+0xf8>)
 8009186:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800918c:	4a1e      	ldr	r2, [pc, #120]	; (8009208 <HAL_UART_Transmit_DMA+0xfc>)
 800918e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009194:	2200      	movs	r2, #0
 8009196:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80091a0:	4619      	mov	r1, r3
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	3328      	adds	r3, #40	; 0x28
 80091a8:	461a      	mov	r2, r3
 80091aa:	88fb      	ldrh	r3, [r7, #6]
 80091ac:	f7f8 ffee 	bl	800218c <HAL_DMA_Start_IT>
 80091b0:	4603      	mov	r3, r0
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d00d      	beq.n	80091d2 <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	2210      	movs	r2, #16
 80091ba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	2200      	movs	r2, #0
 80091c2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	2220      	movs	r2, #32
 80091ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 80091ce:	2301      	movs	r3, #1
 80091d0:	e012      	b.n	80091f8 <HAL_UART_Transmit_DMA+0xec>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	2240      	movs	r2, #64	; 0x40
 80091d8:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	2200      	movs	r2, #0
 80091de:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	689a      	ldr	r2, [r3, #8]
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80091f0:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 80091f2:	2300      	movs	r3, #0
 80091f4:	e000      	b.n	80091f8 <HAL_UART_Transmit_DMA+0xec>
  }
  else
  {
    return HAL_BUSY;
 80091f6:	2302      	movs	r3, #2
  }
}
 80091f8:	4618      	mov	r0, r3
 80091fa:	3710      	adds	r7, #16
 80091fc:	46bd      	mov	sp, r7
 80091fe:	bd80      	pop	{r7, pc}
 8009200:	0800a611 	.word	0x0800a611
 8009204:	0800a661 	.word	0x0800a661
 8009208:	0800a67d 	.word	0x0800a67d

0800920c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800920c:	b580      	push	{r7, lr}
 800920e:	b088      	sub	sp, #32
 8009210:	af00      	add	r7, sp, #0
 8009212:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	69db      	ldr	r3, [r3, #28]
 800921a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	689b      	ldr	r3, [r3, #8]
 800922a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800922c:	69fa      	ldr	r2, [r7, #28]
 800922e:	f640 030f 	movw	r3, #2063	; 0x80f
 8009232:	4013      	ands	r3, r2
 8009234:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8009236:	693b      	ldr	r3, [r7, #16]
 8009238:	2b00      	cmp	r3, #0
 800923a:	d118      	bne.n	800926e <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800923c:	69fb      	ldr	r3, [r7, #28]
 800923e:	f003 0320 	and.w	r3, r3, #32
 8009242:	2b00      	cmp	r3, #0
 8009244:	d013      	beq.n	800926e <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009246:	69bb      	ldr	r3, [r7, #24]
 8009248:	f003 0320 	and.w	r3, r3, #32
 800924c:	2b00      	cmp	r3, #0
 800924e:	d104      	bne.n	800925a <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009250:	697b      	ldr	r3, [r7, #20]
 8009252:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009256:	2b00      	cmp	r3, #0
 8009258:	d009      	beq.n	800926e <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800925e:	2b00      	cmp	r3, #0
 8009260:	f000 8282 	beq.w	8009768 <HAL_UART_IRQHandler+0x55c>
      {
        huart->RxISR(huart);
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009268:	6878      	ldr	r0, [r7, #4]
 800926a:	4798      	blx	r3
      }
      return;
 800926c:	e27c      	b.n	8009768 <HAL_UART_IRQHandler+0x55c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800926e:	693b      	ldr	r3, [r7, #16]
 8009270:	2b00      	cmp	r3, #0
 8009272:	f000 80ef 	beq.w	8009454 <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8009276:	697a      	ldr	r2, [r7, #20]
 8009278:	4b73      	ldr	r3, [pc, #460]	; (8009448 <HAL_UART_IRQHandler+0x23c>)
 800927a:	4013      	ands	r3, r2
 800927c:	2b00      	cmp	r3, #0
 800927e:	d105      	bne.n	800928c <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8009280:	69ba      	ldr	r2, [r7, #24]
 8009282:	4b72      	ldr	r3, [pc, #456]	; (800944c <HAL_UART_IRQHandler+0x240>)
 8009284:	4013      	ands	r3, r2
 8009286:	2b00      	cmp	r3, #0
 8009288:	f000 80e4 	beq.w	8009454 <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800928c:	69fb      	ldr	r3, [r7, #28]
 800928e:	f003 0301 	and.w	r3, r3, #1
 8009292:	2b00      	cmp	r3, #0
 8009294:	d010      	beq.n	80092b8 <HAL_UART_IRQHandler+0xac>
 8009296:	69bb      	ldr	r3, [r7, #24]
 8009298:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800929c:	2b00      	cmp	r3, #0
 800929e:	d00b      	beq.n	80092b8 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	2201      	movs	r2, #1
 80092a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80092ae:	f043 0201 	orr.w	r2, r3, #1
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80092b8:	69fb      	ldr	r3, [r7, #28]
 80092ba:	f003 0302 	and.w	r3, r3, #2
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d010      	beq.n	80092e4 <HAL_UART_IRQHandler+0xd8>
 80092c2:	697b      	ldr	r3, [r7, #20]
 80092c4:	f003 0301 	and.w	r3, r3, #1
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d00b      	beq.n	80092e4 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	2202      	movs	r2, #2
 80092d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80092da:	f043 0204 	orr.w	r2, r3, #4
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80092e4:	69fb      	ldr	r3, [r7, #28]
 80092e6:	f003 0304 	and.w	r3, r3, #4
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d010      	beq.n	8009310 <HAL_UART_IRQHandler+0x104>
 80092ee:	697b      	ldr	r3, [r7, #20]
 80092f0:	f003 0301 	and.w	r3, r3, #1
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d00b      	beq.n	8009310 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	2204      	movs	r2, #4
 80092fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009306:	f043 0202 	orr.w	r2, r3, #2
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009310:	69fb      	ldr	r3, [r7, #28]
 8009312:	f003 0308 	and.w	r3, r3, #8
 8009316:	2b00      	cmp	r3, #0
 8009318:	d015      	beq.n	8009346 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800931a:	69bb      	ldr	r3, [r7, #24]
 800931c:	f003 0320 	and.w	r3, r3, #32
 8009320:	2b00      	cmp	r3, #0
 8009322:	d104      	bne.n	800932e <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8009324:	697a      	ldr	r2, [r7, #20]
 8009326:	4b48      	ldr	r3, [pc, #288]	; (8009448 <HAL_UART_IRQHandler+0x23c>)
 8009328:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800932a:	2b00      	cmp	r3, #0
 800932c:	d00b      	beq.n	8009346 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	2208      	movs	r2, #8
 8009334:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800933c:	f043 0208 	orr.w	r2, r3, #8
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009346:	69fb      	ldr	r3, [r7, #28]
 8009348:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800934c:	2b00      	cmp	r3, #0
 800934e:	d011      	beq.n	8009374 <HAL_UART_IRQHandler+0x168>
 8009350:	69bb      	ldr	r3, [r7, #24]
 8009352:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009356:	2b00      	cmp	r3, #0
 8009358:	d00c      	beq.n	8009374 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009362:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800936a:	f043 0220 	orr.w	r2, r3, #32
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800937a:	2b00      	cmp	r3, #0
 800937c:	f000 81f6 	beq.w	800976c <HAL_UART_IRQHandler+0x560>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009380:	69fb      	ldr	r3, [r7, #28]
 8009382:	f003 0320 	and.w	r3, r3, #32
 8009386:	2b00      	cmp	r3, #0
 8009388:	d011      	beq.n	80093ae <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800938a:	69bb      	ldr	r3, [r7, #24]
 800938c:	f003 0320 	and.w	r3, r3, #32
 8009390:	2b00      	cmp	r3, #0
 8009392:	d104      	bne.n	800939e <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009394:	697b      	ldr	r3, [r7, #20]
 8009396:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800939a:	2b00      	cmp	r3, #0
 800939c:	d007      	beq.n	80093ae <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d003      	beq.n	80093ae <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093aa:	6878      	ldr	r0, [r7, #4]
 80093ac:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80093b4:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	689b      	ldr	r3, [r3, #8]
 80093bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093c0:	2b40      	cmp	r3, #64	; 0x40
 80093c2:	d004      	beq.n	80093ce <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d031      	beq.n	8009432 <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80093ce:	6878      	ldr	r0, [r7, #4]
 80093d0:	f001 f8ec 	bl	800a5ac <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	689b      	ldr	r3, [r3, #8]
 80093da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093de:	2b40      	cmp	r3, #64	; 0x40
 80093e0:	d123      	bne.n	800942a <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	689a      	ldr	r2, [r3, #8]
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80093f0:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d013      	beq.n	8009422 <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80093fe:	4a14      	ldr	r2, [pc, #80]	; (8009450 <HAL_UART_IRQHandler+0x244>)
 8009400:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009406:	4618      	mov	r0, r3
 8009408:	f7f9 fc48 	bl	8002c9c <HAL_DMA_Abort_IT>
 800940c:	4603      	mov	r3, r0
 800940e:	2b00      	cmp	r3, #0
 8009410:	d017      	beq.n	8009442 <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009416:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009418:	687a      	ldr	r2, [r7, #4]
 800941a:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800941c:	4610      	mov	r0, r2
 800941e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009420:	e00f      	b.n	8009442 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009422:	6878      	ldr	r0, [r7, #4]
 8009424:	f000 f9c0 	bl	80097a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009428:	e00b      	b.n	8009442 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800942a:	6878      	ldr	r0, [r7, #4]
 800942c:	f000 f9bc 	bl	80097a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009430:	e007      	b.n	8009442 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009432:	6878      	ldr	r0, [r7, #4]
 8009434:	f000 f9b8 	bl	80097a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	2200      	movs	r2, #0
 800943c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8009440:	e194      	b.n	800976c <HAL_UART_IRQHandler+0x560>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009442:	bf00      	nop
    return;
 8009444:	e192      	b.n	800976c <HAL_UART_IRQHandler+0x560>
 8009446:	bf00      	nop
 8009448:	10000001 	.word	0x10000001
 800944c:	04000120 	.word	0x04000120
 8009450:	0800a6fd 	.word	0x0800a6fd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009458:	2b01      	cmp	r3, #1
 800945a:	f040 810f 	bne.w	800967c <HAL_UART_IRQHandler+0x470>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800945e:	69fb      	ldr	r3, [r7, #28]
 8009460:	f003 0310 	and.w	r3, r3, #16
 8009464:	2b00      	cmp	r3, #0
 8009466:	f000 8109 	beq.w	800967c <HAL_UART_IRQHandler+0x470>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800946a:	69bb      	ldr	r3, [r7, #24]
 800946c:	f003 0310 	and.w	r3, r3, #16
 8009470:	2b00      	cmp	r3, #0
 8009472:	f000 8103 	beq.w	800967c <HAL_UART_IRQHandler+0x470>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	2210      	movs	r2, #16
 800947c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	689b      	ldr	r3, [r3, #8]
 8009484:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009488:	2b40      	cmp	r3, #64	; 0x40
 800948a:	f040 80bb 	bne.w	8009604 <HAL_UART_IRQHandler+0x3f8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	4a96      	ldr	r2, [pc, #600]	; (80096f0 <HAL_UART_IRQHandler+0x4e4>)
 8009496:	4293      	cmp	r3, r2
 8009498:	d059      	beq.n	800954e <HAL_UART_IRQHandler+0x342>
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	4a94      	ldr	r2, [pc, #592]	; (80096f4 <HAL_UART_IRQHandler+0x4e8>)
 80094a2:	4293      	cmp	r3, r2
 80094a4:	d053      	beq.n	800954e <HAL_UART_IRQHandler+0x342>
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	4a92      	ldr	r2, [pc, #584]	; (80096f8 <HAL_UART_IRQHandler+0x4ec>)
 80094ae:	4293      	cmp	r3, r2
 80094b0:	d04d      	beq.n	800954e <HAL_UART_IRQHandler+0x342>
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	4a90      	ldr	r2, [pc, #576]	; (80096fc <HAL_UART_IRQHandler+0x4f0>)
 80094ba:	4293      	cmp	r3, r2
 80094bc:	d047      	beq.n	800954e <HAL_UART_IRQHandler+0x342>
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	4a8e      	ldr	r2, [pc, #568]	; (8009700 <HAL_UART_IRQHandler+0x4f4>)
 80094c6:	4293      	cmp	r3, r2
 80094c8:	d041      	beq.n	800954e <HAL_UART_IRQHandler+0x342>
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	4a8c      	ldr	r2, [pc, #560]	; (8009704 <HAL_UART_IRQHandler+0x4f8>)
 80094d2:	4293      	cmp	r3, r2
 80094d4:	d03b      	beq.n	800954e <HAL_UART_IRQHandler+0x342>
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	4a8a      	ldr	r2, [pc, #552]	; (8009708 <HAL_UART_IRQHandler+0x4fc>)
 80094de:	4293      	cmp	r3, r2
 80094e0:	d035      	beq.n	800954e <HAL_UART_IRQHandler+0x342>
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	4a88      	ldr	r2, [pc, #544]	; (800970c <HAL_UART_IRQHandler+0x500>)
 80094ea:	4293      	cmp	r3, r2
 80094ec:	d02f      	beq.n	800954e <HAL_UART_IRQHandler+0x342>
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	4a86      	ldr	r2, [pc, #536]	; (8009710 <HAL_UART_IRQHandler+0x504>)
 80094f6:	4293      	cmp	r3, r2
 80094f8:	d029      	beq.n	800954e <HAL_UART_IRQHandler+0x342>
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	4a84      	ldr	r2, [pc, #528]	; (8009714 <HAL_UART_IRQHandler+0x508>)
 8009502:	4293      	cmp	r3, r2
 8009504:	d023      	beq.n	800954e <HAL_UART_IRQHandler+0x342>
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	4a82      	ldr	r2, [pc, #520]	; (8009718 <HAL_UART_IRQHandler+0x50c>)
 800950e:	4293      	cmp	r3, r2
 8009510:	d01d      	beq.n	800954e <HAL_UART_IRQHandler+0x342>
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	4a80      	ldr	r2, [pc, #512]	; (800971c <HAL_UART_IRQHandler+0x510>)
 800951a:	4293      	cmp	r3, r2
 800951c:	d017      	beq.n	800954e <HAL_UART_IRQHandler+0x342>
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	4a7e      	ldr	r2, [pc, #504]	; (8009720 <HAL_UART_IRQHandler+0x514>)
 8009526:	4293      	cmp	r3, r2
 8009528:	d011      	beq.n	800954e <HAL_UART_IRQHandler+0x342>
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	4a7c      	ldr	r2, [pc, #496]	; (8009724 <HAL_UART_IRQHandler+0x518>)
 8009532:	4293      	cmp	r3, r2
 8009534:	d00b      	beq.n	800954e <HAL_UART_IRQHandler+0x342>
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	4a7a      	ldr	r2, [pc, #488]	; (8009728 <HAL_UART_IRQHandler+0x51c>)
 800953e:	4293      	cmp	r3, r2
 8009540:	d005      	beq.n	800954e <HAL_UART_IRQHandler+0x342>
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	4a78      	ldr	r2, [pc, #480]	; (800972c <HAL_UART_IRQHandler+0x520>)
 800954a:	4293      	cmp	r3, r2
 800954c:	d105      	bne.n	800955a <HAL_UART_IRQHandler+0x34e>
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	685b      	ldr	r3, [r3, #4]
 8009556:	b29b      	uxth	r3, r3
 8009558:	e004      	b.n	8009564 <HAL_UART_IRQHandler+0x358>
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	685b      	ldr	r3, [r3, #4]
 8009562:	b29b      	uxth	r3, r3
 8009564:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 8009566:	893b      	ldrh	r3, [r7, #8]
 8009568:	2b00      	cmp	r3, #0
 800956a:	f000 8101 	beq.w	8009770 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009574:	893a      	ldrh	r2, [r7, #8]
 8009576:	429a      	cmp	r2, r3
 8009578:	f080 80fa 	bcs.w	8009770 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	893a      	ldrh	r2, [r7, #8]
 8009580:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009588:	69db      	ldr	r3, [r3, #28]
 800958a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800958e:	d02b      	beq.n	80095e8 <HAL_UART_IRQHandler+0x3dc>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	681a      	ldr	r2, [r3, #0]
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800959e:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	689a      	ldr	r2, [r3, #8]
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	f022 0201 	bic.w	r2, r2, #1
 80095ae:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	689a      	ldr	r2, [r3, #8]
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80095be:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	2220      	movs	r2, #32
 80095c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	2200      	movs	r2, #0
 80095cc:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	681a      	ldr	r2, [r3, #0]
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	f022 0210 	bic.w	r2, r2, #16
 80095dc:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80095e2:	4618      	mov	r0, r3
 80095e4:	f7f9 f83c 	bl	8002660 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80095f4:	b29b      	uxth	r3, r3
 80095f6:	1ad3      	subs	r3, r2, r3
 80095f8:	b29b      	uxth	r3, r3
 80095fa:	4619      	mov	r1, r3
 80095fc:	6878      	ldr	r0, [r7, #4]
 80095fe:	f000 f8dd 	bl	80097bc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009602:	e0b5      	b.n	8009770 <HAL_UART_IRQHandler+0x564>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009610:	b29b      	uxth	r3, r3
 8009612:	1ad3      	subs	r3, r2, r3
 8009614:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800961c:	b29b      	uxth	r3, r3
 800961e:	2b00      	cmp	r3, #0
 8009620:	f000 80a8 	beq.w	8009774 <HAL_UART_IRQHandler+0x568>
          && (nb_rx_data > 0U))
 8009624:	897b      	ldrh	r3, [r7, #10]
 8009626:	2b00      	cmp	r3, #0
 8009628:	f000 80a4 	beq.w	8009774 <HAL_UART_IRQHandler+0x568>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	681a      	ldr	r2, [r3, #0]
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800963a:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	6899      	ldr	r1, [r3, #8]
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	681a      	ldr	r2, [r3, #0]
 8009646:	4b3a      	ldr	r3, [pc, #232]	; (8009730 <HAL_UART_IRQHandler+0x524>)
 8009648:	400b      	ands	r3, r1
 800964a:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	2220      	movs	r2, #32
 8009650:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	2200      	movs	r2, #0
 8009658:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	2200      	movs	r2, #0
 800965e:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	681a      	ldr	r2, [r3, #0]
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	f022 0210 	bic.w	r2, r2, #16
 800966e:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009670:	897b      	ldrh	r3, [r7, #10]
 8009672:	4619      	mov	r1, r3
 8009674:	6878      	ldr	r0, [r7, #4]
 8009676:	f000 f8a1 	bl	80097bc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800967a:	e07b      	b.n	8009774 <HAL_UART_IRQHandler+0x568>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800967c:	69fb      	ldr	r3, [r7, #28]
 800967e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009682:	2b00      	cmp	r3, #0
 8009684:	d00d      	beq.n	80096a2 <HAL_UART_IRQHandler+0x496>
 8009686:	697b      	ldr	r3, [r7, #20]
 8009688:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800968c:	2b00      	cmp	r3, #0
 800968e:	d008      	beq.n	80096a2 <HAL_UART_IRQHandler+0x496>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8009698:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800969a:	6878      	ldr	r0, [r7, #4]
 800969c:	f001 f85e 	bl	800a75c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80096a0:	e06b      	b.n	800977a <HAL_UART_IRQHandler+0x56e>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80096a2:	69fb      	ldr	r3, [r7, #28]
 80096a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d012      	beq.n	80096d2 <HAL_UART_IRQHandler+0x4c6>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80096ac:	69bb      	ldr	r3, [r7, #24]
 80096ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d104      	bne.n	80096c0 <HAL_UART_IRQHandler+0x4b4>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80096b6:	697b      	ldr	r3, [r7, #20]
 80096b8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d008      	beq.n	80096d2 <HAL_UART_IRQHandler+0x4c6>
  {
    if (huart->TxISR != NULL)
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d057      	beq.n	8009778 <HAL_UART_IRQHandler+0x56c>
    {
      huart->TxISR(huart);
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80096cc:	6878      	ldr	r0, [r7, #4]
 80096ce:	4798      	blx	r3
    }
    return;
 80096d0:	e052      	b.n	8009778 <HAL_UART_IRQHandler+0x56c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80096d2:	69fb      	ldr	r3, [r7, #28]
 80096d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d02b      	beq.n	8009734 <HAL_UART_IRQHandler+0x528>
 80096dc:	69bb      	ldr	r3, [r7, #24]
 80096de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d026      	beq.n	8009734 <HAL_UART_IRQHandler+0x528>
  {
    UART_EndTransmit_IT(huart);
 80096e6:	6878      	ldr	r0, [r7, #4]
 80096e8:	f001 f81e 	bl	800a728 <UART_EndTransmit_IT>
    return;
 80096ec:	e045      	b.n	800977a <HAL_UART_IRQHandler+0x56e>
 80096ee:	bf00      	nop
 80096f0:	40020010 	.word	0x40020010
 80096f4:	40020028 	.word	0x40020028
 80096f8:	40020040 	.word	0x40020040
 80096fc:	40020058 	.word	0x40020058
 8009700:	40020070 	.word	0x40020070
 8009704:	40020088 	.word	0x40020088
 8009708:	400200a0 	.word	0x400200a0
 800970c:	400200b8 	.word	0x400200b8
 8009710:	40020410 	.word	0x40020410
 8009714:	40020428 	.word	0x40020428
 8009718:	40020440 	.word	0x40020440
 800971c:	40020458 	.word	0x40020458
 8009720:	40020470 	.word	0x40020470
 8009724:	40020488 	.word	0x40020488
 8009728:	400204a0 	.word	0x400204a0
 800972c:	400204b8 	.word	0x400204b8
 8009730:	effffffe 	.word	0xeffffffe
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009734:	69fb      	ldr	r3, [r7, #28]
 8009736:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800973a:	2b00      	cmp	r3, #0
 800973c:	d008      	beq.n	8009750 <HAL_UART_IRQHandler+0x544>
 800973e:	69bb      	ldr	r3, [r7, #24]
 8009740:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009744:	2b00      	cmp	r3, #0
 8009746:	d003      	beq.n	8009750 <HAL_UART_IRQHandler+0x544>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8009748:	6878      	ldr	r0, [r7, #4]
 800974a:	f001 f81b 	bl	800a784 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800974e:	e014      	b.n	800977a <HAL_UART_IRQHandler+0x56e>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009750:	69fb      	ldr	r3, [r7, #28]
 8009752:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009756:	2b00      	cmp	r3, #0
 8009758:	d00f      	beq.n	800977a <HAL_UART_IRQHandler+0x56e>
 800975a:	69bb      	ldr	r3, [r7, #24]
 800975c:	2b00      	cmp	r3, #0
 800975e:	da0c      	bge.n	800977a <HAL_UART_IRQHandler+0x56e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8009760:	6878      	ldr	r0, [r7, #4]
 8009762:	f001 f805 	bl	800a770 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009766:	e008      	b.n	800977a <HAL_UART_IRQHandler+0x56e>
      return;
 8009768:	bf00      	nop
 800976a:	e006      	b.n	800977a <HAL_UART_IRQHandler+0x56e>
    return;
 800976c:	bf00      	nop
 800976e:	e004      	b.n	800977a <HAL_UART_IRQHandler+0x56e>
      return;
 8009770:	bf00      	nop
 8009772:	e002      	b.n	800977a <HAL_UART_IRQHandler+0x56e>
      return;
 8009774:	bf00      	nop
 8009776:	e000      	b.n	800977a <HAL_UART_IRQHandler+0x56e>
    return;
 8009778:	bf00      	nop
  }
}
 800977a:	3720      	adds	r7, #32
 800977c:	46bd      	mov	sp, r7
 800977e:	bd80      	pop	{r7, pc}

08009780 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009780:	b480      	push	{r7}
 8009782:	b083      	sub	sp, #12
 8009784:	af00      	add	r7, sp, #0
 8009786:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009788:	bf00      	nop
 800978a:	370c      	adds	r7, #12
 800978c:	46bd      	mov	sp, r7
 800978e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009792:	4770      	bx	lr

08009794 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009794:	b480      	push	{r7}
 8009796:	b083      	sub	sp, #12
 8009798:	af00      	add	r7, sp, #0
 800979a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800979c:	bf00      	nop
 800979e:	370c      	adds	r7, #12
 80097a0:	46bd      	mov	sp, r7
 80097a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a6:	4770      	bx	lr

080097a8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80097a8:	b480      	push	{r7}
 80097aa:	b083      	sub	sp, #12
 80097ac:	af00      	add	r7, sp, #0
 80097ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80097b0:	bf00      	nop
 80097b2:	370c      	adds	r7, #12
 80097b4:	46bd      	mov	sp, r7
 80097b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ba:	4770      	bx	lr

080097bc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80097bc:	b480      	push	{r7}
 80097be:	b083      	sub	sp, #12
 80097c0:	af00      	add	r7, sp, #0
 80097c2:	6078      	str	r0, [r7, #4]
 80097c4:	460b      	mov	r3, r1
 80097c6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80097c8:	bf00      	nop
 80097ca:	370c      	adds	r7, #12
 80097cc:	46bd      	mov	sp, r7
 80097ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d2:	4770      	bx	lr

080097d4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80097d4:	b5b0      	push	{r4, r5, r7, lr}
 80097d6:	b08e      	sub	sp, #56	; 0x38
 80097d8:	af00      	add	r7, sp, #0
 80097da:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80097dc:	2300      	movs	r3, #0
 80097de:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	689a      	ldr	r2, [r3, #8]
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	691b      	ldr	r3, [r3, #16]
 80097ea:	431a      	orrs	r2, r3
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	695b      	ldr	r3, [r3, #20]
 80097f0:	431a      	orrs	r2, r3
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	69db      	ldr	r3, [r3, #28]
 80097f6:	4313      	orrs	r3, r2
 80097f8:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	681a      	ldr	r2, [r3, #0]
 8009800:	4bbf      	ldr	r3, [pc, #764]	; (8009b00 <UART_SetConfig+0x32c>)
 8009802:	4013      	ands	r3, r2
 8009804:	687a      	ldr	r2, [r7, #4]
 8009806:	6812      	ldr	r2, [r2, #0]
 8009808:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800980a:	430b      	orrs	r3, r1
 800980c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	685b      	ldr	r3, [r3, #4]
 8009814:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	68da      	ldr	r2, [r3, #12]
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	430a      	orrs	r2, r1
 8009822:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	699b      	ldr	r3, [r3, #24]
 8009828:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	4ab5      	ldr	r2, [pc, #724]	; (8009b04 <UART_SetConfig+0x330>)
 8009830:	4293      	cmp	r3, r2
 8009832:	d004      	beq.n	800983e <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	6a1b      	ldr	r3, [r3, #32]
 8009838:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800983a:	4313      	orrs	r3, r2
 800983c:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	689a      	ldr	r2, [r3, #8]
 8009844:	4bb0      	ldr	r3, [pc, #704]	; (8009b08 <UART_SetConfig+0x334>)
 8009846:	4013      	ands	r3, r2
 8009848:	687a      	ldr	r2, [r7, #4]
 800984a:	6812      	ldr	r2, [r2, #0]
 800984c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800984e:	430b      	orrs	r3, r1
 8009850:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009858:	f023 010f 	bic.w	r1, r3, #15
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	430a      	orrs	r2, r1
 8009866:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	4aa7      	ldr	r2, [pc, #668]	; (8009b0c <UART_SetConfig+0x338>)
 800986e:	4293      	cmp	r3, r2
 8009870:	d176      	bne.n	8009960 <UART_SetConfig+0x18c>
 8009872:	4ba7      	ldr	r3, [pc, #668]	; (8009b10 <UART_SetConfig+0x33c>)
 8009874:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009876:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800987a:	2b28      	cmp	r3, #40	; 0x28
 800987c:	d86c      	bhi.n	8009958 <UART_SetConfig+0x184>
 800987e:	a201      	add	r2, pc, #4	; (adr r2, 8009884 <UART_SetConfig+0xb0>)
 8009880:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009884:	08009929 	.word	0x08009929
 8009888:	08009959 	.word	0x08009959
 800988c:	08009959 	.word	0x08009959
 8009890:	08009959 	.word	0x08009959
 8009894:	08009959 	.word	0x08009959
 8009898:	08009959 	.word	0x08009959
 800989c:	08009959 	.word	0x08009959
 80098a0:	08009959 	.word	0x08009959
 80098a4:	08009931 	.word	0x08009931
 80098a8:	08009959 	.word	0x08009959
 80098ac:	08009959 	.word	0x08009959
 80098b0:	08009959 	.word	0x08009959
 80098b4:	08009959 	.word	0x08009959
 80098b8:	08009959 	.word	0x08009959
 80098bc:	08009959 	.word	0x08009959
 80098c0:	08009959 	.word	0x08009959
 80098c4:	08009939 	.word	0x08009939
 80098c8:	08009959 	.word	0x08009959
 80098cc:	08009959 	.word	0x08009959
 80098d0:	08009959 	.word	0x08009959
 80098d4:	08009959 	.word	0x08009959
 80098d8:	08009959 	.word	0x08009959
 80098dc:	08009959 	.word	0x08009959
 80098e0:	08009959 	.word	0x08009959
 80098e4:	08009941 	.word	0x08009941
 80098e8:	08009959 	.word	0x08009959
 80098ec:	08009959 	.word	0x08009959
 80098f0:	08009959 	.word	0x08009959
 80098f4:	08009959 	.word	0x08009959
 80098f8:	08009959 	.word	0x08009959
 80098fc:	08009959 	.word	0x08009959
 8009900:	08009959 	.word	0x08009959
 8009904:	08009949 	.word	0x08009949
 8009908:	08009959 	.word	0x08009959
 800990c:	08009959 	.word	0x08009959
 8009910:	08009959 	.word	0x08009959
 8009914:	08009959 	.word	0x08009959
 8009918:	08009959 	.word	0x08009959
 800991c:	08009959 	.word	0x08009959
 8009920:	08009959 	.word	0x08009959
 8009924:	08009951 	.word	0x08009951
 8009928:	2301      	movs	r3, #1
 800992a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800992e:	e222      	b.n	8009d76 <UART_SetConfig+0x5a2>
 8009930:	2304      	movs	r3, #4
 8009932:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009936:	e21e      	b.n	8009d76 <UART_SetConfig+0x5a2>
 8009938:	2308      	movs	r3, #8
 800993a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800993e:	e21a      	b.n	8009d76 <UART_SetConfig+0x5a2>
 8009940:	2310      	movs	r3, #16
 8009942:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009946:	e216      	b.n	8009d76 <UART_SetConfig+0x5a2>
 8009948:	2320      	movs	r3, #32
 800994a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800994e:	e212      	b.n	8009d76 <UART_SetConfig+0x5a2>
 8009950:	2340      	movs	r3, #64	; 0x40
 8009952:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009956:	e20e      	b.n	8009d76 <UART_SetConfig+0x5a2>
 8009958:	2380      	movs	r3, #128	; 0x80
 800995a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800995e:	e20a      	b.n	8009d76 <UART_SetConfig+0x5a2>
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	4a6b      	ldr	r2, [pc, #428]	; (8009b14 <UART_SetConfig+0x340>)
 8009966:	4293      	cmp	r3, r2
 8009968:	d130      	bne.n	80099cc <UART_SetConfig+0x1f8>
 800996a:	4b69      	ldr	r3, [pc, #420]	; (8009b10 <UART_SetConfig+0x33c>)
 800996c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800996e:	f003 0307 	and.w	r3, r3, #7
 8009972:	2b05      	cmp	r3, #5
 8009974:	d826      	bhi.n	80099c4 <UART_SetConfig+0x1f0>
 8009976:	a201      	add	r2, pc, #4	; (adr r2, 800997c <UART_SetConfig+0x1a8>)
 8009978:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800997c:	08009995 	.word	0x08009995
 8009980:	0800999d 	.word	0x0800999d
 8009984:	080099a5 	.word	0x080099a5
 8009988:	080099ad 	.word	0x080099ad
 800998c:	080099b5 	.word	0x080099b5
 8009990:	080099bd 	.word	0x080099bd
 8009994:	2300      	movs	r3, #0
 8009996:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800999a:	e1ec      	b.n	8009d76 <UART_SetConfig+0x5a2>
 800999c:	2304      	movs	r3, #4
 800999e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80099a2:	e1e8      	b.n	8009d76 <UART_SetConfig+0x5a2>
 80099a4:	2308      	movs	r3, #8
 80099a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80099aa:	e1e4      	b.n	8009d76 <UART_SetConfig+0x5a2>
 80099ac:	2310      	movs	r3, #16
 80099ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80099b2:	e1e0      	b.n	8009d76 <UART_SetConfig+0x5a2>
 80099b4:	2320      	movs	r3, #32
 80099b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80099ba:	e1dc      	b.n	8009d76 <UART_SetConfig+0x5a2>
 80099bc:	2340      	movs	r3, #64	; 0x40
 80099be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80099c2:	e1d8      	b.n	8009d76 <UART_SetConfig+0x5a2>
 80099c4:	2380      	movs	r3, #128	; 0x80
 80099c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80099ca:	e1d4      	b.n	8009d76 <UART_SetConfig+0x5a2>
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	4a51      	ldr	r2, [pc, #324]	; (8009b18 <UART_SetConfig+0x344>)
 80099d2:	4293      	cmp	r3, r2
 80099d4:	d130      	bne.n	8009a38 <UART_SetConfig+0x264>
 80099d6:	4b4e      	ldr	r3, [pc, #312]	; (8009b10 <UART_SetConfig+0x33c>)
 80099d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80099da:	f003 0307 	and.w	r3, r3, #7
 80099de:	2b05      	cmp	r3, #5
 80099e0:	d826      	bhi.n	8009a30 <UART_SetConfig+0x25c>
 80099e2:	a201      	add	r2, pc, #4	; (adr r2, 80099e8 <UART_SetConfig+0x214>)
 80099e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099e8:	08009a01 	.word	0x08009a01
 80099ec:	08009a09 	.word	0x08009a09
 80099f0:	08009a11 	.word	0x08009a11
 80099f4:	08009a19 	.word	0x08009a19
 80099f8:	08009a21 	.word	0x08009a21
 80099fc:	08009a29 	.word	0x08009a29
 8009a00:	2300      	movs	r3, #0
 8009a02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a06:	e1b6      	b.n	8009d76 <UART_SetConfig+0x5a2>
 8009a08:	2304      	movs	r3, #4
 8009a0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a0e:	e1b2      	b.n	8009d76 <UART_SetConfig+0x5a2>
 8009a10:	2308      	movs	r3, #8
 8009a12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a16:	e1ae      	b.n	8009d76 <UART_SetConfig+0x5a2>
 8009a18:	2310      	movs	r3, #16
 8009a1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a1e:	e1aa      	b.n	8009d76 <UART_SetConfig+0x5a2>
 8009a20:	2320      	movs	r3, #32
 8009a22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a26:	e1a6      	b.n	8009d76 <UART_SetConfig+0x5a2>
 8009a28:	2340      	movs	r3, #64	; 0x40
 8009a2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a2e:	e1a2      	b.n	8009d76 <UART_SetConfig+0x5a2>
 8009a30:	2380      	movs	r3, #128	; 0x80
 8009a32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a36:	e19e      	b.n	8009d76 <UART_SetConfig+0x5a2>
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	4a37      	ldr	r2, [pc, #220]	; (8009b1c <UART_SetConfig+0x348>)
 8009a3e:	4293      	cmp	r3, r2
 8009a40:	d130      	bne.n	8009aa4 <UART_SetConfig+0x2d0>
 8009a42:	4b33      	ldr	r3, [pc, #204]	; (8009b10 <UART_SetConfig+0x33c>)
 8009a44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a46:	f003 0307 	and.w	r3, r3, #7
 8009a4a:	2b05      	cmp	r3, #5
 8009a4c:	d826      	bhi.n	8009a9c <UART_SetConfig+0x2c8>
 8009a4e:	a201      	add	r2, pc, #4	; (adr r2, 8009a54 <UART_SetConfig+0x280>)
 8009a50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a54:	08009a6d 	.word	0x08009a6d
 8009a58:	08009a75 	.word	0x08009a75
 8009a5c:	08009a7d 	.word	0x08009a7d
 8009a60:	08009a85 	.word	0x08009a85
 8009a64:	08009a8d 	.word	0x08009a8d
 8009a68:	08009a95 	.word	0x08009a95
 8009a6c:	2300      	movs	r3, #0
 8009a6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a72:	e180      	b.n	8009d76 <UART_SetConfig+0x5a2>
 8009a74:	2304      	movs	r3, #4
 8009a76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a7a:	e17c      	b.n	8009d76 <UART_SetConfig+0x5a2>
 8009a7c:	2308      	movs	r3, #8
 8009a7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a82:	e178      	b.n	8009d76 <UART_SetConfig+0x5a2>
 8009a84:	2310      	movs	r3, #16
 8009a86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a8a:	e174      	b.n	8009d76 <UART_SetConfig+0x5a2>
 8009a8c:	2320      	movs	r3, #32
 8009a8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a92:	e170      	b.n	8009d76 <UART_SetConfig+0x5a2>
 8009a94:	2340      	movs	r3, #64	; 0x40
 8009a96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a9a:	e16c      	b.n	8009d76 <UART_SetConfig+0x5a2>
 8009a9c:	2380      	movs	r3, #128	; 0x80
 8009a9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009aa2:	e168      	b.n	8009d76 <UART_SetConfig+0x5a2>
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	4a1d      	ldr	r2, [pc, #116]	; (8009b20 <UART_SetConfig+0x34c>)
 8009aaa:	4293      	cmp	r3, r2
 8009aac:	d142      	bne.n	8009b34 <UART_SetConfig+0x360>
 8009aae:	4b18      	ldr	r3, [pc, #96]	; (8009b10 <UART_SetConfig+0x33c>)
 8009ab0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ab2:	f003 0307 	and.w	r3, r3, #7
 8009ab6:	2b05      	cmp	r3, #5
 8009ab8:	d838      	bhi.n	8009b2c <UART_SetConfig+0x358>
 8009aba:	a201      	add	r2, pc, #4	; (adr r2, 8009ac0 <UART_SetConfig+0x2ec>)
 8009abc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ac0:	08009ad9 	.word	0x08009ad9
 8009ac4:	08009ae1 	.word	0x08009ae1
 8009ac8:	08009ae9 	.word	0x08009ae9
 8009acc:	08009af1 	.word	0x08009af1
 8009ad0:	08009af9 	.word	0x08009af9
 8009ad4:	08009b25 	.word	0x08009b25
 8009ad8:	2300      	movs	r3, #0
 8009ada:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ade:	e14a      	b.n	8009d76 <UART_SetConfig+0x5a2>
 8009ae0:	2304      	movs	r3, #4
 8009ae2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ae6:	e146      	b.n	8009d76 <UART_SetConfig+0x5a2>
 8009ae8:	2308      	movs	r3, #8
 8009aea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009aee:	e142      	b.n	8009d76 <UART_SetConfig+0x5a2>
 8009af0:	2310      	movs	r3, #16
 8009af2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009af6:	e13e      	b.n	8009d76 <UART_SetConfig+0x5a2>
 8009af8:	2320      	movs	r3, #32
 8009afa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009afe:	e13a      	b.n	8009d76 <UART_SetConfig+0x5a2>
 8009b00:	cfff69f3 	.word	0xcfff69f3
 8009b04:	58000c00 	.word	0x58000c00
 8009b08:	11fff4ff 	.word	0x11fff4ff
 8009b0c:	40011000 	.word	0x40011000
 8009b10:	58024400 	.word	0x58024400
 8009b14:	40004400 	.word	0x40004400
 8009b18:	40004800 	.word	0x40004800
 8009b1c:	40004c00 	.word	0x40004c00
 8009b20:	40005000 	.word	0x40005000
 8009b24:	2340      	movs	r3, #64	; 0x40
 8009b26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b2a:	e124      	b.n	8009d76 <UART_SetConfig+0x5a2>
 8009b2c:	2380      	movs	r3, #128	; 0x80
 8009b2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b32:	e120      	b.n	8009d76 <UART_SetConfig+0x5a2>
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	4acc      	ldr	r2, [pc, #816]	; (8009e6c <UART_SetConfig+0x698>)
 8009b3a:	4293      	cmp	r3, r2
 8009b3c:	d176      	bne.n	8009c2c <UART_SetConfig+0x458>
 8009b3e:	4bcc      	ldr	r3, [pc, #816]	; (8009e70 <UART_SetConfig+0x69c>)
 8009b40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b42:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009b46:	2b28      	cmp	r3, #40	; 0x28
 8009b48:	d86c      	bhi.n	8009c24 <UART_SetConfig+0x450>
 8009b4a:	a201      	add	r2, pc, #4	; (adr r2, 8009b50 <UART_SetConfig+0x37c>)
 8009b4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b50:	08009bf5 	.word	0x08009bf5
 8009b54:	08009c25 	.word	0x08009c25
 8009b58:	08009c25 	.word	0x08009c25
 8009b5c:	08009c25 	.word	0x08009c25
 8009b60:	08009c25 	.word	0x08009c25
 8009b64:	08009c25 	.word	0x08009c25
 8009b68:	08009c25 	.word	0x08009c25
 8009b6c:	08009c25 	.word	0x08009c25
 8009b70:	08009bfd 	.word	0x08009bfd
 8009b74:	08009c25 	.word	0x08009c25
 8009b78:	08009c25 	.word	0x08009c25
 8009b7c:	08009c25 	.word	0x08009c25
 8009b80:	08009c25 	.word	0x08009c25
 8009b84:	08009c25 	.word	0x08009c25
 8009b88:	08009c25 	.word	0x08009c25
 8009b8c:	08009c25 	.word	0x08009c25
 8009b90:	08009c05 	.word	0x08009c05
 8009b94:	08009c25 	.word	0x08009c25
 8009b98:	08009c25 	.word	0x08009c25
 8009b9c:	08009c25 	.word	0x08009c25
 8009ba0:	08009c25 	.word	0x08009c25
 8009ba4:	08009c25 	.word	0x08009c25
 8009ba8:	08009c25 	.word	0x08009c25
 8009bac:	08009c25 	.word	0x08009c25
 8009bb0:	08009c0d 	.word	0x08009c0d
 8009bb4:	08009c25 	.word	0x08009c25
 8009bb8:	08009c25 	.word	0x08009c25
 8009bbc:	08009c25 	.word	0x08009c25
 8009bc0:	08009c25 	.word	0x08009c25
 8009bc4:	08009c25 	.word	0x08009c25
 8009bc8:	08009c25 	.word	0x08009c25
 8009bcc:	08009c25 	.word	0x08009c25
 8009bd0:	08009c15 	.word	0x08009c15
 8009bd4:	08009c25 	.word	0x08009c25
 8009bd8:	08009c25 	.word	0x08009c25
 8009bdc:	08009c25 	.word	0x08009c25
 8009be0:	08009c25 	.word	0x08009c25
 8009be4:	08009c25 	.word	0x08009c25
 8009be8:	08009c25 	.word	0x08009c25
 8009bec:	08009c25 	.word	0x08009c25
 8009bf0:	08009c1d 	.word	0x08009c1d
 8009bf4:	2301      	movs	r3, #1
 8009bf6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009bfa:	e0bc      	b.n	8009d76 <UART_SetConfig+0x5a2>
 8009bfc:	2304      	movs	r3, #4
 8009bfe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c02:	e0b8      	b.n	8009d76 <UART_SetConfig+0x5a2>
 8009c04:	2308      	movs	r3, #8
 8009c06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c0a:	e0b4      	b.n	8009d76 <UART_SetConfig+0x5a2>
 8009c0c:	2310      	movs	r3, #16
 8009c0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c12:	e0b0      	b.n	8009d76 <UART_SetConfig+0x5a2>
 8009c14:	2320      	movs	r3, #32
 8009c16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c1a:	e0ac      	b.n	8009d76 <UART_SetConfig+0x5a2>
 8009c1c:	2340      	movs	r3, #64	; 0x40
 8009c1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c22:	e0a8      	b.n	8009d76 <UART_SetConfig+0x5a2>
 8009c24:	2380      	movs	r3, #128	; 0x80
 8009c26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c2a:	e0a4      	b.n	8009d76 <UART_SetConfig+0x5a2>
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	4a90      	ldr	r2, [pc, #576]	; (8009e74 <UART_SetConfig+0x6a0>)
 8009c32:	4293      	cmp	r3, r2
 8009c34:	d130      	bne.n	8009c98 <UART_SetConfig+0x4c4>
 8009c36:	4b8e      	ldr	r3, [pc, #568]	; (8009e70 <UART_SetConfig+0x69c>)
 8009c38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c3a:	f003 0307 	and.w	r3, r3, #7
 8009c3e:	2b05      	cmp	r3, #5
 8009c40:	d826      	bhi.n	8009c90 <UART_SetConfig+0x4bc>
 8009c42:	a201      	add	r2, pc, #4	; (adr r2, 8009c48 <UART_SetConfig+0x474>)
 8009c44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c48:	08009c61 	.word	0x08009c61
 8009c4c:	08009c69 	.word	0x08009c69
 8009c50:	08009c71 	.word	0x08009c71
 8009c54:	08009c79 	.word	0x08009c79
 8009c58:	08009c81 	.word	0x08009c81
 8009c5c:	08009c89 	.word	0x08009c89
 8009c60:	2300      	movs	r3, #0
 8009c62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c66:	e086      	b.n	8009d76 <UART_SetConfig+0x5a2>
 8009c68:	2304      	movs	r3, #4
 8009c6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c6e:	e082      	b.n	8009d76 <UART_SetConfig+0x5a2>
 8009c70:	2308      	movs	r3, #8
 8009c72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c76:	e07e      	b.n	8009d76 <UART_SetConfig+0x5a2>
 8009c78:	2310      	movs	r3, #16
 8009c7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c7e:	e07a      	b.n	8009d76 <UART_SetConfig+0x5a2>
 8009c80:	2320      	movs	r3, #32
 8009c82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c86:	e076      	b.n	8009d76 <UART_SetConfig+0x5a2>
 8009c88:	2340      	movs	r3, #64	; 0x40
 8009c8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c8e:	e072      	b.n	8009d76 <UART_SetConfig+0x5a2>
 8009c90:	2380      	movs	r3, #128	; 0x80
 8009c92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c96:	e06e      	b.n	8009d76 <UART_SetConfig+0x5a2>
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	4a76      	ldr	r2, [pc, #472]	; (8009e78 <UART_SetConfig+0x6a4>)
 8009c9e:	4293      	cmp	r3, r2
 8009ca0:	d130      	bne.n	8009d04 <UART_SetConfig+0x530>
 8009ca2:	4b73      	ldr	r3, [pc, #460]	; (8009e70 <UART_SetConfig+0x69c>)
 8009ca4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ca6:	f003 0307 	and.w	r3, r3, #7
 8009caa:	2b05      	cmp	r3, #5
 8009cac:	d826      	bhi.n	8009cfc <UART_SetConfig+0x528>
 8009cae:	a201      	add	r2, pc, #4	; (adr r2, 8009cb4 <UART_SetConfig+0x4e0>)
 8009cb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cb4:	08009ccd 	.word	0x08009ccd
 8009cb8:	08009cd5 	.word	0x08009cd5
 8009cbc:	08009cdd 	.word	0x08009cdd
 8009cc0:	08009ce5 	.word	0x08009ce5
 8009cc4:	08009ced 	.word	0x08009ced
 8009cc8:	08009cf5 	.word	0x08009cf5
 8009ccc:	2300      	movs	r3, #0
 8009cce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009cd2:	e050      	b.n	8009d76 <UART_SetConfig+0x5a2>
 8009cd4:	2304      	movs	r3, #4
 8009cd6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009cda:	e04c      	b.n	8009d76 <UART_SetConfig+0x5a2>
 8009cdc:	2308      	movs	r3, #8
 8009cde:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ce2:	e048      	b.n	8009d76 <UART_SetConfig+0x5a2>
 8009ce4:	2310      	movs	r3, #16
 8009ce6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009cea:	e044      	b.n	8009d76 <UART_SetConfig+0x5a2>
 8009cec:	2320      	movs	r3, #32
 8009cee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009cf2:	e040      	b.n	8009d76 <UART_SetConfig+0x5a2>
 8009cf4:	2340      	movs	r3, #64	; 0x40
 8009cf6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009cfa:	e03c      	b.n	8009d76 <UART_SetConfig+0x5a2>
 8009cfc:	2380      	movs	r3, #128	; 0x80
 8009cfe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d02:	e038      	b.n	8009d76 <UART_SetConfig+0x5a2>
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	4a5c      	ldr	r2, [pc, #368]	; (8009e7c <UART_SetConfig+0x6a8>)
 8009d0a:	4293      	cmp	r3, r2
 8009d0c:	d130      	bne.n	8009d70 <UART_SetConfig+0x59c>
 8009d0e:	4b58      	ldr	r3, [pc, #352]	; (8009e70 <UART_SetConfig+0x69c>)
 8009d10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d12:	f003 0307 	and.w	r3, r3, #7
 8009d16:	2b05      	cmp	r3, #5
 8009d18:	d826      	bhi.n	8009d68 <UART_SetConfig+0x594>
 8009d1a:	a201      	add	r2, pc, #4	; (adr r2, 8009d20 <UART_SetConfig+0x54c>)
 8009d1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d20:	08009d39 	.word	0x08009d39
 8009d24:	08009d41 	.word	0x08009d41
 8009d28:	08009d49 	.word	0x08009d49
 8009d2c:	08009d51 	.word	0x08009d51
 8009d30:	08009d59 	.word	0x08009d59
 8009d34:	08009d61 	.word	0x08009d61
 8009d38:	2302      	movs	r3, #2
 8009d3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d3e:	e01a      	b.n	8009d76 <UART_SetConfig+0x5a2>
 8009d40:	2304      	movs	r3, #4
 8009d42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d46:	e016      	b.n	8009d76 <UART_SetConfig+0x5a2>
 8009d48:	2308      	movs	r3, #8
 8009d4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d4e:	e012      	b.n	8009d76 <UART_SetConfig+0x5a2>
 8009d50:	2310      	movs	r3, #16
 8009d52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d56:	e00e      	b.n	8009d76 <UART_SetConfig+0x5a2>
 8009d58:	2320      	movs	r3, #32
 8009d5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d5e:	e00a      	b.n	8009d76 <UART_SetConfig+0x5a2>
 8009d60:	2340      	movs	r3, #64	; 0x40
 8009d62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d66:	e006      	b.n	8009d76 <UART_SetConfig+0x5a2>
 8009d68:	2380      	movs	r3, #128	; 0x80
 8009d6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d6e:	e002      	b.n	8009d76 <UART_SetConfig+0x5a2>
 8009d70:	2380      	movs	r3, #128	; 0x80
 8009d72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	4a40      	ldr	r2, [pc, #256]	; (8009e7c <UART_SetConfig+0x6a8>)
 8009d7c:	4293      	cmp	r3, r2
 8009d7e:	f040 80ef 	bne.w	8009f60 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009d82:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009d86:	2b20      	cmp	r3, #32
 8009d88:	dc46      	bgt.n	8009e18 <UART_SetConfig+0x644>
 8009d8a:	2b02      	cmp	r3, #2
 8009d8c:	f2c0 8081 	blt.w	8009e92 <UART_SetConfig+0x6be>
 8009d90:	3b02      	subs	r3, #2
 8009d92:	2b1e      	cmp	r3, #30
 8009d94:	d87d      	bhi.n	8009e92 <UART_SetConfig+0x6be>
 8009d96:	a201      	add	r2, pc, #4	; (adr r2, 8009d9c <UART_SetConfig+0x5c8>)
 8009d98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d9c:	08009e1f 	.word	0x08009e1f
 8009da0:	08009e93 	.word	0x08009e93
 8009da4:	08009e27 	.word	0x08009e27
 8009da8:	08009e93 	.word	0x08009e93
 8009dac:	08009e93 	.word	0x08009e93
 8009db0:	08009e93 	.word	0x08009e93
 8009db4:	08009e37 	.word	0x08009e37
 8009db8:	08009e93 	.word	0x08009e93
 8009dbc:	08009e93 	.word	0x08009e93
 8009dc0:	08009e93 	.word	0x08009e93
 8009dc4:	08009e93 	.word	0x08009e93
 8009dc8:	08009e93 	.word	0x08009e93
 8009dcc:	08009e93 	.word	0x08009e93
 8009dd0:	08009e93 	.word	0x08009e93
 8009dd4:	08009e47 	.word	0x08009e47
 8009dd8:	08009e93 	.word	0x08009e93
 8009ddc:	08009e93 	.word	0x08009e93
 8009de0:	08009e93 	.word	0x08009e93
 8009de4:	08009e93 	.word	0x08009e93
 8009de8:	08009e93 	.word	0x08009e93
 8009dec:	08009e93 	.word	0x08009e93
 8009df0:	08009e93 	.word	0x08009e93
 8009df4:	08009e93 	.word	0x08009e93
 8009df8:	08009e93 	.word	0x08009e93
 8009dfc:	08009e93 	.word	0x08009e93
 8009e00:	08009e93 	.word	0x08009e93
 8009e04:	08009e93 	.word	0x08009e93
 8009e08:	08009e93 	.word	0x08009e93
 8009e0c:	08009e93 	.word	0x08009e93
 8009e10:	08009e93 	.word	0x08009e93
 8009e14:	08009e85 	.word	0x08009e85
 8009e18:	2b40      	cmp	r3, #64	; 0x40
 8009e1a:	d036      	beq.n	8009e8a <UART_SetConfig+0x6b6>
 8009e1c:	e039      	b.n	8009e92 <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8009e1e:	f7fd fa85 	bl	800732c <HAL_RCCEx_GetD3PCLK1Freq>
 8009e22:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009e24:	e03b      	b.n	8009e9e <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009e26:	f107 0314 	add.w	r3, r7, #20
 8009e2a:	4618      	mov	r0, r3
 8009e2c:	f7fd fa94 	bl	8007358 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009e30:	69bb      	ldr	r3, [r7, #24]
 8009e32:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009e34:	e033      	b.n	8009e9e <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009e36:	f107 0308 	add.w	r3, r7, #8
 8009e3a:	4618      	mov	r0, r3
 8009e3c:	f7fd fbe0 	bl	8007600 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009e44:	e02b      	b.n	8009e9e <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009e46:	4b0a      	ldr	r3, [pc, #40]	; (8009e70 <UART_SetConfig+0x69c>)
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	f003 0320 	and.w	r3, r3, #32
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d009      	beq.n	8009e66 <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009e52:	4b07      	ldr	r3, [pc, #28]	; (8009e70 <UART_SetConfig+0x69c>)
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	08db      	lsrs	r3, r3, #3
 8009e58:	f003 0303 	and.w	r3, r3, #3
 8009e5c:	4a08      	ldr	r2, [pc, #32]	; (8009e80 <UART_SetConfig+0x6ac>)
 8009e5e:	fa22 f303 	lsr.w	r3, r2, r3
 8009e62:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009e64:	e01b      	b.n	8009e9e <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 8009e66:	4b06      	ldr	r3, [pc, #24]	; (8009e80 <UART_SetConfig+0x6ac>)
 8009e68:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009e6a:	e018      	b.n	8009e9e <UART_SetConfig+0x6ca>
 8009e6c:	40011400 	.word	0x40011400
 8009e70:	58024400 	.word	0x58024400
 8009e74:	40007800 	.word	0x40007800
 8009e78:	40007c00 	.word	0x40007c00
 8009e7c:	58000c00 	.word	0x58000c00
 8009e80:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009e84:	4bc4      	ldr	r3, [pc, #784]	; (800a198 <UART_SetConfig+0x9c4>)
 8009e86:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009e88:	e009      	b.n	8009e9e <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009e8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009e8e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009e90:	e005      	b.n	8009e9e <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 8009e92:	2300      	movs	r3, #0
 8009e94:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8009e96:	2301      	movs	r3, #1
 8009e98:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8009e9c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009e9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	f000 81da 	beq.w	800a25a <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009eaa:	4abc      	ldr	r2, [pc, #752]	; (800a19c <UART_SetConfig+0x9c8>)
 8009eac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009eb0:	461a      	mov	r2, r3
 8009eb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009eb4:	fbb3 f3f2 	udiv	r3, r3, r2
 8009eb8:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	685a      	ldr	r2, [r3, #4]
 8009ebe:	4613      	mov	r3, r2
 8009ec0:	005b      	lsls	r3, r3, #1
 8009ec2:	4413      	add	r3, r2
 8009ec4:	6a3a      	ldr	r2, [r7, #32]
 8009ec6:	429a      	cmp	r2, r3
 8009ec8:	d305      	bcc.n	8009ed6 <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	685b      	ldr	r3, [r3, #4]
 8009ece:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009ed0:	6a3a      	ldr	r2, [r7, #32]
 8009ed2:	429a      	cmp	r2, r3
 8009ed4:	d903      	bls.n	8009ede <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 8009ed6:	2301      	movs	r3, #1
 8009ed8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8009edc:	e1bd      	b.n	800a25a <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009ede:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ee0:	4618      	mov	r0, r3
 8009ee2:	f04f 0100 	mov.w	r1, #0
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009eea:	4aac      	ldr	r2, [pc, #688]	; (800a19c <UART_SetConfig+0x9c8>)
 8009eec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009ef0:	b29a      	uxth	r2, r3
 8009ef2:	f04f 0300 	mov.w	r3, #0
 8009ef6:	f7f6 f9ef 	bl	80002d8 <__aeabi_uldivmod>
 8009efa:	4602      	mov	r2, r0
 8009efc:	460b      	mov	r3, r1
 8009efe:	4610      	mov	r0, r2
 8009f00:	4619      	mov	r1, r3
 8009f02:	f04f 0200 	mov.w	r2, #0
 8009f06:	f04f 0300 	mov.w	r3, #0
 8009f0a:	020b      	lsls	r3, r1, #8
 8009f0c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009f10:	0202      	lsls	r2, r0, #8
 8009f12:	6879      	ldr	r1, [r7, #4]
 8009f14:	6849      	ldr	r1, [r1, #4]
 8009f16:	0849      	lsrs	r1, r1, #1
 8009f18:	4608      	mov	r0, r1
 8009f1a:	f04f 0100 	mov.w	r1, #0
 8009f1e:	1814      	adds	r4, r2, r0
 8009f20:	eb43 0501 	adc.w	r5, r3, r1
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	685b      	ldr	r3, [r3, #4]
 8009f28:	461a      	mov	r2, r3
 8009f2a:	f04f 0300 	mov.w	r3, #0
 8009f2e:	4620      	mov	r0, r4
 8009f30:	4629      	mov	r1, r5
 8009f32:	f7f6 f9d1 	bl	80002d8 <__aeabi_uldivmod>
 8009f36:	4602      	mov	r2, r0
 8009f38:	460b      	mov	r3, r1
 8009f3a:	4613      	mov	r3, r2
 8009f3c:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009f3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f40:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009f44:	d308      	bcc.n	8009f58 <UART_SetConfig+0x784>
 8009f46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f48:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009f4c:	d204      	bcs.n	8009f58 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009f54:	60da      	str	r2, [r3, #12]
 8009f56:	e180      	b.n	800a25a <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 8009f58:	2301      	movs	r3, #1
 8009f5a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8009f5e:	e17c      	b.n	800a25a <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	69db      	ldr	r3, [r3, #28]
 8009f64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009f68:	f040 80bf 	bne.w	800a0ea <UART_SetConfig+0x916>
  {
    switch (clocksource)
 8009f6c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009f70:	2b20      	cmp	r3, #32
 8009f72:	dc49      	bgt.n	800a008 <UART_SetConfig+0x834>
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	db7c      	blt.n	800a072 <UART_SetConfig+0x89e>
 8009f78:	2b20      	cmp	r3, #32
 8009f7a:	d87a      	bhi.n	800a072 <UART_SetConfig+0x89e>
 8009f7c:	a201      	add	r2, pc, #4	; (adr r2, 8009f84 <UART_SetConfig+0x7b0>)
 8009f7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f82:	bf00      	nop
 8009f84:	0800a00f 	.word	0x0800a00f
 8009f88:	0800a017 	.word	0x0800a017
 8009f8c:	0800a073 	.word	0x0800a073
 8009f90:	0800a073 	.word	0x0800a073
 8009f94:	0800a01f 	.word	0x0800a01f
 8009f98:	0800a073 	.word	0x0800a073
 8009f9c:	0800a073 	.word	0x0800a073
 8009fa0:	0800a073 	.word	0x0800a073
 8009fa4:	0800a02f 	.word	0x0800a02f
 8009fa8:	0800a073 	.word	0x0800a073
 8009fac:	0800a073 	.word	0x0800a073
 8009fb0:	0800a073 	.word	0x0800a073
 8009fb4:	0800a073 	.word	0x0800a073
 8009fb8:	0800a073 	.word	0x0800a073
 8009fbc:	0800a073 	.word	0x0800a073
 8009fc0:	0800a073 	.word	0x0800a073
 8009fc4:	0800a03f 	.word	0x0800a03f
 8009fc8:	0800a073 	.word	0x0800a073
 8009fcc:	0800a073 	.word	0x0800a073
 8009fd0:	0800a073 	.word	0x0800a073
 8009fd4:	0800a073 	.word	0x0800a073
 8009fd8:	0800a073 	.word	0x0800a073
 8009fdc:	0800a073 	.word	0x0800a073
 8009fe0:	0800a073 	.word	0x0800a073
 8009fe4:	0800a073 	.word	0x0800a073
 8009fe8:	0800a073 	.word	0x0800a073
 8009fec:	0800a073 	.word	0x0800a073
 8009ff0:	0800a073 	.word	0x0800a073
 8009ff4:	0800a073 	.word	0x0800a073
 8009ff8:	0800a073 	.word	0x0800a073
 8009ffc:	0800a073 	.word	0x0800a073
 800a000:	0800a073 	.word	0x0800a073
 800a004:	0800a065 	.word	0x0800a065
 800a008:	2b40      	cmp	r3, #64	; 0x40
 800a00a:	d02e      	beq.n	800a06a <UART_SetConfig+0x896>
 800a00c:	e031      	b.n	800a072 <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a00e:	f7fb fd4f 	bl	8005ab0 <HAL_RCC_GetPCLK1Freq>
 800a012:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a014:	e033      	b.n	800a07e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a016:	f7fb fd61 	bl	8005adc <HAL_RCC_GetPCLK2Freq>
 800a01a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a01c:	e02f      	b.n	800a07e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a01e:	f107 0314 	add.w	r3, r7, #20
 800a022:	4618      	mov	r0, r3
 800a024:	f7fd f998 	bl	8007358 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a028:	69bb      	ldr	r3, [r7, #24]
 800a02a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a02c:	e027      	b.n	800a07e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a02e:	f107 0308 	add.w	r3, r7, #8
 800a032:	4618      	mov	r0, r3
 800a034:	f7fd fae4 	bl	8007600 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a03c:	e01f      	b.n	800a07e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a03e:	4b58      	ldr	r3, [pc, #352]	; (800a1a0 <UART_SetConfig+0x9cc>)
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	f003 0320 	and.w	r3, r3, #32
 800a046:	2b00      	cmp	r3, #0
 800a048:	d009      	beq.n	800a05e <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a04a:	4b55      	ldr	r3, [pc, #340]	; (800a1a0 <UART_SetConfig+0x9cc>)
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	08db      	lsrs	r3, r3, #3
 800a050:	f003 0303 	and.w	r3, r3, #3
 800a054:	4a53      	ldr	r2, [pc, #332]	; (800a1a4 <UART_SetConfig+0x9d0>)
 800a056:	fa22 f303 	lsr.w	r3, r2, r3
 800a05a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a05c:	e00f      	b.n	800a07e <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 800a05e:	4b51      	ldr	r3, [pc, #324]	; (800a1a4 <UART_SetConfig+0x9d0>)
 800a060:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a062:	e00c      	b.n	800a07e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a064:	4b4c      	ldr	r3, [pc, #304]	; (800a198 <UART_SetConfig+0x9c4>)
 800a066:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a068:	e009      	b.n	800a07e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a06a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a06e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a070:	e005      	b.n	800a07e <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 800a072:	2300      	movs	r3, #0
 800a074:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800a076:	2301      	movs	r3, #1
 800a078:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800a07c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a07e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a080:	2b00      	cmp	r3, #0
 800a082:	f000 80ea 	beq.w	800a25a <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a08a:	4a44      	ldr	r2, [pc, #272]	; (800a19c <UART_SetConfig+0x9c8>)
 800a08c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a090:	461a      	mov	r2, r3
 800a092:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a094:	fbb3 f3f2 	udiv	r3, r3, r2
 800a098:	005a      	lsls	r2, r3, #1
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	685b      	ldr	r3, [r3, #4]
 800a09e:	085b      	lsrs	r3, r3, #1
 800a0a0:	441a      	add	r2, r3
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	685b      	ldr	r3, [r3, #4]
 800a0a6:	fbb2 f3f3 	udiv	r3, r2, r3
 800a0aa:	b29b      	uxth	r3, r3
 800a0ac:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a0ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0b0:	2b0f      	cmp	r3, #15
 800a0b2:	d916      	bls.n	800a0e2 <UART_SetConfig+0x90e>
 800a0b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a0ba:	d212      	bcs.n	800a0e2 <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a0bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0be:	b29b      	uxth	r3, r3
 800a0c0:	f023 030f 	bic.w	r3, r3, #15
 800a0c4:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a0c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0c8:	085b      	lsrs	r3, r3, #1
 800a0ca:	b29b      	uxth	r3, r3
 800a0cc:	f003 0307 	and.w	r3, r3, #7
 800a0d0:	b29a      	uxth	r2, r3
 800a0d2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a0d4:	4313      	orrs	r3, r2
 800a0d6:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800a0de:	60da      	str	r2, [r3, #12]
 800a0e0:	e0bb      	b.n	800a25a <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800a0e2:	2301      	movs	r3, #1
 800a0e4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800a0e8:	e0b7      	b.n	800a25a <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a0ea:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a0ee:	2b20      	cmp	r3, #32
 800a0f0:	dc4a      	bgt.n	800a188 <UART_SetConfig+0x9b4>
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	f2c0 8086 	blt.w	800a204 <UART_SetConfig+0xa30>
 800a0f8:	2b20      	cmp	r3, #32
 800a0fa:	f200 8083 	bhi.w	800a204 <UART_SetConfig+0xa30>
 800a0fe:	a201      	add	r2, pc, #4	; (adr r2, 800a104 <UART_SetConfig+0x930>)
 800a100:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a104:	0800a18f 	.word	0x0800a18f
 800a108:	0800a1a9 	.word	0x0800a1a9
 800a10c:	0800a205 	.word	0x0800a205
 800a110:	0800a205 	.word	0x0800a205
 800a114:	0800a1b1 	.word	0x0800a1b1
 800a118:	0800a205 	.word	0x0800a205
 800a11c:	0800a205 	.word	0x0800a205
 800a120:	0800a205 	.word	0x0800a205
 800a124:	0800a1c1 	.word	0x0800a1c1
 800a128:	0800a205 	.word	0x0800a205
 800a12c:	0800a205 	.word	0x0800a205
 800a130:	0800a205 	.word	0x0800a205
 800a134:	0800a205 	.word	0x0800a205
 800a138:	0800a205 	.word	0x0800a205
 800a13c:	0800a205 	.word	0x0800a205
 800a140:	0800a205 	.word	0x0800a205
 800a144:	0800a1d1 	.word	0x0800a1d1
 800a148:	0800a205 	.word	0x0800a205
 800a14c:	0800a205 	.word	0x0800a205
 800a150:	0800a205 	.word	0x0800a205
 800a154:	0800a205 	.word	0x0800a205
 800a158:	0800a205 	.word	0x0800a205
 800a15c:	0800a205 	.word	0x0800a205
 800a160:	0800a205 	.word	0x0800a205
 800a164:	0800a205 	.word	0x0800a205
 800a168:	0800a205 	.word	0x0800a205
 800a16c:	0800a205 	.word	0x0800a205
 800a170:	0800a205 	.word	0x0800a205
 800a174:	0800a205 	.word	0x0800a205
 800a178:	0800a205 	.word	0x0800a205
 800a17c:	0800a205 	.word	0x0800a205
 800a180:	0800a205 	.word	0x0800a205
 800a184:	0800a1f7 	.word	0x0800a1f7
 800a188:	2b40      	cmp	r3, #64	; 0x40
 800a18a:	d037      	beq.n	800a1fc <UART_SetConfig+0xa28>
 800a18c:	e03a      	b.n	800a204 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a18e:	f7fb fc8f 	bl	8005ab0 <HAL_RCC_GetPCLK1Freq>
 800a192:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a194:	e03c      	b.n	800a210 <UART_SetConfig+0xa3c>
 800a196:	bf00      	nop
 800a198:	003d0900 	.word	0x003d0900
 800a19c:	0800ce5c 	.word	0x0800ce5c
 800a1a0:	58024400 	.word	0x58024400
 800a1a4:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a1a8:	f7fb fc98 	bl	8005adc <HAL_RCC_GetPCLK2Freq>
 800a1ac:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a1ae:	e02f      	b.n	800a210 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a1b0:	f107 0314 	add.w	r3, r7, #20
 800a1b4:	4618      	mov	r0, r3
 800a1b6:	f7fd f8cf 	bl	8007358 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a1ba:	69bb      	ldr	r3, [r7, #24]
 800a1bc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a1be:	e027      	b.n	800a210 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a1c0:	f107 0308 	add.w	r3, r7, #8
 800a1c4:	4618      	mov	r0, r3
 800a1c6:	f7fd fa1b 	bl	8007600 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a1ce:	e01f      	b.n	800a210 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a1d0:	4b2c      	ldr	r3, [pc, #176]	; (800a284 <UART_SetConfig+0xab0>)
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	f003 0320 	and.w	r3, r3, #32
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d009      	beq.n	800a1f0 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a1dc:	4b29      	ldr	r3, [pc, #164]	; (800a284 <UART_SetConfig+0xab0>)
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	08db      	lsrs	r3, r3, #3
 800a1e2:	f003 0303 	and.w	r3, r3, #3
 800a1e6:	4a28      	ldr	r2, [pc, #160]	; (800a288 <UART_SetConfig+0xab4>)
 800a1e8:	fa22 f303 	lsr.w	r3, r2, r3
 800a1ec:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a1ee:	e00f      	b.n	800a210 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 800a1f0:	4b25      	ldr	r3, [pc, #148]	; (800a288 <UART_SetConfig+0xab4>)
 800a1f2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a1f4:	e00c      	b.n	800a210 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a1f6:	4b25      	ldr	r3, [pc, #148]	; (800a28c <UART_SetConfig+0xab8>)
 800a1f8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a1fa:	e009      	b.n	800a210 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a1fc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a200:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a202:	e005      	b.n	800a210 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 800a204:	2300      	movs	r3, #0
 800a206:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800a208:	2301      	movs	r3, #1
 800a20a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800a20e:	bf00      	nop
    }

    if (pclk != 0U)
 800a210:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a212:	2b00      	cmp	r3, #0
 800a214:	d021      	beq.n	800a25a <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a21a:	4a1d      	ldr	r2, [pc, #116]	; (800a290 <UART_SetConfig+0xabc>)
 800a21c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a220:	461a      	mov	r2, r3
 800a222:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a224:	fbb3 f2f2 	udiv	r2, r3, r2
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	685b      	ldr	r3, [r3, #4]
 800a22c:	085b      	lsrs	r3, r3, #1
 800a22e:	441a      	add	r2, r3
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	685b      	ldr	r3, [r3, #4]
 800a234:	fbb2 f3f3 	udiv	r3, r2, r3
 800a238:	b29b      	uxth	r3, r3
 800a23a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a23c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a23e:	2b0f      	cmp	r3, #15
 800a240:	d908      	bls.n	800a254 <UART_SetConfig+0xa80>
 800a242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a244:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a248:	d204      	bcs.n	800a254 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a250:	60da      	str	r2, [r3, #12]
 800a252:	e002      	b.n	800a25a <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800a254:	2301      	movs	r3, #1
 800a256:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	2201      	movs	r2, #1
 800a25e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	2201      	movs	r2, #1
 800a266:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	2200      	movs	r2, #0
 800a26e:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	2200      	movs	r2, #0
 800a274:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800a276:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800a27a:	4618      	mov	r0, r3
 800a27c:	3738      	adds	r7, #56	; 0x38
 800a27e:	46bd      	mov	sp, r7
 800a280:	bdb0      	pop	{r4, r5, r7, pc}
 800a282:	bf00      	nop
 800a284:	58024400 	.word	0x58024400
 800a288:	03d09000 	.word	0x03d09000
 800a28c:	003d0900 	.word	0x003d0900
 800a290:	0800ce5c 	.word	0x0800ce5c

0800a294 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a294:	b480      	push	{r7}
 800a296:	b083      	sub	sp, #12
 800a298:	af00      	add	r7, sp, #0
 800a29a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2a0:	f003 0301 	and.w	r3, r3, #1
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d00a      	beq.n	800a2be <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	685b      	ldr	r3, [r3, #4]
 800a2ae:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	430a      	orrs	r2, r1
 800a2bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2c2:	f003 0302 	and.w	r3, r3, #2
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d00a      	beq.n	800a2e0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	685b      	ldr	r3, [r3, #4]
 800a2d0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	430a      	orrs	r2, r1
 800a2de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2e4:	f003 0304 	and.w	r3, r3, #4
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d00a      	beq.n	800a302 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	685b      	ldr	r3, [r3, #4]
 800a2f2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	430a      	orrs	r2, r1
 800a300:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a306:	f003 0308 	and.w	r3, r3, #8
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d00a      	beq.n	800a324 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	685b      	ldr	r3, [r3, #4]
 800a314:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	430a      	orrs	r2, r1
 800a322:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a328:	f003 0310 	and.w	r3, r3, #16
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d00a      	beq.n	800a346 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	689b      	ldr	r3, [r3, #8]
 800a336:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	430a      	orrs	r2, r1
 800a344:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a34a:	f003 0320 	and.w	r3, r3, #32
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d00a      	beq.n	800a368 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	689b      	ldr	r3, [r3, #8]
 800a358:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	430a      	orrs	r2, r1
 800a366:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a36c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a370:	2b00      	cmp	r3, #0
 800a372:	d01a      	beq.n	800a3aa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	685b      	ldr	r3, [r3, #4]
 800a37a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	430a      	orrs	r2, r1
 800a388:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a38e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a392:	d10a      	bne.n	800a3aa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	685b      	ldr	r3, [r3, #4]
 800a39a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	430a      	orrs	r2, r1
 800a3a8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d00a      	beq.n	800a3cc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	685b      	ldr	r3, [r3, #4]
 800a3bc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	430a      	orrs	r2, r1
 800a3ca:	605a      	str	r2, [r3, #4]
  }
}
 800a3cc:	bf00      	nop
 800a3ce:	370c      	adds	r7, #12
 800a3d0:	46bd      	mov	sp, r7
 800a3d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d6:	4770      	bx	lr

0800a3d8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a3d8:	b580      	push	{r7, lr}
 800a3da:	b086      	sub	sp, #24
 800a3dc:	af02      	add	r7, sp, #8
 800a3de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	2200      	movs	r2, #0
 800a3e4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a3e8:	f7f7 f962 	bl	80016b0 <HAL_GetTick>
 800a3ec:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	f003 0308 	and.w	r3, r3, #8
 800a3f8:	2b08      	cmp	r3, #8
 800a3fa:	d10e      	bne.n	800a41a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a3fc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a400:	9300      	str	r3, [sp, #0]
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	2200      	movs	r2, #0
 800a406:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a40a:	6878      	ldr	r0, [r7, #4]
 800a40c:	f000 f82f 	bl	800a46e <UART_WaitOnFlagUntilTimeout>
 800a410:	4603      	mov	r3, r0
 800a412:	2b00      	cmp	r3, #0
 800a414:	d001      	beq.n	800a41a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a416:	2303      	movs	r3, #3
 800a418:	e025      	b.n	800a466 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	f003 0304 	and.w	r3, r3, #4
 800a424:	2b04      	cmp	r3, #4
 800a426:	d10e      	bne.n	800a446 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a428:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a42c:	9300      	str	r3, [sp, #0]
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	2200      	movs	r2, #0
 800a432:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a436:	6878      	ldr	r0, [r7, #4]
 800a438:	f000 f819 	bl	800a46e <UART_WaitOnFlagUntilTimeout>
 800a43c:	4603      	mov	r3, r0
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d001      	beq.n	800a446 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a442:	2303      	movs	r3, #3
 800a444:	e00f      	b.n	800a466 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	2220      	movs	r2, #32
 800a44a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	2220      	movs	r2, #32
 800a452:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	2200      	movs	r2, #0
 800a45a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	2200      	movs	r2, #0
 800a460:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a464:	2300      	movs	r3, #0
}
 800a466:	4618      	mov	r0, r3
 800a468:	3710      	adds	r7, #16
 800a46a:	46bd      	mov	sp, r7
 800a46c:	bd80      	pop	{r7, pc}

0800a46e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a46e:	b580      	push	{r7, lr}
 800a470:	b084      	sub	sp, #16
 800a472:	af00      	add	r7, sp, #0
 800a474:	60f8      	str	r0, [r7, #12]
 800a476:	60b9      	str	r1, [r7, #8]
 800a478:	603b      	str	r3, [r7, #0]
 800a47a:	4613      	mov	r3, r2
 800a47c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a47e:	e062      	b.n	800a546 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a480:	69bb      	ldr	r3, [r7, #24]
 800a482:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a486:	d05e      	beq.n	800a546 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a488:	f7f7 f912 	bl	80016b0 <HAL_GetTick>
 800a48c:	4602      	mov	r2, r0
 800a48e:	683b      	ldr	r3, [r7, #0]
 800a490:	1ad3      	subs	r3, r2, r3
 800a492:	69ba      	ldr	r2, [r7, #24]
 800a494:	429a      	cmp	r2, r3
 800a496:	d302      	bcc.n	800a49e <UART_WaitOnFlagUntilTimeout+0x30>
 800a498:	69bb      	ldr	r3, [r7, #24]
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d11d      	bne.n	800a4da <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	681a      	ldr	r2, [r3, #0]
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a4ac:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	689a      	ldr	r2, [r3, #8]
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	f022 0201 	bic.w	r2, r2, #1
 800a4bc:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	2220      	movs	r2, #32
 800a4c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	2220      	movs	r2, #32
 800a4ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	2200      	movs	r2, #0
 800a4d2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800a4d6:	2303      	movs	r3, #3
 800a4d8:	e045      	b.n	800a566 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	f003 0304 	and.w	r3, r3, #4
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d02e      	beq.n	800a546 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	69db      	ldr	r3, [r3, #28]
 800a4ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a4f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a4f6:	d126      	bne.n	800a546 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a500:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	681a      	ldr	r2, [r3, #0]
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a510:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	689a      	ldr	r2, [r3, #8]
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	f022 0201 	bic.w	r2, r2, #1
 800a520:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	2220      	movs	r2, #32
 800a526:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	2220      	movs	r2, #32
 800a52e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	2220      	movs	r2, #32
 800a536:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	2200      	movs	r2, #0
 800a53e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800a542:	2303      	movs	r3, #3
 800a544:	e00f      	b.n	800a566 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	69da      	ldr	r2, [r3, #28]
 800a54c:	68bb      	ldr	r3, [r7, #8]
 800a54e:	4013      	ands	r3, r2
 800a550:	68ba      	ldr	r2, [r7, #8]
 800a552:	429a      	cmp	r2, r3
 800a554:	bf0c      	ite	eq
 800a556:	2301      	moveq	r3, #1
 800a558:	2300      	movne	r3, #0
 800a55a:	b2db      	uxtb	r3, r3
 800a55c:	461a      	mov	r2, r3
 800a55e:	79fb      	ldrb	r3, [r7, #7]
 800a560:	429a      	cmp	r2, r3
 800a562:	d08d      	beq.n	800a480 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a564:	2300      	movs	r3, #0
}
 800a566:	4618      	mov	r0, r3
 800a568:	3710      	adds	r7, #16
 800a56a:	46bd      	mov	sp, r7
 800a56c:	bd80      	pop	{r7, pc}

0800a56e <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a56e:	b480      	push	{r7}
 800a570:	b083      	sub	sp, #12
 800a572:	af00      	add	r7, sp, #0
 800a574:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	681a      	ldr	r2, [r3, #0]
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800a584:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	689a      	ldr	r2, [r3, #8]
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800a594:	609a      	str	r2, [r3, #8]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	2220      	movs	r2, #32
 800a59a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800a59e:	bf00      	nop
 800a5a0:	370c      	adds	r7, #12
 800a5a2:	46bd      	mov	sp, r7
 800a5a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a8:	4770      	bx	lr
	...

0800a5ac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a5ac:	b480      	push	{r7}
 800a5ae:	b083      	sub	sp, #12
 800a5b0:	af00      	add	r7, sp, #0
 800a5b2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	681a      	ldr	r2, [r3, #0]
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800a5c2:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	6899      	ldr	r1, [r3, #8]
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	681a      	ldr	r2, [r3, #0]
 800a5ce:	4b0f      	ldr	r3, [pc, #60]	; (800a60c <UART_EndRxTransfer+0x60>)
 800a5d0:	400b      	ands	r3, r1
 800a5d2:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a5d8:	2b01      	cmp	r3, #1
 800a5da:	d107      	bne.n	800a5ec <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	681a      	ldr	r2, [r3, #0]
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	f022 0210 	bic.w	r2, r2, #16
 800a5ea:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	2220      	movs	r2, #32
 800a5f0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	2200      	movs	r2, #0
 800a5f8:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	2200      	movs	r2, #0
 800a5fe:	671a      	str	r2, [r3, #112]	; 0x70
}
 800a600:	bf00      	nop
 800a602:	370c      	adds	r7, #12
 800a604:	46bd      	mov	sp, r7
 800a606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a60a:	4770      	bx	lr
 800a60c:	effffffe 	.word	0xeffffffe

0800a610 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a610:	b580      	push	{r7, lr}
 800a612:	b084      	sub	sp, #16
 800a614:	af00      	add	r7, sp, #0
 800a616:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a61c:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	69db      	ldr	r3, [r3, #28]
 800a622:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a626:	d014      	beq.n	800a652 <UART_DMATransmitCplt+0x42>
  {
    huart->TxXferCount = 0U;
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	2200      	movs	r2, #0
 800a62c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	689a      	ldr	r2, [r3, #8]
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a63e:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	681a      	ldr	r2, [r3, #0]
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a64e:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a650:	e002      	b.n	800a658 <UART_DMATransmitCplt+0x48>
    HAL_UART_TxCpltCallback(huart);
 800a652:	68f8      	ldr	r0, [r7, #12]
 800a654:	f7ff f894 	bl	8009780 <HAL_UART_TxCpltCallback>
}
 800a658:	bf00      	nop
 800a65a:	3710      	adds	r7, #16
 800a65c:	46bd      	mov	sp, r7
 800a65e:	bd80      	pop	{r7, pc}

0800a660 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a660:	b580      	push	{r7, lr}
 800a662:	b084      	sub	sp, #16
 800a664:	af00      	add	r7, sp, #0
 800a666:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a66c:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800a66e:	68f8      	ldr	r0, [r7, #12]
 800a670:	f7ff f890 	bl	8009794 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a674:	bf00      	nop
 800a676:	3710      	adds	r7, #16
 800a678:	46bd      	mov	sp, r7
 800a67a:	bd80      	pop	{r7, pc}

0800a67c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a67c:	b580      	push	{r7, lr}
 800a67e:	b086      	sub	sp, #24
 800a680:	af00      	add	r7, sp, #0
 800a682:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a688:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800a68a:	697b      	ldr	r3, [r7, #20]
 800a68c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a690:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800a692:	697b      	ldr	r3, [r7, #20]
 800a694:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a698:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800a69a:	697b      	ldr	r3, [r7, #20]
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	689b      	ldr	r3, [r3, #8]
 800a6a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a6a4:	2b80      	cmp	r3, #128	; 0x80
 800a6a6:	d109      	bne.n	800a6bc <UART_DMAError+0x40>
 800a6a8:	693b      	ldr	r3, [r7, #16]
 800a6aa:	2b21      	cmp	r3, #33	; 0x21
 800a6ac:	d106      	bne.n	800a6bc <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800a6ae:	697b      	ldr	r3, [r7, #20]
 800a6b0:	2200      	movs	r2, #0
 800a6b2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800a6b6:	6978      	ldr	r0, [r7, #20]
 800a6b8:	f7ff ff59 	bl	800a56e <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800a6bc:	697b      	ldr	r3, [r7, #20]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	689b      	ldr	r3, [r3, #8]
 800a6c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a6c6:	2b40      	cmp	r3, #64	; 0x40
 800a6c8:	d109      	bne.n	800a6de <UART_DMAError+0x62>
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	2b22      	cmp	r3, #34	; 0x22
 800a6ce:	d106      	bne.n	800a6de <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800a6d0:	697b      	ldr	r3, [r7, #20]
 800a6d2:	2200      	movs	r2, #0
 800a6d4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800a6d8:	6978      	ldr	r0, [r7, #20]
 800a6da:	f7ff ff67 	bl	800a5ac <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a6de:	697b      	ldr	r3, [r7, #20]
 800a6e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a6e4:	f043 0210 	orr.w	r2, r3, #16
 800a6e8:	697b      	ldr	r3, [r7, #20]
 800a6ea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a6ee:	6978      	ldr	r0, [r7, #20]
 800a6f0:	f7ff f85a 	bl	80097a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a6f4:	bf00      	nop
 800a6f6:	3718      	adds	r7, #24
 800a6f8:	46bd      	mov	sp, r7
 800a6fa:	bd80      	pop	{r7, pc}

0800a6fc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a6fc:	b580      	push	{r7, lr}
 800a6fe:	b084      	sub	sp, #16
 800a700:	af00      	add	r7, sp, #0
 800a702:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a708:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	2200      	movs	r2, #0
 800a70e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	2200      	movs	r2, #0
 800a716:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a71a:	68f8      	ldr	r0, [r7, #12]
 800a71c:	f7ff f844 	bl	80097a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a720:	bf00      	nop
 800a722:	3710      	adds	r7, #16
 800a724:	46bd      	mov	sp, r7
 800a726:	bd80      	pop	{r7, pc}

0800a728 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a728:	b580      	push	{r7, lr}
 800a72a:	b082      	sub	sp, #8
 800a72c:	af00      	add	r7, sp, #0
 800a72e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	681a      	ldr	r2, [r3, #0]
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a73e:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	2220      	movs	r2, #32
 800a744:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	2200      	movs	r2, #0
 800a74c:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a74e:	6878      	ldr	r0, [r7, #4]
 800a750:	f7ff f816 	bl	8009780 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a754:	bf00      	nop
 800a756:	3708      	adds	r7, #8
 800a758:	46bd      	mov	sp, r7
 800a75a:	bd80      	pop	{r7, pc}

0800a75c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a75c:	b480      	push	{r7}
 800a75e:	b083      	sub	sp, #12
 800a760:	af00      	add	r7, sp, #0
 800a762:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a764:	bf00      	nop
 800a766:	370c      	adds	r7, #12
 800a768:	46bd      	mov	sp, r7
 800a76a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a76e:	4770      	bx	lr

0800a770 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800a770:	b480      	push	{r7}
 800a772:	b083      	sub	sp, #12
 800a774:	af00      	add	r7, sp, #0
 800a776:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800a778:	bf00      	nop
 800a77a:	370c      	adds	r7, #12
 800a77c:	46bd      	mov	sp, r7
 800a77e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a782:	4770      	bx	lr

0800a784 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800a784:	b480      	push	{r7}
 800a786:	b083      	sub	sp, #12
 800a788:	af00      	add	r7, sp, #0
 800a78a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a78c:	bf00      	nop
 800a78e:	370c      	adds	r7, #12
 800a790:	46bd      	mov	sp, r7
 800a792:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a796:	4770      	bx	lr

0800a798 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a798:	b480      	push	{r7}
 800a79a:	b085      	sub	sp, #20
 800a79c:	af00      	add	r7, sp, #0
 800a79e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a7a6:	2b01      	cmp	r3, #1
 800a7a8:	d101      	bne.n	800a7ae <HAL_UARTEx_DisableFifoMode+0x16>
 800a7aa:	2302      	movs	r3, #2
 800a7ac:	e027      	b.n	800a7fe <HAL_UARTEx_DisableFifoMode+0x66>
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	2201      	movs	r2, #1
 800a7b2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	2224      	movs	r2, #36	; 0x24
 800a7ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	681a      	ldr	r2, [r3, #0]
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	f022 0201 	bic.w	r2, r2, #1
 800a7d4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a7dc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	2200      	movs	r2, #0
 800a7e2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	68fa      	ldr	r2, [r7, #12]
 800a7ea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	2220      	movs	r2, #32
 800a7f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	2200      	movs	r2, #0
 800a7f8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a7fc:	2300      	movs	r3, #0
}
 800a7fe:	4618      	mov	r0, r3
 800a800:	3714      	adds	r7, #20
 800a802:	46bd      	mov	sp, r7
 800a804:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a808:	4770      	bx	lr

0800a80a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a80a:	b580      	push	{r7, lr}
 800a80c:	b084      	sub	sp, #16
 800a80e:	af00      	add	r7, sp, #0
 800a810:	6078      	str	r0, [r7, #4]
 800a812:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a81a:	2b01      	cmp	r3, #1
 800a81c:	d101      	bne.n	800a822 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a81e:	2302      	movs	r3, #2
 800a820:	e02d      	b.n	800a87e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	2201      	movs	r2, #1
 800a826:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	2224      	movs	r2, #36	; 0x24
 800a82e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	681a      	ldr	r2, [r3, #0]
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	f022 0201 	bic.w	r2, r2, #1
 800a848:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	689b      	ldr	r3, [r3, #8]
 800a850:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	683a      	ldr	r2, [r7, #0]
 800a85a:	430a      	orrs	r2, r1
 800a85c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a85e:	6878      	ldr	r0, [r7, #4]
 800a860:	f000 f850 	bl	800a904 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	68fa      	ldr	r2, [r7, #12]
 800a86a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	2220      	movs	r2, #32
 800a870:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	2200      	movs	r2, #0
 800a878:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a87c:	2300      	movs	r3, #0
}
 800a87e:	4618      	mov	r0, r3
 800a880:	3710      	adds	r7, #16
 800a882:	46bd      	mov	sp, r7
 800a884:	bd80      	pop	{r7, pc}

0800a886 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a886:	b580      	push	{r7, lr}
 800a888:	b084      	sub	sp, #16
 800a88a:	af00      	add	r7, sp, #0
 800a88c:	6078      	str	r0, [r7, #4]
 800a88e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a896:	2b01      	cmp	r3, #1
 800a898:	d101      	bne.n	800a89e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a89a:	2302      	movs	r3, #2
 800a89c:	e02d      	b.n	800a8fa <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	2201      	movs	r2, #1
 800a8a2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	2224      	movs	r2, #36	; 0x24
 800a8aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	681a      	ldr	r2, [r3, #0]
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	f022 0201 	bic.w	r2, r2, #1
 800a8c4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	689b      	ldr	r3, [r3, #8]
 800a8cc:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	683a      	ldr	r2, [r7, #0]
 800a8d6:	430a      	orrs	r2, r1
 800a8d8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a8da:	6878      	ldr	r0, [r7, #4]
 800a8dc:	f000 f812 	bl	800a904 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	68fa      	ldr	r2, [r7, #12]
 800a8e6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	2220      	movs	r2, #32
 800a8ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	2200      	movs	r2, #0
 800a8f4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a8f8:	2300      	movs	r3, #0
}
 800a8fa:	4618      	mov	r0, r3
 800a8fc:	3710      	adds	r7, #16
 800a8fe:	46bd      	mov	sp, r7
 800a900:	bd80      	pop	{r7, pc}
	...

0800a904 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a904:	b480      	push	{r7}
 800a906:	b085      	sub	sp, #20
 800a908:	af00      	add	r7, sp, #0
 800a90a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a910:	2b00      	cmp	r3, #0
 800a912:	d108      	bne.n	800a926 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	2201      	movs	r2, #1
 800a918:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	2201      	movs	r2, #1
 800a920:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a924:	e031      	b.n	800a98a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a926:	2310      	movs	r3, #16
 800a928:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a92a:	2310      	movs	r3, #16
 800a92c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	689b      	ldr	r3, [r3, #8]
 800a934:	0e5b      	lsrs	r3, r3, #25
 800a936:	b2db      	uxtb	r3, r3
 800a938:	f003 0307 	and.w	r3, r3, #7
 800a93c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	689b      	ldr	r3, [r3, #8]
 800a944:	0f5b      	lsrs	r3, r3, #29
 800a946:	b2db      	uxtb	r3, r3
 800a948:	f003 0307 	and.w	r3, r3, #7
 800a94c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a94e:	7bbb      	ldrb	r3, [r7, #14]
 800a950:	7b3a      	ldrb	r2, [r7, #12]
 800a952:	4911      	ldr	r1, [pc, #68]	; (800a998 <UARTEx_SetNbDataToProcess+0x94>)
 800a954:	5c8a      	ldrb	r2, [r1, r2]
 800a956:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a95a:	7b3a      	ldrb	r2, [r7, #12]
 800a95c:	490f      	ldr	r1, [pc, #60]	; (800a99c <UARTEx_SetNbDataToProcess+0x98>)
 800a95e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a960:	fb93 f3f2 	sdiv	r3, r3, r2
 800a964:	b29a      	uxth	r2, r3
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a96c:	7bfb      	ldrb	r3, [r7, #15]
 800a96e:	7b7a      	ldrb	r2, [r7, #13]
 800a970:	4909      	ldr	r1, [pc, #36]	; (800a998 <UARTEx_SetNbDataToProcess+0x94>)
 800a972:	5c8a      	ldrb	r2, [r1, r2]
 800a974:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a978:	7b7a      	ldrb	r2, [r7, #13]
 800a97a:	4908      	ldr	r1, [pc, #32]	; (800a99c <UARTEx_SetNbDataToProcess+0x98>)
 800a97c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a97e:	fb93 f3f2 	sdiv	r3, r3, r2
 800a982:	b29a      	uxth	r2, r3
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800a98a:	bf00      	nop
 800a98c:	3714      	adds	r7, #20
 800a98e:	46bd      	mov	sp, r7
 800a990:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a994:	4770      	bx	lr
 800a996:	bf00      	nop
 800a998:	0800ce74 	.word	0x0800ce74
 800a99c:	0800ce7c 	.word	0x0800ce7c

0800a9a0 <arm_fir_init_f32>:
        arm_fir_instance_f32 * S,
        uint16_t numTaps,
  const float32_t * pCoeffs,
        float32_t * pState,
        uint32_t blockSize)
{
 800a9a0:	b580      	push	{r7, lr}
 800a9a2:	b084      	sub	sp, #16
 800a9a4:	af00      	add	r7, sp, #0
 800a9a6:	60f8      	str	r0, [r7, #12]
 800a9a8:	607a      	str	r2, [r7, #4]
 800a9aa:	603b      	str	r3, [r7, #0]
 800a9ac:	460b      	mov	r3, r1
 800a9ae:	817b      	strh	r3, [r7, #10]
  /* Assign filter taps */
  S->numTaps = numTaps;
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	897a      	ldrh	r2, [r7, #10]
 800a9b4:	801a      	strh	r2, [r3, #0]

  /* Assign coefficient pointer */
  S->pCoeffs = pCoeffs;
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	687a      	ldr	r2, [r7, #4]
 800a9ba:	609a      	str	r2, [r3, #8]

  /* Clear state buffer. The size is always (blockSize + numTaps - 1) */
#if defined(ARM_MATH_MVEF) && !defined(ARM_MATH_AUTOVECTORIZE)
  memset(pState, 0, (numTaps + (blockSize - 1U) + blockSize) * sizeof(float32_t));
#else
  memset(pState, 0, (numTaps + (blockSize - 1U)) * sizeof(float32_t));
 800a9bc:	897a      	ldrh	r2, [r7, #10]
 800a9be:	69bb      	ldr	r3, [r7, #24]
 800a9c0:	4413      	add	r3, r2
 800a9c2:	3b01      	subs	r3, #1
 800a9c4:	009b      	lsls	r3, r3, #2
 800a9c6:	461a      	mov	r2, r3
 800a9c8:	2100      	movs	r1, #0
 800a9ca:	6838      	ldr	r0, [r7, #0]
 800a9cc:	f001 ff52 	bl	800c874 <memset>
#endif
  /* Assign state pointer */
  S->pState = pState;
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	683a      	ldr	r2, [r7, #0]
 800a9d4:	605a      	str	r2, [r3, #4]
}
 800a9d6:	bf00      	nop
 800a9d8:	3710      	adds	r7, #16
 800a9da:	46bd      	mov	sp, r7
 800a9dc:	bd80      	pop	{r7, pc}

0800a9de <arm_mat_init_q15>:
void arm_mat_init_q15(
  arm_matrix_instance_q15 * S,
  uint16_t nRows,
  uint16_t nColumns,
  q15_t * pData)
{
 800a9de:	b480      	push	{r7}
 800a9e0:	b085      	sub	sp, #20
 800a9e2:	af00      	add	r7, sp, #0
 800a9e4:	60f8      	str	r0, [r7, #12]
 800a9e6:	607b      	str	r3, [r7, #4]
 800a9e8:	460b      	mov	r3, r1
 800a9ea:	817b      	strh	r3, [r7, #10]
 800a9ec:	4613      	mov	r3, r2
 800a9ee:	813b      	strh	r3, [r7, #8]
  /* Assign Number of Rows */
  S->numRows = nRows;
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	897a      	ldrh	r2, [r7, #10]
 800a9f4:	801a      	strh	r2, [r3, #0]

  /* Assign Number of Columns */
  S->numCols = nColumns;
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	893a      	ldrh	r2, [r7, #8]
 800a9fa:	805a      	strh	r2, [r3, #2]

  /* Assign Data pointer */
  S->pData = pData;
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	687a      	ldr	r2, [r7, #4]
 800aa00:	605a      	str	r2, [r3, #4]
}
 800aa02:	bf00      	nop
 800aa04:	3714      	adds	r7, #20
 800aa06:	46bd      	mov	sp, r7
 800aa08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa0c:	4770      	bx	lr

0800aa0e <arm_mat_trans_q15>:
}
#else
arm_status arm_mat_trans_q15(
  const arm_matrix_instance_q15 * pSrc,
        arm_matrix_instance_q15 * pDst)
{
 800aa0e:	b480      	push	{r7}
 800aa10:	b08b      	sub	sp, #44	; 0x2c
 800aa12:	af00      	add	r7, sp, #0
 800aa14:	6078      	str	r0, [r7, #4]
 800aa16:	6039      	str	r1, [r7, #0]
        q15_t *pIn = pSrc->pData;                      /* input data matrix pointer */
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	685b      	ldr	r3, [r3, #4]
 800aa1c:	627b      	str	r3, [r7, #36]	; 0x24
        q15_t *pOut = pDst->pData;                     /* output data matrix pointer */
 800aa1e:	683b      	ldr	r3, [r7, #0]
 800aa20:	685b      	ldr	r3, [r3, #4]
 800aa22:	623b      	str	r3, [r7, #32]
        uint16_t nRows = pSrc->numRows;                /* number of rows */
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	881b      	ldrh	r3, [r3, #0]
 800aa28:	827b      	strh	r3, [r7, #18]
        uint16_t nCols = pSrc->numCols;                /* number of columns */
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	885b      	ldrh	r3, [r3, #2]
 800aa2e:	823b      	strh	r3, [r7, #16]
        uint32_t col, row = nRows, i = 0U;             /* Loop counters */
 800aa30:	8a7b      	ldrh	r3, [r7, #18]
 800aa32:	61bb      	str	r3, [r7, #24]
 800aa34:	2300      	movs	r3, #0
 800aa36:	617b      	str	r3, [r7, #20]
    /* Matrix transpose by exchanging the rows with columns */
    /* row loop */
    do
    {
      /* Pointer pOut is set to starting address of column being processed */
      pOut = pDst->pData + i;
 800aa38:	683b      	ldr	r3, [r7, #0]
 800aa3a:	685a      	ldr	r2, [r3, #4]
 800aa3c:	697b      	ldr	r3, [r7, #20]
 800aa3e:	005b      	lsls	r3, r3, #1
 800aa40:	4413      	add	r3, r2
 800aa42:	623b      	str	r3, [r7, #32]
      col = nCols % 0x4U;

#else

      /* Initialize col with number of samples */
      col = nCols;
 800aa44:	8a3b      	ldrh	r3, [r7, #16]
 800aa46:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

      while (col > 0U)
 800aa48:	e00e      	b.n	800aa68 <arm_mat_trans_q15+0x5a>
      {
        /* Read and store input element in destination */
        *pOut = *pIn++;
 800aa4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa4c:	1c9a      	adds	r2, r3, #2
 800aa4e:	627a      	str	r2, [r7, #36]	; 0x24
 800aa50:	f9b3 2000 	ldrsh.w	r2, [r3]
 800aa54:	6a3b      	ldr	r3, [r7, #32]
 800aa56:	801a      	strh	r2, [r3, #0]

        /* Update pointer pOut to point to next row of transposed matrix */
        pOut += nRows;
 800aa58:	8a7b      	ldrh	r3, [r7, #18]
 800aa5a:	005b      	lsls	r3, r3, #1
 800aa5c:	6a3a      	ldr	r2, [r7, #32]
 800aa5e:	4413      	add	r3, r2
 800aa60:	623b      	str	r3, [r7, #32]

        /* Decrement column loop counter */
        col--;
 800aa62:	69fb      	ldr	r3, [r7, #28]
 800aa64:	3b01      	subs	r3, #1
 800aa66:	61fb      	str	r3, [r7, #28]
      while (col > 0U)
 800aa68:	69fb      	ldr	r3, [r7, #28]
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d1ed      	bne.n	800aa4a <arm_mat_trans_q15+0x3c>
      }

      i++;
 800aa6e:	697b      	ldr	r3, [r7, #20]
 800aa70:	3301      	adds	r3, #1
 800aa72:	617b      	str	r3, [r7, #20]

      /* Decrement row loop counter */
      row--;
 800aa74:	69bb      	ldr	r3, [r7, #24]
 800aa76:	3b01      	subs	r3, #1
 800aa78:	61bb      	str	r3, [r7, #24]

    } while (row > 0U);          /* row loop end */
 800aa7a:	69bb      	ldr	r3, [r7, #24]
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d1db      	bne.n	800aa38 <arm_mat_trans_q15+0x2a>

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800aa80:	2300      	movs	r3, #0
 800aa82:	73fb      	strb	r3, [r7, #15]
  }

  /* Return to application */
  return (status);
 800aa84:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800aa88:	4618      	mov	r0, r3
 800aa8a:	372c      	adds	r7, #44	; 0x2c
 800aa8c:	46bd      	mov	sp, r7
 800aa8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa92:	4770      	bx	lr

0800aa94 <D16_GENERIC>:
 800aa94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa98:	b089      	sub	sp, #36	; 0x24
 800aa9a:	6993      	ldr	r3, [r2, #24]
 800aa9c:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 800aa9e:	9103      	str	r1, [sp, #12]
 800aaa0:	9307      	str	r3, [sp, #28]
 800aaa2:	69d3      	ldr	r3, [r2, #28]
 800aaa4:	e9d2 c102 	ldrd	ip, r1, [r2, #8]
 800aaa8:	e9d2 4a04 	ldrd	r4, sl, [r2, #16]
 800aaac:	9106      	str	r1, [sp, #24]
 800aaae:	e9d2 810c 	ldrd	r8, r1, [r2, #48]	; 0x30
 800aab2:	2d00      	cmp	r5, #0
 800aab4:	d063      	beq.n	800ab7e <D16_GENERIC+0xea>
 800aab6:	f001 0520 	and.w	r5, r1, #32
 800aaba:	f001 0110 	and.w	r1, r1, #16
 800aabe:	f8df e0e0 	ldr.w	lr, [pc, #224]	; 800aba0 <D16_GENERIC+0x10c>
 800aac2:	46c1      	mov	r9, r8
 800aac4:	9104      	str	r1, [sp, #16]
 800aac6:	2100      	movs	r1, #0
 800aac8:	9505      	str	r5, [sp, #20]
 800aaca:	e04d      	b.n	800ab68 <D16_GENERIC+0xd4>
 800aacc:	5d87      	ldrb	r7, [r0, r6]
 800aace:	7805      	ldrb	r5, [r0, #0]
 800aad0:	eb00 0046 	add.w	r0, r0, r6, lsl #1
 800aad4:	eb05 2707 	add.w	r7, r5, r7, lsl #8
 800aad8:	b2fe      	uxtb	r6, r7
 800aada:	f3c7 2707 	ubfx	r7, r7, #8, #8
 800aade:	f85e 5026 	ldr.w	r5, [lr, r6, lsl #2]
 800aae2:	f85e 6027 	ldr.w	r6, [lr, r7, lsl #2]
 800aae6:	441d      	add	r5, r3
 800aae8:	eb06 2395 	add.w	r3, r6, r5, lsr #10
 800aaec:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800aaf0:	f3c3 0609 	ubfx	r6, r3, #0, #10
 800aaf4:	0a9b      	lsrs	r3, r3, #10
 800aaf6:	ea46 4605 	orr.w	r6, r6, r5, lsl #16
 800aafa:	4d27      	ldr	r5, [pc, #156]	; (800ab98 <D16_GENERIC+0x104>)
 800aafc:	fb26 c505 	smlad	r5, r6, r5, ip
 800ab00:	4f26      	ldr	r7, [pc, #152]	; (800ab9c <D16_GENERIC+0x108>)
 800ab02:	fb26 fc07 	smuad	ip, r6, r7
 800ab06:	9e04      	ldr	r6, [sp, #16]
 800ab08:	f101 0801 	add.w	r8, r1, #1
 800ab0c:	f5a5 6500 	sub.w	r5, r5, #2048	; 0x800
 800ab10:	b1ae      	cbz	r6, 800ab3e <D16_GENERIC+0xaa>
 800ab12:	442c      	add	r4, r5
 800ab14:	f8d2 b020 	ldr.w	fp, [r2, #32]
 800ab18:	eba4 040a 	sub.w	r4, r4, sl
 800ab1c:	46aa      	mov	sl, r5
 800ab1e:	17e7      	asrs	r7, r4, #31
 800ab20:	fba4 450b 	umull	r4, r5, r4, fp
 800ab24:	e9cd 4500 	strd	r4, r5, [sp]
 800ab28:	fb0b 5407 	mla	r4, fp, r7, r5
 800ab2c:	9401      	str	r4, [sp, #4]
 800ab2e:	e9dd 4500 	ldrd	r4, r5, [sp]
 800ab32:	f114 4400 	adds.w	r4, r4, #2147483648	; 0x80000000
 800ab36:	f145 0500 	adc.w	r5, r5, #0
 800ab3a:	006c      	lsls	r4, r5, #1
 800ab3c:	4625      	mov	r5, r4
 800ab3e:	f8b2 b028 	ldrh.w	fp, [r2, #40]	; 0x28
 800ab42:	042d      	lsls	r5, r5, #16
 800ab44:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800ab48:	2700      	movs	r7, #0
 800ab4a:	fb01 fb0b 	mul.w	fp, r1, fp
 800ab4e:	fa1f f188 	uxth.w	r1, r8
 800ab52:	fbc9 6705 	smlal	r6, r7, r9, r5
 800ab56:	9e03      	ldr	r6, [sp, #12]
 800ab58:	10bd      	asrs	r5, r7, #2
 800ab5a:	f305 050f 	ssat	r5, #16, r5
 800ab5e:	f826 501b 	strh.w	r5, [r6, fp, lsl #1]
 800ab62:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 800ab64:	428d      	cmp	r5, r1
 800ab66:	d90a      	bls.n	800ab7e <D16_GENERIC+0xea>
 800ab68:	8d55      	ldrh	r5, [r2, #42]	; 0x2a
 800ab6a:	2d01      	cmp	r5, #1
 800ab6c:	b2ee      	uxtb	r6, r5
 800ab6e:	d1ad      	bne.n	800aacc <D16_GENERIC+0x38>
 800ab70:	9d05      	ldr	r5, [sp, #20]
 800ab72:	f850 7b02 	ldr.w	r7, [r0], #2
 800ab76:	2d00      	cmp	r5, #0
 800ab78:	d0ae      	beq.n	800aad8 <D16_GENERIC+0x44>
 800ab7a:	ba7f      	rev16	r7, r7
 800ab7c:	e7ac      	b.n	800aad8 <D16_GENERIC+0x44>
 800ab7e:	2000      	movs	r0, #0
 800ab80:	9906      	ldr	r1, [sp, #24]
 800ab82:	61d3      	str	r3, [r2, #28]
 800ab84:	9b07      	ldr	r3, [sp, #28]
 800ab86:	f8c2 c008 	str.w	ip, [r2, #8]
 800ab8a:	60d1      	str	r1, [r2, #12]
 800ab8c:	6193      	str	r3, [r2, #24]
 800ab8e:	e9c2 4a04 	strd	r4, sl, [r2, #16]
 800ab92:	b009      	add	sp, #36	; 0x24
 800ab94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab98:	00030001 	.word	0x00030001
 800ab9c:	00010003 	.word	0x00010003
 800aba0:	24000000 	.word	0x24000000

0800aba4 <D24_GENERIC>:
 800aba4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aba8:	e9d2 4304 	ldrd	r4, r3, [r2, #16]
 800abac:	b089      	sub	sp, #36	; 0x24
 800abae:	8cd6      	ldrh	r6, [r2, #38]	; 0x26
 800abb0:	9303      	str	r3, [sp, #12]
 800abb2:	6993      	ldr	r3, [r2, #24]
 800abb4:	9104      	str	r1, [sp, #16]
 800abb6:	9307      	str	r3, [sp, #28]
 800abb8:	69d1      	ldr	r1, [r2, #28]
 800abba:	e9d2 3802 	ldrd	r3, r8, [r2, #8]
 800abbe:	e9d2 a50c 	ldrd	sl, r5, [r2, #48]	; 0x30
 800abc2:	2e00      	cmp	r6, #0
 800abc4:	f000 8088 	beq.w	800acd8 <D24_GENERIC+0x134>
 800abc8:	f005 0620 	and.w	r6, r5, #32
 800abcc:	f005 0510 	and.w	r5, r5, #16
 800abd0:	f04f 0c00 	mov.w	ip, #0
 800abd4:	f8df e140 	ldr.w	lr, [pc, #320]	; 800ad18 <D24_GENERIC+0x174>
 800abd8:	9606      	str	r6, [sp, #24]
 800abda:	9505      	str	r5, [sp, #20]
 800abdc:	e064      	b.n	800aca8 <D24_GENERIC+0x104>
 800abde:	f810 5016 	ldrb.w	r5, [r0, r6, lsl #1]
 800abe2:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 800abe6:	f810 b007 	ldrb.w	fp, [r0, r7]
 800abea:	042d      	lsls	r5, r5, #16
 800abec:	19f0      	adds	r0, r6, r7
 800abee:	eb05 250b 	add.w	r5, r5, fp, lsl #8
 800abf2:	44a9      	add	r9, r5
 800abf4:	fa5f f689 	uxtb.w	r6, r9
 800abf8:	f3c9 2707 	ubfx	r7, r9, #8, #8
 800abfc:	ea4f 4919 	mov.w	r9, r9, lsr #16
 800ac00:	f85e 6026 	ldr.w	r6, [lr, r6, lsl #2]
 800ac04:	f85e 7027 	ldr.w	r7, [lr, r7, lsl #2]
 800ac08:	eb06 2691 	add.w	r6, r6, r1, lsr #10
 800ac0c:	f85e 1029 	ldr.w	r1, [lr, r9, lsl #2]
 800ac10:	eb07 2796 	add.w	r7, r7, r6, lsr #10
 800ac14:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800ac18:	f3c7 0509 	ubfx	r5, r7, #0, #10
 800ac1c:	eb01 2197 	add.w	r1, r1, r7, lsr #10
 800ac20:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
 800ac24:	4d3a      	ldr	r5, [pc, #232]	; (800ad10 <D24_GENERIC+0x16c>)
 800ac26:	fb26 8705 	smlad	r7, r6, r5, r8
 800ac2a:	4d3a      	ldr	r5, [pc, #232]	; (800ad14 <D24_GENERIC+0x170>)
 800ac2c:	fb26 3805 	smlad	r8, r6, r5, r3
 800ac30:	f3c1 0309 	ubfx	r3, r1, #0, #10
 800ac34:	eb03 0b43 	add.w	fp, r3, r3, lsl #1
 800ac38:	2301      	movs	r3, #1
 800ac3a:	eb08 084b 	add.w	r8, r8, fp, lsl #1
 800ac3e:	fb26 f603 	smuad	r6, r6, r3
 800ac42:	eb0c 0903 	add.w	r9, ip, r3
 800ac46:	eb0b 0306 	add.w	r3, fp, r6
 800ac4a:	9e05      	ldr	r6, [sp, #20]
 800ac4c:	f5a7 55d8 	sub.w	r5, r7, #6912	; 0x1b00
 800ac50:	b1ae      	cbz	r6, 800ac7e <D24_GENERIC+0xda>
 800ac52:	442c      	add	r4, r5
 800ac54:	9e03      	ldr	r6, [sp, #12]
 800ac56:	f8d2 b020 	ldr.w	fp, [r2, #32]
 800ac5a:	1ba4      	subs	r4, r4, r6
 800ac5c:	9503      	str	r5, [sp, #12]
 800ac5e:	17e7      	asrs	r7, r4, #31
 800ac60:	fba4 450b 	umull	r4, r5, r4, fp
 800ac64:	e9cd 4500 	strd	r4, r5, [sp]
 800ac68:	fb0b 5407 	mla	r4, fp, r7, r5
 800ac6c:	9401      	str	r4, [sp, #4]
 800ac6e:	e9dd 4500 	ldrd	r4, r5, [sp]
 800ac72:	f114 4400 	adds.w	r4, r4, #2147483648	; 0x80000000
 800ac76:	f145 0500 	adc.w	r5, r5, #0
 800ac7a:	006c      	lsls	r4, r5, #1
 800ac7c:	4625      	mov	r5, r4
 800ac7e:	f8b2 b028 	ldrh.w	fp, [r2, #40]	; 0x28
 800ac82:	03ad      	lsls	r5, r5, #14
 800ac84:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800ac88:	2700      	movs	r7, #0
 800ac8a:	fb0c fb0b 	mul.w	fp, ip, fp
 800ac8e:	fa1f fc89 	uxth.w	ip, r9
 800ac92:	fbca 6705 	smlal	r6, r7, sl, r5
 800ac96:	9e04      	ldr	r6, [sp, #16]
 800ac98:	10bd      	asrs	r5, r7, #2
 800ac9a:	f305 050f 	ssat	r5, #16, r5
 800ac9e:	f826 501b 	strh.w	r5, [r6, fp, lsl #1]
 800aca2:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 800aca4:	4565      	cmp	r5, ip
 800aca6:	d917      	bls.n	800acd8 <D24_GENERIC+0x134>
 800aca8:	8d55      	ldrh	r5, [r2, #42]	; 0x2a
 800acaa:	f890 9000 	ldrb.w	r9, [r0]
 800acae:	b2ef      	uxtb	r7, r5
 800acb0:	2d01      	cmp	r5, #1
 800acb2:	b23e      	sxth	r6, r7
 800acb4:	d193      	bne.n	800abde <D24_GENERIC+0x3a>
 800acb6:	9d06      	ldr	r5, [sp, #24]
 800acb8:	b1dd      	cbz	r5, 800acf2 <D24_GENERIC+0x14e>
 800acba:	78c7      	ldrb	r7, [r0, #3]
 800acbc:	ea4f 2609 	mov.w	r6, r9, lsl #8
 800acc0:	f01c 0f01 	tst.w	ip, #1
 800acc4:	ea4f 2507 	mov.w	r5, r7, lsl #8
 800acc8:	eb06 4607 	add.w	r6, r6, r7, lsl #16
 800accc:	d11a      	bne.n	800ad04 <D24_GENERIC+0x160>
 800acce:	f890 9001 	ldrb.w	r9, [r0, #1]
 800acd2:	3002      	adds	r0, #2
 800acd4:	44b1      	add	r9, r6
 800acd6:	e78d      	b.n	800abf4 <D24_GENERIC+0x50>
 800acd8:	6093      	str	r3, [r2, #8]
 800acda:	2000      	movs	r0, #0
 800acdc:	9b03      	ldr	r3, [sp, #12]
 800acde:	f8c2 800c 	str.w	r8, [r2, #12]
 800ace2:	6153      	str	r3, [r2, #20]
 800ace4:	9b07      	ldr	r3, [sp, #28]
 800ace6:	61d1      	str	r1, [r2, #28]
 800ace8:	6114      	str	r4, [r2, #16]
 800acea:	6193      	str	r3, [r2, #24]
 800acec:	b009      	add	sp, #36	; 0x24
 800acee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800acf2:	7845      	ldrb	r5, [r0, #1]
 800acf4:	3003      	adds	r0, #3
 800acf6:	f810 6c01 	ldrb.w	r6, [r0, #-1]
 800acfa:	022d      	lsls	r5, r5, #8
 800acfc:	eb05 4506 	add.w	r5, r5, r6, lsl #16
 800ad00:	44a9      	add	r9, r5
 800ad02:	e777      	b.n	800abf4 <D24_GENERIC+0x50>
 800ad04:	7886      	ldrb	r6, [r0, #2]
 800ad06:	3004      	adds	r0, #4
 800ad08:	eb05 4506 	add.w	r5, r5, r6, lsl #16
 800ad0c:	44a9      	add	r9, r5
 800ad0e:	e771      	b.n	800abf4 <D24_GENERIC+0x50>
 800ad10:	00030001 	.word	0x00030001
 800ad14:	00060007 	.word	0x00060007
 800ad18:	24000000 	.word	0x24000000

0800ad1c <D32_GENERIC>:
 800ad1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad20:	e9d2 4304 	ldrd	r4, r3, [r2, #16]
 800ad24:	b089      	sub	sp, #36	; 0x24
 800ad26:	6b15      	ldr	r5, [r2, #48]	; 0x30
 800ad28:	8cd6      	ldrh	r6, [r2, #38]	; 0x26
 800ad2a:	9302      	str	r3, [sp, #8]
 800ad2c:	6993      	ldr	r3, [r2, #24]
 800ad2e:	9104      	str	r1, [sp, #16]
 800ad30:	9307      	str	r3, [sp, #28]
 800ad32:	9503      	str	r5, [sp, #12]
 800ad34:	69d1      	ldr	r1, [r2, #28]
 800ad36:	6b55      	ldr	r5, [r2, #52]	; 0x34
 800ad38:	e9d2 3802 	ldrd	r3, r8, [r2, #8]
 800ad3c:	2e00      	cmp	r6, #0
 800ad3e:	f000 8097 	beq.w	800ae70 <D32_GENERIC+0x154>
 800ad42:	f005 0620 	and.w	r6, r5, #32
 800ad46:	f005 0510 	and.w	r5, r5, #16
 800ad4a:	f04f 0e00 	mov.w	lr, #0
 800ad4e:	f8df c150 	ldr.w	ip, [pc, #336]	; 800aea0 <D32_GENERIC+0x184>
 800ad52:	9606      	str	r6, [sp, #24]
 800ad54:	9505      	str	r5, [sp, #20]
 800ad56:	e079      	b.n	800ae4c <D32_GENERIC+0x130>
 800ad58:	783d      	ldrb	r5, [r7, #0]
 800ad5a:	f810 b009 	ldrb.w	fp, [r0, r9]
 800ad5e:	042d      	lsls	r5, r5, #16
 800ad60:	f810 a006 	ldrb.w	sl, [r0, r6]
 800ad64:	f890 9000 	ldrb.w	r9, [r0]
 800ad68:	eb07 0046 	add.w	r0, r7, r6, lsl #1
 800ad6c:	eb05 650b 	add.w	r5, r5, fp, lsl #24
 800ad70:	eb05 250a 	add.w	r5, r5, sl, lsl #8
 800ad74:	44a9      	add	r9, r5
 800ad76:	fa5f f789 	uxtb.w	r7, r9
 800ad7a:	f3c9 2507 	ubfx	r5, r9, #8, #8
 800ad7e:	f3c9 4607 	ubfx	r6, r9, #16, #8
 800ad82:	ea4f 6919 	mov.w	r9, r9, lsr #24
 800ad86:	f85c 7027 	ldr.w	r7, [ip, r7, lsl #2]
 800ad8a:	f85c 5025 	ldr.w	r5, [ip, r5, lsl #2]
 800ad8e:	eb07 2191 	add.w	r1, r7, r1, lsr #10
 800ad92:	f85c 6026 	ldr.w	r6, [ip, r6, lsl #2]
 800ad96:	f85c 7029 	ldr.w	r7, [ip, r9, lsl #2]
 800ad9a:	eb05 2591 	add.w	r5, r5, r1, lsr #10
 800ad9e:	f3c1 0909 	ubfx	r9, r1, #0, #10
 800ada2:	eb06 2695 	add.w	r6, r6, r5, lsr #10
 800ada6:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800adaa:	eb07 2196 	add.w	r1, r7, r6, lsr #10
 800adae:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800adb2:	ea45 4909 	orr.w	r9, r5, r9, lsl #16
 800adb6:	f3c1 0509 	ubfx	r5, r1, #0, #10
 800adba:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
 800adbe:	4d34      	ldr	r5, [pc, #208]	; (800ae90 <D32_GENERIC+0x174>)
 800adc0:	fb29 8805 	smlad	r8, r9, r5, r8
 800adc4:	f44f 3580 	mov.w	r5, #65536	; 0x10000
 800adc8:	fb26 8705 	smlad	r7, r6, r5, r8
 800adcc:	4d31      	ldr	r5, [pc, #196]	; (800ae94 <D32_GENERIC+0x178>)
 800adce:	fb29 3305 	smlad	r3, r9, r5, r3
 800add2:	4d31      	ldr	r5, [pc, #196]	; (800ae98 <D32_GENERIC+0x17c>)
 800add4:	fb26 3805 	smlad	r8, r6, r5, r3
 800add8:	2301      	movs	r3, #1
 800adda:	fb29 f903 	smuad	r9, r9, r3
 800adde:	4b2f      	ldr	r3, [pc, #188]	; (800ae9c <D32_GENERIC+0x180>)
 800ade0:	fb26 9303 	smlad	r3, r6, r3, r9
 800ade4:	9e05      	ldr	r6, [sp, #20]
 800ade6:	f10e 0901 	add.w	r9, lr, #1
 800adea:	f5a7 4580 	sub.w	r5, r7, #16384	; 0x4000
 800adee:	b1ae      	cbz	r6, 800ae1c <D32_GENERIC+0x100>
 800adf0:	442c      	add	r4, r5
 800adf2:	9e02      	ldr	r6, [sp, #8]
 800adf4:	f8d2 a020 	ldr.w	sl, [r2, #32]
 800adf8:	1ba4      	subs	r4, r4, r6
 800adfa:	9502      	str	r5, [sp, #8]
 800adfc:	17e7      	asrs	r7, r4, #31
 800adfe:	fba4 450a 	umull	r4, r5, r4, sl
 800ae02:	e9cd 4500 	strd	r4, r5, [sp]
 800ae06:	fb0a 5407 	mla	r4, sl, r7, r5
 800ae0a:	9401      	str	r4, [sp, #4]
 800ae0c:	e9dd 4500 	ldrd	r4, r5, [sp]
 800ae10:	f114 4400 	adds.w	r4, r4, #2147483648	; 0x80000000
 800ae14:	f145 0500 	adc.w	r5, r5, #0
 800ae18:	006c      	lsls	r4, r5, #1
 800ae1a:	4625      	mov	r5, r4
 800ae1c:	f8b2 a028 	ldrh.w	sl, [r2, #40]	; 0x28
 800ae20:	036d      	lsls	r5, r5, #13
 800ae22:	9f03      	ldr	r7, [sp, #12]
 800ae24:	fb0e fb0a 	mul.w	fp, lr, sl
 800ae28:	fa1f fe89 	uxth.w	lr, r9
 800ae2c:	f04f 0a00 	mov.w	sl, #0
 800ae30:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
 800ae34:	9e04      	ldr	r6, [sp, #16]
 800ae36:	fbc7 9a05 	smlal	r9, sl, r7, r5
 800ae3a:	4657      	mov	r7, sl
 800ae3c:	10bd      	asrs	r5, r7, #2
 800ae3e:	f305 050f 	ssat	r5, #16, r5
 800ae42:	f826 501b 	strh.w	r5, [r6, fp, lsl #1]
 800ae46:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 800ae48:	4575      	cmp	r5, lr
 800ae4a:	d911      	bls.n	800ae70 <D32_GENERIC+0x154>
 800ae4c:	8d55      	ldrh	r5, [r2, #42]	; 0x2a
 800ae4e:	b2ee      	uxtb	r6, r5
 800ae50:	2d01      	cmp	r5, #1
 800ae52:	eb00 0746 	add.w	r7, r0, r6, lsl #1
 800ae56:	eb06 0946 	add.w	r9, r6, r6, lsl #1
 800ae5a:	f47f af7d 	bne.w	800ad58 <D32_GENERIC+0x3c>
 800ae5e:	1d05      	adds	r5, r0, #4
 800ae60:	f8d0 9000 	ldr.w	r9, [r0]
 800ae64:	9806      	ldr	r0, [sp, #24]
 800ae66:	b180      	cbz	r0, 800ae8a <D32_GENERIC+0x16e>
 800ae68:	fa99 f999 	rev16.w	r9, r9
 800ae6c:	4628      	mov	r0, r5
 800ae6e:	e782      	b.n	800ad76 <D32_GENERIC+0x5a>
 800ae70:	6093      	str	r3, [r2, #8]
 800ae72:	2000      	movs	r0, #0
 800ae74:	9b02      	ldr	r3, [sp, #8]
 800ae76:	f8c2 800c 	str.w	r8, [r2, #12]
 800ae7a:	6153      	str	r3, [r2, #20]
 800ae7c:	9b07      	ldr	r3, [sp, #28]
 800ae7e:	61d1      	str	r1, [r2, #28]
 800ae80:	6114      	str	r4, [r2, #16]
 800ae82:	6193      	str	r3, [r2, #24]
 800ae84:	b009      	add	sp, #36	; 0x24
 800ae86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae8a:	4628      	mov	r0, r5
 800ae8c:	e773      	b.n	800ad76 <D32_GENERIC+0x5a>
 800ae8e:	bf00      	nop
 800ae90:	00060003 	.word	0x00060003
 800ae94:	000a000c 	.word	0x000a000c
 800ae98:	000c000a 	.word	0x000c000a
 800ae9c:	00030006 	.word	0x00030006
 800aea0:	24000000 	.word	0x24000000

0800aea4 <D48_GENERIC>:
 800aea4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aea8:	6913      	ldr	r3, [r2, #16]
 800aeaa:	b089      	sub	sp, #36	; 0x24
 800aeac:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 800aeae:	9301      	str	r3, [sp, #4]
 800aeb0:	6953      	ldr	r3, [r2, #20]
 800aeb2:	9104      	str	r1, [sp, #16]
 800aeb4:	9302      	str	r3, [sp, #8]
 800aeb6:	6993      	ldr	r3, [r2, #24]
 800aeb8:	f8d2 c01c 	ldr.w	ip, [r2, #28]
 800aebc:	9307      	str	r3, [sp, #28]
 800aebe:	e9d2 3102 	ldrd	r3, r1, [r2, #8]
 800aec2:	9100      	str	r1, [sp, #0]
 800aec4:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800aec6:	9103      	str	r1, [sp, #12]
 800aec8:	6b51      	ldr	r1, [r2, #52]	; 0x34
 800aeca:	2c00      	cmp	r4, #0
 800aecc:	f000 80be 	beq.w	800b04c <D48_GENERIC+0x1a8>
 800aed0:	f001 0420 	and.w	r4, r1, #32
 800aed4:	f001 0110 	and.w	r1, r1, #16
 800aed8:	f04f 0e00 	mov.w	lr, #0
 800aedc:	9105      	str	r1, [sp, #20]
 800aede:	9406      	str	r4, [sp, #24]
 800aee0:	4962      	ldr	r1, [pc, #392]	; (800b06c <D48_GENERIC+0x1c8>)
 800aee2:	e0a0      	b.n	800b026 <D48_GENERIC+0x182>
 800aee4:	eb00 0608 	add.w	r6, r0, r8
 800aee8:	f810 a008 	ldrb.w	sl, [r0, r8]
 800aeec:	f810 9005 	ldrb.w	r9, [r0, r5]
 800aef0:	5df4      	ldrb	r4, [r6, r7]
 800aef2:	443e      	add	r6, r7
 800aef4:	f890 b000 	ldrb.w	fp, [r0]
 800aef8:	0420      	lsls	r0, r4, #16
 800aefa:	eb06 0408 	add.w	r4, r6, r8
 800aefe:	f816 6008 	ldrb.w	r6, [r6, r8]
 800af02:	eb00 6a0a 	add.w	sl, r0, sl, lsl #24
 800af06:	f814 8007 	ldrb.w	r8, [r4, r7]
 800af0a:	4427      	add	r7, r4
 800af0c:	eb0a 2a09 	add.w	sl, sl, r9, lsl #8
 800af10:	eb08 2606 	add.w	r6, r8, r6, lsl #8
 800af14:	eb0a 040b 	add.w	r4, sl, fp
 800af18:	eb07 0045 	add.w	r0, r7, r5, lsl #1
 800af1c:	f3c6 2807 	ubfx	r8, r6, #8, #8
 800af20:	b2f7      	uxtb	r7, r6
 800af22:	b2e6      	uxtb	r6, r4
 800af24:	f3c4 2507 	ubfx	r5, r4, #8, #8
 800af28:	f3c4 4907 	ubfx	r9, r4, #16, #8
 800af2c:	ea4f 6b14 	mov.w	fp, r4, lsr #24
 800af30:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 800af34:	f851 5025 	ldr.w	r5, [r1, r5, lsl #2]
 800af38:	eb06 269c 	add.w	r6, r6, ip, lsr #10
 800af3c:	f851 9029 	ldr.w	r9, [r1, r9, lsl #2]
 800af40:	f851 402b 	ldr.w	r4, [r1, fp, lsl #2]
 800af44:	eb05 2596 	add.w	r5, r5, r6, lsr #10
 800af48:	f851 7027 	ldr.w	r7, [r1, r7, lsl #2]
 800af4c:	f851 c028 	ldr.w	ip, [r1, r8, lsl #2]
 800af50:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800af54:	eb09 2995 	add.w	r9, r9, r5, lsr #10
 800af58:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800af5c:	eb04 2499 	add.w	r4, r4, r9, lsr #10
 800af60:	f3c9 0909 	ubfx	r9, r9, #0, #10
 800af64:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
 800af68:	9d00      	ldr	r5, [sp, #0]
 800af6a:	eb07 2794 	add.w	r7, r7, r4, lsr #10
 800af6e:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800af72:	eb0c 2c97 	add.w	ip, ip, r7, lsr #10
 800af76:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800af7a:	ea44 4909 	orr.w	r9, r4, r9, lsl #16
 800af7e:	f3cc 0409 	ubfx	r4, ip, #0, #10
 800af82:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 800af86:	4c3a      	ldr	r4, [pc, #232]	; (800b070 <D48_GENERIC+0x1cc>)
 800af88:	fb26 5a04 	smlad	sl, r6, r4, r5
 800af8c:	4c39      	ldr	r4, [pc, #228]	; (800b074 <D48_GENERIC+0x1d0>)
 800af8e:	fb29 aa04 	smlad	sl, r9, r4, sl
 800af92:	f44f 3480 	mov.w	r4, #65536	; 0x10000
 800af96:	fb27 aa04 	smlad	sl, r7, r4, sl
 800af9a:	4c37      	ldr	r4, [pc, #220]	; (800b078 <D48_GENERIC+0x1d4>)
 800af9c:	fb26 3304 	smlad	r3, r6, r4, r3
 800afa0:	f04f 141b 	mov.w	r4, #1769499	; 0x1b001b
 800afa4:	fb29 3304 	smlad	r3, r9, r4, r3
 800afa8:	4c34      	ldr	r4, [pc, #208]	; (800b07c <D48_GENERIC+0x1d8>)
 800afaa:	fb27 3304 	smlad	r3, r7, r4, r3
 800afae:	2501      	movs	r5, #1
 800afb0:	9300      	str	r3, [sp, #0]
 800afb2:	fb26 f605 	smuad	r6, r6, r5
 800afb6:	4b32      	ldr	r3, [pc, #200]	; (800b080 <D48_GENERIC+0x1dc>)
 800afb8:	fb29 6903 	smlad	r9, r9, r3, r6
 800afbc:	4b31      	ldr	r3, [pc, #196]	; (800b084 <D48_GENERIC+0x1e0>)
 800afbe:	fb27 9303 	smlad	r3, r7, r3, r9
 800afc2:	9c05      	ldr	r4, [sp, #20]
 800afc4:	eb0e 0805 	add.w	r8, lr, r5
 800afc8:	f5aa 4a58 	sub.w	sl, sl, #55296	; 0xd800
 800afcc:	b19c      	cbz	r4, 800aff6 <D48_GENERIC+0x152>
 800afce:	9c01      	ldr	r4, [sp, #4]
 800afd0:	9d02      	ldr	r5, [sp, #8]
 800afd2:	4454      	add	r4, sl
 800afd4:	f8d2 9020 	ldr.w	r9, [r2, #32]
 800afd8:	f8cd a008 	str.w	sl, [sp, #8]
 800afdc:	1b64      	subs	r4, r4, r5
 800afde:	fba4 ab09 	umull	sl, fp, r4, r9
 800afe2:	17e7      	asrs	r7, r4, #31
 800afe4:	f11a 4400 	adds.w	r4, sl, #2147483648	; 0x80000000
 800afe8:	fb09 bb07 	mla	fp, r9, r7, fp
 800afec:	f14b 0500 	adc.w	r5, fp, #0
 800aff0:	006c      	lsls	r4, r5, #1
 800aff2:	46a2      	mov	sl, r4
 800aff4:	9401      	str	r4, [sp, #4]
 800aff6:	8d16      	ldrh	r6, [r2, #40]	; 0x28
 800aff8:	ea4f 2aca 	mov.w	sl, sl, lsl #11
 800affc:	9d03      	ldr	r5, [sp, #12]
 800affe:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 800b002:	fb0e f606 	mul.w	r6, lr, r6
 800b006:	fa1f fe88 	uxth.w	lr, r8
 800b00a:	f04f 0800 	mov.w	r8, #0
 800b00e:	fbc5 780a 	smlal	r7, r8, r5, sl
 800b012:	4645      	mov	r5, r8
 800b014:	10ac      	asrs	r4, r5, #2
 800b016:	9d04      	ldr	r5, [sp, #16]
 800b018:	f304 040f 	ssat	r4, #16, r4
 800b01c:	f825 4016 	strh.w	r4, [r5, r6, lsl #1]
 800b020:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 800b022:	4574      	cmp	r4, lr
 800b024:	d912      	bls.n	800b04c <D48_GENERIC+0x1a8>
 800b026:	8d54      	ldrh	r4, [r2, #42]	; 0x2a
 800b028:	b2e5      	uxtb	r5, r4
 800b02a:	2c01      	cmp	r4, #1
 800b02c:	eb05 0845 	add.w	r8, r5, r5, lsl #1
 800b030:	f1c5 0700 	rsb	r7, r5, #0
 800b034:	f47f af56 	bne.w	800aee4 <D48_GENERIC+0x40>
 800b038:	9d06      	ldr	r5, [sp, #24]
 800b03a:	e9d0 4600 	ldrd	r4, r6, [r0]
 800b03e:	3006      	adds	r0, #6
 800b040:	2d00      	cmp	r5, #0
 800b042:	f43f af6b 	beq.w	800af1c <D48_GENERIC+0x78>
 800b046:	ba64      	rev16	r4, r4
 800b048:	ba76      	rev16	r6, r6
 800b04a:	e767      	b.n	800af1c <D48_GENERIC+0x78>
 800b04c:	6093      	str	r3, [r2, #8]
 800b04e:	2000      	movs	r0, #0
 800b050:	9b00      	ldr	r3, [sp, #0]
 800b052:	f8c2 c01c 	str.w	ip, [r2, #28]
 800b056:	60d3      	str	r3, [r2, #12]
 800b058:	9b01      	ldr	r3, [sp, #4]
 800b05a:	6113      	str	r3, [r2, #16]
 800b05c:	9b02      	ldr	r3, [sp, #8]
 800b05e:	6153      	str	r3, [r2, #20]
 800b060:	9b07      	ldr	r3, [sp, #28]
 800b062:	6193      	str	r3, [r2, #24]
 800b064:	b009      	add	sp, #36	; 0x24
 800b066:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b06a:	bf00      	nop
 800b06c:	24000000 	.word	0x24000000
 800b070:	000f000a 	.word	0x000f000a
 800b074:	00060003 	.word	0x00060003
 800b078:	00150019 	.word	0x00150019
 800b07c:	00190015 	.word	0x00190015
 800b080:	00030006 	.word	0x00030006
 800b084:	000a000f 	.word	0x000a000f

0800b088 <D64_GENERIC>:
 800b088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b08c:	6913      	ldr	r3, [r2, #16]
 800b08e:	b089      	sub	sp, #36	; 0x24
 800b090:	6b15      	ldr	r5, [r2, #48]	; 0x30
 800b092:	9300      	str	r3, [sp, #0]
 800b094:	6953      	ldr	r3, [r2, #20]
 800b096:	9105      	str	r1, [sp, #20]
 800b098:	9303      	str	r3, [sp, #12]
 800b09a:	8cd1      	ldrh	r1, [r2, #38]	; 0x26
 800b09c:	6993      	ldr	r3, [r2, #24]
 800b09e:	69d4      	ldr	r4, [r2, #28]
 800b0a0:	9307      	str	r3, [sp, #28]
 800b0a2:	9504      	str	r5, [sp, #16]
 800b0a4:	e9d2 3602 	ldrd	r3, r6, [r2, #8]
 800b0a8:	2900      	cmp	r1, #0
 800b0aa:	f000 80e8 	beq.w	800b27e <D64_GENERIC+0x1f6>
 800b0ae:	6a11      	ldr	r1, [r2, #32]
 800b0b0:	2500      	movs	r5, #0
 800b0b2:	46b3      	mov	fp, r6
 800b0b4:	9302      	str	r3, [sp, #8]
 800b0b6:	9106      	str	r1, [sp, #24]
 800b0b8:	4978      	ldr	r1, [pc, #480]	; (800b29c <D64_GENERIC+0x214>)
 800b0ba:	e0cc      	b.n	800b256 <D64_GENERIC+0x1ce>
 800b0bc:	eb0e 084e 	add.w	r8, lr, lr, lsl #1
 800b0c0:	f1ce 0c00 	rsb	ip, lr, #0
 800b0c4:	f890 9000 	ldrb.w	r9, [r0]
 800b0c8:	eb00 0708 	add.w	r7, r0, r8
 800b0cc:	f810 6008 	ldrb.w	r6, [r0, r8]
 800b0d0:	eb07 0a4c 	add.w	sl, r7, ip, lsl #1
 800b0d4:	f817 000c 	ldrb.w	r0, [r7, ip]
 800b0d8:	f817 301c 	ldrb.w	r3, [r7, ip, lsl #1]
 800b0dc:	eb0a 0748 	add.w	r7, sl, r8, lsl #1
 800b0e0:	f81a a018 	ldrb.w	sl, [sl, r8, lsl #1]
 800b0e4:	ea4f 4800 	mov.w	r8, r0, lsl #16
 800b0e8:	f817 000c 	ldrb.w	r0, [r7, ip]
 800b0ec:	eb08 6606 	add.w	r6, r8, r6, lsl #24
 800b0f0:	f817 801c 	ldrb.w	r8, [r7, ip, lsl #1]
 800b0f4:	0400      	lsls	r0, r0, #16
 800b0f6:	4467      	add	r7, ip
 800b0f8:	eb06 2603 	add.w	r6, r6, r3, lsl #8
 800b0fc:	eb00 600a 	add.w	r0, r0, sl, lsl #24
 800b100:	f817 a01c 	ldrb.w	sl, [r7, ip, lsl #1]
 800b104:	eb07 074c 	add.w	r7, r7, ip, lsl #1
 800b108:	444e      	add	r6, r9
 800b10a:	eb00 2808 	add.w	r8, r0, r8, lsl #8
 800b10e:	eb07 008e 	add.w	r0, r7, lr, lsl #2
 800b112:	44c2      	add	sl, r8
 800b114:	b2f7      	uxtb	r7, r6
 800b116:	f3c6 2807 	ubfx	r8, r6, #8, #8
 800b11a:	f3c6 4e07 	ubfx	lr, r6, #16, #8
 800b11e:	0e36      	lsrs	r6, r6, #24
 800b120:	f851 7027 	ldr.w	r7, [r1, r7, lsl #2]
 800b124:	fa5f fc8a 	uxtb.w	ip, sl
 800b128:	f851 8028 	ldr.w	r8, [r1, r8, lsl #2]
 800b12c:	f3ca 2907 	ubfx	r9, sl, #8, #8
 800b130:	443c      	add	r4, r7
 800b132:	f851 702e 	ldr.w	r7, [r1, lr, lsl #2]
 800b136:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 800b13a:	eb08 2894 	add.w	r8, r8, r4, lsr #10
 800b13e:	f851 c02c 	ldr.w	ip, [r1, ip, lsl #2]
 800b142:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800b146:	4b56      	ldr	r3, [pc, #344]	; (800b2a0 <D64_GENERIC+0x218>)
 800b148:	eb07 2e98 	add.w	lr, r7, r8, lsr #10
 800b14c:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800b150:	f851 7029 	ldr.w	r7, [r1, r9, lsl #2]
 800b154:	eb06 269e 	add.w	r6, r6, lr, lsr #10
 800b158:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800b15c:	ea48 4804 	orr.w	r8, r8, r4, lsl #16
 800b160:	f3ca 4407 	ubfx	r4, sl, #16, #8
 800b164:	eb0c 2c96 	add.w	ip, ip, r6, lsr #10
 800b168:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800b16c:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 800b170:	ea4f 6a1a 	mov.w	sl, sl, lsr #24
 800b174:	eb07 279c 	add.w	r7, r7, ip, lsr #10
 800b178:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 800b17c:	f851 902a 	ldr.w	r9, [r1, sl, lsl #2]
 800b180:	ea46 460e 	orr.w	r6, r6, lr, lsl #16
 800b184:	eb04 2a97 	add.w	sl, r4, r7, lsr #10
 800b188:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800b18c:	eb09 299a 	add.w	r9, r9, sl, lsr #10
 800b190:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 800b194:	ea47 4c0c 	orr.w	ip, r7, ip, lsl #16
 800b198:	f3c9 0709 	ubfx	r7, r9, #0, #10
 800b19c:	ea4f 2499 	mov.w	r4, r9, lsr #10
 800b1a0:	ea47 4a0a 	orr.w	sl, r7, sl, lsl #16
 800b1a4:	fb28 b903 	smlad	r9, r8, r3, fp
 800b1a8:	4b3e      	ldr	r3, [pc, #248]	; (800b2a4 <D64_GENERIC+0x21c>)
 800b1aa:	fb26 9903 	smlad	r9, r6, r3, r9
 800b1ae:	4b3e      	ldr	r3, [pc, #248]	; (800b2a8 <D64_GENERIC+0x220>)
 800b1b0:	fb2c 9703 	smlad	r7, ip, r3, r9
 800b1b4:	f44f 3980 	mov.w	r9, #65536	; 0x10000
 800b1b8:	fb2a 7909 	smlad	r9, sl, r9, r7
 800b1bc:	4f3b      	ldr	r7, [pc, #236]	; (800b2ac <D64_GENERIC+0x224>)
 800b1be:	9b02      	ldr	r3, [sp, #8]
 800b1c0:	fb28 3307 	smlad	r3, r8, r7, r3
 800b1c4:	fb2a 3317 	smladx	r3, sl, r7, r3
 800b1c8:	4f39      	ldr	r7, [pc, #228]	; (800b2b0 <D64_GENERIC+0x228>)
 800b1ca:	fb26 3307 	smlad	r3, r6, r7, r3
 800b1ce:	fb2c 3b17 	smladx	fp, ip, r7, r3
 800b1d2:	f04f 0e01 	mov.w	lr, #1
 800b1d6:	fb28 f80e 	smuad	r8, r8, lr
 800b1da:	4b36      	ldr	r3, [pc, #216]	; (800b2b4 <D64_GENERIC+0x22c>)
 800b1dc:	fb26 8603 	smlad	r6, r6, r3, r8
 800b1e0:	4b35      	ldr	r3, [pc, #212]	; (800b2b8 <D64_GENERIC+0x230>)
 800b1e2:	fb2c 6c03 	smlad	ip, ip, r3, r6
 800b1e6:	4b35      	ldr	r3, [pc, #212]	; (800b2bc <D64_GENERIC+0x234>)
 800b1e8:	fb2a c303 	smlad	r3, sl, r3, ip
 800b1ec:	9f06      	ldr	r7, [sp, #24]
 800b1ee:	f5a9 3900 	sub.w	r9, r9, #131072	; 0x20000
 800b1f2:	9302      	str	r3, [sp, #8]
 800b1f4:	b1cf      	cbz	r7, 800b22a <D64_GENERIC+0x1a2>
 800b1f6:	9b00      	ldr	r3, [sp, #0]
 800b1f8:	444b      	add	r3, r9
 800b1fa:	461e      	mov	r6, r3
 800b1fc:	9b03      	ldr	r3, [sp, #12]
 800b1fe:	f8cd 900c 	str.w	r9, [sp, #12]
 800b202:	1af6      	subs	r6, r6, r3
 800b204:	46b0      	mov	r8, r6
 800b206:	ea4f 79e6 	mov.w	r9, r6, asr #31
 800b20a:	e9cd 8900 	strd	r8, r9, [sp]
 800b20e:	fba6 8907 	umull	r8, r9, r6, r7
 800b212:	9e01      	ldr	r6, [sp, #4]
 800b214:	fb07 9306 	mla	r3, r7, r6, r9
 800b218:	4646      	mov	r6, r8
 800b21a:	f116 4600 	adds.w	r6, r6, #2147483648	; 0x80000000
 800b21e:	f143 0700 	adc.w	r7, r3, #0
 800b222:	fa07 f30e 	lsl.w	r3, r7, lr
 800b226:	4699      	mov	r9, r3
 800b228:	9300      	str	r3, [sp, #0]
 800b22a:	f8b2 c028 	ldrh.w	ip, [r2, #40]	; 0x28
 800b22e:	ea4f 2989 	mov.w	r9, r9, lsl #10
 800b232:	9b04      	ldr	r3, [sp, #16]
 800b234:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800b238:	2700      	movs	r7, #0
 800b23a:	fb05 fc0c 	mul.w	ip, r5, ip
 800b23e:	3501      	adds	r5, #1
 800b240:	fbc3 6709 	smlal	r6, r7, r3, r9
 800b244:	9b05      	ldr	r3, [sp, #20]
 800b246:	10be      	asrs	r6, r7, #2
 800b248:	f306 060f 	ssat	r6, #16, r6
 800b24c:	f823 601c 	strh.w	r6, [r3, ip, lsl #1]
 800b250:	8cd6      	ldrh	r6, [r2, #38]	; 0x26
 800b252:	42ae      	cmp	r6, r5
 800b254:	dd11      	ble.n	800b27a <D64_GENERIC+0x1f2>
 800b256:	f8b2 e02a 	ldrh.w	lr, [r2, #42]	; 0x2a
 800b25a:	f1be 0f01 	cmp.w	lr, #1
 800b25e:	f47f af2d 	bne.w	800b0bc <D64_GENERIC+0x34>
 800b262:	6b57      	ldr	r7, [r2, #52]	; 0x34
 800b264:	f100 0c08 	add.w	ip, r0, #8
 800b268:	06bb      	lsls	r3, r7, #26
 800b26a:	e9d0 6a00 	ldrd	r6, sl, [r0]
 800b26e:	d513      	bpl.n	800b298 <D64_GENERIC+0x210>
 800b270:	ba76      	rev16	r6, r6
 800b272:	fa9a fa9a 	rev16.w	sl, sl
 800b276:	4660      	mov	r0, ip
 800b278:	e74c      	b.n	800b114 <D64_GENERIC+0x8c>
 800b27a:	465e      	mov	r6, fp
 800b27c:	9b02      	ldr	r3, [sp, #8]
 800b27e:	6093      	str	r3, [r2, #8]
 800b280:	2000      	movs	r0, #0
 800b282:	9b00      	ldr	r3, [sp, #0]
 800b284:	60d6      	str	r6, [r2, #12]
 800b286:	6113      	str	r3, [r2, #16]
 800b288:	9b03      	ldr	r3, [sp, #12]
 800b28a:	61d4      	str	r4, [r2, #28]
 800b28c:	6153      	str	r3, [r2, #20]
 800b28e:	9b07      	ldr	r3, [sp, #28]
 800b290:	6193      	str	r3, [r2, #24]
 800b292:	b009      	add	sp, #36	; 0x24
 800b294:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b298:	4660      	mov	r0, ip
 800b29a:	e73b      	b.n	800b114 <D64_GENERIC+0x8c>
 800b29c:	24000000 	.word	0x24000000
 800b2a0:	001c0015 	.word	0x001c0015
 800b2a4:	000f000a 	.word	0x000f000a
 800b2a8:	00060003 	.word	0x00060003
 800b2ac:	0024002a 	.word	0x0024002a
 800b2b0:	002e0030 	.word	0x002e0030
 800b2b4:	00030006 	.word	0x00030006
 800b2b8:	000a000f 	.word	0x000a000f
 800b2bc:	0015001c 	.word	0x0015001c

0800b2c0 <D80_GENERIC>:
 800b2c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2c4:	b08b      	sub	sp, #44	; 0x2c
 800b2c6:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 800b2c8:	9107      	str	r1, [sp, #28]
 800b2ca:	6911      	ldr	r1, [r2, #16]
 800b2cc:	9104      	str	r1, [sp, #16]
 800b2ce:	6951      	ldr	r1, [r2, #20]
 800b2d0:	9105      	str	r1, [sp, #20]
 800b2d2:	6991      	ldr	r1, [r2, #24]
 800b2d4:	9109      	str	r1, [sp, #36]	; 0x24
 800b2d6:	69d1      	ldr	r1, [r2, #28]
 800b2d8:	9102      	str	r1, [sp, #8]
 800b2da:	6891      	ldr	r1, [r2, #8]
 800b2dc:	9103      	str	r1, [sp, #12]
 800b2de:	68d1      	ldr	r1, [r2, #12]
 800b2e0:	9101      	str	r1, [sp, #4]
 800b2e2:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800b2e4:	9106      	str	r1, [sp, #24]
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	f000 810b 	beq.w	800b502 <D80_GENERIC+0x242>
 800b2ec:	6a13      	ldr	r3, [r2, #32]
 800b2ee:	f04f 0800 	mov.w	r8, #0
 800b2f2:	f8df c260 	ldr.w	ip, [pc, #608]	; 800b554 <D80_GENERIC+0x294>
 800b2f6:	9308      	str	r3, [sp, #32]
 800b2f8:	9200      	str	r2, [sp, #0]
 800b2fa:	e0ee      	b.n	800b4da <D80_GENERIC+0x21a>
 800b2fc:	b2db      	uxtb	r3, r3
 800b2fe:	f890 e000 	ldrb.w	lr, [r0]
 800b302:	b219      	sxth	r1, r3
 800b304:	425c      	negs	r4, r3
 800b306:	f810 9003 	ldrb.w	r9, [r0, r3]
 800b30a:	004e      	lsls	r6, r1, #1
 800b30c:	eb01 0581 	add.w	r5, r1, r1, lsl #2
 800b310:	4431      	add	r1, r6
 800b312:	1843      	adds	r3, r0, r1
 800b314:	f810 b001 	ldrb.w	fp, [r0, r1]
 800b318:	1919      	adds	r1, r3, r4
 800b31a:	5d1b      	ldrb	r3, [r3, r4]
 800b31c:	1948      	adds	r0, r1, r5
 800b31e:	f811 a005 	ldrb.w	sl, [r1, r5]
 800b322:	041b      	lsls	r3, r3, #16
 800b324:	1907      	adds	r7, r0, r4
 800b326:	5d01      	ldrb	r1, [r0, r4]
 800b328:	eb03 630b 	add.w	r3, r3, fp, lsl #24
 800b32c:	f810 0014 	ldrb.w	r0, [r0, r4, lsl #1]
 800b330:	eb07 0b44 	add.w	fp, r7, r4, lsl #1
 800b334:	f817 7014 	ldrb.w	r7, [r7, r4, lsl #1]
 800b338:	0409      	lsls	r1, r1, #16
 800b33a:	eb03 2309 	add.w	r3, r3, r9, lsl #8
 800b33e:	eb0b 0905 	add.w	r9, fp, r5
 800b342:	eb01 610a 	add.w	r1, r1, sl, lsl #24
 800b346:	f81b 5005 	ldrb.w	r5, [fp, r5]
 800b34a:	eb09 0b04 	add.w	fp, r9, r4
 800b34e:	f819 4004 	ldrb.w	r4, [r9, r4]
 800b352:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 800b356:	4473      	add	r3, lr
 800b358:	eb0b 0006 	add.w	r0, fp, r6
 800b35c:	eb04 2505 	add.w	r5, r4, r5, lsl #8
 800b360:	4439      	add	r1, r7
 800b362:	f3c3 2407 	ubfx	r4, r3, #8, #8
 800b366:	b2df      	uxtb	r7, r3
 800b368:	f3c3 4607 	ubfx	r6, r3, #16, #8
 800b36c:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 800b370:	f85c 3027 	ldr.w	r3, [ip, r7, lsl #2]
 800b374:	fa5f fa81 	uxtb.w	sl, r1
 800b378:	f85c 7024 	ldr.w	r7, [ip, r4, lsl #2]
 800b37c:	9c02      	ldr	r4, [sp, #8]
 800b37e:	f85c 9026 	ldr.w	r9, [ip, r6, lsl #2]
 800b382:	441c      	add	r4, r3
 800b384:	f85c 602e 	ldr.w	r6, [ip, lr, lsl #2]
 800b388:	f85c e02a 	ldr.w	lr, [ip, sl, lsl #2]
 800b38c:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 800b390:	eb07 2794 	add.w	r7, r7, r4, lsr #10
 800b394:	f3c4 0309 	ubfx	r3, r4, #0, #10
 800b398:	f3c1 2407 	ubfx	r4, r1, #8, #8
 800b39c:	b2ed      	uxtb	r5, r5
 800b39e:	eb09 2997 	add.w	r9, r9, r7, lsr #10
 800b3a2:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800b3a6:	f85c 4024 	ldr.w	r4, [ip, r4, lsl #2]
 800b3aa:	eb06 2699 	add.w	r6, r6, r9, lsr #10
 800b3ae:	f85c 5025 	ldr.w	r5, [ip, r5, lsl #2]
 800b3b2:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
 800b3b6:	f3c1 4707 	ubfx	r7, r1, #16, #8
 800b3ba:	eb0e 2e96 	add.w	lr, lr, r6, lsr #10
 800b3be:	f85c a02a 	ldr.w	sl, [ip, sl, lsl #2]
 800b3c2:	f85c 7027 	ldr.w	r7, [ip, r7, lsl #2]
 800b3c6:	0e09      	lsrs	r1, r1, #24
 800b3c8:	eb04 249e 	add.w	r4, r4, lr, lsr #10
 800b3cc:	f3c9 0909 	ubfx	r9, r9, #0, #10
 800b3d0:	f85c 1021 	ldr.w	r1, [ip, r1, lsl #2]
 800b3d4:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800b3d8:	eb07 2794 	add.w	r7, r7, r4, lsr #10
 800b3dc:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800b3e0:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800b3e4:	eb01 2197 	add.w	r1, r1, r7, lsr #10
 800b3e8:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800b3ec:	ea46 4609 	orr.w	r6, r6, r9, lsl #16
 800b3f0:	eb05 2591 	add.w	r5, r5, r1, lsr #10
 800b3f4:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800b3f8:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 800b3fc:	eb0a 2a95 	add.w	sl, sl, r5, lsr #10
 800b400:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800b404:	ea41 4107 	orr.w	r1, r1, r7, lsl #16
 800b408:	ea4f 229a 	mov.w	r2, sl, lsr #10
 800b40c:	f3ca 0709 	ubfx	r7, sl, #0, #10
 800b410:	9202      	str	r2, [sp, #8]
 800b412:	ea47 4505 	orr.w	r5, r7, r5, lsl #16
 800b416:	4a43      	ldr	r2, [pc, #268]	; (800b524 <D80_GENERIC+0x264>)
 800b418:	9f01      	ldr	r7, [sp, #4]
 800b41a:	fb23 7a02 	smlad	sl, r3, r2, r7
 800b41e:	4a42      	ldr	r2, [pc, #264]	; (800b528 <D80_GENERIC+0x268>)
 800b420:	fb26 aa02 	smlad	sl, r6, r2, sl
 800b424:	4a41      	ldr	r2, [pc, #260]	; (800b52c <D80_GENERIC+0x26c>)
 800b426:	fb24 aa02 	smlad	sl, r4, r2, sl
 800b42a:	4a41      	ldr	r2, [pc, #260]	; (800b530 <D80_GENERIC+0x270>)
 800b42c:	fb21 a702 	smlad	r7, r1, r2, sl
 800b430:	f44f 3a80 	mov.w	sl, #65536	; 0x10000
 800b434:	fb25 7a0a 	smlad	sl, r5, sl, r7
 800b438:	4a3e      	ldr	r2, [pc, #248]	; (800b534 <D80_GENERIC+0x274>)
 800b43a:	9f03      	ldr	r7, [sp, #12]
 800b43c:	fb23 7e02 	smlad	lr, r3, r2, r7
 800b440:	4a3d      	ldr	r2, [pc, #244]	; (800b538 <D80_GENERIC+0x278>)
 800b442:	fb26 ee02 	smlad	lr, r6, r2, lr
 800b446:	f04f 174b 	mov.w	r7, #4915275	; 0x4b004b
 800b44a:	fb24 e707 	smlad	r7, r4, r7, lr
 800b44e:	4a3b      	ldr	r2, [pc, #236]	; (800b53c <D80_GENERIC+0x27c>)
 800b450:	fb21 7702 	smlad	r7, r1, r2, r7
 800b454:	4a3a      	ldr	r2, [pc, #232]	; (800b540 <D80_GENERIC+0x280>)
 800b456:	fb25 7202 	smlad	r2, r5, r2, r7
 800b45a:	f04f 0901 	mov.w	r9, #1
 800b45e:	9201      	str	r2, [sp, #4]
 800b460:	fb23 f909 	smuad	r9, r3, r9
 800b464:	4b37      	ldr	r3, [pc, #220]	; (800b544 <D80_GENERIC+0x284>)
 800b466:	fb26 9603 	smlad	r6, r6, r3, r9
 800b46a:	4f37      	ldr	r7, [pc, #220]	; (800b548 <D80_GENERIC+0x288>)
 800b46c:	fb24 6407 	smlad	r4, r4, r7, r6
 800b470:	4f36      	ldr	r7, [pc, #216]	; (800b54c <D80_GENERIC+0x28c>)
 800b472:	fb21 4707 	smlad	r7, r1, r7, r4
 800b476:	4936      	ldr	r1, [pc, #216]	; (800b550 <D80_GENERIC+0x290>)
 800b478:	fb25 7301 	smlad	r3, r5, r1, r7
 800b47c:	9303      	str	r3, [sp, #12]
 800b47e:	f5aa 3a7a 	sub.w	sl, sl, #256000	; 0x3e800
 800b482:	9b08      	ldr	r3, [sp, #32]
 800b484:	b193      	cbz	r3, 800b4ac <D80_GENERIC+0x1ec>
 800b486:	9a04      	ldr	r2, [sp, #16]
 800b488:	4452      	add	r2, sl
 800b48a:	4614      	mov	r4, r2
 800b48c:	9a05      	ldr	r2, [sp, #20]
 800b48e:	f8cd a014 	str.w	sl, [sp, #20]
 800b492:	1aa4      	subs	r4, r4, r2
 800b494:	fba4 1203 	umull	r1, r2, r4, r3
 800b498:	17e7      	asrs	r7, r4, #31
 800b49a:	f111 4400 	adds.w	r4, r1, #2147483648	; 0x80000000
 800b49e:	fb03 2207 	mla	r2, r3, r7, r2
 800b4a2:	f142 0500 	adc.w	r5, r2, #0
 800b4a6:	006b      	lsls	r3, r5, #1
 800b4a8:	469a      	mov	sl, r3
 800b4aa:	9304      	str	r3, [sp, #16]
 800b4ac:	9e00      	ldr	r6, [sp, #0]
 800b4ae:	ea4f 2a4a 	mov.w	sl, sl, lsl #9
 800b4b2:	9a06      	ldr	r2, [sp, #24]
 800b4b4:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800b4b8:	8d33      	ldrh	r3, [r6, #40]	; 0x28
 800b4ba:	2500      	movs	r5, #0
 800b4bc:	fb08 f303 	mul.w	r3, r8, r3
 800b4c0:	fbc2 450a 	smlal	r4, r5, r2, sl
 800b4c4:	9a07      	ldr	r2, [sp, #28]
 800b4c6:	f108 0801 	add.w	r8, r8, #1
 800b4ca:	10a9      	asrs	r1, r5, #2
 800b4cc:	f301 010f 	ssat	r1, #16, r1
 800b4d0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800b4d4:	8cf3      	ldrh	r3, [r6, #38]	; 0x26
 800b4d6:	4543      	cmp	r3, r8
 800b4d8:	dd12      	ble.n	800b500 <D80_GENERIC+0x240>
 800b4da:	9b00      	ldr	r3, [sp, #0]
 800b4dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b4de:	2b01      	cmp	r3, #1
 800b4e0:	f47f af0c 	bne.w	800b2fc <D80_GENERIC+0x3c>
 800b4e4:	9b00      	ldr	r3, [sp, #0]
 800b4e6:	6885      	ldr	r5, [r0, #8]
 800b4e8:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 800b4ea:	06b2      	lsls	r2, r6, #26
 800b4ec:	e9d0 3100 	ldrd	r3, r1, [r0]
 800b4f0:	f100 000a 	add.w	r0, r0, #10
 800b4f4:	f57f af35 	bpl.w	800b362 <D80_GENERIC+0xa2>
 800b4f8:	ba5b      	rev16	r3, r3
 800b4fa:	ba49      	rev16	r1, r1
 800b4fc:	ba6d      	rev16	r5, r5
 800b4fe:	e730      	b.n	800b362 <D80_GENERIC+0xa2>
 800b500:	4632      	mov	r2, r6
 800b502:	9b03      	ldr	r3, [sp, #12]
 800b504:	2000      	movs	r0, #0
 800b506:	6093      	str	r3, [r2, #8]
 800b508:	9b01      	ldr	r3, [sp, #4]
 800b50a:	60d3      	str	r3, [r2, #12]
 800b50c:	9b02      	ldr	r3, [sp, #8]
 800b50e:	61d3      	str	r3, [r2, #28]
 800b510:	9b04      	ldr	r3, [sp, #16]
 800b512:	6113      	str	r3, [r2, #16]
 800b514:	9b05      	ldr	r3, [sp, #20]
 800b516:	6153      	str	r3, [r2, #20]
 800b518:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b51a:	6193      	str	r3, [r2, #24]
 800b51c:	b00b      	add	sp, #44	; 0x2c
 800b51e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b522:	bf00      	nop
 800b524:	002d0024 	.word	0x002d0024
 800b528:	001c0015 	.word	0x001c0015
 800b52c:	000f000a 	.word	0x000f000a
 800b530:	00060003 	.word	0x00060003
 800b534:	0037003f 	.word	0x0037003f
 800b538:	00450049 	.word	0x00450049
 800b53c:	00490045 	.word	0x00490045
 800b540:	003f0037 	.word	0x003f0037
 800b544:	00030006 	.word	0x00030006
 800b548:	000a000f 	.word	0x000a000f
 800b54c:	0015001c 	.word	0x0015001c
 800b550:	0024002d 	.word	0x0024002d
 800b554:	24000000 	.word	0x24000000

0800b558 <D128_GENERIC>:
 800b558:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b55c:	b08d      	sub	sp, #52	; 0x34
 800b55e:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 800b560:	f8d2 a01c 	ldr.w	sl, [r2, #28]
 800b564:	9109      	str	r1, [sp, #36]	; 0x24
 800b566:	6911      	ldr	r1, [r2, #16]
 800b568:	9201      	str	r2, [sp, #4]
 800b56a:	9106      	str	r1, [sp, #24]
 800b56c:	6951      	ldr	r1, [r2, #20]
 800b56e:	9107      	str	r1, [sp, #28]
 800b570:	6991      	ldr	r1, [r2, #24]
 800b572:	910b      	str	r1, [sp, #44]	; 0x2c
 800b574:	6891      	ldr	r1, [r2, #8]
 800b576:	9103      	str	r1, [sp, #12]
 800b578:	68d1      	ldr	r1, [r2, #12]
 800b57a:	9102      	str	r1, [sp, #8]
 800b57c:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800b57e:	9108      	str	r1, [sp, #32]
 800b580:	2b00      	cmp	r3, #0
 800b582:	f000 8183 	beq.w	800b88c <D128_GENERIC+0x334>
 800b586:	2300      	movs	r3, #0
 800b588:	6a12      	ldr	r2, [r2, #32]
 800b58a:	4681      	mov	r9, r0
 800b58c:	920a      	str	r2, [sp, #40]	; 0x28
 800b58e:	e9cd a304 	strd	sl, r3, [sp, #16]
 800b592:	e165      	b.n	800b860 <D128_GENERIC+0x308>
 800b594:	b2d2      	uxtb	r2, r2
 800b596:	f899 b000 	ldrb.w	fp, [r9]
 800b59a:	b213      	sxth	r3, r2
 800b59c:	4255      	negs	r5, r2
 800b59e:	f819 0002 	ldrb.w	r0, [r9, r2]
 800b5a2:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 800b5a6:	009f      	lsls	r7, r3, #2
 800b5a8:	eb09 0402 	add.w	r4, r9, r2
 800b5ac:	ebc3 06c3 	rsb	r6, r3, r3, lsl #3
 800b5b0:	f819 8002 	ldrb.w	r8, [r9, r2]
 800b5b4:	443b      	add	r3, r7
 800b5b6:	1962      	adds	r2, r4, r5
 800b5b8:	5d64      	ldrb	r4, [r4, r5]
 800b5ba:	eb02 0c03 	add.w	ip, r2, r3
 800b5be:	0424      	lsls	r4, r4, #16
 800b5c0:	5cd3      	ldrb	r3, [r2, r3]
 800b5c2:	eb0c 0e05 	add.w	lr, ip, r5
 800b5c6:	f81c 9015 	ldrb.w	r9, [ip, r5, lsl #1]
 800b5ca:	f81c 2005 	ldrb.w	r2, [ip, r5]
 800b5ce:	eb04 6408 	add.w	r4, r4, r8, lsl #24
 800b5d2:	eb0e 0c45 	add.w	ip, lr, r5, lsl #1
 800b5d6:	f81e 8015 	ldrb.w	r8, [lr, r5, lsl #1]
 800b5da:	eb04 2400 	add.w	r4, r4, r0, lsl #8
 800b5de:	eb0c 0e06 	add.w	lr, ip, r6
 800b5e2:	f81c a006 	ldrb.w	sl, [ip, r6]
 800b5e6:	0412      	lsls	r2, r2, #16
 800b5e8:	445c      	add	r4, fp
 800b5ea:	eb0e 0c05 	add.w	ip, lr, r5
 800b5ee:	eb02 6203 	add.w	r2, r2, r3, lsl #24
 800b5f2:	f81e 3005 	ldrb.w	r3, [lr, r5]
 800b5f6:	eb0c 0045 	add.w	r0, ip, r5, lsl #1
 800b5fa:	f81e e015 	ldrb.w	lr, [lr, r5, lsl #1]
 800b5fe:	041b      	lsls	r3, r3, #16
 800b600:	f81c c015 	ldrb.w	ip, [ip, r5, lsl #1]
 800b604:	eb00 0b06 	add.w	fp, r0, r6
 800b608:	5d80      	ldrb	r0, [r0, r6]
 800b60a:	eb03 630a 	add.w	r3, r3, sl, lsl #24
 800b60e:	f81b 6005 	ldrb.w	r6, [fp, r5]
 800b612:	eb0b 0a05 	add.w	sl, fp, r5
 800b616:	eb02 2209 	add.w	r2, r2, r9, lsl #8
 800b61a:	f81b b015 	ldrb.w	fp, [fp, r5, lsl #1]
 800b61e:	0436      	lsls	r6, r6, #16
 800b620:	eb0a 0945 	add.w	r9, sl, r5, lsl #1
 800b624:	4442      	add	r2, r8
 800b626:	eb06 6600 	add.w	r6, r6, r0, lsl #24
 800b62a:	f81a 8015 	ldrb.w	r8, [sl, r5, lsl #1]
 800b62e:	eb03 230e 	add.w	r3, r3, lr, lsl #8
 800b632:	44b9      	add	r9, r7
 800b634:	eb06 260b 	add.w	r6, r6, fp, lsl #8
 800b638:	4463      	add	r3, ip
 800b63a:	eb06 0508 	add.w	r5, r6, r8
 800b63e:	b2e7      	uxtb	r7, r4
 800b640:	f3c4 2607 	ubfx	r6, r4, #8, #8
 800b644:	499b      	ldr	r1, [pc, #620]	; (800b8b4 <D128_GENERIC+0x35c>)
 800b646:	f3c4 4007 	ubfx	r0, r4, #16, #8
 800b64a:	0e24      	lsrs	r4, r4, #24
 800b64c:	f851 c027 	ldr.w	ip, [r1, r7, lsl #2]
 800b650:	b2d7      	uxtb	r7, r2
 800b652:	f851 b026 	ldr.w	fp, [r1, r6, lsl #2]
 800b656:	f3c2 2607 	ubfx	r6, r2, #8, #8
 800b65a:	9904      	ldr	r1, [sp, #16]
 800b65c:	4461      	add	r1, ip
 800b65e:	468c      	mov	ip, r1
 800b660:	4994      	ldr	r1, [pc, #592]	; (800b8b4 <D128_GENERIC+0x35c>)
 800b662:	eb0b 2b9c 	add.w	fp, fp, ip, lsr #10
 800b666:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 800b66a:	f851 8024 	ldr.w	r8, [r1, r4, lsl #2]
 800b66e:	f3c2 4407 	ubfx	r4, r2, #16, #8
 800b672:	eb00 209b 	add.w	r0, r0, fp, lsr #10
 800b676:	f851 e027 	ldr.w	lr, [r1, r7, lsl #2]
 800b67a:	f851 7026 	ldr.w	r7, [r1, r6, lsl #2]
 800b67e:	0e12      	lsrs	r2, r2, #24
 800b680:	eb08 2890 	add.w	r8, r8, r0, lsr #10
 800b684:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 800b688:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 800b68c:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800b690:	eb0e 2e98 	add.w	lr, lr, r8, lsr #10
 800b694:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800b698:	b2da      	uxtb	r2, r3
 800b69a:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 800b69e:	eb07 279e 	add.w	r7, r7, lr, lsr #10
 800b6a2:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 800b6a6:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800b6aa:	ea48 4800 	orr.w	r8, r8, r0, lsl #16
 800b6ae:	eb04 2a97 	add.w	sl, r4, r7, lsr #10
 800b6b2:	f3c3 2007 	ubfx	r0, r3, #8, #8
 800b6b6:	ea4b 4b0c 	orr.w	fp, fp, ip, lsl #16
 800b6ba:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800b6be:	eb06 269a 	add.w	r6, r6, sl, lsr #10
 800b6c2:	f851 c020 	ldr.w	ip, [r1, r0, lsl #2]
 800b6c6:	f3c3 4007 	ubfx	r0, r3, #16, #8
 800b6ca:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800b6ce:	eb02 2296 	add.w	r2, r2, r6, lsr #10
 800b6d2:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 800b6d6:	f851 4020 	ldr.w	r4, [r1, r0, lsl #2]
 800b6da:	0e1b      	lsrs	r3, r3, #24
 800b6dc:	eb0c 2c92 	add.w	ip, ip, r2, lsr #10
 800b6e0:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800b6e4:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
 800b6e8:	ea47 470e 	orr.w	r7, r7, lr, lsl #16
 800b6ec:	b2eb      	uxtb	r3, r5
 800b6ee:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800b6f2:	eb04 2e9c 	add.w	lr, r4, ip, lsr #10
 800b6f6:	f3cc 0409 	ubfx	r4, ip, #0, #10
 800b6fa:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800b6fe:	ea46 460a 	orr.w	r6, r6, sl, lsl #16
 800b702:	eb00 209e 	add.w	r0, r0, lr, lsr #10
 800b706:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 800b70a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800b70e:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800b712:	eb03 2c90 	add.w	ip, r3, r0, lsr #10
 800b716:	f851 202a 	ldr.w	r2, [r1, sl, lsl #2]
 800b71a:	f3c5 4307 	ubfx	r3, r5, #16, #8
 800b71e:	ea4f 6a15 	mov.w	sl, r5, lsr #24
 800b722:	eb02 229c 	add.w	r2, r2, ip, lsr #10
 800b726:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800b72a:	f851 5023 	ldr.w	r5, [r1, r3, lsl #2]
 800b72e:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 800b732:	f851 302a 	ldr.w	r3, [r1, sl, lsl #2]
 800b736:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 800b73a:	eb05 2592 	add.w	r5, r5, r2, lsr #10
 800b73e:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800b742:	eb03 2e95 	add.w	lr, r3, r5, lsr #10
 800b746:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800b74a:	ea42 430c 	orr.w	r3, r2, ip, lsl #16
 800b74e:	ea4f 219e 	mov.w	r1, lr, lsr #10
 800b752:	f3ce 0209 	ubfx	r2, lr, #0, #10
 800b756:	9104      	str	r1, [sp, #16]
 800b758:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 800b75c:	9902      	ldr	r1, [sp, #8]
 800b75e:	4a56      	ldr	r2, [pc, #344]	; (800b8b8 <D128_GENERIC+0x360>)
 800b760:	fb2b 1202 	smlad	r2, fp, r2, r1
 800b764:	4955      	ldr	r1, [pc, #340]	; (800b8bc <D128_GENERIC+0x364>)
 800b766:	fb28 2201 	smlad	r2, r8, r1, r2
 800b76a:	4955      	ldr	r1, [pc, #340]	; (800b8c0 <D128_GENERIC+0x368>)
 800b76c:	fb27 2201 	smlad	r2, r7, r1, r2
 800b770:	4954      	ldr	r1, [pc, #336]	; (800b8c4 <D128_GENERIC+0x36c>)
 800b772:	fb26 2201 	smlad	r2, r6, r1, r2
 800b776:	4954      	ldr	r1, [pc, #336]	; (800b8c8 <D128_GENERIC+0x370>)
 800b778:	fb24 2201 	smlad	r2, r4, r1, r2
 800b77c:	4953      	ldr	r1, [pc, #332]	; (800b8cc <D128_GENERIC+0x374>)
 800b77e:	fb20 2201 	smlad	r2, r0, r1, r2
 800b782:	4953      	ldr	r1, [pc, #332]	; (800b8d0 <D128_GENERIC+0x378>)
 800b784:	fb23 2201 	smlad	r2, r3, r1, r2
 800b788:	f44f 3c80 	mov.w	ip, #65536	; 0x10000
 800b78c:	fb25 2a0c 	smlad	sl, r5, ip, r2
 800b790:	4950      	ldr	r1, [pc, #320]	; (800b8d4 <D128_GENERIC+0x37c>)
 800b792:	9a03      	ldr	r2, [sp, #12]
 800b794:	fb2b 2c01 	smlad	ip, fp, r1, r2
 800b798:	4a4f      	ldr	r2, [pc, #316]	; (800b8d8 <D128_GENERIC+0x380>)
 800b79a:	fb28 ce02 	smlad	lr, r8, r2, ip
 800b79e:	f8df c150 	ldr.w	ip, [pc, #336]	; 800b8f0 <D128_GENERIC+0x398>
 800b7a2:	fb27 ec0c 	smlad	ip, r7, ip, lr
 800b7a6:	f8df e14c 	ldr.w	lr, [pc, #332]	; 800b8f4 <D128_GENERIC+0x39c>
 800b7aa:	fb26 cc0e 	smlad	ip, r6, lr, ip
 800b7ae:	f8df e148 	ldr.w	lr, [pc, #328]	; 800b8f8 <D128_GENERIC+0x3a0>
 800b7b2:	fb24 ce0e 	smlad	lr, r4, lr, ip
 800b7b6:	f8df c144 	ldr.w	ip, [pc, #324]	; 800b8fc <D128_GENERIC+0x3a4>
 800b7ba:	fb20 ee0c 	smlad	lr, r0, ip, lr
 800b7be:	f8df c140 	ldr.w	ip, [pc, #320]	; 800b900 <D128_GENERIC+0x3a8>
 800b7c2:	fb23 ec0c 	smlad	ip, r3, ip, lr
 800b7c6:	f8df e13c 	ldr.w	lr, [pc, #316]	; 800b904 <D128_GENERIC+0x3ac>
 800b7ca:	fb25 c20e 	smlad	r2, r5, lr, ip
 800b7ce:	f04f 0c01 	mov.w	ip, #1
 800b7d2:	9202      	str	r2, [sp, #8]
 800b7d4:	fb2b fb0c 	smuad	fp, fp, ip
 800b7d8:	f8df c12c 	ldr.w	ip, [pc, #300]	; 800b908 <D128_GENERIC+0x3b0>
 800b7dc:	fb28 bb0c 	smlad	fp, r8, ip, fp
 800b7e0:	f8df c128 	ldr.w	ip, [pc, #296]	; 800b90c <D128_GENERIC+0x3b4>
 800b7e4:	fb27 bb0c 	smlad	fp, r7, ip, fp
 800b7e8:	4f3c      	ldr	r7, [pc, #240]	; (800b8dc <D128_GENERIC+0x384>)
 800b7ea:	fb26 bb07 	smlad	fp, r6, r7, fp
 800b7ee:	4f3c      	ldr	r7, [pc, #240]	; (800b8e0 <D128_GENERIC+0x388>)
 800b7f0:	fb24 bb07 	smlad	fp, r4, r7, fp
 800b7f4:	4f3b      	ldr	r7, [pc, #236]	; (800b8e4 <D128_GENERIC+0x38c>)
 800b7f6:	fb20 bb07 	smlad	fp, r0, r7, fp
 800b7fa:	4f3b      	ldr	r7, [pc, #236]	; (800b8e8 <D128_GENERIC+0x390>)
 800b7fc:	fb23 bb07 	smlad	fp, r3, r7, fp
 800b800:	4b3a      	ldr	r3, [pc, #232]	; (800b8ec <D128_GENERIC+0x394>)
 800b802:	fb25 b303 	smlad	r3, r5, r3, fp
 800b806:	9303      	str	r3, [sp, #12]
 800b808:	f5aa 1480 	sub.w	r4, sl, #1048576	; 0x100000
 800b80c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b80e:	b183      	cbz	r3, 800b832 <D128_GENERIC+0x2da>
 800b810:	9a06      	ldr	r2, [sp, #24]
 800b812:	9907      	ldr	r1, [sp, #28]
 800b814:	4422      	add	r2, r4
 800b816:	9407      	str	r4, [sp, #28]
 800b818:	1a52      	subs	r2, r2, r1
 800b81a:	fba2 0103 	umull	r0, r1, r2, r3
 800b81e:	17d5      	asrs	r5, r2, #31
 800b820:	f110 4200 	adds.w	r2, r0, #2147483648	; 0x80000000
 800b824:	fb03 1105 	mla	r1, r3, r5, r1
 800b828:	f141 0300 	adc.w	r3, r1, #0
 800b82c:	005b      	lsls	r3, r3, #1
 800b82e:	461c      	mov	r4, r3
 800b830:	9306      	str	r3, [sp, #24]
 800b832:	9d01      	ldr	r5, [sp, #4]
 800b834:	01e4      	lsls	r4, r4, #7
 800b836:	9e05      	ldr	r6, [sp, #20]
 800b838:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b83c:	8d28      	ldrh	r0, [r5, #40]	; 0x28
 800b83e:	2300      	movs	r3, #0
 800b840:	9908      	ldr	r1, [sp, #32]
 800b842:	fb06 f000 	mul.w	r0, r6, r0
 800b846:	3601      	adds	r6, #1
 800b848:	fbc1 2304 	smlal	r2, r3, r1, r4
 800b84c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b84e:	109b      	asrs	r3, r3, #2
 800b850:	9605      	str	r6, [sp, #20]
 800b852:	f303 030f 	ssat	r3, #16, r3
 800b856:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
 800b85a:	8ceb      	ldrh	r3, [r5, #38]	; 0x26
 800b85c:	42b3      	cmp	r3, r6
 800b85e:	dd13      	ble.n	800b888 <D128_GENERIC+0x330>
 800b860:	9b01      	ldr	r3, [sp, #4]
 800b862:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800b864:	2a01      	cmp	r2, #1
 800b866:	f47f ae95 	bne.w	800b594 <D128_GENERIC+0x3c>
 800b86a:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800b86c:	f109 0610 	add.w	r6, r9, #16
 800b870:	0681      	lsls	r1, r0, #26
 800b872:	e9d9 4200 	ldrd	r4, r2, [r9]
 800b876:	e9d9 3502 	ldrd	r3, r5, [r9, #8]
 800b87a:	d518      	bpl.n	800b8ae <D128_GENERIC+0x356>
 800b87c:	ba64      	rev16	r4, r4
 800b87e:	ba52      	rev16	r2, r2
 800b880:	ba5b      	rev16	r3, r3
 800b882:	ba6d      	rev16	r5, r5
 800b884:	46b1      	mov	r9, r6
 800b886:	e6da      	b.n	800b63e <D128_GENERIC+0xe6>
 800b888:	f8dd a010 	ldr.w	sl, [sp, #16]
 800b88c:	9b01      	ldr	r3, [sp, #4]
 800b88e:	2000      	movs	r0, #0
 800b890:	9903      	ldr	r1, [sp, #12]
 800b892:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b894:	6099      	str	r1, [r3, #8]
 800b896:	9902      	ldr	r1, [sp, #8]
 800b898:	f8c3 a01c 	str.w	sl, [r3, #28]
 800b89c:	60d9      	str	r1, [r3, #12]
 800b89e:	9906      	ldr	r1, [sp, #24]
 800b8a0:	619a      	str	r2, [r3, #24]
 800b8a2:	6119      	str	r1, [r3, #16]
 800b8a4:	9907      	ldr	r1, [sp, #28]
 800b8a6:	6159      	str	r1, [r3, #20]
 800b8a8:	b00d      	add	sp, #52	; 0x34
 800b8aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8ae:	46b1      	mov	r9, r6
 800b8b0:	e6c5      	b.n	800b63e <D128_GENERIC+0xe6>
 800b8b2:	bf00      	nop
 800b8b4:	24000000 	.word	0x24000000
 800b8b8:	00780069 	.word	0x00780069
 800b8bc:	005b004e 	.word	0x005b004e
 800b8c0:	00420037 	.word	0x00420037
 800b8c4:	002d0024 	.word	0x002d0024
 800b8c8:	001c0015 	.word	0x001c0015
 800b8cc:	000f000a 	.word	0x000f000a
 800b8d0:	00060003 	.word	0x00060003
 800b8d4:	00880096 	.word	0x00880096
 800b8d8:	00a200ac 	.word	0x00a200ac
 800b8dc:	0015001c 	.word	0x0015001c
 800b8e0:	0024002d 	.word	0x0024002d
 800b8e4:	00370042 	.word	0x00370042
 800b8e8:	004e005b 	.word	0x004e005b
 800b8ec:	00690078 	.word	0x00690078
 800b8f0:	00b400ba 	.word	0x00b400ba
 800b8f4:	00be00c0 	.word	0x00be00c0
 800b8f8:	00c000be 	.word	0x00c000be
 800b8fc:	00ba00b4 	.word	0x00ba00b4
 800b900:	00ac00a2 	.word	0x00ac00a2
 800b904:	00960088 	.word	0x00960088
 800b908:	00030006 	.word	0x00030006
 800b90c:	000a000f 	.word	0x000a000f

0800b910 <D16_1CH_HTONS_VOL_HP>:
 800b910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b914:	6993      	ldr	r3, [r2, #24]
 800b916:	b087      	sub	sp, #28
 800b918:	4682      	mov	sl, r0
 800b91a:	8cd0      	ldrh	r0, [r2, #38]	; 0x26
 800b91c:	9304      	str	r3, [sp, #16]
 800b91e:	f8d2 b030 	ldr.w	fp, [r2, #48]	; 0x30
 800b922:	69d3      	ldr	r3, [r2, #28]
 800b924:	f8d2 e020 	ldr.w	lr, [r2, #32]
 800b928:	e9d2 5402 	ldrd	r5, r4, [r2, #8]
 800b92c:	e9d2 6c04 	ldrd	r6, ip, [r2, #16]
 800b930:	9403      	str	r4, [sp, #12]
 800b932:	2800      	cmp	r0, #0
 800b934:	d054      	beq.n	800b9e0 <D16_1CH_HTONS_VOL_HP+0xd0>
 800b936:	f1a1 0902 	sub.w	r9, r1, #2
 800b93a:	eb0a 0140 	add.w	r1, sl, r0, lsl #1
 800b93e:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 800b9ec <D16_1CH_HTONS_VOL_HP+0xdc>
 800b942:	4650      	mov	r0, sl
 800b944:	9101      	str	r1, [sp, #4]
 800b946:	4619      	mov	r1, r3
 800b948:	f8cd b008 	str.w	fp, [sp, #8]
 800b94c:	9205      	str	r2, [sp, #20]
 800b94e:	f850 3b02 	ldr.w	r3, [r0], #2
 800b952:	ba5b      	rev16	r3, r3
 800b954:	b2dc      	uxtb	r4, r3
 800b956:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800b95a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b95e:	f858 4022 	ldr.w	r4, [r8, r2, lsl #2]
 800b962:	4419      	add	r1, r3
 800b964:	eb04 2491 	add.w	r4, r4, r1, lsr #10
 800b968:	f3c1 0309 	ubfx	r3, r1, #0, #10
 800b96c:	f3c4 0209 	ubfx	r2, r4, #0, #10
 800b970:	0aa1      	lsrs	r1, r4, #10
 800b972:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 800b976:	4a1b      	ldr	r2, [pc, #108]	; (800b9e4 <D16_1CH_HTONS_VOL_HP+0xd4>)
 800b978:	fb23 5402 	smlad	r4, r3, r2, r5
 800b97c:	4a1a      	ldr	r2, [pc, #104]	; (800b9e8 <D16_1CH_HTONS_VOL_HP+0xd8>)
 800b97e:	fb23 f502 	smuad	r5, r3, r2
 800b982:	f5a4 6400 	sub.w	r4, r4, #2048	; 0x800
 800b986:	f04f 4a00 	mov.w	sl, #2147483648	; 0x80000000
 800b98a:	f04f 0b00 	mov.w	fp, #0
 800b98e:	19a2      	adds	r2, r4, r6
 800b990:	eba2 020c 	sub.w	r2, r2, ip
 800b994:	46a4      	mov	ip, r4
 800b996:	17d7      	asrs	r7, r2, #31
 800b998:	fba2 230e 	umull	r2, r3, r2, lr
 800b99c:	f112 4600 	adds.w	r6, r2, #2147483648	; 0x80000000
 800b9a0:	fb0e 3307 	mla	r3, lr, r7, r3
 800b9a4:	f143 0700 	adc.w	r7, r3, #0
 800b9a8:	9b02      	ldr	r3, [sp, #8]
 800b9aa:	047a      	lsls	r2, r7, #17
 800b9ac:	007e      	lsls	r6, r7, #1
 800b9ae:	fbc3 ab02 	smlal	sl, fp, r3, r2
 800b9b2:	ea4f 03ab 	mov.w	r3, fp, asr #2
 800b9b6:	f303 030f 	ssat	r3, #16, r3
 800b9ba:	f829 3f02 	strh.w	r3, [r9, #2]!
 800b9be:	9b01      	ldr	r3, [sp, #4]
 800b9c0:	4298      	cmp	r0, r3
 800b9c2:	d1c4      	bne.n	800b94e <D16_1CH_HTONS_VOL_HP+0x3e>
 800b9c4:	460b      	mov	r3, r1
 800b9c6:	9a05      	ldr	r2, [sp, #20]
 800b9c8:	2000      	movs	r0, #0
 800b9ca:	9903      	ldr	r1, [sp, #12]
 800b9cc:	61d3      	str	r3, [r2, #28]
 800b9ce:	9b04      	ldr	r3, [sp, #16]
 800b9d0:	6095      	str	r5, [r2, #8]
 800b9d2:	60d1      	str	r1, [r2, #12]
 800b9d4:	6193      	str	r3, [r2, #24]
 800b9d6:	e9c2 6404 	strd	r6, r4, [r2, #16]
 800b9da:	b007      	add	sp, #28
 800b9dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9e0:	4664      	mov	r4, ip
 800b9e2:	e7f1      	b.n	800b9c8 <D16_1CH_HTONS_VOL_HP+0xb8>
 800b9e4:	00030001 	.word	0x00030001
 800b9e8:	00010003 	.word	0x00010003
 800b9ec:	24000000 	.word	0x24000000

0800b9f0 <D24_1CH_HTONS_VOL_HP>:
 800b9f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9f4:	6b16      	ldr	r6, [r2, #48]	; 0x30
 800b9f6:	b089      	sub	sp, #36	; 0x24
 800b9f8:	6993      	ldr	r3, [r2, #24]
 800b9fa:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 800b9fc:	9604      	str	r6, [sp, #16]
 800b9fe:	6a16      	ldr	r6, [r2, #32]
 800ba00:	9306      	str	r3, [sp, #24]
 800ba02:	9505      	str	r5, [sp, #20]
 800ba04:	69d3      	ldr	r3, [r2, #28]
 800ba06:	9600      	str	r6, [sp, #0]
 800ba08:	e9d2 4a04 	ldrd	r4, sl, [r2, #16]
 800ba0c:	e9d2 ce02 	ldrd	ip, lr, [r2, #8]
 800ba10:	2d00      	cmp	r5, #0
 800ba12:	f000 8083 	beq.w	800bb1c <D24_1CH_HTONS_VOL_HP+0x12c>
 800ba16:	9207      	str	r2, [sp, #28]
 800ba18:	2600      	movs	r6, #0
 800ba1a:	4622      	mov	r2, r4
 800ba1c:	f1a1 0b02 	sub.w	fp, r1, #2
 800ba20:	4f3f      	ldr	r7, [pc, #252]	; (800bb20 <D24_1CH_HTONS_VOL_HP+0x130>)
 800ba22:	461d      	mov	r5, r3
 800ba24:	f8cd a00c 	str.w	sl, [sp, #12]
 800ba28:	9c00      	ldr	r4, [sp, #0]
 800ba2a:	e056      	b.n	800bada <D24_1CH_HTONS_VOL_HP+0xea>
 800ba2c:	7841      	ldrb	r1, [r0, #1]
 800ba2e:	eb08 4809 	add.w	r8, r8, r9, lsl #16
 800ba32:	3002      	adds	r0, #2
 800ba34:	4488      	add	r8, r1
 800ba36:	fa5f f388 	uxtb.w	r3, r8
 800ba3a:	f3c8 2907 	ubfx	r9, r8, #8, #8
 800ba3e:	ea4f 4818 	mov.w	r8, r8, lsr #16
 800ba42:	f857 1023 	ldr.w	r1, [r7, r3, lsl #2]
 800ba46:	f857 3029 	ldr.w	r3, [r7, r9, lsl #2]
 800ba4a:	eb01 2195 	add.w	r1, r1, r5, lsr #10
 800ba4e:	f857 5028 	ldr.w	r5, [r7, r8, lsl #2]
 800ba52:	eb03 2891 	add.w	r8, r3, r1, lsr #10
 800ba56:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800ba5a:	f3c8 0309 	ubfx	r3, r8, #0, #10
 800ba5e:	eb05 2598 	add.w	r5, r5, r8, lsr #10
 800ba62:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800ba66:	492f      	ldr	r1, [pc, #188]	; (800bb24 <D24_1CH_HTONS_VOL_HP+0x134>)
 800ba68:	fb23 e901 	smlad	r9, r3, r1, lr
 800ba6c:	492e      	ldr	r1, [pc, #184]	; (800bb28 <D24_1CH_HTONS_VOL_HP+0x138>)
 800ba6e:	fb23 ce01 	smlad	lr, r3, r1, ip
 800ba72:	f3c5 0c09 	ubfx	ip, r5, #0, #10
 800ba76:	2101      	movs	r1, #1
 800ba78:	eb0c 084c 	add.w	r8, ip, ip, lsl #1
 800ba7c:	eb0e 0e48 	add.w	lr, lr, r8, lsl #1
 800ba80:	fb23 f301 	smuad	r3, r3, r1
 800ba84:	f5a9 51d8 	sub.w	r1, r9, #6912	; 0x1b00
 800ba88:	eb08 0c03 	add.w	ip, r8, r3
 800ba8c:	9b03      	ldr	r3, [sp, #12]
 800ba8e:	f04f 0a00 	mov.w	sl, #0
 800ba92:	440a      	add	r2, r1
 800ba94:	3601      	adds	r6, #1
 800ba96:	9103      	str	r1, [sp, #12]
 800ba98:	1ad2      	subs	r2, r2, r3
 800ba9a:	ea4f 79e2 	mov.w	r9, r2, asr #31
 800ba9e:	fba2 2304 	umull	r2, r3, r2, r4
 800baa2:	e9cd 2300 	strd	r2, r3, [sp]
 800baa6:	fb04 3309 	mla	r3, r4, r9, r3
 800baaa:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
 800baae:	9301      	str	r3, [sp, #4]
 800bab0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bab4:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 800bab8:	f143 0300 	adc.w	r3, r3, #0
 800babc:	ea4f 38c3 	mov.w	r8, r3, lsl #15
 800bac0:	005a      	lsls	r2, r3, #1
 800bac2:	9b04      	ldr	r3, [sp, #16]
 800bac4:	fbc3 9a08 	smlal	r9, sl, r3, r8
 800bac8:	ea4f 03aa 	mov.w	r3, sl, asr #2
 800bacc:	f303 030f 	ssat	r3, #16, r3
 800bad0:	f82b 3f02 	strh.w	r3, [fp, #2]!
 800bad4:	9b05      	ldr	r3, [sp, #20]
 800bad6:	429e      	cmp	r6, r3
 800bad8:	d010      	beq.n	800bafc <D24_1CH_HTONS_VOL_HP+0x10c>
 800bada:	f890 9003 	ldrb.w	r9, [r0, #3]
 800bade:	f016 0f01 	tst.w	r6, #1
 800bae2:	7801      	ldrb	r1, [r0, #0]
 800bae4:	ea4f 2309 	mov.w	r3, r9, lsl #8
 800bae8:	ea4f 2801 	mov.w	r8, r1, lsl #8
 800baec:	d09e      	beq.n	800ba2c <D24_1CH_HTONS_VOL_HP+0x3c>
 800baee:	f890 8002 	ldrb.w	r8, [r0, #2]
 800baf2:	3004      	adds	r0, #4
 800baf4:	eb03 4808 	add.w	r8, r3, r8, lsl #16
 800baf8:	4488      	add	r8, r1
 800bafa:	e79c      	b.n	800ba36 <D24_1CH_HTONS_VOL_HP+0x46>
 800bafc:	4614      	mov	r4, r2
 800bafe:	462b      	mov	r3, r5
 800bb00:	9a07      	ldr	r2, [sp, #28]
 800bb02:	2000      	movs	r0, #0
 800bb04:	61d3      	str	r3, [r2, #28]
 800bb06:	9b06      	ldr	r3, [sp, #24]
 800bb08:	f8c2 c008 	str.w	ip, [r2, #8]
 800bb0c:	f8c2 e00c 	str.w	lr, [r2, #12]
 800bb10:	6193      	str	r3, [r2, #24]
 800bb12:	e9c2 4104 	strd	r4, r1, [r2, #16]
 800bb16:	b009      	add	sp, #36	; 0x24
 800bb18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb1c:	4651      	mov	r1, sl
 800bb1e:	e7f0      	b.n	800bb02 <D24_1CH_HTONS_VOL_HP+0x112>
 800bb20:	24000000 	.word	0x24000000
 800bb24:	00030001 	.word	0x00030001
 800bb28:	00060007 	.word	0x00060007

0800bb2c <D32_1CH_HTONS_VOL_HP>:
 800bb2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb30:	6993      	ldr	r3, [r2, #24]
 800bb32:	b087      	sub	sp, #28
 800bb34:	4683      	mov	fp, r0
 800bb36:	8cd0      	ldrh	r0, [r2, #38]	; 0x26
 800bb38:	9304      	str	r3, [sp, #16]
 800bb3a:	69d5      	ldr	r5, [r2, #28]
 800bb3c:	6b14      	ldr	r4, [r2, #48]	; 0x30
 800bb3e:	f8d2 a020 	ldr.w	sl, [r2, #32]
 800bb42:	e9d2 8e04 	ldrd	r8, lr, [r2, #16]
 800bb46:	e9d2 3c02 	ldrd	r3, ip, [r2, #8]
 800bb4a:	2800      	cmp	r0, #0
 800bb4c:	d077      	beq.n	800bc3e <D32_1CH_HTONS_VOL_HP+0x112>
 800bb4e:	460f      	mov	r7, r1
 800bb50:	46f1      	mov	r9, lr
 800bb52:	eb01 0140 	add.w	r1, r1, r0, lsl #1
 800bb56:	f8cd 8000 	str.w	r8, [sp]
 800bb5a:	4e3a      	ldr	r6, [pc, #232]	; (800bc44 <D32_1CH_HTONS_VOL_HP+0x118>)
 800bb5c:	469e      	mov	lr, r3
 800bb5e:	46a0      	mov	r8, r4
 800bb60:	9103      	str	r1, [sp, #12]
 800bb62:	9205      	str	r2, [sp, #20]
 800bb64:	f85b 4b04 	ldr.w	r4, [fp], #4
 800bb68:	ba64      	rev16	r4, r4
 800bb6a:	b2e0      	uxtb	r0, r4
 800bb6c:	f3c4 2307 	ubfx	r3, r4, #8, #8
 800bb70:	f3c4 4107 	ubfx	r1, r4, #16, #8
 800bb74:	0e24      	lsrs	r4, r4, #24
 800bb76:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 800bb7a:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 800bb7e:	eb00 2095 	add.w	r0, r0, r5, lsr #10
 800bb82:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 800bb86:	f856 5024 	ldr.w	r5, [r6, r4, lsl #2]
 800bb8a:	eb03 2390 	add.w	r3, r3, r0, lsr #10
 800bb8e:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800bb92:	eb01 2193 	add.w	r1, r1, r3, lsr #10
 800bb96:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bb9a:	eb05 2591 	add.w	r5, r5, r1, lsr #10
 800bb9e:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800bba2:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800bba6:	f3c5 0009 	ubfx	r0, r5, #0, #10
 800bbaa:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800bbae:	4826      	ldr	r0, [pc, #152]	; (800bc48 <D32_1CH_HTONS_VOL_HP+0x11c>)
 800bbb0:	fb23 c400 	smlad	r4, r3, r0, ip
 800bbb4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800bbb8:	fb21 4402 	smlad	r4, r1, r2, r4
 800bbbc:	4823      	ldr	r0, [pc, #140]	; (800bc4c <D32_1CH_HTONS_VOL_HP+0x120>)
 800bbbe:	fb23 ec00 	smlad	ip, r3, r0, lr
 800bbc2:	4823      	ldr	r0, [pc, #140]	; (800bc50 <D32_1CH_HTONS_VOL_HP+0x124>)
 800bbc4:	fb21 cc00 	smlad	ip, r1, r0, ip
 800bbc8:	2201      	movs	r2, #1
 800bbca:	fb23 f302 	smuad	r3, r3, r2
 800bbce:	4821      	ldr	r0, [pc, #132]	; (800bc54 <D32_1CH_HTONS_VOL_HP+0x128>)
 800bbd0:	fb21 3e00 	smlad	lr, r1, r0, r3
 800bbd4:	9b00      	ldr	r3, [sp, #0]
 800bbd6:	f5a4 4480 	sub.w	r4, r4, #16384	; 0x4000
 800bbda:	4423      	add	r3, r4
 800bbdc:	eba3 0209 	sub.w	r2, r3, r9
 800bbe0:	46a1      	mov	r9, r4
 800bbe2:	17d1      	asrs	r1, r2, #31
 800bbe4:	fba2 230a 	umull	r2, r3, r2, sl
 800bbe8:	e9cd 2300 	strd	r2, r3, [sp]
 800bbec:	fb0a 3301 	mla	r3, sl, r1, r3
 800bbf0:	9301      	str	r3, [sp, #4]
 800bbf2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bbf6:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 800bbfa:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800bbfe:	f143 0300 	adc.w	r3, r3, #0
 800bc02:	0399      	lsls	r1, r3, #14
 800bc04:	005b      	lsls	r3, r3, #1
 800bc06:	9300      	str	r3, [sp, #0]
 800bc08:	2300      	movs	r3, #0
 800bc0a:	fbc8 2301 	smlal	r2, r3, r8, r1
 800bc0e:	109b      	asrs	r3, r3, #2
 800bc10:	f303 030f 	ssat	r3, #16, r3
 800bc14:	f827 3b02 	strh.w	r3, [r7], #2
 800bc18:	9b03      	ldr	r3, [sp, #12]
 800bc1a:	429f      	cmp	r7, r3
 800bc1c:	d1a2      	bne.n	800bb64 <D32_1CH_HTONS_VOL_HP+0x38>
 800bc1e:	4673      	mov	r3, lr
 800bc20:	f8dd 8000 	ldr.w	r8, [sp]
 800bc24:	9a05      	ldr	r2, [sp, #20]
 800bc26:	6093      	str	r3, [r2, #8]
 800bc28:	2000      	movs	r0, #0
 800bc2a:	9b04      	ldr	r3, [sp, #16]
 800bc2c:	f8c2 c00c 	str.w	ip, [r2, #12]
 800bc30:	61d5      	str	r5, [r2, #28]
 800bc32:	6193      	str	r3, [r2, #24]
 800bc34:	e9c2 8404 	strd	r8, r4, [r2, #16]
 800bc38:	b007      	add	sp, #28
 800bc3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc3e:	4674      	mov	r4, lr
 800bc40:	e7f1      	b.n	800bc26 <D32_1CH_HTONS_VOL_HP+0xfa>
 800bc42:	bf00      	nop
 800bc44:	24000000 	.word	0x24000000
 800bc48:	00060003 	.word	0x00060003
 800bc4c:	000a000c 	.word	0x000a000c
 800bc50:	000c000a 	.word	0x000c000a
 800bc54:	00030006 	.word	0x00030006

0800bc58 <D48_1CH_HTONS_VOL_HP>:
 800bc58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc5c:	6b17      	ldr	r7, [r2, #48]	; 0x30
 800bc5e:	b087      	sub	sp, #28
 800bc60:	6993      	ldr	r3, [r2, #24]
 800bc62:	9701      	str	r7, [sp, #4]
 800bc64:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 800bc66:	6a17      	ldr	r7, [r2, #32]
 800bc68:	9304      	str	r3, [sp, #16]
 800bc6a:	69d6      	ldr	r6, [r2, #28]
 800bc6c:	9702      	str	r7, [sp, #8]
 800bc6e:	e9d2 4e04 	ldrd	r4, lr, [r2, #16]
 800bc72:	e9d2 3c02 	ldrd	r3, ip, [r2, #8]
 800bc76:	2d00      	cmp	r5, #0
 800bc78:	f000 8093 	beq.w	800bda2 <D48_1CH_HTONS_VOL_HP+0x14a>
 800bc7c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bc80:	f1a1 0b02 	sub.w	fp, r1, #2
 800bc84:	46f2      	mov	sl, lr
 800bc86:	4f48      	ldr	r7, [pc, #288]	; (800bda8 <D48_1CH_HTONS_VOL_HP+0x150>)
 800bc88:	eb00 0145 	add.w	r1, r0, r5, lsl #1
 800bc8c:	469e      	mov	lr, r3
 800bc8e:	9205      	str	r2, [sp, #20]
 800bc90:	9103      	str	r1, [sp, #12]
 800bc92:	e9d0 3200 	ldrd	r3, r2, [r0]
 800bc96:	3006      	adds	r0, #6
 800bc98:	ba5b      	rev16	r3, r3
 800bc9a:	fa92 f992 	rev16.w	r9, r2
 800bc9e:	b2dd      	uxtb	r5, r3
 800bca0:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800bca4:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800bca8:	0e1b      	lsrs	r3, r3, #24
 800bcaa:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 800bcae:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 800bcb2:	eb05 2696 	add.w	r6, r5, r6, lsr #10
 800bcb6:	f857 5022 	ldr.w	r5, [r7, r2, lsl #2]
 800bcba:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 800bcbe:	fa5f f289 	uxtb.w	r2, r9
 800bcc2:	eb01 2196 	add.w	r1, r1, r6, lsr #10
 800bcc6:	f3c9 2907 	ubfx	r9, r9, #8, #8
 800bcca:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 800bcce:	f3c6 0809 	ubfx	r8, r6, #0, #10
 800bcd2:	eb05 2591 	add.w	r5, r5, r1, lsr #10
 800bcd6:	f857 6029 	ldr.w	r6, [r7, r9, lsl #2]
 800bcda:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800bcde:	eb03 2395 	add.w	r3, r3, r5, lsr #10
 800bce2:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800bce6:	ea41 4808 	orr.w	r8, r1, r8, lsl #16
 800bcea:	eb02 2293 	add.w	r2, r2, r3, lsr #10
 800bcee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bcf2:	eb06 2692 	add.w	r6, r6, r2, lsr #10
 800bcf6:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800bcfa:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
 800bcfe:	f3c6 0309 	ubfx	r3, r6, #0, #10
 800bd02:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 800bd06:	4b29      	ldr	r3, [pc, #164]	; (800bdac <D48_1CH_HTONS_VOL_HP+0x154>)
 800bd08:	fb28 c103 	smlad	r1, r8, r3, ip
 800bd0c:	4b28      	ldr	r3, [pc, #160]	; (800bdb0 <D48_1CH_HTONS_VOL_HP+0x158>)
 800bd0e:	fb25 1103 	smlad	r1, r5, r3, r1
 800bd12:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800bd16:	fb22 1903 	smlad	r9, r2, r3, r1
 800bd1a:	4b26      	ldr	r3, [pc, #152]	; (800bdb4 <D48_1CH_HTONS_VOL_HP+0x15c>)
 800bd1c:	fb28 ec03 	smlad	ip, r8, r3, lr
 800bd20:	f04f 131b 	mov.w	r3, #1769499	; 0x1b001b
 800bd24:	fb25 cc03 	smlad	ip, r5, r3, ip
 800bd28:	4b23      	ldr	r3, [pc, #140]	; (800bdb8 <D48_1CH_HTONS_VOL_HP+0x160>)
 800bd2a:	fb22 cc03 	smlad	ip, r2, r3, ip
 800bd2e:	2101      	movs	r1, #1
 800bd30:	fb28 f801 	smuad	r8, r8, r1
 800bd34:	4b21      	ldr	r3, [pc, #132]	; (800bdbc <D48_1CH_HTONS_VOL_HP+0x164>)
 800bd36:	fb25 8503 	smlad	r5, r5, r3, r8
 800bd3a:	4b21      	ldr	r3, [pc, #132]	; (800bdc0 <D48_1CH_HTONS_VOL_HP+0x168>)
 800bd3c:	fb22 5e03 	smlad	lr, r2, r3, r5
 800bd40:	f5a9 4158 	sub.w	r1, r9, #55296	; 0xd800
 800bd44:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 800bd48:	190a      	adds	r2, r1, r4
 800bd4a:	9c02      	ldr	r4, [sp, #8]
 800bd4c:	eba2 020a 	sub.w	r2, r2, sl
 800bd50:	468a      	mov	sl, r1
 800bd52:	ea4f 79e2 	mov.w	r9, r2, asr #31
 800bd56:	fba2 2304 	umull	r2, r3, r2, r4
 800bd5a:	fb04 3309 	mla	r3, r4, r9, r3
 800bd5e:	f112 4400 	adds.w	r4, r2, #2147483648	; 0x80000000
 800bd62:	f04f 0900 	mov.w	r9, #0
 800bd66:	f143 0500 	adc.w	r5, r3, #0
 800bd6a:	9b01      	ldr	r3, [sp, #4]
 800bd6c:	032a      	lsls	r2, r5, #12
 800bd6e:	006c      	lsls	r4, r5, #1
 800bd70:	fbc3 8902 	smlal	r8, r9, r3, r2
 800bd74:	ea4f 03a9 	mov.w	r3, r9, asr #2
 800bd78:	f303 030f 	ssat	r3, #16, r3
 800bd7c:	f82b 3f02 	strh.w	r3, [fp, #2]!
 800bd80:	9b03      	ldr	r3, [sp, #12]
 800bd82:	4283      	cmp	r3, r0
 800bd84:	d185      	bne.n	800bc92 <D48_1CH_HTONS_VOL_HP+0x3a>
 800bd86:	4673      	mov	r3, lr
 800bd88:	9a05      	ldr	r2, [sp, #20]
 800bd8a:	6093      	str	r3, [r2, #8]
 800bd8c:	2000      	movs	r0, #0
 800bd8e:	9b04      	ldr	r3, [sp, #16]
 800bd90:	f8c2 c00c 	str.w	ip, [r2, #12]
 800bd94:	61d6      	str	r6, [r2, #28]
 800bd96:	6193      	str	r3, [r2, #24]
 800bd98:	e9c2 4104 	strd	r4, r1, [r2, #16]
 800bd9c:	b007      	add	sp, #28
 800bd9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bda2:	4671      	mov	r1, lr
 800bda4:	e7f1      	b.n	800bd8a <D48_1CH_HTONS_VOL_HP+0x132>
 800bda6:	bf00      	nop
 800bda8:	24000000 	.word	0x24000000
 800bdac:	000f000a 	.word	0x000f000a
 800bdb0:	00060003 	.word	0x00060003
 800bdb4:	00150019 	.word	0x00150019
 800bdb8:	00190015 	.word	0x00190015
 800bdbc:	00030006 	.word	0x00030006
 800bdc0:	000a000f 	.word	0x000a000f

0800bdc4 <D64_1CH_HTONS_VOL_HP>:
 800bdc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bdc8:	6b15      	ldr	r5, [r2, #48]	; 0x30
 800bdca:	b089      	sub	sp, #36	; 0x24
 800bdcc:	6993      	ldr	r3, [r2, #24]
 800bdce:	4686      	mov	lr, r0
 800bdd0:	9503      	str	r5, [sp, #12]
 800bdd2:	8cd0      	ldrh	r0, [r2, #38]	; 0x26
 800bdd4:	6a15      	ldr	r5, [r2, #32]
 800bdd6:	9306      	str	r3, [sp, #24]
 800bdd8:	69d6      	ldr	r6, [r2, #28]
 800bdda:	9504      	str	r5, [sp, #16]
 800bddc:	e9d2 8404 	ldrd	r8, r4, [r2, #16]
 800bde0:	e9d2 3c02 	ldrd	r3, ip, [r2, #8]
 800bde4:	2800      	cmp	r0, #0
 800bde6:	f000 80a4 	beq.w	800bf32 <D64_1CH_HTONS_VOL_HP+0x16e>
 800bdea:	460f      	mov	r7, r1
 800bdec:	46f1      	mov	r9, lr
 800bdee:	eb01 0140 	add.w	r1, r1, r0, lsl #1
 800bdf2:	4d56      	ldr	r5, [pc, #344]	; (800bf4c <D64_1CH_HTONS_VOL_HP+0x188>)
 800bdf4:	46a2      	mov	sl, r4
 800bdf6:	469e      	mov	lr, r3
 800bdf8:	9105      	str	r1, [sp, #20]
 800bdfa:	9207      	str	r2, [sp, #28]
 800bdfc:	f859 1b08 	ldr.w	r1, [r9], #8
 800be00:	f859 3c04 	ldr.w	r3, [r9, #-4]
 800be04:	ba49      	rev16	r1, r1
 800be06:	fa93 fb93 	rev16.w	fp, r3
 800be0a:	b2cb      	uxtb	r3, r1
 800be0c:	f3c1 2207 	ubfx	r2, r1, #8, #8
 800be10:	f3c1 4007 	ubfx	r0, r1, #16, #8
 800be14:	0e09      	lsrs	r1, r1, #24
 800be16:	f855 4023 	ldr.w	r4, [r5, r3, lsl #2]
 800be1a:	fa5f f38b 	uxtb.w	r3, fp
 800be1e:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 800be22:	4426      	add	r6, r4
 800be24:	f855 4020 	ldr.w	r4, [r5, r0, lsl #2]
 800be28:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 800be2c:	eb02 2296 	add.w	r2, r2, r6, lsr #10
 800be30:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
 800be34:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800be38:	f3cb 2307 	ubfx	r3, fp, #8, #8
 800be3c:	eb04 2492 	add.w	r4, r4, r2, lsr #10
 800be40:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800be44:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 800be48:	eb01 2194 	add.w	r1, r1, r4, lsr #10
 800be4c:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800be50:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 800be54:	f3cb 4607 	ubfx	r6, fp, #16, #8
 800be58:	eb00 2091 	add.w	r0, r0, r1, lsr #10
 800be5c:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800be60:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 800be64:	ea4f 6b1b 	mov.w	fp, fp, lsr #24
 800be68:	eb03 2390 	add.w	r3, r3, r0, lsr #10
 800be6c:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800be70:	f855 b02b 	ldr.w	fp, [r5, fp, lsl #2]
 800be74:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800be78:	eb06 2693 	add.w	r6, r6, r3, lsr #10
 800be7c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800be80:	eb0b 2b96 	add.w	fp, fp, r6, lsr #10
 800be84:	f3c6 0409 	ubfx	r4, r6, #0, #10
 800be88:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800be8c:	f3cb 0009 	ubfx	r0, fp, #0, #10
 800be90:	ea4f 269b 	mov.w	r6, fp, lsr #10
 800be94:	ea40 4b04 	orr.w	fp, r0, r4, lsl #16
 800be98:	482d      	ldr	r0, [pc, #180]	; (800bf50 <D64_1CH_HTONS_VOL_HP+0x18c>)
 800be9a:	fb22 cc00 	smlad	ip, r2, r0, ip
 800be9e:	482d      	ldr	r0, [pc, #180]	; (800bf54 <D64_1CH_HTONS_VOL_HP+0x190>)
 800bea0:	fb21 cc00 	smlad	ip, r1, r0, ip
 800bea4:	482c      	ldr	r0, [pc, #176]	; (800bf58 <D64_1CH_HTONS_VOL_HP+0x194>)
 800bea6:	fb23 cc00 	smlad	ip, r3, r0, ip
 800beaa:	f44f 3480 	mov.w	r4, #65536	; 0x10000
 800beae:	fb2b c404 	smlad	r4, fp, r4, ip
 800beb2:	482a      	ldr	r0, [pc, #168]	; (800bf5c <D64_1CH_HTONS_VOL_HP+0x198>)
 800beb4:	fb22 ec00 	smlad	ip, r2, r0, lr
 800beb8:	fb2b cc10 	smladx	ip, fp, r0, ip
 800bebc:	4828      	ldr	r0, [pc, #160]	; (800bf60 <D64_1CH_HTONS_VOL_HP+0x19c>)
 800bebe:	fb21 cc00 	smlad	ip, r1, r0, ip
 800bec2:	fb23 cc10 	smladx	ip, r3, r0, ip
 800bec6:	f04f 0e01 	mov.w	lr, #1
 800beca:	fb22 f20e 	smuad	r2, r2, lr
 800bece:	4825      	ldr	r0, [pc, #148]	; (800bf64 <D64_1CH_HTONS_VOL_HP+0x1a0>)
 800bed0:	fb21 2100 	smlad	r1, r1, r0, r2
 800bed4:	4a24      	ldr	r2, [pc, #144]	; (800bf68 <D64_1CH_HTONS_VOL_HP+0x1a4>)
 800bed6:	fb23 1302 	smlad	r3, r3, r2, r1
 800beda:	4a24      	ldr	r2, [pc, #144]	; (800bf6c <D64_1CH_HTONS_VOL_HP+0x1a8>)
 800bedc:	fb2b 3e02 	smlad	lr, fp, r2, r3
 800bee0:	f5a4 3400 	sub.w	r4, r4, #131072	; 0x20000
 800bee4:	eb04 0208 	add.w	r2, r4, r8
 800bee8:	eba2 020a 	sub.w	r2, r2, sl
 800beec:	46a2      	mov	sl, r4
 800beee:	4610      	mov	r0, r2
 800bef0:	17d1      	asrs	r1, r2, #31
 800bef2:	e9cd 0100 	strd	r0, r1, [sp]
 800bef6:	9904      	ldr	r1, [sp, #16]
 800bef8:	9801      	ldr	r0, [sp, #4]
 800befa:	fba2 2301 	umull	r2, r3, r2, r1
 800befe:	fb01 3300 	mla	r3, r1, r0, r3
 800bf02:	f112 4000 	adds.w	r0, r2, #2147483648	; 0x80000000
 800bf06:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800bf0a:	f143 0100 	adc.w	r1, r3, #0
 800bf0e:	9b03      	ldr	r3, [sp, #12]
 800bf10:	02ca      	lsls	r2, r1, #11
 800bf12:	ea4f 0841 	mov.w	r8, r1, lsl #1
 800bf16:	2100      	movs	r1, #0
 800bf18:	fbc3 0102 	smlal	r0, r1, r3, r2
 800bf1c:	108b      	asrs	r3, r1, #2
 800bf1e:	f303 030f 	ssat	r3, #16, r3
 800bf22:	f827 3b02 	strh.w	r3, [r7], #2
 800bf26:	9b05      	ldr	r3, [sp, #20]
 800bf28:	429f      	cmp	r7, r3
 800bf2a:	f47f af67 	bne.w	800bdfc <D64_1CH_HTONS_VOL_HP+0x38>
 800bf2e:	4673      	mov	r3, lr
 800bf30:	9a07      	ldr	r2, [sp, #28]
 800bf32:	6093      	str	r3, [r2, #8]
 800bf34:	2000      	movs	r0, #0
 800bf36:	9b06      	ldr	r3, [sp, #24]
 800bf38:	f8c2 c00c 	str.w	ip, [r2, #12]
 800bf3c:	61d6      	str	r6, [r2, #28]
 800bf3e:	6193      	str	r3, [r2, #24]
 800bf40:	e9c2 8404 	strd	r8, r4, [r2, #16]
 800bf44:	b009      	add	sp, #36	; 0x24
 800bf46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf4a:	bf00      	nop
 800bf4c:	24000000 	.word	0x24000000
 800bf50:	001c0015 	.word	0x001c0015
 800bf54:	000f000a 	.word	0x000f000a
 800bf58:	00060003 	.word	0x00060003
 800bf5c:	0024002a 	.word	0x0024002a
 800bf60:	002e0030 	.word	0x002e0030
 800bf64:	00030006 	.word	0x00030006
 800bf68:	000a000f 	.word	0x000a000f
 800bf6c:	0015001c 	.word	0x0015001c

0800bf70 <D80_1CH_HTONS_VOL_HP>:
 800bf70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf74:	6913      	ldr	r3, [r2, #16]
 800bf76:	b089      	sub	sp, #36	; 0x24
 800bf78:	6b16      	ldr	r6, [r2, #48]	; 0x30
 800bf7a:	9301      	str	r3, [sp, #4]
 800bf7c:	9603      	str	r6, [sp, #12]
 800bf7e:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 800bf80:	6a16      	ldr	r6, [r2, #32]
 800bf82:	e9d2 5305 	ldrd	r5, r3, [r2, #20]
 800bf86:	e9d2 7c02 	ldrd	r7, ip, [r2, #8]
 800bf8a:	9306      	str	r3, [sp, #24]
 800bf8c:	9604      	str	r6, [sp, #16]
 800bf8e:	69d3      	ldr	r3, [r2, #28]
 800bf90:	2c00      	cmp	r4, #0
 800bf92:	f000 80ce 	beq.w	800c132 <D80_1CH_HTONS_VOL_HP+0x1c2>
 800bf96:	3902      	subs	r1, #2
 800bf98:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 800bf9c:	4e66      	ldr	r6, [pc, #408]	; (800c138 <D80_1CH_HTONS_VOL_HP+0x1c8>)
 800bf9e:	469e      	mov	lr, r3
 800bfa0:	9102      	str	r1, [sp, #8]
 800bfa2:	46aa      	mov	sl, r5
 800bfa4:	eb00 0144 	add.w	r1, r0, r4, lsl #1
 800bfa8:	9207      	str	r2, [sp, #28]
 800bfaa:	9105      	str	r1, [sp, #20]
 800bfac:	6883      	ldr	r3, [r0, #8]
 800bfae:	e9d0 4200 	ldrd	r4, r2, [r0]
 800bfb2:	300a      	adds	r0, #10
 800bfb4:	ba64      	rev16	r4, r4
 800bfb6:	ba52      	rev16	r2, r2
 800bfb8:	fa93 fb93 	rev16.w	fp, r3
 800bfbc:	b2e5      	uxtb	r5, r4
 800bfbe:	f3c4 2307 	ubfx	r3, r4, #8, #8
 800bfc2:	f3c4 4107 	ubfx	r1, r4, #16, #8
 800bfc6:	0e24      	lsrs	r4, r4, #24
 800bfc8:	f856 8025 	ldr.w	r8, [r6, r5, lsl #2]
 800bfcc:	b2d5      	uxtb	r5, r2
 800bfce:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 800bfd2:	44c6      	add	lr, r8
 800bfd4:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 800bfd8:	f856 4024 	ldr.w	r4, [r6, r4, lsl #2]
 800bfdc:	eb03 239e 	add.w	r3, r3, lr, lsr #10
 800bfe0:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
 800bfe4:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800bfe8:	eb01 2993 	add.w	r9, r1, r3, lsr #10
 800bfec:	f3c2 2107 	ubfx	r1, r2, #8, #8
 800bff0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bff4:	eb04 2499 	add.w	r4, r4, r9, lsr #10
 800bff8:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 800bffc:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 800c000:	f3cb 2e07 	ubfx	lr, fp, #8, #8
 800c004:	eb05 2894 	add.w	r8, r5, r4, lsr #10
 800c008:	f3c2 4507 	ubfx	r5, r2, #16, #8
 800c00c:	0e12      	lsrs	r2, r2, #24
 800c00e:	f856 e02e 	ldr.w	lr, [r6, lr, lsl #2]
 800c012:	eb01 2198 	add.w	r1, r1, r8, lsr #10
 800c016:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
 800c01a:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
 800c01e:	fa5f fb8b 	uxtb.w	fp, fp
 800c022:	eb05 2591 	add.w	r5, r5, r1, lsr #10
 800c026:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800c02a:	f856 b02b 	ldr.w	fp, [r6, fp, lsl #2]
 800c02e:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800c032:	eb02 2295 	add.w	r2, r2, r5, lsr #10
 800c036:	f3c9 0909 	ubfx	r9, r9, #0, #10
 800c03a:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800c03e:	ea41 4808 	orr.w	r8, r1, r8, lsl #16
 800c042:	eb0b 2b92 	add.w	fp, fp, r2, lsr #10
 800c046:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800c04a:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800c04e:	eb0e 2e9b 	add.w	lr, lr, fp, lsr #10
 800c052:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 800c056:	ea44 4409 	orr.w	r4, r4, r9, lsl #16
 800c05a:	f3ce 0109 	ubfx	r1, lr, #0, #10
 800c05e:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
 800c062:	ea4f 2e9e 	mov.w	lr, lr, lsr #10
 800c066:	ea41 4b0b 	orr.w	fp, r1, fp, lsl #16
 800c06a:	4934      	ldr	r1, [pc, #208]	; (800c13c <D80_1CH_HTONS_VOL_HP+0x1cc>)
 800c06c:	fb23 cc01 	smlad	ip, r3, r1, ip
 800c070:	4933      	ldr	r1, [pc, #204]	; (800c140 <D80_1CH_HTONS_VOL_HP+0x1d0>)
 800c072:	fb24 cc01 	smlad	ip, r4, r1, ip
 800c076:	4933      	ldr	r1, [pc, #204]	; (800c144 <D80_1CH_HTONS_VOL_HP+0x1d4>)
 800c078:	fb28 cc01 	smlad	ip, r8, r1, ip
 800c07c:	4932      	ldr	r1, [pc, #200]	; (800c148 <D80_1CH_HTONS_VOL_HP+0x1d8>)
 800c07e:	fb22 cc01 	smlad	ip, r2, r1, ip
 800c082:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800c086:	fb2b c901 	smlad	r9, fp, r1, ip
 800c08a:	4930      	ldr	r1, [pc, #192]	; (800c14c <D80_1CH_HTONS_VOL_HP+0x1dc>)
 800c08c:	fb23 7701 	smlad	r7, r3, r1, r7
 800c090:	492f      	ldr	r1, [pc, #188]	; (800c150 <D80_1CH_HTONS_VOL_HP+0x1e0>)
 800c092:	fb24 7701 	smlad	r7, r4, r1, r7
 800c096:	f04f 1c4b 	mov.w	ip, #4915275	; 0x4b004b
 800c09a:	fb28 7c0c 	smlad	ip, r8, ip, r7
 800c09e:	492d      	ldr	r1, [pc, #180]	; (800c154 <D80_1CH_HTONS_VOL_HP+0x1e4>)
 800c0a0:	fb22 cc01 	smlad	ip, r2, r1, ip
 800c0a4:	492c      	ldr	r1, [pc, #176]	; (800c158 <D80_1CH_HTONS_VOL_HP+0x1e8>)
 800c0a6:	fb2b cc01 	smlad	ip, fp, r1, ip
 800c0aa:	2101      	movs	r1, #1
 800c0ac:	fb23 f301 	smuad	r3, r3, r1
 800c0b0:	492a      	ldr	r1, [pc, #168]	; (800c15c <D80_1CH_HTONS_VOL_HP+0x1ec>)
 800c0b2:	fb24 3401 	smlad	r4, r4, r1, r3
 800c0b6:	492a      	ldr	r1, [pc, #168]	; (800c160 <D80_1CH_HTONS_VOL_HP+0x1f0>)
 800c0b8:	fb28 4101 	smlad	r1, r8, r1, r4
 800c0bc:	4f29      	ldr	r7, [pc, #164]	; (800c164 <D80_1CH_HTONS_VOL_HP+0x1f4>)
 800c0be:	fb22 1207 	smlad	r2, r2, r7, r1
 800c0c2:	4f29      	ldr	r7, [pc, #164]	; (800c168 <D80_1CH_HTONS_VOL_HP+0x1f8>)
 800c0c4:	fb2b 2707 	smlad	r7, fp, r7, r2
 800c0c8:	f5a9 317a 	sub.w	r1, r9, #256000	; 0x3e800
 800c0cc:	9b01      	ldr	r3, [sp, #4]
 800c0ce:	9c04      	ldr	r4, [sp, #16]
 800c0d0:	440b      	add	r3, r1
 800c0d2:	eba3 020a 	sub.w	r2, r3, sl
 800c0d6:	468a      	mov	sl, r1
 800c0d8:	ea4f 79e2 	mov.w	r9, r2, asr #31
 800c0dc:	fba2 2304 	umull	r2, r3, r2, r4
 800c0e0:	fb04 3309 	mla	r3, r4, r9, r3
 800c0e4:	f112 4400 	adds.w	r4, r2, #2147483648	; 0x80000000
 800c0e8:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800c0ec:	f143 0500 	adc.w	r5, r3, #0
 800c0f0:	006b      	lsls	r3, r5, #1
 800c0f2:	02aa      	lsls	r2, r5, #10
 800c0f4:	2500      	movs	r5, #0
 800c0f6:	9301      	str	r3, [sp, #4]
 800c0f8:	9b03      	ldr	r3, [sp, #12]
 800c0fa:	fbc3 4502 	smlal	r4, r5, r3, r2
 800c0fe:	9a02      	ldr	r2, [sp, #8]
 800c100:	10ab      	asrs	r3, r5, #2
 800c102:	f303 030f 	ssat	r3, #16, r3
 800c106:	f822 3f02 	strh.w	r3, [r2, #2]!
 800c10a:	9b05      	ldr	r3, [sp, #20]
 800c10c:	9202      	str	r2, [sp, #8]
 800c10e:	4298      	cmp	r0, r3
 800c110:	f47f af4c 	bne.w	800bfac <D80_1CH_HTONS_VOL_HP+0x3c>
 800c114:	4673      	mov	r3, lr
 800c116:	9a07      	ldr	r2, [sp, #28]
 800c118:	61d3      	str	r3, [r2, #28]
 800c11a:	2000      	movs	r0, #0
 800c11c:	9b01      	ldr	r3, [sp, #4]
 800c11e:	6097      	str	r7, [r2, #8]
 800c120:	f8c2 c00c 	str.w	ip, [r2, #12]
 800c124:	e9c2 3104 	strd	r3, r1, [r2, #16]
 800c128:	9b06      	ldr	r3, [sp, #24]
 800c12a:	6193      	str	r3, [r2, #24]
 800c12c:	b009      	add	sp, #36	; 0x24
 800c12e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c132:	4629      	mov	r1, r5
 800c134:	e7f0      	b.n	800c118 <D80_1CH_HTONS_VOL_HP+0x1a8>
 800c136:	bf00      	nop
 800c138:	24000000 	.word	0x24000000
 800c13c:	002d0024 	.word	0x002d0024
 800c140:	001c0015 	.word	0x001c0015
 800c144:	000f000a 	.word	0x000f000a
 800c148:	00060003 	.word	0x00060003
 800c14c:	0037003f 	.word	0x0037003f
 800c150:	00450049 	.word	0x00450049
 800c154:	00490045 	.word	0x00490045
 800c158:	003f0037 	.word	0x003f0037
 800c15c:	00030006 	.word	0x00030006
 800c160:	000a000f 	.word	0x000a000f
 800c164:	0015001c 	.word	0x0015001c
 800c168:	0024002d 	.word	0x0024002d

0800c16c <D128_1CH_HTONS_VOL_HP>:
 800c16c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c170:	6914      	ldr	r4, [r2, #16]
 800c172:	b08d      	sub	sp, #52	; 0x34
 800c174:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 800c176:	9404      	str	r4, [sp, #16]
 800c178:	6954      	ldr	r4, [r2, #20]
 800c17a:	920b      	str	r2, [sp, #44]	; 0x2c
 800c17c:	9405      	str	r4, [sp, #20]
 800c17e:	6994      	ldr	r4, [r2, #24]
 800c180:	f8d2 c01c 	ldr.w	ip, [r2, #28]
 800c184:	940a      	str	r4, [sp, #40]	; 0x28
 800c186:	6894      	ldr	r4, [r2, #8]
 800c188:	9403      	str	r4, [sp, #12]
 800c18a:	68d4      	ldr	r4, [r2, #12]
 800c18c:	9402      	str	r4, [sp, #8]
 800c18e:	6b14      	ldr	r4, [r2, #48]	; 0x30
 800c190:	6a12      	ldr	r2, [r2, #32]
 800c192:	9407      	str	r4, [sp, #28]
 800c194:	9208      	str	r2, [sp, #32]
 800c196:	2b00      	cmp	r3, #0
 800c198:	f000 812e 	beq.w	800c3f8 <D128_1CH_HTONS_VOL_HP+0x28c>
 800c19c:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 800c1a0:	f100 0b10 	add.w	fp, r0, #16
 800c1a4:	f8df 9290 	ldr.w	r9, [pc, #656]	; 800c438 <D128_1CH_HTONS_VOL_HP+0x2cc>
 800c1a8:	9106      	str	r1, [sp, #24]
 800c1aa:	9309      	str	r3, [sp, #36]	; 0x24
 800c1ac:	e95b 0204 	ldrd	r0, r2, [fp, #-16]
 800c1b0:	e95b 3602 	ldrd	r3, r6, [fp, #-8]
 800c1b4:	ba40      	rev16	r0, r0
 800c1b6:	ba52      	rev16	r2, r2
 800c1b8:	ba5b      	rev16	r3, r3
 800c1ba:	ba76      	rev16	r6, r6
 800c1bc:	b2c5      	uxtb	r5, r0
 800c1be:	f3c0 2407 	ubfx	r4, r0, #8, #8
 800c1c2:	f3c0 4107 	ubfx	r1, r0, #16, #8
 800c1c6:	0e00      	lsrs	r0, r0, #24
 800c1c8:	f859 7025 	ldr.w	r7, [r9, r5, lsl #2]
 800c1cc:	b2d5      	uxtb	r5, r2
 800c1ce:	f859 e024 	ldr.w	lr, [r9, r4, lsl #2]
 800c1d2:	f3c2 2407 	ubfx	r4, r2, #8, #8
 800c1d6:	44bc      	add	ip, r7
 800c1d8:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800c1dc:	f859 7020 	ldr.w	r7, [r9, r0, lsl #2]
 800c1e0:	f3c2 4007 	ubfx	r0, r2, #16, #8
 800c1e4:	eb0e 2e9c 	add.w	lr, lr, ip, lsr #10
 800c1e8:	f859 a025 	ldr.w	sl, [r9, r5, lsl #2]
 800c1ec:	f859 5024 	ldr.w	r5, [r9, r4, lsl #2]
 800c1f0:	0e12      	lsrs	r2, r2, #24
 800c1f2:	eb01 219e 	add.w	r1, r1, lr, lsr #10
 800c1f6:	f859 0020 	ldr.w	r0, [r9, r0, lsl #2]
 800c1fa:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 800c1fe:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800c202:	eb07 2791 	add.w	r7, r7, r1, lsr #10
 800c206:	f859 4022 	ldr.w	r4, [r9, r2, lsl #2]
 800c20a:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800c20e:	b2da      	uxtb	r2, r3
 800c210:	eb0a 2a97 	add.w	sl, sl, r7, lsr #10
 800c214:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800c218:	ea4e 4e0c 	orr.w	lr, lr, ip, lsl #16
 800c21c:	f859 2022 	ldr.w	r2, [r9, r2, lsl #2]
 800c220:	eb05 259a 	add.w	r5, r5, sl, lsr #10
 800c224:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 800c228:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800c22c:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800c230:	eb00 2c95 	add.w	ip, r0, r5, lsr #10
 800c234:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800c238:	f859 8021 	ldr.w	r8, [r9, r1, lsl #2]
 800c23c:	f3c3 4107 	ubfx	r1, r3, #16, #8
 800c240:	eb04 249c 	add.w	r4, r4, ip, lsr #10
 800c244:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 800c248:	f859 0021 	ldr.w	r0, [r9, r1, lsl #2]
 800c24c:	0e1b      	lsrs	r3, r3, #24
 800c24e:	eb02 2294 	add.w	r2, r2, r4, lsr #10
 800c252:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800c256:	f859 1023 	ldr.w	r1, [r9, r3, lsl #2]
 800c25a:	ea45 450a 	orr.w	r5, r5, sl, lsl #16
 800c25e:	eb08 2892 	add.w	r8, r8, r2, lsr #10
 800c262:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800c266:	b2f3      	uxtb	r3, r6
 800c268:	eb00 2a98 	add.w	sl, r0, r8, lsr #10
 800c26c:	f3c8 0009 	ubfx	r0, r8, #0, #10
 800c270:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800c274:	ea44 440c 	orr.w	r4, r4, ip, lsl #16
 800c278:	eb01 219a 	add.w	r1, r1, sl, lsr #10
 800c27c:	f3c6 2c07 	ubfx	ip, r6, #8, #8
 800c280:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 800c284:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 800c288:	eb03 2891 	add.w	r8, r3, r1, lsr #10
 800c28c:	f859 202c 	ldr.w	r2, [r9, ip, lsl #2]
 800c290:	f3c6 4c07 	ubfx	ip, r6, #16, #8
 800c294:	0e36      	lsrs	r6, r6, #24
 800c296:	eb02 2298 	add.w	r2, r2, r8, lsr #10
 800c29a:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800c29e:	f859 302c 	ldr.w	r3, [r9, ip, lsl #2]
 800c2a2:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800c2a6:	f859 c026 	ldr.w	ip, [r9, r6, lsl #2]
 800c2aa:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800c2ae:	eb03 2692 	add.w	r6, r3, r2, lsr #10
 800c2b2:	f3c2 0309 	ubfx	r3, r2, #0, #10
 800c2b6:	9101      	str	r1, [sp, #4]
 800c2b8:	ea43 4208 	orr.w	r2, r3, r8, lsl #16
 800c2bc:	9b02      	ldr	r3, [sp, #8]
 800c2be:	eb0c 2c96 	add.w	ip, ip, r6, lsr #10
 800c2c2:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800c2c6:	4611      	mov	r1, r2
 800c2c8:	f3cc 0209 	ubfx	r2, ip, #0, #10
 800c2cc:	ea4f 2c9c 	mov.w	ip, ip, lsr #10
 800c2d0:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
 800c2d4:	4a49      	ldr	r2, [pc, #292]	; (800c3fc <D128_1CH_HTONS_VOL_HP+0x290>)
 800c2d6:	fb2e 3202 	smlad	r2, lr, r2, r3
 800c2da:	4b49      	ldr	r3, [pc, #292]	; (800c400 <D128_1CH_HTONS_VOL_HP+0x294>)
 800c2dc:	fb27 2203 	smlad	r2, r7, r3, r2
 800c2e0:	4b48      	ldr	r3, [pc, #288]	; (800c404 <D128_1CH_HTONS_VOL_HP+0x298>)
 800c2e2:	fb25 2203 	smlad	r2, r5, r3, r2
 800c2e6:	4b48      	ldr	r3, [pc, #288]	; (800c408 <D128_1CH_HTONS_VOL_HP+0x29c>)
 800c2e8:	fb24 2203 	smlad	r2, r4, r3, r2
 800c2ec:	4b47      	ldr	r3, [pc, #284]	; (800c40c <D128_1CH_HTONS_VOL_HP+0x2a0>)
 800c2ee:	fb20 2803 	smlad	r8, r0, r3, r2
 800c2f2:	4b47      	ldr	r3, [pc, #284]	; (800c410 <D128_1CH_HTONS_VOL_HP+0x2a4>)
 800c2f4:	9a01      	ldr	r2, [sp, #4]
 800c2f6:	fb22 8203 	smlad	r2, r2, r3, r8
 800c2fa:	4b46      	ldr	r3, [pc, #280]	; (800c414 <D128_1CH_HTONS_VOL_HP+0x2a8>)
 800c2fc:	9102      	str	r1, [sp, #8]
 800c2fe:	fb21 2203 	smlad	r2, r1, r3, r2
 800c302:	f44f 3880 	mov.w	r8, #65536	; 0x10000
 800c306:	fb26 2308 	smlad	r3, r6, r8, r2
 800c30a:	4619      	mov	r1, r3
 800c30c:	9a03      	ldr	r2, [sp, #12]
 800c30e:	4b42      	ldr	r3, [pc, #264]	; (800c418 <D128_1CH_HTONS_VOL_HP+0x2ac>)
 800c310:	fb2e 2803 	smlad	r8, lr, r3, r2
 800c314:	4b41      	ldr	r3, [pc, #260]	; (800c41c <D128_1CH_HTONS_VOL_HP+0x2b0>)
 800c316:	fb27 8a03 	smlad	sl, r7, r3, r8
 800c31a:	f8df 8120 	ldr.w	r8, [pc, #288]	; 800c43c <D128_1CH_HTONS_VOL_HP+0x2d0>
 800c31e:	fb25 a808 	smlad	r8, r5, r8, sl
 800c322:	f8df a11c 	ldr.w	sl, [pc, #284]	; 800c440 <D128_1CH_HTONS_VOL_HP+0x2d4>
 800c326:	fb24 880a 	smlad	r8, r4, sl, r8
 800c32a:	f8df a118 	ldr.w	sl, [pc, #280]	; 800c444 <D128_1CH_HTONS_VOL_HP+0x2d8>
 800c32e:	fb20 8a0a 	smlad	sl, r0, sl, r8
 800c332:	f8df 8114 	ldr.w	r8, [pc, #276]	; 800c448 <D128_1CH_HTONS_VOL_HP+0x2dc>
 800c336:	9b01      	ldr	r3, [sp, #4]
 800c338:	fb23 aa08 	smlad	sl, r3, r8, sl
 800c33c:	f8df 810c 	ldr.w	r8, [pc, #268]	; 800c44c <D128_1CH_HTONS_VOL_HP+0x2e0>
 800c340:	9a02      	ldr	r2, [sp, #8]
 800c342:	fb22 a808 	smlad	r8, r2, r8, sl
 800c346:	f8df a108 	ldr.w	sl, [pc, #264]	; 800c450 <D128_1CH_HTONS_VOL_HP+0x2e4>
 800c34a:	fb26 830a 	smlad	r3, r6, sl, r8
 800c34e:	f04f 0801 	mov.w	r8, #1
 800c352:	9302      	str	r3, [sp, #8]
 800c354:	fb2e fe08 	smuad	lr, lr, r8
 800c358:	f8df 80f8 	ldr.w	r8, [pc, #248]	; 800c454 <D128_1CH_HTONS_VOL_HP+0x2e8>
 800c35c:	fb27 ee08 	smlad	lr, r7, r8, lr
 800c360:	4f2f      	ldr	r7, [pc, #188]	; (800c420 <D128_1CH_HTONS_VOL_HP+0x2b4>)
 800c362:	fb25 ee07 	smlad	lr, r5, r7, lr
 800c366:	4f2f      	ldr	r7, [pc, #188]	; (800c424 <D128_1CH_HTONS_VOL_HP+0x2b8>)
 800c368:	fb24 ee07 	smlad	lr, r4, r7, lr
 800c36c:	4f2e      	ldr	r7, [pc, #184]	; (800c428 <D128_1CH_HTONS_VOL_HP+0x2bc>)
 800c36e:	fb20 ee07 	smlad	lr, r0, r7, lr
 800c372:	4f2e      	ldr	r7, [pc, #184]	; (800c42c <D128_1CH_HTONS_VOL_HP+0x2c0>)
 800c374:	9b01      	ldr	r3, [sp, #4]
 800c376:	fb23 ee07 	smlad	lr, r3, r7, lr
 800c37a:	4f2d      	ldr	r7, [pc, #180]	; (800c430 <D128_1CH_HTONS_VOL_HP+0x2c4>)
 800c37c:	fb22 e707 	smlad	r7, r2, r7, lr
 800c380:	4b2c      	ldr	r3, [pc, #176]	; (800c434 <D128_1CH_HTONS_VOL_HP+0x2c8>)
 800c382:	fb26 7303 	smlad	r3, r6, r3, r7
 800c386:	f5a1 1680 	sub.w	r6, r1, #1048576	; 0x100000
 800c38a:	9303      	str	r3, [sp, #12]
 800c38c:	9b04      	ldr	r3, [sp, #16]
 800c38e:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800c392:	9f08      	ldr	r7, [sp, #32]
 800c394:	2100      	movs	r1, #0
 800c396:	4433      	add	r3, r6
 800c398:	f10b 0b10 	add.w	fp, fp, #16
 800c39c:	461a      	mov	r2, r3
 800c39e:	9b05      	ldr	r3, [sp, #20]
 800c3a0:	9605      	str	r6, [sp, #20]
 800c3a2:	1ad2      	subs	r2, r2, r3
 800c3a4:	17d5      	asrs	r5, r2, #31
 800c3a6:	fba2 2307 	umull	r2, r3, r2, r7
 800c3aa:	1814      	adds	r4, r2, r0
 800c3ac:	fb07 3305 	mla	r3, r7, r5, r3
 800c3b0:	eb43 0501 	adc.w	r5, r3, r1
 800c3b4:	006b      	lsls	r3, r5, #1
 800c3b6:	022a      	lsls	r2, r5, #8
 800c3b8:	9304      	str	r3, [sp, #16]
 800c3ba:	9b07      	ldr	r3, [sp, #28]
 800c3bc:	fbc3 0102 	smlal	r0, r1, r3, r2
 800c3c0:	9a06      	ldr	r2, [sp, #24]
 800c3c2:	108b      	asrs	r3, r1, #2
 800c3c4:	f303 030f 	ssat	r3, #16, r3
 800c3c8:	f822 3b02 	strh.w	r3, [r2], #2
 800c3cc:	4613      	mov	r3, r2
 800c3ce:	9206      	str	r2, [sp, #24]
 800c3d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c3d2:	4293      	cmp	r3, r2
 800c3d4:	f47f aeea 	bne.w	800c1ac <D128_1CH_HTONS_VOL_HP+0x40>
 800c3d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c3da:	2000      	movs	r0, #0
 800c3dc:	9903      	ldr	r1, [sp, #12]
 800c3de:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c3e0:	6099      	str	r1, [r3, #8]
 800c3e2:	9902      	ldr	r1, [sp, #8]
 800c3e4:	f8c3 c01c 	str.w	ip, [r3, #28]
 800c3e8:	60d9      	str	r1, [r3, #12]
 800c3ea:	9904      	ldr	r1, [sp, #16]
 800c3ec:	619a      	str	r2, [r3, #24]
 800c3ee:	e9c3 1604 	strd	r1, r6, [r3, #16]
 800c3f2:	b00d      	add	sp, #52	; 0x34
 800c3f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c3f8:	9e05      	ldr	r6, [sp, #20]
 800c3fa:	e7ed      	b.n	800c3d8 <D128_1CH_HTONS_VOL_HP+0x26c>
 800c3fc:	00780069 	.word	0x00780069
 800c400:	005b004e 	.word	0x005b004e
 800c404:	00420037 	.word	0x00420037
 800c408:	002d0024 	.word	0x002d0024
 800c40c:	001c0015 	.word	0x001c0015
 800c410:	000f000a 	.word	0x000f000a
 800c414:	00060003 	.word	0x00060003
 800c418:	00880096 	.word	0x00880096
 800c41c:	00a200ac 	.word	0x00a200ac
 800c420:	000a000f 	.word	0x000a000f
 800c424:	0015001c 	.word	0x0015001c
 800c428:	0024002d 	.word	0x0024002d
 800c42c:	00370042 	.word	0x00370042
 800c430:	004e005b 	.word	0x004e005b
 800c434:	00690078 	.word	0x00690078
 800c438:	24000000 	.word	0x24000000
 800c43c:	00b400ba 	.word	0x00b400ba
 800c440:	00be00c0 	.word	0x00be00c0
 800c444:	00c000be 	.word	0x00c000be
 800c448:	00ba00b4 	.word	0x00ba00b4
 800c44c:	00ac00a2 	.word	0x00ac00a2
 800c450:	00960088 	.word	0x00960088
 800c454:	00030006 	.word	0x00030006

0800c458 <PDM_Filter_Init>:
 800c458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c45a:	2240      	movs	r2, #64	; 0x40
 800c45c:	2100      	movs	r1, #0
 800c45e:	4604      	mov	r4, r0
 800c460:	300c      	adds	r0, #12
 800c462:	f000 fa07 	bl	800c874 <memset>
 800c466:	4a56      	ldr	r2, [pc, #344]	; (800c5c0 <PDM_Filter_Init+0x168>)
 800c468:	4856      	ldr	r0, [pc, #344]	; (800c5c4 <PDM_Filter_Init+0x16c>)
 800c46a:	f64f 71f0 	movw	r1, #65520	; 0xfff0
 800c46e:	6813      	ldr	r3, [r2, #0]
 800c470:	f24c 2540 	movw	r5, #49728	; 0xc240
 800c474:	f023 0301 	bic.w	r3, r3, #1
 800c478:	6013      	str	r3, [r2, #0]
 800c47a:	6803      	ldr	r3, [r0, #0]
 800c47c:	400b      	ands	r3, r1
 800c47e:	42ab      	cmp	r3, r5
 800c480:	d040      	beq.n	800c504 <PDM_Filter_Init+0xac>
 800c482:	6803      	ldr	r3, [r0, #0]
 800c484:	f24c 2270 	movw	r2, #49776	; 0xc270
 800c488:	4019      	ands	r1, r3
 800c48a:	4291      	cmp	r1, r2
 800c48c:	d03a      	beq.n	800c504 <PDM_Filter_Init+0xac>
 800c48e:	4b4e      	ldr	r3, [pc, #312]	; (800c5c8 <PDM_Filter_Init+0x170>)
 800c490:	2101      	movs	r1, #1
 800c492:	461a      	mov	r2, r3
 800c494:	6019      	str	r1, [r3, #0]
 800c496:	6813      	ldr	r3, [r2, #0]
 800c498:	2b00      	cmp	r3, #0
 800c49a:	d1fc      	bne.n	800c496 <PDM_Filter_Init+0x3e>
 800c49c:	4b4b      	ldr	r3, [pc, #300]	; (800c5cc <PDM_Filter_Init+0x174>)
 800c49e:	494c      	ldr	r1, [pc, #304]	; (800c5d0 <PDM_Filter_Init+0x178>)
 800c4a0:	4a4c      	ldr	r2, [pc, #304]	; (800c5d4 <PDM_Filter_Init+0x17c>)
 800c4a2:	6019      	str	r1, [r3, #0]
 800c4a4:	681b      	ldr	r3, [r3, #0]
 800c4a6:	8820      	ldrh	r0, [r4, #0]
 800c4a8:	4293      	cmp	r3, r2
 800c4aa:	8961      	ldrh	r1, [r4, #10]
 800c4ac:	f04f 0300 	mov.w	r3, #0
 800c4b0:	8922      	ldrh	r2, [r4, #8]
 800c4b2:	bf14      	ite	ne
 800c4b4:	2500      	movne	r5, #0
 800c4b6:	4d47      	ldreq	r5, [pc, #284]	; (800c5d4 <PDM_Filter_Init+0x17c>)
 800c4b8:	2801      	cmp	r0, #1
 800c4ba:	61a3      	str	r3, [r4, #24]
 800c4bc:	6465      	str	r5, [r4, #68]	; 0x44
 800c4be:	60e3      	str	r3, [r4, #12]
 800c4c0:	6263      	str	r3, [r4, #36]	; 0x24
 800c4c2:	6423      	str	r3, [r4, #64]	; 0x40
 800c4c4:	86a1      	strh	r1, [r4, #52]	; 0x34
 800c4c6:	86e2      	strh	r2, [r4, #54]	; 0x36
 800c4c8:	e9c4 3304 	strd	r3, r3, [r4, #16]
 800c4cc:	e9c4 3307 	strd	r3, r3, [r4, #28]
 800c4d0:	d936      	bls.n	800c540 <PDM_Filter_Init+0xe8>
 800c4d2:	2003      	movs	r0, #3
 800c4d4:	2302      	movs	r3, #2
 800c4d6:	8862      	ldrh	r2, [r4, #2]
 800c4d8:	2a01      	cmp	r2, #1
 800c4da:	d92e      	bls.n	800c53a <PDM_Filter_Init+0xe2>
 800c4dc:	2140      	movs	r1, #64	; 0x40
 800c4de:	2300      	movs	r3, #0
 800c4e0:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800c4e2:	f1b2 1f01 	cmp.w	r2, #65537	; 0x10001
 800c4e6:	d101      	bne.n	800c4ec <PDM_Filter_Init+0x94>
 800c4e8:	460b      	mov	r3, r1
 800c4ea:	6421      	str	r1, [r4, #64]	; 0x40
 800c4ec:	6862      	ldr	r2, [r4, #4]
 800c4ee:	b11a      	cbz	r2, 800c4f8 <PDM_Filter_Init+0xa0>
 800c4f0:	f043 0310 	orr.w	r3, r3, #16
 800c4f4:	62e2      	str	r2, [r4, #44]	; 0x2c
 800c4f6:	6423      	str	r3, [r4, #64]	; 0x40
 800c4f8:	2200      	movs	r2, #0
 800c4fa:	8722      	strh	r2, [r4, #56]	; 0x38
 800c4fc:	b908      	cbnz	r0, 800c502 <PDM_Filter_Init+0xaa>
 800c4fe:	3380      	adds	r3, #128	; 0x80
 800c500:	6423      	str	r3, [r4, #64]	; 0x40
 800c502:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c504:	4b34      	ldr	r3, [pc, #208]	; (800c5d8 <PDM_Filter_Init+0x180>)
 800c506:	681b      	ldr	r3, [r3, #0]
 800c508:	2b00      	cmp	r3, #0
 800c50a:	d1c0      	bne.n	800c48e <PDM_Filter_Init+0x36>
 800c50c:	4a33      	ldr	r2, [pc, #204]	; (800c5dc <PDM_Filter_Init+0x184>)
 800c50e:	6813      	ldr	r3, [r2, #0]
 800c510:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c514:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800c518:	d006      	beq.n	800c528 <PDM_Filter_Init+0xd0>
 800c51a:	6813      	ldr	r3, [r2, #0]
 800c51c:	f240 4283 	movw	r2, #1155	; 0x483
 800c520:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c524:	4293      	cmp	r3, r2
 800c526:	d1b2      	bne.n	800c48e <PDM_Filter_Init+0x36>
 800c528:	4b2d      	ldr	r3, [pc, #180]	; (800c5e0 <PDM_Filter_Init+0x188>)
 800c52a:	2101      	movs	r1, #1
 800c52c:	461a      	mov	r2, r3
 800c52e:	6019      	str	r1, [r3, #0]
 800c530:	6813      	ldr	r3, [r2, #0]
 800c532:	2b00      	cmp	r3, #0
 800c534:	d1fc      	bne.n	800c530 <PDM_Filter_Init+0xd8>
 800c536:	4b2b      	ldr	r3, [pc, #172]	; (800c5e4 <PDM_Filter_Init+0x18c>)
 800c538:	e7b1      	b.n	800c49e <PDM_Filter_Init+0x46>
 800c53a:	d03a      	beq.n	800c5b2 <PDM_Filter_Init+0x15a>
 800c53c:	4618      	mov	r0, r3
 800c53e:	e7cd      	b.n	800c4dc <PDM_Filter_Init+0x84>
 800c540:	4d29      	ldr	r5, [pc, #164]	; (800c5e8 <PDM_Filter_Init+0x190>)
 800c542:	782a      	ldrb	r2, [r5, #0]
 800c544:	d01b      	beq.n	800c57e <PDM_Filter_Init+0x126>
 800c546:	2a01      	cmp	r2, #1
 800c548:	d001      	beq.n	800c54e <PDM_Filter_Init+0xf6>
 800c54a:	2001      	movs	r0, #1
 800c54c:	e7c3      	b.n	800c4d6 <PDM_Filter_Init+0x7e>
 800c54e:	4927      	ldr	r1, [pc, #156]	; (800c5ec <PDM_Filter_Init+0x194>)
 800c550:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 800c5f4 <PDM_Filter_Init+0x19c>
 800c554:	f501 6780 	add.w	r7, r1, #1024	; 0x400
 800c558:	4e25      	ldr	r6, [pc, #148]	; (800c5f0 <PDM_Filter_Init+0x198>)
 800c55a:	f851 2f04 	ldr.w	r2, [r1, #4]!
 800c55e:	ea0c 5302 	and.w	r3, ip, r2, lsl #20
 800c562:	ea02 0006 	and.w	r0, r2, r6
 800c566:	f3c2 5209 	ubfx	r2, r2, #20, #10
 800c56a:	428f      	cmp	r7, r1
 800c56c:	ea43 0300 	orr.w	r3, r3, r0
 800c570:	4413      	add	r3, r2
 800c572:	600b      	str	r3, [r1, #0]
 800c574:	d1f1      	bne.n	800c55a <PDM_Filter_Init+0x102>
 800c576:	2300      	movs	r3, #0
 800c578:	2001      	movs	r0, #1
 800c57a:	702b      	strb	r3, [r5, #0]
 800c57c:	e7ab      	b.n	800c4d6 <PDM_Filter_Init+0x7e>
 800c57e:	2a00      	cmp	r2, #0
 800c580:	d1a9      	bne.n	800c4d6 <PDM_Filter_Init+0x7e>
 800c582:	491a      	ldr	r1, [pc, #104]	; (800c5ec <PDM_Filter_Init+0x194>)
 800c584:	f8df c06c 	ldr.w	ip, [pc, #108]	; 800c5f4 <PDM_Filter_Init+0x19c>
 800c588:	f501 6780 	add.w	r7, r1, #1024	; 0x400
 800c58c:	4e18      	ldr	r6, [pc, #96]	; (800c5f0 <PDM_Filter_Init+0x198>)
 800c58e:	f851 2f04 	ldr.w	r2, [r1, #4]!
 800c592:	ea0c 5302 	and.w	r3, ip, r2, lsl #20
 800c596:	ea02 0006 	and.w	r0, r2, r6
 800c59a:	f3c2 5209 	ubfx	r2, r2, #20, #10
 800c59e:	428f      	cmp	r7, r1
 800c5a0:	ea43 0300 	orr.w	r3, r3, r0
 800c5a4:	4413      	add	r3, r2
 800c5a6:	600b      	str	r3, [r1, #0]
 800c5a8:	d1f1      	bne.n	800c58e <PDM_Filter_Init+0x136>
 800c5aa:	2001      	movs	r0, #1
 800c5ac:	2300      	movs	r3, #0
 800c5ae:	7028      	strb	r0, [r5, #0]
 800c5b0:	e791      	b.n	800c4d6 <PDM_Filter_Init+0x7e>
 800c5b2:	2220      	movs	r2, #32
 800c5b4:	4618      	mov	r0, r3
 800c5b6:	2160      	movs	r1, #96	; 0x60
 800c5b8:	6422      	str	r2, [r4, #64]	; 0x40
 800c5ba:	4613      	mov	r3, r2
 800c5bc:	e790      	b.n	800c4e0 <PDM_Filter_Init+0x88>
 800c5be:	bf00      	nop
 800c5c0:	e0002000 	.word	0xe0002000
 800c5c4:	e000ed00 	.word	0xe000ed00
 800c5c8:	40023008 	.word	0x40023008
 800c5cc:	40023000 	.word	0x40023000
 800c5d0:	f407a5c2 	.word	0xf407a5c2
 800c5d4:	b5e8b5cd 	.word	0xb5e8b5cd
 800c5d8:	e0042000 	.word	0xe0042000
 800c5dc:	5c001000 	.word	0x5c001000
 800c5e0:	58024c08 	.word	0x58024c08
 800c5e4:	58024c00 	.word	0x58024c00
 800c5e8:	24000490 	.word	0x24000490
 800c5ec:	23fffffc 	.word	0x23fffffc
 800c5f0:	000ffc00 	.word	0x000ffc00
 800c5f4:	3ff00000 	.word	0x3ff00000

0800c5f8 <PDM_Filter_setConfig>:
 800c5f8:	4b67      	ldr	r3, [pc, #412]	; (800c798 <PDM_Filter_setConfig+0x1a0>)
 800c5fa:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c5fc:	429a      	cmp	r2, r3
 800c5fe:	d128      	bne.n	800c652 <PDM_Filter_setConfig+0x5a>
 800c600:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800c602:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c604:	880e      	ldrh	r6, [r1, #0]
 800c606:	460d      	mov	r5, r1
 800c608:	4604      	mov	r4, r0
 800c60a:	f422 7180 	bic.w	r1, r2, #256	; 0x100
 800c60e:	1e73      	subs	r3, r6, #1
 800c610:	f9b5 7004 	ldrsh.w	r7, [r5, #4]
 800c614:	f9b0 0038 	ldrsh.w	r0, [r0, #56]	; 0x38
 800c618:	2b06      	cmp	r3, #6
 800c61a:	ed2d 8b02 	vpush	{d8}
 800c61e:	6421      	str	r1, [r4, #64]	; 0x40
 800c620:	b083      	sub	sp, #12
 800c622:	d820      	bhi.n	800c666 <PDM_Filter_setConfig+0x6e>
 800c624:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 800c626:	42b3      	cmp	r3, r6
 800c628:	d03d      	beq.n	800c6a6 <PDM_Filter_setConfig+0xae>
 800c62a:	4b5c      	ldr	r3, [pc, #368]	; (800c79c <PDM_Filter_setConfig+0x1a4>)
 800c62c:	4013      	ands	r3, r2
 800c62e:	4333      	orrs	r3, r6
 800c630:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800c634:	6423      	str	r3, [r4, #64]	; 0x40
 800c636:	f003 030f 	and.w	r3, r3, #15
 800c63a:	2a70      	cmp	r2, #112	; 0x70
 800c63c:	f103 33ff 	add.w	r3, r3, #4294967295
 800c640:	d009      	beq.n	800c656 <PDM_Filter_setConfig+0x5e>
 800c642:	2b06      	cmp	r3, #6
 800c644:	d824      	bhi.n	800c690 <PDM_Filter_setConfig+0x98>
 800c646:	e8df f003 	tbb	[pc, r3]
 800c64a:	878a      	.short	0x878a
 800c64c:	7b7e8184 	.word	0x7b7e8184
 800c650:	78          	.byte	0x78
 800c651:	00          	.byte	0x00
 800c652:	2004      	movs	r0, #4
 800c654:	4770      	bx	lr
 800c656:	2b06      	cmp	r3, #6
 800c658:	d81a      	bhi.n	800c690 <PDM_Filter_setConfig+0x98>
 800c65a:	e8df f003 	tbb	[pc, r3]
 800c65e:	8f92      	.short	0x8f92
 800c660:	8617898c 	.word	0x8617898c
 800c664:	83          	.byte	0x83
 800c665:	00          	.byte	0x00
 800c666:	4287      	cmp	r7, r0
 800c668:	f000 808e 	beq.w	800c788 <PDM_Filter_setConfig+0x190>
 800c66c:	f117 0f0c 	cmn.w	r7, #12
 800c670:	f04f 0008 	mov.w	r0, #8
 800c674:	da11      	bge.n	800c69a <PDM_Filter_setConfig+0xa2>
 800c676:	f64f 73f4 	movw	r3, #65524	; 0xfff4
 800c67a:	3040      	adds	r0, #64	; 0x40
 800c67c:	80ab      	strh	r3, [r5, #4]
 800c67e:	886b      	ldrh	r3, [r5, #2]
 800c680:	8626      	strh	r6, [r4, #48]	; 0x30
 800c682:	8663      	strh	r3, [r4, #50]	; 0x32
 800c684:	b003      	add	sp, #12
 800c686:	ecbd 8b02 	vpop	{d8}
 800c68a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c68c:	4b44      	ldr	r3, [pc, #272]	; (800c7a0 <PDM_Filter_setConfig+0x1a8>)
 800c68e:	64a3      	str	r3, [r4, #72]	; 0x48
 800c690:	f117 0f0c 	cmn.w	r7, #12
 800c694:	f04f 0000 	mov.w	r0, #0
 800c698:	dbed      	blt.n	800c676 <PDM_Filter_setConfig+0x7e>
 800c69a:	2f33      	cmp	r7, #51	; 0x33
 800c69c:	dd10      	ble.n	800c6c0 <PDM_Filter_setConfig+0xc8>
 800c69e:	2333      	movs	r3, #51	; 0x33
 800c6a0:	3040      	adds	r0, #64	; 0x40
 800c6a2:	80ab      	strh	r3, [r5, #4]
 800c6a4:	e7eb      	b.n	800c67e <PDM_Filter_setConfig+0x86>
 800c6a6:	4287      	cmp	r7, r0
 800c6a8:	d1f2      	bne.n	800c690 <PDM_Filter_setConfig+0x98>
 800c6aa:	886b      	ldrh	r3, [r5, #2]
 800c6ac:	8663      	strh	r3, [r4, #50]	; 0x32
 800c6ae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c6b0:	2000      	movs	r0, #0
 800c6b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c6b6:	6423      	str	r3, [r4, #64]	; 0x40
 800c6b8:	b003      	add	sp, #12
 800c6ba:	ecbd 8b02 	vpop	{d8}
 800c6be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c6c0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c6c2:	f003 030f 	and.w	r3, r3, #15
 800c6c6:	3b01      	subs	r3, #1
 800c6c8:	2b06      	cmp	r3, #6
 800c6ca:	d831      	bhi.n	800c730 <PDM_Filter_setConfig+0x138>
 800c6cc:	4a35      	ldr	r2, [pc, #212]	; (800c7a4 <PDM_Filter_setConfig+0x1ac>)
 800c6ce:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 800c6d2:	eddf 0a35 	vldr	s1, [pc, #212]	; 800c7a8 <PDM_Filter_setConfig+0x1b0>
 800c6d6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c6da:	9001      	str	r0, [sp, #4]
 800c6dc:	edd3 7a07 	vldr	s15, [r3, #28]
 800c6e0:	ed93 8a00 	vldr	s16, [r3]
 800c6e4:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800c6e8:	f000 f8e6 	bl	800c8b8 <powf>
 800c6ec:	eef0 8a40 	vmov.f32	s17, s0
 800c6f0:	9801      	ldr	r0, [sp, #4]
 800c6f2:	ee07 7a90 	vmov	s15, r7
 800c6f6:	ee28 8a28 	vmul.f32	s16, s16, s17
 800c6fa:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 800c6fe:	9001      	str	r0, [sp, #4]
 800c700:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 800c704:	eddf 7a29 	vldr	s15, [pc, #164]	; 800c7ac <PDM_Filter_setConfig+0x1b4>
 800c708:	ee60 0aa7 	vmul.f32	s1, s1, s15
 800c70c:	f000 f8d4 	bl	800c8b8 <powf>
 800c710:	ee28 8a00 	vmul.f32	s16, s16, s0
 800c714:	886b      	ldrh	r3, [r5, #2]
 800c716:	9801      	ldr	r0, [sp, #4]
 800c718:	feb8 8a48 	vrinta.f32	s16, s16
 800c71c:	eebc 8ac8 	vcvt.u32.f32	s16, s16
 800c720:	8727      	strh	r7, [r4, #56]	; 0x38
 800c722:	8663      	strh	r3, [r4, #50]	; 0x32
 800c724:	8626      	strh	r6, [r4, #48]	; 0x30
 800c726:	ed84 8a0f 	vstr	s16, [r4, #60]	; 0x3c
 800c72a:	2800      	cmp	r0, #0
 800c72c:	d0bf      	beq.n	800c6ae <PDM_Filter_setConfig+0xb6>
 800c72e:	e7a9      	b.n	800c684 <PDM_Filter_setConfig+0x8c>
 800c730:	eddf 8a1f 	vldr	s17, [pc, #124]	; 800c7b0 <PDM_Filter_setConfig+0x1b8>
 800c734:	ed9f 8a1f 	vldr	s16, [pc, #124]	; 800c7b4 <PDM_Filter_setConfig+0x1bc>
 800c738:	e7db      	b.n	800c6f2 <PDM_Filter_setConfig+0xfa>
 800c73a:	4b1f      	ldr	r3, [pc, #124]	; (800c7b8 <PDM_Filter_setConfig+0x1c0>)
 800c73c:	64a3      	str	r3, [r4, #72]	; 0x48
 800c73e:	e7a7      	b.n	800c690 <PDM_Filter_setConfig+0x98>
 800c740:	4b1e      	ldr	r3, [pc, #120]	; (800c7bc <PDM_Filter_setConfig+0x1c4>)
 800c742:	64a3      	str	r3, [r4, #72]	; 0x48
 800c744:	e7a4      	b.n	800c690 <PDM_Filter_setConfig+0x98>
 800c746:	4b1e      	ldr	r3, [pc, #120]	; (800c7c0 <PDM_Filter_setConfig+0x1c8>)
 800c748:	64a3      	str	r3, [r4, #72]	; 0x48
 800c74a:	e7a1      	b.n	800c690 <PDM_Filter_setConfig+0x98>
 800c74c:	4b1d      	ldr	r3, [pc, #116]	; (800c7c4 <PDM_Filter_setConfig+0x1cc>)
 800c74e:	64a3      	str	r3, [r4, #72]	; 0x48
 800c750:	e79e      	b.n	800c690 <PDM_Filter_setConfig+0x98>
 800c752:	4b1d      	ldr	r3, [pc, #116]	; (800c7c8 <PDM_Filter_setConfig+0x1d0>)
 800c754:	64a3      	str	r3, [r4, #72]	; 0x48
 800c756:	e79b      	b.n	800c690 <PDM_Filter_setConfig+0x98>
 800c758:	4b1c      	ldr	r3, [pc, #112]	; (800c7cc <PDM_Filter_setConfig+0x1d4>)
 800c75a:	64a3      	str	r3, [r4, #72]	; 0x48
 800c75c:	e798      	b.n	800c690 <PDM_Filter_setConfig+0x98>
 800c75e:	4b1c      	ldr	r3, [pc, #112]	; (800c7d0 <PDM_Filter_setConfig+0x1d8>)
 800c760:	64a3      	str	r3, [r4, #72]	; 0x48
 800c762:	e795      	b.n	800c690 <PDM_Filter_setConfig+0x98>
 800c764:	4b1b      	ldr	r3, [pc, #108]	; (800c7d4 <PDM_Filter_setConfig+0x1dc>)
 800c766:	64a3      	str	r3, [r4, #72]	; 0x48
 800c768:	e792      	b.n	800c690 <PDM_Filter_setConfig+0x98>
 800c76a:	4b1b      	ldr	r3, [pc, #108]	; (800c7d8 <PDM_Filter_setConfig+0x1e0>)
 800c76c:	64a3      	str	r3, [r4, #72]	; 0x48
 800c76e:	e78f      	b.n	800c690 <PDM_Filter_setConfig+0x98>
 800c770:	4b1a      	ldr	r3, [pc, #104]	; (800c7dc <PDM_Filter_setConfig+0x1e4>)
 800c772:	64a3      	str	r3, [r4, #72]	; 0x48
 800c774:	e78c      	b.n	800c690 <PDM_Filter_setConfig+0x98>
 800c776:	4b1a      	ldr	r3, [pc, #104]	; (800c7e0 <PDM_Filter_setConfig+0x1e8>)
 800c778:	64a3      	str	r3, [r4, #72]	; 0x48
 800c77a:	e789      	b.n	800c690 <PDM_Filter_setConfig+0x98>
 800c77c:	4b19      	ldr	r3, [pc, #100]	; (800c7e4 <PDM_Filter_setConfig+0x1ec>)
 800c77e:	64a3      	str	r3, [r4, #72]	; 0x48
 800c780:	e786      	b.n	800c690 <PDM_Filter_setConfig+0x98>
 800c782:	4b19      	ldr	r3, [pc, #100]	; (800c7e8 <PDM_Filter_setConfig+0x1f0>)
 800c784:	64a3      	str	r3, [r4, #72]	; 0x48
 800c786:	e783      	b.n	800c690 <PDM_Filter_setConfig+0x98>
 800c788:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 800c78a:	42b3      	cmp	r3, r6
 800c78c:	f47f af6e 	bne.w	800c66c <PDM_Filter_setConfig+0x74>
 800c790:	886b      	ldrh	r3, [r5, #2]
 800c792:	2008      	movs	r0, #8
 800c794:	8663      	strh	r3, [r4, #50]	; 0x32
 800c796:	e775      	b.n	800c684 <PDM_Filter_setConfig+0x8c>
 800c798:	b5e8b5cd 	.word	0xb5e8b5cd
 800c79c:	fffffef0 	.word	0xfffffef0
 800c7a0:	0800b911 	.word	0x0800b911
 800c7a4:	0800cc28 	.word	0x0800cc28
 800c7a8:	42000000 	.word	0x42000000
 800c7ac:	3d4ccccd 	.word	0x3d4ccccd
 800c7b0:	4f800000 	.word	0x4f800000
 800c7b4:	00000000 	.word	0x00000000
 800c7b8:	0800ad1d 	.word	0x0800ad1d
 800c7bc:	0800aba5 	.word	0x0800aba5
 800c7c0:	0800aa95 	.word	0x0800aa95
 800c7c4:	0800b559 	.word	0x0800b559
 800c7c8:	0800b2c1 	.word	0x0800b2c1
 800c7cc:	0800b089 	.word	0x0800b089
 800c7d0:	0800aea5 	.word	0x0800aea5
 800c7d4:	0800bb2d 	.word	0x0800bb2d
 800c7d8:	0800b9f1 	.word	0x0800b9f1
 800c7dc:	0800c16d 	.word	0x0800c16d
 800c7e0:	0800bf71 	.word	0x0800bf71
 800c7e4:	0800bdc5 	.word	0x0800bdc5
 800c7e8:	0800bc59 	.word	0x0800bc59

0800c7ec <PDM_Filter>:
 800c7ec:	b410      	push	{r4}
 800c7ee:	4b0b      	ldr	r3, [pc, #44]	; (800c81c <PDM_Filter+0x30>)
 800c7f0:	6c54      	ldr	r4, [r2, #68]	; 0x44
 800c7f2:	429c      	cmp	r4, r3
 800c7f4:	d107      	bne.n	800c806 <PDM_Filter+0x1a>
 800c7f6:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800c7f8:	05dc      	lsls	r4, r3, #23
 800c7fa:	d508      	bpl.n	800c80e <PDM_Filter+0x22>
 800c7fc:	6c93      	ldr	r3, [r2, #72]	; 0x48
 800c7fe:	320c      	adds	r2, #12
 800c800:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c804:	4718      	bx	r3
 800c806:	2004      	movs	r0, #4
 800c808:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c80c:	4770      	bx	lr
 800c80e:	f013 0f80 	tst.w	r3, #128	; 0x80
 800c812:	bf14      	ite	ne
 800c814:	2020      	movne	r0, #32
 800c816:	2030      	moveq	r0, #48	; 0x30
 800c818:	e7f6      	b.n	800c808 <PDM_Filter+0x1c>
 800c81a:	bf00      	nop
 800c81c:	b5e8b5cd 	.word	0xb5e8b5cd

0800c820 <__errno>:
 800c820:	4b01      	ldr	r3, [pc, #4]	; (800c828 <__errno+0x8>)
 800c822:	6818      	ldr	r0, [r3, #0]
 800c824:	4770      	bx	lr
 800c826:	bf00      	nop
 800c828:	24000410 	.word	0x24000410

0800c82c <__libc_init_array>:
 800c82c:	b570      	push	{r4, r5, r6, lr}
 800c82e:	4d0d      	ldr	r5, [pc, #52]	; (800c864 <__libc_init_array+0x38>)
 800c830:	4c0d      	ldr	r4, [pc, #52]	; (800c868 <__libc_init_array+0x3c>)
 800c832:	1b64      	subs	r4, r4, r5
 800c834:	10a4      	asrs	r4, r4, #2
 800c836:	2600      	movs	r6, #0
 800c838:	42a6      	cmp	r6, r4
 800c83a:	d109      	bne.n	800c850 <__libc_init_array+0x24>
 800c83c:	4d0b      	ldr	r5, [pc, #44]	; (800c86c <__libc_init_array+0x40>)
 800c83e:	4c0c      	ldr	r4, [pc, #48]	; (800c870 <__libc_init_array+0x44>)
 800c840:	f000 f9e6 	bl	800cc10 <_init>
 800c844:	1b64      	subs	r4, r4, r5
 800c846:	10a4      	asrs	r4, r4, #2
 800c848:	2600      	movs	r6, #0
 800c84a:	42a6      	cmp	r6, r4
 800c84c:	d105      	bne.n	800c85a <__libc_init_array+0x2e>
 800c84e:	bd70      	pop	{r4, r5, r6, pc}
 800c850:	f855 3b04 	ldr.w	r3, [r5], #4
 800c854:	4798      	blx	r3
 800c856:	3601      	adds	r6, #1
 800c858:	e7ee      	b.n	800c838 <__libc_init_array+0xc>
 800c85a:	f855 3b04 	ldr.w	r3, [r5], #4
 800c85e:	4798      	blx	r3
 800c860:	3601      	adds	r6, #1
 800c862:	e7f2      	b.n	800c84a <__libc_init_array+0x1e>
 800c864:	0800d100 	.word	0x0800d100
 800c868:	0800d100 	.word	0x0800d100
 800c86c:	0800d100 	.word	0x0800d100
 800c870:	0800d104 	.word	0x0800d104

0800c874 <memset>:
 800c874:	4402      	add	r2, r0
 800c876:	4603      	mov	r3, r0
 800c878:	4293      	cmp	r3, r2
 800c87a:	d100      	bne.n	800c87e <memset+0xa>
 800c87c:	4770      	bx	lr
 800c87e:	f803 1b01 	strb.w	r1, [r3], #1
 800c882:	e7f9      	b.n	800c878 <memset+0x4>

0800c884 <checkint>:
 800c884:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800c888:	2b7e      	cmp	r3, #126	; 0x7e
 800c88a:	dd10      	ble.n	800c8ae <checkint+0x2a>
 800c88c:	2b96      	cmp	r3, #150	; 0x96
 800c88e:	dc0c      	bgt.n	800c8aa <checkint+0x26>
 800c890:	2201      	movs	r2, #1
 800c892:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 800c896:	fa02 f303 	lsl.w	r3, r2, r3
 800c89a:	1e5a      	subs	r2, r3, #1
 800c89c:	4202      	tst	r2, r0
 800c89e:	d106      	bne.n	800c8ae <checkint+0x2a>
 800c8a0:	4203      	tst	r3, r0
 800c8a2:	bf0c      	ite	eq
 800c8a4:	2002      	moveq	r0, #2
 800c8a6:	2001      	movne	r0, #1
 800c8a8:	4770      	bx	lr
 800c8aa:	2002      	movs	r0, #2
 800c8ac:	4770      	bx	lr
 800c8ae:	2000      	movs	r0, #0
 800c8b0:	4770      	bx	lr
 800c8b2:	0000      	movs	r0, r0
 800c8b4:	0000      	movs	r0, r0
	...

0800c8b8 <powf>:
 800c8b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c8ba:	ee10 1a10 	vmov	r1, s0
 800c8be:	ee10 6a90 	vmov	r6, s1
 800c8c2:	f5a1 0300 	sub.w	r3, r1, #8388608	; 0x800000
 800c8c6:	0072      	lsls	r2, r6, #1
 800c8c8:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 800c8cc:	b085      	sub	sp, #20
 800c8ce:	f102 30ff 	add.w	r0, r2, #4294967295
 800c8d2:	f06f 7380 	mvn.w	r3, #16777216	; 0x1000000
 800c8d6:	d256      	bcs.n	800c986 <powf+0xce>
 800c8d8:	4298      	cmp	r0, r3
 800c8da:	d256      	bcs.n	800c98a <powf+0xd2>
 800c8dc:	2000      	movs	r0, #0
 800c8de:	f101 4240 	add.w	r2, r1, #3221225472	; 0xc0000000
 800c8e2:	4ea3      	ldr	r6, [pc, #652]	; (800cb70 <powf+0x2b8>)
 800c8e4:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 800c8e8:	f502 024d 	add.w	r2, r2, #13434880	; 0xcd0000
 800c8ec:	f3c2 47c3 	ubfx	r7, r2, #19, #4
 800c8f0:	0dd2      	lsrs	r2, r2, #23
 800c8f2:	eb06 1707 	add.w	r7, r6, r7, lsl #4
 800c8f6:	05d2      	lsls	r2, r2, #23
 800c8f8:	1a8b      	subs	r3, r1, r2
 800c8fa:	ed97 5b00 	vldr	d5, [r7]
 800c8fe:	ee07 3a90 	vmov	s15, r3
 800c902:	15d2      	asrs	r2, r2, #23
 800c904:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800c908:	eea5 6b07 	vfma.f64	d6, d5, d7
 800c90c:	ed97 5b02 	vldr	d5, [r7, #8]
 800c910:	ee26 2b06 	vmul.f64	d2, d6, d6
 800c914:	ee22 1b02 	vmul.f64	d1, d2, d2
 800c918:	ee07 2a90 	vmov	s15, r2
 800c91c:	ed96 4b40 	vldr	d4, [r6, #256]	; 0x100
 800c920:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800c924:	ee37 7b05 	vadd.f64	d7, d7, d5
 800c928:	ed96 5b42 	vldr	d5, [r6, #264]	; 0x108
 800c92c:	ed96 3b44 	vldr	d3, [r6, #272]	; 0x110
 800c930:	eea6 5b04 	vfma.f64	d5, d6, d4
 800c934:	ed96 4b46 	vldr	d4, [r6, #280]	; 0x118
 800c938:	eea6 4b03 	vfma.f64	d4, d6, d3
 800c93c:	ed96 3b48 	vldr	d3, [r6, #288]	; 0x120
 800c940:	eeb7 0ae0 	vcvt.f64.f32	d0, s1
 800c944:	eea6 7b03 	vfma.f64	d7, d6, d3
 800c948:	eea2 7b04 	vfma.f64	d7, d2, d4
 800c94c:	eea5 7b01 	vfma.f64	d7, d5, d1
 800c950:	ee20 0b07 	vmul.f64	d0, d0, d7
 800c954:	ee10 1a90 	vmov	r1, s1
 800c958:	2300      	movs	r3, #0
 800c95a:	2700      	movs	r7, #0
 800c95c:	f3c1 32cf 	ubfx	r2, r1, #15, #16
 800c960:	f248 06be 	movw	r6, #32958	; 0x80be
 800c964:	429f      	cmp	r7, r3
 800c966:	bf08      	it	eq
 800c968:	4296      	cmpeq	r6, r2
 800c96a:	f080 80b1 	bcs.w	800cad0 <powf+0x218>
 800c96e:	ed9f 7b78 	vldr	d7, [pc, #480]	; 800cb50 <powf+0x298>
 800c972:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800c976:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c97a:	dd79      	ble.n	800ca70 <powf+0x1b8>
 800c97c:	b005      	add	sp, #20
 800c97e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800c982:	f000 b91f 	b.w	800cbc4 <__math_oflowf>
 800c986:	4298      	cmp	r0, r3
 800c988:	d32d      	bcc.n	800c9e6 <powf+0x12e>
 800c98a:	b952      	cbnz	r2, 800c9a2 <powf+0xea>
 800c98c:	f481 0380 	eor.w	r3, r1, #4194304	; 0x400000
 800c990:	005b      	lsls	r3, r3, #1
 800c992:	f513 0f00 	cmn.w	r3, #8388608	; 0x800000
 800c996:	f240 80cd 	bls.w	800cb34 <powf+0x27c>
 800c99a:	ee30 0a20 	vadd.f32	s0, s0, s1
 800c99e:	b005      	add	sp, #20
 800c9a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c9a2:	f1b1 5f7e 	cmp.w	r1, #1065353216	; 0x3f800000
 800c9a6:	d105      	bne.n	800c9b4 <powf+0xfc>
 800c9a8:	f486 0680 	eor.w	r6, r6, #4194304	; 0x400000
 800c9ac:	0076      	lsls	r6, r6, #1
 800c9ae:	f516 0f00 	cmn.w	r6, #8388608	; 0x800000
 800c9b2:	e7f0      	b.n	800c996 <powf+0xde>
 800c9b4:	004b      	lsls	r3, r1, #1
 800c9b6:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
 800c9ba:	d8ee      	bhi.n	800c99a <powf+0xe2>
 800c9bc:	f1b2 4f7f 	cmp.w	r2, #4278190080	; 0xff000000
 800c9c0:	d1eb      	bne.n	800c99a <powf+0xe2>
 800c9c2:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 800c9c6:	f000 80b5 	beq.w	800cb34 <powf+0x27c>
 800c9ca:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 800c9ce:	ea6f 0606 	mvn.w	r6, r6
 800c9d2:	bf34      	ite	cc
 800c9d4:	2300      	movcc	r3, #0
 800c9d6:	2301      	movcs	r3, #1
 800c9d8:	0ff6      	lsrs	r6, r6, #31
 800c9da:	42b3      	cmp	r3, r6
 800c9dc:	f040 80ad 	bne.w	800cb3a <powf+0x282>
 800c9e0:	ee20 0aa0 	vmul.f32	s0, s1, s1
 800c9e4:	e7db      	b.n	800c99e <powf+0xe6>
 800c9e6:	004f      	lsls	r7, r1, #1
 800c9e8:	1e7a      	subs	r2, r7, #1
 800c9ea:	429a      	cmp	r2, r3
 800c9ec:	d31c      	bcc.n	800ca28 <powf+0x170>
 800c9ee:	2900      	cmp	r1, #0
 800c9f0:	ee20 0a00 	vmul.f32	s0, s0, s0
 800c9f4:	da0f      	bge.n	800ca16 <powf+0x15e>
 800c9f6:	ee10 0a90 	vmov	r0, s1
 800c9fa:	f7ff ff43 	bl	800c884 <checkint>
 800c9fe:	2801      	cmp	r0, #1
 800ca00:	d109      	bne.n	800ca16 <powf+0x15e>
 800ca02:	eeb1 0a40 	vneg.f32	s0, s0
 800ca06:	b947      	cbnz	r7, 800ca1a <powf+0x162>
 800ca08:	2e00      	cmp	r6, #0
 800ca0a:	dac8      	bge.n	800c99e <powf+0xe6>
 800ca0c:	b005      	add	sp, #20
 800ca0e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800ca12:	f000 b8dd 	b.w	800cbd0 <__math_divzerof>
 800ca16:	2000      	movs	r0, #0
 800ca18:	e7f5      	b.n	800ca06 <powf+0x14e>
 800ca1a:	2e00      	cmp	r6, #0
 800ca1c:	dabf      	bge.n	800c99e <powf+0xe6>
 800ca1e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800ca22:	ee87 0a80 	vdiv.f32	s0, s15, s0
 800ca26:	e7ba      	b.n	800c99e <powf+0xe6>
 800ca28:	2900      	cmp	r1, #0
 800ca2a:	da1f      	bge.n	800ca6c <powf+0x1b4>
 800ca2c:	ee10 0a90 	vmov	r0, s1
 800ca30:	f7ff ff28 	bl	800c884 <checkint>
 800ca34:	b920      	cbnz	r0, 800ca40 <powf+0x188>
 800ca36:	b005      	add	sp, #20
 800ca38:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800ca3c:	f000 b8d8 	b.w	800cbf0 <__math_invalidf>
 800ca40:	2801      	cmp	r0, #1
 800ca42:	bf14      	ite	ne
 800ca44:	2000      	movne	r0, #0
 800ca46:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 800ca4a:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800ca4e:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 800ca52:	f4bf af44 	bcs.w	800c8de <powf+0x26>
 800ca56:	eddf 7a47 	vldr	s15, [pc, #284]	; 800cb74 <powf+0x2bc>
 800ca5a:	ee20 0a27 	vmul.f32	s0, s0, s15
 800ca5e:	ee10 3a10 	vmov	r3, s0
 800ca62:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ca66:	f1a3 6138 	sub.w	r1, r3, #192937984	; 0xb800000
 800ca6a:	e738      	b.n	800c8de <powf+0x26>
 800ca6c:	2000      	movs	r0, #0
 800ca6e:	e7ee      	b.n	800ca4e <powf+0x196>
 800ca70:	ed9f 7b39 	vldr	d7, [pc, #228]	; 800cb58 <powf+0x2a0>
 800ca74:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800ca78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca7c:	dd10      	ble.n	800caa0 <powf+0x1e8>
 800ca7e:	f04f 534c 	mov.w	r3, #855638016	; 0x33000000
 800ca82:	2800      	cmp	r0, #0
 800ca84:	d15c      	bne.n	800cb40 <powf+0x288>
 800ca86:	9302      	str	r3, [sp, #8]
 800ca88:	eddd 7a02 	vldr	s15, [sp, #8]
 800ca8c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ca90:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ca94:	eef4 7a47 	vcmp.f32	s15, s14
 800ca98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca9c:	f47f af6e 	bne.w	800c97c <powf+0xc4>
 800caa0:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 800cb60 <powf+0x2a8>
 800caa4:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800caa8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800caac:	d804      	bhi.n	800cab8 <powf+0x200>
 800caae:	b005      	add	sp, #20
 800cab0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800cab4:	f000 b87a 	b.w	800cbac <__math_uflowf>
 800cab8:	ed9f 7b2b 	vldr	d7, [pc, #172]	; 800cb68 <powf+0x2b0>
 800cabc:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800cac0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cac4:	d504      	bpl.n	800cad0 <powf+0x218>
 800cac6:	b005      	add	sp, #20
 800cac8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800cacc:	f000 b874 	b.w	800cbb8 <__math_may_uflowf>
 800cad0:	4b29      	ldr	r3, [pc, #164]	; (800cb78 <powf+0x2c0>)
 800cad2:	ed93 7b40 	vldr	d7, [r3, #256]	; 0x100
 800cad6:	ee30 6b07 	vadd.f64	d6, d0, d7
 800cada:	ed8d 6b00 	vstr	d6, [sp]
 800cade:	ee36 7b47 	vsub.f64	d7, d6, d7
 800cae2:	ee30 7b47 	vsub.f64	d7, d0, d7
 800cae6:	e9dd 6700 	ldrd	r6, r7, [sp]
 800caea:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800caee:	f006 011f 	and.w	r1, r6, #31
 800caf2:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800caf6:	e9d1 ce00 	ldrd	ip, lr, [r1]
 800cafa:	ed93 5b42 	vldr	d5, [r3, #264]	; 0x108
 800cafe:	ed93 6b44 	vldr	d6, [r3, #272]	; 0x110
 800cb02:	ed93 4b46 	vldr	d4, [r3, #280]	; 0x118
 800cb06:	eea7 6b05 	vfma.f64	d6, d7, d5
 800cb0a:	ee27 5b07 	vmul.f64	d5, d7, d7
 800cb0e:	1836      	adds	r6, r6, r0
 800cb10:	2300      	movs	r3, #0
 800cb12:	eb13 040c 	adds.w	r4, r3, ip
 800cb16:	ea4f 31c6 	mov.w	r1, r6, lsl #15
 800cb1a:	eb41 050e 	adc.w	r5, r1, lr
 800cb1e:	eea7 0b04 	vfma.f64	d0, d7, d4
 800cb22:	ec45 4b17 	vmov	d7, r4, r5
 800cb26:	eea6 0b05 	vfma.f64	d0, d6, d5
 800cb2a:	ee20 0b07 	vmul.f64	d0, d0, d7
 800cb2e:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800cb32:	e734      	b.n	800c99e <powf+0xe6>
 800cb34:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800cb38:	e731      	b.n	800c99e <powf+0xe6>
 800cb3a:	ed9f 0a10 	vldr	s0, [pc, #64]	; 800cb7c <powf+0x2c4>
 800cb3e:	e72e      	b.n	800c99e <powf+0xe6>
 800cb40:	9303      	str	r3, [sp, #12]
 800cb42:	eddd 7a03 	vldr	s15, [sp, #12]
 800cb46:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800cb4a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cb4e:	e7a1      	b.n	800ca94 <powf+0x1dc>
 800cb50:	ffd1d571 	.word	0xffd1d571
 800cb54:	405fffff 	.word	0x405fffff
 800cb58:	ffa3aae2 	.word	0xffa3aae2
 800cb5c:	405fffff 	.word	0x405fffff
 800cb60:	00000000 	.word	0x00000000
 800cb64:	c062c000 	.word	0xc062c000
 800cb68:	00000000 	.word	0x00000000
 800cb6c:	c062a000 	.word	0xc062a000
 800cb70:	0800cfd0 	.word	0x0800cfd0
 800cb74:	4b000000 	.word	0x4b000000
 800cb78:	0800ce88 	.word	0x0800ce88
 800cb7c:	00000000 	.word	0x00000000

0800cb80 <with_errnof>:
 800cb80:	b513      	push	{r0, r1, r4, lr}
 800cb82:	4604      	mov	r4, r0
 800cb84:	ed8d 0a01 	vstr	s0, [sp, #4]
 800cb88:	f7ff fe4a 	bl	800c820 <__errno>
 800cb8c:	ed9d 0a01 	vldr	s0, [sp, #4]
 800cb90:	6004      	str	r4, [r0, #0]
 800cb92:	b002      	add	sp, #8
 800cb94:	bd10      	pop	{r4, pc}

0800cb96 <xflowf>:
 800cb96:	b130      	cbz	r0, 800cba6 <xflowf+0x10>
 800cb98:	eef1 7a40 	vneg.f32	s15, s0
 800cb9c:	ee27 0a80 	vmul.f32	s0, s15, s0
 800cba0:	2022      	movs	r0, #34	; 0x22
 800cba2:	f7ff bfed 	b.w	800cb80 <with_errnof>
 800cba6:	eef0 7a40 	vmov.f32	s15, s0
 800cbaa:	e7f7      	b.n	800cb9c <xflowf+0x6>

0800cbac <__math_uflowf>:
 800cbac:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800cbb4 <__math_uflowf+0x8>
 800cbb0:	f7ff bff1 	b.w	800cb96 <xflowf>
 800cbb4:	10000000 	.word	0x10000000

0800cbb8 <__math_may_uflowf>:
 800cbb8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800cbc0 <__math_may_uflowf+0x8>
 800cbbc:	f7ff bfeb 	b.w	800cb96 <xflowf>
 800cbc0:	1a200000 	.word	0x1a200000

0800cbc4 <__math_oflowf>:
 800cbc4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800cbcc <__math_oflowf+0x8>
 800cbc8:	f7ff bfe5 	b.w	800cb96 <xflowf>
 800cbcc:	70000000 	.word	0x70000000

0800cbd0 <__math_divzerof>:
 800cbd0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800cbd4:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 800cbd8:	2800      	cmp	r0, #0
 800cbda:	fe40 7a27 	vseleq.f32	s15, s0, s15
 800cbde:	ed9f 0a03 	vldr	s0, [pc, #12]	; 800cbec <__math_divzerof+0x1c>
 800cbe2:	2022      	movs	r0, #34	; 0x22
 800cbe4:	ee87 0a80 	vdiv.f32	s0, s15, s0
 800cbe8:	f7ff bfca 	b.w	800cb80 <with_errnof>
 800cbec:	00000000 	.word	0x00000000

0800cbf0 <__math_invalidf>:
 800cbf0:	eef0 7a40 	vmov.f32	s15, s0
 800cbf4:	ee30 7a40 	vsub.f32	s14, s0, s0
 800cbf8:	eef4 7a67 	vcmp.f32	s15, s15
 800cbfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc00:	ee87 0a07 	vdiv.f32	s0, s14, s14
 800cc04:	d602      	bvs.n	800cc0c <__math_invalidf+0x1c>
 800cc06:	2021      	movs	r0, #33	; 0x21
 800cc08:	f7ff bfba 	b.w	800cb80 <with_errnof>
 800cc0c:	4770      	bx	lr
	...

0800cc10 <_init>:
 800cc10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc12:	bf00      	nop
 800cc14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cc16:	bc08      	pop	{r3}
 800cc18:	469e      	mov	lr, r3
 800cc1a:	4770      	bx	lr

0800cc1c <_fini>:
 800cc1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc1e:	bf00      	nop
 800cc20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cc22:	bc08      	pop	{r3}
 800cc24:	469e      	mov	lr, r3
 800cc26:	4770      	bx	lr
