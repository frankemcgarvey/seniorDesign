
microphone_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bcd8  08000298  08000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000428  0800bf70  0800bf70  0001bf70  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c398  0800c398  00020478  2**0
                  CONTENTS
  4 .ARM          00000008  0800c398  0800c398  0001c398  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c3a0  0800c3a0  00020478  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c3a0  0800c3a0  0001c3a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c3a4  0800c3a4  0001c3a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000478  24000000  0800c3a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000030c  24000478  0800c820  00020478  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  24000784  0800c820  00020784  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020478  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001dc1e  00000000  00000000  000204a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003485  00000000  00000000  0003e0c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e28  00000000  00000000  00041550  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d48  00000000  00000000  00042378  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00039e19  00000000  00000000  000430c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013d8f  00000000  00000000  0007ced9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0017c54d  00000000  00000000  00090c68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000d1  00000000  00000000  0020d1b5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c24  00000000  00000000  0020d288  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000478 	.word	0x24000478
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800bf58 	.word	0x0800bf58

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	2400047c 	.word	0x2400047c
 80002d4:	0800bf58 	.word	0x0800bf58

080002d8 <__aeabi_drsub>:
 80002d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002dc:	e002      	b.n	80002e4 <__adddf3>
 80002de:	bf00      	nop

080002e0 <__aeabi_dsub>:
 80002e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002e4 <__adddf3>:
 80002e4:	b530      	push	{r4, r5, lr}
 80002e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002ee:	ea94 0f05 	teq	r4, r5
 80002f2:	bf08      	it	eq
 80002f4:	ea90 0f02 	teqeq	r0, r2
 80002f8:	bf1f      	itttt	ne
 80002fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000302:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000306:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800030a:	f000 80e2 	beq.w	80004d2 <__adddf3+0x1ee>
 800030e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000312:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000316:	bfb8      	it	lt
 8000318:	426d      	neglt	r5, r5
 800031a:	dd0c      	ble.n	8000336 <__adddf3+0x52>
 800031c:	442c      	add	r4, r5
 800031e:	ea80 0202 	eor.w	r2, r0, r2
 8000322:	ea81 0303 	eor.w	r3, r1, r3
 8000326:	ea82 0000 	eor.w	r0, r2, r0
 800032a:	ea83 0101 	eor.w	r1, r3, r1
 800032e:	ea80 0202 	eor.w	r2, r0, r2
 8000332:	ea81 0303 	eor.w	r3, r1, r3
 8000336:	2d36      	cmp	r5, #54	; 0x36
 8000338:	bf88      	it	hi
 800033a:	bd30      	pophi	{r4, r5, pc}
 800033c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000340:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000344:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000348:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800034c:	d002      	beq.n	8000354 <__adddf3+0x70>
 800034e:	4240      	negs	r0, r0
 8000350:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000354:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000358:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800035c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000360:	d002      	beq.n	8000368 <__adddf3+0x84>
 8000362:	4252      	negs	r2, r2
 8000364:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000368:	ea94 0f05 	teq	r4, r5
 800036c:	f000 80a7 	beq.w	80004be <__adddf3+0x1da>
 8000370:	f1a4 0401 	sub.w	r4, r4, #1
 8000374:	f1d5 0e20 	rsbs	lr, r5, #32
 8000378:	db0d      	blt.n	8000396 <__adddf3+0xb2>
 800037a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800037e:	fa22 f205 	lsr.w	r2, r2, r5
 8000382:	1880      	adds	r0, r0, r2
 8000384:	f141 0100 	adc.w	r1, r1, #0
 8000388:	fa03 f20e 	lsl.w	r2, r3, lr
 800038c:	1880      	adds	r0, r0, r2
 800038e:	fa43 f305 	asr.w	r3, r3, r5
 8000392:	4159      	adcs	r1, r3
 8000394:	e00e      	b.n	80003b4 <__adddf3+0xd0>
 8000396:	f1a5 0520 	sub.w	r5, r5, #32
 800039a:	f10e 0e20 	add.w	lr, lr, #32
 800039e:	2a01      	cmp	r2, #1
 80003a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003a4:	bf28      	it	cs
 80003a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003aa:	fa43 f305 	asr.w	r3, r3, r5
 80003ae:	18c0      	adds	r0, r0, r3
 80003b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b8:	d507      	bpl.n	80003ca <__adddf3+0xe6>
 80003ba:	f04f 0e00 	mov.w	lr, #0
 80003be:	f1dc 0c00 	rsbs	ip, ip, #0
 80003c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80003ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003ce:	d31b      	bcc.n	8000408 <__adddf3+0x124>
 80003d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003d4:	d30c      	bcc.n	80003f0 <__adddf3+0x10c>
 80003d6:	0849      	lsrs	r1, r1, #1
 80003d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e0:	f104 0401 	add.w	r4, r4, #1
 80003e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003ec:	f080 809a 	bcs.w	8000524 <__adddf3+0x240>
 80003f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003f4:	bf08      	it	eq
 80003f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003fa:	f150 0000 	adcs.w	r0, r0, #0
 80003fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000402:	ea41 0105 	orr.w	r1, r1, r5
 8000406:	bd30      	pop	{r4, r5, pc}
 8000408:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800040c:	4140      	adcs	r0, r0
 800040e:	eb41 0101 	adc.w	r1, r1, r1
 8000412:	3c01      	subs	r4, #1
 8000414:	bf28      	it	cs
 8000416:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800041a:	d2e9      	bcs.n	80003f0 <__adddf3+0x10c>
 800041c:	f091 0f00 	teq	r1, #0
 8000420:	bf04      	itt	eq
 8000422:	4601      	moveq	r1, r0
 8000424:	2000      	moveq	r0, #0
 8000426:	fab1 f381 	clz	r3, r1
 800042a:	bf08      	it	eq
 800042c:	3320      	addeq	r3, #32
 800042e:	f1a3 030b 	sub.w	r3, r3, #11
 8000432:	f1b3 0220 	subs.w	r2, r3, #32
 8000436:	da0c      	bge.n	8000452 <__adddf3+0x16e>
 8000438:	320c      	adds	r2, #12
 800043a:	dd08      	ble.n	800044e <__adddf3+0x16a>
 800043c:	f102 0c14 	add.w	ip, r2, #20
 8000440:	f1c2 020c 	rsb	r2, r2, #12
 8000444:	fa01 f00c 	lsl.w	r0, r1, ip
 8000448:	fa21 f102 	lsr.w	r1, r1, r2
 800044c:	e00c      	b.n	8000468 <__adddf3+0x184>
 800044e:	f102 0214 	add.w	r2, r2, #20
 8000452:	bfd8      	it	le
 8000454:	f1c2 0c20 	rsble	ip, r2, #32
 8000458:	fa01 f102 	lsl.w	r1, r1, r2
 800045c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000460:	bfdc      	itt	le
 8000462:	ea41 010c 	orrle.w	r1, r1, ip
 8000466:	4090      	lslle	r0, r2
 8000468:	1ae4      	subs	r4, r4, r3
 800046a:	bfa2      	ittt	ge
 800046c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000470:	4329      	orrge	r1, r5
 8000472:	bd30      	popge	{r4, r5, pc}
 8000474:	ea6f 0404 	mvn.w	r4, r4
 8000478:	3c1f      	subs	r4, #31
 800047a:	da1c      	bge.n	80004b6 <__adddf3+0x1d2>
 800047c:	340c      	adds	r4, #12
 800047e:	dc0e      	bgt.n	800049e <__adddf3+0x1ba>
 8000480:	f104 0414 	add.w	r4, r4, #20
 8000484:	f1c4 0220 	rsb	r2, r4, #32
 8000488:	fa20 f004 	lsr.w	r0, r0, r4
 800048c:	fa01 f302 	lsl.w	r3, r1, r2
 8000490:	ea40 0003 	orr.w	r0, r0, r3
 8000494:	fa21 f304 	lsr.w	r3, r1, r4
 8000498:	ea45 0103 	orr.w	r1, r5, r3
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	f1c4 040c 	rsb	r4, r4, #12
 80004a2:	f1c4 0220 	rsb	r2, r4, #32
 80004a6:	fa20 f002 	lsr.w	r0, r0, r2
 80004aa:	fa01 f304 	lsl.w	r3, r1, r4
 80004ae:	ea40 0003 	orr.w	r0, r0, r3
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	fa21 f004 	lsr.w	r0, r1, r4
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	f094 0f00 	teq	r4, #0
 80004c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004c6:	bf06      	itte	eq
 80004c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004cc:	3401      	addeq	r4, #1
 80004ce:	3d01      	subne	r5, #1
 80004d0:	e74e      	b.n	8000370 <__adddf3+0x8c>
 80004d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004d6:	bf18      	it	ne
 80004d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004dc:	d029      	beq.n	8000532 <__adddf3+0x24e>
 80004de:	ea94 0f05 	teq	r4, r5
 80004e2:	bf08      	it	eq
 80004e4:	ea90 0f02 	teqeq	r0, r2
 80004e8:	d005      	beq.n	80004f6 <__adddf3+0x212>
 80004ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80004ee:	bf04      	itt	eq
 80004f0:	4619      	moveq	r1, r3
 80004f2:	4610      	moveq	r0, r2
 80004f4:	bd30      	pop	{r4, r5, pc}
 80004f6:	ea91 0f03 	teq	r1, r3
 80004fa:	bf1e      	ittt	ne
 80004fc:	2100      	movne	r1, #0
 80004fe:	2000      	movne	r0, #0
 8000500:	bd30      	popne	{r4, r5, pc}
 8000502:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000506:	d105      	bne.n	8000514 <__adddf3+0x230>
 8000508:	0040      	lsls	r0, r0, #1
 800050a:	4149      	adcs	r1, r1
 800050c:	bf28      	it	cs
 800050e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000512:	bd30      	pop	{r4, r5, pc}
 8000514:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000518:	bf3c      	itt	cc
 800051a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800051e:	bd30      	popcc	{r4, r5, pc}
 8000520:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000524:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000528:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800052c:	f04f 0000 	mov.w	r0, #0
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000536:	bf1a      	itte	ne
 8000538:	4619      	movne	r1, r3
 800053a:	4610      	movne	r0, r2
 800053c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000540:	bf1c      	itt	ne
 8000542:	460b      	movne	r3, r1
 8000544:	4602      	movne	r2, r0
 8000546:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800054a:	bf06      	itte	eq
 800054c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000550:	ea91 0f03 	teqeq	r1, r3
 8000554:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000558:	bd30      	pop	{r4, r5, pc}
 800055a:	bf00      	nop

0800055c <__aeabi_ui2d>:
 800055c:	f090 0f00 	teq	r0, #0
 8000560:	bf04      	itt	eq
 8000562:	2100      	moveq	r1, #0
 8000564:	4770      	bxeq	lr
 8000566:	b530      	push	{r4, r5, lr}
 8000568:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000570:	f04f 0500 	mov.w	r5, #0
 8000574:	f04f 0100 	mov.w	r1, #0
 8000578:	e750      	b.n	800041c <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_i2d>:
 800057c:	f090 0f00 	teq	r0, #0
 8000580:	bf04      	itt	eq
 8000582:	2100      	moveq	r1, #0
 8000584:	4770      	bxeq	lr
 8000586:	b530      	push	{r4, r5, lr}
 8000588:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800058c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000590:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000594:	bf48      	it	mi
 8000596:	4240      	negmi	r0, r0
 8000598:	f04f 0100 	mov.w	r1, #0
 800059c:	e73e      	b.n	800041c <__adddf3+0x138>
 800059e:	bf00      	nop

080005a0 <__aeabi_f2d>:
 80005a0:	0042      	lsls	r2, r0, #1
 80005a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80005aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005ae:	bf1f      	itttt	ne
 80005b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005bc:	4770      	bxne	lr
 80005be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005c2:	bf08      	it	eq
 80005c4:	4770      	bxeq	lr
 80005c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005ca:	bf04      	itt	eq
 80005cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005d0:	4770      	bxeq	lr
 80005d2:	b530      	push	{r4, r5, lr}
 80005d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e0:	e71c      	b.n	800041c <__adddf3+0x138>
 80005e2:	bf00      	nop

080005e4 <__aeabi_ul2d>:
 80005e4:	ea50 0201 	orrs.w	r2, r0, r1
 80005e8:	bf08      	it	eq
 80005ea:	4770      	bxeq	lr
 80005ec:	b530      	push	{r4, r5, lr}
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	e00a      	b.n	800060a <__aeabi_l2d+0x16>

080005f4 <__aeabi_l2d>:
 80005f4:	ea50 0201 	orrs.w	r2, r0, r1
 80005f8:	bf08      	it	eq
 80005fa:	4770      	bxeq	lr
 80005fc:	b530      	push	{r4, r5, lr}
 80005fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000602:	d502      	bpl.n	800060a <__aeabi_l2d+0x16>
 8000604:	4240      	negs	r0, r0
 8000606:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800060a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800060e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000612:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000616:	f43f aed8 	beq.w	80003ca <__adddf3+0xe6>
 800061a:	f04f 0203 	mov.w	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000632:	f1c2 0320 	rsb	r3, r2, #32
 8000636:	fa00 fc03 	lsl.w	ip, r0, r3
 800063a:	fa20 f002 	lsr.w	r0, r0, r2
 800063e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000642:	ea40 000e 	orr.w	r0, r0, lr
 8000646:	fa21 f102 	lsr.w	r1, r1, r2
 800064a:	4414      	add	r4, r2
 800064c:	e6bd      	b.n	80003ca <__adddf3+0xe6>
 800064e:	bf00      	nop

08000650 <__aeabi_uldivmod>:
 8000650:	b953      	cbnz	r3, 8000668 <__aeabi_uldivmod+0x18>
 8000652:	b94a      	cbnz	r2, 8000668 <__aeabi_uldivmod+0x18>
 8000654:	2900      	cmp	r1, #0
 8000656:	bf08      	it	eq
 8000658:	2800      	cmpeq	r0, #0
 800065a:	bf1c      	itt	ne
 800065c:	f04f 31ff 	movne.w	r1, #4294967295
 8000660:	f04f 30ff 	movne.w	r0, #4294967295
 8000664:	f000 b96e 	b.w	8000944 <__aeabi_idiv0>
 8000668:	f1ad 0c08 	sub.w	ip, sp, #8
 800066c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000670:	f000 f806 	bl	8000680 <__udivmoddi4>
 8000674:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000678:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800067c:	b004      	add	sp, #16
 800067e:	4770      	bx	lr

08000680 <__udivmoddi4>:
 8000680:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000684:	9d08      	ldr	r5, [sp, #32]
 8000686:	4604      	mov	r4, r0
 8000688:	468c      	mov	ip, r1
 800068a:	2b00      	cmp	r3, #0
 800068c:	f040 8083 	bne.w	8000796 <__udivmoddi4+0x116>
 8000690:	428a      	cmp	r2, r1
 8000692:	4617      	mov	r7, r2
 8000694:	d947      	bls.n	8000726 <__udivmoddi4+0xa6>
 8000696:	fab2 f282 	clz	r2, r2
 800069a:	b142      	cbz	r2, 80006ae <__udivmoddi4+0x2e>
 800069c:	f1c2 0020 	rsb	r0, r2, #32
 80006a0:	fa24 f000 	lsr.w	r0, r4, r0
 80006a4:	4091      	lsls	r1, r2
 80006a6:	4097      	lsls	r7, r2
 80006a8:	ea40 0c01 	orr.w	ip, r0, r1
 80006ac:	4094      	lsls	r4, r2
 80006ae:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80006b2:	0c23      	lsrs	r3, r4, #16
 80006b4:	fbbc f6f8 	udiv	r6, ip, r8
 80006b8:	fa1f fe87 	uxth.w	lr, r7
 80006bc:	fb08 c116 	mls	r1, r8, r6, ip
 80006c0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80006c4:	fb06 f10e 	mul.w	r1, r6, lr
 80006c8:	4299      	cmp	r1, r3
 80006ca:	d909      	bls.n	80006e0 <__udivmoddi4+0x60>
 80006cc:	18fb      	adds	r3, r7, r3
 80006ce:	f106 30ff 	add.w	r0, r6, #4294967295
 80006d2:	f080 8119 	bcs.w	8000908 <__udivmoddi4+0x288>
 80006d6:	4299      	cmp	r1, r3
 80006d8:	f240 8116 	bls.w	8000908 <__udivmoddi4+0x288>
 80006dc:	3e02      	subs	r6, #2
 80006de:	443b      	add	r3, r7
 80006e0:	1a5b      	subs	r3, r3, r1
 80006e2:	b2a4      	uxth	r4, r4
 80006e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80006e8:	fb08 3310 	mls	r3, r8, r0, r3
 80006ec:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80006f0:	fb00 fe0e 	mul.w	lr, r0, lr
 80006f4:	45a6      	cmp	lr, r4
 80006f6:	d909      	bls.n	800070c <__udivmoddi4+0x8c>
 80006f8:	193c      	adds	r4, r7, r4
 80006fa:	f100 33ff 	add.w	r3, r0, #4294967295
 80006fe:	f080 8105 	bcs.w	800090c <__udivmoddi4+0x28c>
 8000702:	45a6      	cmp	lr, r4
 8000704:	f240 8102 	bls.w	800090c <__udivmoddi4+0x28c>
 8000708:	3802      	subs	r0, #2
 800070a:	443c      	add	r4, r7
 800070c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000710:	eba4 040e 	sub.w	r4, r4, lr
 8000714:	2600      	movs	r6, #0
 8000716:	b11d      	cbz	r5, 8000720 <__udivmoddi4+0xa0>
 8000718:	40d4      	lsrs	r4, r2
 800071a:	2300      	movs	r3, #0
 800071c:	e9c5 4300 	strd	r4, r3, [r5]
 8000720:	4631      	mov	r1, r6
 8000722:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000726:	b902      	cbnz	r2, 800072a <__udivmoddi4+0xaa>
 8000728:	deff      	udf	#255	; 0xff
 800072a:	fab2 f282 	clz	r2, r2
 800072e:	2a00      	cmp	r2, #0
 8000730:	d150      	bne.n	80007d4 <__udivmoddi4+0x154>
 8000732:	1bcb      	subs	r3, r1, r7
 8000734:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000738:	fa1f f887 	uxth.w	r8, r7
 800073c:	2601      	movs	r6, #1
 800073e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000742:	0c21      	lsrs	r1, r4, #16
 8000744:	fb0e 331c 	mls	r3, lr, ip, r3
 8000748:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800074c:	fb08 f30c 	mul.w	r3, r8, ip
 8000750:	428b      	cmp	r3, r1
 8000752:	d907      	bls.n	8000764 <__udivmoddi4+0xe4>
 8000754:	1879      	adds	r1, r7, r1
 8000756:	f10c 30ff 	add.w	r0, ip, #4294967295
 800075a:	d202      	bcs.n	8000762 <__udivmoddi4+0xe2>
 800075c:	428b      	cmp	r3, r1
 800075e:	f200 80e9 	bhi.w	8000934 <__udivmoddi4+0x2b4>
 8000762:	4684      	mov	ip, r0
 8000764:	1ac9      	subs	r1, r1, r3
 8000766:	b2a3      	uxth	r3, r4
 8000768:	fbb1 f0fe 	udiv	r0, r1, lr
 800076c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000770:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000774:	fb08 f800 	mul.w	r8, r8, r0
 8000778:	45a0      	cmp	r8, r4
 800077a:	d907      	bls.n	800078c <__udivmoddi4+0x10c>
 800077c:	193c      	adds	r4, r7, r4
 800077e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000782:	d202      	bcs.n	800078a <__udivmoddi4+0x10a>
 8000784:	45a0      	cmp	r8, r4
 8000786:	f200 80d9 	bhi.w	800093c <__udivmoddi4+0x2bc>
 800078a:	4618      	mov	r0, r3
 800078c:	eba4 0408 	sub.w	r4, r4, r8
 8000790:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000794:	e7bf      	b.n	8000716 <__udivmoddi4+0x96>
 8000796:	428b      	cmp	r3, r1
 8000798:	d909      	bls.n	80007ae <__udivmoddi4+0x12e>
 800079a:	2d00      	cmp	r5, #0
 800079c:	f000 80b1 	beq.w	8000902 <__udivmoddi4+0x282>
 80007a0:	2600      	movs	r6, #0
 80007a2:	e9c5 0100 	strd	r0, r1, [r5]
 80007a6:	4630      	mov	r0, r6
 80007a8:	4631      	mov	r1, r6
 80007aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007ae:	fab3 f683 	clz	r6, r3
 80007b2:	2e00      	cmp	r6, #0
 80007b4:	d14a      	bne.n	800084c <__udivmoddi4+0x1cc>
 80007b6:	428b      	cmp	r3, r1
 80007b8:	d302      	bcc.n	80007c0 <__udivmoddi4+0x140>
 80007ba:	4282      	cmp	r2, r0
 80007bc:	f200 80b8 	bhi.w	8000930 <__udivmoddi4+0x2b0>
 80007c0:	1a84      	subs	r4, r0, r2
 80007c2:	eb61 0103 	sbc.w	r1, r1, r3
 80007c6:	2001      	movs	r0, #1
 80007c8:	468c      	mov	ip, r1
 80007ca:	2d00      	cmp	r5, #0
 80007cc:	d0a8      	beq.n	8000720 <__udivmoddi4+0xa0>
 80007ce:	e9c5 4c00 	strd	r4, ip, [r5]
 80007d2:	e7a5      	b.n	8000720 <__udivmoddi4+0xa0>
 80007d4:	f1c2 0320 	rsb	r3, r2, #32
 80007d8:	fa20 f603 	lsr.w	r6, r0, r3
 80007dc:	4097      	lsls	r7, r2
 80007de:	fa01 f002 	lsl.w	r0, r1, r2
 80007e2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80007e6:	40d9      	lsrs	r1, r3
 80007e8:	4330      	orrs	r0, r6
 80007ea:	0c03      	lsrs	r3, r0, #16
 80007ec:	fbb1 f6fe 	udiv	r6, r1, lr
 80007f0:	fa1f f887 	uxth.w	r8, r7
 80007f4:	fb0e 1116 	mls	r1, lr, r6, r1
 80007f8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80007fc:	fb06 f108 	mul.w	r1, r6, r8
 8000800:	4299      	cmp	r1, r3
 8000802:	fa04 f402 	lsl.w	r4, r4, r2
 8000806:	d909      	bls.n	800081c <__udivmoddi4+0x19c>
 8000808:	18fb      	adds	r3, r7, r3
 800080a:	f106 3cff 	add.w	ip, r6, #4294967295
 800080e:	f080 808d 	bcs.w	800092c <__udivmoddi4+0x2ac>
 8000812:	4299      	cmp	r1, r3
 8000814:	f240 808a 	bls.w	800092c <__udivmoddi4+0x2ac>
 8000818:	3e02      	subs	r6, #2
 800081a:	443b      	add	r3, r7
 800081c:	1a5b      	subs	r3, r3, r1
 800081e:	b281      	uxth	r1, r0
 8000820:	fbb3 f0fe 	udiv	r0, r3, lr
 8000824:	fb0e 3310 	mls	r3, lr, r0, r3
 8000828:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800082c:	fb00 f308 	mul.w	r3, r0, r8
 8000830:	428b      	cmp	r3, r1
 8000832:	d907      	bls.n	8000844 <__udivmoddi4+0x1c4>
 8000834:	1879      	adds	r1, r7, r1
 8000836:	f100 3cff 	add.w	ip, r0, #4294967295
 800083a:	d273      	bcs.n	8000924 <__udivmoddi4+0x2a4>
 800083c:	428b      	cmp	r3, r1
 800083e:	d971      	bls.n	8000924 <__udivmoddi4+0x2a4>
 8000840:	3802      	subs	r0, #2
 8000842:	4439      	add	r1, r7
 8000844:	1acb      	subs	r3, r1, r3
 8000846:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800084a:	e778      	b.n	800073e <__udivmoddi4+0xbe>
 800084c:	f1c6 0c20 	rsb	ip, r6, #32
 8000850:	fa03 f406 	lsl.w	r4, r3, r6
 8000854:	fa22 f30c 	lsr.w	r3, r2, ip
 8000858:	431c      	orrs	r4, r3
 800085a:	fa20 f70c 	lsr.w	r7, r0, ip
 800085e:	fa01 f306 	lsl.w	r3, r1, r6
 8000862:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000866:	fa21 f10c 	lsr.w	r1, r1, ip
 800086a:	431f      	orrs	r7, r3
 800086c:	0c3b      	lsrs	r3, r7, #16
 800086e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000872:	fa1f f884 	uxth.w	r8, r4
 8000876:	fb0e 1119 	mls	r1, lr, r9, r1
 800087a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800087e:	fb09 fa08 	mul.w	sl, r9, r8
 8000882:	458a      	cmp	sl, r1
 8000884:	fa02 f206 	lsl.w	r2, r2, r6
 8000888:	fa00 f306 	lsl.w	r3, r0, r6
 800088c:	d908      	bls.n	80008a0 <__udivmoddi4+0x220>
 800088e:	1861      	adds	r1, r4, r1
 8000890:	f109 30ff 	add.w	r0, r9, #4294967295
 8000894:	d248      	bcs.n	8000928 <__udivmoddi4+0x2a8>
 8000896:	458a      	cmp	sl, r1
 8000898:	d946      	bls.n	8000928 <__udivmoddi4+0x2a8>
 800089a:	f1a9 0902 	sub.w	r9, r9, #2
 800089e:	4421      	add	r1, r4
 80008a0:	eba1 010a 	sub.w	r1, r1, sl
 80008a4:	b2bf      	uxth	r7, r7
 80008a6:	fbb1 f0fe 	udiv	r0, r1, lr
 80008aa:	fb0e 1110 	mls	r1, lr, r0, r1
 80008ae:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80008b2:	fb00 f808 	mul.w	r8, r0, r8
 80008b6:	45b8      	cmp	r8, r7
 80008b8:	d907      	bls.n	80008ca <__udivmoddi4+0x24a>
 80008ba:	19e7      	adds	r7, r4, r7
 80008bc:	f100 31ff 	add.w	r1, r0, #4294967295
 80008c0:	d22e      	bcs.n	8000920 <__udivmoddi4+0x2a0>
 80008c2:	45b8      	cmp	r8, r7
 80008c4:	d92c      	bls.n	8000920 <__udivmoddi4+0x2a0>
 80008c6:	3802      	subs	r0, #2
 80008c8:	4427      	add	r7, r4
 80008ca:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80008ce:	eba7 0708 	sub.w	r7, r7, r8
 80008d2:	fba0 8902 	umull	r8, r9, r0, r2
 80008d6:	454f      	cmp	r7, r9
 80008d8:	46c6      	mov	lr, r8
 80008da:	4649      	mov	r1, r9
 80008dc:	d31a      	bcc.n	8000914 <__udivmoddi4+0x294>
 80008de:	d017      	beq.n	8000910 <__udivmoddi4+0x290>
 80008e0:	b15d      	cbz	r5, 80008fa <__udivmoddi4+0x27a>
 80008e2:	ebb3 020e 	subs.w	r2, r3, lr
 80008e6:	eb67 0701 	sbc.w	r7, r7, r1
 80008ea:	fa07 fc0c 	lsl.w	ip, r7, ip
 80008ee:	40f2      	lsrs	r2, r6
 80008f0:	ea4c 0202 	orr.w	r2, ip, r2
 80008f4:	40f7      	lsrs	r7, r6
 80008f6:	e9c5 2700 	strd	r2, r7, [r5]
 80008fa:	2600      	movs	r6, #0
 80008fc:	4631      	mov	r1, r6
 80008fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000902:	462e      	mov	r6, r5
 8000904:	4628      	mov	r0, r5
 8000906:	e70b      	b.n	8000720 <__udivmoddi4+0xa0>
 8000908:	4606      	mov	r6, r0
 800090a:	e6e9      	b.n	80006e0 <__udivmoddi4+0x60>
 800090c:	4618      	mov	r0, r3
 800090e:	e6fd      	b.n	800070c <__udivmoddi4+0x8c>
 8000910:	4543      	cmp	r3, r8
 8000912:	d2e5      	bcs.n	80008e0 <__udivmoddi4+0x260>
 8000914:	ebb8 0e02 	subs.w	lr, r8, r2
 8000918:	eb69 0104 	sbc.w	r1, r9, r4
 800091c:	3801      	subs	r0, #1
 800091e:	e7df      	b.n	80008e0 <__udivmoddi4+0x260>
 8000920:	4608      	mov	r0, r1
 8000922:	e7d2      	b.n	80008ca <__udivmoddi4+0x24a>
 8000924:	4660      	mov	r0, ip
 8000926:	e78d      	b.n	8000844 <__udivmoddi4+0x1c4>
 8000928:	4681      	mov	r9, r0
 800092a:	e7b9      	b.n	80008a0 <__udivmoddi4+0x220>
 800092c:	4666      	mov	r6, ip
 800092e:	e775      	b.n	800081c <__udivmoddi4+0x19c>
 8000930:	4630      	mov	r0, r6
 8000932:	e74a      	b.n	80007ca <__udivmoddi4+0x14a>
 8000934:	f1ac 0c02 	sub.w	ip, ip, #2
 8000938:	4439      	add	r1, r7
 800093a:	e713      	b.n	8000764 <__udivmoddi4+0xe4>
 800093c:	3802      	subs	r0, #2
 800093e:	443c      	add	r4, r7
 8000940:	e724      	b.n	800078c <__udivmoddi4+0x10c>
 8000942:	bf00      	nop

08000944 <__aeabi_idiv0>:
 8000944:	4770      	bx	lr
 8000946:	bf00      	nop

08000948 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800094c:	4b3f      	ldr	r3, [pc, #252]	; (8000a4c <SystemInit+0x104>)
 800094e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000952:	4a3e      	ldr	r2, [pc, #248]	; (8000a4c <SystemInit+0x104>)
 8000954:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000958:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 800095c:	4b3b      	ldr	r3, [pc, #236]	; (8000a4c <SystemInit+0x104>)
 800095e:	691b      	ldr	r3, [r3, #16]
 8000960:	4a3a      	ldr	r2, [pc, #232]	; (8000a4c <SystemInit+0x104>)
 8000962:	f043 0310 	orr.w	r3, r3, #16
 8000966:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000968:	4b39      	ldr	r3, [pc, #228]	; (8000a50 <SystemInit+0x108>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	f003 030f 	and.w	r3, r3, #15
 8000970:	2b06      	cmp	r3, #6
 8000972:	d807      	bhi.n	8000984 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000974:	4b36      	ldr	r3, [pc, #216]	; (8000a50 <SystemInit+0x108>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	f023 030f 	bic.w	r3, r3, #15
 800097c:	4a34      	ldr	r2, [pc, #208]	; (8000a50 <SystemInit+0x108>)
 800097e:	f043 0307 	orr.w	r3, r3, #7
 8000982:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000984:	4b33      	ldr	r3, [pc, #204]	; (8000a54 <SystemInit+0x10c>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	4a32      	ldr	r2, [pc, #200]	; (8000a54 <SystemInit+0x10c>)
 800098a:	f043 0301 	orr.w	r3, r3, #1
 800098e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000990:	4b30      	ldr	r3, [pc, #192]	; (8000a54 <SystemInit+0x10c>)
 8000992:	2200      	movs	r2, #0
 8000994:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000996:	4b2f      	ldr	r3, [pc, #188]	; (8000a54 <SystemInit+0x10c>)
 8000998:	681a      	ldr	r2, [r3, #0]
 800099a:	492e      	ldr	r1, [pc, #184]	; (8000a54 <SystemInit+0x10c>)
 800099c:	4b2e      	ldr	r3, [pc, #184]	; (8000a58 <SystemInit+0x110>)
 800099e:	4013      	ands	r3, r2
 80009a0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80009a2:	4b2b      	ldr	r3, [pc, #172]	; (8000a50 <SystemInit+0x108>)
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	f003 0308 	and.w	r3, r3, #8
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d007      	beq.n	80009be <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80009ae:	4b28      	ldr	r3, [pc, #160]	; (8000a50 <SystemInit+0x108>)
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	f023 030f 	bic.w	r3, r3, #15
 80009b6:	4a26      	ldr	r2, [pc, #152]	; (8000a50 <SystemInit+0x108>)
 80009b8:	f043 0307 	orr.w	r3, r3, #7
 80009bc:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80009be:	4b25      	ldr	r3, [pc, #148]	; (8000a54 <SystemInit+0x10c>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80009c4:	4b23      	ldr	r3, [pc, #140]	; (8000a54 <SystemInit+0x10c>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80009ca:	4b22      	ldr	r3, [pc, #136]	; (8000a54 <SystemInit+0x10c>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80009d0:	4b20      	ldr	r3, [pc, #128]	; (8000a54 <SystemInit+0x10c>)
 80009d2:	4a22      	ldr	r2, [pc, #136]	; (8000a5c <SystemInit+0x114>)
 80009d4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80009d6:	4b1f      	ldr	r3, [pc, #124]	; (8000a54 <SystemInit+0x10c>)
 80009d8:	4a21      	ldr	r2, [pc, #132]	; (8000a60 <SystemInit+0x118>)
 80009da:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80009dc:	4b1d      	ldr	r3, [pc, #116]	; (8000a54 <SystemInit+0x10c>)
 80009de:	4a21      	ldr	r2, [pc, #132]	; (8000a64 <SystemInit+0x11c>)
 80009e0:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80009e2:	4b1c      	ldr	r3, [pc, #112]	; (8000a54 <SystemInit+0x10c>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80009e8:	4b1a      	ldr	r3, [pc, #104]	; (8000a54 <SystemInit+0x10c>)
 80009ea:	4a1e      	ldr	r2, [pc, #120]	; (8000a64 <SystemInit+0x11c>)
 80009ec:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80009ee:	4b19      	ldr	r3, [pc, #100]	; (8000a54 <SystemInit+0x10c>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80009f4:	4b17      	ldr	r3, [pc, #92]	; (8000a54 <SystemInit+0x10c>)
 80009f6:	4a1b      	ldr	r2, [pc, #108]	; (8000a64 <SystemInit+0x11c>)
 80009f8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80009fa:	4b16      	ldr	r3, [pc, #88]	; (8000a54 <SystemInit+0x10c>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000a00:	4b14      	ldr	r3, [pc, #80]	; (8000a54 <SystemInit+0x10c>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	4a13      	ldr	r2, [pc, #76]	; (8000a54 <SystemInit+0x10c>)
 8000a06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a0a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000a0c:	4b11      	ldr	r3, [pc, #68]	; (8000a54 <SystemInit+0x10c>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000a12:	4b15      	ldr	r3, [pc, #84]	; (8000a68 <SystemInit+0x120>)
 8000a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a16:	4a14      	ldr	r2, [pc, #80]	; (8000a68 <SystemInit+0x120>)
 8000a18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a1c:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000a1e:	4b13      	ldr	r3, [pc, #76]	; (8000a6c <SystemInit+0x124>)
 8000a20:	681a      	ldr	r2, [r3, #0]
 8000a22:	4b13      	ldr	r3, [pc, #76]	; (8000a70 <SystemInit+0x128>)
 8000a24:	4013      	ands	r3, r2
 8000a26:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000a2a:	d202      	bcs.n	8000a32 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000a2c:	4b11      	ldr	r3, [pc, #68]	; (8000a74 <SystemInit+0x12c>)
 8000a2e:	2201      	movs	r2, #1
 8000a30:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000a32:	4b11      	ldr	r3, [pc, #68]	; (8000a78 <SystemInit+0x130>)
 8000a34:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000a38:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 8000a3a:	4b04      	ldr	r3, [pc, #16]	; (8000a4c <SystemInit+0x104>)
 8000a3c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000a40:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 8000a42:	bf00      	nop
 8000a44:	46bd      	mov	sp, r7
 8000a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4a:	4770      	bx	lr
 8000a4c:	e000ed00 	.word	0xe000ed00
 8000a50:	52002000 	.word	0x52002000
 8000a54:	58024400 	.word	0x58024400
 8000a58:	eaf6ed7f 	.word	0xeaf6ed7f
 8000a5c:	02020200 	.word	0x02020200
 8000a60:	01ff0000 	.word	0x01ff0000
 8000a64:	01010280 	.word	0x01010280
 8000a68:	580000c0 	.word	0x580000c0
 8000a6c:	5c001000 	.word	0x5c001000
 8000a70:	ffff0000 	.word	0xffff0000
 8000a74:	51008108 	.word	0x51008108
 8000a78:	52004000 	.word	0x52004000
 8000a7c:	00000000 	.word	0x00000000

08000a80 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b08e      	sub	sp, #56	; 0x38
 8000a84:	af00      	add	r7, sp, #0
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000a86:	4b94      	ldr	r3, [pc, #592]	; (8000cd8 <main+0x258>)
 8000a88:	695b      	ldr	r3, [r3, #20]
 8000a8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d11b      	bne.n	8000aca <main+0x4a>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000a92:	f3bf 8f4f 	dsb	sy
}
 8000a96:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000a98:	f3bf 8f6f 	isb	sy
}
 8000a9c:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000a9e:	4b8e      	ldr	r3, [pc, #568]	; (8000cd8 <main+0x258>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000aa6:	f3bf 8f4f 	dsb	sy
}
 8000aaa:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000aac:	f3bf 8f6f 	isb	sy
}
 8000ab0:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000ab2:	4b89      	ldr	r3, [pc, #548]	; (8000cd8 <main+0x258>)
 8000ab4:	695b      	ldr	r3, [r3, #20]
 8000ab6:	4a88      	ldr	r2, [pc, #544]	; (8000cd8 <main+0x258>)
 8000ab8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000abc:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000abe:	f3bf 8f4f 	dsb	sy
}
 8000ac2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000ac4:	f3bf 8f6f 	isb	sy
}
 8000ac8:	e000      	b.n	8000acc <main+0x4c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000aca:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000acc:	4b82      	ldr	r3, [pc, #520]	; (8000cd8 <main+0x258>)
 8000ace:	695b      	ldr	r3, [r3, #20]
 8000ad0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d138      	bne.n	8000b4a <main+0xca>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000ad8:	4b7f      	ldr	r3, [pc, #508]	; (8000cd8 <main+0x258>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000ae0:	f3bf 8f4f 	dsb	sy
}
 8000ae4:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000ae6:	4b7c      	ldr	r3, [pc, #496]	; (8000cd8 <main+0x258>)
 8000ae8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000aec:	61fb      	str	r3, [r7, #28]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000aee:	69fb      	ldr	r3, [r7, #28]
 8000af0:	0b5b      	lsrs	r3, r3, #13
 8000af2:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000af6:	61bb      	str	r3, [r7, #24]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000af8:	69fb      	ldr	r3, [r7, #28]
 8000afa:	08db      	lsrs	r3, r3, #3
 8000afc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000b00:	617b      	str	r3, [r7, #20]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000b02:	69bb      	ldr	r3, [r7, #24]
 8000b04:	015a      	lsls	r2, r3, #5
 8000b06:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000b0a:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000b0c:	697a      	ldr	r2, [r7, #20]
 8000b0e:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000b10:	4971      	ldr	r1, [pc, #452]	; (8000cd8 <main+0x258>)
 8000b12:	4313      	orrs	r3, r2
 8000b14:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000b18:	697b      	ldr	r3, [r7, #20]
 8000b1a:	1e5a      	subs	r2, r3, #1
 8000b1c:	617a      	str	r2, [r7, #20]
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d1ef      	bne.n	8000b02 <main+0x82>
    } while(sets-- != 0U);
 8000b22:	69bb      	ldr	r3, [r7, #24]
 8000b24:	1e5a      	subs	r2, r3, #1
 8000b26:	61ba      	str	r2, [r7, #24]
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d1e5      	bne.n	8000af8 <main+0x78>
  __ASM volatile ("dsb 0xF":::"memory");
 8000b2c:	f3bf 8f4f 	dsb	sy
}
 8000b30:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000b32:	4b69      	ldr	r3, [pc, #420]	; (8000cd8 <main+0x258>)
 8000b34:	695b      	ldr	r3, [r3, #20]
 8000b36:	4a68      	ldr	r2, [pc, #416]	; (8000cd8 <main+0x258>)
 8000b38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b3c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000b3e:	f3bf 8f4f 	dsb	sy
}
 8000b42:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000b44:	f3bf 8f6f 	isb	sy
}
 8000b48:	e000      	b.n	8000b4c <main+0xcc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000b4a:	bf00      	nop

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b4c:	f000 fcbc 	bl	80014c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b50:	f000 f8d2 	bl	8000cf8 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000b54:	4b61      	ldr	r3, [pc, #388]	; (8000cdc <main+0x25c>)
 8000b56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b5a:	4a60      	ldr	r2, [pc, #384]	; (8000cdc <main+0x25c>)
 8000b5c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000b60:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b64:	4b5d      	ldr	r3, [pc, #372]	; (8000cdc <main+0x25c>)
 8000b66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000b6e:	603b      	str	r3, [r7, #0]
 8000b70:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000b72:	2000      	movs	r0, #0
 8000b74:	f003 ff2a 	bl	80049cc <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000b78:	2100      	movs	r1, #0
 8000b7a:	2000      	movs	r0, #0
 8000b7c:	f003 ff40 	bl	8004a00 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000b80:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000b84:	637b      	str	r3, [r7, #52]	; 0x34
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000b86:	bf00      	nop
 8000b88:	4b54      	ldr	r3, [pc, #336]	; (8000cdc <main+0x25c>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d104      	bne.n	8000b9e <main+0x11e>
 8000b94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b96:	1e5a      	subs	r2, r3, #1
 8000b98:	637a      	str	r2, [r7, #52]	; 0x34
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	dcf4      	bgt.n	8000b88 <main+0x108>
if ( timeout < 0 )
 8000b9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	da01      	bge.n	8000ba8 <main+0x128>
{
Error_Handler();
 8000ba4:	f000 fa84 	bl	80010b0 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ba8:	f000 fa2e 	bl	8001008 <MX_GPIO_Init>
  MX_DMA_Init();
 8000bac:	f000 fa04 	bl	8000fb8 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8000bb0:	f000 f9b2 	bl	8000f18 <MX_USART3_UART_Init>
  MX_CRC_Init();
 8000bb4:	f000 f924 	bl	8000e00 <MX_CRC_Init>
  MX_SAI1_Init();
 8000bb8:	f000 f94c 	bl	8000e54 <MX_SAI1_Init>
  MX_PDM2PCM_Init();
 8000bbc:	f009 f810 	bl	8009be0 <MX_PDM2PCM_Init>
  /* USER CODE BEGIN 2 */

  float t = 10;
 8000bc0:	4b47      	ldr	r3, [pc, #284]	; (8000ce0 <main+0x260>)
 8000bc2:	62fb      	str	r3, [r7, #44]	; 0x2c
  float fs = 48000;
 8000bc4:	4b47      	ldr	r3, [pc, #284]	; (8000ce4 <main+0x264>)
 8000bc6:	62bb      	str	r3, [r7, #40]	; 0x28
  float f = 1000;
 8000bc8:	4b47      	ldr	r3, [pc, #284]	; (8000ce8 <main+0x268>)
 8000bca:	627b      	str	r3, [r7, #36]	; 0x24
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  //HAL_SAI_Receive_DMA(&hsai_BlockA1, (uint8_t*)&buffer->pdmBuffer[0], BUFFER_SIZE);

  for(float i = 0; i < t*fs; i++){
 8000bcc:	f04f 0300 	mov.w	r3, #0
 8000bd0:	633b      	str	r3, [r7, #48]	; 0x30
 8000bd2:	e069      	b.n	8000ca8 <main+0x228>

	  sin = (int16_t)(sinf(2.0*acosf(-1.0)*f*(i/fs))*32767.0);
 8000bd4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000bd8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000bdc:	ed9f 6b3a 	vldr	d6, [pc, #232]	; 8000cc8 <main+0x248>
 8000be0:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000be4:	edd7 5a0c 	vldr	s11, [r7, #48]	; 0x30
 8000be8:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8000bec:	eec5 7a87 	vdiv.f32	s15, s11, s14
 8000bf0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000bf4:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000bf8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000bfc:	eeb0 0a67 	vmov.f32	s0, s15
 8000c00:	f00b f8c2 	bl	800bd88 <sinf>
 8000c04:	eef0 7a40 	vmov.f32	s15, s0
 8000c08:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000c0c:	ed9f 6b30 	vldr	d6, [pc, #192]	; 8000cd0 <main+0x250>
 8000c10:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000c14:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000c18:	ee17 3a90 	vmov	r3, s15
 8000c1c:	847b      	strh	r3, [r7, #34]	; 0x22
	  while(uartFlag != READY){}
 8000c1e:	bf00      	nop
 8000c20:	4b32      	ldr	r3, [pc, #200]	; (8000cec <main+0x26c>)
 8000c22:	781b      	ldrb	r3, [r3, #0]
 8000c24:	2b01      	cmp	r3, #1
 8000c26:	d1fb      	bne.n	8000c20 <main+0x1a0>
	  buffer->pcmBuffer[0] = sin;
 8000c28:	4b31      	ldr	r3, [pc, #196]	; (8000cf0 <main+0x270>)
 8000c2a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8000c2c:	f8a3 2200 	strh.w	r2, [r3, #512]	; 0x200
	  SCB_CleanDCache_by_Addr((uint32_t*)&buffer->pcmBuffer[0], 256);
 8000c30:	4b2f      	ldr	r3, [pc, #188]	; (8000cf0 <main+0x270>)
 8000c32:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000c36:	613b      	str	r3, [r7, #16]
 8000c38:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c3c:	60fb      	str	r3, [r7, #12]
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_CleanDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 8000c3e:	68fb      	ldr	r3, [r7, #12]
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	dd1d      	ble.n	8000c80 <main+0x200>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8000c44:	693b      	ldr	r3, [r7, #16]
 8000c46:	f003 021f 	and.w	r2, r3, #31
 8000c4a:	68fb      	ldr	r3, [r7, #12]
 8000c4c:	4413      	add	r3, r2
 8000c4e:	60bb      	str	r3, [r7, #8]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8000c50:	693b      	ldr	r3, [r7, #16]
 8000c52:	607b      	str	r3, [r7, #4]
  __ASM volatile ("dsb 0xF":::"memory");
 8000c54:	f3bf 8f4f 	dsb	sy
}
 8000c58:	bf00      	nop
    
      __DSB();

      do {
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8000c5a:	4a1f      	ldr	r2, [pc, #124]	; (8000cd8 <main+0x258>)
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	3320      	adds	r3, #32
 8000c66:	607b      	str	r3, [r7, #4]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8000c68:	68bb      	ldr	r3, [r7, #8]
 8000c6a:	3b20      	subs	r3, #32
 8000c6c:	60bb      	str	r3, [r7, #8]
      } while ( op_size > 0 );
 8000c6e:	68bb      	ldr	r3, [r7, #8]
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	dcf2      	bgt.n	8000c5a <main+0x1da>
  __ASM volatile ("dsb 0xF":::"memory");
 8000c74:	f3bf 8f4f 	dsb	sy
}
 8000c78:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000c7a:	f3bf 8f6f 	isb	sy
}
 8000c7e:	bf00      	nop

      __DSB();
      __ISB();
    }
  #endif
}
 8000c80:	bf00      	nop
	  HAL_UART_Transmit_DMA(&huart3, (uint8_t*)&buffer->pcmBuffer[0], 2);
 8000c82:	4b1b      	ldr	r3, [pc, #108]	; (8000cf0 <main+0x270>)
 8000c84:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000c88:	2202      	movs	r2, #2
 8000c8a:	4619      	mov	r1, r3
 8000c8c:	4819      	ldr	r0, [pc, #100]	; (8000cf4 <main+0x274>)
 8000c8e:	f007 fb71 	bl	8008374 <HAL_UART_Transmit_DMA>
	  uartFlag = BUSY;
 8000c92:	4b16      	ldr	r3, [pc, #88]	; (8000cec <main+0x26c>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	701a      	strb	r2, [r3, #0]
  for(float i = 0; i < t*fs; i++){
 8000c98:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8000c9c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000ca0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000ca4:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
 8000ca8:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8000cac:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8000cb0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000cb4:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8000cb8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000cbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000cc0:	d488      	bmi.n	8000bd4 <main+0x154>
  }


  //HAL_UART_Transmit_DMA(&huart3, (uint8_t*)&buffer->pcmBuffer[0], 2);

  while (1){
 8000cc2:	e7fe      	b.n	8000cc2 <main+0x242>
 8000cc4:	f3af 8000 	nop.w
 8000cc8:	60000000 	.word	0x60000000
 8000ccc:	401921fb 	.word	0x401921fb
 8000cd0:	00000000 	.word	0x00000000
 8000cd4:	40dfffc0 	.word	0x40dfffc0
 8000cd8:	e000ed00 	.word	0xe000ed00
 8000cdc:	58024400 	.word	0x58024400
 8000ce0:	41200000 	.word	0x41200000
 8000ce4:	473b8000 	.word	0x473b8000
 8000ce8:	447a0000 	.word	0x447a0000
 8000cec:	24000408 	.word	0x24000408
 8000cf0:	30040000 	.word	0x30040000
 8000cf4:	2400049c 	.word	0x2400049c

08000cf8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b09c      	sub	sp, #112	; 0x70
 8000cfc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cfe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d02:	224c      	movs	r2, #76	; 0x4c
 8000d04:	2100      	movs	r1, #0
 8000d06:	4618      	mov	r0, r3
 8000d08:	f00a fe8c 	bl	800ba24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d0c:	1d3b      	adds	r3, r7, #4
 8000d0e:	2220      	movs	r2, #32
 8000d10:	2100      	movs	r1, #0
 8000d12:	4618      	mov	r0, r3
 8000d14:	f00a fe86 	bl	800ba24 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000d18:	2004      	movs	r0, #4
 8000d1a:	f003 fe85 	bl	8004a28 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000d1e:	2300      	movs	r3, #0
 8000d20:	603b      	str	r3, [r7, #0]
 8000d22:	4b34      	ldr	r3, [pc, #208]	; (8000df4 <SystemClock_Config+0xfc>)
 8000d24:	699b      	ldr	r3, [r3, #24]
 8000d26:	4a33      	ldr	r2, [pc, #204]	; (8000df4 <SystemClock_Config+0xfc>)
 8000d28:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000d2c:	6193      	str	r3, [r2, #24]
 8000d2e:	4b31      	ldr	r3, [pc, #196]	; (8000df4 <SystemClock_Config+0xfc>)
 8000d30:	699b      	ldr	r3, [r3, #24]
 8000d32:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000d36:	603b      	str	r3, [r7, #0]
 8000d38:	4b2f      	ldr	r3, [pc, #188]	; (8000df8 <SystemClock_Config+0x100>)
 8000d3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d3c:	4a2e      	ldr	r2, [pc, #184]	; (8000df8 <SystemClock_Config+0x100>)
 8000d3e:	f043 0301 	orr.w	r3, r3, #1
 8000d42:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000d44:	4b2c      	ldr	r3, [pc, #176]	; (8000df8 <SystemClock_Config+0x100>)
 8000d46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d48:	f003 0301 	and.w	r3, r3, #1
 8000d4c:	603b      	str	r3, [r7, #0]
 8000d4e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000d50:	bf00      	nop
 8000d52:	4b28      	ldr	r3, [pc, #160]	; (8000df4 <SystemClock_Config+0xfc>)
 8000d54:	699b      	ldr	r3, [r3, #24]
 8000d56:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000d5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000d5e:	d1f8      	bne.n	8000d52 <SystemClock_Config+0x5a>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000d60:	4b26      	ldr	r3, [pc, #152]	; (8000dfc <SystemClock_Config+0x104>)
 8000d62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d64:	f023 0303 	bic.w	r3, r3, #3
 8000d68:	4a24      	ldr	r2, [pc, #144]	; (8000dfc <SystemClock_Config+0x104>)
 8000d6a:	f043 0302 	orr.w	r3, r3, #2
 8000d6e:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d70:	2301      	movs	r3, #1
 8000d72:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000d74:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000d78:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d7a:	2302      	movs	r3, #2
 8000d7c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d7e:	2302      	movs	r3, #2
 8000d80:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000d82:	2301      	movs	r3, #1
 8000d84:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 120;
 8000d86:	2378      	movs	r3, #120	; 0x78
 8000d88:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000d8a:	2302      	movs	r3, #2
 8000d8c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000d8e:	2304      	movs	r3, #4
 8000d90:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000d92:	2302      	movs	r3, #2
 8000d94:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000d96:	230c      	movs	r3, #12
 8000d98:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000da2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000da6:	4618      	mov	r0, r3
 8000da8:	f003 fe98 	bl	8004adc <HAL_RCC_OscConfig>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d001      	beq.n	8000db6 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8000db2:	f000 f97d 	bl	80010b0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000db6:	233f      	movs	r3, #63	; 0x3f
 8000db8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000dba:	2303      	movs	r3, #3
 8000dbc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV4;
 8000dc2:	2309      	movs	r3, #9
 8000dc4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000dc6:	2340      	movs	r3, #64	; 0x40
 8000dc8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000dd6:	1d3b      	adds	r3, r7, #4
 8000dd8:	2101      	movs	r1, #1
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f004 fa8e 	bl	80052fc <HAL_RCC_ClockConfig>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d001      	beq.n	8000dea <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8000de6:	f000 f963 	bl	80010b0 <Error_Handler>
  }
}
 8000dea:	bf00      	nop
 8000dec:	3770      	adds	r7, #112	; 0x70
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	58024800 	.word	0x58024800
 8000df8:	58000400 	.word	0x58000400
 8000dfc:	58024400 	.word	0x58024400

08000e00 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000e04:	4b11      	ldr	r3, [pc, #68]	; (8000e4c <MX_CRC_Init+0x4c>)
 8000e06:	4a12      	ldr	r2, [pc, #72]	; (8000e50 <MX_CRC_Init+0x50>)
 8000e08:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000e0a:	4b10      	ldr	r3, [pc, #64]	; (8000e4c <MX_CRC_Init+0x4c>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000e10:	4b0e      	ldr	r3, [pc, #56]	; (8000e4c <MX_CRC_Init+0x4c>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000e16:	4b0d      	ldr	r3, [pc, #52]	; (8000e4c <MX_CRC_Init+0x4c>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000e1c:	4b0b      	ldr	r3, [pc, #44]	; (8000e4c <MX_CRC_Init+0x4c>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000e22:	4b0a      	ldr	r3, [pc, #40]	; (8000e4c <MX_CRC_Init+0x4c>)
 8000e24:	2201      	movs	r2, #1
 8000e26:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000e28:	4808      	ldr	r0, [pc, #32]	; (8000e4c <MX_CRC_Init+0x4c>)
 8000e2a:	f000 fcfb 	bl	8001824 <HAL_CRC_Init>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d001      	beq.n	8000e38 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000e34:	f000 f93c 	bl	80010b0 <Error_Handler>
  }
  __HAL_CRC_DR_RESET(&hcrc);
 8000e38:	4b04      	ldr	r3, [pc, #16]	; (8000e4c <MX_CRC_Init+0x4c>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	689a      	ldr	r2, [r3, #8]
 8000e3e:	4b03      	ldr	r3, [pc, #12]	; (8000e4c <MX_CRC_Init+0x4c>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	f042 0201 	orr.w	r2, r2, #1
 8000e46:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000e48:	bf00      	nop
 8000e4a:	bd80      	pop	{r7, pc}
 8000e4c:	2400052c 	.word	0x2400052c
 8000e50:	58024c00 	.word	0x58024c00

08000e54 <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockA1.Instance = SAI1_Block_A;
 8000e58:	4b2d      	ldr	r3, [pc, #180]	; (8000f10 <MX_SAI1_Init+0xbc>)
 8000e5a:	4a2e      	ldr	r2, [pc, #184]	; (8000f14 <MX_SAI1_Init+0xc0>)
 8000e5c:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
 8000e5e:	4b2c      	ldr	r3, [pc, #176]	; (8000f10 <MX_SAI1_Init+0xbc>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_RX;
 8000e64:	4b2a      	ldr	r3, [pc, #168]	; (8000f10 <MX_SAI1_Init+0xbc>)
 8000e66:	2201      	movs	r2, #1
 8000e68:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.DataSize = SAI_DATASIZE_16;
 8000e6a:	4b29      	ldr	r3, [pc, #164]	; (8000f10 <MX_SAI1_Init+0xbc>)
 8000e6c:	2280      	movs	r2, #128	; 0x80
 8000e6e:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000e70:	4b27      	ldr	r3, [pc, #156]	; (8000f10 <MX_SAI1_Init+0xbc>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000e76:	4b26      	ldr	r3, [pc, #152]	; (8000f10 <MX_SAI1_Init+0xbc>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8000e7c:	4b24      	ldr	r3, [pc, #144]	; (8000f10 <MX_SAI1_Init+0xbc>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000e82:	4b23      	ldr	r3, [pc, #140]	; (8000f10 <MX_SAI1_Init+0xbc>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_DISABLE;
 8000e88:	4b21      	ldr	r3, [pc, #132]	; (8000f10 <MX_SAI1_Init+0xbc>)
 8000e8a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000e8e:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_FULL;
 8000e90:	4b1f      	ldr	r3, [pc, #124]	; (8000f10 <MX_SAI1_Init+0xbc>)
 8000e92:	2204      	movs	r2, #4
 8000e94:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_MCKDIV;
 8000e96:	4b1e      	ldr	r3, [pc, #120]	; (8000f10 <MX_SAI1_Init+0xbc>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	621a      	str	r2, [r3, #32]
  hsai_BlockA1.Init.Mckdiv = 1;
 8000e9c:	4b1c      	ldr	r3, [pc, #112]	; (8000f10 <MX_SAI1_Init+0xbc>)
 8000e9e:	2201      	movs	r2, #1
 8000ea0:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8000ea2:	4b1b      	ldr	r3, [pc, #108]	; (8000f10 <MX_SAI1_Init+0xbc>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8000ea8:	4b19      	ldr	r3, [pc, #100]	; (8000f10 <MX_SAI1_Init+0xbc>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA1.Init.PdmInit.Activation = ENABLE;
 8000eae:	4b18      	ldr	r3, [pc, #96]	; (8000f10 <MX_SAI1_Init+0xbc>)
 8000eb0:	2201      	movs	r2, #1
 8000eb2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hsai_BlockA1.Init.PdmInit.MicPairsNbr = 1;
 8000eb6:	4b16      	ldr	r3, [pc, #88]	; (8000f10 <MX_SAI1_Init+0xbc>)
 8000eb8:	2201      	movs	r2, #1
 8000eba:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA1.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 8000ebc:	4b14      	ldr	r3, [pc, #80]	; (8000f10 <MX_SAI1_Init+0xbc>)
 8000ebe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ec2:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA1.FrameInit.FrameLength = 16;
 8000ec4:	4b12      	ldr	r3, [pc, #72]	; (8000f10 <MX_SAI1_Init+0xbc>)
 8000ec6:	2210      	movs	r2, #16
 8000ec8:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA1.FrameInit.ActiveFrameLength = 1;
 8000eca:	4b11      	ldr	r3, [pc, #68]	; (8000f10 <MX_SAI1_Init+0xbc>)
 8000ecc:	2201      	movs	r2, #1
 8000ece:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8000ed0:	4b0f      	ldr	r3, [pc, #60]	; (8000f10 <MX_SAI1_Init+0xbc>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA1.FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 8000ed6:	4b0e      	ldr	r3, [pc, #56]	; (8000f10 <MX_SAI1_Init+0xbc>)
 8000ed8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000edc:	661a      	str	r2, [r3, #96]	; 0x60
  hsai_BlockA1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8000ede:	4b0c      	ldr	r3, [pc, #48]	; (8000f10 <MX_SAI1_Init+0xbc>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	665a      	str	r2, [r3, #100]	; 0x64
  hsai_BlockA1.SlotInit.FirstBitOffset = 0;
 8000ee4:	4b0a      	ldr	r3, [pc, #40]	; (8000f10 <MX_SAI1_Init+0xbc>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	669a      	str	r2, [r3, #104]	; 0x68
  hsai_BlockA1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8000eea:	4b09      	ldr	r3, [pc, #36]	; (8000f10 <MX_SAI1_Init+0xbc>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai_BlockA1.SlotInit.SlotNumber = 1;
 8000ef0:	4b07      	ldr	r3, [pc, #28]	; (8000f10 <MX_SAI1_Init+0xbc>)
 8000ef2:	2201      	movs	r2, #1
 8000ef4:	671a      	str	r2, [r3, #112]	; 0x70
  hsai_BlockA1.SlotInit.SlotActive = 0x00000001;
 8000ef6:	4b06      	ldr	r3, [pc, #24]	; (8000f10 <MX_SAI1_Init+0xbc>)
 8000ef8:	2201      	movs	r2, #1
 8000efa:	675a      	str	r2, [r3, #116]	; 0x74
  if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
 8000efc:	4804      	ldr	r0, [pc, #16]	; (8000f10 <MX_SAI1_Init+0xbc>)
 8000efe:	f006 ff0f 	bl	8007d20 <HAL_SAI_Init>
 8000f02:	4603      	mov	r3, r0
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d001      	beq.n	8000f0c <MX_SAI1_Init+0xb8>
  {
    Error_Handler();
 8000f08:	f000 f8d2 	bl	80010b0 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8000f0c:	bf00      	nop
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	24000640 	.word	0x24000640
 8000f14:	40015804 	.word	0x40015804

08000f18 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000f1c:	4b23      	ldr	r3, [pc, #140]	; (8000fac <MX_USART3_UART_Init+0x94>)
 8000f1e:	4a24      	ldr	r2, [pc, #144]	; (8000fb0 <MX_USART3_UART_Init+0x98>)
 8000f20:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 2000000;
 8000f22:	4b22      	ldr	r3, [pc, #136]	; (8000fac <MX_USART3_UART_Init+0x94>)
 8000f24:	4a23      	ldr	r2, [pc, #140]	; (8000fb4 <MX_USART3_UART_Init+0x9c>)
 8000f26:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000f28:	4b20      	ldr	r3, [pc, #128]	; (8000fac <MX_USART3_UART_Init+0x94>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000f2e:	4b1f      	ldr	r3, [pc, #124]	; (8000fac <MX_USART3_UART_Init+0x94>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000f34:	4b1d      	ldr	r3, [pc, #116]	; (8000fac <MX_USART3_UART_Init+0x94>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000f3a:	4b1c      	ldr	r3, [pc, #112]	; (8000fac <MX_USART3_UART_Init+0x94>)
 8000f3c:	220c      	movs	r2, #12
 8000f3e:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f40:	4b1a      	ldr	r3, [pc, #104]	; (8000fac <MX_USART3_UART_Init+0x94>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f46:	4b19      	ldr	r3, [pc, #100]	; (8000fac <MX_USART3_UART_Init+0x94>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f4c:	4b17      	ldr	r3, [pc, #92]	; (8000fac <MX_USART3_UART_Init+0x94>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000f52:	4b16      	ldr	r3, [pc, #88]	; (8000fac <MX_USART3_UART_Init+0x94>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f58:	4b14      	ldr	r3, [pc, #80]	; (8000fac <MX_USART3_UART_Init+0x94>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000f5e:	4813      	ldr	r0, [pc, #76]	; (8000fac <MX_USART3_UART_Init+0x94>)
 8000f60:	f007 f9b8 	bl	80082d4 <HAL_UART_Init>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d001      	beq.n	8000f6e <MX_USART3_UART_Init+0x56>
  {
    Error_Handler();
 8000f6a:	f000 f8a1 	bl	80010b0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_8_8) != HAL_OK)
 8000f6e:	f04f 4120 	mov.w	r1, #2684354560	; 0xa0000000
 8000f72:	480e      	ldr	r0, [pc, #56]	; (8000fac <MX_USART3_UART_Init+0x94>)
 8000f74:	f008 fd69 	bl	8009a4a <HAL_UARTEx_SetTxFifoThreshold>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d001      	beq.n	8000f82 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000f7e:	f000 f897 	bl	80010b0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_8_8) != HAL_OK)
 8000f82:	f04f 6120 	mov.w	r1, #167772160	; 0xa000000
 8000f86:	4809      	ldr	r0, [pc, #36]	; (8000fac <MX_USART3_UART_Init+0x94>)
 8000f88:	f008 fd9d 	bl	8009ac6 <HAL_UARTEx_SetRxFifoThreshold>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d001      	beq.n	8000f96 <MX_USART3_UART_Init+0x7e>
  {
    Error_Handler();
 8000f92:	f000 f88d 	bl	80010b0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000f96:	4805      	ldr	r0, [pc, #20]	; (8000fac <MX_USART3_UART_Init+0x94>)
 8000f98:	f008 fd1e 	bl	80099d8 <HAL_UARTEx_DisableFifoMode>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d001      	beq.n	8000fa6 <MX_USART3_UART_Init+0x8e>
  {
    Error_Handler();
 8000fa2:	f000 f885 	bl	80010b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000fa6:	bf00      	nop
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	2400049c 	.word	0x2400049c
 8000fb0:	40004800 	.word	0x40004800
 8000fb4:	001e8480 	.word	0x001e8480

08000fb8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b082      	sub	sp, #8
 8000fbc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000fbe:	4b11      	ldr	r3, [pc, #68]	; (8001004 <MX_DMA_Init+0x4c>)
 8000fc0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000fc4:	4a0f      	ldr	r2, [pc, #60]	; (8001004 <MX_DMA_Init+0x4c>)
 8000fc6:	f043 0301 	orr.w	r3, r3, #1
 8000fca:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000fce:	4b0d      	ldr	r3, [pc, #52]	; (8001004 <MX_DMA_Init+0x4c>)
 8000fd0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000fd4:	f003 0301 	and.w	r3, r3, #1
 8000fd8:	607b      	str	r3, [r7, #4]
 8000fda:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000fdc:	2200      	movs	r2, #0
 8000fde:	2100      	movs	r1, #0
 8000fe0:	200b      	movs	r0, #11
 8000fe2:	f000 fbea 	bl	80017ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000fe6:	200b      	movs	r0, #11
 8000fe8:	f000 fc01 	bl	80017ee <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000fec:	2200      	movs	r2, #0
 8000fee:	2100      	movs	r1, #0
 8000ff0:	200c      	movs	r0, #12
 8000ff2:	f000 fbe2 	bl	80017ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000ff6:	200c      	movs	r0, #12
 8000ff8:	f000 fbf9 	bl	80017ee <HAL_NVIC_EnableIRQ>

}
 8000ffc:	bf00      	nop
 8000ffe:	3708      	adds	r7, #8
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}
 8001004:	58024400 	.word	0x58024400

08001008 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001008:	b480      	push	{r7}
 800100a:	b085      	sub	sp, #20
 800100c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800100e:	4b19      	ldr	r3, [pc, #100]	; (8001074 <MX_GPIO_Init+0x6c>)
 8001010:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001014:	4a17      	ldr	r2, [pc, #92]	; (8001074 <MX_GPIO_Init+0x6c>)
 8001016:	f043 0310 	orr.w	r3, r3, #16
 800101a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800101e:	4b15      	ldr	r3, [pc, #84]	; (8001074 <MX_GPIO_Init+0x6c>)
 8001020:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001024:	f003 0310 	and.w	r3, r3, #16
 8001028:	60fb      	str	r3, [r7, #12]
 800102a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800102c:	4b11      	ldr	r3, [pc, #68]	; (8001074 <MX_GPIO_Init+0x6c>)
 800102e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001032:	4a10      	ldr	r2, [pc, #64]	; (8001074 <MX_GPIO_Init+0x6c>)
 8001034:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001038:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800103c:	4b0d      	ldr	r3, [pc, #52]	; (8001074 <MX_GPIO_Init+0x6c>)
 800103e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001042:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001046:	60bb      	str	r3, [r7, #8]
 8001048:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800104a:	4b0a      	ldr	r3, [pc, #40]	; (8001074 <MX_GPIO_Init+0x6c>)
 800104c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001050:	4a08      	ldr	r2, [pc, #32]	; (8001074 <MX_GPIO_Init+0x6c>)
 8001052:	f043 0308 	orr.w	r3, r3, #8
 8001056:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800105a:	4b06      	ldr	r3, [pc, #24]	; (8001074 <MX_GPIO_Init+0x6c>)
 800105c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001060:	f003 0308 	and.w	r3, r3, #8
 8001064:	607b      	str	r3, [r7, #4]
 8001066:	687b      	ldr	r3, [r7, #4]

}
 8001068:	bf00      	nop
 800106a:	3714      	adds	r7, #20
 800106c:	46bd      	mov	sp, r7
 800106e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001072:	4770      	bx	lr
 8001074:	58024400 	.word	0x58024400

08001078 <HAL_UART_TxHalfCpltCallback>:

void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai){
	dmaFlag = FULL;
}

void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart){
 8001078:	b480      	push	{r7}
 800107a:	b085      	sub	sp, #20
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
	volatile uint32_t h = 1;
 8001080:	2301      	movs	r3, #1
 8001082:	60fb      	str	r3, [r7, #12]
}
 8001084:	bf00      	nop
 8001086:	3714      	adds	r7, #20
 8001088:	46bd      	mov	sp, r7
 800108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108e:	4770      	bx	lr

08001090 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8001090:	b480      	push	{r7}
 8001092:	b083      	sub	sp, #12
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
	uartFlag = READY;
 8001098:	4b04      	ldr	r3, [pc, #16]	; (80010ac <HAL_UART_TxCpltCallback+0x1c>)
 800109a:	2201      	movs	r2, #1
 800109c:	701a      	strb	r2, [r3, #0]
}
 800109e:	bf00      	nop
 80010a0:	370c      	adds	r7, #12
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop
 80010ac:	24000408 	.word	0x24000408

080010b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80010b4:	b672      	cpsid	i
}
 80010b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010b8:	e7fe      	b.n	80010b8 <Error_Handler+0x8>
	...

080010bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	b083      	sub	sp, #12
 80010c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010c2:	4b0a      	ldr	r3, [pc, #40]	; (80010ec <HAL_MspInit+0x30>)
 80010c4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80010c8:	4a08      	ldr	r2, [pc, #32]	; (80010ec <HAL_MspInit+0x30>)
 80010ca:	f043 0302 	orr.w	r3, r3, #2
 80010ce:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80010d2:	4b06      	ldr	r3, [pc, #24]	; (80010ec <HAL_MspInit+0x30>)
 80010d4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80010d8:	f003 0302 	and.w	r3, r3, #2
 80010dc:	607b      	str	r3, [r7, #4]
 80010de:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010e0:	bf00      	nop
 80010e2:	370c      	adds	r7, #12
 80010e4:	46bd      	mov	sp, r7
 80010e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ea:	4770      	bx	lr
 80010ec:	58024400 	.word	0x58024400

080010f0 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80010f0:	b480      	push	{r7}
 80010f2:	b085      	sub	sp, #20
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	4a0b      	ldr	r2, [pc, #44]	; (800112c <HAL_CRC_MspInit+0x3c>)
 80010fe:	4293      	cmp	r3, r2
 8001100:	d10e      	bne.n	8001120 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001102:	4b0b      	ldr	r3, [pc, #44]	; (8001130 <HAL_CRC_MspInit+0x40>)
 8001104:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001108:	4a09      	ldr	r2, [pc, #36]	; (8001130 <HAL_CRC_MspInit+0x40>)
 800110a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800110e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001112:	4b07      	ldr	r3, [pc, #28]	; (8001130 <HAL_CRC_MspInit+0x40>)
 8001114:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001118:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800111c:	60fb      	str	r3, [r7, #12]
 800111e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001120:	bf00      	nop
 8001122:	3714      	adds	r7, #20
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr
 800112c:	58024c00 	.word	0x58024c00
 8001130:	58024400 	.word	0x58024400

08001134 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b0b8      	sub	sp, #224	; 0xe0
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800113c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001140:	2200      	movs	r2, #0
 8001142:	601a      	str	r2, [r3, #0]
 8001144:	605a      	str	r2, [r3, #4]
 8001146:	609a      	str	r2, [r3, #8]
 8001148:	60da      	str	r2, [r3, #12]
 800114a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800114c:	f107 0310 	add.w	r3, r7, #16
 8001150:	22bc      	movs	r2, #188	; 0xbc
 8001152:	2100      	movs	r1, #0
 8001154:	4618      	mov	r0, r3
 8001156:	f00a fc65 	bl	800ba24 <memset>
  if(huart->Instance==USART3)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	4a49      	ldr	r2, [pc, #292]	; (8001284 <HAL_UART_MspInit+0x150>)
 8001160:	4293      	cmp	r3, r2
 8001162:	f040 808a 	bne.w	800127a <HAL_UART_MspInit+0x146>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001166:	2302      	movs	r3, #2
 8001168:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 2;
 800116a:	2302      	movs	r3, #2
 800116c:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL3.PLL3N = 100;
 800116e:	2364      	movs	r3, #100	; 0x64
 8001170:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8001172:	2302      	movs	r3, #2
 8001174:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3Q = 4;
 8001176:	2304      	movs	r3, #4
 8001178:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 800117a:	2302      	movs	r3, #2
 800117c:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_2;
 800117e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001182:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 8001184:	2300      	movs	r3, #0
 8001186:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8001188:	2300      	movs	r3, #0
 800118a:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_PLL3;
 800118c:	2302      	movs	r3, #2
 800118e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001192:	f107 0310 	add.w	r3, r7, #16
 8001196:	4618      	mov	r0, r3
 8001198:	f004 fc3c 	bl	8005a14 <HAL_RCCEx_PeriphCLKConfig>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d001      	beq.n	80011a6 <HAL_UART_MspInit+0x72>
    {
      Error_Handler();
 80011a2:	f7ff ff85 	bl	80010b0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80011a6:	4b38      	ldr	r3, [pc, #224]	; (8001288 <HAL_UART_MspInit+0x154>)
 80011a8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80011ac:	4a36      	ldr	r2, [pc, #216]	; (8001288 <HAL_UART_MspInit+0x154>)
 80011ae:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011b2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80011b6:	4b34      	ldr	r3, [pc, #208]	; (8001288 <HAL_UART_MspInit+0x154>)
 80011b8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80011bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80011c0:	60fb      	str	r3, [r7, #12]
 80011c2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80011c4:	4b30      	ldr	r3, [pc, #192]	; (8001288 <HAL_UART_MspInit+0x154>)
 80011c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011ca:	4a2f      	ldr	r2, [pc, #188]	; (8001288 <HAL_UART_MspInit+0x154>)
 80011cc:	f043 0308 	orr.w	r3, r3, #8
 80011d0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011d4:	4b2c      	ldr	r3, [pc, #176]	; (8001288 <HAL_UART_MspInit+0x154>)
 80011d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011da:	f003 0308 	and.w	r3, r3, #8
 80011de:	60bb      	str	r3, [r7, #8]
 80011e0:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80011e2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80011e6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ea:	2302      	movs	r3, #2
 80011ec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f0:	2300      	movs	r3, #0
 80011f2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f6:	2300      	movs	r3, #0
 80011f8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80011fc:	2307      	movs	r3, #7
 80011fe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001202:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001206:	4619      	mov	r1, r3
 8001208:	4820      	ldr	r0, [pc, #128]	; (800128c <HAL_UART_MspInit+0x158>)
 800120a:	f003 fa2f 	bl	800466c <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream1;
 800120e:	4b20      	ldr	r3, [pc, #128]	; (8001290 <HAL_UART_MspInit+0x15c>)
 8001210:	4a20      	ldr	r2, [pc, #128]	; (8001294 <HAL_UART_MspInit+0x160>)
 8001212:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8001214:	4b1e      	ldr	r3, [pc, #120]	; (8001290 <HAL_UART_MspInit+0x15c>)
 8001216:	222e      	movs	r2, #46	; 0x2e
 8001218:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800121a:	4b1d      	ldr	r3, [pc, #116]	; (8001290 <HAL_UART_MspInit+0x15c>)
 800121c:	2240      	movs	r2, #64	; 0x40
 800121e:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001220:	4b1b      	ldr	r3, [pc, #108]	; (8001290 <HAL_UART_MspInit+0x15c>)
 8001222:	2200      	movs	r2, #0
 8001224:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001226:	4b1a      	ldr	r3, [pc, #104]	; (8001290 <HAL_UART_MspInit+0x15c>)
 8001228:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800122c:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800122e:	4b18      	ldr	r3, [pc, #96]	; (8001290 <HAL_UART_MspInit+0x15c>)
 8001230:	2200      	movs	r2, #0
 8001232:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001234:	4b16      	ldr	r3, [pc, #88]	; (8001290 <HAL_UART_MspInit+0x15c>)
 8001236:	2200      	movs	r2, #0
 8001238:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 800123a:	4b15      	ldr	r3, [pc, #84]	; (8001290 <HAL_UART_MspInit+0x15c>)
 800123c:	2200      	movs	r2, #0
 800123e:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001240:	4b13      	ldr	r3, [pc, #76]	; (8001290 <HAL_UART_MspInit+0x15c>)
 8001242:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001246:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001248:	4b11      	ldr	r3, [pc, #68]	; (8001290 <HAL_UART_MspInit+0x15c>)
 800124a:	2200      	movs	r2, #0
 800124c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 800124e:	4810      	ldr	r0, [pc, #64]	; (8001290 <HAL_UART_MspInit+0x15c>)
 8001250:	f000 fbd2 	bl	80019f8 <HAL_DMA_Init>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d001      	beq.n	800125e <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 800125a:	f7ff ff29 	bl	80010b0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	4a0b      	ldr	r2, [pc, #44]	; (8001290 <HAL_UART_MspInit+0x15c>)
 8001262:	679a      	str	r2, [r3, #120]	; 0x78
 8001264:	4a0a      	ldr	r2, [pc, #40]	; (8001290 <HAL_UART_MspInit+0x15c>)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800126a:	2200      	movs	r2, #0
 800126c:	2100      	movs	r1, #0
 800126e:	2027      	movs	r0, #39	; 0x27
 8001270:	f000 faa3 	bl	80017ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001274:	2027      	movs	r0, #39	; 0x27
 8001276:	f000 faba 	bl	80017ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800127a:	bf00      	nop
 800127c:	37e0      	adds	r7, #224	; 0xe0
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	40004800 	.word	0x40004800
 8001288:	58024400 	.word	0x58024400
 800128c:	58020c00 	.word	0x58020c00
 8001290:	24000550 	.word	0x24000550
 8001294:	40020028 	.word	0x40020028

08001298 <HAL_SAI_MspInit>:
extern DMA_HandleTypeDef hdma_sai1_a;

static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b0b8      	sub	sp, #224	; 0xe0
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012a0:	f107 0310 	add.w	r3, r7, #16
 80012a4:	22bc      	movs	r2, #188	; 0xbc
 80012a6:	2100      	movs	r1, #0
 80012a8:	4618      	mov	r0, r3
 80012aa:	f00a fbbb 	bl	800ba24 <memset>
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	4a46      	ldr	r2, [pc, #280]	; (80013cc <HAL_SAI_MspInit+0x134>)
 80012b4:	4293      	cmp	r3, r2
 80012b6:	f040 8085 	bne.w	80013c4 <HAL_SAI_MspInit+0x12c>
    {
    /* Peripheral clock enable */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 80012ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012be:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 4;
 80012c0:	2304      	movs	r3, #4
 80012c2:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLL2.PLL2N = 129;
 80012c4:	2381      	movs	r3, #129	; 0x81
 80012c6:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2P = 3;
 80012c8:	2303      	movs	r3, #3
 80012ca:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80012cc:	2302      	movs	r3, #2
 80012ce:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 80012d0:	2302      	movs	r3, #2
 80012d2:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_1;
 80012d4:	2340      	movs	r3, #64	; 0x40
 80012d6:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 80012d8:	2300      	movs	r3, #0
 80012da:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80012dc:	2300      	movs	r3, #0
 80012de:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL2;
 80012e0:	2301      	movs	r3, #1
 80012e2:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012e4:	f107 0310 	add.w	r3, r7, #16
 80012e8:	4618      	mov	r0, r3
 80012ea:	f004 fb93 	bl	8005a14 <HAL_RCCEx_PeriphCLKConfig>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d001      	beq.n	80012f8 <HAL_SAI_MspInit+0x60>
    {
      Error_Handler();
 80012f4:	f7ff fedc 	bl	80010b0 <Error_Handler>
    }

    if (SAI1_client == 0)
 80012f8:	4b35      	ldr	r3, [pc, #212]	; (80013d0 <HAL_SAI_MspInit+0x138>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d10e      	bne.n	800131e <HAL_SAI_MspInit+0x86>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8001300:	4b34      	ldr	r3, [pc, #208]	; (80013d4 <HAL_SAI_MspInit+0x13c>)
 8001302:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001306:	4a33      	ldr	r2, [pc, #204]	; (80013d4 <HAL_SAI_MspInit+0x13c>)
 8001308:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800130c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001310:	4b30      	ldr	r3, [pc, #192]	; (80013d4 <HAL_SAI_MspInit+0x13c>)
 8001312:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001316:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800131a:	60fb      	str	r3, [r7, #12]
 800131c:	68fb      	ldr	r3, [r7, #12]
    }
    SAI1_client ++;
 800131e:	4b2c      	ldr	r3, [pc, #176]	; (80013d0 <HAL_SAI_MspInit+0x138>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	3301      	adds	r3, #1
 8001324:	4a2a      	ldr	r2, [pc, #168]	; (80013d0 <HAL_SAI_MspInit+0x138>)
 8001326:	6013      	str	r3, [r2, #0]

    /**SAI1_A_Block_A GPIO Configuration
    PE2     ------> SAI1_CK1
    PE6     ------> SAI1_D1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_6;
 8001328:	2344      	movs	r3, #68	; 0x44
 800132a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800132e:	2302      	movs	r3, #2
 8001330:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001334:	2300      	movs	r3, #0
 8001336:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800133a:	2300      	movs	r3, #0
 800133c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF2_SAI1;
 8001340:	2302      	movs	r3, #2
 8001342:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001346:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800134a:	4619      	mov	r1, r3
 800134c:	4822      	ldr	r0, [pc, #136]	; (80013d8 <HAL_SAI_MspInit+0x140>)
 800134e:	f003 f98d 	bl	800466c <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai1_a.Instance = DMA1_Stream0;
 8001352:	4b22      	ldr	r3, [pc, #136]	; (80013dc <HAL_SAI_MspInit+0x144>)
 8001354:	4a22      	ldr	r2, [pc, #136]	; (80013e0 <HAL_SAI_MspInit+0x148>)
 8001356:	601a      	str	r2, [r3, #0]
    hdma_sai1_a.Init.Request = DMA_REQUEST_SAI1_A;
 8001358:	4b20      	ldr	r3, [pc, #128]	; (80013dc <HAL_SAI_MspInit+0x144>)
 800135a:	2257      	movs	r2, #87	; 0x57
 800135c:	605a      	str	r2, [r3, #4]
    hdma_sai1_a.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800135e:	4b1f      	ldr	r3, [pc, #124]	; (80013dc <HAL_SAI_MspInit+0x144>)
 8001360:	2200      	movs	r2, #0
 8001362:	609a      	str	r2, [r3, #8]
    hdma_sai1_a.Init.PeriphInc = DMA_PINC_DISABLE;
 8001364:	4b1d      	ldr	r3, [pc, #116]	; (80013dc <HAL_SAI_MspInit+0x144>)
 8001366:	2200      	movs	r2, #0
 8001368:	60da      	str	r2, [r3, #12]
    hdma_sai1_a.Init.MemInc = DMA_MINC_ENABLE;
 800136a:	4b1c      	ldr	r3, [pc, #112]	; (80013dc <HAL_SAI_MspInit+0x144>)
 800136c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001370:	611a      	str	r2, [r3, #16]
    hdma_sai1_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001372:	4b1a      	ldr	r3, [pc, #104]	; (80013dc <HAL_SAI_MspInit+0x144>)
 8001374:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001378:	615a      	str	r2, [r3, #20]
    hdma_sai1_a.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800137a:	4b18      	ldr	r3, [pc, #96]	; (80013dc <HAL_SAI_MspInit+0x144>)
 800137c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001380:	619a      	str	r2, [r3, #24]
    hdma_sai1_a.Init.Mode = DMA_CIRCULAR;
 8001382:	4b16      	ldr	r3, [pc, #88]	; (80013dc <HAL_SAI_MspInit+0x144>)
 8001384:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001388:	61da      	str	r2, [r3, #28]
    hdma_sai1_a.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800138a:	4b14      	ldr	r3, [pc, #80]	; (80013dc <HAL_SAI_MspInit+0x144>)
 800138c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001390:	621a      	str	r2, [r3, #32]
    hdma_sai1_a.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001392:	4b12      	ldr	r3, [pc, #72]	; (80013dc <HAL_SAI_MspInit+0x144>)
 8001394:	2200      	movs	r2, #0
 8001396:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
 8001398:	4810      	ldr	r0, [pc, #64]	; (80013dc <HAL_SAI_MspInit+0x144>)
 800139a:	f000 fb2d 	bl	80019f8 <HAL_DMA_Init>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d001      	beq.n	80013a8 <HAL_SAI_MspInit+0x110>
    {
      Error_Handler();
 80013a4:	f7ff fe84 	bl	80010b0 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_a);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	4a0c      	ldr	r2, [pc, #48]	; (80013dc <HAL_SAI_MspInit+0x144>)
 80013ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 80013b0:	4a0a      	ldr	r2, [pc, #40]	; (80013dc <HAL_SAI_MspInit+0x144>)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	6393      	str	r3, [r2, #56]	; 0x38

    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_a);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	4a08      	ldr	r2, [pc, #32]	; (80013dc <HAL_SAI_MspInit+0x144>)
 80013ba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 80013be:	4a07      	ldr	r2, [pc, #28]	; (80013dc <HAL_SAI_MspInit+0x144>)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	6393      	str	r3, [r2, #56]	; 0x38

    }
}
 80013c4:	bf00      	nop
 80013c6:	37e0      	adds	r7, #224	; 0xe0
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	40015804 	.word	0x40015804
 80013d0:	24000498 	.word	0x24000498
 80013d4:	58024400 	.word	0x58024400
 80013d8:	58021000 	.word	0x58021000
 80013dc:	240005c8 	.word	0x240005c8
 80013e0:	40020010 	.word	0x40020010

080013e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013e8:	e7fe      	b.n	80013e8 <NMI_Handler+0x4>

080013ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013ea:	b480      	push	{r7}
 80013ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013ee:	e7fe      	b.n	80013ee <HardFault_Handler+0x4>

080013f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013f4:	e7fe      	b.n	80013f4 <MemManage_Handler+0x4>

080013f6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013f6:	b480      	push	{r7}
 80013f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013fa:	e7fe      	b.n	80013fa <BusFault_Handler+0x4>

080013fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001400:	e7fe      	b.n	8001400 <UsageFault_Handler+0x4>

08001402 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001402:	b480      	push	{r7}
 8001404:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001406:	bf00      	nop
 8001408:	46bd      	mov	sp, r7
 800140a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140e:	4770      	bx	lr

08001410 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001414:	bf00      	nop
 8001416:	46bd      	mov	sp, r7
 8001418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141c:	4770      	bx	lr

0800141e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800141e:	b480      	push	{r7}
 8001420:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001422:	bf00      	nop
 8001424:	46bd      	mov	sp, r7
 8001426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142a:	4770      	bx	lr

0800142c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001430:	f000 f8bc 	bl	80015ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001434:	bf00      	nop
 8001436:	bd80      	pop	{r7, pc}

08001438 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_a);
 800143c:	4802      	ldr	r0, [pc, #8]	; (8001448 <DMA1_Stream0_IRQHandler+0x10>)
 800143e:	f001 fe03 	bl	8003048 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001442:	bf00      	nop
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	240005c8 	.word	0x240005c8

0800144c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8001450:	4802      	ldr	r0, [pc, #8]	; (800145c <DMA1_Stream1_IRQHandler+0x10>)
 8001452:	f001 fdf9 	bl	8003048 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001456:	bf00      	nop
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	24000550 	.word	0x24000550

08001460 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001464:	4802      	ldr	r0, [pc, #8]	; (8001470 <USART3_IRQHandler+0x10>)
 8001466:	f007 f805 	bl	8008474 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800146a:	bf00      	nop
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	2400049c 	.word	0x2400049c

08001474 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001474:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014ac <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001478:	f7ff fa66 	bl	8000948 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800147c:	480c      	ldr	r0, [pc, #48]	; (80014b0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800147e:	490d      	ldr	r1, [pc, #52]	; (80014b4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001480:	4a0d      	ldr	r2, [pc, #52]	; (80014b8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001482:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001484:	e002      	b.n	800148c <LoopCopyDataInit>

08001486 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001486:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001488:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800148a:	3304      	adds	r3, #4

0800148c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800148c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800148e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001490:	d3f9      	bcc.n	8001486 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001492:	4a0a      	ldr	r2, [pc, #40]	; (80014bc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001494:	4c0a      	ldr	r4, [pc, #40]	; (80014c0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001496:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001498:	e001      	b.n	800149e <LoopFillZerobss>

0800149a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800149a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800149c:	3204      	adds	r2, #4

0800149e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800149e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014a0:	d3fb      	bcc.n	800149a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80014a2:	f00a fa9b 	bl	800b9dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014a6:	f7ff faeb 	bl	8000a80 <main>
  bx  lr
 80014aa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80014ac:	24040000 	.word	0x24040000
  ldr r0, =_sdata
 80014b0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80014b4:	24000478 	.word	0x24000478
  ldr r2, =_sidata
 80014b8:	0800c3a8 	.word	0x0800c3a8
  ldr r2, =_sbss
 80014bc:	24000478 	.word	0x24000478
  ldr r4, =_ebss
 80014c0:	24000784 	.word	0x24000784

080014c4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014c4:	e7fe      	b.n	80014c4 <ADC3_IRQHandler>
	...

080014c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b082      	sub	sp, #8
 80014cc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014ce:	2003      	movs	r0, #3
 80014d0:	f000 f968 	bl	80017a4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80014d4:	f004 f8c8 	bl	8005668 <HAL_RCC_GetSysClockFreq>
 80014d8:	4602      	mov	r2, r0
 80014da:	4b15      	ldr	r3, [pc, #84]	; (8001530 <HAL_Init+0x68>)
 80014dc:	699b      	ldr	r3, [r3, #24]
 80014de:	0a1b      	lsrs	r3, r3, #8
 80014e0:	f003 030f 	and.w	r3, r3, #15
 80014e4:	4913      	ldr	r1, [pc, #76]	; (8001534 <HAL_Init+0x6c>)
 80014e6:	5ccb      	ldrb	r3, [r1, r3]
 80014e8:	f003 031f 	and.w	r3, r3, #31
 80014ec:	fa22 f303 	lsr.w	r3, r2, r3
 80014f0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80014f2:	4b0f      	ldr	r3, [pc, #60]	; (8001530 <HAL_Init+0x68>)
 80014f4:	699b      	ldr	r3, [r3, #24]
 80014f6:	f003 030f 	and.w	r3, r3, #15
 80014fa:	4a0e      	ldr	r2, [pc, #56]	; (8001534 <HAL_Init+0x6c>)
 80014fc:	5cd3      	ldrb	r3, [r2, r3]
 80014fe:	f003 031f 	and.w	r3, r3, #31
 8001502:	687a      	ldr	r2, [r7, #4]
 8001504:	fa22 f303 	lsr.w	r3, r2, r3
 8001508:	4a0b      	ldr	r2, [pc, #44]	; (8001538 <HAL_Init+0x70>)
 800150a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800150c:	4a0b      	ldr	r2, [pc, #44]	; (800153c <HAL_Init+0x74>)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001512:	2000      	movs	r0, #0
 8001514:	f000 f814 	bl	8001540 <HAL_InitTick>
 8001518:	4603      	mov	r3, r0
 800151a:	2b00      	cmp	r3, #0
 800151c:	d001      	beq.n	8001522 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800151e:	2301      	movs	r3, #1
 8001520:	e002      	b.n	8001528 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001522:	f7ff fdcb 	bl	80010bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001526:	2300      	movs	r3, #0
}
 8001528:	4618      	mov	r0, r3
 800152a:	3708      	adds	r7, #8
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}
 8001530:	58024400 	.word	0x58024400
 8001534:	0800bfa8 	.word	0x0800bfa8
 8001538:	24000404 	.word	0x24000404
 800153c:	24000400 	.word	0x24000400

08001540 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b082      	sub	sp, #8
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001548:	4b15      	ldr	r3, [pc, #84]	; (80015a0 <HAL_InitTick+0x60>)
 800154a:	781b      	ldrb	r3, [r3, #0]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d101      	bne.n	8001554 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001550:	2301      	movs	r3, #1
 8001552:	e021      	b.n	8001598 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001554:	4b13      	ldr	r3, [pc, #76]	; (80015a4 <HAL_InitTick+0x64>)
 8001556:	681a      	ldr	r2, [r3, #0]
 8001558:	4b11      	ldr	r3, [pc, #68]	; (80015a0 <HAL_InitTick+0x60>)
 800155a:	781b      	ldrb	r3, [r3, #0]
 800155c:	4619      	mov	r1, r3
 800155e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001562:	fbb3 f3f1 	udiv	r3, r3, r1
 8001566:	fbb2 f3f3 	udiv	r3, r2, r3
 800156a:	4618      	mov	r0, r3
 800156c:	f000 f94d 	bl	800180a <HAL_SYSTICK_Config>
 8001570:	4603      	mov	r3, r0
 8001572:	2b00      	cmp	r3, #0
 8001574:	d001      	beq.n	800157a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001576:	2301      	movs	r3, #1
 8001578:	e00e      	b.n	8001598 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	2b0f      	cmp	r3, #15
 800157e:	d80a      	bhi.n	8001596 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001580:	2200      	movs	r2, #0
 8001582:	6879      	ldr	r1, [r7, #4]
 8001584:	f04f 30ff 	mov.w	r0, #4294967295
 8001588:	f000 f917 	bl	80017ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800158c:	4a06      	ldr	r2, [pc, #24]	; (80015a8 <HAL_InitTick+0x68>)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001592:	2300      	movs	r3, #0
 8001594:	e000      	b.n	8001598 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001596:	2301      	movs	r3, #1
}
 8001598:	4618      	mov	r0, r3
 800159a:	3708      	adds	r7, #8
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	24000410 	.word	0x24000410
 80015a4:	24000400 	.word	0x24000400
 80015a8:	2400040c 	.word	0x2400040c

080015ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80015b0:	4b06      	ldr	r3, [pc, #24]	; (80015cc <HAL_IncTick+0x20>)
 80015b2:	781b      	ldrb	r3, [r3, #0]
 80015b4:	461a      	mov	r2, r3
 80015b6:	4b06      	ldr	r3, [pc, #24]	; (80015d0 <HAL_IncTick+0x24>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4413      	add	r3, r2
 80015bc:	4a04      	ldr	r2, [pc, #16]	; (80015d0 <HAL_IncTick+0x24>)
 80015be:	6013      	str	r3, [r2, #0]
}
 80015c0:	bf00      	nop
 80015c2:	46bd      	mov	sp, r7
 80015c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c8:	4770      	bx	lr
 80015ca:	bf00      	nop
 80015cc:	24000410 	.word	0x24000410
 80015d0:	240006d8 	.word	0x240006d8

080015d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0
  return uwTick;
 80015d8:	4b03      	ldr	r3, [pc, #12]	; (80015e8 <HAL_GetTick+0x14>)
 80015da:	681b      	ldr	r3, [r3, #0]
}
 80015dc:	4618      	mov	r0, r3
 80015de:	46bd      	mov	sp, r7
 80015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e4:	4770      	bx	lr
 80015e6:	bf00      	nop
 80015e8:	240006d8 	.word	0x240006d8

080015ec <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80015ec:	b480      	push	{r7}
 80015ee:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80015f0:	4b03      	ldr	r3, [pc, #12]	; (8001600 <HAL_GetREVID+0x14>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	0c1b      	lsrs	r3, r3, #16
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	46bd      	mov	sp, r7
 80015fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fe:	4770      	bx	lr
 8001600:	5c001000 	.word	0x5c001000

08001604 <__NVIC_SetPriorityGrouping>:
{
 8001604:	b480      	push	{r7}
 8001606:	b085      	sub	sp, #20
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	f003 0307 	and.w	r3, r3, #7
 8001612:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001614:	4b0b      	ldr	r3, [pc, #44]	; (8001644 <__NVIC_SetPriorityGrouping+0x40>)
 8001616:	68db      	ldr	r3, [r3, #12]
 8001618:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800161a:	68ba      	ldr	r2, [r7, #8]
 800161c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001620:	4013      	ands	r3, r2
 8001622:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001628:	68bb      	ldr	r3, [r7, #8]
 800162a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800162c:	4b06      	ldr	r3, [pc, #24]	; (8001648 <__NVIC_SetPriorityGrouping+0x44>)
 800162e:	4313      	orrs	r3, r2
 8001630:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001632:	4a04      	ldr	r2, [pc, #16]	; (8001644 <__NVIC_SetPriorityGrouping+0x40>)
 8001634:	68bb      	ldr	r3, [r7, #8]
 8001636:	60d3      	str	r3, [r2, #12]
}
 8001638:	bf00      	nop
 800163a:	3714      	adds	r7, #20
 800163c:	46bd      	mov	sp, r7
 800163e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001642:	4770      	bx	lr
 8001644:	e000ed00 	.word	0xe000ed00
 8001648:	05fa0000 	.word	0x05fa0000

0800164c <__NVIC_GetPriorityGrouping>:
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001650:	4b04      	ldr	r3, [pc, #16]	; (8001664 <__NVIC_GetPriorityGrouping+0x18>)
 8001652:	68db      	ldr	r3, [r3, #12]
 8001654:	0a1b      	lsrs	r3, r3, #8
 8001656:	f003 0307 	and.w	r3, r3, #7
}
 800165a:	4618      	mov	r0, r3
 800165c:	46bd      	mov	sp, r7
 800165e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001662:	4770      	bx	lr
 8001664:	e000ed00 	.word	0xe000ed00

08001668 <__NVIC_EnableIRQ>:
{
 8001668:	b480      	push	{r7}
 800166a:	b083      	sub	sp, #12
 800166c:	af00      	add	r7, sp, #0
 800166e:	4603      	mov	r3, r0
 8001670:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001672:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001676:	2b00      	cmp	r3, #0
 8001678:	db0b      	blt.n	8001692 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800167a:	88fb      	ldrh	r3, [r7, #6]
 800167c:	f003 021f 	and.w	r2, r3, #31
 8001680:	4907      	ldr	r1, [pc, #28]	; (80016a0 <__NVIC_EnableIRQ+0x38>)
 8001682:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001686:	095b      	lsrs	r3, r3, #5
 8001688:	2001      	movs	r0, #1
 800168a:	fa00 f202 	lsl.w	r2, r0, r2
 800168e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001692:	bf00      	nop
 8001694:	370c      	adds	r7, #12
 8001696:	46bd      	mov	sp, r7
 8001698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169c:	4770      	bx	lr
 800169e:	bf00      	nop
 80016a0:	e000e100 	.word	0xe000e100

080016a4 <__NVIC_SetPriority>:
{
 80016a4:	b480      	push	{r7}
 80016a6:	b083      	sub	sp, #12
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	4603      	mov	r3, r0
 80016ac:	6039      	str	r1, [r7, #0]
 80016ae:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80016b0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	db0a      	blt.n	80016ce <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	b2da      	uxtb	r2, r3
 80016bc:	490c      	ldr	r1, [pc, #48]	; (80016f0 <__NVIC_SetPriority+0x4c>)
 80016be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016c2:	0112      	lsls	r2, r2, #4
 80016c4:	b2d2      	uxtb	r2, r2
 80016c6:	440b      	add	r3, r1
 80016c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80016cc:	e00a      	b.n	80016e4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	b2da      	uxtb	r2, r3
 80016d2:	4908      	ldr	r1, [pc, #32]	; (80016f4 <__NVIC_SetPriority+0x50>)
 80016d4:	88fb      	ldrh	r3, [r7, #6]
 80016d6:	f003 030f 	and.w	r3, r3, #15
 80016da:	3b04      	subs	r3, #4
 80016dc:	0112      	lsls	r2, r2, #4
 80016de:	b2d2      	uxtb	r2, r2
 80016e0:	440b      	add	r3, r1
 80016e2:	761a      	strb	r2, [r3, #24]
}
 80016e4:	bf00      	nop
 80016e6:	370c      	adds	r7, #12
 80016e8:	46bd      	mov	sp, r7
 80016ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ee:	4770      	bx	lr
 80016f0:	e000e100 	.word	0xe000e100
 80016f4:	e000ed00 	.word	0xe000ed00

080016f8 <NVIC_EncodePriority>:
{
 80016f8:	b480      	push	{r7}
 80016fa:	b089      	sub	sp, #36	; 0x24
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	60f8      	str	r0, [r7, #12]
 8001700:	60b9      	str	r1, [r7, #8]
 8001702:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	f003 0307 	and.w	r3, r3, #7
 800170a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800170c:	69fb      	ldr	r3, [r7, #28]
 800170e:	f1c3 0307 	rsb	r3, r3, #7
 8001712:	2b04      	cmp	r3, #4
 8001714:	bf28      	it	cs
 8001716:	2304      	movcs	r3, #4
 8001718:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800171a:	69fb      	ldr	r3, [r7, #28]
 800171c:	3304      	adds	r3, #4
 800171e:	2b06      	cmp	r3, #6
 8001720:	d902      	bls.n	8001728 <NVIC_EncodePriority+0x30>
 8001722:	69fb      	ldr	r3, [r7, #28]
 8001724:	3b03      	subs	r3, #3
 8001726:	e000      	b.n	800172a <NVIC_EncodePriority+0x32>
 8001728:	2300      	movs	r3, #0
 800172a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800172c:	f04f 32ff 	mov.w	r2, #4294967295
 8001730:	69bb      	ldr	r3, [r7, #24]
 8001732:	fa02 f303 	lsl.w	r3, r2, r3
 8001736:	43da      	mvns	r2, r3
 8001738:	68bb      	ldr	r3, [r7, #8]
 800173a:	401a      	ands	r2, r3
 800173c:	697b      	ldr	r3, [r7, #20]
 800173e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001740:	f04f 31ff 	mov.w	r1, #4294967295
 8001744:	697b      	ldr	r3, [r7, #20]
 8001746:	fa01 f303 	lsl.w	r3, r1, r3
 800174a:	43d9      	mvns	r1, r3
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001750:	4313      	orrs	r3, r2
}
 8001752:	4618      	mov	r0, r3
 8001754:	3724      	adds	r7, #36	; 0x24
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr
	...

08001760 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b082      	sub	sp, #8
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	3b01      	subs	r3, #1
 800176c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001770:	d301      	bcc.n	8001776 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001772:	2301      	movs	r3, #1
 8001774:	e00f      	b.n	8001796 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001776:	4a0a      	ldr	r2, [pc, #40]	; (80017a0 <SysTick_Config+0x40>)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	3b01      	subs	r3, #1
 800177c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800177e:	210f      	movs	r1, #15
 8001780:	f04f 30ff 	mov.w	r0, #4294967295
 8001784:	f7ff ff8e 	bl	80016a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001788:	4b05      	ldr	r3, [pc, #20]	; (80017a0 <SysTick_Config+0x40>)
 800178a:	2200      	movs	r2, #0
 800178c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800178e:	4b04      	ldr	r3, [pc, #16]	; (80017a0 <SysTick_Config+0x40>)
 8001790:	2207      	movs	r2, #7
 8001792:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001794:	2300      	movs	r3, #0
}
 8001796:	4618      	mov	r0, r3
 8001798:	3708      	adds	r7, #8
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	e000e010 	.word	0xe000e010

080017a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b082      	sub	sp, #8
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017ac:	6878      	ldr	r0, [r7, #4]
 80017ae:	f7ff ff29 	bl	8001604 <__NVIC_SetPriorityGrouping>
}
 80017b2:	bf00      	nop
 80017b4:	3708      	adds	r7, #8
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}

080017ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017ba:	b580      	push	{r7, lr}
 80017bc:	b086      	sub	sp, #24
 80017be:	af00      	add	r7, sp, #0
 80017c0:	4603      	mov	r3, r0
 80017c2:	60b9      	str	r1, [r7, #8]
 80017c4:	607a      	str	r2, [r7, #4]
 80017c6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80017c8:	f7ff ff40 	bl	800164c <__NVIC_GetPriorityGrouping>
 80017cc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017ce:	687a      	ldr	r2, [r7, #4]
 80017d0:	68b9      	ldr	r1, [r7, #8]
 80017d2:	6978      	ldr	r0, [r7, #20]
 80017d4:	f7ff ff90 	bl	80016f8 <NVIC_EncodePriority>
 80017d8:	4602      	mov	r2, r0
 80017da:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80017de:	4611      	mov	r1, r2
 80017e0:	4618      	mov	r0, r3
 80017e2:	f7ff ff5f 	bl	80016a4 <__NVIC_SetPriority>
}
 80017e6:	bf00      	nop
 80017e8:	3718      	adds	r7, #24
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}

080017ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017ee:	b580      	push	{r7, lr}
 80017f0:	b082      	sub	sp, #8
 80017f2:	af00      	add	r7, sp, #0
 80017f4:	4603      	mov	r3, r0
 80017f6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017f8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017fc:	4618      	mov	r0, r3
 80017fe:	f7ff ff33 	bl	8001668 <__NVIC_EnableIRQ>
}
 8001802:	bf00      	nop
 8001804:	3708      	adds	r7, #8
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}

0800180a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800180a:	b580      	push	{r7, lr}
 800180c:	b082      	sub	sp, #8
 800180e:	af00      	add	r7, sp, #0
 8001810:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001812:	6878      	ldr	r0, [r7, #4]
 8001814:	f7ff ffa4 	bl	8001760 <SysTick_Config>
 8001818:	4603      	mov	r3, r0
}
 800181a:	4618      	mov	r0, r3
 800181c:	3708      	adds	r7, #8
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}
	...

08001824 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b082      	sub	sp, #8
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	2b00      	cmp	r3, #0
 8001830:	d101      	bne.n	8001836 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001832:	2301      	movs	r3, #1
 8001834:	e054      	b.n	80018e0 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	7f5b      	ldrb	r3, [r3, #29]
 800183a:	b2db      	uxtb	r3, r3
 800183c:	2b00      	cmp	r3, #0
 800183e:	d105      	bne.n	800184c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2200      	movs	r2, #0
 8001844:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001846:	6878      	ldr	r0, [r7, #4]
 8001848:	f7ff fc52 	bl	80010f0 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	2202      	movs	r2, #2
 8001850:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	791b      	ldrb	r3, [r3, #4]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d10c      	bne.n	8001874 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4a22      	ldr	r2, [pc, #136]	; (80018e8 <HAL_CRC_Init+0xc4>)
 8001860:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	689a      	ldr	r2, [r3, #8]
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f022 0218 	bic.w	r2, r2, #24
 8001870:	609a      	str	r2, [r3, #8]
 8001872:	e00c      	b.n	800188e <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6899      	ldr	r1, [r3, #8]
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	68db      	ldr	r3, [r3, #12]
 800187c:	461a      	mov	r2, r3
 800187e:	6878      	ldr	r0, [r7, #4]
 8001880:	f000 f834 	bl	80018ec <HAL_CRCEx_Polynomial_Set>
 8001884:	4603      	mov	r3, r0
 8001886:	2b00      	cmp	r3, #0
 8001888:	d001      	beq.n	800188e <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800188a:	2301      	movs	r3, #1
 800188c:	e028      	b.n	80018e0 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	795b      	ldrb	r3, [r3, #5]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d105      	bne.n	80018a2 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f04f 32ff 	mov.w	r2, #4294967295
 800189e:	611a      	str	r2, [r3, #16]
 80018a0:	e004      	b.n	80018ac <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	687a      	ldr	r2, [r7, #4]
 80018a8:	6912      	ldr	r2, [r2, #16]
 80018aa:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	689b      	ldr	r3, [r3, #8]
 80018b2:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	695a      	ldr	r2, [r3, #20]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	430a      	orrs	r2, r1
 80018c0:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	689b      	ldr	r3, [r3, #8]
 80018c8:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	699a      	ldr	r2, [r3, #24]
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	430a      	orrs	r2, r1
 80018d6:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	2201      	movs	r2, #1
 80018dc:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80018de:	2300      	movs	r3, #0
}
 80018e0:	4618      	mov	r0, r3
 80018e2:	3708      	adds	r7, #8
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}
 80018e8:	04c11db7 	.word	0x04c11db7

080018ec <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b087      	sub	sp, #28
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	60f8      	str	r0, [r7, #12]
 80018f4:	60b9      	str	r1, [r7, #8]
 80018f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80018f8:	2300      	movs	r3, #0
 80018fa:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80018fc:	231f      	movs	r3, #31
 80018fe:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8001900:	bf00      	nop
 8001902:	693b      	ldr	r3, [r7, #16]
 8001904:	1e5a      	subs	r2, r3, #1
 8001906:	613a      	str	r2, [r7, #16]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d009      	beq.n	8001920 <HAL_CRCEx_Polynomial_Set+0x34>
 800190c:	693b      	ldr	r3, [r7, #16]
 800190e:	f003 031f 	and.w	r3, r3, #31
 8001912:	68ba      	ldr	r2, [r7, #8]
 8001914:	fa22 f303 	lsr.w	r3, r2, r3
 8001918:	f003 0301 	and.w	r3, r3, #1
 800191c:	2b00      	cmp	r3, #0
 800191e:	d0f0      	beq.n	8001902 <HAL_CRCEx_Polynomial_Set+0x16>
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2b18      	cmp	r3, #24
 8001924:	d846      	bhi.n	80019b4 <HAL_CRCEx_Polynomial_Set+0xc8>
 8001926:	a201      	add	r2, pc, #4	; (adr r2, 800192c <HAL_CRCEx_Polynomial_Set+0x40>)
 8001928:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800192c:	080019bb 	.word	0x080019bb
 8001930:	080019b5 	.word	0x080019b5
 8001934:	080019b5 	.word	0x080019b5
 8001938:	080019b5 	.word	0x080019b5
 800193c:	080019b5 	.word	0x080019b5
 8001940:	080019b5 	.word	0x080019b5
 8001944:	080019b5 	.word	0x080019b5
 8001948:	080019b5 	.word	0x080019b5
 800194c:	080019a9 	.word	0x080019a9
 8001950:	080019b5 	.word	0x080019b5
 8001954:	080019b5 	.word	0x080019b5
 8001958:	080019b5 	.word	0x080019b5
 800195c:	080019b5 	.word	0x080019b5
 8001960:	080019b5 	.word	0x080019b5
 8001964:	080019b5 	.word	0x080019b5
 8001968:	080019b5 	.word	0x080019b5
 800196c:	0800199d 	.word	0x0800199d
 8001970:	080019b5 	.word	0x080019b5
 8001974:	080019b5 	.word	0x080019b5
 8001978:	080019b5 	.word	0x080019b5
 800197c:	080019b5 	.word	0x080019b5
 8001980:	080019b5 	.word	0x080019b5
 8001984:	080019b5 	.word	0x080019b5
 8001988:	080019b5 	.word	0x080019b5
 800198c:	08001991 	.word	0x08001991
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8001990:	693b      	ldr	r3, [r7, #16]
 8001992:	2b06      	cmp	r3, #6
 8001994:	d913      	bls.n	80019be <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8001996:	2301      	movs	r3, #1
 8001998:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800199a:	e010      	b.n	80019be <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 800199c:	693b      	ldr	r3, [r7, #16]
 800199e:	2b07      	cmp	r3, #7
 80019a0:	d90f      	bls.n	80019c2 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 80019a2:	2301      	movs	r3, #1
 80019a4:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80019a6:	e00c      	b.n	80019c2 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 80019a8:	693b      	ldr	r3, [r7, #16]
 80019aa:	2b0f      	cmp	r3, #15
 80019ac:	d90b      	bls.n	80019c6 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 80019ae:	2301      	movs	r3, #1
 80019b0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80019b2:	e008      	b.n	80019c6 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 80019b4:	2301      	movs	r3, #1
 80019b6:	75fb      	strb	r3, [r7, #23]
      break;
 80019b8:	e006      	b.n	80019c8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80019ba:	bf00      	nop
 80019bc:	e004      	b.n	80019c8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80019be:	bf00      	nop
 80019c0:	e002      	b.n	80019c8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80019c2:	bf00      	nop
 80019c4:	e000      	b.n	80019c8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80019c6:	bf00      	nop
  }
  if (status == HAL_OK)
 80019c8:	7dfb      	ldrb	r3, [r7, #23]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d10d      	bne.n	80019ea <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	68ba      	ldr	r2, [r7, #8]
 80019d4:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	689b      	ldr	r3, [r3, #8]
 80019dc:	f023 0118 	bic.w	r1, r3, #24
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	687a      	ldr	r2, [r7, #4]
 80019e6:	430a      	orrs	r2, r1
 80019e8:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80019ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	371c      	adds	r7, #28
 80019f0:	46bd      	mov	sp, r7
 80019f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f6:	4770      	bx	lr

080019f8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b086      	sub	sp, #24
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001a00:	f7ff fde8 	bl	80015d4 <HAL_GetTick>
 8001a04:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d101      	bne.n	8001a10 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	e316      	b.n	800203e <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a66      	ldr	r2, [pc, #408]	; (8001bb0 <HAL_DMA_Init+0x1b8>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d04a      	beq.n	8001ab0 <HAL_DMA_Init+0xb8>
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4a65      	ldr	r2, [pc, #404]	; (8001bb4 <HAL_DMA_Init+0x1bc>)
 8001a20:	4293      	cmp	r3, r2
 8001a22:	d045      	beq.n	8001ab0 <HAL_DMA_Init+0xb8>
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a63      	ldr	r2, [pc, #396]	; (8001bb8 <HAL_DMA_Init+0x1c0>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d040      	beq.n	8001ab0 <HAL_DMA_Init+0xb8>
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4a62      	ldr	r2, [pc, #392]	; (8001bbc <HAL_DMA_Init+0x1c4>)
 8001a34:	4293      	cmp	r3, r2
 8001a36:	d03b      	beq.n	8001ab0 <HAL_DMA_Init+0xb8>
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a60      	ldr	r2, [pc, #384]	; (8001bc0 <HAL_DMA_Init+0x1c8>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d036      	beq.n	8001ab0 <HAL_DMA_Init+0xb8>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4a5f      	ldr	r2, [pc, #380]	; (8001bc4 <HAL_DMA_Init+0x1cc>)
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	d031      	beq.n	8001ab0 <HAL_DMA_Init+0xb8>
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4a5d      	ldr	r2, [pc, #372]	; (8001bc8 <HAL_DMA_Init+0x1d0>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d02c      	beq.n	8001ab0 <HAL_DMA_Init+0xb8>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4a5c      	ldr	r2, [pc, #368]	; (8001bcc <HAL_DMA_Init+0x1d4>)
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	d027      	beq.n	8001ab0 <HAL_DMA_Init+0xb8>
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a5a      	ldr	r2, [pc, #360]	; (8001bd0 <HAL_DMA_Init+0x1d8>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d022      	beq.n	8001ab0 <HAL_DMA_Init+0xb8>
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4a59      	ldr	r2, [pc, #356]	; (8001bd4 <HAL_DMA_Init+0x1dc>)
 8001a70:	4293      	cmp	r3, r2
 8001a72:	d01d      	beq.n	8001ab0 <HAL_DMA_Init+0xb8>
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4a57      	ldr	r2, [pc, #348]	; (8001bd8 <HAL_DMA_Init+0x1e0>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d018      	beq.n	8001ab0 <HAL_DMA_Init+0xb8>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4a56      	ldr	r2, [pc, #344]	; (8001bdc <HAL_DMA_Init+0x1e4>)
 8001a84:	4293      	cmp	r3, r2
 8001a86:	d013      	beq.n	8001ab0 <HAL_DMA_Init+0xb8>
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a54      	ldr	r2, [pc, #336]	; (8001be0 <HAL_DMA_Init+0x1e8>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d00e      	beq.n	8001ab0 <HAL_DMA_Init+0xb8>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4a53      	ldr	r2, [pc, #332]	; (8001be4 <HAL_DMA_Init+0x1ec>)
 8001a98:	4293      	cmp	r3, r2
 8001a9a:	d009      	beq.n	8001ab0 <HAL_DMA_Init+0xb8>
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4a51      	ldr	r2, [pc, #324]	; (8001be8 <HAL_DMA_Init+0x1f0>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d004      	beq.n	8001ab0 <HAL_DMA_Init+0xb8>
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4a50      	ldr	r2, [pc, #320]	; (8001bec <HAL_DMA_Init+0x1f4>)
 8001aac:	4293      	cmp	r3, r2
 8001aae:	d101      	bne.n	8001ab4 <HAL_DMA_Init+0xbc>
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	e000      	b.n	8001ab6 <HAL_DMA_Init+0xbe>
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	f000 813b 	beq.w	8001d32 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2200      	movs	r2, #0
 8001ac0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2202      	movs	r2, #2
 8001ac8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a37      	ldr	r2, [pc, #220]	; (8001bb0 <HAL_DMA_Init+0x1b8>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d04a      	beq.n	8001b6c <HAL_DMA_Init+0x174>
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4a36      	ldr	r2, [pc, #216]	; (8001bb4 <HAL_DMA_Init+0x1bc>)
 8001adc:	4293      	cmp	r3, r2
 8001ade:	d045      	beq.n	8001b6c <HAL_DMA_Init+0x174>
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a34      	ldr	r2, [pc, #208]	; (8001bb8 <HAL_DMA_Init+0x1c0>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d040      	beq.n	8001b6c <HAL_DMA_Init+0x174>
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4a33      	ldr	r2, [pc, #204]	; (8001bbc <HAL_DMA_Init+0x1c4>)
 8001af0:	4293      	cmp	r3, r2
 8001af2:	d03b      	beq.n	8001b6c <HAL_DMA_Init+0x174>
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a31      	ldr	r2, [pc, #196]	; (8001bc0 <HAL_DMA_Init+0x1c8>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d036      	beq.n	8001b6c <HAL_DMA_Init+0x174>
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4a30      	ldr	r2, [pc, #192]	; (8001bc4 <HAL_DMA_Init+0x1cc>)
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d031      	beq.n	8001b6c <HAL_DMA_Init+0x174>
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a2e      	ldr	r2, [pc, #184]	; (8001bc8 <HAL_DMA_Init+0x1d0>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d02c      	beq.n	8001b6c <HAL_DMA_Init+0x174>
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4a2d      	ldr	r2, [pc, #180]	; (8001bcc <HAL_DMA_Init+0x1d4>)
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	d027      	beq.n	8001b6c <HAL_DMA_Init+0x174>
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a2b      	ldr	r2, [pc, #172]	; (8001bd0 <HAL_DMA_Init+0x1d8>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d022      	beq.n	8001b6c <HAL_DMA_Init+0x174>
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4a2a      	ldr	r2, [pc, #168]	; (8001bd4 <HAL_DMA_Init+0x1dc>)
 8001b2c:	4293      	cmp	r3, r2
 8001b2e:	d01d      	beq.n	8001b6c <HAL_DMA_Init+0x174>
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a28      	ldr	r2, [pc, #160]	; (8001bd8 <HAL_DMA_Init+0x1e0>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d018      	beq.n	8001b6c <HAL_DMA_Init+0x174>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4a27      	ldr	r2, [pc, #156]	; (8001bdc <HAL_DMA_Init+0x1e4>)
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d013      	beq.n	8001b6c <HAL_DMA_Init+0x174>
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a25      	ldr	r2, [pc, #148]	; (8001be0 <HAL_DMA_Init+0x1e8>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d00e      	beq.n	8001b6c <HAL_DMA_Init+0x174>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4a24      	ldr	r2, [pc, #144]	; (8001be4 <HAL_DMA_Init+0x1ec>)
 8001b54:	4293      	cmp	r3, r2
 8001b56:	d009      	beq.n	8001b6c <HAL_DMA_Init+0x174>
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a22      	ldr	r2, [pc, #136]	; (8001be8 <HAL_DMA_Init+0x1f0>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d004      	beq.n	8001b6c <HAL_DMA_Init+0x174>
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4a21      	ldr	r2, [pc, #132]	; (8001bec <HAL_DMA_Init+0x1f4>)
 8001b68:	4293      	cmp	r3, r2
 8001b6a:	d108      	bne.n	8001b7e <HAL_DMA_Init+0x186>
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	681a      	ldr	r2, [r3, #0]
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f022 0201 	bic.w	r2, r2, #1
 8001b7a:	601a      	str	r2, [r3, #0]
 8001b7c:	e007      	b.n	8001b8e <HAL_DMA_Init+0x196>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	681a      	ldr	r2, [r3, #0]
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f022 0201 	bic.w	r2, r2, #1
 8001b8c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001b8e:	e02f      	b.n	8001bf0 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001b90:	f7ff fd20 	bl	80015d4 <HAL_GetTick>
 8001b94:	4602      	mov	r2, r0
 8001b96:	693b      	ldr	r3, [r7, #16]
 8001b98:	1ad3      	subs	r3, r2, r3
 8001b9a:	2b05      	cmp	r3, #5
 8001b9c:	d928      	bls.n	8001bf0 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2220      	movs	r2, #32
 8001ba2:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2203      	movs	r2, #3
 8001ba8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8001bac:	2301      	movs	r3, #1
 8001bae:	e246      	b.n	800203e <HAL_DMA_Init+0x646>
 8001bb0:	40020010 	.word	0x40020010
 8001bb4:	40020028 	.word	0x40020028
 8001bb8:	40020040 	.word	0x40020040
 8001bbc:	40020058 	.word	0x40020058
 8001bc0:	40020070 	.word	0x40020070
 8001bc4:	40020088 	.word	0x40020088
 8001bc8:	400200a0 	.word	0x400200a0
 8001bcc:	400200b8 	.word	0x400200b8
 8001bd0:	40020410 	.word	0x40020410
 8001bd4:	40020428 	.word	0x40020428
 8001bd8:	40020440 	.word	0x40020440
 8001bdc:	40020458 	.word	0x40020458
 8001be0:	40020470 	.word	0x40020470
 8001be4:	40020488 	.word	0x40020488
 8001be8:	400204a0 	.word	0x400204a0
 8001bec:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f003 0301 	and.w	r3, r3, #1
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d1c8      	bne.n	8001b90 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001c06:	697a      	ldr	r2, [r7, #20]
 8001c08:	4b83      	ldr	r3, [pc, #524]	; (8001e18 <HAL_DMA_Init+0x420>)
 8001c0a:	4013      	ands	r3, r2
 8001c0c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8001c16:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	691b      	ldr	r3, [r3, #16]
 8001c1c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c22:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	699b      	ldr	r3, [r3, #24]
 8001c28:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c2e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6a1b      	ldr	r3, [r3, #32]
 8001c34:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8001c36:	697a      	ldr	r2, [r7, #20]
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c40:	2b04      	cmp	r3, #4
 8001c42:	d107      	bne.n	8001c54 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	697a      	ldr	r2, [r7, #20]
 8001c50:	4313      	orrs	r3, r2
 8001c52:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8001c54:	4b71      	ldr	r3, [pc, #452]	; (8001e1c <HAL_DMA_Init+0x424>)
 8001c56:	681a      	ldr	r2, [r3, #0]
 8001c58:	4b71      	ldr	r3, [pc, #452]	; (8001e20 <HAL_DMA_Init+0x428>)
 8001c5a:	4013      	ands	r3, r2
 8001c5c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001c60:	d328      	bcc.n	8001cb4 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	2b28      	cmp	r3, #40	; 0x28
 8001c68:	d903      	bls.n	8001c72 <HAL_DMA_Init+0x27a>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	2b2e      	cmp	r3, #46	; 0x2e
 8001c70:	d917      	bls.n	8001ca2 <HAL_DMA_Init+0x2aa>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	2b3e      	cmp	r3, #62	; 0x3e
 8001c78:	d903      	bls.n	8001c82 <HAL_DMA_Init+0x28a>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	2b42      	cmp	r3, #66	; 0x42
 8001c80:	d90f      	bls.n	8001ca2 <HAL_DMA_Init+0x2aa>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	2b46      	cmp	r3, #70	; 0x46
 8001c88:	d903      	bls.n	8001c92 <HAL_DMA_Init+0x29a>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	2b48      	cmp	r3, #72	; 0x48
 8001c90:	d907      	bls.n	8001ca2 <HAL_DMA_Init+0x2aa>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	2b4e      	cmp	r3, #78	; 0x4e
 8001c98:	d905      	bls.n	8001ca6 <HAL_DMA_Init+0x2ae>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	2b52      	cmp	r3, #82	; 0x52
 8001ca0:	d801      	bhi.n	8001ca6 <HAL_DMA_Init+0x2ae>
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	e000      	b.n	8001ca8 <HAL_DMA_Init+0x2b0>
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d003      	beq.n	8001cb4 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8001cac:	697b      	ldr	r3, [r7, #20]
 8001cae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001cb2:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	697a      	ldr	r2, [r7, #20]
 8001cba:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	695b      	ldr	r3, [r3, #20]
 8001cc2:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	f023 0307 	bic.w	r3, r3, #7
 8001cca:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cd0:	697a      	ldr	r2, [r7, #20]
 8001cd2:	4313      	orrs	r3, r2
 8001cd4:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cda:	2b04      	cmp	r3, #4
 8001cdc:	d117      	bne.n	8001d0e <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ce2:	697a      	ldr	r2, [r7, #20]
 8001ce4:	4313      	orrs	r3, r2
 8001ce6:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d00e      	beq.n	8001d0e <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001cf0:	6878      	ldr	r0, [r7, #4]
 8001cf2:	f002 fb31 	bl	8004358 <DMA_CheckFifoParam>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d008      	beq.n	8001d0e <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2240      	movs	r2, #64	; 0x40
 8001d00:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2201      	movs	r2, #1
 8001d06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	e197      	b.n	800203e <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	697a      	ldr	r2, [r7, #20]
 8001d14:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001d16:	6878      	ldr	r0, [r7, #4]
 8001d18:	f002 fa6c 	bl	80041f4 <DMA_CalcBaseAndBitshift>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d24:	f003 031f 	and.w	r3, r3, #31
 8001d28:	223f      	movs	r2, #63	; 0x3f
 8001d2a:	409a      	lsls	r2, r3
 8001d2c:	68bb      	ldr	r3, [r7, #8]
 8001d2e:	609a      	str	r2, [r3, #8]
 8001d30:	e0cd      	b.n	8001ece <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4a3b      	ldr	r2, [pc, #236]	; (8001e24 <HAL_DMA_Init+0x42c>)
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d022      	beq.n	8001d82 <HAL_DMA_Init+0x38a>
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4a39      	ldr	r2, [pc, #228]	; (8001e28 <HAL_DMA_Init+0x430>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d01d      	beq.n	8001d82 <HAL_DMA_Init+0x38a>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4a38      	ldr	r2, [pc, #224]	; (8001e2c <HAL_DMA_Init+0x434>)
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d018      	beq.n	8001d82 <HAL_DMA_Init+0x38a>
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4a36      	ldr	r2, [pc, #216]	; (8001e30 <HAL_DMA_Init+0x438>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d013      	beq.n	8001d82 <HAL_DMA_Init+0x38a>
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4a35      	ldr	r2, [pc, #212]	; (8001e34 <HAL_DMA_Init+0x43c>)
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d00e      	beq.n	8001d82 <HAL_DMA_Init+0x38a>
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a33      	ldr	r2, [pc, #204]	; (8001e38 <HAL_DMA_Init+0x440>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d009      	beq.n	8001d82 <HAL_DMA_Init+0x38a>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4a32      	ldr	r2, [pc, #200]	; (8001e3c <HAL_DMA_Init+0x444>)
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d004      	beq.n	8001d82 <HAL_DMA_Init+0x38a>
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a30      	ldr	r2, [pc, #192]	; (8001e40 <HAL_DMA_Init+0x448>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d101      	bne.n	8001d86 <HAL_DMA_Init+0x38e>
 8001d82:	2301      	movs	r3, #1
 8001d84:	e000      	b.n	8001d88 <HAL_DMA_Init+0x390>
 8001d86:	2300      	movs	r3, #0
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	f000 8097 	beq.w	8001ebc <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4a24      	ldr	r2, [pc, #144]	; (8001e24 <HAL_DMA_Init+0x42c>)
 8001d94:	4293      	cmp	r3, r2
 8001d96:	d021      	beq.n	8001ddc <HAL_DMA_Init+0x3e4>
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4a22      	ldr	r2, [pc, #136]	; (8001e28 <HAL_DMA_Init+0x430>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d01c      	beq.n	8001ddc <HAL_DMA_Init+0x3e4>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4a21      	ldr	r2, [pc, #132]	; (8001e2c <HAL_DMA_Init+0x434>)
 8001da8:	4293      	cmp	r3, r2
 8001daa:	d017      	beq.n	8001ddc <HAL_DMA_Init+0x3e4>
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a1f      	ldr	r2, [pc, #124]	; (8001e30 <HAL_DMA_Init+0x438>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d012      	beq.n	8001ddc <HAL_DMA_Init+0x3e4>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4a1e      	ldr	r2, [pc, #120]	; (8001e34 <HAL_DMA_Init+0x43c>)
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d00d      	beq.n	8001ddc <HAL_DMA_Init+0x3e4>
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a1c      	ldr	r2, [pc, #112]	; (8001e38 <HAL_DMA_Init+0x440>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d008      	beq.n	8001ddc <HAL_DMA_Init+0x3e4>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4a1b      	ldr	r2, [pc, #108]	; (8001e3c <HAL_DMA_Init+0x444>)
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d003      	beq.n	8001ddc <HAL_DMA_Init+0x3e4>
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a19      	ldr	r2, [pc, #100]	; (8001e40 <HAL_DMA_Init+0x448>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2200      	movs	r2, #0
 8001de2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2202      	movs	r2, #2
 8001dea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8001df6:	697a      	ldr	r2, [r7, #20]
 8001df8:	4b12      	ldr	r3, [pc, #72]	; (8001e44 <HAL_DMA_Init+0x44c>)
 8001dfa:	4013      	ands	r3, r2
 8001dfc:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	689b      	ldr	r3, [r3, #8]
 8001e02:	2b40      	cmp	r3, #64	; 0x40
 8001e04:	d020      	beq.n	8001e48 <HAL_DMA_Init+0x450>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	689b      	ldr	r3, [r3, #8]
 8001e0a:	2b80      	cmp	r3, #128	; 0x80
 8001e0c:	d102      	bne.n	8001e14 <HAL_DMA_Init+0x41c>
 8001e0e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001e12:	e01a      	b.n	8001e4a <HAL_DMA_Init+0x452>
 8001e14:	2300      	movs	r3, #0
 8001e16:	e018      	b.n	8001e4a <HAL_DMA_Init+0x452>
 8001e18:	fe10803f 	.word	0xfe10803f
 8001e1c:	5c001000 	.word	0x5c001000
 8001e20:	ffff0000 	.word	0xffff0000
 8001e24:	58025408 	.word	0x58025408
 8001e28:	5802541c 	.word	0x5802541c
 8001e2c:	58025430 	.word	0x58025430
 8001e30:	58025444 	.word	0x58025444
 8001e34:	58025458 	.word	0x58025458
 8001e38:	5802546c 	.word	0x5802546c
 8001e3c:	58025480 	.word	0x58025480
 8001e40:	58025494 	.word	0x58025494
 8001e44:	fffe000f 	.word	0xfffe000f
 8001e48:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001e4a:	687a      	ldr	r2, [r7, #4]
 8001e4c:	68d2      	ldr	r2, [r2, #12]
 8001e4e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001e50:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	691b      	ldr	r3, [r3, #16]
 8001e56:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001e58:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	695b      	ldr	r3, [r3, #20]
 8001e5e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001e60:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	699b      	ldr	r3, [r3, #24]
 8001e66:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001e68:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	69db      	ldr	r3, [r3, #28]
 8001e6e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001e70:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6a1b      	ldr	r3, [r3, #32]
 8001e76:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001e78:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001e7a:	697a      	ldr	r2, [r7, #20]
 8001e7c:	4313      	orrs	r3, r2
 8001e7e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	697a      	ldr	r2, [r7, #20]
 8001e86:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	461a      	mov	r2, r3
 8001e8e:	4b6e      	ldr	r3, [pc, #440]	; (8002048 <HAL_DMA_Init+0x650>)
 8001e90:	4413      	add	r3, r2
 8001e92:	4a6e      	ldr	r2, [pc, #440]	; (800204c <HAL_DMA_Init+0x654>)
 8001e94:	fba2 2303 	umull	r2, r3, r2, r3
 8001e98:	091b      	lsrs	r3, r3, #4
 8001e9a:	009a      	lsls	r2, r3, #2
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001ea0:	6878      	ldr	r0, [r7, #4]
 8001ea2:	f002 f9a7 	bl	80041f4 <DMA_CalcBaseAndBitshift>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001eae:	f003 031f 	and.w	r3, r3, #31
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	409a      	lsls	r2, r3
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	605a      	str	r2, [r3, #4]
 8001eba:	e008      	b.n	8001ece <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2240      	movs	r2, #64	; 0x40
 8001ec0:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2203      	movs	r2, #3
 8001ec6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	e0b7      	b.n	800203e <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4a5f      	ldr	r2, [pc, #380]	; (8002050 <HAL_DMA_Init+0x658>)
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	d072      	beq.n	8001fbe <HAL_DMA_Init+0x5c6>
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a5d      	ldr	r2, [pc, #372]	; (8002054 <HAL_DMA_Init+0x65c>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d06d      	beq.n	8001fbe <HAL_DMA_Init+0x5c6>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4a5c      	ldr	r2, [pc, #368]	; (8002058 <HAL_DMA_Init+0x660>)
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d068      	beq.n	8001fbe <HAL_DMA_Init+0x5c6>
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a5a      	ldr	r2, [pc, #360]	; (800205c <HAL_DMA_Init+0x664>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d063      	beq.n	8001fbe <HAL_DMA_Init+0x5c6>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4a59      	ldr	r2, [pc, #356]	; (8002060 <HAL_DMA_Init+0x668>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d05e      	beq.n	8001fbe <HAL_DMA_Init+0x5c6>
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a57      	ldr	r2, [pc, #348]	; (8002064 <HAL_DMA_Init+0x66c>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d059      	beq.n	8001fbe <HAL_DMA_Init+0x5c6>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4a56      	ldr	r2, [pc, #344]	; (8002068 <HAL_DMA_Init+0x670>)
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d054      	beq.n	8001fbe <HAL_DMA_Init+0x5c6>
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a54      	ldr	r2, [pc, #336]	; (800206c <HAL_DMA_Init+0x674>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d04f      	beq.n	8001fbe <HAL_DMA_Init+0x5c6>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4a53      	ldr	r2, [pc, #332]	; (8002070 <HAL_DMA_Init+0x678>)
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d04a      	beq.n	8001fbe <HAL_DMA_Init+0x5c6>
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a51      	ldr	r2, [pc, #324]	; (8002074 <HAL_DMA_Init+0x67c>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d045      	beq.n	8001fbe <HAL_DMA_Init+0x5c6>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4a50      	ldr	r2, [pc, #320]	; (8002078 <HAL_DMA_Init+0x680>)
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d040      	beq.n	8001fbe <HAL_DMA_Init+0x5c6>
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a4e      	ldr	r2, [pc, #312]	; (800207c <HAL_DMA_Init+0x684>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d03b      	beq.n	8001fbe <HAL_DMA_Init+0x5c6>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4a4d      	ldr	r2, [pc, #308]	; (8002080 <HAL_DMA_Init+0x688>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d036      	beq.n	8001fbe <HAL_DMA_Init+0x5c6>
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a4b      	ldr	r2, [pc, #300]	; (8002084 <HAL_DMA_Init+0x68c>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d031      	beq.n	8001fbe <HAL_DMA_Init+0x5c6>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4a4a      	ldr	r2, [pc, #296]	; (8002088 <HAL_DMA_Init+0x690>)
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d02c      	beq.n	8001fbe <HAL_DMA_Init+0x5c6>
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a48      	ldr	r2, [pc, #288]	; (800208c <HAL_DMA_Init+0x694>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d027      	beq.n	8001fbe <HAL_DMA_Init+0x5c6>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4a47      	ldr	r2, [pc, #284]	; (8002090 <HAL_DMA_Init+0x698>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d022      	beq.n	8001fbe <HAL_DMA_Init+0x5c6>
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a45      	ldr	r2, [pc, #276]	; (8002094 <HAL_DMA_Init+0x69c>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d01d      	beq.n	8001fbe <HAL_DMA_Init+0x5c6>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4a44      	ldr	r2, [pc, #272]	; (8002098 <HAL_DMA_Init+0x6a0>)
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d018      	beq.n	8001fbe <HAL_DMA_Init+0x5c6>
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a42      	ldr	r2, [pc, #264]	; (800209c <HAL_DMA_Init+0x6a4>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d013      	beq.n	8001fbe <HAL_DMA_Init+0x5c6>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4a41      	ldr	r2, [pc, #260]	; (80020a0 <HAL_DMA_Init+0x6a8>)
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d00e      	beq.n	8001fbe <HAL_DMA_Init+0x5c6>
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a3f      	ldr	r2, [pc, #252]	; (80020a4 <HAL_DMA_Init+0x6ac>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d009      	beq.n	8001fbe <HAL_DMA_Init+0x5c6>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4a3e      	ldr	r2, [pc, #248]	; (80020a8 <HAL_DMA_Init+0x6b0>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d004      	beq.n	8001fbe <HAL_DMA_Init+0x5c6>
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a3c      	ldr	r2, [pc, #240]	; (80020ac <HAL_DMA_Init+0x6b4>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d101      	bne.n	8001fc2 <HAL_DMA_Init+0x5ca>
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	e000      	b.n	8001fc4 <HAL_DMA_Init+0x5cc>
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d032      	beq.n	800202e <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001fc8:	6878      	ldr	r0, [r7, #4]
 8001fca:	f002 fa41 	bl	8004450 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	689b      	ldr	r3, [r3, #8]
 8001fd2:	2b80      	cmp	r3, #128	; 0x80
 8001fd4:	d102      	bne.n	8001fdc <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2200      	movs	r2, #0
 8001fda:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	685a      	ldr	r2, [r3, #4]
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fe4:	b2d2      	uxtb	r2, r2
 8001fe6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001fec:	687a      	ldr	r2, [r7, #4]
 8001fee:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001ff0:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d010      	beq.n	800201c <HAL_DMA_Init+0x624>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	2b08      	cmp	r3, #8
 8002000:	d80c      	bhi.n	800201c <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002002:	6878      	ldr	r0, [r7, #4]
 8002004:	f002 fabe 	bl	8004584 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800200c:	2200      	movs	r2, #0
 800200e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002014:	687a      	ldr	r2, [r7, #4]
 8002016:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002018:	605a      	str	r2, [r3, #4]
 800201a:	e008      	b.n	800202e <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2200      	movs	r2, #0
 8002020:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2200      	movs	r2, #0
 8002026:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2200      	movs	r2, #0
 800202c:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2200      	movs	r2, #0
 8002032:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2201      	movs	r2, #1
 8002038:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800203c:	2300      	movs	r3, #0
}
 800203e:	4618      	mov	r0, r3
 8002040:	3718      	adds	r7, #24
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}
 8002046:	bf00      	nop
 8002048:	a7fdabf8 	.word	0xa7fdabf8
 800204c:	cccccccd 	.word	0xcccccccd
 8002050:	40020010 	.word	0x40020010
 8002054:	40020028 	.word	0x40020028
 8002058:	40020040 	.word	0x40020040
 800205c:	40020058 	.word	0x40020058
 8002060:	40020070 	.word	0x40020070
 8002064:	40020088 	.word	0x40020088
 8002068:	400200a0 	.word	0x400200a0
 800206c:	400200b8 	.word	0x400200b8
 8002070:	40020410 	.word	0x40020410
 8002074:	40020428 	.word	0x40020428
 8002078:	40020440 	.word	0x40020440
 800207c:	40020458 	.word	0x40020458
 8002080:	40020470 	.word	0x40020470
 8002084:	40020488 	.word	0x40020488
 8002088:	400204a0 	.word	0x400204a0
 800208c:	400204b8 	.word	0x400204b8
 8002090:	58025408 	.word	0x58025408
 8002094:	5802541c 	.word	0x5802541c
 8002098:	58025430 	.word	0x58025430
 800209c:	58025444 	.word	0x58025444
 80020a0:	58025458 	.word	0x58025458
 80020a4:	5802546c 	.word	0x5802546c
 80020a8:	58025480 	.word	0x58025480
 80020ac:	58025494 	.word	0x58025494

080020b0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b086      	sub	sp, #24
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	60f8      	str	r0, [r7, #12]
 80020b8:	60b9      	str	r1, [r7, #8]
 80020ba:	607a      	str	r2, [r7, #4]
 80020bc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80020be:	2300      	movs	r3, #0
 80020c0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d101      	bne.n	80020cc <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80020c8:	2301      	movs	r3, #1
 80020ca:	e226      	b.n	800251a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80020d2:	2b01      	cmp	r3, #1
 80020d4:	d101      	bne.n	80020da <HAL_DMA_Start_IT+0x2a>
 80020d6:	2302      	movs	r3, #2
 80020d8:	e21f      	b.n	800251a <HAL_DMA_Start_IT+0x46a>
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	2201      	movs	r2, #1
 80020de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80020e8:	b2db      	uxtb	r3, r3
 80020ea:	2b01      	cmp	r3, #1
 80020ec:	f040 820a 	bne.w	8002504 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	2202      	movs	r2, #2
 80020f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	2200      	movs	r2, #0
 80020fc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4a68      	ldr	r2, [pc, #416]	; (80022a4 <HAL_DMA_Start_IT+0x1f4>)
 8002104:	4293      	cmp	r3, r2
 8002106:	d04a      	beq.n	800219e <HAL_DMA_Start_IT+0xee>
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a66      	ldr	r2, [pc, #408]	; (80022a8 <HAL_DMA_Start_IT+0x1f8>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d045      	beq.n	800219e <HAL_DMA_Start_IT+0xee>
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4a65      	ldr	r2, [pc, #404]	; (80022ac <HAL_DMA_Start_IT+0x1fc>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d040      	beq.n	800219e <HAL_DMA_Start_IT+0xee>
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a63      	ldr	r2, [pc, #396]	; (80022b0 <HAL_DMA_Start_IT+0x200>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d03b      	beq.n	800219e <HAL_DMA_Start_IT+0xee>
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4a62      	ldr	r2, [pc, #392]	; (80022b4 <HAL_DMA_Start_IT+0x204>)
 800212c:	4293      	cmp	r3, r2
 800212e:	d036      	beq.n	800219e <HAL_DMA_Start_IT+0xee>
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a60      	ldr	r2, [pc, #384]	; (80022b8 <HAL_DMA_Start_IT+0x208>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d031      	beq.n	800219e <HAL_DMA_Start_IT+0xee>
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a5f      	ldr	r2, [pc, #380]	; (80022bc <HAL_DMA_Start_IT+0x20c>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d02c      	beq.n	800219e <HAL_DMA_Start_IT+0xee>
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a5d      	ldr	r2, [pc, #372]	; (80022c0 <HAL_DMA_Start_IT+0x210>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d027      	beq.n	800219e <HAL_DMA_Start_IT+0xee>
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4a5c      	ldr	r2, [pc, #368]	; (80022c4 <HAL_DMA_Start_IT+0x214>)
 8002154:	4293      	cmp	r3, r2
 8002156:	d022      	beq.n	800219e <HAL_DMA_Start_IT+0xee>
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a5a      	ldr	r2, [pc, #360]	; (80022c8 <HAL_DMA_Start_IT+0x218>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d01d      	beq.n	800219e <HAL_DMA_Start_IT+0xee>
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4a59      	ldr	r2, [pc, #356]	; (80022cc <HAL_DMA_Start_IT+0x21c>)
 8002168:	4293      	cmp	r3, r2
 800216a:	d018      	beq.n	800219e <HAL_DMA_Start_IT+0xee>
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a57      	ldr	r2, [pc, #348]	; (80022d0 <HAL_DMA_Start_IT+0x220>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d013      	beq.n	800219e <HAL_DMA_Start_IT+0xee>
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a56      	ldr	r2, [pc, #344]	; (80022d4 <HAL_DMA_Start_IT+0x224>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d00e      	beq.n	800219e <HAL_DMA_Start_IT+0xee>
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a54      	ldr	r2, [pc, #336]	; (80022d8 <HAL_DMA_Start_IT+0x228>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d009      	beq.n	800219e <HAL_DMA_Start_IT+0xee>
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4a53      	ldr	r2, [pc, #332]	; (80022dc <HAL_DMA_Start_IT+0x22c>)
 8002190:	4293      	cmp	r3, r2
 8002192:	d004      	beq.n	800219e <HAL_DMA_Start_IT+0xee>
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a51      	ldr	r2, [pc, #324]	; (80022e0 <HAL_DMA_Start_IT+0x230>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d108      	bne.n	80021b0 <HAL_DMA_Start_IT+0x100>
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	681a      	ldr	r2, [r3, #0]
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f022 0201 	bic.w	r2, r2, #1
 80021ac:	601a      	str	r2, [r3, #0]
 80021ae:	e007      	b.n	80021c0 <HAL_DMA_Start_IT+0x110>
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	681a      	ldr	r2, [r3, #0]
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f022 0201 	bic.w	r2, r2, #1
 80021be:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	687a      	ldr	r2, [r7, #4]
 80021c4:	68b9      	ldr	r1, [r7, #8]
 80021c6:	68f8      	ldr	r0, [r7, #12]
 80021c8:	f001 fe68 	bl	8003e9c <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a34      	ldr	r2, [pc, #208]	; (80022a4 <HAL_DMA_Start_IT+0x1f4>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d04a      	beq.n	800226c <HAL_DMA_Start_IT+0x1bc>
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4a33      	ldr	r2, [pc, #204]	; (80022a8 <HAL_DMA_Start_IT+0x1f8>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	d045      	beq.n	800226c <HAL_DMA_Start_IT+0x1bc>
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a31      	ldr	r2, [pc, #196]	; (80022ac <HAL_DMA_Start_IT+0x1fc>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d040      	beq.n	800226c <HAL_DMA_Start_IT+0x1bc>
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4a30      	ldr	r2, [pc, #192]	; (80022b0 <HAL_DMA_Start_IT+0x200>)
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d03b      	beq.n	800226c <HAL_DMA_Start_IT+0x1bc>
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a2e      	ldr	r2, [pc, #184]	; (80022b4 <HAL_DMA_Start_IT+0x204>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d036      	beq.n	800226c <HAL_DMA_Start_IT+0x1bc>
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4a2d      	ldr	r2, [pc, #180]	; (80022b8 <HAL_DMA_Start_IT+0x208>)
 8002204:	4293      	cmp	r3, r2
 8002206:	d031      	beq.n	800226c <HAL_DMA_Start_IT+0x1bc>
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a2b      	ldr	r2, [pc, #172]	; (80022bc <HAL_DMA_Start_IT+0x20c>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d02c      	beq.n	800226c <HAL_DMA_Start_IT+0x1bc>
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4a2a      	ldr	r2, [pc, #168]	; (80022c0 <HAL_DMA_Start_IT+0x210>)
 8002218:	4293      	cmp	r3, r2
 800221a:	d027      	beq.n	800226c <HAL_DMA_Start_IT+0x1bc>
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a28      	ldr	r2, [pc, #160]	; (80022c4 <HAL_DMA_Start_IT+0x214>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d022      	beq.n	800226c <HAL_DMA_Start_IT+0x1bc>
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4a27      	ldr	r2, [pc, #156]	; (80022c8 <HAL_DMA_Start_IT+0x218>)
 800222c:	4293      	cmp	r3, r2
 800222e:	d01d      	beq.n	800226c <HAL_DMA_Start_IT+0x1bc>
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4a25      	ldr	r2, [pc, #148]	; (80022cc <HAL_DMA_Start_IT+0x21c>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d018      	beq.n	800226c <HAL_DMA_Start_IT+0x1bc>
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4a24      	ldr	r2, [pc, #144]	; (80022d0 <HAL_DMA_Start_IT+0x220>)
 8002240:	4293      	cmp	r3, r2
 8002242:	d013      	beq.n	800226c <HAL_DMA_Start_IT+0x1bc>
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a22      	ldr	r2, [pc, #136]	; (80022d4 <HAL_DMA_Start_IT+0x224>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d00e      	beq.n	800226c <HAL_DMA_Start_IT+0x1bc>
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4a21      	ldr	r2, [pc, #132]	; (80022d8 <HAL_DMA_Start_IT+0x228>)
 8002254:	4293      	cmp	r3, r2
 8002256:	d009      	beq.n	800226c <HAL_DMA_Start_IT+0x1bc>
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a1f      	ldr	r2, [pc, #124]	; (80022dc <HAL_DMA_Start_IT+0x22c>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d004      	beq.n	800226c <HAL_DMA_Start_IT+0x1bc>
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4a1e      	ldr	r2, [pc, #120]	; (80022e0 <HAL_DMA_Start_IT+0x230>)
 8002268:	4293      	cmp	r3, r2
 800226a:	d101      	bne.n	8002270 <HAL_DMA_Start_IT+0x1c0>
 800226c:	2301      	movs	r3, #1
 800226e:	e000      	b.n	8002272 <HAL_DMA_Start_IT+0x1c2>
 8002270:	2300      	movs	r3, #0
 8002272:	2b00      	cmp	r3, #0
 8002274:	d036      	beq.n	80022e4 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f023 021e 	bic.w	r2, r3, #30
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f042 0216 	orr.w	r2, r2, #22
 8002288:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800228e:	2b00      	cmp	r3, #0
 8002290:	d03e      	beq.n	8002310 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	681a      	ldr	r2, [r3, #0]
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f042 0208 	orr.w	r2, r2, #8
 80022a0:	601a      	str	r2, [r3, #0]
 80022a2:	e035      	b.n	8002310 <HAL_DMA_Start_IT+0x260>
 80022a4:	40020010 	.word	0x40020010
 80022a8:	40020028 	.word	0x40020028
 80022ac:	40020040 	.word	0x40020040
 80022b0:	40020058 	.word	0x40020058
 80022b4:	40020070 	.word	0x40020070
 80022b8:	40020088 	.word	0x40020088
 80022bc:	400200a0 	.word	0x400200a0
 80022c0:	400200b8 	.word	0x400200b8
 80022c4:	40020410 	.word	0x40020410
 80022c8:	40020428 	.word	0x40020428
 80022cc:	40020440 	.word	0x40020440
 80022d0:	40020458 	.word	0x40020458
 80022d4:	40020470 	.word	0x40020470
 80022d8:	40020488 	.word	0x40020488
 80022dc:	400204a0 	.word	0x400204a0
 80022e0:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f023 020e 	bic.w	r2, r3, #14
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f042 020a 	orr.w	r2, r2, #10
 80022f6:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d007      	beq.n	8002310 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	681a      	ldr	r2, [r3, #0]
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f042 0204 	orr.w	r2, r2, #4
 800230e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a83      	ldr	r2, [pc, #524]	; (8002524 <HAL_DMA_Start_IT+0x474>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d072      	beq.n	8002400 <HAL_DMA_Start_IT+0x350>
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4a82      	ldr	r2, [pc, #520]	; (8002528 <HAL_DMA_Start_IT+0x478>)
 8002320:	4293      	cmp	r3, r2
 8002322:	d06d      	beq.n	8002400 <HAL_DMA_Start_IT+0x350>
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a80      	ldr	r2, [pc, #512]	; (800252c <HAL_DMA_Start_IT+0x47c>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d068      	beq.n	8002400 <HAL_DMA_Start_IT+0x350>
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4a7f      	ldr	r2, [pc, #508]	; (8002530 <HAL_DMA_Start_IT+0x480>)
 8002334:	4293      	cmp	r3, r2
 8002336:	d063      	beq.n	8002400 <HAL_DMA_Start_IT+0x350>
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a7d      	ldr	r2, [pc, #500]	; (8002534 <HAL_DMA_Start_IT+0x484>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d05e      	beq.n	8002400 <HAL_DMA_Start_IT+0x350>
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4a7c      	ldr	r2, [pc, #496]	; (8002538 <HAL_DMA_Start_IT+0x488>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d059      	beq.n	8002400 <HAL_DMA_Start_IT+0x350>
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a7a      	ldr	r2, [pc, #488]	; (800253c <HAL_DMA_Start_IT+0x48c>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d054      	beq.n	8002400 <HAL_DMA_Start_IT+0x350>
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4a79      	ldr	r2, [pc, #484]	; (8002540 <HAL_DMA_Start_IT+0x490>)
 800235c:	4293      	cmp	r3, r2
 800235e:	d04f      	beq.n	8002400 <HAL_DMA_Start_IT+0x350>
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a77      	ldr	r2, [pc, #476]	; (8002544 <HAL_DMA_Start_IT+0x494>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d04a      	beq.n	8002400 <HAL_DMA_Start_IT+0x350>
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4a76      	ldr	r2, [pc, #472]	; (8002548 <HAL_DMA_Start_IT+0x498>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d045      	beq.n	8002400 <HAL_DMA_Start_IT+0x350>
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a74      	ldr	r2, [pc, #464]	; (800254c <HAL_DMA_Start_IT+0x49c>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d040      	beq.n	8002400 <HAL_DMA_Start_IT+0x350>
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a73      	ldr	r2, [pc, #460]	; (8002550 <HAL_DMA_Start_IT+0x4a0>)
 8002384:	4293      	cmp	r3, r2
 8002386:	d03b      	beq.n	8002400 <HAL_DMA_Start_IT+0x350>
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a71      	ldr	r2, [pc, #452]	; (8002554 <HAL_DMA_Start_IT+0x4a4>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d036      	beq.n	8002400 <HAL_DMA_Start_IT+0x350>
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4a70      	ldr	r2, [pc, #448]	; (8002558 <HAL_DMA_Start_IT+0x4a8>)
 8002398:	4293      	cmp	r3, r2
 800239a:	d031      	beq.n	8002400 <HAL_DMA_Start_IT+0x350>
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a6e      	ldr	r2, [pc, #440]	; (800255c <HAL_DMA_Start_IT+0x4ac>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d02c      	beq.n	8002400 <HAL_DMA_Start_IT+0x350>
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4a6d      	ldr	r2, [pc, #436]	; (8002560 <HAL_DMA_Start_IT+0x4b0>)
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d027      	beq.n	8002400 <HAL_DMA_Start_IT+0x350>
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a6b      	ldr	r2, [pc, #428]	; (8002564 <HAL_DMA_Start_IT+0x4b4>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d022      	beq.n	8002400 <HAL_DMA_Start_IT+0x350>
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4a6a      	ldr	r2, [pc, #424]	; (8002568 <HAL_DMA_Start_IT+0x4b8>)
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d01d      	beq.n	8002400 <HAL_DMA_Start_IT+0x350>
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a68      	ldr	r2, [pc, #416]	; (800256c <HAL_DMA_Start_IT+0x4bc>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d018      	beq.n	8002400 <HAL_DMA_Start_IT+0x350>
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4a67      	ldr	r2, [pc, #412]	; (8002570 <HAL_DMA_Start_IT+0x4c0>)
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d013      	beq.n	8002400 <HAL_DMA_Start_IT+0x350>
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4a65      	ldr	r2, [pc, #404]	; (8002574 <HAL_DMA_Start_IT+0x4c4>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d00e      	beq.n	8002400 <HAL_DMA_Start_IT+0x350>
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4a64      	ldr	r2, [pc, #400]	; (8002578 <HAL_DMA_Start_IT+0x4c8>)
 80023e8:	4293      	cmp	r3, r2
 80023ea:	d009      	beq.n	8002400 <HAL_DMA_Start_IT+0x350>
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a62      	ldr	r2, [pc, #392]	; (800257c <HAL_DMA_Start_IT+0x4cc>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d004      	beq.n	8002400 <HAL_DMA_Start_IT+0x350>
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4a61      	ldr	r2, [pc, #388]	; (8002580 <HAL_DMA_Start_IT+0x4d0>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d101      	bne.n	8002404 <HAL_DMA_Start_IT+0x354>
 8002400:	2301      	movs	r3, #1
 8002402:	e000      	b.n	8002406 <HAL_DMA_Start_IT+0x356>
 8002404:	2300      	movs	r3, #0
 8002406:	2b00      	cmp	r3, #0
 8002408:	d01a      	beq.n	8002440 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002414:	2b00      	cmp	r3, #0
 8002416:	d007      	beq.n	8002428 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800241c:	681a      	ldr	r2, [r3, #0]
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002422:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002426:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800242c:	2b00      	cmp	r3, #0
 800242e:	d007      	beq.n	8002440 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002434:	681a      	ldr	r2, [r3, #0]
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800243a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800243e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a37      	ldr	r2, [pc, #220]	; (8002524 <HAL_DMA_Start_IT+0x474>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d04a      	beq.n	80024e0 <HAL_DMA_Start_IT+0x430>
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4a36      	ldr	r2, [pc, #216]	; (8002528 <HAL_DMA_Start_IT+0x478>)
 8002450:	4293      	cmp	r3, r2
 8002452:	d045      	beq.n	80024e0 <HAL_DMA_Start_IT+0x430>
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a34      	ldr	r2, [pc, #208]	; (800252c <HAL_DMA_Start_IT+0x47c>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d040      	beq.n	80024e0 <HAL_DMA_Start_IT+0x430>
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4a33      	ldr	r2, [pc, #204]	; (8002530 <HAL_DMA_Start_IT+0x480>)
 8002464:	4293      	cmp	r3, r2
 8002466:	d03b      	beq.n	80024e0 <HAL_DMA_Start_IT+0x430>
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a31      	ldr	r2, [pc, #196]	; (8002534 <HAL_DMA_Start_IT+0x484>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d036      	beq.n	80024e0 <HAL_DMA_Start_IT+0x430>
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4a30      	ldr	r2, [pc, #192]	; (8002538 <HAL_DMA_Start_IT+0x488>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d031      	beq.n	80024e0 <HAL_DMA_Start_IT+0x430>
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a2e      	ldr	r2, [pc, #184]	; (800253c <HAL_DMA_Start_IT+0x48c>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d02c      	beq.n	80024e0 <HAL_DMA_Start_IT+0x430>
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a2d      	ldr	r2, [pc, #180]	; (8002540 <HAL_DMA_Start_IT+0x490>)
 800248c:	4293      	cmp	r3, r2
 800248e:	d027      	beq.n	80024e0 <HAL_DMA_Start_IT+0x430>
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a2b      	ldr	r2, [pc, #172]	; (8002544 <HAL_DMA_Start_IT+0x494>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d022      	beq.n	80024e0 <HAL_DMA_Start_IT+0x430>
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4a2a      	ldr	r2, [pc, #168]	; (8002548 <HAL_DMA_Start_IT+0x498>)
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d01d      	beq.n	80024e0 <HAL_DMA_Start_IT+0x430>
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4a28      	ldr	r2, [pc, #160]	; (800254c <HAL_DMA_Start_IT+0x49c>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d018      	beq.n	80024e0 <HAL_DMA_Start_IT+0x430>
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4a27      	ldr	r2, [pc, #156]	; (8002550 <HAL_DMA_Start_IT+0x4a0>)
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d013      	beq.n	80024e0 <HAL_DMA_Start_IT+0x430>
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a25      	ldr	r2, [pc, #148]	; (8002554 <HAL_DMA_Start_IT+0x4a4>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d00e      	beq.n	80024e0 <HAL_DMA_Start_IT+0x430>
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4a24      	ldr	r2, [pc, #144]	; (8002558 <HAL_DMA_Start_IT+0x4a8>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d009      	beq.n	80024e0 <HAL_DMA_Start_IT+0x430>
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a22      	ldr	r2, [pc, #136]	; (800255c <HAL_DMA_Start_IT+0x4ac>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d004      	beq.n	80024e0 <HAL_DMA_Start_IT+0x430>
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4a21      	ldr	r2, [pc, #132]	; (8002560 <HAL_DMA_Start_IT+0x4b0>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	d108      	bne.n	80024f2 <HAL_DMA_Start_IT+0x442>
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	681a      	ldr	r2, [r3, #0]
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f042 0201 	orr.w	r2, r2, #1
 80024ee:	601a      	str	r2, [r3, #0]
 80024f0:	e012      	b.n	8002518 <HAL_DMA_Start_IT+0x468>
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	681a      	ldr	r2, [r3, #0]
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f042 0201 	orr.w	r2, r2, #1
 8002500:	601a      	str	r2, [r3, #0]
 8002502:	e009      	b.n	8002518 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	2200      	movs	r2, #0
 8002508:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002512:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 8002514:	2301      	movs	r3, #1
 8002516:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8002518:	7dfb      	ldrb	r3, [r7, #23]
}
 800251a:	4618      	mov	r0, r3
 800251c:	3718      	adds	r7, #24
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}
 8002522:	bf00      	nop
 8002524:	40020010 	.word	0x40020010
 8002528:	40020028 	.word	0x40020028
 800252c:	40020040 	.word	0x40020040
 8002530:	40020058 	.word	0x40020058
 8002534:	40020070 	.word	0x40020070
 8002538:	40020088 	.word	0x40020088
 800253c:	400200a0 	.word	0x400200a0
 8002540:	400200b8 	.word	0x400200b8
 8002544:	40020410 	.word	0x40020410
 8002548:	40020428 	.word	0x40020428
 800254c:	40020440 	.word	0x40020440
 8002550:	40020458 	.word	0x40020458
 8002554:	40020470 	.word	0x40020470
 8002558:	40020488 	.word	0x40020488
 800255c:	400204a0 	.word	0x400204a0
 8002560:	400204b8 	.word	0x400204b8
 8002564:	58025408 	.word	0x58025408
 8002568:	5802541c 	.word	0x5802541c
 800256c:	58025430 	.word	0x58025430
 8002570:	58025444 	.word	0x58025444
 8002574:	58025458 	.word	0x58025458
 8002578:	5802546c 	.word	0x5802546c
 800257c:	58025480 	.word	0x58025480
 8002580:	58025494 	.word	0x58025494

08002584 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b086      	sub	sp, #24
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 800258c:	f7ff f822 	bl	80015d4 <HAL_GetTick>
 8002590:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d101      	bne.n	800259c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002598:	2301      	movs	r3, #1
 800259a:	e2dc      	b.n	8002b56 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80025a2:	b2db      	uxtb	r3, r3
 80025a4:	2b02      	cmp	r3, #2
 80025a6:	d008      	beq.n	80025ba <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2280      	movs	r2, #128	; 0x80
 80025ac:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2200      	movs	r2, #0
 80025b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 80025b6:	2301      	movs	r3, #1
 80025b8:	e2cd      	b.n	8002b56 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4a76      	ldr	r2, [pc, #472]	; (8002798 <HAL_DMA_Abort+0x214>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d04a      	beq.n	800265a <HAL_DMA_Abort+0xd6>
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a74      	ldr	r2, [pc, #464]	; (800279c <HAL_DMA_Abort+0x218>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d045      	beq.n	800265a <HAL_DMA_Abort+0xd6>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a73      	ldr	r2, [pc, #460]	; (80027a0 <HAL_DMA_Abort+0x21c>)
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d040      	beq.n	800265a <HAL_DMA_Abort+0xd6>
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a71      	ldr	r2, [pc, #452]	; (80027a4 <HAL_DMA_Abort+0x220>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d03b      	beq.n	800265a <HAL_DMA_Abort+0xd6>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4a70      	ldr	r2, [pc, #448]	; (80027a8 <HAL_DMA_Abort+0x224>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d036      	beq.n	800265a <HAL_DMA_Abort+0xd6>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a6e      	ldr	r2, [pc, #440]	; (80027ac <HAL_DMA_Abort+0x228>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d031      	beq.n	800265a <HAL_DMA_Abort+0xd6>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4a6d      	ldr	r2, [pc, #436]	; (80027b0 <HAL_DMA_Abort+0x22c>)
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d02c      	beq.n	800265a <HAL_DMA_Abort+0xd6>
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a6b      	ldr	r2, [pc, #428]	; (80027b4 <HAL_DMA_Abort+0x230>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d027      	beq.n	800265a <HAL_DMA_Abort+0xd6>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4a6a      	ldr	r2, [pc, #424]	; (80027b8 <HAL_DMA_Abort+0x234>)
 8002610:	4293      	cmp	r3, r2
 8002612:	d022      	beq.n	800265a <HAL_DMA_Abort+0xd6>
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a68      	ldr	r2, [pc, #416]	; (80027bc <HAL_DMA_Abort+0x238>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d01d      	beq.n	800265a <HAL_DMA_Abort+0xd6>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4a67      	ldr	r2, [pc, #412]	; (80027c0 <HAL_DMA_Abort+0x23c>)
 8002624:	4293      	cmp	r3, r2
 8002626:	d018      	beq.n	800265a <HAL_DMA_Abort+0xd6>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a65      	ldr	r2, [pc, #404]	; (80027c4 <HAL_DMA_Abort+0x240>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d013      	beq.n	800265a <HAL_DMA_Abort+0xd6>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4a64      	ldr	r2, [pc, #400]	; (80027c8 <HAL_DMA_Abort+0x244>)
 8002638:	4293      	cmp	r3, r2
 800263a:	d00e      	beq.n	800265a <HAL_DMA_Abort+0xd6>
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a62      	ldr	r2, [pc, #392]	; (80027cc <HAL_DMA_Abort+0x248>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d009      	beq.n	800265a <HAL_DMA_Abort+0xd6>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4a61      	ldr	r2, [pc, #388]	; (80027d0 <HAL_DMA_Abort+0x24c>)
 800264c:	4293      	cmp	r3, r2
 800264e:	d004      	beq.n	800265a <HAL_DMA_Abort+0xd6>
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4a5f      	ldr	r2, [pc, #380]	; (80027d4 <HAL_DMA_Abort+0x250>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d101      	bne.n	800265e <HAL_DMA_Abort+0xda>
 800265a:	2301      	movs	r3, #1
 800265c:	e000      	b.n	8002660 <HAL_DMA_Abort+0xdc>
 800265e:	2300      	movs	r3, #0
 8002660:	2b00      	cmp	r3, #0
 8002662:	d013      	beq.n	800268c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	681a      	ldr	r2, [r3, #0]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f022 021e 	bic.w	r2, r2, #30
 8002672:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	695a      	ldr	r2, [r3, #20]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002682:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	617b      	str	r3, [r7, #20]
 800268a:	e00a      	b.n	80026a2 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	681a      	ldr	r2, [r3, #0]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f022 020e 	bic.w	r2, r2, #14
 800269a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4a3c      	ldr	r2, [pc, #240]	; (8002798 <HAL_DMA_Abort+0x214>)
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d072      	beq.n	8002792 <HAL_DMA_Abort+0x20e>
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a3a      	ldr	r2, [pc, #232]	; (800279c <HAL_DMA_Abort+0x218>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d06d      	beq.n	8002792 <HAL_DMA_Abort+0x20e>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a39      	ldr	r2, [pc, #228]	; (80027a0 <HAL_DMA_Abort+0x21c>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d068      	beq.n	8002792 <HAL_DMA_Abort+0x20e>
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a37      	ldr	r2, [pc, #220]	; (80027a4 <HAL_DMA_Abort+0x220>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d063      	beq.n	8002792 <HAL_DMA_Abort+0x20e>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a36      	ldr	r2, [pc, #216]	; (80027a8 <HAL_DMA_Abort+0x224>)
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d05e      	beq.n	8002792 <HAL_DMA_Abort+0x20e>
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a34      	ldr	r2, [pc, #208]	; (80027ac <HAL_DMA_Abort+0x228>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d059      	beq.n	8002792 <HAL_DMA_Abort+0x20e>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4a33      	ldr	r2, [pc, #204]	; (80027b0 <HAL_DMA_Abort+0x22c>)
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d054      	beq.n	8002792 <HAL_DMA_Abort+0x20e>
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a31      	ldr	r2, [pc, #196]	; (80027b4 <HAL_DMA_Abort+0x230>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d04f      	beq.n	8002792 <HAL_DMA_Abort+0x20e>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4a30      	ldr	r2, [pc, #192]	; (80027b8 <HAL_DMA_Abort+0x234>)
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d04a      	beq.n	8002792 <HAL_DMA_Abort+0x20e>
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a2e      	ldr	r2, [pc, #184]	; (80027bc <HAL_DMA_Abort+0x238>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d045      	beq.n	8002792 <HAL_DMA_Abort+0x20e>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4a2d      	ldr	r2, [pc, #180]	; (80027c0 <HAL_DMA_Abort+0x23c>)
 800270c:	4293      	cmp	r3, r2
 800270e:	d040      	beq.n	8002792 <HAL_DMA_Abort+0x20e>
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a2b      	ldr	r2, [pc, #172]	; (80027c4 <HAL_DMA_Abort+0x240>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d03b      	beq.n	8002792 <HAL_DMA_Abort+0x20e>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4a2a      	ldr	r2, [pc, #168]	; (80027c8 <HAL_DMA_Abort+0x244>)
 8002720:	4293      	cmp	r3, r2
 8002722:	d036      	beq.n	8002792 <HAL_DMA_Abort+0x20e>
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a28      	ldr	r2, [pc, #160]	; (80027cc <HAL_DMA_Abort+0x248>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d031      	beq.n	8002792 <HAL_DMA_Abort+0x20e>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4a27      	ldr	r2, [pc, #156]	; (80027d0 <HAL_DMA_Abort+0x24c>)
 8002734:	4293      	cmp	r3, r2
 8002736:	d02c      	beq.n	8002792 <HAL_DMA_Abort+0x20e>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a25      	ldr	r2, [pc, #148]	; (80027d4 <HAL_DMA_Abort+0x250>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d027      	beq.n	8002792 <HAL_DMA_Abort+0x20e>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a24      	ldr	r2, [pc, #144]	; (80027d8 <HAL_DMA_Abort+0x254>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d022      	beq.n	8002792 <HAL_DMA_Abort+0x20e>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a22      	ldr	r2, [pc, #136]	; (80027dc <HAL_DMA_Abort+0x258>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d01d      	beq.n	8002792 <HAL_DMA_Abort+0x20e>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a21      	ldr	r2, [pc, #132]	; (80027e0 <HAL_DMA_Abort+0x25c>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d018      	beq.n	8002792 <HAL_DMA_Abort+0x20e>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a1f      	ldr	r2, [pc, #124]	; (80027e4 <HAL_DMA_Abort+0x260>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d013      	beq.n	8002792 <HAL_DMA_Abort+0x20e>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a1e      	ldr	r2, [pc, #120]	; (80027e8 <HAL_DMA_Abort+0x264>)
 8002770:	4293      	cmp	r3, r2
 8002772:	d00e      	beq.n	8002792 <HAL_DMA_Abort+0x20e>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a1c      	ldr	r2, [pc, #112]	; (80027ec <HAL_DMA_Abort+0x268>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d009      	beq.n	8002792 <HAL_DMA_Abort+0x20e>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4a1b      	ldr	r2, [pc, #108]	; (80027f0 <HAL_DMA_Abort+0x26c>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d004      	beq.n	8002792 <HAL_DMA_Abort+0x20e>
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a19      	ldr	r2, [pc, #100]	; (80027f4 <HAL_DMA_Abort+0x270>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d132      	bne.n	80027f8 <HAL_DMA_Abort+0x274>
 8002792:	2301      	movs	r3, #1
 8002794:	e031      	b.n	80027fa <HAL_DMA_Abort+0x276>
 8002796:	bf00      	nop
 8002798:	40020010 	.word	0x40020010
 800279c:	40020028 	.word	0x40020028
 80027a0:	40020040 	.word	0x40020040
 80027a4:	40020058 	.word	0x40020058
 80027a8:	40020070 	.word	0x40020070
 80027ac:	40020088 	.word	0x40020088
 80027b0:	400200a0 	.word	0x400200a0
 80027b4:	400200b8 	.word	0x400200b8
 80027b8:	40020410 	.word	0x40020410
 80027bc:	40020428 	.word	0x40020428
 80027c0:	40020440 	.word	0x40020440
 80027c4:	40020458 	.word	0x40020458
 80027c8:	40020470 	.word	0x40020470
 80027cc:	40020488 	.word	0x40020488
 80027d0:	400204a0 	.word	0x400204a0
 80027d4:	400204b8 	.word	0x400204b8
 80027d8:	58025408 	.word	0x58025408
 80027dc:	5802541c 	.word	0x5802541c
 80027e0:	58025430 	.word	0x58025430
 80027e4:	58025444 	.word	0x58025444
 80027e8:	58025458 	.word	0x58025458
 80027ec:	5802546c 	.word	0x5802546c
 80027f0:	58025480 	.word	0x58025480
 80027f4:	58025494 	.word	0x58025494
 80027f8:	2300      	movs	r3, #0
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d007      	beq.n	800280e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002802:	681a      	ldr	r2, [r3, #0]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002808:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800280c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4a6d      	ldr	r2, [pc, #436]	; (80029c8 <HAL_DMA_Abort+0x444>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d04a      	beq.n	80028ae <HAL_DMA_Abort+0x32a>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a6b      	ldr	r2, [pc, #428]	; (80029cc <HAL_DMA_Abort+0x448>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d045      	beq.n	80028ae <HAL_DMA_Abort+0x32a>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a6a      	ldr	r2, [pc, #424]	; (80029d0 <HAL_DMA_Abort+0x44c>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d040      	beq.n	80028ae <HAL_DMA_Abort+0x32a>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a68      	ldr	r2, [pc, #416]	; (80029d4 <HAL_DMA_Abort+0x450>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d03b      	beq.n	80028ae <HAL_DMA_Abort+0x32a>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a67      	ldr	r2, [pc, #412]	; (80029d8 <HAL_DMA_Abort+0x454>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d036      	beq.n	80028ae <HAL_DMA_Abort+0x32a>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a65      	ldr	r2, [pc, #404]	; (80029dc <HAL_DMA_Abort+0x458>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d031      	beq.n	80028ae <HAL_DMA_Abort+0x32a>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a64      	ldr	r2, [pc, #400]	; (80029e0 <HAL_DMA_Abort+0x45c>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d02c      	beq.n	80028ae <HAL_DMA_Abort+0x32a>
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a62      	ldr	r2, [pc, #392]	; (80029e4 <HAL_DMA_Abort+0x460>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d027      	beq.n	80028ae <HAL_DMA_Abort+0x32a>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a61      	ldr	r2, [pc, #388]	; (80029e8 <HAL_DMA_Abort+0x464>)
 8002864:	4293      	cmp	r3, r2
 8002866:	d022      	beq.n	80028ae <HAL_DMA_Abort+0x32a>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a5f      	ldr	r2, [pc, #380]	; (80029ec <HAL_DMA_Abort+0x468>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d01d      	beq.n	80028ae <HAL_DMA_Abort+0x32a>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a5e      	ldr	r2, [pc, #376]	; (80029f0 <HAL_DMA_Abort+0x46c>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d018      	beq.n	80028ae <HAL_DMA_Abort+0x32a>
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a5c      	ldr	r2, [pc, #368]	; (80029f4 <HAL_DMA_Abort+0x470>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d013      	beq.n	80028ae <HAL_DMA_Abort+0x32a>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4a5b      	ldr	r2, [pc, #364]	; (80029f8 <HAL_DMA_Abort+0x474>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d00e      	beq.n	80028ae <HAL_DMA_Abort+0x32a>
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a59      	ldr	r2, [pc, #356]	; (80029fc <HAL_DMA_Abort+0x478>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d009      	beq.n	80028ae <HAL_DMA_Abort+0x32a>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4a58      	ldr	r2, [pc, #352]	; (8002a00 <HAL_DMA_Abort+0x47c>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d004      	beq.n	80028ae <HAL_DMA_Abort+0x32a>
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a56      	ldr	r2, [pc, #344]	; (8002a04 <HAL_DMA_Abort+0x480>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d108      	bne.n	80028c0 <HAL_DMA_Abort+0x33c>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	681a      	ldr	r2, [r3, #0]
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f022 0201 	bic.w	r2, r2, #1
 80028bc:	601a      	str	r2, [r3, #0]
 80028be:	e007      	b.n	80028d0 <HAL_DMA_Abort+0x34c>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	681a      	ldr	r2, [r3, #0]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f022 0201 	bic.w	r2, r2, #1
 80028ce:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80028d0:	e013      	b.n	80028fa <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80028d2:	f7fe fe7f 	bl	80015d4 <HAL_GetTick>
 80028d6:	4602      	mov	r2, r0
 80028d8:	693b      	ldr	r3, [r7, #16]
 80028da:	1ad3      	subs	r3, r2, r3
 80028dc:	2b05      	cmp	r3, #5
 80028de:	d90c      	bls.n	80028fa <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2220      	movs	r2, #32
 80028e4:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2200      	movs	r2, #0
 80028ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2203      	movs	r2, #3
 80028f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80028f6:	2301      	movs	r3, #1
 80028f8:	e12d      	b.n	8002b56 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80028fa:	697b      	ldr	r3, [r7, #20]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f003 0301 	and.w	r3, r3, #1
 8002902:	2b00      	cmp	r3, #0
 8002904:	d1e5      	bne.n	80028d2 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a2f      	ldr	r2, [pc, #188]	; (80029c8 <HAL_DMA_Abort+0x444>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d04a      	beq.n	80029a6 <HAL_DMA_Abort+0x422>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a2d      	ldr	r2, [pc, #180]	; (80029cc <HAL_DMA_Abort+0x448>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d045      	beq.n	80029a6 <HAL_DMA_Abort+0x422>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4a2c      	ldr	r2, [pc, #176]	; (80029d0 <HAL_DMA_Abort+0x44c>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d040      	beq.n	80029a6 <HAL_DMA_Abort+0x422>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a2a      	ldr	r2, [pc, #168]	; (80029d4 <HAL_DMA_Abort+0x450>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d03b      	beq.n	80029a6 <HAL_DMA_Abort+0x422>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4a29      	ldr	r2, [pc, #164]	; (80029d8 <HAL_DMA_Abort+0x454>)
 8002934:	4293      	cmp	r3, r2
 8002936:	d036      	beq.n	80029a6 <HAL_DMA_Abort+0x422>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a27      	ldr	r2, [pc, #156]	; (80029dc <HAL_DMA_Abort+0x458>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d031      	beq.n	80029a6 <HAL_DMA_Abort+0x422>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a26      	ldr	r2, [pc, #152]	; (80029e0 <HAL_DMA_Abort+0x45c>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d02c      	beq.n	80029a6 <HAL_DMA_Abort+0x422>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a24      	ldr	r2, [pc, #144]	; (80029e4 <HAL_DMA_Abort+0x460>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d027      	beq.n	80029a6 <HAL_DMA_Abort+0x422>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4a23      	ldr	r2, [pc, #140]	; (80029e8 <HAL_DMA_Abort+0x464>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d022      	beq.n	80029a6 <HAL_DMA_Abort+0x422>
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a21      	ldr	r2, [pc, #132]	; (80029ec <HAL_DMA_Abort+0x468>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d01d      	beq.n	80029a6 <HAL_DMA_Abort+0x422>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4a20      	ldr	r2, [pc, #128]	; (80029f0 <HAL_DMA_Abort+0x46c>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d018      	beq.n	80029a6 <HAL_DMA_Abort+0x422>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4a1e      	ldr	r2, [pc, #120]	; (80029f4 <HAL_DMA_Abort+0x470>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d013      	beq.n	80029a6 <HAL_DMA_Abort+0x422>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4a1d      	ldr	r2, [pc, #116]	; (80029f8 <HAL_DMA_Abort+0x474>)
 8002984:	4293      	cmp	r3, r2
 8002986:	d00e      	beq.n	80029a6 <HAL_DMA_Abort+0x422>
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a1b      	ldr	r2, [pc, #108]	; (80029fc <HAL_DMA_Abort+0x478>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d009      	beq.n	80029a6 <HAL_DMA_Abort+0x422>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4a1a      	ldr	r2, [pc, #104]	; (8002a00 <HAL_DMA_Abort+0x47c>)
 8002998:	4293      	cmp	r3, r2
 800299a:	d004      	beq.n	80029a6 <HAL_DMA_Abort+0x422>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a18      	ldr	r2, [pc, #96]	; (8002a04 <HAL_DMA_Abort+0x480>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d101      	bne.n	80029aa <HAL_DMA_Abort+0x426>
 80029a6:	2301      	movs	r3, #1
 80029a8:	e000      	b.n	80029ac <HAL_DMA_Abort+0x428>
 80029aa:	2300      	movs	r3, #0
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d02b      	beq.n	8002a08 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029b4:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029ba:	f003 031f 	and.w	r3, r3, #31
 80029be:	223f      	movs	r2, #63	; 0x3f
 80029c0:	409a      	lsls	r2, r3
 80029c2:	68bb      	ldr	r3, [r7, #8]
 80029c4:	609a      	str	r2, [r3, #8]
 80029c6:	e02a      	b.n	8002a1e <HAL_DMA_Abort+0x49a>
 80029c8:	40020010 	.word	0x40020010
 80029cc:	40020028 	.word	0x40020028
 80029d0:	40020040 	.word	0x40020040
 80029d4:	40020058 	.word	0x40020058
 80029d8:	40020070 	.word	0x40020070
 80029dc:	40020088 	.word	0x40020088
 80029e0:	400200a0 	.word	0x400200a0
 80029e4:	400200b8 	.word	0x400200b8
 80029e8:	40020410 	.word	0x40020410
 80029ec:	40020428 	.word	0x40020428
 80029f0:	40020440 	.word	0x40020440
 80029f4:	40020458 	.word	0x40020458
 80029f8:	40020470 	.word	0x40020470
 80029fc:	40020488 	.word	0x40020488
 8002a00:	400204a0 	.word	0x400204a0
 8002a04:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a0c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a12:	f003 031f 	and.w	r3, r3, #31
 8002a16:	2201      	movs	r2, #1
 8002a18:	409a      	lsls	r2, r3
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4a4f      	ldr	r2, [pc, #316]	; (8002b60 <HAL_DMA_Abort+0x5dc>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d072      	beq.n	8002b0e <HAL_DMA_Abort+0x58a>
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a4d      	ldr	r2, [pc, #308]	; (8002b64 <HAL_DMA_Abort+0x5e0>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d06d      	beq.n	8002b0e <HAL_DMA_Abort+0x58a>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4a4c      	ldr	r2, [pc, #304]	; (8002b68 <HAL_DMA_Abort+0x5e4>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d068      	beq.n	8002b0e <HAL_DMA_Abort+0x58a>
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4a4a      	ldr	r2, [pc, #296]	; (8002b6c <HAL_DMA_Abort+0x5e8>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d063      	beq.n	8002b0e <HAL_DMA_Abort+0x58a>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4a49      	ldr	r2, [pc, #292]	; (8002b70 <HAL_DMA_Abort+0x5ec>)
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d05e      	beq.n	8002b0e <HAL_DMA_Abort+0x58a>
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a47      	ldr	r2, [pc, #284]	; (8002b74 <HAL_DMA_Abort+0x5f0>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d059      	beq.n	8002b0e <HAL_DMA_Abort+0x58a>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4a46      	ldr	r2, [pc, #280]	; (8002b78 <HAL_DMA_Abort+0x5f4>)
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d054      	beq.n	8002b0e <HAL_DMA_Abort+0x58a>
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a44      	ldr	r2, [pc, #272]	; (8002b7c <HAL_DMA_Abort+0x5f8>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d04f      	beq.n	8002b0e <HAL_DMA_Abort+0x58a>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4a43      	ldr	r2, [pc, #268]	; (8002b80 <HAL_DMA_Abort+0x5fc>)
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d04a      	beq.n	8002b0e <HAL_DMA_Abort+0x58a>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a41      	ldr	r2, [pc, #260]	; (8002b84 <HAL_DMA_Abort+0x600>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d045      	beq.n	8002b0e <HAL_DMA_Abort+0x58a>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4a40      	ldr	r2, [pc, #256]	; (8002b88 <HAL_DMA_Abort+0x604>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d040      	beq.n	8002b0e <HAL_DMA_Abort+0x58a>
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a3e      	ldr	r2, [pc, #248]	; (8002b8c <HAL_DMA_Abort+0x608>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d03b      	beq.n	8002b0e <HAL_DMA_Abort+0x58a>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4a3d      	ldr	r2, [pc, #244]	; (8002b90 <HAL_DMA_Abort+0x60c>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d036      	beq.n	8002b0e <HAL_DMA_Abort+0x58a>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a3b      	ldr	r2, [pc, #236]	; (8002b94 <HAL_DMA_Abort+0x610>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d031      	beq.n	8002b0e <HAL_DMA_Abort+0x58a>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4a3a      	ldr	r2, [pc, #232]	; (8002b98 <HAL_DMA_Abort+0x614>)
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d02c      	beq.n	8002b0e <HAL_DMA_Abort+0x58a>
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a38      	ldr	r2, [pc, #224]	; (8002b9c <HAL_DMA_Abort+0x618>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d027      	beq.n	8002b0e <HAL_DMA_Abort+0x58a>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4a37      	ldr	r2, [pc, #220]	; (8002ba0 <HAL_DMA_Abort+0x61c>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d022      	beq.n	8002b0e <HAL_DMA_Abort+0x58a>
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a35      	ldr	r2, [pc, #212]	; (8002ba4 <HAL_DMA_Abort+0x620>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d01d      	beq.n	8002b0e <HAL_DMA_Abort+0x58a>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4a34      	ldr	r2, [pc, #208]	; (8002ba8 <HAL_DMA_Abort+0x624>)
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d018      	beq.n	8002b0e <HAL_DMA_Abort+0x58a>
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a32      	ldr	r2, [pc, #200]	; (8002bac <HAL_DMA_Abort+0x628>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d013      	beq.n	8002b0e <HAL_DMA_Abort+0x58a>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4a31      	ldr	r2, [pc, #196]	; (8002bb0 <HAL_DMA_Abort+0x62c>)
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d00e      	beq.n	8002b0e <HAL_DMA_Abort+0x58a>
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a2f      	ldr	r2, [pc, #188]	; (8002bb4 <HAL_DMA_Abort+0x630>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d009      	beq.n	8002b0e <HAL_DMA_Abort+0x58a>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4a2e      	ldr	r2, [pc, #184]	; (8002bb8 <HAL_DMA_Abort+0x634>)
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d004      	beq.n	8002b0e <HAL_DMA_Abort+0x58a>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a2c      	ldr	r2, [pc, #176]	; (8002bbc <HAL_DMA_Abort+0x638>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d101      	bne.n	8002b12 <HAL_DMA_Abort+0x58e>
 8002b0e:	2301      	movs	r3, #1
 8002b10:	e000      	b.n	8002b14 <HAL_DMA_Abort+0x590>
 8002b12:	2300      	movs	r3, #0
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d015      	beq.n	8002b44 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002b1c:	687a      	ldr	r2, [r7, #4]
 8002b1e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002b20:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d00c      	beq.n	8002b44 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b2e:	681a      	ldr	r2, [r3, #0]
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b34:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002b38:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b3e:	687a      	ldr	r2, [r7, #4]
 8002b40:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002b42:	605a      	str	r2, [r3, #4]
      }
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2200      	movs	r2, #0
 8002b48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2201      	movs	r2, #1
 8002b50:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }

  return HAL_OK;
 8002b54:	2300      	movs	r3, #0
}
 8002b56:	4618      	mov	r0, r3
 8002b58:	3718      	adds	r7, #24
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}
 8002b5e:	bf00      	nop
 8002b60:	40020010 	.word	0x40020010
 8002b64:	40020028 	.word	0x40020028
 8002b68:	40020040 	.word	0x40020040
 8002b6c:	40020058 	.word	0x40020058
 8002b70:	40020070 	.word	0x40020070
 8002b74:	40020088 	.word	0x40020088
 8002b78:	400200a0 	.word	0x400200a0
 8002b7c:	400200b8 	.word	0x400200b8
 8002b80:	40020410 	.word	0x40020410
 8002b84:	40020428 	.word	0x40020428
 8002b88:	40020440 	.word	0x40020440
 8002b8c:	40020458 	.word	0x40020458
 8002b90:	40020470 	.word	0x40020470
 8002b94:	40020488 	.word	0x40020488
 8002b98:	400204a0 	.word	0x400204a0
 8002b9c:	400204b8 	.word	0x400204b8
 8002ba0:	58025408 	.word	0x58025408
 8002ba4:	5802541c 	.word	0x5802541c
 8002ba8:	58025430 	.word	0x58025430
 8002bac:	58025444 	.word	0x58025444
 8002bb0:	58025458 	.word	0x58025458
 8002bb4:	5802546c 	.word	0x5802546c
 8002bb8:	58025480 	.word	0x58025480
 8002bbc:	58025494 	.word	0x58025494

08002bc0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b084      	sub	sp, #16
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d101      	bne.n	8002bd2 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	e205      	b.n	8002fde <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002bd8:	b2db      	uxtb	r3, r3
 8002bda:	2b02      	cmp	r3, #2
 8002bdc:	d004      	beq.n	8002be8 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2280      	movs	r2, #128	; 0x80
 8002be2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002be4:	2301      	movs	r3, #1
 8002be6:	e1fa      	b.n	8002fde <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4a8c      	ldr	r2, [pc, #560]	; (8002e20 <HAL_DMA_Abort_IT+0x260>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d04a      	beq.n	8002c88 <HAL_DMA_Abort_IT+0xc8>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4a8b      	ldr	r2, [pc, #556]	; (8002e24 <HAL_DMA_Abort_IT+0x264>)
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d045      	beq.n	8002c88 <HAL_DMA_Abort_IT+0xc8>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a89      	ldr	r2, [pc, #548]	; (8002e28 <HAL_DMA_Abort_IT+0x268>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d040      	beq.n	8002c88 <HAL_DMA_Abort_IT+0xc8>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4a88      	ldr	r2, [pc, #544]	; (8002e2c <HAL_DMA_Abort_IT+0x26c>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d03b      	beq.n	8002c88 <HAL_DMA_Abort_IT+0xc8>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a86      	ldr	r2, [pc, #536]	; (8002e30 <HAL_DMA_Abort_IT+0x270>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d036      	beq.n	8002c88 <HAL_DMA_Abort_IT+0xc8>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4a85      	ldr	r2, [pc, #532]	; (8002e34 <HAL_DMA_Abort_IT+0x274>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d031      	beq.n	8002c88 <HAL_DMA_Abort_IT+0xc8>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a83      	ldr	r2, [pc, #524]	; (8002e38 <HAL_DMA_Abort_IT+0x278>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d02c      	beq.n	8002c88 <HAL_DMA_Abort_IT+0xc8>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a82      	ldr	r2, [pc, #520]	; (8002e3c <HAL_DMA_Abort_IT+0x27c>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d027      	beq.n	8002c88 <HAL_DMA_Abort_IT+0xc8>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a80      	ldr	r2, [pc, #512]	; (8002e40 <HAL_DMA_Abort_IT+0x280>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d022      	beq.n	8002c88 <HAL_DMA_Abort_IT+0xc8>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4a7f      	ldr	r2, [pc, #508]	; (8002e44 <HAL_DMA_Abort_IT+0x284>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d01d      	beq.n	8002c88 <HAL_DMA_Abort_IT+0xc8>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a7d      	ldr	r2, [pc, #500]	; (8002e48 <HAL_DMA_Abort_IT+0x288>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d018      	beq.n	8002c88 <HAL_DMA_Abort_IT+0xc8>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4a7c      	ldr	r2, [pc, #496]	; (8002e4c <HAL_DMA_Abort_IT+0x28c>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d013      	beq.n	8002c88 <HAL_DMA_Abort_IT+0xc8>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a7a      	ldr	r2, [pc, #488]	; (8002e50 <HAL_DMA_Abort_IT+0x290>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d00e      	beq.n	8002c88 <HAL_DMA_Abort_IT+0xc8>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a79      	ldr	r2, [pc, #484]	; (8002e54 <HAL_DMA_Abort_IT+0x294>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d009      	beq.n	8002c88 <HAL_DMA_Abort_IT+0xc8>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a77      	ldr	r2, [pc, #476]	; (8002e58 <HAL_DMA_Abort_IT+0x298>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d004      	beq.n	8002c88 <HAL_DMA_Abort_IT+0xc8>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4a76      	ldr	r2, [pc, #472]	; (8002e5c <HAL_DMA_Abort_IT+0x29c>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d101      	bne.n	8002c8c <HAL_DMA_Abort_IT+0xcc>
 8002c88:	2301      	movs	r3, #1
 8002c8a:	e000      	b.n	8002c8e <HAL_DMA_Abort_IT+0xce>
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d065      	beq.n	8002d5e <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2204      	movs	r2, #4
 8002c96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a60      	ldr	r2, [pc, #384]	; (8002e20 <HAL_DMA_Abort_IT+0x260>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d04a      	beq.n	8002d3a <HAL_DMA_Abort_IT+0x17a>
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a5e      	ldr	r2, [pc, #376]	; (8002e24 <HAL_DMA_Abort_IT+0x264>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d045      	beq.n	8002d3a <HAL_DMA_Abort_IT+0x17a>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4a5d      	ldr	r2, [pc, #372]	; (8002e28 <HAL_DMA_Abort_IT+0x268>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d040      	beq.n	8002d3a <HAL_DMA_Abort_IT+0x17a>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a5b      	ldr	r2, [pc, #364]	; (8002e2c <HAL_DMA_Abort_IT+0x26c>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d03b      	beq.n	8002d3a <HAL_DMA_Abort_IT+0x17a>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4a5a      	ldr	r2, [pc, #360]	; (8002e30 <HAL_DMA_Abort_IT+0x270>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d036      	beq.n	8002d3a <HAL_DMA_Abort_IT+0x17a>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a58      	ldr	r2, [pc, #352]	; (8002e34 <HAL_DMA_Abort_IT+0x274>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d031      	beq.n	8002d3a <HAL_DMA_Abort_IT+0x17a>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a57      	ldr	r2, [pc, #348]	; (8002e38 <HAL_DMA_Abort_IT+0x278>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d02c      	beq.n	8002d3a <HAL_DMA_Abort_IT+0x17a>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a55      	ldr	r2, [pc, #340]	; (8002e3c <HAL_DMA_Abort_IT+0x27c>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d027      	beq.n	8002d3a <HAL_DMA_Abort_IT+0x17a>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a54      	ldr	r2, [pc, #336]	; (8002e40 <HAL_DMA_Abort_IT+0x280>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d022      	beq.n	8002d3a <HAL_DMA_Abort_IT+0x17a>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a52      	ldr	r2, [pc, #328]	; (8002e44 <HAL_DMA_Abort_IT+0x284>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d01d      	beq.n	8002d3a <HAL_DMA_Abort_IT+0x17a>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a51      	ldr	r2, [pc, #324]	; (8002e48 <HAL_DMA_Abort_IT+0x288>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d018      	beq.n	8002d3a <HAL_DMA_Abort_IT+0x17a>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a4f      	ldr	r2, [pc, #316]	; (8002e4c <HAL_DMA_Abort_IT+0x28c>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d013      	beq.n	8002d3a <HAL_DMA_Abort_IT+0x17a>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a4e      	ldr	r2, [pc, #312]	; (8002e50 <HAL_DMA_Abort_IT+0x290>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d00e      	beq.n	8002d3a <HAL_DMA_Abort_IT+0x17a>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a4c      	ldr	r2, [pc, #304]	; (8002e54 <HAL_DMA_Abort_IT+0x294>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d009      	beq.n	8002d3a <HAL_DMA_Abort_IT+0x17a>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4a4b      	ldr	r2, [pc, #300]	; (8002e58 <HAL_DMA_Abort_IT+0x298>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d004      	beq.n	8002d3a <HAL_DMA_Abort_IT+0x17a>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a49      	ldr	r2, [pc, #292]	; (8002e5c <HAL_DMA_Abort_IT+0x29c>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d108      	bne.n	8002d4c <HAL_DMA_Abort_IT+0x18c>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	681a      	ldr	r2, [r3, #0]
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f022 0201 	bic.w	r2, r2, #1
 8002d48:	601a      	str	r2, [r3, #0]
 8002d4a:	e147      	b.n	8002fdc <HAL_DMA_Abort_IT+0x41c>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	681a      	ldr	r2, [r3, #0]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f022 0201 	bic.w	r2, r2, #1
 8002d5a:	601a      	str	r2, [r3, #0]
 8002d5c:	e13e      	b.n	8002fdc <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	681a      	ldr	r2, [r3, #0]
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f022 020e 	bic.w	r2, r2, #14
 8002d6c:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a2b      	ldr	r2, [pc, #172]	; (8002e20 <HAL_DMA_Abort_IT+0x260>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d04a      	beq.n	8002e0e <HAL_DMA_Abort_IT+0x24e>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a29      	ldr	r2, [pc, #164]	; (8002e24 <HAL_DMA_Abort_IT+0x264>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d045      	beq.n	8002e0e <HAL_DMA_Abort_IT+0x24e>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a28      	ldr	r2, [pc, #160]	; (8002e28 <HAL_DMA_Abort_IT+0x268>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d040      	beq.n	8002e0e <HAL_DMA_Abort_IT+0x24e>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a26      	ldr	r2, [pc, #152]	; (8002e2c <HAL_DMA_Abort_IT+0x26c>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d03b      	beq.n	8002e0e <HAL_DMA_Abort_IT+0x24e>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a25      	ldr	r2, [pc, #148]	; (8002e30 <HAL_DMA_Abort_IT+0x270>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d036      	beq.n	8002e0e <HAL_DMA_Abort_IT+0x24e>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a23      	ldr	r2, [pc, #140]	; (8002e34 <HAL_DMA_Abort_IT+0x274>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d031      	beq.n	8002e0e <HAL_DMA_Abort_IT+0x24e>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a22      	ldr	r2, [pc, #136]	; (8002e38 <HAL_DMA_Abort_IT+0x278>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d02c      	beq.n	8002e0e <HAL_DMA_Abort_IT+0x24e>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a20      	ldr	r2, [pc, #128]	; (8002e3c <HAL_DMA_Abort_IT+0x27c>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d027      	beq.n	8002e0e <HAL_DMA_Abort_IT+0x24e>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a1f      	ldr	r2, [pc, #124]	; (8002e40 <HAL_DMA_Abort_IT+0x280>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d022      	beq.n	8002e0e <HAL_DMA_Abort_IT+0x24e>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a1d      	ldr	r2, [pc, #116]	; (8002e44 <HAL_DMA_Abort_IT+0x284>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d01d      	beq.n	8002e0e <HAL_DMA_Abort_IT+0x24e>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a1c      	ldr	r2, [pc, #112]	; (8002e48 <HAL_DMA_Abort_IT+0x288>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d018      	beq.n	8002e0e <HAL_DMA_Abort_IT+0x24e>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a1a      	ldr	r2, [pc, #104]	; (8002e4c <HAL_DMA_Abort_IT+0x28c>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d013      	beq.n	8002e0e <HAL_DMA_Abort_IT+0x24e>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a19      	ldr	r2, [pc, #100]	; (8002e50 <HAL_DMA_Abort_IT+0x290>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d00e      	beq.n	8002e0e <HAL_DMA_Abort_IT+0x24e>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a17      	ldr	r2, [pc, #92]	; (8002e54 <HAL_DMA_Abort_IT+0x294>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d009      	beq.n	8002e0e <HAL_DMA_Abort_IT+0x24e>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a16      	ldr	r2, [pc, #88]	; (8002e58 <HAL_DMA_Abort_IT+0x298>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d004      	beq.n	8002e0e <HAL_DMA_Abort_IT+0x24e>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a14      	ldr	r2, [pc, #80]	; (8002e5c <HAL_DMA_Abort_IT+0x29c>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d128      	bne.n	8002e60 <HAL_DMA_Abort_IT+0x2a0>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	681a      	ldr	r2, [r3, #0]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f022 0201 	bic.w	r2, r2, #1
 8002e1c:	601a      	str	r2, [r3, #0]
 8002e1e:	e027      	b.n	8002e70 <HAL_DMA_Abort_IT+0x2b0>
 8002e20:	40020010 	.word	0x40020010
 8002e24:	40020028 	.word	0x40020028
 8002e28:	40020040 	.word	0x40020040
 8002e2c:	40020058 	.word	0x40020058
 8002e30:	40020070 	.word	0x40020070
 8002e34:	40020088 	.word	0x40020088
 8002e38:	400200a0 	.word	0x400200a0
 8002e3c:	400200b8 	.word	0x400200b8
 8002e40:	40020410 	.word	0x40020410
 8002e44:	40020428 	.word	0x40020428
 8002e48:	40020440 	.word	0x40020440
 8002e4c:	40020458 	.word	0x40020458
 8002e50:	40020470 	.word	0x40020470
 8002e54:	40020488 	.word	0x40020488
 8002e58:	400204a0 	.word	0x400204a0
 8002e5c:	400204b8 	.word	0x400204b8
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	681a      	ldr	r2, [r3, #0]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f022 0201 	bic.w	r2, r2, #1
 8002e6e:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4a5c      	ldr	r2, [pc, #368]	; (8002fe8 <HAL_DMA_Abort_IT+0x428>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d072      	beq.n	8002f60 <HAL_DMA_Abort_IT+0x3a0>
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4a5b      	ldr	r2, [pc, #364]	; (8002fec <HAL_DMA_Abort_IT+0x42c>)
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d06d      	beq.n	8002f60 <HAL_DMA_Abort_IT+0x3a0>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4a59      	ldr	r2, [pc, #356]	; (8002ff0 <HAL_DMA_Abort_IT+0x430>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d068      	beq.n	8002f60 <HAL_DMA_Abort_IT+0x3a0>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4a58      	ldr	r2, [pc, #352]	; (8002ff4 <HAL_DMA_Abort_IT+0x434>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d063      	beq.n	8002f60 <HAL_DMA_Abort_IT+0x3a0>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a56      	ldr	r2, [pc, #344]	; (8002ff8 <HAL_DMA_Abort_IT+0x438>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d05e      	beq.n	8002f60 <HAL_DMA_Abort_IT+0x3a0>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a55      	ldr	r2, [pc, #340]	; (8002ffc <HAL_DMA_Abort_IT+0x43c>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d059      	beq.n	8002f60 <HAL_DMA_Abort_IT+0x3a0>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a53      	ldr	r2, [pc, #332]	; (8003000 <HAL_DMA_Abort_IT+0x440>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d054      	beq.n	8002f60 <HAL_DMA_Abort_IT+0x3a0>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4a52      	ldr	r2, [pc, #328]	; (8003004 <HAL_DMA_Abort_IT+0x444>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d04f      	beq.n	8002f60 <HAL_DMA_Abort_IT+0x3a0>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a50      	ldr	r2, [pc, #320]	; (8003008 <HAL_DMA_Abort_IT+0x448>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d04a      	beq.n	8002f60 <HAL_DMA_Abort_IT+0x3a0>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4a4f      	ldr	r2, [pc, #316]	; (800300c <HAL_DMA_Abort_IT+0x44c>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d045      	beq.n	8002f60 <HAL_DMA_Abort_IT+0x3a0>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a4d      	ldr	r2, [pc, #308]	; (8003010 <HAL_DMA_Abort_IT+0x450>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d040      	beq.n	8002f60 <HAL_DMA_Abort_IT+0x3a0>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a4c      	ldr	r2, [pc, #304]	; (8003014 <HAL_DMA_Abort_IT+0x454>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d03b      	beq.n	8002f60 <HAL_DMA_Abort_IT+0x3a0>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a4a      	ldr	r2, [pc, #296]	; (8003018 <HAL_DMA_Abort_IT+0x458>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d036      	beq.n	8002f60 <HAL_DMA_Abort_IT+0x3a0>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a49      	ldr	r2, [pc, #292]	; (800301c <HAL_DMA_Abort_IT+0x45c>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d031      	beq.n	8002f60 <HAL_DMA_Abort_IT+0x3a0>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a47      	ldr	r2, [pc, #284]	; (8003020 <HAL_DMA_Abort_IT+0x460>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d02c      	beq.n	8002f60 <HAL_DMA_Abort_IT+0x3a0>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a46      	ldr	r2, [pc, #280]	; (8003024 <HAL_DMA_Abort_IT+0x464>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d027      	beq.n	8002f60 <HAL_DMA_Abort_IT+0x3a0>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a44      	ldr	r2, [pc, #272]	; (8003028 <HAL_DMA_Abort_IT+0x468>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d022      	beq.n	8002f60 <HAL_DMA_Abort_IT+0x3a0>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4a43      	ldr	r2, [pc, #268]	; (800302c <HAL_DMA_Abort_IT+0x46c>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d01d      	beq.n	8002f60 <HAL_DMA_Abort_IT+0x3a0>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a41      	ldr	r2, [pc, #260]	; (8003030 <HAL_DMA_Abort_IT+0x470>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d018      	beq.n	8002f60 <HAL_DMA_Abort_IT+0x3a0>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a40      	ldr	r2, [pc, #256]	; (8003034 <HAL_DMA_Abort_IT+0x474>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d013      	beq.n	8002f60 <HAL_DMA_Abort_IT+0x3a0>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a3e      	ldr	r2, [pc, #248]	; (8003038 <HAL_DMA_Abort_IT+0x478>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d00e      	beq.n	8002f60 <HAL_DMA_Abort_IT+0x3a0>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a3d      	ldr	r2, [pc, #244]	; (800303c <HAL_DMA_Abort_IT+0x47c>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d009      	beq.n	8002f60 <HAL_DMA_Abort_IT+0x3a0>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a3b      	ldr	r2, [pc, #236]	; (8003040 <HAL_DMA_Abort_IT+0x480>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d004      	beq.n	8002f60 <HAL_DMA_Abort_IT+0x3a0>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a3a      	ldr	r2, [pc, #232]	; (8003044 <HAL_DMA_Abort_IT+0x484>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d101      	bne.n	8002f64 <HAL_DMA_Abort_IT+0x3a4>
 8002f60:	2301      	movs	r3, #1
 8002f62:	e000      	b.n	8002f66 <HAL_DMA_Abort_IT+0x3a6>
 8002f64:	2300      	movs	r3, #0
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d028      	beq.n	8002fbc <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f6e:	681a      	ldr	r2, [r3, #0]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f74:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f78:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f7e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f84:	f003 031f 	and.w	r3, r3, #31
 8002f88:	2201      	movs	r2, #1
 8002f8a:	409a      	lsls	r2, r3
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f94:	687a      	ldr	r2, [r7, #4]
 8002f96:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002f98:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d00c      	beq.n	8002fbc <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002fa6:	681a      	ldr	r2, [r3, #0]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002fac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002fb0:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fb6:	687a      	ldr	r2, [r7, #4]
 8002fb8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002fba:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d003      	beq.n	8002fdc <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fd8:	6878      	ldr	r0, [r7, #4]
 8002fda:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8002fdc:	2300      	movs	r3, #0
}
 8002fde:	4618      	mov	r0, r3
 8002fe0:	3710      	adds	r7, #16
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bd80      	pop	{r7, pc}
 8002fe6:	bf00      	nop
 8002fe8:	40020010 	.word	0x40020010
 8002fec:	40020028 	.word	0x40020028
 8002ff0:	40020040 	.word	0x40020040
 8002ff4:	40020058 	.word	0x40020058
 8002ff8:	40020070 	.word	0x40020070
 8002ffc:	40020088 	.word	0x40020088
 8003000:	400200a0 	.word	0x400200a0
 8003004:	400200b8 	.word	0x400200b8
 8003008:	40020410 	.word	0x40020410
 800300c:	40020428 	.word	0x40020428
 8003010:	40020440 	.word	0x40020440
 8003014:	40020458 	.word	0x40020458
 8003018:	40020470 	.word	0x40020470
 800301c:	40020488 	.word	0x40020488
 8003020:	400204a0 	.word	0x400204a0
 8003024:	400204b8 	.word	0x400204b8
 8003028:	58025408 	.word	0x58025408
 800302c:	5802541c 	.word	0x5802541c
 8003030:	58025430 	.word	0x58025430
 8003034:	58025444 	.word	0x58025444
 8003038:	58025458 	.word	0x58025458
 800303c:	5802546c 	.word	0x5802546c
 8003040:	58025480 	.word	0x58025480
 8003044:	58025494 	.word	0x58025494

08003048 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b08a      	sub	sp, #40	; 0x28
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003050:	2300      	movs	r3, #0
 8003052:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003054:	4b67      	ldr	r3, [pc, #412]	; (80031f4 <HAL_DMA_IRQHandler+0x1ac>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a67      	ldr	r2, [pc, #412]	; (80031f8 <HAL_DMA_IRQHandler+0x1b0>)
 800305a:	fba2 2303 	umull	r2, r3, r2, r3
 800305e:	0a9b      	lsrs	r3, r3, #10
 8003060:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003066:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800306c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800306e:	6a3b      	ldr	r3, [r7, #32]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003074:	69fb      	ldr	r3, [r7, #28]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4a5f      	ldr	r2, [pc, #380]	; (80031fc <HAL_DMA_IRQHandler+0x1b4>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d04a      	beq.n	800311a <HAL_DMA_IRQHandler+0xd2>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a5d      	ldr	r2, [pc, #372]	; (8003200 <HAL_DMA_IRQHandler+0x1b8>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d045      	beq.n	800311a <HAL_DMA_IRQHandler+0xd2>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4a5c      	ldr	r2, [pc, #368]	; (8003204 <HAL_DMA_IRQHandler+0x1bc>)
 8003094:	4293      	cmp	r3, r2
 8003096:	d040      	beq.n	800311a <HAL_DMA_IRQHandler+0xd2>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a5a      	ldr	r2, [pc, #360]	; (8003208 <HAL_DMA_IRQHandler+0x1c0>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d03b      	beq.n	800311a <HAL_DMA_IRQHandler+0xd2>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4a59      	ldr	r2, [pc, #356]	; (800320c <HAL_DMA_IRQHandler+0x1c4>)
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d036      	beq.n	800311a <HAL_DMA_IRQHandler+0xd2>
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4a57      	ldr	r2, [pc, #348]	; (8003210 <HAL_DMA_IRQHandler+0x1c8>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d031      	beq.n	800311a <HAL_DMA_IRQHandler+0xd2>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4a56      	ldr	r2, [pc, #344]	; (8003214 <HAL_DMA_IRQHandler+0x1cc>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	d02c      	beq.n	800311a <HAL_DMA_IRQHandler+0xd2>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a54      	ldr	r2, [pc, #336]	; (8003218 <HAL_DMA_IRQHandler+0x1d0>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d027      	beq.n	800311a <HAL_DMA_IRQHandler+0xd2>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a53      	ldr	r2, [pc, #332]	; (800321c <HAL_DMA_IRQHandler+0x1d4>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d022      	beq.n	800311a <HAL_DMA_IRQHandler+0xd2>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a51      	ldr	r2, [pc, #324]	; (8003220 <HAL_DMA_IRQHandler+0x1d8>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d01d      	beq.n	800311a <HAL_DMA_IRQHandler+0xd2>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4a50      	ldr	r2, [pc, #320]	; (8003224 <HAL_DMA_IRQHandler+0x1dc>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d018      	beq.n	800311a <HAL_DMA_IRQHandler+0xd2>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a4e      	ldr	r2, [pc, #312]	; (8003228 <HAL_DMA_IRQHandler+0x1e0>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d013      	beq.n	800311a <HAL_DMA_IRQHandler+0xd2>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4a4d      	ldr	r2, [pc, #308]	; (800322c <HAL_DMA_IRQHandler+0x1e4>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d00e      	beq.n	800311a <HAL_DMA_IRQHandler+0xd2>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a4b      	ldr	r2, [pc, #300]	; (8003230 <HAL_DMA_IRQHandler+0x1e8>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d009      	beq.n	800311a <HAL_DMA_IRQHandler+0xd2>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a4a      	ldr	r2, [pc, #296]	; (8003234 <HAL_DMA_IRQHandler+0x1ec>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d004      	beq.n	800311a <HAL_DMA_IRQHandler+0xd2>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4a48      	ldr	r2, [pc, #288]	; (8003238 <HAL_DMA_IRQHandler+0x1f0>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d101      	bne.n	800311e <HAL_DMA_IRQHandler+0xd6>
 800311a:	2301      	movs	r3, #1
 800311c:	e000      	b.n	8003120 <HAL_DMA_IRQHandler+0xd8>
 800311e:	2300      	movs	r3, #0
 8003120:	2b00      	cmp	r3, #0
 8003122:	f000 842b 	beq.w	800397c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800312a:	f003 031f 	and.w	r3, r3, #31
 800312e:	2208      	movs	r2, #8
 8003130:	409a      	lsls	r2, r3
 8003132:	69bb      	ldr	r3, [r7, #24]
 8003134:	4013      	ands	r3, r2
 8003136:	2b00      	cmp	r3, #0
 8003138:	f000 80a2 	beq.w	8003280 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a2e      	ldr	r2, [pc, #184]	; (80031fc <HAL_DMA_IRQHandler+0x1b4>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d04a      	beq.n	80031dc <HAL_DMA_IRQHandler+0x194>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4a2d      	ldr	r2, [pc, #180]	; (8003200 <HAL_DMA_IRQHandler+0x1b8>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d045      	beq.n	80031dc <HAL_DMA_IRQHandler+0x194>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a2b      	ldr	r2, [pc, #172]	; (8003204 <HAL_DMA_IRQHandler+0x1bc>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d040      	beq.n	80031dc <HAL_DMA_IRQHandler+0x194>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a2a      	ldr	r2, [pc, #168]	; (8003208 <HAL_DMA_IRQHandler+0x1c0>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d03b      	beq.n	80031dc <HAL_DMA_IRQHandler+0x194>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a28      	ldr	r2, [pc, #160]	; (800320c <HAL_DMA_IRQHandler+0x1c4>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d036      	beq.n	80031dc <HAL_DMA_IRQHandler+0x194>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4a27      	ldr	r2, [pc, #156]	; (8003210 <HAL_DMA_IRQHandler+0x1c8>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d031      	beq.n	80031dc <HAL_DMA_IRQHandler+0x194>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a25      	ldr	r2, [pc, #148]	; (8003214 <HAL_DMA_IRQHandler+0x1cc>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d02c      	beq.n	80031dc <HAL_DMA_IRQHandler+0x194>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4a24      	ldr	r2, [pc, #144]	; (8003218 <HAL_DMA_IRQHandler+0x1d0>)
 8003188:	4293      	cmp	r3, r2
 800318a:	d027      	beq.n	80031dc <HAL_DMA_IRQHandler+0x194>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4a22      	ldr	r2, [pc, #136]	; (800321c <HAL_DMA_IRQHandler+0x1d4>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d022      	beq.n	80031dc <HAL_DMA_IRQHandler+0x194>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4a21      	ldr	r2, [pc, #132]	; (8003220 <HAL_DMA_IRQHandler+0x1d8>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d01d      	beq.n	80031dc <HAL_DMA_IRQHandler+0x194>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a1f      	ldr	r2, [pc, #124]	; (8003224 <HAL_DMA_IRQHandler+0x1dc>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d018      	beq.n	80031dc <HAL_DMA_IRQHandler+0x194>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4a1e      	ldr	r2, [pc, #120]	; (8003228 <HAL_DMA_IRQHandler+0x1e0>)
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d013      	beq.n	80031dc <HAL_DMA_IRQHandler+0x194>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4a1c      	ldr	r2, [pc, #112]	; (800322c <HAL_DMA_IRQHandler+0x1e4>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d00e      	beq.n	80031dc <HAL_DMA_IRQHandler+0x194>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4a1b      	ldr	r2, [pc, #108]	; (8003230 <HAL_DMA_IRQHandler+0x1e8>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d009      	beq.n	80031dc <HAL_DMA_IRQHandler+0x194>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a19      	ldr	r2, [pc, #100]	; (8003234 <HAL_DMA_IRQHandler+0x1ec>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d004      	beq.n	80031dc <HAL_DMA_IRQHandler+0x194>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4a18      	ldr	r2, [pc, #96]	; (8003238 <HAL_DMA_IRQHandler+0x1f0>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d12f      	bne.n	800323c <HAL_DMA_IRQHandler+0x1f4>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f003 0304 	and.w	r3, r3, #4
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	bf14      	ite	ne
 80031ea:	2301      	movne	r3, #1
 80031ec:	2300      	moveq	r3, #0
 80031ee:	b2db      	uxtb	r3, r3
 80031f0:	e02e      	b.n	8003250 <HAL_DMA_IRQHandler+0x208>
 80031f2:	bf00      	nop
 80031f4:	24000400 	.word	0x24000400
 80031f8:	1b4e81b5 	.word	0x1b4e81b5
 80031fc:	40020010 	.word	0x40020010
 8003200:	40020028 	.word	0x40020028
 8003204:	40020040 	.word	0x40020040
 8003208:	40020058 	.word	0x40020058
 800320c:	40020070 	.word	0x40020070
 8003210:	40020088 	.word	0x40020088
 8003214:	400200a0 	.word	0x400200a0
 8003218:	400200b8 	.word	0x400200b8
 800321c:	40020410 	.word	0x40020410
 8003220:	40020428 	.word	0x40020428
 8003224:	40020440 	.word	0x40020440
 8003228:	40020458 	.word	0x40020458
 800322c:	40020470 	.word	0x40020470
 8003230:	40020488 	.word	0x40020488
 8003234:	400204a0 	.word	0x400204a0
 8003238:	400204b8 	.word	0x400204b8
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f003 0308 	and.w	r3, r3, #8
 8003246:	2b00      	cmp	r3, #0
 8003248:	bf14      	ite	ne
 800324a:	2301      	movne	r3, #1
 800324c:	2300      	moveq	r3, #0
 800324e:	b2db      	uxtb	r3, r3
 8003250:	2b00      	cmp	r3, #0
 8003252:	d015      	beq.n	8003280 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	681a      	ldr	r2, [r3, #0]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f022 0204 	bic.w	r2, r2, #4
 8003262:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003268:	f003 031f 	and.w	r3, r3, #31
 800326c:	2208      	movs	r2, #8
 800326e:	409a      	lsls	r2, r3
 8003270:	6a3b      	ldr	r3, [r7, #32]
 8003272:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003278:	f043 0201 	orr.w	r2, r3, #1
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003284:	f003 031f 	and.w	r3, r3, #31
 8003288:	69ba      	ldr	r2, [r7, #24]
 800328a:	fa22 f303 	lsr.w	r3, r2, r3
 800328e:	f003 0301 	and.w	r3, r3, #1
 8003292:	2b00      	cmp	r3, #0
 8003294:	d06e      	beq.n	8003374 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a69      	ldr	r2, [pc, #420]	; (8003440 <HAL_DMA_IRQHandler+0x3f8>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d04a      	beq.n	8003336 <HAL_DMA_IRQHandler+0x2ee>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a67      	ldr	r2, [pc, #412]	; (8003444 <HAL_DMA_IRQHandler+0x3fc>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d045      	beq.n	8003336 <HAL_DMA_IRQHandler+0x2ee>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4a66      	ldr	r2, [pc, #408]	; (8003448 <HAL_DMA_IRQHandler+0x400>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d040      	beq.n	8003336 <HAL_DMA_IRQHandler+0x2ee>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a64      	ldr	r2, [pc, #400]	; (800344c <HAL_DMA_IRQHandler+0x404>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d03b      	beq.n	8003336 <HAL_DMA_IRQHandler+0x2ee>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a63      	ldr	r2, [pc, #396]	; (8003450 <HAL_DMA_IRQHandler+0x408>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d036      	beq.n	8003336 <HAL_DMA_IRQHandler+0x2ee>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a61      	ldr	r2, [pc, #388]	; (8003454 <HAL_DMA_IRQHandler+0x40c>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d031      	beq.n	8003336 <HAL_DMA_IRQHandler+0x2ee>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4a60      	ldr	r2, [pc, #384]	; (8003458 <HAL_DMA_IRQHandler+0x410>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d02c      	beq.n	8003336 <HAL_DMA_IRQHandler+0x2ee>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a5e      	ldr	r2, [pc, #376]	; (800345c <HAL_DMA_IRQHandler+0x414>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d027      	beq.n	8003336 <HAL_DMA_IRQHandler+0x2ee>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a5d      	ldr	r2, [pc, #372]	; (8003460 <HAL_DMA_IRQHandler+0x418>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d022      	beq.n	8003336 <HAL_DMA_IRQHandler+0x2ee>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a5b      	ldr	r2, [pc, #364]	; (8003464 <HAL_DMA_IRQHandler+0x41c>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d01d      	beq.n	8003336 <HAL_DMA_IRQHandler+0x2ee>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a5a      	ldr	r2, [pc, #360]	; (8003468 <HAL_DMA_IRQHandler+0x420>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d018      	beq.n	8003336 <HAL_DMA_IRQHandler+0x2ee>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a58      	ldr	r2, [pc, #352]	; (800346c <HAL_DMA_IRQHandler+0x424>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d013      	beq.n	8003336 <HAL_DMA_IRQHandler+0x2ee>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a57      	ldr	r2, [pc, #348]	; (8003470 <HAL_DMA_IRQHandler+0x428>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d00e      	beq.n	8003336 <HAL_DMA_IRQHandler+0x2ee>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a55      	ldr	r2, [pc, #340]	; (8003474 <HAL_DMA_IRQHandler+0x42c>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d009      	beq.n	8003336 <HAL_DMA_IRQHandler+0x2ee>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a54      	ldr	r2, [pc, #336]	; (8003478 <HAL_DMA_IRQHandler+0x430>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d004      	beq.n	8003336 <HAL_DMA_IRQHandler+0x2ee>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a52      	ldr	r2, [pc, #328]	; (800347c <HAL_DMA_IRQHandler+0x434>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d10a      	bne.n	800334c <HAL_DMA_IRQHandler+0x304>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	695b      	ldr	r3, [r3, #20]
 800333c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003340:	2b00      	cmp	r3, #0
 8003342:	bf14      	ite	ne
 8003344:	2301      	movne	r3, #1
 8003346:	2300      	moveq	r3, #0
 8003348:	b2db      	uxtb	r3, r3
 800334a:	e003      	b.n	8003354 <HAL_DMA_IRQHandler+0x30c>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	2300      	movs	r3, #0
 8003354:	2b00      	cmp	r3, #0
 8003356:	d00d      	beq.n	8003374 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800335c:	f003 031f 	and.w	r3, r3, #31
 8003360:	2201      	movs	r2, #1
 8003362:	409a      	lsls	r2, r3
 8003364:	6a3b      	ldr	r3, [r7, #32]
 8003366:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800336c:	f043 0202 	orr.w	r2, r3, #2
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003378:	f003 031f 	and.w	r3, r3, #31
 800337c:	2204      	movs	r2, #4
 800337e:	409a      	lsls	r2, r3
 8003380:	69bb      	ldr	r3, [r7, #24]
 8003382:	4013      	ands	r3, r2
 8003384:	2b00      	cmp	r3, #0
 8003386:	f000 808f 	beq.w	80034a8 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4a2c      	ldr	r2, [pc, #176]	; (8003440 <HAL_DMA_IRQHandler+0x3f8>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d04a      	beq.n	800342a <HAL_DMA_IRQHandler+0x3e2>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a2a      	ldr	r2, [pc, #168]	; (8003444 <HAL_DMA_IRQHandler+0x3fc>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d045      	beq.n	800342a <HAL_DMA_IRQHandler+0x3e2>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4a29      	ldr	r2, [pc, #164]	; (8003448 <HAL_DMA_IRQHandler+0x400>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d040      	beq.n	800342a <HAL_DMA_IRQHandler+0x3e2>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a27      	ldr	r2, [pc, #156]	; (800344c <HAL_DMA_IRQHandler+0x404>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d03b      	beq.n	800342a <HAL_DMA_IRQHandler+0x3e2>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a26      	ldr	r2, [pc, #152]	; (8003450 <HAL_DMA_IRQHandler+0x408>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d036      	beq.n	800342a <HAL_DMA_IRQHandler+0x3e2>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a24      	ldr	r2, [pc, #144]	; (8003454 <HAL_DMA_IRQHandler+0x40c>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d031      	beq.n	800342a <HAL_DMA_IRQHandler+0x3e2>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a23      	ldr	r2, [pc, #140]	; (8003458 <HAL_DMA_IRQHandler+0x410>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d02c      	beq.n	800342a <HAL_DMA_IRQHandler+0x3e2>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a21      	ldr	r2, [pc, #132]	; (800345c <HAL_DMA_IRQHandler+0x414>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d027      	beq.n	800342a <HAL_DMA_IRQHandler+0x3e2>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a20      	ldr	r2, [pc, #128]	; (8003460 <HAL_DMA_IRQHandler+0x418>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d022      	beq.n	800342a <HAL_DMA_IRQHandler+0x3e2>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a1e      	ldr	r2, [pc, #120]	; (8003464 <HAL_DMA_IRQHandler+0x41c>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d01d      	beq.n	800342a <HAL_DMA_IRQHandler+0x3e2>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4a1d      	ldr	r2, [pc, #116]	; (8003468 <HAL_DMA_IRQHandler+0x420>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d018      	beq.n	800342a <HAL_DMA_IRQHandler+0x3e2>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a1b      	ldr	r2, [pc, #108]	; (800346c <HAL_DMA_IRQHandler+0x424>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d013      	beq.n	800342a <HAL_DMA_IRQHandler+0x3e2>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a1a      	ldr	r2, [pc, #104]	; (8003470 <HAL_DMA_IRQHandler+0x428>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d00e      	beq.n	800342a <HAL_DMA_IRQHandler+0x3e2>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a18      	ldr	r2, [pc, #96]	; (8003474 <HAL_DMA_IRQHandler+0x42c>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d009      	beq.n	800342a <HAL_DMA_IRQHandler+0x3e2>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4a17      	ldr	r2, [pc, #92]	; (8003478 <HAL_DMA_IRQHandler+0x430>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d004      	beq.n	800342a <HAL_DMA_IRQHandler+0x3e2>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a15      	ldr	r2, [pc, #84]	; (800347c <HAL_DMA_IRQHandler+0x434>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d12a      	bne.n	8003480 <HAL_DMA_IRQHandler+0x438>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f003 0302 	and.w	r3, r3, #2
 8003434:	2b00      	cmp	r3, #0
 8003436:	bf14      	ite	ne
 8003438:	2301      	movne	r3, #1
 800343a:	2300      	moveq	r3, #0
 800343c:	b2db      	uxtb	r3, r3
 800343e:	e023      	b.n	8003488 <HAL_DMA_IRQHandler+0x440>
 8003440:	40020010 	.word	0x40020010
 8003444:	40020028 	.word	0x40020028
 8003448:	40020040 	.word	0x40020040
 800344c:	40020058 	.word	0x40020058
 8003450:	40020070 	.word	0x40020070
 8003454:	40020088 	.word	0x40020088
 8003458:	400200a0 	.word	0x400200a0
 800345c:	400200b8 	.word	0x400200b8
 8003460:	40020410 	.word	0x40020410
 8003464:	40020428 	.word	0x40020428
 8003468:	40020440 	.word	0x40020440
 800346c:	40020458 	.word	0x40020458
 8003470:	40020470 	.word	0x40020470
 8003474:	40020488 	.word	0x40020488
 8003478:	400204a0 	.word	0x400204a0
 800347c:	400204b8 	.word	0x400204b8
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	2300      	movs	r3, #0
 8003488:	2b00      	cmp	r3, #0
 800348a:	d00d      	beq.n	80034a8 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003490:	f003 031f 	and.w	r3, r3, #31
 8003494:	2204      	movs	r2, #4
 8003496:	409a      	lsls	r2, r3
 8003498:	6a3b      	ldr	r3, [r7, #32]
 800349a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034a0:	f043 0204 	orr.w	r2, r3, #4
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034ac:	f003 031f 	and.w	r3, r3, #31
 80034b0:	2210      	movs	r2, #16
 80034b2:	409a      	lsls	r2, r3
 80034b4:	69bb      	ldr	r3, [r7, #24]
 80034b6:	4013      	ands	r3, r2
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	f000 80a6 	beq.w	800360a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4a85      	ldr	r2, [pc, #532]	; (80036d8 <HAL_DMA_IRQHandler+0x690>)
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d04a      	beq.n	800355e <HAL_DMA_IRQHandler+0x516>
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4a83      	ldr	r2, [pc, #524]	; (80036dc <HAL_DMA_IRQHandler+0x694>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d045      	beq.n	800355e <HAL_DMA_IRQHandler+0x516>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4a82      	ldr	r2, [pc, #520]	; (80036e0 <HAL_DMA_IRQHandler+0x698>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d040      	beq.n	800355e <HAL_DMA_IRQHandler+0x516>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4a80      	ldr	r2, [pc, #512]	; (80036e4 <HAL_DMA_IRQHandler+0x69c>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d03b      	beq.n	800355e <HAL_DMA_IRQHandler+0x516>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4a7f      	ldr	r2, [pc, #508]	; (80036e8 <HAL_DMA_IRQHandler+0x6a0>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d036      	beq.n	800355e <HAL_DMA_IRQHandler+0x516>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a7d      	ldr	r2, [pc, #500]	; (80036ec <HAL_DMA_IRQHandler+0x6a4>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d031      	beq.n	800355e <HAL_DMA_IRQHandler+0x516>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4a7c      	ldr	r2, [pc, #496]	; (80036f0 <HAL_DMA_IRQHandler+0x6a8>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d02c      	beq.n	800355e <HAL_DMA_IRQHandler+0x516>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4a7a      	ldr	r2, [pc, #488]	; (80036f4 <HAL_DMA_IRQHandler+0x6ac>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d027      	beq.n	800355e <HAL_DMA_IRQHandler+0x516>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4a79      	ldr	r2, [pc, #484]	; (80036f8 <HAL_DMA_IRQHandler+0x6b0>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d022      	beq.n	800355e <HAL_DMA_IRQHandler+0x516>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a77      	ldr	r2, [pc, #476]	; (80036fc <HAL_DMA_IRQHandler+0x6b4>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d01d      	beq.n	800355e <HAL_DMA_IRQHandler+0x516>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4a76      	ldr	r2, [pc, #472]	; (8003700 <HAL_DMA_IRQHandler+0x6b8>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d018      	beq.n	800355e <HAL_DMA_IRQHandler+0x516>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a74      	ldr	r2, [pc, #464]	; (8003704 <HAL_DMA_IRQHandler+0x6bc>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d013      	beq.n	800355e <HAL_DMA_IRQHandler+0x516>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4a73      	ldr	r2, [pc, #460]	; (8003708 <HAL_DMA_IRQHandler+0x6c0>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d00e      	beq.n	800355e <HAL_DMA_IRQHandler+0x516>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a71      	ldr	r2, [pc, #452]	; (800370c <HAL_DMA_IRQHandler+0x6c4>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d009      	beq.n	800355e <HAL_DMA_IRQHandler+0x516>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4a70      	ldr	r2, [pc, #448]	; (8003710 <HAL_DMA_IRQHandler+0x6c8>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d004      	beq.n	800355e <HAL_DMA_IRQHandler+0x516>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a6e      	ldr	r2, [pc, #440]	; (8003714 <HAL_DMA_IRQHandler+0x6cc>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d10a      	bne.n	8003574 <HAL_DMA_IRQHandler+0x52c>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f003 0308 	and.w	r3, r3, #8
 8003568:	2b00      	cmp	r3, #0
 800356a:	bf14      	ite	ne
 800356c:	2301      	movne	r3, #1
 800356e:	2300      	moveq	r3, #0
 8003570:	b2db      	uxtb	r3, r3
 8003572:	e009      	b.n	8003588 <HAL_DMA_IRQHandler+0x540>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f003 0304 	and.w	r3, r3, #4
 800357e:	2b00      	cmp	r3, #0
 8003580:	bf14      	ite	ne
 8003582:	2301      	movne	r3, #1
 8003584:	2300      	moveq	r3, #0
 8003586:	b2db      	uxtb	r3, r3
 8003588:	2b00      	cmp	r3, #0
 800358a:	d03e      	beq.n	800360a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003590:	f003 031f 	and.w	r3, r3, #31
 8003594:	2210      	movs	r2, #16
 8003596:	409a      	lsls	r2, r3
 8003598:	6a3b      	ldr	r3, [r7, #32]
 800359a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d018      	beq.n	80035dc <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d108      	bne.n	80035ca <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d024      	beq.n	800360a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c4:	6878      	ldr	r0, [r7, #4]
 80035c6:	4798      	blx	r3
 80035c8:	e01f      	b.n	800360a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d01b      	beq.n	800360a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035d6:	6878      	ldr	r0, [r7, #4]
 80035d8:	4798      	blx	r3
 80035da:	e016      	b.n	800360a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d107      	bne.n	80035fa <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	681a      	ldr	r2, [r3, #0]
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f022 0208 	bic.w	r2, r2, #8
 80035f8:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d003      	beq.n	800360a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003606:	6878      	ldr	r0, [r7, #4]
 8003608:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800360e:	f003 031f 	and.w	r3, r3, #31
 8003612:	2220      	movs	r2, #32
 8003614:	409a      	lsls	r2, r3
 8003616:	69bb      	ldr	r3, [r7, #24]
 8003618:	4013      	ands	r3, r2
 800361a:	2b00      	cmp	r3, #0
 800361c:	f000 8110 	beq.w	8003840 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a2c      	ldr	r2, [pc, #176]	; (80036d8 <HAL_DMA_IRQHandler+0x690>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d04a      	beq.n	80036c0 <HAL_DMA_IRQHandler+0x678>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4a2b      	ldr	r2, [pc, #172]	; (80036dc <HAL_DMA_IRQHandler+0x694>)
 8003630:	4293      	cmp	r3, r2
 8003632:	d045      	beq.n	80036c0 <HAL_DMA_IRQHandler+0x678>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a29      	ldr	r2, [pc, #164]	; (80036e0 <HAL_DMA_IRQHandler+0x698>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d040      	beq.n	80036c0 <HAL_DMA_IRQHandler+0x678>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4a28      	ldr	r2, [pc, #160]	; (80036e4 <HAL_DMA_IRQHandler+0x69c>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d03b      	beq.n	80036c0 <HAL_DMA_IRQHandler+0x678>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a26      	ldr	r2, [pc, #152]	; (80036e8 <HAL_DMA_IRQHandler+0x6a0>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d036      	beq.n	80036c0 <HAL_DMA_IRQHandler+0x678>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4a25      	ldr	r2, [pc, #148]	; (80036ec <HAL_DMA_IRQHandler+0x6a4>)
 8003658:	4293      	cmp	r3, r2
 800365a:	d031      	beq.n	80036c0 <HAL_DMA_IRQHandler+0x678>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a23      	ldr	r2, [pc, #140]	; (80036f0 <HAL_DMA_IRQHandler+0x6a8>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d02c      	beq.n	80036c0 <HAL_DMA_IRQHandler+0x678>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4a22      	ldr	r2, [pc, #136]	; (80036f4 <HAL_DMA_IRQHandler+0x6ac>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d027      	beq.n	80036c0 <HAL_DMA_IRQHandler+0x678>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a20      	ldr	r2, [pc, #128]	; (80036f8 <HAL_DMA_IRQHandler+0x6b0>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d022      	beq.n	80036c0 <HAL_DMA_IRQHandler+0x678>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4a1f      	ldr	r2, [pc, #124]	; (80036fc <HAL_DMA_IRQHandler+0x6b4>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d01d      	beq.n	80036c0 <HAL_DMA_IRQHandler+0x678>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a1d      	ldr	r2, [pc, #116]	; (8003700 <HAL_DMA_IRQHandler+0x6b8>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d018      	beq.n	80036c0 <HAL_DMA_IRQHandler+0x678>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a1c      	ldr	r2, [pc, #112]	; (8003704 <HAL_DMA_IRQHandler+0x6bc>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d013      	beq.n	80036c0 <HAL_DMA_IRQHandler+0x678>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a1a      	ldr	r2, [pc, #104]	; (8003708 <HAL_DMA_IRQHandler+0x6c0>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d00e      	beq.n	80036c0 <HAL_DMA_IRQHandler+0x678>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a19      	ldr	r2, [pc, #100]	; (800370c <HAL_DMA_IRQHandler+0x6c4>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d009      	beq.n	80036c0 <HAL_DMA_IRQHandler+0x678>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a17      	ldr	r2, [pc, #92]	; (8003710 <HAL_DMA_IRQHandler+0x6c8>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d004      	beq.n	80036c0 <HAL_DMA_IRQHandler+0x678>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a16      	ldr	r2, [pc, #88]	; (8003714 <HAL_DMA_IRQHandler+0x6cc>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d12b      	bne.n	8003718 <HAL_DMA_IRQHandler+0x6d0>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f003 0310 	and.w	r3, r3, #16
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	bf14      	ite	ne
 80036ce:	2301      	movne	r3, #1
 80036d0:	2300      	moveq	r3, #0
 80036d2:	b2db      	uxtb	r3, r3
 80036d4:	e02a      	b.n	800372c <HAL_DMA_IRQHandler+0x6e4>
 80036d6:	bf00      	nop
 80036d8:	40020010 	.word	0x40020010
 80036dc:	40020028 	.word	0x40020028
 80036e0:	40020040 	.word	0x40020040
 80036e4:	40020058 	.word	0x40020058
 80036e8:	40020070 	.word	0x40020070
 80036ec:	40020088 	.word	0x40020088
 80036f0:	400200a0 	.word	0x400200a0
 80036f4:	400200b8 	.word	0x400200b8
 80036f8:	40020410 	.word	0x40020410
 80036fc:	40020428 	.word	0x40020428
 8003700:	40020440 	.word	0x40020440
 8003704:	40020458 	.word	0x40020458
 8003708:	40020470 	.word	0x40020470
 800370c:	40020488 	.word	0x40020488
 8003710:	400204a0 	.word	0x400204a0
 8003714:	400204b8 	.word	0x400204b8
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f003 0302 	and.w	r3, r3, #2
 8003722:	2b00      	cmp	r3, #0
 8003724:	bf14      	ite	ne
 8003726:	2301      	movne	r3, #1
 8003728:	2300      	moveq	r3, #0
 800372a:	b2db      	uxtb	r3, r3
 800372c:	2b00      	cmp	r3, #0
 800372e:	f000 8087 	beq.w	8003840 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003736:	f003 031f 	and.w	r3, r3, #31
 800373a:	2220      	movs	r2, #32
 800373c:	409a      	lsls	r2, r3
 800373e:	6a3b      	ldr	r3, [r7, #32]
 8003740:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003748:	b2db      	uxtb	r3, r3
 800374a:	2b04      	cmp	r3, #4
 800374c:	d139      	bne.n	80037c2 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	681a      	ldr	r2, [r3, #0]
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f022 0216 	bic.w	r2, r2, #22
 800375c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	695a      	ldr	r2, [r3, #20]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800376c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003772:	2b00      	cmp	r3, #0
 8003774:	d103      	bne.n	800377e <HAL_DMA_IRQHandler+0x736>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800377a:	2b00      	cmp	r3, #0
 800377c:	d007      	beq.n	800378e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	681a      	ldr	r2, [r3, #0]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f022 0208 	bic.w	r2, r2, #8
 800378c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003792:	f003 031f 	and.w	r3, r3, #31
 8003796:	223f      	movs	r2, #63	; 0x3f
 8003798:	409a      	lsls	r2, r3
 800379a:	6a3b      	ldr	r3, [r7, #32]
 800379c:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2200      	movs	r2, #0
 80037a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2201      	movs	r2, #1
 80037aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	f000 834a 	beq.w	8003e4c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037bc:	6878      	ldr	r0, [r7, #4]
 80037be:	4798      	blx	r3
          }
          return;
 80037c0:	e344      	b.n	8003e4c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d018      	beq.n	8003802 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d108      	bne.n	80037f0 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d02c      	beq.n	8003840 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037ea:	6878      	ldr	r0, [r7, #4]
 80037ec:	4798      	blx	r3
 80037ee:	e027      	b.n	8003840 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d023      	beq.n	8003840 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037fc:	6878      	ldr	r0, [r7, #4]
 80037fe:	4798      	blx	r3
 8003800:	e01e      	b.n	8003840 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800380c:	2b00      	cmp	r3, #0
 800380e:	d10f      	bne.n	8003830 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	681a      	ldr	r2, [r3, #0]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f022 0210 	bic.w	r2, r2, #16
 800381e:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2200      	movs	r2, #0
 8003824:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2201      	movs	r2, #1
 800382c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003834:	2b00      	cmp	r3, #0
 8003836:	d003      	beq.n	8003840 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800383c:	6878      	ldr	r0, [r7, #4]
 800383e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003844:	2b00      	cmp	r3, #0
 8003846:	f000 8306 	beq.w	8003e56 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800384e:	f003 0301 	and.w	r3, r3, #1
 8003852:	2b00      	cmp	r3, #0
 8003854:	f000 8088 	beq.w	8003968 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2204      	movs	r2, #4
 800385c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4a7a      	ldr	r2, [pc, #488]	; (8003a50 <HAL_DMA_IRQHandler+0xa08>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d04a      	beq.n	8003900 <HAL_DMA_IRQHandler+0x8b8>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4a79      	ldr	r2, [pc, #484]	; (8003a54 <HAL_DMA_IRQHandler+0xa0c>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d045      	beq.n	8003900 <HAL_DMA_IRQHandler+0x8b8>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4a77      	ldr	r2, [pc, #476]	; (8003a58 <HAL_DMA_IRQHandler+0xa10>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d040      	beq.n	8003900 <HAL_DMA_IRQHandler+0x8b8>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4a76      	ldr	r2, [pc, #472]	; (8003a5c <HAL_DMA_IRQHandler+0xa14>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d03b      	beq.n	8003900 <HAL_DMA_IRQHandler+0x8b8>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4a74      	ldr	r2, [pc, #464]	; (8003a60 <HAL_DMA_IRQHandler+0xa18>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d036      	beq.n	8003900 <HAL_DMA_IRQHandler+0x8b8>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4a73      	ldr	r2, [pc, #460]	; (8003a64 <HAL_DMA_IRQHandler+0xa1c>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d031      	beq.n	8003900 <HAL_DMA_IRQHandler+0x8b8>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a71      	ldr	r2, [pc, #452]	; (8003a68 <HAL_DMA_IRQHandler+0xa20>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d02c      	beq.n	8003900 <HAL_DMA_IRQHandler+0x8b8>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4a70      	ldr	r2, [pc, #448]	; (8003a6c <HAL_DMA_IRQHandler+0xa24>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d027      	beq.n	8003900 <HAL_DMA_IRQHandler+0x8b8>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a6e      	ldr	r2, [pc, #440]	; (8003a70 <HAL_DMA_IRQHandler+0xa28>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d022      	beq.n	8003900 <HAL_DMA_IRQHandler+0x8b8>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4a6d      	ldr	r2, [pc, #436]	; (8003a74 <HAL_DMA_IRQHandler+0xa2c>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d01d      	beq.n	8003900 <HAL_DMA_IRQHandler+0x8b8>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a6b      	ldr	r2, [pc, #428]	; (8003a78 <HAL_DMA_IRQHandler+0xa30>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d018      	beq.n	8003900 <HAL_DMA_IRQHandler+0x8b8>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4a6a      	ldr	r2, [pc, #424]	; (8003a7c <HAL_DMA_IRQHandler+0xa34>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d013      	beq.n	8003900 <HAL_DMA_IRQHandler+0x8b8>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a68      	ldr	r2, [pc, #416]	; (8003a80 <HAL_DMA_IRQHandler+0xa38>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d00e      	beq.n	8003900 <HAL_DMA_IRQHandler+0x8b8>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4a67      	ldr	r2, [pc, #412]	; (8003a84 <HAL_DMA_IRQHandler+0xa3c>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d009      	beq.n	8003900 <HAL_DMA_IRQHandler+0x8b8>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a65      	ldr	r2, [pc, #404]	; (8003a88 <HAL_DMA_IRQHandler+0xa40>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d004      	beq.n	8003900 <HAL_DMA_IRQHandler+0x8b8>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4a64      	ldr	r2, [pc, #400]	; (8003a8c <HAL_DMA_IRQHandler+0xa44>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d108      	bne.n	8003912 <HAL_DMA_IRQHandler+0x8ca>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	681a      	ldr	r2, [r3, #0]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f022 0201 	bic.w	r2, r2, #1
 800390e:	601a      	str	r2, [r3, #0]
 8003910:	e007      	b.n	8003922 <HAL_DMA_IRQHandler+0x8da>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	681a      	ldr	r2, [r3, #0]
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f022 0201 	bic.w	r2, r2, #1
 8003920:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	3301      	adds	r3, #1
 8003926:	60fb      	str	r3, [r7, #12]
 8003928:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800392a:	429a      	cmp	r2, r3
 800392c:	d307      	bcc.n	800393e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f003 0301 	and.w	r3, r3, #1
 8003938:	2b00      	cmp	r3, #0
 800393a:	d1f2      	bne.n	8003922 <HAL_DMA_IRQHandler+0x8da>
 800393c:	e000      	b.n	8003940 <HAL_DMA_IRQHandler+0x8f8>
            break;
 800393e:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2200      	movs	r2, #0
 8003944:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f003 0301 	and.w	r3, r3, #1
 8003952:	2b00      	cmp	r3, #0
 8003954:	d004      	beq.n	8003960 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2203      	movs	r2, #3
 800395a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800395e:	e003      	b.n	8003968 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2201      	movs	r2, #1
 8003964:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800396c:	2b00      	cmp	r3, #0
 800396e:	f000 8272 	beq.w	8003e56 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003976:	6878      	ldr	r0, [r7, #4]
 8003978:	4798      	blx	r3
 800397a:	e26c      	b.n	8003e56 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a43      	ldr	r2, [pc, #268]	; (8003a90 <HAL_DMA_IRQHandler+0xa48>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d022      	beq.n	80039cc <HAL_DMA_IRQHandler+0x984>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4a42      	ldr	r2, [pc, #264]	; (8003a94 <HAL_DMA_IRQHandler+0xa4c>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d01d      	beq.n	80039cc <HAL_DMA_IRQHandler+0x984>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a40      	ldr	r2, [pc, #256]	; (8003a98 <HAL_DMA_IRQHandler+0xa50>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d018      	beq.n	80039cc <HAL_DMA_IRQHandler+0x984>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4a3f      	ldr	r2, [pc, #252]	; (8003a9c <HAL_DMA_IRQHandler+0xa54>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d013      	beq.n	80039cc <HAL_DMA_IRQHandler+0x984>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a3d      	ldr	r2, [pc, #244]	; (8003aa0 <HAL_DMA_IRQHandler+0xa58>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d00e      	beq.n	80039cc <HAL_DMA_IRQHandler+0x984>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a3c      	ldr	r2, [pc, #240]	; (8003aa4 <HAL_DMA_IRQHandler+0xa5c>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d009      	beq.n	80039cc <HAL_DMA_IRQHandler+0x984>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a3a      	ldr	r2, [pc, #232]	; (8003aa8 <HAL_DMA_IRQHandler+0xa60>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d004      	beq.n	80039cc <HAL_DMA_IRQHandler+0x984>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4a39      	ldr	r2, [pc, #228]	; (8003aac <HAL_DMA_IRQHandler+0xa64>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d101      	bne.n	80039d0 <HAL_DMA_IRQHandler+0x988>
 80039cc:	2301      	movs	r3, #1
 80039ce:	e000      	b.n	80039d2 <HAL_DMA_IRQHandler+0x98a>
 80039d0:	2300      	movs	r3, #0
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	f000 823f 	beq.w	8003e56 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039e4:	f003 031f 	and.w	r3, r3, #31
 80039e8:	2204      	movs	r2, #4
 80039ea:	409a      	lsls	r2, r3
 80039ec:	697b      	ldr	r3, [r7, #20]
 80039ee:	4013      	ands	r3, r2
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	f000 80cd 	beq.w	8003b90 <HAL_DMA_IRQHandler+0xb48>
 80039f6:	693b      	ldr	r3, [r7, #16]
 80039f8:	f003 0304 	and.w	r3, r3, #4
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	f000 80c7 	beq.w	8003b90 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a06:	f003 031f 	and.w	r3, r3, #31
 8003a0a:	2204      	movs	r2, #4
 8003a0c:	409a      	lsls	r2, r3
 8003a0e:	69fb      	ldr	r3, [r7, #28]
 8003a10:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003a12:	693b      	ldr	r3, [r7, #16]
 8003a14:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d049      	beq.n	8003ab0 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003a1c:	693b      	ldr	r3, [r7, #16]
 8003a1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d109      	bne.n	8003a3a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	f000 8210 	beq.w	8003e50 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a34:	6878      	ldr	r0, [r7, #4]
 8003a36:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003a38:	e20a      	b.n	8003e50 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	f000 8206 	beq.w	8003e50 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a48:	6878      	ldr	r0, [r7, #4]
 8003a4a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003a4c:	e200      	b.n	8003e50 <HAL_DMA_IRQHandler+0xe08>
 8003a4e:	bf00      	nop
 8003a50:	40020010 	.word	0x40020010
 8003a54:	40020028 	.word	0x40020028
 8003a58:	40020040 	.word	0x40020040
 8003a5c:	40020058 	.word	0x40020058
 8003a60:	40020070 	.word	0x40020070
 8003a64:	40020088 	.word	0x40020088
 8003a68:	400200a0 	.word	0x400200a0
 8003a6c:	400200b8 	.word	0x400200b8
 8003a70:	40020410 	.word	0x40020410
 8003a74:	40020428 	.word	0x40020428
 8003a78:	40020440 	.word	0x40020440
 8003a7c:	40020458 	.word	0x40020458
 8003a80:	40020470 	.word	0x40020470
 8003a84:	40020488 	.word	0x40020488
 8003a88:	400204a0 	.word	0x400204a0
 8003a8c:	400204b8 	.word	0x400204b8
 8003a90:	58025408 	.word	0x58025408
 8003a94:	5802541c 	.word	0x5802541c
 8003a98:	58025430 	.word	0x58025430
 8003a9c:	58025444 	.word	0x58025444
 8003aa0:	58025458 	.word	0x58025458
 8003aa4:	5802546c 	.word	0x5802546c
 8003aa8:	58025480 	.word	0x58025480
 8003aac:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003ab0:	693b      	ldr	r3, [r7, #16]
 8003ab2:	f003 0320 	and.w	r3, r3, #32
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d160      	bne.n	8003b7c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4a8c      	ldr	r2, [pc, #560]	; (8003cf0 <HAL_DMA_IRQHandler+0xca8>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d04a      	beq.n	8003b5a <HAL_DMA_IRQHandler+0xb12>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a8a      	ldr	r2, [pc, #552]	; (8003cf4 <HAL_DMA_IRQHandler+0xcac>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d045      	beq.n	8003b5a <HAL_DMA_IRQHandler+0xb12>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a89      	ldr	r2, [pc, #548]	; (8003cf8 <HAL_DMA_IRQHandler+0xcb0>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d040      	beq.n	8003b5a <HAL_DMA_IRQHandler+0xb12>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a87      	ldr	r2, [pc, #540]	; (8003cfc <HAL_DMA_IRQHandler+0xcb4>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d03b      	beq.n	8003b5a <HAL_DMA_IRQHandler+0xb12>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4a86      	ldr	r2, [pc, #536]	; (8003d00 <HAL_DMA_IRQHandler+0xcb8>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d036      	beq.n	8003b5a <HAL_DMA_IRQHandler+0xb12>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a84      	ldr	r2, [pc, #528]	; (8003d04 <HAL_DMA_IRQHandler+0xcbc>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d031      	beq.n	8003b5a <HAL_DMA_IRQHandler+0xb12>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4a83      	ldr	r2, [pc, #524]	; (8003d08 <HAL_DMA_IRQHandler+0xcc0>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d02c      	beq.n	8003b5a <HAL_DMA_IRQHandler+0xb12>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a81      	ldr	r2, [pc, #516]	; (8003d0c <HAL_DMA_IRQHandler+0xcc4>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d027      	beq.n	8003b5a <HAL_DMA_IRQHandler+0xb12>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a80      	ldr	r2, [pc, #512]	; (8003d10 <HAL_DMA_IRQHandler+0xcc8>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d022      	beq.n	8003b5a <HAL_DMA_IRQHandler+0xb12>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a7e      	ldr	r2, [pc, #504]	; (8003d14 <HAL_DMA_IRQHandler+0xccc>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d01d      	beq.n	8003b5a <HAL_DMA_IRQHandler+0xb12>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a7d      	ldr	r2, [pc, #500]	; (8003d18 <HAL_DMA_IRQHandler+0xcd0>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d018      	beq.n	8003b5a <HAL_DMA_IRQHandler+0xb12>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a7b      	ldr	r2, [pc, #492]	; (8003d1c <HAL_DMA_IRQHandler+0xcd4>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d013      	beq.n	8003b5a <HAL_DMA_IRQHandler+0xb12>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a7a      	ldr	r2, [pc, #488]	; (8003d20 <HAL_DMA_IRQHandler+0xcd8>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d00e      	beq.n	8003b5a <HAL_DMA_IRQHandler+0xb12>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a78      	ldr	r2, [pc, #480]	; (8003d24 <HAL_DMA_IRQHandler+0xcdc>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d009      	beq.n	8003b5a <HAL_DMA_IRQHandler+0xb12>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a77      	ldr	r2, [pc, #476]	; (8003d28 <HAL_DMA_IRQHandler+0xce0>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d004      	beq.n	8003b5a <HAL_DMA_IRQHandler+0xb12>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a75      	ldr	r2, [pc, #468]	; (8003d2c <HAL_DMA_IRQHandler+0xce4>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d108      	bne.n	8003b6c <HAL_DMA_IRQHandler+0xb24>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	681a      	ldr	r2, [r3, #0]
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f022 0208 	bic.w	r2, r2, #8
 8003b68:	601a      	str	r2, [r3, #0]
 8003b6a:	e007      	b.n	8003b7c <HAL_DMA_IRQHandler+0xb34>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	681a      	ldr	r2, [r3, #0]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f022 0204 	bic.w	r2, r2, #4
 8003b7a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	f000 8165 	beq.w	8003e50 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b8a:	6878      	ldr	r0, [r7, #4]
 8003b8c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003b8e:	e15f      	b.n	8003e50 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b94:	f003 031f 	and.w	r3, r3, #31
 8003b98:	2202      	movs	r2, #2
 8003b9a:	409a      	lsls	r2, r3
 8003b9c:	697b      	ldr	r3, [r7, #20]
 8003b9e:	4013      	ands	r3, r2
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	f000 80c5 	beq.w	8003d30 <HAL_DMA_IRQHandler+0xce8>
 8003ba6:	693b      	ldr	r3, [r7, #16]
 8003ba8:	f003 0302 	and.w	r3, r3, #2
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	f000 80bf 	beq.w	8003d30 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bb6:	f003 031f 	and.w	r3, r3, #31
 8003bba:	2202      	movs	r2, #2
 8003bbc:	409a      	lsls	r2, r3
 8003bbe:	69fb      	ldr	r3, [r7, #28]
 8003bc0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003bc2:	693b      	ldr	r3, [r7, #16]
 8003bc4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d018      	beq.n	8003bfe <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003bcc:	693b      	ldr	r3, [r7, #16]
 8003bce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d109      	bne.n	8003bea <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	f000 813a 	beq.w	8003e54 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003be4:	6878      	ldr	r0, [r7, #4]
 8003be6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003be8:	e134      	b.n	8003e54 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	f000 8130 	beq.w	8003e54 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bf8:	6878      	ldr	r0, [r7, #4]
 8003bfa:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003bfc:	e12a      	b.n	8003e54 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003bfe:	693b      	ldr	r3, [r7, #16]
 8003c00:	f003 0320 	and.w	r3, r3, #32
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d168      	bne.n	8003cda <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4a38      	ldr	r2, [pc, #224]	; (8003cf0 <HAL_DMA_IRQHandler+0xca8>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d04a      	beq.n	8003ca8 <HAL_DMA_IRQHandler+0xc60>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a37      	ldr	r2, [pc, #220]	; (8003cf4 <HAL_DMA_IRQHandler+0xcac>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d045      	beq.n	8003ca8 <HAL_DMA_IRQHandler+0xc60>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a35      	ldr	r2, [pc, #212]	; (8003cf8 <HAL_DMA_IRQHandler+0xcb0>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d040      	beq.n	8003ca8 <HAL_DMA_IRQHandler+0xc60>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4a34      	ldr	r2, [pc, #208]	; (8003cfc <HAL_DMA_IRQHandler+0xcb4>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d03b      	beq.n	8003ca8 <HAL_DMA_IRQHandler+0xc60>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a32      	ldr	r2, [pc, #200]	; (8003d00 <HAL_DMA_IRQHandler+0xcb8>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d036      	beq.n	8003ca8 <HAL_DMA_IRQHandler+0xc60>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4a31      	ldr	r2, [pc, #196]	; (8003d04 <HAL_DMA_IRQHandler+0xcbc>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d031      	beq.n	8003ca8 <HAL_DMA_IRQHandler+0xc60>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a2f      	ldr	r2, [pc, #188]	; (8003d08 <HAL_DMA_IRQHandler+0xcc0>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d02c      	beq.n	8003ca8 <HAL_DMA_IRQHandler+0xc60>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4a2e      	ldr	r2, [pc, #184]	; (8003d0c <HAL_DMA_IRQHandler+0xcc4>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d027      	beq.n	8003ca8 <HAL_DMA_IRQHandler+0xc60>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4a2c      	ldr	r2, [pc, #176]	; (8003d10 <HAL_DMA_IRQHandler+0xcc8>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d022      	beq.n	8003ca8 <HAL_DMA_IRQHandler+0xc60>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4a2b      	ldr	r2, [pc, #172]	; (8003d14 <HAL_DMA_IRQHandler+0xccc>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d01d      	beq.n	8003ca8 <HAL_DMA_IRQHandler+0xc60>
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a29      	ldr	r2, [pc, #164]	; (8003d18 <HAL_DMA_IRQHandler+0xcd0>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d018      	beq.n	8003ca8 <HAL_DMA_IRQHandler+0xc60>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4a28      	ldr	r2, [pc, #160]	; (8003d1c <HAL_DMA_IRQHandler+0xcd4>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d013      	beq.n	8003ca8 <HAL_DMA_IRQHandler+0xc60>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a26      	ldr	r2, [pc, #152]	; (8003d20 <HAL_DMA_IRQHandler+0xcd8>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d00e      	beq.n	8003ca8 <HAL_DMA_IRQHandler+0xc60>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4a25      	ldr	r2, [pc, #148]	; (8003d24 <HAL_DMA_IRQHandler+0xcdc>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d009      	beq.n	8003ca8 <HAL_DMA_IRQHandler+0xc60>
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4a23      	ldr	r2, [pc, #140]	; (8003d28 <HAL_DMA_IRQHandler+0xce0>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d004      	beq.n	8003ca8 <HAL_DMA_IRQHandler+0xc60>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4a22      	ldr	r2, [pc, #136]	; (8003d2c <HAL_DMA_IRQHandler+0xce4>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d108      	bne.n	8003cba <HAL_DMA_IRQHandler+0xc72>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	681a      	ldr	r2, [r3, #0]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f022 0214 	bic.w	r2, r2, #20
 8003cb6:	601a      	str	r2, [r3, #0]
 8003cb8:	e007      	b.n	8003cca <HAL_DMA_IRQHandler+0xc82>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	681a      	ldr	r2, [r3, #0]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f022 020a 	bic.w	r2, r2, #10
 8003cc8:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2201      	movs	r2, #1
 8003cd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	f000 80b8 	beq.w	8003e54 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ce8:	6878      	ldr	r0, [r7, #4]
 8003cea:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003cec:	e0b2      	b.n	8003e54 <HAL_DMA_IRQHandler+0xe0c>
 8003cee:	bf00      	nop
 8003cf0:	40020010 	.word	0x40020010
 8003cf4:	40020028 	.word	0x40020028
 8003cf8:	40020040 	.word	0x40020040
 8003cfc:	40020058 	.word	0x40020058
 8003d00:	40020070 	.word	0x40020070
 8003d04:	40020088 	.word	0x40020088
 8003d08:	400200a0 	.word	0x400200a0
 8003d0c:	400200b8 	.word	0x400200b8
 8003d10:	40020410 	.word	0x40020410
 8003d14:	40020428 	.word	0x40020428
 8003d18:	40020440 	.word	0x40020440
 8003d1c:	40020458 	.word	0x40020458
 8003d20:	40020470 	.word	0x40020470
 8003d24:	40020488 	.word	0x40020488
 8003d28:	400204a0 	.word	0x400204a0
 8003d2c:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d34:	f003 031f 	and.w	r3, r3, #31
 8003d38:	2208      	movs	r2, #8
 8003d3a:	409a      	lsls	r2, r3
 8003d3c:	697b      	ldr	r3, [r7, #20]
 8003d3e:	4013      	ands	r3, r2
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	f000 8088 	beq.w	8003e56 <HAL_DMA_IRQHandler+0xe0e>
 8003d46:	693b      	ldr	r3, [r7, #16]
 8003d48:	f003 0308 	and.w	r3, r3, #8
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	f000 8082 	beq.w	8003e56 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4a41      	ldr	r2, [pc, #260]	; (8003e5c <HAL_DMA_IRQHandler+0xe14>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d04a      	beq.n	8003df2 <HAL_DMA_IRQHandler+0xdaa>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a3f      	ldr	r2, [pc, #252]	; (8003e60 <HAL_DMA_IRQHandler+0xe18>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d045      	beq.n	8003df2 <HAL_DMA_IRQHandler+0xdaa>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a3e      	ldr	r2, [pc, #248]	; (8003e64 <HAL_DMA_IRQHandler+0xe1c>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d040      	beq.n	8003df2 <HAL_DMA_IRQHandler+0xdaa>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a3c      	ldr	r2, [pc, #240]	; (8003e68 <HAL_DMA_IRQHandler+0xe20>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d03b      	beq.n	8003df2 <HAL_DMA_IRQHandler+0xdaa>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4a3b      	ldr	r2, [pc, #236]	; (8003e6c <HAL_DMA_IRQHandler+0xe24>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d036      	beq.n	8003df2 <HAL_DMA_IRQHandler+0xdaa>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4a39      	ldr	r2, [pc, #228]	; (8003e70 <HAL_DMA_IRQHandler+0xe28>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d031      	beq.n	8003df2 <HAL_DMA_IRQHandler+0xdaa>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4a38      	ldr	r2, [pc, #224]	; (8003e74 <HAL_DMA_IRQHandler+0xe2c>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d02c      	beq.n	8003df2 <HAL_DMA_IRQHandler+0xdaa>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4a36      	ldr	r2, [pc, #216]	; (8003e78 <HAL_DMA_IRQHandler+0xe30>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d027      	beq.n	8003df2 <HAL_DMA_IRQHandler+0xdaa>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4a35      	ldr	r2, [pc, #212]	; (8003e7c <HAL_DMA_IRQHandler+0xe34>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d022      	beq.n	8003df2 <HAL_DMA_IRQHandler+0xdaa>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a33      	ldr	r2, [pc, #204]	; (8003e80 <HAL_DMA_IRQHandler+0xe38>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d01d      	beq.n	8003df2 <HAL_DMA_IRQHandler+0xdaa>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4a32      	ldr	r2, [pc, #200]	; (8003e84 <HAL_DMA_IRQHandler+0xe3c>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d018      	beq.n	8003df2 <HAL_DMA_IRQHandler+0xdaa>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4a30      	ldr	r2, [pc, #192]	; (8003e88 <HAL_DMA_IRQHandler+0xe40>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d013      	beq.n	8003df2 <HAL_DMA_IRQHandler+0xdaa>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4a2f      	ldr	r2, [pc, #188]	; (8003e8c <HAL_DMA_IRQHandler+0xe44>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d00e      	beq.n	8003df2 <HAL_DMA_IRQHandler+0xdaa>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4a2d      	ldr	r2, [pc, #180]	; (8003e90 <HAL_DMA_IRQHandler+0xe48>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d009      	beq.n	8003df2 <HAL_DMA_IRQHandler+0xdaa>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4a2c      	ldr	r2, [pc, #176]	; (8003e94 <HAL_DMA_IRQHandler+0xe4c>)
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d004      	beq.n	8003df2 <HAL_DMA_IRQHandler+0xdaa>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4a2a      	ldr	r2, [pc, #168]	; (8003e98 <HAL_DMA_IRQHandler+0xe50>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d108      	bne.n	8003e04 <HAL_DMA_IRQHandler+0xdbc>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	681a      	ldr	r2, [r3, #0]
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f022 021c 	bic.w	r2, r2, #28
 8003e00:	601a      	str	r2, [r3, #0]
 8003e02:	e007      	b.n	8003e14 <HAL_DMA_IRQHandler+0xdcc>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	681a      	ldr	r2, [r3, #0]
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f022 020e 	bic.w	r2, r2, #14
 8003e12:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e18:	f003 031f 	and.w	r3, r3, #31
 8003e1c:	2201      	movs	r2, #1
 8003e1e:	409a      	lsls	r2, r3
 8003e20:	69fb      	ldr	r3, [r7, #28]
 8003e22:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2201      	movs	r2, #1
 8003e28:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2201      	movs	r2, #1
 8003e36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d009      	beq.n	8003e56 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e46:	6878      	ldr	r0, [r7, #4]
 8003e48:	4798      	blx	r3
 8003e4a:	e004      	b.n	8003e56 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8003e4c:	bf00      	nop
 8003e4e:	e002      	b.n	8003e56 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003e50:	bf00      	nop
 8003e52:	e000      	b.n	8003e56 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003e54:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003e56:	3728      	adds	r7, #40	; 0x28
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	bd80      	pop	{r7, pc}
 8003e5c:	40020010 	.word	0x40020010
 8003e60:	40020028 	.word	0x40020028
 8003e64:	40020040 	.word	0x40020040
 8003e68:	40020058 	.word	0x40020058
 8003e6c:	40020070 	.word	0x40020070
 8003e70:	40020088 	.word	0x40020088
 8003e74:	400200a0 	.word	0x400200a0
 8003e78:	400200b8 	.word	0x400200b8
 8003e7c:	40020410 	.word	0x40020410
 8003e80:	40020428 	.word	0x40020428
 8003e84:	40020440 	.word	0x40020440
 8003e88:	40020458 	.word	0x40020458
 8003e8c:	40020470 	.word	0x40020470
 8003e90:	40020488 	.word	0x40020488
 8003e94:	400204a0 	.word	0x400204a0
 8003e98:	400204b8 	.word	0x400204b8

08003e9c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b087      	sub	sp, #28
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	60f8      	str	r0, [r7, #12]
 8003ea4:	60b9      	str	r1, [r7, #8]
 8003ea6:	607a      	str	r2, [r7, #4]
 8003ea8:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003eae:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003eb4:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4a84      	ldr	r2, [pc, #528]	; (80040cc <DMA_SetConfig+0x230>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d072      	beq.n	8003fa6 <DMA_SetConfig+0x10a>
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4a82      	ldr	r2, [pc, #520]	; (80040d0 <DMA_SetConfig+0x234>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d06d      	beq.n	8003fa6 <DMA_SetConfig+0x10a>
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4a81      	ldr	r2, [pc, #516]	; (80040d4 <DMA_SetConfig+0x238>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d068      	beq.n	8003fa6 <DMA_SetConfig+0x10a>
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4a7f      	ldr	r2, [pc, #508]	; (80040d8 <DMA_SetConfig+0x23c>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d063      	beq.n	8003fa6 <DMA_SetConfig+0x10a>
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4a7e      	ldr	r2, [pc, #504]	; (80040dc <DMA_SetConfig+0x240>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d05e      	beq.n	8003fa6 <DMA_SetConfig+0x10a>
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4a7c      	ldr	r2, [pc, #496]	; (80040e0 <DMA_SetConfig+0x244>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d059      	beq.n	8003fa6 <DMA_SetConfig+0x10a>
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4a7b      	ldr	r2, [pc, #492]	; (80040e4 <DMA_SetConfig+0x248>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d054      	beq.n	8003fa6 <DMA_SetConfig+0x10a>
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4a79      	ldr	r2, [pc, #484]	; (80040e8 <DMA_SetConfig+0x24c>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d04f      	beq.n	8003fa6 <DMA_SetConfig+0x10a>
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4a78      	ldr	r2, [pc, #480]	; (80040ec <DMA_SetConfig+0x250>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d04a      	beq.n	8003fa6 <DMA_SetConfig+0x10a>
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4a76      	ldr	r2, [pc, #472]	; (80040f0 <DMA_SetConfig+0x254>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d045      	beq.n	8003fa6 <DMA_SetConfig+0x10a>
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4a75      	ldr	r2, [pc, #468]	; (80040f4 <DMA_SetConfig+0x258>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d040      	beq.n	8003fa6 <DMA_SetConfig+0x10a>
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4a73      	ldr	r2, [pc, #460]	; (80040f8 <DMA_SetConfig+0x25c>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d03b      	beq.n	8003fa6 <DMA_SetConfig+0x10a>
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4a72      	ldr	r2, [pc, #456]	; (80040fc <DMA_SetConfig+0x260>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d036      	beq.n	8003fa6 <DMA_SetConfig+0x10a>
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4a70      	ldr	r2, [pc, #448]	; (8004100 <DMA_SetConfig+0x264>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d031      	beq.n	8003fa6 <DMA_SetConfig+0x10a>
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4a6f      	ldr	r2, [pc, #444]	; (8004104 <DMA_SetConfig+0x268>)
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d02c      	beq.n	8003fa6 <DMA_SetConfig+0x10a>
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4a6d      	ldr	r2, [pc, #436]	; (8004108 <DMA_SetConfig+0x26c>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d027      	beq.n	8003fa6 <DMA_SetConfig+0x10a>
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4a6c      	ldr	r2, [pc, #432]	; (800410c <DMA_SetConfig+0x270>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d022      	beq.n	8003fa6 <DMA_SetConfig+0x10a>
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a6a      	ldr	r2, [pc, #424]	; (8004110 <DMA_SetConfig+0x274>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d01d      	beq.n	8003fa6 <DMA_SetConfig+0x10a>
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4a69      	ldr	r2, [pc, #420]	; (8004114 <DMA_SetConfig+0x278>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d018      	beq.n	8003fa6 <DMA_SetConfig+0x10a>
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a67      	ldr	r2, [pc, #412]	; (8004118 <DMA_SetConfig+0x27c>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d013      	beq.n	8003fa6 <DMA_SetConfig+0x10a>
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4a66      	ldr	r2, [pc, #408]	; (800411c <DMA_SetConfig+0x280>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d00e      	beq.n	8003fa6 <DMA_SetConfig+0x10a>
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4a64      	ldr	r2, [pc, #400]	; (8004120 <DMA_SetConfig+0x284>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d009      	beq.n	8003fa6 <DMA_SetConfig+0x10a>
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4a63      	ldr	r2, [pc, #396]	; (8004124 <DMA_SetConfig+0x288>)
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d004      	beq.n	8003fa6 <DMA_SetConfig+0x10a>
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a61      	ldr	r2, [pc, #388]	; (8004128 <DMA_SetConfig+0x28c>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d101      	bne.n	8003faa <DMA_SetConfig+0x10e>
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	e000      	b.n	8003fac <DMA_SetConfig+0x110>
 8003faa:	2300      	movs	r3, #0
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d00d      	beq.n	8003fcc <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003fb4:	68fa      	ldr	r2, [r7, #12]
 8003fb6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003fb8:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d004      	beq.n	8003fcc <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fc6:	68fa      	ldr	r2, [r7, #12]
 8003fc8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003fca:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4a3e      	ldr	r2, [pc, #248]	; (80040cc <DMA_SetConfig+0x230>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d04a      	beq.n	800406c <DMA_SetConfig+0x1d0>
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4a3d      	ldr	r2, [pc, #244]	; (80040d0 <DMA_SetConfig+0x234>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d045      	beq.n	800406c <DMA_SetConfig+0x1d0>
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4a3b      	ldr	r2, [pc, #236]	; (80040d4 <DMA_SetConfig+0x238>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d040      	beq.n	800406c <DMA_SetConfig+0x1d0>
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4a3a      	ldr	r2, [pc, #232]	; (80040d8 <DMA_SetConfig+0x23c>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d03b      	beq.n	800406c <DMA_SetConfig+0x1d0>
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a38      	ldr	r2, [pc, #224]	; (80040dc <DMA_SetConfig+0x240>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d036      	beq.n	800406c <DMA_SetConfig+0x1d0>
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4a37      	ldr	r2, [pc, #220]	; (80040e0 <DMA_SetConfig+0x244>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d031      	beq.n	800406c <DMA_SetConfig+0x1d0>
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4a35      	ldr	r2, [pc, #212]	; (80040e4 <DMA_SetConfig+0x248>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d02c      	beq.n	800406c <DMA_SetConfig+0x1d0>
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4a34      	ldr	r2, [pc, #208]	; (80040e8 <DMA_SetConfig+0x24c>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d027      	beq.n	800406c <DMA_SetConfig+0x1d0>
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a32      	ldr	r2, [pc, #200]	; (80040ec <DMA_SetConfig+0x250>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d022      	beq.n	800406c <DMA_SetConfig+0x1d0>
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4a31      	ldr	r2, [pc, #196]	; (80040f0 <DMA_SetConfig+0x254>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d01d      	beq.n	800406c <DMA_SetConfig+0x1d0>
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4a2f      	ldr	r2, [pc, #188]	; (80040f4 <DMA_SetConfig+0x258>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d018      	beq.n	800406c <DMA_SetConfig+0x1d0>
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4a2e      	ldr	r2, [pc, #184]	; (80040f8 <DMA_SetConfig+0x25c>)
 8004040:	4293      	cmp	r3, r2
 8004042:	d013      	beq.n	800406c <DMA_SetConfig+0x1d0>
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4a2c      	ldr	r2, [pc, #176]	; (80040fc <DMA_SetConfig+0x260>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d00e      	beq.n	800406c <DMA_SetConfig+0x1d0>
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4a2b      	ldr	r2, [pc, #172]	; (8004100 <DMA_SetConfig+0x264>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d009      	beq.n	800406c <DMA_SetConfig+0x1d0>
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4a29      	ldr	r2, [pc, #164]	; (8004104 <DMA_SetConfig+0x268>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d004      	beq.n	800406c <DMA_SetConfig+0x1d0>
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4a28      	ldr	r2, [pc, #160]	; (8004108 <DMA_SetConfig+0x26c>)
 8004068:	4293      	cmp	r3, r2
 800406a:	d101      	bne.n	8004070 <DMA_SetConfig+0x1d4>
 800406c:	2301      	movs	r3, #1
 800406e:	e000      	b.n	8004072 <DMA_SetConfig+0x1d6>
 8004070:	2300      	movs	r3, #0
 8004072:	2b00      	cmp	r3, #0
 8004074:	d05a      	beq.n	800412c <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800407a:	f003 031f 	and.w	r3, r3, #31
 800407e:	223f      	movs	r2, #63	; 0x3f
 8004080:	409a      	lsls	r2, r3
 8004082:	697b      	ldr	r3, [r7, #20]
 8004084:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	681a      	ldr	r2, [r3, #0]
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004094:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	683a      	ldr	r2, [r7, #0]
 800409c:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	689b      	ldr	r3, [r3, #8]
 80040a2:	2b40      	cmp	r3, #64	; 0x40
 80040a4:	d108      	bne.n	80040b8 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	687a      	ldr	r2, [r7, #4]
 80040ac:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	68ba      	ldr	r2, [r7, #8]
 80040b4:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80040b6:	e087      	b.n	80041c8 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	68ba      	ldr	r2, [r7, #8]
 80040be:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	687a      	ldr	r2, [r7, #4]
 80040c6:	60da      	str	r2, [r3, #12]
}
 80040c8:	e07e      	b.n	80041c8 <DMA_SetConfig+0x32c>
 80040ca:	bf00      	nop
 80040cc:	40020010 	.word	0x40020010
 80040d0:	40020028 	.word	0x40020028
 80040d4:	40020040 	.word	0x40020040
 80040d8:	40020058 	.word	0x40020058
 80040dc:	40020070 	.word	0x40020070
 80040e0:	40020088 	.word	0x40020088
 80040e4:	400200a0 	.word	0x400200a0
 80040e8:	400200b8 	.word	0x400200b8
 80040ec:	40020410 	.word	0x40020410
 80040f0:	40020428 	.word	0x40020428
 80040f4:	40020440 	.word	0x40020440
 80040f8:	40020458 	.word	0x40020458
 80040fc:	40020470 	.word	0x40020470
 8004100:	40020488 	.word	0x40020488
 8004104:	400204a0 	.word	0x400204a0
 8004108:	400204b8 	.word	0x400204b8
 800410c:	58025408 	.word	0x58025408
 8004110:	5802541c 	.word	0x5802541c
 8004114:	58025430 	.word	0x58025430
 8004118:	58025444 	.word	0x58025444
 800411c:	58025458 	.word	0x58025458
 8004120:	5802546c 	.word	0x5802546c
 8004124:	58025480 	.word	0x58025480
 8004128:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4a28      	ldr	r2, [pc, #160]	; (80041d4 <DMA_SetConfig+0x338>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d022      	beq.n	800417c <DMA_SetConfig+0x2e0>
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4a27      	ldr	r2, [pc, #156]	; (80041d8 <DMA_SetConfig+0x33c>)
 800413c:	4293      	cmp	r3, r2
 800413e:	d01d      	beq.n	800417c <DMA_SetConfig+0x2e0>
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4a25      	ldr	r2, [pc, #148]	; (80041dc <DMA_SetConfig+0x340>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d018      	beq.n	800417c <DMA_SetConfig+0x2e0>
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	4a24      	ldr	r2, [pc, #144]	; (80041e0 <DMA_SetConfig+0x344>)
 8004150:	4293      	cmp	r3, r2
 8004152:	d013      	beq.n	800417c <DMA_SetConfig+0x2e0>
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4a22      	ldr	r2, [pc, #136]	; (80041e4 <DMA_SetConfig+0x348>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d00e      	beq.n	800417c <DMA_SetConfig+0x2e0>
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4a21      	ldr	r2, [pc, #132]	; (80041e8 <DMA_SetConfig+0x34c>)
 8004164:	4293      	cmp	r3, r2
 8004166:	d009      	beq.n	800417c <DMA_SetConfig+0x2e0>
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4a1f      	ldr	r2, [pc, #124]	; (80041ec <DMA_SetConfig+0x350>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d004      	beq.n	800417c <DMA_SetConfig+0x2e0>
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	4a1e      	ldr	r2, [pc, #120]	; (80041f0 <DMA_SetConfig+0x354>)
 8004178:	4293      	cmp	r3, r2
 800417a:	d101      	bne.n	8004180 <DMA_SetConfig+0x2e4>
 800417c:	2301      	movs	r3, #1
 800417e:	e000      	b.n	8004182 <DMA_SetConfig+0x2e6>
 8004180:	2300      	movs	r3, #0
 8004182:	2b00      	cmp	r3, #0
 8004184:	d020      	beq.n	80041c8 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800418a:	f003 031f 	and.w	r3, r3, #31
 800418e:	2201      	movs	r2, #1
 8004190:	409a      	lsls	r2, r3
 8004192:	693b      	ldr	r3, [r7, #16]
 8004194:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	683a      	ldr	r2, [r7, #0]
 800419c:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	689b      	ldr	r3, [r3, #8]
 80041a2:	2b40      	cmp	r3, #64	; 0x40
 80041a4:	d108      	bne.n	80041b8 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	687a      	ldr	r2, [r7, #4]
 80041ac:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	68ba      	ldr	r2, [r7, #8]
 80041b4:	60da      	str	r2, [r3, #12]
}
 80041b6:	e007      	b.n	80041c8 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	68ba      	ldr	r2, [r7, #8]
 80041be:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	687a      	ldr	r2, [r7, #4]
 80041c6:	60da      	str	r2, [r3, #12]
}
 80041c8:	bf00      	nop
 80041ca:	371c      	adds	r7, #28
 80041cc:	46bd      	mov	sp, r7
 80041ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d2:	4770      	bx	lr
 80041d4:	58025408 	.word	0x58025408
 80041d8:	5802541c 	.word	0x5802541c
 80041dc:	58025430 	.word	0x58025430
 80041e0:	58025444 	.word	0x58025444
 80041e4:	58025458 	.word	0x58025458
 80041e8:	5802546c 	.word	0x5802546c
 80041ec:	58025480 	.word	0x58025480
 80041f0:	58025494 	.word	0x58025494

080041f4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80041f4:	b480      	push	{r7}
 80041f6:	b085      	sub	sp, #20
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4a42      	ldr	r2, [pc, #264]	; (800430c <DMA_CalcBaseAndBitshift+0x118>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d04a      	beq.n	800429c <DMA_CalcBaseAndBitshift+0xa8>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4a41      	ldr	r2, [pc, #260]	; (8004310 <DMA_CalcBaseAndBitshift+0x11c>)
 800420c:	4293      	cmp	r3, r2
 800420e:	d045      	beq.n	800429c <DMA_CalcBaseAndBitshift+0xa8>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4a3f      	ldr	r2, [pc, #252]	; (8004314 <DMA_CalcBaseAndBitshift+0x120>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d040      	beq.n	800429c <DMA_CalcBaseAndBitshift+0xa8>
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4a3e      	ldr	r2, [pc, #248]	; (8004318 <DMA_CalcBaseAndBitshift+0x124>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d03b      	beq.n	800429c <DMA_CalcBaseAndBitshift+0xa8>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4a3c      	ldr	r2, [pc, #240]	; (800431c <DMA_CalcBaseAndBitshift+0x128>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d036      	beq.n	800429c <DMA_CalcBaseAndBitshift+0xa8>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	4a3b      	ldr	r2, [pc, #236]	; (8004320 <DMA_CalcBaseAndBitshift+0x12c>)
 8004234:	4293      	cmp	r3, r2
 8004236:	d031      	beq.n	800429c <DMA_CalcBaseAndBitshift+0xa8>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4a39      	ldr	r2, [pc, #228]	; (8004324 <DMA_CalcBaseAndBitshift+0x130>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d02c      	beq.n	800429c <DMA_CalcBaseAndBitshift+0xa8>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4a38      	ldr	r2, [pc, #224]	; (8004328 <DMA_CalcBaseAndBitshift+0x134>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d027      	beq.n	800429c <DMA_CalcBaseAndBitshift+0xa8>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4a36      	ldr	r2, [pc, #216]	; (800432c <DMA_CalcBaseAndBitshift+0x138>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d022      	beq.n	800429c <DMA_CalcBaseAndBitshift+0xa8>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4a35      	ldr	r2, [pc, #212]	; (8004330 <DMA_CalcBaseAndBitshift+0x13c>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d01d      	beq.n	800429c <DMA_CalcBaseAndBitshift+0xa8>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4a33      	ldr	r2, [pc, #204]	; (8004334 <DMA_CalcBaseAndBitshift+0x140>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d018      	beq.n	800429c <DMA_CalcBaseAndBitshift+0xa8>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4a32      	ldr	r2, [pc, #200]	; (8004338 <DMA_CalcBaseAndBitshift+0x144>)
 8004270:	4293      	cmp	r3, r2
 8004272:	d013      	beq.n	800429c <DMA_CalcBaseAndBitshift+0xa8>
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	4a30      	ldr	r2, [pc, #192]	; (800433c <DMA_CalcBaseAndBitshift+0x148>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d00e      	beq.n	800429c <DMA_CalcBaseAndBitshift+0xa8>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	4a2f      	ldr	r2, [pc, #188]	; (8004340 <DMA_CalcBaseAndBitshift+0x14c>)
 8004284:	4293      	cmp	r3, r2
 8004286:	d009      	beq.n	800429c <DMA_CalcBaseAndBitshift+0xa8>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4a2d      	ldr	r2, [pc, #180]	; (8004344 <DMA_CalcBaseAndBitshift+0x150>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d004      	beq.n	800429c <DMA_CalcBaseAndBitshift+0xa8>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	4a2c      	ldr	r2, [pc, #176]	; (8004348 <DMA_CalcBaseAndBitshift+0x154>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d101      	bne.n	80042a0 <DMA_CalcBaseAndBitshift+0xac>
 800429c:	2301      	movs	r3, #1
 800429e:	e000      	b.n	80042a2 <DMA_CalcBaseAndBitshift+0xae>
 80042a0:	2300      	movs	r3, #0
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d024      	beq.n	80042f0 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	b2db      	uxtb	r3, r3
 80042ac:	3b10      	subs	r3, #16
 80042ae:	4a27      	ldr	r2, [pc, #156]	; (800434c <DMA_CalcBaseAndBitshift+0x158>)
 80042b0:	fba2 2303 	umull	r2, r3, r2, r3
 80042b4:	091b      	lsrs	r3, r3, #4
 80042b6:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	f003 0307 	and.w	r3, r3, #7
 80042be:	4a24      	ldr	r2, [pc, #144]	; (8004350 <DMA_CalcBaseAndBitshift+0x15c>)
 80042c0:	5cd3      	ldrb	r3, [r2, r3]
 80042c2:	461a      	mov	r2, r3
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	2b03      	cmp	r3, #3
 80042cc:	d908      	bls.n	80042e0 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	461a      	mov	r2, r3
 80042d4:	4b1f      	ldr	r3, [pc, #124]	; (8004354 <DMA_CalcBaseAndBitshift+0x160>)
 80042d6:	4013      	ands	r3, r2
 80042d8:	1d1a      	adds	r2, r3, #4
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	659a      	str	r2, [r3, #88]	; 0x58
 80042de:	e00d      	b.n	80042fc <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	461a      	mov	r2, r3
 80042e6:	4b1b      	ldr	r3, [pc, #108]	; (8004354 <DMA_CalcBaseAndBitshift+0x160>)
 80042e8:	4013      	ands	r3, r2
 80042ea:	687a      	ldr	r2, [r7, #4]
 80042ec:	6593      	str	r3, [r2, #88]	; 0x58
 80042ee:	e005      	b.n	80042fc <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004300:	4618      	mov	r0, r3
 8004302:	3714      	adds	r7, #20
 8004304:	46bd      	mov	sp, r7
 8004306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430a:	4770      	bx	lr
 800430c:	40020010 	.word	0x40020010
 8004310:	40020028 	.word	0x40020028
 8004314:	40020040 	.word	0x40020040
 8004318:	40020058 	.word	0x40020058
 800431c:	40020070 	.word	0x40020070
 8004320:	40020088 	.word	0x40020088
 8004324:	400200a0 	.word	0x400200a0
 8004328:	400200b8 	.word	0x400200b8
 800432c:	40020410 	.word	0x40020410
 8004330:	40020428 	.word	0x40020428
 8004334:	40020440 	.word	0x40020440
 8004338:	40020458 	.word	0x40020458
 800433c:	40020470 	.word	0x40020470
 8004340:	40020488 	.word	0x40020488
 8004344:	400204a0 	.word	0x400204a0
 8004348:	400204b8 	.word	0x400204b8
 800434c:	aaaaaaab 	.word	0xaaaaaaab
 8004350:	0800bfb8 	.word	0x0800bfb8
 8004354:	fffffc00 	.word	0xfffffc00

08004358 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004358:	b480      	push	{r7}
 800435a:	b085      	sub	sp, #20
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004360:	2300      	movs	r3, #0
 8004362:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	699b      	ldr	r3, [r3, #24]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d120      	bne.n	80043ae <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004370:	2b03      	cmp	r3, #3
 8004372:	d858      	bhi.n	8004426 <DMA_CheckFifoParam+0xce>
 8004374:	a201      	add	r2, pc, #4	; (adr r2, 800437c <DMA_CheckFifoParam+0x24>)
 8004376:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800437a:	bf00      	nop
 800437c:	0800438d 	.word	0x0800438d
 8004380:	0800439f 	.word	0x0800439f
 8004384:	0800438d 	.word	0x0800438d
 8004388:	08004427 	.word	0x08004427
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004390:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004394:	2b00      	cmp	r3, #0
 8004396:	d048      	beq.n	800442a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004398:	2301      	movs	r3, #1
 800439a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800439c:	e045      	b.n	800442a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043a2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80043a6:	d142      	bne.n	800442e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80043a8:	2301      	movs	r3, #1
 80043aa:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80043ac:	e03f      	b.n	800442e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	699b      	ldr	r3, [r3, #24]
 80043b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043b6:	d123      	bne.n	8004400 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043bc:	2b03      	cmp	r3, #3
 80043be:	d838      	bhi.n	8004432 <DMA_CheckFifoParam+0xda>
 80043c0:	a201      	add	r2, pc, #4	; (adr r2, 80043c8 <DMA_CheckFifoParam+0x70>)
 80043c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043c6:	bf00      	nop
 80043c8:	080043d9 	.word	0x080043d9
 80043cc:	080043df 	.word	0x080043df
 80043d0:	080043d9 	.word	0x080043d9
 80043d4:	080043f1 	.word	0x080043f1
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80043d8:	2301      	movs	r3, #1
 80043da:	73fb      	strb	r3, [r7, #15]
        break;
 80043dc:	e030      	b.n	8004440 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043e2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d025      	beq.n	8004436 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80043ea:	2301      	movs	r3, #1
 80043ec:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80043ee:	e022      	b.n	8004436 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043f4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80043f8:	d11f      	bne.n	800443a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80043fa:	2301      	movs	r3, #1
 80043fc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80043fe:	e01c      	b.n	800443a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004404:	2b02      	cmp	r3, #2
 8004406:	d902      	bls.n	800440e <DMA_CheckFifoParam+0xb6>
 8004408:	2b03      	cmp	r3, #3
 800440a:	d003      	beq.n	8004414 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800440c:	e018      	b.n	8004440 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800440e:	2301      	movs	r3, #1
 8004410:	73fb      	strb	r3, [r7, #15]
        break;
 8004412:	e015      	b.n	8004440 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004418:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800441c:	2b00      	cmp	r3, #0
 800441e:	d00e      	beq.n	800443e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004420:	2301      	movs	r3, #1
 8004422:	73fb      	strb	r3, [r7, #15]
    break;
 8004424:	e00b      	b.n	800443e <DMA_CheckFifoParam+0xe6>
        break;
 8004426:	bf00      	nop
 8004428:	e00a      	b.n	8004440 <DMA_CheckFifoParam+0xe8>
        break;
 800442a:	bf00      	nop
 800442c:	e008      	b.n	8004440 <DMA_CheckFifoParam+0xe8>
        break;
 800442e:	bf00      	nop
 8004430:	e006      	b.n	8004440 <DMA_CheckFifoParam+0xe8>
        break;
 8004432:	bf00      	nop
 8004434:	e004      	b.n	8004440 <DMA_CheckFifoParam+0xe8>
        break;
 8004436:	bf00      	nop
 8004438:	e002      	b.n	8004440 <DMA_CheckFifoParam+0xe8>
        break;
 800443a:	bf00      	nop
 800443c:	e000      	b.n	8004440 <DMA_CheckFifoParam+0xe8>
    break;
 800443e:	bf00      	nop
    }
  }

  return status;
 8004440:	7bfb      	ldrb	r3, [r7, #15]
}
 8004442:	4618      	mov	r0, r3
 8004444:	3714      	adds	r7, #20
 8004446:	46bd      	mov	sp, r7
 8004448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444c:	4770      	bx	lr
 800444e:	bf00      	nop

08004450 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004450:	b480      	push	{r7}
 8004452:	b085      	sub	sp, #20
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4a38      	ldr	r2, [pc, #224]	; (8004544 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004464:	4293      	cmp	r3, r2
 8004466:	d022      	beq.n	80044ae <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4a36      	ldr	r2, [pc, #216]	; (8004548 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d01d      	beq.n	80044ae <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4a35      	ldr	r2, [pc, #212]	; (800454c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d018      	beq.n	80044ae <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4a33      	ldr	r2, [pc, #204]	; (8004550 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d013      	beq.n	80044ae <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	4a32      	ldr	r2, [pc, #200]	; (8004554 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800448c:	4293      	cmp	r3, r2
 800448e:	d00e      	beq.n	80044ae <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4a30      	ldr	r2, [pc, #192]	; (8004558 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d009      	beq.n	80044ae <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4a2f      	ldr	r2, [pc, #188]	; (800455c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d004      	beq.n	80044ae <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4a2d      	ldr	r2, [pc, #180]	; (8004560 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d101      	bne.n	80044b2 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80044ae:	2301      	movs	r3, #1
 80044b0:	e000      	b.n	80044b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80044b2:	2300      	movs	r3, #0
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d01a      	beq.n	80044ee <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	b2db      	uxtb	r3, r3
 80044be:	3b08      	subs	r3, #8
 80044c0:	4a28      	ldr	r2, [pc, #160]	; (8004564 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80044c2:	fba2 2303 	umull	r2, r3, r2, r3
 80044c6:	091b      	lsrs	r3, r3, #4
 80044c8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80044ca:	68fa      	ldr	r2, [r7, #12]
 80044cc:	4b26      	ldr	r3, [pc, #152]	; (8004568 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80044ce:	4413      	add	r3, r2
 80044d0:	009b      	lsls	r3, r3, #2
 80044d2:	461a      	mov	r2, r3
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	4a24      	ldr	r2, [pc, #144]	; (800456c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80044dc:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	f003 031f 	and.w	r3, r3, #31
 80044e4:	2201      	movs	r2, #1
 80044e6:	409a      	lsls	r2, r3
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80044ec:	e024      	b.n	8004538 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	b2db      	uxtb	r3, r3
 80044f4:	3b10      	subs	r3, #16
 80044f6:	4a1e      	ldr	r2, [pc, #120]	; (8004570 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80044f8:	fba2 2303 	umull	r2, r3, r2, r3
 80044fc:	091b      	lsrs	r3, r3, #4
 80044fe:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004500:	68bb      	ldr	r3, [r7, #8]
 8004502:	4a1c      	ldr	r2, [pc, #112]	; (8004574 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004504:	4293      	cmp	r3, r2
 8004506:	d806      	bhi.n	8004516 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004508:	68bb      	ldr	r3, [r7, #8]
 800450a:	4a1b      	ldr	r2, [pc, #108]	; (8004578 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d902      	bls.n	8004516 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	3308      	adds	r3, #8
 8004514:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004516:	68fa      	ldr	r2, [r7, #12]
 8004518:	4b18      	ldr	r3, [pc, #96]	; (800457c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800451a:	4413      	add	r3, r2
 800451c:	009b      	lsls	r3, r3, #2
 800451e:	461a      	mov	r2, r3
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	4a16      	ldr	r2, [pc, #88]	; (8004580 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004528:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	f003 031f 	and.w	r3, r3, #31
 8004530:	2201      	movs	r2, #1
 8004532:	409a      	lsls	r2, r3
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004538:	bf00      	nop
 800453a:	3714      	adds	r7, #20
 800453c:	46bd      	mov	sp, r7
 800453e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004542:	4770      	bx	lr
 8004544:	58025408 	.word	0x58025408
 8004548:	5802541c 	.word	0x5802541c
 800454c:	58025430 	.word	0x58025430
 8004550:	58025444 	.word	0x58025444
 8004554:	58025458 	.word	0x58025458
 8004558:	5802546c 	.word	0x5802546c
 800455c:	58025480 	.word	0x58025480
 8004560:	58025494 	.word	0x58025494
 8004564:	cccccccd 	.word	0xcccccccd
 8004568:	16009600 	.word	0x16009600
 800456c:	58025880 	.word	0x58025880
 8004570:	aaaaaaab 	.word	0xaaaaaaab
 8004574:	400204b8 	.word	0x400204b8
 8004578:	4002040f 	.word	0x4002040f
 800457c:	10008200 	.word	0x10008200
 8004580:	40020880 	.word	0x40020880

08004584 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004584:	b480      	push	{r7}
 8004586:	b085      	sub	sp, #20
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	685b      	ldr	r3, [r3, #4]
 8004590:	b2db      	uxtb	r3, r3
 8004592:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d04a      	beq.n	8004630 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	2b08      	cmp	r3, #8
 800459e:	d847      	bhi.n	8004630 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	4a25      	ldr	r2, [pc, #148]	; (800463c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d022      	beq.n	80045f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4a24      	ldr	r2, [pc, #144]	; (8004640 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d01d      	beq.n	80045f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	4a22      	ldr	r2, [pc, #136]	; (8004644 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d018      	beq.n	80045f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	4a21      	ldr	r2, [pc, #132]	; (8004648 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d013      	beq.n	80045f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	4a1f      	ldr	r2, [pc, #124]	; (800464c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d00e      	beq.n	80045f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4a1e      	ldr	r2, [pc, #120]	; (8004650 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80045d8:	4293      	cmp	r3, r2
 80045da:	d009      	beq.n	80045f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4a1c      	ldr	r2, [pc, #112]	; (8004654 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d004      	beq.n	80045f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4a1b      	ldr	r2, [pc, #108]	; (8004658 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d101      	bne.n	80045f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80045f0:	2301      	movs	r3, #1
 80045f2:	e000      	b.n	80045f6 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80045f4:	2300      	movs	r3, #0
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d00a      	beq.n	8004610 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80045fa:	68fa      	ldr	r2, [r7, #12]
 80045fc:	4b17      	ldr	r3, [pc, #92]	; (800465c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80045fe:	4413      	add	r3, r2
 8004600:	009b      	lsls	r3, r3, #2
 8004602:	461a      	mov	r2, r3
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	4a15      	ldr	r2, [pc, #84]	; (8004660 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800460c:	671a      	str	r2, [r3, #112]	; 0x70
 800460e:	e009      	b.n	8004624 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004610:	68fa      	ldr	r2, [r7, #12]
 8004612:	4b14      	ldr	r3, [pc, #80]	; (8004664 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004614:	4413      	add	r3, r2
 8004616:	009b      	lsls	r3, r3, #2
 8004618:	461a      	mov	r2, r3
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	4a11      	ldr	r2, [pc, #68]	; (8004668 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8004622:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	3b01      	subs	r3, #1
 8004628:	2201      	movs	r2, #1
 800462a:	409a      	lsls	r2, r3
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8004630:	bf00      	nop
 8004632:	3714      	adds	r7, #20
 8004634:	46bd      	mov	sp, r7
 8004636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463a:	4770      	bx	lr
 800463c:	58025408 	.word	0x58025408
 8004640:	5802541c 	.word	0x5802541c
 8004644:	58025430 	.word	0x58025430
 8004648:	58025444 	.word	0x58025444
 800464c:	58025458 	.word	0x58025458
 8004650:	5802546c 	.word	0x5802546c
 8004654:	58025480 	.word	0x58025480
 8004658:	58025494 	.word	0x58025494
 800465c:	1600963f 	.word	0x1600963f
 8004660:	58025940 	.word	0x58025940
 8004664:	1000823f 	.word	0x1000823f
 8004668:	40020940 	.word	0x40020940

0800466c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800466c:	b480      	push	{r7}
 800466e:	b089      	sub	sp, #36	; 0x24
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
 8004674:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004676:	2300      	movs	r3, #0
 8004678:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800467a:	4b89      	ldr	r3, [pc, #548]	; (80048a0 <HAL_GPIO_Init+0x234>)
 800467c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800467e:	e194      	b.n	80049aa <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	681a      	ldr	r2, [r3, #0]
 8004684:	2101      	movs	r1, #1
 8004686:	69fb      	ldr	r3, [r7, #28]
 8004688:	fa01 f303 	lsl.w	r3, r1, r3
 800468c:	4013      	ands	r3, r2
 800468e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004690:	693b      	ldr	r3, [r7, #16]
 8004692:	2b00      	cmp	r3, #0
 8004694:	f000 8186 	beq.w	80049a4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	685b      	ldr	r3, [r3, #4]
 800469c:	2b01      	cmp	r3, #1
 800469e:	d00b      	beq.n	80046b8 <HAL_GPIO_Init+0x4c>
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	685b      	ldr	r3, [r3, #4]
 80046a4:	2b02      	cmp	r3, #2
 80046a6:	d007      	beq.n	80046b8 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80046ac:	2b11      	cmp	r3, #17
 80046ae:	d003      	beq.n	80046b8 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	685b      	ldr	r3, [r3, #4]
 80046b4:	2b12      	cmp	r3, #18
 80046b6:	d130      	bne.n	800471a <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	689b      	ldr	r3, [r3, #8]
 80046bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80046be:	69fb      	ldr	r3, [r7, #28]
 80046c0:	005b      	lsls	r3, r3, #1
 80046c2:	2203      	movs	r2, #3
 80046c4:	fa02 f303 	lsl.w	r3, r2, r3
 80046c8:	43db      	mvns	r3, r3
 80046ca:	69ba      	ldr	r2, [r7, #24]
 80046cc:	4013      	ands	r3, r2
 80046ce:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	68da      	ldr	r2, [r3, #12]
 80046d4:	69fb      	ldr	r3, [r7, #28]
 80046d6:	005b      	lsls	r3, r3, #1
 80046d8:	fa02 f303 	lsl.w	r3, r2, r3
 80046dc:	69ba      	ldr	r2, [r7, #24]
 80046de:	4313      	orrs	r3, r2
 80046e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	69ba      	ldr	r2, [r7, #24]
 80046e6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	685b      	ldr	r3, [r3, #4]
 80046ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80046ee:	2201      	movs	r2, #1
 80046f0:	69fb      	ldr	r3, [r7, #28]
 80046f2:	fa02 f303 	lsl.w	r3, r2, r3
 80046f6:	43db      	mvns	r3, r3
 80046f8:	69ba      	ldr	r2, [r7, #24]
 80046fa:	4013      	ands	r3, r2
 80046fc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	685b      	ldr	r3, [r3, #4]
 8004702:	091b      	lsrs	r3, r3, #4
 8004704:	f003 0201 	and.w	r2, r3, #1
 8004708:	69fb      	ldr	r3, [r7, #28]
 800470a:	fa02 f303 	lsl.w	r3, r2, r3
 800470e:	69ba      	ldr	r2, [r7, #24]
 8004710:	4313      	orrs	r3, r2
 8004712:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	69ba      	ldr	r2, [r7, #24]
 8004718:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	68db      	ldr	r3, [r3, #12]
 800471e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004720:	69fb      	ldr	r3, [r7, #28]
 8004722:	005b      	lsls	r3, r3, #1
 8004724:	2203      	movs	r2, #3
 8004726:	fa02 f303 	lsl.w	r3, r2, r3
 800472a:	43db      	mvns	r3, r3
 800472c:	69ba      	ldr	r2, [r7, #24]
 800472e:	4013      	ands	r3, r2
 8004730:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	689a      	ldr	r2, [r3, #8]
 8004736:	69fb      	ldr	r3, [r7, #28]
 8004738:	005b      	lsls	r3, r3, #1
 800473a:	fa02 f303 	lsl.w	r3, r2, r3
 800473e:	69ba      	ldr	r2, [r7, #24]
 8004740:	4313      	orrs	r3, r2
 8004742:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	69ba      	ldr	r2, [r7, #24]
 8004748:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	685b      	ldr	r3, [r3, #4]
 800474e:	2b02      	cmp	r3, #2
 8004750:	d003      	beq.n	800475a <HAL_GPIO_Init+0xee>
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	685b      	ldr	r3, [r3, #4]
 8004756:	2b12      	cmp	r3, #18
 8004758:	d123      	bne.n	80047a2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800475a:	69fb      	ldr	r3, [r7, #28]
 800475c:	08da      	lsrs	r2, r3, #3
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	3208      	adds	r2, #8
 8004762:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004766:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004768:	69fb      	ldr	r3, [r7, #28]
 800476a:	f003 0307 	and.w	r3, r3, #7
 800476e:	009b      	lsls	r3, r3, #2
 8004770:	220f      	movs	r2, #15
 8004772:	fa02 f303 	lsl.w	r3, r2, r3
 8004776:	43db      	mvns	r3, r3
 8004778:	69ba      	ldr	r2, [r7, #24]
 800477a:	4013      	ands	r3, r2
 800477c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	691a      	ldr	r2, [r3, #16]
 8004782:	69fb      	ldr	r3, [r7, #28]
 8004784:	f003 0307 	and.w	r3, r3, #7
 8004788:	009b      	lsls	r3, r3, #2
 800478a:	fa02 f303 	lsl.w	r3, r2, r3
 800478e:	69ba      	ldr	r2, [r7, #24]
 8004790:	4313      	orrs	r3, r2
 8004792:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004794:	69fb      	ldr	r3, [r7, #28]
 8004796:	08da      	lsrs	r2, r3, #3
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	3208      	adds	r2, #8
 800479c:	69b9      	ldr	r1, [r7, #24]
 800479e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80047a8:	69fb      	ldr	r3, [r7, #28]
 80047aa:	005b      	lsls	r3, r3, #1
 80047ac:	2203      	movs	r2, #3
 80047ae:	fa02 f303 	lsl.w	r3, r2, r3
 80047b2:	43db      	mvns	r3, r3
 80047b4:	69ba      	ldr	r2, [r7, #24]
 80047b6:	4013      	ands	r3, r2
 80047b8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	685b      	ldr	r3, [r3, #4]
 80047be:	f003 0203 	and.w	r2, r3, #3
 80047c2:	69fb      	ldr	r3, [r7, #28]
 80047c4:	005b      	lsls	r3, r3, #1
 80047c6:	fa02 f303 	lsl.w	r3, r2, r3
 80047ca:	69ba      	ldr	r2, [r7, #24]
 80047cc:	4313      	orrs	r3, r2
 80047ce:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	69ba      	ldr	r2, [r7, #24]
 80047d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	685b      	ldr	r3, [r3, #4]
 80047da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047de:	2b00      	cmp	r3, #0
 80047e0:	f000 80e0 	beq.w	80049a4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80047e4:	4b2f      	ldr	r3, [pc, #188]	; (80048a4 <HAL_GPIO_Init+0x238>)
 80047e6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80047ea:	4a2e      	ldr	r2, [pc, #184]	; (80048a4 <HAL_GPIO_Init+0x238>)
 80047ec:	f043 0302 	orr.w	r3, r3, #2
 80047f0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80047f4:	4b2b      	ldr	r3, [pc, #172]	; (80048a4 <HAL_GPIO_Init+0x238>)
 80047f6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80047fa:	f003 0302 	and.w	r3, r3, #2
 80047fe:	60fb      	str	r3, [r7, #12]
 8004800:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004802:	4a29      	ldr	r2, [pc, #164]	; (80048a8 <HAL_GPIO_Init+0x23c>)
 8004804:	69fb      	ldr	r3, [r7, #28]
 8004806:	089b      	lsrs	r3, r3, #2
 8004808:	3302      	adds	r3, #2
 800480a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800480e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004810:	69fb      	ldr	r3, [r7, #28]
 8004812:	f003 0303 	and.w	r3, r3, #3
 8004816:	009b      	lsls	r3, r3, #2
 8004818:	220f      	movs	r2, #15
 800481a:	fa02 f303 	lsl.w	r3, r2, r3
 800481e:	43db      	mvns	r3, r3
 8004820:	69ba      	ldr	r2, [r7, #24]
 8004822:	4013      	ands	r3, r2
 8004824:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	4a20      	ldr	r2, [pc, #128]	; (80048ac <HAL_GPIO_Init+0x240>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d052      	beq.n	80048d4 <HAL_GPIO_Init+0x268>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	4a1f      	ldr	r2, [pc, #124]	; (80048b0 <HAL_GPIO_Init+0x244>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d031      	beq.n	800489a <HAL_GPIO_Init+0x22e>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	4a1e      	ldr	r2, [pc, #120]	; (80048b4 <HAL_GPIO_Init+0x248>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d02b      	beq.n	8004896 <HAL_GPIO_Init+0x22a>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	4a1d      	ldr	r2, [pc, #116]	; (80048b8 <HAL_GPIO_Init+0x24c>)
 8004842:	4293      	cmp	r3, r2
 8004844:	d025      	beq.n	8004892 <HAL_GPIO_Init+0x226>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	4a1c      	ldr	r2, [pc, #112]	; (80048bc <HAL_GPIO_Init+0x250>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d01f      	beq.n	800488e <HAL_GPIO_Init+0x222>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	4a1b      	ldr	r2, [pc, #108]	; (80048c0 <HAL_GPIO_Init+0x254>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d019      	beq.n	800488a <HAL_GPIO_Init+0x21e>
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	4a1a      	ldr	r2, [pc, #104]	; (80048c4 <HAL_GPIO_Init+0x258>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d013      	beq.n	8004886 <HAL_GPIO_Init+0x21a>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	4a19      	ldr	r2, [pc, #100]	; (80048c8 <HAL_GPIO_Init+0x25c>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d00d      	beq.n	8004882 <HAL_GPIO_Init+0x216>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	4a18      	ldr	r2, [pc, #96]	; (80048cc <HAL_GPIO_Init+0x260>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d007      	beq.n	800487e <HAL_GPIO_Init+0x212>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	4a17      	ldr	r2, [pc, #92]	; (80048d0 <HAL_GPIO_Init+0x264>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d101      	bne.n	800487a <HAL_GPIO_Init+0x20e>
 8004876:	2309      	movs	r3, #9
 8004878:	e02d      	b.n	80048d6 <HAL_GPIO_Init+0x26a>
 800487a:	230a      	movs	r3, #10
 800487c:	e02b      	b.n	80048d6 <HAL_GPIO_Init+0x26a>
 800487e:	2308      	movs	r3, #8
 8004880:	e029      	b.n	80048d6 <HAL_GPIO_Init+0x26a>
 8004882:	2307      	movs	r3, #7
 8004884:	e027      	b.n	80048d6 <HAL_GPIO_Init+0x26a>
 8004886:	2306      	movs	r3, #6
 8004888:	e025      	b.n	80048d6 <HAL_GPIO_Init+0x26a>
 800488a:	2305      	movs	r3, #5
 800488c:	e023      	b.n	80048d6 <HAL_GPIO_Init+0x26a>
 800488e:	2304      	movs	r3, #4
 8004890:	e021      	b.n	80048d6 <HAL_GPIO_Init+0x26a>
 8004892:	2303      	movs	r3, #3
 8004894:	e01f      	b.n	80048d6 <HAL_GPIO_Init+0x26a>
 8004896:	2302      	movs	r3, #2
 8004898:	e01d      	b.n	80048d6 <HAL_GPIO_Init+0x26a>
 800489a:	2301      	movs	r3, #1
 800489c:	e01b      	b.n	80048d6 <HAL_GPIO_Init+0x26a>
 800489e:	bf00      	nop
 80048a0:	58000080 	.word	0x58000080
 80048a4:	58024400 	.word	0x58024400
 80048a8:	58000400 	.word	0x58000400
 80048ac:	58020000 	.word	0x58020000
 80048b0:	58020400 	.word	0x58020400
 80048b4:	58020800 	.word	0x58020800
 80048b8:	58020c00 	.word	0x58020c00
 80048bc:	58021000 	.word	0x58021000
 80048c0:	58021400 	.word	0x58021400
 80048c4:	58021800 	.word	0x58021800
 80048c8:	58021c00 	.word	0x58021c00
 80048cc:	58022000 	.word	0x58022000
 80048d0:	58022400 	.word	0x58022400
 80048d4:	2300      	movs	r3, #0
 80048d6:	69fa      	ldr	r2, [r7, #28]
 80048d8:	f002 0203 	and.w	r2, r2, #3
 80048dc:	0092      	lsls	r2, r2, #2
 80048de:	4093      	lsls	r3, r2
 80048e0:	69ba      	ldr	r2, [r7, #24]
 80048e2:	4313      	orrs	r3, r2
 80048e4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80048e6:	4938      	ldr	r1, [pc, #224]	; (80049c8 <HAL_GPIO_Init+0x35c>)
 80048e8:	69fb      	ldr	r3, [r7, #28]
 80048ea:	089b      	lsrs	r3, r3, #2
 80048ec:	3302      	adds	r3, #2
 80048ee:	69ba      	ldr	r2, [r7, #24]
 80048f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80048f4:	697b      	ldr	r3, [r7, #20]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80048fa:	693b      	ldr	r3, [r7, #16]
 80048fc:	43db      	mvns	r3, r3
 80048fe:	69ba      	ldr	r2, [r7, #24]
 8004900:	4013      	ands	r3, r2
 8004902:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	685b      	ldr	r3, [r3, #4]
 8004908:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800490c:	2b00      	cmp	r3, #0
 800490e:	d003      	beq.n	8004918 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004910:	69ba      	ldr	r2, [r7, #24]
 8004912:	693b      	ldr	r3, [r7, #16]
 8004914:	4313      	orrs	r3, r2
 8004916:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004918:	697b      	ldr	r3, [r7, #20]
 800491a:	69ba      	ldr	r2, [r7, #24]
 800491c:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 800491e:	697b      	ldr	r3, [r7, #20]
 8004920:	685b      	ldr	r3, [r3, #4]
 8004922:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004924:	693b      	ldr	r3, [r7, #16]
 8004926:	43db      	mvns	r3, r3
 8004928:	69ba      	ldr	r2, [r7, #24]
 800492a:	4013      	ands	r3, r2
 800492c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	685b      	ldr	r3, [r3, #4]
 8004932:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004936:	2b00      	cmp	r3, #0
 8004938:	d003      	beq.n	8004942 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800493a:	69ba      	ldr	r2, [r7, #24]
 800493c:	693b      	ldr	r3, [r7, #16]
 800493e:	4313      	orrs	r3, r2
 8004940:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004942:	697b      	ldr	r3, [r7, #20]
 8004944:	69ba      	ldr	r2, [r7, #24]
 8004946:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004948:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004950:	693b      	ldr	r3, [r7, #16]
 8004952:	43db      	mvns	r3, r3
 8004954:	69ba      	ldr	r2, [r7, #24]
 8004956:	4013      	ands	r3, r2
 8004958:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	685b      	ldr	r3, [r3, #4]
 800495e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004962:	2b00      	cmp	r3, #0
 8004964:	d003      	beq.n	800496e <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8004966:	69ba      	ldr	r2, [r7, #24]
 8004968:	693b      	ldr	r3, [r7, #16]
 800496a:	4313      	orrs	r3, r2
 800496c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800496e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004972:	69bb      	ldr	r3, [r7, #24]
 8004974:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004976:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800497a:	685b      	ldr	r3, [r3, #4]
 800497c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800497e:	693b      	ldr	r3, [r7, #16]
 8004980:	43db      	mvns	r3, r3
 8004982:	69ba      	ldr	r2, [r7, #24]
 8004984:	4013      	ands	r3, r2
 8004986:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	685b      	ldr	r3, [r3, #4]
 800498c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004990:	2b00      	cmp	r3, #0
 8004992:	d003      	beq.n	800499c <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8004994:	69ba      	ldr	r2, [r7, #24]
 8004996:	693b      	ldr	r3, [r7, #16]
 8004998:	4313      	orrs	r3, r2
 800499a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800499c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80049a0:	69bb      	ldr	r3, [r7, #24]
 80049a2:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 80049a4:	69fb      	ldr	r3, [r7, #28]
 80049a6:	3301      	adds	r3, #1
 80049a8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	681a      	ldr	r2, [r3, #0]
 80049ae:	69fb      	ldr	r3, [r7, #28]
 80049b0:	fa22 f303 	lsr.w	r3, r2, r3
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	f47f ae63 	bne.w	8004680 <HAL_GPIO_Init+0x14>
  }
}
 80049ba:	bf00      	nop
 80049bc:	bf00      	nop
 80049be:	3724      	adds	r7, #36	; 0x24
 80049c0:	46bd      	mov	sp, r7
 80049c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c6:	4770      	bx	lr
 80049c8:	58000400 	.word	0x58000400

080049cc <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 80049cc:	b480      	push	{r7}
 80049ce:	b083      	sub	sp, #12
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 80049d4:	4a08      	ldr	r2, [pc, #32]	; (80049f8 <HAL_HSEM_FastTake+0x2c>)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	3320      	adds	r3, #32
 80049da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049de:	4a07      	ldr	r2, [pc, #28]	; (80049fc <HAL_HSEM_FastTake+0x30>)
 80049e0:	4293      	cmp	r3, r2
 80049e2:	d101      	bne.n	80049e8 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 80049e4:	2300      	movs	r3, #0
 80049e6:	e000      	b.n	80049ea <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 80049e8:	2301      	movs	r3, #1
}
 80049ea:	4618      	mov	r0, r3
 80049ec:	370c      	adds	r7, #12
 80049ee:	46bd      	mov	sp, r7
 80049f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f4:	4770      	bx	lr
 80049f6:	bf00      	nop
 80049f8:	58026400 	.word	0x58026400
 80049fc:	80000300 	.word	0x80000300

08004a00 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8004a00:	b480      	push	{r7}
 8004a02:	b083      	sub	sp, #12
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
 8004a08:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8004a0a:	4906      	ldr	r1, [pc, #24]	; (8004a24 <HAL_HSEM_Release+0x24>)
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8004a18:	bf00      	nop
 8004a1a:	370c      	adds	r7, #12
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a22:	4770      	bx	lr
 8004a24:	58026400 	.word	0x58026400

08004a28 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b084      	sub	sp, #16
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8004a30:	4b29      	ldr	r3, [pc, #164]	; (8004ad8 <HAL_PWREx_ConfigSupply+0xb0>)
 8004a32:	68db      	ldr	r3, [r3, #12]
 8004a34:	f003 0307 	and.w	r3, r3, #7
 8004a38:	2b06      	cmp	r3, #6
 8004a3a:	d00a      	beq.n	8004a52 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004a3c:	4b26      	ldr	r3, [pc, #152]	; (8004ad8 <HAL_PWREx_ConfigSupply+0xb0>)
 8004a3e:	68db      	ldr	r3, [r3, #12]
 8004a40:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a44:	687a      	ldr	r2, [r7, #4]
 8004a46:	429a      	cmp	r2, r3
 8004a48:	d001      	beq.n	8004a4e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	e040      	b.n	8004ad0 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004a4e:	2300      	movs	r3, #0
 8004a50:	e03e      	b.n	8004ad0 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004a52:	4b21      	ldr	r3, [pc, #132]	; (8004ad8 <HAL_PWREx_ConfigSupply+0xb0>)
 8004a54:	68db      	ldr	r3, [r3, #12]
 8004a56:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8004a5a:	491f      	ldr	r1, [pc, #124]	; (8004ad8 <HAL_PWREx_ConfigSupply+0xb0>)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	4313      	orrs	r3, r2
 8004a60:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004a62:	f7fc fdb7 	bl	80015d4 <HAL_GetTick>
 8004a66:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004a68:	e009      	b.n	8004a7e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004a6a:	f7fc fdb3 	bl	80015d4 <HAL_GetTick>
 8004a6e:	4602      	mov	r2, r0
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	1ad3      	subs	r3, r2, r3
 8004a74:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004a78:	d901      	bls.n	8004a7e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	e028      	b.n	8004ad0 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004a7e:	4b16      	ldr	r3, [pc, #88]	; (8004ad8 <HAL_PWREx_ConfigSupply+0xb0>)
 8004a80:	685b      	ldr	r3, [r3, #4]
 8004a82:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004a86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a8a:	d1ee      	bne.n	8004a6a <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2b1e      	cmp	r3, #30
 8004a90:	d008      	beq.n	8004aa4 <HAL_PWREx_ConfigSupply+0x7c>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2b2e      	cmp	r3, #46	; 0x2e
 8004a96:	d005      	beq.n	8004aa4 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2b1d      	cmp	r3, #29
 8004a9c:	d002      	beq.n	8004aa4 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2b2d      	cmp	r3, #45	; 0x2d
 8004aa2:	d114      	bne.n	8004ace <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8004aa4:	f7fc fd96 	bl	80015d4 <HAL_GetTick>
 8004aa8:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8004aaa:	e009      	b.n	8004ac0 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004aac:	f7fc fd92 	bl	80015d4 <HAL_GetTick>
 8004ab0:	4602      	mov	r2, r0
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	1ad3      	subs	r3, r2, r3
 8004ab6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004aba:	d901      	bls.n	8004ac0 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8004abc:	2301      	movs	r3, #1
 8004abe:	e007      	b.n	8004ad0 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8004ac0:	4b05      	ldr	r3, [pc, #20]	; (8004ad8 <HAL_PWREx_ConfigSupply+0xb0>)
 8004ac2:	68db      	ldr	r3, [r3, #12]
 8004ac4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ac8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004acc:	d1ee      	bne.n	8004aac <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004ace:	2300      	movs	r3, #0
}
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	3710      	adds	r7, #16
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	bd80      	pop	{r7, pc}
 8004ad8:	58024800 	.word	0x58024800

08004adc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b08c      	sub	sp, #48	; 0x30
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d101      	bne.n	8004aee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004aea:	2301      	movs	r3, #1
 8004aec:	e3ff      	b.n	80052ee <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f003 0301 	and.w	r3, r3, #1
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	f000 8087 	beq.w	8004c0a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004afc:	4b99      	ldr	r3, [pc, #612]	; (8004d64 <HAL_RCC_OscConfig+0x288>)
 8004afe:	691b      	ldr	r3, [r3, #16]
 8004b00:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004b04:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004b06:	4b97      	ldr	r3, [pc, #604]	; (8004d64 <HAL_RCC_OscConfig+0x288>)
 8004b08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b0a:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004b0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b0e:	2b10      	cmp	r3, #16
 8004b10:	d007      	beq.n	8004b22 <HAL_RCC_OscConfig+0x46>
 8004b12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b14:	2b18      	cmp	r3, #24
 8004b16:	d110      	bne.n	8004b3a <HAL_RCC_OscConfig+0x5e>
 8004b18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b1a:	f003 0303 	and.w	r3, r3, #3
 8004b1e:	2b02      	cmp	r3, #2
 8004b20:	d10b      	bne.n	8004b3a <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b22:	4b90      	ldr	r3, [pc, #576]	; (8004d64 <HAL_RCC_OscConfig+0x288>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d06c      	beq.n	8004c08 <HAL_RCC_OscConfig+0x12c>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	685b      	ldr	r3, [r3, #4]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d168      	bne.n	8004c08 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004b36:	2301      	movs	r3, #1
 8004b38:	e3d9      	b.n	80052ee <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	685b      	ldr	r3, [r3, #4]
 8004b3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b42:	d106      	bne.n	8004b52 <HAL_RCC_OscConfig+0x76>
 8004b44:	4b87      	ldr	r3, [pc, #540]	; (8004d64 <HAL_RCC_OscConfig+0x288>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	4a86      	ldr	r2, [pc, #536]	; (8004d64 <HAL_RCC_OscConfig+0x288>)
 8004b4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b4e:	6013      	str	r3, [r2, #0]
 8004b50:	e02e      	b.n	8004bb0 <HAL_RCC_OscConfig+0xd4>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	685b      	ldr	r3, [r3, #4]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d10c      	bne.n	8004b74 <HAL_RCC_OscConfig+0x98>
 8004b5a:	4b82      	ldr	r3, [pc, #520]	; (8004d64 <HAL_RCC_OscConfig+0x288>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	4a81      	ldr	r2, [pc, #516]	; (8004d64 <HAL_RCC_OscConfig+0x288>)
 8004b60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b64:	6013      	str	r3, [r2, #0]
 8004b66:	4b7f      	ldr	r3, [pc, #508]	; (8004d64 <HAL_RCC_OscConfig+0x288>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	4a7e      	ldr	r2, [pc, #504]	; (8004d64 <HAL_RCC_OscConfig+0x288>)
 8004b6c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b70:	6013      	str	r3, [r2, #0]
 8004b72:	e01d      	b.n	8004bb0 <HAL_RCC_OscConfig+0xd4>
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	685b      	ldr	r3, [r3, #4]
 8004b78:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004b7c:	d10c      	bne.n	8004b98 <HAL_RCC_OscConfig+0xbc>
 8004b7e:	4b79      	ldr	r3, [pc, #484]	; (8004d64 <HAL_RCC_OscConfig+0x288>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	4a78      	ldr	r2, [pc, #480]	; (8004d64 <HAL_RCC_OscConfig+0x288>)
 8004b84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004b88:	6013      	str	r3, [r2, #0]
 8004b8a:	4b76      	ldr	r3, [pc, #472]	; (8004d64 <HAL_RCC_OscConfig+0x288>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4a75      	ldr	r2, [pc, #468]	; (8004d64 <HAL_RCC_OscConfig+0x288>)
 8004b90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b94:	6013      	str	r3, [r2, #0]
 8004b96:	e00b      	b.n	8004bb0 <HAL_RCC_OscConfig+0xd4>
 8004b98:	4b72      	ldr	r3, [pc, #456]	; (8004d64 <HAL_RCC_OscConfig+0x288>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4a71      	ldr	r2, [pc, #452]	; (8004d64 <HAL_RCC_OscConfig+0x288>)
 8004b9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ba2:	6013      	str	r3, [r2, #0]
 8004ba4:	4b6f      	ldr	r3, [pc, #444]	; (8004d64 <HAL_RCC_OscConfig+0x288>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	4a6e      	ldr	r2, [pc, #440]	; (8004d64 <HAL_RCC_OscConfig+0x288>)
 8004baa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004bae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	685b      	ldr	r3, [r3, #4]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d013      	beq.n	8004be0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bb8:	f7fc fd0c 	bl	80015d4 <HAL_GetTick>
 8004bbc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004bbe:	e008      	b.n	8004bd2 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004bc0:	f7fc fd08 	bl	80015d4 <HAL_GetTick>
 8004bc4:	4602      	mov	r2, r0
 8004bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bc8:	1ad3      	subs	r3, r2, r3
 8004bca:	2b64      	cmp	r3, #100	; 0x64
 8004bcc:	d901      	bls.n	8004bd2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004bce:	2303      	movs	r3, #3
 8004bd0:	e38d      	b.n	80052ee <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004bd2:	4b64      	ldr	r3, [pc, #400]	; (8004d64 <HAL_RCC_OscConfig+0x288>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d0f0      	beq.n	8004bc0 <HAL_RCC_OscConfig+0xe4>
 8004bde:	e014      	b.n	8004c0a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004be0:	f7fc fcf8 	bl	80015d4 <HAL_GetTick>
 8004be4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004be6:	e008      	b.n	8004bfa <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004be8:	f7fc fcf4 	bl	80015d4 <HAL_GetTick>
 8004bec:	4602      	mov	r2, r0
 8004bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bf0:	1ad3      	subs	r3, r2, r3
 8004bf2:	2b64      	cmp	r3, #100	; 0x64
 8004bf4:	d901      	bls.n	8004bfa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004bf6:	2303      	movs	r3, #3
 8004bf8:	e379      	b.n	80052ee <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004bfa:	4b5a      	ldr	r3, [pc, #360]	; (8004d64 <HAL_RCC_OscConfig+0x288>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d1f0      	bne.n	8004be8 <HAL_RCC_OscConfig+0x10c>
 8004c06:	e000      	b.n	8004c0a <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f003 0302 	and.w	r3, r3, #2
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	f000 80ae 	beq.w	8004d74 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004c18:	4b52      	ldr	r3, [pc, #328]	; (8004d64 <HAL_RCC_OscConfig+0x288>)
 8004c1a:	691b      	ldr	r3, [r3, #16]
 8004c1c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004c20:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004c22:	4b50      	ldr	r3, [pc, #320]	; (8004d64 <HAL_RCC_OscConfig+0x288>)
 8004c24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c26:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004c28:	6a3b      	ldr	r3, [r7, #32]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d007      	beq.n	8004c3e <HAL_RCC_OscConfig+0x162>
 8004c2e:	6a3b      	ldr	r3, [r7, #32]
 8004c30:	2b18      	cmp	r3, #24
 8004c32:	d13a      	bne.n	8004caa <HAL_RCC_OscConfig+0x1ce>
 8004c34:	69fb      	ldr	r3, [r7, #28]
 8004c36:	f003 0303 	and.w	r3, r3, #3
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d135      	bne.n	8004caa <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004c3e:	4b49      	ldr	r3, [pc, #292]	; (8004d64 <HAL_RCC_OscConfig+0x288>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f003 0304 	and.w	r3, r3, #4
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d005      	beq.n	8004c56 <HAL_RCC_OscConfig+0x17a>
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	68db      	ldr	r3, [r3, #12]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d101      	bne.n	8004c56 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004c52:	2301      	movs	r3, #1
 8004c54:	e34b      	b.n	80052ee <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c56:	f7fc fcc9 	bl	80015ec <HAL_GetREVID>
 8004c5a:	4603      	mov	r3, r0
 8004c5c:	f241 0203 	movw	r2, #4099	; 0x1003
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d817      	bhi.n	8004c94 <HAL_RCC_OscConfig+0x1b8>
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	691b      	ldr	r3, [r3, #16]
 8004c68:	2b40      	cmp	r3, #64	; 0x40
 8004c6a:	d108      	bne.n	8004c7e <HAL_RCC_OscConfig+0x1a2>
 8004c6c:	4b3d      	ldr	r3, [pc, #244]	; (8004d64 <HAL_RCC_OscConfig+0x288>)
 8004c6e:	685b      	ldr	r3, [r3, #4]
 8004c70:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004c74:	4a3b      	ldr	r2, [pc, #236]	; (8004d64 <HAL_RCC_OscConfig+0x288>)
 8004c76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c7a:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004c7c:	e07a      	b.n	8004d74 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c7e:	4b39      	ldr	r3, [pc, #228]	; (8004d64 <HAL_RCC_OscConfig+0x288>)
 8004c80:	685b      	ldr	r3, [r3, #4]
 8004c82:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	691b      	ldr	r3, [r3, #16]
 8004c8a:	031b      	lsls	r3, r3, #12
 8004c8c:	4935      	ldr	r1, [pc, #212]	; (8004d64 <HAL_RCC_OscConfig+0x288>)
 8004c8e:	4313      	orrs	r3, r2
 8004c90:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004c92:	e06f      	b.n	8004d74 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c94:	4b33      	ldr	r3, [pc, #204]	; (8004d64 <HAL_RCC_OscConfig+0x288>)
 8004c96:	685b      	ldr	r3, [r3, #4]
 8004c98:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	691b      	ldr	r3, [r3, #16]
 8004ca0:	061b      	lsls	r3, r3, #24
 8004ca2:	4930      	ldr	r1, [pc, #192]	; (8004d64 <HAL_RCC_OscConfig+0x288>)
 8004ca4:	4313      	orrs	r3, r2
 8004ca6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004ca8:	e064      	b.n	8004d74 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	68db      	ldr	r3, [r3, #12]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d045      	beq.n	8004d3e <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004cb2:	4b2c      	ldr	r3, [pc, #176]	; (8004d64 <HAL_RCC_OscConfig+0x288>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f023 0219 	bic.w	r2, r3, #25
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	68db      	ldr	r3, [r3, #12]
 8004cbe:	4929      	ldr	r1, [pc, #164]	; (8004d64 <HAL_RCC_OscConfig+0x288>)
 8004cc0:	4313      	orrs	r3, r2
 8004cc2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cc4:	f7fc fc86 	bl	80015d4 <HAL_GetTick>
 8004cc8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004cca:	e008      	b.n	8004cde <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004ccc:	f7fc fc82 	bl	80015d4 <HAL_GetTick>
 8004cd0:	4602      	mov	r2, r0
 8004cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cd4:	1ad3      	subs	r3, r2, r3
 8004cd6:	2b02      	cmp	r3, #2
 8004cd8:	d901      	bls.n	8004cde <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8004cda:	2303      	movs	r3, #3
 8004cdc:	e307      	b.n	80052ee <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004cde:	4b21      	ldr	r3, [pc, #132]	; (8004d64 <HAL_RCC_OscConfig+0x288>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f003 0304 	and.w	r3, r3, #4
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d0f0      	beq.n	8004ccc <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cea:	f7fc fc7f 	bl	80015ec <HAL_GetREVID>
 8004cee:	4603      	mov	r3, r0
 8004cf0:	f241 0203 	movw	r2, #4099	; 0x1003
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d817      	bhi.n	8004d28 <HAL_RCC_OscConfig+0x24c>
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	691b      	ldr	r3, [r3, #16]
 8004cfc:	2b40      	cmp	r3, #64	; 0x40
 8004cfe:	d108      	bne.n	8004d12 <HAL_RCC_OscConfig+0x236>
 8004d00:	4b18      	ldr	r3, [pc, #96]	; (8004d64 <HAL_RCC_OscConfig+0x288>)
 8004d02:	685b      	ldr	r3, [r3, #4]
 8004d04:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004d08:	4a16      	ldr	r2, [pc, #88]	; (8004d64 <HAL_RCC_OscConfig+0x288>)
 8004d0a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d0e:	6053      	str	r3, [r2, #4]
 8004d10:	e030      	b.n	8004d74 <HAL_RCC_OscConfig+0x298>
 8004d12:	4b14      	ldr	r3, [pc, #80]	; (8004d64 <HAL_RCC_OscConfig+0x288>)
 8004d14:	685b      	ldr	r3, [r3, #4]
 8004d16:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	691b      	ldr	r3, [r3, #16]
 8004d1e:	031b      	lsls	r3, r3, #12
 8004d20:	4910      	ldr	r1, [pc, #64]	; (8004d64 <HAL_RCC_OscConfig+0x288>)
 8004d22:	4313      	orrs	r3, r2
 8004d24:	604b      	str	r3, [r1, #4]
 8004d26:	e025      	b.n	8004d74 <HAL_RCC_OscConfig+0x298>
 8004d28:	4b0e      	ldr	r3, [pc, #56]	; (8004d64 <HAL_RCC_OscConfig+0x288>)
 8004d2a:	685b      	ldr	r3, [r3, #4]
 8004d2c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	691b      	ldr	r3, [r3, #16]
 8004d34:	061b      	lsls	r3, r3, #24
 8004d36:	490b      	ldr	r1, [pc, #44]	; (8004d64 <HAL_RCC_OscConfig+0x288>)
 8004d38:	4313      	orrs	r3, r2
 8004d3a:	604b      	str	r3, [r1, #4]
 8004d3c:	e01a      	b.n	8004d74 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004d3e:	4b09      	ldr	r3, [pc, #36]	; (8004d64 <HAL_RCC_OscConfig+0x288>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	4a08      	ldr	r2, [pc, #32]	; (8004d64 <HAL_RCC_OscConfig+0x288>)
 8004d44:	f023 0301 	bic.w	r3, r3, #1
 8004d48:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d4a:	f7fc fc43 	bl	80015d4 <HAL_GetTick>
 8004d4e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004d50:	e00a      	b.n	8004d68 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004d52:	f7fc fc3f 	bl	80015d4 <HAL_GetTick>
 8004d56:	4602      	mov	r2, r0
 8004d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d5a:	1ad3      	subs	r3, r2, r3
 8004d5c:	2b02      	cmp	r3, #2
 8004d5e:	d903      	bls.n	8004d68 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8004d60:	2303      	movs	r3, #3
 8004d62:	e2c4      	b.n	80052ee <HAL_RCC_OscConfig+0x812>
 8004d64:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004d68:	4ba4      	ldr	r3, [pc, #656]	; (8004ffc <HAL_RCC_OscConfig+0x520>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f003 0304 	and.w	r3, r3, #4
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d1ee      	bne.n	8004d52 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f003 0310 	and.w	r3, r3, #16
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	f000 80a9 	beq.w	8004ed4 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d82:	4b9e      	ldr	r3, [pc, #632]	; (8004ffc <HAL_RCC_OscConfig+0x520>)
 8004d84:	691b      	ldr	r3, [r3, #16]
 8004d86:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004d8a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004d8c:	4b9b      	ldr	r3, [pc, #620]	; (8004ffc <HAL_RCC_OscConfig+0x520>)
 8004d8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d90:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004d92:	69bb      	ldr	r3, [r7, #24]
 8004d94:	2b08      	cmp	r3, #8
 8004d96:	d007      	beq.n	8004da8 <HAL_RCC_OscConfig+0x2cc>
 8004d98:	69bb      	ldr	r3, [r7, #24]
 8004d9a:	2b18      	cmp	r3, #24
 8004d9c:	d13a      	bne.n	8004e14 <HAL_RCC_OscConfig+0x338>
 8004d9e:	697b      	ldr	r3, [r7, #20]
 8004da0:	f003 0303 	and.w	r3, r3, #3
 8004da4:	2b01      	cmp	r3, #1
 8004da6:	d135      	bne.n	8004e14 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004da8:	4b94      	ldr	r3, [pc, #592]	; (8004ffc <HAL_RCC_OscConfig+0x520>)
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d005      	beq.n	8004dc0 <HAL_RCC_OscConfig+0x2e4>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	69db      	ldr	r3, [r3, #28]
 8004db8:	2b80      	cmp	r3, #128	; 0x80
 8004dba:	d001      	beq.n	8004dc0 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8004dbc:	2301      	movs	r3, #1
 8004dbe:	e296      	b.n	80052ee <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004dc0:	f7fc fc14 	bl	80015ec <HAL_GetREVID>
 8004dc4:	4603      	mov	r3, r0
 8004dc6:	f241 0203 	movw	r2, #4099	; 0x1003
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d817      	bhi.n	8004dfe <HAL_RCC_OscConfig+0x322>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6a1b      	ldr	r3, [r3, #32]
 8004dd2:	2b20      	cmp	r3, #32
 8004dd4:	d108      	bne.n	8004de8 <HAL_RCC_OscConfig+0x30c>
 8004dd6:	4b89      	ldr	r3, [pc, #548]	; (8004ffc <HAL_RCC_OscConfig+0x520>)
 8004dd8:	685b      	ldr	r3, [r3, #4]
 8004dda:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004dde:	4a87      	ldr	r2, [pc, #540]	; (8004ffc <HAL_RCC_OscConfig+0x520>)
 8004de0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004de4:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004de6:	e075      	b.n	8004ed4 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004de8:	4b84      	ldr	r3, [pc, #528]	; (8004ffc <HAL_RCC_OscConfig+0x520>)
 8004dea:	685b      	ldr	r3, [r3, #4]
 8004dec:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6a1b      	ldr	r3, [r3, #32]
 8004df4:	069b      	lsls	r3, r3, #26
 8004df6:	4981      	ldr	r1, [pc, #516]	; (8004ffc <HAL_RCC_OscConfig+0x520>)
 8004df8:	4313      	orrs	r3, r2
 8004dfa:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004dfc:	e06a      	b.n	8004ed4 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004dfe:	4b7f      	ldr	r3, [pc, #508]	; (8004ffc <HAL_RCC_OscConfig+0x520>)
 8004e00:	68db      	ldr	r3, [r3, #12]
 8004e02:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6a1b      	ldr	r3, [r3, #32]
 8004e0a:	061b      	lsls	r3, r3, #24
 8004e0c:	497b      	ldr	r1, [pc, #492]	; (8004ffc <HAL_RCC_OscConfig+0x520>)
 8004e0e:	4313      	orrs	r3, r2
 8004e10:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004e12:	e05f      	b.n	8004ed4 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	69db      	ldr	r3, [r3, #28]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d042      	beq.n	8004ea2 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004e1c:	4b77      	ldr	r3, [pc, #476]	; (8004ffc <HAL_RCC_OscConfig+0x520>)
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	4a76      	ldr	r2, [pc, #472]	; (8004ffc <HAL_RCC_OscConfig+0x520>)
 8004e22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e28:	f7fc fbd4 	bl	80015d4 <HAL_GetTick>
 8004e2c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004e2e:	e008      	b.n	8004e42 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004e30:	f7fc fbd0 	bl	80015d4 <HAL_GetTick>
 8004e34:	4602      	mov	r2, r0
 8004e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e38:	1ad3      	subs	r3, r2, r3
 8004e3a:	2b02      	cmp	r3, #2
 8004e3c:	d901      	bls.n	8004e42 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8004e3e:	2303      	movs	r3, #3
 8004e40:	e255      	b.n	80052ee <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004e42:	4b6e      	ldr	r3, [pc, #440]	; (8004ffc <HAL_RCC_OscConfig+0x520>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d0f0      	beq.n	8004e30 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004e4e:	f7fc fbcd 	bl	80015ec <HAL_GetREVID>
 8004e52:	4603      	mov	r3, r0
 8004e54:	f241 0203 	movw	r2, #4099	; 0x1003
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d817      	bhi.n	8004e8c <HAL_RCC_OscConfig+0x3b0>
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6a1b      	ldr	r3, [r3, #32]
 8004e60:	2b20      	cmp	r3, #32
 8004e62:	d108      	bne.n	8004e76 <HAL_RCC_OscConfig+0x39a>
 8004e64:	4b65      	ldr	r3, [pc, #404]	; (8004ffc <HAL_RCC_OscConfig+0x520>)
 8004e66:	685b      	ldr	r3, [r3, #4]
 8004e68:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004e6c:	4a63      	ldr	r2, [pc, #396]	; (8004ffc <HAL_RCC_OscConfig+0x520>)
 8004e6e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004e72:	6053      	str	r3, [r2, #4]
 8004e74:	e02e      	b.n	8004ed4 <HAL_RCC_OscConfig+0x3f8>
 8004e76:	4b61      	ldr	r3, [pc, #388]	; (8004ffc <HAL_RCC_OscConfig+0x520>)
 8004e78:	685b      	ldr	r3, [r3, #4]
 8004e7a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6a1b      	ldr	r3, [r3, #32]
 8004e82:	069b      	lsls	r3, r3, #26
 8004e84:	495d      	ldr	r1, [pc, #372]	; (8004ffc <HAL_RCC_OscConfig+0x520>)
 8004e86:	4313      	orrs	r3, r2
 8004e88:	604b      	str	r3, [r1, #4]
 8004e8a:	e023      	b.n	8004ed4 <HAL_RCC_OscConfig+0x3f8>
 8004e8c:	4b5b      	ldr	r3, [pc, #364]	; (8004ffc <HAL_RCC_OscConfig+0x520>)
 8004e8e:	68db      	ldr	r3, [r3, #12]
 8004e90:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6a1b      	ldr	r3, [r3, #32]
 8004e98:	061b      	lsls	r3, r3, #24
 8004e9a:	4958      	ldr	r1, [pc, #352]	; (8004ffc <HAL_RCC_OscConfig+0x520>)
 8004e9c:	4313      	orrs	r3, r2
 8004e9e:	60cb      	str	r3, [r1, #12]
 8004ea0:	e018      	b.n	8004ed4 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004ea2:	4b56      	ldr	r3, [pc, #344]	; (8004ffc <HAL_RCC_OscConfig+0x520>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	4a55      	ldr	r2, [pc, #340]	; (8004ffc <HAL_RCC_OscConfig+0x520>)
 8004ea8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004eac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004eae:	f7fc fb91 	bl	80015d4 <HAL_GetTick>
 8004eb2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004eb4:	e008      	b.n	8004ec8 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004eb6:	f7fc fb8d 	bl	80015d4 <HAL_GetTick>
 8004eba:	4602      	mov	r2, r0
 8004ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ebe:	1ad3      	subs	r3, r2, r3
 8004ec0:	2b02      	cmp	r3, #2
 8004ec2:	d901      	bls.n	8004ec8 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8004ec4:	2303      	movs	r3, #3
 8004ec6:	e212      	b.n	80052ee <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004ec8:	4b4c      	ldr	r3, [pc, #304]	; (8004ffc <HAL_RCC_OscConfig+0x520>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d1f0      	bne.n	8004eb6 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f003 0308 	and.w	r3, r3, #8
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d036      	beq.n	8004f4e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	695b      	ldr	r3, [r3, #20]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d019      	beq.n	8004f1c <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004ee8:	4b44      	ldr	r3, [pc, #272]	; (8004ffc <HAL_RCC_OscConfig+0x520>)
 8004eea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004eec:	4a43      	ldr	r2, [pc, #268]	; (8004ffc <HAL_RCC_OscConfig+0x520>)
 8004eee:	f043 0301 	orr.w	r3, r3, #1
 8004ef2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ef4:	f7fc fb6e 	bl	80015d4 <HAL_GetTick>
 8004ef8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004efa:	e008      	b.n	8004f0e <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004efc:	f7fc fb6a 	bl	80015d4 <HAL_GetTick>
 8004f00:	4602      	mov	r2, r0
 8004f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f04:	1ad3      	subs	r3, r2, r3
 8004f06:	2b02      	cmp	r3, #2
 8004f08:	d901      	bls.n	8004f0e <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8004f0a:	2303      	movs	r3, #3
 8004f0c:	e1ef      	b.n	80052ee <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004f0e:	4b3b      	ldr	r3, [pc, #236]	; (8004ffc <HAL_RCC_OscConfig+0x520>)
 8004f10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f12:	f003 0302 	and.w	r3, r3, #2
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d0f0      	beq.n	8004efc <HAL_RCC_OscConfig+0x420>
 8004f1a:	e018      	b.n	8004f4e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004f1c:	4b37      	ldr	r3, [pc, #220]	; (8004ffc <HAL_RCC_OscConfig+0x520>)
 8004f1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f20:	4a36      	ldr	r2, [pc, #216]	; (8004ffc <HAL_RCC_OscConfig+0x520>)
 8004f22:	f023 0301 	bic.w	r3, r3, #1
 8004f26:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f28:	f7fc fb54 	bl	80015d4 <HAL_GetTick>
 8004f2c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004f2e:	e008      	b.n	8004f42 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004f30:	f7fc fb50 	bl	80015d4 <HAL_GetTick>
 8004f34:	4602      	mov	r2, r0
 8004f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f38:	1ad3      	subs	r3, r2, r3
 8004f3a:	2b02      	cmp	r3, #2
 8004f3c:	d901      	bls.n	8004f42 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8004f3e:	2303      	movs	r3, #3
 8004f40:	e1d5      	b.n	80052ee <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004f42:	4b2e      	ldr	r3, [pc, #184]	; (8004ffc <HAL_RCC_OscConfig+0x520>)
 8004f44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f46:	f003 0302 	and.w	r3, r3, #2
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d1f0      	bne.n	8004f30 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f003 0320 	and.w	r3, r3, #32
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d036      	beq.n	8004fc8 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	699b      	ldr	r3, [r3, #24]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d019      	beq.n	8004f96 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004f62:	4b26      	ldr	r3, [pc, #152]	; (8004ffc <HAL_RCC_OscConfig+0x520>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	4a25      	ldr	r2, [pc, #148]	; (8004ffc <HAL_RCC_OscConfig+0x520>)
 8004f68:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004f6c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004f6e:	f7fc fb31 	bl	80015d4 <HAL_GetTick>
 8004f72:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004f74:	e008      	b.n	8004f88 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8004f76:	f7fc fb2d 	bl	80015d4 <HAL_GetTick>
 8004f7a:	4602      	mov	r2, r0
 8004f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f7e:	1ad3      	subs	r3, r2, r3
 8004f80:	2b02      	cmp	r3, #2
 8004f82:	d901      	bls.n	8004f88 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8004f84:	2303      	movs	r3, #3
 8004f86:	e1b2      	b.n	80052ee <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004f88:	4b1c      	ldr	r3, [pc, #112]	; (8004ffc <HAL_RCC_OscConfig+0x520>)
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d0f0      	beq.n	8004f76 <HAL_RCC_OscConfig+0x49a>
 8004f94:	e018      	b.n	8004fc8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004f96:	4b19      	ldr	r3, [pc, #100]	; (8004ffc <HAL_RCC_OscConfig+0x520>)
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	4a18      	ldr	r2, [pc, #96]	; (8004ffc <HAL_RCC_OscConfig+0x520>)
 8004f9c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004fa0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004fa2:	f7fc fb17 	bl	80015d4 <HAL_GetTick>
 8004fa6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004fa8:	e008      	b.n	8004fbc <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8004faa:	f7fc fb13 	bl	80015d4 <HAL_GetTick>
 8004fae:	4602      	mov	r2, r0
 8004fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fb2:	1ad3      	subs	r3, r2, r3
 8004fb4:	2b02      	cmp	r3, #2
 8004fb6:	d901      	bls.n	8004fbc <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8004fb8:	2303      	movs	r3, #3
 8004fba:	e198      	b.n	80052ee <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004fbc:	4b0f      	ldr	r3, [pc, #60]	; (8004ffc <HAL_RCC_OscConfig+0x520>)
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d1f0      	bne.n	8004faa <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f003 0304 	and.w	r3, r3, #4
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	f000 8085 	beq.w	80050e0 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004fd6:	4b0a      	ldr	r3, [pc, #40]	; (8005000 <HAL_RCC_OscConfig+0x524>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	4a09      	ldr	r2, [pc, #36]	; (8005000 <HAL_RCC_OscConfig+0x524>)
 8004fdc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004fe0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004fe2:	f7fc faf7 	bl	80015d4 <HAL_GetTick>
 8004fe6:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004fe8:	e00c      	b.n	8005004 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004fea:	f7fc faf3 	bl	80015d4 <HAL_GetTick>
 8004fee:	4602      	mov	r2, r0
 8004ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ff2:	1ad3      	subs	r3, r2, r3
 8004ff4:	2b64      	cmp	r3, #100	; 0x64
 8004ff6:	d905      	bls.n	8005004 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8004ff8:	2303      	movs	r3, #3
 8004ffa:	e178      	b.n	80052ee <HAL_RCC_OscConfig+0x812>
 8004ffc:	58024400 	.word	0x58024400
 8005000:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005004:	4b96      	ldr	r3, [pc, #600]	; (8005260 <HAL_RCC_OscConfig+0x784>)
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800500c:	2b00      	cmp	r3, #0
 800500e:	d0ec      	beq.n	8004fea <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	689b      	ldr	r3, [r3, #8]
 8005014:	2b01      	cmp	r3, #1
 8005016:	d106      	bne.n	8005026 <HAL_RCC_OscConfig+0x54a>
 8005018:	4b92      	ldr	r3, [pc, #584]	; (8005264 <HAL_RCC_OscConfig+0x788>)
 800501a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800501c:	4a91      	ldr	r2, [pc, #580]	; (8005264 <HAL_RCC_OscConfig+0x788>)
 800501e:	f043 0301 	orr.w	r3, r3, #1
 8005022:	6713      	str	r3, [r2, #112]	; 0x70
 8005024:	e02d      	b.n	8005082 <HAL_RCC_OscConfig+0x5a6>
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	689b      	ldr	r3, [r3, #8]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d10c      	bne.n	8005048 <HAL_RCC_OscConfig+0x56c>
 800502e:	4b8d      	ldr	r3, [pc, #564]	; (8005264 <HAL_RCC_OscConfig+0x788>)
 8005030:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005032:	4a8c      	ldr	r2, [pc, #560]	; (8005264 <HAL_RCC_OscConfig+0x788>)
 8005034:	f023 0301 	bic.w	r3, r3, #1
 8005038:	6713      	str	r3, [r2, #112]	; 0x70
 800503a:	4b8a      	ldr	r3, [pc, #552]	; (8005264 <HAL_RCC_OscConfig+0x788>)
 800503c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800503e:	4a89      	ldr	r2, [pc, #548]	; (8005264 <HAL_RCC_OscConfig+0x788>)
 8005040:	f023 0304 	bic.w	r3, r3, #4
 8005044:	6713      	str	r3, [r2, #112]	; 0x70
 8005046:	e01c      	b.n	8005082 <HAL_RCC_OscConfig+0x5a6>
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	689b      	ldr	r3, [r3, #8]
 800504c:	2b05      	cmp	r3, #5
 800504e:	d10c      	bne.n	800506a <HAL_RCC_OscConfig+0x58e>
 8005050:	4b84      	ldr	r3, [pc, #528]	; (8005264 <HAL_RCC_OscConfig+0x788>)
 8005052:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005054:	4a83      	ldr	r2, [pc, #524]	; (8005264 <HAL_RCC_OscConfig+0x788>)
 8005056:	f043 0304 	orr.w	r3, r3, #4
 800505a:	6713      	str	r3, [r2, #112]	; 0x70
 800505c:	4b81      	ldr	r3, [pc, #516]	; (8005264 <HAL_RCC_OscConfig+0x788>)
 800505e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005060:	4a80      	ldr	r2, [pc, #512]	; (8005264 <HAL_RCC_OscConfig+0x788>)
 8005062:	f043 0301 	orr.w	r3, r3, #1
 8005066:	6713      	str	r3, [r2, #112]	; 0x70
 8005068:	e00b      	b.n	8005082 <HAL_RCC_OscConfig+0x5a6>
 800506a:	4b7e      	ldr	r3, [pc, #504]	; (8005264 <HAL_RCC_OscConfig+0x788>)
 800506c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800506e:	4a7d      	ldr	r2, [pc, #500]	; (8005264 <HAL_RCC_OscConfig+0x788>)
 8005070:	f023 0301 	bic.w	r3, r3, #1
 8005074:	6713      	str	r3, [r2, #112]	; 0x70
 8005076:	4b7b      	ldr	r3, [pc, #492]	; (8005264 <HAL_RCC_OscConfig+0x788>)
 8005078:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800507a:	4a7a      	ldr	r2, [pc, #488]	; (8005264 <HAL_RCC_OscConfig+0x788>)
 800507c:	f023 0304 	bic.w	r3, r3, #4
 8005080:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	689b      	ldr	r3, [r3, #8]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d015      	beq.n	80050b6 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800508a:	f7fc faa3 	bl	80015d4 <HAL_GetTick>
 800508e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005090:	e00a      	b.n	80050a8 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005092:	f7fc fa9f 	bl	80015d4 <HAL_GetTick>
 8005096:	4602      	mov	r2, r0
 8005098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800509a:	1ad3      	subs	r3, r2, r3
 800509c:	f241 3288 	movw	r2, #5000	; 0x1388
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d901      	bls.n	80050a8 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 80050a4:	2303      	movs	r3, #3
 80050a6:	e122      	b.n	80052ee <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80050a8:	4b6e      	ldr	r3, [pc, #440]	; (8005264 <HAL_RCC_OscConfig+0x788>)
 80050aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050ac:	f003 0302 	and.w	r3, r3, #2
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d0ee      	beq.n	8005092 <HAL_RCC_OscConfig+0x5b6>
 80050b4:	e014      	b.n	80050e0 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050b6:	f7fc fa8d 	bl	80015d4 <HAL_GetTick>
 80050ba:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80050bc:	e00a      	b.n	80050d4 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80050be:	f7fc fa89 	bl	80015d4 <HAL_GetTick>
 80050c2:	4602      	mov	r2, r0
 80050c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050c6:	1ad3      	subs	r3, r2, r3
 80050c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d901      	bls.n	80050d4 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 80050d0:	2303      	movs	r3, #3
 80050d2:	e10c      	b.n	80052ee <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80050d4:	4b63      	ldr	r3, [pc, #396]	; (8005264 <HAL_RCC_OscConfig+0x788>)
 80050d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050d8:	f003 0302 	and.w	r3, r3, #2
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d1ee      	bne.n	80050be <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	f000 8101 	beq.w	80052ec <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80050ea:	4b5e      	ldr	r3, [pc, #376]	; (8005264 <HAL_RCC_OscConfig+0x788>)
 80050ec:	691b      	ldr	r3, [r3, #16]
 80050ee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80050f2:	2b18      	cmp	r3, #24
 80050f4:	f000 80bc 	beq.w	8005270 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050fc:	2b02      	cmp	r3, #2
 80050fe:	f040 8095 	bne.w	800522c <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005102:	4b58      	ldr	r3, [pc, #352]	; (8005264 <HAL_RCC_OscConfig+0x788>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	4a57      	ldr	r2, [pc, #348]	; (8005264 <HAL_RCC_OscConfig+0x788>)
 8005108:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800510c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800510e:	f7fc fa61 	bl	80015d4 <HAL_GetTick>
 8005112:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005114:	e008      	b.n	8005128 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005116:	f7fc fa5d 	bl	80015d4 <HAL_GetTick>
 800511a:	4602      	mov	r2, r0
 800511c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800511e:	1ad3      	subs	r3, r2, r3
 8005120:	2b02      	cmp	r3, #2
 8005122:	d901      	bls.n	8005128 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8005124:	2303      	movs	r3, #3
 8005126:	e0e2      	b.n	80052ee <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005128:	4b4e      	ldr	r3, [pc, #312]	; (8005264 <HAL_RCC_OscConfig+0x788>)
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005130:	2b00      	cmp	r3, #0
 8005132:	d1f0      	bne.n	8005116 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005134:	4b4b      	ldr	r3, [pc, #300]	; (8005264 <HAL_RCC_OscConfig+0x788>)
 8005136:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005138:	4b4b      	ldr	r3, [pc, #300]	; (8005268 <HAL_RCC_OscConfig+0x78c>)
 800513a:	4013      	ands	r3, r2
 800513c:	687a      	ldr	r2, [r7, #4]
 800513e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8005140:	687a      	ldr	r2, [r7, #4]
 8005142:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005144:	0112      	lsls	r2, r2, #4
 8005146:	430a      	orrs	r2, r1
 8005148:	4946      	ldr	r1, [pc, #280]	; (8005264 <HAL_RCC_OscConfig+0x788>)
 800514a:	4313      	orrs	r3, r2
 800514c:	628b      	str	r3, [r1, #40]	; 0x28
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005152:	3b01      	subs	r3, #1
 8005154:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800515c:	3b01      	subs	r3, #1
 800515e:	025b      	lsls	r3, r3, #9
 8005160:	b29b      	uxth	r3, r3
 8005162:	431a      	orrs	r2, r3
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005168:	3b01      	subs	r3, #1
 800516a:	041b      	lsls	r3, r3, #16
 800516c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005170:	431a      	orrs	r2, r3
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005176:	3b01      	subs	r3, #1
 8005178:	061b      	lsls	r3, r3, #24
 800517a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800517e:	4939      	ldr	r1, [pc, #228]	; (8005264 <HAL_RCC_OscConfig+0x788>)
 8005180:	4313      	orrs	r3, r2
 8005182:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8005184:	4b37      	ldr	r3, [pc, #220]	; (8005264 <HAL_RCC_OscConfig+0x788>)
 8005186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005188:	4a36      	ldr	r2, [pc, #216]	; (8005264 <HAL_RCC_OscConfig+0x788>)
 800518a:	f023 0301 	bic.w	r3, r3, #1
 800518e:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005190:	4b34      	ldr	r3, [pc, #208]	; (8005264 <HAL_RCC_OscConfig+0x788>)
 8005192:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005194:	4b35      	ldr	r3, [pc, #212]	; (800526c <HAL_RCC_OscConfig+0x790>)
 8005196:	4013      	ands	r3, r2
 8005198:	687a      	ldr	r2, [r7, #4]
 800519a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800519c:	00d2      	lsls	r2, r2, #3
 800519e:	4931      	ldr	r1, [pc, #196]	; (8005264 <HAL_RCC_OscConfig+0x788>)
 80051a0:	4313      	orrs	r3, r2
 80051a2:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80051a4:	4b2f      	ldr	r3, [pc, #188]	; (8005264 <HAL_RCC_OscConfig+0x788>)
 80051a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051a8:	f023 020c 	bic.w	r2, r3, #12
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051b0:	492c      	ldr	r1, [pc, #176]	; (8005264 <HAL_RCC_OscConfig+0x788>)
 80051b2:	4313      	orrs	r3, r2
 80051b4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80051b6:	4b2b      	ldr	r3, [pc, #172]	; (8005264 <HAL_RCC_OscConfig+0x788>)
 80051b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051ba:	f023 0202 	bic.w	r2, r3, #2
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051c2:	4928      	ldr	r1, [pc, #160]	; (8005264 <HAL_RCC_OscConfig+0x788>)
 80051c4:	4313      	orrs	r3, r2
 80051c6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80051c8:	4b26      	ldr	r3, [pc, #152]	; (8005264 <HAL_RCC_OscConfig+0x788>)
 80051ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051cc:	4a25      	ldr	r2, [pc, #148]	; (8005264 <HAL_RCC_OscConfig+0x788>)
 80051ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80051d2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80051d4:	4b23      	ldr	r3, [pc, #140]	; (8005264 <HAL_RCC_OscConfig+0x788>)
 80051d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051d8:	4a22      	ldr	r2, [pc, #136]	; (8005264 <HAL_RCC_OscConfig+0x788>)
 80051da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80051de:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80051e0:	4b20      	ldr	r3, [pc, #128]	; (8005264 <HAL_RCC_OscConfig+0x788>)
 80051e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051e4:	4a1f      	ldr	r2, [pc, #124]	; (8005264 <HAL_RCC_OscConfig+0x788>)
 80051e6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80051ea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80051ec:	4b1d      	ldr	r3, [pc, #116]	; (8005264 <HAL_RCC_OscConfig+0x788>)
 80051ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051f0:	4a1c      	ldr	r2, [pc, #112]	; (8005264 <HAL_RCC_OscConfig+0x788>)
 80051f2:	f043 0301 	orr.w	r3, r3, #1
 80051f6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80051f8:	4b1a      	ldr	r3, [pc, #104]	; (8005264 <HAL_RCC_OscConfig+0x788>)
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	4a19      	ldr	r2, [pc, #100]	; (8005264 <HAL_RCC_OscConfig+0x788>)
 80051fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005202:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005204:	f7fc f9e6 	bl	80015d4 <HAL_GetTick>
 8005208:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800520a:	e008      	b.n	800521e <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800520c:	f7fc f9e2 	bl	80015d4 <HAL_GetTick>
 8005210:	4602      	mov	r2, r0
 8005212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005214:	1ad3      	subs	r3, r2, r3
 8005216:	2b02      	cmp	r3, #2
 8005218:	d901      	bls.n	800521e <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 800521a:	2303      	movs	r3, #3
 800521c:	e067      	b.n	80052ee <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800521e:	4b11      	ldr	r3, [pc, #68]	; (8005264 <HAL_RCC_OscConfig+0x788>)
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005226:	2b00      	cmp	r3, #0
 8005228:	d0f0      	beq.n	800520c <HAL_RCC_OscConfig+0x730>
 800522a:	e05f      	b.n	80052ec <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800522c:	4b0d      	ldr	r3, [pc, #52]	; (8005264 <HAL_RCC_OscConfig+0x788>)
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	4a0c      	ldr	r2, [pc, #48]	; (8005264 <HAL_RCC_OscConfig+0x788>)
 8005232:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005236:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005238:	f7fc f9cc 	bl	80015d4 <HAL_GetTick>
 800523c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800523e:	e008      	b.n	8005252 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005240:	f7fc f9c8 	bl	80015d4 <HAL_GetTick>
 8005244:	4602      	mov	r2, r0
 8005246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005248:	1ad3      	subs	r3, r2, r3
 800524a:	2b02      	cmp	r3, #2
 800524c:	d901      	bls.n	8005252 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 800524e:	2303      	movs	r3, #3
 8005250:	e04d      	b.n	80052ee <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005252:	4b04      	ldr	r3, [pc, #16]	; (8005264 <HAL_RCC_OscConfig+0x788>)
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800525a:	2b00      	cmp	r3, #0
 800525c:	d1f0      	bne.n	8005240 <HAL_RCC_OscConfig+0x764>
 800525e:	e045      	b.n	80052ec <HAL_RCC_OscConfig+0x810>
 8005260:	58024800 	.word	0x58024800
 8005264:	58024400 	.word	0x58024400
 8005268:	fffffc0c 	.word	0xfffffc0c
 800526c:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005270:	4b21      	ldr	r3, [pc, #132]	; (80052f8 <HAL_RCC_OscConfig+0x81c>)
 8005272:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005274:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005276:	4b20      	ldr	r3, [pc, #128]	; (80052f8 <HAL_RCC_OscConfig+0x81c>)
 8005278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800527a:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005280:	2b01      	cmp	r3, #1
 8005282:	d031      	beq.n	80052e8 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005284:	693b      	ldr	r3, [r7, #16]
 8005286:	f003 0203 	and.w	r2, r3, #3
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800528e:	429a      	cmp	r2, r3
 8005290:	d12a      	bne.n	80052e8 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005292:	693b      	ldr	r3, [r7, #16]
 8005294:	091b      	lsrs	r3, r3, #4
 8005296:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800529e:	429a      	cmp	r2, r3
 80052a0:	d122      	bne.n	80052e8 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052ac:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80052ae:	429a      	cmp	r2, r3
 80052b0:	d11a      	bne.n	80052e8 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	0a5b      	lsrs	r3, r3, #9
 80052b6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052be:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80052c0:	429a      	cmp	r2, r3
 80052c2:	d111      	bne.n	80052e8 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	0c1b      	lsrs	r3, r3, #16
 80052c8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052d0:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80052d2:	429a      	cmp	r2, r3
 80052d4:	d108      	bne.n	80052e8 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	0e1b      	lsrs	r3, r3, #24
 80052da:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052e2:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80052e4:	429a      	cmp	r2, r3
 80052e6:	d001      	beq.n	80052ec <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 80052e8:	2301      	movs	r3, #1
 80052ea:	e000      	b.n	80052ee <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 80052ec:	2300      	movs	r3, #0
}
 80052ee:	4618      	mov	r0, r3
 80052f0:	3730      	adds	r7, #48	; 0x30
 80052f2:	46bd      	mov	sp, r7
 80052f4:	bd80      	pop	{r7, pc}
 80052f6:	bf00      	nop
 80052f8:	58024400 	.word	0x58024400

080052fc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b086      	sub	sp, #24
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
 8005304:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d101      	bne.n	8005310 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800530c:	2301      	movs	r3, #1
 800530e:	e19c      	b.n	800564a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005310:	4b8a      	ldr	r3, [pc, #552]	; (800553c <HAL_RCC_ClockConfig+0x240>)
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f003 030f 	and.w	r3, r3, #15
 8005318:	683a      	ldr	r2, [r7, #0]
 800531a:	429a      	cmp	r2, r3
 800531c:	d910      	bls.n	8005340 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800531e:	4b87      	ldr	r3, [pc, #540]	; (800553c <HAL_RCC_ClockConfig+0x240>)
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f023 020f 	bic.w	r2, r3, #15
 8005326:	4985      	ldr	r1, [pc, #532]	; (800553c <HAL_RCC_ClockConfig+0x240>)
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	4313      	orrs	r3, r2
 800532c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800532e:	4b83      	ldr	r3, [pc, #524]	; (800553c <HAL_RCC_ClockConfig+0x240>)
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f003 030f 	and.w	r3, r3, #15
 8005336:	683a      	ldr	r2, [r7, #0]
 8005338:	429a      	cmp	r2, r3
 800533a:	d001      	beq.n	8005340 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800533c:	2301      	movs	r3, #1
 800533e:	e184      	b.n	800564a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f003 0304 	and.w	r3, r3, #4
 8005348:	2b00      	cmp	r3, #0
 800534a:	d010      	beq.n	800536e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	691a      	ldr	r2, [r3, #16]
 8005350:	4b7b      	ldr	r3, [pc, #492]	; (8005540 <HAL_RCC_ClockConfig+0x244>)
 8005352:	699b      	ldr	r3, [r3, #24]
 8005354:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005358:	429a      	cmp	r2, r3
 800535a:	d908      	bls.n	800536e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800535c:	4b78      	ldr	r3, [pc, #480]	; (8005540 <HAL_RCC_ClockConfig+0x244>)
 800535e:	699b      	ldr	r3, [r3, #24]
 8005360:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	691b      	ldr	r3, [r3, #16]
 8005368:	4975      	ldr	r1, [pc, #468]	; (8005540 <HAL_RCC_ClockConfig+0x244>)
 800536a:	4313      	orrs	r3, r2
 800536c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f003 0308 	and.w	r3, r3, #8
 8005376:	2b00      	cmp	r3, #0
 8005378:	d010      	beq.n	800539c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	695a      	ldr	r2, [r3, #20]
 800537e:	4b70      	ldr	r3, [pc, #448]	; (8005540 <HAL_RCC_ClockConfig+0x244>)
 8005380:	69db      	ldr	r3, [r3, #28]
 8005382:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005386:	429a      	cmp	r2, r3
 8005388:	d908      	bls.n	800539c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800538a:	4b6d      	ldr	r3, [pc, #436]	; (8005540 <HAL_RCC_ClockConfig+0x244>)
 800538c:	69db      	ldr	r3, [r3, #28]
 800538e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	695b      	ldr	r3, [r3, #20]
 8005396:	496a      	ldr	r1, [pc, #424]	; (8005540 <HAL_RCC_ClockConfig+0x244>)
 8005398:	4313      	orrs	r3, r2
 800539a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f003 0310 	and.w	r3, r3, #16
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d010      	beq.n	80053ca <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	699a      	ldr	r2, [r3, #24]
 80053ac:	4b64      	ldr	r3, [pc, #400]	; (8005540 <HAL_RCC_ClockConfig+0x244>)
 80053ae:	69db      	ldr	r3, [r3, #28]
 80053b0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80053b4:	429a      	cmp	r2, r3
 80053b6:	d908      	bls.n	80053ca <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80053b8:	4b61      	ldr	r3, [pc, #388]	; (8005540 <HAL_RCC_ClockConfig+0x244>)
 80053ba:	69db      	ldr	r3, [r3, #28]
 80053bc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	699b      	ldr	r3, [r3, #24]
 80053c4:	495e      	ldr	r1, [pc, #376]	; (8005540 <HAL_RCC_ClockConfig+0x244>)
 80053c6:	4313      	orrs	r3, r2
 80053c8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f003 0320 	and.w	r3, r3, #32
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d010      	beq.n	80053f8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	69da      	ldr	r2, [r3, #28]
 80053da:	4b59      	ldr	r3, [pc, #356]	; (8005540 <HAL_RCC_ClockConfig+0x244>)
 80053dc:	6a1b      	ldr	r3, [r3, #32]
 80053de:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80053e2:	429a      	cmp	r2, r3
 80053e4:	d908      	bls.n	80053f8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80053e6:	4b56      	ldr	r3, [pc, #344]	; (8005540 <HAL_RCC_ClockConfig+0x244>)
 80053e8:	6a1b      	ldr	r3, [r3, #32]
 80053ea:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	69db      	ldr	r3, [r3, #28]
 80053f2:	4953      	ldr	r1, [pc, #332]	; (8005540 <HAL_RCC_ClockConfig+0x244>)
 80053f4:	4313      	orrs	r3, r2
 80053f6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f003 0302 	and.w	r3, r3, #2
 8005400:	2b00      	cmp	r3, #0
 8005402:	d010      	beq.n	8005426 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	68da      	ldr	r2, [r3, #12]
 8005408:	4b4d      	ldr	r3, [pc, #308]	; (8005540 <HAL_RCC_ClockConfig+0x244>)
 800540a:	699b      	ldr	r3, [r3, #24]
 800540c:	f003 030f 	and.w	r3, r3, #15
 8005410:	429a      	cmp	r2, r3
 8005412:	d908      	bls.n	8005426 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005414:	4b4a      	ldr	r3, [pc, #296]	; (8005540 <HAL_RCC_ClockConfig+0x244>)
 8005416:	699b      	ldr	r3, [r3, #24]
 8005418:	f023 020f 	bic.w	r2, r3, #15
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	68db      	ldr	r3, [r3, #12]
 8005420:	4947      	ldr	r1, [pc, #284]	; (8005540 <HAL_RCC_ClockConfig+0x244>)
 8005422:	4313      	orrs	r3, r2
 8005424:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f003 0301 	and.w	r3, r3, #1
 800542e:	2b00      	cmp	r3, #0
 8005430:	d055      	beq.n	80054de <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005432:	4b43      	ldr	r3, [pc, #268]	; (8005540 <HAL_RCC_ClockConfig+0x244>)
 8005434:	699b      	ldr	r3, [r3, #24]
 8005436:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	689b      	ldr	r3, [r3, #8]
 800543e:	4940      	ldr	r1, [pc, #256]	; (8005540 <HAL_RCC_ClockConfig+0x244>)
 8005440:	4313      	orrs	r3, r2
 8005442:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	685b      	ldr	r3, [r3, #4]
 8005448:	2b02      	cmp	r3, #2
 800544a:	d107      	bne.n	800545c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800544c:	4b3c      	ldr	r3, [pc, #240]	; (8005540 <HAL_RCC_ClockConfig+0x244>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005454:	2b00      	cmp	r3, #0
 8005456:	d121      	bne.n	800549c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005458:	2301      	movs	r3, #1
 800545a:	e0f6      	b.n	800564a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	685b      	ldr	r3, [r3, #4]
 8005460:	2b03      	cmp	r3, #3
 8005462:	d107      	bne.n	8005474 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005464:	4b36      	ldr	r3, [pc, #216]	; (8005540 <HAL_RCC_ClockConfig+0x244>)
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800546c:	2b00      	cmp	r3, #0
 800546e:	d115      	bne.n	800549c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005470:	2301      	movs	r3, #1
 8005472:	e0ea      	b.n	800564a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	685b      	ldr	r3, [r3, #4]
 8005478:	2b01      	cmp	r3, #1
 800547a:	d107      	bne.n	800548c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800547c:	4b30      	ldr	r3, [pc, #192]	; (8005540 <HAL_RCC_ClockConfig+0x244>)
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005484:	2b00      	cmp	r3, #0
 8005486:	d109      	bne.n	800549c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005488:	2301      	movs	r3, #1
 800548a:	e0de      	b.n	800564a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800548c:	4b2c      	ldr	r3, [pc, #176]	; (8005540 <HAL_RCC_ClockConfig+0x244>)
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f003 0304 	and.w	r3, r3, #4
 8005494:	2b00      	cmp	r3, #0
 8005496:	d101      	bne.n	800549c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005498:	2301      	movs	r3, #1
 800549a:	e0d6      	b.n	800564a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800549c:	4b28      	ldr	r3, [pc, #160]	; (8005540 <HAL_RCC_ClockConfig+0x244>)
 800549e:	691b      	ldr	r3, [r3, #16]
 80054a0:	f023 0207 	bic.w	r2, r3, #7
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	685b      	ldr	r3, [r3, #4]
 80054a8:	4925      	ldr	r1, [pc, #148]	; (8005540 <HAL_RCC_ClockConfig+0x244>)
 80054aa:	4313      	orrs	r3, r2
 80054ac:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054ae:	f7fc f891 	bl	80015d4 <HAL_GetTick>
 80054b2:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80054b4:	e00a      	b.n	80054cc <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80054b6:	f7fc f88d 	bl	80015d4 <HAL_GetTick>
 80054ba:	4602      	mov	r2, r0
 80054bc:	697b      	ldr	r3, [r7, #20]
 80054be:	1ad3      	subs	r3, r2, r3
 80054c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d901      	bls.n	80054cc <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80054c8:	2303      	movs	r3, #3
 80054ca:	e0be      	b.n	800564a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80054cc:	4b1c      	ldr	r3, [pc, #112]	; (8005540 <HAL_RCC_ClockConfig+0x244>)
 80054ce:	691b      	ldr	r3, [r3, #16]
 80054d0:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	685b      	ldr	r3, [r3, #4]
 80054d8:	00db      	lsls	r3, r3, #3
 80054da:	429a      	cmp	r2, r3
 80054dc:	d1eb      	bne.n	80054b6 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f003 0302 	and.w	r3, r3, #2
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d010      	beq.n	800550c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	68da      	ldr	r2, [r3, #12]
 80054ee:	4b14      	ldr	r3, [pc, #80]	; (8005540 <HAL_RCC_ClockConfig+0x244>)
 80054f0:	699b      	ldr	r3, [r3, #24]
 80054f2:	f003 030f 	and.w	r3, r3, #15
 80054f6:	429a      	cmp	r2, r3
 80054f8:	d208      	bcs.n	800550c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80054fa:	4b11      	ldr	r3, [pc, #68]	; (8005540 <HAL_RCC_ClockConfig+0x244>)
 80054fc:	699b      	ldr	r3, [r3, #24]
 80054fe:	f023 020f 	bic.w	r2, r3, #15
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	68db      	ldr	r3, [r3, #12]
 8005506:	490e      	ldr	r1, [pc, #56]	; (8005540 <HAL_RCC_ClockConfig+0x244>)
 8005508:	4313      	orrs	r3, r2
 800550a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800550c:	4b0b      	ldr	r3, [pc, #44]	; (800553c <HAL_RCC_ClockConfig+0x240>)
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f003 030f 	and.w	r3, r3, #15
 8005514:	683a      	ldr	r2, [r7, #0]
 8005516:	429a      	cmp	r2, r3
 8005518:	d214      	bcs.n	8005544 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800551a:	4b08      	ldr	r3, [pc, #32]	; (800553c <HAL_RCC_ClockConfig+0x240>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f023 020f 	bic.w	r2, r3, #15
 8005522:	4906      	ldr	r1, [pc, #24]	; (800553c <HAL_RCC_ClockConfig+0x240>)
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	4313      	orrs	r3, r2
 8005528:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800552a:	4b04      	ldr	r3, [pc, #16]	; (800553c <HAL_RCC_ClockConfig+0x240>)
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f003 030f 	and.w	r3, r3, #15
 8005532:	683a      	ldr	r2, [r7, #0]
 8005534:	429a      	cmp	r2, r3
 8005536:	d005      	beq.n	8005544 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005538:	2301      	movs	r3, #1
 800553a:	e086      	b.n	800564a <HAL_RCC_ClockConfig+0x34e>
 800553c:	52002000 	.word	0x52002000
 8005540:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f003 0304 	and.w	r3, r3, #4
 800554c:	2b00      	cmp	r3, #0
 800554e:	d010      	beq.n	8005572 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	691a      	ldr	r2, [r3, #16]
 8005554:	4b3f      	ldr	r3, [pc, #252]	; (8005654 <HAL_RCC_ClockConfig+0x358>)
 8005556:	699b      	ldr	r3, [r3, #24]
 8005558:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800555c:	429a      	cmp	r2, r3
 800555e:	d208      	bcs.n	8005572 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005560:	4b3c      	ldr	r3, [pc, #240]	; (8005654 <HAL_RCC_ClockConfig+0x358>)
 8005562:	699b      	ldr	r3, [r3, #24]
 8005564:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	691b      	ldr	r3, [r3, #16]
 800556c:	4939      	ldr	r1, [pc, #228]	; (8005654 <HAL_RCC_ClockConfig+0x358>)
 800556e:	4313      	orrs	r3, r2
 8005570:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f003 0308 	and.w	r3, r3, #8
 800557a:	2b00      	cmp	r3, #0
 800557c:	d010      	beq.n	80055a0 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	695a      	ldr	r2, [r3, #20]
 8005582:	4b34      	ldr	r3, [pc, #208]	; (8005654 <HAL_RCC_ClockConfig+0x358>)
 8005584:	69db      	ldr	r3, [r3, #28]
 8005586:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800558a:	429a      	cmp	r2, r3
 800558c:	d208      	bcs.n	80055a0 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800558e:	4b31      	ldr	r3, [pc, #196]	; (8005654 <HAL_RCC_ClockConfig+0x358>)
 8005590:	69db      	ldr	r3, [r3, #28]
 8005592:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	695b      	ldr	r3, [r3, #20]
 800559a:	492e      	ldr	r1, [pc, #184]	; (8005654 <HAL_RCC_ClockConfig+0x358>)
 800559c:	4313      	orrs	r3, r2
 800559e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f003 0310 	and.w	r3, r3, #16
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d010      	beq.n	80055ce <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	699a      	ldr	r2, [r3, #24]
 80055b0:	4b28      	ldr	r3, [pc, #160]	; (8005654 <HAL_RCC_ClockConfig+0x358>)
 80055b2:	69db      	ldr	r3, [r3, #28]
 80055b4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80055b8:	429a      	cmp	r2, r3
 80055ba:	d208      	bcs.n	80055ce <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80055bc:	4b25      	ldr	r3, [pc, #148]	; (8005654 <HAL_RCC_ClockConfig+0x358>)
 80055be:	69db      	ldr	r3, [r3, #28]
 80055c0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	699b      	ldr	r3, [r3, #24]
 80055c8:	4922      	ldr	r1, [pc, #136]	; (8005654 <HAL_RCC_ClockConfig+0x358>)
 80055ca:	4313      	orrs	r3, r2
 80055cc:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f003 0320 	and.w	r3, r3, #32
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d010      	beq.n	80055fc <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	69da      	ldr	r2, [r3, #28]
 80055de:	4b1d      	ldr	r3, [pc, #116]	; (8005654 <HAL_RCC_ClockConfig+0x358>)
 80055e0:	6a1b      	ldr	r3, [r3, #32]
 80055e2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80055e6:	429a      	cmp	r2, r3
 80055e8:	d208      	bcs.n	80055fc <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80055ea:	4b1a      	ldr	r3, [pc, #104]	; (8005654 <HAL_RCC_ClockConfig+0x358>)
 80055ec:	6a1b      	ldr	r3, [r3, #32]
 80055ee:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	69db      	ldr	r3, [r3, #28]
 80055f6:	4917      	ldr	r1, [pc, #92]	; (8005654 <HAL_RCC_ClockConfig+0x358>)
 80055f8:	4313      	orrs	r3, r2
 80055fa:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80055fc:	f000 f834 	bl	8005668 <HAL_RCC_GetSysClockFreq>
 8005600:	4602      	mov	r2, r0
 8005602:	4b14      	ldr	r3, [pc, #80]	; (8005654 <HAL_RCC_ClockConfig+0x358>)
 8005604:	699b      	ldr	r3, [r3, #24]
 8005606:	0a1b      	lsrs	r3, r3, #8
 8005608:	f003 030f 	and.w	r3, r3, #15
 800560c:	4912      	ldr	r1, [pc, #72]	; (8005658 <HAL_RCC_ClockConfig+0x35c>)
 800560e:	5ccb      	ldrb	r3, [r1, r3]
 8005610:	f003 031f 	and.w	r3, r3, #31
 8005614:	fa22 f303 	lsr.w	r3, r2, r3
 8005618:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800561a:	4b0e      	ldr	r3, [pc, #56]	; (8005654 <HAL_RCC_ClockConfig+0x358>)
 800561c:	699b      	ldr	r3, [r3, #24]
 800561e:	f003 030f 	and.w	r3, r3, #15
 8005622:	4a0d      	ldr	r2, [pc, #52]	; (8005658 <HAL_RCC_ClockConfig+0x35c>)
 8005624:	5cd3      	ldrb	r3, [r2, r3]
 8005626:	f003 031f 	and.w	r3, r3, #31
 800562a:	693a      	ldr	r2, [r7, #16]
 800562c:	fa22 f303 	lsr.w	r3, r2, r3
 8005630:	4a0a      	ldr	r2, [pc, #40]	; (800565c <HAL_RCC_ClockConfig+0x360>)
 8005632:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005634:	4a0a      	ldr	r2, [pc, #40]	; (8005660 <HAL_RCC_ClockConfig+0x364>)
 8005636:	693b      	ldr	r3, [r7, #16]
 8005638:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800563a:	4b0a      	ldr	r3, [pc, #40]	; (8005664 <HAL_RCC_ClockConfig+0x368>)
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	4618      	mov	r0, r3
 8005640:	f7fb ff7e 	bl	8001540 <HAL_InitTick>
 8005644:	4603      	mov	r3, r0
 8005646:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005648:	7bfb      	ldrb	r3, [r7, #15]
}
 800564a:	4618      	mov	r0, r3
 800564c:	3718      	adds	r7, #24
 800564e:	46bd      	mov	sp, r7
 8005650:	bd80      	pop	{r7, pc}
 8005652:	bf00      	nop
 8005654:	58024400 	.word	0x58024400
 8005658:	0800bfa8 	.word	0x0800bfa8
 800565c:	24000404 	.word	0x24000404
 8005660:	24000400 	.word	0x24000400
 8005664:	2400040c 	.word	0x2400040c

08005668 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005668:	b480      	push	{r7}
 800566a:	b089      	sub	sp, #36	; 0x24
 800566c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800566e:	4bb3      	ldr	r3, [pc, #716]	; (800593c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005670:	691b      	ldr	r3, [r3, #16]
 8005672:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005676:	2b18      	cmp	r3, #24
 8005678:	f200 8155 	bhi.w	8005926 <HAL_RCC_GetSysClockFreq+0x2be>
 800567c:	a201      	add	r2, pc, #4	; (adr r2, 8005684 <HAL_RCC_GetSysClockFreq+0x1c>)
 800567e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005682:	bf00      	nop
 8005684:	080056e9 	.word	0x080056e9
 8005688:	08005927 	.word	0x08005927
 800568c:	08005927 	.word	0x08005927
 8005690:	08005927 	.word	0x08005927
 8005694:	08005927 	.word	0x08005927
 8005698:	08005927 	.word	0x08005927
 800569c:	08005927 	.word	0x08005927
 80056a0:	08005927 	.word	0x08005927
 80056a4:	0800570f 	.word	0x0800570f
 80056a8:	08005927 	.word	0x08005927
 80056ac:	08005927 	.word	0x08005927
 80056b0:	08005927 	.word	0x08005927
 80056b4:	08005927 	.word	0x08005927
 80056b8:	08005927 	.word	0x08005927
 80056bc:	08005927 	.word	0x08005927
 80056c0:	08005927 	.word	0x08005927
 80056c4:	08005715 	.word	0x08005715
 80056c8:	08005927 	.word	0x08005927
 80056cc:	08005927 	.word	0x08005927
 80056d0:	08005927 	.word	0x08005927
 80056d4:	08005927 	.word	0x08005927
 80056d8:	08005927 	.word	0x08005927
 80056dc:	08005927 	.word	0x08005927
 80056e0:	08005927 	.word	0x08005927
 80056e4:	0800571b 	.word	0x0800571b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80056e8:	4b94      	ldr	r3, [pc, #592]	; (800593c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f003 0320 	and.w	r3, r3, #32
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d009      	beq.n	8005708 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80056f4:	4b91      	ldr	r3, [pc, #580]	; (800593c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	08db      	lsrs	r3, r3, #3
 80056fa:	f003 0303 	and.w	r3, r3, #3
 80056fe:	4a90      	ldr	r2, [pc, #576]	; (8005940 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005700:	fa22 f303 	lsr.w	r3, r2, r3
 8005704:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8005706:	e111      	b.n	800592c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005708:	4b8d      	ldr	r3, [pc, #564]	; (8005940 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800570a:	61bb      	str	r3, [r7, #24]
    break;
 800570c:	e10e      	b.n	800592c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800570e:	4b8d      	ldr	r3, [pc, #564]	; (8005944 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005710:	61bb      	str	r3, [r7, #24]
    break;
 8005712:	e10b      	b.n	800592c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8005714:	4b8c      	ldr	r3, [pc, #560]	; (8005948 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005716:	61bb      	str	r3, [r7, #24]
    break;
 8005718:	e108      	b.n	800592c <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800571a:	4b88      	ldr	r3, [pc, #544]	; (800593c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800571c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800571e:	f003 0303 	and.w	r3, r3, #3
 8005722:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8005724:	4b85      	ldr	r3, [pc, #532]	; (800593c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005726:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005728:	091b      	lsrs	r3, r3, #4
 800572a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800572e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005730:	4b82      	ldr	r3, [pc, #520]	; (800593c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005734:	f003 0301 	and.w	r3, r3, #1
 8005738:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800573a:	4b80      	ldr	r3, [pc, #512]	; (800593c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800573c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800573e:	08db      	lsrs	r3, r3, #3
 8005740:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005744:	68fa      	ldr	r2, [r7, #12]
 8005746:	fb02 f303 	mul.w	r3, r2, r3
 800574a:	ee07 3a90 	vmov	s15, r3
 800574e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005752:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8005756:	693b      	ldr	r3, [r7, #16]
 8005758:	2b00      	cmp	r3, #0
 800575a:	f000 80e1 	beq.w	8005920 <HAL_RCC_GetSysClockFreq+0x2b8>
 800575e:	697b      	ldr	r3, [r7, #20]
 8005760:	2b02      	cmp	r3, #2
 8005762:	f000 8083 	beq.w	800586c <HAL_RCC_GetSysClockFreq+0x204>
 8005766:	697b      	ldr	r3, [r7, #20]
 8005768:	2b02      	cmp	r3, #2
 800576a:	f200 80a1 	bhi.w	80058b0 <HAL_RCC_GetSysClockFreq+0x248>
 800576e:	697b      	ldr	r3, [r7, #20]
 8005770:	2b00      	cmp	r3, #0
 8005772:	d003      	beq.n	800577c <HAL_RCC_GetSysClockFreq+0x114>
 8005774:	697b      	ldr	r3, [r7, #20]
 8005776:	2b01      	cmp	r3, #1
 8005778:	d056      	beq.n	8005828 <HAL_RCC_GetSysClockFreq+0x1c0>
 800577a:	e099      	b.n	80058b0 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800577c:	4b6f      	ldr	r3, [pc, #444]	; (800593c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f003 0320 	and.w	r3, r3, #32
 8005784:	2b00      	cmp	r3, #0
 8005786:	d02d      	beq.n	80057e4 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005788:	4b6c      	ldr	r3, [pc, #432]	; (800593c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	08db      	lsrs	r3, r3, #3
 800578e:	f003 0303 	and.w	r3, r3, #3
 8005792:	4a6b      	ldr	r2, [pc, #428]	; (8005940 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005794:	fa22 f303 	lsr.w	r3, r2, r3
 8005798:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	ee07 3a90 	vmov	s15, r3
 80057a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057a4:	693b      	ldr	r3, [r7, #16]
 80057a6:	ee07 3a90 	vmov	s15, r3
 80057aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80057b2:	4b62      	ldr	r3, [pc, #392]	; (800593c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80057b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057ba:	ee07 3a90 	vmov	s15, r3
 80057be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057c2:	ed97 6a02 	vldr	s12, [r7, #8]
 80057c6:	eddf 5a61 	vldr	s11, [pc, #388]	; 800594c <HAL_RCC_GetSysClockFreq+0x2e4>
 80057ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80057ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80057d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80057d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80057da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057de:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80057e2:	e087      	b.n	80058f4 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80057e4:	693b      	ldr	r3, [r7, #16]
 80057e6:	ee07 3a90 	vmov	s15, r3
 80057ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057ee:	eddf 6a58 	vldr	s13, [pc, #352]	; 8005950 <HAL_RCC_GetSysClockFreq+0x2e8>
 80057f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80057f6:	4b51      	ldr	r3, [pc, #324]	; (800593c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80057f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057fe:	ee07 3a90 	vmov	s15, r3
 8005802:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005806:	ed97 6a02 	vldr	s12, [r7, #8]
 800580a:	eddf 5a50 	vldr	s11, [pc, #320]	; 800594c <HAL_RCC_GetSysClockFreq+0x2e4>
 800580e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005812:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005816:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800581a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800581e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005822:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005826:	e065      	b.n	80058f4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005828:	693b      	ldr	r3, [r7, #16]
 800582a:	ee07 3a90 	vmov	s15, r3
 800582e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005832:	eddf 6a48 	vldr	s13, [pc, #288]	; 8005954 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005836:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800583a:	4b40      	ldr	r3, [pc, #256]	; (800593c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800583c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800583e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005842:	ee07 3a90 	vmov	s15, r3
 8005846:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800584a:	ed97 6a02 	vldr	s12, [r7, #8]
 800584e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800594c <HAL_RCC_GetSysClockFreq+0x2e4>
 8005852:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005856:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800585a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800585e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005862:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005866:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800586a:	e043      	b.n	80058f4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800586c:	693b      	ldr	r3, [r7, #16]
 800586e:	ee07 3a90 	vmov	s15, r3
 8005872:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005876:	eddf 6a38 	vldr	s13, [pc, #224]	; 8005958 <HAL_RCC_GetSysClockFreq+0x2f0>
 800587a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800587e:	4b2f      	ldr	r3, [pc, #188]	; (800593c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005882:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005886:	ee07 3a90 	vmov	s15, r3
 800588a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800588e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005892:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800594c <HAL_RCC_GetSysClockFreq+0x2e4>
 8005896:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800589a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800589e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80058a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80058a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058aa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80058ae:	e021      	b.n	80058f4 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80058b0:	693b      	ldr	r3, [r7, #16]
 80058b2:	ee07 3a90 	vmov	s15, r3
 80058b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058ba:	eddf 6a26 	vldr	s13, [pc, #152]	; 8005954 <HAL_RCC_GetSysClockFreq+0x2ec>
 80058be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80058c2:	4b1e      	ldr	r3, [pc, #120]	; (800593c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80058c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058ca:	ee07 3a90 	vmov	s15, r3
 80058ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058d2:	ed97 6a02 	vldr	s12, [r7, #8]
 80058d6:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800594c <HAL_RCC_GetSysClockFreq+0x2e4>
 80058da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80058de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80058e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80058e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80058ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058ee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80058f2:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80058f4:	4b11      	ldr	r3, [pc, #68]	; (800593c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80058f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058f8:	0a5b      	lsrs	r3, r3, #9
 80058fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80058fe:	3301      	adds	r3, #1
 8005900:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	ee07 3a90 	vmov	s15, r3
 8005908:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800590c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005910:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005914:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005918:	ee17 3a90 	vmov	r3, s15
 800591c:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800591e:	e005      	b.n	800592c <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8005920:	2300      	movs	r3, #0
 8005922:	61bb      	str	r3, [r7, #24]
    break;
 8005924:	e002      	b.n	800592c <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8005926:	4b07      	ldr	r3, [pc, #28]	; (8005944 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005928:	61bb      	str	r3, [r7, #24]
    break;
 800592a:	bf00      	nop
  }

  return sysclockfreq;
 800592c:	69bb      	ldr	r3, [r7, #24]
}
 800592e:	4618      	mov	r0, r3
 8005930:	3724      	adds	r7, #36	; 0x24
 8005932:	46bd      	mov	sp, r7
 8005934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005938:	4770      	bx	lr
 800593a:	bf00      	nop
 800593c:	58024400 	.word	0x58024400
 8005940:	03d09000 	.word	0x03d09000
 8005944:	003d0900 	.word	0x003d0900
 8005948:	007a1200 	.word	0x007a1200
 800594c:	46000000 	.word	0x46000000
 8005950:	4c742400 	.word	0x4c742400
 8005954:	4a742400 	.word	0x4a742400
 8005958:	4af42400 	.word	0x4af42400

0800595c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800595c:	b580      	push	{r7, lr}
 800595e:	b082      	sub	sp, #8
 8005960:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005962:	f7ff fe81 	bl	8005668 <HAL_RCC_GetSysClockFreq>
 8005966:	4602      	mov	r2, r0
 8005968:	4b10      	ldr	r3, [pc, #64]	; (80059ac <HAL_RCC_GetHCLKFreq+0x50>)
 800596a:	699b      	ldr	r3, [r3, #24]
 800596c:	0a1b      	lsrs	r3, r3, #8
 800596e:	f003 030f 	and.w	r3, r3, #15
 8005972:	490f      	ldr	r1, [pc, #60]	; (80059b0 <HAL_RCC_GetHCLKFreq+0x54>)
 8005974:	5ccb      	ldrb	r3, [r1, r3]
 8005976:	f003 031f 	and.w	r3, r3, #31
 800597a:	fa22 f303 	lsr.w	r3, r2, r3
 800597e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005980:	4b0a      	ldr	r3, [pc, #40]	; (80059ac <HAL_RCC_GetHCLKFreq+0x50>)
 8005982:	699b      	ldr	r3, [r3, #24]
 8005984:	f003 030f 	and.w	r3, r3, #15
 8005988:	4a09      	ldr	r2, [pc, #36]	; (80059b0 <HAL_RCC_GetHCLKFreq+0x54>)
 800598a:	5cd3      	ldrb	r3, [r2, r3]
 800598c:	f003 031f 	and.w	r3, r3, #31
 8005990:	687a      	ldr	r2, [r7, #4]
 8005992:	fa22 f303 	lsr.w	r3, r2, r3
 8005996:	4a07      	ldr	r2, [pc, #28]	; (80059b4 <HAL_RCC_GetHCLKFreq+0x58>)
 8005998:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800599a:	4a07      	ldr	r2, [pc, #28]	; (80059b8 <HAL_RCC_GetHCLKFreq+0x5c>)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80059a0:	4b04      	ldr	r3, [pc, #16]	; (80059b4 <HAL_RCC_GetHCLKFreq+0x58>)
 80059a2:	681b      	ldr	r3, [r3, #0]
}
 80059a4:	4618      	mov	r0, r3
 80059a6:	3708      	adds	r7, #8
 80059a8:	46bd      	mov	sp, r7
 80059aa:	bd80      	pop	{r7, pc}
 80059ac:	58024400 	.word	0x58024400
 80059b0:	0800bfa8 	.word	0x0800bfa8
 80059b4:	24000404 	.word	0x24000404
 80059b8:	24000400 	.word	0x24000400

080059bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80059bc:	b580      	push	{r7, lr}
 80059be:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80059c0:	f7ff ffcc 	bl	800595c <HAL_RCC_GetHCLKFreq>
 80059c4:	4602      	mov	r2, r0
 80059c6:	4b06      	ldr	r3, [pc, #24]	; (80059e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80059c8:	69db      	ldr	r3, [r3, #28]
 80059ca:	091b      	lsrs	r3, r3, #4
 80059cc:	f003 0307 	and.w	r3, r3, #7
 80059d0:	4904      	ldr	r1, [pc, #16]	; (80059e4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80059d2:	5ccb      	ldrb	r3, [r1, r3]
 80059d4:	f003 031f 	and.w	r3, r3, #31
 80059d8:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80059dc:	4618      	mov	r0, r3
 80059de:	bd80      	pop	{r7, pc}
 80059e0:	58024400 	.word	0x58024400
 80059e4:	0800bfa8 	.word	0x0800bfa8

080059e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80059ec:	f7ff ffb6 	bl	800595c <HAL_RCC_GetHCLKFreq>
 80059f0:	4602      	mov	r2, r0
 80059f2:	4b06      	ldr	r3, [pc, #24]	; (8005a0c <HAL_RCC_GetPCLK2Freq+0x24>)
 80059f4:	69db      	ldr	r3, [r3, #28]
 80059f6:	0a1b      	lsrs	r3, r3, #8
 80059f8:	f003 0307 	and.w	r3, r3, #7
 80059fc:	4904      	ldr	r1, [pc, #16]	; (8005a10 <HAL_RCC_GetPCLK2Freq+0x28>)
 80059fe:	5ccb      	ldrb	r3, [r1, r3]
 8005a00:	f003 031f 	and.w	r3, r3, #31
 8005a04:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8005a08:	4618      	mov	r0, r3
 8005a0a:	bd80      	pop	{r7, pc}
 8005a0c:	58024400 	.word	0x58024400
 8005a10:	0800bfa8 	.word	0x0800bfa8

08005a14 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005a14:	b580      	push	{r7, lr}
 8005a16:	b086      	sub	sp, #24
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005a20:	2300      	movs	r3, #0
 8005a22:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d03f      	beq.n	8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a34:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005a38:	d02a      	beq.n	8005a90 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8005a3a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005a3e:	d824      	bhi.n	8005a8a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005a40:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005a44:	d018      	beq.n	8005a78 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005a46:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005a4a:	d81e      	bhi.n	8005a8a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d003      	beq.n	8005a58 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005a50:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005a54:	d007      	beq.n	8005a66 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005a56:	e018      	b.n	8005a8a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a58:	4bab      	ldr	r3, [pc, #684]	; (8005d08 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a5c:	4aaa      	ldr	r2, [pc, #680]	; (8005d08 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005a5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a62:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005a64:	e015      	b.n	8005a92 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	3304      	adds	r3, #4
 8005a6a:	2102      	movs	r1, #2
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	f001 fff3 	bl	8007a58 <RCCEx_PLL2_Config>
 8005a72:	4603      	mov	r3, r0
 8005a74:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005a76:	e00c      	b.n	8005a92 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	3324      	adds	r3, #36	; 0x24
 8005a7c:	2102      	movs	r1, #2
 8005a7e:	4618      	mov	r0, r3
 8005a80:	f002 f89c 	bl	8007bbc <RCCEx_PLL3_Config>
 8005a84:	4603      	mov	r3, r0
 8005a86:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005a88:	e003      	b.n	8005a92 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005a8a:	2301      	movs	r3, #1
 8005a8c:	75fb      	strb	r3, [r7, #23]
      break;
 8005a8e:	e000      	b.n	8005a92 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005a90:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005a92:	7dfb      	ldrb	r3, [r7, #23]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d109      	bne.n	8005aac <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005a98:	4b9b      	ldr	r3, [pc, #620]	; (8005d08 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005a9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a9c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005aa4:	4998      	ldr	r1, [pc, #608]	; (8005d08 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005aa6:	4313      	orrs	r3, r2
 8005aa8:	650b      	str	r3, [r1, #80]	; 0x50
 8005aaa:	e001      	b.n	8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005aac:	7dfb      	ldrb	r3, [r7, #23]
 8005aae:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d03d      	beq.n	8005b38 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ac0:	2b04      	cmp	r3, #4
 8005ac2:	d826      	bhi.n	8005b12 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8005ac4:	a201      	add	r2, pc, #4	; (adr r2, 8005acc <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8005ac6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005aca:	bf00      	nop
 8005acc:	08005ae1 	.word	0x08005ae1
 8005ad0:	08005aef 	.word	0x08005aef
 8005ad4:	08005b01 	.word	0x08005b01
 8005ad8:	08005b19 	.word	0x08005b19
 8005adc:	08005b19 	.word	0x08005b19
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ae0:	4b89      	ldr	r3, [pc, #548]	; (8005d08 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005ae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ae4:	4a88      	ldr	r2, [pc, #544]	; (8005d08 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005ae6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005aea:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005aec:	e015      	b.n	8005b1a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	3304      	adds	r3, #4
 8005af2:	2100      	movs	r1, #0
 8005af4:	4618      	mov	r0, r3
 8005af6:	f001 ffaf 	bl	8007a58 <RCCEx_PLL2_Config>
 8005afa:	4603      	mov	r3, r0
 8005afc:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005afe:	e00c      	b.n	8005b1a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	3324      	adds	r3, #36	; 0x24
 8005b04:	2100      	movs	r1, #0
 8005b06:	4618      	mov	r0, r3
 8005b08:	f002 f858 	bl	8007bbc <RCCEx_PLL3_Config>
 8005b0c:	4603      	mov	r3, r0
 8005b0e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005b10:	e003      	b.n	8005b1a <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005b12:	2301      	movs	r3, #1
 8005b14:	75fb      	strb	r3, [r7, #23]
      break;
 8005b16:	e000      	b.n	8005b1a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8005b18:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005b1a:	7dfb      	ldrb	r3, [r7, #23]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d109      	bne.n	8005b34 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005b20:	4b79      	ldr	r3, [pc, #484]	; (8005d08 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005b22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b24:	f023 0207 	bic.w	r2, r3, #7
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b2c:	4976      	ldr	r1, [pc, #472]	; (8005d08 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005b2e:	4313      	orrs	r3, r2
 8005b30:	650b      	str	r3, [r1, #80]	; 0x50
 8005b32:	e001      	b.n	8005b38 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b34:	7dfb      	ldrb	r3, [r7, #23]
 8005b36:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d042      	beq.n	8005bca <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b48:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b4c:	d02b      	beq.n	8005ba6 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8005b4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b52:	d825      	bhi.n	8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8005b54:	2bc0      	cmp	r3, #192	; 0xc0
 8005b56:	d028      	beq.n	8005baa <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005b58:	2bc0      	cmp	r3, #192	; 0xc0
 8005b5a:	d821      	bhi.n	8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8005b5c:	2b80      	cmp	r3, #128	; 0x80
 8005b5e:	d016      	beq.n	8005b8e <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8005b60:	2b80      	cmp	r3, #128	; 0x80
 8005b62:	d81d      	bhi.n	8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d002      	beq.n	8005b6e <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8005b68:	2b40      	cmp	r3, #64	; 0x40
 8005b6a:	d007      	beq.n	8005b7c <HAL_RCCEx_PeriphCLKConfig+0x168>
 8005b6c:	e018      	b.n	8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b6e:	4b66      	ldr	r3, [pc, #408]	; (8005d08 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005b70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b72:	4a65      	ldr	r2, [pc, #404]	; (8005d08 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005b74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005b78:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8005b7a:	e017      	b.n	8005bac <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	3304      	adds	r3, #4
 8005b80:	2100      	movs	r1, #0
 8005b82:	4618      	mov	r0, r3
 8005b84:	f001 ff68 	bl	8007a58 <RCCEx_PLL2_Config>
 8005b88:	4603      	mov	r3, r0
 8005b8a:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8005b8c:	e00e      	b.n	8005bac <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	3324      	adds	r3, #36	; 0x24
 8005b92:	2100      	movs	r1, #0
 8005b94:	4618      	mov	r0, r3
 8005b96:	f002 f811 	bl	8007bbc <RCCEx_PLL3_Config>
 8005b9a:	4603      	mov	r3, r0
 8005b9c:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8005b9e:	e005      	b.n	8005bac <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005ba0:	2301      	movs	r3, #1
 8005ba2:	75fb      	strb	r3, [r7, #23]
      break;
 8005ba4:	e002      	b.n	8005bac <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8005ba6:	bf00      	nop
 8005ba8:	e000      	b.n	8005bac <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8005baa:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005bac:	7dfb      	ldrb	r3, [r7, #23]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d109      	bne.n	8005bc6 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8005bb2:	4b55      	ldr	r3, [pc, #340]	; (8005d08 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005bb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005bb6:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bbe:	4952      	ldr	r1, [pc, #328]	; (8005d08 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005bc0:	4313      	orrs	r3, r2
 8005bc2:	650b      	str	r3, [r1, #80]	; 0x50
 8005bc4:	e001      	b.n	8005bca <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bc6:	7dfb      	ldrb	r3, [r7, #23]
 8005bc8:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d049      	beq.n	8005c6a <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005bdc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005be0:	d030      	beq.n	8005c44 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8005be2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005be6:	d82a      	bhi.n	8005c3e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005be8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005bec:	d02c      	beq.n	8005c48 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8005bee:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005bf2:	d824      	bhi.n	8005c3e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005bf4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005bf8:	d018      	beq.n	8005c2c <HAL_RCCEx_PeriphCLKConfig+0x218>
 8005bfa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005bfe:	d81e      	bhi.n	8005c3e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d003      	beq.n	8005c0c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8005c04:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005c08:	d007      	beq.n	8005c1a <HAL_RCCEx_PeriphCLKConfig+0x206>
 8005c0a:	e018      	b.n	8005c3e <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c0c:	4b3e      	ldr	r3, [pc, #248]	; (8005d08 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c10:	4a3d      	ldr	r2, [pc, #244]	; (8005d08 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005c12:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005c16:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005c18:	e017      	b.n	8005c4a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	3304      	adds	r3, #4
 8005c1e:	2100      	movs	r1, #0
 8005c20:	4618      	mov	r0, r3
 8005c22:	f001 ff19 	bl	8007a58 <RCCEx_PLL2_Config>
 8005c26:	4603      	mov	r3, r0
 8005c28:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8005c2a:	e00e      	b.n	8005c4a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	3324      	adds	r3, #36	; 0x24
 8005c30:	2100      	movs	r1, #0
 8005c32:	4618      	mov	r0, r3
 8005c34:	f001 ffc2 	bl	8007bbc <RCCEx_PLL3_Config>
 8005c38:	4603      	mov	r3, r0
 8005c3a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005c3c:	e005      	b.n	8005c4a <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8005c3e:	2301      	movs	r3, #1
 8005c40:	75fb      	strb	r3, [r7, #23]
      break;
 8005c42:	e002      	b.n	8005c4a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8005c44:	bf00      	nop
 8005c46:	e000      	b.n	8005c4a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8005c48:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005c4a:	7dfb      	ldrb	r3, [r7, #23]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d10a      	bne.n	8005c66 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005c50:	4b2d      	ldr	r3, [pc, #180]	; (8005d08 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005c52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c54:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005c5e:	492a      	ldr	r1, [pc, #168]	; (8005d08 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005c60:	4313      	orrs	r3, r2
 8005c62:	658b      	str	r3, [r1, #88]	; 0x58
 8005c64:	e001      	b.n	8005c6a <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c66:	7dfb      	ldrb	r3, [r7, #23]
 8005c68:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d04c      	beq.n	8005d10 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005c7c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005c80:	d030      	beq.n	8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8005c82:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005c86:	d82a      	bhi.n	8005cde <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8005c88:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005c8c:	d02c      	beq.n	8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8005c8e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005c92:	d824      	bhi.n	8005cde <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8005c94:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005c98:	d018      	beq.n	8005ccc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8005c9a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005c9e:	d81e      	bhi.n	8005cde <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d003      	beq.n	8005cac <HAL_RCCEx_PeriphCLKConfig+0x298>
 8005ca4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005ca8:	d007      	beq.n	8005cba <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8005caa:	e018      	b.n	8005cde <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005cac:	4b16      	ldr	r3, [pc, #88]	; (8005d08 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005cae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cb0:	4a15      	ldr	r2, [pc, #84]	; (8005d08 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005cb2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005cb6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005cb8:	e017      	b.n	8005cea <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	3304      	adds	r3, #4
 8005cbe:	2100      	movs	r1, #0
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	f001 fec9 	bl	8007a58 <RCCEx_PLL2_Config>
 8005cc6:	4603      	mov	r3, r0
 8005cc8:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8005cca:	e00e      	b.n	8005cea <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	3324      	adds	r3, #36	; 0x24
 8005cd0:	2100      	movs	r1, #0
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	f001 ff72 	bl	8007bbc <RCCEx_PLL3_Config>
 8005cd8:	4603      	mov	r3, r0
 8005cda:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005cdc:	e005      	b.n	8005cea <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8005cde:	2301      	movs	r3, #1
 8005ce0:	75fb      	strb	r3, [r7, #23]
      break;
 8005ce2:	e002      	b.n	8005cea <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8005ce4:	bf00      	nop
 8005ce6:	e000      	b.n	8005cea <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8005ce8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005cea:	7dfb      	ldrb	r3, [r7, #23]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d10d      	bne.n	8005d0c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005cf0:	4b05      	ldr	r3, [pc, #20]	; (8005d08 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005cf2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cf4:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005cfe:	4902      	ldr	r1, [pc, #8]	; (8005d08 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005d00:	4313      	orrs	r3, r2
 8005d02:	658b      	str	r3, [r1, #88]	; 0x58
 8005d04:	e004      	b.n	8005d10 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8005d06:	bf00      	nop
 8005d08:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d0c:	7dfb      	ldrb	r3, [r7, #23]
 8005d0e:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d032      	beq.n	8005d82 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d20:	2b30      	cmp	r3, #48	; 0x30
 8005d22:	d01c      	beq.n	8005d5e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8005d24:	2b30      	cmp	r3, #48	; 0x30
 8005d26:	d817      	bhi.n	8005d58 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8005d28:	2b20      	cmp	r3, #32
 8005d2a:	d00c      	beq.n	8005d46 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8005d2c:	2b20      	cmp	r3, #32
 8005d2e:	d813      	bhi.n	8005d58 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d016      	beq.n	8005d62 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8005d34:	2b10      	cmp	r3, #16
 8005d36:	d10f      	bne.n	8005d58 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d38:	4baf      	ldr	r3, [pc, #700]	; (8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005d3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d3c:	4aae      	ldr	r2, [pc, #696]	; (8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005d3e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005d42:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8005d44:	e00e      	b.n	8005d64 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	3304      	adds	r3, #4
 8005d4a:	2102      	movs	r1, #2
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	f001 fe83 	bl	8007a58 <RCCEx_PLL2_Config>
 8005d52:	4603      	mov	r3, r0
 8005d54:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8005d56:	e005      	b.n	8005d64 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005d58:	2301      	movs	r3, #1
 8005d5a:	75fb      	strb	r3, [r7, #23]
      break;
 8005d5c:	e002      	b.n	8005d64 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8005d5e:	bf00      	nop
 8005d60:	e000      	b.n	8005d64 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8005d62:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005d64:	7dfb      	ldrb	r3, [r7, #23]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d109      	bne.n	8005d7e <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005d6a:	4ba3      	ldr	r3, [pc, #652]	; (8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005d6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d6e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d76:	49a0      	ldr	r1, [pc, #640]	; (8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005d78:	4313      	orrs	r3, r2
 8005d7a:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005d7c:	e001      	b.n	8005d82 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d7e:	7dfb      	ldrb	r3, [r7, #23]
 8005d80:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d047      	beq.n	8005e1e <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d92:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005d96:	d030      	beq.n	8005dfa <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8005d98:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005d9c:	d82a      	bhi.n	8005df4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8005d9e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005da2:	d02c      	beq.n	8005dfe <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8005da4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005da8:	d824      	bhi.n	8005df4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8005daa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005dae:	d018      	beq.n	8005de2 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8005db0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005db4:	d81e      	bhi.n	8005df4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d003      	beq.n	8005dc2 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8005dba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005dbe:	d007      	beq.n	8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8005dc0:	e018      	b.n	8005df4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005dc2:	4b8d      	ldr	r3, [pc, #564]	; (8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005dc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dc6:	4a8c      	ldr	r2, [pc, #560]	; (8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005dc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005dcc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005dce:	e017      	b.n	8005e00 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	3304      	adds	r3, #4
 8005dd4:	2100      	movs	r1, #0
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	f001 fe3e 	bl	8007a58 <RCCEx_PLL2_Config>
 8005ddc:	4603      	mov	r3, r0
 8005dde:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005de0:	e00e      	b.n	8005e00 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	3324      	adds	r3, #36	; 0x24
 8005de6:	2100      	movs	r1, #0
 8005de8:	4618      	mov	r0, r3
 8005dea:	f001 fee7 	bl	8007bbc <RCCEx_PLL3_Config>
 8005dee:	4603      	mov	r3, r0
 8005df0:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005df2:	e005      	b.n	8005e00 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005df4:	2301      	movs	r3, #1
 8005df6:	75fb      	strb	r3, [r7, #23]
      break;
 8005df8:	e002      	b.n	8005e00 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8005dfa:	bf00      	nop
 8005dfc:	e000      	b.n	8005e00 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8005dfe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005e00:	7dfb      	ldrb	r3, [r7, #23]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d109      	bne.n	8005e1a <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005e06:	4b7c      	ldr	r3, [pc, #496]	; (8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005e08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e0a:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e12:	4979      	ldr	r1, [pc, #484]	; (8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005e14:	4313      	orrs	r3, r2
 8005e16:	650b      	str	r3, [r1, #80]	; 0x50
 8005e18:	e001      	b.n	8005e1e <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e1a:	7dfb      	ldrb	r3, [r7, #23]
 8005e1c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d049      	beq.n	8005ebe <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e2e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005e32:	d02e      	beq.n	8005e92 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8005e34:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005e38:	d828      	bhi.n	8005e8c <HAL_RCCEx_PeriphCLKConfig+0x478>
 8005e3a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005e3e:	d02a      	beq.n	8005e96 <HAL_RCCEx_PeriphCLKConfig+0x482>
 8005e40:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005e44:	d822      	bhi.n	8005e8c <HAL_RCCEx_PeriphCLKConfig+0x478>
 8005e46:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005e4a:	d026      	beq.n	8005e9a <HAL_RCCEx_PeriphCLKConfig+0x486>
 8005e4c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005e50:	d81c      	bhi.n	8005e8c <HAL_RCCEx_PeriphCLKConfig+0x478>
 8005e52:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005e56:	d010      	beq.n	8005e7a <HAL_RCCEx_PeriphCLKConfig+0x466>
 8005e58:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005e5c:	d816      	bhi.n	8005e8c <HAL_RCCEx_PeriphCLKConfig+0x478>
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d01d      	beq.n	8005e9e <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8005e62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e66:	d111      	bne.n	8005e8c <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	3304      	adds	r3, #4
 8005e6c:	2101      	movs	r1, #1
 8005e6e:	4618      	mov	r0, r3
 8005e70:	f001 fdf2 	bl	8007a58 <RCCEx_PLL2_Config>
 8005e74:	4603      	mov	r3, r0
 8005e76:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8005e78:	e012      	b.n	8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	3324      	adds	r3, #36	; 0x24
 8005e7e:	2101      	movs	r1, #1
 8005e80:	4618      	mov	r0, r3
 8005e82:	f001 fe9b 	bl	8007bbc <RCCEx_PLL3_Config>
 8005e86:	4603      	mov	r3, r0
 8005e88:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8005e8a:	e009      	b.n	8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005e8c:	2301      	movs	r3, #1
 8005e8e:	75fb      	strb	r3, [r7, #23]
      break;
 8005e90:	e006      	b.n	8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8005e92:	bf00      	nop
 8005e94:	e004      	b.n	8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8005e96:	bf00      	nop
 8005e98:	e002      	b.n	8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8005e9a:	bf00      	nop
 8005e9c:	e000      	b.n	8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8005e9e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005ea0:	7dfb      	ldrb	r3, [r7, #23]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d109      	bne.n	8005eba <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005ea6:	4b54      	ldr	r3, [pc, #336]	; (8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005ea8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005eaa:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005eb2:	4951      	ldr	r1, [pc, #324]	; (8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005eb4:	4313      	orrs	r3, r2
 8005eb6:	650b      	str	r3, [r1, #80]	; 0x50
 8005eb8:	e001      	b.n	8005ebe <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005eba:	7dfb      	ldrb	r3, [r7, #23]
 8005ebc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d04b      	beq.n	8005f62 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005ed0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005ed4:	d02e      	beq.n	8005f34 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8005ed6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005eda:	d828      	bhi.n	8005f2e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8005edc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ee0:	d02a      	beq.n	8005f38 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8005ee2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ee6:	d822      	bhi.n	8005f2e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8005ee8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005eec:	d026      	beq.n	8005f3c <HAL_RCCEx_PeriphCLKConfig+0x528>
 8005eee:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005ef2:	d81c      	bhi.n	8005f2e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8005ef4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005ef8:	d010      	beq.n	8005f1c <HAL_RCCEx_PeriphCLKConfig+0x508>
 8005efa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005efe:	d816      	bhi.n	8005f2e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d01d      	beq.n	8005f40 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8005f04:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005f08:	d111      	bne.n	8005f2e <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	3304      	adds	r3, #4
 8005f0e:	2101      	movs	r1, #1
 8005f10:	4618      	mov	r0, r3
 8005f12:	f001 fda1 	bl	8007a58 <RCCEx_PLL2_Config>
 8005f16:	4603      	mov	r3, r0
 8005f18:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8005f1a:	e012      	b.n	8005f42 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	3324      	adds	r3, #36	; 0x24
 8005f20:	2101      	movs	r1, #1
 8005f22:	4618      	mov	r0, r3
 8005f24:	f001 fe4a 	bl	8007bbc <RCCEx_PLL3_Config>
 8005f28:	4603      	mov	r3, r0
 8005f2a:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8005f2c:	e009      	b.n	8005f42 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8005f2e:	2301      	movs	r3, #1
 8005f30:	75fb      	strb	r3, [r7, #23]
      break;
 8005f32:	e006      	b.n	8005f42 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8005f34:	bf00      	nop
 8005f36:	e004      	b.n	8005f42 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8005f38:	bf00      	nop
 8005f3a:	e002      	b.n	8005f42 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8005f3c:	bf00      	nop
 8005f3e:	e000      	b.n	8005f42 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8005f40:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005f42:	7dfb      	ldrb	r3, [r7, #23]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d10a      	bne.n	8005f5e <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005f48:	4b2b      	ldr	r3, [pc, #172]	; (8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005f4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f4c:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005f56:	4928      	ldr	r1, [pc, #160]	; (8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005f58:	4313      	orrs	r3, r2
 8005f5a:	658b      	str	r3, [r1, #88]	; 0x58
 8005f5c:	e001      	b.n	8005f62 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f5e:	7dfb      	ldrb	r3, [r7, #23]
 8005f60:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d02f      	beq.n	8005fce <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f72:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005f76:	d00e      	beq.n	8005f96 <HAL_RCCEx_PeriphCLKConfig+0x582>
 8005f78:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005f7c:	d814      	bhi.n	8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d015      	beq.n	8005fae <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8005f82:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005f86:	d10f      	bne.n	8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005f88:	4b1b      	ldr	r3, [pc, #108]	; (8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f8c:	4a1a      	ldr	r2, [pc, #104]	; (8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005f8e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005f92:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8005f94:	e00c      	b.n	8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	3304      	adds	r3, #4
 8005f9a:	2101      	movs	r1, #1
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	f001 fd5b 	bl	8007a58 <RCCEx_PLL2_Config>
 8005fa2:	4603      	mov	r3, r0
 8005fa4:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8005fa6:	e003      	b.n	8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005fa8:	2301      	movs	r3, #1
 8005faa:	75fb      	strb	r3, [r7, #23]
      break;
 8005fac:	e000      	b.n	8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8005fae:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005fb0:	7dfb      	ldrb	r3, [r7, #23]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d109      	bne.n	8005fca <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005fb6:	4b10      	ldr	r3, [pc, #64]	; (8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005fb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fba:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005fc2:	490d      	ldr	r1, [pc, #52]	; (8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005fc4:	4313      	orrs	r3, r2
 8005fc6:	650b      	str	r3, [r1, #80]	; 0x50
 8005fc8:	e001      	b.n	8005fce <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fca:	7dfb      	ldrb	r3, [r7, #23]
 8005fcc:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d033      	beq.n	8006042 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fde:	2b03      	cmp	r3, #3
 8005fe0:	d81c      	bhi.n	800601c <HAL_RCCEx_PeriphCLKConfig+0x608>
 8005fe2:	a201      	add	r2, pc, #4	; (adr r2, 8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8005fe4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fe8:	08006023 	.word	0x08006023
 8005fec:	08005ffd 	.word	0x08005ffd
 8005ff0:	0800600b 	.word	0x0800600b
 8005ff4:	08006023 	.word	0x08006023
 8005ff8:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ffc:	4bb8      	ldr	r3, [pc, #736]	; (80062e0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006000:	4ab7      	ldr	r2, [pc, #732]	; (80062e0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006002:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006006:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8006008:	e00c      	b.n	8006024 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	3304      	adds	r3, #4
 800600e:	2102      	movs	r1, #2
 8006010:	4618      	mov	r0, r3
 8006012:	f001 fd21 	bl	8007a58 <RCCEx_PLL2_Config>
 8006016:	4603      	mov	r3, r0
 8006018:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800601a:	e003      	b.n	8006024 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800601c:	2301      	movs	r3, #1
 800601e:	75fb      	strb	r3, [r7, #23]
      break;
 8006020:	e000      	b.n	8006024 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8006022:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006024:	7dfb      	ldrb	r3, [r7, #23]
 8006026:	2b00      	cmp	r3, #0
 8006028:	d109      	bne.n	800603e <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800602a:	4bad      	ldr	r3, [pc, #692]	; (80062e0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800602c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800602e:	f023 0203 	bic.w	r2, r3, #3
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006036:	49aa      	ldr	r1, [pc, #680]	; (80062e0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006038:	4313      	orrs	r3, r2
 800603a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800603c:	e001      	b.n	8006042 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800603e:	7dfb      	ldrb	r3, [r7, #23]
 8006040:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800604a:	2b00      	cmp	r3, #0
 800604c:	f000 8086 	beq.w	800615c <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006050:	4ba4      	ldr	r3, [pc, #656]	; (80062e4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	4aa3      	ldr	r2, [pc, #652]	; (80062e4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8006056:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800605a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800605c:	f7fb faba 	bl	80015d4 <HAL_GetTick>
 8006060:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006062:	e009      	b.n	8006078 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006064:	f7fb fab6 	bl	80015d4 <HAL_GetTick>
 8006068:	4602      	mov	r2, r0
 800606a:	693b      	ldr	r3, [r7, #16]
 800606c:	1ad3      	subs	r3, r2, r3
 800606e:	2b64      	cmp	r3, #100	; 0x64
 8006070:	d902      	bls.n	8006078 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8006072:	2303      	movs	r3, #3
 8006074:	75fb      	strb	r3, [r7, #23]
        break;
 8006076:	e005      	b.n	8006084 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006078:	4b9a      	ldr	r3, [pc, #616]	; (80062e4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006080:	2b00      	cmp	r3, #0
 8006082:	d0ef      	beq.n	8006064 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8006084:	7dfb      	ldrb	r3, [r7, #23]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d166      	bne.n	8006158 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800608a:	4b95      	ldr	r3, [pc, #596]	; (80062e0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800608c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006094:	4053      	eors	r3, r2
 8006096:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800609a:	2b00      	cmp	r3, #0
 800609c:	d013      	beq.n	80060c6 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800609e:	4b90      	ldr	r3, [pc, #576]	; (80062e0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80060a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80060a6:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80060a8:	4b8d      	ldr	r3, [pc, #564]	; (80062e0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80060aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060ac:	4a8c      	ldr	r2, [pc, #560]	; (80062e0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80060ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80060b2:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80060b4:	4b8a      	ldr	r3, [pc, #552]	; (80062e0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80060b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060b8:	4a89      	ldr	r2, [pc, #548]	; (80062e0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80060ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80060be:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80060c0:	4a87      	ldr	r2, [pc, #540]	; (80062e0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80060cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80060d0:	d115      	bne.n	80060fe <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060d2:	f7fb fa7f 	bl	80015d4 <HAL_GetTick>
 80060d6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80060d8:	e00b      	b.n	80060f2 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80060da:	f7fb fa7b 	bl	80015d4 <HAL_GetTick>
 80060de:	4602      	mov	r2, r0
 80060e0:	693b      	ldr	r3, [r7, #16]
 80060e2:	1ad3      	subs	r3, r2, r3
 80060e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80060e8:	4293      	cmp	r3, r2
 80060ea:	d902      	bls.n	80060f2 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 80060ec:	2303      	movs	r3, #3
 80060ee:	75fb      	strb	r3, [r7, #23]
            break;
 80060f0:	e005      	b.n	80060fe <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80060f2:	4b7b      	ldr	r3, [pc, #492]	; (80062e0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80060f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060f6:	f003 0302 	and.w	r3, r3, #2
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d0ed      	beq.n	80060da <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 80060fe:	7dfb      	ldrb	r3, [r7, #23]
 8006100:	2b00      	cmp	r3, #0
 8006102:	d126      	bne.n	8006152 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800610a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800610e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006112:	d10d      	bne.n	8006130 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8006114:	4b72      	ldr	r3, [pc, #456]	; (80062e0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006116:	691b      	ldr	r3, [r3, #16]
 8006118:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006122:	0919      	lsrs	r1, r3, #4
 8006124:	4b70      	ldr	r3, [pc, #448]	; (80062e8 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8006126:	400b      	ands	r3, r1
 8006128:	496d      	ldr	r1, [pc, #436]	; (80062e0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800612a:	4313      	orrs	r3, r2
 800612c:	610b      	str	r3, [r1, #16]
 800612e:	e005      	b.n	800613c <HAL_RCCEx_PeriphCLKConfig+0x728>
 8006130:	4b6b      	ldr	r3, [pc, #428]	; (80062e0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006132:	691b      	ldr	r3, [r3, #16]
 8006134:	4a6a      	ldr	r2, [pc, #424]	; (80062e0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006136:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800613a:	6113      	str	r3, [r2, #16]
 800613c:	4b68      	ldr	r3, [pc, #416]	; (80062e0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800613e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006146:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800614a:	4965      	ldr	r1, [pc, #404]	; (80062e0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800614c:	4313      	orrs	r3, r2
 800614e:	670b      	str	r3, [r1, #112]	; 0x70
 8006150:	e004      	b.n	800615c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006152:	7dfb      	ldrb	r3, [r7, #23]
 8006154:	75bb      	strb	r3, [r7, #22]
 8006156:	e001      	b.n	800615c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006158:	7dfb      	ldrb	r3, [r7, #23]
 800615a:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	f003 0301 	and.w	r3, r3, #1
 8006164:	2b00      	cmp	r3, #0
 8006166:	d07e      	beq.n	8006266 <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800616c:	2b28      	cmp	r3, #40	; 0x28
 800616e:	d867      	bhi.n	8006240 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8006170:	a201      	add	r2, pc, #4	; (adr r2, 8006178 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8006172:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006176:	bf00      	nop
 8006178:	08006247 	.word	0x08006247
 800617c:	08006241 	.word	0x08006241
 8006180:	08006241 	.word	0x08006241
 8006184:	08006241 	.word	0x08006241
 8006188:	08006241 	.word	0x08006241
 800618c:	08006241 	.word	0x08006241
 8006190:	08006241 	.word	0x08006241
 8006194:	08006241 	.word	0x08006241
 8006198:	0800621d 	.word	0x0800621d
 800619c:	08006241 	.word	0x08006241
 80061a0:	08006241 	.word	0x08006241
 80061a4:	08006241 	.word	0x08006241
 80061a8:	08006241 	.word	0x08006241
 80061ac:	08006241 	.word	0x08006241
 80061b0:	08006241 	.word	0x08006241
 80061b4:	08006241 	.word	0x08006241
 80061b8:	0800622f 	.word	0x0800622f
 80061bc:	08006241 	.word	0x08006241
 80061c0:	08006241 	.word	0x08006241
 80061c4:	08006241 	.word	0x08006241
 80061c8:	08006241 	.word	0x08006241
 80061cc:	08006241 	.word	0x08006241
 80061d0:	08006241 	.word	0x08006241
 80061d4:	08006241 	.word	0x08006241
 80061d8:	08006247 	.word	0x08006247
 80061dc:	08006241 	.word	0x08006241
 80061e0:	08006241 	.word	0x08006241
 80061e4:	08006241 	.word	0x08006241
 80061e8:	08006241 	.word	0x08006241
 80061ec:	08006241 	.word	0x08006241
 80061f0:	08006241 	.word	0x08006241
 80061f4:	08006241 	.word	0x08006241
 80061f8:	08006247 	.word	0x08006247
 80061fc:	08006241 	.word	0x08006241
 8006200:	08006241 	.word	0x08006241
 8006204:	08006241 	.word	0x08006241
 8006208:	08006241 	.word	0x08006241
 800620c:	08006241 	.word	0x08006241
 8006210:	08006241 	.word	0x08006241
 8006214:	08006241 	.word	0x08006241
 8006218:	08006247 	.word	0x08006247
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	3304      	adds	r3, #4
 8006220:	2101      	movs	r1, #1
 8006222:	4618      	mov	r0, r3
 8006224:	f001 fc18 	bl	8007a58 <RCCEx_PLL2_Config>
 8006228:	4603      	mov	r3, r0
 800622a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800622c:	e00c      	b.n	8006248 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	3324      	adds	r3, #36	; 0x24
 8006232:	2101      	movs	r1, #1
 8006234:	4618      	mov	r0, r3
 8006236:	f001 fcc1 	bl	8007bbc <RCCEx_PLL3_Config>
 800623a:	4603      	mov	r3, r0
 800623c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800623e:	e003      	b.n	8006248 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006240:	2301      	movs	r3, #1
 8006242:	75fb      	strb	r3, [r7, #23]
      break;
 8006244:	e000      	b.n	8006248 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 8006246:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006248:	7dfb      	ldrb	r3, [r7, #23]
 800624a:	2b00      	cmp	r3, #0
 800624c:	d109      	bne.n	8006262 <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800624e:	4b24      	ldr	r3, [pc, #144]	; (80062e0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006250:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006252:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800625a:	4921      	ldr	r1, [pc, #132]	; (80062e0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800625c:	4313      	orrs	r3, r2
 800625e:	654b      	str	r3, [r1, #84]	; 0x54
 8006260:	e001      	b.n	8006266 <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006262:	7dfb      	ldrb	r3, [r7, #23]
 8006264:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	f003 0302 	and.w	r3, r3, #2
 800626e:	2b00      	cmp	r3, #0
 8006270:	d03e      	beq.n	80062f0 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006276:	2b05      	cmp	r3, #5
 8006278:	d820      	bhi.n	80062bc <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 800627a:	a201      	add	r2, pc, #4	; (adr r2, 8006280 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 800627c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006280:	080062c3 	.word	0x080062c3
 8006284:	08006299 	.word	0x08006299
 8006288:	080062ab 	.word	0x080062ab
 800628c:	080062c3 	.word	0x080062c3
 8006290:	080062c3 	.word	0x080062c3
 8006294:	080062c3 	.word	0x080062c3
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	3304      	adds	r3, #4
 800629c:	2101      	movs	r1, #1
 800629e:	4618      	mov	r0, r3
 80062a0:	f001 fbda 	bl	8007a58 <RCCEx_PLL2_Config>
 80062a4:	4603      	mov	r3, r0
 80062a6:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80062a8:	e00c      	b.n	80062c4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	3324      	adds	r3, #36	; 0x24
 80062ae:	2101      	movs	r1, #1
 80062b0:	4618      	mov	r0, r3
 80062b2:	f001 fc83 	bl	8007bbc <RCCEx_PLL3_Config>
 80062b6:	4603      	mov	r3, r0
 80062b8:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80062ba:	e003      	b.n	80062c4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80062bc:	2301      	movs	r3, #1
 80062be:	75fb      	strb	r3, [r7, #23]
      break;
 80062c0:	e000      	b.n	80062c4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 80062c2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80062c4:	7dfb      	ldrb	r3, [r7, #23]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d110      	bne.n	80062ec <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80062ca:	4b05      	ldr	r3, [pc, #20]	; (80062e0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80062cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062ce:	f023 0207 	bic.w	r2, r3, #7
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80062d6:	4902      	ldr	r1, [pc, #8]	; (80062e0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80062d8:	4313      	orrs	r3, r2
 80062da:	654b      	str	r3, [r1, #84]	; 0x54
 80062dc:	e008      	b.n	80062f0 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 80062de:	bf00      	nop
 80062e0:	58024400 	.word	0x58024400
 80062e4:	58024800 	.word	0x58024800
 80062e8:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062ec:	7dfb      	ldrb	r3, [r7, #23]
 80062ee:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	f003 0304 	and.w	r3, r3, #4
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d039      	beq.n	8006370 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006302:	2b05      	cmp	r3, #5
 8006304:	d820      	bhi.n	8006348 <HAL_RCCEx_PeriphCLKConfig+0x934>
 8006306:	a201      	add	r2, pc, #4	; (adr r2, 800630c <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8006308:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800630c:	0800634f 	.word	0x0800634f
 8006310:	08006325 	.word	0x08006325
 8006314:	08006337 	.word	0x08006337
 8006318:	0800634f 	.word	0x0800634f
 800631c:	0800634f 	.word	0x0800634f
 8006320:	0800634f 	.word	0x0800634f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	3304      	adds	r3, #4
 8006328:	2101      	movs	r1, #1
 800632a:	4618      	mov	r0, r3
 800632c:	f001 fb94 	bl	8007a58 <RCCEx_PLL2_Config>
 8006330:	4603      	mov	r3, r0
 8006332:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006334:	e00c      	b.n	8006350 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	3324      	adds	r3, #36	; 0x24
 800633a:	2101      	movs	r1, #1
 800633c:	4618      	mov	r0, r3
 800633e:	f001 fc3d 	bl	8007bbc <RCCEx_PLL3_Config>
 8006342:	4603      	mov	r3, r0
 8006344:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006346:	e003      	b.n	8006350 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006348:	2301      	movs	r3, #1
 800634a:	75fb      	strb	r3, [r7, #23]
      break;
 800634c:	e000      	b.n	8006350 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 800634e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006350:	7dfb      	ldrb	r3, [r7, #23]
 8006352:	2b00      	cmp	r3, #0
 8006354:	d10a      	bne.n	800636c <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006356:	4bb7      	ldr	r3, [pc, #732]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006358:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800635a:	f023 0207 	bic.w	r2, r3, #7
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006364:	49b3      	ldr	r1, [pc, #716]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006366:	4313      	orrs	r3, r2
 8006368:	658b      	str	r3, [r1, #88]	; 0x58
 800636a:	e001      	b.n	8006370 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800636c:	7dfb      	ldrb	r3, [r7, #23]
 800636e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f003 0320 	and.w	r3, r3, #32
 8006378:	2b00      	cmp	r3, #0
 800637a:	d04b      	beq.n	8006414 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006382:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006386:	d02e      	beq.n	80063e6 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8006388:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800638c:	d828      	bhi.n	80063e0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800638e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006392:	d02a      	beq.n	80063ea <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8006394:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006398:	d822      	bhi.n	80063e0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800639a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800639e:	d026      	beq.n	80063ee <HAL_RCCEx_PeriphCLKConfig+0x9da>
 80063a0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80063a4:	d81c      	bhi.n	80063e0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80063a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80063aa:	d010      	beq.n	80063ce <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 80063ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80063b0:	d816      	bhi.n	80063e0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d01d      	beq.n	80063f2 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 80063b6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80063ba:	d111      	bne.n	80063e0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	3304      	adds	r3, #4
 80063c0:	2100      	movs	r1, #0
 80063c2:	4618      	mov	r0, r3
 80063c4:	f001 fb48 	bl	8007a58 <RCCEx_PLL2_Config>
 80063c8:	4603      	mov	r3, r0
 80063ca:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80063cc:	e012      	b.n	80063f4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	3324      	adds	r3, #36	; 0x24
 80063d2:	2102      	movs	r1, #2
 80063d4:	4618      	mov	r0, r3
 80063d6:	f001 fbf1 	bl	8007bbc <RCCEx_PLL3_Config>
 80063da:	4603      	mov	r3, r0
 80063dc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80063de:	e009      	b.n	80063f4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80063e0:	2301      	movs	r3, #1
 80063e2:	75fb      	strb	r3, [r7, #23]
      break;
 80063e4:	e006      	b.n	80063f4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80063e6:	bf00      	nop
 80063e8:	e004      	b.n	80063f4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80063ea:	bf00      	nop
 80063ec:	e002      	b.n	80063f4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80063ee:	bf00      	nop
 80063f0:	e000      	b.n	80063f4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80063f2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80063f4:	7dfb      	ldrb	r3, [r7, #23]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d10a      	bne.n	8006410 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80063fa:	4b8e      	ldr	r3, [pc, #568]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80063fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063fe:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006408:	498a      	ldr	r1, [pc, #552]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800640a:	4313      	orrs	r3, r2
 800640c:	654b      	str	r3, [r1, #84]	; 0x54
 800640e:	e001      	b.n	8006414 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006410:	7dfb      	ldrb	r3, [r7, #23]
 8006412:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800641c:	2b00      	cmp	r3, #0
 800641e:	d04b      	beq.n	80064b8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006426:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800642a:	d02e      	beq.n	800648a <HAL_RCCEx_PeriphCLKConfig+0xa76>
 800642c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006430:	d828      	bhi.n	8006484 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8006432:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006436:	d02a      	beq.n	800648e <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8006438:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800643c:	d822      	bhi.n	8006484 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800643e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006442:	d026      	beq.n	8006492 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8006444:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006448:	d81c      	bhi.n	8006484 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800644a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800644e:	d010      	beq.n	8006472 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8006450:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006454:	d816      	bhi.n	8006484 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8006456:	2b00      	cmp	r3, #0
 8006458:	d01d      	beq.n	8006496 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800645a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800645e:	d111      	bne.n	8006484 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	3304      	adds	r3, #4
 8006464:	2100      	movs	r1, #0
 8006466:	4618      	mov	r0, r3
 8006468:	f001 faf6 	bl	8007a58 <RCCEx_PLL2_Config>
 800646c:	4603      	mov	r3, r0
 800646e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006470:	e012      	b.n	8006498 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	3324      	adds	r3, #36	; 0x24
 8006476:	2102      	movs	r1, #2
 8006478:	4618      	mov	r0, r3
 800647a:	f001 fb9f 	bl	8007bbc <RCCEx_PLL3_Config>
 800647e:	4603      	mov	r3, r0
 8006480:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006482:	e009      	b.n	8006498 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006484:	2301      	movs	r3, #1
 8006486:	75fb      	strb	r3, [r7, #23]
      break;
 8006488:	e006      	b.n	8006498 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800648a:	bf00      	nop
 800648c:	e004      	b.n	8006498 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800648e:	bf00      	nop
 8006490:	e002      	b.n	8006498 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8006492:	bf00      	nop
 8006494:	e000      	b.n	8006498 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8006496:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006498:	7dfb      	ldrb	r3, [r7, #23]
 800649a:	2b00      	cmp	r3, #0
 800649c:	d10a      	bne.n	80064b4 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800649e:	4b65      	ldr	r3, [pc, #404]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80064a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064a2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80064ac:	4961      	ldr	r1, [pc, #388]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80064ae:	4313      	orrs	r3, r2
 80064b0:	658b      	str	r3, [r1, #88]	; 0x58
 80064b2:	e001      	b.n	80064b8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064b4:	7dfb      	ldrb	r3, [r7, #23]
 80064b6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d04b      	beq.n	800655c <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80064ca:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80064ce:	d02e      	beq.n	800652e <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 80064d0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80064d4:	d828      	bhi.n	8006528 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80064d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80064da:	d02a      	beq.n	8006532 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 80064dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80064e0:	d822      	bhi.n	8006528 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80064e2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80064e6:	d026      	beq.n	8006536 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 80064e8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80064ec:	d81c      	bhi.n	8006528 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80064ee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80064f2:	d010      	beq.n	8006516 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 80064f4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80064f8:	d816      	bhi.n	8006528 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d01d      	beq.n	800653a <HAL_RCCEx_PeriphCLKConfig+0xb26>
 80064fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006502:	d111      	bne.n	8006528 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	3304      	adds	r3, #4
 8006508:	2100      	movs	r1, #0
 800650a:	4618      	mov	r0, r3
 800650c:	f001 faa4 	bl	8007a58 <RCCEx_PLL2_Config>
 8006510:	4603      	mov	r3, r0
 8006512:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006514:	e012      	b.n	800653c <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	3324      	adds	r3, #36	; 0x24
 800651a:	2102      	movs	r1, #2
 800651c:	4618      	mov	r0, r3
 800651e:	f001 fb4d 	bl	8007bbc <RCCEx_PLL3_Config>
 8006522:	4603      	mov	r3, r0
 8006524:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006526:	e009      	b.n	800653c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006528:	2301      	movs	r3, #1
 800652a:	75fb      	strb	r3, [r7, #23]
      break;
 800652c:	e006      	b.n	800653c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800652e:	bf00      	nop
 8006530:	e004      	b.n	800653c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8006532:	bf00      	nop
 8006534:	e002      	b.n	800653c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8006536:	bf00      	nop
 8006538:	e000      	b.n	800653c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800653a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800653c:	7dfb      	ldrb	r3, [r7, #23]
 800653e:	2b00      	cmp	r3, #0
 8006540:	d10a      	bne.n	8006558 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006542:	4b3c      	ldr	r3, [pc, #240]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006544:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006546:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006550:	4938      	ldr	r1, [pc, #224]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006552:	4313      	orrs	r3, r2
 8006554:	658b      	str	r3, [r1, #88]	; 0x58
 8006556:	e001      	b.n	800655c <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006558:	7dfb      	ldrb	r3, [r7, #23]
 800655a:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f003 0308 	and.w	r3, r3, #8
 8006564:	2b00      	cmp	r3, #0
 8006566:	d01a      	beq.n	800659e <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800656e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006572:	d10a      	bne.n	800658a <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	3324      	adds	r3, #36	; 0x24
 8006578:	2102      	movs	r1, #2
 800657a:	4618      	mov	r0, r3
 800657c:	f001 fb1e 	bl	8007bbc <RCCEx_PLL3_Config>
 8006580:	4603      	mov	r3, r0
 8006582:	2b00      	cmp	r3, #0
 8006584:	d001      	beq.n	800658a <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8006586:	2301      	movs	r3, #1
 8006588:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800658a:	4b2a      	ldr	r3, [pc, #168]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800658c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800658e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006598:	4926      	ldr	r1, [pc, #152]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800659a:	4313      	orrs	r3, r2
 800659c:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f003 0310 	and.w	r3, r3, #16
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d01a      	beq.n	80065e0 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80065b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80065b4:	d10a      	bne.n	80065cc <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	3324      	adds	r3, #36	; 0x24
 80065ba:	2102      	movs	r1, #2
 80065bc:	4618      	mov	r0, r3
 80065be:	f001 fafd 	bl	8007bbc <RCCEx_PLL3_Config>
 80065c2:	4603      	mov	r3, r0
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d001      	beq.n	80065cc <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 80065c8:	2301      	movs	r3, #1
 80065ca:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80065cc:	4b19      	ldr	r3, [pc, #100]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80065ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065d0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80065da:	4916      	ldr	r1, [pc, #88]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80065dc:	4313      	orrs	r3, r2
 80065de:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d036      	beq.n	800665a <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80065f2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80065f6:	d01f      	beq.n	8006638 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 80065f8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80065fc:	d817      	bhi.n	800662e <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d003      	beq.n	800660a <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8006602:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006606:	d009      	beq.n	800661c <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8006608:	e011      	b.n	800662e <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	3304      	adds	r3, #4
 800660e:	2100      	movs	r1, #0
 8006610:	4618      	mov	r0, r3
 8006612:	f001 fa21 	bl	8007a58 <RCCEx_PLL2_Config>
 8006616:	4603      	mov	r3, r0
 8006618:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800661a:	e00e      	b.n	800663a <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	3324      	adds	r3, #36	; 0x24
 8006620:	2102      	movs	r1, #2
 8006622:	4618      	mov	r0, r3
 8006624:	f001 faca 	bl	8007bbc <RCCEx_PLL3_Config>
 8006628:	4603      	mov	r3, r0
 800662a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800662c:	e005      	b.n	800663a <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800662e:	2301      	movs	r3, #1
 8006630:	75fb      	strb	r3, [r7, #23]
      break;
 8006632:	e002      	b.n	800663a <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8006634:	58024400 	.word	0x58024400
      break;
 8006638:	bf00      	nop
    }

    if(ret == HAL_OK)
 800663a:	7dfb      	ldrb	r3, [r7, #23]
 800663c:	2b00      	cmp	r3, #0
 800663e:	d10a      	bne.n	8006656 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006640:	4b93      	ldr	r3, [pc, #588]	; (8006890 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006642:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006644:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800664e:	4990      	ldr	r1, [pc, #576]	; (8006890 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006650:	4313      	orrs	r3, r2
 8006652:	658b      	str	r3, [r1, #88]	; 0x58
 8006654:	e001      	b.n	800665a <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006656:	7dfb      	ldrb	r3, [r7, #23]
 8006658:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006662:	2b00      	cmp	r3, #0
 8006664:	d033      	beq.n	80066ce <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800666c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006670:	d01c      	beq.n	80066ac <HAL_RCCEx_PeriphCLKConfig+0xc98>
 8006672:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006676:	d816      	bhi.n	80066a6 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8006678:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800667c:	d003      	beq.n	8006686 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 800667e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006682:	d007      	beq.n	8006694 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8006684:	e00f      	b.n	80066a6 <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006686:	4b82      	ldr	r3, [pc, #520]	; (8006890 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006688:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800668a:	4a81      	ldr	r2, [pc, #516]	; (8006890 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800668c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006690:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8006692:	e00c      	b.n	80066ae <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	3324      	adds	r3, #36	; 0x24
 8006698:	2101      	movs	r1, #1
 800669a:	4618      	mov	r0, r3
 800669c:	f001 fa8e 	bl	8007bbc <RCCEx_PLL3_Config>
 80066a0:	4603      	mov	r3, r0
 80066a2:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80066a4:	e003      	b.n	80066ae <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80066a6:	2301      	movs	r3, #1
 80066a8:	75fb      	strb	r3, [r7, #23]
      break;
 80066aa:	e000      	b.n	80066ae <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 80066ac:	bf00      	nop
    }

    if(ret == HAL_OK)
 80066ae:	7dfb      	ldrb	r3, [r7, #23]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d10a      	bne.n	80066ca <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80066b4:	4b76      	ldr	r3, [pc, #472]	; (8006890 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80066b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066b8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80066c2:	4973      	ldr	r1, [pc, #460]	; (8006890 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80066c4:	4313      	orrs	r3, r2
 80066c6:	654b      	str	r3, [r1, #84]	; 0x54
 80066c8:	e001      	b.n	80066ce <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066ca:	7dfb      	ldrb	r3, [r7, #23]
 80066cc:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d029      	beq.n	800672e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d003      	beq.n	80066ea <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 80066e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80066e6:	d007      	beq.n	80066f8 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 80066e8:	e00f      	b.n	800670a <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80066ea:	4b69      	ldr	r3, [pc, #420]	; (8006890 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80066ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066ee:	4a68      	ldr	r2, [pc, #416]	; (8006890 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80066f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80066f4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80066f6:	e00b      	b.n	8006710 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	3304      	adds	r3, #4
 80066fc:	2102      	movs	r1, #2
 80066fe:	4618      	mov	r0, r3
 8006700:	f001 f9aa 	bl	8007a58 <RCCEx_PLL2_Config>
 8006704:	4603      	mov	r3, r0
 8006706:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006708:	e002      	b.n	8006710 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 800670a:	2301      	movs	r3, #1
 800670c:	75fb      	strb	r3, [r7, #23]
      break;
 800670e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006710:	7dfb      	ldrb	r3, [r7, #23]
 8006712:	2b00      	cmp	r3, #0
 8006714:	d109      	bne.n	800672a <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006716:	4b5e      	ldr	r3, [pc, #376]	; (8006890 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006718:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800671a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006722:	495b      	ldr	r1, [pc, #364]	; (8006890 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006724:	4313      	orrs	r3, r2
 8006726:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006728:	e001      	b.n	800672e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800672a:	7dfb      	ldrb	r3, [r7, #23]
 800672c:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006736:	2b00      	cmp	r3, #0
 8006738:	d00a      	beq.n	8006750 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	3324      	adds	r3, #36	; 0x24
 800673e:	2102      	movs	r1, #2
 8006740:	4618      	mov	r0, r3
 8006742:	f001 fa3b 	bl	8007bbc <RCCEx_PLL3_Config>
 8006746:	4603      	mov	r3, r0
 8006748:	2b00      	cmp	r3, #0
 800674a:	d001      	beq.n	8006750 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 800674c:	2301      	movs	r3, #1
 800674e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006758:	2b00      	cmp	r3, #0
 800675a:	d030      	beq.n	80067be <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006760:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006764:	d017      	beq.n	8006796 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 8006766:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800676a:	d811      	bhi.n	8006790 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 800676c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006770:	d013      	beq.n	800679a <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8006772:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006776:	d80b      	bhi.n	8006790 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8006778:	2b00      	cmp	r3, #0
 800677a:	d010      	beq.n	800679e <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800677c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006780:	d106      	bne.n	8006790 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006782:	4b43      	ldr	r3, [pc, #268]	; (8006890 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006784:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006786:	4a42      	ldr	r2, [pc, #264]	; (8006890 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006788:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800678c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800678e:	e007      	b.n	80067a0 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006790:	2301      	movs	r3, #1
 8006792:	75fb      	strb	r3, [r7, #23]
      break;
 8006794:	e004      	b.n	80067a0 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8006796:	bf00      	nop
 8006798:	e002      	b.n	80067a0 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800679a:	bf00      	nop
 800679c:	e000      	b.n	80067a0 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800679e:	bf00      	nop
    }

    if(ret == HAL_OK)
 80067a0:	7dfb      	ldrb	r3, [r7, #23]
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d109      	bne.n	80067ba <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80067a6:	4b3a      	ldr	r3, [pc, #232]	; (8006890 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80067a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067aa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80067b2:	4937      	ldr	r1, [pc, #220]	; (8006890 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80067b4:	4313      	orrs	r3, r2
 80067b6:	654b      	str	r3, [r1, #84]	; 0x54
 80067b8:	e001      	b.n	80067be <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067ba:	7dfb      	ldrb	r3, [r7, #23]
 80067bc:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d008      	beq.n	80067dc <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80067ca:	4b31      	ldr	r3, [pc, #196]	; (8006890 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80067cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067ce:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067d6:	492e      	ldr	r1, [pc, #184]	; (8006890 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80067d8:	4313      	orrs	r3, r2
 80067da:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d009      	beq.n	80067fc <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80067e8:	4b29      	ldr	r3, [pc, #164]	; (8006890 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80067ea:	691b      	ldr	r3, [r3, #16]
 80067ec:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80067f6:	4926      	ldr	r1, [pc, #152]	; (8006890 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80067f8:	4313      	orrs	r3, r2
 80067fa:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006804:	2b00      	cmp	r3, #0
 8006806:	d008      	beq.n	800681a <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006808:	4b21      	ldr	r3, [pc, #132]	; (8006890 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800680a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800680c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006814:	491e      	ldr	r1, [pc, #120]	; (8006890 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006816:	4313      	orrs	r3, r2
 8006818:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006822:	2b00      	cmp	r3, #0
 8006824:	d00d      	beq.n	8006842 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006826:	4b1a      	ldr	r3, [pc, #104]	; (8006890 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006828:	691b      	ldr	r3, [r3, #16]
 800682a:	4a19      	ldr	r2, [pc, #100]	; (8006890 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800682c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006830:	6113      	str	r3, [r2, #16]
 8006832:	4b17      	ldr	r3, [pc, #92]	; (8006890 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006834:	691a      	ldr	r2, [r3, #16]
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800683c:	4914      	ldr	r1, [pc, #80]	; (8006890 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800683e:	4313      	orrs	r3, r2
 8006840:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	2b00      	cmp	r3, #0
 8006848:	da08      	bge.n	800685c <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800684a:	4b11      	ldr	r3, [pc, #68]	; (8006890 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800684c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800684e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006856:	490e      	ldr	r1, [pc, #56]	; (8006890 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006858:	4313      	orrs	r3, r2
 800685a:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006864:	2b00      	cmp	r3, #0
 8006866:	d009      	beq.n	800687c <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006868:	4b09      	ldr	r3, [pc, #36]	; (8006890 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800686a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800686c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006876:	4906      	ldr	r1, [pc, #24]	; (8006890 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006878:	4313      	orrs	r3, r2
 800687a:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800687c:	7dbb      	ldrb	r3, [r7, #22]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d101      	bne.n	8006886 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 8006882:	2300      	movs	r3, #0
 8006884:	e000      	b.n	8006888 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 8006886:	2301      	movs	r3, #1
}
 8006888:	4618      	mov	r0, r3
 800688a:	3718      	adds	r7, #24
 800688c:	46bd      	mov	sp, r7
 800688e:	bd80      	pop	{r7, pc}
 8006890:	58024400 	.word	0x58024400

08006894 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006894:	b580      	push	{r7, lr}
 8006896:	b090      	sub	sp, #64	; 0x40
 8006898:	af00      	add	r7, sp, #0
 800689a:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80068a2:	f040 8095 	bne.w	80069d0 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 80068a6:	4bae      	ldr	r3, [pc, #696]	; (8006b60 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80068a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068aa:	f003 0307 	and.w	r3, r3, #7
 80068ae:	633b      	str	r3, [r7, #48]	; 0x30
 80068b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068b2:	2b04      	cmp	r3, #4
 80068b4:	f200 8088 	bhi.w	80069c8 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 80068b8:	a201      	add	r2, pc, #4	; (adr r2, 80068c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 80068ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068be:	bf00      	nop
 80068c0:	080068d5 	.word	0x080068d5
 80068c4:	080068fd 	.word	0x080068fd
 80068c8:	08006925 	.word	0x08006925
 80068cc:	080069c1 	.word	0x080069c1
 80068d0:	0800694d 	.word	0x0800694d

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80068d4:	4ba2      	ldr	r3, [pc, #648]	; (8006b60 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80068dc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80068e0:	d108      	bne.n	80068f4 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80068e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80068e6:	4618      	mov	r0, r3
 80068e8:	f000 ff64 	bl	80077b4 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 80068ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068ee:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80068f0:	f000 bc95 	b.w	800721e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80068f4:	2300      	movs	r3, #0
 80068f6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80068f8:	f000 bc91 	b.w	800721e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80068fc:	4b98      	ldr	r3, [pc, #608]	; (8006b60 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006904:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006908:	d108      	bne.n	800691c <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800690a:	f107 0318 	add.w	r3, r7, #24
 800690e:	4618      	mov	r0, r3
 8006910:	f000 fca8 	bl	8007264 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006914:	69bb      	ldr	r3, [r7, #24]
 8006916:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006918:	f000 bc81 	b.w	800721e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800691c:	2300      	movs	r3, #0
 800691e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006920:	f000 bc7d 	b.w	800721e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006924:	4b8e      	ldr	r3, [pc, #568]	; (8006b60 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800692c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006930:	d108      	bne.n	8006944 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006932:	f107 030c 	add.w	r3, r7, #12
 8006936:	4618      	mov	r0, r3
 8006938:	f000 fde8 	bl	800750c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006940:	f000 bc6d 	b.w	800721e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8006944:	2300      	movs	r3, #0
 8006946:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006948:	f000 bc69 	b.w	800721e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800694c:	4b84      	ldr	r3, [pc, #528]	; (8006b60 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800694e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006950:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006954:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006956:	4b82      	ldr	r3, [pc, #520]	; (8006b60 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	f003 0304 	and.w	r3, r3, #4
 800695e:	2b04      	cmp	r3, #4
 8006960:	d10c      	bne.n	800697c <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 8006962:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006964:	2b00      	cmp	r3, #0
 8006966:	d109      	bne.n	800697c <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006968:	4b7d      	ldr	r3, [pc, #500]	; (8006b60 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	08db      	lsrs	r3, r3, #3
 800696e:	f003 0303 	and.w	r3, r3, #3
 8006972:	4a7c      	ldr	r2, [pc, #496]	; (8006b64 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 8006974:	fa22 f303 	lsr.w	r3, r2, r3
 8006978:	63fb      	str	r3, [r7, #60]	; 0x3c
 800697a:	e01f      	b.n	80069bc <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800697c:	4b78      	ldr	r3, [pc, #480]	; (8006b60 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006984:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006988:	d106      	bne.n	8006998 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 800698a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800698c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006990:	d102      	bne.n	8006998 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8006992:	4b75      	ldr	r3, [pc, #468]	; (8006b68 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8006994:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006996:	e011      	b.n	80069bc <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006998:	4b71      	ldr	r3, [pc, #452]	; (8006b60 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069a0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80069a4:	d106      	bne.n	80069b4 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 80069a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80069ac:	d102      	bne.n	80069b4 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80069ae:	4b6f      	ldr	r3, [pc, #444]	; (8006b6c <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 80069b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80069b2:	e003      	b.n	80069bc <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80069b4:	2300      	movs	r3, #0
 80069b6:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80069b8:	f000 bc31 	b.w	800721e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80069bc:	f000 bc2f 	b.w	800721e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80069c0:	4b6b      	ldr	r3, [pc, #428]	; (8006b70 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 80069c2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80069c4:	f000 bc2b 	b.w	800721e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 80069c8:	2300      	movs	r3, #0
 80069ca:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80069cc:	f000 bc27 	b.w	800721e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80069d6:	f040 8095 	bne.w	8006b04 <HAL_RCCEx_GetPeriphCLKFreq+0x270>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 80069da:	4b61      	ldr	r3, [pc, #388]	; (8006b60 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80069dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069de:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 80069e2:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80069e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80069ea:	d04d      	beq.n	8006a88 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 80069ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80069f2:	f200 8084 	bhi.w	8006afe <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 80069f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069f8:	2bc0      	cmp	r3, #192	; 0xc0
 80069fa:	d07d      	beq.n	8006af8 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 80069fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069fe:	2bc0      	cmp	r3, #192	; 0xc0
 8006a00:	d87d      	bhi.n	8006afe <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8006a02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a04:	2b80      	cmp	r3, #128	; 0x80
 8006a06:	d02d      	beq.n	8006a64 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 8006a08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a0a:	2b80      	cmp	r3, #128	; 0x80
 8006a0c:	d877      	bhi.n	8006afe <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8006a0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d003      	beq.n	8006a1c <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 8006a14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a16:	2b40      	cmp	r3, #64	; 0x40
 8006a18:	d012      	beq.n	8006a40 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 8006a1a:	e070      	b.n	8006afe <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006a1c:	4b50      	ldr	r3, [pc, #320]	; (8006b60 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a24:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006a28:	d107      	bne.n	8006a3a <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006a2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006a2e:	4618      	mov	r0, r3
 8006a30:	f000 fec0 	bl	80077b4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006a34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a36:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006a38:	e3f1      	b.n	800721e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006a3e:	e3ee      	b.n	800721e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006a40:	4b47      	ldr	r3, [pc, #284]	; (8006b60 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006a48:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006a4c:	d107      	bne.n	8006a5e <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006a4e:	f107 0318 	add.w	r3, r7, #24
 8006a52:	4618      	mov	r0, r3
 8006a54:	f000 fc06 	bl	8007264 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006a58:	69bb      	ldr	r3, [r7, #24]
 8006a5a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006a5c:	e3df      	b.n	800721e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8006a5e:	2300      	movs	r3, #0
 8006a60:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006a62:	e3dc      	b.n	800721e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006a64:	4b3e      	ldr	r3, [pc, #248]	; (8006b60 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006a6c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006a70:	d107      	bne.n	8006a82 <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006a72:	f107 030c 	add.w	r3, r7, #12
 8006a76:	4618      	mov	r0, r3
 8006a78:	f000 fd48 	bl	800750c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006a80:	e3cd      	b.n	800721e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8006a82:	2300      	movs	r3, #0
 8006a84:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006a86:	e3ca      	b.n	800721e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006a88:	4b35      	ldr	r3, [pc, #212]	; (8006b60 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8006a8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a8c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006a90:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006a92:	4b33      	ldr	r3, [pc, #204]	; (8006b60 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	f003 0304 	and.w	r3, r3, #4
 8006a9a:	2b04      	cmp	r3, #4
 8006a9c:	d10c      	bne.n	8006ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 8006a9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d109      	bne.n	8006ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006aa4:	4b2e      	ldr	r3, [pc, #184]	; (8006b60 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	08db      	lsrs	r3, r3, #3
 8006aaa:	f003 0303 	and.w	r3, r3, #3
 8006aae:	4a2d      	ldr	r2, [pc, #180]	; (8006b64 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 8006ab0:	fa22 f303 	lsr.w	r3, r2, r3
 8006ab4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006ab6:	e01e      	b.n	8006af6 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006ab8:	4b29      	ldr	r3, [pc, #164]	; (8006b60 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ac0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ac4:	d106      	bne.n	8006ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 8006ac6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ac8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006acc:	d102      	bne.n	8006ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8006ace:	4b26      	ldr	r3, [pc, #152]	; (8006b68 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8006ad0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006ad2:	e010      	b.n	8006af6 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006ad4:	4b22      	ldr	r3, [pc, #136]	; (8006b60 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006adc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006ae0:	d106      	bne.n	8006af0 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 8006ae2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ae4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006ae8:	d102      	bne.n	8006af0 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8006aea:	4b20      	ldr	r3, [pc, #128]	; (8006b6c <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8006aec:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006aee:	e002      	b.n	8006af6 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8006af0:	2300      	movs	r3, #0
 8006af2:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8006af4:	e393      	b.n	800721e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8006af6:	e392      	b.n	800721e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8006af8:	4b1d      	ldr	r3, [pc, #116]	; (8006b70 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8006afa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006afc:	e38f      	b.n	800721e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8006afe:	2300      	movs	r3, #0
 8006b00:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006b02:	e38c      	b.n	800721e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b0a:	f040 80a7 	bne.w	8006c5c <HAL_RCCEx_GetPeriphCLKFreq+0x3c8>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8006b0e:	4b14      	ldr	r3, [pc, #80]	; (8006b60 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8006b10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b12:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8006b16:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8006b18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b1a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006b1e:	d05f      	beq.n	8006be0 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8006b20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b22:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006b26:	f200 8096 	bhi.w	8006c56 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8006b2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b2c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006b30:	f000 808e 	beq.w	8006c50 <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
 8006b34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b36:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006b3a:	f200 808c 	bhi.w	8006c56 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8006b3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b40:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006b44:	d03a      	beq.n	8006bbc <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 8006b46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b48:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006b4c:	f200 8083 	bhi.w	8006c56 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8006b50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d00e      	beq.n	8006b74 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>
 8006b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b58:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006b5c:	d01c      	beq.n	8006b98 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 8006b5e:	e07a      	b.n	8006c56 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8006b60:	58024400 	.word	0x58024400
 8006b64:	03d09000 	.word	0x03d09000
 8006b68:	003d0900 	.word	0x003d0900
 8006b6c:	007a1200 	.word	0x007a1200
 8006b70:	00bb8000 	.word	0x00bb8000
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006b74:	4baa      	ldr	r3, [pc, #680]	; (8006e20 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b7c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006b80:	d107      	bne.n	8006b92 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006b82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006b86:	4618      	mov	r0, r3
 8006b88:	f000 fe14 	bl	80077b4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006b8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b8e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006b90:	e345      	b.n	800721e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8006b92:	2300      	movs	r3, #0
 8006b94:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006b96:	e342      	b.n	800721e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006b98:	4ba1      	ldr	r3, [pc, #644]	; (8006e20 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006ba0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006ba4:	d107      	bne.n	8006bb6 <HAL_RCCEx_GetPeriphCLKFreq+0x322>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006ba6:	f107 0318 	add.w	r3, r7, #24
 8006baa:	4618      	mov	r0, r3
 8006bac:	f000 fb5a 	bl	8007264 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006bb0:	69bb      	ldr	r3, [r7, #24]
 8006bb2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006bb4:	e333      	b.n	800721e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8006bb6:	2300      	movs	r3, #0
 8006bb8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006bba:	e330      	b.n	800721e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006bbc:	4b98      	ldr	r3, [pc, #608]	; (8006e20 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006bc4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006bc8:	d107      	bne.n	8006bda <HAL_RCCEx_GetPeriphCLKFreq+0x346>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006bca:	f107 030c 	add.w	r3, r7, #12
 8006bce:	4618      	mov	r0, r3
 8006bd0:	f000 fc9c 	bl	800750c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006bd8:	e321      	b.n	800721e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8006bda:	2300      	movs	r3, #0
 8006bdc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006bde:	e31e      	b.n	800721e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006be0:	4b8f      	ldr	r3, [pc, #572]	; (8006e20 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006be2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006be4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006be8:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006bea:	4b8d      	ldr	r3, [pc, #564]	; (8006e20 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	f003 0304 	and.w	r3, r3, #4
 8006bf2:	2b04      	cmp	r3, #4
 8006bf4:	d10c      	bne.n	8006c10 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 8006bf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d109      	bne.n	8006c10 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006bfc:	4b88      	ldr	r3, [pc, #544]	; (8006e20 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	08db      	lsrs	r3, r3, #3
 8006c02:	f003 0303 	and.w	r3, r3, #3
 8006c06:	4a87      	ldr	r2, [pc, #540]	; (8006e24 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006c08:	fa22 f303 	lsr.w	r3, r2, r3
 8006c0c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006c0e:	e01e      	b.n	8006c4e <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006c10:	4b83      	ldr	r3, [pc, #524]	; (8006e20 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c18:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c1c:	d106      	bne.n	8006c2c <HAL_RCCEx_GetPeriphCLKFreq+0x398>
 8006c1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c20:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006c24:	d102      	bne.n	8006c2c <HAL_RCCEx_GetPeriphCLKFreq+0x398>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8006c26:	4b80      	ldr	r3, [pc, #512]	; (8006e28 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8006c28:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006c2a:	e010      	b.n	8006c4e <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006c2c:	4b7c      	ldr	r3, [pc, #496]	; (8006e20 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c34:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006c38:	d106      	bne.n	8006c48 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
 8006c3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c3c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006c40:	d102      	bne.n	8006c48 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8006c42:	4b7a      	ldr	r3, [pc, #488]	; (8006e2c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8006c44:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006c46:	e002      	b.n	8006c4e <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8006c48:	2300      	movs	r3, #0
 8006c4a:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8006c4c:	e2e7      	b.n	800721e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8006c4e:	e2e6      	b.n	800721e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8006c50:	4b77      	ldr	r3, [pc, #476]	; (8006e30 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8006c52:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006c54:	e2e3      	b.n	800721e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8006c56:	2300      	movs	r3, #0
 8006c58:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006c5a:	e2e0      	b.n	800721e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c62:	f040 809c 	bne.w	8006d9e <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8006c66:	4b6e      	ldr	r3, [pc, #440]	; (8006e20 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006c68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c6a:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8006c6e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8006c70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c72:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006c76:	d054      	beq.n	8006d22 <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 8006c78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c7a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006c7e:	f200 808b 	bhi.w	8006d98 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 8006c82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c84:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006c88:	f000 8083 	beq.w	8006d92 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 8006c8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c8e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006c92:	f200 8081 	bhi.w	8006d98 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 8006c96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c98:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006c9c:	d02f      	beq.n	8006cfe <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 8006c9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ca0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006ca4:	d878      	bhi.n	8006d98 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 8006ca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d004      	beq.n	8006cb6 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8006cac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cae:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006cb2:	d012      	beq.n	8006cda <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 8006cb4:	e070      	b.n	8006d98 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006cb6:	4b5a      	ldr	r3, [pc, #360]	; (8006e20 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006cbe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006cc2:	d107      	bne.n	8006cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006cc4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006cc8:	4618      	mov	r0, r3
 8006cca:	f000 fd73 	bl	80077b4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006cce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cd0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006cd2:	e2a4      	b.n	800721e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006cd8:	e2a1      	b.n	800721e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006cda:	4b51      	ldr	r3, [pc, #324]	; (8006e20 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006ce2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006ce6:	d107      	bne.n	8006cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006ce8:	f107 0318 	add.w	r3, r7, #24
 8006cec:	4618      	mov	r0, r3
 8006cee:	f000 fab9 	bl	8007264 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006cf2:	69bb      	ldr	r3, [r7, #24]
 8006cf4:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 8006cf6:	e292      	b.n	800721e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8006cf8:	2300      	movs	r3, #0
 8006cfa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006cfc:	e28f      	b.n	800721e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006cfe:	4b48      	ldr	r3, [pc, #288]	; (8006e20 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006d06:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006d0a:	d107      	bne.n	8006d1c <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006d0c:	f107 030c 	add.w	r3, r7, #12
 8006d10:	4618      	mov	r0, r3
 8006d12:	f000 fbfb 	bl	800750c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006d1a:	e280      	b.n	800721e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8006d1c:	2300      	movs	r3, #0
 8006d1e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006d20:	e27d      	b.n	800721e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006d22:	4b3f      	ldr	r3, [pc, #252]	; (8006e20 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006d24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d26:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006d2a:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006d2c:	4b3c      	ldr	r3, [pc, #240]	; (8006e20 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	f003 0304 	and.w	r3, r3, #4
 8006d34:	2b04      	cmp	r3, #4
 8006d36:	d10c      	bne.n	8006d52 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 8006d38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d109      	bne.n	8006d52 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006d3e:	4b38      	ldr	r3, [pc, #224]	; (8006e20 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	08db      	lsrs	r3, r3, #3
 8006d44:	f003 0303 	and.w	r3, r3, #3
 8006d48:	4a36      	ldr	r2, [pc, #216]	; (8006e24 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006d4a:	fa22 f303 	lsr.w	r3, r2, r3
 8006d4e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006d50:	e01e      	b.n	8006d90 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006d52:	4b33      	ldr	r3, [pc, #204]	; (8006e20 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d5e:	d106      	bne.n	8006d6e <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 8006d60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d62:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006d66:	d102      	bne.n	8006d6e <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8006d68:	4b2f      	ldr	r3, [pc, #188]	; (8006e28 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8006d6a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006d6c:	e010      	b.n	8006d90 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006d6e:	4b2c      	ldr	r3, [pc, #176]	; (8006e20 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d76:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006d7a:	d106      	bne.n	8006d8a <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 8006d7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d7e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006d82:	d102      	bne.n	8006d8a <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8006d84:	4b29      	ldr	r3, [pc, #164]	; (8006e2c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8006d86:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006d88:	e002      	b.n	8006d90 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8006d8e:	e246      	b.n	800721e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8006d90:	e245      	b.n	800721e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8006d92:	4b27      	ldr	r3, [pc, #156]	; (8006e30 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8006d94:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006d96:	e242      	b.n	800721e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8006d98:	2300      	movs	r3, #0
 8006d9a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006d9c:	e23f      	b.n	800721e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006da4:	f040 80a8 	bne.w	8006ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8006da8:	4b1d      	ldr	r3, [pc, #116]	; (8006e20 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006daa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006dac:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8006db0:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8006db2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006db4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006db8:	d060      	beq.n	8006e7c <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
 8006dba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dbc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006dc0:	f200 8097 	bhi.w	8006ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8006dc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dc6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006dca:	f000 808f 	beq.w	8006eec <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 8006dce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dd0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006dd4:	f200 808d 	bhi.w	8006ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8006dd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dda:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006dde:	d03b      	beq.n	8006e58 <HAL_RCCEx_GetPeriphCLKFreq+0x5c4>
 8006de0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006de2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006de6:	f200 8084 	bhi.w	8006ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8006dea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d004      	beq.n	8006dfa <HAL_RCCEx_GetPeriphCLKFreq+0x566>
 8006df0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006df2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006df6:	d01d      	beq.n	8006e34 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
 8006df8:	e07b      	b.n	8006ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006dfa:	4b09      	ldr	r3, [pc, #36]	; (8006e20 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e02:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006e06:	d107      	bne.n	8006e18 <HAL_RCCEx_GetPeriphCLKFreq+0x584>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006e08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	f000 fcd1 	bl	80077b4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006e12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e14:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006e16:	e202      	b.n	800721e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8006e18:	2300      	movs	r3, #0
 8006e1a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006e1c:	e1ff      	b.n	800721e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8006e1e:	bf00      	nop
 8006e20:	58024400 	.word	0x58024400
 8006e24:	03d09000 	.word	0x03d09000
 8006e28:	003d0900 	.word	0x003d0900
 8006e2c:	007a1200 	.word	0x007a1200
 8006e30:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006e34:	4ba3      	ldr	r3, [pc, #652]	; (80070c4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006e3c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006e40:	d107      	bne.n	8006e52 <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006e42:	f107 0318 	add.w	r3, r7, #24
 8006e46:	4618      	mov	r0, r3
 8006e48:	f000 fa0c 	bl	8007264 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006e4c:	69bb      	ldr	r3, [r7, #24]
 8006e4e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006e50:	e1e5      	b.n	800721e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8006e52:	2300      	movs	r3, #0
 8006e54:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006e56:	e1e2      	b.n	800721e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006e58:	4b9a      	ldr	r3, [pc, #616]	; (80070c4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006e60:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006e64:	d107      	bne.n	8006e76 <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006e66:	f107 030c 	add.w	r3, r7, #12
 8006e6a:	4618      	mov	r0, r3
 8006e6c:	f000 fb4e 	bl	800750c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006e74:	e1d3      	b.n	800721e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8006e76:	2300      	movs	r3, #0
 8006e78:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006e7a:	e1d0      	b.n	800721e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006e7c:	4b91      	ldr	r3, [pc, #580]	; (80070c4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006e7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e80:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006e84:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006e86:	4b8f      	ldr	r3, [pc, #572]	; (80070c4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	f003 0304 	and.w	r3, r3, #4
 8006e8e:	2b04      	cmp	r3, #4
 8006e90:	d10c      	bne.n	8006eac <HAL_RCCEx_GetPeriphCLKFreq+0x618>
 8006e92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d109      	bne.n	8006eac <HAL_RCCEx_GetPeriphCLKFreq+0x618>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006e98:	4b8a      	ldr	r3, [pc, #552]	; (80070c4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	08db      	lsrs	r3, r3, #3
 8006e9e:	f003 0303 	and.w	r3, r3, #3
 8006ea2:	4a89      	ldr	r2, [pc, #548]	; (80070c8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006ea4:	fa22 f303 	lsr.w	r3, r2, r3
 8006ea8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006eaa:	e01e      	b.n	8006eea <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006eac:	4b85      	ldr	r3, [pc, #532]	; (80070c4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006eb4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006eb8:	d106      	bne.n	8006ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
 8006eba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ebc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006ec0:	d102      	bne.n	8006ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8006ec2:	4b82      	ldr	r3, [pc, #520]	; (80070cc <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8006ec4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006ec6:	e010      	b.n	8006eea <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006ec8:	4b7e      	ldr	r3, [pc, #504]	; (80070c4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ed0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006ed4:	d106      	bne.n	8006ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8006ed6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ed8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006edc:	d102      	bne.n	8006ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8006ede:	4b7c      	ldr	r3, [pc, #496]	; (80070d0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006ee0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006ee2:	e002      	b.n	8006eea <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8006ee4:	2300      	movs	r3, #0
 8006ee6:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8006ee8:	e199      	b.n	800721e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8006eea:	e198      	b.n	800721e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8006eec:	4b79      	ldr	r3, [pc, #484]	; (80070d4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006eee:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006ef0:	e195      	b.n	800721e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8006ef2:	2300      	movs	r3, #0
 8006ef4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006ef6:	e192      	b.n	800721e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006efe:	d173      	bne.n	8006fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8006f00:	4b70      	ldr	r3, [pc, #448]	; (80070c4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006f02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f04:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006f08:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8006f0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f0c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006f10:	d02f      	beq.n	8006f72 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
 8006f12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f14:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006f18:	d863      	bhi.n	8006fe2 <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 8006f1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d004      	beq.n	8006f2a <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 8006f20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f26:	d012      	beq.n	8006f4e <HAL_RCCEx_GetPeriphCLKFreq+0x6ba>
 8006f28:	e05b      	b.n	8006fe2 <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006f2a:	4b66      	ldr	r3, [pc, #408]	; (80070c4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006f32:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006f36:	d107      	bne.n	8006f48 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006f38:	f107 0318 	add.w	r3, r7, #24
 8006f3c:	4618      	mov	r0, r3
 8006f3e:	f000 f991 	bl	8007264 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006f42:	69bb      	ldr	r3, [r7, #24]
 8006f44:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006f46:	e16a      	b.n	800721e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8006f48:	2300      	movs	r3, #0
 8006f4a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006f4c:	e167      	b.n	800721e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006f4e:	4b5d      	ldr	r3, [pc, #372]	; (80070c4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006f56:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006f5a:	d107      	bne.n	8006f6c <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006f5c:	f107 030c 	add.w	r3, r7, #12
 8006f60:	4618      	mov	r0, r3
 8006f62:	f000 fad3 	bl	800750c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006f66:	697b      	ldr	r3, [r7, #20]
 8006f68:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006f6a:	e158      	b.n	800721e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8006f6c:	2300      	movs	r3, #0
 8006f6e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006f70:	e155      	b.n	800721e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006f72:	4b54      	ldr	r3, [pc, #336]	; (80070c4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006f74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f76:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006f7a:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006f7c:	4b51      	ldr	r3, [pc, #324]	; (80070c4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	f003 0304 	and.w	r3, r3, #4
 8006f84:	2b04      	cmp	r3, #4
 8006f86:	d10c      	bne.n	8006fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
 8006f88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d109      	bne.n	8006fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006f8e:	4b4d      	ldr	r3, [pc, #308]	; (80070c4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	08db      	lsrs	r3, r3, #3
 8006f94:	f003 0303 	and.w	r3, r3, #3
 8006f98:	4a4b      	ldr	r2, [pc, #300]	; (80070c8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006f9a:	fa22 f303 	lsr.w	r3, r2, r3
 8006f9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006fa0:	e01e      	b.n	8006fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006fa2:	4b48      	ldr	r3, [pc, #288]	; (80070c4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006faa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006fae:	d106      	bne.n	8006fbe <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
 8006fb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fb2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006fb6:	d102      	bne.n	8006fbe <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8006fb8:	4b44      	ldr	r3, [pc, #272]	; (80070cc <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8006fba:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006fbc:	e010      	b.n	8006fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006fbe:	4b41      	ldr	r3, [pc, #260]	; (80070c4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006fc6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006fca:	d106      	bne.n	8006fda <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 8006fcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006fd2:	d102      	bne.n	8006fda <HAL_RCCEx_GetPeriphCLKFreq+0x746>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8006fd4:	4b3e      	ldr	r3, [pc, #248]	; (80070d0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006fd6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006fd8:	e002      	b.n	8006fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8006fda:	2300      	movs	r3, #0
 8006fdc:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8006fde:	e11e      	b.n	800721e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8006fe0:	e11d      	b.n	800721e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006fe6:	e11a      	b.n	800721e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006fee:	d133      	bne.n	8007058 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8006ff0:	4b34      	ldr	r3, [pc, #208]	; (80070c4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006ff2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ff4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006ff8:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8006ffa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d004      	beq.n	800700a <HAL_RCCEx_GetPeriphCLKFreq+0x776>
 8007000:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007002:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007006:	d012      	beq.n	800702e <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
 8007008:	e023      	b.n	8007052 <HAL_RCCEx_GetPeriphCLKFreq+0x7be>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800700a:	4b2e      	ldr	r3, [pc, #184]	; (80070c4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007012:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007016:	d107      	bne.n	8007028 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007018:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800701c:	4618      	mov	r0, r3
 800701e:	f000 fbc9 	bl	80077b4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007022:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007024:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007026:	e0fa      	b.n	800721e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007028:	2300      	movs	r3, #0
 800702a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800702c:	e0f7      	b.n	800721e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800702e:	4b25      	ldr	r3, [pc, #148]	; (80070c4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007036:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800703a:	d107      	bne.n	800704c <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800703c:	f107 0318 	add.w	r3, r7, #24
 8007040:	4618      	mov	r0, r3
 8007042:	f000 f90f 	bl	8007264 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8007046:	6a3b      	ldr	r3, [r7, #32]
 8007048:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800704a:	e0e8      	b.n	800721e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800704c:	2300      	movs	r3, #0
 800704e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007050:	e0e5      	b.n	800721e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8007052:	2300      	movs	r3, #0
 8007054:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007056:	e0e2      	b.n	800721e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800705e:	f040 808f 	bne.w	8007180 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8007062:	4b18      	ldr	r3, [pc, #96]	; (80070c4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007064:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007066:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800706a:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800706c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800706e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007072:	d075      	beq.n	8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x8cc>
 8007074:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007076:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800707a:	d87e      	bhi.n	800717a <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 800707c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800707e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007082:	d060      	beq.n	8007146 <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 8007084:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007086:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800708a:	d876      	bhi.n	800717a <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 800708c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800708e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007092:	d045      	beq.n	8007120 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>
 8007094:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007096:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800709a:	d86e      	bhi.n	800717a <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 800709c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800709e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80070a2:	d02b      	beq.n	80070fc <HAL_RCCEx_GetPeriphCLKFreq+0x868>
 80070a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80070aa:	d866      	bhi.n	800717a <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 80070ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d004      	beq.n	80070bc <HAL_RCCEx_GetPeriphCLKFreq+0x828>
 80070b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070b4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80070b8:	d00e      	beq.n	80070d8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 80070ba:	e05e      	b.n	800717a <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80070bc:	f000 f8bc 	bl	8007238 <HAL_RCCEx_GetD3PCLK1Freq>
 80070c0:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 80070c2:	e0ac      	b.n	800721e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80070c4:	58024400 	.word	0x58024400
 80070c8:	03d09000 	.word	0x03d09000
 80070cc:	003d0900 	.word	0x003d0900
 80070d0:	007a1200 	.word	0x007a1200
 80070d4:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80070d8:	4b53      	ldr	r3, [pc, #332]	; (8007228 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80070e0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80070e4:	d107      	bne.n	80070f6 <HAL_RCCEx_GetPeriphCLKFreq+0x862>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80070e6:	f107 0318 	add.w	r3, r7, #24
 80070ea:	4618      	mov	r0, r3
 80070ec:	f000 f8ba 	bl	8007264 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80070f0:	69fb      	ldr	r3, [r7, #28]
 80070f2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80070f4:	e093      	b.n	800721e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80070f6:	2300      	movs	r3, #0
 80070f8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80070fa:	e090      	b.n	800721e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80070fc:	4b4a      	ldr	r3, [pc, #296]	; (8007228 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007104:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007108:	d107      	bne.n	800711a <HAL_RCCEx_GetPeriphCLKFreq+0x886>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800710a:	f107 030c 	add.w	r3, r7, #12
 800710e:	4618      	mov	r0, r3
 8007110:	f000 f9fc 	bl	800750c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007114:	693b      	ldr	r3, [r7, #16]
 8007116:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007118:	e081      	b.n	800721e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800711a:	2300      	movs	r3, #0
 800711c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800711e:	e07e      	b.n	800721e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007120:	4b41      	ldr	r3, [pc, #260]	; (8007228 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	f003 0304 	and.w	r3, r3, #4
 8007128:	2b04      	cmp	r3, #4
 800712a:	d109      	bne.n	8007140 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800712c:	4b3e      	ldr	r3, [pc, #248]	; (8007228 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	08db      	lsrs	r3, r3, #3
 8007132:	f003 0303 	and.w	r3, r3, #3
 8007136:	4a3d      	ldr	r2, [pc, #244]	; (800722c <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 8007138:	fa22 f303 	lsr.w	r3, r2, r3
 800713c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800713e:	e06e      	b.n	800721e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007140:	2300      	movs	r3, #0
 8007142:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007144:	e06b      	b.n	800721e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8007146:	4b38      	ldr	r3, [pc, #224]	; (8007228 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800714e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007152:	d102      	bne.n	800715a <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
         {
          frequency = CSI_VALUE;
 8007154:	4b36      	ldr	r3, [pc, #216]	; (8007230 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8007156:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007158:	e061      	b.n	800721e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800715a:	2300      	movs	r3, #0
 800715c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800715e:	e05e      	b.n	800721e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007160:	4b31      	ldr	r3, [pc, #196]	; (8007228 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007168:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800716c:	d102      	bne.n	8007174 <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>
         {
          frequency = HSE_VALUE;
 800716e:	4b31      	ldr	r3, [pc, #196]	; (8007234 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8007170:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007172:	e054      	b.n	800721e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007174:	2300      	movs	r3, #0
 8007176:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007178:	e051      	b.n	800721e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 800717a:	2300      	movs	r3, #0
 800717c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800717e:	e04e      	b.n	800721e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007186:	d148      	bne.n	800721a <HAL_RCCEx_GetPeriphCLKFreq+0x986>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 8007188:	4b27      	ldr	r3, [pc, #156]	; (8007228 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800718a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800718c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007190:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007192:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007194:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007198:	d02a      	beq.n	80071f0 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800719a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800719c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80071a0:	d838      	bhi.n	8007214 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 80071a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d004      	beq.n	80071b2 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 80071a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071aa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80071ae:	d00d      	beq.n	80071cc <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 80071b0:	e030      	b.n	8007214 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80071b2:	4b1d      	ldr	r3, [pc, #116]	; (8007228 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80071ba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80071be:	d102      	bne.n	80071c6 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
         {
          frequency = HSE_VALUE;
 80071c0:	4b1c      	ldr	r3, [pc, #112]	; (8007234 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 80071c2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80071c4:	e02b      	b.n	800721e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80071c6:	2300      	movs	r3, #0
 80071c8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80071ca:	e028      	b.n	800721e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80071cc:	4b16      	ldr	r3, [pc, #88]	; (8007228 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80071d4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80071d8:	d107      	bne.n	80071ea <HAL_RCCEx_GetPeriphCLKFreq+0x956>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80071da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80071de:	4618      	mov	r0, r3
 80071e0:	f000 fae8 	bl	80077b4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80071e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071e6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80071e8:	e019      	b.n	800721e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80071ea:	2300      	movs	r3, #0
 80071ec:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80071ee:	e016      	b.n	800721e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80071f0:	4b0d      	ldr	r3, [pc, #52]	; (8007228 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80071f8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80071fc:	d107      	bne.n	800720e <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80071fe:	f107 0318 	add.w	r3, r7, #24
 8007202:	4618      	mov	r0, r3
 8007204:	f000 f82e 	bl	8007264 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007208:	69fb      	ldr	r3, [r7, #28]
 800720a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800720c:	e007      	b.n	800721e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800720e:	2300      	movs	r3, #0
 8007210:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007212:	e004      	b.n	800721e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8007214:	2300      	movs	r3, #0
 8007216:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007218:	e001      	b.n	800721e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else
    {
      frequency = 0;
 800721a:	2300      	movs	r3, #0
 800721c:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 800721e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007220:	4618      	mov	r0, r3
 8007222:	3740      	adds	r7, #64	; 0x40
 8007224:	46bd      	mov	sp, r7
 8007226:	bd80      	pop	{r7, pc}
 8007228:	58024400 	.word	0x58024400
 800722c:	03d09000 	.word	0x03d09000
 8007230:	003d0900 	.word	0x003d0900
 8007234:	007a1200 	.word	0x007a1200

08007238 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007238:	b580      	push	{r7, lr}
 800723a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800723c:	f7fe fb8e 	bl	800595c <HAL_RCC_GetHCLKFreq>
 8007240:	4602      	mov	r2, r0
 8007242:	4b06      	ldr	r3, [pc, #24]	; (800725c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007244:	6a1b      	ldr	r3, [r3, #32]
 8007246:	091b      	lsrs	r3, r3, #4
 8007248:	f003 0307 	and.w	r3, r3, #7
 800724c:	4904      	ldr	r1, [pc, #16]	; (8007260 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800724e:	5ccb      	ldrb	r3, [r1, r3]
 8007250:	f003 031f 	and.w	r3, r3, #31
 8007254:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007258:	4618      	mov	r0, r3
 800725a:	bd80      	pop	{r7, pc}
 800725c:	58024400 	.word	0x58024400
 8007260:	0800bfa8 	.word	0x0800bfa8

08007264 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8007264:	b480      	push	{r7}
 8007266:	b089      	sub	sp, #36	; 0x24
 8007268:	af00      	add	r7, sp, #0
 800726a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800726c:	4ba1      	ldr	r3, [pc, #644]	; (80074f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800726e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007270:	f003 0303 	and.w	r3, r3, #3
 8007274:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8007276:	4b9f      	ldr	r3, [pc, #636]	; (80074f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007278:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800727a:	0b1b      	lsrs	r3, r3, #12
 800727c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007280:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007282:	4b9c      	ldr	r3, [pc, #624]	; (80074f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007284:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007286:	091b      	lsrs	r3, r3, #4
 8007288:	f003 0301 	and.w	r3, r3, #1
 800728c:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800728e:	4b99      	ldr	r3, [pc, #612]	; (80074f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007290:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007292:	08db      	lsrs	r3, r3, #3
 8007294:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007298:	693a      	ldr	r2, [r7, #16]
 800729a:	fb02 f303 	mul.w	r3, r2, r3
 800729e:	ee07 3a90 	vmov	s15, r3
 80072a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072a6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80072aa:	697b      	ldr	r3, [r7, #20]
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	f000 8111 	beq.w	80074d4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80072b2:	69bb      	ldr	r3, [r7, #24]
 80072b4:	2b02      	cmp	r3, #2
 80072b6:	f000 8083 	beq.w	80073c0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80072ba:	69bb      	ldr	r3, [r7, #24]
 80072bc:	2b02      	cmp	r3, #2
 80072be:	f200 80a1 	bhi.w	8007404 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80072c2:	69bb      	ldr	r3, [r7, #24]
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d003      	beq.n	80072d0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80072c8:	69bb      	ldr	r3, [r7, #24]
 80072ca:	2b01      	cmp	r3, #1
 80072cc:	d056      	beq.n	800737c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80072ce:	e099      	b.n	8007404 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80072d0:	4b88      	ldr	r3, [pc, #544]	; (80074f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	f003 0320 	and.w	r3, r3, #32
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d02d      	beq.n	8007338 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80072dc:	4b85      	ldr	r3, [pc, #532]	; (80074f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	08db      	lsrs	r3, r3, #3
 80072e2:	f003 0303 	and.w	r3, r3, #3
 80072e6:	4a84      	ldr	r2, [pc, #528]	; (80074f8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80072e8:	fa22 f303 	lsr.w	r3, r2, r3
 80072ec:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80072ee:	68bb      	ldr	r3, [r7, #8]
 80072f0:	ee07 3a90 	vmov	s15, r3
 80072f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072f8:	697b      	ldr	r3, [r7, #20]
 80072fa:	ee07 3a90 	vmov	s15, r3
 80072fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007302:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007306:	4b7b      	ldr	r3, [pc, #492]	; (80074f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007308:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800730a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800730e:	ee07 3a90 	vmov	s15, r3
 8007312:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007316:	ed97 6a03 	vldr	s12, [r7, #12]
 800731a:	eddf 5a78 	vldr	s11, [pc, #480]	; 80074fc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800731e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007322:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007326:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800732a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800732e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007332:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007336:	e087      	b.n	8007448 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007338:	697b      	ldr	r3, [r7, #20]
 800733a:	ee07 3a90 	vmov	s15, r3
 800733e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007342:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007500 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8007346:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800734a:	4b6a      	ldr	r3, [pc, #424]	; (80074f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800734c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800734e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007352:	ee07 3a90 	vmov	s15, r3
 8007356:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800735a:	ed97 6a03 	vldr	s12, [r7, #12]
 800735e:	eddf 5a67 	vldr	s11, [pc, #412]	; 80074fc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007362:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007366:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800736a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800736e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007372:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007376:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800737a:	e065      	b.n	8007448 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800737c:	697b      	ldr	r3, [r7, #20]
 800737e:	ee07 3a90 	vmov	s15, r3
 8007382:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007386:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007504 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800738a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800738e:	4b59      	ldr	r3, [pc, #356]	; (80074f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007390:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007392:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007396:	ee07 3a90 	vmov	s15, r3
 800739a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800739e:	ed97 6a03 	vldr	s12, [r7, #12]
 80073a2:	eddf 5a56 	vldr	s11, [pc, #344]	; 80074fc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80073a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80073aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80073ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80073b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80073b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80073ba:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80073be:	e043      	b.n	8007448 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80073c0:	697b      	ldr	r3, [r7, #20]
 80073c2:	ee07 3a90 	vmov	s15, r3
 80073c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073ca:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007508 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80073ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80073d2:	4b48      	ldr	r3, [pc, #288]	; (80074f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80073d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073da:	ee07 3a90 	vmov	s15, r3
 80073de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80073e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80073e6:	eddf 5a45 	vldr	s11, [pc, #276]	; 80074fc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80073ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80073ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80073f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80073f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80073fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80073fe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007402:	e021      	b.n	8007448 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007404:	697b      	ldr	r3, [r7, #20]
 8007406:	ee07 3a90 	vmov	s15, r3
 800740a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800740e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007504 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007412:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007416:	4b37      	ldr	r3, [pc, #220]	; (80074f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007418:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800741a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800741e:	ee07 3a90 	vmov	s15, r3
 8007422:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007426:	ed97 6a03 	vldr	s12, [r7, #12]
 800742a:	eddf 5a34 	vldr	s11, [pc, #208]	; 80074fc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800742e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007432:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007436:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800743a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800743e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007442:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007446:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8007448:	4b2a      	ldr	r3, [pc, #168]	; (80074f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800744a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800744c:	0a5b      	lsrs	r3, r3, #9
 800744e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007452:	ee07 3a90 	vmov	s15, r3
 8007456:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800745a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800745e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007462:	edd7 6a07 	vldr	s13, [r7, #28]
 8007466:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800746a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800746e:	ee17 2a90 	vmov	r2, s15
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8007476:	4b1f      	ldr	r3, [pc, #124]	; (80074f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007478:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800747a:	0c1b      	lsrs	r3, r3, #16
 800747c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007480:	ee07 3a90 	vmov	s15, r3
 8007484:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007488:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800748c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007490:	edd7 6a07 	vldr	s13, [r7, #28]
 8007494:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007498:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800749c:	ee17 2a90 	vmov	r2, s15
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80074a4:	4b13      	ldr	r3, [pc, #76]	; (80074f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80074a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074a8:	0e1b      	lsrs	r3, r3, #24
 80074aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80074ae:	ee07 3a90 	vmov	s15, r3
 80074b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074b6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80074ba:	ee37 7a87 	vadd.f32	s14, s15, s14
 80074be:	edd7 6a07 	vldr	s13, [r7, #28]
 80074c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80074c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80074ca:	ee17 2a90 	vmov	r2, s15
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80074d2:	e008      	b.n	80074e6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	2200      	movs	r2, #0
 80074d8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	2200      	movs	r2, #0
 80074de:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	2200      	movs	r2, #0
 80074e4:	609a      	str	r2, [r3, #8]
}
 80074e6:	bf00      	nop
 80074e8:	3724      	adds	r7, #36	; 0x24
 80074ea:	46bd      	mov	sp, r7
 80074ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f0:	4770      	bx	lr
 80074f2:	bf00      	nop
 80074f4:	58024400 	.word	0x58024400
 80074f8:	03d09000 	.word	0x03d09000
 80074fc:	46000000 	.word	0x46000000
 8007500:	4c742400 	.word	0x4c742400
 8007504:	4a742400 	.word	0x4a742400
 8007508:	4af42400 	.word	0x4af42400

0800750c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800750c:	b480      	push	{r7}
 800750e:	b089      	sub	sp, #36	; 0x24
 8007510:	af00      	add	r7, sp, #0
 8007512:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007514:	4ba1      	ldr	r3, [pc, #644]	; (800779c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007516:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007518:	f003 0303 	and.w	r3, r3, #3
 800751c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800751e:	4b9f      	ldr	r3, [pc, #636]	; (800779c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007520:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007522:	0d1b      	lsrs	r3, r3, #20
 8007524:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007528:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800752a:	4b9c      	ldr	r3, [pc, #624]	; (800779c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800752c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800752e:	0a1b      	lsrs	r3, r3, #8
 8007530:	f003 0301 	and.w	r3, r3, #1
 8007534:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8007536:	4b99      	ldr	r3, [pc, #612]	; (800779c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007538:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800753a:	08db      	lsrs	r3, r3, #3
 800753c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007540:	693a      	ldr	r2, [r7, #16]
 8007542:	fb02 f303 	mul.w	r3, r2, r3
 8007546:	ee07 3a90 	vmov	s15, r3
 800754a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800754e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007552:	697b      	ldr	r3, [r7, #20]
 8007554:	2b00      	cmp	r3, #0
 8007556:	f000 8111 	beq.w	800777c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800755a:	69bb      	ldr	r3, [r7, #24]
 800755c:	2b02      	cmp	r3, #2
 800755e:	f000 8083 	beq.w	8007668 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8007562:	69bb      	ldr	r3, [r7, #24]
 8007564:	2b02      	cmp	r3, #2
 8007566:	f200 80a1 	bhi.w	80076ac <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800756a:	69bb      	ldr	r3, [r7, #24]
 800756c:	2b00      	cmp	r3, #0
 800756e:	d003      	beq.n	8007578 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007570:	69bb      	ldr	r3, [r7, #24]
 8007572:	2b01      	cmp	r3, #1
 8007574:	d056      	beq.n	8007624 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8007576:	e099      	b.n	80076ac <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007578:	4b88      	ldr	r3, [pc, #544]	; (800779c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	f003 0320 	and.w	r3, r3, #32
 8007580:	2b00      	cmp	r3, #0
 8007582:	d02d      	beq.n	80075e0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007584:	4b85      	ldr	r3, [pc, #532]	; (800779c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	08db      	lsrs	r3, r3, #3
 800758a:	f003 0303 	and.w	r3, r3, #3
 800758e:	4a84      	ldr	r2, [pc, #528]	; (80077a0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007590:	fa22 f303 	lsr.w	r3, r2, r3
 8007594:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007596:	68bb      	ldr	r3, [r7, #8]
 8007598:	ee07 3a90 	vmov	s15, r3
 800759c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075a0:	697b      	ldr	r3, [r7, #20]
 80075a2:	ee07 3a90 	vmov	s15, r3
 80075a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80075ae:	4b7b      	ldr	r3, [pc, #492]	; (800779c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80075b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075b6:	ee07 3a90 	vmov	s15, r3
 80075ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075be:	ed97 6a03 	vldr	s12, [r7, #12]
 80075c2:	eddf 5a78 	vldr	s11, [pc, #480]	; 80077a4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80075c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80075ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80075ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80075d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80075d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075da:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80075de:	e087      	b.n	80076f0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80075e0:	697b      	ldr	r3, [r7, #20]
 80075e2:	ee07 3a90 	vmov	s15, r3
 80075e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075ea:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80077a8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80075ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80075f2:	4b6a      	ldr	r3, [pc, #424]	; (800779c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80075f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075fa:	ee07 3a90 	vmov	s15, r3
 80075fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007602:	ed97 6a03 	vldr	s12, [r7, #12]
 8007606:	eddf 5a67 	vldr	s11, [pc, #412]	; 80077a4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800760a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800760e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007612:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007616:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800761a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800761e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007622:	e065      	b.n	80076f0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007624:	697b      	ldr	r3, [r7, #20]
 8007626:	ee07 3a90 	vmov	s15, r3
 800762a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800762e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80077ac <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007632:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007636:	4b59      	ldr	r3, [pc, #356]	; (800779c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800763a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800763e:	ee07 3a90 	vmov	s15, r3
 8007642:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007646:	ed97 6a03 	vldr	s12, [r7, #12]
 800764a:	eddf 5a56 	vldr	s11, [pc, #344]	; 80077a4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800764e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007652:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007656:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800765a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800765e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007662:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007666:	e043      	b.n	80076f0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007668:	697b      	ldr	r3, [r7, #20]
 800766a:	ee07 3a90 	vmov	s15, r3
 800766e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007672:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80077b0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8007676:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800767a:	4b48      	ldr	r3, [pc, #288]	; (800779c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800767c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800767e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007682:	ee07 3a90 	vmov	s15, r3
 8007686:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800768a:	ed97 6a03 	vldr	s12, [r7, #12]
 800768e:	eddf 5a45 	vldr	s11, [pc, #276]	; 80077a4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007692:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007696:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800769a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800769e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80076a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076a6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80076aa:	e021      	b.n	80076f0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80076ac:	697b      	ldr	r3, [r7, #20]
 80076ae:	ee07 3a90 	vmov	s15, r3
 80076b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076b6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80077ac <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80076ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80076be:	4b37      	ldr	r3, [pc, #220]	; (800779c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80076c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076c6:	ee07 3a90 	vmov	s15, r3
 80076ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076ce:	ed97 6a03 	vldr	s12, [r7, #12]
 80076d2:	eddf 5a34 	vldr	s11, [pc, #208]	; 80077a4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80076d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80076da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80076de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80076e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80076e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076ea:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80076ee:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80076f0:	4b2a      	ldr	r3, [pc, #168]	; (800779c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80076f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076f4:	0a5b      	lsrs	r3, r3, #9
 80076f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80076fa:	ee07 3a90 	vmov	s15, r3
 80076fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007702:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007706:	ee37 7a87 	vadd.f32	s14, s15, s14
 800770a:	edd7 6a07 	vldr	s13, [r7, #28]
 800770e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007712:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007716:	ee17 2a90 	vmov	r2, s15
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800771e:	4b1f      	ldr	r3, [pc, #124]	; (800779c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007722:	0c1b      	lsrs	r3, r3, #16
 8007724:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007728:	ee07 3a90 	vmov	s15, r3
 800772c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007730:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007734:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007738:	edd7 6a07 	vldr	s13, [r7, #28]
 800773c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007740:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007744:	ee17 2a90 	vmov	r2, s15
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800774c:	4b13      	ldr	r3, [pc, #76]	; (800779c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800774e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007750:	0e1b      	lsrs	r3, r3, #24
 8007752:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007756:	ee07 3a90 	vmov	s15, r3
 800775a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800775e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007762:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007766:	edd7 6a07 	vldr	s13, [r7, #28]
 800776a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800776e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007772:	ee17 2a90 	vmov	r2, s15
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800777a:	e008      	b.n	800778e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	2200      	movs	r2, #0
 8007780:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	2200      	movs	r2, #0
 8007786:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	2200      	movs	r2, #0
 800778c:	609a      	str	r2, [r3, #8]
}
 800778e:	bf00      	nop
 8007790:	3724      	adds	r7, #36	; 0x24
 8007792:	46bd      	mov	sp, r7
 8007794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007798:	4770      	bx	lr
 800779a:	bf00      	nop
 800779c:	58024400 	.word	0x58024400
 80077a0:	03d09000 	.word	0x03d09000
 80077a4:	46000000 	.word	0x46000000
 80077a8:	4c742400 	.word	0x4c742400
 80077ac:	4a742400 	.word	0x4a742400
 80077b0:	4af42400 	.word	0x4af42400

080077b4 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 80077b4:	b480      	push	{r7}
 80077b6:	b089      	sub	sp, #36	; 0x24
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80077bc:	4ba0      	ldr	r3, [pc, #640]	; (8007a40 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80077be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077c0:	f003 0303 	and.w	r3, r3, #3
 80077c4:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 80077c6:	4b9e      	ldr	r3, [pc, #632]	; (8007a40 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80077c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077ca:	091b      	lsrs	r3, r3, #4
 80077cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80077d0:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80077d2:	4b9b      	ldr	r3, [pc, #620]	; (8007a40 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80077d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077d6:	f003 0301 	and.w	r3, r3, #1
 80077da:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80077dc:	4b98      	ldr	r3, [pc, #608]	; (8007a40 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80077de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077e0:	08db      	lsrs	r3, r3, #3
 80077e2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80077e6:	693a      	ldr	r2, [r7, #16]
 80077e8:	fb02 f303 	mul.w	r3, r2, r3
 80077ec:	ee07 3a90 	vmov	s15, r3
 80077f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077f4:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 80077f8:	697b      	ldr	r3, [r7, #20]
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	f000 8111 	beq.w	8007a22 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8007800:	69bb      	ldr	r3, [r7, #24]
 8007802:	2b02      	cmp	r3, #2
 8007804:	f000 8083 	beq.w	800790e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8007808:	69bb      	ldr	r3, [r7, #24]
 800780a:	2b02      	cmp	r3, #2
 800780c:	f200 80a1 	bhi.w	8007952 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8007810:	69bb      	ldr	r3, [r7, #24]
 8007812:	2b00      	cmp	r3, #0
 8007814:	d003      	beq.n	800781e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8007816:	69bb      	ldr	r3, [r7, #24]
 8007818:	2b01      	cmp	r3, #1
 800781a:	d056      	beq.n	80078ca <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800781c:	e099      	b.n	8007952 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800781e:	4b88      	ldr	r3, [pc, #544]	; (8007a40 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	f003 0320 	and.w	r3, r3, #32
 8007826:	2b00      	cmp	r3, #0
 8007828:	d02d      	beq.n	8007886 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800782a:	4b85      	ldr	r3, [pc, #532]	; (8007a40 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	08db      	lsrs	r3, r3, #3
 8007830:	f003 0303 	and.w	r3, r3, #3
 8007834:	4a83      	ldr	r2, [pc, #524]	; (8007a44 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8007836:	fa22 f303 	lsr.w	r3, r2, r3
 800783a:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800783c:	68bb      	ldr	r3, [r7, #8]
 800783e:	ee07 3a90 	vmov	s15, r3
 8007842:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007846:	697b      	ldr	r3, [r7, #20]
 8007848:	ee07 3a90 	vmov	s15, r3
 800784c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007850:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007854:	4b7a      	ldr	r3, [pc, #488]	; (8007a40 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007856:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007858:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800785c:	ee07 3a90 	vmov	s15, r3
 8007860:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007864:	ed97 6a03 	vldr	s12, [r7, #12]
 8007868:	eddf 5a77 	vldr	s11, [pc, #476]	; 8007a48 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800786c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007870:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007874:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007878:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800787c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007880:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007884:	e087      	b.n	8007996 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007886:	697b      	ldr	r3, [r7, #20]
 8007888:	ee07 3a90 	vmov	s15, r3
 800788c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007890:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8007a4c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8007894:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007898:	4b69      	ldr	r3, [pc, #420]	; (8007a40 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800789a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800789c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078a0:	ee07 3a90 	vmov	s15, r3
 80078a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80078a8:	ed97 6a03 	vldr	s12, [r7, #12]
 80078ac:	eddf 5a66 	vldr	s11, [pc, #408]	; 8007a48 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80078b0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80078b4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80078b8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80078bc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80078c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80078c4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80078c8:	e065      	b.n	8007996 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80078ca:	697b      	ldr	r3, [r7, #20]
 80078cc:	ee07 3a90 	vmov	s15, r3
 80078d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078d4:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8007a50 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 80078d8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80078dc:	4b58      	ldr	r3, [pc, #352]	; (8007a40 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80078de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078e4:	ee07 3a90 	vmov	s15, r3
 80078e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80078ec:	ed97 6a03 	vldr	s12, [r7, #12]
 80078f0:	eddf 5a55 	vldr	s11, [pc, #340]	; 8007a48 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80078f4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80078f8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80078fc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007900:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007904:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007908:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800790c:	e043      	b.n	8007996 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800790e:	697b      	ldr	r3, [r7, #20]
 8007910:	ee07 3a90 	vmov	s15, r3
 8007914:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007918:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8007a54 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800791c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007920:	4b47      	ldr	r3, [pc, #284]	; (8007a40 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007924:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007928:	ee07 3a90 	vmov	s15, r3
 800792c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007930:	ed97 6a03 	vldr	s12, [r7, #12]
 8007934:	eddf 5a44 	vldr	s11, [pc, #272]	; 8007a48 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007938:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800793c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007940:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007944:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007948:	ee67 7a27 	vmul.f32	s15, s14, s15
 800794c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007950:	e021      	b.n	8007996 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007952:	697b      	ldr	r3, [r7, #20]
 8007954:	ee07 3a90 	vmov	s15, r3
 8007958:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800795c:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8007a4c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8007960:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007964:	4b36      	ldr	r3, [pc, #216]	; (8007a40 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007968:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800796c:	ee07 3a90 	vmov	s15, r3
 8007970:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007974:	ed97 6a03 	vldr	s12, [r7, #12]
 8007978:	eddf 5a33 	vldr	s11, [pc, #204]	; 8007a48 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800797c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007980:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007984:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007988:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800798c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007990:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007994:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8007996:	4b2a      	ldr	r3, [pc, #168]	; (8007a40 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800799a:	0a5b      	lsrs	r3, r3, #9
 800799c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80079a0:	ee07 3a90 	vmov	s15, r3
 80079a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079a8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80079ac:	ee37 7a87 	vadd.f32	s14, s15, s14
 80079b0:	edd7 6a07 	vldr	s13, [r7, #28]
 80079b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80079b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80079bc:	ee17 2a90 	vmov	r2, s15
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 80079c4:	4b1e      	ldr	r3, [pc, #120]	; (8007a40 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80079c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079c8:	0c1b      	lsrs	r3, r3, #16
 80079ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80079ce:	ee07 3a90 	vmov	s15, r3
 80079d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079d6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80079da:	ee37 7a87 	vadd.f32	s14, s15, s14
 80079de:	edd7 6a07 	vldr	s13, [r7, #28]
 80079e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80079e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80079ea:	ee17 2a90 	vmov	r2, s15
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 80079f2:	4b13      	ldr	r3, [pc, #76]	; (8007a40 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80079f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079f6:	0e1b      	lsrs	r3, r3, #24
 80079f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80079fc:	ee07 3a90 	vmov	s15, r3
 8007a00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a04:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007a08:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007a0c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007a10:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007a14:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007a18:	ee17 2a90 	vmov	r2, s15
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8007a20:	e008      	b.n	8007a34 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	2200      	movs	r2, #0
 8007a26:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	2200      	movs	r2, #0
 8007a2c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	2200      	movs	r2, #0
 8007a32:	609a      	str	r2, [r3, #8]
}
 8007a34:	bf00      	nop
 8007a36:	3724      	adds	r7, #36	; 0x24
 8007a38:	46bd      	mov	sp, r7
 8007a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3e:	4770      	bx	lr
 8007a40:	58024400 	.word	0x58024400
 8007a44:	03d09000 	.word	0x03d09000
 8007a48:	46000000 	.word	0x46000000
 8007a4c:	4c742400 	.word	0x4c742400
 8007a50:	4a742400 	.word	0x4a742400
 8007a54:	4af42400 	.word	0x4af42400

08007a58 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007a58:	b580      	push	{r7, lr}
 8007a5a:	b084      	sub	sp, #16
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	6078      	str	r0, [r7, #4]
 8007a60:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007a62:	2300      	movs	r3, #0
 8007a64:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007a66:	4b53      	ldr	r3, [pc, #332]	; (8007bb4 <RCCEx_PLL2_Config+0x15c>)
 8007a68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a6a:	f003 0303 	and.w	r3, r3, #3
 8007a6e:	2b03      	cmp	r3, #3
 8007a70:	d101      	bne.n	8007a76 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8007a72:	2301      	movs	r3, #1
 8007a74:	e099      	b.n	8007baa <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007a76:	4b4f      	ldr	r3, [pc, #316]	; (8007bb4 <RCCEx_PLL2_Config+0x15c>)
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	4a4e      	ldr	r2, [pc, #312]	; (8007bb4 <RCCEx_PLL2_Config+0x15c>)
 8007a7c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007a80:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007a82:	f7f9 fda7 	bl	80015d4 <HAL_GetTick>
 8007a86:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007a88:	e008      	b.n	8007a9c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007a8a:	f7f9 fda3 	bl	80015d4 <HAL_GetTick>
 8007a8e:	4602      	mov	r2, r0
 8007a90:	68bb      	ldr	r3, [r7, #8]
 8007a92:	1ad3      	subs	r3, r2, r3
 8007a94:	2b02      	cmp	r3, #2
 8007a96:	d901      	bls.n	8007a9c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007a98:	2303      	movs	r3, #3
 8007a9a:	e086      	b.n	8007baa <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007a9c:	4b45      	ldr	r3, [pc, #276]	; (8007bb4 <RCCEx_PLL2_Config+0x15c>)
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d1f0      	bne.n	8007a8a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007aa8:	4b42      	ldr	r3, [pc, #264]	; (8007bb4 <RCCEx_PLL2_Config+0x15c>)
 8007aaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007aac:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	031b      	lsls	r3, r3, #12
 8007ab6:	493f      	ldr	r1, [pc, #252]	; (8007bb4 <RCCEx_PLL2_Config+0x15c>)
 8007ab8:	4313      	orrs	r3, r2
 8007aba:	628b      	str	r3, [r1, #40]	; 0x28
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	685b      	ldr	r3, [r3, #4]
 8007ac0:	3b01      	subs	r3, #1
 8007ac2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	689b      	ldr	r3, [r3, #8]
 8007aca:	3b01      	subs	r3, #1
 8007acc:	025b      	lsls	r3, r3, #9
 8007ace:	b29b      	uxth	r3, r3
 8007ad0:	431a      	orrs	r2, r3
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	68db      	ldr	r3, [r3, #12]
 8007ad6:	3b01      	subs	r3, #1
 8007ad8:	041b      	lsls	r3, r3, #16
 8007ada:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007ade:	431a      	orrs	r2, r3
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	691b      	ldr	r3, [r3, #16]
 8007ae4:	3b01      	subs	r3, #1
 8007ae6:	061b      	lsls	r3, r3, #24
 8007ae8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007aec:	4931      	ldr	r1, [pc, #196]	; (8007bb4 <RCCEx_PLL2_Config+0x15c>)
 8007aee:	4313      	orrs	r3, r2
 8007af0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007af2:	4b30      	ldr	r3, [pc, #192]	; (8007bb4 <RCCEx_PLL2_Config+0x15c>)
 8007af4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007af6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	695b      	ldr	r3, [r3, #20]
 8007afe:	492d      	ldr	r1, [pc, #180]	; (8007bb4 <RCCEx_PLL2_Config+0x15c>)
 8007b00:	4313      	orrs	r3, r2
 8007b02:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007b04:	4b2b      	ldr	r3, [pc, #172]	; (8007bb4 <RCCEx_PLL2_Config+0x15c>)
 8007b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b08:	f023 0220 	bic.w	r2, r3, #32
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	699b      	ldr	r3, [r3, #24]
 8007b10:	4928      	ldr	r1, [pc, #160]	; (8007bb4 <RCCEx_PLL2_Config+0x15c>)
 8007b12:	4313      	orrs	r3, r2
 8007b14:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007b16:	4b27      	ldr	r3, [pc, #156]	; (8007bb4 <RCCEx_PLL2_Config+0x15c>)
 8007b18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b1a:	4a26      	ldr	r2, [pc, #152]	; (8007bb4 <RCCEx_PLL2_Config+0x15c>)
 8007b1c:	f023 0310 	bic.w	r3, r3, #16
 8007b20:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007b22:	4b24      	ldr	r3, [pc, #144]	; (8007bb4 <RCCEx_PLL2_Config+0x15c>)
 8007b24:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007b26:	4b24      	ldr	r3, [pc, #144]	; (8007bb8 <RCCEx_PLL2_Config+0x160>)
 8007b28:	4013      	ands	r3, r2
 8007b2a:	687a      	ldr	r2, [r7, #4]
 8007b2c:	69d2      	ldr	r2, [r2, #28]
 8007b2e:	00d2      	lsls	r2, r2, #3
 8007b30:	4920      	ldr	r1, [pc, #128]	; (8007bb4 <RCCEx_PLL2_Config+0x15c>)
 8007b32:	4313      	orrs	r3, r2
 8007b34:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007b36:	4b1f      	ldr	r3, [pc, #124]	; (8007bb4 <RCCEx_PLL2_Config+0x15c>)
 8007b38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b3a:	4a1e      	ldr	r2, [pc, #120]	; (8007bb4 <RCCEx_PLL2_Config+0x15c>)
 8007b3c:	f043 0310 	orr.w	r3, r3, #16
 8007b40:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8007b42:	683b      	ldr	r3, [r7, #0]
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d106      	bne.n	8007b56 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007b48:	4b1a      	ldr	r3, [pc, #104]	; (8007bb4 <RCCEx_PLL2_Config+0x15c>)
 8007b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b4c:	4a19      	ldr	r2, [pc, #100]	; (8007bb4 <RCCEx_PLL2_Config+0x15c>)
 8007b4e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007b52:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007b54:	e00f      	b.n	8007b76 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8007b56:	683b      	ldr	r3, [r7, #0]
 8007b58:	2b01      	cmp	r3, #1
 8007b5a:	d106      	bne.n	8007b6a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007b5c:	4b15      	ldr	r3, [pc, #84]	; (8007bb4 <RCCEx_PLL2_Config+0x15c>)
 8007b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b60:	4a14      	ldr	r2, [pc, #80]	; (8007bb4 <RCCEx_PLL2_Config+0x15c>)
 8007b62:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007b66:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007b68:	e005      	b.n	8007b76 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007b6a:	4b12      	ldr	r3, [pc, #72]	; (8007bb4 <RCCEx_PLL2_Config+0x15c>)
 8007b6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b6e:	4a11      	ldr	r2, [pc, #68]	; (8007bb4 <RCCEx_PLL2_Config+0x15c>)
 8007b70:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007b74:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007b76:	4b0f      	ldr	r3, [pc, #60]	; (8007bb4 <RCCEx_PLL2_Config+0x15c>)
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	4a0e      	ldr	r2, [pc, #56]	; (8007bb4 <RCCEx_PLL2_Config+0x15c>)
 8007b7c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007b80:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007b82:	f7f9 fd27 	bl	80015d4 <HAL_GetTick>
 8007b86:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007b88:	e008      	b.n	8007b9c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007b8a:	f7f9 fd23 	bl	80015d4 <HAL_GetTick>
 8007b8e:	4602      	mov	r2, r0
 8007b90:	68bb      	ldr	r3, [r7, #8]
 8007b92:	1ad3      	subs	r3, r2, r3
 8007b94:	2b02      	cmp	r3, #2
 8007b96:	d901      	bls.n	8007b9c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007b98:	2303      	movs	r3, #3
 8007b9a:	e006      	b.n	8007baa <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007b9c:	4b05      	ldr	r3, [pc, #20]	; (8007bb4 <RCCEx_PLL2_Config+0x15c>)
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d0f0      	beq.n	8007b8a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007ba8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007baa:	4618      	mov	r0, r3
 8007bac:	3710      	adds	r7, #16
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	bd80      	pop	{r7, pc}
 8007bb2:	bf00      	nop
 8007bb4:	58024400 	.word	0x58024400
 8007bb8:	ffff0007 	.word	0xffff0007

08007bbc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007bbc:	b580      	push	{r7, lr}
 8007bbe:	b084      	sub	sp, #16
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	6078      	str	r0, [r7, #4]
 8007bc4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007bc6:	2300      	movs	r3, #0
 8007bc8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007bca:	4b53      	ldr	r3, [pc, #332]	; (8007d18 <RCCEx_PLL3_Config+0x15c>)
 8007bcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bce:	f003 0303 	and.w	r3, r3, #3
 8007bd2:	2b03      	cmp	r3, #3
 8007bd4:	d101      	bne.n	8007bda <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007bd6:	2301      	movs	r3, #1
 8007bd8:	e099      	b.n	8007d0e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007bda:	4b4f      	ldr	r3, [pc, #316]	; (8007d18 <RCCEx_PLL3_Config+0x15c>)
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	4a4e      	ldr	r2, [pc, #312]	; (8007d18 <RCCEx_PLL3_Config+0x15c>)
 8007be0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007be4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007be6:	f7f9 fcf5 	bl	80015d4 <HAL_GetTick>
 8007bea:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007bec:	e008      	b.n	8007c00 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8007bee:	f7f9 fcf1 	bl	80015d4 <HAL_GetTick>
 8007bf2:	4602      	mov	r2, r0
 8007bf4:	68bb      	ldr	r3, [r7, #8]
 8007bf6:	1ad3      	subs	r3, r2, r3
 8007bf8:	2b02      	cmp	r3, #2
 8007bfa:	d901      	bls.n	8007c00 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007bfc:	2303      	movs	r3, #3
 8007bfe:	e086      	b.n	8007d0e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007c00:	4b45      	ldr	r3, [pc, #276]	; (8007d18 <RCCEx_PLL3_Config+0x15c>)
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d1f0      	bne.n	8007bee <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007c0c:	4b42      	ldr	r3, [pc, #264]	; (8007d18 <RCCEx_PLL3_Config+0x15c>)
 8007c0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c10:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	051b      	lsls	r3, r3, #20
 8007c1a:	493f      	ldr	r1, [pc, #252]	; (8007d18 <RCCEx_PLL3_Config+0x15c>)
 8007c1c:	4313      	orrs	r3, r2
 8007c1e:	628b      	str	r3, [r1, #40]	; 0x28
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	685b      	ldr	r3, [r3, #4]
 8007c24:	3b01      	subs	r3, #1
 8007c26:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	689b      	ldr	r3, [r3, #8]
 8007c2e:	3b01      	subs	r3, #1
 8007c30:	025b      	lsls	r3, r3, #9
 8007c32:	b29b      	uxth	r3, r3
 8007c34:	431a      	orrs	r2, r3
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	68db      	ldr	r3, [r3, #12]
 8007c3a:	3b01      	subs	r3, #1
 8007c3c:	041b      	lsls	r3, r3, #16
 8007c3e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007c42:	431a      	orrs	r2, r3
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	691b      	ldr	r3, [r3, #16]
 8007c48:	3b01      	subs	r3, #1
 8007c4a:	061b      	lsls	r3, r3, #24
 8007c4c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007c50:	4931      	ldr	r1, [pc, #196]	; (8007d18 <RCCEx_PLL3_Config+0x15c>)
 8007c52:	4313      	orrs	r3, r2
 8007c54:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007c56:	4b30      	ldr	r3, [pc, #192]	; (8007d18 <RCCEx_PLL3_Config+0x15c>)
 8007c58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c5a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	695b      	ldr	r3, [r3, #20]
 8007c62:	492d      	ldr	r1, [pc, #180]	; (8007d18 <RCCEx_PLL3_Config+0x15c>)
 8007c64:	4313      	orrs	r3, r2
 8007c66:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007c68:	4b2b      	ldr	r3, [pc, #172]	; (8007d18 <RCCEx_PLL3_Config+0x15c>)
 8007c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c6c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	699b      	ldr	r3, [r3, #24]
 8007c74:	4928      	ldr	r1, [pc, #160]	; (8007d18 <RCCEx_PLL3_Config+0x15c>)
 8007c76:	4313      	orrs	r3, r2
 8007c78:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007c7a:	4b27      	ldr	r3, [pc, #156]	; (8007d18 <RCCEx_PLL3_Config+0x15c>)
 8007c7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c7e:	4a26      	ldr	r2, [pc, #152]	; (8007d18 <RCCEx_PLL3_Config+0x15c>)
 8007c80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007c84:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007c86:	4b24      	ldr	r3, [pc, #144]	; (8007d18 <RCCEx_PLL3_Config+0x15c>)
 8007c88:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007c8a:	4b24      	ldr	r3, [pc, #144]	; (8007d1c <RCCEx_PLL3_Config+0x160>)
 8007c8c:	4013      	ands	r3, r2
 8007c8e:	687a      	ldr	r2, [r7, #4]
 8007c90:	69d2      	ldr	r2, [r2, #28]
 8007c92:	00d2      	lsls	r2, r2, #3
 8007c94:	4920      	ldr	r1, [pc, #128]	; (8007d18 <RCCEx_PLL3_Config+0x15c>)
 8007c96:	4313      	orrs	r3, r2
 8007c98:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007c9a:	4b1f      	ldr	r3, [pc, #124]	; (8007d18 <RCCEx_PLL3_Config+0x15c>)
 8007c9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c9e:	4a1e      	ldr	r2, [pc, #120]	; (8007d18 <RCCEx_PLL3_Config+0x15c>)
 8007ca0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007ca4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8007ca6:	683b      	ldr	r3, [r7, #0]
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d106      	bne.n	8007cba <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007cac:	4b1a      	ldr	r3, [pc, #104]	; (8007d18 <RCCEx_PLL3_Config+0x15c>)
 8007cae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cb0:	4a19      	ldr	r2, [pc, #100]	; (8007d18 <RCCEx_PLL3_Config+0x15c>)
 8007cb2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007cb6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007cb8:	e00f      	b.n	8007cda <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8007cba:	683b      	ldr	r3, [r7, #0]
 8007cbc:	2b01      	cmp	r3, #1
 8007cbe:	d106      	bne.n	8007cce <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007cc0:	4b15      	ldr	r3, [pc, #84]	; (8007d18 <RCCEx_PLL3_Config+0x15c>)
 8007cc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cc4:	4a14      	ldr	r2, [pc, #80]	; (8007d18 <RCCEx_PLL3_Config+0x15c>)
 8007cc6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007cca:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007ccc:	e005      	b.n	8007cda <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007cce:	4b12      	ldr	r3, [pc, #72]	; (8007d18 <RCCEx_PLL3_Config+0x15c>)
 8007cd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cd2:	4a11      	ldr	r2, [pc, #68]	; (8007d18 <RCCEx_PLL3_Config+0x15c>)
 8007cd4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007cd8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007cda:	4b0f      	ldr	r3, [pc, #60]	; (8007d18 <RCCEx_PLL3_Config+0x15c>)
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	4a0e      	ldr	r2, [pc, #56]	; (8007d18 <RCCEx_PLL3_Config+0x15c>)
 8007ce0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007ce4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007ce6:	f7f9 fc75 	bl	80015d4 <HAL_GetTick>
 8007cea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007cec:	e008      	b.n	8007d00 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8007cee:	f7f9 fc71 	bl	80015d4 <HAL_GetTick>
 8007cf2:	4602      	mov	r2, r0
 8007cf4:	68bb      	ldr	r3, [r7, #8]
 8007cf6:	1ad3      	subs	r3, r2, r3
 8007cf8:	2b02      	cmp	r3, #2
 8007cfa:	d901      	bls.n	8007d00 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007cfc:	2303      	movs	r3, #3
 8007cfe:	e006      	b.n	8007d0e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007d00:	4b05      	ldr	r3, [pc, #20]	; (8007d18 <RCCEx_PLL3_Config+0x15c>)
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d0f0      	beq.n	8007cee <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007d0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d0e:	4618      	mov	r0, r3
 8007d10:	3710      	adds	r7, #16
 8007d12:	46bd      	mov	sp, r7
 8007d14:	bd80      	pop	{r7, pc}
 8007d16:	bf00      	nop
 8007d18:	58024400 	.word	0x58024400
 8007d1c:	ffff0007 	.word	0xffff0007

08007d20 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8007d20:	b580      	push	{r7, lr}
 8007d22:	b08a      	sub	sp, #40	; 0x28
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	6078      	str	r0, [r7, #4]
  uint32_t ckstr_bits;
  uint32_t syncen_bits;
  SAI_TypeDef *SaiBaseAddress;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d101      	bne.n	8007d32 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 8007d2e:	2301      	movs	r3, #1
 8007d30:	e283      	b.n	800823a <HAL_SAI_Init+0x51a>
  assert_param(IS_SAI_BLOCK_FIRST_BIT(hsai->Init.FirstBit));
  assert_param(IS_SAI_BLOCK_CLOCK_STROBING(hsai->Init.ClockStrobing));
  assert_param(IS_SAI_BLOCK_SYNCHRO(hsai->Init.Synchro));
#if defined(SAI_VER_V2_X) 
  /* SAI Peripheral version depends on STM32H7 device revision ID */
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 8007d32:	f7f9 fc5b 	bl	80015ec <HAL_GetREVID>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007d3c:	2b01      	cmp	r3, #1
 8007d3e:	d113      	bne.n	8007d68 <HAL_SAI_Init+0x48>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 or SAI4 sub-block A, in master RX mode with free protocol */
#if defined(SAI4)
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	4a94      	ldr	r2, [pc, #592]	; (8007f98 <HAL_SAI_Init+0x278>)
 8007d46:	4293      	cmp	r3, r2
 8007d48:	d004      	beq.n	8007d54 <HAL_SAI_Init+0x34>
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	4a93      	ldr	r2, [pc, #588]	; (8007f9c <HAL_SAI_Init+0x27c>)
 8007d50:	4293      	cmp	r3, r2
 8007d52:	d107      	bne.n	8007d64 <HAL_SAI_Init+0x44>
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	685b      	ldr	r3, [r3, #4]
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 8007d58:	2b01      	cmp	r3, #1
 8007d5a:	d103      	bne.n	8007d64 <HAL_SAI_Init+0x44>
         (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d001      	beq.n	8007d68 <HAL_SAI_Init+0x48>
    {
      return HAL_ERROR;
 8007d64:	2301      	movs	r3, #1
 8007d66:	e268      	b.n	800823a <HAL_SAI_Init+0x51a>
    }
#endif /* SAI4 */
  }

  /* Get the SAI base address according to the SAI handle */
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	4a8a      	ldr	r2, [pc, #552]	; (8007f98 <HAL_SAI_Init+0x278>)
 8007d6e:	4293      	cmp	r3, r2
 8007d70:	d004      	beq.n	8007d7c <HAL_SAI_Init+0x5c>
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	4a8a      	ldr	r2, [pc, #552]	; (8007fa0 <HAL_SAI_Init+0x280>)
 8007d78:	4293      	cmp	r3, r2
 8007d7a:	d102      	bne.n	8007d82 <HAL_SAI_Init+0x62>
  {
    SaiBaseAddress = SAI1;
 8007d7c:	4b89      	ldr	r3, [pc, #548]	; (8007fa4 <HAL_SAI_Init+0x284>)
 8007d7e:	61bb      	str	r3, [r7, #24]
 8007d80:	e028      	b.n	8007dd4 <HAL_SAI_Init+0xb4>
  }
#if defined(SAI2)
  else if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	4a88      	ldr	r2, [pc, #544]	; (8007fa8 <HAL_SAI_Init+0x288>)
 8007d88:	4293      	cmp	r3, r2
 8007d8a:	d004      	beq.n	8007d96 <HAL_SAI_Init+0x76>
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	4a86      	ldr	r2, [pc, #536]	; (8007fac <HAL_SAI_Init+0x28c>)
 8007d92:	4293      	cmp	r3, r2
 8007d94:	d102      	bne.n	8007d9c <HAL_SAI_Init+0x7c>
  {
    SaiBaseAddress = SAI2;
 8007d96:	4b86      	ldr	r3, [pc, #536]	; (8007fb0 <HAL_SAI_Init+0x290>)
 8007d98:	61bb      	str	r3, [r7, #24]
 8007d9a:	e01b      	b.n	8007dd4 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI2 */
#if defined(SAI3)
  else if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	4a84      	ldr	r2, [pc, #528]	; (8007fb4 <HAL_SAI_Init+0x294>)
 8007da2:	4293      	cmp	r3, r2
 8007da4:	d004      	beq.n	8007db0 <HAL_SAI_Init+0x90>
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	4a83      	ldr	r2, [pc, #524]	; (8007fb8 <HAL_SAI_Init+0x298>)
 8007dac:	4293      	cmp	r3, r2
 8007dae:	d102      	bne.n	8007db6 <HAL_SAI_Init+0x96>
  {
    SaiBaseAddress = SAI3;
 8007db0:	4b82      	ldr	r3, [pc, #520]	; (8007fbc <HAL_SAI_Init+0x29c>)
 8007db2:	61bb      	str	r3, [r7, #24]
 8007db4:	e00e      	b.n	8007dd4 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI3 */
#if defined(SAI4)
  else if ((hsai->Instance == SAI4_Block_A) || (hsai->Instance == SAI4_Block_B))
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	4a78      	ldr	r2, [pc, #480]	; (8007f9c <HAL_SAI_Init+0x27c>)
 8007dbc:	4293      	cmp	r3, r2
 8007dbe:	d004      	beq.n	8007dca <HAL_SAI_Init+0xaa>
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	4a7e      	ldr	r2, [pc, #504]	; (8007fc0 <HAL_SAI_Init+0x2a0>)
 8007dc6:	4293      	cmp	r3, r2
 8007dc8:	d102      	bne.n	8007dd0 <HAL_SAI_Init+0xb0>
  {
    SaiBaseAddress = SAI4;
 8007dca:	4b7e      	ldr	r3, [pc, #504]	; (8007fc4 <HAL_SAI_Init+0x2a4>)
 8007dcc:	61bb      	str	r3, [r7, #24]
 8007dce:	e001      	b.n	8007dd4 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI4 */
  else
  {
    return HAL_ERROR;
 8007dd0:	2301      	movs	r3, #1
 8007dd2:	e232      	b.n	800823a <HAL_SAI_Init+0x51a>
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 8007dda:	b2db      	uxtb	r3, r3
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d106      	bne.n	8007dee <HAL_SAI_Init+0xce>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	2200      	movs	r2, #0
 8007de4:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8007de8:	6878      	ldr	r0, [r7, #4]
 8007dea:	f7f9 fa55 	bl	8001298 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if(SAI_Disable(hsai) != HAL_OK)
 8007dee:	6878      	ldr	r0, [r7, #4]
 8007df0:	f000 fa36 	bl	8008260 <SAI_Disable>
 8007df4:	4603      	mov	r3, r0
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d001      	beq.n	8007dfe <HAL_SAI_Init+0xde>
  {
    return HAL_ERROR;
 8007dfa:	2301      	movs	r3, #1
 8007dfc:	e21d      	b.n	800823a <HAL_SAI_Init+0x51a>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	2202      	movs	r2, #2
 8007e02:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	68db      	ldr	r3, [r3, #12]
 8007e0a:	2b02      	cmp	r3, #2
 8007e0c:	d00c      	beq.n	8007e28 <HAL_SAI_Init+0x108>
 8007e0e:	2b02      	cmp	r3, #2
 8007e10:	d80d      	bhi.n	8007e2e <HAL_SAI_Init+0x10e>
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d002      	beq.n	8007e1c <HAL_SAI_Init+0xfc>
 8007e16:	2b01      	cmp	r3, #1
 8007e18:	d003      	beq.n	8007e22 <HAL_SAI_Init+0x102>
 8007e1a:	e008      	b.n	8007e2e <HAL_SAI_Init+0x10e>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 8007e1c:	2300      	movs	r3, #0
 8007e1e:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8007e20:	e008      	b.n	8007e34 <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8007e22:	2310      	movs	r3, #16
 8007e24:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8007e26:	e005      	b.n	8007e34 <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8007e28:	2320      	movs	r3, #32
 8007e2a:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8007e2c:	e002      	b.n	8007e34 <HAL_SAI_Init+0x114>
    default:
      tmpregisterGCR = 0;
 8007e2e:	2300      	movs	r3, #0
 8007e30:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8007e32:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	689b      	ldr	r3, [r3, #8]
 8007e38:	2b05      	cmp	r3, #5
 8007e3a:	d832      	bhi.n	8007ea2 <HAL_SAI_Init+0x182>
 8007e3c:	a201      	add	r2, pc, #4	; (adr r2, 8007e44 <HAL_SAI_Init+0x124>)
 8007e3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e42:	bf00      	nop
 8007e44:	08007e5d 	.word	0x08007e5d
 8007e48:	08007e63 	.word	0x08007e63
 8007e4c:	08007e6b 	.word	0x08007e6b
 8007e50:	08007e73 	.word	0x08007e73
 8007e54:	08007e83 	.word	0x08007e83
 8007e58:	08007e93 	.word	0x08007e93
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 8007e5c:	2300      	movs	r3, #0
 8007e5e:	61fb      	str	r3, [r7, #28]
      break;
 8007e60:	e022      	b.n	8007ea8 <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8007e62:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007e66:	61fb      	str	r3, [r7, #28]
      break;
 8007e68:	e01e      	b.n	8007ea8 <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8007e6a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007e6e:	61fb      	str	r3, [r7, #28]
      break;
 8007e70:	e01a      	b.n	8007ea8 <HAL_SAI_Init+0x188>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8007e72:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007e76:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8007e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e7a:	f043 0301 	orr.w	r3, r3, #1
 8007e7e:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8007e80:	e012      	b.n	8007ea8 <HAL_SAI_Init+0x188>
#endif /* SAI2 */
#if defined(SAI3)
    case SAI_SYNCHRONOUS_EXT_SAI3 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8007e82:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007e86:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
 8007e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e8a:	f043 0302 	orr.w	r3, r3, #2
 8007e8e:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8007e90:	e00a      	b.n	8007ea8 <HAL_SAI_Init+0x188>
#endif /* SAI3 */
#if defined(SAI4)
    case SAI_SYNCHRONOUS_EXT_SAI4 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8007e92:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007e96:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
 8007e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e9a:	f043 0303 	orr.w	r3, r3, #3
 8007e9e:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8007ea0:	e002      	b.n	8007ea8 <HAL_SAI_Init+0x188>
#endif /* SAI4 */
    default:
      syncen_bits = 0;
 8007ea2:	2300      	movs	r3, #0
 8007ea4:	61fb      	str	r3, [r7, #28]
      break;
 8007ea6:	bf00      	nop
  }

  /* Set the SAI Block Synchro Configuration */
  SaiBaseAddress->GCR = tmpregisterGCR;
 8007ea8:	69bb      	ldr	r3, [r7, #24]
 8007eaa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007eac:	601a      	str	r2, [r3, #0]

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	6a1b      	ldr	r3, [r3, #32]
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	f000 80ba 	beq.w	800802c <HAL_SAI_Init+0x30c>
  {
    uint32_t freq = 0;
 8007eb8:	2300      	movs	r3, #0
 8007eba:	617b      	str	r3, [r7, #20]
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	4a35      	ldr	r2, [pc, #212]	; (8007f98 <HAL_SAI_Init+0x278>)
 8007ec2:	4293      	cmp	r3, r2
 8007ec4:	d004      	beq.n	8007ed0 <HAL_SAI_Init+0x1b0>
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	4a35      	ldr	r2, [pc, #212]	; (8007fa0 <HAL_SAI_Init+0x280>)
 8007ecc:	4293      	cmp	r3, r2
 8007ece:	d104      	bne.n	8007eda <HAL_SAI_Init+0x1ba>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8007ed0:	f44f 7080 	mov.w	r0, #256	; 0x100
 8007ed4:	f7fe fcde 	bl	8006894 <HAL_RCCEx_GetPeriphCLKFreq>
 8007ed8:	6178      	str	r0, [r7, #20]
    }

#if defined(SAI2)
#if defined(RCC_PERIPHCLK_SAI2)
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	4a32      	ldr	r2, [pc, #200]	; (8007fa8 <HAL_SAI_Init+0x288>)
 8007ee0:	4293      	cmp	r3, r2
 8007ee2:	d004      	beq.n	8007eee <HAL_SAI_Init+0x1ce>
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	4a30      	ldr	r2, [pc, #192]	; (8007fac <HAL_SAI_Init+0x28c>)
 8007eea:	4293      	cmp	r3, r2
 8007eec:	d104      	bne.n	8007ef8 <HAL_SAI_Init+0x1d8>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8007eee:	f44f 7000 	mov.w	r0, #512	; 0x200
 8007ef2:	f7fe fccf 	bl	8006894 <HAL_RCCEx_GetPeriphCLKFreq>
 8007ef6:	6178      	str	r0, [r7, #20]
    }
#endif /* RCC_PERIPHCLK_SAI2 */
#endif /* SAI2 */

#if defined(SAI3)
    if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	4a2d      	ldr	r2, [pc, #180]	; (8007fb4 <HAL_SAI_Init+0x294>)
 8007efe:	4293      	cmp	r3, r2
 8007f00:	d004      	beq.n	8007f0c <HAL_SAI_Init+0x1ec>
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	4a2c      	ldr	r2, [pc, #176]	; (8007fb8 <HAL_SAI_Init+0x298>)
 8007f08:	4293      	cmp	r3, r2
 8007f0a:	d104      	bne.n	8007f16 <HAL_SAI_Init+0x1f6>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
 8007f0c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8007f10:	f7fe fcc0 	bl	8006894 <HAL_RCCEx_GetPeriphCLKFreq>
 8007f14:	6178      	str	r0, [r7, #20]
    }
#endif /* SAI3 */
#if defined(SAI4)
    if (hsai->Instance == SAI4_Block_A)
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	4a20      	ldr	r2, [pc, #128]	; (8007f9c <HAL_SAI_Init+0x27c>)
 8007f1c:	4293      	cmp	r3, r2
 8007f1e:	d104      	bne.n	8007f2a <HAL_SAI_Init+0x20a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
 8007f20:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8007f24:	f7fe fcb6 	bl	8006894 <HAL_RCCEx_GetPeriphCLKFreq>
 8007f28:	6178      	str	r0, [r7, #20]
    }
    if (hsai->Instance == SAI4_Block_B)
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	4a24      	ldr	r2, [pc, #144]	; (8007fc0 <HAL_SAI_Init+0x2a0>)
 8007f30:	4293      	cmp	r3, r2
 8007f32:	d104      	bne.n	8007f3e <HAL_SAI_Init+0x21e>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
 8007f34:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8007f38:	f7fe fcac 	bl	8006894 <HAL_RCCEx_GetPeriphCLKFreq>
 8007f3c:	6178      	str	r0, [r7, #20]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	699b      	ldr	r3, [r3, #24]
 8007f42:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007f46:	d120      	bne.n	8007f8a <HAL_SAI_Init+0x26a>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f4c:	2b04      	cmp	r3, #4
 8007f4e:	d102      	bne.n	8007f56 <HAL_SAI_Init+0x236>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = 64U;
 8007f50:	2340      	movs	r3, #64	; 0x40
 8007f52:	60fb      	str	r3, [r7, #12]
 8007f54:	e00a      	b.n	8007f6c <HAL_SAI_Init+0x24c>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f5a:	2b08      	cmp	r3, #8
 8007f5c:	d103      	bne.n	8007f66 <HAL_SAI_Init+0x246>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = 256U;
 8007f5e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007f62:	60fb      	str	r3, [r7, #12]
 8007f64:	e002      	b.n	8007f6c <HAL_SAI_Init+0x24c>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f6a:	60fb      	str	r3, [r7, #12]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 8007f6c:	697a      	ldr	r2, [r7, #20]
 8007f6e:	4613      	mov	r3, r2
 8007f70:	009b      	lsls	r3, r3, #2
 8007f72:	4413      	add	r3, r2
 8007f74:	005b      	lsls	r3, r3, #1
 8007f76:	4619      	mov	r1, r3
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	6a1b      	ldr	r3, [r3, #32]
 8007f7c:	68fa      	ldr	r2, [r7, #12]
 8007f7e:	fb02 f303 	mul.w	r3, r2, r3
 8007f82:	fbb1 f3f3 	udiv	r3, r1, r3
 8007f86:	613b      	str	r3, [r7, #16]
 8007f88:	e02f      	b.n	8007fea <HAL_SAI_Init+0x2ca>
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f8e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007f92:	d119      	bne.n	8007fc8 <HAL_SAI_Init+0x2a8>
 8007f94:	2302      	movs	r3, #2
 8007f96:	e018      	b.n	8007fca <HAL_SAI_Init+0x2aa>
 8007f98:	40015804 	.word	0x40015804
 8007f9c:	58005404 	.word	0x58005404
 8007fa0:	40015824 	.word	0x40015824
 8007fa4:	40015800 	.word	0x40015800
 8007fa8:	40015c04 	.word	0x40015c04
 8007fac:	40015c24 	.word	0x40015c24
 8007fb0:	40015c00 	.word	0x40015c00
 8007fb4:	40016004 	.word	0x40016004
 8007fb8:	40016024 	.word	0x40016024
 8007fbc:	40016000 	.word	0x40016000
 8007fc0:	58005424 	.word	0x58005424
 8007fc4:	58005400 	.word	0x58005400
 8007fc8:	2301      	movs	r3, #1
 8007fca:	60bb      	str	r3, [r7, #8]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 8007fcc:	697a      	ldr	r2, [r7, #20]
 8007fce:	4613      	mov	r3, r2
 8007fd0:	009b      	lsls	r3, r3, #2
 8007fd2:	4413      	add	r3, r2
 8007fd4:	005b      	lsls	r3, r3, #1
 8007fd6:	4619      	mov	r1, r3
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	6a1b      	ldr	r3, [r3, #32]
 8007fdc:	68ba      	ldr	r2, [r7, #8]
 8007fde:	fb02 f303 	mul.w	r3, r2, r3
 8007fe2:	021b      	lsls	r3, r3, #8
 8007fe4:	fbb1 f3f3 	udiv	r3, r1, r3
 8007fe8:	613b      	str	r3, [r7, #16]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 8007fea:	693b      	ldr	r3, [r7, #16]
 8007fec:	4a95      	ldr	r2, [pc, #596]	; (8008244 <HAL_SAI_Init+0x524>)
 8007fee:	fba2 2303 	umull	r2, r3, r2, r3
 8007ff2:	08da      	lsrs	r2, r3, #3
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 8007ff8:	6939      	ldr	r1, [r7, #16]
 8007ffa:	4b92      	ldr	r3, [pc, #584]	; (8008244 <HAL_SAI_Init+0x524>)
 8007ffc:	fba3 2301 	umull	r2, r3, r3, r1
 8008000:	08da      	lsrs	r2, r3, #3
 8008002:	4613      	mov	r3, r2
 8008004:	009b      	lsls	r3, r3, #2
 8008006:	4413      	add	r3, r2
 8008008:	005b      	lsls	r3, r3, #1
 800800a:	1aca      	subs	r2, r1, r3
 800800c:	2a08      	cmp	r2, #8
 800800e:	d904      	bls.n	800801a <HAL_SAI_Init+0x2fa>
    {
      hsai->Init.Mckdiv += 1U;
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008014:	1c5a      	adds	r2, r3, #1
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800801e:	2b04      	cmp	r3, #4
 8008020:	d104      	bne.n	800802c <HAL_SAI_Init+0x30c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008026:	085a      	lsrs	r2, r3, #1
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	685b      	ldr	r3, [r3, #4]
 8008030:	2b00      	cmp	r3, #0
 8008032:	d003      	beq.n	800803c <HAL_SAI_Init+0x31c>
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	685b      	ldr	r3, [r3, #4]
 8008038:	2b02      	cmp	r3, #2
 800803a:	d109      	bne.n	8008050 <HAL_SAI_Init+0x330>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008040:	2b01      	cmp	r3, #1
 8008042:	d101      	bne.n	8008048 <HAL_SAI_Init+0x328>
 8008044:	2300      	movs	r3, #0
 8008046:	e001      	b.n	800804c <HAL_SAI_Init+0x32c>
 8008048:	f44f 7300 	mov.w	r3, #512	; 0x200
 800804c:	623b      	str	r3, [r7, #32]
 800804e:	e008      	b.n	8008062 <HAL_SAI_Init+0x342>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008054:	2b01      	cmp	r3, #1
 8008056:	d102      	bne.n	800805e <HAL_SAI_Init+0x33e>
 8008058:	f44f 7300 	mov.w	r3, #512	; 0x200
 800805c:	e000      	b.n	8008060 <HAL_SAI_Init+0x340>
 800805e:	2300      	movs	r3, #0
 8008060:	623b      	str	r3, [r7, #32]

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
#if defined(SAI_VER_V2_X) /* SAI Peripheral version depends on STM32H7 device revision ID */

  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 8008062:	f7f9 fac3 	bl	80015ec <HAL_GetREVID>
 8008066:	4603      	mov	r3, r0
 8008068:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800806c:	d331      	bcc.n	80080d2 <HAL_SAI_Init+0x3b2>
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	6819      	ldr	r1, [r3, #0]
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681a      	ldr	r2, [r3, #0]
 8008078:	4b73      	ldr	r3, [pc, #460]	; (8008248 <HAL_SAI_Init+0x528>)
 800807a:	400b      	ands	r3, r1
 800807c:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                             SAI_xCR1_MCKEN);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	6819      	ldr	r1, [r3, #0]
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	685a      	ldr	r2, [r3, #4]
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800808c:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008092:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008098:	431a      	orrs	r2, r3
 800809a:	6a3b      	ldr	r3, [r7, #32]
 800809c:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 800809e:	69fb      	ldr	r3, [r7, #28]
 80080a0:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                            ckstr_bits | syncen_bits |                             \
 80080a6:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	695b      	ldr	r3, [r3, #20]
 80080ac:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80080b2:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080b8:	051b      	lsls	r3, r3, #20
 80080ba:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 80080c0:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	691b      	ldr	r3, [r3, #16]
 80080c6:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	430a      	orrs	r2, r1
 80080ce:	601a      	str	r2, [r3, #0]
 80080d0:	e02d      	b.n	800812e <HAL_SAI_Init+0x40e>
  }
  else /* STM32H7xx Rev.Y */
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	6819      	ldr	r1, [r3, #0]
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681a      	ldr	r2, [r3, #0]
 80080dc:	4b5b      	ldr	r3, [pc, #364]	; (800824c <HAL_SAI_Init+0x52c>)
 80080de:	400b      	ands	r3, r1
 80080e0:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	6819      	ldr	r1, [r3, #0]
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	685a      	ldr	r2, [r3, #4]
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080f0:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80080f6:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80080fc:	431a      	orrs	r2, r3
 80080fe:	6a3b      	ldr	r3, [r7, #32]
 8008100:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 8008102:	69fb      	ldr	r3, [r7, #28]
 8008104:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                            ckstr_bits | syncen_bits |                             \
 800810a:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	695b      	ldr	r3, [r3, #20]
 8008110:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8008116:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800811c:	051b      	lsls	r3, r3, #20
 800811e:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling);
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8008124:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	430a      	orrs	r2, r1
 800812c:	601a      	str	r2, [r3, #0]
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
#endif /* SAI_VER_V2_X */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	6859      	ldr	r1, [r3, #4]
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681a      	ldr	r2, [r3, #0]
 8008138:	4b45      	ldr	r3, [pc, #276]	; (8008250 <HAL_SAI_Init+0x530>)
 800813a:	400b      	ands	r3, r1
 800813c:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	6859      	ldr	r1, [r3, #4]
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	69da      	ldr	r2, [r3, #28]
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800814c:	431a      	orrs	r2, r3
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008152:	431a      	orrs	r2, r3
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	430a      	orrs	r2, r1
 800815a:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	6899      	ldr	r1, [r3, #8]
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681a      	ldr	r2, [r3, #0]
 8008166:	4b3b      	ldr	r3, [pc, #236]	; (8008254 <HAL_SAI_Init+0x534>)
 8008168:	400b      	ands	r3, r1
 800816a:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	6899      	ldr	r1, [r3, #8]
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008176:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800817c:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                           hsai->FrameInit.FSOffset |
 8008182:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                           hsai->FrameInit.FSDefinition |
 8008188:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800818e:	3b01      	subs	r3, #1
 8008190:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8008192:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	430a      	orrs	r2, r1
 800819a:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	68d9      	ldr	r1, [r3, #12]
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681a      	ldr	r2, [r3, #0]
 80081a6:	f24f 0320 	movw	r3, #61472	; 0xf020
 80081aa:	400b      	ands	r3, r1
 80081ac:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	68d9      	ldr	r1, [r3, #12]
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80081bc:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80081c2:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 80081c4:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081ca:	3b01      	subs	r3, #1
 80081cc:	021b      	lsls	r3, r3, #8
 80081ce:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	430a      	orrs	r2, r1
 80081d6:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
#if defined(SAI4)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	4a1e      	ldr	r2, [pc, #120]	; (8008258 <HAL_SAI_Init+0x538>)
 80081de:	4293      	cmp	r3, r2
 80081e0:	d004      	beq.n	80081ec <HAL_SAI_Init+0x4cc>
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	4a1d      	ldr	r2, [pc, #116]	; (800825c <HAL_SAI_Init+0x53c>)
 80081e8:	4293      	cmp	r3, r2
 80081ea:	d119      	bne.n	8008220 <HAL_SAI_Init+0x500>
#else
  if (hsai->Instance == SAI1_Block_A)
#endif /* SAI4 */
  {
    /* Disable PDM interface */
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 80081ec:	69bb      	ldr	r3, [r7, #24]
 80081ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081f0:	f023 0201 	bic.w	r2, r3, #1
 80081f4:	69bb      	ldr	r3, [r7, #24]
 80081f6:	645a      	str	r2, [r3, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80081fe:	2b01      	cmp	r3, #1
 8008200:	d10e      	bne.n	8008220 <HAL_SAI_Init+0x500>
    {
      /* Configure and enable PDM interface */
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800820a:	3b01      	subs	r3, #1
 800820c:	011b      	lsls	r3, r3, #4
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800820e:	431a      	orrs	r2, r3
 8008210:	69bb      	ldr	r3, [r7, #24]
 8008212:	645a      	str	r2, [r3, #68]	; 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
 8008214:	69bb      	ldr	r3, [r7, #24]
 8008216:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008218:	f043 0201 	orr.w	r2, r3, #1
 800821c:	69bb      	ldr	r3, [r7, #24]
 800821e:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	2200      	movs	r2, #0
 8008224:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	2201      	movs	r2, #1
 800822c:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	2200      	movs	r2, #0
 8008234:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

  return HAL_OK;
 8008238:	2300      	movs	r3, #0
}
 800823a:	4618      	mov	r0, r3
 800823c:	3728      	adds	r7, #40	; 0x28
 800823e:	46bd      	mov	sp, r7
 8008240:	bd80      	pop	{r7, pc}
 8008242:	bf00      	nop
 8008244:	cccccccd 	.word	0xcccccccd
 8008248:	f005c010 	.word	0xf005c010
 800824c:	f805c010 	.word	0xf805c010
 8008250:	ffff1ff0 	.word	0xffff1ff0
 8008254:	fff88000 	.word	0xfff88000
 8008258:	40015804 	.word	0x40015804
 800825c:	58005404 	.word	0x58005404

08008260 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8008260:	b480      	push	{r7}
 8008262:	b085      	sub	sp, #20
 8008264:	af00      	add	r7, sp, #0
 8008266:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8008268:	4b18      	ldr	r3, [pc, #96]	; (80082cc <SAI_Disable+0x6c>)
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	4a18      	ldr	r2, [pc, #96]	; (80082d0 <SAI_Disable+0x70>)
 800826e:	fba2 2303 	umull	r2, r3, r2, r3
 8008272:	0b1b      	lsrs	r3, r3, #12
 8008274:	009b      	lsls	r3, r3, #2
 8008276:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8008278:	2300      	movs	r3, #0
 800827a:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	681a      	ldr	r2, [r3, #0]
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800828a:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	2b00      	cmp	r3, #0
 8008290:	d10a      	bne.n	80082a8 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008298:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      status = HAL_TIMEOUT;
 80082a2:	2303      	movs	r3, #3
 80082a4:	72fb      	strb	r3, [r7, #11]
      break;
 80082a6:	e009      	b.n	80082bc <SAI_Disable+0x5c>
    }
    count--;
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	3b01      	subs	r3, #1
 80082ac:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d1e7      	bne.n	800828c <SAI_Disable+0x2c>

  return status;
 80082bc:	7afb      	ldrb	r3, [r7, #11]
}
 80082be:	4618      	mov	r0, r3
 80082c0:	3714      	adds	r7, #20
 80082c2:	46bd      	mov	sp, r7
 80082c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c8:	4770      	bx	lr
 80082ca:	bf00      	nop
 80082cc:	24000400 	.word	0x24000400
 80082d0:	95cbec1b 	.word	0x95cbec1b

080082d4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80082d4:	b580      	push	{r7, lr}
 80082d6:	b082      	sub	sp, #8
 80082d8:	af00      	add	r7, sp, #0
 80082da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d101      	bne.n	80082e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80082e2:	2301      	movs	r3, #1
 80082e4:	e042      	b.n	800836c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d106      	bne.n	80082fe <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	2200      	movs	r2, #0
 80082f4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80082f8:	6878      	ldr	r0, [r7, #4]
 80082fa:	f7f8 ff1b 	bl	8001134 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	2224      	movs	r2, #36	; 0x24
 8008302:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	681a      	ldr	r2, [r3, #0]
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	f022 0201 	bic.w	r2, r2, #1
 8008314:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008316:	6878      	ldr	r0, [r7, #4]
 8008318:	f000 fb7c 	bl	8008a14 <UART_SetConfig>
 800831c:	4603      	mov	r3, r0
 800831e:	2b01      	cmp	r3, #1
 8008320:	d101      	bne.n	8008326 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8008322:	2301      	movs	r3, #1
 8008324:	e022      	b.n	800836c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800832a:	2b00      	cmp	r3, #0
 800832c:	d002      	beq.n	8008334 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800832e:	6878      	ldr	r0, [r7, #4]
 8008330:	f001 f8d0 	bl	80094d4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	685a      	ldr	r2, [r3, #4]
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008342:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	689a      	ldr	r2, [r3, #8]
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008352:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	681a      	ldr	r2, [r3, #0]
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	f042 0201 	orr.w	r2, r2, #1
 8008362:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008364:	6878      	ldr	r0, [r7, #4]
 8008366:	f001 f957 	bl	8009618 <UART_CheckIdleState>
 800836a:	4603      	mov	r3, r0
}
 800836c:	4618      	mov	r0, r3
 800836e:	3708      	adds	r7, #8
 8008370:	46bd      	mov	sp, r7
 8008372:	bd80      	pop	{r7, pc}

08008374 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008374:	b580      	push	{r7, lr}
 8008376:	b084      	sub	sp, #16
 8008378:	af00      	add	r7, sp, #0
 800837a:	60f8      	str	r0, [r7, #12]
 800837c:	60b9      	str	r1, [r7, #8]
 800837e:	4613      	mov	r3, r2
 8008380:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008388:	2b20      	cmp	r3, #32
 800838a:	d168      	bne.n	800845e <HAL_UART_Transmit_DMA+0xea>
  {
    if ((pData == NULL) || (Size == 0U))
 800838c:	68bb      	ldr	r3, [r7, #8]
 800838e:	2b00      	cmp	r3, #0
 8008390:	d002      	beq.n	8008398 <HAL_UART_Transmit_DMA+0x24>
 8008392:	88fb      	ldrh	r3, [r7, #6]
 8008394:	2b00      	cmp	r3, #0
 8008396:	d101      	bne.n	800839c <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8008398:	2301      	movs	r3, #1
 800839a:	e061      	b.n	8008460 <HAL_UART_Transmit_DMA+0xec>
    }

    __HAL_LOCK(huart);
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80083a2:	2b01      	cmp	r3, #1
 80083a4:	d101      	bne.n	80083aa <HAL_UART_Transmit_DMA+0x36>
 80083a6:	2302      	movs	r3, #2
 80083a8:	e05a      	b.n	8008460 <HAL_UART_Transmit_DMA+0xec>
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	2201      	movs	r2, #1
 80083ae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	68ba      	ldr	r2, [r7, #8]
 80083b6:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	88fa      	ldrh	r2, [r7, #6]
 80083bc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	88fa      	ldrh	r2, [r7, #6]
 80083c4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	2200      	movs	r2, #0
 80083cc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	2221      	movs	r2, #33	; 0x21
 80083d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d02c      	beq.n	800843a <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80083e4:	4a20      	ldr	r2, [pc, #128]	; (8008468 <HAL_UART_Transmit_DMA+0xf4>)
 80083e6:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80083ec:	4a1f      	ldr	r2, [pc, #124]	; (800846c <HAL_UART_Transmit_DMA+0xf8>)
 80083ee:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80083f4:	4a1e      	ldr	r2, [pc, #120]	; (8008470 <HAL_UART_Transmit_DMA+0xfc>)
 80083f6:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80083fc:	2200      	movs	r2, #0
 80083fe:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008408:	4619      	mov	r1, r3
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	3328      	adds	r3, #40	; 0x28
 8008410:	461a      	mov	r2, r3
 8008412:	88fb      	ldrh	r3, [r7, #6]
 8008414:	f7f9 fe4c 	bl	80020b0 <HAL_DMA_Start_IT>
 8008418:	4603      	mov	r3, r0
 800841a:	2b00      	cmp	r3, #0
 800841c:	d00d      	beq.n	800843a <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	2210      	movs	r2, #16
 8008422:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	2200      	movs	r2, #0
 800842a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	2220      	movs	r2, #32
 8008432:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 8008436:	2301      	movs	r3, #1
 8008438:	e012      	b.n	8008460 <HAL_UART_Transmit_DMA+0xec>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	2240      	movs	r2, #64	; 0x40
 8008440:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	2200      	movs	r2, #0
 8008446:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	689a      	ldr	r2, [r3, #8]
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008458:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 800845a:	2300      	movs	r3, #0
 800845c:	e000      	b.n	8008460 <HAL_UART_Transmit_DMA+0xec>
  }
  else
  {
    return HAL_BUSY;
 800845e:	2302      	movs	r3, #2
  }
}
 8008460:	4618      	mov	r0, r3
 8008462:	3710      	adds	r7, #16
 8008464:	46bd      	mov	sp, r7
 8008466:	bd80      	pop	{r7, pc}
 8008468:	08009851 	.word	0x08009851
 800846c:	080098a1 	.word	0x080098a1
 8008470:	080098bd 	.word	0x080098bd

08008474 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008474:	b580      	push	{r7, lr}
 8008476:	b088      	sub	sp, #32
 8008478:	af00      	add	r7, sp, #0
 800847a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	69db      	ldr	r3, [r3, #28]
 8008482:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	689b      	ldr	r3, [r3, #8]
 8008492:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008494:	69fa      	ldr	r2, [r7, #28]
 8008496:	f640 030f 	movw	r3, #2063	; 0x80f
 800849a:	4013      	ands	r3, r2
 800849c:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800849e:	693b      	ldr	r3, [r7, #16]
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d118      	bne.n	80084d6 <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80084a4:	69fb      	ldr	r3, [r7, #28]
 80084a6:	f003 0320 	and.w	r3, r3, #32
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d013      	beq.n	80084d6 <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80084ae:	69bb      	ldr	r3, [r7, #24]
 80084b0:	f003 0320 	and.w	r3, r3, #32
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d104      	bne.n	80084c2 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80084b8:	697b      	ldr	r3, [r7, #20]
 80084ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d009      	beq.n	80084d6 <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	f000 8282 	beq.w	80089d0 <HAL_UART_IRQHandler+0x55c>
      {
        huart->RxISR(huart);
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084d0:	6878      	ldr	r0, [r7, #4]
 80084d2:	4798      	blx	r3
      }
      return;
 80084d4:	e27c      	b.n	80089d0 <HAL_UART_IRQHandler+0x55c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80084d6:	693b      	ldr	r3, [r7, #16]
 80084d8:	2b00      	cmp	r3, #0
 80084da:	f000 80ef 	beq.w	80086bc <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80084de:	697a      	ldr	r2, [r7, #20]
 80084e0:	4b73      	ldr	r3, [pc, #460]	; (80086b0 <HAL_UART_IRQHandler+0x23c>)
 80084e2:	4013      	ands	r3, r2
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d105      	bne.n	80084f4 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80084e8:	69ba      	ldr	r2, [r7, #24]
 80084ea:	4b72      	ldr	r3, [pc, #456]	; (80086b4 <HAL_UART_IRQHandler+0x240>)
 80084ec:	4013      	ands	r3, r2
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	f000 80e4 	beq.w	80086bc <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80084f4:	69fb      	ldr	r3, [r7, #28]
 80084f6:	f003 0301 	and.w	r3, r3, #1
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d010      	beq.n	8008520 <HAL_UART_IRQHandler+0xac>
 80084fe:	69bb      	ldr	r3, [r7, #24]
 8008500:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008504:	2b00      	cmp	r3, #0
 8008506:	d00b      	beq.n	8008520 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	2201      	movs	r2, #1
 800850e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008516:	f043 0201 	orr.w	r2, r3, #1
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008520:	69fb      	ldr	r3, [r7, #28]
 8008522:	f003 0302 	and.w	r3, r3, #2
 8008526:	2b00      	cmp	r3, #0
 8008528:	d010      	beq.n	800854c <HAL_UART_IRQHandler+0xd8>
 800852a:	697b      	ldr	r3, [r7, #20]
 800852c:	f003 0301 	and.w	r3, r3, #1
 8008530:	2b00      	cmp	r3, #0
 8008532:	d00b      	beq.n	800854c <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	2202      	movs	r2, #2
 800853a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008542:	f043 0204 	orr.w	r2, r3, #4
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800854c:	69fb      	ldr	r3, [r7, #28]
 800854e:	f003 0304 	and.w	r3, r3, #4
 8008552:	2b00      	cmp	r3, #0
 8008554:	d010      	beq.n	8008578 <HAL_UART_IRQHandler+0x104>
 8008556:	697b      	ldr	r3, [r7, #20]
 8008558:	f003 0301 	and.w	r3, r3, #1
 800855c:	2b00      	cmp	r3, #0
 800855e:	d00b      	beq.n	8008578 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	2204      	movs	r2, #4
 8008566:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800856e:	f043 0202 	orr.w	r2, r3, #2
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008578:	69fb      	ldr	r3, [r7, #28]
 800857a:	f003 0308 	and.w	r3, r3, #8
 800857e:	2b00      	cmp	r3, #0
 8008580:	d015      	beq.n	80085ae <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008582:	69bb      	ldr	r3, [r7, #24]
 8008584:	f003 0320 	and.w	r3, r3, #32
 8008588:	2b00      	cmp	r3, #0
 800858a:	d104      	bne.n	8008596 <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800858c:	697a      	ldr	r2, [r7, #20]
 800858e:	4b48      	ldr	r3, [pc, #288]	; (80086b0 <HAL_UART_IRQHandler+0x23c>)
 8008590:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008592:	2b00      	cmp	r3, #0
 8008594:	d00b      	beq.n	80085ae <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	2208      	movs	r2, #8
 800859c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80085a4:	f043 0208 	orr.w	r2, r3, #8
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80085ae:	69fb      	ldr	r3, [r7, #28]
 80085b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d011      	beq.n	80085dc <HAL_UART_IRQHandler+0x168>
 80085b8:	69bb      	ldr	r3, [r7, #24]
 80085ba:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d00c      	beq.n	80085dc <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80085ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80085d2:	f043 0220 	orr.w	r2, r3, #32
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	f000 81f6 	beq.w	80089d4 <HAL_UART_IRQHandler+0x560>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80085e8:	69fb      	ldr	r3, [r7, #28]
 80085ea:	f003 0320 	and.w	r3, r3, #32
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d011      	beq.n	8008616 <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80085f2:	69bb      	ldr	r3, [r7, #24]
 80085f4:	f003 0320 	and.w	r3, r3, #32
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d104      	bne.n	8008606 <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80085fc:	697b      	ldr	r3, [r7, #20]
 80085fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008602:	2b00      	cmp	r3, #0
 8008604:	d007      	beq.n	8008616 <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800860a:	2b00      	cmp	r3, #0
 800860c:	d003      	beq.n	8008616 <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008612:	6878      	ldr	r0, [r7, #4]
 8008614:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800861c:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	689b      	ldr	r3, [r3, #8]
 8008624:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008628:	2b40      	cmp	r3, #64	; 0x40
 800862a:	d004      	beq.n	8008636 <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008632:	2b00      	cmp	r3, #0
 8008634:	d031      	beq.n	800869a <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008636:	6878      	ldr	r0, [r7, #4]
 8008638:	f001 f8d8 	bl	80097ec <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	689b      	ldr	r3, [r3, #8]
 8008642:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008646:	2b40      	cmp	r3, #64	; 0x40
 8008648:	d123      	bne.n	8008692 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	689a      	ldr	r2, [r3, #8]
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008658:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800865e:	2b00      	cmp	r3, #0
 8008660:	d013      	beq.n	800868a <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008666:	4a14      	ldr	r2, [pc, #80]	; (80086b8 <HAL_UART_IRQHandler+0x244>)
 8008668:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800866e:	4618      	mov	r0, r3
 8008670:	f7fa faa6 	bl	8002bc0 <HAL_DMA_Abort_IT>
 8008674:	4603      	mov	r3, r0
 8008676:	2b00      	cmp	r3, #0
 8008678:	d017      	beq.n	80086aa <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800867e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008680:	687a      	ldr	r2, [r7, #4]
 8008682:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8008684:	4610      	mov	r0, r2
 8008686:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008688:	e00f      	b.n	80086aa <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800868a:	6878      	ldr	r0, [r7, #4]
 800868c:	f000 f9ac 	bl	80089e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008690:	e00b      	b.n	80086aa <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008692:	6878      	ldr	r0, [r7, #4]
 8008694:	f000 f9a8 	bl	80089e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008698:	e007      	b.n	80086aa <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800869a:	6878      	ldr	r0, [r7, #4]
 800869c:	f000 f9a4 	bl	80089e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	2200      	movs	r2, #0
 80086a4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 80086a8:	e194      	b.n	80089d4 <HAL_UART_IRQHandler+0x560>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80086aa:	bf00      	nop
    return;
 80086ac:	e192      	b.n	80089d4 <HAL_UART_IRQHandler+0x560>
 80086ae:	bf00      	nop
 80086b0:	10000001 	.word	0x10000001
 80086b4:	04000120 	.word	0x04000120
 80086b8:	0800993d 	.word	0x0800993d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80086c0:	2b01      	cmp	r3, #1
 80086c2:	f040 810f 	bne.w	80088e4 <HAL_UART_IRQHandler+0x470>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80086c6:	69fb      	ldr	r3, [r7, #28]
 80086c8:	f003 0310 	and.w	r3, r3, #16
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	f000 8109 	beq.w	80088e4 <HAL_UART_IRQHandler+0x470>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80086d2:	69bb      	ldr	r3, [r7, #24]
 80086d4:	f003 0310 	and.w	r3, r3, #16
 80086d8:	2b00      	cmp	r3, #0
 80086da:	f000 8103 	beq.w	80088e4 <HAL_UART_IRQHandler+0x470>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	2210      	movs	r2, #16
 80086e4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	689b      	ldr	r3, [r3, #8]
 80086ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086f0:	2b40      	cmp	r3, #64	; 0x40
 80086f2:	f040 80bb 	bne.w	800886c <HAL_UART_IRQHandler+0x3f8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	4a96      	ldr	r2, [pc, #600]	; (8008958 <HAL_UART_IRQHandler+0x4e4>)
 80086fe:	4293      	cmp	r3, r2
 8008700:	d059      	beq.n	80087b6 <HAL_UART_IRQHandler+0x342>
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	4a94      	ldr	r2, [pc, #592]	; (800895c <HAL_UART_IRQHandler+0x4e8>)
 800870a:	4293      	cmp	r3, r2
 800870c:	d053      	beq.n	80087b6 <HAL_UART_IRQHandler+0x342>
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	4a92      	ldr	r2, [pc, #584]	; (8008960 <HAL_UART_IRQHandler+0x4ec>)
 8008716:	4293      	cmp	r3, r2
 8008718:	d04d      	beq.n	80087b6 <HAL_UART_IRQHandler+0x342>
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	4a90      	ldr	r2, [pc, #576]	; (8008964 <HAL_UART_IRQHandler+0x4f0>)
 8008722:	4293      	cmp	r3, r2
 8008724:	d047      	beq.n	80087b6 <HAL_UART_IRQHandler+0x342>
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	4a8e      	ldr	r2, [pc, #568]	; (8008968 <HAL_UART_IRQHandler+0x4f4>)
 800872e:	4293      	cmp	r3, r2
 8008730:	d041      	beq.n	80087b6 <HAL_UART_IRQHandler+0x342>
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	4a8c      	ldr	r2, [pc, #560]	; (800896c <HAL_UART_IRQHandler+0x4f8>)
 800873a:	4293      	cmp	r3, r2
 800873c:	d03b      	beq.n	80087b6 <HAL_UART_IRQHandler+0x342>
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	4a8a      	ldr	r2, [pc, #552]	; (8008970 <HAL_UART_IRQHandler+0x4fc>)
 8008746:	4293      	cmp	r3, r2
 8008748:	d035      	beq.n	80087b6 <HAL_UART_IRQHandler+0x342>
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	4a88      	ldr	r2, [pc, #544]	; (8008974 <HAL_UART_IRQHandler+0x500>)
 8008752:	4293      	cmp	r3, r2
 8008754:	d02f      	beq.n	80087b6 <HAL_UART_IRQHandler+0x342>
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	4a86      	ldr	r2, [pc, #536]	; (8008978 <HAL_UART_IRQHandler+0x504>)
 800875e:	4293      	cmp	r3, r2
 8008760:	d029      	beq.n	80087b6 <HAL_UART_IRQHandler+0x342>
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	4a84      	ldr	r2, [pc, #528]	; (800897c <HAL_UART_IRQHandler+0x508>)
 800876a:	4293      	cmp	r3, r2
 800876c:	d023      	beq.n	80087b6 <HAL_UART_IRQHandler+0x342>
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	4a82      	ldr	r2, [pc, #520]	; (8008980 <HAL_UART_IRQHandler+0x50c>)
 8008776:	4293      	cmp	r3, r2
 8008778:	d01d      	beq.n	80087b6 <HAL_UART_IRQHandler+0x342>
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	4a80      	ldr	r2, [pc, #512]	; (8008984 <HAL_UART_IRQHandler+0x510>)
 8008782:	4293      	cmp	r3, r2
 8008784:	d017      	beq.n	80087b6 <HAL_UART_IRQHandler+0x342>
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	4a7e      	ldr	r2, [pc, #504]	; (8008988 <HAL_UART_IRQHandler+0x514>)
 800878e:	4293      	cmp	r3, r2
 8008790:	d011      	beq.n	80087b6 <HAL_UART_IRQHandler+0x342>
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	4a7c      	ldr	r2, [pc, #496]	; (800898c <HAL_UART_IRQHandler+0x518>)
 800879a:	4293      	cmp	r3, r2
 800879c:	d00b      	beq.n	80087b6 <HAL_UART_IRQHandler+0x342>
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	4a7a      	ldr	r2, [pc, #488]	; (8008990 <HAL_UART_IRQHandler+0x51c>)
 80087a6:	4293      	cmp	r3, r2
 80087a8:	d005      	beq.n	80087b6 <HAL_UART_IRQHandler+0x342>
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	4a78      	ldr	r2, [pc, #480]	; (8008994 <HAL_UART_IRQHandler+0x520>)
 80087b2:	4293      	cmp	r3, r2
 80087b4:	d105      	bne.n	80087c2 <HAL_UART_IRQHandler+0x34e>
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	685b      	ldr	r3, [r3, #4]
 80087be:	b29b      	uxth	r3, r3
 80087c0:	e004      	b.n	80087cc <HAL_UART_IRQHandler+0x358>
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	685b      	ldr	r3, [r3, #4]
 80087ca:	b29b      	uxth	r3, r3
 80087cc:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 80087ce:	893b      	ldrh	r3, [r7, #8]
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	f000 8101 	beq.w	80089d8 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80087dc:	893a      	ldrh	r2, [r7, #8]
 80087de:	429a      	cmp	r2, r3
 80087e0:	f080 80fa 	bcs.w	80089d8 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	893a      	ldrh	r2, [r7, #8]
 80087e8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80087f0:	69db      	ldr	r3, [r3, #28]
 80087f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80087f6:	d02b      	beq.n	8008850 <HAL_UART_IRQHandler+0x3dc>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	681a      	ldr	r2, [r3, #0]
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008806:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	689a      	ldr	r2, [r3, #8]
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	f022 0201 	bic.w	r2, r2, #1
 8008816:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	689a      	ldr	r2, [r3, #8]
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008826:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	2220      	movs	r2, #32
 800882c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	2200      	movs	r2, #0
 8008834:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	681a      	ldr	r2, [r3, #0]
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	f022 0210 	bic.w	r2, r2, #16
 8008844:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800884a:	4618      	mov	r0, r3
 800884c:	f7f9 fe9a 	bl	8002584 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800885c:	b29b      	uxth	r3, r3
 800885e:	1ad3      	subs	r3, r2, r3
 8008860:	b29b      	uxth	r3, r3
 8008862:	4619      	mov	r1, r3
 8008864:	6878      	ldr	r0, [r7, #4]
 8008866:	f000 f8c9 	bl	80089fc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800886a:	e0b5      	b.n	80089d8 <HAL_UART_IRQHandler+0x564>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008878:	b29b      	uxth	r3, r3
 800887a:	1ad3      	subs	r3, r2, r3
 800887c:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008884:	b29b      	uxth	r3, r3
 8008886:	2b00      	cmp	r3, #0
 8008888:	f000 80a8 	beq.w	80089dc <HAL_UART_IRQHandler+0x568>
          && (nb_rx_data > 0U))
 800888c:	897b      	ldrh	r3, [r7, #10]
 800888e:	2b00      	cmp	r3, #0
 8008890:	f000 80a4 	beq.w	80089dc <HAL_UART_IRQHandler+0x568>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	681a      	ldr	r2, [r3, #0]
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80088a2:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	6899      	ldr	r1, [r3, #8]
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681a      	ldr	r2, [r3, #0]
 80088ae:	4b3a      	ldr	r3, [pc, #232]	; (8008998 <HAL_UART_IRQHandler+0x524>)
 80088b0:	400b      	ands	r3, r1
 80088b2:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	2220      	movs	r2, #32
 80088b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	2200      	movs	r2, #0
 80088c0:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	2200      	movs	r2, #0
 80088c6:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	681a      	ldr	r2, [r3, #0]
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	f022 0210 	bic.w	r2, r2, #16
 80088d6:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80088d8:	897b      	ldrh	r3, [r7, #10]
 80088da:	4619      	mov	r1, r3
 80088dc:	6878      	ldr	r0, [r7, #4]
 80088de:	f000 f88d 	bl	80089fc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80088e2:	e07b      	b.n	80089dc <HAL_UART_IRQHandler+0x568>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80088e4:	69fb      	ldr	r3, [r7, #28]
 80088e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d00d      	beq.n	800890a <HAL_UART_IRQHandler+0x496>
 80088ee:	697b      	ldr	r3, [r7, #20]
 80088f0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d008      	beq.n	800890a <HAL_UART_IRQHandler+0x496>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8008900:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008902:	6878      	ldr	r0, [r7, #4]
 8008904:	f001 f84a 	bl	800999c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008908:	e06b      	b.n	80089e2 <HAL_UART_IRQHandler+0x56e>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800890a:	69fb      	ldr	r3, [r7, #28]
 800890c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008910:	2b00      	cmp	r3, #0
 8008912:	d012      	beq.n	800893a <HAL_UART_IRQHandler+0x4c6>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8008914:	69bb      	ldr	r3, [r7, #24]
 8008916:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800891a:	2b00      	cmp	r3, #0
 800891c:	d104      	bne.n	8008928 <HAL_UART_IRQHandler+0x4b4>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800891e:	697b      	ldr	r3, [r7, #20]
 8008920:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008924:	2b00      	cmp	r3, #0
 8008926:	d008      	beq.n	800893a <HAL_UART_IRQHandler+0x4c6>
  {
    if (huart->TxISR != NULL)
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800892c:	2b00      	cmp	r3, #0
 800892e:	d057      	beq.n	80089e0 <HAL_UART_IRQHandler+0x56c>
    {
      huart->TxISR(huart);
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008934:	6878      	ldr	r0, [r7, #4]
 8008936:	4798      	blx	r3
    }
    return;
 8008938:	e052      	b.n	80089e0 <HAL_UART_IRQHandler+0x56c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800893a:	69fb      	ldr	r3, [r7, #28]
 800893c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008940:	2b00      	cmp	r3, #0
 8008942:	d02b      	beq.n	800899c <HAL_UART_IRQHandler+0x528>
 8008944:	69bb      	ldr	r3, [r7, #24]
 8008946:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800894a:	2b00      	cmp	r3, #0
 800894c:	d026      	beq.n	800899c <HAL_UART_IRQHandler+0x528>
  {
    UART_EndTransmit_IT(huart);
 800894e:	6878      	ldr	r0, [r7, #4]
 8008950:	f001 f80a 	bl	8009968 <UART_EndTransmit_IT>
    return;
 8008954:	e045      	b.n	80089e2 <HAL_UART_IRQHandler+0x56e>
 8008956:	bf00      	nop
 8008958:	40020010 	.word	0x40020010
 800895c:	40020028 	.word	0x40020028
 8008960:	40020040 	.word	0x40020040
 8008964:	40020058 	.word	0x40020058
 8008968:	40020070 	.word	0x40020070
 800896c:	40020088 	.word	0x40020088
 8008970:	400200a0 	.word	0x400200a0
 8008974:	400200b8 	.word	0x400200b8
 8008978:	40020410 	.word	0x40020410
 800897c:	40020428 	.word	0x40020428
 8008980:	40020440 	.word	0x40020440
 8008984:	40020458 	.word	0x40020458
 8008988:	40020470 	.word	0x40020470
 800898c:	40020488 	.word	0x40020488
 8008990:	400204a0 	.word	0x400204a0
 8008994:	400204b8 	.word	0x400204b8
 8008998:	effffffe 	.word	0xeffffffe
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800899c:	69fb      	ldr	r3, [r7, #28]
 800899e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d008      	beq.n	80089b8 <HAL_UART_IRQHandler+0x544>
 80089a6:	69bb      	ldr	r3, [r7, #24]
 80089a8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d003      	beq.n	80089b8 <HAL_UART_IRQHandler+0x544>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80089b0:	6878      	ldr	r0, [r7, #4]
 80089b2:	f001 f807 	bl	80099c4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80089b6:	e014      	b.n	80089e2 <HAL_UART_IRQHandler+0x56e>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80089b8:	69fb      	ldr	r3, [r7, #28]
 80089ba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d00f      	beq.n	80089e2 <HAL_UART_IRQHandler+0x56e>
 80089c2:	69bb      	ldr	r3, [r7, #24]
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	da0c      	bge.n	80089e2 <HAL_UART_IRQHandler+0x56e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80089c8:	6878      	ldr	r0, [r7, #4]
 80089ca:	f000 fff1 	bl	80099b0 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80089ce:	e008      	b.n	80089e2 <HAL_UART_IRQHandler+0x56e>
      return;
 80089d0:	bf00      	nop
 80089d2:	e006      	b.n	80089e2 <HAL_UART_IRQHandler+0x56e>
    return;
 80089d4:	bf00      	nop
 80089d6:	e004      	b.n	80089e2 <HAL_UART_IRQHandler+0x56e>
      return;
 80089d8:	bf00      	nop
 80089da:	e002      	b.n	80089e2 <HAL_UART_IRQHandler+0x56e>
      return;
 80089dc:	bf00      	nop
 80089de:	e000      	b.n	80089e2 <HAL_UART_IRQHandler+0x56e>
    return;
 80089e0:	bf00      	nop
  }
}
 80089e2:	3720      	adds	r7, #32
 80089e4:	46bd      	mov	sp, r7
 80089e6:	bd80      	pop	{r7, pc}

080089e8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80089e8:	b480      	push	{r7}
 80089ea:	b083      	sub	sp, #12
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80089f0:	bf00      	nop
 80089f2:	370c      	adds	r7, #12
 80089f4:	46bd      	mov	sp, r7
 80089f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089fa:	4770      	bx	lr

080089fc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80089fc:	b480      	push	{r7}
 80089fe:	b083      	sub	sp, #12
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	6078      	str	r0, [r7, #4]
 8008a04:	460b      	mov	r3, r1
 8008a06:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008a08:	bf00      	nop
 8008a0a:	370c      	adds	r7, #12
 8008a0c:	46bd      	mov	sp, r7
 8008a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a12:	4770      	bx	lr

08008a14 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008a14:	b5b0      	push	{r4, r5, r7, lr}
 8008a16:	b08e      	sub	sp, #56	; 0x38
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008a1c:	2300      	movs	r3, #0
 8008a1e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	689a      	ldr	r2, [r3, #8]
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	691b      	ldr	r3, [r3, #16]
 8008a2a:	431a      	orrs	r2, r3
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	695b      	ldr	r3, [r3, #20]
 8008a30:	431a      	orrs	r2, r3
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	69db      	ldr	r3, [r3, #28]
 8008a36:	4313      	orrs	r3, r2
 8008a38:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	681a      	ldr	r2, [r3, #0]
 8008a40:	4bbf      	ldr	r3, [pc, #764]	; (8008d40 <UART_SetConfig+0x32c>)
 8008a42:	4013      	ands	r3, r2
 8008a44:	687a      	ldr	r2, [r7, #4]
 8008a46:	6812      	ldr	r2, [r2, #0]
 8008a48:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008a4a:	430b      	orrs	r3, r1
 8008a4c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	685b      	ldr	r3, [r3, #4]
 8008a54:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	68da      	ldr	r2, [r3, #12]
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	430a      	orrs	r2, r1
 8008a62:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	699b      	ldr	r3, [r3, #24]
 8008a68:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	4ab5      	ldr	r2, [pc, #724]	; (8008d44 <UART_SetConfig+0x330>)
 8008a70:	4293      	cmp	r3, r2
 8008a72:	d004      	beq.n	8008a7e <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	6a1b      	ldr	r3, [r3, #32]
 8008a78:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008a7a:	4313      	orrs	r3, r2
 8008a7c:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	689a      	ldr	r2, [r3, #8]
 8008a84:	4bb0      	ldr	r3, [pc, #704]	; (8008d48 <UART_SetConfig+0x334>)
 8008a86:	4013      	ands	r3, r2
 8008a88:	687a      	ldr	r2, [r7, #4]
 8008a8a:	6812      	ldr	r2, [r2, #0]
 8008a8c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008a8e:	430b      	orrs	r3, r1
 8008a90:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a98:	f023 010f 	bic.w	r1, r3, #15
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	430a      	orrs	r2, r1
 8008aa6:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	4aa7      	ldr	r2, [pc, #668]	; (8008d4c <UART_SetConfig+0x338>)
 8008aae:	4293      	cmp	r3, r2
 8008ab0:	d176      	bne.n	8008ba0 <UART_SetConfig+0x18c>
 8008ab2:	4ba7      	ldr	r3, [pc, #668]	; (8008d50 <UART_SetConfig+0x33c>)
 8008ab4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ab6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008aba:	2b28      	cmp	r3, #40	; 0x28
 8008abc:	d86c      	bhi.n	8008b98 <UART_SetConfig+0x184>
 8008abe:	a201      	add	r2, pc, #4	; (adr r2, 8008ac4 <UART_SetConfig+0xb0>)
 8008ac0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ac4:	08008b69 	.word	0x08008b69
 8008ac8:	08008b99 	.word	0x08008b99
 8008acc:	08008b99 	.word	0x08008b99
 8008ad0:	08008b99 	.word	0x08008b99
 8008ad4:	08008b99 	.word	0x08008b99
 8008ad8:	08008b99 	.word	0x08008b99
 8008adc:	08008b99 	.word	0x08008b99
 8008ae0:	08008b99 	.word	0x08008b99
 8008ae4:	08008b71 	.word	0x08008b71
 8008ae8:	08008b99 	.word	0x08008b99
 8008aec:	08008b99 	.word	0x08008b99
 8008af0:	08008b99 	.word	0x08008b99
 8008af4:	08008b99 	.word	0x08008b99
 8008af8:	08008b99 	.word	0x08008b99
 8008afc:	08008b99 	.word	0x08008b99
 8008b00:	08008b99 	.word	0x08008b99
 8008b04:	08008b79 	.word	0x08008b79
 8008b08:	08008b99 	.word	0x08008b99
 8008b0c:	08008b99 	.word	0x08008b99
 8008b10:	08008b99 	.word	0x08008b99
 8008b14:	08008b99 	.word	0x08008b99
 8008b18:	08008b99 	.word	0x08008b99
 8008b1c:	08008b99 	.word	0x08008b99
 8008b20:	08008b99 	.word	0x08008b99
 8008b24:	08008b81 	.word	0x08008b81
 8008b28:	08008b99 	.word	0x08008b99
 8008b2c:	08008b99 	.word	0x08008b99
 8008b30:	08008b99 	.word	0x08008b99
 8008b34:	08008b99 	.word	0x08008b99
 8008b38:	08008b99 	.word	0x08008b99
 8008b3c:	08008b99 	.word	0x08008b99
 8008b40:	08008b99 	.word	0x08008b99
 8008b44:	08008b89 	.word	0x08008b89
 8008b48:	08008b99 	.word	0x08008b99
 8008b4c:	08008b99 	.word	0x08008b99
 8008b50:	08008b99 	.word	0x08008b99
 8008b54:	08008b99 	.word	0x08008b99
 8008b58:	08008b99 	.word	0x08008b99
 8008b5c:	08008b99 	.word	0x08008b99
 8008b60:	08008b99 	.word	0x08008b99
 8008b64:	08008b91 	.word	0x08008b91
 8008b68:	2301      	movs	r3, #1
 8008b6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008b6e:	e222      	b.n	8008fb6 <UART_SetConfig+0x5a2>
 8008b70:	2304      	movs	r3, #4
 8008b72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008b76:	e21e      	b.n	8008fb6 <UART_SetConfig+0x5a2>
 8008b78:	2308      	movs	r3, #8
 8008b7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008b7e:	e21a      	b.n	8008fb6 <UART_SetConfig+0x5a2>
 8008b80:	2310      	movs	r3, #16
 8008b82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008b86:	e216      	b.n	8008fb6 <UART_SetConfig+0x5a2>
 8008b88:	2320      	movs	r3, #32
 8008b8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008b8e:	e212      	b.n	8008fb6 <UART_SetConfig+0x5a2>
 8008b90:	2340      	movs	r3, #64	; 0x40
 8008b92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008b96:	e20e      	b.n	8008fb6 <UART_SetConfig+0x5a2>
 8008b98:	2380      	movs	r3, #128	; 0x80
 8008b9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008b9e:	e20a      	b.n	8008fb6 <UART_SetConfig+0x5a2>
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	4a6b      	ldr	r2, [pc, #428]	; (8008d54 <UART_SetConfig+0x340>)
 8008ba6:	4293      	cmp	r3, r2
 8008ba8:	d130      	bne.n	8008c0c <UART_SetConfig+0x1f8>
 8008baa:	4b69      	ldr	r3, [pc, #420]	; (8008d50 <UART_SetConfig+0x33c>)
 8008bac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008bae:	f003 0307 	and.w	r3, r3, #7
 8008bb2:	2b05      	cmp	r3, #5
 8008bb4:	d826      	bhi.n	8008c04 <UART_SetConfig+0x1f0>
 8008bb6:	a201      	add	r2, pc, #4	; (adr r2, 8008bbc <UART_SetConfig+0x1a8>)
 8008bb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bbc:	08008bd5 	.word	0x08008bd5
 8008bc0:	08008bdd 	.word	0x08008bdd
 8008bc4:	08008be5 	.word	0x08008be5
 8008bc8:	08008bed 	.word	0x08008bed
 8008bcc:	08008bf5 	.word	0x08008bf5
 8008bd0:	08008bfd 	.word	0x08008bfd
 8008bd4:	2300      	movs	r3, #0
 8008bd6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008bda:	e1ec      	b.n	8008fb6 <UART_SetConfig+0x5a2>
 8008bdc:	2304      	movs	r3, #4
 8008bde:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008be2:	e1e8      	b.n	8008fb6 <UART_SetConfig+0x5a2>
 8008be4:	2308      	movs	r3, #8
 8008be6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008bea:	e1e4      	b.n	8008fb6 <UART_SetConfig+0x5a2>
 8008bec:	2310      	movs	r3, #16
 8008bee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008bf2:	e1e0      	b.n	8008fb6 <UART_SetConfig+0x5a2>
 8008bf4:	2320      	movs	r3, #32
 8008bf6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008bfa:	e1dc      	b.n	8008fb6 <UART_SetConfig+0x5a2>
 8008bfc:	2340      	movs	r3, #64	; 0x40
 8008bfe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c02:	e1d8      	b.n	8008fb6 <UART_SetConfig+0x5a2>
 8008c04:	2380      	movs	r3, #128	; 0x80
 8008c06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c0a:	e1d4      	b.n	8008fb6 <UART_SetConfig+0x5a2>
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	4a51      	ldr	r2, [pc, #324]	; (8008d58 <UART_SetConfig+0x344>)
 8008c12:	4293      	cmp	r3, r2
 8008c14:	d130      	bne.n	8008c78 <UART_SetConfig+0x264>
 8008c16:	4b4e      	ldr	r3, [pc, #312]	; (8008d50 <UART_SetConfig+0x33c>)
 8008c18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c1a:	f003 0307 	and.w	r3, r3, #7
 8008c1e:	2b05      	cmp	r3, #5
 8008c20:	d826      	bhi.n	8008c70 <UART_SetConfig+0x25c>
 8008c22:	a201      	add	r2, pc, #4	; (adr r2, 8008c28 <UART_SetConfig+0x214>)
 8008c24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c28:	08008c41 	.word	0x08008c41
 8008c2c:	08008c49 	.word	0x08008c49
 8008c30:	08008c51 	.word	0x08008c51
 8008c34:	08008c59 	.word	0x08008c59
 8008c38:	08008c61 	.word	0x08008c61
 8008c3c:	08008c69 	.word	0x08008c69
 8008c40:	2300      	movs	r3, #0
 8008c42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c46:	e1b6      	b.n	8008fb6 <UART_SetConfig+0x5a2>
 8008c48:	2304      	movs	r3, #4
 8008c4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c4e:	e1b2      	b.n	8008fb6 <UART_SetConfig+0x5a2>
 8008c50:	2308      	movs	r3, #8
 8008c52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c56:	e1ae      	b.n	8008fb6 <UART_SetConfig+0x5a2>
 8008c58:	2310      	movs	r3, #16
 8008c5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c5e:	e1aa      	b.n	8008fb6 <UART_SetConfig+0x5a2>
 8008c60:	2320      	movs	r3, #32
 8008c62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c66:	e1a6      	b.n	8008fb6 <UART_SetConfig+0x5a2>
 8008c68:	2340      	movs	r3, #64	; 0x40
 8008c6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c6e:	e1a2      	b.n	8008fb6 <UART_SetConfig+0x5a2>
 8008c70:	2380      	movs	r3, #128	; 0x80
 8008c72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c76:	e19e      	b.n	8008fb6 <UART_SetConfig+0x5a2>
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	4a37      	ldr	r2, [pc, #220]	; (8008d5c <UART_SetConfig+0x348>)
 8008c7e:	4293      	cmp	r3, r2
 8008c80:	d130      	bne.n	8008ce4 <UART_SetConfig+0x2d0>
 8008c82:	4b33      	ldr	r3, [pc, #204]	; (8008d50 <UART_SetConfig+0x33c>)
 8008c84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c86:	f003 0307 	and.w	r3, r3, #7
 8008c8a:	2b05      	cmp	r3, #5
 8008c8c:	d826      	bhi.n	8008cdc <UART_SetConfig+0x2c8>
 8008c8e:	a201      	add	r2, pc, #4	; (adr r2, 8008c94 <UART_SetConfig+0x280>)
 8008c90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c94:	08008cad 	.word	0x08008cad
 8008c98:	08008cb5 	.word	0x08008cb5
 8008c9c:	08008cbd 	.word	0x08008cbd
 8008ca0:	08008cc5 	.word	0x08008cc5
 8008ca4:	08008ccd 	.word	0x08008ccd
 8008ca8:	08008cd5 	.word	0x08008cd5
 8008cac:	2300      	movs	r3, #0
 8008cae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008cb2:	e180      	b.n	8008fb6 <UART_SetConfig+0x5a2>
 8008cb4:	2304      	movs	r3, #4
 8008cb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008cba:	e17c      	b.n	8008fb6 <UART_SetConfig+0x5a2>
 8008cbc:	2308      	movs	r3, #8
 8008cbe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008cc2:	e178      	b.n	8008fb6 <UART_SetConfig+0x5a2>
 8008cc4:	2310      	movs	r3, #16
 8008cc6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008cca:	e174      	b.n	8008fb6 <UART_SetConfig+0x5a2>
 8008ccc:	2320      	movs	r3, #32
 8008cce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008cd2:	e170      	b.n	8008fb6 <UART_SetConfig+0x5a2>
 8008cd4:	2340      	movs	r3, #64	; 0x40
 8008cd6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008cda:	e16c      	b.n	8008fb6 <UART_SetConfig+0x5a2>
 8008cdc:	2380      	movs	r3, #128	; 0x80
 8008cde:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008ce2:	e168      	b.n	8008fb6 <UART_SetConfig+0x5a2>
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	4a1d      	ldr	r2, [pc, #116]	; (8008d60 <UART_SetConfig+0x34c>)
 8008cea:	4293      	cmp	r3, r2
 8008cec:	d142      	bne.n	8008d74 <UART_SetConfig+0x360>
 8008cee:	4b18      	ldr	r3, [pc, #96]	; (8008d50 <UART_SetConfig+0x33c>)
 8008cf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008cf2:	f003 0307 	and.w	r3, r3, #7
 8008cf6:	2b05      	cmp	r3, #5
 8008cf8:	d838      	bhi.n	8008d6c <UART_SetConfig+0x358>
 8008cfa:	a201      	add	r2, pc, #4	; (adr r2, 8008d00 <UART_SetConfig+0x2ec>)
 8008cfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d00:	08008d19 	.word	0x08008d19
 8008d04:	08008d21 	.word	0x08008d21
 8008d08:	08008d29 	.word	0x08008d29
 8008d0c:	08008d31 	.word	0x08008d31
 8008d10:	08008d39 	.word	0x08008d39
 8008d14:	08008d65 	.word	0x08008d65
 8008d18:	2300      	movs	r3, #0
 8008d1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008d1e:	e14a      	b.n	8008fb6 <UART_SetConfig+0x5a2>
 8008d20:	2304      	movs	r3, #4
 8008d22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008d26:	e146      	b.n	8008fb6 <UART_SetConfig+0x5a2>
 8008d28:	2308      	movs	r3, #8
 8008d2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008d2e:	e142      	b.n	8008fb6 <UART_SetConfig+0x5a2>
 8008d30:	2310      	movs	r3, #16
 8008d32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008d36:	e13e      	b.n	8008fb6 <UART_SetConfig+0x5a2>
 8008d38:	2320      	movs	r3, #32
 8008d3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008d3e:	e13a      	b.n	8008fb6 <UART_SetConfig+0x5a2>
 8008d40:	cfff69f3 	.word	0xcfff69f3
 8008d44:	58000c00 	.word	0x58000c00
 8008d48:	11fff4ff 	.word	0x11fff4ff
 8008d4c:	40011000 	.word	0x40011000
 8008d50:	58024400 	.word	0x58024400
 8008d54:	40004400 	.word	0x40004400
 8008d58:	40004800 	.word	0x40004800
 8008d5c:	40004c00 	.word	0x40004c00
 8008d60:	40005000 	.word	0x40005000
 8008d64:	2340      	movs	r3, #64	; 0x40
 8008d66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008d6a:	e124      	b.n	8008fb6 <UART_SetConfig+0x5a2>
 8008d6c:	2380      	movs	r3, #128	; 0x80
 8008d6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008d72:	e120      	b.n	8008fb6 <UART_SetConfig+0x5a2>
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	4acc      	ldr	r2, [pc, #816]	; (80090ac <UART_SetConfig+0x698>)
 8008d7a:	4293      	cmp	r3, r2
 8008d7c:	d176      	bne.n	8008e6c <UART_SetConfig+0x458>
 8008d7e:	4bcc      	ldr	r3, [pc, #816]	; (80090b0 <UART_SetConfig+0x69c>)
 8008d80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d82:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008d86:	2b28      	cmp	r3, #40	; 0x28
 8008d88:	d86c      	bhi.n	8008e64 <UART_SetConfig+0x450>
 8008d8a:	a201      	add	r2, pc, #4	; (adr r2, 8008d90 <UART_SetConfig+0x37c>)
 8008d8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d90:	08008e35 	.word	0x08008e35
 8008d94:	08008e65 	.word	0x08008e65
 8008d98:	08008e65 	.word	0x08008e65
 8008d9c:	08008e65 	.word	0x08008e65
 8008da0:	08008e65 	.word	0x08008e65
 8008da4:	08008e65 	.word	0x08008e65
 8008da8:	08008e65 	.word	0x08008e65
 8008dac:	08008e65 	.word	0x08008e65
 8008db0:	08008e3d 	.word	0x08008e3d
 8008db4:	08008e65 	.word	0x08008e65
 8008db8:	08008e65 	.word	0x08008e65
 8008dbc:	08008e65 	.word	0x08008e65
 8008dc0:	08008e65 	.word	0x08008e65
 8008dc4:	08008e65 	.word	0x08008e65
 8008dc8:	08008e65 	.word	0x08008e65
 8008dcc:	08008e65 	.word	0x08008e65
 8008dd0:	08008e45 	.word	0x08008e45
 8008dd4:	08008e65 	.word	0x08008e65
 8008dd8:	08008e65 	.word	0x08008e65
 8008ddc:	08008e65 	.word	0x08008e65
 8008de0:	08008e65 	.word	0x08008e65
 8008de4:	08008e65 	.word	0x08008e65
 8008de8:	08008e65 	.word	0x08008e65
 8008dec:	08008e65 	.word	0x08008e65
 8008df0:	08008e4d 	.word	0x08008e4d
 8008df4:	08008e65 	.word	0x08008e65
 8008df8:	08008e65 	.word	0x08008e65
 8008dfc:	08008e65 	.word	0x08008e65
 8008e00:	08008e65 	.word	0x08008e65
 8008e04:	08008e65 	.word	0x08008e65
 8008e08:	08008e65 	.word	0x08008e65
 8008e0c:	08008e65 	.word	0x08008e65
 8008e10:	08008e55 	.word	0x08008e55
 8008e14:	08008e65 	.word	0x08008e65
 8008e18:	08008e65 	.word	0x08008e65
 8008e1c:	08008e65 	.word	0x08008e65
 8008e20:	08008e65 	.word	0x08008e65
 8008e24:	08008e65 	.word	0x08008e65
 8008e28:	08008e65 	.word	0x08008e65
 8008e2c:	08008e65 	.word	0x08008e65
 8008e30:	08008e5d 	.word	0x08008e5d
 8008e34:	2301      	movs	r3, #1
 8008e36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008e3a:	e0bc      	b.n	8008fb6 <UART_SetConfig+0x5a2>
 8008e3c:	2304      	movs	r3, #4
 8008e3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008e42:	e0b8      	b.n	8008fb6 <UART_SetConfig+0x5a2>
 8008e44:	2308      	movs	r3, #8
 8008e46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008e4a:	e0b4      	b.n	8008fb6 <UART_SetConfig+0x5a2>
 8008e4c:	2310      	movs	r3, #16
 8008e4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008e52:	e0b0      	b.n	8008fb6 <UART_SetConfig+0x5a2>
 8008e54:	2320      	movs	r3, #32
 8008e56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008e5a:	e0ac      	b.n	8008fb6 <UART_SetConfig+0x5a2>
 8008e5c:	2340      	movs	r3, #64	; 0x40
 8008e5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008e62:	e0a8      	b.n	8008fb6 <UART_SetConfig+0x5a2>
 8008e64:	2380      	movs	r3, #128	; 0x80
 8008e66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008e6a:	e0a4      	b.n	8008fb6 <UART_SetConfig+0x5a2>
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	4a90      	ldr	r2, [pc, #576]	; (80090b4 <UART_SetConfig+0x6a0>)
 8008e72:	4293      	cmp	r3, r2
 8008e74:	d130      	bne.n	8008ed8 <UART_SetConfig+0x4c4>
 8008e76:	4b8e      	ldr	r3, [pc, #568]	; (80090b0 <UART_SetConfig+0x69c>)
 8008e78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e7a:	f003 0307 	and.w	r3, r3, #7
 8008e7e:	2b05      	cmp	r3, #5
 8008e80:	d826      	bhi.n	8008ed0 <UART_SetConfig+0x4bc>
 8008e82:	a201      	add	r2, pc, #4	; (adr r2, 8008e88 <UART_SetConfig+0x474>)
 8008e84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e88:	08008ea1 	.word	0x08008ea1
 8008e8c:	08008ea9 	.word	0x08008ea9
 8008e90:	08008eb1 	.word	0x08008eb1
 8008e94:	08008eb9 	.word	0x08008eb9
 8008e98:	08008ec1 	.word	0x08008ec1
 8008e9c:	08008ec9 	.word	0x08008ec9
 8008ea0:	2300      	movs	r3, #0
 8008ea2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008ea6:	e086      	b.n	8008fb6 <UART_SetConfig+0x5a2>
 8008ea8:	2304      	movs	r3, #4
 8008eaa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008eae:	e082      	b.n	8008fb6 <UART_SetConfig+0x5a2>
 8008eb0:	2308      	movs	r3, #8
 8008eb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008eb6:	e07e      	b.n	8008fb6 <UART_SetConfig+0x5a2>
 8008eb8:	2310      	movs	r3, #16
 8008eba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008ebe:	e07a      	b.n	8008fb6 <UART_SetConfig+0x5a2>
 8008ec0:	2320      	movs	r3, #32
 8008ec2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008ec6:	e076      	b.n	8008fb6 <UART_SetConfig+0x5a2>
 8008ec8:	2340      	movs	r3, #64	; 0x40
 8008eca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008ece:	e072      	b.n	8008fb6 <UART_SetConfig+0x5a2>
 8008ed0:	2380      	movs	r3, #128	; 0x80
 8008ed2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008ed6:	e06e      	b.n	8008fb6 <UART_SetConfig+0x5a2>
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	4a76      	ldr	r2, [pc, #472]	; (80090b8 <UART_SetConfig+0x6a4>)
 8008ede:	4293      	cmp	r3, r2
 8008ee0:	d130      	bne.n	8008f44 <UART_SetConfig+0x530>
 8008ee2:	4b73      	ldr	r3, [pc, #460]	; (80090b0 <UART_SetConfig+0x69c>)
 8008ee4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ee6:	f003 0307 	and.w	r3, r3, #7
 8008eea:	2b05      	cmp	r3, #5
 8008eec:	d826      	bhi.n	8008f3c <UART_SetConfig+0x528>
 8008eee:	a201      	add	r2, pc, #4	; (adr r2, 8008ef4 <UART_SetConfig+0x4e0>)
 8008ef0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ef4:	08008f0d 	.word	0x08008f0d
 8008ef8:	08008f15 	.word	0x08008f15
 8008efc:	08008f1d 	.word	0x08008f1d
 8008f00:	08008f25 	.word	0x08008f25
 8008f04:	08008f2d 	.word	0x08008f2d
 8008f08:	08008f35 	.word	0x08008f35
 8008f0c:	2300      	movs	r3, #0
 8008f0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008f12:	e050      	b.n	8008fb6 <UART_SetConfig+0x5a2>
 8008f14:	2304      	movs	r3, #4
 8008f16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008f1a:	e04c      	b.n	8008fb6 <UART_SetConfig+0x5a2>
 8008f1c:	2308      	movs	r3, #8
 8008f1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008f22:	e048      	b.n	8008fb6 <UART_SetConfig+0x5a2>
 8008f24:	2310      	movs	r3, #16
 8008f26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008f2a:	e044      	b.n	8008fb6 <UART_SetConfig+0x5a2>
 8008f2c:	2320      	movs	r3, #32
 8008f2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008f32:	e040      	b.n	8008fb6 <UART_SetConfig+0x5a2>
 8008f34:	2340      	movs	r3, #64	; 0x40
 8008f36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008f3a:	e03c      	b.n	8008fb6 <UART_SetConfig+0x5a2>
 8008f3c:	2380      	movs	r3, #128	; 0x80
 8008f3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008f42:	e038      	b.n	8008fb6 <UART_SetConfig+0x5a2>
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	4a5c      	ldr	r2, [pc, #368]	; (80090bc <UART_SetConfig+0x6a8>)
 8008f4a:	4293      	cmp	r3, r2
 8008f4c:	d130      	bne.n	8008fb0 <UART_SetConfig+0x59c>
 8008f4e:	4b58      	ldr	r3, [pc, #352]	; (80090b0 <UART_SetConfig+0x69c>)
 8008f50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f52:	f003 0307 	and.w	r3, r3, #7
 8008f56:	2b05      	cmp	r3, #5
 8008f58:	d826      	bhi.n	8008fa8 <UART_SetConfig+0x594>
 8008f5a:	a201      	add	r2, pc, #4	; (adr r2, 8008f60 <UART_SetConfig+0x54c>)
 8008f5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f60:	08008f79 	.word	0x08008f79
 8008f64:	08008f81 	.word	0x08008f81
 8008f68:	08008f89 	.word	0x08008f89
 8008f6c:	08008f91 	.word	0x08008f91
 8008f70:	08008f99 	.word	0x08008f99
 8008f74:	08008fa1 	.word	0x08008fa1
 8008f78:	2302      	movs	r3, #2
 8008f7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008f7e:	e01a      	b.n	8008fb6 <UART_SetConfig+0x5a2>
 8008f80:	2304      	movs	r3, #4
 8008f82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008f86:	e016      	b.n	8008fb6 <UART_SetConfig+0x5a2>
 8008f88:	2308      	movs	r3, #8
 8008f8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008f8e:	e012      	b.n	8008fb6 <UART_SetConfig+0x5a2>
 8008f90:	2310      	movs	r3, #16
 8008f92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008f96:	e00e      	b.n	8008fb6 <UART_SetConfig+0x5a2>
 8008f98:	2320      	movs	r3, #32
 8008f9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008f9e:	e00a      	b.n	8008fb6 <UART_SetConfig+0x5a2>
 8008fa0:	2340      	movs	r3, #64	; 0x40
 8008fa2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008fa6:	e006      	b.n	8008fb6 <UART_SetConfig+0x5a2>
 8008fa8:	2380      	movs	r3, #128	; 0x80
 8008faa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008fae:	e002      	b.n	8008fb6 <UART_SetConfig+0x5a2>
 8008fb0:	2380      	movs	r3, #128	; 0x80
 8008fb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	4a40      	ldr	r2, [pc, #256]	; (80090bc <UART_SetConfig+0x6a8>)
 8008fbc:	4293      	cmp	r3, r2
 8008fbe:	f040 80ef 	bne.w	80091a0 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008fc2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008fc6:	2b20      	cmp	r3, #32
 8008fc8:	dc46      	bgt.n	8009058 <UART_SetConfig+0x644>
 8008fca:	2b02      	cmp	r3, #2
 8008fcc:	f2c0 8081 	blt.w	80090d2 <UART_SetConfig+0x6be>
 8008fd0:	3b02      	subs	r3, #2
 8008fd2:	2b1e      	cmp	r3, #30
 8008fd4:	d87d      	bhi.n	80090d2 <UART_SetConfig+0x6be>
 8008fd6:	a201      	add	r2, pc, #4	; (adr r2, 8008fdc <UART_SetConfig+0x5c8>)
 8008fd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fdc:	0800905f 	.word	0x0800905f
 8008fe0:	080090d3 	.word	0x080090d3
 8008fe4:	08009067 	.word	0x08009067
 8008fe8:	080090d3 	.word	0x080090d3
 8008fec:	080090d3 	.word	0x080090d3
 8008ff0:	080090d3 	.word	0x080090d3
 8008ff4:	08009077 	.word	0x08009077
 8008ff8:	080090d3 	.word	0x080090d3
 8008ffc:	080090d3 	.word	0x080090d3
 8009000:	080090d3 	.word	0x080090d3
 8009004:	080090d3 	.word	0x080090d3
 8009008:	080090d3 	.word	0x080090d3
 800900c:	080090d3 	.word	0x080090d3
 8009010:	080090d3 	.word	0x080090d3
 8009014:	08009087 	.word	0x08009087
 8009018:	080090d3 	.word	0x080090d3
 800901c:	080090d3 	.word	0x080090d3
 8009020:	080090d3 	.word	0x080090d3
 8009024:	080090d3 	.word	0x080090d3
 8009028:	080090d3 	.word	0x080090d3
 800902c:	080090d3 	.word	0x080090d3
 8009030:	080090d3 	.word	0x080090d3
 8009034:	080090d3 	.word	0x080090d3
 8009038:	080090d3 	.word	0x080090d3
 800903c:	080090d3 	.word	0x080090d3
 8009040:	080090d3 	.word	0x080090d3
 8009044:	080090d3 	.word	0x080090d3
 8009048:	080090d3 	.word	0x080090d3
 800904c:	080090d3 	.word	0x080090d3
 8009050:	080090d3 	.word	0x080090d3
 8009054:	080090c5 	.word	0x080090c5
 8009058:	2b40      	cmp	r3, #64	; 0x40
 800905a:	d036      	beq.n	80090ca <UART_SetConfig+0x6b6>
 800905c:	e039      	b.n	80090d2 <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800905e:	f7fe f8eb 	bl	8007238 <HAL_RCCEx_GetD3PCLK1Freq>
 8009062:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009064:	e03b      	b.n	80090de <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009066:	f107 0314 	add.w	r3, r7, #20
 800906a:	4618      	mov	r0, r3
 800906c:	f7fe f8fa 	bl	8007264 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009070:	69bb      	ldr	r3, [r7, #24]
 8009072:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009074:	e033      	b.n	80090de <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009076:	f107 0308 	add.w	r3, r7, #8
 800907a:	4618      	mov	r0, r3
 800907c:	f7fe fa46 	bl	800750c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009084:	e02b      	b.n	80090de <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009086:	4b0a      	ldr	r3, [pc, #40]	; (80090b0 <UART_SetConfig+0x69c>)
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	f003 0320 	and.w	r3, r3, #32
 800908e:	2b00      	cmp	r3, #0
 8009090:	d009      	beq.n	80090a6 <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009092:	4b07      	ldr	r3, [pc, #28]	; (80090b0 <UART_SetConfig+0x69c>)
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	08db      	lsrs	r3, r3, #3
 8009098:	f003 0303 	and.w	r3, r3, #3
 800909c:	4a08      	ldr	r2, [pc, #32]	; (80090c0 <UART_SetConfig+0x6ac>)
 800909e:	fa22 f303 	lsr.w	r3, r2, r3
 80090a2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80090a4:	e01b      	b.n	80090de <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 80090a6:	4b06      	ldr	r3, [pc, #24]	; (80090c0 <UART_SetConfig+0x6ac>)
 80090a8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80090aa:	e018      	b.n	80090de <UART_SetConfig+0x6ca>
 80090ac:	40011400 	.word	0x40011400
 80090b0:	58024400 	.word	0x58024400
 80090b4:	40007800 	.word	0x40007800
 80090b8:	40007c00 	.word	0x40007c00
 80090bc:	58000c00 	.word	0x58000c00
 80090c0:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80090c4:	4bc4      	ldr	r3, [pc, #784]	; (80093d8 <UART_SetConfig+0x9c4>)
 80090c6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80090c8:	e009      	b.n	80090de <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80090ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80090ce:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80090d0:	e005      	b.n	80090de <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 80090d2:	2300      	movs	r3, #0
 80090d4:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80090d6:	2301      	movs	r3, #1
 80090d8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80090dc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80090de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	f000 81da 	beq.w	800949a <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090ea:	4abc      	ldr	r2, [pc, #752]	; (80093dc <UART_SetConfig+0x9c8>)
 80090ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80090f0:	461a      	mov	r2, r3
 80090f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090f4:	fbb3 f3f2 	udiv	r3, r3, r2
 80090f8:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	685a      	ldr	r2, [r3, #4]
 80090fe:	4613      	mov	r3, r2
 8009100:	005b      	lsls	r3, r3, #1
 8009102:	4413      	add	r3, r2
 8009104:	6a3a      	ldr	r2, [r7, #32]
 8009106:	429a      	cmp	r2, r3
 8009108:	d305      	bcc.n	8009116 <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	685b      	ldr	r3, [r3, #4]
 800910e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009110:	6a3a      	ldr	r2, [r7, #32]
 8009112:	429a      	cmp	r2, r3
 8009114:	d903      	bls.n	800911e <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 8009116:	2301      	movs	r3, #1
 8009118:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800911c:	e1bd      	b.n	800949a <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800911e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009120:	4618      	mov	r0, r3
 8009122:	f04f 0100 	mov.w	r1, #0
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800912a:	4aac      	ldr	r2, [pc, #688]	; (80093dc <UART_SetConfig+0x9c8>)
 800912c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009130:	b29a      	uxth	r2, r3
 8009132:	f04f 0300 	mov.w	r3, #0
 8009136:	f7f7 fa8b 	bl	8000650 <__aeabi_uldivmod>
 800913a:	4602      	mov	r2, r0
 800913c:	460b      	mov	r3, r1
 800913e:	4610      	mov	r0, r2
 8009140:	4619      	mov	r1, r3
 8009142:	f04f 0200 	mov.w	r2, #0
 8009146:	f04f 0300 	mov.w	r3, #0
 800914a:	020b      	lsls	r3, r1, #8
 800914c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009150:	0202      	lsls	r2, r0, #8
 8009152:	6879      	ldr	r1, [r7, #4]
 8009154:	6849      	ldr	r1, [r1, #4]
 8009156:	0849      	lsrs	r1, r1, #1
 8009158:	4608      	mov	r0, r1
 800915a:	f04f 0100 	mov.w	r1, #0
 800915e:	1814      	adds	r4, r2, r0
 8009160:	eb43 0501 	adc.w	r5, r3, r1
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	685b      	ldr	r3, [r3, #4]
 8009168:	461a      	mov	r2, r3
 800916a:	f04f 0300 	mov.w	r3, #0
 800916e:	4620      	mov	r0, r4
 8009170:	4629      	mov	r1, r5
 8009172:	f7f7 fa6d 	bl	8000650 <__aeabi_uldivmod>
 8009176:	4602      	mov	r2, r0
 8009178:	460b      	mov	r3, r1
 800917a:	4613      	mov	r3, r2
 800917c:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800917e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009180:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009184:	d308      	bcc.n	8009198 <UART_SetConfig+0x784>
 8009186:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009188:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800918c:	d204      	bcs.n	8009198 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009194:	60da      	str	r2, [r3, #12]
 8009196:	e180      	b.n	800949a <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 8009198:	2301      	movs	r3, #1
 800919a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800919e:	e17c      	b.n	800949a <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	69db      	ldr	r3, [r3, #28]
 80091a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80091a8:	f040 80bf 	bne.w	800932a <UART_SetConfig+0x916>
  {
    switch (clocksource)
 80091ac:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80091b0:	2b20      	cmp	r3, #32
 80091b2:	dc49      	bgt.n	8009248 <UART_SetConfig+0x834>
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	db7c      	blt.n	80092b2 <UART_SetConfig+0x89e>
 80091b8:	2b20      	cmp	r3, #32
 80091ba:	d87a      	bhi.n	80092b2 <UART_SetConfig+0x89e>
 80091bc:	a201      	add	r2, pc, #4	; (adr r2, 80091c4 <UART_SetConfig+0x7b0>)
 80091be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091c2:	bf00      	nop
 80091c4:	0800924f 	.word	0x0800924f
 80091c8:	08009257 	.word	0x08009257
 80091cc:	080092b3 	.word	0x080092b3
 80091d0:	080092b3 	.word	0x080092b3
 80091d4:	0800925f 	.word	0x0800925f
 80091d8:	080092b3 	.word	0x080092b3
 80091dc:	080092b3 	.word	0x080092b3
 80091e0:	080092b3 	.word	0x080092b3
 80091e4:	0800926f 	.word	0x0800926f
 80091e8:	080092b3 	.word	0x080092b3
 80091ec:	080092b3 	.word	0x080092b3
 80091f0:	080092b3 	.word	0x080092b3
 80091f4:	080092b3 	.word	0x080092b3
 80091f8:	080092b3 	.word	0x080092b3
 80091fc:	080092b3 	.word	0x080092b3
 8009200:	080092b3 	.word	0x080092b3
 8009204:	0800927f 	.word	0x0800927f
 8009208:	080092b3 	.word	0x080092b3
 800920c:	080092b3 	.word	0x080092b3
 8009210:	080092b3 	.word	0x080092b3
 8009214:	080092b3 	.word	0x080092b3
 8009218:	080092b3 	.word	0x080092b3
 800921c:	080092b3 	.word	0x080092b3
 8009220:	080092b3 	.word	0x080092b3
 8009224:	080092b3 	.word	0x080092b3
 8009228:	080092b3 	.word	0x080092b3
 800922c:	080092b3 	.word	0x080092b3
 8009230:	080092b3 	.word	0x080092b3
 8009234:	080092b3 	.word	0x080092b3
 8009238:	080092b3 	.word	0x080092b3
 800923c:	080092b3 	.word	0x080092b3
 8009240:	080092b3 	.word	0x080092b3
 8009244:	080092a5 	.word	0x080092a5
 8009248:	2b40      	cmp	r3, #64	; 0x40
 800924a:	d02e      	beq.n	80092aa <UART_SetConfig+0x896>
 800924c:	e031      	b.n	80092b2 <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800924e:	f7fc fbb5 	bl	80059bc <HAL_RCC_GetPCLK1Freq>
 8009252:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009254:	e033      	b.n	80092be <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009256:	f7fc fbc7 	bl	80059e8 <HAL_RCC_GetPCLK2Freq>
 800925a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800925c:	e02f      	b.n	80092be <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800925e:	f107 0314 	add.w	r3, r7, #20
 8009262:	4618      	mov	r0, r3
 8009264:	f7fd fffe 	bl	8007264 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009268:	69bb      	ldr	r3, [r7, #24]
 800926a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800926c:	e027      	b.n	80092be <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800926e:	f107 0308 	add.w	r3, r7, #8
 8009272:	4618      	mov	r0, r3
 8009274:	f7fe f94a 	bl	800750c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800927c:	e01f      	b.n	80092be <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800927e:	4b58      	ldr	r3, [pc, #352]	; (80093e0 <UART_SetConfig+0x9cc>)
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	f003 0320 	and.w	r3, r3, #32
 8009286:	2b00      	cmp	r3, #0
 8009288:	d009      	beq.n	800929e <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800928a:	4b55      	ldr	r3, [pc, #340]	; (80093e0 <UART_SetConfig+0x9cc>)
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	08db      	lsrs	r3, r3, #3
 8009290:	f003 0303 	and.w	r3, r3, #3
 8009294:	4a53      	ldr	r2, [pc, #332]	; (80093e4 <UART_SetConfig+0x9d0>)
 8009296:	fa22 f303 	lsr.w	r3, r2, r3
 800929a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800929c:	e00f      	b.n	80092be <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 800929e:	4b51      	ldr	r3, [pc, #324]	; (80093e4 <UART_SetConfig+0x9d0>)
 80092a0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80092a2:	e00c      	b.n	80092be <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80092a4:	4b4c      	ldr	r3, [pc, #304]	; (80093d8 <UART_SetConfig+0x9c4>)
 80092a6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80092a8:	e009      	b.n	80092be <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80092aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80092ae:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80092b0:	e005      	b.n	80092be <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 80092b2:	2300      	movs	r3, #0
 80092b4:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80092b6:	2301      	movs	r3, #1
 80092b8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80092bc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80092be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	f000 80ea 	beq.w	800949a <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092ca:	4a44      	ldr	r2, [pc, #272]	; (80093dc <UART_SetConfig+0x9c8>)
 80092cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80092d0:	461a      	mov	r2, r3
 80092d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092d4:	fbb3 f3f2 	udiv	r3, r3, r2
 80092d8:	005a      	lsls	r2, r3, #1
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	685b      	ldr	r3, [r3, #4]
 80092de:	085b      	lsrs	r3, r3, #1
 80092e0:	441a      	add	r2, r3
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	685b      	ldr	r3, [r3, #4]
 80092e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80092ea:	b29b      	uxth	r3, r3
 80092ec:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80092ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092f0:	2b0f      	cmp	r3, #15
 80092f2:	d916      	bls.n	8009322 <UART_SetConfig+0x90e>
 80092f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80092fa:	d212      	bcs.n	8009322 <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80092fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092fe:	b29b      	uxth	r3, r3
 8009300:	f023 030f 	bic.w	r3, r3, #15
 8009304:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009306:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009308:	085b      	lsrs	r3, r3, #1
 800930a:	b29b      	uxth	r3, r3
 800930c:	f003 0307 	and.w	r3, r3, #7
 8009310:	b29a      	uxth	r2, r3
 8009312:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009314:	4313      	orrs	r3, r2
 8009316:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800931e:	60da      	str	r2, [r3, #12]
 8009320:	e0bb      	b.n	800949a <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8009322:	2301      	movs	r3, #1
 8009324:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8009328:	e0b7      	b.n	800949a <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 800932a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800932e:	2b20      	cmp	r3, #32
 8009330:	dc4a      	bgt.n	80093c8 <UART_SetConfig+0x9b4>
 8009332:	2b00      	cmp	r3, #0
 8009334:	f2c0 8086 	blt.w	8009444 <UART_SetConfig+0xa30>
 8009338:	2b20      	cmp	r3, #32
 800933a:	f200 8083 	bhi.w	8009444 <UART_SetConfig+0xa30>
 800933e:	a201      	add	r2, pc, #4	; (adr r2, 8009344 <UART_SetConfig+0x930>)
 8009340:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009344:	080093cf 	.word	0x080093cf
 8009348:	080093e9 	.word	0x080093e9
 800934c:	08009445 	.word	0x08009445
 8009350:	08009445 	.word	0x08009445
 8009354:	080093f1 	.word	0x080093f1
 8009358:	08009445 	.word	0x08009445
 800935c:	08009445 	.word	0x08009445
 8009360:	08009445 	.word	0x08009445
 8009364:	08009401 	.word	0x08009401
 8009368:	08009445 	.word	0x08009445
 800936c:	08009445 	.word	0x08009445
 8009370:	08009445 	.word	0x08009445
 8009374:	08009445 	.word	0x08009445
 8009378:	08009445 	.word	0x08009445
 800937c:	08009445 	.word	0x08009445
 8009380:	08009445 	.word	0x08009445
 8009384:	08009411 	.word	0x08009411
 8009388:	08009445 	.word	0x08009445
 800938c:	08009445 	.word	0x08009445
 8009390:	08009445 	.word	0x08009445
 8009394:	08009445 	.word	0x08009445
 8009398:	08009445 	.word	0x08009445
 800939c:	08009445 	.word	0x08009445
 80093a0:	08009445 	.word	0x08009445
 80093a4:	08009445 	.word	0x08009445
 80093a8:	08009445 	.word	0x08009445
 80093ac:	08009445 	.word	0x08009445
 80093b0:	08009445 	.word	0x08009445
 80093b4:	08009445 	.word	0x08009445
 80093b8:	08009445 	.word	0x08009445
 80093bc:	08009445 	.word	0x08009445
 80093c0:	08009445 	.word	0x08009445
 80093c4:	08009437 	.word	0x08009437
 80093c8:	2b40      	cmp	r3, #64	; 0x40
 80093ca:	d037      	beq.n	800943c <UART_SetConfig+0xa28>
 80093cc:	e03a      	b.n	8009444 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80093ce:	f7fc faf5 	bl	80059bc <HAL_RCC_GetPCLK1Freq>
 80093d2:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80093d4:	e03c      	b.n	8009450 <UART_SetConfig+0xa3c>
 80093d6:	bf00      	nop
 80093d8:	003d0900 	.word	0x003d0900
 80093dc:	0800bfc0 	.word	0x0800bfc0
 80093e0:	58024400 	.word	0x58024400
 80093e4:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80093e8:	f7fc fafe 	bl	80059e8 <HAL_RCC_GetPCLK2Freq>
 80093ec:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80093ee:	e02f      	b.n	8009450 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80093f0:	f107 0314 	add.w	r3, r7, #20
 80093f4:	4618      	mov	r0, r3
 80093f6:	f7fd ff35 	bl	8007264 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80093fa:	69bb      	ldr	r3, [r7, #24]
 80093fc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80093fe:	e027      	b.n	8009450 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009400:	f107 0308 	add.w	r3, r7, #8
 8009404:	4618      	mov	r0, r3
 8009406:	f7fe f881 	bl	800750c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800940e:	e01f      	b.n	8009450 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009410:	4b2c      	ldr	r3, [pc, #176]	; (80094c4 <UART_SetConfig+0xab0>)
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	f003 0320 	and.w	r3, r3, #32
 8009418:	2b00      	cmp	r3, #0
 800941a:	d009      	beq.n	8009430 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800941c:	4b29      	ldr	r3, [pc, #164]	; (80094c4 <UART_SetConfig+0xab0>)
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	08db      	lsrs	r3, r3, #3
 8009422:	f003 0303 	and.w	r3, r3, #3
 8009426:	4a28      	ldr	r2, [pc, #160]	; (80094c8 <UART_SetConfig+0xab4>)
 8009428:	fa22 f303 	lsr.w	r3, r2, r3
 800942c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800942e:	e00f      	b.n	8009450 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 8009430:	4b25      	ldr	r3, [pc, #148]	; (80094c8 <UART_SetConfig+0xab4>)
 8009432:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009434:	e00c      	b.n	8009450 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009436:	4b25      	ldr	r3, [pc, #148]	; (80094cc <UART_SetConfig+0xab8>)
 8009438:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800943a:	e009      	b.n	8009450 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800943c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009440:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009442:	e005      	b.n	8009450 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 8009444:	2300      	movs	r3, #0
 8009446:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8009448:	2301      	movs	r3, #1
 800944a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800944e:	bf00      	nop
    }

    if (pclk != 0U)
 8009450:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009452:	2b00      	cmp	r3, #0
 8009454:	d021      	beq.n	800949a <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800945a:	4a1d      	ldr	r2, [pc, #116]	; (80094d0 <UART_SetConfig+0xabc>)
 800945c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009460:	461a      	mov	r2, r3
 8009462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009464:	fbb3 f2f2 	udiv	r2, r3, r2
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	685b      	ldr	r3, [r3, #4]
 800946c:	085b      	lsrs	r3, r3, #1
 800946e:	441a      	add	r2, r3
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	685b      	ldr	r3, [r3, #4]
 8009474:	fbb2 f3f3 	udiv	r3, r2, r3
 8009478:	b29b      	uxth	r3, r3
 800947a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800947c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800947e:	2b0f      	cmp	r3, #15
 8009480:	d908      	bls.n	8009494 <UART_SetConfig+0xa80>
 8009482:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009484:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009488:	d204      	bcs.n	8009494 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009490:	60da      	str	r2, [r3, #12]
 8009492:	e002      	b.n	800949a <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8009494:	2301      	movs	r3, #1
 8009496:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	2201      	movs	r2, #1
 800949e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	2201      	movs	r2, #1
 80094a6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	2200      	movs	r2, #0
 80094ae:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	2200      	movs	r2, #0
 80094b4:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80094b6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 80094ba:	4618      	mov	r0, r3
 80094bc:	3738      	adds	r7, #56	; 0x38
 80094be:	46bd      	mov	sp, r7
 80094c0:	bdb0      	pop	{r4, r5, r7, pc}
 80094c2:	bf00      	nop
 80094c4:	58024400 	.word	0x58024400
 80094c8:	03d09000 	.word	0x03d09000
 80094cc:	003d0900 	.word	0x003d0900
 80094d0:	0800bfc0 	.word	0x0800bfc0

080094d4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80094d4:	b480      	push	{r7}
 80094d6:	b083      	sub	sp, #12
 80094d8:	af00      	add	r7, sp, #0
 80094da:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094e0:	f003 0301 	and.w	r3, r3, #1
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d00a      	beq.n	80094fe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	685b      	ldr	r3, [r3, #4]
 80094ee:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	430a      	orrs	r2, r1
 80094fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009502:	f003 0302 	and.w	r3, r3, #2
 8009506:	2b00      	cmp	r3, #0
 8009508:	d00a      	beq.n	8009520 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	685b      	ldr	r3, [r3, #4]
 8009510:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	430a      	orrs	r2, r1
 800951e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009524:	f003 0304 	and.w	r3, r3, #4
 8009528:	2b00      	cmp	r3, #0
 800952a:	d00a      	beq.n	8009542 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	685b      	ldr	r3, [r3, #4]
 8009532:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	430a      	orrs	r2, r1
 8009540:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009546:	f003 0308 	and.w	r3, r3, #8
 800954a:	2b00      	cmp	r3, #0
 800954c:	d00a      	beq.n	8009564 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	685b      	ldr	r3, [r3, #4]
 8009554:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	430a      	orrs	r2, r1
 8009562:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009568:	f003 0310 	and.w	r3, r3, #16
 800956c:	2b00      	cmp	r3, #0
 800956e:	d00a      	beq.n	8009586 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	689b      	ldr	r3, [r3, #8]
 8009576:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	430a      	orrs	r2, r1
 8009584:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800958a:	f003 0320 	and.w	r3, r3, #32
 800958e:	2b00      	cmp	r3, #0
 8009590:	d00a      	beq.n	80095a8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	689b      	ldr	r3, [r3, #8]
 8009598:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	430a      	orrs	r2, r1
 80095a6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d01a      	beq.n	80095ea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	685b      	ldr	r3, [r3, #4]
 80095ba:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	430a      	orrs	r2, r1
 80095c8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80095ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80095d2:	d10a      	bne.n	80095ea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	685b      	ldr	r3, [r3, #4]
 80095da:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	430a      	orrs	r2, r1
 80095e8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d00a      	beq.n	800960c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	685b      	ldr	r3, [r3, #4]
 80095fc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	430a      	orrs	r2, r1
 800960a:	605a      	str	r2, [r3, #4]
  }
}
 800960c:	bf00      	nop
 800960e:	370c      	adds	r7, #12
 8009610:	46bd      	mov	sp, r7
 8009612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009616:	4770      	bx	lr

08009618 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009618:	b580      	push	{r7, lr}
 800961a:	b086      	sub	sp, #24
 800961c:	af02      	add	r7, sp, #8
 800961e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	2200      	movs	r2, #0
 8009624:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009628:	f7f7 ffd4 	bl	80015d4 <HAL_GetTick>
 800962c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	f003 0308 	and.w	r3, r3, #8
 8009638:	2b08      	cmp	r3, #8
 800963a:	d10e      	bne.n	800965a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800963c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009640:	9300      	str	r3, [sp, #0]
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	2200      	movs	r2, #0
 8009646:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800964a:	6878      	ldr	r0, [r7, #4]
 800964c:	f000 f82f 	bl	80096ae <UART_WaitOnFlagUntilTimeout>
 8009650:	4603      	mov	r3, r0
 8009652:	2b00      	cmp	r3, #0
 8009654:	d001      	beq.n	800965a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009656:	2303      	movs	r3, #3
 8009658:	e025      	b.n	80096a6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	f003 0304 	and.w	r3, r3, #4
 8009664:	2b04      	cmp	r3, #4
 8009666:	d10e      	bne.n	8009686 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009668:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800966c:	9300      	str	r3, [sp, #0]
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	2200      	movs	r2, #0
 8009672:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009676:	6878      	ldr	r0, [r7, #4]
 8009678:	f000 f819 	bl	80096ae <UART_WaitOnFlagUntilTimeout>
 800967c:	4603      	mov	r3, r0
 800967e:	2b00      	cmp	r3, #0
 8009680:	d001      	beq.n	8009686 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009682:	2303      	movs	r3, #3
 8009684:	e00f      	b.n	80096a6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	2220      	movs	r2, #32
 800968a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	2220      	movs	r2, #32
 8009692:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	2200      	movs	r2, #0
 800969a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	2200      	movs	r2, #0
 80096a0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80096a4:	2300      	movs	r3, #0
}
 80096a6:	4618      	mov	r0, r3
 80096a8:	3710      	adds	r7, #16
 80096aa:	46bd      	mov	sp, r7
 80096ac:	bd80      	pop	{r7, pc}

080096ae <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80096ae:	b580      	push	{r7, lr}
 80096b0:	b084      	sub	sp, #16
 80096b2:	af00      	add	r7, sp, #0
 80096b4:	60f8      	str	r0, [r7, #12]
 80096b6:	60b9      	str	r1, [r7, #8]
 80096b8:	603b      	str	r3, [r7, #0]
 80096ba:	4613      	mov	r3, r2
 80096bc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80096be:	e062      	b.n	8009786 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80096c0:	69bb      	ldr	r3, [r7, #24]
 80096c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096c6:	d05e      	beq.n	8009786 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80096c8:	f7f7 ff84 	bl	80015d4 <HAL_GetTick>
 80096cc:	4602      	mov	r2, r0
 80096ce:	683b      	ldr	r3, [r7, #0]
 80096d0:	1ad3      	subs	r3, r2, r3
 80096d2:	69ba      	ldr	r2, [r7, #24]
 80096d4:	429a      	cmp	r2, r3
 80096d6:	d302      	bcc.n	80096de <UART_WaitOnFlagUntilTimeout+0x30>
 80096d8:	69bb      	ldr	r3, [r7, #24]
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d11d      	bne.n	800971a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	681a      	ldr	r2, [r3, #0]
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80096ec:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	689a      	ldr	r2, [r3, #8]
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	f022 0201 	bic.w	r2, r2, #1
 80096fc:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	2220      	movs	r2, #32
 8009702:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	2220      	movs	r2, #32
 800970a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	2200      	movs	r2, #0
 8009712:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8009716:	2303      	movs	r3, #3
 8009718:	e045      	b.n	80097a6 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	f003 0304 	and.w	r3, r3, #4
 8009724:	2b00      	cmp	r3, #0
 8009726:	d02e      	beq.n	8009786 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	69db      	ldr	r3, [r3, #28]
 800972e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009732:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009736:	d126      	bne.n	8009786 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009740:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	681a      	ldr	r2, [r3, #0]
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009750:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	689a      	ldr	r2, [r3, #8]
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	f022 0201 	bic.w	r2, r2, #1
 8009760:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	2220      	movs	r2, #32
 8009766:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	2220      	movs	r2, #32
 800976e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	2220      	movs	r2, #32
 8009776:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	2200      	movs	r2, #0
 800977e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8009782:	2303      	movs	r3, #3
 8009784:	e00f      	b.n	80097a6 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	69da      	ldr	r2, [r3, #28]
 800978c:	68bb      	ldr	r3, [r7, #8]
 800978e:	4013      	ands	r3, r2
 8009790:	68ba      	ldr	r2, [r7, #8]
 8009792:	429a      	cmp	r2, r3
 8009794:	bf0c      	ite	eq
 8009796:	2301      	moveq	r3, #1
 8009798:	2300      	movne	r3, #0
 800979a:	b2db      	uxtb	r3, r3
 800979c:	461a      	mov	r2, r3
 800979e:	79fb      	ldrb	r3, [r7, #7]
 80097a0:	429a      	cmp	r2, r3
 80097a2:	d08d      	beq.n	80096c0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80097a4:	2300      	movs	r3, #0
}
 80097a6:	4618      	mov	r0, r3
 80097a8:	3710      	adds	r7, #16
 80097aa:	46bd      	mov	sp, r7
 80097ac:	bd80      	pop	{r7, pc}

080097ae <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80097ae:	b480      	push	{r7}
 80097b0:	b083      	sub	sp, #12
 80097b2:	af00      	add	r7, sp, #0
 80097b4:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	681a      	ldr	r2, [r3, #0]
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80097c4:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	689a      	ldr	r2, [r3, #8]
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 80097d4:	609a      	str	r2, [r3, #8]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	2220      	movs	r2, #32
 80097da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 80097de:	bf00      	nop
 80097e0:	370c      	adds	r7, #12
 80097e2:	46bd      	mov	sp, r7
 80097e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e8:	4770      	bx	lr
	...

080097ec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80097ec:	b480      	push	{r7}
 80097ee:	b083      	sub	sp, #12
 80097f0:	af00      	add	r7, sp, #0
 80097f2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	681a      	ldr	r2, [r3, #0]
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8009802:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	6899      	ldr	r1, [r3, #8]
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	681a      	ldr	r2, [r3, #0]
 800980e:	4b0f      	ldr	r3, [pc, #60]	; (800984c <UART_EndRxTransfer+0x60>)
 8009810:	400b      	ands	r3, r1
 8009812:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009818:	2b01      	cmp	r3, #1
 800981a:	d107      	bne.n	800982c <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	681a      	ldr	r2, [r3, #0]
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	f022 0210 	bic.w	r2, r2, #16
 800982a:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	2220      	movs	r2, #32
 8009830:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	2200      	movs	r2, #0
 8009838:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	2200      	movs	r2, #0
 800983e:	671a      	str	r2, [r3, #112]	; 0x70
}
 8009840:	bf00      	nop
 8009842:	370c      	adds	r7, #12
 8009844:	46bd      	mov	sp, r7
 8009846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800984a:	4770      	bx	lr
 800984c:	effffffe 	.word	0xeffffffe

08009850 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009850:	b580      	push	{r7, lr}
 8009852:	b084      	sub	sp, #16
 8009854:	af00      	add	r7, sp, #0
 8009856:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800985c:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	69db      	ldr	r3, [r3, #28]
 8009862:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009866:	d014      	beq.n	8009892 <UART_DMATransmitCplt+0x42>
  {
    huart->TxXferCount = 0U;
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	2200      	movs	r2, #0
 800986c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	689a      	ldr	r2, [r3, #8]
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800987e:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	681a      	ldr	r2, [r3, #0]
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800988e:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009890:	e002      	b.n	8009898 <UART_DMATransmitCplt+0x48>
    HAL_UART_TxCpltCallback(huart);
 8009892:	68f8      	ldr	r0, [r7, #12]
 8009894:	f7f7 fbfc 	bl	8001090 <HAL_UART_TxCpltCallback>
}
 8009898:	bf00      	nop
 800989a:	3710      	adds	r7, #16
 800989c:	46bd      	mov	sp, r7
 800989e:	bd80      	pop	{r7, pc}

080098a0 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80098a0:	b580      	push	{r7, lr}
 80098a2:	b084      	sub	sp, #16
 80098a4:	af00      	add	r7, sp, #0
 80098a6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098ac:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80098ae:	68f8      	ldr	r0, [r7, #12]
 80098b0:	f7f7 fbe2 	bl	8001078 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80098b4:	bf00      	nop
 80098b6:	3710      	adds	r7, #16
 80098b8:	46bd      	mov	sp, r7
 80098ba:	bd80      	pop	{r7, pc}

080098bc <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80098bc:	b580      	push	{r7, lr}
 80098be:	b086      	sub	sp, #24
 80098c0:	af00      	add	r7, sp, #0
 80098c2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098c8:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80098ca:	697b      	ldr	r3, [r7, #20]
 80098cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80098d0:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80098d2:	697b      	ldr	r3, [r7, #20]
 80098d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80098d8:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80098da:	697b      	ldr	r3, [r7, #20]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	689b      	ldr	r3, [r3, #8]
 80098e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80098e4:	2b80      	cmp	r3, #128	; 0x80
 80098e6:	d109      	bne.n	80098fc <UART_DMAError+0x40>
 80098e8:	693b      	ldr	r3, [r7, #16]
 80098ea:	2b21      	cmp	r3, #33	; 0x21
 80098ec:	d106      	bne.n	80098fc <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80098ee:	697b      	ldr	r3, [r7, #20]
 80098f0:	2200      	movs	r2, #0
 80098f2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 80098f6:	6978      	ldr	r0, [r7, #20]
 80098f8:	f7ff ff59 	bl	80097ae <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80098fc:	697b      	ldr	r3, [r7, #20]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	689b      	ldr	r3, [r3, #8]
 8009902:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009906:	2b40      	cmp	r3, #64	; 0x40
 8009908:	d109      	bne.n	800991e <UART_DMAError+0x62>
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	2b22      	cmp	r3, #34	; 0x22
 800990e:	d106      	bne.n	800991e <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8009910:	697b      	ldr	r3, [r7, #20]
 8009912:	2200      	movs	r2, #0
 8009914:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8009918:	6978      	ldr	r0, [r7, #20]
 800991a:	f7ff ff67 	bl	80097ec <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800991e:	697b      	ldr	r3, [r7, #20]
 8009920:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009924:	f043 0210 	orr.w	r2, r3, #16
 8009928:	697b      	ldr	r3, [r7, #20]
 800992a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800992e:	6978      	ldr	r0, [r7, #20]
 8009930:	f7ff f85a 	bl	80089e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009934:	bf00      	nop
 8009936:	3718      	adds	r7, #24
 8009938:	46bd      	mov	sp, r7
 800993a:	bd80      	pop	{r7, pc}

0800993c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800993c:	b580      	push	{r7, lr}
 800993e:	b084      	sub	sp, #16
 8009940:	af00      	add	r7, sp, #0
 8009942:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009948:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	2200      	movs	r2, #0
 800994e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	2200      	movs	r2, #0
 8009956:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800995a:	68f8      	ldr	r0, [r7, #12]
 800995c:	f7ff f844 	bl	80089e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009960:	bf00      	nop
 8009962:	3710      	adds	r7, #16
 8009964:	46bd      	mov	sp, r7
 8009966:	bd80      	pop	{r7, pc}

08009968 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009968:	b580      	push	{r7, lr}
 800996a:	b082      	sub	sp, #8
 800996c:	af00      	add	r7, sp, #0
 800996e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	681a      	ldr	r2, [r3, #0]
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800997e:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	2220      	movs	r2, #32
 8009984:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	2200      	movs	r2, #0
 800998c:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800998e:	6878      	ldr	r0, [r7, #4]
 8009990:	f7f7 fb7e 	bl	8001090 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009994:	bf00      	nop
 8009996:	3708      	adds	r7, #8
 8009998:	46bd      	mov	sp, r7
 800999a:	bd80      	pop	{r7, pc}

0800999c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800999c:	b480      	push	{r7}
 800999e:	b083      	sub	sp, #12
 80099a0:	af00      	add	r7, sp, #0
 80099a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80099a4:	bf00      	nop
 80099a6:	370c      	adds	r7, #12
 80099a8:	46bd      	mov	sp, r7
 80099aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ae:	4770      	bx	lr

080099b0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80099b0:	b480      	push	{r7}
 80099b2:	b083      	sub	sp, #12
 80099b4:	af00      	add	r7, sp, #0
 80099b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80099b8:	bf00      	nop
 80099ba:	370c      	adds	r7, #12
 80099bc:	46bd      	mov	sp, r7
 80099be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c2:	4770      	bx	lr

080099c4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80099c4:	b480      	push	{r7}
 80099c6:	b083      	sub	sp, #12
 80099c8:	af00      	add	r7, sp, #0
 80099ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80099cc:	bf00      	nop
 80099ce:	370c      	adds	r7, #12
 80099d0:	46bd      	mov	sp, r7
 80099d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d6:	4770      	bx	lr

080099d8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80099d8:	b480      	push	{r7}
 80099da:	b085      	sub	sp, #20
 80099dc:	af00      	add	r7, sp, #0
 80099de:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80099e6:	2b01      	cmp	r3, #1
 80099e8:	d101      	bne.n	80099ee <HAL_UARTEx_DisableFifoMode+0x16>
 80099ea:	2302      	movs	r3, #2
 80099ec:	e027      	b.n	8009a3e <HAL_UARTEx_DisableFifoMode+0x66>
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	2201      	movs	r2, #1
 80099f2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	2224      	movs	r2, #36	; 0x24
 80099fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	681a      	ldr	r2, [r3, #0]
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	f022 0201 	bic.w	r2, r2, #1
 8009a14:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009a1c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	2200      	movs	r2, #0
 8009a22:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	68fa      	ldr	r2, [r7, #12]
 8009a2a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	2220      	movs	r2, #32
 8009a30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	2200      	movs	r2, #0
 8009a38:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009a3c:	2300      	movs	r3, #0
}
 8009a3e:	4618      	mov	r0, r3
 8009a40:	3714      	adds	r7, #20
 8009a42:	46bd      	mov	sp, r7
 8009a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a48:	4770      	bx	lr

08009a4a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009a4a:	b580      	push	{r7, lr}
 8009a4c:	b084      	sub	sp, #16
 8009a4e:	af00      	add	r7, sp, #0
 8009a50:	6078      	str	r0, [r7, #4]
 8009a52:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009a5a:	2b01      	cmp	r3, #1
 8009a5c:	d101      	bne.n	8009a62 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009a5e:	2302      	movs	r3, #2
 8009a60:	e02d      	b.n	8009abe <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	2201      	movs	r2, #1
 8009a66:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	2224      	movs	r2, #36	; 0x24
 8009a6e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	681a      	ldr	r2, [r3, #0]
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	f022 0201 	bic.w	r2, r2, #1
 8009a88:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	689b      	ldr	r3, [r3, #8]
 8009a90:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	683a      	ldr	r2, [r7, #0]
 8009a9a:	430a      	orrs	r2, r1
 8009a9c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009a9e:	6878      	ldr	r0, [r7, #4]
 8009aa0:	f000 f850 	bl	8009b44 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	68fa      	ldr	r2, [r7, #12]
 8009aaa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	2220      	movs	r2, #32
 8009ab0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	2200      	movs	r2, #0
 8009ab8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009abc:	2300      	movs	r3, #0
}
 8009abe:	4618      	mov	r0, r3
 8009ac0:	3710      	adds	r7, #16
 8009ac2:	46bd      	mov	sp, r7
 8009ac4:	bd80      	pop	{r7, pc}

08009ac6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009ac6:	b580      	push	{r7, lr}
 8009ac8:	b084      	sub	sp, #16
 8009aca:	af00      	add	r7, sp, #0
 8009acc:	6078      	str	r0, [r7, #4]
 8009ace:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009ad6:	2b01      	cmp	r3, #1
 8009ad8:	d101      	bne.n	8009ade <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009ada:	2302      	movs	r3, #2
 8009adc:	e02d      	b.n	8009b3a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	2201      	movs	r2, #1
 8009ae2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	2224      	movs	r2, #36	; 0x24
 8009aea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	681a      	ldr	r2, [r3, #0]
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	f022 0201 	bic.w	r2, r2, #1
 8009b04:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	689b      	ldr	r3, [r3, #8]
 8009b0c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	683a      	ldr	r2, [r7, #0]
 8009b16:	430a      	orrs	r2, r1
 8009b18:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009b1a:	6878      	ldr	r0, [r7, #4]
 8009b1c:	f000 f812 	bl	8009b44 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	68fa      	ldr	r2, [r7, #12]
 8009b26:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	2220      	movs	r2, #32
 8009b2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	2200      	movs	r2, #0
 8009b34:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009b38:	2300      	movs	r3, #0
}
 8009b3a:	4618      	mov	r0, r3
 8009b3c:	3710      	adds	r7, #16
 8009b3e:	46bd      	mov	sp, r7
 8009b40:	bd80      	pop	{r7, pc}
	...

08009b44 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009b44:	b480      	push	{r7}
 8009b46:	b085      	sub	sp, #20
 8009b48:	af00      	add	r7, sp, #0
 8009b4a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d108      	bne.n	8009b66 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	2201      	movs	r2, #1
 8009b58:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	2201      	movs	r2, #1
 8009b60:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009b64:	e031      	b.n	8009bca <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009b66:	2310      	movs	r3, #16
 8009b68:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009b6a:	2310      	movs	r3, #16
 8009b6c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	689b      	ldr	r3, [r3, #8]
 8009b74:	0e5b      	lsrs	r3, r3, #25
 8009b76:	b2db      	uxtb	r3, r3
 8009b78:	f003 0307 	and.w	r3, r3, #7
 8009b7c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	689b      	ldr	r3, [r3, #8]
 8009b84:	0f5b      	lsrs	r3, r3, #29
 8009b86:	b2db      	uxtb	r3, r3
 8009b88:	f003 0307 	and.w	r3, r3, #7
 8009b8c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009b8e:	7bbb      	ldrb	r3, [r7, #14]
 8009b90:	7b3a      	ldrb	r2, [r7, #12]
 8009b92:	4911      	ldr	r1, [pc, #68]	; (8009bd8 <UARTEx_SetNbDataToProcess+0x94>)
 8009b94:	5c8a      	ldrb	r2, [r1, r2]
 8009b96:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009b9a:	7b3a      	ldrb	r2, [r7, #12]
 8009b9c:	490f      	ldr	r1, [pc, #60]	; (8009bdc <UARTEx_SetNbDataToProcess+0x98>)
 8009b9e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009ba0:	fb93 f3f2 	sdiv	r3, r3, r2
 8009ba4:	b29a      	uxth	r2, r3
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009bac:	7bfb      	ldrb	r3, [r7, #15]
 8009bae:	7b7a      	ldrb	r2, [r7, #13]
 8009bb0:	4909      	ldr	r1, [pc, #36]	; (8009bd8 <UARTEx_SetNbDataToProcess+0x94>)
 8009bb2:	5c8a      	ldrb	r2, [r1, r2]
 8009bb4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009bb8:	7b7a      	ldrb	r2, [r7, #13]
 8009bba:	4908      	ldr	r1, [pc, #32]	; (8009bdc <UARTEx_SetNbDataToProcess+0x98>)
 8009bbc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009bbe:	fb93 f3f2 	sdiv	r3, r3, r2
 8009bc2:	b29a      	uxth	r2, r3
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8009bca:	bf00      	nop
 8009bcc:	3714      	adds	r7, #20
 8009bce:	46bd      	mov	sp, r7
 8009bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd4:	4770      	bx	lr
 8009bd6:	bf00      	nop
 8009bd8:	0800bfd8 	.word	0x0800bfd8
 8009bdc:	0800bfe0 	.word	0x0800bfe0

08009be0 <MX_PDM2PCM_Init>:
/* USER CODE BEGIN 1 */
/* USER CODE END 1 */

/* PDM2PCM init function */
void MX_PDM2PCM_Init(void)
{
 8009be0:	b580      	push	{r7, lr}
 8009be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

   /**
  */
  PDM1_filter_handler.bit_order = PDM_FILTER_BIT_ORDER_MSB;
 8009be4:	4b1f      	ldr	r3, [pc, #124]	; (8009c64 <MX_PDM2PCM_Init+0x84>)
 8009be6:	2201      	movs	r2, #1
 8009be8:	801a      	strh	r2, [r3, #0]
  PDM1_filter_handler.endianness = PDM_FILTER_ENDIANNESS_LE;
 8009bea:	4b1e      	ldr	r3, [pc, #120]	; (8009c64 <MX_PDM2PCM_Init+0x84>)
 8009bec:	2200      	movs	r2, #0
 8009bee:	805a      	strh	r2, [r3, #2]
  PDM1_filter_handler.high_pass_tap = 2104533974;
 8009bf0:	4b1c      	ldr	r3, [pc, #112]	; (8009c64 <MX_PDM2PCM_Init+0x84>)
 8009bf2:	4a1d      	ldr	r2, [pc, #116]	; (8009c68 <MX_PDM2PCM_Init+0x88>)
 8009bf4:	605a      	str	r2, [r3, #4]
  PDM1_filter_handler.in_ptr_channels = 2;
 8009bf6:	4b1b      	ldr	r3, [pc, #108]	; (8009c64 <MX_PDM2PCM_Init+0x84>)
 8009bf8:	2202      	movs	r2, #2
 8009bfa:	811a      	strh	r2, [r3, #8]
  PDM1_filter_handler.out_ptr_channels = 2;
 8009bfc:	4b19      	ldr	r3, [pc, #100]	; (8009c64 <MX_PDM2PCM_Init+0x84>)
 8009bfe:	2202      	movs	r2, #2
 8009c00:	815a      	strh	r2, [r3, #10]
  PDM_Filter_Init(&PDM1_filter_handler);
 8009c02:	4818      	ldr	r0, [pc, #96]	; (8009c64 <MX_PDM2PCM_Init+0x84>)
 8009c04:	f001 fd1a 	bl	800b63c <PDM_Filter_Init>

  PDM1_filter_config.decimation_factor = PDM_FILTER_DEC_FACTOR_64;
 8009c08:	4b18      	ldr	r3, [pc, #96]	; (8009c6c <MX_PDM2PCM_Init+0x8c>)
 8009c0a:	2202      	movs	r2, #2
 8009c0c:	801a      	strh	r2, [r3, #0]
  PDM1_filter_config.output_samples_number = 16;
 8009c0e:	4b17      	ldr	r3, [pc, #92]	; (8009c6c <MX_PDM2PCM_Init+0x8c>)
 8009c10:	2210      	movs	r2, #16
 8009c12:	805a      	strh	r2, [r3, #2]
  PDM1_filter_config.mic_gain = 4;
 8009c14:	4b15      	ldr	r3, [pc, #84]	; (8009c6c <MX_PDM2PCM_Init+0x8c>)
 8009c16:	2204      	movs	r2, #4
 8009c18:	809a      	strh	r2, [r3, #4]
  PDM_Filter_setConfig(&PDM1_filter_handler, &PDM1_filter_config);
 8009c1a:	4914      	ldr	r1, [pc, #80]	; (8009c6c <MX_PDM2PCM_Init+0x8c>)
 8009c1c:	4811      	ldr	r0, [pc, #68]	; (8009c64 <MX_PDM2PCM_Init+0x84>)
 8009c1e:	f001 fddd 	bl	800b7dc <PDM_Filter_setConfig>

  PDM2_filter_handler.bit_order = PDM_FILTER_BIT_ORDER_MSB;
 8009c22:	4b13      	ldr	r3, [pc, #76]	; (8009c70 <MX_PDM2PCM_Init+0x90>)
 8009c24:	2201      	movs	r2, #1
 8009c26:	801a      	strh	r2, [r3, #0]
  PDM2_filter_handler.endianness = PDM_FILTER_ENDIANNESS_LE;
 8009c28:	4b11      	ldr	r3, [pc, #68]	; (8009c70 <MX_PDM2PCM_Init+0x90>)
 8009c2a:	2200      	movs	r2, #0
 8009c2c:	805a      	strh	r2, [r3, #2]
  PDM2_filter_handler.high_pass_tap = 2104533974;
 8009c2e:	4b10      	ldr	r3, [pc, #64]	; (8009c70 <MX_PDM2PCM_Init+0x90>)
 8009c30:	4a0d      	ldr	r2, [pc, #52]	; (8009c68 <MX_PDM2PCM_Init+0x88>)
 8009c32:	605a      	str	r2, [r3, #4]
  PDM2_filter_handler.in_ptr_channels = 2;
 8009c34:	4b0e      	ldr	r3, [pc, #56]	; (8009c70 <MX_PDM2PCM_Init+0x90>)
 8009c36:	2202      	movs	r2, #2
 8009c38:	811a      	strh	r2, [r3, #8]
  PDM2_filter_handler.out_ptr_channels = 2;
 8009c3a:	4b0d      	ldr	r3, [pc, #52]	; (8009c70 <MX_PDM2PCM_Init+0x90>)
 8009c3c:	2202      	movs	r2, #2
 8009c3e:	815a      	strh	r2, [r3, #10]
  PDM_Filter_Init(&PDM2_filter_handler);
 8009c40:	480b      	ldr	r0, [pc, #44]	; (8009c70 <MX_PDM2PCM_Init+0x90>)
 8009c42:	f001 fcfb 	bl	800b63c <PDM_Filter_Init>

  PDM2_filter_config.decimation_factor = PDM_FILTER_DEC_FACTOR_64;
 8009c46:	4b0b      	ldr	r3, [pc, #44]	; (8009c74 <MX_PDM2PCM_Init+0x94>)
 8009c48:	2202      	movs	r2, #2
 8009c4a:	801a      	strh	r2, [r3, #0]
  PDM2_filter_config.output_samples_number = 16;
 8009c4c:	4b09      	ldr	r3, [pc, #36]	; (8009c74 <MX_PDM2PCM_Init+0x94>)
 8009c4e:	2210      	movs	r2, #16
 8009c50:	805a      	strh	r2, [r3, #2]
  PDM2_filter_config.mic_gain = 4;
 8009c52:	4b08      	ldr	r3, [pc, #32]	; (8009c74 <MX_PDM2PCM_Init+0x94>)
 8009c54:	2204      	movs	r2, #4
 8009c56:	809a      	strh	r2, [r3, #4]
  PDM_Filter_setConfig(&PDM2_filter_handler, &PDM2_filter_config);
 8009c58:	4906      	ldr	r1, [pc, #24]	; (8009c74 <MX_PDM2PCM_Init+0x94>)
 8009c5a:	4805      	ldr	r0, [pc, #20]	; (8009c70 <MX_PDM2PCM_Init+0x90>)
 8009c5c:	f001 fdbe 	bl	800b7dc <PDM_Filter_setConfig>

  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */

}
 8009c60:	bf00      	nop
 8009c62:	bd80      	pop	{r7, pc}
 8009c64:	24000738 	.word	0x24000738
 8009c68:	7d70a3d6 	.word	0x7d70a3d6
 8009c6c:	240006e4 	.word	0x240006e4
 8009c70:	240006ec 	.word	0x240006ec
 8009c74:	240006dc 	.word	0x240006dc

08009c78 <D16_GENERIC>:
 8009c78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c7c:	b089      	sub	sp, #36	; 0x24
 8009c7e:	6993      	ldr	r3, [r2, #24]
 8009c80:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 8009c82:	9103      	str	r1, [sp, #12]
 8009c84:	9307      	str	r3, [sp, #28]
 8009c86:	69d3      	ldr	r3, [r2, #28]
 8009c88:	e9d2 c102 	ldrd	ip, r1, [r2, #8]
 8009c8c:	e9d2 4a04 	ldrd	r4, sl, [r2, #16]
 8009c90:	9106      	str	r1, [sp, #24]
 8009c92:	e9d2 810c 	ldrd	r8, r1, [r2, #48]	; 0x30
 8009c96:	2d00      	cmp	r5, #0
 8009c98:	d063      	beq.n	8009d62 <D16_GENERIC+0xea>
 8009c9a:	f001 0520 	and.w	r5, r1, #32
 8009c9e:	f001 0110 	and.w	r1, r1, #16
 8009ca2:	f8df e0e0 	ldr.w	lr, [pc, #224]	; 8009d84 <D16_GENERIC+0x10c>
 8009ca6:	46c1      	mov	r9, r8
 8009ca8:	9104      	str	r1, [sp, #16]
 8009caa:	2100      	movs	r1, #0
 8009cac:	9505      	str	r5, [sp, #20]
 8009cae:	e04d      	b.n	8009d4c <D16_GENERIC+0xd4>
 8009cb0:	5d87      	ldrb	r7, [r0, r6]
 8009cb2:	7805      	ldrb	r5, [r0, #0]
 8009cb4:	eb00 0046 	add.w	r0, r0, r6, lsl #1
 8009cb8:	eb05 2707 	add.w	r7, r5, r7, lsl #8
 8009cbc:	b2fe      	uxtb	r6, r7
 8009cbe:	f3c7 2707 	ubfx	r7, r7, #8, #8
 8009cc2:	f85e 5026 	ldr.w	r5, [lr, r6, lsl #2]
 8009cc6:	f85e 6027 	ldr.w	r6, [lr, r7, lsl #2]
 8009cca:	441d      	add	r5, r3
 8009ccc:	eb06 2395 	add.w	r3, r6, r5, lsr #10
 8009cd0:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8009cd4:	f3c3 0609 	ubfx	r6, r3, #0, #10
 8009cd8:	0a9b      	lsrs	r3, r3, #10
 8009cda:	ea46 4605 	orr.w	r6, r6, r5, lsl #16
 8009cde:	4d27      	ldr	r5, [pc, #156]	; (8009d7c <D16_GENERIC+0x104>)
 8009ce0:	fb26 c505 	smlad	r5, r6, r5, ip
 8009ce4:	4f26      	ldr	r7, [pc, #152]	; (8009d80 <D16_GENERIC+0x108>)
 8009ce6:	fb26 fc07 	smuad	ip, r6, r7
 8009cea:	9e04      	ldr	r6, [sp, #16]
 8009cec:	f101 0801 	add.w	r8, r1, #1
 8009cf0:	f5a5 6500 	sub.w	r5, r5, #2048	; 0x800
 8009cf4:	b1ae      	cbz	r6, 8009d22 <D16_GENERIC+0xaa>
 8009cf6:	442c      	add	r4, r5
 8009cf8:	f8d2 b020 	ldr.w	fp, [r2, #32]
 8009cfc:	eba4 040a 	sub.w	r4, r4, sl
 8009d00:	46aa      	mov	sl, r5
 8009d02:	17e7      	asrs	r7, r4, #31
 8009d04:	fba4 450b 	umull	r4, r5, r4, fp
 8009d08:	e9cd 4500 	strd	r4, r5, [sp]
 8009d0c:	fb0b 5407 	mla	r4, fp, r7, r5
 8009d10:	9401      	str	r4, [sp, #4]
 8009d12:	e9dd 4500 	ldrd	r4, r5, [sp]
 8009d16:	f114 4400 	adds.w	r4, r4, #2147483648	; 0x80000000
 8009d1a:	f145 0500 	adc.w	r5, r5, #0
 8009d1e:	006c      	lsls	r4, r5, #1
 8009d20:	4625      	mov	r5, r4
 8009d22:	f8b2 b028 	ldrh.w	fp, [r2, #40]	; 0x28
 8009d26:	042d      	lsls	r5, r5, #16
 8009d28:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8009d2c:	2700      	movs	r7, #0
 8009d2e:	fb01 fb0b 	mul.w	fp, r1, fp
 8009d32:	fa1f f188 	uxth.w	r1, r8
 8009d36:	fbc9 6705 	smlal	r6, r7, r9, r5
 8009d3a:	9e03      	ldr	r6, [sp, #12]
 8009d3c:	10bd      	asrs	r5, r7, #2
 8009d3e:	f305 050f 	ssat	r5, #16, r5
 8009d42:	f826 501b 	strh.w	r5, [r6, fp, lsl #1]
 8009d46:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 8009d48:	428d      	cmp	r5, r1
 8009d4a:	d90a      	bls.n	8009d62 <D16_GENERIC+0xea>
 8009d4c:	8d55      	ldrh	r5, [r2, #42]	; 0x2a
 8009d4e:	2d01      	cmp	r5, #1
 8009d50:	b2ee      	uxtb	r6, r5
 8009d52:	d1ad      	bne.n	8009cb0 <D16_GENERIC+0x38>
 8009d54:	9d05      	ldr	r5, [sp, #20]
 8009d56:	f850 7b02 	ldr.w	r7, [r0], #2
 8009d5a:	2d00      	cmp	r5, #0
 8009d5c:	d0ae      	beq.n	8009cbc <D16_GENERIC+0x44>
 8009d5e:	ba7f      	rev16	r7, r7
 8009d60:	e7ac      	b.n	8009cbc <D16_GENERIC+0x44>
 8009d62:	2000      	movs	r0, #0
 8009d64:	9906      	ldr	r1, [sp, #24]
 8009d66:	61d3      	str	r3, [r2, #28]
 8009d68:	9b07      	ldr	r3, [sp, #28]
 8009d6a:	f8c2 c008 	str.w	ip, [r2, #8]
 8009d6e:	60d1      	str	r1, [r2, #12]
 8009d70:	6193      	str	r3, [r2, #24]
 8009d72:	e9c2 4a04 	strd	r4, sl, [r2, #16]
 8009d76:	b009      	add	sp, #36	; 0x24
 8009d78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d7c:	00030001 	.word	0x00030001
 8009d80:	00010003 	.word	0x00010003
 8009d84:	24000000 	.word	0x24000000

08009d88 <D24_GENERIC>:
 8009d88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d8c:	e9d2 4304 	ldrd	r4, r3, [r2, #16]
 8009d90:	b089      	sub	sp, #36	; 0x24
 8009d92:	8cd6      	ldrh	r6, [r2, #38]	; 0x26
 8009d94:	9303      	str	r3, [sp, #12]
 8009d96:	6993      	ldr	r3, [r2, #24]
 8009d98:	9104      	str	r1, [sp, #16]
 8009d9a:	9307      	str	r3, [sp, #28]
 8009d9c:	69d1      	ldr	r1, [r2, #28]
 8009d9e:	e9d2 3802 	ldrd	r3, r8, [r2, #8]
 8009da2:	e9d2 a50c 	ldrd	sl, r5, [r2, #48]	; 0x30
 8009da6:	2e00      	cmp	r6, #0
 8009da8:	f000 8088 	beq.w	8009ebc <D24_GENERIC+0x134>
 8009dac:	f005 0620 	and.w	r6, r5, #32
 8009db0:	f005 0510 	and.w	r5, r5, #16
 8009db4:	f04f 0c00 	mov.w	ip, #0
 8009db8:	f8df e140 	ldr.w	lr, [pc, #320]	; 8009efc <D24_GENERIC+0x174>
 8009dbc:	9606      	str	r6, [sp, #24]
 8009dbe:	9505      	str	r5, [sp, #20]
 8009dc0:	e064      	b.n	8009e8c <D24_GENERIC+0x104>
 8009dc2:	f810 5016 	ldrb.w	r5, [r0, r6, lsl #1]
 8009dc6:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 8009dca:	f810 b007 	ldrb.w	fp, [r0, r7]
 8009dce:	042d      	lsls	r5, r5, #16
 8009dd0:	19f0      	adds	r0, r6, r7
 8009dd2:	eb05 250b 	add.w	r5, r5, fp, lsl #8
 8009dd6:	44a9      	add	r9, r5
 8009dd8:	fa5f f689 	uxtb.w	r6, r9
 8009ddc:	f3c9 2707 	ubfx	r7, r9, #8, #8
 8009de0:	ea4f 4919 	mov.w	r9, r9, lsr #16
 8009de4:	f85e 6026 	ldr.w	r6, [lr, r6, lsl #2]
 8009de8:	f85e 7027 	ldr.w	r7, [lr, r7, lsl #2]
 8009dec:	eb06 2691 	add.w	r6, r6, r1, lsr #10
 8009df0:	f85e 1029 	ldr.w	r1, [lr, r9, lsl #2]
 8009df4:	eb07 2796 	add.w	r7, r7, r6, lsr #10
 8009df8:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8009dfc:	f3c7 0509 	ubfx	r5, r7, #0, #10
 8009e00:	eb01 2197 	add.w	r1, r1, r7, lsr #10
 8009e04:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
 8009e08:	4d3a      	ldr	r5, [pc, #232]	; (8009ef4 <D24_GENERIC+0x16c>)
 8009e0a:	fb26 8705 	smlad	r7, r6, r5, r8
 8009e0e:	4d3a      	ldr	r5, [pc, #232]	; (8009ef8 <D24_GENERIC+0x170>)
 8009e10:	fb26 3805 	smlad	r8, r6, r5, r3
 8009e14:	f3c1 0309 	ubfx	r3, r1, #0, #10
 8009e18:	eb03 0b43 	add.w	fp, r3, r3, lsl #1
 8009e1c:	2301      	movs	r3, #1
 8009e1e:	eb08 084b 	add.w	r8, r8, fp, lsl #1
 8009e22:	fb26 f603 	smuad	r6, r6, r3
 8009e26:	eb0c 0903 	add.w	r9, ip, r3
 8009e2a:	eb0b 0306 	add.w	r3, fp, r6
 8009e2e:	9e05      	ldr	r6, [sp, #20]
 8009e30:	f5a7 55d8 	sub.w	r5, r7, #6912	; 0x1b00
 8009e34:	b1ae      	cbz	r6, 8009e62 <D24_GENERIC+0xda>
 8009e36:	442c      	add	r4, r5
 8009e38:	9e03      	ldr	r6, [sp, #12]
 8009e3a:	f8d2 b020 	ldr.w	fp, [r2, #32]
 8009e3e:	1ba4      	subs	r4, r4, r6
 8009e40:	9503      	str	r5, [sp, #12]
 8009e42:	17e7      	asrs	r7, r4, #31
 8009e44:	fba4 450b 	umull	r4, r5, r4, fp
 8009e48:	e9cd 4500 	strd	r4, r5, [sp]
 8009e4c:	fb0b 5407 	mla	r4, fp, r7, r5
 8009e50:	9401      	str	r4, [sp, #4]
 8009e52:	e9dd 4500 	ldrd	r4, r5, [sp]
 8009e56:	f114 4400 	adds.w	r4, r4, #2147483648	; 0x80000000
 8009e5a:	f145 0500 	adc.w	r5, r5, #0
 8009e5e:	006c      	lsls	r4, r5, #1
 8009e60:	4625      	mov	r5, r4
 8009e62:	f8b2 b028 	ldrh.w	fp, [r2, #40]	; 0x28
 8009e66:	03ad      	lsls	r5, r5, #14
 8009e68:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8009e6c:	2700      	movs	r7, #0
 8009e6e:	fb0c fb0b 	mul.w	fp, ip, fp
 8009e72:	fa1f fc89 	uxth.w	ip, r9
 8009e76:	fbca 6705 	smlal	r6, r7, sl, r5
 8009e7a:	9e04      	ldr	r6, [sp, #16]
 8009e7c:	10bd      	asrs	r5, r7, #2
 8009e7e:	f305 050f 	ssat	r5, #16, r5
 8009e82:	f826 501b 	strh.w	r5, [r6, fp, lsl #1]
 8009e86:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 8009e88:	4565      	cmp	r5, ip
 8009e8a:	d917      	bls.n	8009ebc <D24_GENERIC+0x134>
 8009e8c:	8d55      	ldrh	r5, [r2, #42]	; 0x2a
 8009e8e:	f890 9000 	ldrb.w	r9, [r0]
 8009e92:	b2ef      	uxtb	r7, r5
 8009e94:	2d01      	cmp	r5, #1
 8009e96:	b23e      	sxth	r6, r7
 8009e98:	d193      	bne.n	8009dc2 <D24_GENERIC+0x3a>
 8009e9a:	9d06      	ldr	r5, [sp, #24]
 8009e9c:	b1dd      	cbz	r5, 8009ed6 <D24_GENERIC+0x14e>
 8009e9e:	78c7      	ldrb	r7, [r0, #3]
 8009ea0:	ea4f 2609 	mov.w	r6, r9, lsl #8
 8009ea4:	f01c 0f01 	tst.w	ip, #1
 8009ea8:	ea4f 2507 	mov.w	r5, r7, lsl #8
 8009eac:	eb06 4607 	add.w	r6, r6, r7, lsl #16
 8009eb0:	d11a      	bne.n	8009ee8 <D24_GENERIC+0x160>
 8009eb2:	f890 9001 	ldrb.w	r9, [r0, #1]
 8009eb6:	3002      	adds	r0, #2
 8009eb8:	44b1      	add	r9, r6
 8009eba:	e78d      	b.n	8009dd8 <D24_GENERIC+0x50>
 8009ebc:	6093      	str	r3, [r2, #8]
 8009ebe:	2000      	movs	r0, #0
 8009ec0:	9b03      	ldr	r3, [sp, #12]
 8009ec2:	f8c2 800c 	str.w	r8, [r2, #12]
 8009ec6:	6153      	str	r3, [r2, #20]
 8009ec8:	9b07      	ldr	r3, [sp, #28]
 8009eca:	61d1      	str	r1, [r2, #28]
 8009ecc:	6114      	str	r4, [r2, #16]
 8009ece:	6193      	str	r3, [r2, #24]
 8009ed0:	b009      	add	sp, #36	; 0x24
 8009ed2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ed6:	7845      	ldrb	r5, [r0, #1]
 8009ed8:	3003      	adds	r0, #3
 8009eda:	f810 6c01 	ldrb.w	r6, [r0, #-1]
 8009ede:	022d      	lsls	r5, r5, #8
 8009ee0:	eb05 4506 	add.w	r5, r5, r6, lsl #16
 8009ee4:	44a9      	add	r9, r5
 8009ee6:	e777      	b.n	8009dd8 <D24_GENERIC+0x50>
 8009ee8:	7886      	ldrb	r6, [r0, #2]
 8009eea:	3004      	adds	r0, #4
 8009eec:	eb05 4506 	add.w	r5, r5, r6, lsl #16
 8009ef0:	44a9      	add	r9, r5
 8009ef2:	e771      	b.n	8009dd8 <D24_GENERIC+0x50>
 8009ef4:	00030001 	.word	0x00030001
 8009ef8:	00060007 	.word	0x00060007
 8009efc:	24000000 	.word	0x24000000

08009f00 <D32_GENERIC>:
 8009f00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f04:	e9d2 4304 	ldrd	r4, r3, [r2, #16]
 8009f08:	b089      	sub	sp, #36	; 0x24
 8009f0a:	6b15      	ldr	r5, [r2, #48]	; 0x30
 8009f0c:	8cd6      	ldrh	r6, [r2, #38]	; 0x26
 8009f0e:	9302      	str	r3, [sp, #8]
 8009f10:	6993      	ldr	r3, [r2, #24]
 8009f12:	9104      	str	r1, [sp, #16]
 8009f14:	9307      	str	r3, [sp, #28]
 8009f16:	9503      	str	r5, [sp, #12]
 8009f18:	69d1      	ldr	r1, [r2, #28]
 8009f1a:	6b55      	ldr	r5, [r2, #52]	; 0x34
 8009f1c:	e9d2 3802 	ldrd	r3, r8, [r2, #8]
 8009f20:	2e00      	cmp	r6, #0
 8009f22:	f000 8097 	beq.w	800a054 <D32_GENERIC+0x154>
 8009f26:	f005 0620 	and.w	r6, r5, #32
 8009f2a:	f005 0510 	and.w	r5, r5, #16
 8009f2e:	f04f 0e00 	mov.w	lr, #0
 8009f32:	f8df c150 	ldr.w	ip, [pc, #336]	; 800a084 <D32_GENERIC+0x184>
 8009f36:	9606      	str	r6, [sp, #24]
 8009f38:	9505      	str	r5, [sp, #20]
 8009f3a:	e079      	b.n	800a030 <D32_GENERIC+0x130>
 8009f3c:	783d      	ldrb	r5, [r7, #0]
 8009f3e:	f810 b009 	ldrb.w	fp, [r0, r9]
 8009f42:	042d      	lsls	r5, r5, #16
 8009f44:	f810 a006 	ldrb.w	sl, [r0, r6]
 8009f48:	f890 9000 	ldrb.w	r9, [r0]
 8009f4c:	eb07 0046 	add.w	r0, r7, r6, lsl #1
 8009f50:	eb05 650b 	add.w	r5, r5, fp, lsl #24
 8009f54:	eb05 250a 	add.w	r5, r5, sl, lsl #8
 8009f58:	44a9      	add	r9, r5
 8009f5a:	fa5f f789 	uxtb.w	r7, r9
 8009f5e:	f3c9 2507 	ubfx	r5, r9, #8, #8
 8009f62:	f3c9 4607 	ubfx	r6, r9, #16, #8
 8009f66:	ea4f 6919 	mov.w	r9, r9, lsr #24
 8009f6a:	f85c 7027 	ldr.w	r7, [ip, r7, lsl #2]
 8009f6e:	f85c 5025 	ldr.w	r5, [ip, r5, lsl #2]
 8009f72:	eb07 2191 	add.w	r1, r7, r1, lsr #10
 8009f76:	f85c 6026 	ldr.w	r6, [ip, r6, lsl #2]
 8009f7a:	f85c 7029 	ldr.w	r7, [ip, r9, lsl #2]
 8009f7e:	eb05 2591 	add.w	r5, r5, r1, lsr #10
 8009f82:	f3c1 0909 	ubfx	r9, r1, #0, #10
 8009f86:	eb06 2695 	add.w	r6, r6, r5, lsr #10
 8009f8a:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8009f8e:	eb07 2196 	add.w	r1, r7, r6, lsr #10
 8009f92:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8009f96:	ea45 4909 	orr.w	r9, r5, r9, lsl #16
 8009f9a:	f3c1 0509 	ubfx	r5, r1, #0, #10
 8009f9e:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
 8009fa2:	4d34      	ldr	r5, [pc, #208]	; (800a074 <D32_GENERIC+0x174>)
 8009fa4:	fb29 8805 	smlad	r8, r9, r5, r8
 8009fa8:	f44f 3580 	mov.w	r5, #65536	; 0x10000
 8009fac:	fb26 8705 	smlad	r7, r6, r5, r8
 8009fb0:	4d31      	ldr	r5, [pc, #196]	; (800a078 <D32_GENERIC+0x178>)
 8009fb2:	fb29 3305 	smlad	r3, r9, r5, r3
 8009fb6:	4d31      	ldr	r5, [pc, #196]	; (800a07c <D32_GENERIC+0x17c>)
 8009fb8:	fb26 3805 	smlad	r8, r6, r5, r3
 8009fbc:	2301      	movs	r3, #1
 8009fbe:	fb29 f903 	smuad	r9, r9, r3
 8009fc2:	4b2f      	ldr	r3, [pc, #188]	; (800a080 <D32_GENERIC+0x180>)
 8009fc4:	fb26 9303 	smlad	r3, r6, r3, r9
 8009fc8:	9e05      	ldr	r6, [sp, #20]
 8009fca:	f10e 0901 	add.w	r9, lr, #1
 8009fce:	f5a7 4580 	sub.w	r5, r7, #16384	; 0x4000
 8009fd2:	b1ae      	cbz	r6, 800a000 <D32_GENERIC+0x100>
 8009fd4:	442c      	add	r4, r5
 8009fd6:	9e02      	ldr	r6, [sp, #8]
 8009fd8:	f8d2 a020 	ldr.w	sl, [r2, #32]
 8009fdc:	1ba4      	subs	r4, r4, r6
 8009fde:	9502      	str	r5, [sp, #8]
 8009fe0:	17e7      	asrs	r7, r4, #31
 8009fe2:	fba4 450a 	umull	r4, r5, r4, sl
 8009fe6:	e9cd 4500 	strd	r4, r5, [sp]
 8009fea:	fb0a 5407 	mla	r4, sl, r7, r5
 8009fee:	9401      	str	r4, [sp, #4]
 8009ff0:	e9dd 4500 	ldrd	r4, r5, [sp]
 8009ff4:	f114 4400 	adds.w	r4, r4, #2147483648	; 0x80000000
 8009ff8:	f145 0500 	adc.w	r5, r5, #0
 8009ffc:	006c      	lsls	r4, r5, #1
 8009ffe:	4625      	mov	r5, r4
 800a000:	f8b2 a028 	ldrh.w	sl, [r2, #40]	; 0x28
 800a004:	036d      	lsls	r5, r5, #13
 800a006:	9f03      	ldr	r7, [sp, #12]
 800a008:	fb0e fb0a 	mul.w	fp, lr, sl
 800a00c:	fa1f fe89 	uxth.w	lr, r9
 800a010:	f04f 0a00 	mov.w	sl, #0
 800a014:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
 800a018:	9e04      	ldr	r6, [sp, #16]
 800a01a:	fbc7 9a05 	smlal	r9, sl, r7, r5
 800a01e:	4657      	mov	r7, sl
 800a020:	10bd      	asrs	r5, r7, #2
 800a022:	f305 050f 	ssat	r5, #16, r5
 800a026:	f826 501b 	strh.w	r5, [r6, fp, lsl #1]
 800a02a:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 800a02c:	4575      	cmp	r5, lr
 800a02e:	d911      	bls.n	800a054 <D32_GENERIC+0x154>
 800a030:	8d55      	ldrh	r5, [r2, #42]	; 0x2a
 800a032:	b2ee      	uxtb	r6, r5
 800a034:	2d01      	cmp	r5, #1
 800a036:	eb00 0746 	add.w	r7, r0, r6, lsl #1
 800a03a:	eb06 0946 	add.w	r9, r6, r6, lsl #1
 800a03e:	f47f af7d 	bne.w	8009f3c <D32_GENERIC+0x3c>
 800a042:	1d05      	adds	r5, r0, #4
 800a044:	f8d0 9000 	ldr.w	r9, [r0]
 800a048:	9806      	ldr	r0, [sp, #24]
 800a04a:	b180      	cbz	r0, 800a06e <D32_GENERIC+0x16e>
 800a04c:	fa99 f999 	rev16.w	r9, r9
 800a050:	4628      	mov	r0, r5
 800a052:	e782      	b.n	8009f5a <D32_GENERIC+0x5a>
 800a054:	6093      	str	r3, [r2, #8]
 800a056:	2000      	movs	r0, #0
 800a058:	9b02      	ldr	r3, [sp, #8]
 800a05a:	f8c2 800c 	str.w	r8, [r2, #12]
 800a05e:	6153      	str	r3, [r2, #20]
 800a060:	9b07      	ldr	r3, [sp, #28]
 800a062:	61d1      	str	r1, [r2, #28]
 800a064:	6114      	str	r4, [r2, #16]
 800a066:	6193      	str	r3, [r2, #24]
 800a068:	b009      	add	sp, #36	; 0x24
 800a06a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a06e:	4628      	mov	r0, r5
 800a070:	e773      	b.n	8009f5a <D32_GENERIC+0x5a>
 800a072:	bf00      	nop
 800a074:	00060003 	.word	0x00060003
 800a078:	000a000c 	.word	0x000a000c
 800a07c:	000c000a 	.word	0x000c000a
 800a080:	00030006 	.word	0x00030006
 800a084:	24000000 	.word	0x24000000

0800a088 <D48_GENERIC>:
 800a088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a08c:	6913      	ldr	r3, [r2, #16]
 800a08e:	b089      	sub	sp, #36	; 0x24
 800a090:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 800a092:	9301      	str	r3, [sp, #4]
 800a094:	6953      	ldr	r3, [r2, #20]
 800a096:	9104      	str	r1, [sp, #16]
 800a098:	9302      	str	r3, [sp, #8]
 800a09a:	6993      	ldr	r3, [r2, #24]
 800a09c:	f8d2 c01c 	ldr.w	ip, [r2, #28]
 800a0a0:	9307      	str	r3, [sp, #28]
 800a0a2:	e9d2 3102 	ldrd	r3, r1, [r2, #8]
 800a0a6:	9100      	str	r1, [sp, #0]
 800a0a8:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800a0aa:	9103      	str	r1, [sp, #12]
 800a0ac:	6b51      	ldr	r1, [r2, #52]	; 0x34
 800a0ae:	2c00      	cmp	r4, #0
 800a0b0:	f000 80be 	beq.w	800a230 <D48_GENERIC+0x1a8>
 800a0b4:	f001 0420 	and.w	r4, r1, #32
 800a0b8:	f001 0110 	and.w	r1, r1, #16
 800a0bc:	f04f 0e00 	mov.w	lr, #0
 800a0c0:	9105      	str	r1, [sp, #20]
 800a0c2:	9406      	str	r4, [sp, #24]
 800a0c4:	4962      	ldr	r1, [pc, #392]	; (800a250 <D48_GENERIC+0x1c8>)
 800a0c6:	e0a0      	b.n	800a20a <D48_GENERIC+0x182>
 800a0c8:	eb00 0608 	add.w	r6, r0, r8
 800a0cc:	f810 a008 	ldrb.w	sl, [r0, r8]
 800a0d0:	f810 9005 	ldrb.w	r9, [r0, r5]
 800a0d4:	5df4      	ldrb	r4, [r6, r7]
 800a0d6:	443e      	add	r6, r7
 800a0d8:	f890 b000 	ldrb.w	fp, [r0]
 800a0dc:	0420      	lsls	r0, r4, #16
 800a0de:	eb06 0408 	add.w	r4, r6, r8
 800a0e2:	f816 6008 	ldrb.w	r6, [r6, r8]
 800a0e6:	eb00 6a0a 	add.w	sl, r0, sl, lsl #24
 800a0ea:	f814 8007 	ldrb.w	r8, [r4, r7]
 800a0ee:	4427      	add	r7, r4
 800a0f0:	eb0a 2a09 	add.w	sl, sl, r9, lsl #8
 800a0f4:	eb08 2606 	add.w	r6, r8, r6, lsl #8
 800a0f8:	eb0a 040b 	add.w	r4, sl, fp
 800a0fc:	eb07 0045 	add.w	r0, r7, r5, lsl #1
 800a100:	f3c6 2807 	ubfx	r8, r6, #8, #8
 800a104:	b2f7      	uxtb	r7, r6
 800a106:	b2e6      	uxtb	r6, r4
 800a108:	f3c4 2507 	ubfx	r5, r4, #8, #8
 800a10c:	f3c4 4907 	ubfx	r9, r4, #16, #8
 800a110:	ea4f 6b14 	mov.w	fp, r4, lsr #24
 800a114:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 800a118:	f851 5025 	ldr.w	r5, [r1, r5, lsl #2]
 800a11c:	eb06 269c 	add.w	r6, r6, ip, lsr #10
 800a120:	f851 9029 	ldr.w	r9, [r1, r9, lsl #2]
 800a124:	f851 402b 	ldr.w	r4, [r1, fp, lsl #2]
 800a128:	eb05 2596 	add.w	r5, r5, r6, lsr #10
 800a12c:	f851 7027 	ldr.w	r7, [r1, r7, lsl #2]
 800a130:	f851 c028 	ldr.w	ip, [r1, r8, lsl #2]
 800a134:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800a138:	eb09 2995 	add.w	r9, r9, r5, lsr #10
 800a13c:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800a140:	eb04 2499 	add.w	r4, r4, r9, lsr #10
 800a144:	f3c9 0909 	ubfx	r9, r9, #0, #10
 800a148:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
 800a14c:	9d00      	ldr	r5, [sp, #0]
 800a14e:	eb07 2794 	add.w	r7, r7, r4, lsr #10
 800a152:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800a156:	eb0c 2c97 	add.w	ip, ip, r7, lsr #10
 800a15a:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800a15e:	ea44 4909 	orr.w	r9, r4, r9, lsl #16
 800a162:	f3cc 0409 	ubfx	r4, ip, #0, #10
 800a166:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 800a16a:	4c3a      	ldr	r4, [pc, #232]	; (800a254 <D48_GENERIC+0x1cc>)
 800a16c:	fb26 5a04 	smlad	sl, r6, r4, r5
 800a170:	4c39      	ldr	r4, [pc, #228]	; (800a258 <D48_GENERIC+0x1d0>)
 800a172:	fb29 aa04 	smlad	sl, r9, r4, sl
 800a176:	f44f 3480 	mov.w	r4, #65536	; 0x10000
 800a17a:	fb27 aa04 	smlad	sl, r7, r4, sl
 800a17e:	4c37      	ldr	r4, [pc, #220]	; (800a25c <D48_GENERIC+0x1d4>)
 800a180:	fb26 3304 	smlad	r3, r6, r4, r3
 800a184:	f04f 141b 	mov.w	r4, #1769499	; 0x1b001b
 800a188:	fb29 3304 	smlad	r3, r9, r4, r3
 800a18c:	4c34      	ldr	r4, [pc, #208]	; (800a260 <D48_GENERIC+0x1d8>)
 800a18e:	fb27 3304 	smlad	r3, r7, r4, r3
 800a192:	2501      	movs	r5, #1
 800a194:	9300      	str	r3, [sp, #0]
 800a196:	fb26 f605 	smuad	r6, r6, r5
 800a19a:	4b32      	ldr	r3, [pc, #200]	; (800a264 <D48_GENERIC+0x1dc>)
 800a19c:	fb29 6903 	smlad	r9, r9, r3, r6
 800a1a0:	4b31      	ldr	r3, [pc, #196]	; (800a268 <D48_GENERIC+0x1e0>)
 800a1a2:	fb27 9303 	smlad	r3, r7, r3, r9
 800a1a6:	9c05      	ldr	r4, [sp, #20]
 800a1a8:	eb0e 0805 	add.w	r8, lr, r5
 800a1ac:	f5aa 4a58 	sub.w	sl, sl, #55296	; 0xd800
 800a1b0:	b19c      	cbz	r4, 800a1da <D48_GENERIC+0x152>
 800a1b2:	9c01      	ldr	r4, [sp, #4]
 800a1b4:	9d02      	ldr	r5, [sp, #8]
 800a1b6:	4454      	add	r4, sl
 800a1b8:	f8d2 9020 	ldr.w	r9, [r2, #32]
 800a1bc:	f8cd a008 	str.w	sl, [sp, #8]
 800a1c0:	1b64      	subs	r4, r4, r5
 800a1c2:	fba4 ab09 	umull	sl, fp, r4, r9
 800a1c6:	17e7      	asrs	r7, r4, #31
 800a1c8:	f11a 4400 	adds.w	r4, sl, #2147483648	; 0x80000000
 800a1cc:	fb09 bb07 	mla	fp, r9, r7, fp
 800a1d0:	f14b 0500 	adc.w	r5, fp, #0
 800a1d4:	006c      	lsls	r4, r5, #1
 800a1d6:	46a2      	mov	sl, r4
 800a1d8:	9401      	str	r4, [sp, #4]
 800a1da:	8d16      	ldrh	r6, [r2, #40]	; 0x28
 800a1dc:	ea4f 2aca 	mov.w	sl, sl, lsl #11
 800a1e0:	9d03      	ldr	r5, [sp, #12]
 800a1e2:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 800a1e6:	fb0e f606 	mul.w	r6, lr, r6
 800a1ea:	fa1f fe88 	uxth.w	lr, r8
 800a1ee:	f04f 0800 	mov.w	r8, #0
 800a1f2:	fbc5 780a 	smlal	r7, r8, r5, sl
 800a1f6:	4645      	mov	r5, r8
 800a1f8:	10ac      	asrs	r4, r5, #2
 800a1fa:	9d04      	ldr	r5, [sp, #16]
 800a1fc:	f304 040f 	ssat	r4, #16, r4
 800a200:	f825 4016 	strh.w	r4, [r5, r6, lsl #1]
 800a204:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 800a206:	4574      	cmp	r4, lr
 800a208:	d912      	bls.n	800a230 <D48_GENERIC+0x1a8>
 800a20a:	8d54      	ldrh	r4, [r2, #42]	; 0x2a
 800a20c:	b2e5      	uxtb	r5, r4
 800a20e:	2c01      	cmp	r4, #1
 800a210:	eb05 0845 	add.w	r8, r5, r5, lsl #1
 800a214:	f1c5 0700 	rsb	r7, r5, #0
 800a218:	f47f af56 	bne.w	800a0c8 <D48_GENERIC+0x40>
 800a21c:	9d06      	ldr	r5, [sp, #24]
 800a21e:	e9d0 4600 	ldrd	r4, r6, [r0]
 800a222:	3006      	adds	r0, #6
 800a224:	2d00      	cmp	r5, #0
 800a226:	f43f af6b 	beq.w	800a100 <D48_GENERIC+0x78>
 800a22a:	ba64      	rev16	r4, r4
 800a22c:	ba76      	rev16	r6, r6
 800a22e:	e767      	b.n	800a100 <D48_GENERIC+0x78>
 800a230:	6093      	str	r3, [r2, #8]
 800a232:	2000      	movs	r0, #0
 800a234:	9b00      	ldr	r3, [sp, #0]
 800a236:	f8c2 c01c 	str.w	ip, [r2, #28]
 800a23a:	60d3      	str	r3, [r2, #12]
 800a23c:	9b01      	ldr	r3, [sp, #4]
 800a23e:	6113      	str	r3, [r2, #16]
 800a240:	9b02      	ldr	r3, [sp, #8]
 800a242:	6153      	str	r3, [r2, #20]
 800a244:	9b07      	ldr	r3, [sp, #28]
 800a246:	6193      	str	r3, [r2, #24]
 800a248:	b009      	add	sp, #36	; 0x24
 800a24a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a24e:	bf00      	nop
 800a250:	24000000 	.word	0x24000000
 800a254:	000f000a 	.word	0x000f000a
 800a258:	00060003 	.word	0x00060003
 800a25c:	00150019 	.word	0x00150019
 800a260:	00190015 	.word	0x00190015
 800a264:	00030006 	.word	0x00030006
 800a268:	000a000f 	.word	0x000a000f

0800a26c <D64_GENERIC>:
 800a26c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a270:	6913      	ldr	r3, [r2, #16]
 800a272:	b089      	sub	sp, #36	; 0x24
 800a274:	6b15      	ldr	r5, [r2, #48]	; 0x30
 800a276:	9300      	str	r3, [sp, #0]
 800a278:	6953      	ldr	r3, [r2, #20]
 800a27a:	9105      	str	r1, [sp, #20]
 800a27c:	9303      	str	r3, [sp, #12]
 800a27e:	8cd1      	ldrh	r1, [r2, #38]	; 0x26
 800a280:	6993      	ldr	r3, [r2, #24]
 800a282:	69d4      	ldr	r4, [r2, #28]
 800a284:	9307      	str	r3, [sp, #28]
 800a286:	9504      	str	r5, [sp, #16]
 800a288:	e9d2 3602 	ldrd	r3, r6, [r2, #8]
 800a28c:	2900      	cmp	r1, #0
 800a28e:	f000 80e8 	beq.w	800a462 <D64_GENERIC+0x1f6>
 800a292:	6a11      	ldr	r1, [r2, #32]
 800a294:	2500      	movs	r5, #0
 800a296:	46b3      	mov	fp, r6
 800a298:	9302      	str	r3, [sp, #8]
 800a29a:	9106      	str	r1, [sp, #24]
 800a29c:	4978      	ldr	r1, [pc, #480]	; (800a480 <D64_GENERIC+0x214>)
 800a29e:	e0cc      	b.n	800a43a <D64_GENERIC+0x1ce>
 800a2a0:	eb0e 084e 	add.w	r8, lr, lr, lsl #1
 800a2a4:	f1ce 0c00 	rsb	ip, lr, #0
 800a2a8:	f890 9000 	ldrb.w	r9, [r0]
 800a2ac:	eb00 0708 	add.w	r7, r0, r8
 800a2b0:	f810 6008 	ldrb.w	r6, [r0, r8]
 800a2b4:	eb07 0a4c 	add.w	sl, r7, ip, lsl #1
 800a2b8:	f817 000c 	ldrb.w	r0, [r7, ip]
 800a2bc:	f817 301c 	ldrb.w	r3, [r7, ip, lsl #1]
 800a2c0:	eb0a 0748 	add.w	r7, sl, r8, lsl #1
 800a2c4:	f81a a018 	ldrb.w	sl, [sl, r8, lsl #1]
 800a2c8:	ea4f 4800 	mov.w	r8, r0, lsl #16
 800a2cc:	f817 000c 	ldrb.w	r0, [r7, ip]
 800a2d0:	eb08 6606 	add.w	r6, r8, r6, lsl #24
 800a2d4:	f817 801c 	ldrb.w	r8, [r7, ip, lsl #1]
 800a2d8:	0400      	lsls	r0, r0, #16
 800a2da:	4467      	add	r7, ip
 800a2dc:	eb06 2603 	add.w	r6, r6, r3, lsl #8
 800a2e0:	eb00 600a 	add.w	r0, r0, sl, lsl #24
 800a2e4:	f817 a01c 	ldrb.w	sl, [r7, ip, lsl #1]
 800a2e8:	eb07 074c 	add.w	r7, r7, ip, lsl #1
 800a2ec:	444e      	add	r6, r9
 800a2ee:	eb00 2808 	add.w	r8, r0, r8, lsl #8
 800a2f2:	eb07 008e 	add.w	r0, r7, lr, lsl #2
 800a2f6:	44c2      	add	sl, r8
 800a2f8:	b2f7      	uxtb	r7, r6
 800a2fa:	f3c6 2807 	ubfx	r8, r6, #8, #8
 800a2fe:	f3c6 4e07 	ubfx	lr, r6, #16, #8
 800a302:	0e36      	lsrs	r6, r6, #24
 800a304:	f851 7027 	ldr.w	r7, [r1, r7, lsl #2]
 800a308:	fa5f fc8a 	uxtb.w	ip, sl
 800a30c:	f851 8028 	ldr.w	r8, [r1, r8, lsl #2]
 800a310:	f3ca 2907 	ubfx	r9, sl, #8, #8
 800a314:	443c      	add	r4, r7
 800a316:	f851 702e 	ldr.w	r7, [r1, lr, lsl #2]
 800a31a:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 800a31e:	eb08 2894 	add.w	r8, r8, r4, lsr #10
 800a322:	f851 c02c 	ldr.w	ip, [r1, ip, lsl #2]
 800a326:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800a32a:	4b56      	ldr	r3, [pc, #344]	; (800a484 <D64_GENERIC+0x218>)
 800a32c:	eb07 2e98 	add.w	lr, r7, r8, lsr #10
 800a330:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800a334:	f851 7029 	ldr.w	r7, [r1, r9, lsl #2]
 800a338:	eb06 269e 	add.w	r6, r6, lr, lsr #10
 800a33c:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800a340:	ea48 4804 	orr.w	r8, r8, r4, lsl #16
 800a344:	f3ca 4407 	ubfx	r4, sl, #16, #8
 800a348:	eb0c 2c96 	add.w	ip, ip, r6, lsr #10
 800a34c:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800a350:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 800a354:	ea4f 6a1a 	mov.w	sl, sl, lsr #24
 800a358:	eb07 279c 	add.w	r7, r7, ip, lsr #10
 800a35c:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 800a360:	f851 902a 	ldr.w	r9, [r1, sl, lsl #2]
 800a364:	ea46 460e 	orr.w	r6, r6, lr, lsl #16
 800a368:	eb04 2a97 	add.w	sl, r4, r7, lsr #10
 800a36c:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800a370:	eb09 299a 	add.w	r9, r9, sl, lsr #10
 800a374:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 800a378:	ea47 4c0c 	orr.w	ip, r7, ip, lsl #16
 800a37c:	f3c9 0709 	ubfx	r7, r9, #0, #10
 800a380:	ea4f 2499 	mov.w	r4, r9, lsr #10
 800a384:	ea47 4a0a 	orr.w	sl, r7, sl, lsl #16
 800a388:	fb28 b903 	smlad	r9, r8, r3, fp
 800a38c:	4b3e      	ldr	r3, [pc, #248]	; (800a488 <D64_GENERIC+0x21c>)
 800a38e:	fb26 9903 	smlad	r9, r6, r3, r9
 800a392:	4b3e      	ldr	r3, [pc, #248]	; (800a48c <D64_GENERIC+0x220>)
 800a394:	fb2c 9703 	smlad	r7, ip, r3, r9
 800a398:	f44f 3980 	mov.w	r9, #65536	; 0x10000
 800a39c:	fb2a 7909 	smlad	r9, sl, r9, r7
 800a3a0:	4f3b      	ldr	r7, [pc, #236]	; (800a490 <D64_GENERIC+0x224>)
 800a3a2:	9b02      	ldr	r3, [sp, #8]
 800a3a4:	fb28 3307 	smlad	r3, r8, r7, r3
 800a3a8:	fb2a 3317 	smladx	r3, sl, r7, r3
 800a3ac:	4f39      	ldr	r7, [pc, #228]	; (800a494 <D64_GENERIC+0x228>)
 800a3ae:	fb26 3307 	smlad	r3, r6, r7, r3
 800a3b2:	fb2c 3b17 	smladx	fp, ip, r7, r3
 800a3b6:	f04f 0e01 	mov.w	lr, #1
 800a3ba:	fb28 f80e 	smuad	r8, r8, lr
 800a3be:	4b36      	ldr	r3, [pc, #216]	; (800a498 <D64_GENERIC+0x22c>)
 800a3c0:	fb26 8603 	smlad	r6, r6, r3, r8
 800a3c4:	4b35      	ldr	r3, [pc, #212]	; (800a49c <D64_GENERIC+0x230>)
 800a3c6:	fb2c 6c03 	smlad	ip, ip, r3, r6
 800a3ca:	4b35      	ldr	r3, [pc, #212]	; (800a4a0 <D64_GENERIC+0x234>)
 800a3cc:	fb2a c303 	smlad	r3, sl, r3, ip
 800a3d0:	9f06      	ldr	r7, [sp, #24]
 800a3d2:	f5a9 3900 	sub.w	r9, r9, #131072	; 0x20000
 800a3d6:	9302      	str	r3, [sp, #8]
 800a3d8:	b1cf      	cbz	r7, 800a40e <D64_GENERIC+0x1a2>
 800a3da:	9b00      	ldr	r3, [sp, #0]
 800a3dc:	444b      	add	r3, r9
 800a3de:	461e      	mov	r6, r3
 800a3e0:	9b03      	ldr	r3, [sp, #12]
 800a3e2:	f8cd 900c 	str.w	r9, [sp, #12]
 800a3e6:	1af6      	subs	r6, r6, r3
 800a3e8:	46b0      	mov	r8, r6
 800a3ea:	ea4f 79e6 	mov.w	r9, r6, asr #31
 800a3ee:	e9cd 8900 	strd	r8, r9, [sp]
 800a3f2:	fba6 8907 	umull	r8, r9, r6, r7
 800a3f6:	9e01      	ldr	r6, [sp, #4]
 800a3f8:	fb07 9306 	mla	r3, r7, r6, r9
 800a3fc:	4646      	mov	r6, r8
 800a3fe:	f116 4600 	adds.w	r6, r6, #2147483648	; 0x80000000
 800a402:	f143 0700 	adc.w	r7, r3, #0
 800a406:	fa07 f30e 	lsl.w	r3, r7, lr
 800a40a:	4699      	mov	r9, r3
 800a40c:	9300      	str	r3, [sp, #0]
 800a40e:	f8b2 c028 	ldrh.w	ip, [r2, #40]	; 0x28
 800a412:	ea4f 2989 	mov.w	r9, r9, lsl #10
 800a416:	9b04      	ldr	r3, [sp, #16]
 800a418:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800a41c:	2700      	movs	r7, #0
 800a41e:	fb05 fc0c 	mul.w	ip, r5, ip
 800a422:	3501      	adds	r5, #1
 800a424:	fbc3 6709 	smlal	r6, r7, r3, r9
 800a428:	9b05      	ldr	r3, [sp, #20]
 800a42a:	10be      	asrs	r6, r7, #2
 800a42c:	f306 060f 	ssat	r6, #16, r6
 800a430:	f823 601c 	strh.w	r6, [r3, ip, lsl #1]
 800a434:	8cd6      	ldrh	r6, [r2, #38]	; 0x26
 800a436:	42ae      	cmp	r6, r5
 800a438:	dd11      	ble.n	800a45e <D64_GENERIC+0x1f2>
 800a43a:	f8b2 e02a 	ldrh.w	lr, [r2, #42]	; 0x2a
 800a43e:	f1be 0f01 	cmp.w	lr, #1
 800a442:	f47f af2d 	bne.w	800a2a0 <D64_GENERIC+0x34>
 800a446:	6b57      	ldr	r7, [r2, #52]	; 0x34
 800a448:	f100 0c08 	add.w	ip, r0, #8
 800a44c:	06bb      	lsls	r3, r7, #26
 800a44e:	e9d0 6a00 	ldrd	r6, sl, [r0]
 800a452:	d513      	bpl.n	800a47c <D64_GENERIC+0x210>
 800a454:	ba76      	rev16	r6, r6
 800a456:	fa9a fa9a 	rev16.w	sl, sl
 800a45a:	4660      	mov	r0, ip
 800a45c:	e74c      	b.n	800a2f8 <D64_GENERIC+0x8c>
 800a45e:	465e      	mov	r6, fp
 800a460:	9b02      	ldr	r3, [sp, #8]
 800a462:	6093      	str	r3, [r2, #8]
 800a464:	2000      	movs	r0, #0
 800a466:	9b00      	ldr	r3, [sp, #0]
 800a468:	60d6      	str	r6, [r2, #12]
 800a46a:	6113      	str	r3, [r2, #16]
 800a46c:	9b03      	ldr	r3, [sp, #12]
 800a46e:	61d4      	str	r4, [r2, #28]
 800a470:	6153      	str	r3, [r2, #20]
 800a472:	9b07      	ldr	r3, [sp, #28]
 800a474:	6193      	str	r3, [r2, #24]
 800a476:	b009      	add	sp, #36	; 0x24
 800a478:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a47c:	4660      	mov	r0, ip
 800a47e:	e73b      	b.n	800a2f8 <D64_GENERIC+0x8c>
 800a480:	24000000 	.word	0x24000000
 800a484:	001c0015 	.word	0x001c0015
 800a488:	000f000a 	.word	0x000f000a
 800a48c:	00060003 	.word	0x00060003
 800a490:	0024002a 	.word	0x0024002a
 800a494:	002e0030 	.word	0x002e0030
 800a498:	00030006 	.word	0x00030006
 800a49c:	000a000f 	.word	0x000a000f
 800a4a0:	0015001c 	.word	0x0015001c

0800a4a4 <D80_GENERIC>:
 800a4a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4a8:	b08b      	sub	sp, #44	; 0x2c
 800a4aa:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 800a4ac:	9107      	str	r1, [sp, #28]
 800a4ae:	6911      	ldr	r1, [r2, #16]
 800a4b0:	9104      	str	r1, [sp, #16]
 800a4b2:	6951      	ldr	r1, [r2, #20]
 800a4b4:	9105      	str	r1, [sp, #20]
 800a4b6:	6991      	ldr	r1, [r2, #24]
 800a4b8:	9109      	str	r1, [sp, #36]	; 0x24
 800a4ba:	69d1      	ldr	r1, [r2, #28]
 800a4bc:	9102      	str	r1, [sp, #8]
 800a4be:	6891      	ldr	r1, [r2, #8]
 800a4c0:	9103      	str	r1, [sp, #12]
 800a4c2:	68d1      	ldr	r1, [r2, #12]
 800a4c4:	9101      	str	r1, [sp, #4]
 800a4c6:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800a4c8:	9106      	str	r1, [sp, #24]
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	f000 810b 	beq.w	800a6e6 <D80_GENERIC+0x242>
 800a4d0:	6a13      	ldr	r3, [r2, #32]
 800a4d2:	f04f 0800 	mov.w	r8, #0
 800a4d6:	f8df c260 	ldr.w	ip, [pc, #608]	; 800a738 <D80_GENERIC+0x294>
 800a4da:	9308      	str	r3, [sp, #32]
 800a4dc:	9200      	str	r2, [sp, #0]
 800a4de:	e0ee      	b.n	800a6be <D80_GENERIC+0x21a>
 800a4e0:	b2db      	uxtb	r3, r3
 800a4e2:	f890 e000 	ldrb.w	lr, [r0]
 800a4e6:	b219      	sxth	r1, r3
 800a4e8:	425c      	negs	r4, r3
 800a4ea:	f810 9003 	ldrb.w	r9, [r0, r3]
 800a4ee:	004e      	lsls	r6, r1, #1
 800a4f0:	eb01 0581 	add.w	r5, r1, r1, lsl #2
 800a4f4:	4431      	add	r1, r6
 800a4f6:	1843      	adds	r3, r0, r1
 800a4f8:	f810 b001 	ldrb.w	fp, [r0, r1]
 800a4fc:	1919      	adds	r1, r3, r4
 800a4fe:	5d1b      	ldrb	r3, [r3, r4]
 800a500:	1948      	adds	r0, r1, r5
 800a502:	f811 a005 	ldrb.w	sl, [r1, r5]
 800a506:	041b      	lsls	r3, r3, #16
 800a508:	1907      	adds	r7, r0, r4
 800a50a:	5d01      	ldrb	r1, [r0, r4]
 800a50c:	eb03 630b 	add.w	r3, r3, fp, lsl #24
 800a510:	f810 0014 	ldrb.w	r0, [r0, r4, lsl #1]
 800a514:	eb07 0b44 	add.w	fp, r7, r4, lsl #1
 800a518:	f817 7014 	ldrb.w	r7, [r7, r4, lsl #1]
 800a51c:	0409      	lsls	r1, r1, #16
 800a51e:	eb03 2309 	add.w	r3, r3, r9, lsl #8
 800a522:	eb0b 0905 	add.w	r9, fp, r5
 800a526:	eb01 610a 	add.w	r1, r1, sl, lsl #24
 800a52a:	f81b 5005 	ldrb.w	r5, [fp, r5]
 800a52e:	eb09 0b04 	add.w	fp, r9, r4
 800a532:	f819 4004 	ldrb.w	r4, [r9, r4]
 800a536:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 800a53a:	4473      	add	r3, lr
 800a53c:	eb0b 0006 	add.w	r0, fp, r6
 800a540:	eb04 2505 	add.w	r5, r4, r5, lsl #8
 800a544:	4439      	add	r1, r7
 800a546:	f3c3 2407 	ubfx	r4, r3, #8, #8
 800a54a:	b2df      	uxtb	r7, r3
 800a54c:	f3c3 4607 	ubfx	r6, r3, #16, #8
 800a550:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 800a554:	f85c 3027 	ldr.w	r3, [ip, r7, lsl #2]
 800a558:	fa5f fa81 	uxtb.w	sl, r1
 800a55c:	f85c 7024 	ldr.w	r7, [ip, r4, lsl #2]
 800a560:	9c02      	ldr	r4, [sp, #8]
 800a562:	f85c 9026 	ldr.w	r9, [ip, r6, lsl #2]
 800a566:	441c      	add	r4, r3
 800a568:	f85c 602e 	ldr.w	r6, [ip, lr, lsl #2]
 800a56c:	f85c e02a 	ldr.w	lr, [ip, sl, lsl #2]
 800a570:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 800a574:	eb07 2794 	add.w	r7, r7, r4, lsr #10
 800a578:	f3c4 0309 	ubfx	r3, r4, #0, #10
 800a57c:	f3c1 2407 	ubfx	r4, r1, #8, #8
 800a580:	b2ed      	uxtb	r5, r5
 800a582:	eb09 2997 	add.w	r9, r9, r7, lsr #10
 800a586:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800a58a:	f85c 4024 	ldr.w	r4, [ip, r4, lsl #2]
 800a58e:	eb06 2699 	add.w	r6, r6, r9, lsr #10
 800a592:	f85c 5025 	ldr.w	r5, [ip, r5, lsl #2]
 800a596:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
 800a59a:	f3c1 4707 	ubfx	r7, r1, #16, #8
 800a59e:	eb0e 2e96 	add.w	lr, lr, r6, lsr #10
 800a5a2:	f85c a02a 	ldr.w	sl, [ip, sl, lsl #2]
 800a5a6:	f85c 7027 	ldr.w	r7, [ip, r7, lsl #2]
 800a5aa:	0e09      	lsrs	r1, r1, #24
 800a5ac:	eb04 249e 	add.w	r4, r4, lr, lsr #10
 800a5b0:	f3c9 0909 	ubfx	r9, r9, #0, #10
 800a5b4:	f85c 1021 	ldr.w	r1, [ip, r1, lsl #2]
 800a5b8:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800a5bc:	eb07 2794 	add.w	r7, r7, r4, lsr #10
 800a5c0:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800a5c4:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800a5c8:	eb01 2197 	add.w	r1, r1, r7, lsr #10
 800a5cc:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800a5d0:	ea46 4609 	orr.w	r6, r6, r9, lsl #16
 800a5d4:	eb05 2591 	add.w	r5, r5, r1, lsr #10
 800a5d8:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800a5dc:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 800a5e0:	eb0a 2a95 	add.w	sl, sl, r5, lsr #10
 800a5e4:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800a5e8:	ea41 4107 	orr.w	r1, r1, r7, lsl #16
 800a5ec:	ea4f 229a 	mov.w	r2, sl, lsr #10
 800a5f0:	f3ca 0709 	ubfx	r7, sl, #0, #10
 800a5f4:	9202      	str	r2, [sp, #8]
 800a5f6:	ea47 4505 	orr.w	r5, r7, r5, lsl #16
 800a5fa:	4a43      	ldr	r2, [pc, #268]	; (800a708 <D80_GENERIC+0x264>)
 800a5fc:	9f01      	ldr	r7, [sp, #4]
 800a5fe:	fb23 7a02 	smlad	sl, r3, r2, r7
 800a602:	4a42      	ldr	r2, [pc, #264]	; (800a70c <D80_GENERIC+0x268>)
 800a604:	fb26 aa02 	smlad	sl, r6, r2, sl
 800a608:	4a41      	ldr	r2, [pc, #260]	; (800a710 <D80_GENERIC+0x26c>)
 800a60a:	fb24 aa02 	smlad	sl, r4, r2, sl
 800a60e:	4a41      	ldr	r2, [pc, #260]	; (800a714 <D80_GENERIC+0x270>)
 800a610:	fb21 a702 	smlad	r7, r1, r2, sl
 800a614:	f44f 3a80 	mov.w	sl, #65536	; 0x10000
 800a618:	fb25 7a0a 	smlad	sl, r5, sl, r7
 800a61c:	4a3e      	ldr	r2, [pc, #248]	; (800a718 <D80_GENERIC+0x274>)
 800a61e:	9f03      	ldr	r7, [sp, #12]
 800a620:	fb23 7e02 	smlad	lr, r3, r2, r7
 800a624:	4a3d      	ldr	r2, [pc, #244]	; (800a71c <D80_GENERIC+0x278>)
 800a626:	fb26 ee02 	smlad	lr, r6, r2, lr
 800a62a:	f04f 174b 	mov.w	r7, #4915275	; 0x4b004b
 800a62e:	fb24 e707 	smlad	r7, r4, r7, lr
 800a632:	4a3b      	ldr	r2, [pc, #236]	; (800a720 <D80_GENERIC+0x27c>)
 800a634:	fb21 7702 	smlad	r7, r1, r2, r7
 800a638:	4a3a      	ldr	r2, [pc, #232]	; (800a724 <D80_GENERIC+0x280>)
 800a63a:	fb25 7202 	smlad	r2, r5, r2, r7
 800a63e:	f04f 0901 	mov.w	r9, #1
 800a642:	9201      	str	r2, [sp, #4]
 800a644:	fb23 f909 	smuad	r9, r3, r9
 800a648:	4b37      	ldr	r3, [pc, #220]	; (800a728 <D80_GENERIC+0x284>)
 800a64a:	fb26 9603 	smlad	r6, r6, r3, r9
 800a64e:	4f37      	ldr	r7, [pc, #220]	; (800a72c <D80_GENERIC+0x288>)
 800a650:	fb24 6407 	smlad	r4, r4, r7, r6
 800a654:	4f36      	ldr	r7, [pc, #216]	; (800a730 <D80_GENERIC+0x28c>)
 800a656:	fb21 4707 	smlad	r7, r1, r7, r4
 800a65a:	4936      	ldr	r1, [pc, #216]	; (800a734 <D80_GENERIC+0x290>)
 800a65c:	fb25 7301 	smlad	r3, r5, r1, r7
 800a660:	9303      	str	r3, [sp, #12]
 800a662:	f5aa 3a7a 	sub.w	sl, sl, #256000	; 0x3e800
 800a666:	9b08      	ldr	r3, [sp, #32]
 800a668:	b193      	cbz	r3, 800a690 <D80_GENERIC+0x1ec>
 800a66a:	9a04      	ldr	r2, [sp, #16]
 800a66c:	4452      	add	r2, sl
 800a66e:	4614      	mov	r4, r2
 800a670:	9a05      	ldr	r2, [sp, #20]
 800a672:	f8cd a014 	str.w	sl, [sp, #20]
 800a676:	1aa4      	subs	r4, r4, r2
 800a678:	fba4 1203 	umull	r1, r2, r4, r3
 800a67c:	17e7      	asrs	r7, r4, #31
 800a67e:	f111 4400 	adds.w	r4, r1, #2147483648	; 0x80000000
 800a682:	fb03 2207 	mla	r2, r3, r7, r2
 800a686:	f142 0500 	adc.w	r5, r2, #0
 800a68a:	006b      	lsls	r3, r5, #1
 800a68c:	469a      	mov	sl, r3
 800a68e:	9304      	str	r3, [sp, #16]
 800a690:	9e00      	ldr	r6, [sp, #0]
 800a692:	ea4f 2a4a 	mov.w	sl, sl, lsl #9
 800a696:	9a06      	ldr	r2, [sp, #24]
 800a698:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800a69c:	8d33      	ldrh	r3, [r6, #40]	; 0x28
 800a69e:	2500      	movs	r5, #0
 800a6a0:	fb08 f303 	mul.w	r3, r8, r3
 800a6a4:	fbc2 450a 	smlal	r4, r5, r2, sl
 800a6a8:	9a07      	ldr	r2, [sp, #28]
 800a6aa:	f108 0801 	add.w	r8, r8, #1
 800a6ae:	10a9      	asrs	r1, r5, #2
 800a6b0:	f301 010f 	ssat	r1, #16, r1
 800a6b4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800a6b8:	8cf3      	ldrh	r3, [r6, #38]	; 0x26
 800a6ba:	4543      	cmp	r3, r8
 800a6bc:	dd12      	ble.n	800a6e4 <D80_GENERIC+0x240>
 800a6be:	9b00      	ldr	r3, [sp, #0]
 800a6c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a6c2:	2b01      	cmp	r3, #1
 800a6c4:	f47f af0c 	bne.w	800a4e0 <D80_GENERIC+0x3c>
 800a6c8:	9b00      	ldr	r3, [sp, #0]
 800a6ca:	6885      	ldr	r5, [r0, #8]
 800a6cc:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 800a6ce:	06b2      	lsls	r2, r6, #26
 800a6d0:	e9d0 3100 	ldrd	r3, r1, [r0]
 800a6d4:	f100 000a 	add.w	r0, r0, #10
 800a6d8:	f57f af35 	bpl.w	800a546 <D80_GENERIC+0xa2>
 800a6dc:	ba5b      	rev16	r3, r3
 800a6de:	ba49      	rev16	r1, r1
 800a6e0:	ba6d      	rev16	r5, r5
 800a6e2:	e730      	b.n	800a546 <D80_GENERIC+0xa2>
 800a6e4:	4632      	mov	r2, r6
 800a6e6:	9b03      	ldr	r3, [sp, #12]
 800a6e8:	2000      	movs	r0, #0
 800a6ea:	6093      	str	r3, [r2, #8]
 800a6ec:	9b01      	ldr	r3, [sp, #4]
 800a6ee:	60d3      	str	r3, [r2, #12]
 800a6f0:	9b02      	ldr	r3, [sp, #8]
 800a6f2:	61d3      	str	r3, [r2, #28]
 800a6f4:	9b04      	ldr	r3, [sp, #16]
 800a6f6:	6113      	str	r3, [r2, #16]
 800a6f8:	9b05      	ldr	r3, [sp, #20]
 800a6fa:	6153      	str	r3, [r2, #20]
 800a6fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a6fe:	6193      	str	r3, [r2, #24]
 800a700:	b00b      	add	sp, #44	; 0x2c
 800a702:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a706:	bf00      	nop
 800a708:	002d0024 	.word	0x002d0024
 800a70c:	001c0015 	.word	0x001c0015
 800a710:	000f000a 	.word	0x000f000a
 800a714:	00060003 	.word	0x00060003
 800a718:	0037003f 	.word	0x0037003f
 800a71c:	00450049 	.word	0x00450049
 800a720:	00490045 	.word	0x00490045
 800a724:	003f0037 	.word	0x003f0037
 800a728:	00030006 	.word	0x00030006
 800a72c:	000a000f 	.word	0x000a000f
 800a730:	0015001c 	.word	0x0015001c
 800a734:	0024002d 	.word	0x0024002d
 800a738:	24000000 	.word	0x24000000

0800a73c <D128_GENERIC>:
 800a73c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a740:	b08d      	sub	sp, #52	; 0x34
 800a742:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 800a744:	f8d2 a01c 	ldr.w	sl, [r2, #28]
 800a748:	9109      	str	r1, [sp, #36]	; 0x24
 800a74a:	6911      	ldr	r1, [r2, #16]
 800a74c:	9201      	str	r2, [sp, #4]
 800a74e:	9106      	str	r1, [sp, #24]
 800a750:	6951      	ldr	r1, [r2, #20]
 800a752:	9107      	str	r1, [sp, #28]
 800a754:	6991      	ldr	r1, [r2, #24]
 800a756:	910b      	str	r1, [sp, #44]	; 0x2c
 800a758:	6891      	ldr	r1, [r2, #8]
 800a75a:	9103      	str	r1, [sp, #12]
 800a75c:	68d1      	ldr	r1, [r2, #12]
 800a75e:	9102      	str	r1, [sp, #8]
 800a760:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800a762:	9108      	str	r1, [sp, #32]
 800a764:	2b00      	cmp	r3, #0
 800a766:	f000 8183 	beq.w	800aa70 <D128_GENERIC+0x334>
 800a76a:	2300      	movs	r3, #0
 800a76c:	6a12      	ldr	r2, [r2, #32]
 800a76e:	4681      	mov	r9, r0
 800a770:	920a      	str	r2, [sp, #40]	; 0x28
 800a772:	e9cd a304 	strd	sl, r3, [sp, #16]
 800a776:	e165      	b.n	800aa44 <D128_GENERIC+0x308>
 800a778:	b2d2      	uxtb	r2, r2
 800a77a:	f899 b000 	ldrb.w	fp, [r9]
 800a77e:	b213      	sxth	r3, r2
 800a780:	4255      	negs	r5, r2
 800a782:	f819 0002 	ldrb.w	r0, [r9, r2]
 800a786:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 800a78a:	009f      	lsls	r7, r3, #2
 800a78c:	eb09 0402 	add.w	r4, r9, r2
 800a790:	ebc3 06c3 	rsb	r6, r3, r3, lsl #3
 800a794:	f819 8002 	ldrb.w	r8, [r9, r2]
 800a798:	443b      	add	r3, r7
 800a79a:	1962      	adds	r2, r4, r5
 800a79c:	5d64      	ldrb	r4, [r4, r5]
 800a79e:	eb02 0c03 	add.w	ip, r2, r3
 800a7a2:	0424      	lsls	r4, r4, #16
 800a7a4:	5cd3      	ldrb	r3, [r2, r3]
 800a7a6:	eb0c 0e05 	add.w	lr, ip, r5
 800a7aa:	f81c 9015 	ldrb.w	r9, [ip, r5, lsl #1]
 800a7ae:	f81c 2005 	ldrb.w	r2, [ip, r5]
 800a7b2:	eb04 6408 	add.w	r4, r4, r8, lsl #24
 800a7b6:	eb0e 0c45 	add.w	ip, lr, r5, lsl #1
 800a7ba:	f81e 8015 	ldrb.w	r8, [lr, r5, lsl #1]
 800a7be:	eb04 2400 	add.w	r4, r4, r0, lsl #8
 800a7c2:	eb0c 0e06 	add.w	lr, ip, r6
 800a7c6:	f81c a006 	ldrb.w	sl, [ip, r6]
 800a7ca:	0412      	lsls	r2, r2, #16
 800a7cc:	445c      	add	r4, fp
 800a7ce:	eb0e 0c05 	add.w	ip, lr, r5
 800a7d2:	eb02 6203 	add.w	r2, r2, r3, lsl #24
 800a7d6:	f81e 3005 	ldrb.w	r3, [lr, r5]
 800a7da:	eb0c 0045 	add.w	r0, ip, r5, lsl #1
 800a7de:	f81e e015 	ldrb.w	lr, [lr, r5, lsl #1]
 800a7e2:	041b      	lsls	r3, r3, #16
 800a7e4:	f81c c015 	ldrb.w	ip, [ip, r5, lsl #1]
 800a7e8:	eb00 0b06 	add.w	fp, r0, r6
 800a7ec:	5d80      	ldrb	r0, [r0, r6]
 800a7ee:	eb03 630a 	add.w	r3, r3, sl, lsl #24
 800a7f2:	f81b 6005 	ldrb.w	r6, [fp, r5]
 800a7f6:	eb0b 0a05 	add.w	sl, fp, r5
 800a7fa:	eb02 2209 	add.w	r2, r2, r9, lsl #8
 800a7fe:	f81b b015 	ldrb.w	fp, [fp, r5, lsl #1]
 800a802:	0436      	lsls	r6, r6, #16
 800a804:	eb0a 0945 	add.w	r9, sl, r5, lsl #1
 800a808:	4442      	add	r2, r8
 800a80a:	eb06 6600 	add.w	r6, r6, r0, lsl #24
 800a80e:	f81a 8015 	ldrb.w	r8, [sl, r5, lsl #1]
 800a812:	eb03 230e 	add.w	r3, r3, lr, lsl #8
 800a816:	44b9      	add	r9, r7
 800a818:	eb06 260b 	add.w	r6, r6, fp, lsl #8
 800a81c:	4463      	add	r3, ip
 800a81e:	eb06 0508 	add.w	r5, r6, r8
 800a822:	b2e7      	uxtb	r7, r4
 800a824:	f3c4 2607 	ubfx	r6, r4, #8, #8
 800a828:	499b      	ldr	r1, [pc, #620]	; (800aa98 <D128_GENERIC+0x35c>)
 800a82a:	f3c4 4007 	ubfx	r0, r4, #16, #8
 800a82e:	0e24      	lsrs	r4, r4, #24
 800a830:	f851 c027 	ldr.w	ip, [r1, r7, lsl #2]
 800a834:	b2d7      	uxtb	r7, r2
 800a836:	f851 b026 	ldr.w	fp, [r1, r6, lsl #2]
 800a83a:	f3c2 2607 	ubfx	r6, r2, #8, #8
 800a83e:	9904      	ldr	r1, [sp, #16]
 800a840:	4461      	add	r1, ip
 800a842:	468c      	mov	ip, r1
 800a844:	4994      	ldr	r1, [pc, #592]	; (800aa98 <D128_GENERIC+0x35c>)
 800a846:	eb0b 2b9c 	add.w	fp, fp, ip, lsr #10
 800a84a:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 800a84e:	f851 8024 	ldr.w	r8, [r1, r4, lsl #2]
 800a852:	f3c2 4407 	ubfx	r4, r2, #16, #8
 800a856:	eb00 209b 	add.w	r0, r0, fp, lsr #10
 800a85a:	f851 e027 	ldr.w	lr, [r1, r7, lsl #2]
 800a85e:	f851 7026 	ldr.w	r7, [r1, r6, lsl #2]
 800a862:	0e12      	lsrs	r2, r2, #24
 800a864:	eb08 2890 	add.w	r8, r8, r0, lsr #10
 800a868:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 800a86c:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 800a870:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800a874:	eb0e 2e98 	add.w	lr, lr, r8, lsr #10
 800a878:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800a87c:	b2da      	uxtb	r2, r3
 800a87e:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 800a882:	eb07 279e 	add.w	r7, r7, lr, lsr #10
 800a886:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 800a88a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800a88e:	ea48 4800 	orr.w	r8, r8, r0, lsl #16
 800a892:	eb04 2a97 	add.w	sl, r4, r7, lsr #10
 800a896:	f3c3 2007 	ubfx	r0, r3, #8, #8
 800a89a:	ea4b 4b0c 	orr.w	fp, fp, ip, lsl #16
 800a89e:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800a8a2:	eb06 269a 	add.w	r6, r6, sl, lsr #10
 800a8a6:	f851 c020 	ldr.w	ip, [r1, r0, lsl #2]
 800a8aa:	f3c3 4007 	ubfx	r0, r3, #16, #8
 800a8ae:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800a8b2:	eb02 2296 	add.w	r2, r2, r6, lsr #10
 800a8b6:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 800a8ba:	f851 4020 	ldr.w	r4, [r1, r0, lsl #2]
 800a8be:	0e1b      	lsrs	r3, r3, #24
 800a8c0:	eb0c 2c92 	add.w	ip, ip, r2, lsr #10
 800a8c4:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800a8c8:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
 800a8cc:	ea47 470e 	orr.w	r7, r7, lr, lsl #16
 800a8d0:	b2eb      	uxtb	r3, r5
 800a8d2:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800a8d6:	eb04 2e9c 	add.w	lr, r4, ip, lsr #10
 800a8da:	f3cc 0409 	ubfx	r4, ip, #0, #10
 800a8de:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800a8e2:	ea46 460a 	orr.w	r6, r6, sl, lsl #16
 800a8e6:	eb00 209e 	add.w	r0, r0, lr, lsr #10
 800a8ea:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 800a8ee:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800a8f2:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800a8f6:	eb03 2c90 	add.w	ip, r3, r0, lsr #10
 800a8fa:	f851 202a 	ldr.w	r2, [r1, sl, lsl #2]
 800a8fe:	f3c5 4307 	ubfx	r3, r5, #16, #8
 800a902:	ea4f 6a15 	mov.w	sl, r5, lsr #24
 800a906:	eb02 229c 	add.w	r2, r2, ip, lsr #10
 800a90a:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800a90e:	f851 5023 	ldr.w	r5, [r1, r3, lsl #2]
 800a912:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 800a916:	f851 302a 	ldr.w	r3, [r1, sl, lsl #2]
 800a91a:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 800a91e:	eb05 2592 	add.w	r5, r5, r2, lsr #10
 800a922:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800a926:	eb03 2e95 	add.w	lr, r3, r5, lsr #10
 800a92a:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800a92e:	ea42 430c 	orr.w	r3, r2, ip, lsl #16
 800a932:	ea4f 219e 	mov.w	r1, lr, lsr #10
 800a936:	f3ce 0209 	ubfx	r2, lr, #0, #10
 800a93a:	9104      	str	r1, [sp, #16]
 800a93c:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 800a940:	9902      	ldr	r1, [sp, #8]
 800a942:	4a56      	ldr	r2, [pc, #344]	; (800aa9c <D128_GENERIC+0x360>)
 800a944:	fb2b 1202 	smlad	r2, fp, r2, r1
 800a948:	4955      	ldr	r1, [pc, #340]	; (800aaa0 <D128_GENERIC+0x364>)
 800a94a:	fb28 2201 	smlad	r2, r8, r1, r2
 800a94e:	4955      	ldr	r1, [pc, #340]	; (800aaa4 <D128_GENERIC+0x368>)
 800a950:	fb27 2201 	smlad	r2, r7, r1, r2
 800a954:	4954      	ldr	r1, [pc, #336]	; (800aaa8 <D128_GENERIC+0x36c>)
 800a956:	fb26 2201 	smlad	r2, r6, r1, r2
 800a95a:	4954      	ldr	r1, [pc, #336]	; (800aaac <D128_GENERIC+0x370>)
 800a95c:	fb24 2201 	smlad	r2, r4, r1, r2
 800a960:	4953      	ldr	r1, [pc, #332]	; (800aab0 <D128_GENERIC+0x374>)
 800a962:	fb20 2201 	smlad	r2, r0, r1, r2
 800a966:	4953      	ldr	r1, [pc, #332]	; (800aab4 <D128_GENERIC+0x378>)
 800a968:	fb23 2201 	smlad	r2, r3, r1, r2
 800a96c:	f44f 3c80 	mov.w	ip, #65536	; 0x10000
 800a970:	fb25 2a0c 	smlad	sl, r5, ip, r2
 800a974:	4950      	ldr	r1, [pc, #320]	; (800aab8 <D128_GENERIC+0x37c>)
 800a976:	9a03      	ldr	r2, [sp, #12]
 800a978:	fb2b 2c01 	smlad	ip, fp, r1, r2
 800a97c:	4a4f      	ldr	r2, [pc, #316]	; (800aabc <D128_GENERIC+0x380>)
 800a97e:	fb28 ce02 	smlad	lr, r8, r2, ip
 800a982:	f8df c150 	ldr.w	ip, [pc, #336]	; 800aad4 <D128_GENERIC+0x398>
 800a986:	fb27 ec0c 	smlad	ip, r7, ip, lr
 800a98a:	f8df e14c 	ldr.w	lr, [pc, #332]	; 800aad8 <D128_GENERIC+0x39c>
 800a98e:	fb26 cc0e 	smlad	ip, r6, lr, ip
 800a992:	f8df e148 	ldr.w	lr, [pc, #328]	; 800aadc <D128_GENERIC+0x3a0>
 800a996:	fb24 ce0e 	smlad	lr, r4, lr, ip
 800a99a:	f8df c144 	ldr.w	ip, [pc, #324]	; 800aae0 <D128_GENERIC+0x3a4>
 800a99e:	fb20 ee0c 	smlad	lr, r0, ip, lr
 800a9a2:	f8df c140 	ldr.w	ip, [pc, #320]	; 800aae4 <D128_GENERIC+0x3a8>
 800a9a6:	fb23 ec0c 	smlad	ip, r3, ip, lr
 800a9aa:	f8df e13c 	ldr.w	lr, [pc, #316]	; 800aae8 <D128_GENERIC+0x3ac>
 800a9ae:	fb25 c20e 	smlad	r2, r5, lr, ip
 800a9b2:	f04f 0c01 	mov.w	ip, #1
 800a9b6:	9202      	str	r2, [sp, #8]
 800a9b8:	fb2b fb0c 	smuad	fp, fp, ip
 800a9bc:	f8df c12c 	ldr.w	ip, [pc, #300]	; 800aaec <D128_GENERIC+0x3b0>
 800a9c0:	fb28 bb0c 	smlad	fp, r8, ip, fp
 800a9c4:	f8df c128 	ldr.w	ip, [pc, #296]	; 800aaf0 <D128_GENERIC+0x3b4>
 800a9c8:	fb27 bb0c 	smlad	fp, r7, ip, fp
 800a9cc:	4f3c      	ldr	r7, [pc, #240]	; (800aac0 <D128_GENERIC+0x384>)
 800a9ce:	fb26 bb07 	smlad	fp, r6, r7, fp
 800a9d2:	4f3c      	ldr	r7, [pc, #240]	; (800aac4 <D128_GENERIC+0x388>)
 800a9d4:	fb24 bb07 	smlad	fp, r4, r7, fp
 800a9d8:	4f3b      	ldr	r7, [pc, #236]	; (800aac8 <D128_GENERIC+0x38c>)
 800a9da:	fb20 bb07 	smlad	fp, r0, r7, fp
 800a9de:	4f3b      	ldr	r7, [pc, #236]	; (800aacc <D128_GENERIC+0x390>)
 800a9e0:	fb23 bb07 	smlad	fp, r3, r7, fp
 800a9e4:	4b3a      	ldr	r3, [pc, #232]	; (800aad0 <D128_GENERIC+0x394>)
 800a9e6:	fb25 b303 	smlad	r3, r5, r3, fp
 800a9ea:	9303      	str	r3, [sp, #12]
 800a9ec:	f5aa 1480 	sub.w	r4, sl, #1048576	; 0x100000
 800a9f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a9f2:	b183      	cbz	r3, 800aa16 <D128_GENERIC+0x2da>
 800a9f4:	9a06      	ldr	r2, [sp, #24]
 800a9f6:	9907      	ldr	r1, [sp, #28]
 800a9f8:	4422      	add	r2, r4
 800a9fa:	9407      	str	r4, [sp, #28]
 800a9fc:	1a52      	subs	r2, r2, r1
 800a9fe:	fba2 0103 	umull	r0, r1, r2, r3
 800aa02:	17d5      	asrs	r5, r2, #31
 800aa04:	f110 4200 	adds.w	r2, r0, #2147483648	; 0x80000000
 800aa08:	fb03 1105 	mla	r1, r3, r5, r1
 800aa0c:	f141 0300 	adc.w	r3, r1, #0
 800aa10:	005b      	lsls	r3, r3, #1
 800aa12:	461c      	mov	r4, r3
 800aa14:	9306      	str	r3, [sp, #24]
 800aa16:	9d01      	ldr	r5, [sp, #4]
 800aa18:	01e4      	lsls	r4, r4, #7
 800aa1a:	9e05      	ldr	r6, [sp, #20]
 800aa1c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800aa20:	8d28      	ldrh	r0, [r5, #40]	; 0x28
 800aa22:	2300      	movs	r3, #0
 800aa24:	9908      	ldr	r1, [sp, #32]
 800aa26:	fb06 f000 	mul.w	r0, r6, r0
 800aa2a:	3601      	adds	r6, #1
 800aa2c:	fbc1 2304 	smlal	r2, r3, r1, r4
 800aa30:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aa32:	109b      	asrs	r3, r3, #2
 800aa34:	9605      	str	r6, [sp, #20]
 800aa36:	f303 030f 	ssat	r3, #16, r3
 800aa3a:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
 800aa3e:	8ceb      	ldrh	r3, [r5, #38]	; 0x26
 800aa40:	42b3      	cmp	r3, r6
 800aa42:	dd13      	ble.n	800aa6c <D128_GENERIC+0x330>
 800aa44:	9b01      	ldr	r3, [sp, #4]
 800aa46:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800aa48:	2a01      	cmp	r2, #1
 800aa4a:	f47f ae95 	bne.w	800a778 <D128_GENERIC+0x3c>
 800aa4e:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800aa50:	f109 0610 	add.w	r6, r9, #16
 800aa54:	0681      	lsls	r1, r0, #26
 800aa56:	e9d9 4200 	ldrd	r4, r2, [r9]
 800aa5a:	e9d9 3502 	ldrd	r3, r5, [r9, #8]
 800aa5e:	d518      	bpl.n	800aa92 <D128_GENERIC+0x356>
 800aa60:	ba64      	rev16	r4, r4
 800aa62:	ba52      	rev16	r2, r2
 800aa64:	ba5b      	rev16	r3, r3
 800aa66:	ba6d      	rev16	r5, r5
 800aa68:	46b1      	mov	r9, r6
 800aa6a:	e6da      	b.n	800a822 <D128_GENERIC+0xe6>
 800aa6c:	f8dd a010 	ldr.w	sl, [sp, #16]
 800aa70:	9b01      	ldr	r3, [sp, #4]
 800aa72:	2000      	movs	r0, #0
 800aa74:	9903      	ldr	r1, [sp, #12]
 800aa76:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800aa78:	6099      	str	r1, [r3, #8]
 800aa7a:	9902      	ldr	r1, [sp, #8]
 800aa7c:	f8c3 a01c 	str.w	sl, [r3, #28]
 800aa80:	60d9      	str	r1, [r3, #12]
 800aa82:	9906      	ldr	r1, [sp, #24]
 800aa84:	619a      	str	r2, [r3, #24]
 800aa86:	6119      	str	r1, [r3, #16]
 800aa88:	9907      	ldr	r1, [sp, #28]
 800aa8a:	6159      	str	r1, [r3, #20]
 800aa8c:	b00d      	add	sp, #52	; 0x34
 800aa8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa92:	46b1      	mov	r9, r6
 800aa94:	e6c5      	b.n	800a822 <D128_GENERIC+0xe6>
 800aa96:	bf00      	nop
 800aa98:	24000000 	.word	0x24000000
 800aa9c:	00780069 	.word	0x00780069
 800aaa0:	005b004e 	.word	0x005b004e
 800aaa4:	00420037 	.word	0x00420037
 800aaa8:	002d0024 	.word	0x002d0024
 800aaac:	001c0015 	.word	0x001c0015
 800aab0:	000f000a 	.word	0x000f000a
 800aab4:	00060003 	.word	0x00060003
 800aab8:	00880096 	.word	0x00880096
 800aabc:	00a200ac 	.word	0x00a200ac
 800aac0:	0015001c 	.word	0x0015001c
 800aac4:	0024002d 	.word	0x0024002d
 800aac8:	00370042 	.word	0x00370042
 800aacc:	004e005b 	.word	0x004e005b
 800aad0:	00690078 	.word	0x00690078
 800aad4:	00b400ba 	.word	0x00b400ba
 800aad8:	00be00c0 	.word	0x00be00c0
 800aadc:	00c000be 	.word	0x00c000be
 800aae0:	00ba00b4 	.word	0x00ba00b4
 800aae4:	00ac00a2 	.word	0x00ac00a2
 800aae8:	00960088 	.word	0x00960088
 800aaec:	00030006 	.word	0x00030006
 800aaf0:	000a000f 	.word	0x000a000f

0800aaf4 <D16_1CH_HTONS_VOL_HP>:
 800aaf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aaf8:	6993      	ldr	r3, [r2, #24]
 800aafa:	b087      	sub	sp, #28
 800aafc:	4682      	mov	sl, r0
 800aafe:	8cd0      	ldrh	r0, [r2, #38]	; 0x26
 800ab00:	9304      	str	r3, [sp, #16]
 800ab02:	f8d2 b030 	ldr.w	fp, [r2, #48]	; 0x30
 800ab06:	69d3      	ldr	r3, [r2, #28]
 800ab08:	f8d2 e020 	ldr.w	lr, [r2, #32]
 800ab0c:	e9d2 5402 	ldrd	r5, r4, [r2, #8]
 800ab10:	e9d2 6c04 	ldrd	r6, ip, [r2, #16]
 800ab14:	9403      	str	r4, [sp, #12]
 800ab16:	2800      	cmp	r0, #0
 800ab18:	d054      	beq.n	800abc4 <D16_1CH_HTONS_VOL_HP+0xd0>
 800ab1a:	f1a1 0902 	sub.w	r9, r1, #2
 800ab1e:	eb0a 0140 	add.w	r1, sl, r0, lsl #1
 800ab22:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 800abd0 <D16_1CH_HTONS_VOL_HP+0xdc>
 800ab26:	4650      	mov	r0, sl
 800ab28:	9101      	str	r1, [sp, #4]
 800ab2a:	4619      	mov	r1, r3
 800ab2c:	f8cd b008 	str.w	fp, [sp, #8]
 800ab30:	9205      	str	r2, [sp, #20]
 800ab32:	f850 3b02 	ldr.w	r3, [r0], #2
 800ab36:	ba5b      	rev16	r3, r3
 800ab38:	b2dc      	uxtb	r4, r3
 800ab3a:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800ab3e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ab42:	f858 4022 	ldr.w	r4, [r8, r2, lsl #2]
 800ab46:	4419      	add	r1, r3
 800ab48:	eb04 2491 	add.w	r4, r4, r1, lsr #10
 800ab4c:	f3c1 0309 	ubfx	r3, r1, #0, #10
 800ab50:	f3c4 0209 	ubfx	r2, r4, #0, #10
 800ab54:	0aa1      	lsrs	r1, r4, #10
 800ab56:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 800ab5a:	4a1b      	ldr	r2, [pc, #108]	; (800abc8 <D16_1CH_HTONS_VOL_HP+0xd4>)
 800ab5c:	fb23 5402 	smlad	r4, r3, r2, r5
 800ab60:	4a1a      	ldr	r2, [pc, #104]	; (800abcc <D16_1CH_HTONS_VOL_HP+0xd8>)
 800ab62:	fb23 f502 	smuad	r5, r3, r2
 800ab66:	f5a4 6400 	sub.w	r4, r4, #2048	; 0x800
 800ab6a:	f04f 4a00 	mov.w	sl, #2147483648	; 0x80000000
 800ab6e:	f04f 0b00 	mov.w	fp, #0
 800ab72:	19a2      	adds	r2, r4, r6
 800ab74:	eba2 020c 	sub.w	r2, r2, ip
 800ab78:	46a4      	mov	ip, r4
 800ab7a:	17d7      	asrs	r7, r2, #31
 800ab7c:	fba2 230e 	umull	r2, r3, r2, lr
 800ab80:	f112 4600 	adds.w	r6, r2, #2147483648	; 0x80000000
 800ab84:	fb0e 3307 	mla	r3, lr, r7, r3
 800ab88:	f143 0700 	adc.w	r7, r3, #0
 800ab8c:	9b02      	ldr	r3, [sp, #8]
 800ab8e:	047a      	lsls	r2, r7, #17
 800ab90:	007e      	lsls	r6, r7, #1
 800ab92:	fbc3 ab02 	smlal	sl, fp, r3, r2
 800ab96:	ea4f 03ab 	mov.w	r3, fp, asr #2
 800ab9a:	f303 030f 	ssat	r3, #16, r3
 800ab9e:	f829 3f02 	strh.w	r3, [r9, #2]!
 800aba2:	9b01      	ldr	r3, [sp, #4]
 800aba4:	4298      	cmp	r0, r3
 800aba6:	d1c4      	bne.n	800ab32 <D16_1CH_HTONS_VOL_HP+0x3e>
 800aba8:	460b      	mov	r3, r1
 800abaa:	9a05      	ldr	r2, [sp, #20]
 800abac:	2000      	movs	r0, #0
 800abae:	9903      	ldr	r1, [sp, #12]
 800abb0:	61d3      	str	r3, [r2, #28]
 800abb2:	9b04      	ldr	r3, [sp, #16]
 800abb4:	6095      	str	r5, [r2, #8]
 800abb6:	60d1      	str	r1, [r2, #12]
 800abb8:	6193      	str	r3, [r2, #24]
 800abba:	e9c2 6404 	strd	r6, r4, [r2, #16]
 800abbe:	b007      	add	sp, #28
 800abc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800abc4:	4664      	mov	r4, ip
 800abc6:	e7f1      	b.n	800abac <D16_1CH_HTONS_VOL_HP+0xb8>
 800abc8:	00030001 	.word	0x00030001
 800abcc:	00010003 	.word	0x00010003
 800abd0:	24000000 	.word	0x24000000

0800abd4 <D24_1CH_HTONS_VOL_HP>:
 800abd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abd8:	6b16      	ldr	r6, [r2, #48]	; 0x30
 800abda:	b089      	sub	sp, #36	; 0x24
 800abdc:	6993      	ldr	r3, [r2, #24]
 800abde:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 800abe0:	9604      	str	r6, [sp, #16]
 800abe2:	6a16      	ldr	r6, [r2, #32]
 800abe4:	9306      	str	r3, [sp, #24]
 800abe6:	9505      	str	r5, [sp, #20]
 800abe8:	69d3      	ldr	r3, [r2, #28]
 800abea:	9600      	str	r6, [sp, #0]
 800abec:	e9d2 4a04 	ldrd	r4, sl, [r2, #16]
 800abf0:	e9d2 ce02 	ldrd	ip, lr, [r2, #8]
 800abf4:	2d00      	cmp	r5, #0
 800abf6:	f000 8083 	beq.w	800ad00 <D24_1CH_HTONS_VOL_HP+0x12c>
 800abfa:	9207      	str	r2, [sp, #28]
 800abfc:	2600      	movs	r6, #0
 800abfe:	4622      	mov	r2, r4
 800ac00:	f1a1 0b02 	sub.w	fp, r1, #2
 800ac04:	4f3f      	ldr	r7, [pc, #252]	; (800ad04 <D24_1CH_HTONS_VOL_HP+0x130>)
 800ac06:	461d      	mov	r5, r3
 800ac08:	f8cd a00c 	str.w	sl, [sp, #12]
 800ac0c:	9c00      	ldr	r4, [sp, #0]
 800ac0e:	e056      	b.n	800acbe <D24_1CH_HTONS_VOL_HP+0xea>
 800ac10:	7841      	ldrb	r1, [r0, #1]
 800ac12:	eb08 4809 	add.w	r8, r8, r9, lsl #16
 800ac16:	3002      	adds	r0, #2
 800ac18:	4488      	add	r8, r1
 800ac1a:	fa5f f388 	uxtb.w	r3, r8
 800ac1e:	f3c8 2907 	ubfx	r9, r8, #8, #8
 800ac22:	ea4f 4818 	mov.w	r8, r8, lsr #16
 800ac26:	f857 1023 	ldr.w	r1, [r7, r3, lsl #2]
 800ac2a:	f857 3029 	ldr.w	r3, [r7, r9, lsl #2]
 800ac2e:	eb01 2195 	add.w	r1, r1, r5, lsr #10
 800ac32:	f857 5028 	ldr.w	r5, [r7, r8, lsl #2]
 800ac36:	eb03 2891 	add.w	r8, r3, r1, lsr #10
 800ac3a:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800ac3e:	f3c8 0309 	ubfx	r3, r8, #0, #10
 800ac42:	eb05 2598 	add.w	r5, r5, r8, lsr #10
 800ac46:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800ac4a:	492f      	ldr	r1, [pc, #188]	; (800ad08 <D24_1CH_HTONS_VOL_HP+0x134>)
 800ac4c:	fb23 e901 	smlad	r9, r3, r1, lr
 800ac50:	492e      	ldr	r1, [pc, #184]	; (800ad0c <D24_1CH_HTONS_VOL_HP+0x138>)
 800ac52:	fb23 ce01 	smlad	lr, r3, r1, ip
 800ac56:	f3c5 0c09 	ubfx	ip, r5, #0, #10
 800ac5a:	2101      	movs	r1, #1
 800ac5c:	eb0c 084c 	add.w	r8, ip, ip, lsl #1
 800ac60:	eb0e 0e48 	add.w	lr, lr, r8, lsl #1
 800ac64:	fb23 f301 	smuad	r3, r3, r1
 800ac68:	f5a9 51d8 	sub.w	r1, r9, #6912	; 0x1b00
 800ac6c:	eb08 0c03 	add.w	ip, r8, r3
 800ac70:	9b03      	ldr	r3, [sp, #12]
 800ac72:	f04f 0a00 	mov.w	sl, #0
 800ac76:	440a      	add	r2, r1
 800ac78:	3601      	adds	r6, #1
 800ac7a:	9103      	str	r1, [sp, #12]
 800ac7c:	1ad2      	subs	r2, r2, r3
 800ac7e:	ea4f 79e2 	mov.w	r9, r2, asr #31
 800ac82:	fba2 2304 	umull	r2, r3, r2, r4
 800ac86:	e9cd 2300 	strd	r2, r3, [sp]
 800ac8a:	fb04 3309 	mla	r3, r4, r9, r3
 800ac8e:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
 800ac92:	9301      	str	r3, [sp, #4]
 800ac94:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ac98:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 800ac9c:	f143 0300 	adc.w	r3, r3, #0
 800aca0:	ea4f 38c3 	mov.w	r8, r3, lsl #15
 800aca4:	005a      	lsls	r2, r3, #1
 800aca6:	9b04      	ldr	r3, [sp, #16]
 800aca8:	fbc3 9a08 	smlal	r9, sl, r3, r8
 800acac:	ea4f 03aa 	mov.w	r3, sl, asr #2
 800acb0:	f303 030f 	ssat	r3, #16, r3
 800acb4:	f82b 3f02 	strh.w	r3, [fp, #2]!
 800acb8:	9b05      	ldr	r3, [sp, #20]
 800acba:	429e      	cmp	r6, r3
 800acbc:	d010      	beq.n	800ace0 <D24_1CH_HTONS_VOL_HP+0x10c>
 800acbe:	f890 9003 	ldrb.w	r9, [r0, #3]
 800acc2:	f016 0f01 	tst.w	r6, #1
 800acc6:	7801      	ldrb	r1, [r0, #0]
 800acc8:	ea4f 2309 	mov.w	r3, r9, lsl #8
 800accc:	ea4f 2801 	mov.w	r8, r1, lsl #8
 800acd0:	d09e      	beq.n	800ac10 <D24_1CH_HTONS_VOL_HP+0x3c>
 800acd2:	f890 8002 	ldrb.w	r8, [r0, #2]
 800acd6:	3004      	adds	r0, #4
 800acd8:	eb03 4808 	add.w	r8, r3, r8, lsl #16
 800acdc:	4488      	add	r8, r1
 800acde:	e79c      	b.n	800ac1a <D24_1CH_HTONS_VOL_HP+0x46>
 800ace0:	4614      	mov	r4, r2
 800ace2:	462b      	mov	r3, r5
 800ace4:	9a07      	ldr	r2, [sp, #28]
 800ace6:	2000      	movs	r0, #0
 800ace8:	61d3      	str	r3, [r2, #28]
 800acea:	9b06      	ldr	r3, [sp, #24]
 800acec:	f8c2 c008 	str.w	ip, [r2, #8]
 800acf0:	f8c2 e00c 	str.w	lr, [r2, #12]
 800acf4:	6193      	str	r3, [r2, #24]
 800acf6:	e9c2 4104 	strd	r4, r1, [r2, #16]
 800acfa:	b009      	add	sp, #36	; 0x24
 800acfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad00:	4651      	mov	r1, sl
 800ad02:	e7f0      	b.n	800ace6 <D24_1CH_HTONS_VOL_HP+0x112>
 800ad04:	24000000 	.word	0x24000000
 800ad08:	00030001 	.word	0x00030001
 800ad0c:	00060007 	.word	0x00060007

0800ad10 <D32_1CH_HTONS_VOL_HP>:
 800ad10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad14:	6993      	ldr	r3, [r2, #24]
 800ad16:	b087      	sub	sp, #28
 800ad18:	4683      	mov	fp, r0
 800ad1a:	8cd0      	ldrh	r0, [r2, #38]	; 0x26
 800ad1c:	9304      	str	r3, [sp, #16]
 800ad1e:	69d5      	ldr	r5, [r2, #28]
 800ad20:	6b14      	ldr	r4, [r2, #48]	; 0x30
 800ad22:	f8d2 a020 	ldr.w	sl, [r2, #32]
 800ad26:	e9d2 8e04 	ldrd	r8, lr, [r2, #16]
 800ad2a:	e9d2 3c02 	ldrd	r3, ip, [r2, #8]
 800ad2e:	2800      	cmp	r0, #0
 800ad30:	d077      	beq.n	800ae22 <D32_1CH_HTONS_VOL_HP+0x112>
 800ad32:	460f      	mov	r7, r1
 800ad34:	46f1      	mov	r9, lr
 800ad36:	eb01 0140 	add.w	r1, r1, r0, lsl #1
 800ad3a:	f8cd 8000 	str.w	r8, [sp]
 800ad3e:	4e3a      	ldr	r6, [pc, #232]	; (800ae28 <D32_1CH_HTONS_VOL_HP+0x118>)
 800ad40:	469e      	mov	lr, r3
 800ad42:	46a0      	mov	r8, r4
 800ad44:	9103      	str	r1, [sp, #12]
 800ad46:	9205      	str	r2, [sp, #20]
 800ad48:	f85b 4b04 	ldr.w	r4, [fp], #4
 800ad4c:	ba64      	rev16	r4, r4
 800ad4e:	b2e0      	uxtb	r0, r4
 800ad50:	f3c4 2307 	ubfx	r3, r4, #8, #8
 800ad54:	f3c4 4107 	ubfx	r1, r4, #16, #8
 800ad58:	0e24      	lsrs	r4, r4, #24
 800ad5a:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 800ad5e:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 800ad62:	eb00 2095 	add.w	r0, r0, r5, lsr #10
 800ad66:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 800ad6a:	f856 5024 	ldr.w	r5, [r6, r4, lsl #2]
 800ad6e:	eb03 2390 	add.w	r3, r3, r0, lsr #10
 800ad72:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800ad76:	eb01 2193 	add.w	r1, r1, r3, lsr #10
 800ad7a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ad7e:	eb05 2591 	add.w	r5, r5, r1, lsr #10
 800ad82:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800ad86:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800ad8a:	f3c5 0009 	ubfx	r0, r5, #0, #10
 800ad8e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800ad92:	4826      	ldr	r0, [pc, #152]	; (800ae2c <D32_1CH_HTONS_VOL_HP+0x11c>)
 800ad94:	fb23 c400 	smlad	r4, r3, r0, ip
 800ad98:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800ad9c:	fb21 4402 	smlad	r4, r1, r2, r4
 800ada0:	4823      	ldr	r0, [pc, #140]	; (800ae30 <D32_1CH_HTONS_VOL_HP+0x120>)
 800ada2:	fb23 ec00 	smlad	ip, r3, r0, lr
 800ada6:	4823      	ldr	r0, [pc, #140]	; (800ae34 <D32_1CH_HTONS_VOL_HP+0x124>)
 800ada8:	fb21 cc00 	smlad	ip, r1, r0, ip
 800adac:	2201      	movs	r2, #1
 800adae:	fb23 f302 	smuad	r3, r3, r2
 800adb2:	4821      	ldr	r0, [pc, #132]	; (800ae38 <D32_1CH_HTONS_VOL_HP+0x128>)
 800adb4:	fb21 3e00 	smlad	lr, r1, r0, r3
 800adb8:	9b00      	ldr	r3, [sp, #0]
 800adba:	f5a4 4480 	sub.w	r4, r4, #16384	; 0x4000
 800adbe:	4423      	add	r3, r4
 800adc0:	eba3 0209 	sub.w	r2, r3, r9
 800adc4:	46a1      	mov	r9, r4
 800adc6:	17d1      	asrs	r1, r2, #31
 800adc8:	fba2 230a 	umull	r2, r3, r2, sl
 800adcc:	e9cd 2300 	strd	r2, r3, [sp]
 800add0:	fb0a 3301 	mla	r3, sl, r1, r3
 800add4:	9301      	str	r3, [sp, #4]
 800add6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800adda:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 800adde:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800ade2:	f143 0300 	adc.w	r3, r3, #0
 800ade6:	0399      	lsls	r1, r3, #14
 800ade8:	005b      	lsls	r3, r3, #1
 800adea:	9300      	str	r3, [sp, #0]
 800adec:	2300      	movs	r3, #0
 800adee:	fbc8 2301 	smlal	r2, r3, r8, r1
 800adf2:	109b      	asrs	r3, r3, #2
 800adf4:	f303 030f 	ssat	r3, #16, r3
 800adf8:	f827 3b02 	strh.w	r3, [r7], #2
 800adfc:	9b03      	ldr	r3, [sp, #12]
 800adfe:	429f      	cmp	r7, r3
 800ae00:	d1a2      	bne.n	800ad48 <D32_1CH_HTONS_VOL_HP+0x38>
 800ae02:	4673      	mov	r3, lr
 800ae04:	f8dd 8000 	ldr.w	r8, [sp]
 800ae08:	9a05      	ldr	r2, [sp, #20]
 800ae0a:	6093      	str	r3, [r2, #8]
 800ae0c:	2000      	movs	r0, #0
 800ae0e:	9b04      	ldr	r3, [sp, #16]
 800ae10:	f8c2 c00c 	str.w	ip, [r2, #12]
 800ae14:	61d5      	str	r5, [r2, #28]
 800ae16:	6193      	str	r3, [r2, #24]
 800ae18:	e9c2 8404 	strd	r8, r4, [r2, #16]
 800ae1c:	b007      	add	sp, #28
 800ae1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae22:	4674      	mov	r4, lr
 800ae24:	e7f1      	b.n	800ae0a <D32_1CH_HTONS_VOL_HP+0xfa>
 800ae26:	bf00      	nop
 800ae28:	24000000 	.word	0x24000000
 800ae2c:	00060003 	.word	0x00060003
 800ae30:	000a000c 	.word	0x000a000c
 800ae34:	000c000a 	.word	0x000c000a
 800ae38:	00030006 	.word	0x00030006

0800ae3c <D48_1CH_HTONS_VOL_HP>:
 800ae3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae40:	6b17      	ldr	r7, [r2, #48]	; 0x30
 800ae42:	b087      	sub	sp, #28
 800ae44:	6993      	ldr	r3, [r2, #24]
 800ae46:	9701      	str	r7, [sp, #4]
 800ae48:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 800ae4a:	6a17      	ldr	r7, [r2, #32]
 800ae4c:	9304      	str	r3, [sp, #16]
 800ae4e:	69d6      	ldr	r6, [r2, #28]
 800ae50:	9702      	str	r7, [sp, #8]
 800ae52:	e9d2 4e04 	ldrd	r4, lr, [r2, #16]
 800ae56:	e9d2 3c02 	ldrd	r3, ip, [r2, #8]
 800ae5a:	2d00      	cmp	r5, #0
 800ae5c:	f000 8093 	beq.w	800af86 <D48_1CH_HTONS_VOL_HP+0x14a>
 800ae60:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ae64:	f1a1 0b02 	sub.w	fp, r1, #2
 800ae68:	46f2      	mov	sl, lr
 800ae6a:	4f48      	ldr	r7, [pc, #288]	; (800af8c <D48_1CH_HTONS_VOL_HP+0x150>)
 800ae6c:	eb00 0145 	add.w	r1, r0, r5, lsl #1
 800ae70:	469e      	mov	lr, r3
 800ae72:	9205      	str	r2, [sp, #20]
 800ae74:	9103      	str	r1, [sp, #12]
 800ae76:	e9d0 3200 	ldrd	r3, r2, [r0]
 800ae7a:	3006      	adds	r0, #6
 800ae7c:	ba5b      	rev16	r3, r3
 800ae7e:	fa92 f992 	rev16.w	r9, r2
 800ae82:	b2dd      	uxtb	r5, r3
 800ae84:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800ae88:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800ae8c:	0e1b      	lsrs	r3, r3, #24
 800ae8e:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 800ae92:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 800ae96:	eb05 2696 	add.w	r6, r5, r6, lsr #10
 800ae9a:	f857 5022 	ldr.w	r5, [r7, r2, lsl #2]
 800ae9e:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 800aea2:	fa5f f289 	uxtb.w	r2, r9
 800aea6:	eb01 2196 	add.w	r1, r1, r6, lsr #10
 800aeaa:	f3c9 2907 	ubfx	r9, r9, #8, #8
 800aeae:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 800aeb2:	f3c6 0809 	ubfx	r8, r6, #0, #10
 800aeb6:	eb05 2591 	add.w	r5, r5, r1, lsr #10
 800aeba:	f857 6029 	ldr.w	r6, [r7, r9, lsl #2]
 800aebe:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800aec2:	eb03 2395 	add.w	r3, r3, r5, lsr #10
 800aec6:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800aeca:	ea41 4808 	orr.w	r8, r1, r8, lsl #16
 800aece:	eb02 2293 	add.w	r2, r2, r3, lsr #10
 800aed2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800aed6:	eb06 2692 	add.w	r6, r6, r2, lsr #10
 800aeda:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800aede:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
 800aee2:	f3c6 0309 	ubfx	r3, r6, #0, #10
 800aee6:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 800aeea:	4b29      	ldr	r3, [pc, #164]	; (800af90 <D48_1CH_HTONS_VOL_HP+0x154>)
 800aeec:	fb28 c103 	smlad	r1, r8, r3, ip
 800aef0:	4b28      	ldr	r3, [pc, #160]	; (800af94 <D48_1CH_HTONS_VOL_HP+0x158>)
 800aef2:	fb25 1103 	smlad	r1, r5, r3, r1
 800aef6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800aefa:	fb22 1903 	smlad	r9, r2, r3, r1
 800aefe:	4b26      	ldr	r3, [pc, #152]	; (800af98 <D48_1CH_HTONS_VOL_HP+0x15c>)
 800af00:	fb28 ec03 	smlad	ip, r8, r3, lr
 800af04:	f04f 131b 	mov.w	r3, #1769499	; 0x1b001b
 800af08:	fb25 cc03 	smlad	ip, r5, r3, ip
 800af0c:	4b23      	ldr	r3, [pc, #140]	; (800af9c <D48_1CH_HTONS_VOL_HP+0x160>)
 800af0e:	fb22 cc03 	smlad	ip, r2, r3, ip
 800af12:	2101      	movs	r1, #1
 800af14:	fb28 f801 	smuad	r8, r8, r1
 800af18:	4b21      	ldr	r3, [pc, #132]	; (800afa0 <D48_1CH_HTONS_VOL_HP+0x164>)
 800af1a:	fb25 8503 	smlad	r5, r5, r3, r8
 800af1e:	4b21      	ldr	r3, [pc, #132]	; (800afa4 <D48_1CH_HTONS_VOL_HP+0x168>)
 800af20:	fb22 5e03 	smlad	lr, r2, r3, r5
 800af24:	f5a9 4158 	sub.w	r1, r9, #55296	; 0xd800
 800af28:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 800af2c:	190a      	adds	r2, r1, r4
 800af2e:	9c02      	ldr	r4, [sp, #8]
 800af30:	eba2 020a 	sub.w	r2, r2, sl
 800af34:	468a      	mov	sl, r1
 800af36:	ea4f 79e2 	mov.w	r9, r2, asr #31
 800af3a:	fba2 2304 	umull	r2, r3, r2, r4
 800af3e:	fb04 3309 	mla	r3, r4, r9, r3
 800af42:	f112 4400 	adds.w	r4, r2, #2147483648	; 0x80000000
 800af46:	f04f 0900 	mov.w	r9, #0
 800af4a:	f143 0500 	adc.w	r5, r3, #0
 800af4e:	9b01      	ldr	r3, [sp, #4]
 800af50:	032a      	lsls	r2, r5, #12
 800af52:	006c      	lsls	r4, r5, #1
 800af54:	fbc3 8902 	smlal	r8, r9, r3, r2
 800af58:	ea4f 03a9 	mov.w	r3, r9, asr #2
 800af5c:	f303 030f 	ssat	r3, #16, r3
 800af60:	f82b 3f02 	strh.w	r3, [fp, #2]!
 800af64:	9b03      	ldr	r3, [sp, #12]
 800af66:	4283      	cmp	r3, r0
 800af68:	d185      	bne.n	800ae76 <D48_1CH_HTONS_VOL_HP+0x3a>
 800af6a:	4673      	mov	r3, lr
 800af6c:	9a05      	ldr	r2, [sp, #20]
 800af6e:	6093      	str	r3, [r2, #8]
 800af70:	2000      	movs	r0, #0
 800af72:	9b04      	ldr	r3, [sp, #16]
 800af74:	f8c2 c00c 	str.w	ip, [r2, #12]
 800af78:	61d6      	str	r6, [r2, #28]
 800af7a:	6193      	str	r3, [r2, #24]
 800af7c:	e9c2 4104 	strd	r4, r1, [r2, #16]
 800af80:	b007      	add	sp, #28
 800af82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af86:	4671      	mov	r1, lr
 800af88:	e7f1      	b.n	800af6e <D48_1CH_HTONS_VOL_HP+0x132>
 800af8a:	bf00      	nop
 800af8c:	24000000 	.word	0x24000000
 800af90:	000f000a 	.word	0x000f000a
 800af94:	00060003 	.word	0x00060003
 800af98:	00150019 	.word	0x00150019
 800af9c:	00190015 	.word	0x00190015
 800afa0:	00030006 	.word	0x00030006
 800afa4:	000a000f 	.word	0x000a000f

0800afa8 <D64_1CH_HTONS_VOL_HP>:
 800afa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afac:	6b15      	ldr	r5, [r2, #48]	; 0x30
 800afae:	b089      	sub	sp, #36	; 0x24
 800afb0:	6993      	ldr	r3, [r2, #24]
 800afb2:	4686      	mov	lr, r0
 800afb4:	9503      	str	r5, [sp, #12]
 800afb6:	8cd0      	ldrh	r0, [r2, #38]	; 0x26
 800afb8:	6a15      	ldr	r5, [r2, #32]
 800afba:	9306      	str	r3, [sp, #24]
 800afbc:	69d6      	ldr	r6, [r2, #28]
 800afbe:	9504      	str	r5, [sp, #16]
 800afc0:	e9d2 8404 	ldrd	r8, r4, [r2, #16]
 800afc4:	e9d2 3c02 	ldrd	r3, ip, [r2, #8]
 800afc8:	2800      	cmp	r0, #0
 800afca:	f000 80a4 	beq.w	800b116 <D64_1CH_HTONS_VOL_HP+0x16e>
 800afce:	460f      	mov	r7, r1
 800afd0:	46f1      	mov	r9, lr
 800afd2:	eb01 0140 	add.w	r1, r1, r0, lsl #1
 800afd6:	4d56      	ldr	r5, [pc, #344]	; (800b130 <D64_1CH_HTONS_VOL_HP+0x188>)
 800afd8:	46a2      	mov	sl, r4
 800afda:	469e      	mov	lr, r3
 800afdc:	9105      	str	r1, [sp, #20]
 800afde:	9207      	str	r2, [sp, #28]
 800afe0:	f859 1b08 	ldr.w	r1, [r9], #8
 800afe4:	f859 3c04 	ldr.w	r3, [r9, #-4]
 800afe8:	ba49      	rev16	r1, r1
 800afea:	fa93 fb93 	rev16.w	fp, r3
 800afee:	b2cb      	uxtb	r3, r1
 800aff0:	f3c1 2207 	ubfx	r2, r1, #8, #8
 800aff4:	f3c1 4007 	ubfx	r0, r1, #16, #8
 800aff8:	0e09      	lsrs	r1, r1, #24
 800affa:	f855 4023 	ldr.w	r4, [r5, r3, lsl #2]
 800affe:	fa5f f38b 	uxtb.w	r3, fp
 800b002:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 800b006:	4426      	add	r6, r4
 800b008:	f855 4020 	ldr.w	r4, [r5, r0, lsl #2]
 800b00c:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 800b010:	eb02 2296 	add.w	r2, r2, r6, lsr #10
 800b014:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
 800b018:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800b01c:	f3cb 2307 	ubfx	r3, fp, #8, #8
 800b020:	eb04 2492 	add.w	r4, r4, r2, lsr #10
 800b024:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800b028:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 800b02c:	eb01 2194 	add.w	r1, r1, r4, lsr #10
 800b030:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800b034:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 800b038:	f3cb 4607 	ubfx	r6, fp, #16, #8
 800b03c:	eb00 2091 	add.w	r0, r0, r1, lsr #10
 800b040:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800b044:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 800b048:	ea4f 6b1b 	mov.w	fp, fp, lsr #24
 800b04c:	eb03 2390 	add.w	r3, r3, r0, lsr #10
 800b050:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800b054:	f855 b02b 	ldr.w	fp, [r5, fp, lsl #2]
 800b058:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800b05c:	eb06 2693 	add.w	r6, r6, r3, lsr #10
 800b060:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b064:	eb0b 2b96 	add.w	fp, fp, r6, lsr #10
 800b068:	f3c6 0409 	ubfx	r4, r6, #0, #10
 800b06c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800b070:	f3cb 0009 	ubfx	r0, fp, #0, #10
 800b074:	ea4f 269b 	mov.w	r6, fp, lsr #10
 800b078:	ea40 4b04 	orr.w	fp, r0, r4, lsl #16
 800b07c:	482d      	ldr	r0, [pc, #180]	; (800b134 <D64_1CH_HTONS_VOL_HP+0x18c>)
 800b07e:	fb22 cc00 	smlad	ip, r2, r0, ip
 800b082:	482d      	ldr	r0, [pc, #180]	; (800b138 <D64_1CH_HTONS_VOL_HP+0x190>)
 800b084:	fb21 cc00 	smlad	ip, r1, r0, ip
 800b088:	482c      	ldr	r0, [pc, #176]	; (800b13c <D64_1CH_HTONS_VOL_HP+0x194>)
 800b08a:	fb23 cc00 	smlad	ip, r3, r0, ip
 800b08e:	f44f 3480 	mov.w	r4, #65536	; 0x10000
 800b092:	fb2b c404 	smlad	r4, fp, r4, ip
 800b096:	482a      	ldr	r0, [pc, #168]	; (800b140 <D64_1CH_HTONS_VOL_HP+0x198>)
 800b098:	fb22 ec00 	smlad	ip, r2, r0, lr
 800b09c:	fb2b cc10 	smladx	ip, fp, r0, ip
 800b0a0:	4828      	ldr	r0, [pc, #160]	; (800b144 <D64_1CH_HTONS_VOL_HP+0x19c>)
 800b0a2:	fb21 cc00 	smlad	ip, r1, r0, ip
 800b0a6:	fb23 cc10 	smladx	ip, r3, r0, ip
 800b0aa:	f04f 0e01 	mov.w	lr, #1
 800b0ae:	fb22 f20e 	smuad	r2, r2, lr
 800b0b2:	4825      	ldr	r0, [pc, #148]	; (800b148 <D64_1CH_HTONS_VOL_HP+0x1a0>)
 800b0b4:	fb21 2100 	smlad	r1, r1, r0, r2
 800b0b8:	4a24      	ldr	r2, [pc, #144]	; (800b14c <D64_1CH_HTONS_VOL_HP+0x1a4>)
 800b0ba:	fb23 1302 	smlad	r3, r3, r2, r1
 800b0be:	4a24      	ldr	r2, [pc, #144]	; (800b150 <D64_1CH_HTONS_VOL_HP+0x1a8>)
 800b0c0:	fb2b 3e02 	smlad	lr, fp, r2, r3
 800b0c4:	f5a4 3400 	sub.w	r4, r4, #131072	; 0x20000
 800b0c8:	eb04 0208 	add.w	r2, r4, r8
 800b0cc:	eba2 020a 	sub.w	r2, r2, sl
 800b0d0:	46a2      	mov	sl, r4
 800b0d2:	4610      	mov	r0, r2
 800b0d4:	17d1      	asrs	r1, r2, #31
 800b0d6:	e9cd 0100 	strd	r0, r1, [sp]
 800b0da:	9904      	ldr	r1, [sp, #16]
 800b0dc:	9801      	ldr	r0, [sp, #4]
 800b0de:	fba2 2301 	umull	r2, r3, r2, r1
 800b0e2:	fb01 3300 	mla	r3, r1, r0, r3
 800b0e6:	f112 4000 	adds.w	r0, r2, #2147483648	; 0x80000000
 800b0ea:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800b0ee:	f143 0100 	adc.w	r1, r3, #0
 800b0f2:	9b03      	ldr	r3, [sp, #12]
 800b0f4:	02ca      	lsls	r2, r1, #11
 800b0f6:	ea4f 0841 	mov.w	r8, r1, lsl #1
 800b0fa:	2100      	movs	r1, #0
 800b0fc:	fbc3 0102 	smlal	r0, r1, r3, r2
 800b100:	108b      	asrs	r3, r1, #2
 800b102:	f303 030f 	ssat	r3, #16, r3
 800b106:	f827 3b02 	strh.w	r3, [r7], #2
 800b10a:	9b05      	ldr	r3, [sp, #20]
 800b10c:	429f      	cmp	r7, r3
 800b10e:	f47f af67 	bne.w	800afe0 <D64_1CH_HTONS_VOL_HP+0x38>
 800b112:	4673      	mov	r3, lr
 800b114:	9a07      	ldr	r2, [sp, #28]
 800b116:	6093      	str	r3, [r2, #8]
 800b118:	2000      	movs	r0, #0
 800b11a:	9b06      	ldr	r3, [sp, #24]
 800b11c:	f8c2 c00c 	str.w	ip, [r2, #12]
 800b120:	61d6      	str	r6, [r2, #28]
 800b122:	6193      	str	r3, [r2, #24]
 800b124:	e9c2 8404 	strd	r8, r4, [r2, #16]
 800b128:	b009      	add	sp, #36	; 0x24
 800b12a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b12e:	bf00      	nop
 800b130:	24000000 	.word	0x24000000
 800b134:	001c0015 	.word	0x001c0015
 800b138:	000f000a 	.word	0x000f000a
 800b13c:	00060003 	.word	0x00060003
 800b140:	0024002a 	.word	0x0024002a
 800b144:	002e0030 	.word	0x002e0030
 800b148:	00030006 	.word	0x00030006
 800b14c:	000a000f 	.word	0x000a000f
 800b150:	0015001c 	.word	0x0015001c

0800b154 <D80_1CH_HTONS_VOL_HP>:
 800b154:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b158:	6913      	ldr	r3, [r2, #16]
 800b15a:	b089      	sub	sp, #36	; 0x24
 800b15c:	6b16      	ldr	r6, [r2, #48]	; 0x30
 800b15e:	9301      	str	r3, [sp, #4]
 800b160:	9603      	str	r6, [sp, #12]
 800b162:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 800b164:	6a16      	ldr	r6, [r2, #32]
 800b166:	e9d2 5305 	ldrd	r5, r3, [r2, #20]
 800b16a:	e9d2 7c02 	ldrd	r7, ip, [r2, #8]
 800b16e:	9306      	str	r3, [sp, #24]
 800b170:	9604      	str	r6, [sp, #16]
 800b172:	69d3      	ldr	r3, [r2, #28]
 800b174:	2c00      	cmp	r4, #0
 800b176:	f000 80ce 	beq.w	800b316 <D80_1CH_HTONS_VOL_HP+0x1c2>
 800b17a:	3902      	subs	r1, #2
 800b17c:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 800b180:	4e66      	ldr	r6, [pc, #408]	; (800b31c <D80_1CH_HTONS_VOL_HP+0x1c8>)
 800b182:	469e      	mov	lr, r3
 800b184:	9102      	str	r1, [sp, #8]
 800b186:	46aa      	mov	sl, r5
 800b188:	eb00 0144 	add.w	r1, r0, r4, lsl #1
 800b18c:	9207      	str	r2, [sp, #28]
 800b18e:	9105      	str	r1, [sp, #20]
 800b190:	6883      	ldr	r3, [r0, #8]
 800b192:	e9d0 4200 	ldrd	r4, r2, [r0]
 800b196:	300a      	adds	r0, #10
 800b198:	ba64      	rev16	r4, r4
 800b19a:	ba52      	rev16	r2, r2
 800b19c:	fa93 fb93 	rev16.w	fp, r3
 800b1a0:	b2e5      	uxtb	r5, r4
 800b1a2:	f3c4 2307 	ubfx	r3, r4, #8, #8
 800b1a6:	f3c4 4107 	ubfx	r1, r4, #16, #8
 800b1aa:	0e24      	lsrs	r4, r4, #24
 800b1ac:	f856 8025 	ldr.w	r8, [r6, r5, lsl #2]
 800b1b0:	b2d5      	uxtb	r5, r2
 800b1b2:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 800b1b6:	44c6      	add	lr, r8
 800b1b8:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 800b1bc:	f856 4024 	ldr.w	r4, [r6, r4, lsl #2]
 800b1c0:	eb03 239e 	add.w	r3, r3, lr, lsr #10
 800b1c4:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
 800b1c8:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800b1cc:	eb01 2993 	add.w	r9, r1, r3, lsr #10
 800b1d0:	f3c2 2107 	ubfx	r1, r2, #8, #8
 800b1d4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b1d8:	eb04 2499 	add.w	r4, r4, r9, lsr #10
 800b1dc:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 800b1e0:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 800b1e4:	f3cb 2e07 	ubfx	lr, fp, #8, #8
 800b1e8:	eb05 2894 	add.w	r8, r5, r4, lsr #10
 800b1ec:	f3c2 4507 	ubfx	r5, r2, #16, #8
 800b1f0:	0e12      	lsrs	r2, r2, #24
 800b1f2:	f856 e02e 	ldr.w	lr, [r6, lr, lsl #2]
 800b1f6:	eb01 2198 	add.w	r1, r1, r8, lsr #10
 800b1fa:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
 800b1fe:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
 800b202:	fa5f fb8b 	uxtb.w	fp, fp
 800b206:	eb05 2591 	add.w	r5, r5, r1, lsr #10
 800b20a:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800b20e:	f856 b02b 	ldr.w	fp, [r6, fp, lsl #2]
 800b212:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800b216:	eb02 2295 	add.w	r2, r2, r5, lsr #10
 800b21a:	f3c9 0909 	ubfx	r9, r9, #0, #10
 800b21e:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800b222:	ea41 4808 	orr.w	r8, r1, r8, lsl #16
 800b226:	eb0b 2b92 	add.w	fp, fp, r2, lsr #10
 800b22a:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800b22e:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800b232:	eb0e 2e9b 	add.w	lr, lr, fp, lsr #10
 800b236:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 800b23a:	ea44 4409 	orr.w	r4, r4, r9, lsl #16
 800b23e:	f3ce 0109 	ubfx	r1, lr, #0, #10
 800b242:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
 800b246:	ea4f 2e9e 	mov.w	lr, lr, lsr #10
 800b24a:	ea41 4b0b 	orr.w	fp, r1, fp, lsl #16
 800b24e:	4934      	ldr	r1, [pc, #208]	; (800b320 <D80_1CH_HTONS_VOL_HP+0x1cc>)
 800b250:	fb23 cc01 	smlad	ip, r3, r1, ip
 800b254:	4933      	ldr	r1, [pc, #204]	; (800b324 <D80_1CH_HTONS_VOL_HP+0x1d0>)
 800b256:	fb24 cc01 	smlad	ip, r4, r1, ip
 800b25a:	4933      	ldr	r1, [pc, #204]	; (800b328 <D80_1CH_HTONS_VOL_HP+0x1d4>)
 800b25c:	fb28 cc01 	smlad	ip, r8, r1, ip
 800b260:	4932      	ldr	r1, [pc, #200]	; (800b32c <D80_1CH_HTONS_VOL_HP+0x1d8>)
 800b262:	fb22 cc01 	smlad	ip, r2, r1, ip
 800b266:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800b26a:	fb2b c901 	smlad	r9, fp, r1, ip
 800b26e:	4930      	ldr	r1, [pc, #192]	; (800b330 <D80_1CH_HTONS_VOL_HP+0x1dc>)
 800b270:	fb23 7701 	smlad	r7, r3, r1, r7
 800b274:	492f      	ldr	r1, [pc, #188]	; (800b334 <D80_1CH_HTONS_VOL_HP+0x1e0>)
 800b276:	fb24 7701 	smlad	r7, r4, r1, r7
 800b27a:	f04f 1c4b 	mov.w	ip, #4915275	; 0x4b004b
 800b27e:	fb28 7c0c 	smlad	ip, r8, ip, r7
 800b282:	492d      	ldr	r1, [pc, #180]	; (800b338 <D80_1CH_HTONS_VOL_HP+0x1e4>)
 800b284:	fb22 cc01 	smlad	ip, r2, r1, ip
 800b288:	492c      	ldr	r1, [pc, #176]	; (800b33c <D80_1CH_HTONS_VOL_HP+0x1e8>)
 800b28a:	fb2b cc01 	smlad	ip, fp, r1, ip
 800b28e:	2101      	movs	r1, #1
 800b290:	fb23 f301 	smuad	r3, r3, r1
 800b294:	492a      	ldr	r1, [pc, #168]	; (800b340 <D80_1CH_HTONS_VOL_HP+0x1ec>)
 800b296:	fb24 3401 	smlad	r4, r4, r1, r3
 800b29a:	492a      	ldr	r1, [pc, #168]	; (800b344 <D80_1CH_HTONS_VOL_HP+0x1f0>)
 800b29c:	fb28 4101 	smlad	r1, r8, r1, r4
 800b2a0:	4f29      	ldr	r7, [pc, #164]	; (800b348 <D80_1CH_HTONS_VOL_HP+0x1f4>)
 800b2a2:	fb22 1207 	smlad	r2, r2, r7, r1
 800b2a6:	4f29      	ldr	r7, [pc, #164]	; (800b34c <D80_1CH_HTONS_VOL_HP+0x1f8>)
 800b2a8:	fb2b 2707 	smlad	r7, fp, r7, r2
 800b2ac:	f5a9 317a 	sub.w	r1, r9, #256000	; 0x3e800
 800b2b0:	9b01      	ldr	r3, [sp, #4]
 800b2b2:	9c04      	ldr	r4, [sp, #16]
 800b2b4:	440b      	add	r3, r1
 800b2b6:	eba3 020a 	sub.w	r2, r3, sl
 800b2ba:	468a      	mov	sl, r1
 800b2bc:	ea4f 79e2 	mov.w	r9, r2, asr #31
 800b2c0:	fba2 2304 	umull	r2, r3, r2, r4
 800b2c4:	fb04 3309 	mla	r3, r4, r9, r3
 800b2c8:	f112 4400 	adds.w	r4, r2, #2147483648	; 0x80000000
 800b2cc:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800b2d0:	f143 0500 	adc.w	r5, r3, #0
 800b2d4:	006b      	lsls	r3, r5, #1
 800b2d6:	02aa      	lsls	r2, r5, #10
 800b2d8:	2500      	movs	r5, #0
 800b2da:	9301      	str	r3, [sp, #4]
 800b2dc:	9b03      	ldr	r3, [sp, #12]
 800b2de:	fbc3 4502 	smlal	r4, r5, r3, r2
 800b2e2:	9a02      	ldr	r2, [sp, #8]
 800b2e4:	10ab      	asrs	r3, r5, #2
 800b2e6:	f303 030f 	ssat	r3, #16, r3
 800b2ea:	f822 3f02 	strh.w	r3, [r2, #2]!
 800b2ee:	9b05      	ldr	r3, [sp, #20]
 800b2f0:	9202      	str	r2, [sp, #8]
 800b2f2:	4298      	cmp	r0, r3
 800b2f4:	f47f af4c 	bne.w	800b190 <D80_1CH_HTONS_VOL_HP+0x3c>
 800b2f8:	4673      	mov	r3, lr
 800b2fa:	9a07      	ldr	r2, [sp, #28]
 800b2fc:	61d3      	str	r3, [r2, #28]
 800b2fe:	2000      	movs	r0, #0
 800b300:	9b01      	ldr	r3, [sp, #4]
 800b302:	6097      	str	r7, [r2, #8]
 800b304:	f8c2 c00c 	str.w	ip, [r2, #12]
 800b308:	e9c2 3104 	strd	r3, r1, [r2, #16]
 800b30c:	9b06      	ldr	r3, [sp, #24]
 800b30e:	6193      	str	r3, [r2, #24]
 800b310:	b009      	add	sp, #36	; 0x24
 800b312:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b316:	4629      	mov	r1, r5
 800b318:	e7f0      	b.n	800b2fc <D80_1CH_HTONS_VOL_HP+0x1a8>
 800b31a:	bf00      	nop
 800b31c:	24000000 	.word	0x24000000
 800b320:	002d0024 	.word	0x002d0024
 800b324:	001c0015 	.word	0x001c0015
 800b328:	000f000a 	.word	0x000f000a
 800b32c:	00060003 	.word	0x00060003
 800b330:	0037003f 	.word	0x0037003f
 800b334:	00450049 	.word	0x00450049
 800b338:	00490045 	.word	0x00490045
 800b33c:	003f0037 	.word	0x003f0037
 800b340:	00030006 	.word	0x00030006
 800b344:	000a000f 	.word	0x000a000f
 800b348:	0015001c 	.word	0x0015001c
 800b34c:	0024002d 	.word	0x0024002d

0800b350 <D128_1CH_HTONS_VOL_HP>:
 800b350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b354:	6914      	ldr	r4, [r2, #16]
 800b356:	b08d      	sub	sp, #52	; 0x34
 800b358:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 800b35a:	9404      	str	r4, [sp, #16]
 800b35c:	6954      	ldr	r4, [r2, #20]
 800b35e:	920b      	str	r2, [sp, #44]	; 0x2c
 800b360:	9405      	str	r4, [sp, #20]
 800b362:	6994      	ldr	r4, [r2, #24]
 800b364:	f8d2 c01c 	ldr.w	ip, [r2, #28]
 800b368:	940a      	str	r4, [sp, #40]	; 0x28
 800b36a:	6894      	ldr	r4, [r2, #8]
 800b36c:	9403      	str	r4, [sp, #12]
 800b36e:	68d4      	ldr	r4, [r2, #12]
 800b370:	9402      	str	r4, [sp, #8]
 800b372:	6b14      	ldr	r4, [r2, #48]	; 0x30
 800b374:	6a12      	ldr	r2, [r2, #32]
 800b376:	9407      	str	r4, [sp, #28]
 800b378:	9208      	str	r2, [sp, #32]
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	f000 812e 	beq.w	800b5dc <D128_1CH_HTONS_VOL_HP+0x28c>
 800b380:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 800b384:	f100 0b10 	add.w	fp, r0, #16
 800b388:	f8df 9290 	ldr.w	r9, [pc, #656]	; 800b61c <D128_1CH_HTONS_VOL_HP+0x2cc>
 800b38c:	9106      	str	r1, [sp, #24]
 800b38e:	9309      	str	r3, [sp, #36]	; 0x24
 800b390:	e95b 0204 	ldrd	r0, r2, [fp, #-16]
 800b394:	e95b 3602 	ldrd	r3, r6, [fp, #-8]
 800b398:	ba40      	rev16	r0, r0
 800b39a:	ba52      	rev16	r2, r2
 800b39c:	ba5b      	rev16	r3, r3
 800b39e:	ba76      	rev16	r6, r6
 800b3a0:	b2c5      	uxtb	r5, r0
 800b3a2:	f3c0 2407 	ubfx	r4, r0, #8, #8
 800b3a6:	f3c0 4107 	ubfx	r1, r0, #16, #8
 800b3aa:	0e00      	lsrs	r0, r0, #24
 800b3ac:	f859 7025 	ldr.w	r7, [r9, r5, lsl #2]
 800b3b0:	b2d5      	uxtb	r5, r2
 800b3b2:	f859 e024 	ldr.w	lr, [r9, r4, lsl #2]
 800b3b6:	f3c2 2407 	ubfx	r4, r2, #8, #8
 800b3ba:	44bc      	add	ip, r7
 800b3bc:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800b3c0:	f859 7020 	ldr.w	r7, [r9, r0, lsl #2]
 800b3c4:	f3c2 4007 	ubfx	r0, r2, #16, #8
 800b3c8:	eb0e 2e9c 	add.w	lr, lr, ip, lsr #10
 800b3cc:	f859 a025 	ldr.w	sl, [r9, r5, lsl #2]
 800b3d0:	f859 5024 	ldr.w	r5, [r9, r4, lsl #2]
 800b3d4:	0e12      	lsrs	r2, r2, #24
 800b3d6:	eb01 219e 	add.w	r1, r1, lr, lsr #10
 800b3da:	f859 0020 	ldr.w	r0, [r9, r0, lsl #2]
 800b3de:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 800b3e2:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800b3e6:	eb07 2791 	add.w	r7, r7, r1, lsr #10
 800b3ea:	f859 4022 	ldr.w	r4, [r9, r2, lsl #2]
 800b3ee:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800b3f2:	b2da      	uxtb	r2, r3
 800b3f4:	eb0a 2a97 	add.w	sl, sl, r7, lsr #10
 800b3f8:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800b3fc:	ea4e 4e0c 	orr.w	lr, lr, ip, lsl #16
 800b400:	f859 2022 	ldr.w	r2, [r9, r2, lsl #2]
 800b404:	eb05 259a 	add.w	r5, r5, sl, lsr #10
 800b408:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 800b40c:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800b410:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800b414:	eb00 2c95 	add.w	ip, r0, r5, lsr #10
 800b418:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800b41c:	f859 8021 	ldr.w	r8, [r9, r1, lsl #2]
 800b420:	f3c3 4107 	ubfx	r1, r3, #16, #8
 800b424:	eb04 249c 	add.w	r4, r4, ip, lsr #10
 800b428:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 800b42c:	f859 0021 	ldr.w	r0, [r9, r1, lsl #2]
 800b430:	0e1b      	lsrs	r3, r3, #24
 800b432:	eb02 2294 	add.w	r2, r2, r4, lsr #10
 800b436:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800b43a:	f859 1023 	ldr.w	r1, [r9, r3, lsl #2]
 800b43e:	ea45 450a 	orr.w	r5, r5, sl, lsl #16
 800b442:	eb08 2892 	add.w	r8, r8, r2, lsr #10
 800b446:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800b44a:	b2f3      	uxtb	r3, r6
 800b44c:	eb00 2a98 	add.w	sl, r0, r8, lsr #10
 800b450:	f3c8 0009 	ubfx	r0, r8, #0, #10
 800b454:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800b458:	ea44 440c 	orr.w	r4, r4, ip, lsl #16
 800b45c:	eb01 219a 	add.w	r1, r1, sl, lsr #10
 800b460:	f3c6 2c07 	ubfx	ip, r6, #8, #8
 800b464:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 800b468:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 800b46c:	eb03 2891 	add.w	r8, r3, r1, lsr #10
 800b470:	f859 202c 	ldr.w	r2, [r9, ip, lsl #2]
 800b474:	f3c6 4c07 	ubfx	ip, r6, #16, #8
 800b478:	0e36      	lsrs	r6, r6, #24
 800b47a:	eb02 2298 	add.w	r2, r2, r8, lsr #10
 800b47e:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800b482:	f859 302c 	ldr.w	r3, [r9, ip, lsl #2]
 800b486:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800b48a:	f859 c026 	ldr.w	ip, [r9, r6, lsl #2]
 800b48e:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800b492:	eb03 2692 	add.w	r6, r3, r2, lsr #10
 800b496:	f3c2 0309 	ubfx	r3, r2, #0, #10
 800b49a:	9101      	str	r1, [sp, #4]
 800b49c:	ea43 4208 	orr.w	r2, r3, r8, lsl #16
 800b4a0:	9b02      	ldr	r3, [sp, #8]
 800b4a2:	eb0c 2c96 	add.w	ip, ip, r6, lsr #10
 800b4a6:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800b4aa:	4611      	mov	r1, r2
 800b4ac:	f3cc 0209 	ubfx	r2, ip, #0, #10
 800b4b0:	ea4f 2c9c 	mov.w	ip, ip, lsr #10
 800b4b4:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
 800b4b8:	4a49      	ldr	r2, [pc, #292]	; (800b5e0 <D128_1CH_HTONS_VOL_HP+0x290>)
 800b4ba:	fb2e 3202 	smlad	r2, lr, r2, r3
 800b4be:	4b49      	ldr	r3, [pc, #292]	; (800b5e4 <D128_1CH_HTONS_VOL_HP+0x294>)
 800b4c0:	fb27 2203 	smlad	r2, r7, r3, r2
 800b4c4:	4b48      	ldr	r3, [pc, #288]	; (800b5e8 <D128_1CH_HTONS_VOL_HP+0x298>)
 800b4c6:	fb25 2203 	smlad	r2, r5, r3, r2
 800b4ca:	4b48      	ldr	r3, [pc, #288]	; (800b5ec <D128_1CH_HTONS_VOL_HP+0x29c>)
 800b4cc:	fb24 2203 	smlad	r2, r4, r3, r2
 800b4d0:	4b47      	ldr	r3, [pc, #284]	; (800b5f0 <D128_1CH_HTONS_VOL_HP+0x2a0>)
 800b4d2:	fb20 2803 	smlad	r8, r0, r3, r2
 800b4d6:	4b47      	ldr	r3, [pc, #284]	; (800b5f4 <D128_1CH_HTONS_VOL_HP+0x2a4>)
 800b4d8:	9a01      	ldr	r2, [sp, #4]
 800b4da:	fb22 8203 	smlad	r2, r2, r3, r8
 800b4de:	4b46      	ldr	r3, [pc, #280]	; (800b5f8 <D128_1CH_HTONS_VOL_HP+0x2a8>)
 800b4e0:	9102      	str	r1, [sp, #8]
 800b4e2:	fb21 2203 	smlad	r2, r1, r3, r2
 800b4e6:	f44f 3880 	mov.w	r8, #65536	; 0x10000
 800b4ea:	fb26 2308 	smlad	r3, r6, r8, r2
 800b4ee:	4619      	mov	r1, r3
 800b4f0:	9a03      	ldr	r2, [sp, #12]
 800b4f2:	4b42      	ldr	r3, [pc, #264]	; (800b5fc <D128_1CH_HTONS_VOL_HP+0x2ac>)
 800b4f4:	fb2e 2803 	smlad	r8, lr, r3, r2
 800b4f8:	4b41      	ldr	r3, [pc, #260]	; (800b600 <D128_1CH_HTONS_VOL_HP+0x2b0>)
 800b4fa:	fb27 8a03 	smlad	sl, r7, r3, r8
 800b4fe:	f8df 8120 	ldr.w	r8, [pc, #288]	; 800b620 <D128_1CH_HTONS_VOL_HP+0x2d0>
 800b502:	fb25 a808 	smlad	r8, r5, r8, sl
 800b506:	f8df a11c 	ldr.w	sl, [pc, #284]	; 800b624 <D128_1CH_HTONS_VOL_HP+0x2d4>
 800b50a:	fb24 880a 	smlad	r8, r4, sl, r8
 800b50e:	f8df a118 	ldr.w	sl, [pc, #280]	; 800b628 <D128_1CH_HTONS_VOL_HP+0x2d8>
 800b512:	fb20 8a0a 	smlad	sl, r0, sl, r8
 800b516:	f8df 8114 	ldr.w	r8, [pc, #276]	; 800b62c <D128_1CH_HTONS_VOL_HP+0x2dc>
 800b51a:	9b01      	ldr	r3, [sp, #4]
 800b51c:	fb23 aa08 	smlad	sl, r3, r8, sl
 800b520:	f8df 810c 	ldr.w	r8, [pc, #268]	; 800b630 <D128_1CH_HTONS_VOL_HP+0x2e0>
 800b524:	9a02      	ldr	r2, [sp, #8]
 800b526:	fb22 a808 	smlad	r8, r2, r8, sl
 800b52a:	f8df a108 	ldr.w	sl, [pc, #264]	; 800b634 <D128_1CH_HTONS_VOL_HP+0x2e4>
 800b52e:	fb26 830a 	smlad	r3, r6, sl, r8
 800b532:	f04f 0801 	mov.w	r8, #1
 800b536:	9302      	str	r3, [sp, #8]
 800b538:	fb2e fe08 	smuad	lr, lr, r8
 800b53c:	f8df 80f8 	ldr.w	r8, [pc, #248]	; 800b638 <D128_1CH_HTONS_VOL_HP+0x2e8>
 800b540:	fb27 ee08 	smlad	lr, r7, r8, lr
 800b544:	4f2f      	ldr	r7, [pc, #188]	; (800b604 <D128_1CH_HTONS_VOL_HP+0x2b4>)
 800b546:	fb25 ee07 	smlad	lr, r5, r7, lr
 800b54a:	4f2f      	ldr	r7, [pc, #188]	; (800b608 <D128_1CH_HTONS_VOL_HP+0x2b8>)
 800b54c:	fb24 ee07 	smlad	lr, r4, r7, lr
 800b550:	4f2e      	ldr	r7, [pc, #184]	; (800b60c <D128_1CH_HTONS_VOL_HP+0x2bc>)
 800b552:	fb20 ee07 	smlad	lr, r0, r7, lr
 800b556:	4f2e      	ldr	r7, [pc, #184]	; (800b610 <D128_1CH_HTONS_VOL_HP+0x2c0>)
 800b558:	9b01      	ldr	r3, [sp, #4]
 800b55a:	fb23 ee07 	smlad	lr, r3, r7, lr
 800b55e:	4f2d      	ldr	r7, [pc, #180]	; (800b614 <D128_1CH_HTONS_VOL_HP+0x2c4>)
 800b560:	fb22 e707 	smlad	r7, r2, r7, lr
 800b564:	4b2c      	ldr	r3, [pc, #176]	; (800b618 <D128_1CH_HTONS_VOL_HP+0x2c8>)
 800b566:	fb26 7303 	smlad	r3, r6, r3, r7
 800b56a:	f5a1 1680 	sub.w	r6, r1, #1048576	; 0x100000
 800b56e:	9303      	str	r3, [sp, #12]
 800b570:	9b04      	ldr	r3, [sp, #16]
 800b572:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800b576:	9f08      	ldr	r7, [sp, #32]
 800b578:	2100      	movs	r1, #0
 800b57a:	4433      	add	r3, r6
 800b57c:	f10b 0b10 	add.w	fp, fp, #16
 800b580:	461a      	mov	r2, r3
 800b582:	9b05      	ldr	r3, [sp, #20]
 800b584:	9605      	str	r6, [sp, #20]
 800b586:	1ad2      	subs	r2, r2, r3
 800b588:	17d5      	asrs	r5, r2, #31
 800b58a:	fba2 2307 	umull	r2, r3, r2, r7
 800b58e:	1814      	adds	r4, r2, r0
 800b590:	fb07 3305 	mla	r3, r7, r5, r3
 800b594:	eb43 0501 	adc.w	r5, r3, r1
 800b598:	006b      	lsls	r3, r5, #1
 800b59a:	022a      	lsls	r2, r5, #8
 800b59c:	9304      	str	r3, [sp, #16]
 800b59e:	9b07      	ldr	r3, [sp, #28]
 800b5a0:	fbc3 0102 	smlal	r0, r1, r3, r2
 800b5a4:	9a06      	ldr	r2, [sp, #24]
 800b5a6:	108b      	asrs	r3, r1, #2
 800b5a8:	f303 030f 	ssat	r3, #16, r3
 800b5ac:	f822 3b02 	strh.w	r3, [r2], #2
 800b5b0:	4613      	mov	r3, r2
 800b5b2:	9206      	str	r2, [sp, #24]
 800b5b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b5b6:	4293      	cmp	r3, r2
 800b5b8:	f47f aeea 	bne.w	800b390 <D128_1CH_HTONS_VOL_HP+0x40>
 800b5bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b5be:	2000      	movs	r0, #0
 800b5c0:	9903      	ldr	r1, [sp, #12]
 800b5c2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b5c4:	6099      	str	r1, [r3, #8]
 800b5c6:	9902      	ldr	r1, [sp, #8]
 800b5c8:	f8c3 c01c 	str.w	ip, [r3, #28]
 800b5cc:	60d9      	str	r1, [r3, #12]
 800b5ce:	9904      	ldr	r1, [sp, #16]
 800b5d0:	619a      	str	r2, [r3, #24]
 800b5d2:	e9c3 1604 	strd	r1, r6, [r3, #16]
 800b5d6:	b00d      	add	sp, #52	; 0x34
 800b5d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b5dc:	9e05      	ldr	r6, [sp, #20]
 800b5de:	e7ed      	b.n	800b5bc <D128_1CH_HTONS_VOL_HP+0x26c>
 800b5e0:	00780069 	.word	0x00780069
 800b5e4:	005b004e 	.word	0x005b004e
 800b5e8:	00420037 	.word	0x00420037
 800b5ec:	002d0024 	.word	0x002d0024
 800b5f0:	001c0015 	.word	0x001c0015
 800b5f4:	000f000a 	.word	0x000f000a
 800b5f8:	00060003 	.word	0x00060003
 800b5fc:	00880096 	.word	0x00880096
 800b600:	00a200ac 	.word	0x00a200ac
 800b604:	000a000f 	.word	0x000a000f
 800b608:	0015001c 	.word	0x0015001c
 800b60c:	0024002d 	.word	0x0024002d
 800b610:	00370042 	.word	0x00370042
 800b614:	004e005b 	.word	0x004e005b
 800b618:	00690078 	.word	0x00690078
 800b61c:	24000000 	.word	0x24000000
 800b620:	00b400ba 	.word	0x00b400ba
 800b624:	00be00c0 	.word	0x00be00c0
 800b628:	00c000be 	.word	0x00c000be
 800b62c:	00ba00b4 	.word	0x00ba00b4
 800b630:	00ac00a2 	.word	0x00ac00a2
 800b634:	00960088 	.word	0x00960088
 800b638:	00030006 	.word	0x00030006

0800b63c <PDM_Filter_Init>:
 800b63c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b63e:	2240      	movs	r2, #64	; 0x40
 800b640:	2100      	movs	r1, #0
 800b642:	4604      	mov	r4, r0
 800b644:	300c      	adds	r0, #12
 800b646:	f000 f9ed 	bl	800ba24 <memset>
 800b64a:	4a56      	ldr	r2, [pc, #344]	; (800b7a4 <PDM_Filter_Init+0x168>)
 800b64c:	4856      	ldr	r0, [pc, #344]	; (800b7a8 <PDM_Filter_Init+0x16c>)
 800b64e:	f64f 71f0 	movw	r1, #65520	; 0xfff0
 800b652:	6813      	ldr	r3, [r2, #0]
 800b654:	f24c 2540 	movw	r5, #49728	; 0xc240
 800b658:	f023 0301 	bic.w	r3, r3, #1
 800b65c:	6013      	str	r3, [r2, #0]
 800b65e:	6803      	ldr	r3, [r0, #0]
 800b660:	400b      	ands	r3, r1
 800b662:	42ab      	cmp	r3, r5
 800b664:	d040      	beq.n	800b6e8 <PDM_Filter_Init+0xac>
 800b666:	6803      	ldr	r3, [r0, #0]
 800b668:	f24c 2270 	movw	r2, #49776	; 0xc270
 800b66c:	4019      	ands	r1, r3
 800b66e:	4291      	cmp	r1, r2
 800b670:	d03a      	beq.n	800b6e8 <PDM_Filter_Init+0xac>
 800b672:	4b4e      	ldr	r3, [pc, #312]	; (800b7ac <PDM_Filter_Init+0x170>)
 800b674:	2101      	movs	r1, #1
 800b676:	461a      	mov	r2, r3
 800b678:	6019      	str	r1, [r3, #0]
 800b67a:	6813      	ldr	r3, [r2, #0]
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d1fc      	bne.n	800b67a <PDM_Filter_Init+0x3e>
 800b680:	4b4b      	ldr	r3, [pc, #300]	; (800b7b0 <PDM_Filter_Init+0x174>)
 800b682:	494c      	ldr	r1, [pc, #304]	; (800b7b4 <PDM_Filter_Init+0x178>)
 800b684:	4a4c      	ldr	r2, [pc, #304]	; (800b7b8 <PDM_Filter_Init+0x17c>)
 800b686:	6019      	str	r1, [r3, #0]
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	8820      	ldrh	r0, [r4, #0]
 800b68c:	4293      	cmp	r3, r2
 800b68e:	8961      	ldrh	r1, [r4, #10]
 800b690:	f04f 0300 	mov.w	r3, #0
 800b694:	8922      	ldrh	r2, [r4, #8]
 800b696:	bf14      	ite	ne
 800b698:	2500      	movne	r5, #0
 800b69a:	4d47      	ldreq	r5, [pc, #284]	; (800b7b8 <PDM_Filter_Init+0x17c>)
 800b69c:	2801      	cmp	r0, #1
 800b69e:	61a3      	str	r3, [r4, #24]
 800b6a0:	6465      	str	r5, [r4, #68]	; 0x44
 800b6a2:	60e3      	str	r3, [r4, #12]
 800b6a4:	6263      	str	r3, [r4, #36]	; 0x24
 800b6a6:	6423      	str	r3, [r4, #64]	; 0x40
 800b6a8:	86a1      	strh	r1, [r4, #52]	; 0x34
 800b6aa:	86e2      	strh	r2, [r4, #54]	; 0x36
 800b6ac:	e9c4 3304 	strd	r3, r3, [r4, #16]
 800b6b0:	e9c4 3307 	strd	r3, r3, [r4, #28]
 800b6b4:	d936      	bls.n	800b724 <PDM_Filter_Init+0xe8>
 800b6b6:	2003      	movs	r0, #3
 800b6b8:	2302      	movs	r3, #2
 800b6ba:	8862      	ldrh	r2, [r4, #2]
 800b6bc:	2a01      	cmp	r2, #1
 800b6be:	d92e      	bls.n	800b71e <PDM_Filter_Init+0xe2>
 800b6c0:	2140      	movs	r1, #64	; 0x40
 800b6c2:	2300      	movs	r3, #0
 800b6c4:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800b6c6:	f1b2 1f01 	cmp.w	r2, #65537	; 0x10001
 800b6ca:	d101      	bne.n	800b6d0 <PDM_Filter_Init+0x94>
 800b6cc:	460b      	mov	r3, r1
 800b6ce:	6421      	str	r1, [r4, #64]	; 0x40
 800b6d0:	6862      	ldr	r2, [r4, #4]
 800b6d2:	b11a      	cbz	r2, 800b6dc <PDM_Filter_Init+0xa0>
 800b6d4:	f043 0310 	orr.w	r3, r3, #16
 800b6d8:	62e2      	str	r2, [r4, #44]	; 0x2c
 800b6da:	6423      	str	r3, [r4, #64]	; 0x40
 800b6dc:	2200      	movs	r2, #0
 800b6de:	8722      	strh	r2, [r4, #56]	; 0x38
 800b6e0:	b908      	cbnz	r0, 800b6e6 <PDM_Filter_Init+0xaa>
 800b6e2:	3380      	adds	r3, #128	; 0x80
 800b6e4:	6423      	str	r3, [r4, #64]	; 0x40
 800b6e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b6e8:	4b34      	ldr	r3, [pc, #208]	; (800b7bc <PDM_Filter_Init+0x180>)
 800b6ea:	681b      	ldr	r3, [r3, #0]
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	d1c0      	bne.n	800b672 <PDM_Filter_Init+0x36>
 800b6f0:	4a33      	ldr	r2, [pc, #204]	; (800b7c0 <PDM_Filter_Init+0x184>)
 800b6f2:	6813      	ldr	r3, [r2, #0]
 800b6f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b6f8:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800b6fc:	d006      	beq.n	800b70c <PDM_Filter_Init+0xd0>
 800b6fe:	6813      	ldr	r3, [r2, #0]
 800b700:	f240 4283 	movw	r2, #1155	; 0x483
 800b704:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b708:	4293      	cmp	r3, r2
 800b70a:	d1b2      	bne.n	800b672 <PDM_Filter_Init+0x36>
 800b70c:	4b2d      	ldr	r3, [pc, #180]	; (800b7c4 <PDM_Filter_Init+0x188>)
 800b70e:	2101      	movs	r1, #1
 800b710:	461a      	mov	r2, r3
 800b712:	6019      	str	r1, [r3, #0]
 800b714:	6813      	ldr	r3, [r2, #0]
 800b716:	2b00      	cmp	r3, #0
 800b718:	d1fc      	bne.n	800b714 <PDM_Filter_Init+0xd8>
 800b71a:	4b2b      	ldr	r3, [pc, #172]	; (800b7c8 <PDM_Filter_Init+0x18c>)
 800b71c:	e7b1      	b.n	800b682 <PDM_Filter_Init+0x46>
 800b71e:	d03a      	beq.n	800b796 <PDM_Filter_Init+0x15a>
 800b720:	4618      	mov	r0, r3
 800b722:	e7cd      	b.n	800b6c0 <PDM_Filter_Init+0x84>
 800b724:	4d29      	ldr	r5, [pc, #164]	; (800b7cc <PDM_Filter_Init+0x190>)
 800b726:	782a      	ldrb	r2, [r5, #0]
 800b728:	d01b      	beq.n	800b762 <PDM_Filter_Init+0x126>
 800b72a:	2a01      	cmp	r2, #1
 800b72c:	d001      	beq.n	800b732 <PDM_Filter_Init+0xf6>
 800b72e:	2001      	movs	r0, #1
 800b730:	e7c3      	b.n	800b6ba <PDM_Filter_Init+0x7e>
 800b732:	4927      	ldr	r1, [pc, #156]	; (800b7d0 <PDM_Filter_Init+0x194>)
 800b734:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 800b7d8 <PDM_Filter_Init+0x19c>
 800b738:	f501 6780 	add.w	r7, r1, #1024	; 0x400
 800b73c:	4e25      	ldr	r6, [pc, #148]	; (800b7d4 <PDM_Filter_Init+0x198>)
 800b73e:	f851 2f04 	ldr.w	r2, [r1, #4]!
 800b742:	ea0c 5302 	and.w	r3, ip, r2, lsl #20
 800b746:	ea02 0006 	and.w	r0, r2, r6
 800b74a:	f3c2 5209 	ubfx	r2, r2, #20, #10
 800b74e:	428f      	cmp	r7, r1
 800b750:	ea43 0300 	orr.w	r3, r3, r0
 800b754:	4413      	add	r3, r2
 800b756:	600b      	str	r3, [r1, #0]
 800b758:	d1f1      	bne.n	800b73e <PDM_Filter_Init+0x102>
 800b75a:	2300      	movs	r3, #0
 800b75c:	2001      	movs	r0, #1
 800b75e:	702b      	strb	r3, [r5, #0]
 800b760:	e7ab      	b.n	800b6ba <PDM_Filter_Init+0x7e>
 800b762:	2a00      	cmp	r2, #0
 800b764:	d1a9      	bne.n	800b6ba <PDM_Filter_Init+0x7e>
 800b766:	491a      	ldr	r1, [pc, #104]	; (800b7d0 <PDM_Filter_Init+0x194>)
 800b768:	f8df c06c 	ldr.w	ip, [pc, #108]	; 800b7d8 <PDM_Filter_Init+0x19c>
 800b76c:	f501 6780 	add.w	r7, r1, #1024	; 0x400
 800b770:	4e18      	ldr	r6, [pc, #96]	; (800b7d4 <PDM_Filter_Init+0x198>)
 800b772:	f851 2f04 	ldr.w	r2, [r1, #4]!
 800b776:	ea0c 5302 	and.w	r3, ip, r2, lsl #20
 800b77a:	ea02 0006 	and.w	r0, r2, r6
 800b77e:	f3c2 5209 	ubfx	r2, r2, #20, #10
 800b782:	428f      	cmp	r7, r1
 800b784:	ea43 0300 	orr.w	r3, r3, r0
 800b788:	4413      	add	r3, r2
 800b78a:	600b      	str	r3, [r1, #0]
 800b78c:	d1f1      	bne.n	800b772 <PDM_Filter_Init+0x136>
 800b78e:	2001      	movs	r0, #1
 800b790:	2300      	movs	r3, #0
 800b792:	7028      	strb	r0, [r5, #0]
 800b794:	e791      	b.n	800b6ba <PDM_Filter_Init+0x7e>
 800b796:	2220      	movs	r2, #32
 800b798:	4618      	mov	r0, r3
 800b79a:	2160      	movs	r1, #96	; 0x60
 800b79c:	6422      	str	r2, [r4, #64]	; 0x40
 800b79e:	4613      	mov	r3, r2
 800b7a0:	e790      	b.n	800b6c4 <PDM_Filter_Init+0x88>
 800b7a2:	bf00      	nop
 800b7a4:	e0002000 	.word	0xe0002000
 800b7a8:	e000ed00 	.word	0xe000ed00
 800b7ac:	40023008 	.word	0x40023008
 800b7b0:	40023000 	.word	0x40023000
 800b7b4:	f407a5c2 	.word	0xf407a5c2
 800b7b8:	b5e8b5cd 	.word	0xb5e8b5cd
 800b7bc:	e0042000 	.word	0xe0042000
 800b7c0:	5c001000 	.word	0x5c001000
 800b7c4:	58024c08 	.word	0x58024c08
 800b7c8:	58024c00 	.word	0x58024c00
 800b7cc:	24000494 	.word	0x24000494
 800b7d0:	23fffffc 	.word	0x23fffffc
 800b7d4:	000ffc00 	.word	0x000ffc00
 800b7d8:	3ff00000 	.word	0x3ff00000

0800b7dc <PDM_Filter_setConfig>:
 800b7dc:	4b67      	ldr	r3, [pc, #412]	; (800b97c <PDM_Filter_setConfig+0x1a0>)
 800b7de:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b7e0:	429a      	cmp	r2, r3
 800b7e2:	d128      	bne.n	800b836 <PDM_Filter_setConfig+0x5a>
 800b7e4:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800b7e6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b7e8:	880e      	ldrh	r6, [r1, #0]
 800b7ea:	460d      	mov	r5, r1
 800b7ec:	4604      	mov	r4, r0
 800b7ee:	f422 7180 	bic.w	r1, r2, #256	; 0x100
 800b7f2:	1e73      	subs	r3, r6, #1
 800b7f4:	f9b5 7004 	ldrsh.w	r7, [r5, #4]
 800b7f8:	f9b0 0038 	ldrsh.w	r0, [r0, #56]	; 0x38
 800b7fc:	2b06      	cmp	r3, #6
 800b7fe:	ed2d 8b02 	vpush	{d8}
 800b802:	6421      	str	r1, [r4, #64]	; 0x40
 800b804:	b083      	sub	sp, #12
 800b806:	d820      	bhi.n	800b84a <PDM_Filter_setConfig+0x6e>
 800b808:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 800b80a:	42b3      	cmp	r3, r6
 800b80c:	d03d      	beq.n	800b88a <PDM_Filter_setConfig+0xae>
 800b80e:	4b5c      	ldr	r3, [pc, #368]	; (800b980 <PDM_Filter_setConfig+0x1a4>)
 800b810:	4013      	ands	r3, r2
 800b812:	4333      	orrs	r3, r6
 800b814:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800b818:	6423      	str	r3, [r4, #64]	; 0x40
 800b81a:	f003 030f 	and.w	r3, r3, #15
 800b81e:	2a70      	cmp	r2, #112	; 0x70
 800b820:	f103 33ff 	add.w	r3, r3, #4294967295
 800b824:	d009      	beq.n	800b83a <PDM_Filter_setConfig+0x5e>
 800b826:	2b06      	cmp	r3, #6
 800b828:	d824      	bhi.n	800b874 <PDM_Filter_setConfig+0x98>
 800b82a:	e8df f003 	tbb	[pc, r3]
 800b82e:	878a      	.short	0x878a
 800b830:	7b7e8184 	.word	0x7b7e8184
 800b834:	78          	.byte	0x78
 800b835:	00          	.byte	0x00
 800b836:	2004      	movs	r0, #4
 800b838:	4770      	bx	lr
 800b83a:	2b06      	cmp	r3, #6
 800b83c:	d81a      	bhi.n	800b874 <PDM_Filter_setConfig+0x98>
 800b83e:	e8df f003 	tbb	[pc, r3]
 800b842:	8f92      	.short	0x8f92
 800b844:	8617898c 	.word	0x8617898c
 800b848:	83          	.byte	0x83
 800b849:	00          	.byte	0x00
 800b84a:	4287      	cmp	r7, r0
 800b84c:	f000 808e 	beq.w	800b96c <PDM_Filter_setConfig+0x190>
 800b850:	f117 0f0c 	cmn.w	r7, #12
 800b854:	f04f 0008 	mov.w	r0, #8
 800b858:	da11      	bge.n	800b87e <PDM_Filter_setConfig+0xa2>
 800b85a:	f64f 73f4 	movw	r3, #65524	; 0xfff4
 800b85e:	3040      	adds	r0, #64	; 0x40
 800b860:	80ab      	strh	r3, [r5, #4]
 800b862:	886b      	ldrh	r3, [r5, #2]
 800b864:	8626      	strh	r6, [r4, #48]	; 0x30
 800b866:	8663      	strh	r3, [r4, #50]	; 0x32
 800b868:	b003      	add	sp, #12
 800b86a:	ecbd 8b02 	vpop	{d8}
 800b86e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b870:	4b44      	ldr	r3, [pc, #272]	; (800b984 <PDM_Filter_setConfig+0x1a8>)
 800b872:	64a3      	str	r3, [r4, #72]	; 0x48
 800b874:	f117 0f0c 	cmn.w	r7, #12
 800b878:	f04f 0000 	mov.w	r0, #0
 800b87c:	dbed      	blt.n	800b85a <PDM_Filter_setConfig+0x7e>
 800b87e:	2f33      	cmp	r7, #51	; 0x33
 800b880:	dd10      	ble.n	800b8a4 <PDM_Filter_setConfig+0xc8>
 800b882:	2333      	movs	r3, #51	; 0x33
 800b884:	3040      	adds	r0, #64	; 0x40
 800b886:	80ab      	strh	r3, [r5, #4]
 800b888:	e7eb      	b.n	800b862 <PDM_Filter_setConfig+0x86>
 800b88a:	4287      	cmp	r7, r0
 800b88c:	d1f2      	bne.n	800b874 <PDM_Filter_setConfig+0x98>
 800b88e:	886b      	ldrh	r3, [r5, #2]
 800b890:	8663      	strh	r3, [r4, #50]	; 0x32
 800b892:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b894:	2000      	movs	r0, #0
 800b896:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b89a:	6423      	str	r3, [r4, #64]	; 0x40
 800b89c:	b003      	add	sp, #12
 800b89e:	ecbd 8b02 	vpop	{d8}
 800b8a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b8a4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b8a6:	f003 030f 	and.w	r3, r3, #15
 800b8aa:	3b01      	subs	r3, #1
 800b8ac:	2b06      	cmp	r3, #6
 800b8ae:	d831      	bhi.n	800b914 <PDM_Filter_setConfig+0x138>
 800b8b0:	4a35      	ldr	r2, [pc, #212]	; (800b988 <PDM_Filter_setConfig+0x1ac>)
 800b8b2:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 800b8b6:	eddf 0a35 	vldr	s1, [pc, #212]	; 800b98c <PDM_Filter_setConfig+0x1b0>
 800b8ba:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b8be:	9001      	str	r0, [sp, #4]
 800b8c0:	edd3 7a07 	vldr	s15, [r3, #28]
 800b8c4:	ed93 8a00 	vldr	s16, [r3]
 800b8c8:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800b8cc:	f000 f8cc 	bl	800ba68 <powf>
 800b8d0:	eef0 8a40 	vmov.f32	s17, s0
 800b8d4:	9801      	ldr	r0, [sp, #4]
 800b8d6:	ee07 7a90 	vmov	s15, r7
 800b8da:	ee28 8a28 	vmul.f32	s16, s16, s17
 800b8de:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 800b8e2:	9001      	str	r0, [sp, #4]
 800b8e4:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 800b8e8:	eddf 7a29 	vldr	s15, [pc, #164]	; 800b990 <PDM_Filter_setConfig+0x1b4>
 800b8ec:	ee60 0aa7 	vmul.f32	s1, s1, s15
 800b8f0:	f000 f8ba 	bl	800ba68 <powf>
 800b8f4:	ee28 8a00 	vmul.f32	s16, s16, s0
 800b8f8:	886b      	ldrh	r3, [r5, #2]
 800b8fa:	9801      	ldr	r0, [sp, #4]
 800b8fc:	feb8 8a48 	vrinta.f32	s16, s16
 800b900:	eebc 8ac8 	vcvt.u32.f32	s16, s16
 800b904:	8727      	strh	r7, [r4, #56]	; 0x38
 800b906:	8663      	strh	r3, [r4, #50]	; 0x32
 800b908:	8626      	strh	r6, [r4, #48]	; 0x30
 800b90a:	ed84 8a0f 	vstr	s16, [r4, #60]	; 0x3c
 800b90e:	2800      	cmp	r0, #0
 800b910:	d0bf      	beq.n	800b892 <PDM_Filter_setConfig+0xb6>
 800b912:	e7a9      	b.n	800b868 <PDM_Filter_setConfig+0x8c>
 800b914:	eddf 8a1f 	vldr	s17, [pc, #124]	; 800b994 <PDM_Filter_setConfig+0x1b8>
 800b918:	ed9f 8a1f 	vldr	s16, [pc, #124]	; 800b998 <PDM_Filter_setConfig+0x1bc>
 800b91c:	e7db      	b.n	800b8d6 <PDM_Filter_setConfig+0xfa>
 800b91e:	4b1f      	ldr	r3, [pc, #124]	; (800b99c <PDM_Filter_setConfig+0x1c0>)
 800b920:	64a3      	str	r3, [r4, #72]	; 0x48
 800b922:	e7a7      	b.n	800b874 <PDM_Filter_setConfig+0x98>
 800b924:	4b1e      	ldr	r3, [pc, #120]	; (800b9a0 <PDM_Filter_setConfig+0x1c4>)
 800b926:	64a3      	str	r3, [r4, #72]	; 0x48
 800b928:	e7a4      	b.n	800b874 <PDM_Filter_setConfig+0x98>
 800b92a:	4b1e      	ldr	r3, [pc, #120]	; (800b9a4 <PDM_Filter_setConfig+0x1c8>)
 800b92c:	64a3      	str	r3, [r4, #72]	; 0x48
 800b92e:	e7a1      	b.n	800b874 <PDM_Filter_setConfig+0x98>
 800b930:	4b1d      	ldr	r3, [pc, #116]	; (800b9a8 <PDM_Filter_setConfig+0x1cc>)
 800b932:	64a3      	str	r3, [r4, #72]	; 0x48
 800b934:	e79e      	b.n	800b874 <PDM_Filter_setConfig+0x98>
 800b936:	4b1d      	ldr	r3, [pc, #116]	; (800b9ac <PDM_Filter_setConfig+0x1d0>)
 800b938:	64a3      	str	r3, [r4, #72]	; 0x48
 800b93a:	e79b      	b.n	800b874 <PDM_Filter_setConfig+0x98>
 800b93c:	4b1c      	ldr	r3, [pc, #112]	; (800b9b0 <PDM_Filter_setConfig+0x1d4>)
 800b93e:	64a3      	str	r3, [r4, #72]	; 0x48
 800b940:	e798      	b.n	800b874 <PDM_Filter_setConfig+0x98>
 800b942:	4b1c      	ldr	r3, [pc, #112]	; (800b9b4 <PDM_Filter_setConfig+0x1d8>)
 800b944:	64a3      	str	r3, [r4, #72]	; 0x48
 800b946:	e795      	b.n	800b874 <PDM_Filter_setConfig+0x98>
 800b948:	4b1b      	ldr	r3, [pc, #108]	; (800b9b8 <PDM_Filter_setConfig+0x1dc>)
 800b94a:	64a3      	str	r3, [r4, #72]	; 0x48
 800b94c:	e792      	b.n	800b874 <PDM_Filter_setConfig+0x98>
 800b94e:	4b1b      	ldr	r3, [pc, #108]	; (800b9bc <PDM_Filter_setConfig+0x1e0>)
 800b950:	64a3      	str	r3, [r4, #72]	; 0x48
 800b952:	e78f      	b.n	800b874 <PDM_Filter_setConfig+0x98>
 800b954:	4b1a      	ldr	r3, [pc, #104]	; (800b9c0 <PDM_Filter_setConfig+0x1e4>)
 800b956:	64a3      	str	r3, [r4, #72]	; 0x48
 800b958:	e78c      	b.n	800b874 <PDM_Filter_setConfig+0x98>
 800b95a:	4b1a      	ldr	r3, [pc, #104]	; (800b9c4 <PDM_Filter_setConfig+0x1e8>)
 800b95c:	64a3      	str	r3, [r4, #72]	; 0x48
 800b95e:	e789      	b.n	800b874 <PDM_Filter_setConfig+0x98>
 800b960:	4b19      	ldr	r3, [pc, #100]	; (800b9c8 <PDM_Filter_setConfig+0x1ec>)
 800b962:	64a3      	str	r3, [r4, #72]	; 0x48
 800b964:	e786      	b.n	800b874 <PDM_Filter_setConfig+0x98>
 800b966:	4b19      	ldr	r3, [pc, #100]	; (800b9cc <PDM_Filter_setConfig+0x1f0>)
 800b968:	64a3      	str	r3, [r4, #72]	; 0x48
 800b96a:	e783      	b.n	800b874 <PDM_Filter_setConfig+0x98>
 800b96c:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 800b96e:	42b3      	cmp	r3, r6
 800b970:	f47f af6e 	bne.w	800b850 <PDM_Filter_setConfig+0x74>
 800b974:	886b      	ldrh	r3, [r5, #2]
 800b976:	2008      	movs	r0, #8
 800b978:	8663      	strh	r3, [r4, #50]	; 0x32
 800b97a:	e775      	b.n	800b868 <PDM_Filter_setConfig+0x8c>
 800b97c:	b5e8b5cd 	.word	0xb5e8b5cd
 800b980:	fffffef0 	.word	0xfffffef0
 800b984:	0800aaf5 	.word	0x0800aaf5
 800b988:	0800bf70 	.word	0x0800bf70
 800b98c:	42000000 	.word	0x42000000
 800b990:	3d4ccccd 	.word	0x3d4ccccd
 800b994:	4f800000 	.word	0x4f800000
 800b998:	00000000 	.word	0x00000000
 800b99c:	08009f01 	.word	0x08009f01
 800b9a0:	08009d89 	.word	0x08009d89
 800b9a4:	08009c79 	.word	0x08009c79
 800b9a8:	0800a73d 	.word	0x0800a73d
 800b9ac:	0800a4a5 	.word	0x0800a4a5
 800b9b0:	0800a26d 	.word	0x0800a26d
 800b9b4:	0800a089 	.word	0x0800a089
 800b9b8:	0800ad11 	.word	0x0800ad11
 800b9bc:	0800abd5 	.word	0x0800abd5
 800b9c0:	0800b351 	.word	0x0800b351
 800b9c4:	0800b155 	.word	0x0800b155
 800b9c8:	0800afa9 	.word	0x0800afa9
 800b9cc:	0800ae3d 	.word	0x0800ae3d

0800b9d0 <__errno>:
 800b9d0:	4b01      	ldr	r3, [pc, #4]	; (800b9d8 <__errno+0x8>)
 800b9d2:	6818      	ldr	r0, [r3, #0]
 800b9d4:	4770      	bx	lr
 800b9d6:	bf00      	nop
 800b9d8:	24000414 	.word	0x24000414

0800b9dc <__libc_init_array>:
 800b9dc:	b570      	push	{r4, r5, r6, lr}
 800b9de:	4d0d      	ldr	r5, [pc, #52]	; (800ba14 <__libc_init_array+0x38>)
 800b9e0:	4c0d      	ldr	r4, [pc, #52]	; (800ba18 <__libc_init_array+0x3c>)
 800b9e2:	1b64      	subs	r4, r4, r5
 800b9e4:	10a4      	asrs	r4, r4, #2
 800b9e6:	2600      	movs	r6, #0
 800b9e8:	42a6      	cmp	r6, r4
 800b9ea:	d109      	bne.n	800ba00 <__libc_init_array+0x24>
 800b9ec:	4d0b      	ldr	r5, [pc, #44]	; (800ba1c <__libc_init_array+0x40>)
 800b9ee:	4c0c      	ldr	r4, [pc, #48]	; (800ba20 <__libc_init_array+0x44>)
 800b9f0:	f000 fab2 	bl	800bf58 <_init>
 800b9f4:	1b64      	subs	r4, r4, r5
 800b9f6:	10a4      	asrs	r4, r4, #2
 800b9f8:	2600      	movs	r6, #0
 800b9fa:	42a6      	cmp	r6, r4
 800b9fc:	d105      	bne.n	800ba0a <__libc_init_array+0x2e>
 800b9fe:	bd70      	pop	{r4, r5, r6, pc}
 800ba00:	f855 3b04 	ldr.w	r3, [r5], #4
 800ba04:	4798      	blx	r3
 800ba06:	3601      	adds	r6, #1
 800ba08:	e7ee      	b.n	800b9e8 <__libc_init_array+0xc>
 800ba0a:	f855 3b04 	ldr.w	r3, [r5], #4
 800ba0e:	4798      	blx	r3
 800ba10:	3601      	adds	r6, #1
 800ba12:	e7f2      	b.n	800b9fa <__libc_init_array+0x1e>
 800ba14:	0800c3a0 	.word	0x0800c3a0
 800ba18:	0800c3a0 	.word	0x0800c3a0
 800ba1c:	0800c3a0 	.word	0x0800c3a0
 800ba20:	0800c3a4 	.word	0x0800c3a4

0800ba24 <memset>:
 800ba24:	4402      	add	r2, r0
 800ba26:	4603      	mov	r3, r0
 800ba28:	4293      	cmp	r3, r2
 800ba2a:	d100      	bne.n	800ba2e <memset+0xa>
 800ba2c:	4770      	bx	lr
 800ba2e:	f803 1b01 	strb.w	r1, [r3], #1
 800ba32:	e7f9      	b.n	800ba28 <memset+0x4>

0800ba34 <checkint>:
 800ba34:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800ba38:	2b7e      	cmp	r3, #126	; 0x7e
 800ba3a:	dd10      	ble.n	800ba5e <checkint+0x2a>
 800ba3c:	2b96      	cmp	r3, #150	; 0x96
 800ba3e:	dc0c      	bgt.n	800ba5a <checkint+0x26>
 800ba40:	2201      	movs	r2, #1
 800ba42:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 800ba46:	fa02 f303 	lsl.w	r3, r2, r3
 800ba4a:	1e5a      	subs	r2, r3, #1
 800ba4c:	4202      	tst	r2, r0
 800ba4e:	d106      	bne.n	800ba5e <checkint+0x2a>
 800ba50:	4203      	tst	r3, r0
 800ba52:	bf0c      	ite	eq
 800ba54:	2002      	moveq	r0, #2
 800ba56:	2001      	movne	r0, #1
 800ba58:	4770      	bx	lr
 800ba5a:	2002      	movs	r0, #2
 800ba5c:	4770      	bx	lr
 800ba5e:	2000      	movs	r0, #0
 800ba60:	4770      	bx	lr
 800ba62:	0000      	movs	r0, r0
 800ba64:	0000      	movs	r0, r0
	...

0800ba68 <powf>:
 800ba68:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ba6a:	ee10 1a10 	vmov	r1, s0
 800ba6e:	ee10 6a90 	vmov	r6, s1
 800ba72:	f5a1 0300 	sub.w	r3, r1, #8388608	; 0x800000
 800ba76:	0072      	lsls	r2, r6, #1
 800ba78:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 800ba7c:	b085      	sub	sp, #20
 800ba7e:	f102 30ff 	add.w	r0, r2, #4294967295
 800ba82:	f06f 7380 	mvn.w	r3, #16777216	; 0x1000000
 800ba86:	d256      	bcs.n	800bb36 <powf+0xce>
 800ba88:	4298      	cmp	r0, r3
 800ba8a:	d256      	bcs.n	800bb3a <powf+0xd2>
 800ba8c:	2000      	movs	r0, #0
 800ba8e:	f101 4240 	add.w	r2, r1, #3221225472	; 0xc0000000
 800ba92:	4ea3      	ldr	r6, [pc, #652]	; (800bd20 <powf+0x2b8>)
 800ba94:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 800ba98:	f502 024d 	add.w	r2, r2, #13434880	; 0xcd0000
 800ba9c:	f3c2 47c3 	ubfx	r7, r2, #19, #4
 800baa0:	0dd2      	lsrs	r2, r2, #23
 800baa2:	eb06 1707 	add.w	r7, r6, r7, lsl #4
 800baa6:	05d2      	lsls	r2, r2, #23
 800baa8:	1a8b      	subs	r3, r1, r2
 800baaa:	ed97 5b00 	vldr	d5, [r7]
 800baae:	ee07 3a90 	vmov	s15, r3
 800bab2:	15d2      	asrs	r2, r2, #23
 800bab4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800bab8:	eea5 6b07 	vfma.f64	d6, d5, d7
 800babc:	ed97 5b02 	vldr	d5, [r7, #8]
 800bac0:	ee26 2b06 	vmul.f64	d2, d6, d6
 800bac4:	ee22 1b02 	vmul.f64	d1, d2, d2
 800bac8:	ee07 2a90 	vmov	s15, r2
 800bacc:	ed96 4b40 	vldr	d4, [r6, #256]	; 0x100
 800bad0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800bad4:	ee37 7b05 	vadd.f64	d7, d7, d5
 800bad8:	ed96 5b42 	vldr	d5, [r6, #264]	; 0x108
 800badc:	ed96 3b44 	vldr	d3, [r6, #272]	; 0x110
 800bae0:	eea6 5b04 	vfma.f64	d5, d6, d4
 800bae4:	ed96 4b46 	vldr	d4, [r6, #280]	; 0x118
 800bae8:	eea6 4b03 	vfma.f64	d4, d6, d3
 800baec:	ed96 3b48 	vldr	d3, [r6, #288]	; 0x120
 800baf0:	eeb7 0ae0 	vcvt.f64.f32	d0, s1
 800baf4:	eea6 7b03 	vfma.f64	d7, d6, d3
 800baf8:	eea2 7b04 	vfma.f64	d7, d2, d4
 800bafc:	eea5 7b01 	vfma.f64	d7, d5, d1
 800bb00:	ee20 0b07 	vmul.f64	d0, d0, d7
 800bb04:	ee10 1a90 	vmov	r1, s1
 800bb08:	2300      	movs	r3, #0
 800bb0a:	2700      	movs	r7, #0
 800bb0c:	f3c1 32cf 	ubfx	r2, r1, #15, #16
 800bb10:	f248 06be 	movw	r6, #32958	; 0x80be
 800bb14:	429f      	cmp	r7, r3
 800bb16:	bf08      	it	eq
 800bb18:	4296      	cmpeq	r6, r2
 800bb1a:	f080 80b1 	bcs.w	800bc80 <powf+0x218>
 800bb1e:	ed9f 7b78 	vldr	d7, [pc, #480]	; 800bd00 <powf+0x298>
 800bb22:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800bb26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb2a:	dd79      	ble.n	800bc20 <powf+0x1b8>
 800bb2c:	b005      	add	sp, #20
 800bb2e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800bb32:	f000 b9eb 	b.w	800bf0c <__math_oflowf>
 800bb36:	4298      	cmp	r0, r3
 800bb38:	d32d      	bcc.n	800bb96 <powf+0x12e>
 800bb3a:	b952      	cbnz	r2, 800bb52 <powf+0xea>
 800bb3c:	f481 0380 	eor.w	r3, r1, #4194304	; 0x400000
 800bb40:	005b      	lsls	r3, r3, #1
 800bb42:	f513 0f00 	cmn.w	r3, #8388608	; 0x800000
 800bb46:	f240 80cd 	bls.w	800bce4 <powf+0x27c>
 800bb4a:	ee30 0a20 	vadd.f32	s0, s0, s1
 800bb4e:	b005      	add	sp, #20
 800bb50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bb52:	f1b1 5f7e 	cmp.w	r1, #1065353216	; 0x3f800000
 800bb56:	d105      	bne.n	800bb64 <powf+0xfc>
 800bb58:	f486 0680 	eor.w	r6, r6, #4194304	; 0x400000
 800bb5c:	0076      	lsls	r6, r6, #1
 800bb5e:	f516 0f00 	cmn.w	r6, #8388608	; 0x800000
 800bb62:	e7f0      	b.n	800bb46 <powf+0xde>
 800bb64:	004b      	lsls	r3, r1, #1
 800bb66:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
 800bb6a:	d8ee      	bhi.n	800bb4a <powf+0xe2>
 800bb6c:	f1b2 4f7f 	cmp.w	r2, #4278190080	; 0xff000000
 800bb70:	d1eb      	bne.n	800bb4a <powf+0xe2>
 800bb72:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 800bb76:	f000 80b5 	beq.w	800bce4 <powf+0x27c>
 800bb7a:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 800bb7e:	ea6f 0606 	mvn.w	r6, r6
 800bb82:	bf34      	ite	cc
 800bb84:	2300      	movcc	r3, #0
 800bb86:	2301      	movcs	r3, #1
 800bb88:	0ff6      	lsrs	r6, r6, #31
 800bb8a:	42b3      	cmp	r3, r6
 800bb8c:	f040 80ad 	bne.w	800bcea <powf+0x282>
 800bb90:	ee20 0aa0 	vmul.f32	s0, s1, s1
 800bb94:	e7db      	b.n	800bb4e <powf+0xe6>
 800bb96:	004f      	lsls	r7, r1, #1
 800bb98:	1e7a      	subs	r2, r7, #1
 800bb9a:	429a      	cmp	r2, r3
 800bb9c:	d31c      	bcc.n	800bbd8 <powf+0x170>
 800bb9e:	2900      	cmp	r1, #0
 800bba0:	ee20 0a00 	vmul.f32	s0, s0, s0
 800bba4:	da0f      	bge.n	800bbc6 <powf+0x15e>
 800bba6:	ee10 0a90 	vmov	r0, s1
 800bbaa:	f7ff ff43 	bl	800ba34 <checkint>
 800bbae:	2801      	cmp	r0, #1
 800bbb0:	d109      	bne.n	800bbc6 <powf+0x15e>
 800bbb2:	eeb1 0a40 	vneg.f32	s0, s0
 800bbb6:	b947      	cbnz	r7, 800bbca <powf+0x162>
 800bbb8:	2e00      	cmp	r6, #0
 800bbba:	dac8      	bge.n	800bb4e <powf+0xe6>
 800bbbc:	b005      	add	sp, #20
 800bbbe:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800bbc2:	f000 b9a9 	b.w	800bf18 <__math_divzerof>
 800bbc6:	2000      	movs	r0, #0
 800bbc8:	e7f5      	b.n	800bbb6 <powf+0x14e>
 800bbca:	2e00      	cmp	r6, #0
 800bbcc:	dabf      	bge.n	800bb4e <powf+0xe6>
 800bbce:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800bbd2:	ee87 0a80 	vdiv.f32	s0, s15, s0
 800bbd6:	e7ba      	b.n	800bb4e <powf+0xe6>
 800bbd8:	2900      	cmp	r1, #0
 800bbda:	da1f      	bge.n	800bc1c <powf+0x1b4>
 800bbdc:	ee10 0a90 	vmov	r0, s1
 800bbe0:	f7ff ff28 	bl	800ba34 <checkint>
 800bbe4:	b920      	cbnz	r0, 800bbf0 <powf+0x188>
 800bbe6:	b005      	add	sp, #20
 800bbe8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800bbec:	f000 b9a4 	b.w	800bf38 <__math_invalidf>
 800bbf0:	2801      	cmp	r0, #1
 800bbf2:	bf14      	ite	ne
 800bbf4:	2000      	movne	r0, #0
 800bbf6:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 800bbfa:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800bbfe:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 800bc02:	f4bf af44 	bcs.w	800ba8e <powf+0x26>
 800bc06:	eddf 7a47 	vldr	s15, [pc, #284]	; 800bd24 <powf+0x2bc>
 800bc0a:	ee20 0a27 	vmul.f32	s0, s0, s15
 800bc0e:	ee10 3a10 	vmov	r3, s0
 800bc12:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bc16:	f1a3 6138 	sub.w	r1, r3, #192937984	; 0xb800000
 800bc1a:	e738      	b.n	800ba8e <powf+0x26>
 800bc1c:	2000      	movs	r0, #0
 800bc1e:	e7ee      	b.n	800bbfe <powf+0x196>
 800bc20:	ed9f 7b39 	vldr	d7, [pc, #228]	; 800bd08 <powf+0x2a0>
 800bc24:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800bc28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc2c:	dd10      	ble.n	800bc50 <powf+0x1e8>
 800bc2e:	f04f 534c 	mov.w	r3, #855638016	; 0x33000000
 800bc32:	2800      	cmp	r0, #0
 800bc34:	d15c      	bne.n	800bcf0 <powf+0x288>
 800bc36:	9302      	str	r3, [sp, #8]
 800bc38:	eddd 7a02 	vldr	s15, [sp, #8]
 800bc3c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bc40:	ee77 7a87 	vadd.f32	s15, s15, s14
 800bc44:	eef4 7a47 	vcmp.f32	s15, s14
 800bc48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc4c:	f47f af6e 	bne.w	800bb2c <powf+0xc4>
 800bc50:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 800bd10 <powf+0x2a8>
 800bc54:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800bc58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc5c:	d804      	bhi.n	800bc68 <powf+0x200>
 800bc5e:	b005      	add	sp, #20
 800bc60:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800bc64:	f000 b946 	b.w	800bef4 <__math_uflowf>
 800bc68:	ed9f 7b2b 	vldr	d7, [pc, #172]	; 800bd18 <powf+0x2b0>
 800bc6c:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800bc70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc74:	d504      	bpl.n	800bc80 <powf+0x218>
 800bc76:	b005      	add	sp, #20
 800bc78:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800bc7c:	f000 b940 	b.w	800bf00 <__math_may_uflowf>
 800bc80:	4b29      	ldr	r3, [pc, #164]	; (800bd28 <powf+0x2c0>)
 800bc82:	ed93 7b40 	vldr	d7, [r3, #256]	; 0x100
 800bc86:	ee30 6b07 	vadd.f64	d6, d0, d7
 800bc8a:	ed8d 6b00 	vstr	d6, [sp]
 800bc8e:	ee36 7b47 	vsub.f64	d7, d6, d7
 800bc92:	ee30 7b47 	vsub.f64	d7, d0, d7
 800bc96:	e9dd 6700 	ldrd	r6, r7, [sp]
 800bc9a:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800bc9e:	f006 011f 	and.w	r1, r6, #31
 800bca2:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800bca6:	e9d1 ce00 	ldrd	ip, lr, [r1]
 800bcaa:	ed93 5b42 	vldr	d5, [r3, #264]	; 0x108
 800bcae:	ed93 6b44 	vldr	d6, [r3, #272]	; 0x110
 800bcb2:	ed93 4b46 	vldr	d4, [r3, #280]	; 0x118
 800bcb6:	eea7 6b05 	vfma.f64	d6, d7, d5
 800bcba:	ee27 5b07 	vmul.f64	d5, d7, d7
 800bcbe:	1836      	adds	r6, r6, r0
 800bcc0:	2300      	movs	r3, #0
 800bcc2:	eb13 040c 	adds.w	r4, r3, ip
 800bcc6:	ea4f 31c6 	mov.w	r1, r6, lsl #15
 800bcca:	eb41 050e 	adc.w	r5, r1, lr
 800bcce:	eea7 0b04 	vfma.f64	d0, d7, d4
 800bcd2:	ec45 4b17 	vmov	d7, r4, r5
 800bcd6:	eea6 0b05 	vfma.f64	d0, d6, d5
 800bcda:	ee20 0b07 	vmul.f64	d0, d0, d7
 800bcde:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800bce2:	e734      	b.n	800bb4e <powf+0xe6>
 800bce4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800bce8:	e731      	b.n	800bb4e <powf+0xe6>
 800bcea:	ed9f 0a10 	vldr	s0, [pc, #64]	; 800bd2c <powf+0x2c4>
 800bcee:	e72e      	b.n	800bb4e <powf+0xe6>
 800bcf0:	9303      	str	r3, [sp, #12]
 800bcf2:	eddd 7a03 	vldr	s15, [sp, #12]
 800bcf6:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800bcfa:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bcfe:	e7a1      	b.n	800bc44 <powf+0x1dc>
 800bd00:	ffd1d571 	.word	0xffd1d571
 800bd04:	405fffff 	.word	0x405fffff
 800bd08:	ffa3aae2 	.word	0xffa3aae2
 800bd0c:	405fffff 	.word	0x405fffff
 800bd10:	00000000 	.word	0x00000000
 800bd14:	c062c000 	.word	0xc062c000
 800bd18:	00000000 	.word	0x00000000
 800bd1c:	c062a000 	.word	0xc062a000
 800bd20:	0800bfe8 	.word	0x0800bfe8
 800bd24:	4b000000 	.word	0x4b000000
 800bd28:	0800c110 	.word	0x0800c110
 800bd2c:	00000000 	.word	0x00000000

0800bd30 <sinf_poly>:
 800bd30:	07cb      	lsls	r3, r1, #31
 800bd32:	d412      	bmi.n	800bd5a <sinf_poly+0x2a>
 800bd34:	ee21 6b00 	vmul.f64	d6, d1, d0
 800bd38:	ed90 5b1a 	vldr	d5, [r0, #104]	; 0x68
 800bd3c:	ed90 7b18 	vldr	d7, [r0, #96]	; 0x60
 800bd40:	eea5 7b01 	vfma.f64	d7, d5, d1
 800bd44:	ed90 5b16 	vldr	d5, [r0, #88]	; 0x58
 800bd48:	ee21 1b06 	vmul.f64	d1, d1, d6
 800bd4c:	eea5 0b06 	vfma.f64	d0, d5, d6
 800bd50:	eea7 0b01 	vfma.f64	d0, d7, d1
 800bd54:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800bd58:	4770      	bx	lr
 800bd5a:	ed90 5b14 	vldr	d5, [r0, #80]	; 0x50
 800bd5e:	ee21 6b01 	vmul.f64	d6, d1, d1
 800bd62:	ed90 7b12 	vldr	d7, [r0, #72]	; 0x48
 800bd66:	ed90 0b0c 	vldr	d0, [r0, #48]	; 0x30
 800bd6a:	eea1 7b05 	vfma.f64	d7, d1, d5
 800bd6e:	ed90 5b0e 	vldr	d5, [r0, #56]	; 0x38
 800bd72:	eea1 0b05 	vfma.f64	d0, d1, d5
 800bd76:	ed90 5b10 	vldr	d5, [r0, #64]	; 0x40
 800bd7a:	ee21 1b06 	vmul.f64	d1, d1, d6
 800bd7e:	eea6 0b05 	vfma.f64	d0, d6, d5
 800bd82:	e7e5      	b.n	800bd50 <sinf_poly+0x20>
 800bd84:	0000      	movs	r0, r0
	...

0800bd88 <sinf>:
 800bd88:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bd8a:	ee10 4a10 	vmov	r4, s0
 800bd8e:	f3c4 530a 	ubfx	r3, r4, #20, #11
 800bd92:	f5b3 7f7d 	cmp.w	r3, #1012	; 0x3f4
 800bd96:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 800bd9a:	eef0 7a40 	vmov.f32	s15, s0
 800bd9e:	ea4f 5214 	mov.w	r2, r4, lsr #20
 800bda2:	d218      	bcs.n	800bdd6 <sinf+0x4e>
 800bda4:	ee26 1b06 	vmul.f64	d1, d6, d6
 800bda8:	f5b3 7f66 	cmp.w	r3, #920	; 0x398
 800bdac:	d20a      	bcs.n	800bdc4 <sinf+0x3c>
 800bdae:	f412 6fff 	tst.w	r2, #2040	; 0x7f8
 800bdb2:	d103      	bne.n	800bdbc <sinf+0x34>
 800bdb4:	eeb7 1bc1 	vcvt.f32.f64	s2, d1
 800bdb8:	ed8d 1a01 	vstr	s2, [sp, #4]
 800bdbc:	eeb0 0a67 	vmov.f32	s0, s15
 800bdc0:	b003      	add	sp, #12
 800bdc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bdc4:	483e      	ldr	r0, [pc, #248]	; (800bec0 <sinf+0x138>)
 800bdc6:	eeb0 0b46 	vmov.f64	d0, d6
 800bdca:	2100      	movs	r1, #0
 800bdcc:	b003      	add	sp, #12
 800bdce:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800bdd2:	f7ff bfad 	b.w	800bd30 <sinf_poly>
 800bdd6:	f240 422e 	movw	r2, #1070	; 0x42e
 800bdda:	4293      	cmp	r3, r2
 800bddc:	d824      	bhi.n	800be28 <sinf+0xa0>
 800bdde:	4b38      	ldr	r3, [pc, #224]	; (800bec0 <sinf+0x138>)
 800bde0:	ed93 7b08 	vldr	d7, [r3, #32]
 800bde4:	ee26 7b07 	vmul.f64	d7, d6, d7
 800bde8:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800bdec:	f103 0070 	add.w	r0, r3, #112	; 0x70
 800bdf0:	ee17 1a90 	vmov	r1, s15
 800bdf4:	f501 0100 	add.w	r1, r1, #8388608	; 0x800000
 800bdf8:	1609      	asrs	r1, r1, #24
 800bdfa:	ee07 1a90 	vmov	s15, r1
 800bdfe:	f001 0203 	and.w	r2, r1, #3
 800be02:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 800be06:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800be0a:	ed92 0b00 	vldr	d0, [r2]
 800be0e:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 800be12:	f011 0f02 	tst.w	r1, #2
 800be16:	eea5 6b47 	vfms.f64	d6, d5, d7
 800be1a:	bf08      	it	eq
 800be1c:	4618      	moveq	r0, r3
 800be1e:	ee26 1b06 	vmul.f64	d1, d6, d6
 800be22:	ee20 0b06 	vmul.f64	d0, d0, d6
 800be26:	e7d1      	b.n	800bdcc <sinf+0x44>
 800be28:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
 800be2c:	d23d      	bcs.n	800beaa <sinf+0x122>
 800be2e:	4b25      	ldr	r3, [pc, #148]	; (800bec4 <sinf+0x13c>)
 800be30:	f3c4 6283 	ubfx	r2, r4, #26, #4
 800be34:	eb03 0082 	add.w	r0, r3, r2, lsl #2
 800be38:	f3c4 0116 	ubfx	r1, r4, #0, #23
 800be3c:	6a06      	ldr	r6, [r0, #32]
 800be3e:	6900      	ldr	r0, [r0, #16]
 800be40:	f3c4 55c2 	ubfx	r5, r4, #23, #3
 800be44:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800be48:	40a9      	lsls	r1, r5
 800be4a:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 800be4e:	fba1 6706 	umull	r6, r7, r1, r6
 800be52:	fb05 f301 	mul.w	r3, r5, r1
 800be56:	463a      	mov	r2, r7
 800be58:	fbe0 2301 	umlal	r2, r3, r0, r1
 800be5c:	1c11      	adds	r1, r2, #0
 800be5e:	f143 5600 	adc.w	r6, r3, #536870912	; 0x20000000
 800be62:	2000      	movs	r0, #0
 800be64:	1a10      	subs	r0, r2, r0
 800be66:	f006 4140 	and.w	r1, r6, #3221225472	; 0xc0000000
 800be6a:	eb63 0101 	sbc.w	r1, r3, r1
 800be6e:	f7f4 fbc1 	bl	80005f4 <__aeabi_l2d>
 800be72:	0fb5      	lsrs	r5, r6, #30
 800be74:	4a12      	ldr	r2, [pc, #72]	; (800bec0 <sinf+0x138>)
 800be76:	eb05 73d4 	add.w	r3, r5, r4, lsr #31
 800be7a:	ed9f 0b0f 	vldr	d0, [pc, #60]	; 800beb8 <sinf+0x130>
 800be7e:	ec41 0b17 	vmov	d7, r0, r1
 800be82:	f003 0103 	and.w	r1, r3, #3
 800be86:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 800be8a:	ee27 0b00 	vmul.f64	d0, d7, d0
 800be8e:	ed91 7b00 	vldr	d7, [r1]
 800be92:	ee20 1b00 	vmul.f64	d1, d0, d0
 800be96:	f013 0f02 	tst.w	r3, #2
 800be9a:	f102 0070 	add.w	r0, r2, #112	; 0x70
 800be9e:	4629      	mov	r1, r5
 800bea0:	bf08      	it	eq
 800bea2:	4610      	moveq	r0, r2
 800bea4:	ee27 0b00 	vmul.f64	d0, d7, d0
 800bea8:	e790      	b.n	800bdcc <sinf+0x44>
 800beaa:	b003      	add	sp, #12
 800beac:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800beb0:	f000 b842 	b.w	800bf38 <__math_invalidf>
 800beb4:	f3af 8000 	nop.w
 800beb8:	54442d18 	.word	0x54442d18
 800bebc:	3c1921fb 	.word	0x3c1921fb
 800bec0:	0800c2b8 	.word	0x0800c2b8
 800bec4:	0800c258 	.word	0x0800c258

0800bec8 <with_errnof>:
 800bec8:	b513      	push	{r0, r1, r4, lr}
 800beca:	4604      	mov	r4, r0
 800becc:	ed8d 0a01 	vstr	s0, [sp, #4]
 800bed0:	f7ff fd7e 	bl	800b9d0 <__errno>
 800bed4:	ed9d 0a01 	vldr	s0, [sp, #4]
 800bed8:	6004      	str	r4, [r0, #0]
 800beda:	b002      	add	sp, #8
 800bedc:	bd10      	pop	{r4, pc}

0800bede <xflowf>:
 800bede:	b130      	cbz	r0, 800beee <xflowf+0x10>
 800bee0:	eef1 7a40 	vneg.f32	s15, s0
 800bee4:	ee27 0a80 	vmul.f32	s0, s15, s0
 800bee8:	2022      	movs	r0, #34	; 0x22
 800beea:	f7ff bfed 	b.w	800bec8 <with_errnof>
 800beee:	eef0 7a40 	vmov.f32	s15, s0
 800bef2:	e7f7      	b.n	800bee4 <xflowf+0x6>

0800bef4 <__math_uflowf>:
 800bef4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800befc <__math_uflowf+0x8>
 800bef8:	f7ff bff1 	b.w	800bede <xflowf>
 800befc:	10000000 	.word	0x10000000

0800bf00 <__math_may_uflowf>:
 800bf00:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800bf08 <__math_may_uflowf+0x8>
 800bf04:	f7ff bfeb 	b.w	800bede <xflowf>
 800bf08:	1a200000 	.word	0x1a200000

0800bf0c <__math_oflowf>:
 800bf0c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800bf14 <__math_oflowf+0x8>
 800bf10:	f7ff bfe5 	b.w	800bede <xflowf>
 800bf14:	70000000 	.word	0x70000000

0800bf18 <__math_divzerof>:
 800bf18:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800bf1c:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 800bf20:	2800      	cmp	r0, #0
 800bf22:	fe40 7a27 	vseleq.f32	s15, s0, s15
 800bf26:	ed9f 0a03 	vldr	s0, [pc, #12]	; 800bf34 <__math_divzerof+0x1c>
 800bf2a:	2022      	movs	r0, #34	; 0x22
 800bf2c:	ee87 0a80 	vdiv.f32	s0, s15, s0
 800bf30:	f7ff bfca 	b.w	800bec8 <with_errnof>
 800bf34:	00000000 	.word	0x00000000

0800bf38 <__math_invalidf>:
 800bf38:	eef0 7a40 	vmov.f32	s15, s0
 800bf3c:	ee30 7a40 	vsub.f32	s14, s0, s0
 800bf40:	eef4 7a67 	vcmp.f32	s15, s15
 800bf44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf48:	ee87 0a07 	vdiv.f32	s0, s14, s14
 800bf4c:	d602      	bvs.n	800bf54 <__math_invalidf+0x1c>
 800bf4e:	2021      	movs	r0, #33	; 0x21
 800bf50:	f7ff bfba 	b.w	800bec8 <with_errnof>
 800bf54:	4770      	bx	lr
	...

0800bf58 <_init>:
 800bf58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf5a:	bf00      	nop
 800bf5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bf5e:	bc08      	pop	{r3}
 800bf60:	469e      	mov	lr, r3
 800bf62:	4770      	bx	lr

0800bf64 <_fini>:
 800bf64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf66:	bf00      	nop
 800bf68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bf6a:	bc08      	pop	{r3}
 800bf6c:	469e      	mov	lr, r3
 800bf6e:	4770      	bx	lr
