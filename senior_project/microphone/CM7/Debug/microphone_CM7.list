
microphone_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c858  08000298  08000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002e8  0800caf0  0800caf0  0001caf0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cdd8  0800cdd8  00020474  2**0
                  CONTENTS
  4 .ARM          00000008  0800cdd8  0800cdd8  0001cdd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cde0  0800cde0  00020474  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cde0  0800cde0  0001cde0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cde4  0800cde4  0001cde4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000474  24000000  0800cde8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003f8  24000474  0800d25c  00020474  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2400086c  0800d25c  0002086c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020474  2**0
                  CONTENTS, READONLY
 12 .debug_info   000352be  00000000  00000000  000204a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003fe2  00000000  00000000  00055760  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016f0  00000000  00000000  00059748  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000015e0  00000000  00000000  0005ae38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003c277  00000000  00000000  0005c418  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00026a9a  00000000  00000000  0009868f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0018bcbb  00000000  00000000  000bf129  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000d1  00000000  00000000  0024ade4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000065bc  00000000  00000000  0024aeb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000474 	.word	0x24000474
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800cad8 	.word	0x0800cad8

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000478 	.word	0x24000478
 80002d4:	0800cad8 	.word	0x0800cad8

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96e 	b.w	80005cc <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468c      	mov	ip, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	f040 8083 	bne.w	800041e <__udivmoddi4+0x116>
 8000318:	428a      	cmp	r2, r1
 800031a:	4617      	mov	r7, r2
 800031c:	d947      	bls.n	80003ae <__udivmoddi4+0xa6>
 800031e:	fab2 f282 	clz	r2, r2
 8000322:	b142      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000324:	f1c2 0020 	rsb	r0, r2, #32
 8000328:	fa24 f000 	lsr.w	r0, r4, r0
 800032c:	4091      	lsls	r1, r2
 800032e:	4097      	lsls	r7, r2
 8000330:	ea40 0c01 	orr.w	ip, r0, r1
 8000334:	4094      	lsls	r4, r2
 8000336:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fbbc f6f8 	udiv	r6, ip, r8
 8000340:	fa1f fe87 	uxth.w	lr, r7
 8000344:	fb08 c116 	mls	r1, r8, r6, ip
 8000348:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034c:	fb06 f10e 	mul.w	r1, r6, lr
 8000350:	4299      	cmp	r1, r3
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x60>
 8000354:	18fb      	adds	r3, r7, r3
 8000356:	f106 30ff 	add.w	r0, r6, #4294967295
 800035a:	f080 8119 	bcs.w	8000590 <__udivmoddi4+0x288>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 8116 	bls.w	8000590 <__udivmoddi4+0x288>
 8000364:	3e02      	subs	r6, #2
 8000366:	443b      	add	r3, r7
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000370:	fb08 3310 	mls	r3, r8, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 fe0e 	mul.w	lr, r0, lr
 800037c:	45a6      	cmp	lr, r4
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x8c>
 8000380:	193c      	adds	r4, r7, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	f080 8105 	bcs.w	8000594 <__udivmoddi4+0x28c>
 800038a:	45a6      	cmp	lr, r4
 800038c:	f240 8102 	bls.w	8000594 <__udivmoddi4+0x28c>
 8000390:	3802      	subs	r0, #2
 8000392:	443c      	add	r4, r7
 8000394:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	2600      	movs	r6, #0
 800039e:	b11d      	cbz	r5, 80003a8 <__udivmoddi4+0xa0>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c5 4300 	strd	r4, r3, [r5]
 80003a8:	4631      	mov	r1, r6
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	b902      	cbnz	r2, 80003b2 <__udivmoddi4+0xaa>
 80003b0:	deff      	udf	#255	; 0xff
 80003b2:	fab2 f282 	clz	r2, r2
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d150      	bne.n	800045c <__udivmoddi4+0x154>
 80003ba:	1bcb      	subs	r3, r1, r7
 80003bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c0:	fa1f f887 	uxth.w	r8, r7
 80003c4:	2601      	movs	r6, #1
 80003c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80003ca:	0c21      	lsrs	r1, r4, #16
 80003cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003d4:	fb08 f30c 	mul.w	r3, r8, ip
 80003d8:	428b      	cmp	r3, r1
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0xe4>
 80003dc:	1879      	adds	r1, r7, r1
 80003de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0xe2>
 80003e4:	428b      	cmp	r3, r1
 80003e6:	f200 80e9 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 80003ea:	4684      	mov	ip, r0
 80003ec:	1ac9      	subs	r1, r1, r3
 80003ee:	b2a3      	uxth	r3, r4
 80003f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80003f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80003f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003fc:	fb08 f800 	mul.w	r8, r8, r0
 8000400:	45a0      	cmp	r8, r4
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x10c>
 8000404:	193c      	adds	r4, r7, r4
 8000406:	f100 33ff 	add.w	r3, r0, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x10a>
 800040c:	45a0      	cmp	r8, r4
 800040e:	f200 80d9 	bhi.w	80005c4 <__udivmoddi4+0x2bc>
 8000412:	4618      	mov	r0, r3
 8000414:	eba4 0408 	sub.w	r4, r4, r8
 8000418:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800041c:	e7bf      	b.n	800039e <__udivmoddi4+0x96>
 800041e:	428b      	cmp	r3, r1
 8000420:	d909      	bls.n	8000436 <__udivmoddi4+0x12e>
 8000422:	2d00      	cmp	r5, #0
 8000424:	f000 80b1 	beq.w	800058a <__udivmoddi4+0x282>
 8000428:	2600      	movs	r6, #0
 800042a:	e9c5 0100 	strd	r0, r1, [r5]
 800042e:	4630      	mov	r0, r6
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	fab3 f683 	clz	r6, r3
 800043a:	2e00      	cmp	r6, #0
 800043c:	d14a      	bne.n	80004d4 <__udivmoddi4+0x1cc>
 800043e:	428b      	cmp	r3, r1
 8000440:	d302      	bcc.n	8000448 <__udivmoddi4+0x140>
 8000442:	4282      	cmp	r2, r0
 8000444:	f200 80b8 	bhi.w	80005b8 <__udivmoddi4+0x2b0>
 8000448:	1a84      	subs	r4, r0, r2
 800044a:	eb61 0103 	sbc.w	r1, r1, r3
 800044e:	2001      	movs	r0, #1
 8000450:	468c      	mov	ip, r1
 8000452:	2d00      	cmp	r5, #0
 8000454:	d0a8      	beq.n	80003a8 <__udivmoddi4+0xa0>
 8000456:	e9c5 4c00 	strd	r4, ip, [r5]
 800045a:	e7a5      	b.n	80003a8 <__udivmoddi4+0xa0>
 800045c:	f1c2 0320 	rsb	r3, r2, #32
 8000460:	fa20 f603 	lsr.w	r6, r0, r3
 8000464:	4097      	lsls	r7, r2
 8000466:	fa01 f002 	lsl.w	r0, r1, r2
 800046a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800046e:	40d9      	lsrs	r1, r3
 8000470:	4330      	orrs	r0, r6
 8000472:	0c03      	lsrs	r3, r0, #16
 8000474:	fbb1 f6fe 	udiv	r6, r1, lr
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000480:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000484:	fb06 f108 	mul.w	r1, r6, r8
 8000488:	4299      	cmp	r1, r3
 800048a:	fa04 f402 	lsl.w	r4, r4, r2
 800048e:	d909      	bls.n	80004a4 <__udivmoddi4+0x19c>
 8000490:	18fb      	adds	r3, r7, r3
 8000492:	f106 3cff 	add.w	ip, r6, #4294967295
 8000496:	f080 808d 	bcs.w	80005b4 <__udivmoddi4+0x2ac>
 800049a:	4299      	cmp	r1, r3
 800049c:	f240 808a 	bls.w	80005b4 <__udivmoddi4+0x2ac>
 80004a0:	3e02      	subs	r6, #2
 80004a2:	443b      	add	r3, r7
 80004a4:	1a5b      	subs	r3, r3, r1
 80004a6:	b281      	uxth	r1, r0
 80004a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80004ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b4:	fb00 f308 	mul.w	r3, r0, r8
 80004b8:	428b      	cmp	r3, r1
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x1c4>
 80004bc:	1879      	adds	r1, r7, r1
 80004be:	f100 3cff 	add.w	ip, r0, #4294967295
 80004c2:	d273      	bcs.n	80005ac <__udivmoddi4+0x2a4>
 80004c4:	428b      	cmp	r3, r1
 80004c6:	d971      	bls.n	80005ac <__udivmoddi4+0x2a4>
 80004c8:	3802      	subs	r0, #2
 80004ca:	4439      	add	r1, r7
 80004cc:	1acb      	subs	r3, r1, r3
 80004ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004d2:	e778      	b.n	80003c6 <__udivmoddi4+0xbe>
 80004d4:	f1c6 0c20 	rsb	ip, r6, #32
 80004d8:	fa03 f406 	lsl.w	r4, r3, r6
 80004dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e0:	431c      	orrs	r4, r3
 80004e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80004e6:	fa01 f306 	lsl.w	r3, r1, r6
 80004ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80004f2:	431f      	orrs	r7, r3
 80004f4:	0c3b      	lsrs	r3, r7, #16
 80004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fa:	fa1f f884 	uxth.w	r8, r4
 80004fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000502:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000506:	fb09 fa08 	mul.w	sl, r9, r8
 800050a:	458a      	cmp	sl, r1
 800050c:	fa02 f206 	lsl.w	r2, r2, r6
 8000510:	fa00 f306 	lsl.w	r3, r0, r6
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x220>
 8000516:	1861      	adds	r1, r4, r1
 8000518:	f109 30ff 	add.w	r0, r9, #4294967295
 800051c:	d248      	bcs.n	80005b0 <__udivmoddi4+0x2a8>
 800051e:	458a      	cmp	sl, r1
 8000520:	d946      	bls.n	80005b0 <__udivmoddi4+0x2a8>
 8000522:	f1a9 0902 	sub.w	r9, r9, #2
 8000526:	4421      	add	r1, r4
 8000528:	eba1 010a 	sub.w	r1, r1, sl
 800052c:	b2bf      	uxth	r7, r7
 800052e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000532:	fb0e 1110 	mls	r1, lr, r0, r1
 8000536:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800053a:	fb00 f808 	mul.w	r8, r0, r8
 800053e:	45b8      	cmp	r8, r7
 8000540:	d907      	bls.n	8000552 <__udivmoddi4+0x24a>
 8000542:	19e7      	adds	r7, r4, r7
 8000544:	f100 31ff 	add.w	r1, r0, #4294967295
 8000548:	d22e      	bcs.n	80005a8 <__udivmoddi4+0x2a0>
 800054a:	45b8      	cmp	r8, r7
 800054c:	d92c      	bls.n	80005a8 <__udivmoddi4+0x2a0>
 800054e:	3802      	subs	r0, #2
 8000550:	4427      	add	r7, r4
 8000552:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000556:	eba7 0708 	sub.w	r7, r7, r8
 800055a:	fba0 8902 	umull	r8, r9, r0, r2
 800055e:	454f      	cmp	r7, r9
 8000560:	46c6      	mov	lr, r8
 8000562:	4649      	mov	r1, r9
 8000564:	d31a      	bcc.n	800059c <__udivmoddi4+0x294>
 8000566:	d017      	beq.n	8000598 <__udivmoddi4+0x290>
 8000568:	b15d      	cbz	r5, 8000582 <__udivmoddi4+0x27a>
 800056a:	ebb3 020e 	subs.w	r2, r3, lr
 800056e:	eb67 0701 	sbc.w	r7, r7, r1
 8000572:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000576:	40f2      	lsrs	r2, r6
 8000578:	ea4c 0202 	orr.w	r2, ip, r2
 800057c:	40f7      	lsrs	r7, r6
 800057e:	e9c5 2700 	strd	r2, r7, [r5]
 8000582:	2600      	movs	r6, #0
 8000584:	4631      	mov	r1, r6
 8000586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800058a:	462e      	mov	r6, r5
 800058c:	4628      	mov	r0, r5
 800058e:	e70b      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000590:	4606      	mov	r6, r0
 8000592:	e6e9      	b.n	8000368 <__udivmoddi4+0x60>
 8000594:	4618      	mov	r0, r3
 8000596:	e6fd      	b.n	8000394 <__udivmoddi4+0x8c>
 8000598:	4543      	cmp	r3, r8
 800059a:	d2e5      	bcs.n	8000568 <__udivmoddi4+0x260>
 800059c:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a0:	eb69 0104 	sbc.w	r1, r9, r4
 80005a4:	3801      	subs	r0, #1
 80005a6:	e7df      	b.n	8000568 <__udivmoddi4+0x260>
 80005a8:	4608      	mov	r0, r1
 80005aa:	e7d2      	b.n	8000552 <__udivmoddi4+0x24a>
 80005ac:	4660      	mov	r0, ip
 80005ae:	e78d      	b.n	80004cc <__udivmoddi4+0x1c4>
 80005b0:	4681      	mov	r9, r0
 80005b2:	e7b9      	b.n	8000528 <__udivmoddi4+0x220>
 80005b4:	4666      	mov	r6, ip
 80005b6:	e775      	b.n	80004a4 <__udivmoddi4+0x19c>
 80005b8:	4630      	mov	r0, r6
 80005ba:	e74a      	b.n	8000452 <__udivmoddi4+0x14a>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	4439      	add	r1, r7
 80005c2:	e713      	b.n	80003ec <__udivmoddi4+0xe4>
 80005c4:	3802      	subs	r0, #2
 80005c6:	443c      	add	r4, r7
 80005c8:	e724      	b.n	8000414 <__udivmoddi4+0x10c>
 80005ca:	bf00      	nop

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005d0:	b480      	push	{r7}
 80005d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005d4:	4b3f      	ldr	r3, [pc, #252]	; (80006d4 <SystemInit+0x104>)
 80005d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005da:	4a3e      	ldr	r2, [pc, #248]	; (80006d4 <SystemInit+0x104>)
 80005dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80005e4:	4b3b      	ldr	r3, [pc, #236]	; (80006d4 <SystemInit+0x104>)
 80005e6:	691b      	ldr	r3, [r3, #16]
 80005e8:	4a3a      	ldr	r2, [pc, #232]	; (80006d4 <SystemInit+0x104>)
 80005ea:	f043 0310 	orr.w	r3, r3, #16
 80005ee:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005f0:	4b39      	ldr	r3, [pc, #228]	; (80006d8 <SystemInit+0x108>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	f003 030f 	and.w	r3, r3, #15
 80005f8:	2b06      	cmp	r3, #6
 80005fa:	d807      	bhi.n	800060c <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80005fc:	4b36      	ldr	r3, [pc, #216]	; (80006d8 <SystemInit+0x108>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	f023 030f 	bic.w	r3, r3, #15
 8000604:	4a34      	ldr	r2, [pc, #208]	; (80006d8 <SystemInit+0x108>)
 8000606:	f043 0307 	orr.w	r3, r3, #7
 800060a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800060c:	4b33      	ldr	r3, [pc, #204]	; (80006dc <SystemInit+0x10c>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	4a32      	ldr	r2, [pc, #200]	; (80006dc <SystemInit+0x10c>)
 8000612:	f043 0301 	orr.w	r3, r3, #1
 8000616:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000618:	4b30      	ldr	r3, [pc, #192]	; (80006dc <SystemInit+0x10c>)
 800061a:	2200      	movs	r2, #0
 800061c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800061e:	4b2f      	ldr	r3, [pc, #188]	; (80006dc <SystemInit+0x10c>)
 8000620:	681a      	ldr	r2, [r3, #0]
 8000622:	492e      	ldr	r1, [pc, #184]	; (80006dc <SystemInit+0x10c>)
 8000624:	4b2e      	ldr	r3, [pc, #184]	; (80006e0 <SystemInit+0x110>)
 8000626:	4013      	ands	r3, r2
 8000628:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800062a:	4b2b      	ldr	r3, [pc, #172]	; (80006d8 <SystemInit+0x108>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	f003 0308 	and.w	r3, r3, #8
 8000632:	2b00      	cmp	r3, #0
 8000634:	d007      	beq.n	8000646 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000636:	4b28      	ldr	r3, [pc, #160]	; (80006d8 <SystemInit+0x108>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	f023 030f 	bic.w	r3, r3, #15
 800063e:	4a26      	ldr	r2, [pc, #152]	; (80006d8 <SystemInit+0x108>)
 8000640:	f043 0307 	orr.w	r3, r3, #7
 8000644:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000646:	4b25      	ldr	r3, [pc, #148]	; (80006dc <SystemInit+0x10c>)
 8000648:	2200      	movs	r2, #0
 800064a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800064c:	4b23      	ldr	r3, [pc, #140]	; (80006dc <SystemInit+0x10c>)
 800064e:	2200      	movs	r2, #0
 8000650:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000652:	4b22      	ldr	r3, [pc, #136]	; (80006dc <SystemInit+0x10c>)
 8000654:	2200      	movs	r2, #0
 8000656:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000658:	4b20      	ldr	r3, [pc, #128]	; (80006dc <SystemInit+0x10c>)
 800065a:	4a22      	ldr	r2, [pc, #136]	; (80006e4 <SystemInit+0x114>)
 800065c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800065e:	4b1f      	ldr	r3, [pc, #124]	; (80006dc <SystemInit+0x10c>)
 8000660:	4a21      	ldr	r2, [pc, #132]	; (80006e8 <SystemInit+0x118>)
 8000662:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000664:	4b1d      	ldr	r3, [pc, #116]	; (80006dc <SystemInit+0x10c>)
 8000666:	4a21      	ldr	r2, [pc, #132]	; (80006ec <SystemInit+0x11c>)
 8000668:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800066a:	4b1c      	ldr	r3, [pc, #112]	; (80006dc <SystemInit+0x10c>)
 800066c:	2200      	movs	r2, #0
 800066e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000670:	4b1a      	ldr	r3, [pc, #104]	; (80006dc <SystemInit+0x10c>)
 8000672:	4a1e      	ldr	r2, [pc, #120]	; (80006ec <SystemInit+0x11c>)
 8000674:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000676:	4b19      	ldr	r3, [pc, #100]	; (80006dc <SystemInit+0x10c>)
 8000678:	2200      	movs	r2, #0
 800067a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800067c:	4b17      	ldr	r3, [pc, #92]	; (80006dc <SystemInit+0x10c>)
 800067e:	4a1b      	ldr	r2, [pc, #108]	; (80006ec <SystemInit+0x11c>)
 8000680:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000682:	4b16      	ldr	r3, [pc, #88]	; (80006dc <SystemInit+0x10c>)
 8000684:	2200      	movs	r2, #0
 8000686:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000688:	4b14      	ldr	r3, [pc, #80]	; (80006dc <SystemInit+0x10c>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	4a13      	ldr	r2, [pc, #76]	; (80006dc <SystemInit+0x10c>)
 800068e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000692:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000694:	4b11      	ldr	r3, [pc, #68]	; (80006dc <SystemInit+0x10c>)
 8000696:	2200      	movs	r2, #0
 8000698:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800069a:	4b15      	ldr	r3, [pc, #84]	; (80006f0 <SystemInit+0x120>)
 800069c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800069e:	4a14      	ldr	r2, [pc, #80]	; (80006f0 <SystemInit+0x120>)
 80006a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006a4:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80006a6:	4b13      	ldr	r3, [pc, #76]	; (80006f4 <SystemInit+0x124>)
 80006a8:	681a      	ldr	r2, [r3, #0]
 80006aa:	4b13      	ldr	r3, [pc, #76]	; (80006f8 <SystemInit+0x128>)
 80006ac:	4013      	ands	r3, r2
 80006ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80006b2:	d202      	bcs.n	80006ba <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006b4:	4b11      	ldr	r3, [pc, #68]	; (80006fc <SystemInit+0x12c>)
 80006b6:	2201      	movs	r2, #1
 80006b8:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006ba:	4b11      	ldr	r3, [pc, #68]	; (8000700 <SystemInit+0x130>)
 80006bc:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80006c0:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 80006c2:	4b04      	ldr	r3, [pc, #16]	; (80006d4 <SystemInit+0x104>)
 80006c4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80006c8:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 80006ca:	bf00      	nop
 80006cc:	46bd      	mov	sp, r7
 80006ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d2:	4770      	bx	lr
 80006d4:	e000ed00 	.word	0xe000ed00
 80006d8:	52002000 	.word	0x52002000
 80006dc:	58024400 	.word	0x58024400
 80006e0:	eaf6ed7f 	.word	0xeaf6ed7f
 80006e4:	02020200 	.word	0x02020200
 80006e8:	01ff0000 	.word	0x01ff0000
 80006ec:	01010280 	.word	0x01010280
 80006f0:	580000c0 	.word	0x580000c0
 80006f4:	5c001000 	.word	0x5c001000
 80006f8:	ffff0000 	.word	0xffff0000
 80006fc:	51008108 	.word	0x51008108
 8000700:	52004000 	.word	0x52004000

08000704 <pdm_to_pcm_init>:
 */


#include "pdm_to_pcm.h"

void pdm_to_pcm_init(PDM_Filter_Handler_t* PDM_FilterHandler, PDM_Filter_Config_t* PDM_FilterConfig, uint32_t channelNumber){
 8000704:	b580      	push	{r7, lr}
 8000706:	b086      	sub	sp, #24
 8000708:	af00      	add	r7, sp, #0
 800070a:	60f8      	str	r0, [r7, #12]
 800070c:	60b9      	str	r1, [r7, #8]
 800070e:	607a      	str	r2, [r7, #4]

	  for(uint32_t index = 0; index < channelNumber; index++)
 8000710:	2300      	movs	r3, #0
 8000712:	617b      	str	r3, [r7, #20]
 8000714:	e064      	b.n	80007e0 <pdm_to_pcm_init+0xdc>
	  {
	    /* Init PDM filters */
	    PDM_FilterHandler[index].bit_order  = PDM_FILTER_BIT_ORDER_MSB;
 8000716:	697b      	ldr	r3, [r7, #20]
 8000718:	224c      	movs	r2, #76	; 0x4c
 800071a:	fb02 f303 	mul.w	r3, r2, r3
 800071e:	68fa      	ldr	r2, [r7, #12]
 8000720:	4413      	add	r3, r2
 8000722:	2201      	movs	r2, #1
 8000724:	801a      	strh	r2, [r3, #0]
	    PDM_FilterHandler[index].endianness = PDM_FILTER_ENDIANNESS_LE;
 8000726:	697b      	ldr	r3, [r7, #20]
 8000728:	224c      	movs	r2, #76	; 0x4c
 800072a:	fb02 f303 	mul.w	r3, r2, r3
 800072e:	68fa      	ldr	r2, [r7, #12]
 8000730:	4413      	add	r3, r2
 8000732:	2200      	movs	r2, #0
 8000734:	805a      	strh	r2, [r3, #2]
	    PDM_FilterHandler[index].high_pass_tap = 2122358088;
 8000736:	697b      	ldr	r3, [r7, #20]
 8000738:	224c      	movs	r2, #76	; 0x4c
 800073a:	fb02 f303 	mul.w	r3, r2, r3
 800073e:	68fa      	ldr	r2, [r7, #12]
 8000740:	4413      	add	r3, r2
 8000742:	4a2c      	ldr	r2, [pc, #176]	; (80007f4 <pdm_to_pcm_init+0xf0>)
 8000744:	605a      	str	r2, [r3, #4]
	    PDM_FilterHandler[index].out_ptr_channels = channelNumber;
 8000746:	697b      	ldr	r3, [r7, #20]
 8000748:	224c      	movs	r2, #76	; 0x4c
 800074a:	fb02 f303 	mul.w	r3, r2, r3
 800074e:	68fa      	ldr	r2, [r7, #12]
 8000750:	4413      	add	r3, r2
 8000752:	687a      	ldr	r2, [r7, #4]
 8000754:	b292      	uxth	r2, r2
 8000756:	815a      	strh	r2, [r3, #10]
	    PDM_FilterHandler[index].in_ptr_channels  = channelNumber;
 8000758:	697b      	ldr	r3, [r7, #20]
 800075a:	224c      	movs	r2, #76	; 0x4c
 800075c:	fb02 f303 	mul.w	r3, r2, r3
 8000760:	68fa      	ldr	r2, [r7, #12]
 8000762:	4413      	add	r3, r2
 8000764:	687a      	ldr	r2, [r7, #4]
 8000766:	b292      	uxth	r2, r2
 8000768:	811a      	strh	r2, [r3, #8]
	    PDM_Filter_Init((PDM_Filter_Handler_t *)(&PDM_FilterHandler[index]));
 800076a:	697b      	ldr	r3, [r7, #20]
 800076c:	224c      	movs	r2, #76	; 0x4c
 800076e:	fb02 f303 	mul.w	r3, r2, r3
 8000772:	68fa      	ldr	r2, [r7, #12]
 8000774:	4413      	add	r3, r2
 8000776:	4618      	mov	r0, r3
 8000778:	f00b fdd2 	bl	800c320 <PDM_Filter_Init>

	    /* Configure PDM filters */
	    PDM_FilterConfig[index].output_samples_number = 16;
 800077c:	697a      	ldr	r2, [r7, #20]
 800077e:	4613      	mov	r3, r2
 8000780:	005b      	lsls	r3, r3, #1
 8000782:	4413      	add	r3, r2
 8000784:	005b      	lsls	r3, r3, #1
 8000786:	461a      	mov	r2, r3
 8000788:	68bb      	ldr	r3, [r7, #8]
 800078a:	4413      	add	r3, r2
 800078c:	2210      	movs	r2, #16
 800078e:	805a      	strh	r2, [r3, #2]
	    PDM_FilterConfig[index].mic_gain = 14 ;
 8000790:	697a      	ldr	r2, [r7, #20]
 8000792:	4613      	mov	r3, r2
 8000794:	005b      	lsls	r3, r3, #1
 8000796:	4413      	add	r3, r2
 8000798:	005b      	lsls	r3, r3, #1
 800079a:	461a      	mov	r2, r3
 800079c:	68bb      	ldr	r3, [r7, #8]
 800079e:	4413      	add	r3, r2
 80007a0:	220e      	movs	r2, #14
 80007a2:	809a      	strh	r2, [r3, #4]
	    PDM_FilterConfig[index].decimation_factor = PDM_FILTER_DEC_FACTOR_64;
 80007a4:	697a      	ldr	r2, [r7, #20]
 80007a6:	4613      	mov	r3, r2
 80007a8:	005b      	lsls	r3, r3, #1
 80007aa:	4413      	add	r3, r2
 80007ac:	005b      	lsls	r3, r3, #1
 80007ae:	461a      	mov	r2, r3
 80007b0:	68bb      	ldr	r3, [r7, #8]
 80007b2:	4413      	add	r3, r2
 80007b4:	2202      	movs	r2, #2
 80007b6:	801a      	strh	r2, [r3, #0]
	    PDM_Filter_setConfig((PDM_Filter_Handler_t*)&PDM_FilterHandler[index], (PDM_Filter_Config_t*)&PDM_FilterConfig[index]);
 80007b8:	697b      	ldr	r3, [r7, #20]
 80007ba:	224c      	movs	r2, #76	; 0x4c
 80007bc:	fb02 f303 	mul.w	r3, r2, r3
 80007c0:	68fa      	ldr	r2, [r7, #12]
 80007c2:	18d0      	adds	r0, r2, r3
 80007c4:	697a      	ldr	r2, [r7, #20]
 80007c6:	4613      	mov	r3, r2
 80007c8:	005b      	lsls	r3, r3, #1
 80007ca:	4413      	add	r3, r2
 80007cc:	005b      	lsls	r3, r3, #1
 80007ce:	461a      	mov	r2, r3
 80007d0:	68bb      	ldr	r3, [r7, #8]
 80007d2:	4413      	add	r3, r2
 80007d4:	4619      	mov	r1, r3
 80007d6:	f00b fe73 	bl	800c4c0 <PDM_Filter_setConfig>
	  for(uint32_t index = 0; index < channelNumber; index++)
 80007da:	697b      	ldr	r3, [r7, #20]
 80007dc:	3301      	adds	r3, #1
 80007de:	617b      	str	r3, [r7, #20]
 80007e0:	697a      	ldr	r2, [r7, #20]
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	429a      	cmp	r2, r3
 80007e6:	d396      	bcc.n	8000716 <pdm_to_pcm_init+0x12>
	  }
}
 80007e8:	bf00      	nop
 80007ea:	bf00      	nop
 80007ec:	3718      	adds	r7, #24
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	7e809d48 	.word	0x7e809d48

080007f8 <pdm_to_pcm>:

void pdm_to_pcm(PDM_Filter_Handler_t* PDM_FilterHandler, uint8_t *pdm, uint16_t *pcm,  uint32_t channelNumber){
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b08e      	sub	sp, #56	; 0x38
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	60f8      	str	r0, [r7, #12]
 8000800:	60b9      	str	r1, [r7, #8]
 8000802:	607a      	str	r2, [r7, #4]
 8000804:	603b      	str	r3, [r7, #0]
 8000806:	68bb      	ldr	r3, [r7, #8]
 8000808:	633b      	str	r3, [r7, #48]	; 0x30
 800080a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800080e:	62fb      	str	r3, [r7, #44]	; 0x2c
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_InvalidateDCache_by_Addr (void *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 8000810:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000812:	2b00      	cmp	r3, #0
 8000814:	dd1d      	ble.n	8000852 <pdm_to_pcm+0x5a>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8000816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000818:	f003 021f 	and.w	r2, r3, #31
 800081c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800081e:	4413      	add	r3, r2
 8000820:	62bb      	str	r3, [r7, #40]	; 0x28
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8000822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000824:	627b      	str	r3, [r7, #36]	; 0x24
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000826:	f3bf 8f4f 	dsb	sy
}
 800082a:	bf00      	nop
    
      __DSB();

      do {
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 800082c:	4a2c      	ldr	r2, [pc, #176]	; (80008e0 <pdm_to_pcm+0xe8>)
 800082e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000830:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8000834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000836:	3320      	adds	r3, #32
 8000838:	627b      	str	r3, [r7, #36]	; 0x24
        op_size -= __SCB_DCACHE_LINE_SIZE;
 800083a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800083c:	3b20      	subs	r3, #32
 800083e:	62bb      	str	r3, [r7, #40]	; 0x28
      } while ( op_size > 0 );
 8000840:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000842:	2b00      	cmp	r3, #0
 8000844:	dcf2      	bgt.n	800082c <pdm_to_pcm+0x34>
  __ASM volatile ("dsb 0xF":::"memory");
 8000846:	f3bf 8f4f 	dsb	sy
}
 800084a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800084c:	f3bf 8f6f 	isb	sy
}
 8000850:	bf00      	nop

      __DSB();
      __ISB();
    }
  #endif
}
 8000852:	bf00      	nop

	SCB_InvalidateDCache_by_Addr((uint32_t*)&pdm[0], (uint32_t)((float)BUFFER_SIZE*((float)CHANNEL_NUMBER/2.0)));

	for(uint32_t i = 0; i < channelNumber; i++){
 8000854:	2300      	movs	r3, #0
 8000856:	637b      	str	r3, [r7, #52]	; 0x34
 8000858:	e012      	b.n	8000880 <pdm_to_pcm+0x88>
		PDM_Filter(&pdm[i], &pcm[i], &PDM_FilterHandler[i]);
 800085a:	68ba      	ldr	r2, [r7, #8]
 800085c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800085e:	18d0      	adds	r0, r2, r3
 8000860:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000862:	005b      	lsls	r3, r3, #1
 8000864:	687a      	ldr	r2, [r7, #4]
 8000866:	18d1      	adds	r1, r2, r3
 8000868:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800086a:	224c      	movs	r2, #76	; 0x4c
 800086c:	fb02 f303 	mul.w	r3, r2, r3
 8000870:	68fa      	ldr	r2, [r7, #12]
 8000872:	4413      	add	r3, r2
 8000874:	461a      	mov	r2, r3
 8000876:	f00b ff1d 	bl	800c6b4 <PDM_Filter>
	for(uint32_t i = 0; i < channelNumber; i++){
 800087a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800087c:	3301      	adds	r3, #1
 800087e:	637b      	str	r3, [r7, #52]	; 0x34
 8000880:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000882:	683b      	ldr	r3, [r7, #0]
 8000884:	429a      	cmp	r2, r3
 8000886:	d3e8      	bcc.n	800085a <pdm_to_pcm+0x62>
	}

	SCB_CleanDCache_by_Addr((uint32_t*)&pcm[0], PCM_CHUNK_SIZE*channelNumber);
 8000888:	683b      	ldr	r3, [r7, #0]
 800088a:	015b      	lsls	r3, r3, #5
 800088c:	461a      	mov	r2, r3
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	623b      	str	r3, [r7, #32]
 8000892:	61fa      	str	r2, [r7, #28]
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_CleanDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 8000894:	69fb      	ldr	r3, [r7, #28]
 8000896:	2b00      	cmp	r3, #0
 8000898:	dd1d      	ble.n	80008d6 <pdm_to_pcm+0xde>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 800089a:	6a3b      	ldr	r3, [r7, #32]
 800089c:	f003 021f 	and.w	r2, r3, #31
 80008a0:	69fb      	ldr	r3, [r7, #28]
 80008a2:	4413      	add	r3, r2
 80008a4:	61bb      	str	r3, [r7, #24]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 80008a6:	6a3b      	ldr	r3, [r7, #32]
 80008a8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80008aa:	f3bf 8f4f 	dsb	sy
}
 80008ae:	bf00      	nop
    
      __DSB();

      do {
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 80008b0:	4a0b      	ldr	r2, [pc, #44]	; (80008e0 <pdm_to_pcm+0xe8>)
 80008b2:	697b      	ldr	r3, [r7, #20]
 80008b4:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 80008b8:	697b      	ldr	r3, [r7, #20]
 80008ba:	3320      	adds	r3, #32
 80008bc:	617b      	str	r3, [r7, #20]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 80008be:	69bb      	ldr	r3, [r7, #24]
 80008c0:	3b20      	subs	r3, #32
 80008c2:	61bb      	str	r3, [r7, #24]
      } while ( op_size > 0 );
 80008c4:	69bb      	ldr	r3, [r7, #24]
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	dcf2      	bgt.n	80008b0 <pdm_to_pcm+0xb8>
  __ASM volatile ("dsb 0xF":::"memory");
 80008ca:	f3bf 8f4f 	dsb	sy
}
 80008ce:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80008d0:	f3bf 8f6f 	isb	sy
}
 80008d4:	bf00      	nop

      __DSB();
      __ISB();
    }
  #endif
}
 80008d6:	bf00      	nop
}
 80008d8:	bf00      	nop
 80008da:	3738      	adds	r7, #56	; 0x38
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	e000ed00 	.word	0xe000ed00

080008e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b086      	sub	sp, #24
 80008e8:	af00      	add	r7, sp, #0
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80008ea:	4b78      	ldr	r3, [pc, #480]	; (8000acc <main+0x1e8>)
 80008ec:	695b      	ldr	r3, [r3, #20]
 80008ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d11b      	bne.n	800092e <main+0x4a>
  __ASM volatile ("dsb 0xF":::"memory");
 80008f6:	f3bf 8f4f 	dsb	sy
}
 80008fa:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80008fc:	f3bf 8f6f 	isb	sy
}
 8000900:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000902:	4b72      	ldr	r3, [pc, #456]	; (8000acc <main+0x1e8>)
 8000904:	2200      	movs	r2, #0
 8000906:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800090a:	f3bf 8f4f 	dsb	sy
}
 800090e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000910:	f3bf 8f6f 	isb	sy
}
 8000914:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000916:	4b6d      	ldr	r3, [pc, #436]	; (8000acc <main+0x1e8>)
 8000918:	695b      	ldr	r3, [r3, #20]
 800091a:	4a6c      	ldr	r2, [pc, #432]	; (8000acc <main+0x1e8>)
 800091c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000920:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000922:	f3bf 8f4f 	dsb	sy
}
 8000926:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000928:	f3bf 8f6f 	isb	sy
}
 800092c:	e000      	b.n	8000930 <main+0x4c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800092e:	bf00      	nop
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000930:	4b66      	ldr	r3, [pc, #408]	; (8000acc <main+0x1e8>)
 8000932:	695b      	ldr	r3, [r3, #20]
 8000934:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000938:	2b00      	cmp	r3, #0
 800093a:	d138      	bne.n	80009ae <main+0xca>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 800093c:	4b63      	ldr	r3, [pc, #396]	; (8000acc <main+0x1e8>)
 800093e:	2200      	movs	r2, #0
 8000940:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000944:	f3bf 8f4f 	dsb	sy
}
 8000948:	bf00      	nop
    ccsidr = SCB->CCSIDR;
 800094a:	4b60      	ldr	r3, [pc, #384]	; (8000acc <main+0x1e8>)
 800094c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000950:	613b      	str	r3, [r7, #16]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000952:	693b      	ldr	r3, [r7, #16]
 8000954:	0b5b      	lsrs	r3, r3, #13
 8000956:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800095a:	60fb      	str	r3, [r7, #12]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800095c:	693b      	ldr	r3, [r7, #16]
 800095e:	08db      	lsrs	r3, r3, #3
 8000960:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000964:	60bb      	str	r3, [r7, #8]
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000966:	68fb      	ldr	r3, [r7, #12]
 8000968:	015a      	lsls	r2, r3, #5
 800096a:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800096e:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000970:	68ba      	ldr	r2, [r7, #8]
 8000972:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000974:	4955      	ldr	r1, [pc, #340]	; (8000acc <main+0x1e8>)
 8000976:	4313      	orrs	r3, r2
 8000978:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
      } while (ways-- != 0U);
 800097c:	68bb      	ldr	r3, [r7, #8]
 800097e:	1e5a      	subs	r2, r3, #1
 8000980:	60ba      	str	r2, [r7, #8]
 8000982:	2b00      	cmp	r3, #0
 8000984:	d1ef      	bne.n	8000966 <main+0x82>
    } while(sets-- != 0U);
 8000986:	68fb      	ldr	r3, [r7, #12]
 8000988:	1e5a      	subs	r2, r3, #1
 800098a:	60fa      	str	r2, [r7, #12]
 800098c:	2b00      	cmp	r3, #0
 800098e:	d1e5      	bne.n	800095c <main+0x78>
  __ASM volatile ("dsb 0xF":::"memory");
 8000990:	f3bf 8f4f 	dsb	sy
}
 8000994:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000996:	4b4d      	ldr	r3, [pc, #308]	; (8000acc <main+0x1e8>)
 8000998:	695b      	ldr	r3, [r3, #20]
 800099a:	4a4c      	ldr	r2, [pc, #304]	; (8000acc <main+0x1e8>)
 800099c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80009a0:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80009a2:	f3bf 8f4f 	dsb	sy
}
 80009a6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80009a8:	f3bf 8f6f 	isb	sy
}
 80009ac:	e000      	b.n	80009b0 <main+0xcc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80009ae:	bf00      	nop

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009b0:	f000 fd66 	bl	8001480 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009b4:	f000 f89e 	bl	8000af4 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 80009b8:	4b45      	ldr	r3, [pc, #276]	; (8000ad0 <main+0x1ec>)
 80009ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009be:	4a44      	ldr	r2, [pc, #272]	; (8000ad0 <main+0x1ec>)
 80009c0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80009c4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009c8:	4b41      	ldr	r3, [pc, #260]	; (8000ad0 <main+0x1ec>)
 80009ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80009d2:	607b      	str	r3, [r7, #4]
 80009d4:	687b      	ldr	r3, [r7, #4]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 80009d6:	2000      	movs	r0, #0
 80009d8:	f003 ffe0 	bl	800499c <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 80009dc:	2100      	movs	r1, #0
 80009de:	2000      	movs	r0, #0
 80009e0:	f003 fff6 	bl	80049d0 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 80009e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80009e8:	617b      	str	r3, [r7, #20]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 80009ea:	bf00      	nop
 80009ec:	4b38      	ldr	r3, [pc, #224]	; (8000ad0 <main+0x1ec>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d104      	bne.n	8000a02 <main+0x11e>
 80009f8:	697b      	ldr	r3, [r7, #20]
 80009fa:	1e5a      	subs	r2, r3, #1
 80009fc:	617a      	str	r2, [r7, #20]
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	dcf4      	bgt.n	80009ec <main+0x108>
if ( timeout < 0 )
 8000a02:	697b      	ldr	r3, [r7, #20]
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	da01      	bge.n	8000a0c <main+0x128>
{
Error_Handler();
 8000a08:	f000 fad4 	bl	8000fb4 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a0c:	f000 fa54 	bl	8000eb8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000a10:	f000 fa2a 	bl	8000e68 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8000a14:	f000 f9d8 	bl	8000dc8 <MX_USART3_UART_Init>
  MX_CRC_Init();
 8000a18:	f000 f8f0 	bl	8000bfc <MX_CRC_Init>
  MX_SAI1_Init();
 8000a1c:	f000 f918 	bl	8000c50 <MX_SAI1_Init>
  MX_TIM1_Init();
 8000a20:	f000 f978 	bl	8000d14 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  pdm_to_pcm_init((PDM_Filter_Handler_t*)&PDM_FilterHandler[0], (PDM_Filter_Config_t*)&PDM_FilterConfig[0], CHANNEL_NUMBER);
 8000a24:	2204      	movs	r2, #4
 8000a26:	492b      	ldr	r1, [pc, #172]	; (8000ad4 <main+0x1f0>)
 8000a28:	482b      	ldr	r0, [pc, #172]	; (8000ad8 <main+0x1f4>)
 8000a2a:	f7ff fe6b 	bl	8000704 <pdm_to_pcm_init>

  timFlag = NONE;
 8000a2e:	4b2b      	ldr	r3, [pc, #172]	; (8000adc <main+0x1f8>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	701a      	strb	r2, [r3, #0]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  arm_fir_f32(4,4,4,4);
 8000a34:	2304      	movs	r3, #4
 8000a36:	2204      	movs	r2, #4
 8000a38:	2104      	movs	r1, #4
 8000a3a:	2004      	movs	r0, #4
 8000a3c:	f009 ff1e 	bl	800a87c <arm_fir_f32>

  HAL_SAI_Receive_DMA(&hsai_BlockA1, (uint8_t*)&buffer->pdmBuffer[0], BUFFER_SIZE);
 8000a40:	4b27      	ldr	r3, [pc, #156]	; (8000ae0 <main+0x1fc>)
 8000a42:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a46:	4619      	mov	r1, r3
 8000a48:	4826      	ldr	r0, [pc, #152]	; (8000ae4 <main+0x200>)
 8000a4a:	f007 fbf1 	bl	8008230 <HAL_SAI_Receive_DMA>

  HAL_TIM_Base_Start_IT(&htim1);
 8000a4e:	4826      	ldr	r0, [pc, #152]	; (8000ae8 <main+0x204>)
 8000a50:	f007 fdc2 	bl	80085d8 <HAL_TIM_Base_Start_IT>

  while (timFlag != DONE){
 8000a54:	e034      	b.n	8000ac0 <main+0x1dc>

	  //Wait for Half of the buffer to be filled
	  while(dmaFlag != HALF){}
 8000a56:	bf00      	nop
 8000a58:	4b24      	ldr	r3, [pc, #144]	; (8000aec <main+0x208>)
 8000a5a:	781b      	ldrb	r3, [r3, #0]
 8000a5c:	b2db      	uxtb	r3, r3
 8000a5e:	2b04      	cmp	r3, #4
 8000a60:	d1fa      	bne.n	8000a58 <main+0x174>
	  //Reset Flag
	  dmaFlag = NONE;
 8000a62:	4b22      	ldr	r3, [pc, #136]	; (8000aec <main+0x208>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	701a      	strb	r2, [r3, #0]
	  //Filter PDM to PCM
	  pdm_to_pcm(&PDM_FilterHandler[0],	(uint8_t*)&buffer->pdmBuffer[0], (uint16_t*)&buffer->pcmBuffer[0], CHANNEL_NUMBER);
 8000a68:	4b1d      	ldr	r3, [pc, #116]	; (8000ae0 <main+0x1fc>)
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	4b1c      	ldr	r3, [pc, #112]	; (8000ae0 <main+0x1fc>)
 8000a6e:	f503 6280 	add.w	r2, r3, #1024	; 0x400
 8000a72:	2304      	movs	r3, #4
 8000a74:	4818      	ldr	r0, [pc, #96]	; (8000ad8 <main+0x1f4>)
 8000a76:	f7ff febf 	bl	80007f8 <pdm_to_pcm>
	  //Transmit PCM
	  HAL_UART_Transmit_DMA(&huart3, (uint8_t*)&buffer->pcmBuffer[0], PCM_CHUNK_SIZE*CHANNEL_NUMBER);
 8000a7a:	4b19      	ldr	r3, [pc, #100]	; (8000ae0 <main+0x1fc>)
 8000a7c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000a80:	2280      	movs	r2, #128	; 0x80
 8000a82:	4619      	mov	r1, r3
 8000a84:	481a      	ldr	r0, [pc, #104]	; (8000af0 <main+0x20c>)
 8000a86:	f008 faaf 	bl	8008fe8 <HAL_UART_Transmit_DMA>

	  //Wait for Half of the buffer to be filled
	  while(dmaFlag != FULL){}
 8000a8a:	bf00      	nop
 8000a8c:	4b17      	ldr	r3, [pc, #92]	; (8000aec <main+0x208>)
 8000a8e:	781b      	ldrb	r3, [r3, #0]
 8000a90:	b2db      	uxtb	r3, r3
 8000a92:	2b05      	cmp	r3, #5
 8000a94:	d1fa      	bne.n	8000a8c <main+0x1a8>
	  //Reset Flag
	  dmaFlag = NONE;
 8000a96:	4b15      	ldr	r3, [pc, #84]	; (8000aec <main+0x208>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	701a      	strb	r2, [r3, #0]
	  //Filter PDM to PCM
	  pdm_to_pcm(&PDM_FilterHandler[0],	(uint8_t*)&buffer->pdmBuffer[BUFFER_SIZE/2], (uint16_t*)&buffer->pcmBuffer[(uint32_t)((float)PCM_CHUNK_SIZE*((float)CHANNEL_NUMBER/2.0))], CHANNEL_NUMBER);
 8000a9c:	4b10      	ldr	r3, [pc, #64]	; (8000ae0 <main+0x1fc>)
 8000a9e:	f503 7100 	add.w	r1, r3, #512	; 0x200
 8000aa2:	4b0f      	ldr	r3, [pc, #60]	; (8000ae0 <main+0x1fc>)
 8000aa4:	f503 6290 	add.w	r2, r3, #1152	; 0x480
 8000aa8:	2304      	movs	r3, #4
 8000aaa:	480b      	ldr	r0, [pc, #44]	; (8000ad8 <main+0x1f4>)
 8000aac:	f7ff fea4 	bl	80007f8 <pdm_to_pcm>
	  //Transmit PCM
	  HAL_UART_Transmit_DMA(&huart3, (uint8_t*)&buffer->pcmBuffer[(uint32_t)((float)PCM_CHUNK_SIZE*((float)CHANNEL_NUMBER/2.0))], PCM_CHUNK_SIZE*CHANNEL_NUMBER);
 8000ab0:	4b0b      	ldr	r3, [pc, #44]	; (8000ae0 <main+0x1fc>)
 8000ab2:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 8000ab6:	2280      	movs	r2, #128	; 0x80
 8000ab8:	4619      	mov	r1, r3
 8000aba:	480d      	ldr	r0, [pc, #52]	; (8000af0 <main+0x20c>)
 8000abc:	f008 fa94 	bl	8008fe8 <HAL_UART_Transmit_DMA>
  while (timFlag != DONE){
 8000ac0:	4b06      	ldr	r3, [pc, #24]	; (8000adc <main+0x1f8>)
 8000ac2:	781b      	ldrb	r3, [r3, #0]
 8000ac4:	b2db      	uxtb	r3, r3
 8000ac6:	2b03      	cmp	r3, #3
 8000ac8:	d1c5      	bne.n	8000a56 <main+0x172>

    /* USER CODE BEGIN 3 */
  }


  while(1){}
 8000aca:	e7fe      	b.n	8000aca <main+0x1e6>
 8000acc:	e000ed00 	.word	0xe000ed00
 8000ad0:	58024400 	.word	0x58024400
 8000ad4:	24000498 	.word	0x24000498
 8000ad8:	240004b0 	.word	0x240004b0
 8000adc:	24000492 	.word	0x24000492
 8000ae0:	30040000 	.word	0x30040000
 8000ae4:	240007d0 	.word	0x240007d0
 8000ae8:	24000784 	.word	0x24000784
 8000aec:	24000491 	.word	0x24000491
 8000af0:	240005e0 	.word	0x240005e0

08000af4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b09c      	sub	sp, #112	; 0x70
 8000af8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000afa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000afe:	224c      	movs	r2, #76	; 0x4c
 8000b00:	2100      	movs	r1, #0
 8000b02:	4618      	mov	r0, r3
 8000b04:	f00b fe1a 	bl	800c73c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b08:	1d3b      	adds	r3, r7, #4
 8000b0a:	2220      	movs	r2, #32
 8000b0c:	2100      	movs	r1, #0
 8000b0e:	4618      	mov	r0, r3
 8000b10:	f00b fe14 	bl	800c73c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000b14:	2004      	movs	r0, #4
 8000b16:	f003 ff6f 	bl	80049f8 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	603b      	str	r3, [r7, #0]
 8000b1e:	4b34      	ldr	r3, [pc, #208]	; (8000bf0 <SystemClock_Config+0xfc>)
 8000b20:	699b      	ldr	r3, [r3, #24]
 8000b22:	4a33      	ldr	r2, [pc, #204]	; (8000bf0 <SystemClock_Config+0xfc>)
 8000b24:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000b28:	6193      	str	r3, [r2, #24]
 8000b2a:	4b31      	ldr	r3, [pc, #196]	; (8000bf0 <SystemClock_Config+0xfc>)
 8000b2c:	699b      	ldr	r3, [r3, #24]
 8000b2e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b32:	603b      	str	r3, [r7, #0]
 8000b34:	4b2f      	ldr	r3, [pc, #188]	; (8000bf4 <SystemClock_Config+0x100>)
 8000b36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b38:	4a2e      	ldr	r2, [pc, #184]	; (8000bf4 <SystemClock_Config+0x100>)
 8000b3a:	f043 0301 	orr.w	r3, r3, #1
 8000b3e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000b40:	4b2c      	ldr	r3, [pc, #176]	; (8000bf4 <SystemClock_Config+0x100>)
 8000b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b44:	f003 0301 	and.w	r3, r3, #1
 8000b48:	603b      	str	r3, [r7, #0]
 8000b4a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000b4c:	bf00      	nop
 8000b4e:	4b28      	ldr	r3, [pc, #160]	; (8000bf0 <SystemClock_Config+0xfc>)
 8000b50:	699b      	ldr	r3, [r3, #24]
 8000b52:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000b56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000b5a:	d1f8      	bne.n	8000b4e <SystemClock_Config+0x5a>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000b5c:	4b26      	ldr	r3, [pc, #152]	; (8000bf8 <SystemClock_Config+0x104>)
 8000b5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b60:	f023 0303 	bic.w	r3, r3, #3
 8000b64:	4a24      	ldr	r2, [pc, #144]	; (8000bf8 <SystemClock_Config+0x104>)
 8000b66:	f043 0302 	orr.w	r3, r3, #2
 8000b6a:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b6c:	2301      	movs	r3, #1
 8000b6e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000b70:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000b74:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b76:	2302      	movs	r3, #2
 8000b78:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b7a:	2302      	movs	r3, #2
 8000b7c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000b7e:	2301      	movs	r3, #1
 8000b80:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 120;
 8000b82:	2378      	movs	r3, #120	; 0x78
 8000b84:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000b86:	2302      	movs	r3, #2
 8000b88:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000b8a:	2304      	movs	r3, #4
 8000b8c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000b8e:	2302      	movs	r3, #2
 8000b90:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000b92:	230c      	movs	r3, #12
 8000b94:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000b96:	2300      	movs	r3, #0
 8000b98:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f003 ff82 	bl	8004aac <HAL_RCC_OscConfig>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d001      	beq.n	8000bb2 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8000bae:	f000 fa01 	bl	8000fb4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bb2:	233f      	movs	r3, #63	; 0x3f
 8000bb4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bb6:	2303      	movs	r3, #3
 8000bb8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000bbe:	2308      	movs	r3, #8
 8000bc0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000bc2:	2340      	movs	r3, #64	; 0x40
 8000bc4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV4;
 8000bc6:	2350      	movs	r3, #80	; 0x50
 8000bc8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV4;
 8000bca:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8000bce:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV4;
 8000bd0:	2350      	movs	r3, #80	; 0x50
 8000bd2:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000bd4:	1d3b      	adds	r3, r7, #4
 8000bd6:	2104      	movs	r1, #4
 8000bd8:	4618      	mov	r0, r3
 8000bda:	f004 fb77 	bl	80052cc <HAL_RCC_ClockConfig>
 8000bde:	4603      	mov	r3, r0
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d001      	beq.n	8000be8 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8000be4:	f000 f9e6 	bl	8000fb4 <Error_Handler>
  }
}
 8000be8:	bf00      	nop
 8000bea:	3770      	adds	r7, #112	; 0x70
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	58024800 	.word	0x58024800
 8000bf4:	58000400 	.word	0x58000400
 8000bf8:	58024400 	.word	0x58024400

08000bfc <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000c00:	4b11      	ldr	r3, [pc, #68]	; (8000c48 <MX_CRC_Init+0x4c>)
 8000c02:	4a12      	ldr	r2, [pc, #72]	; (8000c4c <MX_CRC_Init+0x50>)
 8000c04:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000c06:	4b10      	ldr	r3, [pc, #64]	; (8000c48 <MX_CRC_Init+0x4c>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000c0c:	4b0e      	ldr	r3, [pc, #56]	; (8000c48 <MX_CRC_Init+0x4c>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000c12:	4b0d      	ldr	r3, [pc, #52]	; (8000c48 <MX_CRC_Init+0x4c>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000c18:	4b0b      	ldr	r3, [pc, #44]	; (8000c48 <MX_CRC_Init+0x4c>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000c1e:	4b0a      	ldr	r3, [pc, #40]	; (8000c48 <MX_CRC_Init+0x4c>)
 8000c20:	2201      	movs	r2, #1
 8000c22:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000c24:	4808      	ldr	r0, [pc, #32]	; (8000c48 <MX_CRC_Init+0x4c>)
 8000c26:	f000 fdd9 	bl	80017dc <HAL_CRC_Init>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d001      	beq.n	8000c34 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000c30:	f000 f9c0 	bl	8000fb4 <Error_Handler>
  }
  __HAL_CRC_DR_RESET(&hcrc);
 8000c34:	4b04      	ldr	r3, [pc, #16]	; (8000c48 <MX_CRC_Init+0x4c>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	689a      	ldr	r2, [r3, #8]
 8000c3a:	4b03      	ldr	r3, [pc, #12]	; (8000c48 <MX_CRC_Init+0x4c>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	f042 0201 	orr.w	r2, r2, #1
 8000c42:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000c44:	bf00      	nop
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	24000670 	.word	0x24000670
 8000c4c:	58024c00 	.word	0x58024c00

08000c50 <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockA1.Instance = SAI1_Block_A;
 8000c54:	4b2d      	ldr	r3, [pc, #180]	; (8000d0c <MX_SAI1_Init+0xbc>)
 8000c56:	4a2e      	ldr	r2, [pc, #184]	; (8000d10 <MX_SAI1_Init+0xc0>)
 8000c58:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
 8000c5a:	4b2c      	ldr	r3, [pc, #176]	; (8000d0c <MX_SAI1_Init+0xbc>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_RX;
 8000c60:	4b2a      	ldr	r3, [pc, #168]	; (8000d0c <MX_SAI1_Init+0xbc>)
 8000c62:	2201      	movs	r2, #1
 8000c64:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.DataSize = SAI_DATASIZE_32;
 8000c66:	4b29      	ldr	r3, [pc, #164]	; (8000d0c <MX_SAI1_Init+0xbc>)
 8000c68:	22e0      	movs	r2, #224	; 0xe0
 8000c6a:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000c6c:	4b27      	ldr	r3, [pc, #156]	; (8000d0c <MX_SAI1_Init+0xbc>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000c72:	4b26      	ldr	r3, [pc, #152]	; (8000d0c <MX_SAI1_Init+0xbc>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8000c78:	4b24      	ldr	r3, [pc, #144]	; (8000d0c <MX_SAI1_Init+0xbc>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000c7e:	4b23      	ldr	r3, [pc, #140]	; (8000d0c <MX_SAI1_Init+0xbc>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_DISABLE;
 8000c84:	4b21      	ldr	r3, [pc, #132]	; (8000d0c <MX_SAI1_Init+0xbc>)
 8000c86:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000c8a:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_FULL;
 8000c8c:	4b1f      	ldr	r3, [pc, #124]	; (8000d0c <MX_SAI1_Init+0xbc>)
 8000c8e:	2204      	movs	r2, #4
 8000c90:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_MCKDIV;
 8000c92:	4b1e      	ldr	r3, [pc, #120]	; (8000d0c <MX_SAI1_Init+0xbc>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	621a      	str	r2, [r3, #32]
  hsai_BlockA1.Init.Mckdiv = 0;
 8000c98:	4b1c      	ldr	r3, [pc, #112]	; (8000d0c <MX_SAI1_Init+0xbc>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8000c9e:	4b1b      	ldr	r3, [pc, #108]	; (8000d0c <MX_SAI1_Init+0xbc>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8000ca4:	4b19      	ldr	r3, [pc, #100]	; (8000d0c <MX_SAI1_Init+0xbc>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA1.Init.PdmInit.Activation = ENABLE;
 8000caa:	4b18      	ldr	r3, [pc, #96]	; (8000d0c <MX_SAI1_Init+0xbc>)
 8000cac:	2201      	movs	r2, #1
 8000cae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hsai_BlockA1.Init.PdmInit.MicPairsNbr = 2;
 8000cb2:	4b16      	ldr	r3, [pc, #88]	; (8000d0c <MX_SAI1_Init+0xbc>)
 8000cb4:	2202      	movs	r2, #2
 8000cb6:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA1.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 8000cb8:	4b14      	ldr	r3, [pc, #80]	; (8000d0c <MX_SAI1_Init+0xbc>)
 8000cba:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000cbe:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA1.FrameInit.FrameLength = 32;
 8000cc0:	4b12      	ldr	r3, [pc, #72]	; (8000d0c <MX_SAI1_Init+0xbc>)
 8000cc2:	2220      	movs	r2, #32
 8000cc4:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA1.FrameInit.ActiveFrameLength = 1;
 8000cc6:	4b11      	ldr	r3, [pc, #68]	; (8000d0c <MX_SAI1_Init+0xbc>)
 8000cc8:	2201      	movs	r2, #1
 8000cca:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8000ccc:	4b0f      	ldr	r3, [pc, #60]	; (8000d0c <MX_SAI1_Init+0xbc>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA1.FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 8000cd2:	4b0e      	ldr	r3, [pc, #56]	; (8000d0c <MX_SAI1_Init+0xbc>)
 8000cd4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000cd8:	661a      	str	r2, [r3, #96]	; 0x60
  hsai_BlockA1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8000cda:	4b0c      	ldr	r3, [pc, #48]	; (8000d0c <MX_SAI1_Init+0xbc>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	665a      	str	r2, [r3, #100]	; 0x64
  hsai_BlockA1.SlotInit.FirstBitOffset = 0;
 8000ce0:	4b0a      	ldr	r3, [pc, #40]	; (8000d0c <MX_SAI1_Init+0xbc>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	669a      	str	r2, [r3, #104]	; 0x68
  hsai_BlockA1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8000ce6:	4b09      	ldr	r3, [pc, #36]	; (8000d0c <MX_SAI1_Init+0xbc>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai_BlockA1.SlotInit.SlotNumber = 1;
 8000cec:	4b07      	ldr	r3, [pc, #28]	; (8000d0c <MX_SAI1_Init+0xbc>)
 8000cee:	2201      	movs	r2, #1
 8000cf0:	671a      	str	r2, [r3, #112]	; 0x70
  hsai_BlockA1.SlotInit.SlotActive = 0x00000001;
 8000cf2:	4b06      	ldr	r3, [pc, #24]	; (8000d0c <MX_SAI1_Init+0xbc>)
 8000cf4:	2201      	movs	r2, #1
 8000cf6:	675a      	str	r2, [r3, #116]	; 0x74
  if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
 8000cf8:	4804      	ldr	r0, [pc, #16]	; (8000d0c <MX_SAI1_Init+0xbc>)
 8000cfa:	f006 fff9 	bl	8007cf0 <HAL_SAI_Init>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d001      	beq.n	8000d08 <MX_SAI1_Init+0xb8>
  {
    Error_Handler();
 8000d04:	f000 f956 	bl	8000fb4 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8000d08:	bf00      	nop
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	240007d0 	.word	0x240007d0
 8000d10:	40015804 	.word	0x40015804

08000d14 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b088      	sub	sp, #32
 8000d18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d1a:	f107 0310 	add.w	r3, r7, #16
 8000d1e:	2200      	movs	r2, #0
 8000d20:	601a      	str	r2, [r3, #0]
 8000d22:	605a      	str	r2, [r3, #4]
 8000d24:	609a      	str	r2, [r3, #8]
 8000d26:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d28:	1d3b      	adds	r3, r7, #4
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	601a      	str	r2, [r3, #0]
 8000d2e:	605a      	str	r2, [r3, #4]
 8000d30:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000d32:	4b23      	ldr	r3, [pc, #140]	; (8000dc0 <MX_TIM1_Init+0xac>)
 8000d34:	4a23      	ldr	r2, [pc, #140]	; (8000dc4 <MX_TIM1_Init+0xb0>)
 8000d36:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 20000;
 8000d38:	4b21      	ldr	r3, [pc, #132]	; (8000dc0 <MX_TIM1_Init+0xac>)
 8000d3a:	f644 6220 	movw	r2, #20000	; 0x4e20
 8000d3e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d40:	4b1f      	ldr	r3, [pc, #124]	; (8000dc0 <MX_TIM1_Init+0xac>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 60000;
 8000d46:	4b1e      	ldr	r3, [pc, #120]	; (8000dc0 <MX_TIM1_Init+0xac>)
 8000d48:	f64e 2260 	movw	r2, #60000	; 0xea60
 8000d4c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d4e:	4b1c      	ldr	r3, [pc, #112]	; (8000dc0 <MX_TIM1_Init+0xac>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000d54:	4b1a      	ldr	r3, [pc, #104]	; (8000dc0 <MX_TIM1_Init+0xac>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d5a:	4b19      	ldr	r3, [pc, #100]	; (8000dc0 <MX_TIM1_Init+0xac>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000d60:	4817      	ldr	r0, [pc, #92]	; (8000dc0 <MX_TIM1_Init+0xac>)
 8000d62:	f007 fbe2 	bl	800852a <HAL_TIM_Base_Init>
 8000d66:	4603      	mov	r3, r0
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d001      	beq.n	8000d70 <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 8000d6c:	f000 f922 	bl	8000fb4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d74:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000d76:	f107 0310 	add.w	r3, r7, #16
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	4810      	ldr	r0, [pc, #64]	; (8000dc0 <MX_TIM1_Init+0xac>)
 8000d7e:	f007 fde9 	bl	8008954 <HAL_TIM_ConfigClockSource>
 8000d82:	4603      	mov	r3, r0
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d001      	beq.n	8000d8c <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8000d88:	f000 f914 	bl	8000fb4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000d90:	2300      	movs	r3, #0
 8000d92:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d94:	2300      	movs	r3, #0
 8000d96:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000d98:	1d3b      	adds	r3, r7, #4
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	4808      	ldr	r0, [pc, #32]	; (8000dc0 <MX_TIM1_Init+0xac>)
 8000d9e:	f008 f82d 	bl	8008dfc <HAL_TIMEx_MasterConfigSynchronization>
 8000da2:	4603      	mov	r3, r0
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d001      	beq.n	8000dac <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000da8:	f000 f904 	bl	8000fb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  __HAL_TIM_CLEAR_IT(&htim1, TIM_FLAG_UPDATE);
 8000dac:	4b04      	ldr	r3, [pc, #16]	; (8000dc0 <MX_TIM1_Init+0xac>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	f06f 0201 	mvn.w	r2, #1
 8000db4:	611a      	str	r2, [r3, #16]
  /* USER CODE END TIM1_Init 2 */

}
 8000db6:	bf00      	nop
 8000db8:	3720      	adds	r7, #32
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	24000784 	.word	0x24000784
 8000dc4:	40010000 	.word	0x40010000

08000dc8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000dcc:	4b23      	ldr	r3, [pc, #140]	; (8000e5c <MX_USART3_UART_Init+0x94>)
 8000dce:	4a24      	ldr	r2, [pc, #144]	; (8000e60 <MX_USART3_UART_Init+0x98>)
 8000dd0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 4000000;
 8000dd2:	4b22      	ldr	r3, [pc, #136]	; (8000e5c <MX_USART3_UART_Init+0x94>)
 8000dd4:	4a23      	ldr	r2, [pc, #140]	; (8000e64 <MX_USART3_UART_Init+0x9c>)
 8000dd6:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000dd8:	4b20      	ldr	r3, [pc, #128]	; (8000e5c <MX_USART3_UART_Init+0x94>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000dde:	4b1f      	ldr	r3, [pc, #124]	; (8000e5c <MX_USART3_UART_Init+0x94>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000de4:	4b1d      	ldr	r3, [pc, #116]	; (8000e5c <MX_USART3_UART_Init+0x94>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000dea:	4b1c      	ldr	r3, [pc, #112]	; (8000e5c <MX_USART3_UART_Init+0x94>)
 8000dec:	220c      	movs	r2, #12
 8000dee:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000df0:	4b1a      	ldr	r3, [pc, #104]	; (8000e5c <MX_USART3_UART_Init+0x94>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000df6:	4b19      	ldr	r3, [pc, #100]	; (8000e5c <MX_USART3_UART_Init+0x94>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000dfc:	4b17      	ldr	r3, [pc, #92]	; (8000e5c <MX_USART3_UART_Init+0x94>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000e02:	4b16      	ldr	r3, [pc, #88]	; (8000e5c <MX_USART3_UART_Init+0x94>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e08:	4b14      	ldr	r3, [pc, #80]	; (8000e5c <MX_USART3_UART_Init+0x94>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000e0e:	4813      	ldr	r0, [pc, #76]	; (8000e5c <MX_USART3_UART_Init+0x94>)
 8000e10:	f008 f89a 	bl	8008f48 <HAL_UART_Init>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d001      	beq.n	8000e1e <MX_USART3_UART_Init+0x56>
  {
    Error_Handler();
 8000e1a:	f000 f8cb 	bl	8000fb4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_8_8) != HAL_OK)
 8000e1e:	f04f 4120 	mov.w	r1, #2684354560	; 0xa0000000
 8000e22:	480e      	ldr	r0, [pc, #56]	; (8000e5c <MX_USART3_UART_Init+0x94>)
 8000e24:	f009 fc5f 	bl	800a6e6 <HAL_UARTEx_SetTxFifoThreshold>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d001      	beq.n	8000e32 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000e2e:	f000 f8c1 	bl	8000fb4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_8_8) != HAL_OK)
 8000e32:	f04f 6120 	mov.w	r1, #167772160	; 0xa000000
 8000e36:	4809      	ldr	r0, [pc, #36]	; (8000e5c <MX_USART3_UART_Init+0x94>)
 8000e38:	f009 fc93 	bl	800a762 <HAL_UARTEx_SetRxFifoThreshold>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d001      	beq.n	8000e46 <MX_USART3_UART_Init+0x7e>
  {
    Error_Handler();
 8000e42:	f000 f8b7 	bl	8000fb4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000e46:	4805      	ldr	r0, [pc, #20]	; (8000e5c <MX_USART3_UART_Init+0x94>)
 8000e48:	f009 fc14 	bl	800a674 <HAL_UARTEx_DisableFifoMode>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d001      	beq.n	8000e56 <MX_USART3_UART_Init+0x8e>
  {
    Error_Handler();
 8000e52:	f000 f8af 	bl	8000fb4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000e56:	bf00      	nop
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	240005e0 	.word	0x240005e0
 8000e60:	40004800 	.word	0x40004800
 8000e64:	003d0900 	.word	0x003d0900

08000e68 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b082      	sub	sp, #8
 8000e6c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e6e:	4b11      	ldr	r3, [pc, #68]	; (8000eb4 <MX_DMA_Init+0x4c>)
 8000e70:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e74:	4a0f      	ldr	r2, [pc, #60]	; (8000eb4 <MX_DMA_Init+0x4c>)
 8000e76:	f043 0301 	orr.w	r3, r3, #1
 8000e7a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000e7e:	4b0d      	ldr	r3, [pc, #52]	; (8000eb4 <MX_DMA_Init+0x4c>)
 8000e80:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e84:	f003 0301 	and.w	r3, r3, #1
 8000e88:	607b      	str	r3, [r7, #4]
 8000e8a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	2100      	movs	r1, #0
 8000e90:	200b      	movs	r0, #11
 8000e92:	f000 fc6e 	bl	8001772 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000e96:	200b      	movs	r0, #11
 8000e98:	f000 fc85 	bl	80017a6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	2100      	movs	r1, #0
 8000ea0:	200c      	movs	r0, #12
 8000ea2:	f000 fc66 	bl	8001772 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000ea6:	200c      	movs	r0, #12
 8000ea8:	f000 fc7d 	bl	80017a6 <HAL_NVIC_EnableIRQ>

}
 8000eac:	bf00      	nop
 8000eae:	3708      	adds	r7, #8
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}
 8000eb4:	58024400 	.word	0x58024400

08000eb8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	b085      	sub	sp, #20
 8000ebc:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ebe:	4b21      	ldr	r3, [pc, #132]	; (8000f44 <MX_GPIO_Init+0x8c>)
 8000ec0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ec4:	4a1f      	ldr	r2, [pc, #124]	; (8000f44 <MX_GPIO_Init+0x8c>)
 8000ec6:	f043 0310 	orr.w	r3, r3, #16
 8000eca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ece:	4b1d      	ldr	r3, [pc, #116]	; (8000f44 <MX_GPIO_Init+0x8c>)
 8000ed0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ed4:	f003 0310 	and.w	r3, r3, #16
 8000ed8:	60fb      	str	r3, [r7, #12]
 8000eda:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000edc:	4b19      	ldr	r3, [pc, #100]	; (8000f44 <MX_GPIO_Init+0x8c>)
 8000ede:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ee2:	4a18      	ldr	r2, [pc, #96]	; (8000f44 <MX_GPIO_Init+0x8c>)
 8000ee4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ee8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000eec:	4b15      	ldr	r3, [pc, #84]	; (8000f44 <MX_GPIO_Init+0x8c>)
 8000eee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ef2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ef6:	60bb      	str	r3, [r7, #8]
 8000ef8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000efa:	4b12      	ldr	r3, [pc, #72]	; (8000f44 <MX_GPIO_Init+0x8c>)
 8000efc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f00:	4a10      	ldr	r2, [pc, #64]	; (8000f44 <MX_GPIO_Init+0x8c>)
 8000f02:	f043 0304 	orr.w	r3, r3, #4
 8000f06:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f0a:	4b0e      	ldr	r3, [pc, #56]	; (8000f44 <MX_GPIO_Init+0x8c>)
 8000f0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f10:	f003 0304 	and.w	r3, r3, #4
 8000f14:	607b      	str	r3, [r7, #4]
 8000f16:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f18:	4b0a      	ldr	r3, [pc, #40]	; (8000f44 <MX_GPIO_Init+0x8c>)
 8000f1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f1e:	4a09      	ldr	r2, [pc, #36]	; (8000f44 <MX_GPIO_Init+0x8c>)
 8000f20:	f043 0308 	orr.w	r3, r3, #8
 8000f24:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f28:	4b06      	ldr	r3, [pc, #24]	; (8000f44 <MX_GPIO_Init+0x8c>)
 8000f2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f2e:	f003 0308 	and.w	r3, r3, #8
 8000f32:	603b      	str	r3, [r7, #0]
 8000f34:	683b      	ldr	r3, [r7, #0]

}
 8000f36:	bf00      	nop
 8000f38:	3714      	adds	r7, #20
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop
 8000f44:	58024400 	.word	0x58024400

08000f48 <HAL_SAI_RxHalfCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai){
 8000f48:	b480      	push	{r7}
 8000f4a:	b083      	sub	sp, #12
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
	dmaFlag = HALF;
 8000f50:	4b04      	ldr	r3, [pc, #16]	; (8000f64 <HAL_SAI_RxHalfCpltCallback+0x1c>)
 8000f52:	2204      	movs	r2, #4
 8000f54:	701a      	strb	r2, [r3, #0]
}
 8000f56:	bf00      	nop
 8000f58:	370c      	adds	r7, #12
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f60:	4770      	bx	lr
 8000f62:	bf00      	nop
 8000f64:	24000491 	.word	0x24000491

08000f68 <HAL_SAI_RxCpltCallback>:

void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai){
 8000f68:	b480      	push	{r7}
 8000f6a:	b083      	sub	sp, #12
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
	dmaFlag = FULL;
 8000f70:	4b04      	ldr	r3, [pc, #16]	; (8000f84 <HAL_SAI_RxCpltCallback+0x1c>)
 8000f72:	2205      	movs	r2, #5
 8000f74:	701a      	strb	r2, [r3, #0]
}
 8000f76:	bf00      	nop
 8000f78:	370c      	adds	r7, #12
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop
 8000f84:	24000491 	.word	0x24000491

08000f88 <HAL_TIM_PeriodElapsedCallback>:
	uartFlag = READY;
}
*/

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
  if(htim == &htim1){
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	4a06      	ldr	r2, [pc, #24]	; (8000fac <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000f94:	4293      	cmp	r3, r2
 8000f96:	d105      	bne.n	8000fa4 <HAL_TIM_PeriodElapsedCallback+0x1c>
	  HAL_TIM_Base_Stop_IT(htim);
 8000f98:	6878      	ldr	r0, [r7, #4]
 8000f9a:	f007 fb8d 	bl	80086b8 <HAL_TIM_Base_Stop_IT>
	  timFlag = DONE;
 8000f9e:	4b04      	ldr	r3, [pc, #16]	; (8000fb0 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000fa0:	2203      	movs	r2, #3
 8000fa2:	701a      	strb	r2, [r3, #0]
  }
}
 8000fa4:	bf00      	nop
 8000fa6:	3708      	adds	r7, #8
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	24000784 	.word	0x24000784
 8000fb0:	24000492 	.word	0x24000492

08000fb4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000fb8:	b672      	cpsid	i
}
 8000fba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fbc:	e7fe      	b.n	8000fbc <Error_Handler+0x8>
	...

08000fc0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b083      	sub	sp, #12
 8000fc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fc6:	4b0a      	ldr	r3, [pc, #40]	; (8000ff0 <HAL_MspInit+0x30>)
 8000fc8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000fcc:	4a08      	ldr	r2, [pc, #32]	; (8000ff0 <HAL_MspInit+0x30>)
 8000fce:	f043 0302 	orr.w	r3, r3, #2
 8000fd2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000fd6:	4b06      	ldr	r3, [pc, #24]	; (8000ff0 <HAL_MspInit+0x30>)
 8000fd8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000fdc:	f003 0302 	and.w	r3, r3, #2
 8000fe0:	607b      	str	r3, [r7, #4]
 8000fe2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fe4:	bf00      	nop
 8000fe6:	370c      	adds	r7, #12
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr
 8000ff0:	58024400 	.word	0x58024400

08000ff4 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b085      	sub	sp, #20
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	4a0b      	ldr	r2, [pc, #44]	; (8001030 <HAL_CRC_MspInit+0x3c>)
 8001002:	4293      	cmp	r3, r2
 8001004:	d10e      	bne.n	8001024 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001006:	4b0b      	ldr	r3, [pc, #44]	; (8001034 <HAL_CRC_MspInit+0x40>)
 8001008:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800100c:	4a09      	ldr	r2, [pc, #36]	; (8001034 <HAL_CRC_MspInit+0x40>)
 800100e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001012:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001016:	4b07      	ldr	r3, [pc, #28]	; (8001034 <HAL_CRC_MspInit+0x40>)
 8001018:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800101c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001020:	60fb      	str	r3, [r7, #12]
 8001022:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001024:	bf00      	nop
 8001026:	3714      	adds	r7, #20
 8001028:	46bd      	mov	sp, r7
 800102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102e:	4770      	bx	lr
 8001030:	58024c00 	.word	0x58024c00
 8001034:	58024400 	.word	0x58024400

08001038 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b084      	sub	sp, #16
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	4a0e      	ldr	r2, [pc, #56]	; (8001080 <HAL_TIM_Base_MspInit+0x48>)
 8001046:	4293      	cmp	r3, r2
 8001048:	d116      	bne.n	8001078 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800104a:	4b0e      	ldr	r3, [pc, #56]	; (8001084 <HAL_TIM_Base_MspInit+0x4c>)
 800104c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001050:	4a0c      	ldr	r2, [pc, #48]	; (8001084 <HAL_TIM_Base_MspInit+0x4c>)
 8001052:	f043 0301 	orr.w	r3, r3, #1
 8001056:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800105a:	4b0a      	ldr	r3, [pc, #40]	; (8001084 <HAL_TIM_Base_MspInit+0x4c>)
 800105c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001060:	f003 0301 	and.w	r3, r3, #1
 8001064:	60fb      	str	r3, [r7, #12]
 8001066:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8001068:	2200      	movs	r2, #0
 800106a:	2100      	movs	r1, #0
 800106c:	2019      	movs	r0, #25
 800106e:	f000 fb80 	bl	8001772 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001072:	2019      	movs	r0, #25
 8001074:	f000 fb97 	bl	80017a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001078:	bf00      	nop
 800107a:	3710      	adds	r7, #16
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}
 8001080:	40010000 	.word	0x40010000
 8001084:	58024400 	.word	0x58024400

08001088 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b0b8      	sub	sp, #224	; 0xe0
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001090:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001094:	2200      	movs	r2, #0
 8001096:	601a      	str	r2, [r3, #0]
 8001098:	605a      	str	r2, [r3, #4]
 800109a:	609a      	str	r2, [r3, #8]
 800109c:	60da      	str	r2, [r3, #12]
 800109e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010a0:	f107 0310 	add.w	r3, r7, #16
 80010a4:	22bc      	movs	r2, #188	; 0xbc
 80010a6:	2100      	movs	r1, #0
 80010a8:	4618      	mov	r0, r3
 80010aa:	f00b fb47 	bl	800c73c <memset>
  if(huart->Instance==USART3)
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	4a49      	ldr	r2, [pc, #292]	; (80011d8 <HAL_UART_MspInit+0x150>)
 80010b4:	4293      	cmp	r3, r2
 80010b6:	f040 808b 	bne.w	80011d0 <HAL_UART_MspInit+0x148>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80010ba:	2302      	movs	r3, #2
 80010bc:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 1;
 80010be:	2301      	movs	r3, #1
 80010c0:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL3.PLL3N = 19;
 80010c2:	2313      	movs	r3, #19
 80010c4:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 80010c6:	2302      	movs	r3, #2
 80010c8:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 80010ca:	2302      	movs	r3, #2
 80010cc:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 80010ce:	2302      	movs	r3, #2
 80010d0:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 80010d2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80010d6:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
 80010d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80010dc:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 80010de:	2300      	movs	r3, #0
 80010e0:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_PLL3;
 80010e2:	2302      	movs	r3, #2
 80010e4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010e8:	f107 0310 	add.w	r3, r7, #16
 80010ec:	4618      	mov	r0, r3
 80010ee:	f004 fc79 	bl	80059e4 <HAL_RCCEx_PeriphCLKConfig>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d001      	beq.n	80010fc <HAL_UART_MspInit+0x74>
    {
      Error_Handler();
 80010f8:	f7ff ff5c 	bl	8000fb4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80010fc:	4b37      	ldr	r3, [pc, #220]	; (80011dc <HAL_UART_MspInit+0x154>)
 80010fe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001102:	4a36      	ldr	r2, [pc, #216]	; (80011dc <HAL_UART_MspInit+0x154>)
 8001104:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001108:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800110c:	4b33      	ldr	r3, [pc, #204]	; (80011dc <HAL_UART_MspInit+0x154>)
 800110e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001112:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001116:	60fb      	str	r3, [r7, #12]
 8001118:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800111a:	4b30      	ldr	r3, [pc, #192]	; (80011dc <HAL_UART_MspInit+0x154>)
 800111c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001120:	4a2e      	ldr	r2, [pc, #184]	; (80011dc <HAL_UART_MspInit+0x154>)
 8001122:	f043 0308 	orr.w	r3, r3, #8
 8001126:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800112a:	4b2c      	ldr	r3, [pc, #176]	; (80011dc <HAL_UART_MspInit+0x154>)
 800112c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001130:	f003 0308 	and.w	r3, r3, #8
 8001134:	60bb      	str	r3, [r7, #8]
 8001136:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001138:	f44f 7340 	mov.w	r3, #768	; 0x300
 800113c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001140:	2302      	movs	r3, #2
 8001142:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001146:	2300      	movs	r3, #0
 8001148:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800114c:	2300      	movs	r3, #0
 800114e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001152:	2307      	movs	r3, #7
 8001154:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001158:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800115c:	4619      	mov	r1, r3
 800115e:	4820      	ldr	r0, [pc, #128]	; (80011e0 <HAL_UART_MspInit+0x158>)
 8001160:	f003 fa6c 	bl	800463c <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream1;
 8001164:	4b1f      	ldr	r3, [pc, #124]	; (80011e4 <HAL_UART_MspInit+0x15c>)
 8001166:	4a20      	ldr	r2, [pc, #128]	; (80011e8 <HAL_UART_MspInit+0x160>)
 8001168:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 800116a:	4b1e      	ldr	r3, [pc, #120]	; (80011e4 <HAL_UART_MspInit+0x15c>)
 800116c:	222e      	movs	r2, #46	; 0x2e
 800116e:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001170:	4b1c      	ldr	r3, [pc, #112]	; (80011e4 <HAL_UART_MspInit+0x15c>)
 8001172:	2240      	movs	r2, #64	; 0x40
 8001174:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001176:	4b1b      	ldr	r3, [pc, #108]	; (80011e4 <HAL_UART_MspInit+0x15c>)
 8001178:	2200      	movs	r2, #0
 800117a:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800117c:	4b19      	ldr	r3, [pc, #100]	; (80011e4 <HAL_UART_MspInit+0x15c>)
 800117e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001182:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001184:	4b17      	ldr	r3, [pc, #92]	; (80011e4 <HAL_UART_MspInit+0x15c>)
 8001186:	2200      	movs	r2, #0
 8001188:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800118a:	4b16      	ldr	r3, [pc, #88]	; (80011e4 <HAL_UART_MspInit+0x15c>)
 800118c:	2200      	movs	r2, #0
 800118e:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8001190:	4b14      	ldr	r3, [pc, #80]	; (80011e4 <HAL_UART_MspInit+0x15c>)
 8001192:	2200      	movs	r2, #0
 8001194:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8001196:	4b13      	ldr	r3, [pc, #76]	; (80011e4 <HAL_UART_MspInit+0x15c>)
 8001198:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800119c:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800119e:	4b11      	ldr	r3, [pc, #68]	; (80011e4 <HAL_UART_MspInit+0x15c>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80011a4:	480f      	ldr	r0, [pc, #60]	; (80011e4 <HAL_UART_MspInit+0x15c>)
 80011a6:	f000 fc03 	bl	80019b0 <HAL_DMA_Init>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d001      	beq.n	80011b4 <HAL_UART_MspInit+0x12c>
    {
      Error_Handler();
 80011b0:	f7ff ff00 	bl	8000fb4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	4a0b      	ldr	r2, [pc, #44]	; (80011e4 <HAL_UART_MspInit+0x15c>)
 80011b8:	679a      	str	r2, [r3, #120]	; 0x78
 80011ba:	4a0a      	ldr	r2, [pc, #40]	; (80011e4 <HAL_UART_MspInit+0x15c>)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80011c0:	2200      	movs	r2, #0
 80011c2:	2100      	movs	r1, #0
 80011c4:	2027      	movs	r0, #39	; 0x27
 80011c6:	f000 fad4 	bl	8001772 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80011ca:	2027      	movs	r0, #39	; 0x27
 80011cc:	f000 faeb 	bl	80017a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80011d0:	bf00      	nop
 80011d2:	37e0      	adds	r7, #224	; 0xe0
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	40004800 	.word	0x40004800
 80011dc:	58024400 	.word	0x58024400
 80011e0:	58020c00 	.word	0x58020c00
 80011e4:	24000694 	.word	0x24000694
 80011e8:	40020028 	.word	0x40020028

080011ec <HAL_SAI_MspInit>:
extern DMA_HandleTypeDef hdma_sai1_a;

static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b0b8      	sub	sp, #224	; 0xe0
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011f4:	f107 0310 	add.w	r3, r7, #16
 80011f8:	22bc      	movs	r2, #188	; 0xbc
 80011fa:	2100      	movs	r1, #0
 80011fc:	4618      	mov	r0, r3
 80011fe:	f00b fa9d 	bl	800c73c <memset>
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	4a55      	ldr	r2, [pc, #340]	; (800135c <HAL_SAI_MspInit+0x170>)
 8001208:	4293      	cmp	r3, r2
 800120a:	f040 80a2 	bne.w	8001352 <HAL_SAI_MspInit+0x166>
    {
    /* Peripheral clock enable */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 800120e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001212:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 5;
 8001214:	2305      	movs	r3, #5
 8001216:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLL2.PLL2N = 192;
 8001218:	23c0      	movs	r3, #192	; 0xc0
 800121a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2P = 25;
 800121c:	2319      	movs	r3, #25
 800121e:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001220:	2302      	movs	r3, #2
 8001222:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001224:	2302      	movs	r3, #2
 8001226:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_0;
 8001228:	2300      	movs	r3, #0
 800122a:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 800122c:	2300      	movs	r3, #0
 800122e:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001230:	2300      	movs	r3, #0
 8001232:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL2;
 8001234:	2301      	movs	r3, #1
 8001236:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001238:	f107 0310 	add.w	r3, r7, #16
 800123c:	4618      	mov	r0, r3
 800123e:	f004 fbd1 	bl	80059e4 <HAL_RCCEx_PeriphCLKConfig>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d001      	beq.n	800124c <HAL_SAI_MspInit+0x60>
    {
      Error_Handler();
 8001248:	f7ff feb4 	bl	8000fb4 <Error_Handler>
    }

    if (SAI1_client == 0)
 800124c:	4b44      	ldr	r3, [pc, #272]	; (8001360 <HAL_SAI_MspInit+0x174>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	2b00      	cmp	r3, #0
 8001252:	d116      	bne.n	8001282 <HAL_SAI_MspInit+0x96>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8001254:	4b43      	ldr	r3, [pc, #268]	; (8001364 <HAL_SAI_MspInit+0x178>)
 8001256:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800125a:	4a42      	ldr	r2, [pc, #264]	; (8001364 <HAL_SAI_MspInit+0x178>)
 800125c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001260:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001264:	4b3f      	ldr	r3, [pc, #252]	; (8001364 <HAL_SAI_MspInit+0x178>)
 8001266:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800126a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800126e:	60fb      	str	r3, [r7, #12]
 8001270:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(SAI1_IRQn, 0, 0);
 8001272:	2200      	movs	r2, #0
 8001274:	2100      	movs	r1, #0
 8001276:	2057      	movs	r0, #87	; 0x57
 8001278:	f000 fa7b 	bl	8001772 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SAI1_IRQn);
 800127c:	2057      	movs	r0, #87	; 0x57
 800127e:	f000 fa92 	bl	80017a6 <HAL_NVIC_EnableIRQ>
    }
    SAI1_client ++;
 8001282:	4b37      	ldr	r3, [pc, #220]	; (8001360 <HAL_SAI_MspInit+0x174>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	3301      	adds	r3, #1
 8001288:	4a35      	ldr	r2, [pc, #212]	; (8001360 <HAL_SAI_MspInit+0x174>)
 800128a:	6013      	str	r3, [r2, #0]
    /**SAI1_A_Block_A GPIO Configuration
    PE2     ------> SAI1_CK1
    PE4     ------> SAI1_D2
    PC1     ------> SAI1_D1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4;
 800128c:	2314      	movs	r3, #20
 800128e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001292:	2302      	movs	r3, #2
 8001294:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001298:	2300      	movs	r3, #0
 800129a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800129e:	2300      	movs	r3, #0
 80012a0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF2_SAI1;
 80012a4:	2302      	movs	r3, #2
 80012a6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80012aa:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80012ae:	4619      	mov	r1, r3
 80012b0:	482d      	ldr	r0, [pc, #180]	; (8001368 <HAL_SAI_MspInit+0x17c>)
 80012b2:	f003 f9c3 	bl	800463c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80012b6:	2302      	movs	r3, #2
 80012b8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012bc:	2302      	movs	r3, #2
 80012be:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c2:	2300      	movs	r3, #0
 80012c4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012c8:	2300      	movs	r3, #0
 80012ca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF2_SAI1;
 80012ce:	2302      	movs	r3, #2
 80012d0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012d4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80012d8:	4619      	mov	r1, r3
 80012da:	4824      	ldr	r0, [pc, #144]	; (800136c <HAL_SAI_MspInit+0x180>)
 80012dc:	f003 f9ae 	bl	800463c <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai1_a.Instance = DMA1_Stream0;
 80012e0:	4b23      	ldr	r3, [pc, #140]	; (8001370 <HAL_SAI_MspInit+0x184>)
 80012e2:	4a24      	ldr	r2, [pc, #144]	; (8001374 <HAL_SAI_MspInit+0x188>)
 80012e4:	601a      	str	r2, [r3, #0]
    hdma_sai1_a.Init.Request = DMA_REQUEST_SAI1_A;
 80012e6:	4b22      	ldr	r3, [pc, #136]	; (8001370 <HAL_SAI_MspInit+0x184>)
 80012e8:	2257      	movs	r2, #87	; 0x57
 80012ea:	605a      	str	r2, [r3, #4]
    hdma_sai1_a.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80012ec:	4b20      	ldr	r3, [pc, #128]	; (8001370 <HAL_SAI_MspInit+0x184>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	609a      	str	r2, [r3, #8]
    hdma_sai1_a.Init.PeriphInc = DMA_PINC_DISABLE;
 80012f2:	4b1f      	ldr	r3, [pc, #124]	; (8001370 <HAL_SAI_MspInit+0x184>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	60da      	str	r2, [r3, #12]
    hdma_sai1_a.Init.MemInc = DMA_MINC_ENABLE;
 80012f8:	4b1d      	ldr	r3, [pc, #116]	; (8001370 <HAL_SAI_MspInit+0x184>)
 80012fa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80012fe:	611a      	str	r2, [r3, #16]
    hdma_sai1_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001300:	4b1b      	ldr	r3, [pc, #108]	; (8001370 <HAL_SAI_MspInit+0x184>)
 8001302:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001306:	615a      	str	r2, [r3, #20]
    hdma_sai1_a.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001308:	4b19      	ldr	r3, [pc, #100]	; (8001370 <HAL_SAI_MspInit+0x184>)
 800130a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800130e:	619a      	str	r2, [r3, #24]
    hdma_sai1_a.Init.Mode = DMA_CIRCULAR;
 8001310:	4b17      	ldr	r3, [pc, #92]	; (8001370 <HAL_SAI_MspInit+0x184>)
 8001312:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001316:	61da      	str	r2, [r3, #28]
    hdma_sai1_a.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001318:	4b15      	ldr	r3, [pc, #84]	; (8001370 <HAL_SAI_MspInit+0x184>)
 800131a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800131e:	621a      	str	r2, [r3, #32]
    hdma_sai1_a.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001320:	4b13      	ldr	r3, [pc, #76]	; (8001370 <HAL_SAI_MspInit+0x184>)
 8001322:	2200      	movs	r2, #0
 8001324:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
 8001326:	4812      	ldr	r0, [pc, #72]	; (8001370 <HAL_SAI_MspInit+0x184>)
 8001328:	f000 fb42 	bl	80019b0 <HAL_DMA_Init>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d001      	beq.n	8001336 <HAL_SAI_MspInit+0x14a>
    {
      Error_Handler();
 8001332:	f7ff fe3f 	bl	8000fb4 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_a);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	4a0d      	ldr	r2, [pc, #52]	; (8001370 <HAL_SAI_MspInit+0x184>)
 800133a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800133e:	4a0c      	ldr	r2, [pc, #48]	; (8001370 <HAL_SAI_MspInit+0x184>)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	6393      	str	r3, [r2, #56]	; 0x38

    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_a);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	4a0a      	ldr	r2, [pc, #40]	; (8001370 <HAL_SAI_MspInit+0x184>)
 8001348:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 800134c:	4a08      	ldr	r2, [pc, #32]	; (8001370 <HAL_SAI_MspInit+0x184>)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6393      	str	r3, [r2, #56]	; 0x38

    }
}
 8001352:	bf00      	nop
 8001354:	37e0      	adds	r7, #224	; 0xe0
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	40015804 	.word	0x40015804
 8001360:	24000494 	.word	0x24000494
 8001364:	58024400 	.word	0x58024400
 8001368:	58021000 	.word	0x58021000
 800136c:	58020800 	.word	0x58020800
 8001370:	2400070c 	.word	0x2400070c
 8001374:	40020010 	.word	0x40020010

08001378 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800137c:	e7fe      	b.n	800137c <NMI_Handler+0x4>

0800137e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800137e:	b480      	push	{r7}
 8001380:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001382:	e7fe      	b.n	8001382 <HardFault_Handler+0x4>

08001384 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001384:	b480      	push	{r7}
 8001386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001388:	e7fe      	b.n	8001388 <MemManage_Handler+0x4>

0800138a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800138a:	b480      	push	{r7}
 800138c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800138e:	e7fe      	b.n	800138e <BusFault_Handler+0x4>

08001390 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001394:	e7fe      	b.n	8001394 <UsageFault_Handler+0x4>

08001396 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001396:	b480      	push	{r7}
 8001398:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800139a:	bf00      	nop
 800139c:	46bd      	mov	sp, r7
 800139e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a2:	4770      	bx	lr

080013a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013a4:	b480      	push	{r7}
 80013a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013a8:	bf00      	nop
 80013aa:	46bd      	mov	sp, r7
 80013ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b0:	4770      	bx	lr

080013b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013b2:	b480      	push	{r7}
 80013b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013b6:	bf00      	nop
 80013b8:	46bd      	mov	sp, r7
 80013ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013be:	4770      	bx	lr

080013c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013c4:	f000 f8ce 	bl	8001564 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013c8:	bf00      	nop
 80013ca:	bd80      	pop	{r7, pc}

080013cc <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_a);
 80013d0:	4802      	ldr	r0, [pc, #8]	; (80013dc <DMA1_Stream0_IRQHandler+0x10>)
 80013d2:	f001 fe15 	bl	8003000 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80013d6:	bf00      	nop
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	2400070c 	.word	0x2400070c

080013e0 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 80013e4:	4802      	ldr	r0, [pc, #8]	; (80013f0 <DMA1_Stream1_IRQHandler+0x10>)
 80013e6:	f001 fe0b 	bl	8003000 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80013ea:	bf00      	nop
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	24000694 	.word	0x24000694

080013f4 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80013f8:	4802      	ldr	r0, [pc, #8]	; (8001404 <TIM1_UP_IRQHandler+0x10>)
 80013fa:	f007 f98c 	bl	8008716 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80013fe:	bf00      	nop
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	24000784 	.word	0x24000784

08001408 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800140c:	4802      	ldr	r0, [pc, #8]	; (8001418 <USART3_IRQHandler+0x10>)
 800140e:	f007 fe6b 	bl	80090e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001412:	bf00      	nop
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	240005e0 	.word	0x240005e0

0800141c <SAI1_IRQHandler>:

/**
  * @brief This function handles SAI1 global interrupt.
  */
void SAI1_IRQHandler(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_IRQn 0 */

  /* USER CODE BEGIN SAI1_IRQn 1 */

  /* USER CODE END SAI1_IRQn 1 */
}
 8001420:	bf00      	nop
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr
	...

0800142c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800142c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001464 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001430:	f7ff f8ce 	bl	80005d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001434:	480c      	ldr	r0, [pc, #48]	; (8001468 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001436:	490d      	ldr	r1, [pc, #52]	; (800146c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001438:	4a0d      	ldr	r2, [pc, #52]	; (8001470 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800143a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800143c:	e002      	b.n	8001444 <LoopCopyDataInit>

0800143e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800143e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001440:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001442:	3304      	adds	r3, #4

08001444 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001444:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001446:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001448:	d3f9      	bcc.n	800143e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800144a:	4a0a      	ldr	r2, [pc, #40]	; (8001474 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800144c:	4c0a      	ldr	r4, [pc, #40]	; (8001478 <LoopFillZerobss+0x22>)
  movs r3, #0
 800144e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001450:	e001      	b.n	8001456 <LoopFillZerobss>

08001452 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001452:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001454:	3204      	adds	r2, #4

08001456 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001456:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001458:	d3fb      	bcc.n	8001452 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800145a:	f00b f94b 	bl	800c6f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800145e:	f7ff fa41 	bl	80008e4 <main>
  bx  lr
 8001462:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001464:	24040000 	.word	0x24040000
  ldr r0, =_sdata
 8001468:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800146c:	24000474 	.word	0x24000474
  ldr r2, =_sidata
 8001470:	0800cde8 	.word	0x0800cde8
  ldr r2, =_sbss
 8001474:	24000474 	.word	0x24000474
  ldr r4, =_ebss
 8001478:	2400086c 	.word	0x2400086c

0800147c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800147c:	e7fe      	b.n	800147c <ADC3_IRQHandler>
	...

08001480 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001486:	2003      	movs	r0, #3
 8001488:	f000 f968 	bl	800175c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800148c:	f004 f8d4 	bl	8005638 <HAL_RCC_GetSysClockFreq>
 8001490:	4602      	mov	r2, r0
 8001492:	4b15      	ldr	r3, [pc, #84]	; (80014e8 <HAL_Init+0x68>)
 8001494:	699b      	ldr	r3, [r3, #24]
 8001496:	0a1b      	lsrs	r3, r3, #8
 8001498:	f003 030f 	and.w	r3, r3, #15
 800149c:	4913      	ldr	r1, [pc, #76]	; (80014ec <HAL_Init+0x6c>)
 800149e:	5ccb      	ldrb	r3, [r1, r3]
 80014a0:	f003 031f 	and.w	r3, r3, #31
 80014a4:	fa22 f303 	lsr.w	r3, r2, r3
 80014a8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80014aa:	4b0f      	ldr	r3, [pc, #60]	; (80014e8 <HAL_Init+0x68>)
 80014ac:	699b      	ldr	r3, [r3, #24]
 80014ae:	f003 030f 	and.w	r3, r3, #15
 80014b2:	4a0e      	ldr	r2, [pc, #56]	; (80014ec <HAL_Init+0x6c>)
 80014b4:	5cd3      	ldrb	r3, [r2, r3]
 80014b6:	f003 031f 	and.w	r3, r3, #31
 80014ba:	687a      	ldr	r2, [r7, #4]
 80014bc:	fa22 f303 	lsr.w	r3, r2, r3
 80014c0:	4a0b      	ldr	r2, [pc, #44]	; (80014f0 <HAL_Init+0x70>)
 80014c2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80014c4:	4a0b      	ldr	r2, [pc, #44]	; (80014f4 <HAL_Init+0x74>)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80014ca:	2000      	movs	r0, #0
 80014cc:	f000 f814 	bl	80014f8 <HAL_InitTick>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d001      	beq.n	80014da <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80014d6:	2301      	movs	r3, #1
 80014d8:	e002      	b.n	80014e0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80014da:	f7ff fd71 	bl	8000fc0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014de:	2300      	movs	r3, #0
}
 80014e0:	4618      	mov	r0, r3
 80014e2:	3708      	adds	r7, #8
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}
 80014e8:	58024400 	.word	0x58024400
 80014ec:	0800cb28 	.word	0x0800cb28
 80014f0:	24000404 	.word	0x24000404
 80014f4:	24000400 	.word	0x24000400

080014f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b082      	sub	sp, #8
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001500:	4b15      	ldr	r3, [pc, #84]	; (8001558 <HAL_InitTick+0x60>)
 8001502:	781b      	ldrb	r3, [r3, #0]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d101      	bne.n	800150c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001508:	2301      	movs	r3, #1
 800150a:	e021      	b.n	8001550 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800150c:	4b13      	ldr	r3, [pc, #76]	; (800155c <HAL_InitTick+0x64>)
 800150e:	681a      	ldr	r2, [r3, #0]
 8001510:	4b11      	ldr	r3, [pc, #68]	; (8001558 <HAL_InitTick+0x60>)
 8001512:	781b      	ldrb	r3, [r3, #0]
 8001514:	4619      	mov	r1, r3
 8001516:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800151a:	fbb3 f3f1 	udiv	r3, r3, r1
 800151e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001522:	4618      	mov	r0, r3
 8001524:	f000 f94d 	bl	80017c2 <HAL_SYSTICK_Config>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d001      	beq.n	8001532 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800152e:	2301      	movs	r3, #1
 8001530:	e00e      	b.n	8001550 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	2b0f      	cmp	r3, #15
 8001536:	d80a      	bhi.n	800154e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001538:	2200      	movs	r2, #0
 800153a:	6879      	ldr	r1, [r7, #4]
 800153c:	f04f 30ff 	mov.w	r0, #4294967295
 8001540:	f000 f917 	bl	8001772 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001544:	4a06      	ldr	r2, [pc, #24]	; (8001560 <HAL_InitTick+0x68>)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800154a:	2300      	movs	r3, #0
 800154c:	e000      	b.n	8001550 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800154e:	2301      	movs	r3, #1
}
 8001550:	4618      	mov	r0, r3
 8001552:	3708      	adds	r7, #8
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}
 8001558:	2400040c 	.word	0x2400040c
 800155c:	24000400 	.word	0x24000400
 8001560:	24000408 	.word	0x24000408

08001564 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001564:	b480      	push	{r7}
 8001566:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001568:	4b06      	ldr	r3, [pc, #24]	; (8001584 <HAL_IncTick+0x20>)
 800156a:	781b      	ldrb	r3, [r3, #0]
 800156c:	461a      	mov	r2, r3
 800156e:	4b06      	ldr	r3, [pc, #24]	; (8001588 <HAL_IncTick+0x24>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4413      	add	r3, r2
 8001574:	4a04      	ldr	r2, [pc, #16]	; (8001588 <HAL_IncTick+0x24>)
 8001576:	6013      	str	r3, [r2, #0]
}
 8001578:	bf00      	nop
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr
 8001582:	bf00      	nop
 8001584:	2400040c 	.word	0x2400040c
 8001588:	24000868 	.word	0x24000868

0800158c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800158c:	b480      	push	{r7}
 800158e:	af00      	add	r7, sp, #0
  return uwTick;
 8001590:	4b03      	ldr	r3, [pc, #12]	; (80015a0 <HAL_GetTick+0x14>)
 8001592:	681b      	ldr	r3, [r3, #0]
}
 8001594:	4618      	mov	r0, r3
 8001596:	46bd      	mov	sp, r7
 8001598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159c:	4770      	bx	lr
 800159e:	bf00      	nop
 80015a0:	24000868 	.word	0x24000868

080015a4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80015a4:	b480      	push	{r7}
 80015a6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80015a8:	4b03      	ldr	r3, [pc, #12]	; (80015b8 <HAL_GetREVID+0x14>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	0c1b      	lsrs	r3, r3, #16
}
 80015ae:	4618      	mov	r0, r3
 80015b0:	46bd      	mov	sp, r7
 80015b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b6:	4770      	bx	lr
 80015b8:	5c001000 	.word	0x5c001000

080015bc <__NVIC_SetPriorityGrouping>:
{
 80015bc:	b480      	push	{r7}
 80015be:	b085      	sub	sp, #20
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	f003 0307 	and.w	r3, r3, #7
 80015ca:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015cc:	4b0b      	ldr	r3, [pc, #44]	; (80015fc <__NVIC_SetPriorityGrouping+0x40>)
 80015ce:	68db      	ldr	r3, [r3, #12]
 80015d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015d2:	68ba      	ldr	r2, [r7, #8]
 80015d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015d8:	4013      	ands	r3, r2
 80015da:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015e0:	68bb      	ldr	r3, [r7, #8]
 80015e2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80015e4:	4b06      	ldr	r3, [pc, #24]	; (8001600 <__NVIC_SetPriorityGrouping+0x44>)
 80015e6:	4313      	orrs	r3, r2
 80015e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015ea:	4a04      	ldr	r2, [pc, #16]	; (80015fc <__NVIC_SetPriorityGrouping+0x40>)
 80015ec:	68bb      	ldr	r3, [r7, #8]
 80015ee:	60d3      	str	r3, [r2, #12]
}
 80015f0:	bf00      	nop
 80015f2:	3714      	adds	r7, #20
 80015f4:	46bd      	mov	sp, r7
 80015f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fa:	4770      	bx	lr
 80015fc:	e000ed00 	.word	0xe000ed00
 8001600:	05fa0000 	.word	0x05fa0000

08001604 <__NVIC_GetPriorityGrouping>:
{
 8001604:	b480      	push	{r7}
 8001606:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001608:	4b04      	ldr	r3, [pc, #16]	; (800161c <__NVIC_GetPriorityGrouping+0x18>)
 800160a:	68db      	ldr	r3, [r3, #12]
 800160c:	0a1b      	lsrs	r3, r3, #8
 800160e:	f003 0307 	and.w	r3, r3, #7
}
 8001612:	4618      	mov	r0, r3
 8001614:	46bd      	mov	sp, r7
 8001616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161a:	4770      	bx	lr
 800161c:	e000ed00 	.word	0xe000ed00

08001620 <__NVIC_EnableIRQ>:
{
 8001620:	b480      	push	{r7}
 8001622:	b083      	sub	sp, #12
 8001624:	af00      	add	r7, sp, #0
 8001626:	4603      	mov	r3, r0
 8001628:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800162a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800162e:	2b00      	cmp	r3, #0
 8001630:	db0b      	blt.n	800164a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001632:	88fb      	ldrh	r3, [r7, #6]
 8001634:	f003 021f 	and.w	r2, r3, #31
 8001638:	4907      	ldr	r1, [pc, #28]	; (8001658 <__NVIC_EnableIRQ+0x38>)
 800163a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800163e:	095b      	lsrs	r3, r3, #5
 8001640:	2001      	movs	r0, #1
 8001642:	fa00 f202 	lsl.w	r2, r0, r2
 8001646:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800164a:	bf00      	nop
 800164c:	370c      	adds	r7, #12
 800164e:	46bd      	mov	sp, r7
 8001650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001654:	4770      	bx	lr
 8001656:	bf00      	nop
 8001658:	e000e100 	.word	0xe000e100

0800165c <__NVIC_SetPriority>:
{
 800165c:	b480      	push	{r7}
 800165e:	b083      	sub	sp, #12
 8001660:	af00      	add	r7, sp, #0
 8001662:	4603      	mov	r3, r0
 8001664:	6039      	str	r1, [r7, #0]
 8001666:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001668:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800166c:	2b00      	cmp	r3, #0
 800166e:	db0a      	blt.n	8001686 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	b2da      	uxtb	r2, r3
 8001674:	490c      	ldr	r1, [pc, #48]	; (80016a8 <__NVIC_SetPriority+0x4c>)
 8001676:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800167a:	0112      	lsls	r2, r2, #4
 800167c:	b2d2      	uxtb	r2, r2
 800167e:	440b      	add	r3, r1
 8001680:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001684:	e00a      	b.n	800169c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	b2da      	uxtb	r2, r3
 800168a:	4908      	ldr	r1, [pc, #32]	; (80016ac <__NVIC_SetPriority+0x50>)
 800168c:	88fb      	ldrh	r3, [r7, #6]
 800168e:	f003 030f 	and.w	r3, r3, #15
 8001692:	3b04      	subs	r3, #4
 8001694:	0112      	lsls	r2, r2, #4
 8001696:	b2d2      	uxtb	r2, r2
 8001698:	440b      	add	r3, r1
 800169a:	761a      	strb	r2, [r3, #24]
}
 800169c:	bf00      	nop
 800169e:	370c      	adds	r7, #12
 80016a0:	46bd      	mov	sp, r7
 80016a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a6:	4770      	bx	lr
 80016a8:	e000e100 	.word	0xe000e100
 80016ac:	e000ed00 	.word	0xe000ed00

080016b0 <NVIC_EncodePriority>:
{
 80016b0:	b480      	push	{r7}
 80016b2:	b089      	sub	sp, #36	; 0x24
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	60f8      	str	r0, [r7, #12]
 80016b8:	60b9      	str	r1, [r7, #8]
 80016ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	f003 0307 	and.w	r3, r3, #7
 80016c2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016c4:	69fb      	ldr	r3, [r7, #28]
 80016c6:	f1c3 0307 	rsb	r3, r3, #7
 80016ca:	2b04      	cmp	r3, #4
 80016cc:	bf28      	it	cs
 80016ce:	2304      	movcs	r3, #4
 80016d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016d2:	69fb      	ldr	r3, [r7, #28]
 80016d4:	3304      	adds	r3, #4
 80016d6:	2b06      	cmp	r3, #6
 80016d8:	d902      	bls.n	80016e0 <NVIC_EncodePriority+0x30>
 80016da:	69fb      	ldr	r3, [r7, #28]
 80016dc:	3b03      	subs	r3, #3
 80016de:	e000      	b.n	80016e2 <NVIC_EncodePriority+0x32>
 80016e0:	2300      	movs	r3, #0
 80016e2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016e4:	f04f 32ff 	mov.w	r2, #4294967295
 80016e8:	69bb      	ldr	r3, [r7, #24]
 80016ea:	fa02 f303 	lsl.w	r3, r2, r3
 80016ee:	43da      	mvns	r2, r3
 80016f0:	68bb      	ldr	r3, [r7, #8]
 80016f2:	401a      	ands	r2, r3
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016f8:	f04f 31ff 	mov.w	r1, #4294967295
 80016fc:	697b      	ldr	r3, [r7, #20]
 80016fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001702:	43d9      	mvns	r1, r3
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001708:	4313      	orrs	r3, r2
}
 800170a:	4618      	mov	r0, r3
 800170c:	3724      	adds	r7, #36	; 0x24
 800170e:	46bd      	mov	sp, r7
 8001710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001714:	4770      	bx	lr
	...

08001718 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b082      	sub	sp, #8
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	3b01      	subs	r3, #1
 8001724:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001728:	d301      	bcc.n	800172e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800172a:	2301      	movs	r3, #1
 800172c:	e00f      	b.n	800174e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800172e:	4a0a      	ldr	r2, [pc, #40]	; (8001758 <SysTick_Config+0x40>)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	3b01      	subs	r3, #1
 8001734:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001736:	210f      	movs	r1, #15
 8001738:	f04f 30ff 	mov.w	r0, #4294967295
 800173c:	f7ff ff8e 	bl	800165c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001740:	4b05      	ldr	r3, [pc, #20]	; (8001758 <SysTick_Config+0x40>)
 8001742:	2200      	movs	r2, #0
 8001744:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001746:	4b04      	ldr	r3, [pc, #16]	; (8001758 <SysTick_Config+0x40>)
 8001748:	2207      	movs	r2, #7
 800174a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800174c:	2300      	movs	r3, #0
}
 800174e:	4618      	mov	r0, r3
 8001750:	3708      	adds	r7, #8
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	e000e010 	.word	0xe000e010

0800175c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b082      	sub	sp, #8
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001764:	6878      	ldr	r0, [r7, #4]
 8001766:	f7ff ff29 	bl	80015bc <__NVIC_SetPriorityGrouping>
}
 800176a:	bf00      	nop
 800176c:	3708      	adds	r7, #8
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}

08001772 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001772:	b580      	push	{r7, lr}
 8001774:	b086      	sub	sp, #24
 8001776:	af00      	add	r7, sp, #0
 8001778:	4603      	mov	r3, r0
 800177a:	60b9      	str	r1, [r7, #8]
 800177c:	607a      	str	r2, [r7, #4]
 800177e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001780:	f7ff ff40 	bl	8001604 <__NVIC_GetPriorityGrouping>
 8001784:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001786:	687a      	ldr	r2, [r7, #4]
 8001788:	68b9      	ldr	r1, [r7, #8]
 800178a:	6978      	ldr	r0, [r7, #20]
 800178c:	f7ff ff90 	bl	80016b0 <NVIC_EncodePriority>
 8001790:	4602      	mov	r2, r0
 8001792:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001796:	4611      	mov	r1, r2
 8001798:	4618      	mov	r0, r3
 800179a:	f7ff ff5f 	bl	800165c <__NVIC_SetPriority>
}
 800179e:	bf00      	nop
 80017a0:	3718      	adds	r7, #24
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}

080017a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017a6:	b580      	push	{r7, lr}
 80017a8:	b082      	sub	sp, #8
 80017aa:	af00      	add	r7, sp, #0
 80017ac:	4603      	mov	r3, r0
 80017ae:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017b0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017b4:	4618      	mov	r0, r3
 80017b6:	f7ff ff33 	bl	8001620 <__NVIC_EnableIRQ>
}
 80017ba:	bf00      	nop
 80017bc:	3708      	adds	r7, #8
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}

080017c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017c2:	b580      	push	{r7, lr}
 80017c4:	b082      	sub	sp, #8
 80017c6:	af00      	add	r7, sp, #0
 80017c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017ca:	6878      	ldr	r0, [r7, #4]
 80017cc:	f7ff ffa4 	bl	8001718 <SysTick_Config>
 80017d0:	4603      	mov	r3, r0
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	3708      	adds	r7, #8
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
	...

080017dc <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b082      	sub	sp, #8
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d101      	bne.n	80017ee <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80017ea:	2301      	movs	r3, #1
 80017ec:	e054      	b.n	8001898 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	7f5b      	ldrb	r3, [r3, #29]
 80017f2:	b2db      	uxtb	r3, r3
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d105      	bne.n	8001804 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	2200      	movs	r2, #0
 80017fc:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80017fe:	6878      	ldr	r0, [r7, #4]
 8001800:	f7ff fbf8 	bl	8000ff4 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2202      	movs	r2, #2
 8001808:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	791b      	ldrb	r3, [r3, #4]
 800180e:	2b00      	cmp	r3, #0
 8001810:	d10c      	bne.n	800182c <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4a22      	ldr	r2, [pc, #136]	; (80018a0 <HAL_CRC_Init+0xc4>)
 8001818:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	689a      	ldr	r2, [r3, #8]
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f022 0218 	bic.w	r2, r2, #24
 8001828:	609a      	str	r2, [r3, #8]
 800182a:	e00c      	b.n	8001846 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6899      	ldr	r1, [r3, #8]
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	68db      	ldr	r3, [r3, #12]
 8001834:	461a      	mov	r2, r3
 8001836:	6878      	ldr	r0, [r7, #4]
 8001838:	f000 f834 	bl	80018a4 <HAL_CRCEx_Polynomial_Set>
 800183c:	4603      	mov	r3, r0
 800183e:	2b00      	cmp	r3, #0
 8001840:	d001      	beq.n	8001846 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8001842:	2301      	movs	r3, #1
 8001844:	e028      	b.n	8001898 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	795b      	ldrb	r3, [r3, #5]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d105      	bne.n	800185a <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f04f 32ff 	mov.w	r2, #4294967295
 8001856:	611a      	str	r2, [r3, #16]
 8001858:	e004      	b.n	8001864 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	687a      	ldr	r2, [r7, #4]
 8001860:	6912      	ldr	r2, [r2, #16]
 8001862:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	689b      	ldr	r3, [r3, #8]
 800186a:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	695a      	ldr	r2, [r3, #20]
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	430a      	orrs	r2, r1
 8001878:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	689b      	ldr	r3, [r3, #8]
 8001880:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	699a      	ldr	r2, [r3, #24]
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	430a      	orrs	r2, r1
 800188e:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	2201      	movs	r2, #1
 8001894:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8001896:	2300      	movs	r3, #0
}
 8001898:	4618      	mov	r0, r3
 800189a:	3708      	adds	r7, #8
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	04c11db7 	.word	0x04c11db7

080018a4 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b087      	sub	sp, #28
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	60f8      	str	r0, [r7, #12]
 80018ac:	60b9      	str	r1, [r7, #8]
 80018ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80018b0:	2300      	movs	r3, #0
 80018b2:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80018b4:	231f      	movs	r3, #31
 80018b6:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80018b8:	bf00      	nop
 80018ba:	693b      	ldr	r3, [r7, #16]
 80018bc:	1e5a      	subs	r2, r3, #1
 80018be:	613a      	str	r2, [r7, #16]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d009      	beq.n	80018d8 <HAL_CRCEx_Polynomial_Set+0x34>
 80018c4:	693b      	ldr	r3, [r7, #16]
 80018c6:	f003 031f 	and.w	r3, r3, #31
 80018ca:	68ba      	ldr	r2, [r7, #8]
 80018cc:	fa22 f303 	lsr.w	r3, r2, r3
 80018d0:	f003 0301 	and.w	r3, r3, #1
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d0f0      	beq.n	80018ba <HAL_CRCEx_Polynomial_Set+0x16>
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	2b18      	cmp	r3, #24
 80018dc:	d846      	bhi.n	800196c <HAL_CRCEx_Polynomial_Set+0xc8>
 80018de:	a201      	add	r2, pc, #4	; (adr r2, 80018e4 <HAL_CRCEx_Polynomial_Set+0x40>)
 80018e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018e4:	08001973 	.word	0x08001973
 80018e8:	0800196d 	.word	0x0800196d
 80018ec:	0800196d 	.word	0x0800196d
 80018f0:	0800196d 	.word	0x0800196d
 80018f4:	0800196d 	.word	0x0800196d
 80018f8:	0800196d 	.word	0x0800196d
 80018fc:	0800196d 	.word	0x0800196d
 8001900:	0800196d 	.word	0x0800196d
 8001904:	08001961 	.word	0x08001961
 8001908:	0800196d 	.word	0x0800196d
 800190c:	0800196d 	.word	0x0800196d
 8001910:	0800196d 	.word	0x0800196d
 8001914:	0800196d 	.word	0x0800196d
 8001918:	0800196d 	.word	0x0800196d
 800191c:	0800196d 	.word	0x0800196d
 8001920:	0800196d 	.word	0x0800196d
 8001924:	08001955 	.word	0x08001955
 8001928:	0800196d 	.word	0x0800196d
 800192c:	0800196d 	.word	0x0800196d
 8001930:	0800196d 	.word	0x0800196d
 8001934:	0800196d 	.word	0x0800196d
 8001938:	0800196d 	.word	0x0800196d
 800193c:	0800196d 	.word	0x0800196d
 8001940:	0800196d 	.word	0x0800196d
 8001944:	08001949 	.word	0x08001949
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8001948:	693b      	ldr	r3, [r7, #16]
 800194a:	2b06      	cmp	r3, #6
 800194c:	d913      	bls.n	8001976 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 800194e:	2301      	movs	r3, #1
 8001950:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8001952:	e010      	b.n	8001976 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8001954:	693b      	ldr	r3, [r7, #16]
 8001956:	2b07      	cmp	r3, #7
 8001958:	d90f      	bls.n	800197a <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 800195a:	2301      	movs	r3, #1
 800195c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800195e:	e00c      	b.n	800197a <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8001960:	693b      	ldr	r3, [r7, #16]
 8001962:	2b0f      	cmp	r3, #15
 8001964:	d90b      	bls.n	800197e <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8001966:	2301      	movs	r3, #1
 8001968:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800196a:	e008      	b.n	800197e <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 800196c:	2301      	movs	r3, #1
 800196e:	75fb      	strb	r3, [r7, #23]
      break;
 8001970:	e006      	b.n	8001980 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001972:	bf00      	nop
 8001974:	e004      	b.n	8001980 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001976:	bf00      	nop
 8001978:	e002      	b.n	8001980 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800197a:	bf00      	nop
 800197c:	e000      	b.n	8001980 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800197e:	bf00      	nop
  }
  if (status == HAL_OK)
 8001980:	7dfb      	ldrb	r3, [r7, #23]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d10d      	bne.n	80019a2 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	68ba      	ldr	r2, [r7, #8]
 800198c:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	689b      	ldr	r3, [r3, #8]
 8001994:	f023 0118 	bic.w	r1, r3, #24
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	687a      	ldr	r2, [r7, #4]
 800199e:	430a      	orrs	r2, r1
 80019a0:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80019a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80019a4:	4618      	mov	r0, r3
 80019a6:	371c      	adds	r7, #28
 80019a8:	46bd      	mov	sp, r7
 80019aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ae:	4770      	bx	lr

080019b0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b086      	sub	sp, #24
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80019b8:	f7ff fde8 	bl	800158c <HAL_GetTick>
 80019bc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d101      	bne.n	80019c8 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80019c4:	2301      	movs	r3, #1
 80019c6:	e316      	b.n	8001ff6 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a66      	ldr	r2, [pc, #408]	; (8001b68 <HAL_DMA_Init+0x1b8>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d04a      	beq.n	8001a68 <HAL_DMA_Init+0xb8>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4a65      	ldr	r2, [pc, #404]	; (8001b6c <HAL_DMA_Init+0x1bc>)
 80019d8:	4293      	cmp	r3, r2
 80019da:	d045      	beq.n	8001a68 <HAL_DMA_Init+0xb8>
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4a63      	ldr	r2, [pc, #396]	; (8001b70 <HAL_DMA_Init+0x1c0>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d040      	beq.n	8001a68 <HAL_DMA_Init+0xb8>
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4a62      	ldr	r2, [pc, #392]	; (8001b74 <HAL_DMA_Init+0x1c4>)
 80019ec:	4293      	cmp	r3, r2
 80019ee:	d03b      	beq.n	8001a68 <HAL_DMA_Init+0xb8>
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a60      	ldr	r2, [pc, #384]	; (8001b78 <HAL_DMA_Init+0x1c8>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d036      	beq.n	8001a68 <HAL_DMA_Init+0xb8>
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4a5f      	ldr	r2, [pc, #380]	; (8001b7c <HAL_DMA_Init+0x1cc>)
 8001a00:	4293      	cmp	r3, r2
 8001a02:	d031      	beq.n	8001a68 <HAL_DMA_Init+0xb8>
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4a5d      	ldr	r2, [pc, #372]	; (8001b80 <HAL_DMA_Init+0x1d0>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d02c      	beq.n	8001a68 <HAL_DMA_Init+0xb8>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4a5c      	ldr	r2, [pc, #368]	; (8001b84 <HAL_DMA_Init+0x1d4>)
 8001a14:	4293      	cmp	r3, r2
 8001a16:	d027      	beq.n	8001a68 <HAL_DMA_Init+0xb8>
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a5a      	ldr	r2, [pc, #360]	; (8001b88 <HAL_DMA_Init+0x1d8>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d022      	beq.n	8001a68 <HAL_DMA_Init+0xb8>
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4a59      	ldr	r2, [pc, #356]	; (8001b8c <HAL_DMA_Init+0x1dc>)
 8001a28:	4293      	cmp	r3, r2
 8001a2a:	d01d      	beq.n	8001a68 <HAL_DMA_Init+0xb8>
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a57      	ldr	r2, [pc, #348]	; (8001b90 <HAL_DMA_Init+0x1e0>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d018      	beq.n	8001a68 <HAL_DMA_Init+0xb8>
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4a56      	ldr	r2, [pc, #344]	; (8001b94 <HAL_DMA_Init+0x1e4>)
 8001a3c:	4293      	cmp	r3, r2
 8001a3e:	d013      	beq.n	8001a68 <HAL_DMA_Init+0xb8>
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a54      	ldr	r2, [pc, #336]	; (8001b98 <HAL_DMA_Init+0x1e8>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d00e      	beq.n	8001a68 <HAL_DMA_Init+0xb8>
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4a53      	ldr	r2, [pc, #332]	; (8001b9c <HAL_DMA_Init+0x1ec>)
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d009      	beq.n	8001a68 <HAL_DMA_Init+0xb8>
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a51      	ldr	r2, [pc, #324]	; (8001ba0 <HAL_DMA_Init+0x1f0>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d004      	beq.n	8001a68 <HAL_DMA_Init+0xb8>
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4a50      	ldr	r2, [pc, #320]	; (8001ba4 <HAL_DMA_Init+0x1f4>)
 8001a64:	4293      	cmp	r3, r2
 8001a66:	d101      	bne.n	8001a6c <HAL_DMA_Init+0xbc>
 8001a68:	2301      	movs	r3, #1
 8001a6a:	e000      	b.n	8001a6e <HAL_DMA_Init+0xbe>
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	f000 813b 	beq.w	8001cea <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2200      	movs	r2, #0
 8001a78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2202      	movs	r2, #2
 8001a80:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4a37      	ldr	r2, [pc, #220]	; (8001b68 <HAL_DMA_Init+0x1b8>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d04a      	beq.n	8001b24 <HAL_DMA_Init+0x174>
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4a36      	ldr	r2, [pc, #216]	; (8001b6c <HAL_DMA_Init+0x1bc>)
 8001a94:	4293      	cmp	r3, r2
 8001a96:	d045      	beq.n	8001b24 <HAL_DMA_Init+0x174>
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4a34      	ldr	r2, [pc, #208]	; (8001b70 <HAL_DMA_Init+0x1c0>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d040      	beq.n	8001b24 <HAL_DMA_Init+0x174>
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4a33      	ldr	r2, [pc, #204]	; (8001b74 <HAL_DMA_Init+0x1c4>)
 8001aa8:	4293      	cmp	r3, r2
 8001aaa:	d03b      	beq.n	8001b24 <HAL_DMA_Init+0x174>
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a31      	ldr	r2, [pc, #196]	; (8001b78 <HAL_DMA_Init+0x1c8>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d036      	beq.n	8001b24 <HAL_DMA_Init+0x174>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4a30      	ldr	r2, [pc, #192]	; (8001b7c <HAL_DMA_Init+0x1cc>)
 8001abc:	4293      	cmp	r3, r2
 8001abe:	d031      	beq.n	8001b24 <HAL_DMA_Init+0x174>
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a2e      	ldr	r2, [pc, #184]	; (8001b80 <HAL_DMA_Init+0x1d0>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d02c      	beq.n	8001b24 <HAL_DMA_Init+0x174>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4a2d      	ldr	r2, [pc, #180]	; (8001b84 <HAL_DMA_Init+0x1d4>)
 8001ad0:	4293      	cmp	r3, r2
 8001ad2:	d027      	beq.n	8001b24 <HAL_DMA_Init+0x174>
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a2b      	ldr	r2, [pc, #172]	; (8001b88 <HAL_DMA_Init+0x1d8>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d022      	beq.n	8001b24 <HAL_DMA_Init+0x174>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4a2a      	ldr	r2, [pc, #168]	; (8001b8c <HAL_DMA_Init+0x1dc>)
 8001ae4:	4293      	cmp	r3, r2
 8001ae6:	d01d      	beq.n	8001b24 <HAL_DMA_Init+0x174>
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a28      	ldr	r2, [pc, #160]	; (8001b90 <HAL_DMA_Init+0x1e0>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d018      	beq.n	8001b24 <HAL_DMA_Init+0x174>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4a27      	ldr	r2, [pc, #156]	; (8001b94 <HAL_DMA_Init+0x1e4>)
 8001af8:	4293      	cmp	r3, r2
 8001afa:	d013      	beq.n	8001b24 <HAL_DMA_Init+0x174>
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a25      	ldr	r2, [pc, #148]	; (8001b98 <HAL_DMA_Init+0x1e8>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d00e      	beq.n	8001b24 <HAL_DMA_Init+0x174>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4a24      	ldr	r2, [pc, #144]	; (8001b9c <HAL_DMA_Init+0x1ec>)
 8001b0c:	4293      	cmp	r3, r2
 8001b0e:	d009      	beq.n	8001b24 <HAL_DMA_Init+0x174>
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a22      	ldr	r2, [pc, #136]	; (8001ba0 <HAL_DMA_Init+0x1f0>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d004      	beq.n	8001b24 <HAL_DMA_Init+0x174>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4a21      	ldr	r2, [pc, #132]	; (8001ba4 <HAL_DMA_Init+0x1f4>)
 8001b20:	4293      	cmp	r3, r2
 8001b22:	d108      	bne.n	8001b36 <HAL_DMA_Init+0x186>
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	681a      	ldr	r2, [r3, #0]
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f022 0201 	bic.w	r2, r2, #1
 8001b32:	601a      	str	r2, [r3, #0]
 8001b34:	e007      	b.n	8001b46 <HAL_DMA_Init+0x196>
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	681a      	ldr	r2, [r3, #0]
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f022 0201 	bic.w	r2, r2, #1
 8001b44:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001b46:	e02f      	b.n	8001ba8 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001b48:	f7ff fd20 	bl	800158c <HAL_GetTick>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	693b      	ldr	r3, [r7, #16]
 8001b50:	1ad3      	subs	r3, r2, r3
 8001b52:	2b05      	cmp	r3, #5
 8001b54:	d928      	bls.n	8001ba8 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2220      	movs	r2, #32
 8001b5a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2203      	movs	r2, #3
 8001b60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8001b64:	2301      	movs	r3, #1
 8001b66:	e246      	b.n	8001ff6 <HAL_DMA_Init+0x646>
 8001b68:	40020010 	.word	0x40020010
 8001b6c:	40020028 	.word	0x40020028
 8001b70:	40020040 	.word	0x40020040
 8001b74:	40020058 	.word	0x40020058
 8001b78:	40020070 	.word	0x40020070
 8001b7c:	40020088 	.word	0x40020088
 8001b80:	400200a0 	.word	0x400200a0
 8001b84:	400200b8 	.word	0x400200b8
 8001b88:	40020410 	.word	0x40020410
 8001b8c:	40020428 	.word	0x40020428
 8001b90:	40020440 	.word	0x40020440
 8001b94:	40020458 	.word	0x40020458
 8001b98:	40020470 	.word	0x40020470
 8001b9c:	40020488 	.word	0x40020488
 8001ba0:	400204a0 	.word	0x400204a0
 8001ba4:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f003 0301 	and.w	r3, r3, #1
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d1c8      	bne.n	8001b48 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001bbe:	697a      	ldr	r2, [r7, #20]
 8001bc0:	4b83      	ldr	r3, [pc, #524]	; (8001dd0 <HAL_DMA_Init+0x420>)
 8001bc2:	4013      	ands	r3, r2
 8001bc4:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8001bce:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	691b      	ldr	r3, [r3, #16]
 8001bd4:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001bda:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	699b      	ldr	r3, [r3, #24]
 8001be0:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001be6:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6a1b      	ldr	r3, [r3, #32]
 8001bec:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8001bee:	697a      	ldr	r2, [r7, #20]
 8001bf0:	4313      	orrs	r3, r2
 8001bf2:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bf8:	2b04      	cmp	r3, #4
 8001bfa:	d107      	bne.n	8001c0c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c04:	4313      	orrs	r3, r2
 8001c06:	697a      	ldr	r2, [r7, #20]
 8001c08:	4313      	orrs	r3, r2
 8001c0a:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8001c0c:	4b71      	ldr	r3, [pc, #452]	; (8001dd4 <HAL_DMA_Init+0x424>)
 8001c0e:	681a      	ldr	r2, [r3, #0]
 8001c10:	4b71      	ldr	r3, [pc, #452]	; (8001dd8 <HAL_DMA_Init+0x428>)
 8001c12:	4013      	ands	r3, r2
 8001c14:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001c18:	d328      	bcc.n	8001c6c <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	2b28      	cmp	r3, #40	; 0x28
 8001c20:	d903      	bls.n	8001c2a <HAL_DMA_Init+0x27a>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	2b2e      	cmp	r3, #46	; 0x2e
 8001c28:	d917      	bls.n	8001c5a <HAL_DMA_Init+0x2aa>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	2b3e      	cmp	r3, #62	; 0x3e
 8001c30:	d903      	bls.n	8001c3a <HAL_DMA_Init+0x28a>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	2b42      	cmp	r3, #66	; 0x42
 8001c38:	d90f      	bls.n	8001c5a <HAL_DMA_Init+0x2aa>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	2b46      	cmp	r3, #70	; 0x46
 8001c40:	d903      	bls.n	8001c4a <HAL_DMA_Init+0x29a>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	2b48      	cmp	r3, #72	; 0x48
 8001c48:	d907      	bls.n	8001c5a <HAL_DMA_Init+0x2aa>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	2b4e      	cmp	r3, #78	; 0x4e
 8001c50:	d905      	bls.n	8001c5e <HAL_DMA_Init+0x2ae>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	2b52      	cmp	r3, #82	; 0x52
 8001c58:	d801      	bhi.n	8001c5e <HAL_DMA_Init+0x2ae>
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	e000      	b.n	8001c60 <HAL_DMA_Init+0x2b0>
 8001c5e:	2300      	movs	r3, #0
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d003      	beq.n	8001c6c <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001c6a:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	697a      	ldr	r2, [r7, #20]
 8001c72:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	695b      	ldr	r3, [r3, #20]
 8001c7a:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001c7c:	697b      	ldr	r3, [r7, #20]
 8001c7e:	f023 0307 	bic.w	r3, r3, #7
 8001c82:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c88:	697a      	ldr	r2, [r7, #20]
 8001c8a:	4313      	orrs	r3, r2
 8001c8c:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c92:	2b04      	cmp	r3, #4
 8001c94:	d117      	bne.n	8001cc6 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c9a:	697a      	ldr	r2, [r7, #20]
 8001c9c:	4313      	orrs	r3, r2
 8001c9e:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d00e      	beq.n	8001cc6 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001ca8:	6878      	ldr	r0, [r7, #4]
 8001caa:	f002 fb3d 	bl	8004328 <DMA_CheckFifoParam>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d008      	beq.n	8001cc6 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2240      	movs	r2, #64	; 0x40
 8001cb8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2201      	movs	r2, #1
 8001cbe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	e197      	b.n	8001ff6 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	697a      	ldr	r2, [r7, #20]
 8001ccc:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001cce:	6878      	ldr	r0, [r7, #4]
 8001cd0:	f002 fa78 	bl	80041c4 <DMA_CalcBaseAndBitshift>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cdc:	f003 031f 	and.w	r3, r3, #31
 8001ce0:	223f      	movs	r2, #63	; 0x3f
 8001ce2:	409a      	lsls	r2, r3
 8001ce4:	68bb      	ldr	r3, [r7, #8]
 8001ce6:	609a      	str	r2, [r3, #8]
 8001ce8:	e0cd      	b.n	8001e86 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4a3b      	ldr	r2, [pc, #236]	; (8001ddc <HAL_DMA_Init+0x42c>)
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d022      	beq.n	8001d3a <HAL_DMA_Init+0x38a>
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a39      	ldr	r2, [pc, #228]	; (8001de0 <HAL_DMA_Init+0x430>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d01d      	beq.n	8001d3a <HAL_DMA_Init+0x38a>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4a38      	ldr	r2, [pc, #224]	; (8001de4 <HAL_DMA_Init+0x434>)
 8001d04:	4293      	cmp	r3, r2
 8001d06:	d018      	beq.n	8001d3a <HAL_DMA_Init+0x38a>
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a36      	ldr	r2, [pc, #216]	; (8001de8 <HAL_DMA_Init+0x438>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d013      	beq.n	8001d3a <HAL_DMA_Init+0x38a>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4a35      	ldr	r2, [pc, #212]	; (8001dec <HAL_DMA_Init+0x43c>)
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d00e      	beq.n	8001d3a <HAL_DMA_Init+0x38a>
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a33      	ldr	r2, [pc, #204]	; (8001df0 <HAL_DMA_Init+0x440>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d009      	beq.n	8001d3a <HAL_DMA_Init+0x38a>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4a32      	ldr	r2, [pc, #200]	; (8001df4 <HAL_DMA_Init+0x444>)
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d004      	beq.n	8001d3a <HAL_DMA_Init+0x38a>
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4a30      	ldr	r2, [pc, #192]	; (8001df8 <HAL_DMA_Init+0x448>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d101      	bne.n	8001d3e <HAL_DMA_Init+0x38e>
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	e000      	b.n	8001d40 <HAL_DMA_Init+0x390>
 8001d3e:	2300      	movs	r3, #0
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	f000 8097 	beq.w	8001e74 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4a24      	ldr	r2, [pc, #144]	; (8001ddc <HAL_DMA_Init+0x42c>)
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d021      	beq.n	8001d94 <HAL_DMA_Init+0x3e4>
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4a22      	ldr	r2, [pc, #136]	; (8001de0 <HAL_DMA_Init+0x430>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d01c      	beq.n	8001d94 <HAL_DMA_Init+0x3e4>
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4a21      	ldr	r2, [pc, #132]	; (8001de4 <HAL_DMA_Init+0x434>)
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d017      	beq.n	8001d94 <HAL_DMA_Init+0x3e4>
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a1f      	ldr	r2, [pc, #124]	; (8001de8 <HAL_DMA_Init+0x438>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d012      	beq.n	8001d94 <HAL_DMA_Init+0x3e4>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4a1e      	ldr	r2, [pc, #120]	; (8001dec <HAL_DMA_Init+0x43c>)
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d00d      	beq.n	8001d94 <HAL_DMA_Init+0x3e4>
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a1c      	ldr	r2, [pc, #112]	; (8001df0 <HAL_DMA_Init+0x440>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d008      	beq.n	8001d94 <HAL_DMA_Init+0x3e4>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4a1b      	ldr	r2, [pc, #108]	; (8001df4 <HAL_DMA_Init+0x444>)
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	d003      	beq.n	8001d94 <HAL_DMA_Init+0x3e4>
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4a19      	ldr	r2, [pc, #100]	; (8001df8 <HAL_DMA_Init+0x448>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2200      	movs	r2, #0
 8001d9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2202      	movs	r2, #2
 8001da2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8001dae:	697a      	ldr	r2, [r7, #20]
 8001db0:	4b12      	ldr	r3, [pc, #72]	; (8001dfc <HAL_DMA_Init+0x44c>)
 8001db2:	4013      	ands	r3, r2
 8001db4:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	689b      	ldr	r3, [r3, #8]
 8001dba:	2b40      	cmp	r3, #64	; 0x40
 8001dbc:	d020      	beq.n	8001e00 <HAL_DMA_Init+0x450>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	689b      	ldr	r3, [r3, #8]
 8001dc2:	2b80      	cmp	r3, #128	; 0x80
 8001dc4:	d102      	bne.n	8001dcc <HAL_DMA_Init+0x41c>
 8001dc6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001dca:	e01a      	b.n	8001e02 <HAL_DMA_Init+0x452>
 8001dcc:	2300      	movs	r3, #0
 8001dce:	e018      	b.n	8001e02 <HAL_DMA_Init+0x452>
 8001dd0:	fe10803f 	.word	0xfe10803f
 8001dd4:	5c001000 	.word	0x5c001000
 8001dd8:	ffff0000 	.word	0xffff0000
 8001ddc:	58025408 	.word	0x58025408
 8001de0:	5802541c 	.word	0x5802541c
 8001de4:	58025430 	.word	0x58025430
 8001de8:	58025444 	.word	0x58025444
 8001dec:	58025458 	.word	0x58025458
 8001df0:	5802546c 	.word	0x5802546c
 8001df4:	58025480 	.word	0x58025480
 8001df8:	58025494 	.word	0x58025494
 8001dfc:	fffe000f 	.word	0xfffe000f
 8001e00:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001e02:	687a      	ldr	r2, [r7, #4]
 8001e04:	68d2      	ldr	r2, [r2, #12]
 8001e06:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001e08:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	691b      	ldr	r3, [r3, #16]
 8001e0e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001e10:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	695b      	ldr	r3, [r3, #20]
 8001e16:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001e18:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	699b      	ldr	r3, [r3, #24]
 8001e1e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001e20:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	69db      	ldr	r3, [r3, #28]
 8001e26:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001e28:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6a1b      	ldr	r3, [r3, #32]
 8001e2e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001e30:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001e32:	697a      	ldr	r2, [r7, #20]
 8001e34:	4313      	orrs	r3, r2
 8001e36:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	697a      	ldr	r2, [r7, #20]
 8001e3e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	461a      	mov	r2, r3
 8001e46:	4b6e      	ldr	r3, [pc, #440]	; (8002000 <HAL_DMA_Init+0x650>)
 8001e48:	4413      	add	r3, r2
 8001e4a:	4a6e      	ldr	r2, [pc, #440]	; (8002004 <HAL_DMA_Init+0x654>)
 8001e4c:	fba2 2303 	umull	r2, r3, r2, r3
 8001e50:	091b      	lsrs	r3, r3, #4
 8001e52:	009a      	lsls	r2, r3, #2
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001e58:	6878      	ldr	r0, [r7, #4]
 8001e5a:	f002 f9b3 	bl	80041c4 <DMA_CalcBaseAndBitshift>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e66:	f003 031f 	and.w	r3, r3, #31
 8001e6a:	2201      	movs	r2, #1
 8001e6c:	409a      	lsls	r2, r3
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	605a      	str	r2, [r3, #4]
 8001e72:	e008      	b.n	8001e86 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2240      	movs	r2, #64	; 0x40
 8001e78:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2203      	movs	r2, #3
 8001e7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8001e82:	2301      	movs	r3, #1
 8001e84:	e0b7      	b.n	8001ff6 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4a5f      	ldr	r2, [pc, #380]	; (8002008 <HAL_DMA_Init+0x658>)
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d072      	beq.n	8001f76 <HAL_DMA_Init+0x5c6>
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a5d      	ldr	r2, [pc, #372]	; (800200c <HAL_DMA_Init+0x65c>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d06d      	beq.n	8001f76 <HAL_DMA_Init+0x5c6>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4a5c      	ldr	r2, [pc, #368]	; (8002010 <HAL_DMA_Init+0x660>)
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d068      	beq.n	8001f76 <HAL_DMA_Init+0x5c6>
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a5a      	ldr	r2, [pc, #360]	; (8002014 <HAL_DMA_Init+0x664>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d063      	beq.n	8001f76 <HAL_DMA_Init+0x5c6>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4a59      	ldr	r2, [pc, #356]	; (8002018 <HAL_DMA_Init+0x668>)
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d05e      	beq.n	8001f76 <HAL_DMA_Init+0x5c6>
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a57      	ldr	r2, [pc, #348]	; (800201c <HAL_DMA_Init+0x66c>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d059      	beq.n	8001f76 <HAL_DMA_Init+0x5c6>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4a56      	ldr	r2, [pc, #344]	; (8002020 <HAL_DMA_Init+0x670>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d054      	beq.n	8001f76 <HAL_DMA_Init+0x5c6>
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4a54      	ldr	r2, [pc, #336]	; (8002024 <HAL_DMA_Init+0x674>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d04f      	beq.n	8001f76 <HAL_DMA_Init+0x5c6>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4a53      	ldr	r2, [pc, #332]	; (8002028 <HAL_DMA_Init+0x678>)
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d04a      	beq.n	8001f76 <HAL_DMA_Init+0x5c6>
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4a51      	ldr	r2, [pc, #324]	; (800202c <HAL_DMA_Init+0x67c>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d045      	beq.n	8001f76 <HAL_DMA_Init+0x5c6>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4a50      	ldr	r2, [pc, #320]	; (8002030 <HAL_DMA_Init+0x680>)
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d040      	beq.n	8001f76 <HAL_DMA_Init+0x5c6>
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4a4e      	ldr	r2, [pc, #312]	; (8002034 <HAL_DMA_Init+0x684>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d03b      	beq.n	8001f76 <HAL_DMA_Init+0x5c6>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4a4d      	ldr	r2, [pc, #308]	; (8002038 <HAL_DMA_Init+0x688>)
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d036      	beq.n	8001f76 <HAL_DMA_Init+0x5c6>
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a4b      	ldr	r2, [pc, #300]	; (800203c <HAL_DMA_Init+0x68c>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d031      	beq.n	8001f76 <HAL_DMA_Init+0x5c6>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4a4a      	ldr	r2, [pc, #296]	; (8002040 <HAL_DMA_Init+0x690>)
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d02c      	beq.n	8001f76 <HAL_DMA_Init+0x5c6>
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a48      	ldr	r2, [pc, #288]	; (8002044 <HAL_DMA_Init+0x694>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d027      	beq.n	8001f76 <HAL_DMA_Init+0x5c6>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4a47      	ldr	r2, [pc, #284]	; (8002048 <HAL_DMA_Init+0x698>)
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d022      	beq.n	8001f76 <HAL_DMA_Init+0x5c6>
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a45      	ldr	r2, [pc, #276]	; (800204c <HAL_DMA_Init+0x69c>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d01d      	beq.n	8001f76 <HAL_DMA_Init+0x5c6>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4a44      	ldr	r2, [pc, #272]	; (8002050 <HAL_DMA_Init+0x6a0>)
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d018      	beq.n	8001f76 <HAL_DMA_Init+0x5c6>
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a42      	ldr	r2, [pc, #264]	; (8002054 <HAL_DMA_Init+0x6a4>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d013      	beq.n	8001f76 <HAL_DMA_Init+0x5c6>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4a41      	ldr	r2, [pc, #260]	; (8002058 <HAL_DMA_Init+0x6a8>)
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d00e      	beq.n	8001f76 <HAL_DMA_Init+0x5c6>
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a3f      	ldr	r2, [pc, #252]	; (800205c <HAL_DMA_Init+0x6ac>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d009      	beq.n	8001f76 <HAL_DMA_Init+0x5c6>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4a3e      	ldr	r2, [pc, #248]	; (8002060 <HAL_DMA_Init+0x6b0>)
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d004      	beq.n	8001f76 <HAL_DMA_Init+0x5c6>
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a3c      	ldr	r2, [pc, #240]	; (8002064 <HAL_DMA_Init+0x6b4>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d101      	bne.n	8001f7a <HAL_DMA_Init+0x5ca>
 8001f76:	2301      	movs	r3, #1
 8001f78:	e000      	b.n	8001f7c <HAL_DMA_Init+0x5cc>
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d032      	beq.n	8001fe6 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001f80:	6878      	ldr	r0, [r7, #4]
 8001f82:	f002 fa4d 	bl	8004420 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	689b      	ldr	r3, [r3, #8]
 8001f8a:	2b80      	cmp	r3, #128	; 0x80
 8001f8c:	d102      	bne.n	8001f94 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2200      	movs	r2, #0
 8001f92:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	685a      	ldr	r2, [r3, #4]
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f9c:	b2d2      	uxtb	r2, r2
 8001f9e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001fa4:	687a      	ldr	r2, [r7, #4]
 8001fa6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001fa8:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d010      	beq.n	8001fd4 <HAL_DMA_Init+0x624>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	2b08      	cmp	r3, #8
 8001fb8:	d80c      	bhi.n	8001fd4 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001fba:	6878      	ldr	r0, [r7, #4]
 8001fbc:	f002 faca 	bl	8004554 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fcc:	687a      	ldr	r2, [r7, #4]
 8001fce:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8001fd0:	605a      	str	r2, [r3, #4]
 8001fd2:	e008      	b.n	8001fe6 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2200      	movs	r2, #0
 8001fde:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2200      	movs	r2, #0
 8001fea:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2201      	movs	r2, #1
 8001ff0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001ff4:	2300      	movs	r3, #0
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	3718      	adds	r7, #24
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	bf00      	nop
 8002000:	a7fdabf8 	.word	0xa7fdabf8
 8002004:	cccccccd 	.word	0xcccccccd
 8002008:	40020010 	.word	0x40020010
 800200c:	40020028 	.word	0x40020028
 8002010:	40020040 	.word	0x40020040
 8002014:	40020058 	.word	0x40020058
 8002018:	40020070 	.word	0x40020070
 800201c:	40020088 	.word	0x40020088
 8002020:	400200a0 	.word	0x400200a0
 8002024:	400200b8 	.word	0x400200b8
 8002028:	40020410 	.word	0x40020410
 800202c:	40020428 	.word	0x40020428
 8002030:	40020440 	.word	0x40020440
 8002034:	40020458 	.word	0x40020458
 8002038:	40020470 	.word	0x40020470
 800203c:	40020488 	.word	0x40020488
 8002040:	400204a0 	.word	0x400204a0
 8002044:	400204b8 	.word	0x400204b8
 8002048:	58025408 	.word	0x58025408
 800204c:	5802541c 	.word	0x5802541c
 8002050:	58025430 	.word	0x58025430
 8002054:	58025444 	.word	0x58025444
 8002058:	58025458 	.word	0x58025458
 800205c:	5802546c 	.word	0x5802546c
 8002060:	58025480 	.word	0x58025480
 8002064:	58025494 	.word	0x58025494

08002068 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b086      	sub	sp, #24
 800206c:	af00      	add	r7, sp, #0
 800206e:	60f8      	str	r0, [r7, #12]
 8002070:	60b9      	str	r1, [r7, #8]
 8002072:	607a      	str	r2, [r7, #4]
 8002074:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002076:	2300      	movs	r3, #0
 8002078:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d101      	bne.n	8002084 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8002080:	2301      	movs	r3, #1
 8002082:	e226      	b.n	80024d2 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800208a:	2b01      	cmp	r3, #1
 800208c:	d101      	bne.n	8002092 <HAL_DMA_Start_IT+0x2a>
 800208e:	2302      	movs	r3, #2
 8002090:	e21f      	b.n	80024d2 <HAL_DMA_Start_IT+0x46a>
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	2201      	movs	r2, #1
 8002096:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80020a0:	b2db      	uxtb	r3, r3
 80020a2:	2b01      	cmp	r3, #1
 80020a4:	f040 820a 	bne.w	80024bc <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	2202      	movs	r2, #2
 80020ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	2200      	movs	r2, #0
 80020b4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4a68      	ldr	r2, [pc, #416]	; (800225c <HAL_DMA_Start_IT+0x1f4>)
 80020bc:	4293      	cmp	r3, r2
 80020be:	d04a      	beq.n	8002156 <HAL_DMA_Start_IT+0xee>
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a66      	ldr	r2, [pc, #408]	; (8002260 <HAL_DMA_Start_IT+0x1f8>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d045      	beq.n	8002156 <HAL_DMA_Start_IT+0xee>
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4a65      	ldr	r2, [pc, #404]	; (8002264 <HAL_DMA_Start_IT+0x1fc>)
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d040      	beq.n	8002156 <HAL_DMA_Start_IT+0xee>
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a63      	ldr	r2, [pc, #396]	; (8002268 <HAL_DMA_Start_IT+0x200>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d03b      	beq.n	8002156 <HAL_DMA_Start_IT+0xee>
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4a62      	ldr	r2, [pc, #392]	; (800226c <HAL_DMA_Start_IT+0x204>)
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d036      	beq.n	8002156 <HAL_DMA_Start_IT+0xee>
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a60      	ldr	r2, [pc, #384]	; (8002270 <HAL_DMA_Start_IT+0x208>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d031      	beq.n	8002156 <HAL_DMA_Start_IT+0xee>
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4a5f      	ldr	r2, [pc, #380]	; (8002274 <HAL_DMA_Start_IT+0x20c>)
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d02c      	beq.n	8002156 <HAL_DMA_Start_IT+0xee>
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4a5d      	ldr	r2, [pc, #372]	; (8002278 <HAL_DMA_Start_IT+0x210>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d027      	beq.n	8002156 <HAL_DMA_Start_IT+0xee>
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4a5c      	ldr	r2, [pc, #368]	; (800227c <HAL_DMA_Start_IT+0x214>)
 800210c:	4293      	cmp	r3, r2
 800210e:	d022      	beq.n	8002156 <HAL_DMA_Start_IT+0xee>
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a5a      	ldr	r2, [pc, #360]	; (8002280 <HAL_DMA_Start_IT+0x218>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d01d      	beq.n	8002156 <HAL_DMA_Start_IT+0xee>
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4a59      	ldr	r2, [pc, #356]	; (8002284 <HAL_DMA_Start_IT+0x21c>)
 8002120:	4293      	cmp	r3, r2
 8002122:	d018      	beq.n	8002156 <HAL_DMA_Start_IT+0xee>
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a57      	ldr	r2, [pc, #348]	; (8002288 <HAL_DMA_Start_IT+0x220>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d013      	beq.n	8002156 <HAL_DMA_Start_IT+0xee>
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4a56      	ldr	r2, [pc, #344]	; (800228c <HAL_DMA_Start_IT+0x224>)
 8002134:	4293      	cmp	r3, r2
 8002136:	d00e      	beq.n	8002156 <HAL_DMA_Start_IT+0xee>
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a54      	ldr	r2, [pc, #336]	; (8002290 <HAL_DMA_Start_IT+0x228>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d009      	beq.n	8002156 <HAL_DMA_Start_IT+0xee>
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4a53      	ldr	r2, [pc, #332]	; (8002294 <HAL_DMA_Start_IT+0x22c>)
 8002148:	4293      	cmp	r3, r2
 800214a:	d004      	beq.n	8002156 <HAL_DMA_Start_IT+0xee>
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a51      	ldr	r2, [pc, #324]	; (8002298 <HAL_DMA_Start_IT+0x230>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d108      	bne.n	8002168 <HAL_DMA_Start_IT+0x100>
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	681a      	ldr	r2, [r3, #0]
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f022 0201 	bic.w	r2, r2, #1
 8002164:	601a      	str	r2, [r3, #0]
 8002166:	e007      	b.n	8002178 <HAL_DMA_Start_IT+0x110>
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	681a      	ldr	r2, [r3, #0]
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f022 0201 	bic.w	r2, r2, #1
 8002176:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	687a      	ldr	r2, [r7, #4]
 800217c:	68b9      	ldr	r1, [r7, #8]
 800217e:	68f8      	ldr	r0, [r7, #12]
 8002180:	f001 fe74 	bl	8003e6c <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a34      	ldr	r2, [pc, #208]	; (800225c <HAL_DMA_Start_IT+0x1f4>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d04a      	beq.n	8002224 <HAL_DMA_Start_IT+0x1bc>
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4a33      	ldr	r2, [pc, #204]	; (8002260 <HAL_DMA_Start_IT+0x1f8>)
 8002194:	4293      	cmp	r3, r2
 8002196:	d045      	beq.n	8002224 <HAL_DMA_Start_IT+0x1bc>
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a31      	ldr	r2, [pc, #196]	; (8002264 <HAL_DMA_Start_IT+0x1fc>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d040      	beq.n	8002224 <HAL_DMA_Start_IT+0x1bc>
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4a30      	ldr	r2, [pc, #192]	; (8002268 <HAL_DMA_Start_IT+0x200>)
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d03b      	beq.n	8002224 <HAL_DMA_Start_IT+0x1bc>
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a2e      	ldr	r2, [pc, #184]	; (800226c <HAL_DMA_Start_IT+0x204>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d036      	beq.n	8002224 <HAL_DMA_Start_IT+0x1bc>
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4a2d      	ldr	r2, [pc, #180]	; (8002270 <HAL_DMA_Start_IT+0x208>)
 80021bc:	4293      	cmp	r3, r2
 80021be:	d031      	beq.n	8002224 <HAL_DMA_Start_IT+0x1bc>
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a2b      	ldr	r2, [pc, #172]	; (8002274 <HAL_DMA_Start_IT+0x20c>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d02c      	beq.n	8002224 <HAL_DMA_Start_IT+0x1bc>
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4a2a      	ldr	r2, [pc, #168]	; (8002278 <HAL_DMA_Start_IT+0x210>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d027      	beq.n	8002224 <HAL_DMA_Start_IT+0x1bc>
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a28      	ldr	r2, [pc, #160]	; (800227c <HAL_DMA_Start_IT+0x214>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d022      	beq.n	8002224 <HAL_DMA_Start_IT+0x1bc>
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4a27      	ldr	r2, [pc, #156]	; (8002280 <HAL_DMA_Start_IT+0x218>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d01d      	beq.n	8002224 <HAL_DMA_Start_IT+0x1bc>
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4a25      	ldr	r2, [pc, #148]	; (8002284 <HAL_DMA_Start_IT+0x21c>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d018      	beq.n	8002224 <HAL_DMA_Start_IT+0x1bc>
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4a24      	ldr	r2, [pc, #144]	; (8002288 <HAL_DMA_Start_IT+0x220>)
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d013      	beq.n	8002224 <HAL_DMA_Start_IT+0x1bc>
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a22      	ldr	r2, [pc, #136]	; (800228c <HAL_DMA_Start_IT+0x224>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d00e      	beq.n	8002224 <HAL_DMA_Start_IT+0x1bc>
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4a21      	ldr	r2, [pc, #132]	; (8002290 <HAL_DMA_Start_IT+0x228>)
 800220c:	4293      	cmp	r3, r2
 800220e:	d009      	beq.n	8002224 <HAL_DMA_Start_IT+0x1bc>
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a1f      	ldr	r2, [pc, #124]	; (8002294 <HAL_DMA_Start_IT+0x22c>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d004      	beq.n	8002224 <HAL_DMA_Start_IT+0x1bc>
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4a1e      	ldr	r2, [pc, #120]	; (8002298 <HAL_DMA_Start_IT+0x230>)
 8002220:	4293      	cmp	r3, r2
 8002222:	d101      	bne.n	8002228 <HAL_DMA_Start_IT+0x1c0>
 8002224:	2301      	movs	r3, #1
 8002226:	e000      	b.n	800222a <HAL_DMA_Start_IT+0x1c2>
 8002228:	2300      	movs	r3, #0
 800222a:	2b00      	cmp	r3, #0
 800222c:	d036      	beq.n	800229c <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f023 021e 	bic.w	r2, r3, #30
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f042 0216 	orr.w	r2, r2, #22
 8002240:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002246:	2b00      	cmp	r3, #0
 8002248:	d03e      	beq.n	80022c8 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	681a      	ldr	r2, [r3, #0]
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f042 0208 	orr.w	r2, r2, #8
 8002258:	601a      	str	r2, [r3, #0]
 800225a:	e035      	b.n	80022c8 <HAL_DMA_Start_IT+0x260>
 800225c:	40020010 	.word	0x40020010
 8002260:	40020028 	.word	0x40020028
 8002264:	40020040 	.word	0x40020040
 8002268:	40020058 	.word	0x40020058
 800226c:	40020070 	.word	0x40020070
 8002270:	40020088 	.word	0x40020088
 8002274:	400200a0 	.word	0x400200a0
 8002278:	400200b8 	.word	0x400200b8
 800227c:	40020410 	.word	0x40020410
 8002280:	40020428 	.word	0x40020428
 8002284:	40020440 	.word	0x40020440
 8002288:	40020458 	.word	0x40020458
 800228c:	40020470 	.word	0x40020470
 8002290:	40020488 	.word	0x40020488
 8002294:	400204a0 	.word	0x400204a0
 8002298:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f023 020e 	bic.w	r2, r3, #14
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f042 020a 	orr.w	r2, r2, #10
 80022ae:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d007      	beq.n	80022c8 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	681a      	ldr	r2, [r3, #0]
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f042 0204 	orr.w	r2, r2, #4
 80022c6:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a83      	ldr	r2, [pc, #524]	; (80024dc <HAL_DMA_Start_IT+0x474>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d072      	beq.n	80023b8 <HAL_DMA_Start_IT+0x350>
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4a82      	ldr	r2, [pc, #520]	; (80024e0 <HAL_DMA_Start_IT+0x478>)
 80022d8:	4293      	cmp	r3, r2
 80022da:	d06d      	beq.n	80023b8 <HAL_DMA_Start_IT+0x350>
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4a80      	ldr	r2, [pc, #512]	; (80024e4 <HAL_DMA_Start_IT+0x47c>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d068      	beq.n	80023b8 <HAL_DMA_Start_IT+0x350>
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4a7f      	ldr	r2, [pc, #508]	; (80024e8 <HAL_DMA_Start_IT+0x480>)
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d063      	beq.n	80023b8 <HAL_DMA_Start_IT+0x350>
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a7d      	ldr	r2, [pc, #500]	; (80024ec <HAL_DMA_Start_IT+0x484>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d05e      	beq.n	80023b8 <HAL_DMA_Start_IT+0x350>
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4a7c      	ldr	r2, [pc, #496]	; (80024f0 <HAL_DMA_Start_IT+0x488>)
 8002300:	4293      	cmp	r3, r2
 8002302:	d059      	beq.n	80023b8 <HAL_DMA_Start_IT+0x350>
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4a7a      	ldr	r2, [pc, #488]	; (80024f4 <HAL_DMA_Start_IT+0x48c>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d054      	beq.n	80023b8 <HAL_DMA_Start_IT+0x350>
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4a79      	ldr	r2, [pc, #484]	; (80024f8 <HAL_DMA_Start_IT+0x490>)
 8002314:	4293      	cmp	r3, r2
 8002316:	d04f      	beq.n	80023b8 <HAL_DMA_Start_IT+0x350>
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a77      	ldr	r2, [pc, #476]	; (80024fc <HAL_DMA_Start_IT+0x494>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d04a      	beq.n	80023b8 <HAL_DMA_Start_IT+0x350>
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4a76      	ldr	r2, [pc, #472]	; (8002500 <HAL_DMA_Start_IT+0x498>)
 8002328:	4293      	cmp	r3, r2
 800232a:	d045      	beq.n	80023b8 <HAL_DMA_Start_IT+0x350>
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4a74      	ldr	r2, [pc, #464]	; (8002504 <HAL_DMA_Start_IT+0x49c>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d040      	beq.n	80023b8 <HAL_DMA_Start_IT+0x350>
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4a73      	ldr	r2, [pc, #460]	; (8002508 <HAL_DMA_Start_IT+0x4a0>)
 800233c:	4293      	cmp	r3, r2
 800233e:	d03b      	beq.n	80023b8 <HAL_DMA_Start_IT+0x350>
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a71      	ldr	r2, [pc, #452]	; (800250c <HAL_DMA_Start_IT+0x4a4>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d036      	beq.n	80023b8 <HAL_DMA_Start_IT+0x350>
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4a70      	ldr	r2, [pc, #448]	; (8002510 <HAL_DMA_Start_IT+0x4a8>)
 8002350:	4293      	cmp	r3, r2
 8002352:	d031      	beq.n	80023b8 <HAL_DMA_Start_IT+0x350>
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a6e      	ldr	r2, [pc, #440]	; (8002514 <HAL_DMA_Start_IT+0x4ac>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d02c      	beq.n	80023b8 <HAL_DMA_Start_IT+0x350>
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4a6d      	ldr	r2, [pc, #436]	; (8002518 <HAL_DMA_Start_IT+0x4b0>)
 8002364:	4293      	cmp	r3, r2
 8002366:	d027      	beq.n	80023b8 <HAL_DMA_Start_IT+0x350>
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a6b      	ldr	r2, [pc, #428]	; (800251c <HAL_DMA_Start_IT+0x4b4>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d022      	beq.n	80023b8 <HAL_DMA_Start_IT+0x350>
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4a6a      	ldr	r2, [pc, #424]	; (8002520 <HAL_DMA_Start_IT+0x4b8>)
 8002378:	4293      	cmp	r3, r2
 800237a:	d01d      	beq.n	80023b8 <HAL_DMA_Start_IT+0x350>
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a68      	ldr	r2, [pc, #416]	; (8002524 <HAL_DMA_Start_IT+0x4bc>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d018      	beq.n	80023b8 <HAL_DMA_Start_IT+0x350>
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4a67      	ldr	r2, [pc, #412]	; (8002528 <HAL_DMA_Start_IT+0x4c0>)
 800238c:	4293      	cmp	r3, r2
 800238e:	d013      	beq.n	80023b8 <HAL_DMA_Start_IT+0x350>
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a65      	ldr	r2, [pc, #404]	; (800252c <HAL_DMA_Start_IT+0x4c4>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d00e      	beq.n	80023b8 <HAL_DMA_Start_IT+0x350>
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4a64      	ldr	r2, [pc, #400]	; (8002530 <HAL_DMA_Start_IT+0x4c8>)
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d009      	beq.n	80023b8 <HAL_DMA_Start_IT+0x350>
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a62      	ldr	r2, [pc, #392]	; (8002534 <HAL_DMA_Start_IT+0x4cc>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d004      	beq.n	80023b8 <HAL_DMA_Start_IT+0x350>
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4a61      	ldr	r2, [pc, #388]	; (8002538 <HAL_DMA_Start_IT+0x4d0>)
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d101      	bne.n	80023bc <HAL_DMA_Start_IT+0x354>
 80023b8:	2301      	movs	r3, #1
 80023ba:	e000      	b.n	80023be <HAL_DMA_Start_IT+0x356>
 80023bc:	2300      	movs	r3, #0
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d01a      	beq.n	80023f8 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d007      	beq.n	80023e0 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023da:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80023de:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d007      	beq.n	80023f8 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80023ec:	681a      	ldr	r2, [r3, #0]
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80023f2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80023f6:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a37      	ldr	r2, [pc, #220]	; (80024dc <HAL_DMA_Start_IT+0x474>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d04a      	beq.n	8002498 <HAL_DMA_Start_IT+0x430>
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4a36      	ldr	r2, [pc, #216]	; (80024e0 <HAL_DMA_Start_IT+0x478>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d045      	beq.n	8002498 <HAL_DMA_Start_IT+0x430>
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a34      	ldr	r2, [pc, #208]	; (80024e4 <HAL_DMA_Start_IT+0x47c>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d040      	beq.n	8002498 <HAL_DMA_Start_IT+0x430>
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4a33      	ldr	r2, [pc, #204]	; (80024e8 <HAL_DMA_Start_IT+0x480>)
 800241c:	4293      	cmp	r3, r2
 800241e:	d03b      	beq.n	8002498 <HAL_DMA_Start_IT+0x430>
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a31      	ldr	r2, [pc, #196]	; (80024ec <HAL_DMA_Start_IT+0x484>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d036      	beq.n	8002498 <HAL_DMA_Start_IT+0x430>
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4a30      	ldr	r2, [pc, #192]	; (80024f0 <HAL_DMA_Start_IT+0x488>)
 8002430:	4293      	cmp	r3, r2
 8002432:	d031      	beq.n	8002498 <HAL_DMA_Start_IT+0x430>
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a2e      	ldr	r2, [pc, #184]	; (80024f4 <HAL_DMA_Start_IT+0x48c>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d02c      	beq.n	8002498 <HAL_DMA_Start_IT+0x430>
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4a2d      	ldr	r2, [pc, #180]	; (80024f8 <HAL_DMA_Start_IT+0x490>)
 8002444:	4293      	cmp	r3, r2
 8002446:	d027      	beq.n	8002498 <HAL_DMA_Start_IT+0x430>
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a2b      	ldr	r2, [pc, #172]	; (80024fc <HAL_DMA_Start_IT+0x494>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d022      	beq.n	8002498 <HAL_DMA_Start_IT+0x430>
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4a2a      	ldr	r2, [pc, #168]	; (8002500 <HAL_DMA_Start_IT+0x498>)
 8002458:	4293      	cmp	r3, r2
 800245a:	d01d      	beq.n	8002498 <HAL_DMA_Start_IT+0x430>
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a28      	ldr	r2, [pc, #160]	; (8002504 <HAL_DMA_Start_IT+0x49c>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d018      	beq.n	8002498 <HAL_DMA_Start_IT+0x430>
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4a27      	ldr	r2, [pc, #156]	; (8002508 <HAL_DMA_Start_IT+0x4a0>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d013      	beq.n	8002498 <HAL_DMA_Start_IT+0x430>
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4a25      	ldr	r2, [pc, #148]	; (800250c <HAL_DMA_Start_IT+0x4a4>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d00e      	beq.n	8002498 <HAL_DMA_Start_IT+0x430>
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4a24      	ldr	r2, [pc, #144]	; (8002510 <HAL_DMA_Start_IT+0x4a8>)
 8002480:	4293      	cmp	r3, r2
 8002482:	d009      	beq.n	8002498 <HAL_DMA_Start_IT+0x430>
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a22      	ldr	r2, [pc, #136]	; (8002514 <HAL_DMA_Start_IT+0x4ac>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d004      	beq.n	8002498 <HAL_DMA_Start_IT+0x430>
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4a21      	ldr	r2, [pc, #132]	; (8002518 <HAL_DMA_Start_IT+0x4b0>)
 8002494:	4293      	cmp	r3, r2
 8002496:	d108      	bne.n	80024aa <HAL_DMA_Start_IT+0x442>
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	681a      	ldr	r2, [r3, #0]
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f042 0201 	orr.w	r2, r2, #1
 80024a6:	601a      	str	r2, [r3, #0]
 80024a8:	e012      	b.n	80024d0 <HAL_DMA_Start_IT+0x468>
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	681a      	ldr	r2, [r3, #0]
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f042 0201 	orr.w	r2, r2, #1
 80024b8:	601a      	str	r2, [r3, #0]
 80024ba:	e009      	b.n	80024d0 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	2200      	movs	r2, #0
 80024c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80024ca:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 80024cc:	2301      	movs	r3, #1
 80024ce:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80024d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	3718      	adds	r7, #24
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}
 80024da:	bf00      	nop
 80024dc:	40020010 	.word	0x40020010
 80024e0:	40020028 	.word	0x40020028
 80024e4:	40020040 	.word	0x40020040
 80024e8:	40020058 	.word	0x40020058
 80024ec:	40020070 	.word	0x40020070
 80024f0:	40020088 	.word	0x40020088
 80024f4:	400200a0 	.word	0x400200a0
 80024f8:	400200b8 	.word	0x400200b8
 80024fc:	40020410 	.word	0x40020410
 8002500:	40020428 	.word	0x40020428
 8002504:	40020440 	.word	0x40020440
 8002508:	40020458 	.word	0x40020458
 800250c:	40020470 	.word	0x40020470
 8002510:	40020488 	.word	0x40020488
 8002514:	400204a0 	.word	0x400204a0
 8002518:	400204b8 	.word	0x400204b8
 800251c:	58025408 	.word	0x58025408
 8002520:	5802541c 	.word	0x5802541c
 8002524:	58025430 	.word	0x58025430
 8002528:	58025444 	.word	0x58025444
 800252c:	58025458 	.word	0x58025458
 8002530:	5802546c 	.word	0x5802546c
 8002534:	58025480 	.word	0x58025480
 8002538:	58025494 	.word	0x58025494

0800253c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b086      	sub	sp, #24
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8002544:	f7ff f822 	bl	800158c <HAL_GetTick>
 8002548:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d101      	bne.n	8002554 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002550:	2301      	movs	r3, #1
 8002552:	e2dc      	b.n	8002b0e <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800255a:	b2db      	uxtb	r3, r3
 800255c:	2b02      	cmp	r3, #2
 800255e:	d008      	beq.n	8002572 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2280      	movs	r2, #128	; 0x80
 8002564:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2200      	movs	r2, #0
 800256a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 800256e:	2301      	movs	r3, #1
 8002570:	e2cd      	b.n	8002b0e <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4a76      	ldr	r2, [pc, #472]	; (8002750 <HAL_DMA_Abort+0x214>)
 8002578:	4293      	cmp	r3, r2
 800257a:	d04a      	beq.n	8002612 <HAL_DMA_Abort+0xd6>
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4a74      	ldr	r2, [pc, #464]	; (8002754 <HAL_DMA_Abort+0x218>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d045      	beq.n	8002612 <HAL_DMA_Abort+0xd6>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4a73      	ldr	r2, [pc, #460]	; (8002758 <HAL_DMA_Abort+0x21c>)
 800258c:	4293      	cmp	r3, r2
 800258e:	d040      	beq.n	8002612 <HAL_DMA_Abort+0xd6>
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a71      	ldr	r2, [pc, #452]	; (800275c <HAL_DMA_Abort+0x220>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d03b      	beq.n	8002612 <HAL_DMA_Abort+0xd6>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4a70      	ldr	r2, [pc, #448]	; (8002760 <HAL_DMA_Abort+0x224>)
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d036      	beq.n	8002612 <HAL_DMA_Abort+0xd6>
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a6e      	ldr	r2, [pc, #440]	; (8002764 <HAL_DMA_Abort+0x228>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d031      	beq.n	8002612 <HAL_DMA_Abort+0xd6>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4a6d      	ldr	r2, [pc, #436]	; (8002768 <HAL_DMA_Abort+0x22c>)
 80025b4:	4293      	cmp	r3, r2
 80025b6:	d02c      	beq.n	8002612 <HAL_DMA_Abort+0xd6>
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a6b      	ldr	r2, [pc, #428]	; (800276c <HAL_DMA_Abort+0x230>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d027      	beq.n	8002612 <HAL_DMA_Abort+0xd6>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4a6a      	ldr	r2, [pc, #424]	; (8002770 <HAL_DMA_Abort+0x234>)
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d022      	beq.n	8002612 <HAL_DMA_Abort+0xd6>
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a68      	ldr	r2, [pc, #416]	; (8002774 <HAL_DMA_Abort+0x238>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d01d      	beq.n	8002612 <HAL_DMA_Abort+0xd6>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4a67      	ldr	r2, [pc, #412]	; (8002778 <HAL_DMA_Abort+0x23c>)
 80025dc:	4293      	cmp	r3, r2
 80025de:	d018      	beq.n	8002612 <HAL_DMA_Abort+0xd6>
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a65      	ldr	r2, [pc, #404]	; (800277c <HAL_DMA_Abort+0x240>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d013      	beq.n	8002612 <HAL_DMA_Abort+0xd6>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4a64      	ldr	r2, [pc, #400]	; (8002780 <HAL_DMA_Abort+0x244>)
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d00e      	beq.n	8002612 <HAL_DMA_Abort+0xd6>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a62      	ldr	r2, [pc, #392]	; (8002784 <HAL_DMA_Abort+0x248>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d009      	beq.n	8002612 <HAL_DMA_Abort+0xd6>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4a61      	ldr	r2, [pc, #388]	; (8002788 <HAL_DMA_Abort+0x24c>)
 8002604:	4293      	cmp	r3, r2
 8002606:	d004      	beq.n	8002612 <HAL_DMA_Abort+0xd6>
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a5f      	ldr	r2, [pc, #380]	; (800278c <HAL_DMA_Abort+0x250>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d101      	bne.n	8002616 <HAL_DMA_Abort+0xda>
 8002612:	2301      	movs	r3, #1
 8002614:	e000      	b.n	8002618 <HAL_DMA_Abort+0xdc>
 8002616:	2300      	movs	r3, #0
 8002618:	2b00      	cmp	r3, #0
 800261a:	d013      	beq.n	8002644 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	681a      	ldr	r2, [r3, #0]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f022 021e 	bic.w	r2, r2, #30
 800262a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	695a      	ldr	r2, [r3, #20]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800263a:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	617b      	str	r3, [r7, #20]
 8002642:	e00a      	b.n	800265a <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	681a      	ldr	r2, [r3, #0]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f022 020e 	bic.w	r2, r2, #14
 8002652:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4a3c      	ldr	r2, [pc, #240]	; (8002750 <HAL_DMA_Abort+0x214>)
 8002660:	4293      	cmp	r3, r2
 8002662:	d072      	beq.n	800274a <HAL_DMA_Abort+0x20e>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a3a      	ldr	r2, [pc, #232]	; (8002754 <HAL_DMA_Abort+0x218>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d06d      	beq.n	800274a <HAL_DMA_Abort+0x20e>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4a39      	ldr	r2, [pc, #228]	; (8002758 <HAL_DMA_Abort+0x21c>)
 8002674:	4293      	cmp	r3, r2
 8002676:	d068      	beq.n	800274a <HAL_DMA_Abort+0x20e>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a37      	ldr	r2, [pc, #220]	; (800275c <HAL_DMA_Abort+0x220>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d063      	beq.n	800274a <HAL_DMA_Abort+0x20e>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4a36      	ldr	r2, [pc, #216]	; (8002760 <HAL_DMA_Abort+0x224>)
 8002688:	4293      	cmp	r3, r2
 800268a:	d05e      	beq.n	800274a <HAL_DMA_Abort+0x20e>
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a34      	ldr	r2, [pc, #208]	; (8002764 <HAL_DMA_Abort+0x228>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d059      	beq.n	800274a <HAL_DMA_Abort+0x20e>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4a33      	ldr	r2, [pc, #204]	; (8002768 <HAL_DMA_Abort+0x22c>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d054      	beq.n	800274a <HAL_DMA_Abort+0x20e>
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a31      	ldr	r2, [pc, #196]	; (800276c <HAL_DMA_Abort+0x230>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d04f      	beq.n	800274a <HAL_DMA_Abort+0x20e>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4a30      	ldr	r2, [pc, #192]	; (8002770 <HAL_DMA_Abort+0x234>)
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d04a      	beq.n	800274a <HAL_DMA_Abort+0x20e>
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a2e      	ldr	r2, [pc, #184]	; (8002774 <HAL_DMA_Abort+0x238>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d045      	beq.n	800274a <HAL_DMA_Abort+0x20e>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4a2d      	ldr	r2, [pc, #180]	; (8002778 <HAL_DMA_Abort+0x23c>)
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d040      	beq.n	800274a <HAL_DMA_Abort+0x20e>
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a2b      	ldr	r2, [pc, #172]	; (800277c <HAL_DMA_Abort+0x240>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d03b      	beq.n	800274a <HAL_DMA_Abort+0x20e>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4a2a      	ldr	r2, [pc, #168]	; (8002780 <HAL_DMA_Abort+0x244>)
 80026d8:	4293      	cmp	r3, r2
 80026da:	d036      	beq.n	800274a <HAL_DMA_Abort+0x20e>
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a28      	ldr	r2, [pc, #160]	; (8002784 <HAL_DMA_Abort+0x248>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d031      	beq.n	800274a <HAL_DMA_Abort+0x20e>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4a27      	ldr	r2, [pc, #156]	; (8002788 <HAL_DMA_Abort+0x24c>)
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d02c      	beq.n	800274a <HAL_DMA_Abort+0x20e>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a25      	ldr	r2, [pc, #148]	; (800278c <HAL_DMA_Abort+0x250>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d027      	beq.n	800274a <HAL_DMA_Abort+0x20e>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4a24      	ldr	r2, [pc, #144]	; (8002790 <HAL_DMA_Abort+0x254>)
 8002700:	4293      	cmp	r3, r2
 8002702:	d022      	beq.n	800274a <HAL_DMA_Abort+0x20e>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a22      	ldr	r2, [pc, #136]	; (8002794 <HAL_DMA_Abort+0x258>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d01d      	beq.n	800274a <HAL_DMA_Abort+0x20e>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a21      	ldr	r2, [pc, #132]	; (8002798 <HAL_DMA_Abort+0x25c>)
 8002714:	4293      	cmp	r3, r2
 8002716:	d018      	beq.n	800274a <HAL_DMA_Abort+0x20e>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a1f      	ldr	r2, [pc, #124]	; (800279c <HAL_DMA_Abort+0x260>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d013      	beq.n	800274a <HAL_DMA_Abort+0x20e>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4a1e      	ldr	r2, [pc, #120]	; (80027a0 <HAL_DMA_Abort+0x264>)
 8002728:	4293      	cmp	r3, r2
 800272a:	d00e      	beq.n	800274a <HAL_DMA_Abort+0x20e>
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a1c      	ldr	r2, [pc, #112]	; (80027a4 <HAL_DMA_Abort+0x268>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d009      	beq.n	800274a <HAL_DMA_Abort+0x20e>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4a1b      	ldr	r2, [pc, #108]	; (80027a8 <HAL_DMA_Abort+0x26c>)
 800273c:	4293      	cmp	r3, r2
 800273e:	d004      	beq.n	800274a <HAL_DMA_Abort+0x20e>
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a19      	ldr	r2, [pc, #100]	; (80027ac <HAL_DMA_Abort+0x270>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d132      	bne.n	80027b0 <HAL_DMA_Abort+0x274>
 800274a:	2301      	movs	r3, #1
 800274c:	e031      	b.n	80027b2 <HAL_DMA_Abort+0x276>
 800274e:	bf00      	nop
 8002750:	40020010 	.word	0x40020010
 8002754:	40020028 	.word	0x40020028
 8002758:	40020040 	.word	0x40020040
 800275c:	40020058 	.word	0x40020058
 8002760:	40020070 	.word	0x40020070
 8002764:	40020088 	.word	0x40020088
 8002768:	400200a0 	.word	0x400200a0
 800276c:	400200b8 	.word	0x400200b8
 8002770:	40020410 	.word	0x40020410
 8002774:	40020428 	.word	0x40020428
 8002778:	40020440 	.word	0x40020440
 800277c:	40020458 	.word	0x40020458
 8002780:	40020470 	.word	0x40020470
 8002784:	40020488 	.word	0x40020488
 8002788:	400204a0 	.word	0x400204a0
 800278c:	400204b8 	.word	0x400204b8
 8002790:	58025408 	.word	0x58025408
 8002794:	5802541c 	.word	0x5802541c
 8002798:	58025430 	.word	0x58025430
 800279c:	58025444 	.word	0x58025444
 80027a0:	58025458 	.word	0x58025458
 80027a4:	5802546c 	.word	0x5802546c
 80027a8:	58025480 	.word	0x58025480
 80027ac:	58025494 	.word	0x58025494
 80027b0:	2300      	movs	r3, #0
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d007      	beq.n	80027c6 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027ba:	681a      	ldr	r2, [r3, #0]
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027c0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80027c4:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4a6d      	ldr	r2, [pc, #436]	; (8002980 <HAL_DMA_Abort+0x444>)
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d04a      	beq.n	8002866 <HAL_DMA_Abort+0x32a>
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4a6b      	ldr	r2, [pc, #428]	; (8002984 <HAL_DMA_Abort+0x448>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d045      	beq.n	8002866 <HAL_DMA_Abort+0x32a>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4a6a      	ldr	r2, [pc, #424]	; (8002988 <HAL_DMA_Abort+0x44c>)
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d040      	beq.n	8002866 <HAL_DMA_Abort+0x32a>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a68      	ldr	r2, [pc, #416]	; (800298c <HAL_DMA_Abort+0x450>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d03b      	beq.n	8002866 <HAL_DMA_Abort+0x32a>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4a67      	ldr	r2, [pc, #412]	; (8002990 <HAL_DMA_Abort+0x454>)
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d036      	beq.n	8002866 <HAL_DMA_Abort+0x32a>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a65      	ldr	r2, [pc, #404]	; (8002994 <HAL_DMA_Abort+0x458>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d031      	beq.n	8002866 <HAL_DMA_Abort+0x32a>
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4a64      	ldr	r2, [pc, #400]	; (8002998 <HAL_DMA_Abort+0x45c>)
 8002808:	4293      	cmp	r3, r2
 800280a:	d02c      	beq.n	8002866 <HAL_DMA_Abort+0x32a>
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4a62      	ldr	r2, [pc, #392]	; (800299c <HAL_DMA_Abort+0x460>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d027      	beq.n	8002866 <HAL_DMA_Abort+0x32a>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4a61      	ldr	r2, [pc, #388]	; (80029a0 <HAL_DMA_Abort+0x464>)
 800281c:	4293      	cmp	r3, r2
 800281e:	d022      	beq.n	8002866 <HAL_DMA_Abort+0x32a>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a5f      	ldr	r2, [pc, #380]	; (80029a4 <HAL_DMA_Abort+0x468>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d01d      	beq.n	8002866 <HAL_DMA_Abort+0x32a>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4a5e      	ldr	r2, [pc, #376]	; (80029a8 <HAL_DMA_Abort+0x46c>)
 8002830:	4293      	cmp	r3, r2
 8002832:	d018      	beq.n	8002866 <HAL_DMA_Abort+0x32a>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a5c      	ldr	r2, [pc, #368]	; (80029ac <HAL_DMA_Abort+0x470>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d013      	beq.n	8002866 <HAL_DMA_Abort+0x32a>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4a5b      	ldr	r2, [pc, #364]	; (80029b0 <HAL_DMA_Abort+0x474>)
 8002844:	4293      	cmp	r3, r2
 8002846:	d00e      	beq.n	8002866 <HAL_DMA_Abort+0x32a>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a59      	ldr	r2, [pc, #356]	; (80029b4 <HAL_DMA_Abort+0x478>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d009      	beq.n	8002866 <HAL_DMA_Abort+0x32a>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4a58      	ldr	r2, [pc, #352]	; (80029b8 <HAL_DMA_Abort+0x47c>)
 8002858:	4293      	cmp	r3, r2
 800285a:	d004      	beq.n	8002866 <HAL_DMA_Abort+0x32a>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a56      	ldr	r2, [pc, #344]	; (80029bc <HAL_DMA_Abort+0x480>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d108      	bne.n	8002878 <HAL_DMA_Abort+0x33c>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	681a      	ldr	r2, [r3, #0]
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f022 0201 	bic.w	r2, r2, #1
 8002874:	601a      	str	r2, [r3, #0]
 8002876:	e007      	b.n	8002888 <HAL_DMA_Abort+0x34c>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	681a      	ldr	r2, [r3, #0]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f022 0201 	bic.w	r2, r2, #1
 8002886:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002888:	e013      	b.n	80028b2 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800288a:	f7fe fe7f 	bl	800158c <HAL_GetTick>
 800288e:	4602      	mov	r2, r0
 8002890:	693b      	ldr	r3, [r7, #16]
 8002892:	1ad3      	subs	r3, r2, r3
 8002894:	2b05      	cmp	r3, #5
 8002896:	d90c      	bls.n	80028b2 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2220      	movs	r2, #32
 800289c:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2200      	movs	r2, #0
 80028a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2203      	movs	r2, #3
 80028aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80028ae:	2301      	movs	r3, #1
 80028b0:	e12d      	b.n	8002b0e <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80028b2:	697b      	ldr	r3, [r7, #20]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f003 0301 	and.w	r3, r3, #1
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d1e5      	bne.n	800288a <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4a2f      	ldr	r2, [pc, #188]	; (8002980 <HAL_DMA_Abort+0x444>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d04a      	beq.n	800295e <HAL_DMA_Abort+0x422>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a2d      	ldr	r2, [pc, #180]	; (8002984 <HAL_DMA_Abort+0x448>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d045      	beq.n	800295e <HAL_DMA_Abort+0x422>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4a2c      	ldr	r2, [pc, #176]	; (8002988 <HAL_DMA_Abort+0x44c>)
 80028d8:	4293      	cmp	r3, r2
 80028da:	d040      	beq.n	800295e <HAL_DMA_Abort+0x422>
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a2a      	ldr	r2, [pc, #168]	; (800298c <HAL_DMA_Abort+0x450>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d03b      	beq.n	800295e <HAL_DMA_Abort+0x422>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4a29      	ldr	r2, [pc, #164]	; (8002990 <HAL_DMA_Abort+0x454>)
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d036      	beq.n	800295e <HAL_DMA_Abort+0x422>
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a27      	ldr	r2, [pc, #156]	; (8002994 <HAL_DMA_Abort+0x458>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d031      	beq.n	800295e <HAL_DMA_Abort+0x422>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4a26      	ldr	r2, [pc, #152]	; (8002998 <HAL_DMA_Abort+0x45c>)
 8002900:	4293      	cmp	r3, r2
 8002902:	d02c      	beq.n	800295e <HAL_DMA_Abort+0x422>
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4a24      	ldr	r2, [pc, #144]	; (800299c <HAL_DMA_Abort+0x460>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d027      	beq.n	800295e <HAL_DMA_Abort+0x422>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4a23      	ldr	r2, [pc, #140]	; (80029a0 <HAL_DMA_Abort+0x464>)
 8002914:	4293      	cmp	r3, r2
 8002916:	d022      	beq.n	800295e <HAL_DMA_Abort+0x422>
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a21      	ldr	r2, [pc, #132]	; (80029a4 <HAL_DMA_Abort+0x468>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d01d      	beq.n	800295e <HAL_DMA_Abort+0x422>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4a20      	ldr	r2, [pc, #128]	; (80029a8 <HAL_DMA_Abort+0x46c>)
 8002928:	4293      	cmp	r3, r2
 800292a:	d018      	beq.n	800295e <HAL_DMA_Abort+0x422>
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a1e      	ldr	r2, [pc, #120]	; (80029ac <HAL_DMA_Abort+0x470>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d013      	beq.n	800295e <HAL_DMA_Abort+0x422>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4a1d      	ldr	r2, [pc, #116]	; (80029b0 <HAL_DMA_Abort+0x474>)
 800293c:	4293      	cmp	r3, r2
 800293e:	d00e      	beq.n	800295e <HAL_DMA_Abort+0x422>
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a1b      	ldr	r2, [pc, #108]	; (80029b4 <HAL_DMA_Abort+0x478>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d009      	beq.n	800295e <HAL_DMA_Abort+0x422>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4a1a      	ldr	r2, [pc, #104]	; (80029b8 <HAL_DMA_Abort+0x47c>)
 8002950:	4293      	cmp	r3, r2
 8002952:	d004      	beq.n	800295e <HAL_DMA_Abort+0x422>
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a18      	ldr	r2, [pc, #96]	; (80029bc <HAL_DMA_Abort+0x480>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d101      	bne.n	8002962 <HAL_DMA_Abort+0x426>
 800295e:	2301      	movs	r3, #1
 8002960:	e000      	b.n	8002964 <HAL_DMA_Abort+0x428>
 8002962:	2300      	movs	r3, #0
 8002964:	2b00      	cmp	r3, #0
 8002966:	d02b      	beq.n	80029c0 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800296c:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002972:	f003 031f 	and.w	r3, r3, #31
 8002976:	223f      	movs	r2, #63	; 0x3f
 8002978:	409a      	lsls	r2, r3
 800297a:	68bb      	ldr	r3, [r7, #8]
 800297c:	609a      	str	r2, [r3, #8]
 800297e:	e02a      	b.n	80029d6 <HAL_DMA_Abort+0x49a>
 8002980:	40020010 	.word	0x40020010
 8002984:	40020028 	.word	0x40020028
 8002988:	40020040 	.word	0x40020040
 800298c:	40020058 	.word	0x40020058
 8002990:	40020070 	.word	0x40020070
 8002994:	40020088 	.word	0x40020088
 8002998:	400200a0 	.word	0x400200a0
 800299c:	400200b8 	.word	0x400200b8
 80029a0:	40020410 	.word	0x40020410
 80029a4:	40020428 	.word	0x40020428
 80029a8:	40020440 	.word	0x40020440
 80029ac:	40020458 	.word	0x40020458
 80029b0:	40020470 	.word	0x40020470
 80029b4:	40020488 	.word	0x40020488
 80029b8:	400204a0 	.word	0x400204a0
 80029bc:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029c4:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029ca:	f003 031f 	and.w	r3, r3, #31
 80029ce:	2201      	movs	r2, #1
 80029d0:	409a      	lsls	r2, r3
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a4f      	ldr	r2, [pc, #316]	; (8002b18 <HAL_DMA_Abort+0x5dc>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d072      	beq.n	8002ac6 <HAL_DMA_Abort+0x58a>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a4d      	ldr	r2, [pc, #308]	; (8002b1c <HAL_DMA_Abort+0x5e0>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d06d      	beq.n	8002ac6 <HAL_DMA_Abort+0x58a>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4a4c      	ldr	r2, [pc, #304]	; (8002b20 <HAL_DMA_Abort+0x5e4>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d068      	beq.n	8002ac6 <HAL_DMA_Abort+0x58a>
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a4a      	ldr	r2, [pc, #296]	; (8002b24 <HAL_DMA_Abort+0x5e8>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d063      	beq.n	8002ac6 <HAL_DMA_Abort+0x58a>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4a49      	ldr	r2, [pc, #292]	; (8002b28 <HAL_DMA_Abort+0x5ec>)
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d05e      	beq.n	8002ac6 <HAL_DMA_Abort+0x58a>
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a47      	ldr	r2, [pc, #284]	; (8002b2c <HAL_DMA_Abort+0x5f0>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d059      	beq.n	8002ac6 <HAL_DMA_Abort+0x58a>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4a46      	ldr	r2, [pc, #280]	; (8002b30 <HAL_DMA_Abort+0x5f4>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d054      	beq.n	8002ac6 <HAL_DMA_Abort+0x58a>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a44      	ldr	r2, [pc, #272]	; (8002b34 <HAL_DMA_Abort+0x5f8>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d04f      	beq.n	8002ac6 <HAL_DMA_Abort+0x58a>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a43      	ldr	r2, [pc, #268]	; (8002b38 <HAL_DMA_Abort+0x5fc>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d04a      	beq.n	8002ac6 <HAL_DMA_Abort+0x58a>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a41      	ldr	r2, [pc, #260]	; (8002b3c <HAL_DMA_Abort+0x600>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d045      	beq.n	8002ac6 <HAL_DMA_Abort+0x58a>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a40      	ldr	r2, [pc, #256]	; (8002b40 <HAL_DMA_Abort+0x604>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d040      	beq.n	8002ac6 <HAL_DMA_Abort+0x58a>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a3e      	ldr	r2, [pc, #248]	; (8002b44 <HAL_DMA_Abort+0x608>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d03b      	beq.n	8002ac6 <HAL_DMA_Abort+0x58a>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a3d      	ldr	r2, [pc, #244]	; (8002b48 <HAL_DMA_Abort+0x60c>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d036      	beq.n	8002ac6 <HAL_DMA_Abort+0x58a>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a3b      	ldr	r2, [pc, #236]	; (8002b4c <HAL_DMA_Abort+0x610>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d031      	beq.n	8002ac6 <HAL_DMA_Abort+0x58a>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a3a      	ldr	r2, [pc, #232]	; (8002b50 <HAL_DMA_Abort+0x614>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d02c      	beq.n	8002ac6 <HAL_DMA_Abort+0x58a>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a38      	ldr	r2, [pc, #224]	; (8002b54 <HAL_DMA_Abort+0x618>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d027      	beq.n	8002ac6 <HAL_DMA_Abort+0x58a>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a37      	ldr	r2, [pc, #220]	; (8002b58 <HAL_DMA_Abort+0x61c>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d022      	beq.n	8002ac6 <HAL_DMA_Abort+0x58a>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a35      	ldr	r2, [pc, #212]	; (8002b5c <HAL_DMA_Abort+0x620>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d01d      	beq.n	8002ac6 <HAL_DMA_Abort+0x58a>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4a34      	ldr	r2, [pc, #208]	; (8002b60 <HAL_DMA_Abort+0x624>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d018      	beq.n	8002ac6 <HAL_DMA_Abort+0x58a>
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a32      	ldr	r2, [pc, #200]	; (8002b64 <HAL_DMA_Abort+0x628>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d013      	beq.n	8002ac6 <HAL_DMA_Abort+0x58a>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4a31      	ldr	r2, [pc, #196]	; (8002b68 <HAL_DMA_Abort+0x62c>)
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d00e      	beq.n	8002ac6 <HAL_DMA_Abort+0x58a>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a2f      	ldr	r2, [pc, #188]	; (8002b6c <HAL_DMA_Abort+0x630>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d009      	beq.n	8002ac6 <HAL_DMA_Abort+0x58a>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a2e      	ldr	r2, [pc, #184]	; (8002b70 <HAL_DMA_Abort+0x634>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d004      	beq.n	8002ac6 <HAL_DMA_Abort+0x58a>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a2c      	ldr	r2, [pc, #176]	; (8002b74 <HAL_DMA_Abort+0x638>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d101      	bne.n	8002aca <HAL_DMA_Abort+0x58e>
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	e000      	b.n	8002acc <HAL_DMA_Abort+0x590>
 8002aca:	2300      	movs	r3, #0
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d015      	beq.n	8002afc <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002ad4:	687a      	ldr	r2, [r7, #4]
 8002ad6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002ad8:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d00c      	beq.n	8002afc <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ae6:	681a      	ldr	r2, [r3, #0]
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002aec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002af0:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002af6:	687a      	ldr	r2, [r7, #4]
 8002af8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002afa:	605a      	str	r2, [r3, #4]
      }
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2200      	movs	r2, #0
 8002b00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2201      	movs	r2, #1
 8002b08:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }

  return HAL_OK;
 8002b0c:	2300      	movs	r3, #0
}
 8002b0e:	4618      	mov	r0, r3
 8002b10:	3718      	adds	r7, #24
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}
 8002b16:	bf00      	nop
 8002b18:	40020010 	.word	0x40020010
 8002b1c:	40020028 	.word	0x40020028
 8002b20:	40020040 	.word	0x40020040
 8002b24:	40020058 	.word	0x40020058
 8002b28:	40020070 	.word	0x40020070
 8002b2c:	40020088 	.word	0x40020088
 8002b30:	400200a0 	.word	0x400200a0
 8002b34:	400200b8 	.word	0x400200b8
 8002b38:	40020410 	.word	0x40020410
 8002b3c:	40020428 	.word	0x40020428
 8002b40:	40020440 	.word	0x40020440
 8002b44:	40020458 	.word	0x40020458
 8002b48:	40020470 	.word	0x40020470
 8002b4c:	40020488 	.word	0x40020488
 8002b50:	400204a0 	.word	0x400204a0
 8002b54:	400204b8 	.word	0x400204b8
 8002b58:	58025408 	.word	0x58025408
 8002b5c:	5802541c 	.word	0x5802541c
 8002b60:	58025430 	.word	0x58025430
 8002b64:	58025444 	.word	0x58025444
 8002b68:	58025458 	.word	0x58025458
 8002b6c:	5802546c 	.word	0x5802546c
 8002b70:	58025480 	.word	0x58025480
 8002b74:	58025494 	.word	0x58025494

08002b78 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b084      	sub	sp, #16
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d101      	bne.n	8002b8a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8002b86:	2301      	movs	r3, #1
 8002b88:	e205      	b.n	8002f96 <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002b90:	b2db      	uxtb	r3, r3
 8002b92:	2b02      	cmp	r3, #2
 8002b94:	d004      	beq.n	8002ba0 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2280      	movs	r2, #128	; 0x80
 8002b9a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	e1fa      	b.n	8002f96 <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a8c      	ldr	r2, [pc, #560]	; (8002dd8 <HAL_DMA_Abort_IT+0x260>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d04a      	beq.n	8002c40 <HAL_DMA_Abort_IT+0xc8>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4a8b      	ldr	r2, [pc, #556]	; (8002ddc <HAL_DMA_Abort_IT+0x264>)
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d045      	beq.n	8002c40 <HAL_DMA_Abort_IT+0xc8>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a89      	ldr	r2, [pc, #548]	; (8002de0 <HAL_DMA_Abort_IT+0x268>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d040      	beq.n	8002c40 <HAL_DMA_Abort_IT+0xc8>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4a88      	ldr	r2, [pc, #544]	; (8002de4 <HAL_DMA_Abort_IT+0x26c>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d03b      	beq.n	8002c40 <HAL_DMA_Abort_IT+0xc8>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a86      	ldr	r2, [pc, #536]	; (8002de8 <HAL_DMA_Abort_IT+0x270>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d036      	beq.n	8002c40 <HAL_DMA_Abort_IT+0xc8>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a85      	ldr	r2, [pc, #532]	; (8002dec <HAL_DMA_Abort_IT+0x274>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d031      	beq.n	8002c40 <HAL_DMA_Abort_IT+0xc8>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a83      	ldr	r2, [pc, #524]	; (8002df0 <HAL_DMA_Abort_IT+0x278>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d02c      	beq.n	8002c40 <HAL_DMA_Abort_IT+0xc8>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a82      	ldr	r2, [pc, #520]	; (8002df4 <HAL_DMA_Abort_IT+0x27c>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d027      	beq.n	8002c40 <HAL_DMA_Abort_IT+0xc8>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a80      	ldr	r2, [pc, #512]	; (8002df8 <HAL_DMA_Abort_IT+0x280>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d022      	beq.n	8002c40 <HAL_DMA_Abort_IT+0xc8>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a7f      	ldr	r2, [pc, #508]	; (8002dfc <HAL_DMA_Abort_IT+0x284>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d01d      	beq.n	8002c40 <HAL_DMA_Abort_IT+0xc8>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a7d      	ldr	r2, [pc, #500]	; (8002e00 <HAL_DMA_Abort_IT+0x288>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d018      	beq.n	8002c40 <HAL_DMA_Abort_IT+0xc8>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4a7c      	ldr	r2, [pc, #496]	; (8002e04 <HAL_DMA_Abort_IT+0x28c>)
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d013      	beq.n	8002c40 <HAL_DMA_Abort_IT+0xc8>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a7a      	ldr	r2, [pc, #488]	; (8002e08 <HAL_DMA_Abort_IT+0x290>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d00e      	beq.n	8002c40 <HAL_DMA_Abort_IT+0xc8>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a79      	ldr	r2, [pc, #484]	; (8002e0c <HAL_DMA_Abort_IT+0x294>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d009      	beq.n	8002c40 <HAL_DMA_Abort_IT+0xc8>
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a77      	ldr	r2, [pc, #476]	; (8002e10 <HAL_DMA_Abort_IT+0x298>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d004      	beq.n	8002c40 <HAL_DMA_Abort_IT+0xc8>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4a76      	ldr	r2, [pc, #472]	; (8002e14 <HAL_DMA_Abort_IT+0x29c>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d101      	bne.n	8002c44 <HAL_DMA_Abort_IT+0xcc>
 8002c40:	2301      	movs	r3, #1
 8002c42:	e000      	b.n	8002c46 <HAL_DMA_Abort_IT+0xce>
 8002c44:	2300      	movs	r3, #0
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d065      	beq.n	8002d16 <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2204      	movs	r2, #4
 8002c4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a60      	ldr	r2, [pc, #384]	; (8002dd8 <HAL_DMA_Abort_IT+0x260>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d04a      	beq.n	8002cf2 <HAL_DMA_Abort_IT+0x17a>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a5e      	ldr	r2, [pc, #376]	; (8002ddc <HAL_DMA_Abort_IT+0x264>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d045      	beq.n	8002cf2 <HAL_DMA_Abort_IT+0x17a>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a5d      	ldr	r2, [pc, #372]	; (8002de0 <HAL_DMA_Abort_IT+0x268>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d040      	beq.n	8002cf2 <HAL_DMA_Abort_IT+0x17a>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a5b      	ldr	r2, [pc, #364]	; (8002de4 <HAL_DMA_Abort_IT+0x26c>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d03b      	beq.n	8002cf2 <HAL_DMA_Abort_IT+0x17a>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4a5a      	ldr	r2, [pc, #360]	; (8002de8 <HAL_DMA_Abort_IT+0x270>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d036      	beq.n	8002cf2 <HAL_DMA_Abort_IT+0x17a>
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a58      	ldr	r2, [pc, #352]	; (8002dec <HAL_DMA_Abort_IT+0x274>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d031      	beq.n	8002cf2 <HAL_DMA_Abort_IT+0x17a>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4a57      	ldr	r2, [pc, #348]	; (8002df0 <HAL_DMA_Abort_IT+0x278>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d02c      	beq.n	8002cf2 <HAL_DMA_Abort_IT+0x17a>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a55      	ldr	r2, [pc, #340]	; (8002df4 <HAL_DMA_Abort_IT+0x27c>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d027      	beq.n	8002cf2 <HAL_DMA_Abort_IT+0x17a>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4a54      	ldr	r2, [pc, #336]	; (8002df8 <HAL_DMA_Abort_IT+0x280>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d022      	beq.n	8002cf2 <HAL_DMA_Abort_IT+0x17a>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a52      	ldr	r2, [pc, #328]	; (8002dfc <HAL_DMA_Abort_IT+0x284>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d01d      	beq.n	8002cf2 <HAL_DMA_Abort_IT+0x17a>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4a51      	ldr	r2, [pc, #324]	; (8002e00 <HAL_DMA_Abort_IT+0x288>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d018      	beq.n	8002cf2 <HAL_DMA_Abort_IT+0x17a>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a4f      	ldr	r2, [pc, #316]	; (8002e04 <HAL_DMA_Abort_IT+0x28c>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d013      	beq.n	8002cf2 <HAL_DMA_Abort_IT+0x17a>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4a4e      	ldr	r2, [pc, #312]	; (8002e08 <HAL_DMA_Abort_IT+0x290>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d00e      	beq.n	8002cf2 <HAL_DMA_Abort_IT+0x17a>
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a4c      	ldr	r2, [pc, #304]	; (8002e0c <HAL_DMA_Abort_IT+0x294>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d009      	beq.n	8002cf2 <HAL_DMA_Abort_IT+0x17a>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4a4b      	ldr	r2, [pc, #300]	; (8002e10 <HAL_DMA_Abort_IT+0x298>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d004      	beq.n	8002cf2 <HAL_DMA_Abort_IT+0x17a>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a49      	ldr	r2, [pc, #292]	; (8002e14 <HAL_DMA_Abort_IT+0x29c>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d108      	bne.n	8002d04 <HAL_DMA_Abort_IT+0x18c>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	681a      	ldr	r2, [r3, #0]
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f022 0201 	bic.w	r2, r2, #1
 8002d00:	601a      	str	r2, [r3, #0]
 8002d02:	e147      	b.n	8002f94 <HAL_DMA_Abort_IT+0x41c>
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	681a      	ldr	r2, [r3, #0]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f022 0201 	bic.w	r2, r2, #1
 8002d12:	601a      	str	r2, [r3, #0]
 8002d14:	e13e      	b.n	8002f94 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	681a      	ldr	r2, [r3, #0]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f022 020e 	bic.w	r2, r2, #14
 8002d24:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4a2b      	ldr	r2, [pc, #172]	; (8002dd8 <HAL_DMA_Abort_IT+0x260>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d04a      	beq.n	8002dc6 <HAL_DMA_Abort_IT+0x24e>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a29      	ldr	r2, [pc, #164]	; (8002ddc <HAL_DMA_Abort_IT+0x264>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d045      	beq.n	8002dc6 <HAL_DMA_Abort_IT+0x24e>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a28      	ldr	r2, [pc, #160]	; (8002de0 <HAL_DMA_Abort_IT+0x268>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d040      	beq.n	8002dc6 <HAL_DMA_Abort_IT+0x24e>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a26      	ldr	r2, [pc, #152]	; (8002de4 <HAL_DMA_Abort_IT+0x26c>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d03b      	beq.n	8002dc6 <HAL_DMA_Abort_IT+0x24e>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a25      	ldr	r2, [pc, #148]	; (8002de8 <HAL_DMA_Abort_IT+0x270>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d036      	beq.n	8002dc6 <HAL_DMA_Abort_IT+0x24e>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a23      	ldr	r2, [pc, #140]	; (8002dec <HAL_DMA_Abort_IT+0x274>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d031      	beq.n	8002dc6 <HAL_DMA_Abort_IT+0x24e>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a22      	ldr	r2, [pc, #136]	; (8002df0 <HAL_DMA_Abort_IT+0x278>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d02c      	beq.n	8002dc6 <HAL_DMA_Abort_IT+0x24e>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a20      	ldr	r2, [pc, #128]	; (8002df4 <HAL_DMA_Abort_IT+0x27c>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d027      	beq.n	8002dc6 <HAL_DMA_Abort_IT+0x24e>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4a1f      	ldr	r2, [pc, #124]	; (8002df8 <HAL_DMA_Abort_IT+0x280>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d022      	beq.n	8002dc6 <HAL_DMA_Abort_IT+0x24e>
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a1d      	ldr	r2, [pc, #116]	; (8002dfc <HAL_DMA_Abort_IT+0x284>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d01d      	beq.n	8002dc6 <HAL_DMA_Abort_IT+0x24e>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4a1c      	ldr	r2, [pc, #112]	; (8002e00 <HAL_DMA_Abort_IT+0x288>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d018      	beq.n	8002dc6 <HAL_DMA_Abort_IT+0x24e>
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a1a      	ldr	r2, [pc, #104]	; (8002e04 <HAL_DMA_Abort_IT+0x28c>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d013      	beq.n	8002dc6 <HAL_DMA_Abort_IT+0x24e>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4a19      	ldr	r2, [pc, #100]	; (8002e08 <HAL_DMA_Abort_IT+0x290>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d00e      	beq.n	8002dc6 <HAL_DMA_Abort_IT+0x24e>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a17      	ldr	r2, [pc, #92]	; (8002e0c <HAL_DMA_Abort_IT+0x294>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d009      	beq.n	8002dc6 <HAL_DMA_Abort_IT+0x24e>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4a16      	ldr	r2, [pc, #88]	; (8002e10 <HAL_DMA_Abort_IT+0x298>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d004      	beq.n	8002dc6 <HAL_DMA_Abort_IT+0x24e>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a14      	ldr	r2, [pc, #80]	; (8002e14 <HAL_DMA_Abort_IT+0x29c>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d128      	bne.n	8002e18 <HAL_DMA_Abort_IT+0x2a0>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	681a      	ldr	r2, [r3, #0]
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f022 0201 	bic.w	r2, r2, #1
 8002dd4:	601a      	str	r2, [r3, #0]
 8002dd6:	e027      	b.n	8002e28 <HAL_DMA_Abort_IT+0x2b0>
 8002dd8:	40020010 	.word	0x40020010
 8002ddc:	40020028 	.word	0x40020028
 8002de0:	40020040 	.word	0x40020040
 8002de4:	40020058 	.word	0x40020058
 8002de8:	40020070 	.word	0x40020070
 8002dec:	40020088 	.word	0x40020088
 8002df0:	400200a0 	.word	0x400200a0
 8002df4:	400200b8 	.word	0x400200b8
 8002df8:	40020410 	.word	0x40020410
 8002dfc:	40020428 	.word	0x40020428
 8002e00:	40020440 	.word	0x40020440
 8002e04:	40020458 	.word	0x40020458
 8002e08:	40020470 	.word	0x40020470
 8002e0c:	40020488 	.word	0x40020488
 8002e10:	400204a0 	.word	0x400204a0
 8002e14:	400204b8 	.word	0x400204b8
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	681a      	ldr	r2, [r3, #0]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f022 0201 	bic.w	r2, r2, #1
 8002e26:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a5c      	ldr	r2, [pc, #368]	; (8002fa0 <HAL_DMA_Abort_IT+0x428>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d072      	beq.n	8002f18 <HAL_DMA_Abort_IT+0x3a0>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4a5b      	ldr	r2, [pc, #364]	; (8002fa4 <HAL_DMA_Abort_IT+0x42c>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d06d      	beq.n	8002f18 <HAL_DMA_Abort_IT+0x3a0>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a59      	ldr	r2, [pc, #356]	; (8002fa8 <HAL_DMA_Abort_IT+0x430>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d068      	beq.n	8002f18 <HAL_DMA_Abort_IT+0x3a0>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a58      	ldr	r2, [pc, #352]	; (8002fac <HAL_DMA_Abort_IT+0x434>)
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d063      	beq.n	8002f18 <HAL_DMA_Abort_IT+0x3a0>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a56      	ldr	r2, [pc, #344]	; (8002fb0 <HAL_DMA_Abort_IT+0x438>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d05e      	beq.n	8002f18 <HAL_DMA_Abort_IT+0x3a0>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4a55      	ldr	r2, [pc, #340]	; (8002fb4 <HAL_DMA_Abort_IT+0x43c>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d059      	beq.n	8002f18 <HAL_DMA_Abort_IT+0x3a0>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a53      	ldr	r2, [pc, #332]	; (8002fb8 <HAL_DMA_Abort_IT+0x440>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d054      	beq.n	8002f18 <HAL_DMA_Abort_IT+0x3a0>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4a52      	ldr	r2, [pc, #328]	; (8002fbc <HAL_DMA_Abort_IT+0x444>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d04f      	beq.n	8002f18 <HAL_DMA_Abort_IT+0x3a0>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a50      	ldr	r2, [pc, #320]	; (8002fc0 <HAL_DMA_Abort_IT+0x448>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d04a      	beq.n	8002f18 <HAL_DMA_Abort_IT+0x3a0>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a4f      	ldr	r2, [pc, #316]	; (8002fc4 <HAL_DMA_Abort_IT+0x44c>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d045      	beq.n	8002f18 <HAL_DMA_Abort_IT+0x3a0>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a4d      	ldr	r2, [pc, #308]	; (8002fc8 <HAL_DMA_Abort_IT+0x450>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d040      	beq.n	8002f18 <HAL_DMA_Abort_IT+0x3a0>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4a4c      	ldr	r2, [pc, #304]	; (8002fcc <HAL_DMA_Abort_IT+0x454>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d03b      	beq.n	8002f18 <HAL_DMA_Abort_IT+0x3a0>
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a4a      	ldr	r2, [pc, #296]	; (8002fd0 <HAL_DMA_Abort_IT+0x458>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d036      	beq.n	8002f18 <HAL_DMA_Abort_IT+0x3a0>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4a49      	ldr	r2, [pc, #292]	; (8002fd4 <HAL_DMA_Abort_IT+0x45c>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d031      	beq.n	8002f18 <HAL_DMA_Abort_IT+0x3a0>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a47      	ldr	r2, [pc, #284]	; (8002fd8 <HAL_DMA_Abort_IT+0x460>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d02c      	beq.n	8002f18 <HAL_DMA_Abort_IT+0x3a0>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4a46      	ldr	r2, [pc, #280]	; (8002fdc <HAL_DMA_Abort_IT+0x464>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d027      	beq.n	8002f18 <HAL_DMA_Abort_IT+0x3a0>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a44      	ldr	r2, [pc, #272]	; (8002fe0 <HAL_DMA_Abort_IT+0x468>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d022      	beq.n	8002f18 <HAL_DMA_Abort_IT+0x3a0>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a43      	ldr	r2, [pc, #268]	; (8002fe4 <HAL_DMA_Abort_IT+0x46c>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d01d      	beq.n	8002f18 <HAL_DMA_Abort_IT+0x3a0>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a41      	ldr	r2, [pc, #260]	; (8002fe8 <HAL_DMA_Abort_IT+0x470>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d018      	beq.n	8002f18 <HAL_DMA_Abort_IT+0x3a0>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a40      	ldr	r2, [pc, #256]	; (8002fec <HAL_DMA_Abort_IT+0x474>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d013      	beq.n	8002f18 <HAL_DMA_Abort_IT+0x3a0>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a3e      	ldr	r2, [pc, #248]	; (8002ff0 <HAL_DMA_Abort_IT+0x478>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d00e      	beq.n	8002f18 <HAL_DMA_Abort_IT+0x3a0>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4a3d      	ldr	r2, [pc, #244]	; (8002ff4 <HAL_DMA_Abort_IT+0x47c>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d009      	beq.n	8002f18 <HAL_DMA_Abort_IT+0x3a0>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a3b      	ldr	r2, [pc, #236]	; (8002ff8 <HAL_DMA_Abort_IT+0x480>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d004      	beq.n	8002f18 <HAL_DMA_Abort_IT+0x3a0>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4a3a      	ldr	r2, [pc, #232]	; (8002ffc <HAL_DMA_Abort_IT+0x484>)
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d101      	bne.n	8002f1c <HAL_DMA_Abort_IT+0x3a4>
 8002f18:	2301      	movs	r3, #1
 8002f1a:	e000      	b.n	8002f1e <HAL_DMA_Abort_IT+0x3a6>
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d028      	beq.n	8002f74 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f26:	681a      	ldr	r2, [r3, #0]
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f2c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f30:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f36:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f3c:	f003 031f 	and.w	r3, r3, #31
 8002f40:	2201      	movs	r2, #1
 8002f42:	409a      	lsls	r2, r3
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f4c:	687a      	ldr	r2, [r7, #4]
 8002f4e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002f50:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d00c      	beq.n	8002f74 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f5e:	681a      	ldr	r2, [r3, #0]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f64:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f68:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f6e:	687a      	ldr	r2, [r7, #4]
 8002f70:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002f72:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2200      	movs	r2, #0
 8002f78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2201      	movs	r2, #1
 8002f80:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d003      	beq.n	8002f94 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f90:	6878      	ldr	r0, [r7, #4]
 8002f92:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8002f94:	2300      	movs	r3, #0
}
 8002f96:	4618      	mov	r0, r3
 8002f98:	3710      	adds	r7, #16
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}
 8002f9e:	bf00      	nop
 8002fa0:	40020010 	.word	0x40020010
 8002fa4:	40020028 	.word	0x40020028
 8002fa8:	40020040 	.word	0x40020040
 8002fac:	40020058 	.word	0x40020058
 8002fb0:	40020070 	.word	0x40020070
 8002fb4:	40020088 	.word	0x40020088
 8002fb8:	400200a0 	.word	0x400200a0
 8002fbc:	400200b8 	.word	0x400200b8
 8002fc0:	40020410 	.word	0x40020410
 8002fc4:	40020428 	.word	0x40020428
 8002fc8:	40020440 	.word	0x40020440
 8002fcc:	40020458 	.word	0x40020458
 8002fd0:	40020470 	.word	0x40020470
 8002fd4:	40020488 	.word	0x40020488
 8002fd8:	400204a0 	.word	0x400204a0
 8002fdc:	400204b8 	.word	0x400204b8
 8002fe0:	58025408 	.word	0x58025408
 8002fe4:	5802541c 	.word	0x5802541c
 8002fe8:	58025430 	.word	0x58025430
 8002fec:	58025444 	.word	0x58025444
 8002ff0:	58025458 	.word	0x58025458
 8002ff4:	5802546c 	.word	0x5802546c
 8002ff8:	58025480 	.word	0x58025480
 8002ffc:	58025494 	.word	0x58025494

08003000 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b08a      	sub	sp, #40	; 0x28
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003008:	2300      	movs	r3, #0
 800300a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 800300c:	4b67      	ldr	r3, [pc, #412]	; (80031ac <HAL_DMA_IRQHandler+0x1ac>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a67      	ldr	r2, [pc, #412]	; (80031b0 <HAL_DMA_IRQHandler+0x1b0>)
 8003012:	fba2 2303 	umull	r2, r3, r2, r3
 8003016:	0a9b      	lsrs	r3, r3, #10
 8003018:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800301e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003024:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003026:	6a3b      	ldr	r3, [r7, #32]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 800302c:	69fb      	ldr	r3, [r7, #28]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4a5f      	ldr	r2, [pc, #380]	; (80031b4 <HAL_DMA_IRQHandler+0x1b4>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d04a      	beq.n	80030d2 <HAL_DMA_IRQHandler+0xd2>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a5d      	ldr	r2, [pc, #372]	; (80031b8 <HAL_DMA_IRQHandler+0x1b8>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d045      	beq.n	80030d2 <HAL_DMA_IRQHandler+0xd2>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a5c      	ldr	r2, [pc, #368]	; (80031bc <HAL_DMA_IRQHandler+0x1bc>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d040      	beq.n	80030d2 <HAL_DMA_IRQHandler+0xd2>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a5a      	ldr	r2, [pc, #360]	; (80031c0 <HAL_DMA_IRQHandler+0x1c0>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d03b      	beq.n	80030d2 <HAL_DMA_IRQHandler+0xd2>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a59      	ldr	r2, [pc, #356]	; (80031c4 <HAL_DMA_IRQHandler+0x1c4>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d036      	beq.n	80030d2 <HAL_DMA_IRQHandler+0xd2>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a57      	ldr	r2, [pc, #348]	; (80031c8 <HAL_DMA_IRQHandler+0x1c8>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d031      	beq.n	80030d2 <HAL_DMA_IRQHandler+0xd2>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4a56      	ldr	r2, [pc, #344]	; (80031cc <HAL_DMA_IRQHandler+0x1cc>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d02c      	beq.n	80030d2 <HAL_DMA_IRQHandler+0xd2>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4a54      	ldr	r2, [pc, #336]	; (80031d0 <HAL_DMA_IRQHandler+0x1d0>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d027      	beq.n	80030d2 <HAL_DMA_IRQHandler+0xd2>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4a53      	ldr	r2, [pc, #332]	; (80031d4 <HAL_DMA_IRQHandler+0x1d4>)
 8003088:	4293      	cmp	r3, r2
 800308a:	d022      	beq.n	80030d2 <HAL_DMA_IRQHandler+0xd2>
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a51      	ldr	r2, [pc, #324]	; (80031d8 <HAL_DMA_IRQHandler+0x1d8>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d01d      	beq.n	80030d2 <HAL_DMA_IRQHandler+0xd2>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4a50      	ldr	r2, [pc, #320]	; (80031dc <HAL_DMA_IRQHandler+0x1dc>)
 800309c:	4293      	cmp	r3, r2
 800309e:	d018      	beq.n	80030d2 <HAL_DMA_IRQHandler+0xd2>
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a4e      	ldr	r2, [pc, #312]	; (80031e0 <HAL_DMA_IRQHandler+0x1e0>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d013      	beq.n	80030d2 <HAL_DMA_IRQHandler+0xd2>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4a4d      	ldr	r2, [pc, #308]	; (80031e4 <HAL_DMA_IRQHandler+0x1e4>)
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d00e      	beq.n	80030d2 <HAL_DMA_IRQHandler+0xd2>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a4b      	ldr	r2, [pc, #300]	; (80031e8 <HAL_DMA_IRQHandler+0x1e8>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d009      	beq.n	80030d2 <HAL_DMA_IRQHandler+0xd2>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a4a      	ldr	r2, [pc, #296]	; (80031ec <HAL_DMA_IRQHandler+0x1ec>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d004      	beq.n	80030d2 <HAL_DMA_IRQHandler+0xd2>
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a48      	ldr	r2, [pc, #288]	; (80031f0 <HAL_DMA_IRQHandler+0x1f0>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d101      	bne.n	80030d6 <HAL_DMA_IRQHandler+0xd6>
 80030d2:	2301      	movs	r3, #1
 80030d4:	e000      	b.n	80030d8 <HAL_DMA_IRQHandler+0xd8>
 80030d6:	2300      	movs	r3, #0
 80030d8:	2b00      	cmp	r3, #0
 80030da:	f000 842b 	beq.w	8003934 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030e2:	f003 031f 	and.w	r3, r3, #31
 80030e6:	2208      	movs	r2, #8
 80030e8:	409a      	lsls	r2, r3
 80030ea:	69bb      	ldr	r3, [r7, #24]
 80030ec:	4013      	ands	r3, r2
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	f000 80a2 	beq.w	8003238 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a2e      	ldr	r2, [pc, #184]	; (80031b4 <HAL_DMA_IRQHandler+0x1b4>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d04a      	beq.n	8003194 <HAL_DMA_IRQHandler+0x194>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a2d      	ldr	r2, [pc, #180]	; (80031b8 <HAL_DMA_IRQHandler+0x1b8>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d045      	beq.n	8003194 <HAL_DMA_IRQHandler+0x194>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a2b      	ldr	r2, [pc, #172]	; (80031bc <HAL_DMA_IRQHandler+0x1bc>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d040      	beq.n	8003194 <HAL_DMA_IRQHandler+0x194>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4a2a      	ldr	r2, [pc, #168]	; (80031c0 <HAL_DMA_IRQHandler+0x1c0>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d03b      	beq.n	8003194 <HAL_DMA_IRQHandler+0x194>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a28      	ldr	r2, [pc, #160]	; (80031c4 <HAL_DMA_IRQHandler+0x1c4>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d036      	beq.n	8003194 <HAL_DMA_IRQHandler+0x194>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a27      	ldr	r2, [pc, #156]	; (80031c8 <HAL_DMA_IRQHandler+0x1c8>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d031      	beq.n	8003194 <HAL_DMA_IRQHandler+0x194>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a25      	ldr	r2, [pc, #148]	; (80031cc <HAL_DMA_IRQHandler+0x1cc>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d02c      	beq.n	8003194 <HAL_DMA_IRQHandler+0x194>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4a24      	ldr	r2, [pc, #144]	; (80031d0 <HAL_DMA_IRQHandler+0x1d0>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d027      	beq.n	8003194 <HAL_DMA_IRQHandler+0x194>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a22      	ldr	r2, [pc, #136]	; (80031d4 <HAL_DMA_IRQHandler+0x1d4>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d022      	beq.n	8003194 <HAL_DMA_IRQHandler+0x194>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a21      	ldr	r2, [pc, #132]	; (80031d8 <HAL_DMA_IRQHandler+0x1d8>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d01d      	beq.n	8003194 <HAL_DMA_IRQHandler+0x194>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a1f      	ldr	r2, [pc, #124]	; (80031dc <HAL_DMA_IRQHandler+0x1dc>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d018      	beq.n	8003194 <HAL_DMA_IRQHandler+0x194>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4a1e      	ldr	r2, [pc, #120]	; (80031e0 <HAL_DMA_IRQHandler+0x1e0>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d013      	beq.n	8003194 <HAL_DMA_IRQHandler+0x194>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a1c      	ldr	r2, [pc, #112]	; (80031e4 <HAL_DMA_IRQHandler+0x1e4>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d00e      	beq.n	8003194 <HAL_DMA_IRQHandler+0x194>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a1b      	ldr	r2, [pc, #108]	; (80031e8 <HAL_DMA_IRQHandler+0x1e8>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d009      	beq.n	8003194 <HAL_DMA_IRQHandler+0x194>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a19      	ldr	r2, [pc, #100]	; (80031ec <HAL_DMA_IRQHandler+0x1ec>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d004      	beq.n	8003194 <HAL_DMA_IRQHandler+0x194>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a18      	ldr	r2, [pc, #96]	; (80031f0 <HAL_DMA_IRQHandler+0x1f0>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d12f      	bne.n	80031f4 <HAL_DMA_IRQHandler+0x1f4>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f003 0304 	and.w	r3, r3, #4
 800319e:	2b00      	cmp	r3, #0
 80031a0:	bf14      	ite	ne
 80031a2:	2301      	movne	r3, #1
 80031a4:	2300      	moveq	r3, #0
 80031a6:	b2db      	uxtb	r3, r3
 80031a8:	e02e      	b.n	8003208 <HAL_DMA_IRQHandler+0x208>
 80031aa:	bf00      	nop
 80031ac:	24000400 	.word	0x24000400
 80031b0:	1b4e81b5 	.word	0x1b4e81b5
 80031b4:	40020010 	.word	0x40020010
 80031b8:	40020028 	.word	0x40020028
 80031bc:	40020040 	.word	0x40020040
 80031c0:	40020058 	.word	0x40020058
 80031c4:	40020070 	.word	0x40020070
 80031c8:	40020088 	.word	0x40020088
 80031cc:	400200a0 	.word	0x400200a0
 80031d0:	400200b8 	.word	0x400200b8
 80031d4:	40020410 	.word	0x40020410
 80031d8:	40020428 	.word	0x40020428
 80031dc:	40020440 	.word	0x40020440
 80031e0:	40020458 	.word	0x40020458
 80031e4:	40020470 	.word	0x40020470
 80031e8:	40020488 	.word	0x40020488
 80031ec:	400204a0 	.word	0x400204a0
 80031f0:	400204b8 	.word	0x400204b8
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f003 0308 	and.w	r3, r3, #8
 80031fe:	2b00      	cmp	r3, #0
 8003200:	bf14      	ite	ne
 8003202:	2301      	movne	r3, #1
 8003204:	2300      	moveq	r3, #0
 8003206:	b2db      	uxtb	r3, r3
 8003208:	2b00      	cmp	r3, #0
 800320a:	d015      	beq.n	8003238 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	681a      	ldr	r2, [r3, #0]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f022 0204 	bic.w	r2, r2, #4
 800321a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003220:	f003 031f 	and.w	r3, r3, #31
 8003224:	2208      	movs	r2, #8
 8003226:	409a      	lsls	r2, r3
 8003228:	6a3b      	ldr	r3, [r7, #32]
 800322a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003230:	f043 0201 	orr.w	r2, r3, #1
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800323c:	f003 031f 	and.w	r3, r3, #31
 8003240:	69ba      	ldr	r2, [r7, #24]
 8003242:	fa22 f303 	lsr.w	r3, r2, r3
 8003246:	f003 0301 	and.w	r3, r3, #1
 800324a:	2b00      	cmp	r3, #0
 800324c:	d06e      	beq.n	800332c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4a69      	ldr	r2, [pc, #420]	; (80033f8 <HAL_DMA_IRQHandler+0x3f8>)
 8003254:	4293      	cmp	r3, r2
 8003256:	d04a      	beq.n	80032ee <HAL_DMA_IRQHandler+0x2ee>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a67      	ldr	r2, [pc, #412]	; (80033fc <HAL_DMA_IRQHandler+0x3fc>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d045      	beq.n	80032ee <HAL_DMA_IRQHandler+0x2ee>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4a66      	ldr	r2, [pc, #408]	; (8003400 <HAL_DMA_IRQHandler+0x400>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d040      	beq.n	80032ee <HAL_DMA_IRQHandler+0x2ee>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a64      	ldr	r2, [pc, #400]	; (8003404 <HAL_DMA_IRQHandler+0x404>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d03b      	beq.n	80032ee <HAL_DMA_IRQHandler+0x2ee>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a63      	ldr	r2, [pc, #396]	; (8003408 <HAL_DMA_IRQHandler+0x408>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d036      	beq.n	80032ee <HAL_DMA_IRQHandler+0x2ee>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a61      	ldr	r2, [pc, #388]	; (800340c <HAL_DMA_IRQHandler+0x40c>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d031      	beq.n	80032ee <HAL_DMA_IRQHandler+0x2ee>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a60      	ldr	r2, [pc, #384]	; (8003410 <HAL_DMA_IRQHandler+0x410>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d02c      	beq.n	80032ee <HAL_DMA_IRQHandler+0x2ee>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a5e      	ldr	r2, [pc, #376]	; (8003414 <HAL_DMA_IRQHandler+0x414>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d027      	beq.n	80032ee <HAL_DMA_IRQHandler+0x2ee>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a5d      	ldr	r2, [pc, #372]	; (8003418 <HAL_DMA_IRQHandler+0x418>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d022      	beq.n	80032ee <HAL_DMA_IRQHandler+0x2ee>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a5b      	ldr	r2, [pc, #364]	; (800341c <HAL_DMA_IRQHandler+0x41c>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d01d      	beq.n	80032ee <HAL_DMA_IRQHandler+0x2ee>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4a5a      	ldr	r2, [pc, #360]	; (8003420 <HAL_DMA_IRQHandler+0x420>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d018      	beq.n	80032ee <HAL_DMA_IRQHandler+0x2ee>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a58      	ldr	r2, [pc, #352]	; (8003424 <HAL_DMA_IRQHandler+0x424>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d013      	beq.n	80032ee <HAL_DMA_IRQHandler+0x2ee>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4a57      	ldr	r2, [pc, #348]	; (8003428 <HAL_DMA_IRQHandler+0x428>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d00e      	beq.n	80032ee <HAL_DMA_IRQHandler+0x2ee>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a55      	ldr	r2, [pc, #340]	; (800342c <HAL_DMA_IRQHandler+0x42c>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d009      	beq.n	80032ee <HAL_DMA_IRQHandler+0x2ee>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4a54      	ldr	r2, [pc, #336]	; (8003430 <HAL_DMA_IRQHandler+0x430>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d004      	beq.n	80032ee <HAL_DMA_IRQHandler+0x2ee>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a52      	ldr	r2, [pc, #328]	; (8003434 <HAL_DMA_IRQHandler+0x434>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d10a      	bne.n	8003304 <HAL_DMA_IRQHandler+0x304>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	695b      	ldr	r3, [r3, #20]
 80032f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	bf14      	ite	ne
 80032fc:	2301      	movne	r3, #1
 80032fe:	2300      	moveq	r3, #0
 8003300:	b2db      	uxtb	r3, r3
 8003302:	e003      	b.n	800330c <HAL_DMA_IRQHandler+0x30c>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	2300      	movs	r3, #0
 800330c:	2b00      	cmp	r3, #0
 800330e:	d00d      	beq.n	800332c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003314:	f003 031f 	and.w	r3, r3, #31
 8003318:	2201      	movs	r2, #1
 800331a:	409a      	lsls	r2, r3
 800331c:	6a3b      	ldr	r3, [r7, #32]
 800331e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003324:	f043 0202 	orr.w	r2, r3, #2
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003330:	f003 031f 	and.w	r3, r3, #31
 8003334:	2204      	movs	r2, #4
 8003336:	409a      	lsls	r2, r3
 8003338:	69bb      	ldr	r3, [r7, #24]
 800333a:	4013      	ands	r3, r2
 800333c:	2b00      	cmp	r3, #0
 800333e:	f000 808f 	beq.w	8003460 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a2c      	ldr	r2, [pc, #176]	; (80033f8 <HAL_DMA_IRQHandler+0x3f8>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d04a      	beq.n	80033e2 <HAL_DMA_IRQHandler+0x3e2>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a2a      	ldr	r2, [pc, #168]	; (80033fc <HAL_DMA_IRQHandler+0x3fc>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d045      	beq.n	80033e2 <HAL_DMA_IRQHandler+0x3e2>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a29      	ldr	r2, [pc, #164]	; (8003400 <HAL_DMA_IRQHandler+0x400>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d040      	beq.n	80033e2 <HAL_DMA_IRQHandler+0x3e2>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a27      	ldr	r2, [pc, #156]	; (8003404 <HAL_DMA_IRQHandler+0x404>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d03b      	beq.n	80033e2 <HAL_DMA_IRQHandler+0x3e2>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a26      	ldr	r2, [pc, #152]	; (8003408 <HAL_DMA_IRQHandler+0x408>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d036      	beq.n	80033e2 <HAL_DMA_IRQHandler+0x3e2>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a24      	ldr	r2, [pc, #144]	; (800340c <HAL_DMA_IRQHandler+0x40c>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d031      	beq.n	80033e2 <HAL_DMA_IRQHandler+0x3e2>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4a23      	ldr	r2, [pc, #140]	; (8003410 <HAL_DMA_IRQHandler+0x410>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d02c      	beq.n	80033e2 <HAL_DMA_IRQHandler+0x3e2>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a21      	ldr	r2, [pc, #132]	; (8003414 <HAL_DMA_IRQHandler+0x414>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d027      	beq.n	80033e2 <HAL_DMA_IRQHandler+0x3e2>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4a20      	ldr	r2, [pc, #128]	; (8003418 <HAL_DMA_IRQHandler+0x418>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d022      	beq.n	80033e2 <HAL_DMA_IRQHandler+0x3e2>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a1e      	ldr	r2, [pc, #120]	; (800341c <HAL_DMA_IRQHandler+0x41c>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d01d      	beq.n	80033e2 <HAL_DMA_IRQHandler+0x3e2>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4a1d      	ldr	r2, [pc, #116]	; (8003420 <HAL_DMA_IRQHandler+0x420>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d018      	beq.n	80033e2 <HAL_DMA_IRQHandler+0x3e2>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a1b      	ldr	r2, [pc, #108]	; (8003424 <HAL_DMA_IRQHandler+0x424>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d013      	beq.n	80033e2 <HAL_DMA_IRQHandler+0x3e2>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a1a      	ldr	r2, [pc, #104]	; (8003428 <HAL_DMA_IRQHandler+0x428>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d00e      	beq.n	80033e2 <HAL_DMA_IRQHandler+0x3e2>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a18      	ldr	r2, [pc, #96]	; (800342c <HAL_DMA_IRQHandler+0x42c>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d009      	beq.n	80033e2 <HAL_DMA_IRQHandler+0x3e2>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a17      	ldr	r2, [pc, #92]	; (8003430 <HAL_DMA_IRQHandler+0x430>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d004      	beq.n	80033e2 <HAL_DMA_IRQHandler+0x3e2>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a15      	ldr	r2, [pc, #84]	; (8003434 <HAL_DMA_IRQHandler+0x434>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d12a      	bne.n	8003438 <HAL_DMA_IRQHandler+0x438>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f003 0302 	and.w	r3, r3, #2
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	bf14      	ite	ne
 80033f0:	2301      	movne	r3, #1
 80033f2:	2300      	moveq	r3, #0
 80033f4:	b2db      	uxtb	r3, r3
 80033f6:	e023      	b.n	8003440 <HAL_DMA_IRQHandler+0x440>
 80033f8:	40020010 	.word	0x40020010
 80033fc:	40020028 	.word	0x40020028
 8003400:	40020040 	.word	0x40020040
 8003404:	40020058 	.word	0x40020058
 8003408:	40020070 	.word	0x40020070
 800340c:	40020088 	.word	0x40020088
 8003410:	400200a0 	.word	0x400200a0
 8003414:	400200b8 	.word	0x400200b8
 8003418:	40020410 	.word	0x40020410
 800341c:	40020428 	.word	0x40020428
 8003420:	40020440 	.word	0x40020440
 8003424:	40020458 	.word	0x40020458
 8003428:	40020470 	.word	0x40020470
 800342c:	40020488 	.word	0x40020488
 8003430:	400204a0 	.word	0x400204a0
 8003434:	400204b8 	.word	0x400204b8
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	2300      	movs	r3, #0
 8003440:	2b00      	cmp	r3, #0
 8003442:	d00d      	beq.n	8003460 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003448:	f003 031f 	and.w	r3, r3, #31
 800344c:	2204      	movs	r2, #4
 800344e:	409a      	lsls	r2, r3
 8003450:	6a3b      	ldr	r3, [r7, #32]
 8003452:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003458:	f043 0204 	orr.w	r2, r3, #4
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003464:	f003 031f 	and.w	r3, r3, #31
 8003468:	2210      	movs	r2, #16
 800346a:	409a      	lsls	r2, r3
 800346c:	69bb      	ldr	r3, [r7, #24]
 800346e:	4013      	ands	r3, r2
 8003470:	2b00      	cmp	r3, #0
 8003472:	f000 80a6 	beq.w	80035c2 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4a85      	ldr	r2, [pc, #532]	; (8003690 <HAL_DMA_IRQHandler+0x690>)
 800347c:	4293      	cmp	r3, r2
 800347e:	d04a      	beq.n	8003516 <HAL_DMA_IRQHandler+0x516>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a83      	ldr	r2, [pc, #524]	; (8003694 <HAL_DMA_IRQHandler+0x694>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d045      	beq.n	8003516 <HAL_DMA_IRQHandler+0x516>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4a82      	ldr	r2, [pc, #520]	; (8003698 <HAL_DMA_IRQHandler+0x698>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d040      	beq.n	8003516 <HAL_DMA_IRQHandler+0x516>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a80      	ldr	r2, [pc, #512]	; (800369c <HAL_DMA_IRQHandler+0x69c>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d03b      	beq.n	8003516 <HAL_DMA_IRQHandler+0x516>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4a7f      	ldr	r2, [pc, #508]	; (80036a0 <HAL_DMA_IRQHandler+0x6a0>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d036      	beq.n	8003516 <HAL_DMA_IRQHandler+0x516>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a7d      	ldr	r2, [pc, #500]	; (80036a4 <HAL_DMA_IRQHandler+0x6a4>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d031      	beq.n	8003516 <HAL_DMA_IRQHandler+0x516>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a7c      	ldr	r2, [pc, #496]	; (80036a8 <HAL_DMA_IRQHandler+0x6a8>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d02c      	beq.n	8003516 <HAL_DMA_IRQHandler+0x516>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a7a      	ldr	r2, [pc, #488]	; (80036ac <HAL_DMA_IRQHandler+0x6ac>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d027      	beq.n	8003516 <HAL_DMA_IRQHandler+0x516>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a79      	ldr	r2, [pc, #484]	; (80036b0 <HAL_DMA_IRQHandler+0x6b0>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d022      	beq.n	8003516 <HAL_DMA_IRQHandler+0x516>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a77      	ldr	r2, [pc, #476]	; (80036b4 <HAL_DMA_IRQHandler+0x6b4>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d01d      	beq.n	8003516 <HAL_DMA_IRQHandler+0x516>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a76      	ldr	r2, [pc, #472]	; (80036b8 <HAL_DMA_IRQHandler+0x6b8>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d018      	beq.n	8003516 <HAL_DMA_IRQHandler+0x516>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a74      	ldr	r2, [pc, #464]	; (80036bc <HAL_DMA_IRQHandler+0x6bc>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d013      	beq.n	8003516 <HAL_DMA_IRQHandler+0x516>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a73      	ldr	r2, [pc, #460]	; (80036c0 <HAL_DMA_IRQHandler+0x6c0>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d00e      	beq.n	8003516 <HAL_DMA_IRQHandler+0x516>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a71      	ldr	r2, [pc, #452]	; (80036c4 <HAL_DMA_IRQHandler+0x6c4>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d009      	beq.n	8003516 <HAL_DMA_IRQHandler+0x516>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a70      	ldr	r2, [pc, #448]	; (80036c8 <HAL_DMA_IRQHandler+0x6c8>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d004      	beq.n	8003516 <HAL_DMA_IRQHandler+0x516>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a6e      	ldr	r2, [pc, #440]	; (80036cc <HAL_DMA_IRQHandler+0x6cc>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d10a      	bne.n	800352c <HAL_DMA_IRQHandler+0x52c>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f003 0308 	and.w	r3, r3, #8
 8003520:	2b00      	cmp	r3, #0
 8003522:	bf14      	ite	ne
 8003524:	2301      	movne	r3, #1
 8003526:	2300      	moveq	r3, #0
 8003528:	b2db      	uxtb	r3, r3
 800352a:	e009      	b.n	8003540 <HAL_DMA_IRQHandler+0x540>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f003 0304 	and.w	r3, r3, #4
 8003536:	2b00      	cmp	r3, #0
 8003538:	bf14      	ite	ne
 800353a:	2301      	movne	r3, #1
 800353c:	2300      	moveq	r3, #0
 800353e:	b2db      	uxtb	r3, r3
 8003540:	2b00      	cmp	r3, #0
 8003542:	d03e      	beq.n	80035c2 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003548:	f003 031f 	and.w	r3, r3, #31
 800354c:	2210      	movs	r2, #16
 800354e:	409a      	lsls	r2, r3
 8003550:	6a3b      	ldr	r3, [r7, #32]
 8003552:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800355e:	2b00      	cmp	r3, #0
 8003560:	d018      	beq.n	8003594 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800356c:	2b00      	cmp	r3, #0
 800356e:	d108      	bne.n	8003582 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003574:	2b00      	cmp	r3, #0
 8003576:	d024      	beq.n	80035c2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800357c:	6878      	ldr	r0, [r7, #4]
 800357e:	4798      	blx	r3
 8003580:	e01f      	b.n	80035c2 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003586:	2b00      	cmp	r3, #0
 8003588:	d01b      	beq.n	80035c2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800358e:	6878      	ldr	r0, [r7, #4]
 8003590:	4798      	blx	r3
 8003592:	e016      	b.n	80035c2 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d107      	bne.n	80035b2 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	681a      	ldr	r2, [r3, #0]
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f022 0208 	bic.w	r2, r2, #8
 80035b0:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d003      	beq.n	80035c2 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035be:	6878      	ldr	r0, [r7, #4]
 80035c0:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035c6:	f003 031f 	and.w	r3, r3, #31
 80035ca:	2220      	movs	r2, #32
 80035cc:	409a      	lsls	r2, r3
 80035ce:	69bb      	ldr	r3, [r7, #24]
 80035d0:	4013      	ands	r3, r2
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	f000 8110 	beq.w	80037f8 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a2c      	ldr	r2, [pc, #176]	; (8003690 <HAL_DMA_IRQHandler+0x690>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d04a      	beq.n	8003678 <HAL_DMA_IRQHandler+0x678>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4a2b      	ldr	r2, [pc, #172]	; (8003694 <HAL_DMA_IRQHandler+0x694>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d045      	beq.n	8003678 <HAL_DMA_IRQHandler+0x678>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a29      	ldr	r2, [pc, #164]	; (8003698 <HAL_DMA_IRQHandler+0x698>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d040      	beq.n	8003678 <HAL_DMA_IRQHandler+0x678>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4a28      	ldr	r2, [pc, #160]	; (800369c <HAL_DMA_IRQHandler+0x69c>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d03b      	beq.n	8003678 <HAL_DMA_IRQHandler+0x678>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a26      	ldr	r2, [pc, #152]	; (80036a0 <HAL_DMA_IRQHandler+0x6a0>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d036      	beq.n	8003678 <HAL_DMA_IRQHandler+0x678>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4a25      	ldr	r2, [pc, #148]	; (80036a4 <HAL_DMA_IRQHandler+0x6a4>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d031      	beq.n	8003678 <HAL_DMA_IRQHandler+0x678>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a23      	ldr	r2, [pc, #140]	; (80036a8 <HAL_DMA_IRQHandler+0x6a8>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d02c      	beq.n	8003678 <HAL_DMA_IRQHandler+0x678>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4a22      	ldr	r2, [pc, #136]	; (80036ac <HAL_DMA_IRQHandler+0x6ac>)
 8003624:	4293      	cmp	r3, r2
 8003626:	d027      	beq.n	8003678 <HAL_DMA_IRQHandler+0x678>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a20      	ldr	r2, [pc, #128]	; (80036b0 <HAL_DMA_IRQHandler+0x6b0>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d022      	beq.n	8003678 <HAL_DMA_IRQHandler+0x678>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4a1f      	ldr	r2, [pc, #124]	; (80036b4 <HAL_DMA_IRQHandler+0x6b4>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d01d      	beq.n	8003678 <HAL_DMA_IRQHandler+0x678>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a1d      	ldr	r2, [pc, #116]	; (80036b8 <HAL_DMA_IRQHandler+0x6b8>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d018      	beq.n	8003678 <HAL_DMA_IRQHandler+0x678>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4a1c      	ldr	r2, [pc, #112]	; (80036bc <HAL_DMA_IRQHandler+0x6bc>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d013      	beq.n	8003678 <HAL_DMA_IRQHandler+0x678>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4a1a      	ldr	r2, [pc, #104]	; (80036c0 <HAL_DMA_IRQHandler+0x6c0>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d00e      	beq.n	8003678 <HAL_DMA_IRQHandler+0x678>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4a19      	ldr	r2, [pc, #100]	; (80036c4 <HAL_DMA_IRQHandler+0x6c4>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d009      	beq.n	8003678 <HAL_DMA_IRQHandler+0x678>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a17      	ldr	r2, [pc, #92]	; (80036c8 <HAL_DMA_IRQHandler+0x6c8>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d004      	beq.n	8003678 <HAL_DMA_IRQHandler+0x678>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4a16      	ldr	r2, [pc, #88]	; (80036cc <HAL_DMA_IRQHandler+0x6cc>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d12b      	bne.n	80036d0 <HAL_DMA_IRQHandler+0x6d0>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f003 0310 	and.w	r3, r3, #16
 8003682:	2b00      	cmp	r3, #0
 8003684:	bf14      	ite	ne
 8003686:	2301      	movne	r3, #1
 8003688:	2300      	moveq	r3, #0
 800368a:	b2db      	uxtb	r3, r3
 800368c:	e02a      	b.n	80036e4 <HAL_DMA_IRQHandler+0x6e4>
 800368e:	bf00      	nop
 8003690:	40020010 	.word	0x40020010
 8003694:	40020028 	.word	0x40020028
 8003698:	40020040 	.word	0x40020040
 800369c:	40020058 	.word	0x40020058
 80036a0:	40020070 	.word	0x40020070
 80036a4:	40020088 	.word	0x40020088
 80036a8:	400200a0 	.word	0x400200a0
 80036ac:	400200b8 	.word	0x400200b8
 80036b0:	40020410 	.word	0x40020410
 80036b4:	40020428 	.word	0x40020428
 80036b8:	40020440 	.word	0x40020440
 80036bc:	40020458 	.word	0x40020458
 80036c0:	40020470 	.word	0x40020470
 80036c4:	40020488 	.word	0x40020488
 80036c8:	400204a0 	.word	0x400204a0
 80036cc:	400204b8 	.word	0x400204b8
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f003 0302 	and.w	r3, r3, #2
 80036da:	2b00      	cmp	r3, #0
 80036dc:	bf14      	ite	ne
 80036de:	2301      	movne	r3, #1
 80036e0:	2300      	moveq	r3, #0
 80036e2:	b2db      	uxtb	r3, r3
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	f000 8087 	beq.w	80037f8 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036ee:	f003 031f 	and.w	r3, r3, #31
 80036f2:	2220      	movs	r2, #32
 80036f4:	409a      	lsls	r2, r3
 80036f6:	6a3b      	ldr	r3, [r7, #32]
 80036f8:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003700:	b2db      	uxtb	r3, r3
 8003702:	2b04      	cmp	r3, #4
 8003704:	d139      	bne.n	800377a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	681a      	ldr	r2, [r3, #0]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f022 0216 	bic.w	r2, r2, #22
 8003714:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	695a      	ldr	r2, [r3, #20]
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003724:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800372a:	2b00      	cmp	r3, #0
 800372c:	d103      	bne.n	8003736 <HAL_DMA_IRQHandler+0x736>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003732:	2b00      	cmp	r3, #0
 8003734:	d007      	beq.n	8003746 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	681a      	ldr	r2, [r3, #0]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f022 0208 	bic.w	r2, r2, #8
 8003744:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800374a:	f003 031f 	and.w	r3, r3, #31
 800374e:	223f      	movs	r2, #63	; 0x3f
 8003750:	409a      	lsls	r2, r3
 8003752:	6a3b      	ldr	r3, [r7, #32]
 8003754:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2200      	movs	r2, #0
 800375a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2201      	movs	r2, #1
 8003762:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800376a:	2b00      	cmp	r3, #0
 800376c:	f000 834a 	beq.w	8003e04 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003774:	6878      	ldr	r0, [r7, #4]
 8003776:	4798      	blx	r3
          }
          return;
 8003778:	e344      	b.n	8003e04 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003784:	2b00      	cmp	r3, #0
 8003786:	d018      	beq.n	80037ba <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003792:	2b00      	cmp	r3, #0
 8003794:	d108      	bne.n	80037a8 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800379a:	2b00      	cmp	r3, #0
 800379c:	d02c      	beq.n	80037f8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037a2:	6878      	ldr	r0, [r7, #4]
 80037a4:	4798      	blx	r3
 80037a6:	e027      	b.n	80037f8 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d023      	beq.n	80037f8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037b4:	6878      	ldr	r0, [r7, #4]
 80037b6:	4798      	blx	r3
 80037b8:	e01e      	b.n	80037f8 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d10f      	bne.n	80037e8 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	681a      	ldr	r2, [r3, #0]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f022 0210 	bic.w	r2, r2, #16
 80037d6:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2200      	movs	r2, #0
 80037dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2201      	movs	r2, #1
 80037e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d003      	beq.n	80037f8 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037f4:	6878      	ldr	r0, [r7, #4]
 80037f6:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	f000 8306 	beq.w	8003e0e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003806:	f003 0301 	and.w	r3, r3, #1
 800380a:	2b00      	cmp	r3, #0
 800380c:	f000 8088 	beq.w	8003920 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2204      	movs	r2, #4
 8003814:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a7a      	ldr	r2, [pc, #488]	; (8003a08 <HAL_DMA_IRQHandler+0xa08>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d04a      	beq.n	80038b8 <HAL_DMA_IRQHandler+0x8b8>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a79      	ldr	r2, [pc, #484]	; (8003a0c <HAL_DMA_IRQHandler+0xa0c>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d045      	beq.n	80038b8 <HAL_DMA_IRQHandler+0x8b8>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a77      	ldr	r2, [pc, #476]	; (8003a10 <HAL_DMA_IRQHandler+0xa10>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d040      	beq.n	80038b8 <HAL_DMA_IRQHandler+0x8b8>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4a76      	ldr	r2, [pc, #472]	; (8003a14 <HAL_DMA_IRQHandler+0xa14>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d03b      	beq.n	80038b8 <HAL_DMA_IRQHandler+0x8b8>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a74      	ldr	r2, [pc, #464]	; (8003a18 <HAL_DMA_IRQHandler+0xa18>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d036      	beq.n	80038b8 <HAL_DMA_IRQHandler+0x8b8>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4a73      	ldr	r2, [pc, #460]	; (8003a1c <HAL_DMA_IRQHandler+0xa1c>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d031      	beq.n	80038b8 <HAL_DMA_IRQHandler+0x8b8>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4a71      	ldr	r2, [pc, #452]	; (8003a20 <HAL_DMA_IRQHandler+0xa20>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d02c      	beq.n	80038b8 <HAL_DMA_IRQHandler+0x8b8>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4a70      	ldr	r2, [pc, #448]	; (8003a24 <HAL_DMA_IRQHandler+0xa24>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d027      	beq.n	80038b8 <HAL_DMA_IRQHandler+0x8b8>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a6e      	ldr	r2, [pc, #440]	; (8003a28 <HAL_DMA_IRQHandler+0xa28>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d022      	beq.n	80038b8 <HAL_DMA_IRQHandler+0x8b8>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4a6d      	ldr	r2, [pc, #436]	; (8003a2c <HAL_DMA_IRQHandler+0xa2c>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d01d      	beq.n	80038b8 <HAL_DMA_IRQHandler+0x8b8>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a6b      	ldr	r2, [pc, #428]	; (8003a30 <HAL_DMA_IRQHandler+0xa30>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d018      	beq.n	80038b8 <HAL_DMA_IRQHandler+0x8b8>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4a6a      	ldr	r2, [pc, #424]	; (8003a34 <HAL_DMA_IRQHandler+0xa34>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d013      	beq.n	80038b8 <HAL_DMA_IRQHandler+0x8b8>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a68      	ldr	r2, [pc, #416]	; (8003a38 <HAL_DMA_IRQHandler+0xa38>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d00e      	beq.n	80038b8 <HAL_DMA_IRQHandler+0x8b8>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a67      	ldr	r2, [pc, #412]	; (8003a3c <HAL_DMA_IRQHandler+0xa3c>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d009      	beq.n	80038b8 <HAL_DMA_IRQHandler+0x8b8>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a65      	ldr	r2, [pc, #404]	; (8003a40 <HAL_DMA_IRQHandler+0xa40>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d004      	beq.n	80038b8 <HAL_DMA_IRQHandler+0x8b8>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a64      	ldr	r2, [pc, #400]	; (8003a44 <HAL_DMA_IRQHandler+0xa44>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d108      	bne.n	80038ca <HAL_DMA_IRQHandler+0x8ca>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	681a      	ldr	r2, [r3, #0]
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f022 0201 	bic.w	r2, r2, #1
 80038c6:	601a      	str	r2, [r3, #0]
 80038c8:	e007      	b.n	80038da <HAL_DMA_IRQHandler+0x8da>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	681a      	ldr	r2, [r3, #0]
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f022 0201 	bic.w	r2, r2, #1
 80038d8:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	3301      	adds	r3, #1
 80038de:	60fb      	str	r3, [r7, #12]
 80038e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038e2:	429a      	cmp	r2, r3
 80038e4:	d307      	bcc.n	80038f6 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f003 0301 	and.w	r3, r3, #1
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d1f2      	bne.n	80038da <HAL_DMA_IRQHandler+0x8da>
 80038f4:	e000      	b.n	80038f8 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80038f6:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2200      	movs	r2, #0
 80038fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f003 0301 	and.w	r3, r3, #1
 800390a:	2b00      	cmp	r3, #0
 800390c:	d004      	beq.n	8003918 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2203      	movs	r2, #3
 8003912:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8003916:	e003      	b.n	8003920 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2201      	movs	r2, #1
 800391c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003924:	2b00      	cmp	r3, #0
 8003926:	f000 8272 	beq.w	8003e0e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800392e:	6878      	ldr	r0, [r7, #4]
 8003930:	4798      	blx	r3
 8003932:	e26c      	b.n	8003e0e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4a43      	ldr	r2, [pc, #268]	; (8003a48 <HAL_DMA_IRQHandler+0xa48>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d022      	beq.n	8003984 <HAL_DMA_IRQHandler+0x984>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4a42      	ldr	r2, [pc, #264]	; (8003a4c <HAL_DMA_IRQHandler+0xa4c>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d01d      	beq.n	8003984 <HAL_DMA_IRQHandler+0x984>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a40      	ldr	r2, [pc, #256]	; (8003a50 <HAL_DMA_IRQHandler+0xa50>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d018      	beq.n	8003984 <HAL_DMA_IRQHandler+0x984>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4a3f      	ldr	r2, [pc, #252]	; (8003a54 <HAL_DMA_IRQHandler+0xa54>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d013      	beq.n	8003984 <HAL_DMA_IRQHandler+0x984>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a3d      	ldr	r2, [pc, #244]	; (8003a58 <HAL_DMA_IRQHandler+0xa58>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d00e      	beq.n	8003984 <HAL_DMA_IRQHandler+0x984>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4a3c      	ldr	r2, [pc, #240]	; (8003a5c <HAL_DMA_IRQHandler+0xa5c>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d009      	beq.n	8003984 <HAL_DMA_IRQHandler+0x984>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a3a      	ldr	r2, [pc, #232]	; (8003a60 <HAL_DMA_IRQHandler+0xa60>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d004      	beq.n	8003984 <HAL_DMA_IRQHandler+0x984>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4a39      	ldr	r2, [pc, #228]	; (8003a64 <HAL_DMA_IRQHandler+0xa64>)
 8003980:	4293      	cmp	r3, r2
 8003982:	d101      	bne.n	8003988 <HAL_DMA_IRQHandler+0x988>
 8003984:	2301      	movs	r3, #1
 8003986:	e000      	b.n	800398a <HAL_DMA_IRQHandler+0x98a>
 8003988:	2300      	movs	r3, #0
 800398a:	2b00      	cmp	r3, #0
 800398c:	f000 823f 	beq.w	8003e0e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800399c:	f003 031f 	and.w	r3, r3, #31
 80039a0:	2204      	movs	r2, #4
 80039a2:	409a      	lsls	r2, r3
 80039a4:	697b      	ldr	r3, [r7, #20]
 80039a6:	4013      	ands	r3, r2
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	f000 80cd 	beq.w	8003b48 <HAL_DMA_IRQHandler+0xb48>
 80039ae:	693b      	ldr	r3, [r7, #16]
 80039b0:	f003 0304 	and.w	r3, r3, #4
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	f000 80c7 	beq.w	8003b48 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039be:	f003 031f 	and.w	r3, r3, #31
 80039c2:	2204      	movs	r2, #4
 80039c4:	409a      	lsls	r2, r3
 80039c6:	69fb      	ldr	r3, [r7, #28]
 80039c8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80039ca:	693b      	ldr	r3, [r7, #16]
 80039cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d049      	beq.n	8003a68 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80039d4:	693b      	ldr	r3, [r7, #16]
 80039d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d109      	bne.n	80039f2 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	f000 8210 	beq.w	8003e08 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039ec:	6878      	ldr	r0, [r7, #4]
 80039ee:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80039f0:	e20a      	b.n	8003e08 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	f000 8206 	beq.w	8003e08 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a00:	6878      	ldr	r0, [r7, #4]
 8003a02:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003a04:	e200      	b.n	8003e08 <HAL_DMA_IRQHandler+0xe08>
 8003a06:	bf00      	nop
 8003a08:	40020010 	.word	0x40020010
 8003a0c:	40020028 	.word	0x40020028
 8003a10:	40020040 	.word	0x40020040
 8003a14:	40020058 	.word	0x40020058
 8003a18:	40020070 	.word	0x40020070
 8003a1c:	40020088 	.word	0x40020088
 8003a20:	400200a0 	.word	0x400200a0
 8003a24:	400200b8 	.word	0x400200b8
 8003a28:	40020410 	.word	0x40020410
 8003a2c:	40020428 	.word	0x40020428
 8003a30:	40020440 	.word	0x40020440
 8003a34:	40020458 	.word	0x40020458
 8003a38:	40020470 	.word	0x40020470
 8003a3c:	40020488 	.word	0x40020488
 8003a40:	400204a0 	.word	0x400204a0
 8003a44:	400204b8 	.word	0x400204b8
 8003a48:	58025408 	.word	0x58025408
 8003a4c:	5802541c 	.word	0x5802541c
 8003a50:	58025430 	.word	0x58025430
 8003a54:	58025444 	.word	0x58025444
 8003a58:	58025458 	.word	0x58025458
 8003a5c:	5802546c 	.word	0x5802546c
 8003a60:	58025480 	.word	0x58025480
 8003a64:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003a68:	693b      	ldr	r3, [r7, #16]
 8003a6a:	f003 0320 	and.w	r3, r3, #32
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d160      	bne.n	8003b34 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4a8c      	ldr	r2, [pc, #560]	; (8003ca8 <HAL_DMA_IRQHandler+0xca8>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d04a      	beq.n	8003b12 <HAL_DMA_IRQHandler+0xb12>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4a8a      	ldr	r2, [pc, #552]	; (8003cac <HAL_DMA_IRQHandler+0xcac>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d045      	beq.n	8003b12 <HAL_DMA_IRQHandler+0xb12>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4a89      	ldr	r2, [pc, #548]	; (8003cb0 <HAL_DMA_IRQHandler+0xcb0>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d040      	beq.n	8003b12 <HAL_DMA_IRQHandler+0xb12>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a87      	ldr	r2, [pc, #540]	; (8003cb4 <HAL_DMA_IRQHandler+0xcb4>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d03b      	beq.n	8003b12 <HAL_DMA_IRQHandler+0xb12>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a86      	ldr	r2, [pc, #536]	; (8003cb8 <HAL_DMA_IRQHandler+0xcb8>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d036      	beq.n	8003b12 <HAL_DMA_IRQHandler+0xb12>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4a84      	ldr	r2, [pc, #528]	; (8003cbc <HAL_DMA_IRQHandler+0xcbc>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d031      	beq.n	8003b12 <HAL_DMA_IRQHandler+0xb12>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4a83      	ldr	r2, [pc, #524]	; (8003cc0 <HAL_DMA_IRQHandler+0xcc0>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d02c      	beq.n	8003b12 <HAL_DMA_IRQHandler+0xb12>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a81      	ldr	r2, [pc, #516]	; (8003cc4 <HAL_DMA_IRQHandler+0xcc4>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d027      	beq.n	8003b12 <HAL_DMA_IRQHandler+0xb12>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4a80      	ldr	r2, [pc, #512]	; (8003cc8 <HAL_DMA_IRQHandler+0xcc8>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d022      	beq.n	8003b12 <HAL_DMA_IRQHandler+0xb12>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a7e      	ldr	r2, [pc, #504]	; (8003ccc <HAL_DMA_IRQHandler+0xccc>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d01d      	beq.n	8003b12 <HAL_DMA_IRQHandler+0xb12>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4a7d      	ldr	r2, [pc, #500]	; (8003cd0 <HAL_DMA_IRQHandler+0xcd0>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d018      	beq.n	8003b12 <HAL_DMA_IRQHandler+0xb12>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a7b      	ldr	r2, [pc, #492]	; (8003cd4 <HAL_DMA_IRQHandler+0xcd4>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d013      	beq.n	8003b12 <HAL_DMA_IRQHandler+0xb12>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4a7a      	ldr	r2, [pc, #488]	; (8003cd8 <HAL_DMA_IRQHandler+0xcd8>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d00e      	beq.n	8003b12 <HAL_DMA_IRQHandler+0xb12>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a78      	ldr	r2, [pc, #480]	; (8003cdc <HAL_DMA_IRQHandler+0xcdc>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d009      	beq.n	8003b12 <HAL_DMA_IRQHandler+0xb12>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4a77      	ldr	r2, [pc, #476]	; (8003ce0 <HAL_DMA_IRQHandler+0xce0>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d004      	beq.n	8003b12 <HAL_DMA_IRQHandler+0xb12>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a75      	ldr	r2, [pc, #468]	; (8003ce4 <HAL_DMA_IRQHandler+0xce4>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d108      	bne.n	8003b24 <HAL_DMA_IRQHandler+0xb24>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	681a      	ldr	r2, [r3, #0]
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f022 0208 	bic.w	r2, r2, #8
 8003b20:	601a      	str	r2, [r3, #0]
 8003b22:	e007      	b.n	8003b34 <HAL_DMA_IRQHandler+0xb34>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	681a      	ldr	r2, [r3, #0]
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f022 0204 	bic.w	r2, r2, #4
 8003b32:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	f000 8165 	beq.w	8003e08 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b42:	6878      	ldr	r0, [r7, #4]
 8003b44:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003b46:	e15f      	b.n	8003e08 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b4c:	f003 031f 	and.w	r3, r3, #31
 8003b50:	2202      	movs	r2, #2
 8003b52:	409a      	lsls	r2, r3
 8003b54:	697b      	ldr	r3, [r7, #20]
 8003b56:	4013      	ands	r3, r2
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	f000 80c5 	beq.w	8003ce8 <HAL_DMA_IRQHandler+0xce8>
 8003b5e:	693b      	ldr	r3, [r7, #16]
 8003b60:	f003 0302 	and.w	r3, r3, #2
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	f000 80bf 	beq.w	8003ce8 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b6e:	f003 031f 	and.w	r3, r3, #31
 8003b72:	2202      	movs	r2, #2
 8003b74:	409a      	lsls	r2, r3
 8003b76:	69fb      	ldr	r3, [r7, #28]
 8003b78:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003b7a:	693b      	ldr	r3, [r7, #16]
 8003b7c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d018      	beq.n	8003bb6 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003b84:	693b      	ldr	r3, [r7, #16]
 8003b86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d109      	bne.n	8003ba2 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	f000 813a 	beq.w	8003e0c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b9c:	6878      	ldr	r0, [r7, #4]
 8003b9e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003ba0:	e134      	b.n	8003e0c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	f000 8130 	beq.w	8003e0c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bb0:	6878      	ldr	r0, [r7, #4]
 8003bb2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003bb4:	e12a      	b.n	8003e0c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003bb6:	693b      	ldr	r3, [r7, #16]
 8003bb8:	f003 0320 	and.w	r3, r3, #32
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d168      	bne.n	8003c92 <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a38      	ldr	r2, [pc, #224]	; (8003ca8 <HAL_DMA_IRQHandler+0xca8>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d04a      	beq.n	8003c60 <HAL_DMA_IRQHandler+0xc60>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4a37      	ldr	r2, [pc, #220]	; (8003cac <HAL_DMA_IRQHandler+0xcac>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d045      	beq.n	8003c60 <HAL_DMA_IRQHandler+0xc60>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a35      	ldr	r2, [pc, #212]	; (8003cb0 <HAL_DMA_IRQHandler+0xcb0>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d040      	beq.n	8003c60 <HAL_DMA_IRQHandler+0xc60>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a34      	ldr	r2, [pc, #208]	; (8003cb4 <HAL_DMA_IRQHandler+0xcb4>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d03b      	beq.n	8003c60 <HAL_DMA_IRQHandler+0xc60>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4a32      	ldr	r2, [pc, #200]	; (8003cb8 <HAL_DMA_IRQHandler+0xcb8>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d036      	beq.n	8003c60 <HAL_DMA_IRQHandler+0xc60>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4a31      	ldr	r2, [pc, #196]	; (8003cbc <HAL_DMA_IRQHandler+0xcbc>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d031      	beq.n	8003c60 <HAL_DMA_IRQHandler+0xc60>
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a2f      	ldr	r2, [pc, #188]	; (8003cc0 <HAL_DMA_IRQHandler+0xcc0>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d02c      	beq.n	8003c60 <HAL_DMA_IRQHandler+0xc60>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4a2e      	ldr	r2, [pc, #184]	; (8003cc4 <HAL_DMA_IRQHandler+0xcc4>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d027      	beq.n	8003c60 <HAL_DMA_IRQHandler+0xc60>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4a2c      	ldr	r2, [pc, #176]	; (8003cc8 <HAL_DMA_IRQHandler+0xcc8>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d022      	beq.n	8003c60 <HAL_DMA_IRQHandler+0xc60>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4a2b      	ldr	r2, [pc, #172]	; (8003ccc <HAL_DMA_IRQHandler+0xccc>)
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d01d      	beq.n	8003c60 <HAL_DMA_IRQHandler+0xc60>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4a29      	ldr	r2, [pc, #164]	; (8003cd0 <HAL_DMA_IRQHandler+0xcd0>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d018      	beq.n	8003c60 <HAL_DMA_IRQHandler+0xc60>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4a28      	ldr	r2, [pc, #160]	; (8003cd4 <HAL_DMA_IRQHandler+0xcd4>)
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d013      	beq.n	8003c60 <HAL_DMA_IRQHandler+0xc60>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4a26      	ldr	r2, [pc, #152]	; (8003cd8 <HAL_DMA_IRQHandler+0xcd8>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d00e      	beq.n	8003c60 <HAL_DMA_IRQHandler+0xc60>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4a25      	ldr	r2, [pc, #148]	; (8003cdc <HAL_DMA_IRQHandler+0xcdc>)
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d009      	beq.n	8003c60 <HAL_DMA_IRQHandler+0xc60>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4a23      	ldr	r2, [pc, #140]	; (8003ce0 <HAL_DMA_IRQHandler+0xce0>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d004      	beq.n	8003c60 <HAL_DMA_IRQHandler+0xc60>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4a22      	ldr	r2, [pc, #136]	; (8003ce4 <HAL_DMA_IRQHandler+0xce4>)
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d108      	bne.n	8003c72 <HAL_DMA_IRQHandler+0xc72>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	681a      	ldr	r2, [r3, #0]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f022 0214 	bic.w	r2, r2, #20
 8003c6e:	601a      	str	r2, [r3, #0]
 8003c70:	e007      	b.n	8003c82 <HAL_DMA_IRQHandler+0xc82>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	681a      	ldr	r2, [r3, #0]
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f022 020a 	bic.w	r2, r2, #10
 8003c80:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2200      	movs	r2, #0
 8003c86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2201      	movs	r2, #1
 8003c8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	f000 80b8 	beq.w	8003e0c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ca0:	6878      	ldr	r0, [r7, #4]
 8003ca2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003ca4:	e0b2      	b.n	8003e0c <HAL_DMA_IRQHandler+0xe0c>
 8003ca6:	bf00      	nop
 8003ca8:	40020010 	.word	0x40020010
 8003cac:	40020028 	.word	0x40020028
 8003cb0:	40020040 	.word	0x40020040
 8003cb4:	40020058 	.word	0x40020058
 8003cb8:	40020070 	.word	0x40020070
 8003cbc:	40020088 	.word	0x40020088
 8003cc0:	400200a0 	.word	0x400200a0
 8003cc4:	400200b8 	.word	0x400200b8
 8003cc8:	40020410 	.word	0x40020410
 8003ccc:	40020428 	.word	0x40020428
 8003cd0:	40020440 	.word	0x40020440
 8003cd4:	40020458 	.word	0x40020458
 8003cd8:	40020470 	.word	0x40020470
 8003cdc:	40020488 	.word	0x40020488
 8003ce0:	400204a0 	.word	0x400204a0
 8003ce4:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cec:	f003 031f 	and.w	r3, r3, #31
 8003cf0:	2208      	movs	r2, #8
 8003cf2:	409a      	lsls	r2, r3
 8003cf4:	697b      	ldr	r3, [r7, #20]
 8003cf6:	4013      	ands	r3, r2
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	f000 8088 	beq.w	8003e0e <HAL_DMA_IRQHandler+0xe0e>
 8003cfe:	693b      	ldr	r3, [r7, #16]
 8003d00:	f003 0308 	and.w	r3, r3, #8
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	f000 8082 	beq.w	8003e0e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4a41      	ldr	r2, [pc, #260]	; (8003e14 <HAL_DMA_IRQHandler+0xe14>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d04a      	beq.n	8003daa <HAL_DMA_IRQHandler+0xdaa>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4a3f      	ldr	r2, [pc, #252]	; (8003e18 <HAL_DMA_IRQHandler+0xe18>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d045      	beq.n	8003daa <HAL_DMA_IRQHandler+0xdaa>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4a3e      	ldr	r2, [pc, #248]	; (8003e1c <HAL_DMA_IRQHandler+0xe1c>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d040      	beq.n	8003daa <HAL_DMA_IRQHandler+0xdaa>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4a3c      	ldr	r2, [pc, #240]	; (8003e20 <HAL_DMA_IRQHandler+0xe20>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d03b      	beq.n	8003daa <HAL_DMA_IRQHandler+0xdaa>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4a3b      	ldr	r2, [pc, #236]	; (8003e24 <HAL_DMA_IRQHandler+0xe24>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d036      	beq.n	8003daa <HAL_DMA_IRQHandler+0xdaa>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a39      	ldr	r2, [pc, #228]	; (8003e28 <HAL_DMA_IRQHandler+0xe28>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d031      	beq.n	8003daa <HAL_DMA_IRQHandler+0xdaa>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4a38      	ldr	r2, [pc, #224]	; (8003e2c <HAL_DMA_IRQHandler+0xe2c>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d02c      	beq.n	8003daa <HAL_DMA_IRQHandler+0xdaa>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4a36      	ldr	r2, [pc, #216]	; (8003e30 <HAL_DMA_IRQHandler+0xe30>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d027      	beq.n	8003daa <HAL_DMA_IRQHandler+0xdaa>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4a35      	ldr	r2, [pc, #212]	; (8003e34 <HAL_DMA_IRQHandler+0xe34>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d022      	beq.n	8003daa <HAL_DMA_IRQHandler+0xdaa>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a33      	ldr	r2, [pc, #204]	; (8003e38 <HAL_DMA_IRQHandler+0xe38>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d01d      	beq.n	8003daa <HAL_DMA_IRQHandler+0xdaa>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4a32      	ldr	r2, [pc, #200]	; (8003e3c <HAL_DMA_IRQHandler+0xe3c>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d018      	beq.n	8003daa <HAL_DMA_IRQHandler+0xdaa>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a30      	ldr	r2, [pc, #192]	; (8003e40 <HAL_DMA_IRQHandler+0xe40>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d013      	beq.n	8003daa <HAL_DMA_IRQHandler+0xdaa>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4a2f      	ldr	r2, [pc, #188]	; (8003e44 <HAL_DMA_IRQHandler+0xe44>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d00e      	beq.n	8003daa <HAL_DMA_IRQHandler+0xdaa>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a2d      	ldr	r2, [pc, #180]	; (8003e48 <HAL_DMA_IRQHandler+0xe48>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d009      	beq.n	8003daa <HAL_DMA_IRQHandler+0xdaa>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4a2c      	ldr	r2, [pc, #176]	; (8003e4c <HAL_DMA_IRQHandler+0xe4c>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d004      	beq.n	8003daa <HAL_DMA_IRQHandler+0xdaa>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a2a      	ldr	r2, [pc, #168]	; (8003e50 <HAL_DMA_IRQHandler+0xe50>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d108      	bne.n	8003dbc <HAL_DMA_IRQHandler+0xdbc>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	681a      	ldr	r2, [r3, #0]
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f022 021c 	bic.w	r2, r2, #28
 8003db8:	601a      	str	r2, [r3, #0]
 8003dba:	e007      	b.n	8003dcc <HAL_DMA_IRQHandler+0xdcc>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	681a      	ldr	r2, [r3, #0]
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f022 020e 	bic.w	r2, r2, #14
 8003dca:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dd0:	f003 031f 	and.w	r3, r3, #31
 8003dd4:	2201      	movs	r2, #1
 8003dd6:	409a      	lsls	r2, r3
 8003dd8:	69fb      	ldr	r3, [r7, #28]
 8003dda:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2201      	movs	r2, #1
 8003de0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2200      	movs	r2, #0
 8003de6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2201      	movs	r2, #1
 8003dee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d009      	beq.n	8003e0e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dfe:	6878      	ldr	r0, [r7, #4]
 8003e00:	4798      	blx	r3
 8003e02:	e004      	b.n	8003e0e <HAL_DMA_IRQHandler+0xe0e>
          return;
 8003e04:	bf00      	nop
 8003e06:	e002      	b.n	8003e0e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003e08:	bf00      	nop
 8003e0a:	e000      	b.n	8003e0e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003e0c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003e0e:	3728      	adds	r7, #40	; 0x28
 8003e10:	46bd      	mov	sp, r7
 8003e12:	bd80      	pop	{r7, pc}
 8003e14:	40020010 	.word	0x40020010
 8003e18:	40020028 	.word	0x40020028
 8003e1c:	40020040 	.word	0x40020040
 8003e20:	40020058 	.word	0x40020058
 8003e24:	40020070 	.word	0x40020070
 8003e28:	40020088 	.word	0x40020088
 8003e2c:	400200a0 	.word	0x400200a0
 8003e30:	400200b8 	.word	0x400200b8
 8003e34:	40020410 	.word	0x40020410
 8003e38:	40020428 	.word	0x40020428
 8003e3c:	40020440 	.word	0x40020440
 8003e40:	40020458 	.word	0x40020458
 8003e44:	40020470 	.word	0x40020470
 8003e48:	40020488 	.word	0x40020488
 8003e4c:	400204a0 	.word	0x400204a0
 8003e50:	400204b8 	.word	0x400204b8

08003e54 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003e54:	b480      	push	{r7}
 8003e56:	b083      	sub	sp, #12
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8003e60:	4618      	mov	r0, r3
 8003e62:	370c      	adds	r7, #12
 8003e64:	46bd      	mov	sp, r7
 8003e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6a:	4770      	bx	lr

08003e6c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	b087      	sub	sp, #28
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	60f8      	str	r0, [r7, #12]
 8003e74:	60b9      	str	r1, [r7, #8]
 8003e76:	607a      	str	r2, [r7, #4]
 8003e78:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e7e:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e84:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4a84      	ldr	r2, [pc, #528]	; (800409c <DMA_SetConfig+0x230>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d072      	beq.n	8003f76 <DMA_SetConfig+0x10a>
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4a82      	ldr	r2, [pc, #520]	; (80040a0 <DMA_SetConfig+0x234>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d06d      	beq.n	8003f76 <DMA_SetConfig+0x10a>
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4a81      	ldr	r2, [pc, #516]	; (80040a4 <DMA_SetConfig+0x238>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d068      	beq.n	8003f76 <DMA_SetConfig+0x10a>
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4a7f      	ldr	r2, [pc, #508]	; (80040a8 <DMA_SetConfig+0x23c>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d063      	beq.n	8003f76 <DMA_SetConfig+0x10a>
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4a7e      	ldr	r2, [pc, #504]	; (80040ac <DMA_SetConfig+0x240>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d05e      	beq.n	8003f76 <DMA_SetConfig+0x10a>
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4a7c      	ldr	r2, [pc, #496]	; (80040b0 <DMA_SetConfig+0x244>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d059      	beq.n	8003f76 <DMA_SetConfig+0x10a>
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4a7b      	ldr	r2, [pc, #492]	; (80040b4 <DMA_SetConfig+0x248>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d054      	beq.n	8003f76 <DMA_SetConfig+0x10a>
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4a79      	ldr	r2, [pc, #484]	; (80040b8 <DMA_SetConfig+0x24c>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d04f      	beq.n	8003f76 <DMA_SetConfig+0x10a>
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4a78      	ldr	r2, [pc, #480]	; (80040bc <DMA_SetConfig+0x250>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d04a      	beq.n	8003f76 <DMA_SetConfig+0x10a>
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4a76      	ldr	r2, [pc, #472]	; (80040c0 <DMA_SetConfig+0x254>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d045      	beq.n	8003f76 <DMA_SetConfig+0x10a>
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a75      	ldr	r2, [pc, #468]	; (80040c4 <DMA_SetConfig+0x258>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d040      	beq.n	8003f76 <DMA_SetConfig+0x10a>
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a73      	ldr	r2, [pc, #460]	; (80040c8 <DMA_SetConfig+0x25c>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d03b      	beq.n	8003f76 <DMA_SetConfig+0x10a>
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4a72      	ldr	r2, [pc, #456]	; (80040cc <DMA_SetConfig+0x260>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d036      	beq.n	8003f76 <DMA_SetConfig+0x10a>
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a70      	ldr	r2, [pc, #448]	; (80040d0 <DMA_SetConfig+0x264>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d031      	beq.n	8003f76 <DMA_SetConfig+0x10a>
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4a6f      	ldr	r2, [pc, #444]	; (80040d4 <DMA_SetConfig+0x268>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d02c      	beq.n	8003f76 <DMA_SetConfig+0x10a>
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a6d      	ldr	r2, [pc, #436]	; (80040d8 <DMA_SetConfig+0x26c>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d027      	beq.n	8003f76 <DMA_SetConfig+0x10a>
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4a6c      	ldr	r2, [pc, #432]	; (80040dc <DMA_SetConfig+0x270>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d022      	beq.n	8003f76 <DMA_SetConfig+0x10a>
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4a6a      	ldr	r2, [pc, #424]	; (80040e0 <DMA_SetConfig+0x274>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d01d      	beq.n	8003f76 <DMA_SetConfig+0x10a>
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4a69      	ldr	r2, [pc, #420]	; (80040e4 <DMA_SetConfig+0x278>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d018      	beq.n	8003f76 <DMA_SetConfig+0x10a>
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4a67      	ldr	r2, [pc, #412]	; (80040e8 <DMA_SetConfig+0x27c>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d013      	beq.n	8003f76 <DMA_SetConfig+0x10a>
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4a66      	ldr	r2, [pc, #408]	; (80040ec <DMA_SetConfig+0x280>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d00e      	beq.n	8003f76 <DMA_SetConfig+0x10a>
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4a64      	ldr	r2, [pc, #400]	; (80040f0 <DMA_SetConfig+0x284>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d009      	beq.n	8003f76 <DMA_SetConfig+0x10a>
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4a63      	ldr	r2, [pc, #396]	; (80040f4 <DMA_SetConfig+0x288>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d004      	beq.n	8003f76 <DMA_SetConfig+0x10a>
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4a61      	ldr	r2, [pc, #388]	; (80040f8 <DMA_SetConfig+0x28c>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d101      	bne.n	8003f7a <DMA_SetConfig+0x10e>
 8003f76:	2301      	movs	r3, #1
 8003f78:	e000      	b.n	8003f7c <DMA_SetConfig+0x110>
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d00d      	beq.n	8003f9c <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f84:	68fa      	ldr	r2, [r7, #12]
 8003f86:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003f88:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d004      	beq.n	8003f9c <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f96:	68fa      	ldr	r2, [r7, #12]
 8003f98:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003f9a:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a3e      	ldr	r2, [pc, #248]	; (800409c <DMA_SetConfig+0x230>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d04a      	beq.n	800403c <DMA_SetConfig+0x1d0>
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4a3d      	ldr	r2, [pc, #244]	; (80040a0 <DMA_SetConfig+0x234>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d045      	beq.n	800403c <DMA_SetConfig+0x1d0>
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4a3b      	ldr	r2, [pc, #236]	; (80040a4 <DMA_SetConfig+0x238>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d040      	beq.n	800403c <DMA_SetConfig+0x1d0>
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4a3a      	ldr	r2, [pc, #232]	; (80040a8 <DMA_SetConfig+0x23c>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d03b      	beq.n	800403c <DMA_SetConfig+0x1d0>
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4a38      	ldr	r2, [pc, #224]	; (80040ac <DMA_SetConfig+0x240>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d036      	beq.n	800403c <DMA_SetConfig+0x1d0>
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4a37      	ldr	r2, [pc, #220]	; (80040b0 <DMA_SetConfig+0x244>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d031      	beq.n	800403c <DMA_SetConfig+0x1d0>
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4a35      	ldr	r2, [pc, #212]	; (80040b4 <DMA_SetConfig+0x248>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d02c      	beq.n	800403c <DMA_SetConfig+0x1d0>
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4a34      	ldr	r2, [pc, #208]	; (80040b8 <DMA_SetConfig+0x24c>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d027      	beq.n	800403c <DMA_SetConfig+0x1d0>
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4a32      	ldr	r2, [pc, #200]	; (80040bc <DMA_SetConfig+0x250>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d022      	beq.n	800403c <DMA_SetConfig+0x1d0>
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4a31      	ldr	r2, [pc, #196]	; (80040c0 <DMA_SetConfig+0x254>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d01d      	beq.n	800403c <DMA_SetConfig+0x1d0>
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4a2f      	ldr	r2, [pc, #188]	; (80040c4 <DMA_SetConfig+0x258>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d018      	beq.n	800403c <DMA_SetConfig+0x1d0>
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4a2e      	ldr	r2, [pc, #184]	; (80040c8 <DMA_SetConfig+0x25c>)
 8004010:	4293      	cmp	r3, r2
 8004012:	d013      	beq.n	800403c <DMA_SetConfig+0x1d0>
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4a2c      	ldr	r2, [pc, #176]	; (80040cc <DMA_SetConfig+0x260>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d00e      	beq.n	800403c <DMA_SetConfig+0x1d0>
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	4a2b      	ldr	r2, [pc, #172]	; (80040d0 <DMA_SetConfig+0x264>)
 8004024:	4293      	cmp	r3, r2
 8004026:	d009      	beq.n	800403c <DMA_SetConfig+0x1d0>
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4a29      	ldr	r2, [pc, #164]	; (80040d4 <DMA_SetConfig+0x268>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d004      	beq.n	800403c <DMA_SetConfig+0x1d0>
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4a28      	ldr	r2, [pc, #160]	; (80040d8 <DMA_SetConfig+0x26c>)
 8004038:	4293      	cmp	r3, r2
 800403a:	d101      	bne.n	8004040 <DMA_SetConfig+0x1d4>
 800403c:	2301      	movs	r3, #1
 800403e:	e000      	b.n	8004042 <DMA_SetConfig+0x1d6>
 8004040:	2300      	movs	r3, #0
 8004042:	2b00      	cmp	r3, #0
 8004044:	d05a      	beq.n	80040fc <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800404a:	f003 031f 	and.w	r3, r3, #31
 800404e:	223f      	movs	r2, #63	; 0x3f
 8004050:	409a      	lsls	r2, r3
 8004052:	697b      	ldr	r3, [r7, #20]
 8004054:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	681a      	ldr	r2, [r3, #0]
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004064:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	683a      	ldr	r2, [r7, #0]
 800406c:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	689b      	ldr	r3, [r3, #8]
 8004072:	2b40      	cmp	r3, #64	; 0x40
 8004074:	d108      	bne.n	8004088 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	687a      	ldr	r2, [r7, #4]
 800407c:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	68ba      	ldr	r2, [r7, #8]
 8004084:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004086:	e087      	b.n	8004198 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	68ba      	ldr	r2, [r7, #8]
 800408e:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	687a      	ldr	r2, [r7, #4]
 8004096:	60da      	str	r2, [r3, #12]
}
 8004098:	e07e      	b.n	8004198 <DMA_SetConfig+0x32c>
 800409a:	bf00      	nop
 800409c:	40020010 	.word	0x40020010
 80040a0:	40020028 	.word	0x40020028
 80040a4:	40020040 	.word	0x40020040
 80040a8:	40020058 	.word	0x40020058
 80040ac:	40020070 	.word	0x40020070
 80040b0:	40020088 	.word	0x40020088
 80040b4:	400200a0 	.word	0x400200a0
 80040b8:	400200b8 	.word	0x400200b8
 80040bc:	40020410 	.word	0x40020410
 80040c0:	40020428 	.word	0x40020428
 80040c4:	40020440 	.word	0x40020440
 80040c8:	40020458 	.word	0x40020458
 80040cc:	40020470 	.word	0x40020470
 80040d0:	40020488 	.word	0x40020488
 80040d4:	400204a0 	.word	0x400204a0
 80040d8:	400204b8 	.word	0x400204b8
 80040dc:	58025408 	.word	0x58025408
 80040e0:	5802541c 	.word	0x5802541c
 80040e4:	58025430 	.word	0x58025430
 80040e8:	58025444 	.word	0x58025444
 80040ec:	58025458 	.word	0x58025458
 80040f0:	5802546c 	.word	0x5802546c
 80040f4:	58025480 	.word	0x58025480
 80040f8:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a28      	ldr	r2, [pc, #160]	; (80041a4 <DMA_SetConfig+0x338>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d022      	beq.n	800414c <DMA_SetConfig+0x2e0>
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4a27      	ldr	r2, [pc, #156]	; (80041a8 <DMA_SetConfig+0x33c>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d01d      	beq.n	800414c <DMA_SetConfig+0x2e0>
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4a25      	ldr	r2, [pc, #148]	; (80041ac <DMA_SetConfig+0x340>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d018      	beq.n	800414c <DMA_SetConfig+0x2e0>
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4a24      	ldr	r2, [pc, #144]	; (80041b0 <DMA_SetConfig+0x344>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d013      	beq.n	800414c <DMA_SetConfig+0x2e0>
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a22      	ldr	r2, [pc, #136]	; (80041b4 <DMA_SetConfig+0x348>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d00e      	beq.n	800414c <DMA_SetConfig+0x2e0>
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4a21      	ldr	r2, [pc, #132]	; (80041b8 <DMA_SetConfig+0x34c>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d009      	beq.n	800414c <DMA_SetConfig+0x2e0>
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4a1f      	ldr	r2, [pc, #124]	; (80041bc <DMA_SetConfig+0x350>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d004      	beq.n	800414c <DMA_SetConfig+0x2e0>
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4a1e      	ldr	r2, [pc, #120]	; (80041c0 <DMA_SetConfig+0x354>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d101      	bne.n	8004150 <DMA_SetConfig+0x2e4>
 800414c:	2301      	movs	r3, #1
 800414e:	e000      	b.n	8004152 <DMA_SetConfig+0x2e6>
 8004150:	2300      	movs	r3, #0
 8004152:	2b00      	cmp	r3, #0
 8004154:	d020      	beq.n	8004198 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800415a:	f003 031f 	and.w	r3, r3, #31
 800415e:	2201      	movs	r2, #1
 8004160:	409a      	lsls	r2, r3
 8004162:	693b      	ldr	r3, [r7, #16]
 8004164:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	683a      	ldr	r2, [r7, #0]
 800416c:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	689b      	ldr	r3, [r3, #8]
 8004172:	2b40      	cmp	r3, #64	; 0x40
 8004174:	d108      	bne.n	8004188 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	687a      	ldr	r2, [r7, #4]
 800417c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	68ba      	ldr	r2, [r7, #8]
 8004184:	60da      	str	r2, [r3, #12]
}
 8004186:	e007      	b.n	8004198 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	68ba      	ldr	r2, [r7, #8]
 800418e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	687a      	ldr	r2, [r7, #4]
 8004196:	60da      	str	r2, [r3, #12]
}
 8004198:	bf00      	nop
 800419a:	371c      	adds	r7, #28
 800419c:	46bd      	mov	sp, r7
 800419e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a2:	4770      	bx	lr
 80041a4:	58025408 	.word	0x58025408
 80041a8:	5802541c 	.word	0x5802541c
 80041ac:	58025430 	.word	0x58025430
 80041b0:	58025444 	.word	0x58025444
 80041b4:	58025458 	.word	0x58025458
 80041b8:	5802546c 	.word	0x5802546c
 80041bc:	58025480 	.word	0x58025480
 80041c0:	58025494 	.word	0x58025494

080041c4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80041c4:	b480      	push	{r7}
 80041c6:	b085      	sub	sp, #20
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4a42      	ldr	r2, [pc, #264]	; (80042dc <DMA_CalcBaseAndBitshift+0x118>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d04a      	beq.n	800426c <DMA_CalcBaseAndBitshift+0xa8>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4a41      	ldr	r2, [pc, #260]	; (80042e0 <DMA_CalcBaseAndBitshift+0x11c>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d045      	beq.n	800426c <DMA_CalcBaseAndBitshift+0xa8>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a3f      	ldr	r2, [pc, #252]	; (80042e4 <DMA_CalcBaseAndBitshift+0x120>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d040      	beq.n	800426c <DMA_CalcBaseAndBitshift+0xa8>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4a3e      	ldr	r2, [pc, #248]	; (80042e8 <DMA_CalcBaseAndBitshift+0x124>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d03b      	beq.n	800426c <DMA_CalcBaseAndBitshift+0xa8>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a3c      	ldr	r2, [pc, #240]	; (80042ec <DMA_CalcBaseAndBitshift+0x128>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d036      	beq.n	800426c <DMA_CalcBaseAndBitshift+0xa8>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4a3b      	ldr	r2, [pc, #236]	; (80042f0 <DMA_CalcBaseAndBitshift+0x12c>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d031      	beq.n	800426c <DMA_CalcBaseAndBitshift+0xa8>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a39      	ldr	r2, [pc, #228]	; (80042f4 <DMA_CalcBaseAndBitshift+0x130>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d02c      	beq.n	800426c <DMA_CalcBaseAndBitshift+0xa8>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4a38      	ldr	r2, [pc, #224]	; (80042f8 <DMA_CalcBaseAndBitshift+0x134>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d027      	beq.n	800426c <DMA_CalcBaseAndBitshift+0xa8>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4a36      	ldr	r2, [pc, #216]	; (80042fc <DMA_CalcBaseAndBitshift+0x138>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d022      	beq.n	800426c <DMA_CalcBaseAndBitshift+0xa8>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4a35      	ldr	r2, [pc, #212]	; (8004300 <DMA_CalcBaseAndBitshift+0x13c>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d01d      	beq.n	800426c <DMA_CalcBaseAndBitshift+0xa8>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4a33      	ldr	r2, [pc, #204]	; (8004304 <DMA_CalcBaseAndBitshift+0x140>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d018      	beq.n	800426c <DMA_CalcBaseAndBitshift+0xa8>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4a32      	ldr	r2, [pc, #200]	; (8004308 <DMA_CalcBaseAndBitshift+0x144>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d013      	beq.n	800426c <DMA_CalcBaseAndBitshift+0xa8>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4a30      	ldr	r2, [pc, #192]	; (800430c <DMA_CalcBaseAndBitshift+0x148>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d00e      	beq.n	800426c <DMA_CalcBaseAndBitshift+0xa8>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4a2f      	ldr	r2, [pc, #188]	; (8004310 <DMA_CalcBaseAndBitshift+0x14c>)
 8004254:	4293      	cmp	r3, r2
 8004256:	d009      	beq.n	800426c <DMA_CalcBaseAndBitshift+0xa8>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4a2d      	ldr	r2, [pc, #180]	; (8004314 <DMA_CalcBaseAndBitshift+0x150>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d004      	beq.n	800426c <DMA_CalcBaseAndBitshift+0xa8>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4a2c      	ldr	r2, [pc, #176]	; (8004318 <DMA_CalcBaseAndBitshift+0x154>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d101      	bne.n	8004270 <DMA_CalcBaseAndBitshift+0xac>
 800426c:	2301      	movs	r3, #1
 800426e:	e000      	b.n	8004272 <DMA_CalcBaseAndBitshift+0xae>
 8004270:	2300      	movs	r3, #0
 8004272:	2b00      	cmp	r3, #0
 8004274:	d024      	beq.n	80042c0 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	b2db      	uxtb	r3, r3
 800427c:	3b10      	subs	r3, #16
 800427e:	4a27      	ldr	r2, [pc, #156]	; (800431c <DMA_CalcBaseAndBitshift+0x158>)
 8004280:	fba2 2303 	umull	r2, r3, r2, r3
 8004284:	091b      	lsrs	r3, r3, #4
 8004286:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	f003 0307 	and.w	r3, r3, #7
 800428e:	4a24      	ldr	r2, [pc, #144]	; (8004320 <DMA_CalcBaseAndBitshift+0x15c>)
 8004290:	5cd3      	ldrb	r3, [r2, r3]
 8004292:	461a      	mov	r2, r3
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	2b03      	cmp	r3, #3
 800429c:	d908      	bls.n	80042b0 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	461a      	mov	r2, r3
 80042a4:	4b1f      	ldr	r3, [pc, #124]	; (8004324 <DMA_CalcBaseAndBitshift+0x160>)
 80042a6:	4013      	ands	r3, r2
 80042a8:	1d1a      	adds	r2, r3, #4
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	659a      	str	r2, [r3, #88]	; 0x58
 80042ae:	e00d      	b.n	80042cc <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	461a      	mov	r2, r3
 80042b6:	4b1b      	ldr	r3, [pc, #108]	; (8004324 <DMA_CalcBaseAndBitshift+0x160>)
 80042b8:	4013      	ands	r3, r2
 80042ba:	687a      	ldr	r2, [r7, #4]
 80042bc:	6593      	str	r3, [r2, #88]	; 0x58
 80042be:	e005      	b.n	80042cc <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80042d0:	4618      	mov	r0, r3
 80042d2:	3714      	adds	r7, #20
 80042d4:	46bd      	mov	sp, r7
 80042d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042da:	4770      	bx	lr
 80042dc:	40020010 	.word	0x40020010
 80042e0:	40020028 	.word	0x40020028
 80042e4:	40020040 	.word	0x40020040
 80042e8:	40020058 	.word	0x40020058
 80042ec:	40020070 	.word	0x40020070
 80042f0:	40020088 	.word	0x40020088
 80042f4:	400200a0 	.word	0x400200a0
 80042f8:	400200b8 	.word	0x400200b8
 80042fc:	40020410 	.word	0x40020410
 8004300:	40020428 	.word	0x40020428
 8004304:	40020440 	.word	0x40020440
 8004308:	40020458 	.word	0x40020458
 800430c:	40020470 	.word	0x40020470
 8004310:	40020488 	.word	0x40020488
 8004314:	400204a0 	.word	0x400204a0
 8004318:	400204b8 	.word	0x400204b8
 800431c:	aaaaaaab 	.word	0xaaaaaaab
 8004320:	0800cb38 	.word	0x0800cb38
 8004324:	fffffc00 	.word	0xfffffc00

08004328 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004328:	b480      	push	{r7}
 800432a:	b085      	sub	sp, #20
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004330:	2300      	movs	r3, #0
 8004332:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	699b      	ldr	r3, [r3, #24]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d120      	bne.n	800437e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004340:	2b03      	cmp	r3, #3
 8004342:	d858      	bhi.n	80043f6 <DMA_CheckFifoParam+0xce>
 8004344:	a201      	add	r2, pc, #4	; (adr r2, 800434c <DMA_CheckFifoParam+0x24>)
 8004346:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800434a:	bf00      	nop
 800434c:	0800435d 	.word	0x0800435d
 8004350:	0800436f 	.word	0x0800436f
 8004354:	0800435d 	.word	0x0800435d
 8004358:	080043f7 	.word	0x080043f7
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004360:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004364:	2b00      	cmp	r3, #0
 8004366:	d048      	beq.n	80043fa <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004368:	2301      	movs	r3, #1
 800436a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800436c:	e045      	b.n	80043fa <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004372:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004376:	d142      	bne.n	80043fe <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004378:	2301      	movs	r3, #1
 800437a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800437c:	e03f      	b.n	80043fe <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	699b      	ldr	r3, [r3, #24]
 8004382:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004386:	d123      	bne.n	80043d0 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800438c:	2b03      	cmp	r3, #3
 800438e:	d838      	bhi.n	8004402 <DMA_CheckFifoParam+0xda>
 8004390:	a201      	add	r2, pc, #4	; (adr r2, 8004398 <DMA_CheckFifoParam+0x70>)
 8004392:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004396:	bf00      	nop
 8004398:	080043a9 	.word	0x080043a9
 800439c:	080043af 	.word	0x080043af
 80043a0:	080043a9 	.word	0x080043a9
 80043a4:	080043c1 	.word	0x080043c1
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80043a8:	2301      	movs	r3, #1
 80043aa:	73fb      	strb	r3, [r7, #15]
        break;
 80043ac:	e030      	b.n	8004410 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043b2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d025      	beq.n	8004406 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80043ba:	2301      	movs	r3, #1
 80043bc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80043be:	e022      	b.n	8004406 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043c4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80043c8:	d11f      	bne.n	800440a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80043ca:	2301      	movs	r3, #1
 80043cc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80043ce:	e01c      	b.n	800440a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043d4:	2b02      	cmp	r3, #2
 80043d6:	d902      	bls.n	80043de <DMA_CheckFifoParam+0xb6>
 80043d8:	2b03      	cmp	r3, #3
 80043da:	d003      	beq.n	80043e4 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80043dc:	e018      	b.n	8004410 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80043de:	2301      	movs	r3, #1
 80043e0:	73fb      	strb	r3, [r7, #15]
        break;
 80043e2:	e015      	b.n	8004410 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043e8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d00e      	beq.n	800440e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80043f0:	2301      	movs	r3, #1
 80043f2:	73fb      	strb	r3, [r7, #15]
    break;
 80043f4:	e00b      	b.n	800440e <DMA_CheckFifoParam+0xe6>
        break;
 80043f6:	bf00      	nop
 80043f8:	e00a      	b.n	8004410 <DMA_CheckFifoParam+0xe8>
        break;
 80043fa:	bf00      	nop
 80043fc:	e008      	b.n	8004410 <DMA_CheckFifoParam+0xe8>
        break;
 80043fe:	bf00      	nop
 8004400:	e006      	b.n	8004410 <DMA_CheckFifoParam+0xe8>
        break;
 8004402:	bf00      	nop
 8004404:	e004      	b.n	8004410 <DMA_CheckFifoParam+0xe8>
        break;
 8004406:	bf00      	nop
 8004408:	e002      	b.n	8004410 <DMA_CheckFifoParam+0xe8>
        break;
 800440a:	bf00      	nop
 800440c:	e000      	b.n	8004410 <DMA_CheckFifoParam+0xe8>
    break;
 800440e:	bf00      	nop
    }
  }

  return status;
 8004410:	7bfb      	ldrb	r3, [r7, #15]
}
 8004412:	4618      	mov	r0, r3
 8004414:	3714      	adds	r7, #20
 8004416:	46bd      	mov	sp, r7
 8004418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441c:	4770      	bx	lr
 800441e:	bf00      	nop

08004420 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004420:	b480      	push	{r7}
 8004422:	b085      	sub	sp, #20
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4a38      	ldr	r2, [pc, #224]	; (8004514 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004434:	4293      	cmp	r3, r2
 8004436:	d022      	beq.n	800447e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4a36      	ldr	r2, [pc, #216]	; (8004518 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d01d      	beq.n	800447e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4a35      	ldr	r2, [pc, #212]	; (800451c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d018      	beq.n	800447e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a33      	ldr	r2, [pc, #204]	; (8004520 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d013      	beq.n	800447e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4a32      	ldr	r2, [pc, #200]	; (8004524 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d00e      	beq.n	800447e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a30      	ldr	r2, [pc, #192]	; (8004528 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d009      	beq.n	800447e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4a2f      	ldr	r2, [pc, #188]	; (800452c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d004      	beq.n	800447e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4a2d      	ldr	r2, [pc, #180]	; (8004530 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d101      	bne.n	8004482 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800447e:	2301      	movs	r3, #1
 8004480:	e000      	b.n	8004484 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8004482:	2300      	movs	r3, #0
 8004484:	2b00      	cmp	r3, #0
 8004486:	d01a      	beq.n	80044be <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	b2db      	uxtb	r3, r3
 800448e:	3b08      	subs	r3, #8
 8004490:	4a28      	ldr	r2, [pc, #160]	; (8004534 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8004492:	fba2 2303 	umull	r2, r3, r2, r3
 8004496:	091b      	lsrs	r3, r3, #4
 8004498:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800449a:	68fa      	ldr	r2, [r7, #12]
 800449c:	4b26      	ldr	r3, [pc, #152]	; (8004538 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800449e:	4413      	add	r3, r2
 80044a0:	009b      	lsls	r3, r3, #2
 80044a2:	461a      	mov	r2, r3
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	4a24      	ldr	r2, [pc, #144]	; (800453c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80044ac:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	f003 031f 	and.w	r3, r3, #31
 80044b4:	2201      	movs	r2, #1
 80044b6:	409a      	lsls	r2, r3
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80044bc:	e024      	b.n	8004508 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	b2db      	uxtb	r3, r3
 80044c4:	3b10      	subs	r3, #16
 80044c6:	4a1e      	ldr	r2, [pc, #120]	; (8004540 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80044c8:	fba2 2303 	umull	r2, r3, r2, r3
 80044cc:	091b      	lsrs	r3, r3, #4
 80044ce:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80044d0:	68bb      	ldr	r3, [r7, #8]
 80044d2:	4a1c      	ldr	r2, [pc, #112]	; (8004544 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d806      	bhi.n	80044e6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80044d8:	68bb      	ldr	r3, [r7, #8]
 80044da:	4a1b      	ldr	r2, [pc, #108]	; (8004548 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80044dc:	4293      	cmp	r3, r2
 80044de:	d902      	bls.n	80044e6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	3308      	adds	r3, #8
 80044e4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80044e6:	68fa      	ldr	r2, [r7, #12]
 80044e8:	4b18      	ldr	r3, [pc, #96]	; (800454c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80044ea:	4413      	add	r3, r2
 80044ec:	009b      	lsls	r3, r3, #2
 80044ee:	461a      	mov	r2, r3
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	4a16      	ldr	r2, [pc, #88]	; (8004550 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80044f8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	f003 031f 	and.w	r3, r3, #31
 8004500:	2201      	movs	r2, #1
 8004502:	409a      	lsls	r2, r3
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004508:	bf00      	nop
 800450a:	3714      	adds	r7, #20
 800450c:	46bd      	mov	sp, r7
 800450e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004512:	4770      	bx	lr
 8004514:	58025408 	.word	0x58025408
 8004518:	5802541c 	.word	0x5802541c
 800451c:	58025430 	.word	0x58025430
 8004520:	58025444 	.word	0x58025444
 8004524:	58025458 	.word	0x58025458
 8004528:	5802546c 	.word	0x5802546c
 800452c:	58025480 	.word	0x58025480
 8004530:	58025494 	.word	0x58025494
 8004534:	cccccccd 	.word	0xcccccccd
 8004538:	16009600 	.word	0x16009600
 800453c:	58025880 	.word	0x58025880
 8004540:	aaaaaaab 	.word	0xaaaaaaab
 8004544:	400204b8 	.word	0x400204b8
 8004548:	4002040f 	.word	0x4002040f
 800454c:	10008200 	.word	0x10008200
 8004550:	40020880 	.word	0x40020880

08004554 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004554:	b480      	push	{r7}
 8004556:	b085      	sub	sp, #20
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	685b      	ldr	r3, [r3, #4]
 8004560:	b2db      	uxtb	r3, r3
 8004562:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d04a      	beq.n	8004600 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	2b08      	cmp	r3, #8
 800456e:	d847      	bhi.n	8004600 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4a25      	ldr	r2, [pc, #148]	; (800460c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d022      	beq.n	80045c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4a24      	ldr	r2, [pc, #144]	; (8004610 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d01d      	beq.n	80045c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4a22      	ldr	r2, [pc, #136]	; (8004614 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d018      	beq.n	80045c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4a21      	ldr	r2, [pc, #132]	; (8004618 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004594:	4293      	cmp	r3, r2
 8004596:	d013      	beq.n	80045c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4a1f      	ldr	r2, [pc, #124]	; (800461c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d00e      	beq.n	80045c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	4a1e      	ldr	r2, [pc, #120]	; (8004620 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d009      	beq.n	80045c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4a1c      	ldr	r2, [pc, #112]	; (8004624 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d004      	beq.n	80045c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	4a1b      	ldr	r2, [pc, #108]	; (8004628 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	d101      	bne.n	80045c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80045c0:	2301      	movs	r3, #1
 80045c2:	e000      	b.n	80045c6 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80045c4:	2300      	movs	r3, #0
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d00a      	beq.n	80045e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80045ca:	68fa      	ldr	r2, [r7, #12]
 80045cc:	4b17      	ldr	r3, [pc, #92]	; (800462c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80045ce:	4413      	add	r3, r2
 80045d0:	009b      	lsls	r3, r3, #2
 80045d2:	461a      	mov	r2, r3
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	4a15      	ldr	r2, [pc, #84]	; (8004630 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80045dc:	671a      	str	r2, [r3, #112]	; 0x70
 80045de:	e009      	b.n	80045f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80045e0:	68fa      	ldr	r2, [r7, #12]
 80045e2:	4b14      	ldr	r3, [pc, #80]	; (8004634 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80045e4:	4413      	add	r3, r2
 80045e6:	009b      	lsls	r3, r3, #2
 80045e8:	461a      	mov	r2, r3
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	4a11      	ldr	r2, [pc, #68]	; (8004638 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80045f2:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	3b01      	subs	r3, #1
 80045f8:	2201      	movs	r2, #1
 80045fa:	409a      	lsls	r2, r3
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8004600:	bf00      	nop
 8004602:	3714      	adds	r7, #20
 8004604:	46bd      	mov	sp, r7
 8004606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460a:	4770      	bx	lr
 800460c:	58025408 	.word	0x58025408
 8004610:	5802541c 	.word	0x5802541c
 8004614:	58025430 	.word	0x58025430
 8004618:	58025444 	.word	0x58025444
 800461c:	58025458 	.word	0x58025458
 8004620:	5802546c 	.word	0x5802546c
 8004624:	58025480 	.word	0x58025480
 8004628:	58025494 	.word	0x58025494
 800462c:	1600963f 	.word	0x1600963f
 8004630:	58025940 	.word	0x58025940
 8004634:	1000823f 	.word	0x1000823f
 8004638:	40020940 	.word	0x40020940

0800463c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800463c:	b480      	push	{r7}
 800463e:	b089      	sub	sp, #36	; 0x24
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
 8004644:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004646:	2300      	movs	r3, #0
 8004648:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800464a:	4b89      	ldr	r3, [pc, #548]	; (8004870 <HAL_GPIO_Init+0x234>)
 800464c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800464e:	e194      	b.n	800497a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	681a      	ldr	r2, [r3, #0]
 8004654:	2101      	movs	r1, #1
 8004656:	69fb      	ldr	r3, [r7, #28]
 8004658:	fa01 f303 	lsl.w	r3, r1, r3
 800465c:	4013      	ands	r3, r2
 800465e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004660:	693b      	ldr	r3, [r7, #16]
 8004662:	2b00      	cmp	r3, #0
 8004664:	f000 8186 	beq.w	8004974 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	685b      	ldr	r3, [r3, #4]
 800466c:	2b01      	cmp	r3, #1
 800466e:	d00b      	beq.n	8004688 <HAL_GPIO_Init+0x4c>
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	685b      	ldr	r3, [r3, #4]
 8004674:	2b02      	cmp	r3, #2
 8004676:	d007      	beq.n	8004688 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800467c:	2b11      	cmp	r3, #17
 800467e:	d003      	beq.n	8004688 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	685b      	ldr	r3, [r3, #4]
 8004684:	2b12      	cmp	r3, #18
 8004686:	d130      	bne.n	80046ea <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	689b      	ldr	r3, [r3, #8]
 800468c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800468e:	69fb      	ldr	r3, [r7, #28]
 8004690:	005b      	lsls	r3, r3, #1
 8004692:	2203      	movs	r2, #3
 8004694:	fa02 f303 	lsl.w	r3, r2, r3
 8004698:	43db      	mvns	r3, r3
 800469a:	69ba      	ldr	r2, [r7, #24]
 800469c:	4013      	ands	r3, r2
 800469e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	68da      	ldr	r2, [r3, #12]
 80046a4:	69fb      	ldr	r3, [r7, #28]
 80046a6:	005b      	lsls	r3, r3, #1
 80046a8:	fa02 f303 	lsl.w	r3, r2, r3
 80046ac:	69ba      	ldr	r2, [r7, #24]
 80046ae:	4313      	orrs	r3, r2
 80046b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	69ba      	ldr	r2, [r7, #24]
 80046b6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	685b      	ldr	r3, [r3, #4]
 80046bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80046be:	2201      	movs	r2, #1
 80046c0:	69fb      	ldr	r3, [r7, #28]
 80046c2:	fa02 f303 	lsl.w	r3, r2, r3
 80046c6:	43db      	mvns	r3, r3
 80046c8:	69ba      	ldr	r2, [r7, #24]
 80046ca:	4013      	ands	r3, r2
 80046cc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	685b      	ldr	r3, [r3, #4]
 80046d2:	091b      	lsrs	r3, r3, #4
 80046d4:	f003 0201 	and.w	r2, r3, #1
 80046d8:	69fb      	ldr	r3, [r7, #28]
 80046da:	fa02 f303 	lsl.w	r3, r2, r3
 80046de:	69ba      	ldr	r2, [r7, #24]
 80046e0:	4313      	orrs	r3, r2
 80046e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	69ba      	ldr	r2, [r7, #24]
 80046e8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	68db      	ldr	r3, [r3, #12]
 80046ee:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80046f0:	69fb      	ldr	r3, [r7, #28]
 80046f2:	005b      	lsls	r3, r3, #1
 80046f4:	2203      	movs	r2, #3
 80046f6:	fa02 f303 	lsl.w	r3, r2, r3
 80046fa:	43db      	mvns	r3, r3
 80046fc:	69ba      	ldr	r2, [r7, #24]
 80046fe:	4013      	ands	r3, r2
 8004700:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	689a      	ldr	r2, [r3, #8]
 8004706:	69fb      	ldr	r3, [r7, #28]
 8004708:	005b      	lsls	r3, r3, #1
 800470a:	fa02 f303 	lsl.w	r3, r2, r3
 800470e:	69ba      	ldr	r2, [r7, #24]
 8004710:	4313      	orrs	r3, r2
 8004712:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	69ba      	ldr	r2, [r7, #24]
 8004718:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	685b      	ldr	r3, [r3, #4]
 800471e:	2b02      	cmp	r3, #2
 8004720:	d003      	beq.n	800472a <HAL_GPIO_Init+0xee>
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	685b      	ldr	r3, [r3, #4]
 8004726:	2b12      	cmp	r3, #18
 8004728:	d123      	bne.n	8004772 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800472a:	69fb      	ldr	r3, [r7, #28]
 800472c:	08da      	lsrs	r2, r3, #3
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	3208      	adds	r2, #8
 8004732:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004736:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004738:	69fb      	ldr	r3, [r7, #28]
 800473a:	f003 0307 	and.w	r3, r3, #7
 800473e:	009b      	lsls	r3, r3, #2
 8004740:	220f      	movs	r2, #15
 8004742:	fa02 f303 	lsl.w	r3, r2, r3
 8004746:	43db      	mvns	r3, r3
 8004748:	69ba      	ldr	r2, [r7, #24]
 800474a:	4013      	ands	r3, r2
 800474c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	691a      	ldr	r2, [r3, #16]
 8004752:	69fb      	ldr	r3, [r7, #28]
 8004754:	f003 0307 	and.w	r3, r3, #7
 8004758:	009b      	lsls	r3, r3, #2
 800475a:	fa02 f303 	lsl.w	r3, r2, r3
 800475e:	69ba      	ldr	r2, [r7, #24]
 8004760:	4313      	orrs	r3, r2
 8004762:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004764:	69fb      	ldr	r3, [r7, #28]
 8004766:	08da      	lsrs	r2, r3, #3
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	3208      	adds	r2, #8
 800476c:	69b9      	ldr	r1, [r7, #24]
 800476e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004778:	69fb      	ldr	r3, [r7, #28]
 800477a:	005b      	lsls	r3, r3, #1
 800477c:	2203      	movs	r2, #3
 800477e:	fa02 f303 	lsl.w	r3, r2, r3
 8004782:	43db      	mvns	r3, r3
 8004784:	69ba      	ldr	r2, [r7, #24]
 8004786:	4013      	ands	r3, r2
 8004788:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	685b      	ldr	r3, [r3, #4]
 800478e:	f003 0203 	and.w	r2, r3, #3
 8004792:	69fb      	ldr	r3, [r7, #28]
 8004794:	005b      	lsls	r3, r3, #1
 8004796:	fa02 f303 	lsl.w	r3, r2, r3
 800479a:	69ba      	ldr	r2, [r7, #24]
 800479c:	4313      	orrs	r3, r2
 800479e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	69ba      	ldr	r2, [r7, #24]
 80047a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	685b      	ldr	r3, [r3, #4]
 80047aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	f000 80e0 	beq.w	8004974 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80047b4:	4b2f      	ldr	r3, [pc, #188]	; (8004874 <HAL_GPIO_Init+0x238>)
 80047b6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80047ba:	4a2e      	ldr	r2, [pc, #184]	; (8004874 <HAL_GPIO_Init+0x238>)
 80047bc:	f043 0302 	orr.w	r3, r3, #2
 80047c0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80047c4:	4b2b      	ldr	r3, [pc, #172]	; (8004874 <HAL_GPIO_Init+0x238>)
 80047c6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80047ca:	f003 0302 	and.w	r3, r3, #2
 80047ce:	60fb      	str	r3, [r7, #12]
 80047d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80047d2:	4a29      	ldr	r2, [pc, #164]	; (8004878 <HAL_GPIO_Init+0x23c>)
 80047d4:	69fb      	ldr	r3, [r7, #28]
 80047d6:	089b      	lsrs	r3, r3, #2
 80047d8:	3302      	adds	r3, #2
 80047da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80047e0:	69fb      	ldr	r3, [r7, #28]
 80047e2:	f003 0303 	and.w	r3, r3, #3
 80047e6:	009b      	lsls	r3, r3, #2
 80047e8:	220f      	movs	r2, #15
 80047ea:	fa02 f303 	lsl.w	r3, r2, r3
 80047ee:	43db      	mvns	r3, r3
 80047f0:	69ba      	ldr	r2, [r7, #24]
 80047f2:	4013      	ands	r3, r2
 80047f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	4a20      	ldr	r2, [pc, #128]	; (800487c <HAL_GPIO_Init+0x240>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d052      	beq.n	80048a4 <HAL_GPIO_Init+0x268>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	4a1f      	ldr	r2, [pc, #124]	; (8004880 <HAL_GPIO_Init+0x244>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d031      	beq.n	800486a <HAL_GPIO_Init+0x22e>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	4a1e      	ldr	r2, [pc, #120]	; (8004884 <HAL_GPIO_Init+0x248>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d02b      	beq.n	8004866 <HAL_GPIO_Init+0x22a>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	4a1d      	ldr	r2, [pc, #116]	; (8004888 <HAL_GPIO_Init+0x24c>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d025      	beq.n	8004862 <HAL_GPIO_Init+0x226>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	4a1c      	ldr	r2, [pc, #112]	; (800488c <HAL_GPIO_Init+0x250>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d01f      	beq.n	800485e <HAL_GPIO_Init+0x222>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	4a1b      	ldr	r2, [pc, #108]	; (8004890 <HAL_GPIO_Init+0x254>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d019      	beq.n	800485a <HAL_GPIO_Init+0x21e>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	4a1a      	ldr	r2, [pc, #104]	; (8004894 <HAL_GPIO_Init+0x258>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d013      	beq.n	8004856 <HAL_GPIO_Init+0x21a>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	4a19      	ldr	r2, [pc, #100]	; (8004898 <HAL_GPIO_Init+0x25c>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d00d      	beq.n	8004852 <HAL_GPIO_Init+0x216>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	4a18      	ldr	r2, [pc, #96]	; (800489c <HAL_GPIO_Init+0x260>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d007      	beq.n	800484e <HAL_GPIO_Init+0x212>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	4a17      	ldr	r2, [pc, #92]	; (80048a0 <HAL_GPIO_Init+0x264>)
 8004842:	4293      	cmp	r3, r2
 8004844:	d101      	bne.n	800484a <HAL_GPIO_Init+0x20e>
 8004846:	2309      	movs	r3, #9
 8004848:	e02d      	b.n	80048a6 <HAL_GPIO_Init+0x26a>
 800484a:	230a      	movs	r3, #10
 800484c:	e02b      	b.n	80048a6 <HAL_GPIO_Init+0x26a>
 800484e:	2308      	movs	r3, #8
 8004850:	e029      	b.n	80048a6 <HAL_GPIO_Init+0x26a>
 8004852:	2307      	movs	r3, #7
 8004854:	e027      	b.n	80048a6 <HAL_GPIO_Init+0x26a>
 8004856:	2306      	movs	r3, #6
 8004858:	e025      	b.n	80048a6 <HAL_GPIO_Init+0x26a>
 800485a:	2305      	movs	r3, #5
 800485c:	e023      	b.n	80048a6 <HAL_GPIO_Init+0x26a>
 800485e:	2304      	movs	r3, #4
 8004860:	e021      	b.n	80048a6 <HAL_GPIO_Init+0x26a>
 8004862:	2303      	movs	r3, #3
 8004864:	e01f      	b.n	80048a6 <HAL_GPIO_Init+0x26a>
 8004866:	2302      	movs	r3, #2
 8004868:	e01d      	b.n	80048a6 <HAL_GPIO_Init+0x26a>
 800486a:	2301      	movs	r3, #1
 800486c:	e01b      	b.n	80048a6 <HAL_GPIO_Init+0x26a>
 800486e:	bf00      	nop
 8004870:	58000080 	.word	0x58000080
 8004874:	58024400 	.word	0x58024400
 8004878:	58000400 	.word	0x58000400
 800487c:	58020000 	.word	0x58020000
 8004880:	58020400 	.word	0x58020400
 8004884:	58020800 	.word	0x58020800
 8004888:	58020c00 	.word	0x58020c00
 800488c:	58021000 	.word	0x58021000
 8004890:	58021400 	.word	0x58021400
 8004894:	58021800 	.word	0x58021800
 8004898:	58021c00 	.word	0x58021c00
 800489c:	58022000 	.word	0x58022000
 80048a0:	58022400 	.word	0x58022400
 80048a4:	2300      	movs	r3, #0
 80048a6:	69fa      	ldr	r2, [r7, #28]
 80048a8:	f002 0203 	and.w	r2, r2, #3
 80048ac:	0092      	lsls	r2, r2, #2
 80048ae:	4093      	lsls	r3, r2
 80048b0:	69ba      	ldr	r2, [r7, #24]
 80048b2:	4313      	orrs	r3, r2
 80048b4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80048b6:	4938      	ldr	r1, [pc, #224]	; (8004998 <HAL_GPIO_Init+0x35c>)
 80048b8:	69fb      	ldr	r3, [r7, #28]
 80048ba:	089b      	lsrs	r3, r3, #2
 80048bc:	3302      	adds	r3, #2
 80048be:	69ba      	ldr	r2, [r7, #24]
 80048c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80048c4:	697b      	ldr	r3, [r7, #20]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80048ca:	693b      	ldr	r3, [r7, #16]
 80048cc:	43db      	mvns	r3, r3
 80048ce:	69ba      	ldr	r2, [r7, #24]
 80048d0:	4013      	ands	r3, r2
 80048d2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d003      	beq.n	80048e8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80048e0:	69ba      	ldr	r2, [r7, #24]
 80048e2:	693b      	ldr	r3, [r7, #16]
 80048e4:	4313      	orrs	r3, r2
 80048e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80048e8:	697b      	ldr	r3, [r7, #20]
 80048ea:	69ba      	ldr	r2, [r7, #24]
 80048ec:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 80048ee:	697b      	ldr	r3, [r7, #20]
 80048f0:	685b      	ldr	r3, [r3, #4]
 80048f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80048f4:	693b      	ldr	r3, [r7, #16]
 80048f6:	43db      	mvns	r3, r3
 80048f8:	69ba      	ldr	r2, [r7, #24]
 80048fa:	4013      	ands	r3, r2
 80048fc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	685b      	ldr	r3, [r3, #4]
 8004902:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004906:	2b00      	cmp	r3, #0
 8004908:	d003      	beq.n	8004912 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800490a:	69ba      	ldr	r2, [r7, #24]
 800490c:	693b      	ldr	r3, [r7, #16]
 800490e:	4313      	orrs	r3, r2
 8004910:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004912:	697b      	ldr	r3, [r7, #20]
 8004914:	69ba      	ldr	r2, [r7, #24]
 8004916:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004918:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004920:	693b      	ldr	r3, [r7, #16]
 8004922:	43db      	mvns	r3, r3
 8004924:	69ba      	ldr	r2, [r7, #24]
 8004926:	4013      	ands	r3, r2
 8004928:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	685b      	ldr	r3, [r3, #4]
 800492e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004932:	2b00      	cmp	r3, #0
 8004934:	d003      	beq.n	800493e <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8004936:	69ba      	ldr	r2, [r7, #24]
 8004938:	693b      	ldr	r3, [r7, #16]
 800493a:	4313      	orrs	r3, r2
 800493c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800493e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004942:	69bb      	ldr	r3, [r7, #24]
 8004944:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004946:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800494a:	685b      	ldr	r3, [r3, #4]
 800494c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800494e:	693b      	ldr	r3, [r7, #16]
 8004950:	43db      	mvns	r3, r3
 8004952:	69ba      	ldr	r2, [r7, #24]
 8004954:	4013      	ands	r3, r2
 8004956:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	685b      	ldr	r3, [r3, #4]
 800495c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004960:	2b00      	cmp	r3, #0
 8004962:	d003      	beq.n	800496c <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8004964:	69ba      	ldr	r2, [r7, #24]
 8004966:	693b      	ldr	r3, [r7, #16]
 8004968:	4313      	orrs	r3, r2
 800496a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800496c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004970:	69bb      	ldr	r3, [r7, #24]
 8004972:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8004974:	69fb      	ldr	r3, [r7, #28]
 8004976:	3301      	adds	r3, #1
 8004978:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	681a      	ldr	r2, [r3, #0]
 800497e:	69fb      	ldr	r3, [r7, #28]
 8004980:	fa22 f303 	lsr.w	r3, r2, r3
 8004984:	2b00      	cmp	r3, #0
 8004986:	f47f ae63 	bne.w	8004650 <HAL_GPIO_Init+0x14>
  }
}
 800498a:	bf00      	nop
 800498c:	bf00      	nop
 800498e:	3724      	adds	r7, #36	; 0x24
 8004990:	46bd      	mov	sp, r7
 8004992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004996:	4770      	bx	lr
 8004998:	58000400 	.word	0x58000400

0800499c <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 800499c:	b480      	push	{r7}
 800499e:	b083      	sub	sp, #12
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 80049a4:	4a08      	ldr	r2, [pc, #32]	; (80049c8 <HAL_HSEM_FastTake+0x2c>)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	3320      	adds	r3, #32
 80049aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049ae:	4a07      	ldr	r2, [pc, #28]	; (80049cc <HAL_HSEM_FastTake+0x30>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d101      	bne.n	80049b8 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 80049b4:	2300      	movs	r3, #0
 80049b6:	e000      	b.n	80049ba <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 80049b8:	2301      	movs	r3, #1
}
 80049ba:	4618      	mov	r0, r3
 80049bc:	370c      	adds	r7, #12
 80049be:	46bd      	mov	sp, r7
 80049c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c4:	4770      	bx	lr
 80049c6:	bf00      	nop
 80049c8:	58026400 	.word	0x58026400
 80049cc:	80000300 	.word	0x80000300

080049d0 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 80049d0:	b480      	push	{r7}
 80049d2:	b083      	sub	sp, #12
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
 80049d8:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80049da:	4906      	ldr	r1, [pc, #24]	; (80049f4 <HAL_HSEM_Release+0x24>)
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 80049e8:	bf00      	nop
 80049ea:	370c      	adds	r7, #12
 80049ec:	46bd      	mov	sp, r7
 80049ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f2:	4770      	bx	lr
 80049f4:	58026400 	.word	0x58026400

080049f8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b084      	sub	sp, #16
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8004a00:	4b29      	ldr	r3, [pc, #164]	; (8004aa8 <HAL_PWREx_ConfigSupply+0xb0>)
 8004a02:	68db      	ldr	r3, [r3, #12]
 8004a04:	f003 0307 	and.w	r3, r3, #7
 8004a08:	2b06      	cmp	r3, #6
 8004a0a:	d00a      	beq.n	8004a22 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004a0c:	4b26      	ldr	r3, [pc, #152]	; (8004aa8 <HAL_PWREx_ConfigSupply+0xb0>)
 8004a0e:	68db      	ldr	r3, [r3, #12]
 8004a10:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a14:	687a      	ldr	r2, [r7, #4]
 8004a16:	429a      	cmp	r2, r3
 8004a18:	d001      	beq.n	8004a1e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	e040      	b.n	8004aa0 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004a1e:	2300      	movs	r3, #0
 8004a20:	e03e      	b.n	8004aa0 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004a22:	4b21      	ldr	r3, [pc, #132]	; (8004aa8 <HAL_PWREx_ConfigSupply+0xb0>)
 8004a24:	68db      	ldr	r3, [r3, #12]
 8004a26:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8004a2a:	491f      	ldr	r1, [pc, #124]	; (8004aa8 <HAL_PWREx_ConfigSupply+0xb0>)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	4313      	orrs	r3, r2
 8004a30:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004a32:	f7fc fdab 	bl	800158c <HAL_GetTick>
 8004a36:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004a38:	e009      	b.n	8004a4e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004a3a:	f7fc fda7 	bl	800158c <HAL_GetTick>
 8004a3e:	4602      	mov	r2, r0
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	1ad3      	subs	r3, r2, r3
 8004a44:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004a48:	d901      	bls.n	8004a4e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	e028      	b.n	8004aa0 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004a4e:	4b16      	ldr	r3, [pc, #88]	; (8004aa8 <HAL_PWREx_ConfigSupply+0xb0>)
 8004a50:	685b      	ldr	r3, [r3, #4]
 8004a52:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004a56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a5a:	d1ee      	bne.n	8004a3a <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2b1e      	cmp	r3, #30
 8004a60:	d008      	beq.n	8004a74 <HAL_PWREx_ConfigSupply+0x7c>
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2b2e      	cmp	r3, #46	; 0x2e
 8004a66:	d005      	beq.n	8004a74 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2b1d      	cmp	r3, #29
 8004a6c:	d002      	beq.n	8004a74 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2b2d      	cmp	r3, #45	; 0x2d
 8004a72:	d114      	bne.n	8004a9e <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8004a74:	f7fc fd8a 	bl	800158c <HAL_GetTick>
 8004a78:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8004a7a:	e009      	b.n	8004a90 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004a7c:	f7fc fd86 	bl	800158c <HAL_GetTick>
 8004a80:	4602      	mov	r2, r0
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	1ad3      	subs	r3, r2, r3
 8004a86:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004a8a:	d901      	bls.n	8004a90 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8004a8c:	2301      	movs	r3, #1
 8004a8e:	e007      	b.n	8004aa0 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8004a90:	4b05      	ldr	r3, [pc, #20]	; (8004aa8 <HAL_PWREx_ConfigSupply+0xb0>)
 8004a92:	68db      	ldr	r3, [r3, #12]
 8004a94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a9c:	d1ee      	bne.n	8004a7c <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004a9e:	2300      	movs	r3, #0
}
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	3710      	adds	r7, #16
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	bd80      	pop	{r7, pc}
 8004aa8:	58024800 	.word	0x58024800

08004aac <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b08c      	sub	sp, #48	; 0x30
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d101      	bne.n	8004abe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004aba:	2301      	movs	r3, #1
 8004abc:	e3ff      	b.n	80052be <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f003 0301 	and.w	r3, r3, #1
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	f000 8087 	beq.w	8004bda <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004acc:	4b99      	ldr	r3, [pc, #612]	; (8004d34 <HAL_RCC_OscConfig+0x288>)
 8004ace:	691b      	ldr	r3, [r3, #16]
 8004ad0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004ad4:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004ad6:	4b97      	ldr	r3, [pc, #604]	; (8004d34 <HAL_RCC_OscConfig+0x288>)
 8004ad8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ada:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004adc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ade:	2b10      	cmp	r3, #16
 8004ae0:	d007      	beq.n	8004af2 <HAL_RCC_OscConfig+0x46>
 8004ae2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ae4:	2b18      	cmp	r3, #24
 8004ae6:	d110      	bne.n	8004b0a <HAL_RCC_OscConfig+0x5e>
 8004ae8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aea:	f003 0303 	and.w	r3, r3, #3
 8004aee:	2b02      	cmp	r3, #2
 8004af0:	d10b      	bne.n	8004b0a <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004af2:	4b90      	ldr	r3, [pc, #576]	; (8004d34 <HAL_RCC_OscConfig+0x288>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d06c      	beq.n	8004bd8 <HAL_RCC_OscConfig+0x12c>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	685b      	ldr	r3, [r3, #4]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d168      	bne.n	8004bd8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004b06:	2301      	movs	r3, #1
 8004b08:	e3d9      	b.n	80052be <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	685b      	ldr	r3, [r3, #4]
 8004b0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b12:	d106      	bne.n	8004b22 <HAL_RCC_OscConfig+0x76>
 8004b14:	4b87      	ldr	r3, [pc, #540]	; (8004d34 <HAL_RCC_OscConfig+0x288>)
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	4a86      	ldr	r2, [pc, #536]	; (8004d34 <HAL_RCC_OscConfig+0x288>)
 8004b1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b1e:	6013      	str	r3, [r2, #0]
 8004b20:	e02e      	b.n	8004b80 <HAL_RCC_OscConfig+0xd4>
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	685b      	ldr	r3, [r3, #4]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d10c      	bne.n	8004b44 <HAL_RCC_OscConfig+0x98>
 8004b2a:	4b82      	ldr	r3, [pc, #520]	; (8004d34 <HAL_RCC_OscConfig+0x288>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	4a81      	ldr	r2, [pc, #516]	; (8004d34 <HAL_RCC_OscConfig+0x288>)
 8004b30:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b34:	6013      	str	r3, [r2, #0]
 8004b36:	4b7f      	ldr	r3, [pc, #508]	; (8004d34 <HAL_RCC_OscConfig+0x288>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	4a7e      	ldr	r2, [pc, #504]	; (8004d34 <HAL_RCC_OscConfig+0x288>)
 8004b3c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b40:	6013      	str	r3, [r2, #0]
 8004b42:	e01d      	b.n	8004b80 <HAL_RCC_OscConfig+0xd4>
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	685b      	ldr	r3, [r3, #4]
 8004b48:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004b4c:	d10c      	bne.n	8004b68 <HAL_RCC_OscConfig+0xbc>
 8004b4e:	4b79      	ldr	r3, [pc, #484]	; (8004d34 <HAL_RCC_OscConfig+0x288>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	4a78      	ldr	r2, [pc, #480]	; (8004d34 <HAL_RCC_OscConfig+0x288>)
 8004b54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004b58:	6013      	str	r3, [r2, #0]
 8004b5a:	4b76      	ldr	r3, [pc, #472]	; (8004d34 <HAL_RCC_OscConfig+0x288>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	4a75      	ldr	r2, [pc, #468]	; (8004d34 <HAL_RCC_OscConfig+0x288>)
 8004b60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b64:	6013      	str	r3, [r2, #0]
 8004b66:	e00b      	b.n	8004b80 <HAL_RCC_OscConfig+0xd4>
 8004b68:	4b72      	ldr	r3, [pc, #456]	; (8004d34 <HAL_RCC_OscConfig+0x288>)
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4a71      	ldr	r2, [pc, #452]	; (8004d34 <HAL_RCC_OscConfig+0x288>)
 8004b6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b72:	6013      	str	r3, [r2, #0]
 8004b74:	4b6f      	ldr	r3, [pc, #444]	; (8004d34 <HAL_RCC_OscConfig+0x288>)
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	4a6e      	ldr	r2, [pc, #440]	; (8004d34 <HAL_RCC_OscConfig+0x288>)
 8004b7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b7e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	685b      	ldr	r3, [r3, #4]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d013      	beq.n	8004bb0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b88:	f7fc fd00 	bl	800158c <HAL_GetTick>
 8004b8c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004b8e:	e008      	b.n	8004ba2 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004b90:	f7fc fcfc 	bl	800158c <HAL_GetTick>
 8004b94:	4602      	mov	r2, r0
 8004b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b98:	1ad3      	subs	r3, r2, r3
 8004b9a:	2b64      	cmp	r3, #100	; 0x64
 8004b9c:	d901      	bls.n	8004ba2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004b9e:	2303      	movs	r3, #3
 8004ba0:	e38d      	b.n	80052be <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004ba2:	4b64      	ldr	r3, [pc, #400]	; (8004d34 <HAL_RCC_OscConfig+0x288>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d0f0      	beq.n	8004b90 <HAL_RCC_OscConfig+0xe4>
 8004bae:	e014      	b.n	8004bda <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bb0:	f7fc fcec 	bl	800158c <HAL_GetTick>
 8004bb4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004bb6:	e008      	b.n	8004bca <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004bb8:	f7fc fce8 	bl	800158c <HAL_GetTick>
 8004bbc:	4602      	mov	r2, r0
 8004bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bc0:	1ad3      	subs	r3, r2, r3
 8004bc2:	2b64      	cmp	r3, #100	; 0x64
 8004bc4:	d901      	bls.n	8004bca <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004bc6:	2303      	movs	r3, #3
 8004bc8:	e379      	b.n	80052be <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004bca:	4b5a      	ldr	r3, [pc, #360]	; (8004d34 <HAL_RCC_OscConfig+0x288>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d1f0      	bne.n	8004bb8 <HAL_RCC_OscConfig+0x10c>
 8004bd6:	e000      	b.n	8004bda <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004bd8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f003 0302 	and.w	r3, r3, #2
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	f000 80ae 	beq.w	8004d44 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004be8:	4b52      	ldr	r3, [pc, #328]	; (8004d34 <HAL_RCC_OscConfig+0x288>)
 8004bea:	691b      	ldr	r3, [r3, #16]
 8004bec:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004bf0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004bf2:	4b50      	ldr	r3, [pc, #320]	; (8004d34 <HAL_RCC_OscConfig+0x288>)
 8004bf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bf6:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004bf8:	6a3b      	ldr	r3, [r7, #32]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d007      	beq.n	8004c0e <HAL_RCC_OscConfig+0x162>
 8004bfe:	6a3b      	ldr	r3, [r7, #32]
 8004c00:	2b18      	cmp	r3, #24
 8004c02:	d13a      	bne.n	8004c7a <HAL_RCC_OscConfig+0x1ce>
 8004c04:	69fb      	ldr	r3, [r7, #28]
 8004c06:	f003 0303 	and.w	r3, r3, #3
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d135      	bne.n	8004c7a <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004c0e:	4b49      	ldr	r3, [pc, #292]	; (8004d34 <HAL_RCC_OscConfig+0x288>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f003 0304 	and.w	r3, r3, #4
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d005      	beq.n	8004c26 <HAL_RCC_OscConfig+0x17a>
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	68db      	ldr	r3, [r3, #12]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d101      	bne.n	8004c26 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004c22:	2301      	movs	r3, #1
 8004c24:	e34b      	b.n	80052be <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c26:	f7fc fcbd 	bl	80015a4 <HAL_GetREVID>
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	f241 0203 	movw	r2, #4099	; 0x1003
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d817      	bhi.n	8004c64 <HAL_RCC_OscConfig+0x1b8>
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	691b      	ldr	r3, [r3, #16]
 8004c38:	2b40      	cmp	r3, #64	; 0x40
 8004c3a:	d108      	bne.n	8004c4e <HAL_RCC_OscConfig+0x1a2>
 8004c3c:	4b3d      	ldr	r3, [pc, #244]	; (8004d34 <HAL_RCC_OscConfig+0x288>)
 8004c3e:	685b      	ldr	r3, [r3, #4]
 8004c40:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004c44:	4a3b      	ldr	r2, [pc, #236]	; (8004d34 <HAL_RCC_OscConfig+0x288>)
 8004c46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c4a:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004c4c:	e07a      	b.n	8004d44 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c4e:	4b39      	ldr	r3, [pc, #228]	; (8004d34 <HAL_RCC_OscConfig+0x288>)
 8004c50:	685b      	ldr	r3, [r3, #4]
 8004c52:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	691b      	ldr	r3, [r3, #16]
 8004c5a:	031b      	lsls	r3, r3, #12
 8004c5c:	4935      	ldr	r1, [pc, #212]	; (8004d34 <HAL_RCC_OscConfig+0x288>)
 8004c5e:	4313      	orrs	r3, r2
 8004c60:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004c62:	e06f      	b.n	8004d44 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c64:	4b33      	ldr	r3, [pc, #204]	; (8004d34 <HAL_RCC_OscConfig+0x288>)
 8004c66:	685b      	ldr	r3, [r3, #4]
 8004c68:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	691b      	ldr	r3, [r3, #16]
 8004c70:	061b      	lsls	r3, r3, #24
 8004c72:	4930      	ldr	r1, [pc, #192]	; (8004d34 <HAL_RCC_OscConfig+0x288>)
 8004c74:	4313      	orrs	r3, r2
 8004c76:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004c78:	e064      	b.n	8004d44 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	68db      	ldr	r3, [r3, #12]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d045      	beq.n	8004d0e <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004c82:	4b2c      	ldr	r3, [pc, #176]	; (8004d34 <HAL_RCC_OscConfig+0x288>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f023 0219 	bic.w	r2, r3, #25
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	68db      	ldr	r3, [r3, #12]
 8004c8e:	4929      	ldr	r1, [pc, #164]	; (8004d34 <HAL_RCC_OscConfig+0x288>)
 8004c90:	4313      	orrs	r3, r2
 8004c92:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c94:	f7fc fc7a 	bl	800158c <HAL_GetTick>
 8004c98:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004c9a:	e008      	b.n	8004cae <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c9c:	f7fc fc76 	bl	800158c <HAL_GetTick>
 8004ca0:	4602      	mov	r2, r0
 8004ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ca4:	1ad3      	subs	r3, r2, r3
 8004ca6:	2b02      	cmp	r3, #2
 8004ca8:	d901      	bls.n	8004cae <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8004caa:	2303      	movs	r3, #3
 8004cac:	e307      	b.n	80052be <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004cae:	4b21      	ldr	r3, [pc, #132]	; (8004d34 <HAL_RCC_OscConfig+0x288>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f003 0304 	and.w	r3, r3, #4
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d0f0      	beq.n	8004c9c <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cba:	f7fc fc73 	bl	80015a4 <HAL_GetREVID>
 8004cbe:	4603      	mov	r3, r0
 8004cc0:	f241 0203 	movw	r2, #4099	; 0x1003
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	d817      	bhi.n	8004cf8 <HAL_RCC_OscConfig+0x24c>
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	691b      	ldr	r3, [r3, #16]
 8004ccc:	2b40      	cmp	r3, #64	; 0x40
 8004cce:	d108      	bne.n	8004ce2 <HAL_RCC_OscConfig+0x236>
 8004cd0:	4b18      	ldr	r3, [pc, #96]	; (8004d34 <HAL_RCC_OscConfig+0x288>)
 8004cd2:	685b      	ldr	r3, [r3, #4]
 8004cd4:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004cd8:	4a16      	ldr	r2, [pc, #88]	; (8004d34 <HAL_RCC_OscConfig+0x288>)
 8004cda:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004cde:	6053      	str	r3, [r2, #4]
 8004ce0:	e030      	b.n	8004d44 <HAL_RCC_OscConfig+0x298>
 8004ce2:	4b14      	ldr	r3, [pc, #80]	; (8004d34 <HAL_RCC_OscConfig+0x288>)
 8004ce4:	685b      	ldr	r3, [r3, #4]
 8004ce6:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	691b      	ldr	r3, [r3, #16]
 8004cee:	031b      	lsls	r3, r3, #12
 8004cf0:	4910      	ldr	r1, [pc, #64]	; (8004d34 <HAL_RCC_OscConfig+0x288>)
 8004cf2:	4313      	orrs	r3, r2
 8004cf4:	604b      	str	r3, [r1, #4]
 8004cf6:	e025      	b.n	8004d44 <HAL_RCC_OscConfig+0x298>
 8004cf8:	4b0e      	ldr	r3, [pc, #56]	; (8004d34 <HAL_RCC_OscConfig+0x288>)
 8004cfa:	685b      	ldr	r3, [r3, #4]
 8004cfc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	691b      	ldr	r3, [r3, #16]
 8004d04:	061b      	lsls	r3, r3, #24
 8004d06:	490b      	ldr	r1, [pc, #44]	; (8004d34 <HAL_RCC_OscConfig+0x288>)
 8004d08:	4313      	orrs	r3, r2
 8004d0a:	604b      	str	r3, [r1, #4]
 8004d0c:	e01a      	b.n	8004d44 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004d0e:	4b09      	ldr	r3, [pc, #36]	; (8004d34 <HAL_RCC_OscConfig+0x288>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	4a08      	ldr	r2, [pc, #32]	; (8004d34 <HAL_RCC_OscConfig+0x288>)
 8004d14:	f023 0301 	bic.w	r3, r3, #1
 8004d18:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d1a:	f7fc fc37 	bl	800158c <HAL_GetTick>
 8004d1e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004d20:	e00a      	b.n	8004d38 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004d22:	f7fc fc33 	bl	800158c <HAL_GetTick>
 8004d26:	4602      	mov	r2, r0
 8004d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d2a:	1ad3      	subs	r3, r2, r3
 8004d2c:	2b02      	cmp	r3, #2
 8004d2e:	d903      	bls.n	8004d38 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8004d30:	2303      	movs	r3, #3
 8004d32:	e2c4      	b.n	80052be <HAL_RCC_OscConfig+0x812>
 8004d34:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004d38:	4ba4      	ldr	r3, [pc, #656]	; (8004fcc <HAL_RCC_OscConfig+0x520>)
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f003 0304 	and.w	r3, r3, #4
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d1ee      	bne.n	8004d22 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f003 0310 	and.w	r3, r3, #16
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	f000 80a9 	beq.w	8004ea4 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d52:	4b9e      	ldr	r3, [pc, #632]	; (8004fcc <HAL_RCC_OscConfig+0x520>)
 8004d54:	691b      	ldr	r3, [r3, #16]
 8004d56:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004d5a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004d5c:	4b9b      	ldr	r3, [pc, #620]	; (8004fcc <HAL_RCC_OscConfig+0x520>)
 8004d5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d60:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004d62:	69bb      	ldr	r3, [r7, #24]
 8004d64:	2b08      	cmp	r3, #8
 8004d66:	d007      	beq.n	8004d78 <HAL_RCC_OscConfig+0x2cc>
 8004d68:	69bb      	ldr	r3, [r7, #24]
 8004d6a:	2b18      	cmp	r3, #24
 8004d6c:	d13a      	bne.n	8004de4 <HAL_RCC_OscConfig+0x338>
 8004d6e:	697b      	ldr	r3, [r7, #20]
 8004d70:	f003 0303 	and.w	r3, r3, #3
 8004d74:	2b01      	cmp	r3, #1
 8004d76:	d135      	bne.n	8004de4 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004d78:	4b94      	ldr	r3, [pc, #592]	; (8004fcc <HAL_RCC_OscConfig+0x520>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d005      	beq.n	8004d90 <HAL_RCC_OscConfig+0x2e4>
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	69db      	ldr	r3, [r3, #28]
 8004d88:	2b80      	cmp	r3, #128	; 0x80
 8004d8a:	d001      	beq.n	8004d90 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8004d8c:	2301      	movs	r3, #1
 8004d8e:	e296      	b.n	80052be <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004d90:	f7fc fc08 	bl	80015a4 <HAL_GetREVID>
 8004d94:	4603      	mov	r3, r0
 8004d96:	f241 0203 	movw	r2, #4099	; 0x1003
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d817      	bhi.n	8004dce <HAL_RCC_OscConfig+0x322>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6a1b      	ldr	r3, [r3, #32]
 8004da2:	2b20      	cmp	r3, #32
 8004da4:	d108      	bne.n	8004db8 <HAL_RCC_OscConfig+0x30c>
 8004da6:	4b89      	ldr	r3, [pc, #548]	; (8004fcc <HAL_RCC_OscConfig+0x520>)
 8004da8:	685b      	ldr	r3, [r3, #4]
 8004daa:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004dae:	4a87      	ldr	r2, [pc, #540]	; (8004fcc <HAL_RCC_OscConfig+0x520>)
 8004db0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004db4:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004db6:	e075      	b.n	8004ea4 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004db8:	4b84      	ldr	r3, [pc, #528]	; (8004fcc <HAL_RCC_OscConfig+0x520>)
 8004dba:	685b      	ldr	r3, [r3, #4]
 8004dbc:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6a1b      	ldr	r3, [r3, #32]
 8004dc4:	069b      	lsls	r3, r3, #26
 8004dc6:	4981      	ldr	r1, [pc, #516]	; (8004fcc <HAL_RCC_OscConfig+0x520>)
 8004dc8:	4313      	orrs	r3, r2
 8004dca:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004dcc:	e06a      	b.n	8004ea4 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004dce:	4b7f      	ldr	r3, [pc, #508]	; (8004fcc <HAL_RCC_OscConfig+0x520>)
 8004dd0:	68db      	ldr	r3, [r3, #12]
 8004dd2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6a1b      	ldr	r3, [r3, #32]
 8004dda:	061b      	lsls	r3, r3, #24
 8004ddc:	497b      	ldr	r1, [pc, #492]	; (8004fcc <HAL_RCC_OscConfig+0x520>)
 8004dde:	4313      	orrs	r3, r2
 8004de0:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004de2:	e05f      	b.n	8004ea4 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	69db      	ldr	r3, [r3, #28]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d042      	beq.n	8004e72 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004dec:	4b77      	ldr	r3, [pc, #476]	; (8004fcc <HAL_RCC_OscConfig+0x520>)
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	4a76      	ldr	r2, [pc, #472]	; (8004fcc <HAL_RCC_OscConfig+0x520>)
 8004df2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004df6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004df8:	f7fc fbc8 	bl	800158c <HAL_GetTick>
 8004dfc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004dfe:	e008      	b.n	8004e12 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004e00:	f7fc fbc4 	bl	800158c <HAL_GetTick>
 8004e04:	4602      	mov	r2, r0
 8004e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e08:	1ad3      	subs	r3, r2, r3
 8004e0a:	2b02      	cmp	r3, #2
 8004e0c:	d901      	bls.n	8004e12 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8004e0e:	2303      	movs	r3, #3
 8004e10:	e255      	b.n	80052be <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004e12:	4b6e      	ldr	r3, [pc, #440]	; (8004fcc <HAL_RCC_OscConfig+0x520>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d0f0      	beq.n	8004e00 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004e1e:	f7fc fbc1 	bl	80015a4 <HAL_GetREVID>
 8004e22:	4603      	mov	r3, r0
 8004e24:	f241 0203 	movw	r2, #4099	; 0x1003
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d817      	bhi.n	8004e5c <HAL_RCC_OscConfig+0x3b0>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6a1b      	ldr	r3, [r3, #32]
 8004e30:	2b20      	cmp	r3, #32
 8004e32:	d108      	bne.n	8004e46 <HAL_RCC_OscConfig+0x39a>
 8004e34:	4b65      	ldr	r3, [pc, #404]	; (8004fcc <HAL_RCC_OscConfig+0x520>)
 8004e36:	685b      	ldr	r3, [r3, #4]
 8004e38:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004e3c:	4a63      	ldr	r2, [pc, #396]	; (8004fcc <HAL_RCC_OscConfig+0x520>)
 8004e3e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004e42:	6053      	str	r3, [r2, #4]
 8004e44:	e02e      	b.n	8004ea4 <HAL_RCC_OscConfig+0x3f8>
 8004e46:	4b61      	ldr	r3, [pc, #388]	; (8004fcc <HAL_RCC_OscConfig+0x520>)
 8004e48:	685b      	ldr	r3, [r3, #4]
 8004e4a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6a1b      	ldr	r3, [r3, #32]
 8004e52:	069b      	lsls	r3, r3, #26
 8004e54:	495d      	ldr	r1, [pc, #372]	; (8004fcc <HAL_RCC_OscConfig+0x520>)
 8004e56:	4313      	orrs	r3, r2
 8004e58:	604b      	str	r3, [r1, #4]
 8004e5a:	e023      	b.n	8004ea4 <HAL_RCC_OscConfig+0x3f8>
 8004e5c:	4b5b      	ldr	r3, [pc, #364]	; (8004fcc <HAL_RCC_OscConfig+0x520>)
 8004e5e:	68db      	ldr	r3, [r3, #12]
 8004e60:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6a1b      	ldr	r3, [r3, #32]
 8004e68:	061b      	lsls	r3, r3, #24
 8004e6a:	4958      	ldr	r1, [pc, #352]	; (8004fcc <HAL_RCC_OscConfig+0x520>)
 8004e6c:	4313      	orrs	r3, r2
 8004e6e:	60cb      	str	r3, [r1, #12]
 8004e70:	e018      	b.n	8004ea4 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004e72:	4b56      	ldr	r3, [pc, #344]	; (8004fcc <HAL_RCC_OscConfig+0x520>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	4a55      	ldr	r2, [pc, #340]	; (8004fcc <HAL_RCC_OscConfig+0x520>)
 8004e78:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004e7c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e7e:	f7fc fb85 	bl	800158c <HAL_GetTick>
 8004e82:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004e84:	e008      	b.n	8004e98 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004e86:	f7fc fb81 	bl	800158c <HAL_GetTick>
 8004e8a:	4602      	mov	r2, r0
 8004e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e8e:	1ad3      	subs	r3, r2, r3
 8004e90:	2b02      	cmp	r3, #2
 8004e92:	d901      	bls.n	8004e98 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8004e94:	2303      	movs	r3, #3
 8004e96:	e212      	b.n	80052be <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004e98:	4b4c      	ldr	r3, [pc, #304]	; (8004fcc <HAL_RCC_OscConfig+0x520>)
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d1f0      	bne.n	8004e86 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f003 0308 	and.w	r3, r3, #8
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d036      	beq.n	8004f1e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	695b      	ldr	r3, [r3, #20]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d019      	beq.n	8004eec <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004eb8:	4b44      	ldr	r3, [pc, #272]	; (8004fcc <HAL_RCC_OscConfig+0x520>)
 8004eba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ebc:	4a43      	ldr	r2, [pc, #268]	; (8004fcc <HAL_RCC_OscConfig+0x520>)
 8004ebe:	f043 0301 	orr.w	r3, r3, #1
 8004ec2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ec4:	f7fc fb62 	bl	800158c <HAL_GetTick>
 8004ec8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004eca:	e008      	b.n	8004ede <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004ecc:	f7fc fb5e 	bl	800158c <HAL_GetTick>
 8004ed0:	4602      	mov	r2, r0
 8004ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ed4:	1ad3      	subs	r3, r2, r3
 8004ed6:	2b02      	cmp	r3, #2
 8004ed8:	d901      	bls.n	8004ede <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8004eda:	2303      	movs	r3, #3
 8004edc:	e1ef      	b.n	80052be <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004ede:	4b3b      	ldr	r3, [pc, #236]	; (8004fcc <HAL_RCC_OscConfig+0x520>)
 8004ee0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ee2:	f003 0302 	and.w	r3, r3, #2
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d0f0      	beq.n	8004ecc <HAL_RCC_OscConfig+0x420>
 8004eea:	e018      	b.n	8004f1e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004eec:	4b37      	ldr	r3, [pc, #220]	; (8004fcc <HAL_RCC_OscConfig+0x520>)
 8004eee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ef0:	4a36      	ldr	r2, [pc, #216]	; (8004fcc <HAL_RCC_OscConfig+0x520>)
 8004ef2:	f023 0301 	bic.w	r3, r3, #1
 8004ef6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ef8:	f7fc fb48 	bl	800158c <HAL_GetTick>
 8004efc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004efe:	e008      	b.n	8004f12 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004f00:	f7fc fb44 	bl	800158c <HAL_GetTick>
 8004f04:	4602      	mov	r2, r0
 8004f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f08:	1ad3      	subs	r3, r2, r3
 8004f0a:	2b02      	cmp	r3, #2
 8004f0c:	d901      	bls.n	8004f12 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8004f0e:	2303      	movs	r3, #3
 8004f10:	e1d5      	b.n	80052be <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004f12:	4b2e      	ldr	r3, [pc, #184]	; (8004fcc <HAL_RCC_OscConfig+0x520>)
 8004f14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f16:	f003 0302 	and.w	r3, r3, #2
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d1f0      	bne.n	8004f00 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f003 0320 	and.w	r3, r3, #32
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d036      	beq.n	8004f98 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	699b      	ldr	r3, [r3, #24]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d019      	beq.n	8004f66 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004f32:	4b26      	ldr	r3, [pc, #152]	; (8004fcc <HAL_RCC_OscConfig+0x520>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	4a25      	ldr	r2, [pc, #148]	; (8004fcc <HAL_RCC_OscConfig+0x520>)
 8004f38:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004f3c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004f3e:	f7fc fb25 	bl	800158c <HAL_GetTick>
 8004f42:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004f44:	e008      	b.n	8004f58 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8004f46:	f7fc fb21 	bl	800158c <HAL_GetTick>
 8004f4a:	4602      	mov	r2, r0
 8004f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f4e:	1ad3      	subs	r3, r2, r3
 8004f50:	2b02      	cmp	r3, #2
 8004f52:	d901      	bls.n	8004f58 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8004f54:	2303      	movs	r3, #3
 8004f56:	e1b2      	b.n	80052be <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004f58:	4b1c      	ldr	r3, [pc, #112]	; (8004fcc <HAL_RCC_OscConfig+0x520>)
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d0f0      	beq.n	8004f46 <HAL_RCC_OscConfig+0x49a>
 8004f64:	e018      	b.n	8004f98 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004f66:	4b19      	ldr	r3, [pc, #100]	; (8004fcc <HAL_RCC_OscConfig+0x520>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	4a18      	ldr	r2, [pc, #96]	; (8004fcc <HAL_RCC_OscConfig+0x520>)
 8004f6c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004f70:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004f72:	f7fc fb0b 	bl	800158c <HAL_GetTick>
 8004f76:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004f78:	e008      	b.n	8004f8c <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8004f7a:	f7fc fb07 	bl	800158c <HAL_GetTick>
 8004f7e:	4602      	mov	r2, r0
 8004f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f82:	1ad3      	subs	r3, r2, r3
 8004f84:	2b02      	cmp	r3, #2
 8004f86:	d901      	bls.n	8004f8c <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8004f88:	2303      	movs	r3, #3
 8004f8a:	e198      	b.n	80052be <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004f8c:	4b0f      	ldr	r3, [pc, #60]	; (8004fcc <HAL_RCC_OscConfig+0x520>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d1f0      	bne.n	8004f7a <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f003 0304 	and.w	r3, r3, #4
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	f000 8085 	beq.w	80050b0 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004fa6:	4b0a      	ldr	r3, [pc, #40]	; (8004fd0 <HAL_RCC_OscConfig+0x524>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	4a09      	ldr	r2, [pc, #36]	; (8004fd0 <HAL_RCC_OscConfig+0x524>)
 8004fac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004fb0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004fb2:	f7fc faeb 	bl	800158c <HAL_GetTick>
 8004fb6:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004fb8:	e00c      	b.n	8004fd4 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004fba:	f7fc fae7 	bl	800158c <HAL_GetTick>
 8004fbe:	4602      	mov	r2, r0
 8004fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fc2:	1ad3      	subs	r3, r2, r3
 8004fc4:	2b64      	cmp	r3, #100	; 0x64
 8004fc6:	d905      	bls.n	8004fd4 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8004fc8:	2303      	movs	r3, #3
 8004fca:	e178      	b.n	80052be <HAL_RCC_OscConfig+0x812>
 8004fcc:	58024400 	.word	0x58024400
 8004fd0:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004fd4:	4b96      	ldr	r3, [pc, #600]	; (8005230 <HAL_RCC_OscConfig+0x784>)
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d0ec      	beq.n	8004fba <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	689b      	ldr	r3, [r3, #8]
 8004fe4:	2b01      	cmp	r3, #1
 8004fe6:	d106      	bne.n	8004ff6 <HAL_RCC_OscConfig+0x54a>
 8004fe8:	4b92      	ldr	r3, [pc, #584]	; (8005234 <HAL_RCC_OscConfig+0x788>)
 8004fea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fec:	4a91      	ldr	r2, [pc, #580]	; (8005234 <HAL_RCC_OscConfig+0x788>)
 8004fee:	f043 0301 	orr.w	r3, r3, #1
 8004ff2:	6713      	str	r3, [r2, #112]	; 0x70
 8004ff4:	e02d      	b.n	8005052 <HAL_RCC_OscConfig+0x5a6>
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	689b      	ldr	r3, [r3, #8]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d10c      	bne.n	8005018 <HAL_RCC_OscConfig+0x56c>
 8004ffe:	4b8d      	ldr	r3, [pc, #564]	; (8005234 <HAL_RCC_OscConfig+0x788>)
 8005000:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005002:	4a8c      	ldr	r2, [pc, #560]	; (8005234 <HAL_RCC_OscConfig+0x788>)
 8005004:	f023 0301 	bic.w	r3, r3, #1
 8005008:	6713      	str	r3, [r2, #112]	; 0x70
 800500a:	4b8a      	ldr	r3, [pc, #552]	; (8005234 <HAL_RCC_OscConfig+0x788>)
 800500c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800500e:	4a89      	ldr	r2, [pc, #548]	; (8005234 <HAL_RCC_OscConfig+0x788>)
 8005010:	f023 0304 	bic.w	r3, r3, #4
 8005014:	6713      	str	r3, [r2, #112]	; 0x70
 8005016:	e01c      	b.n	8005052 <HAL_RCC_OscConfig+0x5a6>
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	689b      	ldr	r3, [r3, #8]
 800501c:	2b05      	cmp	r3, #5
 800501e:	d10c      	bne.n	800503a <HAL_RCC_OscConfig+0x58e>
 8005020:	4b84      	ldr	r3, [pc, #528]	; (8005234 <HAL_RCC_OscConfig+0x788>)
 8005022:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005024:	4a83      	ldr	r2, [pc, #524]	; (8005234 <HAL_RCC_OscConfig+0x788>)
 8005026:	f043 0304 	orr.w	r3, r3, #4
 800502a:	6713      	str	r3, [r2, #112]	; 0x70
 800502c:	4b81      	ldr	r3, [pc, #516]	; (8005234 <HAL_RCC_OscConfig+0x788>)
 800502e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005030:	4a80      	ldr	r2, [pc, #512]	; (8005234 <HAL_RCC_OscConfig+0x788>)
 8005032:	f043 0301 	orr.w	r3, r3, #1
 8005036:	6713      	str	r3, [r2, #112]	; 0x70
 8005038:	e00b      	b.n	8005052 <HAL_RCC_OscConfig+0x5a6>
 800503a:	4b7e      	ldr	r3, [pc, #504]	; (8005234 <HAL_RCC_OscConfig+0x788>)
 800503c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800503e:	4a7d      	ldr	r2, [pc, #500]	; (8005234 <HAL_RCC_OscConfig+0x788>)
 8005040:	f023 0301 	bic.w	r3, r3, #1
 8005044:	6713      	str	r3, [r2, #112]	; 0x70
 8005046:	4b7b      	ldr	r3, [pc, #492]	; (8005234 <HAL_RCC_OscConfig+0x788>)
 8005048:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800504a:	4a7a      	ldr	r2, [pc, #488]	; (8005234 <HAL_RCC_OscConfig+0x788>)
 800504c:	f023 0304 	bic.w	r3, r3, #4
 8005050:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	689b      	ldr	r3, [r3, #8]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d015      	beq.n	8005086 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800505a:	f7fc fa97 	bl	800158c <HAL_GetTick>
 800505e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005060:	e00a      	b.n	8005078 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005062:	f7fc fa93 	bl	800158c <HAL_GetTick>
 8005066:	4602      	mov	r2, r0
 8005068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800506a:	1ad3      	subs	r3, r2, r3
 800506c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005070:	4293      	cmp	r3, r2
 8005072:	d901      	bls.n	8005078 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8005074:	2303      	movs	r3, #3
 8005076:	e122      	b.n	80052be <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005078:	4b6e      	ldr	r3, [pc, #440]	; (8005234 <HAL_RCC_OscConfig+0x788>)
 800507a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800507c:	f003 0302 	and.w	r3, r3, #2
 8005080:	2b00      	cmp	r3, #0
 8005082:	d0ee      	beq.n	8005062 <HAL_RCC_OscConfig+0x5b6>
 8005084:	e014      	b.n	80050b0 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005086:	f7fc fa81 	bl	800158c <HAL_GetTick>
 800508a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800508c:	e00a      	b.n	80050a4 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800508e:	f7fc fa7d 	bl	800158c <HAL_GetTick>
 8005092:	4602      	mov	r2, r0
 8005094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005096:	1ad3      	subs	r3, r2, r3
 8005098:	f241 3288 	movw	r2, #5000	; 0x1388
 800509c:	4293      	cmp	r3, r2
 800509e:	d901      	bls.n	80050a4 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 80050a0:	2303      	movs	r3, #3
 80050a2:	e10c      	b.n	80052be <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80050a4:	4b63      	ldr	r3, [pc, #396]	; (8005234 <HAL_RCC_OscConfig+0x788>)
 80050a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050a8:	f003 0302 	and.w	r3, r3, #2
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d1ee      	bne.n	800508e <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	f000 8101 	beq.w	80052bc <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80050ba:	4b5e      	ldr	r3, [pc, #376]	; (8005234 <HAL_RCC_OscConfig+0x788>)
 80050bc:	691b      	ldr	r3, [r3, #16]
 80050be:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80050c2:	2b18      	cmp	r3, #24
 80050c4:	f000 80bc 	beq.w	8005240 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050cc:	2b02      	cmp	r3, #2
 80050ce:	f040 8095 	bne.w	80051fc <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050d2:	4b58      	ldr	r3, [pc, #352]	; (8005234 <HAL_RCC_OscConfig+0x788>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4a57      	ldr	r2, [pc, #348]	; (8005234 <HAL_RCC_OscConfig+0x788>)
 80050d8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80050dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050de:	f7fc fa55 	bl	800158c <HAL_GetTick>
 80050e2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80050e4:	e008      	b.n	80050f8 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80050e6:	f7fc fa51 	bl	800158c <HAL_GetTick>
 80050ea:	4602      	mov	r2, r0
 80050ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ee:	1ad3      	subs	r3, r2, r3
 80050f0:	2b02      	cmp	r3, #2
 80050f2:	d901      	bls.n	80050f8 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 80050f4:	2303      	movs	r3, #3
 80050f6:	e0e2      	b.n	80052be <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80050f8:	4b4e      	ldr	r3, [pc, #312]	; (8005234 <HAL_RCC_OscConfig+0x788>)
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005100:	2b00      	cmp	r3, #0
 8005102:	d1f0      	bne.n	80050e6 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005104:	4b4b      	ldr	r3, [pc, #300]	; (8005234 <HAL_RCC_OscConfig+0x788>)
 8005106:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005108:	4b4b      	ldr	r3, [pc, #300]	; (8005238 <HAL_RCC_OscConfig+0x78c>)
 800510a:	4013      	ands	r3, r2
 800510c:	687a      	ldr	r2, [r7, #4]
 800510e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8005110:	687a      	ldr	r2, [r7, #4]
 8005112:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005114:	0112      	lsls	r2, r2, #4
 8005116:	430a      	orrs	r2, r1
 8005118:	4946      	ldr	r1, [pc, #280]	; (8005234 <HAL_RCC_OscConfig+0x788>)
 800511a:	4313      	orrs	r3, r2
 800511c:	628b      	str	r3, [r1, #40]	; 0x28
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005122:	3b01      	subs	r3, #1
 8005124:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800512c:	3b01      	subs	r3, #1
 800512e:	025b      	lsls	r3, r3, #9
 8005130:	b29b      	uxth	r3, r3
 8005132:	431a      	orrs	r2, r3
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005138:	3b01      	subs	r3, #1
 800513a:	041b      	lsls	r3, r3, #16
 800513c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005140:	431a      	orrs	r2, r3
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005146:	3b01      	subs	r3, #1
 8005148:	061b      	lsls	r3, r3, #24
 800514a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800514e:	4939      	ldr	r1, [pc, #228]	; (8005234 <HAL_RCC_OscConfig+0x788>)
 8005150:	4313      	orrs	r3, r2
 8005152:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8005154:	4b37      	ldr	r3, [pc, #220]	; (8005234 <HAL_RCC_OscConfig+0x788>)
 8005156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005158:	4a36      	ldr	r2, [pc, #216]	; (8005234 <HAL_RCC_OscConfig+0x788>)
 800515a:	f023 0301 	bic.w	r3, r3, #1
 800515e:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005160:	4b34      	ldr	r3, [pc, #208]	; (8005234 <HAL_RCC_OscConfig+0x788>)
 8005162:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005164:	4b35      	ldr	r3, [pc, #212]	; (800523c <HAL_RCC_OscConfig+0x790>)
 8005166:	4013      	ands	r3, r2
 8005168:	687a      	ldr	r2, [r7, #4]
 800516a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800516c:	00d2      	lsls	r2, r2, #3
 800516e:	4931      	ldr	r1, [pc, #196]	; (8005234 <HAL_RCC_OscConfig+0x788>)
 8005170:	4313      	orrs	r3, r2
 8005172:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005174:	4b2f      	ldr	r3, [pc, #188]	; (8005234 <HAL_RCC_OscConfig+0x788>)
 8005176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005178:	f023 020c 	bic.w	r2, r3, #12
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005180:	492c      	ldr	r1, [pc, #176]	; (8005234 <HAL_RCC_OscConfig+0x788>)
 8005182:	4313      	orrs	r3, r2
 8005184:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005186:	4b2b      	ldr	r3, [pc, #172]	; (8005234 <HAL_RCC_OscConfig+0x788>)
 8005188:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800518a:	f023 0202 	bic.w	r2, r3, #2
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005192:	4928      	ldr	r1, [pc, #160]	; (8005234 <HAL_RCC_OscConfig+0x788>)
 8005194:	4313      	orrs	r3, r2
 8005196:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005198:	4b26      	ldr	r3, [pc, #152]	; (8005234 <HAL_RCC_OscConfig+0x788>)
 800519a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800519c:	4a25      	ldr	r2, [pc, #148]	; (8005234 <HAL_RCC_OscConfig+0x788>)
 800519e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80051a2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80051a4:	4b23      	ldr	r3, [pc, #140]	; (8005234 <HAL_RCC_OscConfig+0x788>)
 80051a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051a8:	4a22      	ldr	r2, [pc, #136]	; (8005234 <HAL_RCC_OscConfig+0x788>)
 80051aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80051ae:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80051b0:	4b20      	ldr	r3, [pc, #128]	; (8005234 <HAL_RCC_OscConfig+0x788>)
 80051b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051b4:	4a1f      	ldr	r2, [pc, #124]	; (8005234 <HAL_RCC_OscConfig+0x788>)
 80051b6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80051ba:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80051bc:	4b1d      	ldr	r3, [pc, #116]	; (8005234 <HAL_RCC_OscConfig+0x788>)
 80051be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051c0:	4a1c      	ldr	r2, [pc, #112]	; (8005234 <HAL_RCC_OscConfig+0x788>)
 80051c2:	f043 0301 	orr.w	r3, r3, #1
 80051c6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80051c8:	4b1a      	ldr	r3, [pc, #104]	; (8005234 <HAL_RCC_OscConfig+0x788>)
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	4a19      	ldr	r2, [pc, #100]	; (8005234 <HAL_RCC_OscConfig+0x788>)
 80051ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80051d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051d4:	f7fc f9da 	bl	800158c <HAL_GetTick>
 80051d8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80051da:	e008      	b.n	80051ee <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80051dc:	f7fc f9d6 	bl	800158c <HAL_GetTick>
 80051e0:	4602      	mov	r2, r0
 80051e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051e4:	1ad3      	subs	r3, r2, r3
 80051e6:	2b02      	cmp	r3, #2
 80051e8:	d901      	bls.n	80051ee <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 80051ea:	2303      	movs	r3, #3
 80051ec:	e067      	b.n	80052be <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80051ee:	4b11      	ldr	r3, [pc, #68]	; (8005234 <HAL_RCC_OscConfig+0x788>)
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d0f0      	beq.n	80051dc <HAL_RCC_OscConfig+0x730>
 80051fa:	e05f      	b.n	80052bc <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051fc:	4b0d      	ldr	r3, [pc, #52]	; (8005234 <HAL_RCC_OscConfig+0x788>)
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	4a0c      	ldr	r2, [pc, #48]	; (8005234 <HAL_RCC_OscConfig+0x788>)
 8005202:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005206:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005208:	f7fc f9c0 	bl	800158c <HAL_GetTick>
 800520c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800520e:	e008      	b.n	8005222 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005210:	f7fc f9bc 	bl	800158c <HAL_GetTick>
 8005214:	4602      	mov	r2, r0
 8005216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005218:	1ad3      	subs	r3, r2, r3
 800521a:	2b02      	cmp	r3, #2
 800521c:	d901      	bls.n	8005222 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 800521e:	2303      	movs	r3, #3
 8005220:	e04d      	b.n	80052be <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005222:	4b04      	ldr	r3, [pc, #16]	; (8005234 <HAL_RCC_OscConfig+0x788>)
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800522a:	2b00      	cmp	r3, #0
 800522c:	d1f0      	bne.n	8005210 <HAL_RCC_OscConfig+0x764>
 800522e:	e045      	b.n	80052bc <HAL_RCC_OscConfig+0x810>
 8005230:	58024800 	.word	0x58024800
 8005234:	58024400 	.word	0x58024400
 8005238:	fffffc0c 	.word	0xfffffc0c
 800523c:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005240:	4b21      	ldr	r3, [pc, #132]	; (80052c8 <HAL_RCC_OscConfig+0x81c>)
 8005242:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005244:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005246:	4b20      	ldr	r3, [pc, #128]	; (80052c8 <HAL_RCC_OscConfig+0x81c>)
 8005248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800524a:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005250:	2b01      	cmp	r3, #1
 8005252:	d031      	beq.n	80052b8 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005254:	693b      	ldr	r3, [r7, #16]
 8005256:	f003 0203 	and.w	r2, r3, #3
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800525e:	429a      	cmp	r2, r3
 8005260:	d12a      	bne.n	80052b8 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005262:	693b      	ldr	r3, [r7, #16]
 8005264:	091b      	lsrs	r3, r3, #4
 8005266:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800526e:	429a      	cmp	r2, r3
 8005270:	d122      	bne.n	80052b8 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800527c:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800527e:	429a      	cmp	r2, r3
 8005280:	d11a      	bne.n	80052b8 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	0a5b      	lsrs	r3, r3, #9
 8005286:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800528e:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005290:	429a      	cmp	r2, r3
 8005292:	d111      	bne.n	80052b8 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	0c1b      	lsrs	r3, r3, #16
 8005298:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052a0:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80052a2:	429a      	cmp	r2, r3
 80052a4:	d108      	bne.n	80052b8 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	0e1b      	lsrs	r3, r3, #24
 80052aa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052b2:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80052b4:	429a      	cmp	r2, r3
 80052b6:	d001      	beq.n	80052bc <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 80052b8:	2301      	movs	r3, #1
 80052ba:	e000      	b.n	80052be <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 80052bc:	2300      	movs	r3, #0
}
 80052be:	4618      	mov	r0, r3
 80052c0:	3730      	adds	r7, #48	; 0x30
 80052c2:	46bd      	mov	sp, r7
 80052c4:	bd80      	pop	{r7, pc}
 80052c6:	bf00      	nop
 80052c8:	58024400 	.word	0x58024400

080052cc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b086      	sub	sp, #24
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
 80052d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d101      	bne.n	80052e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80052dc:	2301      	movs	r3, #1
 80052de:	e19c      	b.n	800561a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80052e0:	4b8a      	ldr	r3, [pc, #552]	; (800550c <HAL_RCC_ClockConfig+0x240>)
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f003 030f 	and.w	r3, r3, #15
 80052e8:	683a      	ldr	r2, [r7, #0]
 80052ea:	429a      	cmp	r2, r3
 80052ec:	d910      	bls.n	8005310 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052ee:	4b87      	ldr	r3, [pc, #540]	; (800550c <HAL_RCC_ClockConfig+0x240>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f023 020f 	bic.w	r2, r3, #15
 80052f6:	4985      	ldr	r1, [pc, #532]	; (800550c <HAL_RCC_ClockConfig+0x240>)
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	4313      	orrs	r3, r2
 80052fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80052fe:	4b83      	ldr	r3, [pc, #524]	; (800550c <HAL_RCC_ClockConfig+0x240>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f003 030f 	and.w	r3, r3, #15
 8005306:	683a      	ldr	r2, [r7, #0]
 8005308:	429a      	cmp	r2, r3
 800530a:	d001      	beq.n	8005310 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800530c:	2301      	movs	r3, #1
 800530e:	e184      	b.n	800561a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f003 0304 	and.w	r3, r3, #4
 8005318:	2b00      	cmp	r3, #0
 800531a:	d010      	beq.n	800533e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	691a      	ldr	r2, [r3, #16]
 8005320:	4b7b      	ldr	r3, [pc, #492]	; (8005510 <HAL_RCC_ClockConfig+0x244>)
 8005322:	699b      	ldr	r3, [r3, #24]
 8005324:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005328:	429a      	cmp	r2, r3
 800532a:	d908      	bls.n	800533e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800532c:	4b78      	ldr	r3, [pc, #480]	; (8005510 <HAL_RCC_ClockConfig+0x244>)
 800532e:	699b      	ldr	r3, [r3, #24]
 8005330:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	691b      	ldr	r3, [r3, #16]
 8005338:	4975      	ldr	r1, [pc, #468]	; (8005510 <HAL_RCC_ClockConfig+0x244>)
 800533a:	4313      	orrs	r3, r2
 800533c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f003 0308 	and.w	r3, r3, #8
 8005346:	2b00      	cmp	r3, #0
 8005348:	d010      	beq.n	800536c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	695a      	ldr	r2, [r3, #20]
 800534e:	4b70      	ldr	r3, [pc, #448]	; (8005510 <HAL_RCC_ClockConfig+0x244>)
 8005350:	69db      	ldr	r3, [r3, #28]
 8005352:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005356:	429a      	cmp	r2, r3
 8005358:	d908      	bls.n	800536c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800535a:	4b6d      	ldr	r3, [pc, #436]	; (8005510 <HAL_RCC_ClockConfig+0x244>)
 800535c:	69db      	ldr	r3, [r3, #28]
 800535e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	695b      	ldr	r3, [r3, #20]
 8005366:	496a      	ldr	r1, [pc, #424]	; (8005510 <HAL_RCC_ClockConfig+0x244>)
 8005368:	4313      	orrs	r3, r2
 800536a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f003 0310 	and.w	r3, r3, #16
 8005374:	2b00      	cmp	r3, #0
 8005376:	d010      	beq.n	800539a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	699a      	ldr	r2, [r3, #24]
 800537c:	4b64      	ldr	r3, [pc, #400]	; (8005510 <HAL_RCC_ClockConfig+0x244>)
 800537e:	69db      	ldr	r3, [r3, #28]
 8005380:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005384:	429a      	cmp	r2, r3
 8005386:	d908      	bls.n	800539a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005388:	4b61      	ldr	r3, [pc, #388]	; (8005510 <HAL_RCC_ClockConfig+0x244>)
 800538a:	69db      	ldr	r3, [r3, #28]
 800538c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	699b      	ldr	r3, [r3, #24]
 8005394:	495e      	ldr	r1, [pc, #376]	; (8005510 <HAL_RCC_ClockConfig+0x244>)
 8005396:	4313      	orrs	r3, r2
 8005398:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f003 0320 	and.w	r3, r3, #32
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d010      	beq.n	80053c8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	69da      	ldr	r2, [r3, #28]
 80053aa:	4b59      	ldr	r3, [pc, #356]	; (8005510 <HAL_RCC_ClockConfig+0x244>)
 80053ac:	6a1b      	ldr	r3, [r3, #32]
 80053ae:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80053b2:	429a      	cmp	r2, r3
 80053b4:	d908      	bls.n	80053c8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80053b6:	4b56      	ldr	r3, [pc, #344]	; (8005510 <HAL_RCC_ClockConfig+0x244>)
 80053b8:	6a1b      	ldr	r3, [r3, #32]
 80053ba:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	69db      	ldr	r3, [r3, #28]
 80053c2:	4953      	ldr	r1, [pc, #332]	; (8005510 <HAL_RCC_ClockConfig+0x244>)
 80053c4:	4313      	orrs	r3, r2
 80053c6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f003 0302 	and.w	r3, r3, #2
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d010      	beq.n	80053f6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	68da      	ldr	r2, [r3, #12]
 80053d8:	4b4d      	ldr	r3, [pc, #308]	; (8005510 <HAL_RCC_ClockConfig+0x244>)
 80053da:	699b      	ldr	r3, [r3, #24]
 80053dc:	f003 030f 	and.w	r3, r3, #15
 80053e0:	429a      	cmp	r2, r3
 80053e2:	d908      	bls.n	80053f6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80053e4:	4b4a      	ldr	r3, [pc, #296]	; (8005510 <HAL_RCC_ClockConfig+0x244>)
 80053e6:	699b      	ldr	r3, [r3, #24]
 80053e8:	f023 020f 	bic.w	r2, r3, #15
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	68db      	ldr	r3, [r3, #12]
 80053f0:	4947      	ldr	r1, [pc, #284]	; (8005510 <HAL_RCC_ClockConfig+0x244>)
 80053f2:	4313      	orrs	r3, r2
 80053f4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f003 0301 	and.w	r3, r3, #1
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d055      	beq.n	80054ae <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005402:	4b43      	ldr	r3, [pc, #268]	; (8005510 <HAL_RCC_ClockConfig+0x244>)
 8005404:	699b      	ldr	r3, [r3, #24]
 8005406:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	689b      	ldr	r3, [r3, #8]
 800540e:	4940      	ldr	r1, [pc, #256]	; (8005510 <HAL_RCC_ClockConfig+0x244>)
 8005410:	4313      	orrs	r3, r2
 8005412:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	685b      	ldr	r3, [r3, #4]
 8005418:	2b02      	cmp	r3, #2
 800541a:	d107      	bne.n	800542c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800541c:	4b3c      	ldr	r3, [pc, #240]	; (8005510 <HAL_RCC_ClockConfig+0x244>)
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005424:	2b00      	cmp	r3, #0
 8005426:	d121      	bne.n	800546c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005428:	2301      	movs	r3, #1
 800542a:	e0f6      	b.n	800561a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	685b      	ldr	r3, [r3, #4]
 8005430:	2b03      	cmp	r3, #3
 8005432:	d107      	bne.n	8005444 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005434:	4b36      	ldr	r3, [pc, #216]	; (8005510 <HAL_RCC_ClockConfig+0x244>)
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800543c:	2b00      	cmp	r3, #0
 800543e:	d115      	bne.n	800546c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005440:	2301      	movs	r3, #1
 8005442:	e0ea      	b.n	800561a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	685b      	ldr	r3, [r3, #4]
 8005448:	2b01      	cmp	r3, #1
 800544a:	d107      	bne.n	800545c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800544c:	4b30      	ldr	r3, [pc, #192]	; (8005510 <HAL_RCC_ClockConfig+0x244>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005454:	2b00      	cmp	r3, #0
 8005456:	d109      	bne.n	800546c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005458:	2301      	movs	r3, #1
 800545a:	e0de      	b.n	800561a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800545c:	4b2c      	ldr	r3, [pc, #176]	; (8005510 <HAL_RCC_ClockConfig+0x244>)
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f003 0304 	and.w	r3, r3, #4
 8005464:	2b00      	cmp	r3, #0
 8005466:	d101      	bne.n	800546c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005468:	2301      	movs	r3, #1
 800546a:	e0d6      	b.n	800561a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800546c:	4b28      	ldr	r3, [pc, #160]	; (8005510 <HAL_RCC_ClockConfig+0x244>)
 800546e:	691b      	ldr	r3, [r3, #16]
 8005470:	f023 0207 	bic.w	r2, r3, #7
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	685b      	ldr	r3, [r3, #4]
 8005478:	4925      	ldr	r1, [pc, #148]	; (8005510 <HAL_RCC_ClockConfig+0x244>)
 800547a:	4313      	orrs	r3, r2
 800547c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800547e:	f7fc f885 	bl	800158c <HAL_GetTick>
 8005482:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005484:	e00a      	b.n	800549c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005486:	f7fc f881 	bl	800158c <HAL_GetTick>
 800548a:	4602      	mov	r2, r0
 800548c:	697b      	ldr	r3, [r7, #20]
 800548e:	1ad3      	subs	r3, r2, r3
 8005490:	f241 3288 	movw	r2, #5000	; 0x1388
 8005494:	4293      	cmp	r3, r2
 8005496:	d901      	bls.n	800549c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8005498:	2303      	movs	r3, #3
 800549a:	e0be      	b.n	800561a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800549c:	4b1c      	ldr	r3, [pc, #112]	; (8005510 <HAL_RCC_ClockConfig+0x244>)
 800549e:	691b      	ldr	r3, [r3, #16]
 80054a0:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	685b      	ldr	r3, [r3, #4]
 80054a8:	00db      	lsls	r3, r3, #3
 80054aa:	429a      	cmp	r2, r3
 80054ac:	d1eb      	bne.n	8005486 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f003 0302 	and.w	r3, r3, #2
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d010      	beq.n	80054dc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	68da      	ldr	r2, [r3, #12]
 80054be:	4b14      	ldr	r3, [pc, #80]	; (8005510 <HAL_RCC_ClockConfig+0x244>)
 80054c0:	699b      	ldr	r3, [r3, #24]
 80054c2:	f003 030f 	and.w	r3, r3, #15
 80054c6:	429a      	cmp	r2, r3
 80054c8:	d208      	bcs.n	80054dc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80054ca:	4b11      	ldr	r3, [pc, #68]	; (8005510 <HAL_RCC_ClockConfig+0x244>)
 80054cc:	699b      	ldr	r3, [r3, #24]
 80054ce:	f023 020f 	bic.w	r2, r3, #15
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	68db      	ldr	r3, [r3, #12]
 80054d6:	490e      	ldr	r1, [pc, #56]	; (8005510 <HAL_RCC_ClockConfig+0x244>)
 80054d8:	4313      	orrs	r3, r2
 80054da:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80054dc:	4b0b      	ldr	r3, [pc, #44]	; (800550c <HAL_RCC_ClockConfig+0x240>)
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f003 030f 	and.w	r3, r3, #15
 80054e4:	683a      	ldr	r2, [r7, #0]
 80054e6:	429a      	cmp	r2, r3
 80054e8:	d214      	bcs.n	8005514 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054ea:	4b08      	ldr	r3, [pc, #32]	; (800550c <HAL_RCC_ClockConfig+0x240>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f023 020f 	bic.w	r2, r3, #15
 80054f2:	4906      	ldr	r1, [pc, #24]	; (800550c <HAL_RCC_ClockConfig+0x240>)
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	4313      	orrs	r3, r2
 80054f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80054fa:	4b04      	ldr	r3, [pc, #16]	; (800550c <HAL_RCC_ClockConfig+0x240>)
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f003 030f 	and.w	r3, r3, #15
 8005502:	683a      	ldr	r2, [r7, #0]
 8005504:	429a      	cmp	r2, r3
 8005506:	d005      	beq.n	8005514 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005508:	2301      	movs	r3, #1
 800550a:	e086      	b.n	800561a <HAL_RCC_ClockConfig+0x34e>
 800550c:	52002000 	.word	0x52002000
 8005510:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f003 0304 	and.w	r3, r3, #4
 800551c:	2b00      	cmp	r3, #0
 800551e:	d010      	beq.n	8005542 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	691a      	ldr	r2, [r3, #16]
 8005524:	4b3f      	ldr	r3, [pc, #252]	; (8005624 <HAL_RCC_ClockConfig+0x358>)
 8005526:	699b      	ldr	r3, [r3, #24]
 8005528:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800552c:	429a      	cmp	r2, r3
 800552e:	d208      	bcs.n	8005542 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005530:	4b3c      	ldr	r3, [pc, #240]	; (8005624 <HAL_RCC_ClockConfig+0x358>)
 8005532:	699b      	ldr	r3, [r3, #24]
 8005534:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	691b      	ldr	r3, [r3, #16]
 800553c:	4939      	ldr	r1, [pc, #228]	; (8005624 <HAL_RCC_ClockConfig+0x358>)
 800553e:	4313      	orrs	r3, r2
 8005540:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f003 0308 	and.w	r3, r3, #8
 800554a:	2b00      	cmp	r3, #0
 800554c:	d010      	beq.n	8005570 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	695a      	ldr	r2, [r3, #20]
 8005552:	4b34      	ldr	r3, [pc, #208]	; (8005624 <HAL_RCC_ClockConfig+0x358>)
 8005554:	69db      	ldr	r3, [r3, #28]
 8005556:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800555a:	429a      	cmp	r2, r3
 800555c:	d208      	bcs.n	8005570 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800555e:	4b31      	ldr	r3, [pc, #196]	; (8005624 <HAL_RCC_ClockConfig+0x358>)
 8005560:	69db      	ldr	r3, [r3, #28]
 8005562:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	695b      	ldr	r3, [r3, #20]
 800556a:	492e      	ldr	r1, [pc, #184]	; (8005624 <HAL_RCC_ClockConfig+0x358>)
 800556c:	4313      	orrs	r3, r2
 800556e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f003 0310 	and.w	r3, r3, #16
 8005578:	2b00      	cmp	r3, #0
 800557a:	d010      	beq.n	800559e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	699a      	ldr	r2, [r3, #24]
 8005580:	4b28      	ldr	r3, [pc, #160]	; (8005624 <HAL_RCC_ClockConfig+0x358>)
 8005582:	69db      	ldr	r3, [r3, #28]
 8005584:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005588:	429a      	cmp	r2, r3
 800558a:	d208      	bcs.n	800559e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800558c:	4b25      	ldr	r3, [pc, #148]	; (8005624 <HAL_RCC_ClockConfig+0x358>)
 800558e:	69db      	ldr	r3, [r3, #28]
 8005590:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	699b      	ldr	r3, [r3, #24]
 8005598:	4922      	ldr	r1, [pc, #136]	; (8005624 <HAL_RCC_ClockConfig+0x358>)
 800559a:	4313      	orrs	r3, r2
 800559c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f003 0320 	and.w	r3, r3, #32
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d010      	beq.n	80055cc <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	69da      	ldr	r2, [r3, #28]
 80055ae:	4b1d      	ldr	r3, [pc, #116]	; (8005624 <HAL_RCC_ClockConfig+0x358>)
 80055b0:	6a1b      	ldr	r3, [r3, #32]
 80055b2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80055b6:	429a      	cmp	r2, r3
 80055b8:	d208      	bcs.n	80055cc <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80055ba:	4b1a      	ldr	r3, [pc, #104]	; (8005624 <HAL_RCC_ClockConfig+0x358>)
 80055bc:	6a1b      	ldr	r3, [r3, #32]
 80055be:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	69db      	ldr	r3, [r3, #28]
 80055c6:	4917      	ldr	r1, [pc, #92]	; (8005624 <HAL_RCC_ClockConfig+0x358>)
 80055c8:	4313      	orrs	r3, r2
 80055ca:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80055cc:	f000 f834 	bl	8005638 <HAL_RCC_GetSysClockFreq>
 80055d0:	4602      	mov	r2, r0
 80055d2:	4b14      	ldr	r3, [pc, #80]	; (8005624 <HAL_RCC_ClockConfig+0x358>)
 80055d4:	699b      	ldr	r3, [r3, #24]
 80055d6:	0a1b      	lsrs	r3, r3, #8
 80055d8:	f003 030f 	and.w	r3, r3, #15
 80055dc:	4912      	ldr	r1, [pc, #72]	; (8005628 <HAL_RCC_ClockConfig+0x35c>)
 80055de:	5ccb      	ldrb	r3, [r1, r3]
 80055e0:	f003 031f 	and.w	r3, r3, #31
 80055e4:	fa22 f303 	lsr.w	r3, r2, r3
 80055e8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80055ea:	4b0e      	ldr	r3, [pc, #56]	; (8005624 <HAL_RCC_ClockConfig+0x358>)
 80055ec:	699b      	ldr	r3, [r3, #24]
 80055ee:	f003 030f 	and.w	r3, r3, #15
 80055f2:	4a0d      	ldr	r2, [pc, #52]	; (8005628 <HAL_RCC_ClockConfig+0x35c>)
 80055f4:	5cd3      	ldrb	r3, [r2, r3]
 80055f6:	f003 031f 	and.w	r3, r3, #31
 80055fa:	693a      	ldr	r2, [r7, #16]
 80055fc:	fa22 f303 	lsr.w	r3, r2, r3
 8005600:	4a0a      	ldr	r2, [pc, #40]	; (800562c <HAL_RCC_ClockConfig+0x360>)
 8005602:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005604:	4a0a      	ldr	r2, [pc, #40]	; (8005630 <HAL_RCC_ClockConfig+0x364>)
 8005606:	693b      	ldr	r3, [r7, #16]
 8005608:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800560a:	4b0a      	ldr	r3, [pc, #40]	; (8005634 <HAL_RCC_ClockConfig+0x368>)
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	4618      	mov	r0, r3
 8005610:	f7fb ff72 	bl	80014f8 <HAL_InitTick>
 8005614:	4603      	mov	r3, r0
 8005616:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005618:	7bfb      	ldrb	r3, [r7, #15]
}
 800561a:	4618      	mov	r0, r3
 800561c:	3718      	adds	r7, #24
 800561e:	46bd      	mov	sp, r7
 8005620:	bd80      	pop	{r7, pc}
 8005622:	bf00      	nop
 8005624:	58024400 	.word	0x58024400
 8005628:	0800cb28 	.word	0x0800cb28
 800562c:	24000404 	.word	0x24000404
 8005630:	24000400 	.word	0x24000400
 8005634:	24000408 	.word	0x24000408

08005638 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005638:	b480      	push	{r7}
 800563a:	b089      	sub	sp, #36	; 0x24
 800563c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800563e:	4bb3      	ldr	r3, [pc, #716]	; (800590c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005640:	691b      	ldr	r3, [r3, #16]
 8005642:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005646:	2b18      	cmp	r3, #24
 8005648:	f200 8155 	bhi.w	80058f6 <HAL_RCC_GetSysClockFreq+0x2be>
 800564c:	a201      	add	r2, pc, #4	; (adr r2, 8005654 <HAL_RCC_GetSysClockFreq+0x1c>)
 800564e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005652:	bf00      	nop
 8005654:	080056b9 	.word	0x080056b9
 8005658:	080058f7 	.word	0x080058f7
 800565c:	080058f7 	.word	0x080058f7
 8005660:	080058f7 	.word	0x080058f7
 8005664:	080058f7 	.word	0x080058f7
 8005668:	080058f7 	.word	0x080058f7
 800566c:	080058f7 	.word	0x080058f7
 8005670:	080058f7 	.word	0x080058f7
 8005674:	080056df 	.word	0x080056df
 8005678:	080058f7 	.word	0x080058f7
 800567c:	080058f7 	.word	0x080058f7
 8005680:	080058f7 	.word	0x080058f7
 8005684:	080058f7 	.word	0x080058f7
 8005688:	080058f7 	.word	0x080058f7
 800568c:	080058f7 	.word	0x080058f7
 8005690:	080058f7 	.word	0x080058f7
 8005694:	080056e5 	.word	0x080056e5
 8005698:	080058f7 	.word	0x080058f7
 800569c:	080058f7 	.word	0x080058f7
 80056a0:	080058f7 	.word	0x080058f7
 80056a4:	080058f7 	.word	0x080058f7
 80056a8:	080058f7 	.word	0x080058f7
 80056ac:	080058f7 	.word	0x080058f7
 80056b0:	080058f7 	.word	0x080058f7
 80056b4:	080056eb 	.word	0x080056eb
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80056b8:	4b94      	ldr	r3, [pc, #592]	; (800590c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f003 0320 	and.w	r3, r3, #32
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d009      	beq.n	80056d8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80056c4:	4b91      	ldr	r3, [pc, #580]	; (800590c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	08db      	lsrs	r3, r3, #3
 80056ca:	f003 0303 	and.w	r3, r3, #3
 80056ce:	4a90      	ldr	r2, [pc, #576]	; (8005910 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80056d0:	fa22 f303 	lsr.w	r3, r2, r3
 80056d4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80056d6:	e111      	b.n	80058fc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80056d8:	4b8d      	ldr	r3, [pc, #564]	; (8005910 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80056da:	61bb      	str	r3, [r7, #24]
    break;
 80056dc:	e10e      	b.n	80058fc <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80056de:	4b8d      	ldr	r3, [pc, #564]	; (8005914 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80056e0:	61bb      	str	r3, [r7, #24]
    break;
 80056e2:	e10b      	b.n	80058fc <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80056e4:	4b8c      	ldr	r3, [pc, #560]	; (8005918 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80056e6:	61bb      	str	r3, [r7, #24]
    break;
 80056e8:	e108      	b.n	80058fc <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80056ea:	4b88      	ldr	r3, [pc, #544]	; (800590c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80056ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056ee:	f003 0303 	and.w	r3, r3, #3
 80056f2:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80056f4:	4b85      	ldr	r3, [pc, #532]	; (800590c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80056f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056f8:	091b      	lsrs	r3, r3, #4
 80056fa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80056fe:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005700:	4b82      	ldr	r3, [pc, #520]	; (800590c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005704:	f003 0301 	and.w	r3, r3, #1
 8005708:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800570a:	4b80      	ldr	r3, [pc, #512]	; (800590c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800570c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800570e:	08db      	lsrs	r3, r3, #3
 8005710:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005714:	68fa      	ldr	r2, [r7, #12]
 8005716:	fb02 f303 	mul.w	r3, r2, r3
 800571a:	ee07 3a90 	vmov	s15, r3
 800571e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005722:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8005726:	693b      	ldr	r3, [r7, #16]
 8005728:	2b00      	cmp	r3, #0
 800572a:	f000 80e1 	beq.w	80058f0 <HAL_RCC_GetSysClockFreq+0x2b8>
 800572e:	697b      	ldr	r3, [r7, #20]
 8005730:	2b02      	cmp	r3, #2
 8005732:	f000 8083 	beq.w	800583c <HAL_RCC_GetSysClockFreq+0x204>
 8005736:	697b      	ldr	r3, [r7, #20]
 8005738:	2b02      	cmp	r3, #2
 800573a:	f200 80a1 	bhi.w	8005880 <HAL_RCC_GetSysClockFreq+0x248>
 800573e:	697b      	ldr	r3, [r7, #20]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d003      	beq.n	800574c <HAL_RCC_GetSysClockFreq+0x114>
 8005744:	697b      	ldr	r3, [r7, #20]
 8005746:	2b01      	cmp	r3, #1
 8005748:	d056      	beq.n	80057f8 <HAL_RCC_GetSysClockFreq+0x1c0>
 800574a:	e099      	b.n	8005880 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800574c:	4b6f      	ldr	r3, [pc, #444]	; (800590c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f003 0320 	and.w	r3, r3, #32
 8005754:	2b00      	cmp	r3, #0
 8005756:	d02d      	beq.n	80057b4 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005758:	4b6c      	ldr	r3, [pc, #432]	; (800590c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	08db      	lsrs	r3, r3, #3
 800575e:	f003 0303 	and.w	r3, r3, #3
 8005762:	4a6b      	ldr	r2, [pc, #428]	; (8005910 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005764:	fa22 f303 	lsr.w	r3, r2, r3
 8005768:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	ee07 3a90 	vmov	s15, r3
 8005770:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005774:	693b      	ldr	r3, [r7, #16]
 8005776:	ee07 3a90 	vmov	s15, r3
 800577a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800577e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005782:	4b62      	ldr	r3, [pc, #392]	; (800590c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005786:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800578a:	ee07 3a90 	vmov	s15, r3
 800578e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005792:	ed97 6a02 	vldr	s12, [r7, #8]
 8005796:	eddf 5a61 	vldr	s11, [pc, #388]	; 800591c <HAL_RCC_GetSysClockFreq+0x2e4>
 800579a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800579e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80057a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80057a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80057aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057ae:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80057b2:	e087      	b.n	80058c4 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80057b4:	693b      	ldr	r3, [r7, #16]
 80057b6:	ee07 3a90 	vmov	s15, r3
 80057ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057be:	eddf 6a58 	vldr	s13, [pc, #352]	; 8005920 <HAL_RCC_GetSysClockFreq+0x2e8>
 80057c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80057c6:	4b51      	ldr	r3, [pc, #324]	; (800590c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80057c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057ce:	ee07 3a90 	vmov	s15, r3
 80057d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057d6:	ed97 6a02 	vldr	s12, [r7, #8]
 80057da:	eddf 5a50 	vldr	s11, [pc, #320]	; 800591c <HAL_RCC_GetSysClockFreq+0x2e4>
 80057de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80057e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80057e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80057ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80057ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80057f6:	e065      	b.n	80058c4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80057f8:	693b      	ldr	r3, [r7, #16]
 80057fa:	ee07 3a90 	vmov	s15, r3
 80057fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005802:	eddf 6a48 	vldr	s13, [pc, #288]	; 8005924 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005806:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800580a:	4b40      	ldr	r3, [pc, #256]	; (800590c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800580c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800580e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005812:	ee07 3a90 	vmov	s15, r3
 8005816:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800581a:	ed97 6a02 	vldr	s12, [r7, #8]
 800581e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800591c <HAL_RCC_GetSysClockFreq+0x2e4>
 8005822:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005826:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800582a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800582e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005832:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005836:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800583a:	e043      	b.n	80058c4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800583c:	693b      	ldr	r3, [r7, #16]
 800583e:	ee07 3a90 	vmov	s15, r3
 8005842:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005846:	eddf 6a38 	vldr	s13, [pc, #224]	; 8005928 <HAL_RCC_GetSysClockFreq+0x2f0>
 800584a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800584e:	4b2f      	ldr	r3, [pc, #188]	; (800590c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005852:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005856:	ee07 3a90 	vmov	s15, r3
 800585a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800585e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005862:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800591c <HAL_RCC_GetSysClockFreq+0x2e4>
 8005866:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800586a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800586e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005872:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005876:	ee67 7a27 	vmul.f32	s15, s14, s15
 800587a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800587e:	e021      	b.n	80058c4 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005880:	693b      	ldr	r3, [r7, #16]
 8005882:	ee07 3a90 	vmov	s15, r3
 8005886:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800588a:	eddf 6a26 	vldr	s13, [pc, #152]	; 8005924 <HAL_RCC_GetSysClockFreq+0x2ec>
 800588e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005892:	4b1e      	ldr	r3, [pc, #120]	; (800590c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005896:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800589a:	ee07 3a90 	vmov	s15, r3
 800589e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058a2:	ed97 6a02 	vldr	s12, [r7, #8]
 80058a6:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800591c <HAL_RCC_GetSysClockFreq+0x2e4>
 80058aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80058ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80058b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80058b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80058ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80058c2:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80058c4:	4b11      	ldr	r3, [pc, #68]	; (800590c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80058c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058c8:	0a5b      	lsrs	r3, r3, #9
 80058ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80058ce:	3301      	adds	r3, #1
 80058d0:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	ee07 3a90 	vmov	s15, r3
 80058d8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80058dc:	edd7 6a07 	vldr	s13, [r7, #28]
 80058e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80058e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80058e8:	ee17 3a90 	vmov	r3, s15
 80058ec:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80058ee:	e005      	b.n	80058fc <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80058f0:	2300      	movs	r3, #0
 80058f2:	61bb      	str	r3, [r7, #24]
    break;
 80058f4:	e002      	b.n	80058fc <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80058f6:	4b07      	ldr	r3, [pc, #28]	; (8005914 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80058f8:	61bb      	str	r3, [r7, #24]
    break;
 80058fa:	bf00      	nop
  }

  return sysclockfreq;
 80058fc:	69bb      	ldr	r3, [r7, #24]
}
 80058fe:	4618      	mov	r0, r3
 8005900:	3724      	adds	r7, #36	; 0x24
 8005902:	46bd      	mov	sp, r7
 8005904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005908:	4770      	bx	lr
 800590a:	bf00      	nop
 800590c:	58024400 	.word	0x58024400
 8005910:	03d09000 	.word	0x03d09000
 8005914:	003d0900 	.word	0x003d0900
 8005918:	007a1200 	.word	0x007a1200
 800591c:	46000000 	.word	0x46000000
 8005920:	4c742400 	.word	0x4c742400
 8005924:	4a742400 	.word	0x4a742400
 8005928:	4af42400 	.word	0x4af42400

0800592c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800592c:	b580      	push	{r7, lr}
 800592e:	b082      	sub	sp, #8
 8005930:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005932:	f7ff fe81 	bl	8005638 <HAL_RCC_GetSysClockFreq>
 8005936:	4602      	mov	r2, r0
 8005938:	4b10      	ldr	r3, [pc, #64]	; (800597c <HAL_RCC_GetHCLKFreq+0x50>)
 800593a:	699b      	ldr	r3, [r3, #24]
 800593c:	0a1b      	lsrs	r3, r3, #8
 800593e:	f003 030f 	and.w	r3, r3, #15
 8005942:	490f      	ldr	r1, [pc, #60]	; (8005980 <HAL_RCC_GetHCLKFreq+0x54>)
 8005944:	5ccb      	ldrb	r3, [r1, r3]
 8005946:	f003 031f 	and.w	r3, r3, #31
 800594a:	fa22 f303 	lsr.w	r3, r2, r3
 800594e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005950:	4b0a      	ldr	r3, [pc, #40]	; (800597c <HAL_RCC_GetHCLKFreq+0x50>)
 8005952:	699b      	ldr	r3, [r3, #24]
 8005954:	f003 030f 	and.w	r3, r3, #15
 8005958:	4a09      	ldr	r2, [pc, #36]	; (8005980 <HAL_RCC_GetHCLKFreq+0x54>)
 800595a:	5cd3      	ldrb	r3, [r2, r3]
 800595c:	f003 031f 	and.w	r3, r3, #31
 8005960:	687a      	ldr	r2, [r7, #4]
 8005962:	fa22 f303 	lsr.w	r3, r2, r3
 8005966:	4a07      	ldr	r2, [pc, #28]	; (8005984 <HAL_RCC_GetHCLKFreq+0x58>)
 8005968:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800596a:	4a07      	ldr	r2, [pc, #28]	; (8005988 <HAL_RCC_GetHCLKFreq+0x5c>)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005970:	4b04      	ldr	r3, [pc, #16]	; (8005984 <HAL_RCC_GetHCLKFreq+0x58>)
 8005972:	681b      	ldr	r3, [r3, #0]
}
 8005974:	4618      	mov	r0, r3
 8005976:	3708      	adds	r7, #8
 8005978:	46bd      	mov	sp, r7
 800597a:	bd80      	pop	{r7, pc}
 800597c:	58024400 	.word	0x58024400
 8005980:	0800cb28 	.word	0x0800cb28
 8005984:	24000404 	.word	0x24000404
 8005988:	24000400 	.word	0x24000400

0800598c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800598c:	b580      	push	{r7, lr}
 800598e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005990:	f7ff ffcc 	bl	800592c <HAL_RCC_GetHCLKFreq>
 8005994:	4602      	mov	r2, r0
 8005996:	4b06      	ldr	r3, [pc, #24]	; (80059b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005998:	69db      	ldr	r3, [r3, #28]
 800599a:	091b      	lsrs	r3, r3, #4
 800599c:	f003 0307 	and.w	r3, r3, #7
 80059a0:	4904      	ldr	r1, [pc, #16]	; (80059b4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80059a2:	5ccb      	ldrb	r3, [r1, r3]
 80059a4:	f003 031f 	and.w	r3, r3, #31
 80059a8:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80059ac:	4618      	mov	r0, r3
 80059ae:	bd80      	pop	{r7, pc}
 80059b0:	58024400 	.word	0x58024400
 80059b4:	0800cb28 	.word	0x0800cb28

080059b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80059bc:	f7ff ffb6 	bl	800592c <HAL_RCC_GetHCLKFreq>
 80059c0:	4602      	mov	r2, r0
 80059c2:	4b06      	ldr	r3, [pc, #24]	; (80059dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80059c4:	69db      	ldr	r3, [r3, #28]
 80059c6:	0a1b      	lsrs	r3, r3, #8
 80059c8:	f003 0307 	and.w	r3, r3, #7
 80059cc:	4904      	ldr	r1, [pc, #16]	; (80059e0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80059ce:	5ccb      	ldrb	r3, [r1, r3]
 80059d0:	f003 031f 	and.w	r3, r3, #31
 80059d4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80059d8:	4618      	mov	r0, r3
 80059da:	bd80      	pop	{r7, pc}
 80059dc:	58024400 	.word	0x58024400
 80059e0:	0800cb28 	.word	0x0800cb28

080059e4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b086      	sub	sp, #24
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80059ec:	2300      	movs	r3, #0
 80059ee:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80059f0:	2300      	movs	r3, #0
 80059f2:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d03f      	beq.n	8005a80 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a04:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005a08:	d02a      	beq.n	8005a60 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8005a0a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005a0e:	d824      	bhi.n	8005a5a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005a10:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005a14:	d018      	beq.n	8005a48 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005a16:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005a1a:	d81e      	bhi.n	8005a5a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d003      	beq.n	8005a28 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005a20:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005a24:	d007      	beq.n	8005a36 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005a26:	e018      	b.n	8005a5a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a28:	4bab      	ldr	r3, [pc, #684]	; (8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a2c:	4aaa      	ldr	r2, [pc, #680]	; (8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005a2e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a32:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005a34:	e015      	b.n	8005a62 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	3304      	adds	r3, #4
 8005a3a:	2102      	movs	r1, #2
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	f001 fff3 	bl	8007a28 <RCCEx_PLL2_Config>
 8005a42:	4603      	mov	r3, r0
 8005a44:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005a46:	e00c      	b.n	8005a62 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	3324      	adds	r3, #36	; 0x24
 8005a4c:	2102      	movs	r1, #2
 8005a4e:	4618      	mov	r0, r3
 8005a50:	f002 f89c 	bl	8007b8c <RCCEx_PLL3_Config>
 8005a54:	4603      	mov	r3, r0
 8005a56:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005a58:	e003      	b.n	8005a62 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005a5a:	2301      	movs	r3, #1
 8005a5c:	75fb      	strb	r3, [r7, #23]
      break;
 8005a5e:	e000      	b.n	8005a62 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005a60:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005a62:	7dfb      	ldrb	r3, [r7, #23]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d109      	bne.n	8005a7c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005a68:	4b9b      	ldr	r3, [pc, #620]	; (8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005a6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a6c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a74:	4998      	ldr	r1, [pc, #608]	; (8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005a76:	4313      	orrs	r3, r2
 8005a78:	650b      	str	r3, [r1, #80]	; 0x50
 8005a7a:	e001      	b.n	8005a80 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a7c:	7dfb      	ldrb	r3, [r7, #23]
 8005a7e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d03d      	beq.n	8005b08 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a90:	2b04      	cmp	r3, #4
 8005a92:	d826      	bhi.n	8005ae2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8005a94:	a201      	add	r2, pc, #4	; (adr r2, 8005a9c <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8005a96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a9a:	bf00      	nop
 8005a9c:	08005ab1 	.word	0x08005ab1
 8005aa0:	08005abf 	.word	0x08005abf
 8005aa4:	08005ad1 	.word	0x08005ad1
 8005aa8:	08005ae9 	.word	0x08005ae9
 8005aac:	08005ae9 	.word	0x08005ae9
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ab0:	4b89      	ldr	r3, [pc, #548]	; (8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005ab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ab4:	4a88      	ldr	r2, [pc, #544]	; (8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005ab6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005aba:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005abc:	e015      	b.n	8005aea <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	3304      	adds	r3, #4
 8005ac2:	2100      	movs	r1, #0
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	f001 ffaf 	bl	8007a28 <RCCEx_PLL2_Config>
 8005aca:	4603      	mov	r3, r0
 8005acc:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005ace:	e00c      	b.n	8005aea <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	3324      	adds	r3, #36	; 0x24
 8005ad4:	2100      	movs	r1, #0
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	f002 f858 	bl	8007b8c <RCCEx_PLL3_Config>
 8005adc:	4603      	mov	r3, r0
 8005ade:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005ae0:	e003      	b.n	8005aea <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005ae2:	2301      	movs	r3, #1
 8005ae4:	75fb      	strb	r3, [r7, #23]
      break;
 8005ae6:	e000      	b.n	8005aea <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8005ae8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005aea:	7dfb      	ldrb	r3, [r7, #23]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d109      	bne.n	8005b04 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005af0:	4b79      	ldr	r3, [pc, #484]	; (8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005af2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005af4:	f023 0207 	bic.w	r2, r3, #7
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005afc:	4976      	ldr	r1, [pc, #472]	; (8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005afe:	4313      	orrs	r3, r2
 8005b00:	650b      	str	r3, [r1, #80]	; 0x50
 8005b02:	e001      	b.n	8005b08 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b04:	7dfb      	ldrb	r3, [r7, #23]
 8005b06:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d042      	beq.n	8005b9a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b18:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b1c:	d02b      	beq.n	8005b76 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8005b1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b22:	d825      	bhi.n	8005b70 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8005b24:	2bc0      	cmp	r3, #192	; 0xc0
 8005b26:	d028      	beq.n	8005b7a <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005b28:	2bc0      	cmp	r3, #192	; 0xc0
 8005b2a:	d821      	bhi.n	8005b70 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8005b2c:	2b80      	cmp	r3, #128	; 0x80
 8005b2e:	d016      	beq.n	8005b5e <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8005b30:	2b80      	cmp	r3, #128	; 0x80
 8005b32:	d81d      	bhi.n	8005b70 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d002      	beq.n	8005b3e <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8005b38:	2b40      	cmp	r3, #64	; 0x40
 8005b3a:	d007      	beq.n	8005b4c <HAL_RCCEx_PeriphCLKConfig+0x168>
 8005b3c:	e018      	b.n	8005b70 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b3e:	4b66      	ldr	r3, [pc, #408]	; (8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005b40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b42:	4a65      	ldr	r2, [pc, #404]	; (8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005b44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005b48:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8005b4a:	e017      	b.n	8005b7c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	3304      	adds	r3, #4
 8005b50:	2100      	movs	r1, #0
 8005b52:	4618      	mov	r0, r3
 8005b54:	f001 ff68 	bl	8007a28 <RCCEx_PLL2_Config>
 8005b58:	4603      	mov	r3, r0
 8005b5a:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8005b5c:	e00e      	b.n	8005b7c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	3324      	adds	r3, #36	; 0x24
 8005b62:	2100      	movs	r1, #0
 8005b64:	4618      	mov	r0, r3
 8005b66:	f002 f811 	bl	8007b8c <RCCEx_PLL3_Config>
 8005b6a:	4603      	mov	r3, r0
 8005b6c:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8005b6e:	e005      	b.n	8005b7c <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005b70:	2301      	movs	r3, #1
 8005b72:	75fb      	strb	r3, [r7, #23]
      break;
 8005b74:	e002      	b.n	8005b7c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8005b76:	bf00      	nop
 8005b78:	e000      	b.n	8005b7c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8005b7a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005b7c:	7dfb      	ldrb	r3, [r7, #23]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d109      	bne.n	8005b96 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8005b82:	4b55      	ldr	r3, [pc, #340]	; (8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005b84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b86:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b8e:	4952      	ldr	r1, [pc, #328]	; (8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005b90:	4313      	orrs	r3, r2
 8005b92:	650b      	str	r3, [r1, #80]	; 0x50
 8005b94:	e001      	b.n	8005b9a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b96:	7dfb      	ldrb	r3, [r7, #23]
 8005b98:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d049      	beq.n	8005c3a <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005bac:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005bb0:	d030      	beq.n	8005c14 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8005bb2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005bb6:	d82a      	bhi.n	8005c0e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005bb8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005bbc:	d02c      	beq.n	8005c18 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8005bbe:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005bc2:	d824      	bhi.n	8005c0e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005bc4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005bc8:	d018      	beq.n	8005bfc <HAL_RCCEx_PeriphCLKConfig+0x218>
 8005bca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005bce:	d81e      	bhi.n	8005c0e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d003      	beq.n	8005bdc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8005bd4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005bd8:	d007      	beq.n	8005bea <HAL_RCCEx_PeriphCLKConfig+0x206>
 8005bda:	e018      	b.n	8005c0e <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005bdc:	4b3e      	ldr	r3, [pc, #248]	; (8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005be0:	4a3d      	ldr	r2, [pc, #244]	; (8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005be2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005be6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005be8:	e017      	b.n	8005c1a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	3304      	adds	r3, #4
 8005bee:	2100      	movs	r1, #0
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	f001 ff19 	bl	8007a28 <RCCEx_PLL2_Config>
 8005bf6:	4603      	mov	r3, r0
 8005bf8:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8005bfa:	e00e      	b.n	8005c1a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	3324      	adds	r3, #36	; 0x24
 8005c00:	2100      	movs	r1, #0
 8005c02:	4618      	mov	r0, r3
 8005c04:	f001 ffc2 	bl	8007b8c <RCCEx_PLL3_Config>
 8005c08:	4603      	mov	r3, r0
 8005c0a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005c0c:	e005      	b.n	8005c1a <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8005c0e:	2301      	movs	r3, #1
 8005c10:	75fb      	strb	r3, [r7, #23]
      break;
 8005c12:	e002      	b.n	8005c1a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8005c14:	bf00      	nop
 8005c16:	e000      	b.n	8005c1a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8005c18:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005c1a:	7dfb      	ldrb	r3, [r7, #23]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d10a      	bne.n	8005c36 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005c20:	4b2d      	ldr	r3, [pc, #180]	; (8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005c22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c24:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005c2e:	492a      	ldr	r1, [pc, #168]	; (8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005c30:	4313      	orrs	r3, r2
 8005c32:	658b      	str	r3, [r1, #88]	; 0x58
 8005c34:	e001      	b.n	8005c3a <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c36:	7dfb      	ldrb	r3, [r7, #23]
 8005c38:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d04c      	beq.n	8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005c4c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005c50:	d030      	beq.n	8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8005c52:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005c56:	d82a      	bhi.n	8005cae <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8005c58:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005c5c:	d02c      	beq.n	8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8005c5e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005c62:	d824      	bhi.n	8005cae <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8005c64:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005c68:	d018      	beq.n	8005c9c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8005c6a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005c6e:	d81e      	bhi.n	8005cae <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d003      	beq.n	8005c7c <HAL_RCCEx_PeriphCLKConfig+0x298>
 8005c74:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005c78:	d007      	beq.n	8005c8a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8005c7a:	e018      	b.n	8005cae <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c7c:	4b16      	ldr	r3, [pc, #88]	; (8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005c7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c80:	4a15      	ldr	r2, [pc, #84]	; (8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005c82:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005c86:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005c88:	e017      	b.n	8005cba <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	3304      	adds	r3, #4
 8005c8e:	2100      	movs	r1, #0
 8005c90:	4618      	mov	r0, r3
 8005c92:	f001 fec9 	bl	8007a28 <RCCEx_PLL2_Config>
 8005c96:	4603      	mov	r3, r0
 8005c98:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8005c9a:	e00e      	b.n	8005cba <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	3324      	adds	r3, #36	; 0x24
 8005ca0:	2100      	movs	r1, #0
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	f001 ff72 	bl	8007b8c <RCCEx_PLL3_Config>
 8005ca8:	4603      	mov	r3, r0
 8005caa:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005cac:	e005      	b.n	8005cba <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8005cae:	2301      	movs	r3, #1
 8005cb0:	75fb      	strb	r3, [r7, #23]
      break;
 8005cb2:	e002      	b.n	8005cba <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8005cb4:	bf00      	nop
 8005cb6:	e000      	b.n	8005cba <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8005cb8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005cba:	7dfb      	ldrb	r3, [r7, #23]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d10d      	bne.n	8005cdc <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005cc0:	4b05      	ldr	r3, [pc, #20]	; (8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005cc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cc4:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005cce:	4902      	ldr	r1, [pc, #8]	; (8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005cd0:	4313      	orrs	r3, r2
 8005cd2:	658b      	str	r3, [r1, #88]	; 0x58
 8005cd4:	e004      	b.n	8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8005cd6:	bf00      	nop
 8005cd8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cdc:	7dfb      	ldrb	r3, [r7, #23]
 8005cde:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d032      	beq.n	8005d52 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005cf0:	2b30      	cmp	r3, #48	; 0x30
 8005cf2:	d01c      	beq.n	8005d2e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8005cf4:	2b30      	cmp	r3, #48	; 0x30
 8005cf6:	d817      	bhi.n	8005d28 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8005cf8:	2b20      	cmp	r3, #32
 8005cfa:	d00c      	beq.n	8005d16 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8005cfc:	2b20      	cmp	r3, #32
 8005cfe:	d813      	bhi.n	8005d28 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d016      	beq.n	8005d32 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8005d04:	2b10      	cmp	r3, #16
 8005d06:	d10f      	bne.n	8005d28 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d08:	4baf      	ldr	r3, [pc, #700]	; (8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d0c:	4aae      	ldr	r2, [pc, #696]	; (8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005d0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005d12:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8005d14:	e00e      	b.n	8005d34 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	3304      	adds	r3, #4
 8005d1a:	2102      	movs	r1, #2
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	f001 fe83 	bl	8007a28 <RCCEx_PLL2_Config>
 8005d22:	4603      	mov	r3, r0
 8005d24:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8005d26:	e005      	b.n	8005d34 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005d28:	2301      	movs	r3, #1
 8005d2a:	75fb      	strb	r3, [r7, #23]
      break;
 8005d2c:	e002      	b.n	8005d34 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8005d2e:	bf00      	nop
 8005d30:	e000      	b.n	8005d34 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8005d32:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005d34:	7dfb      	ldrb	r3, [r7, #23]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d109      	bne.n	8005d4e <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005d3a:	4ba3      	ldr	r3, [pc, #652]	; (8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005d3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d3e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d46:	49a0      	ldr	r1, [pc, #640]	; (8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005d48:	4313      	orrs	r3, r2
 8005d4a:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005d4c:	e001      	b.n	8005d52 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d4e:	7dfb      	ldrb	r3, [r7, #23]
 8005d50:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d047      	beq.n	8005dee <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d62:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005d66:	d030      	beq.n	8005dca <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8005d68:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005d6c:	d82a      	bhi.n	8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8005d6e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005d72:	d02c      	beq.n	8005dce <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8005d74:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005d78:	d824      	bhi.n	8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8005d7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d7e:	d018      	beq.n	8005db2 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8005d80:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d84:	d81e      	bhi.n	8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d003      	beq.n	8005d92 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8005d8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d8e:	d007      	beq.n	8005da0 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8005d90:	e018      	b.n	8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d92:	4b8d      	ldr	r3, [pc, #564]	; (8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005d94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d96:	4a8c      	ldr	r2, [pc, #560]	; (8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005d98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005d9c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005d9e:	e017      	b.n	8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	3304      	adds	r3, #4
 8005da4:	2100      	movs	r1, #0
 8005da6:	4618      	mov	r0, r3
 8005da8:	f001 fe3e 	bl	8007a28 <RCCEx_PLL2_Config>
 8005dac:	4603      	mov	r3, r0
 8005dae:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005db0:	e00e      	b.n	8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	3324      	adds	r3, #36	; 0x24
 8005db6:	2100      	movs	r1, #0
 8005db8:	4618      	mov	r0, r3
 8005dba:	f001 fee7 	bl	8007b8c <RCCEx_PLL3_Config>
 8005dbe:	4603      	mov	r3, r0
 8005dc0:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005dc2:	e005      	b.n	8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005dc4:	2301      	movs	r3, #1
 8005dc6:	75fb      	strb	r3, [r7, #23]
      break;
 8005dc8:	e002      	b.n	8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8005dca:	bf00      	nop
 8005dcc:	e000      	b.n	8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8005dce:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005dd0:	7dfb      	ldrb	r3, [r7, #23]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d109      	bne.n	8005dea <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005dd6:	4b7c      	ldr	r3, [pc, #496]	; (8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005dd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005dda:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005de2:	4979      	ldr	r1, [pc, #484]	; (8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005de4:	4313      	orrs	r3, r2
 8005de6:	650b      	str	r3, [r1, #80]	; 0x50
 8005de8:	e001      	b.n	8005dee <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005dea:	7dfb      	ldrb	r3, [r7, #23]
 8005dec:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d049      	beq.n	8005e8e <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005dfe:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005e02:	d02e      	beq.n	8005e62 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8005e04:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005e08:	d828      	bhi.n	8005e5c <HAL_RCCEx_PeriphCLKConfig+0x478>
 8005e0a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005e0e:	d02a      	beq.n	8005e66 <HAL_RCCEx_PeriphCLKConfig+0x482>
 8005e10:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005e14:	d822      	bhi.n	8005e5c <HAL_RCCEx_PeriphCLKConfig+0x478>
 8005e16:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005e1a:	d026      	beq.n	8005e6a <HAL_RCCEx_PeriphCLKConfig+0x486>
 8005e1c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005e20:	d81c      	bhi.n	8005e5c <HAL_RCCEx_PeriphCLKConfig+0x478>
 8005e22:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005e26:	d010      	beq.n	8005e4a <HAL_RCCEx_PeriphCLKConfig+0x466>
 8005e28:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005e2c:	d816      	bhi.n	8005e5c <HAL_RCCEx_PeriphCLKConfig+0x478>
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d01d      	beq.n	8005e6e <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8005e32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e36:	d111      	bne.n	8005e5c <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	3304      	adds	r3, #4
 8005e3c:	2101      	movs	r1, #1
 8005e3e:	4618      	mov	r0, r3
 8005e40:	f001 fdf2 	bl	8007a28 <RCCEx_PLL2_Config>
 8005e44:	4603      	mov	r3, r0
 8005e46:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8005e48:	e012      	b.n	8005e70 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	3324      	adds	r3, #36	; 0x24
 8005e4e:	2101      	movs	r1, #1
 8005e50:	4618      	mov	r0, r3
 8005e52:	f001 fe9b 	bl	8007b8c <RCCEx_PLL3_Config>
 8005e56:	4603      	mov	r3, r0
 8005e58:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8005e5a:	e009      	b.n	8005e70 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005e5c:	2301      	movs	r3, #1
 8005e5e:	75fb      	strb	r3, [r7, #23]
      break;
 8005e60:	e006      	b.n	8005e70 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8005e62:	bf00      	nop
 8005e64:	e004      	b.n	8005e70 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8005e66:	bf00      	nop
 8005e68:	e002      	b.n	8005e70 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8005e6a:	bf00      	nop
 8005e6c:	e000      	b.n	8005e70 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8005e6e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005e70:	7dfb      	ldrb	r3, [r7, #23]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d109      	bne.n	8005e8a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005e76:	4b54      	ldr	r3, [pc, #336]	; (8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005e78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e7a:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e82:	4951      	ldr	r1, [pc, #324]	; (8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005e84:	4313      	orrs	r3, r2
 8005e86:	650b      	str	r3, [r1, #80]	; 0x50
 8005e88:	e001      	b.n	8005e8e <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e8a:	7dfb      	ldrb	r3, [r7, #23]
 8005e8c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d04b      	beq.n	8005f32 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005ea0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005ea4:	d02e      	beq.n	8005f04 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8005ea6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005eaa:	d828      	bhi.n	8005efe <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8005eac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005eb0:	d02a      	beq.n	8005f08 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8005eb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005eb6:	d822      	bhi.n	8005efe <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8005eb8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005ebc:	d026      	beq.n	8005f0c <HAL_RCCEx_PeriphCLKConfig+0x528>
 8005ebe:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005ec2:	d81c      	bhi.n	8005efe <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8005ec4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005ec8:	d010      	beq.n	8005eec <HAL_RCCEx_PeriphCLKConfig+0x508>
 8005eca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005ece:	d816      	bhi.n	8005efe <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d01d      	beq.n	8005f10 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8005ed4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005ed8:	d111      	bne.n	8005efe <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	3304      	adds	r3, #4
 8005ede:	2101      	movs	r1, #1
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	f001 fda1 	bl	8007a28 <RCCEx_PLL2_Config>
 8005ee6:	4603      	mov	r3, r0
 8005ee8:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8005eea:	e012      	b.n	8005f12 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	3324      	adds	r3, #36	; 0x24
 8005ef0:	2101      	movs	r1, #1
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	f001 fe4a 	bl	8007b8c <RCCEx_PLL3_Config>
 8005ef8:	4603      	mov	r3, r0
 8005efa:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8005efc:	e009      	b.n	8005f12 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8005efe:	2301      	movs	r3, #1
 8005f00:	75fb      	strb	r3, [r7, #23]
      break;
 8005f02:	e006      	b.n	8005f12 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8005f04:	bf00      	nop
 8005f06:	e004      	b.n	8005f12 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8005f08:	bf00      	nop
 8005f0a:	e002      	b.n	8005f12 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8005f0c:	bf00      	nop
 8005f0e:	e000      	b.n	8005f12 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8005f10:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005f12:	7dfb      	ldrb	r3, [r7, #23]
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d10a      	bne.n	8005f2e <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005f18:	4b2b      	ldr	r3, [pc, #172]	; (8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005f1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f1c:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005f26:	4928      	ldr	r1, [pc, #160]	; (8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005f28:	4313      	orrs	r3, r2
 8005f2a:	658b      	str	r3, [r1, #88]	; 0x58
 8005f2c:	e001      	b.n	8005f32 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f2e:	7dfb      	ldrb	r3, [r7, #23]
 8005f30:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d02f      	beq.n	8005f9e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f42:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005f46:	d00e      	beq.n	8005f66 <HAL_RCCEx_PeriphCLKConfig+0x582>
 8005f48:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005f4c:	d814      	bhi.n	8005f78 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d015      	beq.n	8005f7e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8005f52:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005f56:	d10f      	bne.n	8005f78 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005f58:	4b1b      	ldr	r3, [pc, #108]	; (8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f5c:	4a1a      	ldr	r2, [pc, #104]	; (8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005f5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005f62:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8005f64:	e00c      	b.n	8005f80 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	3304      	adds	r3, #4
 8005f6a:	2101      	movs	r1, #1
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	f001 fd5b 	bl	8007a28 <RCCEx_PLL2_Config>
 8005f72:	4603      	mov	r3, r0
 8005f74:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8005f76:	e003      	b.n	8005f80 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005f78:	2301      	movs	r3, #1
 8005f7a:	75fb      	strb	r3, [r7, #23]
      break;
 8005f7c:	e000      	b.n	8005f80 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8005f7e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005f80:	7dfb      	ldrb	r3, [r7, #23]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d109      	bne.n	8005f9a <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005f86:	4b10      	ldr	r3, [pc, #64]	; (8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005f88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f8a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f92:	490d      	ldr	r1, [pc, #52]	; (8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005f94:	4313      	orrs	r3, r2
 8005f96:	650b      	str	r3, [r1, #80]	; 0x50
 8005f98:	e001      	b.n	8005f9e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f9a:	7dfb      	ldrb	r3, [r7, #23]
 8005f9c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d033      	beq.n	8006012 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fae:	2b03      	cmp	r3, #3
 8005fb0:	d81c      	bhi.n	8005fec <HAL_RCCEx_PeriphCLKConfig+0x608>
 8005fb2:	a201      	add	r2, pc, #4	; (adr r2, 8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8005fb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fb8:	08005ff3 	.word	0x08005ff3
 8005fbc:	08005fcd 	.word	0x08005fcd
 8005fc0:	08005fdb 	.word	0x08005fdb
 8005fc4:	08005ff3 	.word	0x08005ff3
 8005fc8:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005fcc:	4bb8      	ldr	r3, [pc, #736]	; (80062b0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005fce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fd0:	4ab7      	ldr	r2, [pc, #732]	; (80062b0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005fd2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005fd6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8005fd8:	e00c      	b.n	8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	3304      	adds	r3, #4
 8005fde:	2102      	movs	r1, #2
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	f001 fd21 	bl	8007a28 <RCCEx_PLL2_Config>
 8005fe6:	4603      	mov	r3, r0
 8005fe8:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8005fea:	e003      	b.n	8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005fec:	2301      	movs	r3, #1
 8005fee:	75fb      	strb	r3, [r7, #23]
      break;
 8005ff0:	e000      	b.n	8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8005ff2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005ff4:	7dfb      	ldrb	r3, [r7, #23]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d109      	bne.n	800600e <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005ffa:	4bad      	ldr	r3, [pc, #692]	; (80062b0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005ffc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ffe:	f023 0203 	bic.w	r2, r3, #3
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006006:	49aa      	ldr	r1, [pc, #680]	; (80062b0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006008:	4313      	orrs	r3, r2
 800600a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800600c:	e001      	b.n	8006012 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800600e:	7dfb      	ldrb	r3, [r7, #23]
 8006010:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800601a:	2b00      	cmp	r3, #0
 800601c:	f000 8086 	beq.w	800612c <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006020:	4ba4      	ldr	r3, [pc, #656]	; (80062b4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	4aa3      	ldr	r2, [pc, #652]	; (80062b4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8006026:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800602a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800602c:	f7fb faae 	bl	800158c <HAL_GetTick>
 8006030:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006032:	e009      	b.n	8006048 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006034:	f7fb faaa 	bl	800158c <HAL_GetTick>
 8006038:	4602      	mov	r2, r0
 800603a:	693b      	ldr	r3, [r7, #16]
 800603c:	1ad3      	subs	r3, r2, r3
 800603e:	2b64      	cmp	r3, #100	; 0x64
 8006040:	d902      	bls.n	8006048 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8006042:	2303      	movs	r3, #3
 8006044:	75fb      	strb	r3, [r7, #23]
        break;
 8006046:	e005      	b.n	8006054 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006048:	4b9a      	ldr	r3, [pc, #616]	; (80062b4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006050:	2b00      	cmp	r3, #0
 8006052:	d0ef      	beq.n	8006034 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8006054:	7dfb      	ldrb	r3, [r7, #23]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d166      	bne.n	8006128 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800605a:	4b95      	ldr	r3, [pc, #596]	; (80062b0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800605c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006064:	4053      	eors	r3, r2
 8006066:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800606a:	2b00      	cmp	r3, #0
 800606c:	d013      	beq.n	8006096 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800606e:	4b90      	ldr	r3, [pc, #576]	; (80062b0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006070:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006072:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006076:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006078:	4b8d      	ldr	r3, [pc, #564]	; (80062b0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800607a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800607c:	4a8c      	ldr	r2, [pc, #560]	; (80062b0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800607e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006082:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006084:	4b8a      	ldr	r3, [pc, #552]	; (80062b0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006086:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006088:	4a89      	ldr	r2, [pc, #548]	; (80062b0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800608a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800608e:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006090:	4a87      	ldr	r2, [pc, #540]	; (80062b0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800609c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80060a0:	d115      	bne.n	80060ce <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060a2:	f7fb fa73 	bl	800158c <HAL_GetTick>
 80060a6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80060a8:	e00b      	b.n	80060c2 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80060aa:	f7fb fa6f 	bl	800158c <HAL_GetTick>
 80060ae:	4602      	mov	r2, r0
 80060b0:	693b      	ldr	r3, [r7, #16]
 80060b2:	1ad3      	subs	r3, r2, r3
 80060b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80060b8:	4293      	cmp	r3, r2
 80060ba:	d902      	bls.n	80060c2 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 80060bc:	2303      	movs	r3, #3
 80060be:	75fb      	strb	r3, [r7, #23]
            break;
 80060c0:	e005      	b.n	80060ce <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80060c2:	4b7b      	ldr	r3, [pc, #492]	; (80062b0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80060c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060c6:	f003 0302 	and.w	r3, r3, #2
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d0ed      	beq.n	80060aa <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 80060ce:	7dfb      	ldrb	r3, [r7, #23]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d126      	bne.n	8006122 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80060da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80060de:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80060e2:	d10d      	bne.n	8006100 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 80060e4:	4b72      	ldr	r3, [pc, #456]	; (80062b0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80060e6:	691b      	ldr	r3, [r3, #16]
 80060e8:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80060f2:	0919      	lsrs	r1, r3, #4
 80060f4:	4b70      	ldr	r3, [pc, #448]	; (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 80060f6:	400b      	ands	r3, r1
 80060f8:	496d      	ldr	r1, [pc, #436]	; (80062b0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80060fa:	4313      	orrs	r3, r2
 80060fc:	610b      	str	r3, [r1, #16]
 80060fe:	e005      	b.n	800610c <HAL_RCCEx_PeriphCLKConfig+0x728>
 8006100:	4b6b      	ldr	r3, [pc, #428]	; (80062b0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006102:	691b      	ldr	r3, [r3, #16]
 8006104:	4a6a      	ldr	r2, [pc, #424]	; (80062b0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006106:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800610a:	6113      	str	r3, [r2, #16]
 800610c:	4b68      	ldr	r3, [pc, #416]	; (80062b0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800610e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006116:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800611a:	4965      	ldr	r1, [pc, #404]	; (80062b0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800611c:	4313      	orrs	r3, r2
 800611e:	670b      	str	r3, [r1, #112]	; 0x70
 8006120:	e004      	b.n	800612c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006122:	7dfb      	ldrb	r3, [r7, #23]
 8006124:	75bb      	strb	r3, [r7, #22]
 8006126:	e001      	b.n	800612c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006128:	7dfb      	ldrb	r3, [r7, #23]
 800612a:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f003 0301 	and.w	r3, r3, #1
 8006134:	2b00      	cmp	r3, #0
 8006136:	d07e      	beq.n	8006236 <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800613c:	2b28      	cmp	r3, #40	; 0x28
 800613e:	d867      	bhi.n	8006210 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8006140:	a201      	add	r2, pc, #4	; (adr r2, 8006148 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8006142:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006146:	bf00      	nop
 8006148:	08006217 	.word	0x08006217
 800614c:	08006211 	.word	0x08006211
 8006150:	08006211 	.word	0x08006211
 8006154:	08006211 	.word	0x08006211
 8006158:	08006211 	.word	0x08006211
 800615c:	08006211 	.word	0x08006211
 8006160:	08006211 	.word	0x08006211
 8006164:	08006211 	.word	0x08006211
 8006168:	080061ed 	.word	0x080061ed
 800616c:	08006211 	.word	0x08006211
 8006170:	08006211 	.word	0x08006211
 8006174:	08006211 	.word	0x08006211
 8006178:	08006211 	.word	0x08006211
 800617c:	08006211 	.word	0x08006211
 8006180:	08006211 	.word	0x08006211
 8006184:	08006211 	.word	0x08006211
 8006188:	080061ff 	.word	0x080061ff
 800618c:	08006211 	.word	0x08006211
 8006190:	08006211 	.word	0x08006211
 8006194:	08006211 	.word	0x08006211
 8006198:	08006211 	.word	0x08006211
 800619c:	08006211 	.word	0x08006211
 80061a0:	08006211 	.word	0x08006211
 80061a4:	08006211 	.word	0x08006211
 80061a8:	08006217 	.word	0x08006217
 80061ac:	08006211 	.word	0x08006211
 80061b0:	08006211 	.word	0x08006211
 80061b4:	08006211 	.word	0x08006211
 80061b8:	08006211 	.word	0x08006211
 80061bc:	08006211 	.word	0x08006211
 80061c0:	08006211 	.word	0x08006211
 80061c4:	08006211 	.word	0x08006211
 80061c8:	08006217 	.word	0x08006217
 80061cc:	08006211 	.word	0x08006211
 80061d0:	08006211 	.word	0x08006211
 80061d4:	08006211 	.word	0x08006211
 80061d8:	08006211 	.word	0x08006211
 80061dc:	08006211 	.word	0x08006211
 80061e0:	08006211 	.word	0x08006211
 80061e4:	08006211 	.word	0x08006211
 80061e8:	08006217 	.word	0x08006217
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	3304      	adds	r3, #4
 80061f0:	2101      	movs	r1, #1
 80061f2:	4618      	mov	r0, r3
 80061f4:	f001 fc18 	bl	8007a28 <RCCEx_PLL2_Config>
 80061f8:	4603      	mov	r3, r0
 80061fa:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80061fc:	e00c      	b.n	8006218 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	3324      	adds	r3, #36	; 0x24
 8006202:	2101      	movs	r1, #1
 8006204:	4618      	mov	r0, r3
 8006206:	f001 fcc1 	bl	8007b8c <RCCEx_PLL3_Config>
 800620a:	4603      	mov	r3, r0
 800620c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800620e:	e003      	b.n	8006218 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006210:	2301      	movs	r3, #1
 8006212:	75fb      	strb	r3, [r7, #23]
      break;
 8006214:	e000      	b.n	8006218 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 8006216:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006218:	7dfb      	ldrb	r3, [r7, #23]
 800621a:	2b00      	cmp	r3, #0
 800621c:	d109      	bne.n	8006232 <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800621e:	4b24      	ldr	r3, [pc, #144]	; (80062b0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006220:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006222:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800622a:	4921      	ldr	r1, [pc, #132]	; (80062b0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800622c:	4313      	orrs	r3, r2
 800622e:	654b      	str	r3, [r1, #84]	; 0x54
 8006230:	e001      	b.n	8006236 <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006232:	7dfb      	ldrb	r3, [r7, #23]
 8006234:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f003 0302 	and.w	r3, r3, #2
 800623e:	2b00      	cmp	r3, #0
 8006240:	d03e      	beq.n	80062c0 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006246:	2b05      	cmp	r3, #5
 8006248:	d820      	bhi.n	800628c <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 800624a:	a201      	add	r2, pc, #4	; (adr r2, 8006250 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 800624c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006250:	08006293 	.word	0x08006293
 8006254:	08006269 	.word	0x08006269
 8006258:	0800627b 	.word	0x0800627b
 800625c:	08006293 	.word	0x08006293
 8006260:	08006293 	.word	0x08006293
 8006264:	08006293 	.word	0x08006293
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	3304      	adds	r3, #4
 800626c:	2101      	movs	r1, #1
 800626e:	4618      	mov	r0, r3
 8006270:	f001 fbda 	bl	8007a28 <RCCEx_PLL2_Config>
 8006274:	4603      	mov	r3, r0
 8006276:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006278:	e00c      	b.n	8006294 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	3324      	adds	r3, #36	; 0x24
 800627e:	2101      	movs	r1, #1
 8006280:	4618      	mov	r0, r3
 8006282:	f001 fc83 	bl	8007b8c <RCCEx_PLL3_Config>
 8006286:	4603      	mov	r3, r0
 8006288:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800628a:	e003      	b.n	8006294 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800628c:	2301      	movs	r3, #1
 800628e:	75fb      	strb	r3, [r7, #23]
      break;
 8006290:	e000      	b.n	8006294 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 8006292:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006294:	7dfb      	ldrb	r3, [r7, #23]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d110      	bne.n	80062bc <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800629a:	4b05      	ldr	r3, [pc, #20]	; (80062b0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800629c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800629e:	f023 0207 	bic.w	r2, r3, #7
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80062a6:	4902      	ldr	r1, [pc, #8]	; (80062b0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80062a8:	4313      	orrs	r3, r2
 80062aa:	654b      	str	r3, [r1, #84]	; 0x54
 80062ac:	e008      	b.n	80062c0 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 80062ae:	bf00      	nop
 80062b0:	58024400 	.word	0x58024400
 80062b4:	58024800 	.word	0x58024800
 80062b8:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062bc:	7dfb      	ldrb	r3, [r7, #23]
 80062be:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f003 0304 	and.w	r3, r3, #4
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d039      	beq.n	8006340 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062d2:	2b05      	cmp	r3, #5
 80062d4:	d820      	bhi.n	8006318 <HAL_RCCEx_PeriphCLKConfig+0x934>
 80062d6:	a201      	add	r2, pc, #4	; (adr r2, 80062dc <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 80062d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062dc:	0800631f 	.word	0x0800631f
 80062e0:	080062f5 	.word	0x080062f5
 80062e4:	08006307 	.word	0x08006307
 80062e8:	0800631f 	.word	0x0800631f
 80062ec:	0800631f 	.word	0x0800631f
 80062f0:	0800631f 	.word	0x0800631f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	3304      	adds	r3, #4
 80062f8:	2101      	movs	r1, #1
 80062fa:	4618      	mov	r0, r3
 80062fc:	f001 fb94 	bl	8007a28 <RCCEx_PLL2_Config>
 8006300:	4603      	mov	r3, r0
 8006302:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006304:	e00c      	b.n	8006320 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	3324      	adds	r3, #36	; 0x24
 800630a:	2101      	movs	r1, #1
 800630c:	4618      	mov	r0, r3
 800630e:	f001 fc3d 	bl	8007b8c <RCCEx_PLL3_Config>
 8006312:	4603      	mov	r3, r0
 8006314:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006316:	e003      	b.n	8006320 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006318:	2301      	movs	r3, #1
 800631a:	75fb      	strb	r3, [r7, #23]
      break;
 800631c:	e000      	b.n	8006320 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 800631e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006320:	7dfb      	ldrb	r3, [r7, #23]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d10a      	bne.n	800633c <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006326:	4bb7      	ldr	r3, [pc, #732]	; (8006604 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006328:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800632a:	f023 0207 	bic.w	r2, r3, #7
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006334:	49b3      	ldr	r1, [pc, #716]	; (8006604 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006336:	4313      	orrs	r3, r2
 8006338:	658b      	str	r3, [r1, #88]	; 0x58
 800633a:	e001      	b.n	8006340 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800633c:	7dfb      	ldrb	r3, [r7, #23]
 800633e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f003 0320 	and.w	r3, r3, #32
 8006348:	2b00      	cmp	r3, #0
 800634a:	d04b      	beq.n	80063e4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006352:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006356:	d02e      	beq.n	80063b6 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8006358:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800635c:	d828      	bhi.n	80063b0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800635e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006362:	d02a      	beq.n	80063ba <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8006364:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006368:	d822      	bhi.n	80063b0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800636a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800636e:	d026      	beq.n	80063be <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8006370:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006374:	d81c      	bhi.n	80063b0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8006376:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800637a:	d010      	beq.n	800639e <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 800637c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006380:	d816      	bhi.n	80063b0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8006382:	2b00      	cmp	r3, #0
 8006384:	d01d      	beq.n	80063c2 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8006386:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800638a:	d111      	bne.n	80063b0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	3304      	adds	r3, #4
 8006390:	2100      	movs	r1, #0
 8006392:	4618      	mov	r0, r3
 8006394:	f001 fb48 	bl	8007a28 <RCCEx_PLL2_Config>
 8006398:	4603      	mov	r3, r0
 800639a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800639c:	e012      	b.n	80063c4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	3324      	adds	r3, #36	; 0x24
 80063a2:	2102      	movs	r1, #2
 80063a4:	4618      	mov	r0, r3
 80063a6:	f001 fbf1 	bl	8007b8c <RCCEx_PLL3_Config>
 80063aa:	4603      	mov	r3, r0
 80063ac:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80063ae:	e009      	b.n	80063c4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80063b0:	2301      	movs	r3, #1
 80063b2:	75fb      	strb	r3, [r7, #23]
      break;
 80063b4:	e006      	b.n	80063c4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80063b6:	bf00      	nop
 80063b8:	e004      	b.n	80063c4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80063ba:	bf00      	nop
 80063bc:	e002      	b.n	80063c4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80063be:	bf00      	nop
 80063c0:	e000      	b.n	80063c4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80063c2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80063c4:	7dfb      	ldrb	r3, [r7, #23]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d10a      	bne.n	80063e0 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80063ca:	4b8e      	ldr	r3, [pc, #568]	; (8006604 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80063cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063ce:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80063d8:	498a      	ldr	r1, [pc, #552]	; (8006604 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80063da:	4313      	orrs	r3, r2
 80063dc:	654b      	str	r3, [r1, #84]	; 0x54
 80063de:	e001      	b.n	80063e4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063e0:	7dfb      	ldrb	r3, [r7, #23]
 80063e2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d04b      	beq.n	8006488 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80063f6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80063fa:	d02e      	beq.n	800645a <HAL_RCCEx_PeriphCLKConfig+0xa76>
 80063fc:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006400:	d828      	bhi.n	8006454 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8006402:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006406:	d02a      	beq.n	800645e <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8006408:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800640c:	d822      	bhi.n	8006454 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800640e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006412:	d026      	beq.n	8006462 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8006414:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006418:	d81c      	bhi.n	8006454 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800641a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800641e:	d010      	beq.n	8006442 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8006420:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006424:	d816      	bhi.n	8006454 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8006426:	2b00      	cmp	r3, #0
 8006428:	d01d      	beq.n	8006466 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800642a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800642e:	d111      	bne.n	8006454 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	3304      	adds	r3, #4
 8006434:	2100      	movs	r1, #0
 8006436:	4618      	mov	r0, r3
 8006438:	f001 faf6 	bl	8007a28 <RCCEx_PLL2_Config>
 800643c:	4603      	mov	r3, r0
 800643e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006440:	e012      	b.n	8006468 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	3324      	adds	r3, #36	; 0x24
 8006446:	2102      	movs	r1, #2
 8006448:	4618      	mov	r0, r3
 800644a:	f001 fb9f 	bl	8007b8c <RCCEx_PLL3_Config>
 800644e:	4603      	mov	r3, r0
 8006450:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006452:	e009      	b.n	8006468 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006454:	2301      	movs	r3, #1
 8006456:	75fb      	strb	r3, [r7, #23]
      break;
 8006458:	e006      	b.n	8006468 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800645a:	bf00      	nop
 800645c:	e004      	b.n	8006468 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800645e:	bf00      	nop
 8006460:	e002      	b.n	8006468 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8006462:	bf00      	nop
 8006464:	e000      	b.n	8006468 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8006466:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006468:	7dfb      	ldrb	r3, [r7, #23]
 800646a:	2b00      	cmp	r3, #0
 800646c:	d10a      	bne.n	8006484 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800646e:	4b65      	ldr	r3, [pc, #404]	; (8006604 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006470:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006472:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800647c:	4961      	ldr	r1, [pc, #388]	; (8006604 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800647e:	4313      	orrs	r3, r2
 8006480:	658b      	str	r3, [r1, #88]	; 0x58
 8006482:	e001      	b.n	8006488 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006484:	7dfb      	ldrb	r3, [r7, #23]
 8006486:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006490:	2b00      	cmp	r3, #0
 8006492:	d04b      	beq.n	800652c <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800649a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800649e:	d02e      	beq.n	80064fe <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 80064a0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80064a4:	d828      	bhi.n	80064f8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80064a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80064aa:	d02a      	beq.n	8006502 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 80064ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80064b0:	d822      	bhi.n	80064f8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80064b2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80064b6:	d026      	beq.n	8006506 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 80064b8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80064bc:	d81c      	bhi.n	80064f8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80064be:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80064c2:	d010      	beq.n	80064e6 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 80064c4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80064c8:	d816      	bhi.n	80064f8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d01d      	beq.n	800650a <HAL_RCCEx_PeriphCLKConfig+0xb26>
 80064ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80064d2:	d111      	bne.n	80064f8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	3304      	adds	r3, #4
 80064d8:	2100      	movs	r1, #0
 80064da:	4618      	mov	r0, r3
 80064dc:	f001 faa4 	bl	8007a28 <RCCEx_PLL2_Config>
 80064e0:	4603      	mov	r3, r0
 80064e2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80064e4:	e012      	b.n	800650c <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	3324      	adds	r3, #36	; 0x24
 80064ea:	2102      	movs	r1, #2
 80064ec:	4618      	mov	r0, r3
 80064ee:	f001 fb4d 	bl	8007b8c <RCCEx_PLL3_Config>
 80064f2:	4603      	mov	r3, r0
 80064f4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80064f6:	e009      	b.n	800650c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80064f8:	2301      	movs	r3, #1
 80064fa:	75fb      	strb	r3, [r7, #23]
      break;
 80064fc:	e006      	b.n	800650c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80064fe:	bf00      	nop
 8006500:	e004      	b.n	800650c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8006502:	bf00      	nop
 8006504:	e002      	b.n	800650c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8006506:	bf00      	nop
 8006508:	e000      	b.n	800650c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800650a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800650c:	7dfb      	ldrb	r3, [r7, #23]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d10a      	bne.n	8006528 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006512:	4b3c      	ldr	r3, [pc, #240]	; (8006604 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006514:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006516:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006520:	4938      	ldr	r1, [pc, #224]	; (8006604 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006522:	4313      	orrs	r3, r2
 8006524:	658b      	str	r3, [r1, #88]	; 0x58
 8006526:	e001      	b.n	800652c <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006528:	7dfb      	ldrb	r3, [r7, #23]
 800652a:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	f003 0308 	and.w	r3, r3, #8
 8006534:	2b00      	cmp	r3, #0
 8006536:	d01a      	beq.n	800656e <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800653e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006542:	d10a      	bne.n	800655a <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	3324      	adds	r3, #36	; 0x24
 8006548:	2102      	movs	r1, #2
 800654a:	4618      	mov	r0, r3
 800654c:	f001 fb1e 	bl	8007b8c <RCCEx_PLL3_Config>
 8006550:	4603      	mov	r3, r0
 8006552:	2b00      	cmp	r3, #0
 8006554:	d001      	beq.n	800655a <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8006556:	2301      	movs	r3, #1
 8006558:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800655a:	4b2a      	ldr	r3, [pc, #168]	; (8006604 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800655c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800655e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006568:	4926      	ldr	r1, [pc, #152]	; (8006604 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800656a:	4313      	orrs	r3, r2
 800656c:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	f003 0310 	and.w	r3, r3, #16
 8006576:	2b00      	cmp	r3, #0
 8006578:	d01a      	beq.n	80065b0 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006580:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006584:	d10a      	bne.n	800659c <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	3324      	adds	r3, #36	; 0x24
 800658a:	2102      	movs	r1, #2
 800658c:	4618      	mov	r0, r3
 800658e:	f001 fafd 	bl	8007b8c <RCCEx_PLL3_Config>
 8006592:	4603      	mov	r3, r0
 8006594:	2b00      	cmp	r3, #0
 8006596:	d001      	beq.n	800659c <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8006598:	2301      	movs	r3, #1
 800659a:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800659c:	4b19      	ldr	r3, [pc, #100]	; (8006604 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800659e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065a0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80065aa:	4916      	ldr	r1, [pc, #88]	; (8006604 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80065ac:	4313      	orrs	r3, r2
 80065ae:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d036      	beq.n	800662a <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80065c2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80065c6:	d01f      	beq.n	8006608 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 80065c8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80065cc:	d817      	bhi.n	80065fe <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d003      	beq.n	80065da <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 80065d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80065d6:	d009      	beq.n	80065ec <HAL_RCCEx_PeriphCLKConfig+0xc08>
 80065d8:	e011      	b.n	80065fe <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	3304      	adds	r3, #4
 80065de:	2100      	movs	r1, #0
 80065e0:	4618      	mov	r0, r3
 80065e2:	f001 fa21 	bl	8007a28 <RCCEx_PLL2_Config>
 80065e6:	4603      	mov	r3, r0
 80065e8:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80065ea:	e00e      	b.n	800660a <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	3324      	adds	r3, #36	; 0x24
 80065f0:	2102      	movs	r1, #2
 80065f2:	4618      	mov	r0, r3
 80065f4:	f001 faca 	bl	8007b8c <RCCEx_PLL3_Config>
 80065f8:	4603      	mov	r3, r0
 80065fa:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80065fc:	e005      	b.n	800660a <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80065fe:	2301      	movs	r3, #1
 8006600:	75fb      	strb	r3, [r7, #23]
      break;
 8006602:	e002      	b.n	800660a <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8006604:	58024400 	.word	0x58024400
      break;
 8006608:	bf00      	nop
    }

    if(ret == HAL_OK)
 800660a:	7dfb      	ldrb	r3, [r7, #23]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d10a      	bne.n	8006626 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006610:	4b93      	ldr	r3, [pc, #588]	; (8006860 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006612:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006614:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800661e:	4990      	ldr	r1, [pc, #576]	; (8006860 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006620:	4313      	orrs	r3, r2
 8006622:	658b      	str	r3, [r1, #88]	; 0x58
 8006624:	e001      	b.n	800662a <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006626:	7dfb      	ldrb	r3, [r7, #23]
 8006628:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006632:	2b00      	cmp	r3, #0
 8006634:	d033      	beq.n	800669e <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800663c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006640:	d01c      	beq.n	800667c <HAL_RCCEx_PeriphCLKConfig+0xc98>
 8006642:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006646:	d816      	bhi.n	8006676 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8006648:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800664c:	d003      	beq.n	8006656 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 800664e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006652:	d007      	beq.n	8006664 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8006654:	e00f      	b.n	8006676 <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006656:	4b82      	ldr	r3, [pc, #520]	; (8006860 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006658:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800665a:	4a81      	ldr	r2, [pc, #516]	; (8006860 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800665c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006660:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8006662:	e00c      	b.n	800667e <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	3324      	adds	r3, #36	; 0x24
 8006668:	2101      	movs	r1, #1
 800666a:	4618      	mov	r0, r3
 800666c:	f001 fa8e 	bl	8007b8c <RCCEx_PLL3_Config>
 8006670:	4603      	mov	r3, r0
 8006672:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8006674:	e003      	b.n	800667e <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006676:	2301      	movs	r3, #1
 8006678:	75fb      	strb	r3, [r7, #23]
      break;
 800667a:	e000      	b.n	800667e <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 800667c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800667e:	7dfb      	ldrb	r3, [r7, #23]
 8006680:	2b00      	cmp	r3, #0
 8006682:	d10a      	bne.n	800669a <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006684:	4b76      	ldr	r3, [pc, #472]	; (8006860 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006686:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006688:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006692:	4973      	ldr	r1, [pc, #460]	; (8006860 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006694:	4313      	orrs	r3, r2
 8006696:	654b      	str	r3, [r1, #84]	; 0x54
 8006698:	e001      	b.n	800669e <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800669a:	7dfb      	ldrb	r3, [r7, #23]
 800669c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d029      	beq.n	80066fe <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d003      	beq.n	80066ba <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 80066b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80066b6:	d007      	beq.n	80066c8 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 80066b8:	e00f      	b.n	80066da <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80066ba:	4b69      	ldr	r3, [pc, #420]	; (8006860 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80066bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066be:	4a68      	ldr	r2, [pc, #416]	; (8006860 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80066c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80066c4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80066c6:	e00b      	b.n	80066e0 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	3304      	adds	r3, #4
 80066cc:	2102      	movs	r1, #2
 80066ce:	4618      	mov	r0, r3
 80066d0:	f001 f9aa 	bl	8007a28 <RCCEx_PLL2_Config>
 80066d4:	4603      	mov	r3, r0
 80066d6:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80066d8:	e002      	b.n	80066e0 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 80066da:	2301      	movs	r3, #1
 80066dc:	75fb      	strb	r3, [r7, #23]
      break;
 80066de:	bf00      	nop
    }

    if(ret == HAL_OK)
 80066e0:	7dfb      	ldrb	r3, [r7, #23]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d109      	bne.n	80066fa <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80066e6:	4b5e      	ldr	r3, [pc, #376]	; (8006860 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80066e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066ea:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066f2:	495b      	ldr	r1, [pc, #364]	; (8006860 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80066f4:	4313      	orrs	r3, r2
 80066f6:	64cb      	str	r3, [r1, #76]	; 0x4c
 80066f8:	e001      	b.n	80066fe <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066fa:	7dfb      	ldrb	r3, [r7, #23]
 80066fc:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006706:	2b00      	cmp	r3, #0
 8006708:	d00a      	beq.n	8006720 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	3324      	adds	r3, #36	; 0x24
 800670e:	2102      	movs	r1, #2
 8006710:	4618      	mov	r0, r3
 8006712:	f001 fa3b 	bl	8007b8c <RCCEx_PLL3_Config>
 8006716:	4603      	mov	r3, r0
 8006718:	2b00      	cmp	r3, #0
 800671a:	d001      	beq.n	8006720 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 800671c:	2301      	movs	r3, #1
 800671e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006728:	2b00      	cmp	r3, #0
 800672a:	d030      	beq.n	800678e <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006730:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006734:	d017      	beq.n	8006766 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 8006736:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800673a:	d811      	bhi.n	8006760 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 800673c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006740:	d013      	beq.n	800676a <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8006742:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006746:	d80b      	bhi.n	8006760 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8006748:	2b00      	cmp	r3, #0
 800674a:	d010      	beq.n	800676e <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800674c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006750:	d106      	bne.n	8006760 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006752:	4b43      	ldr	r3, [pc, #268]	; (8006860 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006756:	4a42      	ldr	r2, [pc, #264]	; (8006860 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006758:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800675c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800675e:	e007      	b.n	8006770 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006760:	2301      	movs	r3, #1
 8006762:	75fb      	strb	r3, [r7, #23]
      break;
 8006764:	e004      	b.n	8006770 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8006766:	bf00      	nop
 8006768:	e002      	b.n	8006770 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800676a:	bf00      	nop
 800676c:	e000      	b.n	8006770 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800676e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006770:	7dfb      	ldrb	r3, [r7, #23]
 8006772:	2b00      	cmp	r3, #0
 8006774:	d109      	bne.n	800678a <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006776:	4b3a      	ldr	r3, [pc, #232]	; (8006860 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006778:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800677a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006782:	4937      	ldr	r1, [pc, #220]	; (8006860 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006784:	4313      	orrs	r3, r2
 8006786:	654b      	str	r3, [r1, #84]	; 0x54
 8006788:	e001      	b.n	800678e <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800678a:	7dfb      	ldrb	r3, [r7, #23]
 800678c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006796:	2b00      	cmp	r3, #0
 8006798:	d008      	beq.n	80067ac <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800679a:	4b31      	ldr	r3, [pc, #196]	; (8006860 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800679c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800679e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067a6:	492e      	ldr	r1, [pc, #184]	; (8006860 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80067a8:	4313      	orrs	r3, r2
 80067aa:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d009      	beq.n	80067cc <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80067b8:	4b29      	ldr	r3, [pc, #164]	; (8006860 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80067ba:	691b      	ldr	r3, [r3, #16]
 80067bc:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80067c6:	4926      	ldr	r1, [pc, #152]	; (8006860 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80067c8:	4313      	orrs	r3, r2
 80067ca:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d008      	beq.n	80067ea <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80067d8:	4b21      	ldr	r3, [pc, #132]	; (8006860 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80067da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067dc:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80067e4:	491e      	ldr	r1, [pc, #120]	; (8006860 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80067e6:	4313      	orrs	r3, r2
 80067e8:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d00d      	beq.n	8006812 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80067f6:	4b1a      	ldr	r3, [pc, #104]	; (8006860 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80067f8:	691b      	ldr	r3, [r3, #16]
 80067fa:	4a19      	ldr	r2, [pc, #100]	; (8006860 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80067fc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006800:	6113      	str	r3, [r2, #16]
 8006802:	4b17      	ldr	r3, [pc, #92]	; (8006860 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006804:	691a      	ldr	r2, [r3, #16]
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800680c:	4914      	ldr	r1, [pc, #80]	; (8006860 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800680e:	4313      	orrs	r3, r2
 8006810:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	2b00      	cmp	r3, #0
 8006818:	da08      	bge.n	800682c <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800681a:	4b11      	ldr	r3, [pc, #68]	; (8006860 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800681c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800681e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006826:	490e      	ldr	r1, [pc, #56]	; (8006860 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006828:	4313      	orrs	r3, r2
 800682a:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006834:	2b00      	cmp	r3, #0
 8006836:	d009      	beq.n	800684c <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006838:	4b09      	ldr	r3, [pc, #36]	; (8006860 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800683a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800683c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006846:	4906      	ldr	r1, [pc, #24]	; (8006860 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006848:	4313      	orrs	r3, r2
 800684a:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800684c:	7dbb      	ldrb	r3, [r7, #22]
 800684e:	2b00      	cmp	r3, #0
 8006850:	d101      	bne.n	8006856 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 8006852:	2300      	movs	r3, #0
 8006854:	e000      	b.n	8006858 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 8006856:	2301      	movs	r3, #1
}
 8006858:	4618      	mov	r0, r3
 800685a:	3718      	adds	r7, #24
 800685c:	46bd      	mov	sp, r7
 800685e:	bd80      	pop	{r7, pc}
 8006860:	58024400 	.word	0x58024400

08006864 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006864:	b580      	push	{r7, lr}
 8006866:	b090      	sub	sp, #64	; 0x40
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006872:	f040 8095 	bne.w	80069a0 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8006876:	4bae      	ldr	r3, [pc, #696]	; (8006b30 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8006878:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800687a:	f003 0307 	and.w	r3, r3, #7
 800687e:	633b      	str	r3, [r7, #48]	; 0x30
 8006880:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006882:	2b04      	cmp	r3, #4
 8006884:	f200 8088 	bhi.w	8006998 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8006888:	a201      	add	r2, pc, #4	; (adr r2, 8006890 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 800688a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800688e:	bf00      	nop
 8006890:	080068a5 	.word	0x080068a5
 8006894:	080068cd 	.word	0x080068cd
 8006898:	080068f5 	.word	0x080068f5
 800689c:	08006991 	.word	0x08006991
 80068a0:	0800691d 	.word	0x0800691d

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80068a4:	4ba2      	ldr	r3, [pc, #648]	; (8006b30 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80068ac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80068b0:	d108      	bne.n	80068c4 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80068b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80068b6:	4618      	mov	r0, r3
 80068b8:	f000 ff64 	bl	8007784 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 80068bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068be:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80068c0:	f000 bc95 	b.w	80071ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80068c4:	2300      	movs	r3, #0
 80068c6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80068c8:	f000 bc91 	b.w	80071ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80068cc:	4b98      	ldr	r3, [pc, #608]	; (8006b30 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80068d4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80068d8:	d108      	bne.n	80068ec <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80068da:	f107 0318 	add.w	r3, r7, #24
 80068de:	4618      	mov	r0, r3
 80068e0:	f000 fca8 	bl	8007234 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80068e4:	69bb      	ldr	r3, [r7, #24]
 80068e6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80068e8:	f000 bc81 	b.w	80071ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80068ec:	2300      	movs	r3, #0
 80068ee:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80068f0:	f000 bc7d 	b.w	80071ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80068f4:	4b8e      	ldr	r3, [pc, #568]	; (8006b30 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80068fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006900:	d108      	bne.n	8006914 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006902:	f107 030c 	add.w	r3, r7, #12
 8006906:	4618      	mov	r0, r3
 8006908:	f000 fde8 	bl	80074dc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006910:	f000 bc6d 	b.w	80071ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8006914:	2300      	movs	r3, #0
 8006916:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006918:	f000 bc69 	b.w	80071ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800691c:	4b84      	ldr	r3, [pc, #528]	; (8006b30 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800691e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006920:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006924:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006926:	4b82      	ldr	r3, [pc, #520]	; (8006b30 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	f003 0304 	and.w	r3, r3, #4
 800692e:	2b04      	cmp	r3, #4
 8006930:	d10c      	bne.n	800694c <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 8006932:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006934:	2b00      	cmp	r3, #0
 8006936:	d109      	bne.n	800694c <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006938:	4b7d      	ldr	r3, [pc, #500]	; (8006b30 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	08db      	lsrs	r3, r3, #3
 800693e:	f003 0303 	and.w	r3, r3, #3
 8006942:	4a7c      	ldr	r2, [pc, #496]	; (8006b34 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 8006944:	fa22 f303 	lsr.w	r3, r2, r3
 8006948:	63fb      	str	r3, [r7, #60]	; 0x3c
 800694a:	e01f      	b.n	800698c <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800694c:	4b78      	ldr	r3, [pc, #480]	; (8006b30 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006954:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006958:	d106      	bne.n	8006968 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 800695a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800695c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006960:	d102      	bne.n	8006968 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8006962:	4b75      	ldr	r3, [pc, #468]	; (8006b38 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8006964:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006966:	e011      	b.n	800698c <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006968:	4b71      	ldr	r3, [pc, #452]	; (8006b30 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006970:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006974:	d106      	bne.n	8006984 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 8006976:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006978:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800697c:	d102      	bne.n	8006984 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800697e:	4b6f      	ldr	r3, [pc, #444]	; (8006b3c <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8006980:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006982:	e003      	b.n	800698c <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8006984:	2300      	movs	r3, #0
 8006986:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8006988:	f000 bc31 	b.w	80071ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800698c:	f000 bc2f 	b.w	80071ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8006990:	4b6b      	ldr	r3, [pc, #428]	; (8006b40 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8006992:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006994:	f000 bc2b 	b.w	80071ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8006998:	2300      	movs	r3, #0
 800699a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800699c:	f000 bc27 	b.w	80071ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80069a6:	f040 8095 	bne.w	8006ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 80069aa:	4b61      	ldr	r3, [pc, #388]	; (8006b30 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80069ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069ae:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 80069b2:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80069b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80069ba:	d04d      	beq.n	8006a58 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 80069bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80069c2:	f200 8084 	bhi.w	8006ace <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 80069c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069c8:	2bc0      	cmp	r3, #192	; 0xc0
 80069ca:	d07d      	beq.n	8006ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 80069cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069ce:	2bc0      	cmp	r3, #192	; 0xc0
 80069d0:	d87d      	bhi.n	8006ace <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 80069d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069d4:	2b80      	cmp	r3, #128	; 0x80
 80069d6:	d02d      	beq.n	8006a34 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 80069d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069da:	2b80      	cmp	r3, #128	; 0x80
 80069dc:	d877      	bhi.n	8006ace <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 80069de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d003      	beq.n	80069ec <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 80069e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069e6:	2b40      	cmp	r3, #64	; 0x40
 80069e8:	d012      	beq.n	8006a10 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 80069ea:	e070      	b.n	8006ace <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80069ec:	4b50      	ldr	r3, [pc, #320]	; (8006b30 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80069f4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80069f8:	d107      	bne.n	8006a0a <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80069fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80069fe:	4618      	mov	r0, r3
 8006a00:	f000 fec0 	bl	8007784 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006a04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a06:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006a08:	e3f1      	b.n	80071ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8006a0a:	2300      	movs	r3, #0
 8006a0c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006a0e:	e3ee      	b.n	80071ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006a10:	4b47      	ldr	r3, [pc, #284]	; (8006b30 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006a18:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006a1c:	d107      	bne.n	8006a2e <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006a1e:	f107 0318 	add.w	r3, r7, #24
 8006a22:	4618      	mov	r0, r3
 8006a24:	f000 fc06 	bl	8007234 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006a28:	69bb      	ldr	r3, [r7, #24]
 8006a2a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006a2c:	e3df      	b.n	80071ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8006a2e:	2300      	movs	r3, #0
 8006a30:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006a32:	e3dc      	b.n	80071ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006a34:	4b3e      	ldr	r3, [pc, #248]	; (8006b30 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006a3c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006a40:	d107      	bne.n	8006a52 <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006a42:	f107 030c 	add.w	r3, r7, #12
 8006a46:	4618      	mov	r0, r3
 8006a48:	f000 fd48 	bl	80074dc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006a50:	e3cd      	b.n	80071ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8006a52:	2300      	movs	r3, #0
 8006a54:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006a56:	e3ca      	b.n	80071ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006a58:	4b35      	ldr	r3, [pc, #212]	; (8006b30 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8006a5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a5c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006a60:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006a62:	4b33      	ldr	r3, [pc, #204]	; (8006b30 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	f003 0304 	and.w	r3, r3, #4
 8006a6a:	2b04      	cmp	r3, #4
 8006a6c:	d10c      	bne.n	8006a88 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 8006a6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d109      	bne.n	8006a88 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006a74:	4b2e      	ldr	r3, [pc, #184]	; (8006b30 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	08db      	lsrs	r3, r3, #3
 8006a7a:	f003 0303 	and.w	r3, r3, #3
 8006a7e:	4a2d      	ldr	r2, [pc, #180]	; (8006b34 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 8006a80:	fa22 f303 	lsr.w	r3, r2, r3
 8006a84:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a86:	e01e      	b.n	8006ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006a88:	4b29      	ldr	r3, [pc, #164]	; (8006b30 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a94:	d106      	bne.n	8006aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 8006a96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a98:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006a9c:	d102      	bne.n	8006aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8006a9e:	4b26      	ldr	r3, [pc, #152]	; (8006b38 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8006aa0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006aa2:	e010      	b.n	8006ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006aa4:	4b22      	ldr	r3, [pc, #136]	; (8006b30 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006aac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006ab0:	d106      	bne.n	8006ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 8006ab2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ab4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006ab8:	d102      	bne.n	8006ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8006aba:	4b20      	ldr	r3, [pc, #128]	; (8006b3c <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8006abc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006abe:	e002      	b.n	8006ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8006ac0:	2300      	movs	r3, #0
 8006ac2:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8006ac4:	e393      	b.n	80071ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8006ac6:	e392      	b.n	80071ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8006ac8:	4b1d      	ldr	r3, [pc, #116]	; (8006b40 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8006aca:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006acc:	e38f      	b.n	80071ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8006ace:	2300      	movs	r3, #0
 8006ad0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006ad2:	e38c      	b.n	80071ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ada:	f040 80a7 	bne.w	8006c2c <HAL_RCCEx_GetPeriphCLKFreq+0x3c8>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8006ade:	4b14      	ldr	r3, [pc, #80]	; (8006b30 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8006ae0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ae2:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8006ae6:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8006ae8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aea:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006aee:	d05f      	beq.n	8006bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8006af0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006af2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006af6:	f200 8096 	bhi.w	8006c26 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8006afa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006afc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006b00:	f000 808e 	beq.w	8006c20 <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
 8006b04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b06:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006b0a:	f200 808c 	bhi.w	8006c26 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8006b0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b10:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006b14:	d03a      	beq.n	8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 8006b16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b18:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006b1c:	f200 8083 	bhi.w	8006c26 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8006b20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d00e      	beq.n	8006b44 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>
 8006b26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b28:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006b2c:	d01c      	beq.n	8006b68 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 8006b2e:	e07a      	b.n	8006c26 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8006b30:	58024400 	.word	0x58024400
 8006b34:	03d09000 	.word	0x03d09000
 8006b38:	003d0900 	.word	0x003d0900
 8006b3c:	007a1200 	.word	0x007a1200
 8006b40:	00bb8000 	.word	0x00bb8000
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006b44:	4baa      	ldr	r3, [pc, #680]	; (8006df0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b4c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006b50:	d107      	bne.n	8006b62 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006b52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006b56:	4618      	mov	r0, r3
 8006b58:	f000 fe14 	bl	8007784 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006b5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b5e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006b60:	e345      	b.n	80071ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8006b62:	2300      	movs	r3, #0
 8006b64:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006b66:	e342      	b.n	80071ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006b68:	4ba1      	ldr	r3, [pc, #644]	; (8006df0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006b70:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006b74:	d107      	bne.n	8006b86 <HAL_RCCEx_GetPeriphCLKFreq+0x322>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006b76:	f107 0318 	add.w	r3, r7, #24
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	f000 fb5a 	bl	8007234 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006b80:	69bb      	ldr	r3, [r7, #24]
 8006b82:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006b84:	e333      	b.n	80071ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8006b86:	2300      	movs	r3, #0
 8006b88:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006b8a:	e330      	b.n	80071ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006b8c:	4b98      	ldr	r3, [pc, #608]	; (8006df0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006b94:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006b98:	d107      	bne.n	8006baa <HAL_RCCEx_GetPeriphCLKFreq+0x346>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006b9a:	f107 030c 	add.w	r3, r7, #12
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	f000 fc9c 	bl	80074dc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006ba8:	e321      	b.n	80071ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8006baa:	2300      	movs	r3, #0
 8006bac:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006bae:	e31e      	b.n	80071ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006bb0:	4b8f      	ldr	r3, [pc, #572]	; (8006df0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006bb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006bb4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006bb8:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006bba:	4b8d      	ldr	r3, [pc, #564]	; (8006df0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	f003 0304 	and.w	r3, r3, #4
 8006bc2:	2b04      	cmp	r3, #4
 8006bc4:	d10c      	bne.n	8006be0 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 8006bc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d109      	bne.n	8006be0 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006bcc:	4b88      	ldr	r3, [pc, #544]	; (8006df0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	08db      	lsrs	r3, r3, #3
 8006bd2:	f003 0303 	and.w	r3, r3, #3
 8006bd6:	4a87      	ldr	r2, [pc, #540]	; (8006df4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006bd8:	fa22 f303 	lsr.w	r3, r2, r3
 8006bdc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006bde:	e01e      	b.n	8006c1e <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006be0:	4b83      	ldr	r3, [pc, #524]	; (8006df0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006be8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006bec:	d106      	bne.n	8006bfc <HAL_RCCEx_GetPeriphCLKFreq+0x398>
 8006bee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bf0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006bf4:	d102      	bne.n	8006bfc <HAL_RCCEx_GetPeriphCLKFreq+0x398>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8006bf6:	4b80      	ldr	r3, [pc, #512]	; (8006df8 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8006bf8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006bfa:	e010      	b.n	8006c1e <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006bfc:	4b7c      	ldr	r3, [pc, #496]	; (8006df0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c04:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006c08:	d106      	bne.n	8006c18 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
 8006c0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c0c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006c10:	d102      	bne.n	8006c18 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8006c12:	4b7a      	ldr	r3, [pc, #488]	; (8006dfc <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8006c14:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006c16:	e002      	b.n	8006c1e <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8006c18:	2300      	movs	r3, #0
 8006c1a:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8006c1c:	e2e7      	b.n	80071ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8006c1e:	e2e6      	b.n	80071ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8006c20:	4b77      	ldr	r3, [pc, #476]	; (8006e00 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8006c22:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006c24:	e2e3      	b.n	80071ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8006c26:	2300      	movs	r3, #0
 8006c28:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006c2a:	e2e0      	b.n	80071ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c32:	f040 809c 	bne.w	8006d6e <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8006c36:	4b6e      	ldr	r3, [pc, #440]	; (8006df0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006c38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c3a:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8006c3e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8006c40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c42:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006c46:	d054      	beq.n	8006cf2 <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 8006c48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c4a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006c4e:	f200 808b 	bhi.w	8006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 8006c52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c54:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006c58:	f000 8083 	beq.w	8006d62 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 8006c5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c5e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006c62:	f200 8081 	bhi.w	8006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 8006c66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c68:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006c6c:	d02f      	beq.n	8006cce <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 8006c6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c70:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006c74:	d878      	bhi.n	8006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 8006c76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d004      	beq.n	8006c86 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8006c7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c7e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006c82:	d012      	beq.n	8006caa <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 8006c84:	e070      	b.n	8006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006c86:	4b5a      	ldr	r3, [pc, #360]	; (8006df0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c8e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006c92:	d107      	bne.n	8006ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006c94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006c98:	4618      	mov	r0, r3
 8006c9a:	f000 fd73 	bl	8007784 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006c9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ca0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006ca2:	e2a4      	b.n	80071ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8006ca4:	2300      	movs	r3, #0
 8006ca6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006ca8:	e2a1      	b.n	80071ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006caa:	4b51      	ldr	r3, [pc, #324]	; (8006df0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006cb2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006cb6:	d107      	bne.n	8006cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006cb8:	f107 0318 	add.w	r3, r7, #24
 8006cbc:	4618      	mov	r0, r3
 8006cbe:	f000 fab9 	bl	8007234 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006cc2:	69bb      	ldr	r3, [r7, #24]
 8006cc4:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 8006cc6:	e292      	b.n	80071ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8006cc8:	2300      	movs	r3, #0
 8006cca:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006ccc:	e28f      	b.n	80071ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006cce:	4b48      	ldr	r3, [pc, #288]	; (8006df0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006cd6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006cda:	d107      	bne.n	8006cec <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006cdc:	f107 030c 	add.w	r3, r7, #12
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	f000 fbfb 	bl	80074dc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006cea:	e280      	b.n	80071ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8006cec:	2300      	movs	r3, #0
 8006cee:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006cf0:	e27d      	b.n	80071ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006cf2:	4b3f      	ldr	r3, [pc, #252]	; (8006df0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006cf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006cf6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006cfa:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006cfc:	4b3c      	ldr	r3, [pc, #240]	; (8006df0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	f003 0304 	and.w	r3, r3, #4
 8006d04:	2b04      	cmp	r3, #4
 8006d06:	d10c      	bne.n	8006d22 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 8006d08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d109      	bne.n	8006d22 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006d0e:	4b38      	ldr	r3, [pc, #224]	; (8006df0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	08db      	lsrs	r3, r3, #3
 8006d14:	f003 0303 	and.w	r3, r3, #3
 8006d18:	4a36      	ldr	r2, [pc, #216]	; (8006df4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006d1a:	fa22 f303 	lsr.w	r3, r2, r3
 8006d1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006d20:	e01e      	b.n	8006d60 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006d22:	4b33      	ldr	r3, [pc, #204]	; (8006df0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d2e:	d106      	bne.n	8006d3e <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 8006d30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d32:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006d36:	d102      	bne.n	8006d3e <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8006d38:	4b2f      	ldr	r3, [pc, #188]	; (8006df8 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8006d3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006d3c:	e010      	b.n	8006d60 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006d3e:	4b2c      	ldr	r3, [pc, #176]	; (8006df0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d46:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006d4a:	d106      	bne.n	8006d5a <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 8006d4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d4e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006d52:	d102      	bne.n	8006d5a <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8006d54:	4b29      	ldr	r3, [pc, #164]	; (8006dfc <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8006d56:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006d58:	e002      	b.n	8006d60 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8006d5e:	e246      	b.n	80071ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8006d60:	e245      	b.n	80071ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8006d62:	4b27      	ldr	r3, [pc, #156]	; (8006e00 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8006d64:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006d66:	e242      	b.n	80071ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8006d68:	2300      	movs	r3, #0
 8006d6a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006d6c:	e23f      	b.n	80071ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d74:	f040 80a8 	bne.w	8006ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8006d78:	4b1d      	ldr	r3, [pc, #116]	; (8006df0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006d7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d7c:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8006d80:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8006d82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d84:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006d88:	d060      	beq.n	8006e4c <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
 8006d8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d8c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006d90:	f200 8097 	bhi.w	8006ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8006d94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d96:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006d9a:	f000 808f 	beq.w	8006ebc <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 8006d9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006da0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006da4:	f200 808d 	bhi.w	8006ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8006da8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006daa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006dae:	d03b      	beq.n	8006e28 <HAL_RCCEx_GetPeriphCLKFreq+0x5c4>
 8006db0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006db2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006db6:	f200 8084 	bhi.w	8006ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8006dba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d004      	beq.n	8006dca <HAL_RCCEx_GetPeriphCLKFreq+0x566>
 8006dc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006dc6:	d01d      	beq.n	8006e04 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
 8006dc8:	e07b      	b.n	8006ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006dca:	4b09      	ldr	r3, [pc, #36]	; (8006df0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006dd2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006dd6:	d107      	bne.n	8006de8 <HAL_RCCEx_GetPeriphCLKFreq+0x584>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006dd8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006ddc:	4618      	mov	r0, r3
 8006dde:	f000 fcd1 	bl	8007784 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006de2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006de4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006de6:	e202      	b.n	80071ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8006de8:	2300      	movs	r3, #0
 8006dea:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006dec:	e1ff      	b.n	80071ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8006dee:	bf00      	nop
 8006df0:	58024400 	.word	0x58024400
 8006df4:	03d09000 	.word	0x03d09000
 8006df8:	003d0900 	.word	0x003d0900
 8006dfc:	007a1200 	.word	0x007a1200
 8006e00:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006e04:	4ba3      	ldr	r3, [pc, #652]	; (8007094 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006e0c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006e10:	d107      	bne.n	8006e22 <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006e12:	f107 0318 	add.w	r3, r7, #24
 8006e16:	4618      	mov	r0, r3
 8006e18:	f000 fa0c 	bl	8007234 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006e1c:	69bb      	ldr	r3, [r7, #24]
 8006e1e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006e20:	e1e5      	b.n	80071ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8006e22:	2300      	movs	r3, #0
 8006e24:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006e26:	e1e2      	b.n	80071ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006e28:	4b9a      	ldr	r3, [pc, #616]	; (8007094 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006e30:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006e34:	d107      	bne.n	8006e46 <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006e36:	f107 030c 	add.w	r3, r7, #12
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	f000 fb4e 	bl	80074dc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006e44:	e1d3      	b.n	80071ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8006e46:	2300      	movs	r3, #0
 8006e48:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006e4a:	e1d0      	b.n	80071ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006e4c:	4b91      	ldr	r3, [pc, #580]	; (8007094 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006e4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e50:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006e54:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006e56:	4b8f      	ldr	r3, [pc, #572]	; (8007094 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	f003 0304 	and.w	r3, r3, #4
 8006e5e:	2b04      	cmp	r3, #4
 8006e60:	d10c      	bne.n	8006e7c <HAL_RCCEx_GetPeriphCLKFreq+0x618>
 8006e62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d109      	bne.n	8006e7c <HAL_RCCEx_GetPeriphCLKFreq+0x618>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006e68:	4b8a      	ldr	r3, [pc, #552]	; (8007094 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	08db      	lsrs	r3, r3, #3
 8006e6e:	f003 0303 	and.w	r3, r3, #3
 8006e72:	4a89      	ldr	r2, [pc, #548]	; (8007098 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006e74:	fa22 f303 	lsr.w	r3, r2, r3
 8006e78:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e7a:	e01e      	b.n	8006eba <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006e7c:	4b85      	ldr	r3, [pc, #532]	; (8007094 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e88:	d106      	bne.n	8006e98 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
 8006e8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e8c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006e90:	d102      	bne.n	8006e98 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8006e92:	4b82      	ldr	r3, [pc, #520]	; (800709c <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8006e94:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e96:	e010      	b.n	8006eba <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006e98:	4b7e      	ldr	r3, [pc, #504]	; (8007094 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ea0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006ea4:	d106      	bne.n	8006eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8006ea6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ea8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006eac:	d102      	bne.n	8006eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8006eae:	4b7c      	ldr	r3, [pc, #496]	; (80070a0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006eb0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006eb2:	e002      	b.n	8006eba <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8006eb4:	2300      	movs	r3, #0
 8006eb6:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8006eb8:	e199      	b.n	80071ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8006eba:	e198      	b.n	80071ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8006ebc:	4b79      	ldr	r3, [pc, #484]	; (80070a4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006ebe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006ec0:	e195      	b.n	80071ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006ec6:	e192      	b.n	80071ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006ece:	d173      	bne.n	8006fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8006ed0:	4b70      	ldr	r3, [pc, #448]	; (8007094 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006ed2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ed4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006ed8:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8006eda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006edc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006ee0:	d02f      	beq.n	8006f42 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
 8006ee2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ee4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006ee8:	d863      	bhi.n	8006fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 8006eea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d004      	beq.n	8006efa <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 8006ef0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ef2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ef6:	d012      	beq.n	8006f1e <HAL_RCCEx_GetPeriphCLKFreq+0x6ba>
 8006ef8:	e05b      	b.n	8006fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006efa:	4b66      	ldr	r3, [pc, #408]	; (8007094 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006f02:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006f06:	d107      	bne.n	8006f18 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006f08:	f107 0318 	add.w	r3, r7, #24
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	f000 f991 	bl	8007234 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006f12:	69bb      	ldr	r3, [r7, #24]
 8006f14:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006f16:	e16a      	b.n	80071ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8006f18:	2300      	movs	r3, #0
 8006f1a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006f1c:	e167      	b.n	80071ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006f1e:	4b5d      	ldr	r3, [pc, #372]	; (8007094 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006f26:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006f2a:	d107      	bne.n	8006f3c <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006f2c:	f107 030c 	add.w	r3, r7, #12
 8006f30:	4618      	mov	r0, r3
 8006f32:	f000 fad3 	bl	80074dc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006f36:	697b      	ldr	r3, [r7, #20]
 8006f38:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006f3a:	e158      	b.n	80071ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8006f3c:	2300      	movs	r3, #0
 8006f3e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006f40:	e155      	b.n	80071ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006f42:	4b54      	ldr	r3, [pc, #336]	; (8007094 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006f44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f46:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006f4a:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006f4c:	4b51      	ldr	r3, [pc, #324]	; (8007094 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f003 0304 	and.w	r3, r3, #4
 8006f54:	2b04      	cmp	r3, #4
 8006f56:	d10c      	bne.n	8006f72 <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
 8006f58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d109      	bne.n	8006f72 <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006f5e:	4b4d      	ldr	r3, [pc, #308]	; (8007094 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	08db      	lsrs	r3, r3, #3
 8006f64:	f003 0303 	and.w	r3, r3, #3
 8006f68:	4a4b      	ldr	r2, [pc, #300]	; (8007098 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006f6a:	fa22 f303 	lsr.w	r3, r2, r3
 8006f6e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006f70:	e01e      	b.n	8006fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006f72:	4b48      	ldr	r3, [pc, #288]	; (8007094 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f7e:	d106      	bne.n	8006f8e <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
 8006f80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f82:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006f86:	d102      	bne.n	8006f8e <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8006f88:	4b44      	ldr	r3, [pc, #272]	; (800709c <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8006f8a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006f8c:	e010      	b.n	8006fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006f8e:	4b41      	ldr	r3, [pc, #260]	; (8007094 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f96:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006f9a:	d106      	bne.n	8006faa <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 8006f9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f9e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006fa2:	d102      	bne.n	8006faa <HAL_RCCEx_GetPeriphCLKFreq+0x746>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8006fa4:	4b3e      	ldr	r3, [pc, #248]	; (80070a0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006fa6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006fa8:	e002      	b.n	8006fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8006faa:	2300      	movs	r3, #0
 8006fac:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8006fae:	e11e      	b.n	80071ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8006fb0:	e11d      	b.n	80071ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8006fb2:	2300      	movs	r3, #0
 8006fb4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006fb6:	e11a      	b.n	80071ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006fbe:	d133      	bne.n	8007028 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8006fc0:	4b34      	ldr	r3, [pc, #208]	; (8007094 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006fc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006fc4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006fc8:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8006fca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d004      	beq.n	8006fda <HAL_RCCEx_GetPeriphCLKFreq+0x776>
 8006fd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fd2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006fd6:	d012      	beq.n	8006ffe <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
 8006fd8:	e023      	b.n	8007022 <HAL_RCCEx_GetPeriphCLKFreq+0x7be>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006fda:	4b2e      	ldr	r3, [pc, #184]	; (8007094 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006fe2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006fe6:	d107      	bne.n	8006ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006fe8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006fec:	4618      	mov	r0, r3
 8006fee:	f000 fbc9 	bl	8007784 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006ff2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ff4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006ff6:	e0fa      	b.n	80071ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006ff8:	2300      	movs	r3, #0
 8006ffa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006ffc:	e0f7      	b.n	80071ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006ffe:	4b25      	ldr	r3, [pc, #148]	; (8007094 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007006:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800700a:	d107      	bne.n	800701c <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800700c:	f107 0318 	add.w	r3, r7, #24
 8007010:	4618      	mov	r0, r3
 8007012:	f000 f90f 	bl	8007234 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8007016:	6a3b      	ldr	r3, [r7, #32]
 8007018:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800701a:	e0e8      	b.n	80071ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800701c:	2300      	movs	r3, #0
 800701e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007020:	e0e5      	b.n	80071ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8007022:	2300      	movs	r3, #0
 8007024:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007026:	e0e2      	b.n	80071ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800702e:	f040 808f 	bne.w	8007150 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8007032:	4b18      	ldr	r3, [pc, #96]	; (8007094 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007034:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007036:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800703a:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800703c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800703e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007042:	d075      	beq.n	8007130 <HAL_RCCEx_GetPeriphCLKFreq+0x8cc>
 8007044:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007046:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800704a:	d87e      	bhi.n	800714a <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 800704c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800704e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007052:	d060      	beq.n	8007116 <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 8007054:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007056:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800705a:	d876      	bhi.n	800714a <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 800705c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800705e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007062:	d045      	beq.n	80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>
 8007064:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007066:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800706a:	d86e      	bhi.n	800714a <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 800706c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800706e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007072:	d02b      	beq.n	80070cc <HAL_RCCEx_GetPeriphCLKFreq+0x868>
 8007074:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007076:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800707a:	d866      	bhi.n	800714a <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 800707c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800707e:	2b00      	cmp	r3, #0
 8007080:	d004      	beq.n	800708c <HAL_RCCEx_GetPeriphCLKFreq+0x828>
 8007082:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007084:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007088:	d00e      	beq.n	80070a8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 800708a:	e05e      	b.n	800714a <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800708c:	f000 f8bc 	bl	8007208 <HAL_RCCEx_GetD3PCLK1Freq>
 8007090:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8007092:	e0ac      	b.n	80071ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8007094:	58024400 	.word	0x58024400
 8007098:	03d09000 	.word	0x03d09000
 800709c:	003d0900 	.word	0x003d0900
 80070a0:	007a1200 	.word	0x007a1200
 80070a4:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80070a8:	4b53      	ldr	r3, [pc, #332]	; (80071f8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80070b0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80070b4:	d107      	bne.n	80070c6 <HAL_RCCEx_GetPeriphCLKFreq+0x862>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80070b6:	f107 0318 	add.w	r3, r7, #24
 80070ba:	4618      	mov	r0, r3
 80070bc:	f000 f8ba 	bl	8007234 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80070c0:	69fb      	ldr	r3, [r7, #28]
 80070c2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80070c4:	e093      	b.n	80071ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80070c6:	2300      	movs	r3, #0
 80070c8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80070ca:	e090      	b.n	80071ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80070cc:	4b4a      	ldr	r3, [pc, #296]	; (80071f8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80070d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80070d8:	d107      	bne.n	80070ea <HAL_RCCEx_GetPeriphCLKFreq+0x886>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80070da:	f107 030c 	add.w	r3, r7, #12
 80070de:	4618      	mov	r0, r3
 80070e0:	f000 f9fc 	bl	80074dc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80070e4:	693b      	ldr	r3, [r7, #16]
 80070e6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80070e8:	e081      	b.n	80071ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80070ea:	2300      	movs	r3, #0
 80070ec:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80070ee:	e07e      	b.n	80071ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80070f0:	4b41      	ldr	r3, [pc, #260]	; (80071f8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	f003 0304 	and.w	r3, r3, #4
 80070f8:	2b04      	cmp	r3, #4
 80070fa:	d109      	bne.n	8007110 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80070fc:	4b3e      	ldr	r3, [pc, #248]	; (80071f8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	08db      	lsrs	r3, r3, #3
 8007102:	f003 0303 	and.w	r3, r3, #3
 8007106:	4a3d      	ldr	r2, [pc, #244]	; (80071fc <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 8007108:	fa22 f303 	lsr.w	r3, r2, r3
 800710c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800710e:	e06e      	b.n	80071ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007110:	2300      	movs	r3, #0
 8007112:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007114:	e06b      	b.n	80071ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8007116:	4b38      	ldr	r3, [pc, #224]	; (80071f8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800711e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007122:	d102      	bne.n	800712a <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
         {
          frequency = CSI_VALUE;
 8007124:	4b36      	ldr	r3, [pc, #216]	; (8007200 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8007126:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007128:	e061      	b.n	80071ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800712a:	2300      	movs	r3, #0
 800712c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800712e:	e05e      	b.n	80071ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007130:	4b31      	ldr	r3, [pc, #196]	; (80071f8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007138:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800713c:	d102      	bne.n	8007144 <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>
         {
          frequency = HSE_VALUE;
 800713e:	4b31      	ldr	r3, [pc, #196]	; (8007204 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8007140:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007142:	e054      	b.n	80071ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007144:	2300      	movs	r3, #0
 8007146:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007148:	e051      	b.n	80071ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 800714a:	2300      	movs	r3, #0
 800714c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800714e:	e04e      	b.n	80071ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007156:	d148      	bne.n	80071ea <HAL_RCCEx_GetPeriphCLKFreq+0x986>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 8007158:	4b27      	ldr	r3, [pc, #156]	; (80071f8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800715a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800715c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007160:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007162:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007164:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007168:	d02a      	beq.n	80071c0 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800716a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800716c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007170:	d838      	bhi.n	80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 8007172:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007174:	2b00      	cmp	r3, #0
 8007176:	d004      	beq.n	8007182 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 8007178:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800717a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800717e:	d00d      	beq.n	800719c <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 8007180:	e030      	b.n	80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007182:	4b1d      	ldr	r3, [pc, #116]	; (80071f8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800718a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800718e:	d102      	bne.n	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
         {
          frequency = HSE_VALUE;
 8007190:	4b1c      	ldr	r3, [pc, #112]	; (8007204 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8007192:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007194:	e02b      	b.n	80071ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007196:	2300      	movs	r3, #0
 8007198:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800719a:	e028      	b.n	80071ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800719c:	4b16      	ldr	r3, [pc, #88]	; (80071f8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80071a4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80071a8:	d107      	bne.n	80071ba <HAL_RCCEx_GetPeriphCLKFreq+0x956>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80071aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80071ae:	4618      	mov	r0, r3
 80071b0:	f000 fae8 	bl	8007784 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80071b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071b6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80071b8:	e019      	b.n	80071ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80071ba:	2300      	movs	r3, #0
 80071bc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80071be:	e016      	b.n	80071ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80071c0:	4b0d      	ldr	r3, [pc, #52]	; (80071f8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80071c8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80071cc:	d107      	bne.n	80071de <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80071ce:	f107 0318 	add.w	r3, r7, #24
 80071d2:	4618      	mov	r0, r3
 80071d4:	f000 f82e 	bl	8007234 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80071d8:	69fb      	ldr	r3, [r7, #28]
 80071da:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80071dc:	e007      	b.n	80071ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80071de:	2300      	movs	r3, #0
 80071e0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80071e2:	e004      	b.n	80071ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 80071e4:	2300      	movs	r3, #0
 80071e6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80071e8:	e001      	b.n	80071ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else
    {
      frequency = 0;
 80071ea:	2300      	movs	r3, #0
 80071ec:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 80071ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80071f0:	4618      	mov	r0, r3
 80071f2:	3740      	adds	r7, #64	; 0x40
 80071f4:	46bd      	mov	sp, r7
 80071f6:	bd80      	pop	{r7, pc}
 80071f8:	58024400 	.word	0x58024400
 80071fc:	03d09000 	.word	0x03d09000
 8007200:	003d0900 	.word	0x003d0900
 8007204:	007a1200 	.word	0x007a1200

08007208 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007208:	b580      	push	{r7, lr}
 800720a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800720c:	f7fe fb8e 	bl	800592c <HAL_RCC_GetHCLKFreq>
 8007210:	4602      	mov	r2, r0
 8007212:	4b06      	ldr	r3, [pc, #24]	; (800722c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007214:	6a1b      	ldr	r3, [r3, #32]
 8007216:	091b      	lsrs	r3, r3, #4
 8007218:	f003 0307 	and.w	r3, r3, #7
 800721c:	4904      	ldr	r1, [pc, #16]	; (8007230 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800721e:	5ccb      	ldrb	r3, [r1, r3]
 8007220:	f003 031f 	and.w	r3, r3, #31
 8007224:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007228:	4618      	mov	r0, r3
 800722a:	bd80      	pop	{r7, pc}
 800722c:	58024400 	.word	0x58024400
 8007230:	0800cb28 	.word	0x0800cb28

08007234 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8007234:	b480      	push	{r7}
 8007236:	b089      	sub	sp, #36	; 0x24
 8007238:	af00      	add	r7, sp, #0
 800723a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800723c:	4ba1      	ldr	r3, [pc, #644]	; (80074c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800723e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007240:	f003 0303 	and.w	r3, r3, #3
 8007244:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8007246:	4b9f      	ldr	r3, [pc, #636]	; (80074c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007248:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800724a:	0b1b      	lsrs	r3, r3, #12
 800724c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007250:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007252:	4b9c      	ldr	r3, [pc, #624]	; (80074c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007254:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007256:	091b      	lsrs	r3, r3, #4
 8007258:	f003 0301 	and.w	r3, r3, #1
 800725c:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800725e:	4b99      	ldr	r3, [pc, #612]	; (80074c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007260:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007262:	08db      	lsrs	r3, r3, #3
 8007264:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007268:	693a      	ldr	r2, [r7, #16]
 800726a:	fb02 f303 	mul.w	r3, r2, r3
 800726e:	ee07 3a90 	vmov	s15, r3
 8007272:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007276:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800727a:	697b      	ldr	r3, [r7, #20]
 800727c:	2b00      	cmp	r3, #0
 800727e:	f000 8111 	beq.w	80074a4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8007282:	69bb      	ldr	r3, [r7, #24]
 8007284:	2b02      	cmp	r3, #2
 8007286:	f000 8083 	beq.w	8007390 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800728a:	69bb      	ldr	r3, [r7, #24]
 800728c:	2b02      	cmp	r3, #2
 800728e:	f200 80a1 	bhi.w	80073d4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8007292:	69bb      	ldr	r3, [r7, #24]
 8007294:	2b00      	cmp	r3, #0
 8007296:	d003      	beq.n	80072a0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8007298:	69bb      	ldr	r3, [r7, #24]
 800729a:	2b01      	cmp	r3, #1
 800729c:	d056      	beq.n	800734c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800729e:	e099      	b.n	80073d4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80072a0:	4b88      	ldr	r3, [pc, #544]	; (80074c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	f003 0320 	and.w	r3, r3, #32
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d02d      	beq.n	8007308 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80072ac:	4b85      	ldr	r3, [pc, #532]	; (80074c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	08db      	lsrs	r3, r3, #3
 80072b2:	f003 0303 	and.w	r3, r3, #3
 80072b6:	4a84      	ldr	r2, [pc, #528]	; (80074c8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80072b8:	fa22 f303 	lsr.w	r3, r2, r3
 80072bc:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80072be:	68bb      	ldr	r3, [r7, #8]
 80072c0:	ee07 3a90 	vmov	s15, r3
 80072c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072c8:	697b      	ldr	r3, [r7, #20]
 80072ca:	ee07 3a90 	vmov	s15, r3
 80072ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80072d6:	4b7b      	ldr	r3, [pc, #492]	; (80074c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80072d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072de:	ee07 3a90 	vmov	s15, r3
 80072e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80072ea:	eddf 5a78 	vldr	s11, [pc, #480]	; 80074cc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80072ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80072f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80072f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80072fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80072fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007302:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007306:	e087      	b.n	8007418 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007308:	697b      	ldr	r3, [r7, #20]
 800730a:	ee07 3a90 	vmov	s15, r3
 800730e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007312:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80074d0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8007316:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800731a:	4b6a      	ldr	r3, [pc, #424]	; (80074c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800731c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800731e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007322:	ee07 3a90 	vmov	s15, r3
 8007326:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800732a:	ed97 6a03 	vldr	s12, [r7, #12]
 800732e:	eddf 5a67 	vldr	s11, [pc, #412]	; 80074cc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007332:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007336:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800733a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800733e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007342:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007346:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800734a:	e065      	b.n	8007418 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800734c:	697b      	ldr	r3, [r7, #20]
 800734e:	ee07 3a90 	vmov	s15, r3
 8007352:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007356:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80074d4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800735a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800735e:	4b59      	ldr	r3, [pc, #356]	; (80074c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007360:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007362:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007366:	ee07 3a90 	vmov	s15, r3
 800736a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800736e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007372:	eddf 5a56 	vldr	s11, [pc, #344]	; 80074cc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007376:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800737a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800737e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007382:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007386:	ee67 7a27 	vmul.f32	s15, s14, s15
 800738a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800738e:	e043      	b.n	8007418 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007390:	697b      	ldr	r3, [r7, #20]
 8007392:	ee07 3a90 	vmov	s15, r3
 8007396:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800739a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80074d8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800739e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80073a2:	4b48      	ldr	r3, [pc, #288]	; (80074c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80073a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073aa:	ee07 3a90 	vmov	s15, r3
 80073ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80073b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80073b6:	eddf 5a45 	vldr	s11, [pc, #276]	; 80074cc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80073ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80073be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80073c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80073c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80073ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80073ce:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80073d2:	e021      	b.n	8007418 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80073d4:	697b      	ldr	r3, [r7, #20]
 80073d6:	ee07 3a90 	vmov	s15, r3
 80073da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073de:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80074d4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80073e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80073e6:	4b37      	ldr	r3, [pc, #220]	; (80074c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80073e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073ee:	ee07 3a90 	vmov	s15, r3
 80073f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80073f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80073fa:	eddf 5a34 	vldr	s11, [pc, #208]	; 80074cc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80073fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007402:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007406:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800740a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800740e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007412:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007416:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8007418:	4b2a      	ldr	r3, [pc, #168]	; (80074c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800741a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800741c:	0a5b      	lsrs	r3, r3, #9
 800741e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007422:	ee07 3a90 	vmov	s15, r3
 8007426:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800742a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800742e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007432:	edd7 6a07 	vldr	s13, [r7, #28]
 8007436:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800743a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800743e:	ee17 2a90 	vmov	r2, s15
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8007446:	4b1f      	ldr	r3, [pc, #124]	; (80074c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007448:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800744a:	0c1b      	lsrs	r3, r3, #16
 800744c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007450:	ee07 3a90 	vmov	s15, r3
 8007454:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007458:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800745c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007460:	edd7 6a07 	vldr	s13, [r7, #28]
 8007464:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007468:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800746c:	ee17 2a90 	vmov	r2, s15
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8007474:	4b13      	ldr	r3, [pc, #76]	; (80074c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007476:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007478:	0e1b      	lsrs	r3, r3, #24
 800747a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800747e:	ee07 3a90 	vmov	s15, r3
 8007482:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007486:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800748a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800748e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007492:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007496:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800749a:	ee17 2a90 	vmov	r2, s15
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80074a2:	e008      	b.n	80074b6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	2200      	movs	r2, #0
 80074a8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	2200      	movs	r2, #0
 80074ae:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	2200      	movs	r2, #0
 80074b4:	609a      	str	r2, [r3, #8]
}
 80074b6:	bf00      	nop
 80074b8:	3724      	adds	r7, #36	; 0x24
 80074ba:	46bd      	mov	sp, r7
 80074bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c0:	4770      	bx	lr
 80074c2:	bf00      	nop
 80074c4:	58024400 	.word	0x58024400
 80074c8:	03d09000 	.word	0x03d09000
 80074cc:	46000000 	.word	0x46000000
 80074d0:	4c742400 	.word	0x4c742400
 80074d4:	4a742400 	.word	0x4a742400
 80074d8:	4af42400 	.word	0x4af42400

080074dc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80074dc:	b480      	push	{r7}
 80074de:	b089      	sub	sp, #36	; 0x24
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80074e4:	4ba1      	ldr	r3, [pc, #644]	; (800776c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80074e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074e8:	f003 0303 	and.w	r3, r3, #3
 80074ec:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80074ee:	4b9f      	ldr	r3, [pc, #636]	; (800776c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80074f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074f2:	0d1b      	lsrs	r3, r3, #20
 80074f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80074f8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80074fa:	4b9c      	ldr	r3, [pc, #624]	; (800776c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80074fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074fe:	0a1b      	lsrs	r3, r3, #8
 8007500:	f003 0301 	and.w	r3, r3, #1
 8007504:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8007506:	4b99      	ldr	r3, [pc, #612]	; (800776c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007508:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800750a:	08db      	lsrs	r3, r3, #3
 800750c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007510:	693a      	ldr	r2, [r7, #16]
 8007512:	fb02 f303 	mul.w	r3, r2, r3
 8007516:	ee07 3a90 	vmov	s15, r3
 800751a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800751e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007522:	697b      	ldr	r3, [r7, #20]
 8007524:	2b00      	cmp	r3, #0
 8007526:	f000 8111 	beq.w	800774c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800752a:	69bb      	ldr	r3, [r7, #24]
 800752c:	2b02      	cmp	r3, #2
 800752e:	f000 8083 	beq.w	8007638 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8007532:	69bb      	ldr	r3, [r7, #24]
 8007534:	2b02      	cmp	r3, #2
 8007536:	f200 80a1 	bhi.w	800767c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800753a:	69bb      	ldr	r3, [r7, #24]
 800753c:	2b00      	cmp	r3, #0
 800753e:	d003      	beq.n	8007548 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007540:	69bb      	ldr	r3, [r7, #24]
 8007542:	2b01      	cmp	r3, #1
 8007544:	d056      	beq.n	80075f4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8007546:	e099      	b.n	800767c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007548:	4b88      	ldr	r3, [pc, #544]	; (800776c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	f003 0320 	and.w	r3, r3, #32
 8007550:	2b00      	cmp	r3, #0
 8007552:	d02d      	beq.n	80075b0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007554:	4b85      	ldr	r3, [pc, #532]	; (800776c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	08db      	lsrs	r3, r3, #3
 800755a:	f003 0303 	and.w	r3, r3, #3
 800755e:	4a84      	ldr	r2, [pc, #528]	; (8007770 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007560:	fa22 f303 	lsr.w	r3, r2, r3
 8007564:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007566:	68bb      	ldr	r3, [r7, #8]
 8007568:	ee07 3a90 	vmov	s15, r3
 800756c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007570:	697b      	ldr	r3, [r7, #20]
 8007572:	ee07 3a90 	vmov	s15, r3
 8007576:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800757a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800757e:	4b7b      	ldr	r3, [pc, #492]	; (800776c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007582:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007586:	ee07 3a90 	vmov	s15, r3
 800758a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800758e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007592:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007774 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007596:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800759a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800759e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80075a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80075a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075aa:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80075ae:	e087      	b.n	80076c0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80075b0:	697b      	ldr	r3, [r7, #20]
 80075b2:	ee07 3a90 	vmov	s15, r3
 80075b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075ba:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007778 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80075be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80075c2:	4b6a      	ldr	r3, [pc, #424]	; (800776c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80075c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075ca:	ee07 3a90 	vmov	s15, r3
 80075ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80075d6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007774 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80075da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80075de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80075e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80075e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80075ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075ee:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80075f2:	e065      	b.n	80076c0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80075f4:	697b      	ldr	r3, [r7, #20]
 80075f6:	ee07 3a90 	vmov	s15, r3
 80075fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075fe:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800777c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007602:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007606:	4b59      	ldr	r3, [pc, #356]	; (800776c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800760a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800760e:	ee07 3a90 	vmov	s15, r3
 8007612:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007616:	ed97 6a03 	vldr	s12, [r7, #12]
 800761a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007774 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800761e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007622:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007626:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800762a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800762e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007632:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007636:	e043      	b.n	80076c0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007638:	697b      	ldr	r3, [r7, #20]
 800763a:	ee07 3a90 	vmov	s15, r3
 800763e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007642:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007780 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8007646:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800764a:	4b48      	ldr	r3, [pc, #288]	; (800776c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800764c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800764e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007652:	ee07 3a90 	vmov	s15, r3
 8007656:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800765a:	ed97 6a03 	vldr	s12, [r7, #12]
 800765e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007774 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007662:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007666:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800766a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800766e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007672:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007676:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800767a:	e021      	b.n	80076c0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800767c:	697b      	ldr	r3, [r7, #20]
 800767e:	ee07 3a90 	vmov	s15, r3
 8007682:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007686:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800777c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800768a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800768e:	4b37      	ldr	r3, [pc, #220]	; (800776c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007692:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007696:	ee07 3a90 	vmov	s15, r3
 800769a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800769e:	ed97 6a03 	vldr	s12, [r7, #12]
 80076a2:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007774 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80076a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80076aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80076ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80076b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80076b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076ba:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80076be:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80076c0:	4b2a      	ldr	r3, [pc, #168]	; (800776c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80076c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076c4:	0a5b      	lsrs	r3, r3, #9
 80076c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80076ca:	ee07 3a90 	vmov	s15, r3
 80076ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076d2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80076d6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80076da:	edd7 6a07 	vldr	s13, [r7, #28]
 80076de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80076e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80076e6:	ee17 2a90 	vmov	r2, s15
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80076ee:	4b1f      	ldr	r3, [pc, #124]	; (800776c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80076f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076f2:	0c1b      	lsrs	r3, r3, #16
 80076f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80076f8:	ee07 3a90 	vmov	s15, r3
 80076fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007700:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007704:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007708:	edd7 6a07 	vldr	s13, [r7, #28]
 800770c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007710:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007714:	ee17 2a90 	vmov	r2, s15
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800771c:	4b13      	ldr	r3, [pc, #76]	; (800776c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800771e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007720:	0e1b      	lsrs	r3, r3, #24
 8007722:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007726:	ee07 3a90 	vmov	s15, r3
 800772a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800772e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007732:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007736:	edd7 6a07 	vldr	s13, [r7, #28]
 800773a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800773e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007742:	ee17 2a90 	vmov	r2, s15
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800774a:	e008      	b.n	800775e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	2200      	movs	r2, #0
 8007750:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	2200      	movs	r2, #0
 8007756:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	2200      	movs	r2, #0
 800775c:	609a      	str	r2, [r3, #8]
}
 800775e:	bf00      	nop
 8007760:	3724      	adds	r7, #36	; 0x24
 8007762:	46bd      	mov	sp, r7
 8007764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007768:	4770      	bx	lr
 800776a:	bf00      	nop
 800776c:	58024400 	.word	0x58024400
 8007770:	03d09000 	.word	0x03d09000
 8007774:	46000000 	.word	0x46000000
 8007778:	4c742400 	.word	0x4c742400
 800777c:	4a742400 	.word	0x4a742400
 8007780:	4af42400 	.word	0x4af42400

08007784 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8007784:	b480      	push	{r7}
 8007786:	b089      	sub	sp, #36	; 0x24
 8007788:	af00      	add	r7, sp, #0
 800778a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800778c:	4ba0      	ldr	r3, [pc, #640]	; (8007a10 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800778e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007790:	f003 0303 	and.w	r3, r3, #3
 8007794:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8007796:	4b9e      	ldr	r3, [pc, #632]	; (8007a10 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007798:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800779a:	091b      	lsrs	r3, r3, #4
 800779c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80077a0:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80077a2:	4b9b      	ldr	r3, [pc, #620]	; (8007a10 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80077a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077a6:	f003 0301 	and.w	r3, r3, #1
 80077aa:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80077ac:	4b98      	ldr	r3, [pc, #608]	; (8007a10 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80077ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077b0:	08db      	lsrs	r3, r3, #3
 80077b2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80077b6:	693a      	ldr	r2, [r7, #16]
 80077b8:	fb02 f303 	mul.w	r3, r2, r3
 80077bc:	ee07 3a90 	vmov	s15, r3
 80077c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077c4:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 80077c8:	697b      	ldr	r3, [r7, #20]
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	f000 8111 	beq.w	80079f2 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 80077d0:	69bb      	ldr	r3, [r7, #24]
 80077d2:	2b02      	cmp	r3, #2
 80077d4:	f000 8083 	beq.w	80078de <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 80077d8:	69bb      	ldr	r3, [r7, #24]
 80077da:	2b02      	cmp	r3, #2
 80077dc:	f200 80a1 	bhi.w	8007922 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 80077e0:	69bb      	ldr	r3, [r7, #24]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d003      	beq.n	80077ee <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 80077e6:	69bb      	ldr	r3, [r7, #24]
 80077e8:	2b01      	cmp	r3, #1
 80077ea:	d056      	beq.n	800789a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 80077ec:	e099      	b.n	8007922 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80077ee:	4b88      	ldr	r3, [pc, #544]	; (8007a10 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	f003 0320 	and.w	r3, r3, #32
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d02d      	beq.n	8007856 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80077fa:	4b85      	ldr	r3, [pc, #532]	; (8007a10 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	08db      	lsrs	r3, r3, #3
 8007800:	f003 0303 	and.w	r3, r3, #3
 8007804:	4a83      	ldr	r2, [pc, #524]	; (8007a14 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8007806:	fa22 f303 	lsr.w	r3, r2, r3
 800780a:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800780c:	68bb      	ldr	r3, [r7, #8]
 800780e:	ee07 3a90 	vmov	s15, r3
 8007812:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007816:	697b      	ldr	r3, [r7, #20]
 8007818:	ee07 3a90 	vmov	s15, r3
 800781c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007820:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007824:	4b7a      	ldr	r3, [pc, #488]	; (8007a10 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007826:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007828:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800782c:	ee07 3a90 	vmov	s15, r3
 8007830:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007834:	ed97 6a03 	vldr	s12, [r7, #12]
 8007838:	eddf 5a77 	vldr	s11, [pc, #476]	; 8007a18 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800783c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007840:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007844:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007848:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800784c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007850:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007854:	e087      	b.n	8007966 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007856:	697b      	ldr	r3, [r7, #20]
 8007858:	ee07 3a90 	vmov	s15, r3
 800785c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007860:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8007a1c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8007864:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007868:	4b69      	ldr	r3, [pc, #420]	; (8007a10 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800786a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800786c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007870:	ee07 3a90 	vmov	s15, r3
 8007874:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007878:	ed97 6a03 	vldr	s12, [r7, #12]
 800787c:	eddf 5a66 	vldr	s11, [pc, #408]	; 8007a18 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007880:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007884:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007888:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800788c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007890:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007894:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007898:	e065      	b.n	8007966 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800789a:	697b      	ldr	r3, [r7, #20]
 800789c:	ee07 3a90 	vmov	s15, r3
 80078a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078a4:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8007a20 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 80078a8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80078ac:	4b58      	ldr	r3, [pc, #352]	; (8007a10 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80078ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078b4:	ee07 3a90 	vmov	s15, r3
 80078b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80078bc:	ed97 6a03 	vldr	s12, [r7, #12]
 80078c0:	eddf 5a55 	vldr	s11, [pc, #340]	; 8007a18 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80078c4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80078c8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80078cc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80078d0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80078d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80078d8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80078dc:	e043      	b.n	8007966 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80078de:	697b      	ldr	r3, [r7, #20]
 80078e0:	ee07 3a90 	vmov	s15, r3
 80078e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078e8:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8007a24 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 80078ec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80078f0:	4b47      	ldr	r3, [pc, #284]	; (8007a10 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80078f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078f8:	ee07 3a90 	vmov	s15, r3
 80078fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007900:	ed97 6a03 	vldr	s12, [r7, #12]
 8007904:	eddf 5a44 	vldr	s11, [pc, #272]	; 8007a18 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007908:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800790c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007910:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007914:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007918:	ee67 7a27 	vmul.f32	s15, s14, s15
 800791c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007920:	e021      	b.n	8007966 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007922:	697b      	ldr	r3, [r7, #20]
 8007924:	ee07 3a90 	vmov	s15, r3
 8007928:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800792c:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8007a1c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8007930:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007934:	4b36      	ldr	r3, [pc, #216]	; (8007a10 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007936:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007938:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800793c:	ee07 3a90 	vmov	s15, r3
 8007940:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007944:	ed97 6a03 	vldr	s12, [r7, #12]
 8007948:	eddf 5a33 	vldr	s11, [pc, #204]	; 8007a18 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800794c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007950:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007954:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007958:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800795c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007960:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007964:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8007966:	4b2a      	ldr	r3, [pc, #168]	; (8007a10 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800796a:	0a5b      	lsrs	r3, r3, #9
 800796c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007970:	ee07 3a90 	vmov	s15, r3
 8007974:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007978:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800797c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007980:	edd7 6a07 	vldr	s13, [r7, #28]
 8007984:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007988:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800798c:	ee17 2a90 	vmov	r2, s15
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8007994:	4b1e      	ldr	r3, [pc, #120]	; (8007a10 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007996:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007998:	0c1b      	lsrs	r3, r3, #16
 800799a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800799e:	ee07 3a90 	vmov	s15, r3
 80079a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079a6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80079aa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80079ae:	edd7 6a07 	vldr	s13, [r7, #28]
 80079b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80079b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80079ba:	ee17 2a90 	vmov	r2, s15
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 80079c2:	4b13      	ldr	r3, [pc, #76]	; (8007a10 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80079c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079c6:	0e1b      	lsrs	r3, r3, #24
 80079c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80079cc:	ee07 3a90 	vmov	s15, r3
 80079d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079d4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80079d8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80079dc:	edd7 6a07 	vldr	s13, [r7, #28]
 80079e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80079e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80079e8:	ee17 2a90 	vmov	r2, s15
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80079f0:	e008      	b.n	8007a04 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	2200      	movs	r2, #0
 80079f6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	2200      	movs	r2, #0
 80079fc:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	2200      	movs	r2, #0
 8007a02:	609a      	str	r2, [r3, #8]
}
 8007a04:	bf00      	nop
 8007a06:	3724      	adds	r7, #36	; 0x24
 8007a08:	46bd      	mov	sp, r7
 8007a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a0e:	4770      	bx	lr
 8007a10:	58024400 	.word	0x58024400
 8007a14:	03d09000 	.word	0x03d09000
 8007a18:	46000000 	.word	0x46000000
 8007a1c:	4c742400 	.word	0x4c742400
 8007a20:	4a742400 	.word	0x4a742400
 8007a24:	4af42400 	.word	0x4af42400

08007a28 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007a28:	b580      	push	{r7, lr}
 8007a2a:	b084      	sub	sp, #16
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	6078      	str	r0, [r7, #4]
 8007a30:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007a32:	2300      	movs	r3, #0
 8007a34:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007a36:	4b53      	ldr	r3, [pc, #332]	; (8007b84 <RCCEx_PLL2_Config+0x15c>)
 8007a38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a3a:	f003 0303 	and.w	r3, r3, #3
 8007a3e:	2b03      	cmp	r3, #3
 8007a40:	d101      	bne.n	8007a46 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8007a42:	2301      	movs	r3, #1
 8007a44:	e099      	b.n	8007b7a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007a46:	4b4f      	ldr	r3, [pc, #316]	; (8007b84 <RCCEx_PLL2_Config+0x15c>)
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	4a4e      	ldr	r2, [pc, #312]	; (8007b84 <RCCEx_PLL2_Config+0x15c>)
 8007a4c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007a50:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007a52:	f7f9 fd9b 	bl	800158c <HAL_GetTick>
 8007a56:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007a58:	e008      	b.n	8007a6c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007a5a:	f7f9 fd97 	bl	800158c <HAL_GetTick>
 8007a5e:	4602      	mov	r2, r0
 8007a60:	68bb      	ldr	r3, [r7, #8]
 8007a62:	1ad3      	subs	r3, r2, r3
 8007a64:	2b02      	cmp	r3, #2
 8007a66:	d901      	bls.n	8007a6c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007a68:	2303      	movs	r3, #3
 8007a6a:	e086      	b.n	8007b7a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007a6c:	4b45      	ldr	r3, [pc, #276]	; (8007b84 <RCCEx_PLL2_Config+0x15c>)
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d1f0      	bne.n	8007a5a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007a78:	4b42      	ldr	r3, [pc, #264]	; (8007b84 <RCCEx_PLL2_Config+0x15c>)
 8007a7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a7c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	031b      	lsls	r3, r3, #12
 8007a86:	493f      	ldr	r1, [pc, #252]	; (8007b84 <RCCEx_PLL2_Config+0x15c>)
 8007a88:	4313      	orrs	r3, r2
 8007a8a:	628b      	str	r3, [r1, #40]	; 0x28
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	685b      	ldr	r3, [r3, #4]
 8007a90:	3b01      	subs	r3, #1
 8007a92:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	689b      	ldr	r3, [r3, #8]
 8007a9a:	3b01      	subs	r3, #1
 8007a9c:	025b      	lsls	r3, r3, #9
 8007a9e:	b29b      	uxth	r3, r3
 8007aa0:	431a      	orrs	r2, r3
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	68db      	ldr	r3, [r3, #12]
 8007aa6:	3b01      	subs	r3, #1
 8007aa8:	041b      	lsls	r3, r3, #16
 8007aaa:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007aae:	431a      	orrs	r2, r3
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	691b      	ldr	r3, [r3, #16]
 8007ab4:	3b01      	subs	r3, #1
 8007ab6:	061b      	lsls	r3, r3, #24
 8007ab8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007abc:	4931      	ldr	r1, [pc, #196]	; (8007b84 <RCCEx_PLL2_Config+0x15c>)
 8007abe:	4313      	orrs	r3, r2
 8007ac0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007ac2:	4b30      	ldr	r3, [pc, #192]	; (8007b84 <RCCEx_PLL2_Config+0x15c>)
 8007ac4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ac6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	695b      	ldr	r3, [r3, #20]
 8007ace:	492d      	ldr	r1, [pc, #180]	; (8007b84 <RCCEx_PLL2_Config+0x15c>)
 8007ad0:	4313      	orrs	r3, r2
 8007ad2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007ad4:	4b2b      	ldr	r3, [pc, #172]	; (8007b84 <RCCEx_PLL2_Config+0x15c>)
 8007ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ad8:	f023 0220 	bic.w	r2, r3, #32
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	699b      	ldr	r3, [r3, #24]
 8007ae0:	4928      	ldr	r1, [pc, #160]	; (8007b84 <RCCEx_PLL2_Config+0x15c>)
 8007ae2:	4313      	orrs	r3, r2
 8007ae4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007ae6:	4b27      	ldr	r3, [pc, #156]	; (8007b84 <RCCEx_PLL2_Config+0x15c>)
 8007ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007aea:	4a26      	ldr	r2, [pc, #152]	; (8007b84 <RCCEx_PLL2_Config+0x15c>)
 8007aec:	f023 0310 	bic.w	r3, r3, #16
 8007af0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007af2:	4b24      	ldr	r3, [pc, #144]	; (8007b84 <RCCEx_PLL2_Config+0x15c>)
 8007af4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007af6:	4b24      	ldr	r3, [pc, #144]	; (8007b88 <RCCEx_PLL2_Config+0x160>)
 8007af8:	4013      	ands	r3, r2
 8007afa:	687a      	ldr	r2, [r7, #4]
 8007afc:	69d2      	ldr	r2, [r2, #28]
 8007afe:	00d2      	lsls	r2, r2, #3
 8007b00:	4920      	ldr	r1, [pc, #128]	; (8007b84 <RCCEx_PLL2_Config+0x15c>)
 8007b02:	4313      	orrs	r3, r2
 8007b04:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007b06:	4b1f      	ldr	r3, [pc, #124]	; (8007b84 <RCCEx_PLL2_Config+0x15c>)
 8007b08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b0a:	4a1e      	ldr	r2, [pc, #120]	; (8007b84 <RCCEx_PLL2_Config+0x15c>)
 8007b0c:	f043 0310 	orr.w	r3, r3, #16
 8007b10:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8007b12:	683b      	ldr	r3, [r7, #0]
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d106      	bne.n	8007b26 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007b18:	4b1a      	ldr	r3, [pc, #104]	; (8007b84 <RCCEx_PLL2_Config+0x15c>)
 8007b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b1c:	4a19      	ldr	r2, [pc, #100]	; (8007b84 <RCCEx_PLL2_Config+0x15c>)
 8007b1e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007b22:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007b24:	e00f      	b.n	8007b46 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8007b26:	683b      	ldr	r3, [r7, #0]
 8007b28:	2b01      	cmp	r3, #1
 8007b2a:	d106      	bne.n	8007b3a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007b2c:	4b15      	ldr	r3, [pc, #84]	; (8007b84 <RCCEx_PLL2_Config+0x15c>)
 8007b2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b30:	4a14      	ldr	r2, [pc, #80]	; (8007b84 <RCCEx_PLL2_Config+0x15c>)
 8007b32:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007b36:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007b38:	e005      	b.n	8007b46 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007b3a:	4b12      	ldr	r3, [pc, #72]	; (8007b84 <RCCEx_PLL2_Config+0x15c>)
 8007b3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b3e:	4a11      	ldr	r2, [pc, #68]	; (8007b84 <RCCEx_PLL2_Config+0x15c>)
 8007b40:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007b44:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007b46:	4b0f      	ldr	r3, [pc, #60]	; (8007b84 <RCCEx_PLL2_Config+0x15c>)
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	4a0e      	ldr	r2, [pc, #56]	; (8007b84 <RCCEx_PLL2_Config+0x15c>)
 8007b4c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007b50:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007b52:	f7f9 fd1b 	bl	800158c <HAL_GetTick>
 8007b56:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007b58:	e008      	b.n	8007b6c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007b5a:	f7f9 fd17 	bl	800158c <HAL_GetTick>
 8007b5e:	4602      	mov	r2, r0
 8007b60:	68bb      	ldr	r3, [r7, #8]
 8007b62:	1ad3      	subs	r3, r2, r3
 8007b64:	2b02      	cmp	r3, #2
 8007b66:	d901      	bls.n	8007b6c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007b68:	2303      	movs	r3, #3
 8007b6a:	e006      	b.n	8007b7a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007b6c:	4b05      	ldr	r3, [pc, #20]	; (8007b84 <RCCEx_PLL2_Config+0x15c>)
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d0f0      	beq.n	8007b5a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007b78:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b7a:	4618      	mov	r0, r3
 8007b7c:	3710      	adds	r7, #16
 8007b7e:	46bd      	mov	sp, r7
 8007b80:	bd80      	pop	{r7, pc}
 8007b82:	bf00      	nop
 8007b84:	58024400 	.word	0x58024400
 8007b88:	ffff0007 	.word	0xffff0007

08007b8c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007b8c:	b580      	push	{r7, lr}
 8007b8e:	b084      	sub	sp, #16
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	6078      	str	r0, [r7, #4]
 8007b94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007b96:	2300      	movs	r3, #0
 8007b98:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007b9a:	4b53      	ldr	r3, [pc, #332]	; (8007ce8 <RCCEx_PLL3_Config+0x15c>)
 8007b9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b9e:	f003 0303 	and.w	r3, r3, #3
 8007ba2:	2b03      	cmp	r3, #3
 8007ba4:	d101      	bne.n	8007baa <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007ba6:	2301      	movs	r3, #1
 8007ba8:	e099      	b.n	8007cde <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007baa:	4b4f      	ldr	r3, [pc, #316]	; (8007ce8 <RCCEx_PLL3_Config+0x15c>)
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	4a4e      	ldr	r2, [pc, #312]	; (8007ce8 <RCCEx_PLL3_Config+0x15c>)
 8007bb0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007bb4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007bb6:	f7f9 fce9 	bl	800158c <HAL_GetTick>
 8007bba:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007bbc:	e008      	b.n	8007bd0 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8007bbe:	f7f9 fce5 	bl	800158c <HAL_GetTick>
 8007bc2:	4602      	mov	r2, r0
 8007bc4:	68bb      	ldr	r3, [r7, #8]
 8007bc6:	1ad3      	subs	r3, r2, r3
 8007bc8:	2b02      	cmp	r3, #2
 8007bca:	d901      	bls.n	8007bd0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007bcc:	2303      	movs	r3, #3
 8007bce:	e086      	b.n	8007cde <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007bd0:	4b45      	ldr	r3, [pc, #276]	; (8007ce8 <RCCEx_PLL3_Config+0x15c>)
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d1f0      	bne.n	8007bbe <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007bdc:	4b42      	ldr	r3, [pc, #264]	; (8007ce8 <RCCEx_PLL3_Config+0x15c>)
 8007bde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007be0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	051b      	lsls	r3, r3, #20
 8007bea:	493f      	ldr	r1, [pc, #252]	; (8007ce8 <RCCEx_PLL3_Config+0x15c>)
 8007bec:	4313      	orrs	r3, r2
 8007bee:	628b      	str	r3, [r1, #40]	; 0x28
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	685b      	ldr	r3, [r3, #4]
 8007bf4:	3b01      	subs	r3, #1
 8007bf6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	689b      	ldr	r3, [r3, #8]
 8007bfe:	3b01      	subs	r3, #1
 8007c00:	025b      	lsls	r3, r3, #9
 8007c02:	b29b      	uxth	r3, r3
 8007c04:	431a      	orrs	r2, r3
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	68db      	ldr	r3, [r3, #12]
 8007c0a:	3b01      	subs	r3, #1
 8007c0c:	041b      	lsls	r3, r3, #16
 8007c0e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007c12:	431a      	orrs	r2, r3
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	691b      	ldr	r3, [r3, #16]
 8007c18:	3b01      	subs	r3, #1
 8007c1a:	061b      	lsls	r3, r3, #24
 8007c1c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007c20:	4931      	ldr	r1, [pc, #196]	; (8007ce8 <RCCEx_PLL3_Config+0x15c>)
 8007c22:	4313      	orrs	r3, r2
 8007c24:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007c26:	4b30      	ldr	r3, [pc, #192]	; (8007ce8 <RCCEx_PLL3_Config+0x15c>)
 8007c28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c2a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	695b      	ldr	r3, [r3, #20]
 8007c32:	492d      	ldr	r1, [pc, #180]	; (8007ce8 <RCCEx_PLL3_Config+0x15c>)
 8007c34:	4313      	orrs	r3, r2
 8007c36:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007c38:	4b2b      	ldr	r3, [pc, #172]	; (8007ce8 <RCCEx_PLL3_Config+0x15c>)
 8007c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c3c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	699b      	ldr	r3, [r3, #24]
 8007c44:	4928      	ldr	r1, [pc, #160]	; (8007ce8 <RCCEx_PLL3_Config+0x15c>)
 8007c46:	4313      	orrs	r3, r2
 8007c48:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007c4a:	4b27      	ldr	r3, [pc, #156]	; (8007ce8 <RCCEx_PLL3_Config+0x15c>)
 8007c4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c4e:	4a26      	ldr	r2, [pc, #152]	; (8007ce8 <RCCEx_PLL3_Config+0x15c>)
 8007c50:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007c54:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007c56:	4b24      	ldr	r3, [pc, #144]	; (8007ce8 <RCCEx_PLL3_Config+0x15c>)
 8007c58:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007c5a:	4b24      	ldr	r3, [pc, #144]	; (8007cec <RCCEx_PLL3_Config+0x160>)
 8007c5c:	4013      	ands	r3, r2
 8007c5e:	687a      	ldr	r2, [r7, #4]
 8007c60:	69d2      	ldr	r2, [r2, #28]
 8007c62:	00d2      	lsls	r2, r2, #3
 8007c64:	4920      	ldr	r1, [pc, #128]	; (8007ce8 <RCCEx_PLL3_Config+0x15c>)
 8007c66:	4313      	orrs	r3, r2
 8007c68:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007c6a:	4b1f      	ldr	r3, [pc, #124]	; (8007ce8 <RCCEx_PLL3_Config+0x15c>)
 8007c6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c6e:	4a1e      	ldr	r2, [pc, #120]	; (8007ce8 <RCCEx_PLL3_Config+0x15c>)
 8007c70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007c74:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8007c76:	683b      	ldr	r3, [r7, #0]
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d106      	bne.n	8007c8a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007c7c:	4b1a      	ldr	r3, [pc, #104]	; (8007ce8 <RCCEx_PLL3_Config+0x15c>)
 8007c7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c80:	4a19      	ldr	r2, [pc, #100]	; (8007ce8 <RCCEx_PLL3_Config+0x15c>)
 8007c82:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007c86:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007c88:	e00f      	b.n	8007caa <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8007c8a:	683b      	ldr	r3, [r7, #0]
 8007c8c:	2b01      	cmp	r3, #1
 8007c8e:	d106      	bne.n	8007c9e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007c90:	4b15      	ldr	r3, [pc, #84]	; (8007ce8 <RCCEx_PLL3_Config+0x15c>)
 8007c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c94:	4a14      	ldr	r2, [pc, #80]	; (8007ce8 <RCCEx_PLL3_Config+0x15c>)
 8007c96:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007c9a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007c9c:	e005      	b.n	8007caa <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007c9e:	4b12      	ldr	r3, [pc, #72]	; (8007ce8 <RCCEx_PLL3_Config+0x15c>)
 8007ca0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ca2:	4a11      	ldr	r2, [pc, #68]	; (8007ce8 <RCCEx_PLL3_Config+0x15c>)
 8007ca4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007ca8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007caa:	4b0f      	ldr	r3, [pc, #60]	; (8007ce8 <RCCEx_PLL3_Config+0x15c>)
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	4a0e      	ldr	r2, [pc, #56]	; (8007ce8 <RCCEx_PLL3_Config+0x15c>)
 8007cb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007cb4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007cb6:	f7f9 fc69 	bl	800158c <HAL_GetTick>
 8007cba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007cbc:	e008      	b.n	8007cd0 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8007cbe:	f7f9 fc65 	bl	800158c <HAL_GetTick>
 8007cc2:	4602      	mov	r2, r0
 8007cc4:	68bb      	ldr	r3, [r7, #8]
 8007cc6:	1ad3      	subs	r3, r2, r3
 8007cc8:	2b02      	cmp	r3, #2
 8007cca:	d901      	bls.n	8007cd0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007ccc:	2303      	movs	r3, #3
 8007cce:	e006      	b.n	8007cde <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007cd0:	4b05      	ldr	r3, [pc, #20]	; (8007ce8 <RCCEx_PLL3_Config+0x15c>)
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d0f0      	beq.n	8007cbe <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007cdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cde:	4618      	mov	r0, r3
 8007ce0:	3710      	adds	r7, #16
 8007ce2:	46bd      	mov	sp, r7
 8007ce4:	bd80      	pop	{r7, pc}
 8007ce6:	bf00      	nop
 8007ce8:	58024400 	.word	0x58024400
 8007cec:	ffff0007 	.word	0xffff0007

08007cf0 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	b08a      	sub	sp, #40	; 0x28
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	6078      	str	r0, [r7, #4]
  uint32_t ckstr_bits;
  uint32_t syncen_bits;
  SAI_TypeDef *SaiBaseAddress;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d101      	bne.n	8007d02 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 8007cfe:	2301      	movs	r3, #1
 8007d00:	e283      	b.n	800820a <HAL_SAI_Init+0x51a>
  assert_param(IS_SAI_BLOCK_FIRST_BIT(hsai->Init.FirstBit));
  assert_param(IS_SAI_BLOCK_CLOCK_STROBING(hsai->Init.ClockStrobing));
  assert_param(IS_SAI_BLOCK_SYNCHRO(hsai->Init.Synchro));
#if defined(SAI_VER_V2_X) 
  /* SAI Peripheral version depends on STM32H7 device revision ID */
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 8007d02:	f7f9 fc4f 	bl	80015a4 <HAL_GetREVID>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007d0c:	2b01      	cmp	r3, #1
 8007d0e:	d113      	bne.n	8007d38 <HAL_SAI_Init+0x48>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 or SAI4 sub-block A, in master RX mode with free protocol */
#if defined(SAI4)
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	4a94      	ldr	r2, [pc, #592]	; (8007f68 <HAL_SAI_Init+0x278>)
 8007d16:	4293      	cmp	r3, r2
 8007d18:	d004      	beq.n	8007d24 <HAL_SAI_Init+0x34>
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	4a93      	ldr	r2, [pc, #588]	; (8007f6c <HAL_SAI_Init+0x27c>)
 8007d20:	4293      	cmp	r3, r2
 8007d22:	d107      	bne.n	8007d34 <HAL_SAI_Init+0x44>
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	685b      	ldr	r3, [r3, #4]
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 8007d28:	2b01      	cmp	r3, #1
 8007d2a:	d103      	bne.n	8007d34 <HAL_SAI_Init+0x44>
         (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d001      	beq.n	8007d38 <HAL_SAI_Init+0x48>
    {
      return HAL_ERROR;
 8007d34:	2301      	movs	r3, #1
 8007d36:	e268      	b.n	800820a <HAL_SAI_Init+0x51a>
    }
#endif /* SAI4 */
  }

  /* Get the SAI base address according to the SAI handle */
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	4a8a      	ldr	r2, [pc, #552]	; (8007f68 <HAL_SAI_Init+0x278>)
 8007d3e:	4293      	cmp	r3, r2
 8007d40:	d004      	beq.n	8007d4c <HAL_SAI_Init+0x5c>
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	4a8a      	ldr	r2, [pc, #552]	; (8007f70 <HAL_SAI_Init+0x280>)
 8007d48:	4293      	cmp	r3, r2
 8007d4a:	d102      	bne.n	8007d52 <HAL_SAI_Init+0x62>
  {
    SaiBaseAddress = SAI1;
 8007d4c:	4b89      	ldr	r3, [pc, #548]	; (8007f74 <HAL_SAI_Init+0x284>)
 8007d4e:	61bb      	str	r3, [r7, #24]
 8007d50:	e028      	b.n	8007da4 <HAL_SAI_Init+0xb4>
  }
#if defined(SAI2)
  else if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	4a88      	ldr	r2, [pc, #544]	; (8007f78 <HAL_SAI_Init+0x288>)
 8007d58:	4293      	cmp	r3, r2
 8007d5a:	d004      	beq.n	8007d66 <HAL_SAI_Init+0x76>
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	4a86      	ldr	r2, [pc, #536]	; (8007f7c <HAL_SAI_Init+0x28c>)
 8007d62:	4293      	cmp	r3, r2
 8007d64:	d102      	bne.n	8007d6c <HAL_SAI_Init+0x7c>
  {
    SaiBaseAddress = SAI2;
 8007d66:	4b86      	ldr	r3, [pc, #536]	; (8007f80 <HAL_SAI_Init+0x290>)
 8007d68:	61bb      	str	r3, [r7, #24]
 8007d6a:	e01b      	b.n	8007da4 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI2 */
#if defined(SAI3)
  else if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	4a84      	ldr	r2, [pc, #528]	; (8007f84 <HAL_SAI_Init+0x294>)
 8007d72:	4293      	cmp	r3, r2
 8007d74:	d004      	beq.n	8007d80 <HAL_SAI_Init+0x90>
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	4a83      	ldr	r2, [pc, #524]	; (8007f88 <HAL_SAI_Init+0x298>)
 8007d7c:	4293      	cmp	r3, r2
 8007d7e:	d102      	bne.n	8007d86 <HAL_SAI_Init+0x96>
  {
    SaiBaseAddress = SAI3;
 8007d80:	4b82      	ldr	r3, [pc, #520]	; (8007f8c <HAL_SAI_Init+0x29c>)
 8007d82:	61bb      	str	r3, [r7, #24]
 8007d84:	e00e      	b.n	8007da4 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI3 */
#if defined(SAI4)
  else if ((hsai->Instance == SAI4_Block_A) || (hsai->Instance == SAI4_Block_B))
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	4a78      	ldr	r2, [pc, #480]	; (8007f6c <HAL_SAI_Init+0x27c>)
 8007d8c:	4293      	cmp	r3, r2
 8007d8e:	d004      	beq.n	8007d9a <HAL_SAI_Init+0xaa>
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	4a7e      	ldr	r2, [pc, #504]	; (8007f90 <HAL_SAI_Init+0x2a0>)
 8007d96:	4293      	cmp	r3, r2
 8007d98:	d102      	bne.n	8007da0 <HAL_SAI_Init+0xb0>
  {
    SaiBaseAddress = SAI4;
 8007d9a:	4b7e      	ldr	r3, [pc, #504]	; (8007f94 <HAL_SAI_Init+0x2a4>)
 8007d9c:	61bb      	str	r3, [r7, #24]
 8007d9e:	e001      	b.n	8007da4 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI4 */
  else
  {
    return HAL_ERROR;
 8007da0:	2301      	movs	r3, #1
 8007da2:	e232      	b.n	800820a <HAL_SAI_Init+0x51a>
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 8007daa:	b2db      	uxtb	r3, r3
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d106      	bne.n	8007dbe <HAL_SAI_Init+0xce>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	2200      	movs	r2, #0
 8007db4:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8007db8:	6878      	ldr	r0, [r7, #4]
 8007dba:	f7f9 fa17 	bl	80011ec <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if(SAI_Disable(hsai) != HAL_OK)
 8007dbe:	6878      	ldr	r0, [r7, #4]
 8007dc0:	f000 fb0c 	bl	80083dc <SAI_Disable>
 8007dc4:	4603      	mov	r3, r0
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d001      	beq.n	8007dce <HAL_SAI_Init+0xde>
  {
    return HAL_ERROR;
 8007dca:	2301      	movs	r3, #1
 8007dcc:	e21d      	b.n	800820a <HAL_SAI_Init+0x51a>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	2202      	movs	r2, #2
 8007dd2:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	68db      	ldr	r3, [r3, #12]
 8007dda:	2b02      	cmp	r3, #2
 8007ddc:	d00c      	beq.n	8007df8 <HAL_SAI_Init+0x108>
 8007dde:	2b02      	cmp	r3, #2
 8007de0:	d80d      	bhi.n	8007dfe <HAL_SAI_Init+0x10e>
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d002      	beq.n	8007dec <HAL_SAI_Init+0xfc>
 8007de6:	2b01      	cmp	r3, #1
 8007de8:	d003      	beq.n	8007df2 <HAL_SAI_Init+0x102>
 8007dea:	e008      	b.n	8007dfe <HAL_SAI_Init+0x10e>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 8007dec:	2300      	movs	r3, #0
 8007dee:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8007df0:	e008      	b.n	8007e04 <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8007df2:	2310      	movs	r3, #16
 8007df4:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8007df6:	e005      	b.n	8007e04 <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8007df8:	2320      	movs	r3, #32
 8007dfa:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8007dfc:	e002      	b.n	8007e04 <HAL_SAI_Init+0x114>
    default:
      tmpregisterGCR = 0;
 8007dfe:	2300      	movs	r3, #0
 8007e00:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8007e02:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	689b      	ldr	r3, [r3, #8]
 8007e08:	2b05      	cmp	r3, #5
 8007e0a:	d832      	bhi.n	8007e72 <HAL_SAI_Init+0x182>
 8007e0c:	a201      	add	r2, pc, #4	; (adr r2, 8007e14 <HAL_SAI_Init+0x124>)
 8007e0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e12:	bf00      	nop
 8007e14:	08007e2d 	.word	0x08007e2d
 8007e18:	08007e33 	.word	0x08007e33
 8007e1c:	08007e3b 	.word	0x08007e3b
 8007e20:	08007e43 	.word	0x08007e43
 8007e24:	08007e53 	.word	0x08007e53
 8007e28:	08007e63 	.word	0x08007e63
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 8007e2c:	2300      	movs	r3, #0
 8007e2e:	61fb      	str	r3, [r7, #28]
      break;
 8007e30:	e022      	b.n	8007e78 <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8007e32:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007e36:	61fb      	str	r3, [r7, #28]
      break;
 8007e38:	e01e      	b.n	8007e78 <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8007e3a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007e3e:	61fb      	str	r3, [r7, #28]
      break;
 8007e40:	e01a      	b.n	8007e78 <HAL_SAI_Init+0x188>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8007e42:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007e46:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8007e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e4a:	f043 0301 	orr.w	r3, r3, #1
 8007e4e:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8007e50:	e012      	b.n	8007e78 <HAL_SAI_Init+0x188>
#endif /* SAI2 */
#if defined(SAI3)
    case SAI_SYNCHRONOUS_EXT_SAI3 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8007e52:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007e56:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
 8007e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e5a:	f043 0302 	orr.w	r3, r3, #2
 8007e5e:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8007e60:	e00a      	b.n	8007e78 <HAL_SAI_Init+0x188>
#endif /* SAI3 */
#if defined(SAI4)
    case SAI_SYNCHRONOUS_EXT_SAI4 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8007e62:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007e66:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
 8007e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e6a:	f043 0303 	orr.w	r3, r3, #3
 8007e6e:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8007e70:	e002      	b.n	8007e78 <HAL_SAI_Init+0x188>
#endif /* SAI4 */
    default:
      syncen_bits = 0;
 8007e72:	2300      	movs	r3, #0
 8007e74:	61fb      	str	r3, [r7, #28]
      break;
 8007e76:	bf00      	nop
  }

  /* Set the SAI Block Synchro Configuration */
  SaiBaseAddress->GCR = tmpregisterGCR;
 8007e78:	69bb      	ldr	r3, [r7, #24]
 8007e7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e7c:	601a      	str	r2, [r3, #0]

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	6a1b      	ldr	r3, [r3, #32]
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	f000 80ba 	beq.w	8007ffc <HAL_SAI_Init+0x30c>
  {
    uint32_t freq = 0;
 8007e88:	2300      	movs	r3, #0
 8007e8a:	617b      	str	r3, [r7, #20]
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	4a35      	ldr	r2, [pc, #212]	; (8007f68 <HAL_SAI_Init+0x278>)
 8007e92:	4293      	cmp	r3, r2
 8007e94:	d004      	beq.n	8007ea0 <HAL_SAI_Init+0x1b0>
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	4a35      	ldr	r2, [pc, #212]	; (8007f70 <HAL_SAI_Init+0x280>)
 8007e9c:	4293      	cmp	r3, r2
 8007e9e:	d104      	bne.n	8007eaa <HAL_SAI_Init+0x1ba>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8007ea0:	f44f 7080 	mov.w	r0, #256	; 0x100
 8007ea4:	f7fe fcde 	bl	8006864 <HAL_RCCEx_GetPeriphCLKFreq>
 8007ea8:	6178      	str	r0, [r7, #20]
    }

#if defined(SAI2)
#if defined(RCC_PERIPHCLK_SAI2)
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	4a32      	ldr	r2, [pc, #200]	; (8007f78 <HAL_SAI_Init+0x288>)
 8007eb0:	4293      	cmp	r3, r2
 8007eb2:	d004      	beq.n	8007ebe <HAL_SAI_Init+0x1ce>
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	4a30      	ldr	r2, [pc, #192]	; (8007f7c <HAL_SAI_Init+0x28c>)
 8007eba:	4293      	cmp	r3, r2
 8007ebc:	d104      	bne.n	8007ec8 <HAL_SAI_Init+0x1d8>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8007ebe:	f44f 7000 	mov.w	r0, #512	; 0x200
 8007ec2:	f7fe fccf 	bl	8006864 <HAL_RCCEx_GetPeriphCLKFreq>
 8007ec6:	6178      	str	r0, [r7, #20]
    }
#endif /* RCC_PERIPHCLK_SAI2 */
#endif /* SAI2 */

#if defined(SAI3)
    if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	4a2d      	ldr	r2, [pc, #180]	; (8007f84 <HAL_SAI_Init+0x294>)
 8007ece:	4293      	cmp	r3, r2
 8007ed0:	d004      	beq.n	8007edc <HAL_SAI_Init+0x1ec>
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	4a2c      	ldr	r2, [pc, #176]	; (8007f88 <HAL_SAI_Init+0x298>)
 8007ed8:	4293      	cmp	r3, r2
 8007eda:	d104      	bne.n	8007ee6 <HAL_SAI_Init+0x1f6>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
 8007edc:	f44f 7000 	mov.w	r0, #512	; 0x200
 8007ee0:	f7fe fcc0 	bl	8006864 <HAL_RCCEx_GetPeriphCLKFreq>
 8007ee4:	6178      	str	r0, [r7, #20]
    }
#endif /* SAI3 */
#if defined(SAI4)
    if (hsai->Instance == SAI4_Block_A)
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	4a20      	ldr	r2, [pc, #128]	; (8007f6c <HAL_SAI_Init+0x27c>)
 8007eec:	4293      	cmp	r3, r2
 8007eee:	d104      	bne.n	8007efa <HAL_SAI_Init+0x20a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
 8007ef0:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8007ef4:	f7fe fcb6 	bl	8006864 <HAL_RCCEx_GetPeriphCLKFreq>
 8007ef8:	6178      	str	r0, [r7, #20]
    }
    if (hsai->Instance == SAI4_Block_B)
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	4a24      	ldr	r2, [pc, #144]	; (8007f90 <HAL_SAI_Init+0x2a0>)
 8007f00:	4293      	cmp	r3, r2
 8007f02:	d104      	bne.n	8007f0e <HAL_SAI_Init+0x21e>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
 8007f04:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8007f08:	f7fe fcac 	bl	8006864 <HAL_RCCEx_GetPeriphCLKFreq>
 8007f0c:	6178      	str	r0, [r7, #20]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	699b      	ldr	r3, [r3, #24]
 8007f12:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007f16:	d120      	bne.n	8007f5a <HAL_SAI_Init+0x26a>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f1c:	2b04      	cmp	r3, #4
 8007f1e:	d102      	bne.n	8007f26 <HAL_SAI_Init+0x236>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = 64U;
 8007f20:	2340      	movs	r3, #64	; 0x40
 8007f22:	60fb      	str	r3, [r7, #12]
 8007f24:	e00a      	b.n	8007f3c <HAL_SAI_Init+0x24c>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f2a:	2b08      	cmp	r3, #8
 8007f2c:	d103      	bne.n	8007f36 <HAL_SAI_Init+0x246>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = 256U;
 8007f2e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007f32:	60fb      	str	r3, [r7, #12]
 8007f34:	e002      	b.n	8007f3c <HAL_SAI_Init+0x24c>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f3a:	60fb      	str	r3, [r7, #12]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 8007f3c:	697a      	ldr	r2, [r7, #20]
 8007f3e:	4613      	mov	r3, r2
 8007f40:	009b      	lsls	r3, r3, #2
 8007f42:	4413      	add	r3, r2
 8007f44:	005b      	lsls	r3, r3, #1
 8007f46:	4619      	mov	r1, r3
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	6a1b      	ldr	r3, [r3, #32]
 8007f4c:	68fa      	ldr	r2, [r7, #12]
 8007f4e:	fb02 f303 	mul.w	r3, r2, r3
 8007f52:	fbb1 f3f3 	udiv	r3, r1, r3
 8007f56:	613b      	str	r3, [r7, #16]
 8007f58:	e02f      	b.n	8007fba <HAL_SAI_Init+0x2ca>
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f5e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007f62:	d119      	bne.n	8007f98 <HAL_SAI_Init+0x2a8>
 8007f64:	2302      	movs	r3, #2
 8007f66:	e018      	b.n	8007f9a <HAL_SAI_Init+0x2aa>
 8007f68:	40015804 	.word	0x40015804
 8007f6c:	58005404 	.word	0x58005404
 8007f70:	40015824 	.word	0x40015824
 8007f74:	40015800 	.word	0x40015800
 8007f78:	40015c04 	.word	0x40015c04
 8007f7c:	40015c24 	.word	0x40015c24
 8007f80:	40015c00 	.word	0x40015c00
 8007f84:	40016004 	.word	0x40016004
 8007f88:	40016024 	.word	0x40016024
 8007f8c:	40016000 	.word	0x40016000
 8007f90:	58005424 	.word	0x58005424
 8007f94:	58005400 	.word	0x58005400
 8007f98:	2301      	movs	r3, #1
 8007f9a:	60bb      	str	r3, [r7, #8]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 8007f9c:	697a      	ldr	r2, [r7, #20]
 8007f9e:	4613      	mov	r3, r2
 8007fa0:	009b      	lsls	r3, r3, #2
 8007fa2:	4413      	add	r3, r2
 8007fa4:	005b      	lsls	r3, r3, #1
 8007fa6:	4619      	mov	r1, r3
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	6a1b      	ldr	r3, [r3, #32]
 8007fac:	68ba      	ldr	r2, [r7, #8]
 8007fae:	fb02 f303 	mul.w	r3, r2, r3
 8007fb2:	021b      	lsls	r3, r3, #8
 8007fb4:	fbb1 f3f3 	udiv	r3, r1, r3
 8007fb8:	613b      	str	r3, [r7, #16]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 8007fba:	693b      	ldr	r3, [r7, #16]
 8007fbc:	4a95      	ldr	r2, [pc, #596]	; (8008214 <HAL_SAI_Init+0x524>)
 8007fbe:	fba2 2303 	umull	r2, r3, r2, r3
 8007fc2:	08da      	lsrs	r2, r3, #3
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 8007fc8:	6939      	ldr	r1, [r7, #16]
 8007fca:	4b92      	ldr	r3, [pc, #584]	; (8008214 <HAL_SAI_Init+0x524>)
 8007fcc:	fba3 2301 	umull	r2, r3, r3, r1
 8007fd0:	08da      	lsrs	r2, r3, #3
 8007fd2:	4613      	mov	r3, r2
 8007fd4:	009b      	lsls	r3, r3, #2
 8007fd6:	4413      	add	r3, r2
 8007fd8:	005b      	lsls	r3, r3, #1
 8007fda:	1aca      	subs	r2, r1, r3
 8007fdc:	2a08      	cmp	r2, #8
 8007fde:	d904      	bls.n	8007fea <HAL_SAI_Init+0x2fa>
    {
      hsai->Init.Mckdiv += 1U;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fe4:	1c5a      	adds	r2, r3, #1
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007fee:	2b04      	cmp	r3, #4
 8007ff0:	d104      	bne.n	8007ffc <HAL_SAI_Init+0x30c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ff6:	085a      	lsrs	r2, r3, #1
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	685b      	ldr	r3, [r3, #4]
 8008000:	2b00      	cmp	r3, #0
 8008002:	d003      	beq.n	800800c <HAL_SAI_Init+0x31c>
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	685b      	ldr	r3, [r3, #4]
 8008008:	2b02      	cmp	r3, #2
 800800a:	d109      	bne.n	8008020 <HAL_SAI_Init+0x330>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008010:	2b01      	cmp	r3, #1
 8008012:	d101      	bne.n	8008018 <HAL_SAI_Init+0x328>
 8008014:	2300      	movs	r3, #0
 8008016:	e001      	b.n	800801c <HAL_SAI_Init+0x32c>
 8008018:	f44f 7300 	mov.w	r3, #512	; 0x200
 800801c:	623b      	str	r3, [r7, #32]
 800801e:	e008      	b.n	8008032 <HAL_SAI_Init+0x342>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008024:	2b01      	cmp	r3, #1
 8008026:	d102      	bne.n	800802e <HAL_SAI_Init+0x33e>
 8008028:	f44f 7300 	mov.w	r3, #512	; 0x200
 800802c:	e000      	b.n	8008030 <HAL_SAI_Init+0x340>
 800802e:	2300      	movs	r3, #0
 8008030:	623b      	str	r3, [r7, #32]

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
#if defined(SAI_VER_V2_X) /* SAI Peripheral version depends on STM32H7 device revision ID */

  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 8008032:	f7f9 fab7 	bl	80015a4 <HAL_GetREVID>
 8008036:	4603      	mov	r3, r0
 8008038:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800803c:	d331      	bcc.n	80080a2 <HAL_SAI_Init+0x3b2>
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	6819      	ldr	r1, [r3, #0]
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681a      	ldr	r2, [r3, #0]
 8008048:	4b73      	ldr	r3, [pc, #460]	; (8008218 <HAL_SAI_Init+0x528>)
 800804a:	400b      	ands	r3, r1
 800804c:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                             SAI_xCR1_MCKEN);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	6819      	ldr	r1, [r3, #0]
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	685a      	ldr	r2, [r3, #4]
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800805c:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008062:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008068:	431a      	orrs	r2, r3
 800806a:	6a3b      	ldr	r3, [r7, #32]
 800806c:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 800806e:	69fb      	ldr	r3, [r7, #28]
 8008070:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                            ckstr_bits | syncen_bits |                             \
 8008076:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	695b      	ldr	r3, [r3, #20]
 800807c:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8008082:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008088:	051b      	lsls	r3, r3, #20
 800808a:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8008090:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	691b      	ldr	r3, [r3, #16]
 8008096:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	430a      	orrs	r2, r1
 800809e:	601a      	str	r2, [r3, #0]
 80080a0:	e02d      	b.n	80080fe <HAL_SAI_Init+0x40e>
  }
  else /* STM32H7xx Rev.Y */
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	6819      	ldr	r1, [r3, #0]
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681a      	ldr	r2, [r3, #0]
 80080ac:	4b5b      	ldr	r3, [pc, #364]	; (800821c <HAL_SAI_Init+0x52c>)
 80080ae:	400b      	ands	r3, r1
 80080b0:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	6819      	ldr	r1, [r3, #0]
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	685a      	ldr	r2, [r3, #4]
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080c0:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80080c6:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80080cc:	431a      	orrs	r2, r3
 80080ce:	6a3b      	ldr	r3, [r7, #32]
 80080d0:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 80080d2:	69fb      	ldr	r3, [r7, #28]
 80080d4:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                            ckstr_bits | syncen_bits |                             \
 80080da:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	695b      	ldr	r3, [r3, #20]
 80080e0:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80080e6:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080ec:	051b      	lsls	r3, r3, #20
 80080ee:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling);
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 80080f4:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	430a      	orrs	r2, r1
 80080fc:	601a      	str	r2, [r3, #0]
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
#endif /* SAI_VER_V2_X */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	6859      	ldr	r1, [r3, #4]
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681a      	ldr	r2, [r3, #0]
 8008108:	4b45      	ldr	r3, [pc, #276]	; (8008220 <HAL_SAI_Init+0x530>)
 800810a:	400b      	ands	r3, r1
 800810c:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	6859      	ldr	r1, [r3, #4]
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	69da      	ldr	r2, [r3, #28]
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800811c:	431a      	orrs	r2, r3
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008122:	431a      	orrs	r2, r3
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	430a      	orrs	r2, r1
 800812a:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	6899      	ldr	r1, [r3, #8]
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681a      	ldr	r2, [r3, #0]
 8008136:	4b3b      	ldr	r3, [pc, #236]	; (8008224 <HAL_SAI_Init+0x534>)
 8008138:	400b      	ands	r3, r1
 800813a:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	6899      	ldr	r1, [r3, #8]
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008146:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800814c:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                           hsai->FrameInit.FSOffset |
 8008152:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                           hsai->FrameInit.FSDefinition |
 8008158:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800815e:	3b01      	subs	r3, #1
 8008160:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8008162:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	430a      	orrs	r2, r1
 800816a:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	68d9      	ldr	r1, [r3, #12]
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681a      	ldr	r2, [r3, #0]
 8008176:	f24f 0320 	movw	r3, #61472	; 0xf020
 800817a:	400b      	ands	r3, r1
 800817c:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	68d9      	ldr	r1, [r3, #12]
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800818c:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008192:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8008194:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800819a:	3b01      	subs	r3, #1
 800819c:	021b      	lsls	r3, r3, #8
 800819e:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	430a      	orrs	r2, r1
 80081a6:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
#if defined(SAI4)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	4a1e      	ldr	r2, [pc, #120]	; (8008228 <HAL_SAI_Init+0x538>)
 80081ae:	4293      	cmp	r3, r2
 80081b0:	d004      	beq.n	80081bc <HAL_SAI_Init+0x4cc>
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	4a1d      	ldr	r2, [pc, #116]	; (800822c <HAL_SAI_Init+0x53c>)
 80081b8:	4293      	cmp	r3, r2
 80081ba:	d119      	bne.n	80081f0 <HAL_SAI_Init+0x500>
#else
  if (hsai->Instance == SAI1_Block_A)
#endif /* SAI4 */
  {
    /* Disable PDM interface */
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 80081bc:	69bb      	ldr	r3, [r7, #24]
 80081be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081c0:	f023 0201 	bic.w	r2, r3, #1
 80081c4:	69bb      	ldr	r3, [r7, #24]
 80081c6:	645a      	str	r2, [r3, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80081ce:	2b01      	cmp	r3, #1
 80081d0:	d10e      	bne.n	80081f0 <HAL_SAI_Init+0x500>
    {
      /* Configure and enable PDM interface */
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081da:	3b01      	subs	r3, #1
 80081dc:	011b      	lsls	r3, r3, #4
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 80081de:	431a      	orrs	r2, r3
 80081e0:	69bb      	ldr	r3, [r7, #24]
 80081e2:	645a      	str	r2, [r3, #68]	; 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
 80081e4:	69bb      	ldr	r3, [r7, #24]
 80081e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081e8:	f043 0201 	orr.w	r2, r3, #1
 80081ec:	69bb      	ldr	r3, [r7, #24]
 80081ee:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	2200      	movs	r2, #0
 80081f4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	2201      	movs	r2, #1
 80081fc:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	2200      	movs	r2, #0
 8008204:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

  return HAL_OK;
 8008208:	2300      	movs	r3, #0
}
 800820a:	4618      	mov	r0, r3
 800820c:	3728      	adds	r7, #40	; 0x28
 800820e:	46bd      	mov	sp, r7
 8008210:	bd80      	pop	{r7, pc}
 8008212:	bf00      	nop
 8008214:	cccccccd 	.word	0xcccccccd
 8008218:	f005c010 	.word	0xf005c010
 800821c:	f805c010 	.word	0xf805c010
 8008220:	ffff1ff0 	.word	0xffff1ff0
 8008224:	fff88000 	.word	0xfff88000
 8008228:	40015804 	.word	0x40015804
 800822c:	58005404 	.word	0x58005404

08008230 <HAL_SAI_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Receive_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 8008230:	b580      	push	{r7, lr}
 8008232:	b084      	sub	sp, #16
 8008234:	af00      	add	r7, sp, #0
 8008236:	60f8      	str	r0, [r7, #12]
 8008238:	60b9      	str	r1, [r7, #8]
 800823a:	4613      	mov	r3, r2
 800823c:	80fb      	strh	r3, [r7, #6]

  if ((pData == NULL) || (Size == 0U))
 800823e:	68bb      	ldr	r3, [r7, #8]
 8008240:	2b00      	cmp	r3, #0
 8008242:	d002      	beq.n	800824a <HAL_SAI_Receive_DMA+0x1a>
 8008244:	88fb      	ldrh	r3, [r7, #6]
 8008246:	2b00      	cmp	r3, #0
 8008248:	d101      	bne.n	800824e <HAL_SAI_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 800824a:	2301      	movs	r3, #1
 800824c:	e079      	b.n	8008342 <HAL_SAI_Receive_DMA+0x112>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 8008254:	b2db      	uxtb	r3, r3
 8008256:	2b01      	cmp	r3, #1
 8008258:	d172      	bne.n	8008340 <HAL_SAI_Receive_DMA+0x110>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8008260:	2b01      	cmp	r3, #1
 8008262:	d101      	bne.n	8008268 <HAL_SAI_Receive_DMA+0x38>
 8008264:	2302      	movs	r3, #2
 8008266:	e06c      	b.n	8008342 <HAL_SAI_Receive_DMA+0x112>
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	2201      	movs	r2, #1
 800826c:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    hsai->pBuffPtr = pData;
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	68ba      	ldr	r2, [r7, #8]
 8008274:	679a      	str	r2, [r3, #120]	; 0x78
    hsai->XferSize = Size;
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	88fa      	ldrh	r2, [r7, #6]
 800827a:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
    hsai->XferCount = Size;
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	88fa      	ldrh	r2, [r7, #6]
 8008282:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	2200      	movs	r2, #0
 800828a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	2222      	movs	r2, #34	; 0x22
 8008292:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

    /* Set the SAI Rx DMA Half transfer complete callback */
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800829c:	4a2b      	ldr	r2, [pc, #172]	; (800834c <HAL_SAI_Receive_DMA+0x11c>)
 800829e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the SAI Rx DMA transfer complete callback */
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80082a6:	4a2a      	ldr	r2, [pc, #168]	; (8008350 <HAL_SAI_Receive_DMA+0x120>)
 80082a8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80082b0:	4a28      	ldr	r2, [pc, #160]	; (8008354 <HAL_SAI_Receive_DMA+0x124>)
 80082b2:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Rx abort callback */
    hsai->hdmarx->XferAbortCallback = NULL;
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80082ba:	2200      	movs	r2, #0
 80082bc:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the Rx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	331c      	adds	r3, #28
 80082ca:	4619      	mov	r1, r3
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80082d0:	461a      	mov	r2, r3
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 80082d8:	f7f9 fec6 	bl	8002068 <HAL_DMA_Start_IT>
 80082dc:	4603      	mov	r3, r0
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d005      	beq.n	80082ee <HAL_SAI_Receive_DMA+0xbe>
    {
      __HAL_UNLOCK(hsai);
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	2200      	movs	r2, #0
 80082e6:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      return  HAL_ERROR;
 80082ea:	2301      	movs	r3, #1
 80082ec:	e029      	b.n	8008342 <HAL_SAI_Receive_DMA+0x112>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 80082ee:	2100      	movs	r1, #0
 80082f0:	68f8      	ldr	r0, [r7, #12]
 80082f2:	f000 f83b 	bl	800836c <SAI_InterruptFlag>
 80082f6:	4601      	mov	r1, r0
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	691a      	ldr	r2, [r3, #16]
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	430a      	orrs	r2, r1
 8008304:	611a      	str	r2, [r3, #16]

    /* Enable SAI Rx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	681a      	ldr	r2, [r3, #0]
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8008314:	601a      	str	r2, [r3, #0]

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008320:	2b00      	cmp	r3, #0
 8008322:	d107      	bne.n	8008334 <HAL_SAI_Receive_DMA+0x104>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	681a      	ldr	r2, [r3, #0]
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8008332:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	2200      	movs	r2, #0
 8008338:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    return HAL_OK;
 800833c:	2300      	movs	r3, #0
 800833e:	e000      	b.n	8008342 <HAL_SAI_Receive_DMA+0x112>
  }
  else
  {
    return HAL_BUSY;
 8008340:	2302      	movs	r3, #2
  }
}
 8008342:	4618      	mov	r0, r3
 8008344:	3710      	adds	r7, #16
 8008346:	46bd      	mov	sp, r7
 8008348:	bd80      	pop	{r7, pc}
 800834a:	bf00      	nop
 800834c:	080084b1 	.word	0x080084b1
 8008350:	08008451 	.word	0x08008451
 8008354:	080084cd 	.word	0x080084cd

08008358 <HAL_SAI_ErrorCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 8008358:	b480      	push	{r7}
 800835a:	b083      	sub	sp, #12
 800835c:	af00      	add	r7, sp, #0
 800835e:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_ErrorCallback could be implemented in the user file
   */
}
 8008360:	bf00      	nop
 8008362:	370c      	adds	r7, #12
 8008364:	46bd      	mov	sp, r7
 8008366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800836a:	4770      	bx	lr

0800836c <SAI_InterruptFlag>:
  *              the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
  */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, SAI_ModeTypedef mode)
{
 800836c:	b480      	push	{r7}
 800836e:	b085      	sub	sp, #20
 8008370:	af00      	add	r7, sp, #0
 8008372:	6078      	str	r0, [r7, #4]
 8008374:	460b      	mov	r3, r1
 8008376:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 8008378:	2301      	movs	r3, #1
 800837a:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 800837c:	78fb      	ldrb	r3, [r7, #3]
 800837e:	2b01      	cmp	r3, #1
 8008380:	d103      	bne.n	800838a <SAI_InterruptFlag+0x1e>
  {
    tmpIT |= SAI_IT_FREQ;
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	f043 0308 	orr.w	r3, r3, #8
 8008388:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800838e:	2b08      	cmp	r3, #8
 8008390:	d10b      	bne.n	80083aa <SAI_InterruptFlag+0x3e>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8008396:	2b03      	cmp	r3, #3
 8008398:	d003      	beq.n	80083a2 <SAI_InterruptFlag+0x36>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	685b      	ldr	r3, [r3, #4]
 800839e:	2b01      	cmp	r3, #1
 80083a0:	d103      	bne.n	80083aa <SAI_InterruptFlag+0x3e>
  {
    tmpIT |= SAI_IT_CNRDY;
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	f043 0310 	orr.w	r3, r3, #16
 80083a8:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	685b      	ldr	r3, [r3, #4]
 80083ae:	2b03      	cmp	r3, #3
 80083b0:	d003      	beq.n	80083ba <SAI_InterruptFlag+0x4e>
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	685b      	ldr	r3, [r3, #4]
 80083b6:	2b02      	cmp	r3, #2
 80083b8:	d104      	bne.n	80083c4 <SAI_InterruptFlag+0x58>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80083c0:	60fb      	str	r3, [r7, #12]
 80083c2:	e003      	b.n	80083cc <SAI_InterruptFlag+0x60>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	f043 0304 	orr.w	r3, r3, #4
 80083ca:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 80083cc:	68fb      	ldr	r3, [r7, #12]
}
 80083ce:	4618      	mov	r0, r3
 80083d0:	3714      	adds	r7, #20
 80083d2:	46bd      	mov	sp, r7
 80083d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d8:	4770      	bx	lr
	...

080083dc <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 80083dc:	b480      	push	{r7}
 80083de:	b085      	sub	sp, #20
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 80083e4:	4b18      	ldr	r3, [pc, #96]	; (8008448 <SAI_Disable+0x6c>)
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	4a18      	ldr	r2, [pc, #96]	; (800844c <SAI_Disable+0x70>)
 80083ea:	fba2 2303 	umull	r2, r3, r2, r3
 80083ee:	0b1b      	lsrs	r3, r3, #12
 80083f0:	009b      	lsls	r3, r3, #2
 80083f2:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 80083f4:	2300      	movs	r3, #0
 80083f6:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	681a      	ldr	r2, [r3, #0]
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8008406:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	2b00      	cmp	r3, #0
 800840c:	d10a      	bne.n	8008424 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008414:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      status = HAL_TIMEOUT;
 800841e:	2303      	movs	r3, #3
 8008420:	72fb      	strb	r3, [r7, #11]
      break;
 8008422:	e009      	b.n	8008438 <SAI_Disable+0x5c>
    }
    count--;
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	3b01      	subs	r3, #1
 8008428:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008434:	2b00      	cmp	r3, #0
 8008436:	d1e7      	bne.n	8008408 <SAI_Disable+0x2c>

  return status;
 8008438:	7afb      	ldrb	r3, [r7, #11]
}
 800843a:	4618      	mov	r0, r3
 800843c:	3714      	adds	r7, #20
 800843e:	46bd      	mov	sp, r7
 8008440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008444:	4770      	bx	lr
 8008446:	bf00      	nop
 8008448:	24000400 	.word	0x24000400
 800844c:	95cbec1b 	.word	0x95cbec1b

08008450 <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8008450:	b580      	push	{r7, lr}
 8008452:	b084      	sub	sp, #16
 8008454:	af00      	add	r7, sp, #0
 8008456:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800845c:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	69db      	ldr	r3, [r3, #28]
 8008462:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008466:	d01c      	beq.n	80084a2 <SAI_DMARxCplt+0x52>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	681a      	ldr	r2, [r3, #0]
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8008476:	601a      	str	r2, [r3, #0]
    hsai->XferCount = 0;
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	2200      	movs	r2, #0
 800847c:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8008480:	2100      	movs	r1, #0
 8008482:	68f8      	ldr	r0, [r7, #12]
 8008484:	f7ff ff72 	bl	800836c <SAI_InterruptFlag>
 8008488:	4603      	mov	r3, r0
 800848a:	43d9      	mvns	r1, r3
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	691a      	ldr	r2, [r3, #16]
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	400a      	ands	r2, r1
 8008498:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	2201      	movs	r2, #1
 800849e:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 80084a2:	68f8      	ldr	r0, [r7, #12]
 80084a4:	f7f8 fd60 	bl	8000f68 <HAL_SAI_RxCpltCallback>
#endif
}
 80084a8:	bf00      	nop
 80084aa:	3710      	adds	r7, #16
 80084ac:	46bd      	mov	sp, r7
 80084ae:	bd80      	pop	{r7, pc}

080084b0 <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80084b0:	b580      	push	{r7, lr}
 80084b2:	b084      	sub	sp, #16
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084bc:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 80084be:	68f8      	ldr	r0, [r7, #12]
 80084c0:	f7f8 fd42 	bl	8000f48 <HAL_SAI_RxHalfCpltCallback>
#endif
}
 80084c4:	bf00      	nop
 80084c6:	3710      	adds	r7, #16
 80084c8:	46bd      	mov	sp, r7
 80084ca:	bd80      	pop	{r7, pc}

080084cc <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 80084cc:	b580      	push	{r7, lr}
 80084ce:	b084      	sub	sp, #16
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084d8:	60fb      	str	r3, [r7, #12]

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 80084da:	6878      	ldr	r0, [r7, #4]
 80084dc:	f7fb fcba 	bl	8003e54 <HAL_DMA_GetError>
 80084e0:	4603      	mov	r3, r0
 80084e2:	2b02      	cmp	r3, #2
 80084e4:	d01d      	beq.n	8008522 <SAI_DMAError+0x56>
  {
    /* Set SAI error code */
    hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80084ec:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	681a      	ldr	r2, [r3, #0]
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8008504:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral */
    /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
    (void) SAI_Disable(hsai);
 8008506:	68f8      	ldr	r0, [r7, #12]
 8008508:	f7ff ff68 	bl	80083dc <SAI_Disable>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	2201      	movs	r2, #1
 8008510:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	2200      	movs	r2, #0
 8008518:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

    /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
    hsai->ErrorCallback(hsai);
#else
    HAL_SAI_ErrorCallback(hsai);
 800851c:	68f8      	ldr	r0, [r7, #12]
 800851e:	f7ff ff1b 	bl	8008358 <HAL_SAI_ErrorCallback>
#endif
  }
}
 8008522:	bf00      	nop
 8008524:	3710      	adds	r7, #16
 8008526:	46bd      	mov	sp, r7
 8008528:	bd80      	pop	{r7, pc}

0800852a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800852a:	b580      	push	{r7, lr}
 800852c:	b082      	sub	sp, #8
 800852e:	af00      	add	r7, sp, #0
 8008530:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	2b00      	cmp	r3, #0
 8008536:	d101      	bne.n	800853c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008538:	2301      	movs	r3, #1
 800853a:	e049      	b.n	80085d0 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008542:	b2db      	uxtb	r3, r3
 8008544:	2b00      	cmp	r3, #0
 8008546:	d106      	bne.n	8008556 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	2200      	movs	r2, #0
 800854c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008550:	6878      	ldr	r0, [r7, #4]
 8008552:	f7f8 fd71 	bl	8001038 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	2202      	movs	r2, #2
 800855a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681a      	ldr	r2, [r3, #0]
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	3304      	adds	r3, #4
 8008566:	4619      	mov	r1, r3
 8008568:	4610      	mov	r0, r2
 800856a:	f000 fb0f 	bl	8008b8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	2201      	movs	r2, #1
 8008572:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	2201      	movs	r2, #1
 800857a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	2201      	movs	r2, #1
 8008582:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	2201      	movs	r2, #1
 800858a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	2201      	movs	r2, #1
 8008592:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	2201      	movs	r2, #1
 800859a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	2201      	movs	r2, #1
 80085a2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	2201      	movs	r2, #1
 80085aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	2201      	movs	r2, #1
 80085b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	2201      	movs	r2, #1
 80085ba:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	2201      	movs	r2, #1
 80085c2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	2201      	movs	r2, #1
 80085ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80085ce:	2300      	movs	r3, #0
}
 80085d0:	4618      	mov	r0, r3
 80085d2:	3708      	adds	r7, #8
 80085d4:	46bd      	mov	sp, r7
 80085d6:	bd80      	pop	{r7, pc}

080085d8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80085d8:	b480      	push	{r7}
 80085da:	b085      	sub	sp, #20
 80085dc:	af00      	add	r7, sp, #0
 80085de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80085e6:	b2db      	uxtb	r3, r3
 80085e8:	2b01      	cmp	r3, #1
 80085ea:	d001      	beq.n	80085f0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80085ec:	2301      	movs	r3, #1
 80085ee:	e04f      	b.n	8008690 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	2202      	movs	r2, #2
 80085f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	68da      	ldr	r2, [r3, #12]
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	f042 0201 	orr.w	r2, r2, #1
 8008606:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	4a23      	ldr	r2, [pc, #140]	; (800869c <HAL_TIM_Base_Start_IT+0xc4>)
 800860e:	4293      	cmp	r3, r2
 8008610:	d01d      	beq.n	800864e <HAL_TIM_Base_Start_IT+0x76>
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800861a:	d018      	beq.n	800864e <HAL_TIM_Base_Start_IT+0x76>
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	4a1f      	ldr	r2, [pc, #124]	; (80086a0 <HAL_TIM_Base_Start_IT+0xc8>)
 8008622:	4293      	cmp	r3, r2
 8008624:	d013      	beq.n	800864e <HAL_TIM_Base_Start_IT+0x76>
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	4a1e      	ldr	r2, [pc, #120]	; (80086a4 <HAL_TIM_Base_Start_IT+0xcc>)
 800862c:	4293      	cmp	r3, r2
 800862e:	d00e      	beq.n	800864e <HAL_TIM_Base_Start_IT+0x76>
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	4a1c      	ldr	r2, [pc, #112]	; (80086a8 <HAL_TIM_Base_Start_IT+0xd0>)
 8008636:	4293      	cmp	r3, r2
 8008638:	d009      	beq.n	800864e <HAL_TIM_Base_Start_IT+0x76>
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	4a1b      	ldr	r2, [pc, #108]	; (80086ac <HAL_TIM_Base_Start_IT+0xd4>)
 8008640:	4293      	cmp	r3, r2
 8008642:	d004      	beq.n	800864e <HAL_TIM_Base_Start_IT+0x76>
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	4a19      	ldr	r2, [pc, #100]	; (80086b0 <HAL_TIM_Base_Start_IT+0xd8>)
 800864a:	4293      	cmp	r3, r2
 800864c:	d115      	bne.n	800867a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	689a      	ldr	r2, [r3, #8]
 8008654:	4b17      	ldr	r3, [pc, #92]	; (80086b4 <HAL_TIM_Base_Start_IT+0xdc>)
 8008656:	4013      	ands	r3, r2
 8008658:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	2b06      	cmp	r3, #6
 800865e:	d015      	beq.n	800868c <HAL_TIM_Base_Start_IT+0xb4>
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008666:	d011      	beq.n	800868c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	681a      	ldr	r2, [r3, #0]
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	f042 0201 	orr.w	r2, r2, #1
 8008676:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008678:	e008      	b.n	800868c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	681a      	ldr	r2, [r3, #0]
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	f042 0201 	orr.w	r2, r2, #1
 8008688:	601a      	str	r2, [r3, #0]
 800868a:	e000      	b.n	800868e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800868c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800868e:	2300      	movs	r3, #0
}
 8008690:	4618      	mov	r0, r3
 8008692:	3714      	adds	r7, #20
 8008694:	46bd      	mov	sp, r7
 8008696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800869a:	4770      	bx	lr
 800869c:	40010000 	.word	0x40010000
 80086a0:	40000400 	.word	0x40000400
 80086a4:	40000800 	.word	0x40000800
 80086a8:	40000c00 	.word	0x40000c00
 80086ac:	40010400 	.word	0x40010400
 80086b0:	40001800 	.word	0x40001800
 80086b4:	00010007 	.word	0x00010007

080086b8 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80086b8:	b480      	push	{r7}
 80086ba:	b083      	sub	sp, #12
 80086bc:	af00      	add	r7, sp, #0
 80086be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	68da      	ldr	r2, [r3, #12]
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	f022 0201 	bic.w	r2, r2, #1
 80086ce:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	6a1a      	ldr	r2, [r3, #32]
 80086d6:	f241 1311 	movw	r3, #4369	; 0x1111
 80086da:	4013      	ands	r3, r2
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d10f      	bne.n	8008700 <HAL_TIM_Base_Stop_IT+0x48>
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	6a1a      	ldr	r2, [r3, #32]
 80086e6:	f240 4344 	movw	r3, #1092	; 0x444
 80086ea:	4013      	ands	r3, r2
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d107      	bne.n	8008700 <HAL_TIM_Base_Stop_IT+0x48>
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	681a      	ldr	r2, [r3, #0]
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	f022 0201 	bic.w	r2, r2, #1
 80086fe:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	2201      	movs	r2, #1
 8008704:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8008708:	2300      	movs	r3, #0
}
 800870a:	4618      	mov	r0, r3
 800870c:	370c      	adds	r7, #12
 800870e:	46bd      	mov	sp, r7
 8008710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008714:	4770      	bx	lr

08008716 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008716:	b580      	push	{r7, lr}
 8008718:	b082      	sub	sp, #8
 800871a:	af00      	add	r7, sp, #0
 800871c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	691b      	ldr	r3, [r3, #16]
 8008724:	f003 0302 	and.w	r3, r3, #2
 8008728:	2b02      	cmp	r3, #2
 800872a:	d122      	bne.n	8008772 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	68db      	ldr	r3, [r3, #12]
 8008732:	f003 0302 	and.w	r3, r3, #2
 8008736:	2b02      	cmp	r3, #2
 8008738:	d11b      	bne.n	8008772 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	f06f 0202 	mvn.w	r2, #2
 8008742:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	2201      	movs	r2, #1
 8008748:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	699b      	ldr	r3, [r3, #24]
 8008750:	f003 0303 	and.w	r3, r3, #3
 8008754:	2b00      	cmp	r3, #0
 8008756:	d003      	beq.n	8008760 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008758:	6878      	ldr	r0, [r7, #4]
 800875a:	f000 f9f9 	bl	8008b50 <HAL_TIM_IC_CaptureCallback>
 800875e:	e005      	b.n	800876c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008760:	6878      	ldr	r0, [r7, #4]
 8008762:	f000 f9eb 	bl	8008b3c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008766:	6878      	ldr	r0, [r7, #4]
 8008768:	f000 f9fc 	bl	8008b64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	2200      	movs	r2, #0
 8008770:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	691b      	ldr	r3, [r3, #16]
 8008778:	f003 0304 	and.w	r3, r3, #4
 800877c:	2b04      	cmp	r3, #4
 800877e:	d122      	bne.n	80087c6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	68db      	ldr	r3, [r3, #12]
 8008786:	f003 0304 	and.w	r3, r3, #4
 800878a:	2b04      	cmp	r3, #4
 800878c:	d11b      	bne.n	80087c6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	f06f 0204 	mvn.w	r2, #4
 8008796:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	2202      	movs	r2, #2
 800879c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	699b      	ldr	r3, [r3, #24]
 80087a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d003      	beq.n	80087b4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80087ac:	6878      	ldr	r0, [r7, #4]
 80087ae:	f000 f9cf 	bl	8008b50 <HAL_TIM_IC_CaptureCallback>
 80087b2:	e005      	b.n	80087c0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80087b4:	6878      	ldr	r0, [r7, #4]
 80087b6:	f000 f9c1 	bl	8008b3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80087ba:	6878      	ldr	r0, [r7, #4]
 80087bc:	f000 f9d2 	bl	8008b64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	2200      	movs	r2, #0
 80087c4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	691b      	ldr	r3, [r3, #16]
 80087cc:	f003 0308 	and.w	r3, r3, #8
 80087d0:	2b08      	cmp	r3, #8
 80087d2:	d122      	bne.n	800881a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	68db      	ldr	r3, [r3, #12]
 80087da:	f003 0308 	and.w	r3, r3, #8
 80087de:	2b08      	cmp	r3, #8
 80087e0:	d11b      	bne.n	800881a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	f06f 0208 	mvn.w	r2, #8
 80087ea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	2204      	movs	r2, #4
 80087f0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	69db      	ldr	r3, [r3, #28]
 80087f8:	f003 0303 	and.w	r3, r3, #3
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d003      	beq.n	8008808 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008800:	6878      	ldr	r0, [r7, #4]
 8008802:	f000 f9a5 	bl	8008b50 <HAL_TIM_IC_CaptureCallback>
 8008806:	e005      	b.n	8008814 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008808:	6878      	ldr	r0, [r7, #4]
 800880a:	f000 f997 	bl	8008b3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800880e:	6878      	ldr	r0, [r7, #4]
 8008810:	f000 f9a8 	bl	8008b64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	2200      	movs	r2, #0
 8008818:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	691b      	ldr	r3, [r3, #16]
 8008820:	f003 0310 	and.w	r3, r3, #16
 8008824:	2b10      	cmp	r3, #16
 8008826:	d122      	bne.n	800886e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	68db      	ldr	r3, [r3, #12]
 800882e:	f003 0310 	and.w	r3, r3, #16
 8008832:	2b10      	cmp	r3, #16
 8008834:	d11b      	bne.n	800886e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	f06f 0210 	mvn.w	r2, #16
 800883e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	2208      	movs	r2, #8
 8008844:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	69db      	ldr	r3, [r3, #28]
 800884c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008850:	2b00      	cmp	r3, #0
 8008852:	d003      	beq.n	800885c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008854:	6878      	ldr	r0, [r7, #4]
 8008856:	f000 f97b 	bl	8008b50 <HAL_TIM_IC_CaptureCallback>
 800885a:	e005      	b.n	8008868 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800885c:	6878      	ldr	r0, [r7, #4]
 800885e:	f000 f96d 	bl	8008b3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008862:	6878      	ldr	r0, [r7, #4]
 8008864:	f000 f97e 	bl	8008b64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	2200      	movs	r2, #0
 800886c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	691b      	ldr	r3, [r3, #16]
 8008874:	f003 0301 	and.w	r3, r3, #1
 8008878:	2b01      	cmp	r3, #1
 800887a:	d10e      	bne.n	800889a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	68db      	ldr	r3, [r3, #12]
 8008882:	f003 0301 	and.w	r3, r3, #1
 8008886:	2b01      	cmp	r3, #1
 8008888:	d107      	bne.n	800889a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	f06f 0201 	mvn.w	r2, #1
 8008892:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008894:	6878      	ldr	r0, [r7, #4]
 8008896:	f7f8 fb77 	bl	8000f88 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	691b      	ldr	r3, [r3, #16]
 80088a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80088a4:	2b80      	cmp	r3, #128	; 0x80
 80088a6:	d10e      	bne.n	80088c6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	68db      	ldr	r3, [r3, #12]
 80088ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80088b2:	2b80      	cmp	r3, #128	; 0x80
 80088b4:	d107      	bne.n	80088c6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80088be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80088c0:	6878      	ldr	r0, [r7, #4]
 80088c2:	f000 fb2d 	bl	8008f20 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	691b      	ldr	r3, [r3, #16]
 80088cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80088d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80088d4:	d10e      	bne.n	80088f4 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	68db      	ldr	r3, [r3, #12]
 80088dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80088e0:	2b80      	cmp	r3, #128	; 0x80
 80088e2:	d107      	bne.n	80088f4 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80088ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80088ee:	6878      	ldr	r0, [r7, #4]
 80088f0:	f000 fb20 	bl	8008f34 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	691b      	ldr	r3, [r3, #16]
 80088fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088fe:	2b40      	cmp	r3, #64	; 0x40
 8008900:	d10e      	bne.n	8008920 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	68db      	ldr	r3, [r3, #12]
 8008908:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800890c:	2b40      	cmp	r3, #64	; 0x40
 800890e:	d107      	bne.n	8008920 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008918:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800891a:	6878      	ldr	r0, [r7, #4]
 800891c:	f000 f92c 	bl	8008b78 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	691b      	ldr	r3, [r3, #16]
 8008926:	f003 0320 	and.w	r3, r3, #32
 800892a:	2b20      	cmp	r3, #32
 800892c:	d10e      	bne.n	800894c <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	68db      	ldr	r3, [r3, #12]
 8008934:	f003 0320 	and.w	r3, r3, #32
 8008938:	2b20      	cmp	r3, #32
 800893a:	d107      	bne.n	800894c <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	f06f 0220 	mvn.w	r2, #32
 8008944:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008946:	6878      	ldr	r0, [r7, #4]
 8008948:	f000 fae0 	bl	8008f0c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800894c:	bf00      	nop
 800894e:	3708      	adds	r7, #8
 8008950:	46bd      	mov	sp, r7
 8008952:	bd80      	pop	{r7, pc}

08008954 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008954:	b580      	push	{r7, lr}
 8008956:	b084      	sub	sp, #16
 8008958:	af00      	add	r7, sp, #0
 800895a:	6078      	str	r0, [r7, #4]
 800895c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008964:	2b01      	cmp	r3, #1
 8008966:	d101      	bne.n	800896c <HAL_TIM_ConfigClockSource+0x18>
 8008968:	2302      	movs	r3, #2
 800896a:	e0db      	b.n	8008b24 <HAL_TIM_ConfigClockSource+0x1d0>
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	2201      	movs	r2, #1
 8008970:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	2202      	movs	r2, #2
 8008978:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	689b      	ldr	r3, [r3, #8]
 8008982:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008984:	68fa      	ldr	r2, [r7, #12]
 8008986:	4b69      	ldr	r3, [pc, #420]	; (8008b2c <HAL_TIM_ConfigClockSource+0x1d8>)
 8008988:	4013      	ands	r3, r2
 800898a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008992:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	68fa      	ldr	r2, [r7, #12]
 800899a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800899c:	683b      	ldr	r3, [r7, #0]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	4a63      	ldr	r2, [pc, #396]	; (8008b30 <HAL_TIM_ConfigClockSource+0x1dc>)
 80089a2:	4293      	cmp	r3, r2
 80089a4:	f000 80a9 	beq.w	8008afa <HAL_TIM_ConfigClockSource+0x1a6>
 80089a8:	4a61      	ldr	r2, [pc, #388]	; (8008b30 <HAL_TIM_ConfigClockSource+0x1dc>)
 80089aa:	4293      	cmp	r3, r2
 80089ac:	f200 80ae 	bhi.w	8008b0c <HAL_TIM_ConfigClockSource+0x1b8>
 80089b0:	4a60      	ldr	r2, [pc, #384]	; (8008b34 <HAL_TIM_ConfigClockSource+0x1e0>)
 80089b2:	4293      	cmp	r3, r2
 80089b4:	f000 80a1 	beq.w	8008afa <HAL_TIM_ConfigClockSource+0x1a6>
 80089b8:	4a5e      	ldr	r2, [pc, #376]	; (8008b34 <HAL_TIM_ConfigClockSource+0x1e0>)
 80089ba:	4293      	cmp	r3, r2
 80089bc:	f200 80a6 	bhi.w	8008b0c <HAL_TIM_ConfigClockSource+0x1b8>
 80089c0:	4a5d      	ldr	r2, [pc, #372]	; (8008b38 <HAL_TIM_ConfigClockSource+0x1e4>)
 80089c2:	4293      	cmp	r3, r2
 80089c4:	f000 8099 	beq.w	8008afa <HAL_TIM_ConfigClockSource+0x1a6>
 80089c8:	4a5b      	ldr	r2, [pc, #364]	; (8008b38 <HAL_TIM_ConfigClockSource+0x1e4>)
 80089ca:	4293      	cmp	r3, r2
 80089cc:	f200 809e 	bhi.w	8008b0c <HAL_TIM_ConfigClockSource+0x1b8>
 80089d0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80089d4:	f000 8091 	beq.w	8008afa <HAL_TIM_ConfigClockSource+0x1a6>
 80089d8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80089dc:	f200 8096 	bhi.w	8008b0c <HAL_TIM_ConfigClockSource+0x1b8>
 80089e0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80089e4:	f000 8089 	beq.w	8008afa <HAL_TIM_ConfigClockSource+0x1a6>
 80089e8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80089ec:	f200 808e 	bhi.w	8008b0c <HAL_TIM_ConfigClockSource+0x1b8>
 80089f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80089f4:	d03e      	beq.n	8008a74 <HAL_TIM_ConfigClockSource+0x120>
 80089f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80089fa:	f200 8087 	bhi.w	8008b0c <HAL_TIM_ConfigClockSource+0x1b8>
 80089fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a02:	f000 8085 	beq.w	8008b10 <HAL_TIM_ConfigClockSource+0x1bc>
 8008a06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a0a:	d87f      	bhi.n	8008b0c <HAL_TIM_ConfigClockSource+0x1b8>
 8008a0c:	2b70      	cmp	r3, #112	; 0x70
 8008a0e:	d01a      	beq.n	8008a46 <HAL_TIM_ConfigClockSource+0xf2>
 8008a10:	2b70      	cmp	r3, #112	; 0x70
 8008a12:	d87b      	bhi.n	8008b0c <HAL_TIM_ConfigClockSource+0x1b8>
 8008a14:	2b60      	cmp	r3, #96	; 0x60
 8008a16:	d050      	beq.n	8008aba <HAL_TIM_ConfigClockSource+0x166>
 8008a18:	2b60      	cmp	r3, #96	; 0x60
 8008a1a:	d877      	bhi.n	8008b0c <HAL_TIM_ConfigClockSource+0x1b8>
 8008a1c:	2b50      	cmp	r3, #80	; 0x50
 8008a1e:	d03c      	beq.n	8008a9a <HAL_TIM_ConfigClockSource+0x146>
 8008a20:	2b50      	cmp	r3, #80	; 0x50
 8008a22:	d873      	bhi.n	8008b0c <HAL_TIM_ConfigClockSource+0x1b8>
 8008a24:	2b40      	cmp	r3, #64	; 0x40
 8008a26:	d058      	beq.n	8008ada <HAL_TIM_ConfigClockSource+0x186>
 8008a28:	2b40      	cmp	r3, #64	; 0x40
 8008a2a:	d86f      	bhi.n	8008b0c <HAL_TIM_ConfigClockSource+0x1b8>
 8008a2c:	2b30      	cmp	r3, #48	; 0x30
 8008a2e:	d064      	beq.n	8008afa <HAL_TIM_ConfigClockSource+0x1a6>
 8008a30:	2b30      	cmp	r3, #48	; 0x30
 8008a32:	d86b      	bhi.n	8008b0c <HAL_TIM_ConfigClockSource+0x1b8>
 8008a34:	2b20      	cmp	r3, #32
 8008a36:	d060      	beq.n	8008afa <HAL_TIM_ConfigClockSource+0x1a6>
 8008a38:	2b20      	cmp	r3, #32
 8008a3a:	d867      	bhi.n	8008b0c <HAL_TIM_ConfigClockSource+0x1b8>
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d05c      	beq.n	8008afa <HAL_TIM_ConfigClockSource+0x1a6>
 8008a40:	2b10      	cmp	r3, #16
 8008a42:	d05a      	beq.n	8008afa <HAL_TIM_ConfigClockSource+0x1a6>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8008a44:	e062      	b.n	8008b0c <HAL_TIM_ConfigClockSource+0x1b8>
      TIM_ETR_SetConfig(htim->Instance,
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	6818      	ldr	r0, [r3, #0]
 8008a4a:	683b      	ldr	r3, [r7, #0]
 8008a4c:	6899      	ldr	r1, [r3, #8]
 8008a4e:	683b      	ldr	r3, [r7, #0]
 8008a50:	685a      	ldr	r2, [r3, #4]
 8008a52:	683b      	ldr	r3, [r7, #0]
 8008a54:	68db      	ldr	r3, [r3, #12]
 8008a56:	f000 f9b1 	bl	8008dbc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	689b      	ldr	r3, [r3, #8]
 8008a60:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008a68:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	68fa      	ldr	r2, [r7, #12]
 8008a70:	609a      	str	r2, [r3, #8]
      break;
 8008a72:	e04e      	b.n	8008b12 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_ETR_SetConfig(htim->Instance,
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	6818      	ldr	r0, [r3, #0]
 8008a78:	683b      	ldr	r3, [r7, #0]
 8008a7a:	6899      	ldr	r1, [r3, #8]
 8008a7c:	683b      	ldr	r3, [r7, #0]
 8008a7e:	685a      	ldr	r2, [r3, #4]
 8008a80:	683b      	ldr	r3, [r7, #0]
 8008a82:	68db      	ldr	r3, [r3, #12]
 8008a84:	f000 f99a 	bl	8008dbc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	689a      	ldr	r2, [r3, #8]
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008a96:	609a      	str	r2, [r3, #8]
      break;
 8008a98:	e03b      	b.n	8008b12 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	6818      	ldr	r0, [r3, #0]
 8008a9e:	683b      	ldr	r3, [r7, #0]
 8008aa0:	6859      	ldr	r1, [r3, #4]
 8008aa2:	683b      	ldr	r3, [r7, #0]
 8008aa4:	68db      	ldr	r3, [r3, #12]
 8008aa6:	461a      	mov	r2, r3
 8008aa8:	f000 f90a 	bl	8008cc0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	2150      	movs	r1, #80	; 0x50
 8008ab2:	4618      	mov	r0, r3
 8008ab4:	f000 f964 	bl	8008d80 <TIM_ITRx_SetConfig>
      break;
 8008ab8:	e02b      	b.n	8008b12 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	6818      	ldr	r0, [r3, #0]
 8008abe:	683b      	ldr	r3, [r7, #0]
 8008ac0:	6859      	ldr	r1, [r3, #4]
 8008ac2:	683b      	ldr	r3, [r7, #0]
 8008ac4:	68db      	ldr	r3, [r3, #12]
 8008ac6:	461a      	mov	r2, r3
 8008ac8:	f000 f929 	bl	8008d1e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	2160      	movs	r1, #96	; 0x60
 8008ad2:	4618      	mov	r0, r3
 8008ad4:	f000 f954 	bl	8008d80 <TIM_ITRx_SetConfig>
      break;
 8008ad8:	e01b      	b.n	8008b12 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	6818      	ldr	r0, [r3, #0]
 8008ade:	683b      	ldr	r3, [r7, #0]
 8008ae0:	6859      	ldr	r1, [r3, #4]
 8008ae2:	683b      	ldr	r3, [r7, #0]
 8008ae4:	68db      	ldr	r3, [r3, #12]
 8008ae6:	461a      	mov	r2, r3
 8008ae8:	f000 f8ea 	bl	8008cc0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	2140      	movs	r1, #64	; 0x40
 8008af2:	4618      	mov	r0, r3
 8008af4:	f000 f944 	bl	8008d80 <TIM_ITRx_SetConfig>
      break;
 8008af8:	e00b      	b.n	8008b12 <HAL_TIM_ConfigClockSource+0x1be>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	681a      	ldr	r2, [r3, #0]
 8008afe:	683b      	ldr	r3, [r7, #0]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	4619      	mov	r1, r3
 8008b04:	4610      	mov	r0, r2
 8008b06:	f000 f93b 	bl	8008d80 <TIM_ITRx_SetConfig>
        break;
 8008b0a:	e002      	b.n	8008b12 <HAL_TIM_ConfigClockSource+0x1be>
      break;
 8008b0c:	bf00      	nop
 8008b0e:	e000      	b.n	8008b12 <HAL_TIM_ConfigClockSource+0x1be>
      break;
 8008b10:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	2201      	movs	r2, #1
 8008b16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	2200      	movs	r2, #0
 8008b1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008b22:	2300      	movs	r3, #0
}
 8008b24:	4618      	mov	r0, r3
 8008b26:	3710      	adds	r7, #16
 8008b28:	46bd      	mov	sp, r7
 8008b2a:	bd80      	pop	{r7, pc}
 8008b2c:	ffceff88 	.word	0xffceff88
 8008b30:	00100040 	.word	0x00100040
 8008b34:	00100030 	.word	0x00100030
 8008b38:	00100020 	.word	0x00100020

08008b3c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008b3c:	b480      	push	{r7}
 8008b3e:	b083      	sub	sp, #12
 8008b40:	af00      	add	r7, sp, #0
 8008b42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008b44:	bf00      	nop
 8008b46:	370c      	adds	r7, #12
 8008b48:	46bd      	mov	sp, r7
 8008b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b4e:	4770      	bx	lr

08008b50 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008b50:	b480      	push	{r7}
 8008b52:	b083      	sub	sp, #12
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008b58:	bf00      	nop
 8008b5a:	370c      	adds	r7, #12
 8008b5c:	46bd      	mov	sp, r7
 8008b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b62:	4770      	bx	lr

08008b64 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008b64:	b480      	push	{r7}
 8008b66:	b083      	sub	sp, #12
 8008b68:	af00      	add	r7, sp, #0
 8008b6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008b6c:	bf00      	nop
 8008b6e:	370c      	adds	r7, #12
 8008b70:	46bd      	mov	sp, r7
 8008b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b76:	4770      	bx	lr

08008b78 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008b78:	b480      	push	{r7}
 8008b7a:	b083      	sub	sp, #12
 8008b7c:	af00      	add	r7, sp, #0
 8008b7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008b80:	bf00      	nop
 8008b82:	370c      	adds	r7, #12
 8008b84:	46bd      	mov	sp, r7
 8008b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b8a:	4770      	bx	lr

08008b8c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008b8c:	b480      	push	{r7}
 8008b8e:	b085      	sub	sp, #20
 8008b90:	af00      	add	r7, sp, #0
 8008b92:	6078      	str	r0, [r7, #4]
 8008b94:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	4a40      	ldr	r2, [pc, #256]	; (8008ca0 <TIM_Base_SetConfig+0x114>)
 8008ba0:	4293      	cmp	r3, r2
 8008ba2:	d013      	beq.n	8008bcc <TIM_Base_SetConfig+0x40>
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008baa:	d00f      	beq.n	8008bcc <TIM_Base_SetConfig+0x40>
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	4a3d      	ldr	r2, [pc, #244]	; (8008ca4 <TIM_Base_SetConfig+0x118>)
 8008bb0:	4293      	cmp	r3, r2
 8008bb2:	d00b      	beq.n	8008bcc <TIM_Base_SetConfig+0x40>
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	4a3c      	ldr	r2, [pc, #240]	; (8008ca8 <TIM_Base_SetConfig+0x11c>)
 8008bb8:	4293      	cmp	r3, r2
 8008bba:	d007      	beq.n	8008bcc <TIM_Base_SetConfig+0x40>
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	4a3b      	ldr	r2, [pc, #236]	; (8008cac <TIM_Base_SetConfig+0x120>)
 8008bc0:	4293      	cmp	r3, r2
 8008bc2:	d003      	beq.n	8008bcc <TIM_Base_SetConfig+0x40>
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	4a3a      	ldr	r2, [pc, #232]	; (8008cb0 <TIM_Base_SetConfig+0x124>)
 8008bc8:	4293      	cmp	r3, r2
 8008bca:	d108      	bne.n	8008bde <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008bd2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008bd4:	683b      	ldr	r3, [r7, #0]
 8008bd6:	685b      	ldr	r3, [r3, #4]
 8008bd8:	68fa      	ldr	r2, [r7, #12]
 8008bda:	4313      	orrs	r3, r2
 8008bdc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	4a2f      	ldr	r2, [pc, #188]	; (8008ca0 <TIM_Base_SetConfig+0x114>)
 8008be2:	4293      	cmp	r3, r2
 8008be4:	d01f      	beq.n	8008c26 <TIM_Base_SetConfig+0x9a>
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008bec:	d01b      	beq.n	8008c26 <TIM_Base_SetConfig+0x9a>
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	4a2c      	ldr	r2, [pc, #176]	; (8008ca4 <TIM_Base_SetConfig+0x118>)
 8008bf2:	4293      	cmp	r3, r2
 8008bf4:	d017      	beq.n	8008c26 <TIM_Base_SetConfig+0x9a>
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	4a2b      	ldr	r2, [pc, #172]	; (8008ca8 <TIM_Base_SetConfig+0x11c>)
 8008bfa:	4293      	cmp	r3, r2
 8008bfc:	d013      	beq.n	8008c26 <TIM_Base_SetConfig+0x9a>
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	4a2a      	ldr	r2, [pc, #168]	; (8008cac <TIM_Base_SetConfig+0x120>)
 8008c02:	4293      	cmp	r3, r2
 8008c04:	d00f      	beq.n	8008c26 <TIM_Base_SetConfig+0x9a>
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	4a29      	ldr	r2, [pc, #164]	; (8008cb0 <TIM_Base_SetConfig+0x124>)
 8008c0a:	4293      	cmp	r3, r2
 8008c0c:	d00b      	beq.n	8008c26 <TIM_Base_SetConfig+0x9a>
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	4a28      	ldr	r2, [pc, #160]	; (8008cb4 <TIM_Base_SetConfig+0x128>)
 8008c12:	4293      	cmp	r3, r2
 8008c14:	d007      	beq.n	8008c26 <TIM_Base_SetConfig+0x9a>
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	4a27      	ldr	r2, [pc, #156]	; (8008cb8 <TIM_Base_SetConfig+0x12c>)
 8008c1a:	4293      	cmp	r3, r2
 8008c1c:	d003      	beq.n	8008c26 <TIM_Base_SetConfig+0x9a>
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	4a26      	ldr	r2, [pc, #152]	; (8008cbc <TIM_Base_SetConfig+0x130>)
 8008c22:	4293      	cmp	r3, r2
 8008c24:	d108      	bne.n	8008c38 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008c2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008c2e:	683b      	ldr	r3, [r7, #0]
 8008c30:	68db      	ldr	r3, [r3, #12]
 8008c32:	68fa      	ldr	r2, [r7, #12]
 8008c34:	4313      	orrs	r3, r2
 8008c36:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008c3e:	683b      	ldr	r3, [r7, #0]
 8008c40:	695b      	ldr	r3, [r3, #20]
 8008c42:	4313      	orrs	r3, r2
 8008c44:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	68fa      	ldr	r2, [r7, #12]
 8008c4a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008c4c:	683b      	ldr	r3, [r7, #0]
 8008c4e:	689a      	ldr	r2, [r3, #8]
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008c54:	683b      	ldr	r3, [r7, #0]
 8008c56:	681a      	ldr	r2, [r3, #0]
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	4a10      	ldr	r2, [pc, #64]	; (8008ca0 <TIM_Base_SetConfig+0x114>)
 8008c60:	4293      	cmp	r3, r2
 8008c62:	d00f      	beq.n	8008c84 <TIM_Base_SetConfig+0xf8>
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	4a12      	ldr	r2, [pc, #72]	; (8008cb0 <TIM_Base_SetConfig+0x124>)
 8008c68:	4293      	cmp	r3, r2
 8008c6a:	d00b      	beq.n	8008c84 <TIM_Base_SetConfig+0xf8>
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	4a11      	ldr	r2, [pc, #68]	; (8008cb4 <TIM_Base_SetConfig+0x128>)
 8008c70:	4293      	cmp	r3, r2
 8008c72:	d007      	beq.n	8008c84 <TIM_Base_SetConfig+0xf8>
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	4a10      	ldr	r2, [pc, #64]	; (8008cb8 <TIM_Base_SetConfig+0x12c>)
 8008c78:	4293      	cmp	r3, r2
 8008c7a:	d003      	beq.n	8008c84 <TIM_Base_SetConfig+0xf8>
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	4a0f      	ldr	r2, [pc, #60]	; (8008cbc <TIM_Base_SetConfig+0x130>)
 8008c80:	4293      	cmp	r3, r2
 8008c82:	d103      	bne.n	8008c8c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008c84:	683b      	ldr	r3, [r7, #0]
 8008c86:	691a      	ldr	r2, [r3, #16]
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	2201      	movs	r2, #1
 8008c90:	615a      	str	r2, [r3, #20]
}
 8008c92:	bf00      	nop
 8008c94:	3714      	adds	r7, #20
 8008c96:	46bd      	mov	sp, r7
 8008c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c9c:	4770      	bx	lr
 8008c9e:	bf00      	nop
 8008ca0:	40010000 	.word	0x40010000
 8008ca4:	40000400 	.word	0x40000400
 8008ca8:	40000800 	.word	0x40000800
 8008cac:	40000c00 	.word	0x40000c00
 8008cb0:	40010400 	.word	0x40010400
 8008cb4:	40014000 	.word	0x40014000
 8008cb8:	40014400 	.word	0x40014400
 8008cbc:	40014800 	.word	0x40014800

08008cc0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008cc0:	b480      	push	{r7}
 8008cc2:	b087      	sub	sp, #28
 8008cc4:	af00      	add	r7, sp, #0
 8008cc6:	60f8      	str	r0, [r7, #12]
 8008cc8:	60b9      	str	r1, [r7, #8]
 8008cca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	6a1b      	ldr	r3, [r3, #32]
 8008cd0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	6a1b      	ldr	r3, [r3, #32]
 8008cd6:	f023 0201 	bic.w	r2, r3, #1
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	699b      	ldr	r3, [r3, #24]
 8008ce2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008ce4:	693b      	ldr	r3, [r7, #16]
 8008ce6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008cea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	011b      	lsls	r3, r3, #4
 8008cf0:	693a      	ldr	r2, [r7, #16]
 8008cf2:	4313      	orrs	r3, r2
 8008cf4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008cf6:	697b      	ldr	r3, [r7, #20]
 8008cf8:	f023 030a 	bic.w	r3, r3, #10
 8008cfc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008cfe:	697a      	ldr	r2, [r7, #20]
 8008d00:	68bb      	ldr	r3, [r7, #8]
 8008d02:	4313      	orrs	r3, r2
 8008d04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	693a      	ldr	r2, [r7, #16]
 8008d0a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	697a      	ldr	r2, [r7, #20]
 8008d10:	621a      	str	r2, [r3, #32]
}
 8008d12:	bf00      	nop
 8008d14:	371c      	adds	r7, #28
 8008d16:	46bd      	mov	sp, r7
 8008d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d1c:	4770      	bx	lr

08008d1e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008d1e:	b480      	push	{r7}
 8008d20:	b087      	sub	sp, #28
 8008d22:	af00      	add	r7, sp, #0
 8008d24:	60f8      	str	r0, [r7, #12]
 8008d26:	60b9      	str	r1, [r7, #8]
 8008d28:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	6a1b      	ldr	r3, [r3, #32]
 8008d2e:	f023 0210 	bic.w	r2, r3, #16
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	699b      	ldr	r3, [r3, #24]
 8008d3a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	6a1b      	ldr	r3, [r3, #32]
 8008d40:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008d42:	697b      	ldr	r3, [r7, #20]
 8008d44:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008d48:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	031b      	lsls	r3, r3, #12
 8008d4e:	697a      	ldr	r2, [r7, #20]
 8008d50:	4313      	orrs	r3, r2
 8008d52:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008d54:	693b      	ldr	r3, [r7, #16]
 8008d56:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008d5a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008d5c:	68bb      	ldr	r3, [r7, #8]
 8008d5e:	011b      	lsls	r3, r3, #4
 8008d60:	693a      	ldr	r2, [r7, #16]
 8008d62:	4313      	orrs	r3, r2
 8008d64:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	697a      	ldr	r2, [r7, #20]
 8008d6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	693a      	ldr	r2, [r7, #16]
 8008d70:	621a      	str	r2, [r3, #32]
}
 8008d72:	bf00      	nop
 8008d74:	371c      	adds	r7, #28
 8008d76:	46bd      	mov	sp, r7
 8008d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d7c:	4770      	bx	lr
	...

08008d80 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008d80:	b480      	push	{r7}
 8008d82:	b085      	sub	sp, #20
 8008d84:	af00      	add	r7, sp, #0
 8008d86:	6078      	str	r0, [r7, #4]
 8008d88:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	689b      	ldr	r3, [r3, #8]
 8008d8e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008d90:	68fa      	ldr	r2, [r7, #12]
 8008d92:	4b09      	ldr	r3, [pc, #36]	; (8008db8 <TIM_ITRx_SetConfig+0x38>)
 8008d94:	4013      	ands	r3, r2
 8008d96:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008d98:	683a      	ldr	r2, [r7, #0]
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	4313      	orrs	r3, r2
 8008d9e:	f043 0307 	orr.w	r3, r3, #7
 8008da2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	68fa      	ldr	r2, [r7, #12]
 8008da8:	609a      	str	r2, [r3, #8]
}
 8008daa:	bf00      	nop
 8008dac:	3714      	adds	r7, #20
 8008dae:	46bd      	mov	sp, r7
 8008db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db4:	4770      	bx	lr
 8008db6:	bf00      	nop
 8008db8:	ffcfff8f 	.word	0xffcfff8f

08008dbc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008dbc:	b480      	push	{r7}
 8008dbe:	b087      	sub	sp, #28
 8008dc0:	af00      	add	r7, sp, #0
 8008dc2:	60f8      	str	r0, [r7, #12]
 8008dc4:	60b9      	str	r1, [r7, #8]
 8008dc6:	607a      	str	r2, [r7, #4]
 8008dc8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	689b      	ldr	r3, [r3, #8]
 8008dce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008dd0:	697b      	ldr	r3, [r7, #20]
 8008dd2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008dd6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008dd8:	683b      	ldr	r3, [r7, #0]
 8008dda:	021a      	lsls	r2, r3, #8
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	431a      	orrs	r2, r3
 8008de0:	68bb      	ldr	r3, [r7, #8]
 8008de2:	4313      	orrs	r3, r2
 8008de4:	697a      	ldr	r2, [r7, #20]
 8008de6:	4313      	orrs	r3, r2
 8008de8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	697a      	ldr	r2, [r7, #20]
 8008dee:	609a      	str	r2, [r3, #8]
}
 8008df0:	bf00      	nop
 8008df2:	371c      	adds	r7, #28
 8008df4:	46bd      	mov	sp, r7
 8008df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dfa:	4770      	bx	lr

08008dfc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008dfc:	b480      	push	{r7}
 8008dfe:	b085      	sub	sp, #20
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	6078      	str	r0, [r7, #4]
 8008e04:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008e0c:	2b01      	cmp	r3, #1
 8008e0e:	d101      	bne.n	8008e14 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008e10:	2302      	movs	r3, #2
 8008e12:	e068      	b.n	8008ee6 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	2201      	movs	r2, #1
 8008e18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	2202      	movs	r2, #2
 8008e20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	685b      	ldr	r3, [r3, #4]
 8008e2a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	689b      	ldr	r3, [r3, #8]
 8008e32:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	4a2e      	ldr	r2, [pc, #184]	; (8008ef4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8008e3a:	4293      	cmp	r3, r2
 8008e3c:	d004      	beq.n	8008e48 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	4a2d      	ldr	r2, [pc, #180]	; (8008ef8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008e44:	4293      	cmp	r3, r2
 8008e46:	d108      	bne.n	8008e5a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008e4e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008e50:	683b      	ldr	r3, [r7, #0]
 8008e52:	685b      	ldr	r3, [r3, #4]
 8008e54:	68fa      	ldr	r2, [r7, #12]
 8008e56:	4313      	orrs	r3, r2
 8008e58:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e60:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008e62:	683b      	ldr	r3, [r7, #0]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	68fa      	ldr	r2, [r7, #12]
 8008e68:	4313      	orrs	r3, r2
 8008e6a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	68fa      	ldr	r2, [r7, #12]
 8008e72:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	4a1e      	ldr	r2, [pc, #120]	; (8008ef4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8008e7a:	4293      	cmp	r3, r2
 8008e7c:	d01d      	beq.n	8008eba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e86:	d018      	beq.n	8008eba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	4a1b      	ldr	r2, [pc, #108]	; (8008efc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008e8e:	4293      	cmp	r3, r2
 8008e90:	d013      	beq.n	8008eba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	4a1a      	ldr	r2, [pc, #104]	; (8008f00 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008e98:	4293      	cmp	r3, r2
 8008e9a:	d00e      	beq.n	8008eba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	4a18      	ldr	r2, [pc, #96]	; (8008f04 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008ea2:	4293      	cmp	r3, r2
 8008ea4:	d009      	beq.n	8008eba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	4a13      	ldr	r2, [pc, #76]	; (8008ef8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008eac:	4293      	cmp	r3, r2
 8008eae:	d004      	beq.n	8008eba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	4a14      	ldr	r2, [pc, #80]	; (8008f08 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008eb6:	4293      	cmp	r3, r2
 8008eb8:	d10c      	bne.n	8008ed4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008eba:	68bb      	ldr	r3, [r7, #8]
 8008ebc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008ec0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008ec2:	683b      	ldr	r3, [r7, #0]
 8008ec4:	689b      	ldr	r3, [r3, #8]
 8008ec6:	68ba      	ldr	r2, [r7, #8]
 8008ec8:	4313      	orrs	r3, r2
 8008eca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	68ba      	ldr	r2, [r7, #8]
 8008ed2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	2201      	movs	r2, #1
 8008ed8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	2200      	movs	r2, #0
 8008ee0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008ee4:	2300      	movs	r3, #0
}
 8008ee6:	4618      	mov	r0, r3
 8008ee8:	3714      	adds	r7, #20
 8008eea:	46bd      	mov	sp, r7
 8008eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef0:	4770      	bx	lr
 8008ef2:	bf00      	nop
 8008ef4:	40010000 	.word	0x40010000
 8008ef8:	40010400 	.word	0x40010400
 8008efc:	40000400 	.word	0x40000400
 8008f00:	40000800 	.word	0x40000800
 8008f04:	40000c00 	.word	0x40000c00
 8008f08:	40001800 	.word	0x40001800

08008f0c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008f0c:	b480      	push	{r7}
 8008f0e:	b083      	sub	sp, #12
 8008f10:	af00      	add	r7, sp, #0
 8008f12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008f14:	bf00      	nop
 8008f16:	370c      	adds	r7, #12
 8008f18:	46bd      	mov	sp, r7
 8008f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f1e:	4770      	bx	lr

08008f20 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008f20:	b480      	push	{r7}
 8008f22:	b083      	sub	sp, #12
 8008f24:	af00      	add	r7, sp, #0
 8008f26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008f28:	bf00      	nop
 8008f2a:	370c      	adds	r7, #12
 8008f2c:	46bd      	mov	sp, r7
 8008f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f32:	4770      	bx	lr

08008f34 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008f34:	b480      	push	{r7}
 8008f36:	b083      	sub	sp, #12
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008f3c:	bf00      	nop
 8008f3e:	370c      	adds	r7, #12
 8008f40:	46bd      	mov	sp, r7
 8008f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f46:	4770      	bx	lr

08008f48 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008f48:	b580      	push	{r7, lr}
 8008f4a:	b082      	sub	sp, #8
 8008f4c:	af00      	add	r7, sp, #0
 8008f4e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d101      	bne.n	8008f5a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008f56:	2301      	movs	r3, #1
 8008f58:	e042      	b.n	8008fe0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d106      	bne.n	8008f72 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	2200      	movs	r2, #0
 8008f68:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008f6c:	6878      	ldr	r0, [r7, #4]
 8008f6e:	f7f8 f88b 	bl	8001088 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	2224      	movs	r2, #36	; 0x24
 8008f76:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	681a      	ldr	r2, [r3, #0]
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	f022 0201 	bic.w	r2, r2, #1
 8008f88:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008f8a:	6878      	ldr	r0, [r7, #4]
 8008f8c:	f000 fb90 	bl	80096b0 <UART_SetConfig>
 8008f90:	4603      	mov	r3, r0
 8008f92:	2b01      	cmp	r3, #1
 8008f94:	d101      	bne.n	8008f9a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8008f96:	2301      	movs	r3, #1
 8008f98:	e022      	b.n	8008fe0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d002      	beq.n	8008fa8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8008fa2:	6878      	ldr	r0, [r7, #4]
 8008fa4:	f001 f8e4 	bl	800a170 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	685a      	ldr	r2, [r3, #4]
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008fb6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	689a      	ldr	r2, [r3, #8]
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008fc6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	681a      	ldr	r2, [r3, #0]
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	f042 0201 	orr.w	r2, r2, #1
 8008fd6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008fd8:	6878      	ldr	r0, [r7, #4]
 8008fda:	f001 f96b 	bl	800a2b4 <UART_CheckIdleState>
 8008fde:	4603      	mov	r3, r0
}
 8008fe0:	4618      	mov	r0, r3
 8008fe2:	3708      	adds	r7, #8
 8008fe4:	46bd      	mov	sp, r7
 8008fe6:	bd80      	pop	{r7, pc}

08008fe8 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008fe8:	b580      	push	{r7, lr}
 8008fea:	b084      	sub	sp, #16
 8008fec:	af00      	add	r7, sp, #0
 8008fee:	60f8      	str	r0, [r7, #12]
 8008ff0:	60b9      	str	r1, [r7, #8]
 8008ff2:	4613      	mov	r3, r2
 8008ff4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008ffc:	2b20      	cmp	r3, #32
 8008ffe:	d168      	bne.n	80090d2 <HAL_UART_Transmit_DMA+0xea>
  {
    if ((pData == NULL) || (Size == 0U))
 8009000:	68bb      	ldr	r3, [r7, #8]
 8009002:	2b00      	cmp	r3, #0
 8009004:	d002      	beq.n	800900c <HAL_UART_Transmit_DMA+0x24>
 8009006:	88fb      	ldrh	r3, [r7, #6]
 8009008:	2b00      	cmp	r3, #0
 800900a:	d101      	bne.n	8009010 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800900c:	2301      	movs	r3, #1
 800900e:	e061      	b.n	80090d4 <HAL_UART_Transmit_DMA+0xec>
    }

    __HAL_LOCK(huart);
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009016:	2b01      	cmp	r3, #1
 8009018:	d101      	bne.n	800901e <HAL_UART_Transmit_DMA+0x36>
 800901a:	2302      	movs	r3, #2
 800901c:	e05a      	b.n	80090d4 <HAL_UART_Transmit_DMA+0xec>
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	2201      	movs	r2, #1
 8009022:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	68ba      	ldr	r2, [r7, #8]
 800902a:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	88fa      	ldrh	r2, [r7, #6]
 8009030:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	88fa      	ldrh	r2, [r7, #6]
 8009038:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	2200      	movs	r2, #0
 8009040:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	2221      	movs	r2, #33	; 0x21
 8009048:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009050:	2b00      	cmp	r3, #0
 8009052:	d02c      	beq.n	80090ae <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009058:	4a20      	ldr	r2, [pc, #128]	; (80090dc <HAL_UART_Transmit_DMA+0xf4>)
 800905a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009060:	4a1f      	ldr	r2, [pc, #124]	; (80090e0 <HAL_UART_Transmit_DMA+0xf8>)
 8009062:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009068:	4a1e      	ldr	r2, [pc, #120]	; (80090e4 <HAL_UART_Transmit_DMA+0xfc>)
 800906a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009070:	2200      	movs	r2, #0
 8009072:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800907c:	4619      	mov	r1, r3
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	3328      	adds	r3, #40	; 0x28
 8009084:	461a      	mov	r2, r3
 8009086:	88fb      	ldrh	r3, [r7, #6]
 8009088:	f7f8 ffee 	bl	8002068 <HAL_DMA_Start_IT>
 800908c:	4603      	mov	r3, r0
 800908e:	2b00      	cmp	r3, #0
 8009090:	d00d      	beq.n	80090ae <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	2210      	movs	r2, #16
 8009096:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	2200      	movs	r2, #0
 800909e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	2220      	movs	r2, #32
 80090a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 80090aa:	2301      	movs	r3, #1
 80090ac:	e012      	b.n	80090d4 <HAL_UART_Transmit_DMA+0xec>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	2240      	movs	r2, #64	; 0x40
 80090b4:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	2200      	movs	r2, #0
 80090ba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	689a      	ldr	r2, [r3, #8]
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80090cc:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 80090ce:	2300      	movs	r3, #0
 80090d0:	e000      	b.n	80090d4 <HAL_UART_Transmit_DMA+0xec>
  }
  else
  {
    return HAL_BUSY;
 80090d2:	2302      	movs	r3, #2
  }
}
 80090d4:	4618      	mov	r0, r3
 80090d6:	3710      	adds	r7, #16
 80090d8:	46bd      	mov	sp, r7
 80090da:	bd80      	pop	{r7, pc}
 80090dc:	0800a4ed 	.word	0x0800a4ed
 80090e0:	0800a53d 	.word	0x0800a53d
 80090e4:	0800a559 	.word	0x0800a559

080090e8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80090e8:	b580      	push	{r7, lr}
 80090ea:	b088      	sub	sp, #32
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	69db      	ldr	r3, [r3, #28]
 80090f6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	689b      	ldr	r3, [r3, #8]
 8009106:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009108:	69fa      	ldr	r2, [r7, #28]
 800910a:	f640 030f 	movw	r3, #2063	; 0x80f
 800910e:	4013      	ands	r3, r2
 8009110:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8009112:	693b      	ldr	r3, [r7, #16]
 8009114:	2b00      	cmp	r3, #0
 8009116:	d118      	bne.n	800914a <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009118:	69fb      	ldr	r3, [r7, #28]
 800911a:	f003 0320 	and.w	r3, r3, #32
 800911e:	2b00      	cmp	r3, #0
 8009120:	d013      	beq.n	800914a <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009122:	69bb      	ldr	r3, [r7, #24]
 8009124:	f003 0320 	and.w	r3, r3, #32
 8009128:	2b00      	cmp	r3, #0
 800912a:	d104      	bne.n	8009136 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800912c:	697b      	ldr	r3, [r7, #20]
 800912e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009132:	2b00      	cmp	r3, #0
 8009134:	d009      	beq.n	800914a <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800913a:	2b00      	cmp	r3, #0
 800913c:	f000 8282 	beq.w	8009644 <HAL_UART_IRQHandler+0x55c>
      {
        huart->RxISR(huart);
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009144:	6878      	ldr	r0, [r7, #4]
 8009146:	4798      	blx	r3
      }
      return;
 8009148:	e27c      	b.n	8009644 <HAL_UART_IRQHandler+0x55c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800914a:	693b      	ldr	r3, [r7, #16]
 800914c:	2b00      	cmp	r3, #0
 800914e:	f000 80ef 	beq.w	8009330 <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8009152:	697a      	ldr	r2, [r7, #20]
 8009154:	4b73      	ldr	r3, [pc, #460]	; (8009324 <HAL_UART_IRQHandler+0x23c>)
 8009156:	4013      	ands	r3, r2
 8009158:	2b00      	cmp	r3, #0
 800915a:	d105      	bne.n	8009168 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800915c:	69ba      	ldr	r2, [r7, #24]
 800915e:	4b72      	ldr	r3, [pc, #456]	; (8009328 <HAL_UART_IRQHandler+0x240>)
 8009160:	4013      	ands	r3, r2
 8009162:	2b00      	cmp	r3, #0
 8009164:	f000 80e4 	beq.w	8009330 <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009168:	69fb      	ldr	r3, [r7, #28]
 800916a:	f003 0301 	and.w	r3, r3, #1
 800916e:	2b00      	cmp	r3, #0
 8009170:	d010      	beq.n	8009194 <HAL_UART_IRQHandler+0xac>
 8009172:	69bb      	ldr	r3, [r7, #24]
 8009174:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009178:	2b00      	cmp	r3, #0
 800917a:	d00b      	beq.n	8009194 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	2201      	movs	r2, #1
 8009182:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800918a:	f043 0201 	orr.w	r2, r3, #1
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009194:	69fb      	ldr	r3, [r7, #28]
 8009196:	f003 0302 	and.w	r3, r3, #2
 800919a:	2b00      	cmp	r3, #0
 800919c:	d010      	beq.n	80091c0 <HAL_UART_IRQHandler+0xd8>
 800919e:	697b      	ldr	r3, [r7, #20]
 80091a0:	f003 0301 	and.w	r3, r3, #1
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d00b      	beq.n	80091c0 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	2202      	movs	r2, #2
 80091ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80091b6:	f043 0204 	orr.w	r2, r3, #4
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80091c0:	69fb      	ldr	r3, [r7, #28]
 80091c2:	f003 0304 	and.w	r3, r3, #4
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d010      	beq.n	80091ec <HAL_UART_IRQHandler+0x104>
 80091ca:	697b      	ldr	r3, [r7, #20]
 80091cc:	f003 0301 	and.w	r3, r3, #1
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d00b      	beq.n	80091ec <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	2204      	movs	r2, #4
 80091da:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80091e2:	f043 0202 	orr.w	r2, r3, #2
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80091ec:	69fb      	ldr	r3, [r7, #28]
 80091ee:	f003 0308 	and.w	r3, r3, #8
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d015      	beq.n	8009222 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80091f6:	69bb      	ldr	r3, [r7, #24]
 80091f8:	f003 0320 	and.w	r3, r3, #32
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d104      	bne.n	800920a <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8009200:	697a      	ldr	r2, [r7, #20]
 8009202:	4b48      	ldr	r3, [pc, #288]	; (8009324 <HAL_UART_IRQHandler+0x23c>)
 8009204:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009206:	2b00      	cmp	r3, #0
 8009208:	d00b      	beq.n	8009222 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	2208      	movs	r2, #8
 8009210:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009218:	f043 0208 	orr.w	r2, r3, #8
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009222:	69fb      	ldr	r3, [r7, #28]
 8009224:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009228:	2b00      	cmp	r3, #0
 800922a:	d011      	beq.n	8009250 <HAL_UART_IRQHandler+0x168>
 800922c:	69bb      	ldr	r3, [r7, #24]
 800922e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009232:	2b00      	cmp	r3, #0
 8009234:	d00c      	beq.n	8009250 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800923e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009246:	f043 0220 	orr.w	r2, r3, #32
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009256:	2b00      	cmp	r3, #0
 8009258:	f000 81f6 	beq.w	8009648 <HAL_UART_IRQHandler+0x560>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800925c:	69fb      	ldr	r3, [r7, #28]
 800925e:	f003 0320 	and.w	r3, r3, #32
 8009262:	2b00      	cmp	r3, #0
 8009264:	d011      	beq.n	800928a <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009266:	69bb      	ldr	r3, [r7, #24]
 8009268:	f003 0320 	and.w	r3, r3, #32
 800926c:	2b00      	cmp	r3, #0
 800926e:	d104      	bne.n	800927a <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009270:	697b      	ldr	r3, [r7, #20]
 8009272:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009276:	2b00      	cmp	r3, #0
 8009278:	d007      	beq.n	800928a <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800927e:	2b00      	cmp	r3, #0
 8009280:	d003      	beq.n	800928a <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009286:	6878      	ldr	r0, [r7, #4]
 8009288:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009290:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	689b      	ldr	r3, [r3, #8]
 8009298:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800929c:	2b40      	cmp	r3, #64	; 0x40
 800929e:	d004      	beq.n	80092aa <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d031      	beq.n	800930e <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80092aa:	6878      	ldr	r0, [r7, #4]
 80092ac:	f001 f8ec 	bl	800a488 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	689b      	ldr	r3, [r3, #8]
 80092b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092ba:	2b40      	cmp	r3, #64	; 0x40
 80092bc:	d123      	bne.n	8009306 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	689a      	ldr	r2, [r3, #8]
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80092cc:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d013      	beq.n	80092fe <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80092da:	4a14      	ldr	r2, [pc, #80]	; (800932c <HAL_UART_IRQHandler+0x244>)
 80092dc:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80092e2:	4618      	mov	r0, r3
 80092e4:	f7f9 fc48 	bl	8002b78 <HAL_DMA_Abort_IT>
 80092e8:	4603      	mov	r3, r0
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d017      	beq.n	800931e <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80092f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80092f4:	687a      	ldr	r2, [r7, #4]
 80092f6:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 80092f8:	4610      	mov	r0, r2
 80092fa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80092fc:	e00f      	b.n	800931e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80092fe:	6878      	ldr	r0, [r7, #4]
 8009300:	f000 f9c0 	bl	8009684 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009304:	e00b      	b.n	800931e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009306:	6878      	ldr	r0, [r7, #4]
 8009308:	f000 f9bc 	bl	8009684 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800930c:	e007      	b.n	800931e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800930e:	6878      	ldr	r0, [r7, #4]
 8009310:	f000 f9b8 	bl	8009684 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	2200      	movs	r2, #0
 8009318:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800931c:	e194      	b.n	8009648 <HAL_UART_IRQHandler+0x560>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800931e:	bf00      	nop
    return;
 8009320:	e192      	b.n	8009648 <HAL_UART_IRQHandler+0x560>
 8009322:	bf00      	nop
 8009324:	10000001 	.word	0x10000001
 8009328:	04000120 	.word	0x04000120
 800932c:	0800a5d9 	.word	0x0800a5d9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009334:	2b01      	cmp	r3, #1
 8009336:	f040 810f 	bne.w	8009558 <HAL_UART_IRQHandler+0x470>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800933a:	69fb      	ldr	r3, [r7, #28]
 800933c:	f003 0310 	and.w	r3, r3, #16
 8009340:	2b00      	cmp	r3, #0
 8009342:	f000 8109 	beq.w	8009558 <HAL_UART_IRQHandler+0x470>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009346:	69bb      	ldr	r3, [r7, #24]
 8009348:	f003 0310 	and.w	r3, r3, #16
 800934c:	2b00      	cmp	r3, #0
 800934e:	f000 8103 	beq.w	8009558 <HAL_UART_IRQHandler+0x470>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	2210      	movs	r2, #16
 8009358:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	689b      	ldr	r3, [r3, #8]
 8009360:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009364:	2b40      	cmp	r3, #64	; 0x40
 8009366:	f040 80bb 	bne.w	80094e0 <HAL_UART_IRQHandler+0x3f8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	4a96      	ldr	r2, [pc, #600]	; (80095cc <HAL_UART_IRQHandler+0x4e4>)
 8009372:	4293      	cmp	r3, r2
 8009374:	d059      	beq.n	800942a <HAL_UART_IRQHandler+0x342>
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	4a94      	ldr	r2, [pc, #592]	; (80095d0 <HAL_UART_IRQHandler+0x4e8>)
 800937e:	4293      	cmp	r3, r2
 8009380:	d053      	beq.n	800942a <HAL_UART_IRQHandler+0x342>
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	4a92      	ldr	r2, [pc, #584]	; (80095d4 <HAL_UART_IRQHandler+0x4ec>)
 800938a:	4293      	cmp	r3, r2
 800938c:	d04d      	beq.n	800942a <HAL_UART_IRQHandler+0x342>
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	4a90      	ldr	r2, [pc, #576]	; (80095d8 <HAL_UART_IRQHandler+0x4f0>)
 8009396:	4293      	cmp	r3, r2
 8009398:	d047      	beq.n	800942a <HAL_UART_IRQHandler+0x342>
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	4a8e      	ldr	r2, [pc, #568]	; (80095dc <HAL_UART_IRQHandler+0x4f4>)
 80093a2:	4293      	cmp	r3, r2
 80093a4:	d041      	beq.n	800942a <HAL_UART_IRQHandler+0x342>
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	4a8c      	ldr	r2, [pc, #560]	; (80095e0 <HAL_UART_IRQHandler+0x4f8>)
 80093ae:	4293      	cmp	r3, r2
 80093b0:	d03b      	beq.n	800942a <HAL_UART_IRQHandler+0x342>
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	4a8a      	ldr	r2, [pc, #552]	; (80095e4 <HAL_UART_IRQHandler+0x4fc>)
 80093ba:	4293      	cmp	r3, r2
 80093bc:	d035      	beq.n	800942a <HAL_UART_IRQHandler+0x342>
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	4a88      	ldr	r2, [pc, #544]	; (80095e8 <HAL_UART_IRQHandler+0x500>)
 80093c6:	4293      	cmp	r3, r2
 80093c8:	d02f      	beq.n	800942a <HAL_UART_IRQHandler+0x342>
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	4a86      	ldr	r2, [pc, #536]	; (80095ec <HAL_UART_IRQHandler+0x504>)
 80093d2:	4293      	cmp	r3, r2
 80093d4:	d029      	beq.n	800942a <HAL_UART_IRQHandler+0x342>
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	4a84      	ldr	r2, [pc, #528]	; (80095f0 <HAL_UART_IRQHandler+0x508>)
 80093de:	4293      	cmp	r3, r2
 80093e0:	d023      	beq.n	800942a <HAL_UART_IRQHandler+0x342>
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	4a82      	ldr	r2, [pc, #520]	; (80095f4 <HAL_UART_IRQHandler+0x50c>)
 80093ea:	4293      	cmp	r3, r2
 80093ec:	d01d      	beq.n	800942a <HAL_UART_IRQHandler+0x342>
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	4a80      	ldr	r2, [pc, #512]	; (80095f8 <HAL_UART_IRQHandler+0x510>)
 80093f6:	4293      	cmp	r3, r2
 80093f8:	d017      	beq.n	800942a <HAL_UART_IRQHandler+0x342>
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	4a7e      	ldr	r2, [pc, #504]	; (80095fc <HAL_UART_IRQHandler+0x514>)
 8009402:	4293      	cmp	r3, r2
 8009404:	d011      	beq.n	800942a <HAL_UART_IRQHandler+0x342>
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	4a7c      	ldr	r2, [pc, #496]	; (8009600 <HAL_UART_IRQHandler+0x518>)
 800940e:	4293      	cmp	r3, r2
 8009410:	d00b      	beq.n	800942a <HAL_UART_IRQHandler+0x342>
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	4a7a      	ldr	r2, [pc, #488]	; (8009604 <HAL_UART_IRQHandler+0x51c>)
 800941a:	4293      	cmp	r3, r2
 800941c:	d005      	beq.n	800942a <HAL_UART_IRQHandler+0x342>
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	4a78      	ldr	r2, [pc, #480]	; (8009608 <HAL_UART_IRQHandler+0x520>)
 8009426:	4293      	cmp	r3, r2
 8009428:	d105      	bne.n	8009436 <HAL_UART_IRQHandler+0x34e>
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	685b      	ldr	r3, [r3, #4]
 8009432:	b29b      	uxth	r3, r3
 8009434:	e004      	b.n	8009440 <HAL_UART_IRQHandler+0x358>
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	685b      	ldr	r3, [r3, #4]
 800943e:	b29b      	uxth	r3, r3
 8009440:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 8009442:	893b      	ldrh	r3, [r7, #8]
 8009444:	2b00      	cmp	r3, #0
 8009446:	f000 8101 	beq.w	800964c <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009450:	893a      	ldrh	r2, [r7, #8]
 8009452:	429a      	cmp	r2, r3
 8009454:	f080 80fa 	bcs.w	800964c <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	893a      	ldrh	r2, [r7, #8]
 800945c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009464:	69db      	ldr	r3, [r3, #28]
 8009466:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800946a:	d02b      	beq.n	80094c4 <HAL_UART_IRQHandler+0x3dc>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	681a      	ldr	r2, [r3, #0]
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800947a:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	689a      	ldr	r2, [r3, #8]
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	f022 0201 	bic.w	r2, r2, #1
 800948a:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	689a      	ldr	r2, [r3, #8]
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800949a:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	2220      	movs	r2, #32
 80094a0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	2200      	movs	r2, #0
 80094a8:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	681a      	ldr	r2, [r3, #0]
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	f022 0210 	bic.w	r2, r2, #16
 80094b8:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80094be:	4618      	mov	r0, r3
 80094c0:	f7f9 f83c 	bl	800253c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80094d0:	b29b      	uxth	r3, r3
 80094d2:	1ad3      	subs	r3, r2, r3
 80094d4:	b29b      	uxth	r3, r3
 80094d6:	4619      	mov	r1, r3
 80094d8:	6878      	ldr	r0, [r7, #4]
 80094da:	f000 f8dd 	bl	8009698 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80094de:	e0b5      	b.n	800964c <HAL_UART_IRQHandler+0x564>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80094ec:	b29b      	uxth	r3, r3
 80094ee:	1ad3      	subs	r3, r2, r3
 80094f0:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80094f8:	b29b      	uxth	r3, r3
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	f000 80a8 	beq.w	8009650 <HAL_UART_IRQHandler+0x568>
          && (nb_rx_data > 0U))
 8009500:	897b      	ldrh	r3, [r7, #10]
 8009502:	2b00      	cmp	r3, #0
 8009504:	f000 80a4 	beq.w	8009650 <HAL_UART_IRQHandler+0x568>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	681a      	ldr	r2, [r3, #0]
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8009516:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	6899      	ldr	r1, [r3, #8]
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	681a      	ldr	r2, [r3, #0]
 8009522:	4b3a      	ldr	r3, [pc, #232]	; (800960c <HAL_UART_IRQHandler+0x524>)
 8009524:	400b      	ands	r3, r1
 8009526:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	2220      	movs	r2, #32
 800952c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	2200      	movs	r2, #0
 8009534:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	2200      	movs	r2, #0
 800953a:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	681a      	ldr	r2, [r3, #0]
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	f022 0210 	bic.w	r2, r2, #16
 800954a:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800954c:	897b      	ldrh	r3, [r7, #10]
 800954e:	4619      	mov	r1, r3
 8009550:	6878      	ldr	r0, [r7, #4]
 8009552:	f000 f8a1 	bl	8009698 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009556:	e07b      	b.n	8009650 <HAL_UART_IRQHandler+0x568>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009558:	69fb      	ldr	r3, [r7, #28]
 800955a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800955e:	2b00      	cmp	r3, #0
 8009560:	d00d      	beq.n	800957e <HAL_UART_IRQHandler+0x496>
 8009562:	697b      	ldr	r3, [r7, #20]
 8009564:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009568:	2b00      	cmp	r3, #0
 800956a:	d008      	beq.n	800957e <HAL_UART_IRQHandler+0x496>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8009574:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009576:	6878      	ldr	r0, [r7, #4]
 8009578:	f001 f85e 	bl	800a638 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800957c:	e06b      	b.n	8009656 <HAL_UART_IRQHandler+0x56e>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800957e:	69fb      	ldr	r3, [r7, #28]
 8009580:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009584:	2b00      	cmp	r3, #0
 8009586:	d012      	beq.n	80095ae <HAL_UART_IRQHandler+0x4c6>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009588:	69bb      	ldr	r3, [r7, #24]
 800958a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800958e:	2b00      	cmp	r3, #0
 8009590:	d104      	bne.n	800959c <HAL_UART_IRQHandler+0x4b4>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8009592:	697b      	ldr	r3, [r7, #20]
 8009594:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009598:	2b00      	cmp	r3, #0
 800959a:	d008      	beq.n	80095ae <HAL_UART_IRQHandler+0x4c6>
  {
    if (huart->TxISR != NULL)
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d057      	beq.n	8009654 <HAL_UART_IRQHandler+0x56c>
    {
      huart->TxISR(huart);
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80095a8:	6878      	ldr	r0, [r7, #4]
 80095aa:	4798      	blx	r3
    }
    return;
 80095ac:	e052      	b.n	8009654 <HAL_UART_IRQHandler+0x56c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80095ae:	69fb      	ldr	r3, [r7, #28]
 80095b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d02b      	beq.n	8009610 <HAL_UART_IRQHandler+0x528>
 80095b8:	69bb      	ldr	r3, [r7, #24]
 80095ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d026      	beq.n	8009610 <HAL_UART_IRQHandler+0x528>
  {
    UART_EndTransmit_IT(huart);
 80095c2:	6878      	ldr	r0, [r7, #4]
 80095c4:	f001 f81e 	bl	800a604 <UART_EndTransmit_IT>
    return;
 80095c8:	e045      	b.n	8009656 <HAL_UART_IRQHandler+0x56e>
 80095ca:	bf00      	nop
 80095cc:	40020010 	.word	0x40020010
 80095d0:	40020028 	.word	0x40020028
 80095d4:	40020040 	.word	0x40020040
 80095d8:	40020058 	.word	0x40020058
 80095dc:	40020070 	.word	0x40020070
 80095e0:	40020088 	.word	0x40020088
 80095e4:	400200a0 	.word	0x400200a0
 80095e8:	400200b8 	.word	0x400200b8
 80095ec:	40020410 	.word	0x40020410
 80095f0:	40020428 	.word	0x40020428
 80095f4:	40020440 	.word	0x40020440
 80095f8:	40020458 	.word	0x40020458
 80095fc:	40020470 	.word	0x40020470
 8009600:	40020488 	.word	0x40020488
 8009604:	400204a0 	.word	0x400204a0
 8009608:	400204b8 	.word	0x400204b8
 800960c:	effffffe 	.word	0xeffffffe
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009610:	69fb      	ldr	r3, [r7, #28]
 8009612:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009616:	2b00      	cmp	r3, #0
 8009618:	d008      	beq.n	800962c <HAL_UART_IRQHandler+0x544>
 800961a:	69bb      	ldr	r3, [r7, #24]
 800961c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009620:	2b00      	cmp	r3, #0
 8009622:	d003      	beq.n	800962c <HAL_UART_IRQHandler+0x544>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8009624:	6878      	ldr	r0, [r7, #4]
 8009626:	f001 f81b 	bl	800a660 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800962a:	e014      	b.n	8009656 <HAL_UART_IRQHandler+0x56e>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800962c:	69fb      	ldr	r3, [r7, #28]
 800962e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009632:	2b00      	cmp	r3, #0
 8009634:	d00f      	beq.n	8009656 <HAL_UART_IRQHandler+0x56e>
 8009636:	69bb      	ldr	r3, [r7, #24]
 8009638:	2b00      	cmp	r3, #0
 800963a:	da0c      	bge.n	8009656 <HAL_UART_IRQHandler+0x56e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800963c:	6878      	ldr	r0, [r7, #4]
 800963e:	f001 f805 	bl	800a64c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009642:	e008      	b.n	8009656 <HAL_UART_IRQHandler+0x56e>
      return;
 8009644:	bf00      	nop
 8009646:	e006      	b.n	8009656 <HAL_UART_IRQHandler+0x56e>
    return;
 8009648:	bf00      	nop
 800964a:	e004      	b.n	8009656 <HAL_UART_IRQHandler+0x56e>
      return;
 800964c:	bf00      	nop
 800964e:	e002      	b.n	8009656 <HAL_UART_IRQHandler+0x56e>
      return;
 8009650:	bf00      	nop
 8009652:	e000      	b.n	8009656 <HAL_UART_IRQHandler+0x56e>
    return;
 8009654:	bf00      	nop
  }
}
 8009656:	3720      	adds	r7, #32
 8009658:	46bd      	mov	sp, r7
 800965a:	bd80      	pop	{r7, pc}

0800965c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800965c:	b480      	push	{r7}
 800965e:	b083      	sub	sp, #12
 8009660:	af00      	add	r7, sp, #0
 8009662:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009664:	bf00      	nop
 8009666:	370c      	adds	r7, #12
 8009668:	46bd      	mov	sp, r7
 800966a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800966e:	4770      	bx	lr

08009670 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009670:	b480      	push	{r7}
 8009672:	b083      	sub	sp, #12
 8009674:	af00      	add	r7, sp, #0
 8009676:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8009678:	bf00      	nop
 800967a:	370c      	adds	r7, #12
 800967c:	46bd      	mov	sp, r7
 800967e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009682:	4770      	bx	lr

08009684 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009684:	b480      	push	{r7}
 8009686:	b083      	sub	sp, #12
 8009688:	af00      	add	r7, sp, #0
 800968a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800968c:	bf00      	nop
 800968e:	370c      	adds	r7, #12
 8009690:	46bd      	mov	sp, r7
 8009692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009696:	4770      	bx	lr

08009698 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009698:	b480      	push	{r7}
 800969a:	b083      	sub	sp, #12
 800969c:	af00      	add	r7, sp, #0
 800969e:	6078      	str	r0, [r7, #4]
 80096a0:	460b      	mov	r3, r1
 80096a2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80096a4:	bf00      	nop
 80096a6:	370c      	adds	r7, #12
 80096a8:	46bd      	mov	sp, r7
 80096aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ae:	4770      	bx	lr

080096b0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80096b0:	b5b0      	push	{r4, r5, r7, lr}
 80096b2:	b08e      	sub	sp, #56	; 0x38
 80096b4:	af00      	add	r7, sp, #0
 80096b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80096b8:	2300      	movs	r3, #0
 80096ba:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	689a      	ldr	r2, [r3, #8]
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	691b      	ldr	r3, [r3, #16]
 80096c6:	431a      	orrs	r2, r3
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	695b      	ldr	r3, [r3, #20]
 80096cc:	431a      	orrs	r2, r3
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	69db      	ldr	r3, [r3, #28]
 80096d2:	4313      	orrs	r3, r2
 80096d4:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	681a      	ldr	r2, [r3, #0]
 80096dc:	4bbf      	ldr	r3, [pc, #764]	; (80099dc <UART_SetConfig+0x32c>)
 80096de:	4013      	ands	r3, r2
 80096e0:	687a      	ldr	r2, [r7, #4]
 80096e2:	6812      	ldr	r2, [r2, #0]
 80096e4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80096e6:	430b      	orrs	r3, r1
 80096e8:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	685b      	ldr	r3, [r3, #4]
 80096f0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	68da      	ldr	r2, [r3, #12]
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	430a      	orrs	r2, r1
 80096fe:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	699b      	ldr	r3, [r3, #24]
 8009704:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	4ab5      	ldr	r2, [pc, #724]	; (80099e0 <UART_SetConfig+0x330>)
 800970c:	4293      	cmp	r3, r2
 800970e:	d004      	beq.n	800971a <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	6a1b      	ldr	r3, [r3, #32]
 8009714:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009716:	4313      	orrs	r3, r2
 8009718:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	689a      	ldr	r2, [r3, #8]
 8009720:	4bb0      	ldr	r3, [pc, #704]	; (80099e4 <UART_SetConfig+0x334>)
 8009722:	4013      	ands	r3, r2
 8009724:	687a      	ldr	r2, [r7, #4]
 8009726:	6812      	ldr	r2, [r2, #0]
 8009728:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800972a:	430b      	orrs	r3, r1
 800972c:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009734:	f023 010f 	bic.w	r1, r3, #15
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	430a      	orrs	r2, r1
 8009742:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	4aa7      	ldr	r2, [pc, #668]	; (80099e8 <UART_SetConfig+0x338>)
 800974a:	4293      	cmp	r3, r2
 800974c:	d176      	bne.n	800983c <UART_SetConfig+0x18c>
 800974e:	4ba7      	ldr	r3, [pc, #668]	; (80099ec <UART_SetConfig+0x33c>)
 8009750:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009752:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009756:	2b28      	cmp	r3, #40	; 0x28
 8009758:	d86c      	bhi.n	8009834 <UART_SetConfig+0x184>
 800975a:	a201      	add	r2, pc, #4	; (adr r2, 8009760 <UART_SetConfig+0xb0>)
 800975c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009760:	08009805 	.word	0x08009805
 8009764:	08009835 	.word	0x08009835
 8009768:	08009835 	.word	0x08009835
 800976c:	08009835 	.word	0x08009835
 8009770:	08009835 	.word	0x08009835
 8009774:	08009835 	.word	0x08009835
 8009778:	08009835 	.word	0x08009835
 800977c:	08009835 	.word	0x08009835
 8009780:	0800980d 	.word	0x0800980d
 8009784:	08009835 	.word	0x08009835
 8009788:	08009835 	.word	0x08009835
 800978c:	08009835 	.word	0x08009835
 8009790:	08009835 	.word	0x08009835
 8009794:	08009835 	.word	0x08009835
 8009798:	08009835 	.word	0x08009835
 800979c:	08009835 	.word	0x08009835
 80097a0:	08009815 	.word	0x08009815
 80097a4:	08009835 	.word	0x08009835
 80097a8:	08009835 	.word	0x08009835
 80097ac:	08009835 	.word	0x08009835
 80097b0:	08009835 	.word	0x08009835
 80097b4:	08009835 	.word	0x08009835
 80097b8:	08009835 	.word	0x08009835
 80097bc:	08009835 	.word	0x08009835
 80097c0:	0800981d 	.word	0x0800981d
 80097c4:	08009835 	.word	0x08009835
 80097c8:	08009835 	.word	0x08009835
 80097cc:	08009835 	.word	0x08009835
 80097d0:	08009835 	.word	0x08009835
 80097d4:	08009835 	.word	0x08009835
 80097d8:	08009835 	.word	0x08009835
 80097dc:	08009835 	.word	0x08009835
 80097e0:	08009825 	.word	0x08009825
 80097e4:	08009835 	.word	0x08009835
 80097e8:	08009835 	.word	0x08009835
 80097ec:	08009835 	.word	0x08009835
 80097f0:	08009835 	.word	0x08009835
 80097f4:	08009835 	.word	0x08009835
 80097f8:	08009835 	.word	0x08009835
 80097fc:	08009835 	.word	0x08009835
 8009800:	0800982d 	.word	0x0800982d
 8009804:	2301      	movs	r3, #1
 8009806:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800980a:	e222      	b.n	8009c52 <UART_SetConfig+0x5a2>
 800980c:	2304      	movs	r3, #4
 800980e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009812:	e21e      	b.n	8009c52 <UART_SetConfig+0x5a2>
 8009814:	2308      	movs	r3, #8
 8009816:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800981a:	e21a      	b.n	8009c52 <UART_SetConfig+0x5a2>
 800981c:	2310      	movs	r3, #16
 800981e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009822:	e216      	b.n	8009c52 <UART_SetConfig+0x5a2>
 8009824:	2320      	movs	r3, #32
 8009826:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800982a:	e212      	b.n	8009c52 <UART_SetConfig+0x5a2>
 800982c:	2340      	movs	r3, #64	; 0x40
 800982e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009832:	e20e      	b.n	8009c52 <UART_SetConfig+0x5a2>
 8009834:	2380      	movs	r3, #128	; 0x80
 8009836:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800983a:	e20a      	b.n	8009c52 <UART_SetConfig+0x5a2>
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	4a6b      	ldr	r2, [pc, #428]	; (80099f0 <UART_SetConfig+0x340>)
 8009842:	4293      	cmp	r3, r2
 8009844:	d130      	bne.n	80098a8 <UART_SetConfig+0x1f8>
 8009846:	4b69      	ldr	r3, [pc, #420]	; (80099ec <UART_SetConfig+0x33c>)
 8009848:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800984a:	f003 0307 	and.w	r3, r3, #7
 800984e:	2b05      	cmp	r3, #5
 8009850:	d826      	bhi.n	80098a0 <UART_SetConfig+0x1f0>
 8009852:	a201      	add	r2, pc, #4	; (adr r2, 8009858 <UART_SetConfig+0x1a8>)
 8009854:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009858:	08009871 	.word	0x08009871
 800985c:	08009879 	.word	0x08009879
 8009860:	08009881 	.word	0x08009881
 8009864:	08009889 	.word	0x08009889
 8009868:	08009891 	.word	0x08009891
 800986c:	08009899 	.word	0x08009899
 8009870:	2300      	movs	r3, #0
 8009872:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009876:	e1ec      	b.n	8009c52 <UART_SetConfig+0x5a2>
 8009878:	2304      	movs	r3, #4
 800987a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800987e:	e1e8      	b.n	8009c52 <UART_SetConfig+0x5a2>
 8009880:	2308      	movs	r3, #8
 8009882:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009886:	e1e4      	b.n	8009c52 <UART_SetConfig+0x5a2>
 8009888:	2310      	movs	r3, #16
 800988a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800988e:	e1e0      	b.n	8009c52 <UART_SetConfig+0x5a2>
 8009890:	2320      	movs	r3, #32
 8009892:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009896:	e1dc      	b.n	8009c52 <UART_SetConfig+0x5a2>
 8009898:	2340      	movs	r3, #64	; 0x40
 800989a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800989e:	e1d8      	b.n	8009c52 <UART_SetConfig+0x5a2>
 80098a0:	2380      	movs	r3, #128	; 0x80
 80098a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80098a6:	e1d4      	b.n	8009c52 <UART_SetConfig+0x5a2>
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	4a51      	ldr	r2, [pc, #324]	; (80099f4 <UART_SetConfig+0x344>)
 80098ae:	4293      	cmp	r3, r2
 80098b0:	d130      	bne.n	8009914 <UART_SetConfig+0x264>
 80098b2:	4b4e      	ldr	r3, [pc, #312]	; (80099ec <UART_SetConfig+0x33c>)
 80098b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80098b6:	f003 0307 	and.w	r3, r3, #7
 80098ba:	2b05      	cmp	r3, #5
 80098bc:	d826      	bhi.n	800990c <UART_SetConfig+0x25c>
 80098be:	a201      	add	r2, pc, #4	; (adr r2, 80098c4 <UART_SetConfig+0x214>)
 80098c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098c4:	080098dd 	.word	0x080098dd
 80098c8:	080098e5 	.word	0x080098e5
 80098cc:	080098ed 	.word	0x080098ed
 80098d0:	080098f5 	.word	0x080098f5
 80098d4:	080098fd 	.word	0x080098fd
 80098d8:	08009905 	.word	0x08009905
 80098dc:	2300      	movs	r3, #0
 80098de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80098e2:	e1b6      	b.n	8009c52 <UART_SetConfig+0x5a2>
 80098e4:	2304      	movs	r3, #4
 80098e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80098ea:	e1b2      	b.n	8009c52 <UART_SetConfig+0x5a2>
 80098ec:	2308      	movs	r3, #8
 80098ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80098f2:	e1ae      	b.n	8009c52 <UART_SetConfig+0x5a2>
 80098f4:	2310      	movs	r3, #16
 80098f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80098fa:	e1aa      	b.n	8009c52 <UART_SetConfig+0x5a2>
 80098fc:	2320      	movs	r3, #32
 80098fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009902:	e1a6      	b.n	8009c52 <UART_SetConfig+0x5a2>
 8009904:	2340      	movs	r3, #64	; 0x40
 8009906:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800990a:	e1a2      	b.n	8009c52 <UART_SetConfig+0x5a2>
 800990c:	2380      	movs	r3, #128	; 0x80
 800990e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009912:	e19e      	b.n	8009c52 <UART_SetConfig+0x5a2>
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	4a37      	ldr	r2, [pc, #220]	; (80099f8 <UART_SetConfig+0x348>)
 800991a:	4293      	cmp	r3, r2
 800991c:	d130      	bne.n	8009980 <UART_SetConfig+0x2d0>
 800991e:	4b33      	ldr	r3, [pc, #204]	; (80099ec <UART_SetConfig+0x33c>)
 8009920:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009922:	f003 0307 	and.w	r3, r3, #7
 8009926:	2b05      	cmp	r3, #5
 8009928:	d826      	bhi.n	8009978 <UART_SetConfig+0x2c8>
 800992a:	a201      	add	r2, pc, #4	; (adr r2, 8009930 <UART_SetConfig+0x280>)
 800992c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009930:	08009949 	.word	0x08009949
 8009934:	08009951 	.word	0x08009951
 8009938:	08009959 	.word	0x08009959
 800993c:	08009961 	.word	0x08009961
 8009940:	08009969 	.word	0x08009969
 8009944:	08009971 	.word	0x08009971
 8009948:	2300      	movs	r3, #0
 800994a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800994e:	e180      	b.n	8009c52 <UART_SetConfig+0x5a2>
 8009950:	2304      	movs	r3, #4
 8009952:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009956:	e17c      	b.n	8009c52 <UART_SetConfig+0x5a2>
 8009958:	2308      	movs	r3, #8
 800995a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800995e:	e178      	b.n	8009c52 <UART_SetConfig+0x5a2>
 8009960:	2310      	movs	r3, #16
 8009962:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009966:	e174      	b.n	8009c52 <UART_SetConfig+0x5a2>
 8009968:	2320      	movs	r3, #32
 800996a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800996e:	e170      	b.n	8009c52 <UART_SetConfig+0x5a2>
 8009970:	2340      	movs	r3, #64	; 0x40
 8009972:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009976:	e16c      	b.n	8009c52 <UART_SetConfig+0x5a2>
 8009978:	2380      	movs	r3, #128	; 0x80
 800997a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800997e:	e168      	b.n	8009c52 <UART_SetConfig+0x5a2>
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	4a1d      	ldr	r2, [pc, #116]	; (80099fc <UART_SetConfig+0x34c>)
 8009986:	4293      	cmp	r3, r2
 8009988:	d142      	bne.n	8009a10 <UART_SetConfig+0x360>
 800998a:	4b18      	ldr	r3, [pc, #96]	; (80099ec <UART_SetConfig+0x33c>)
 800998c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800998e:	f003 0307 	and.w	r3, r3, #7
 8009992:	2b05      	cmp	r3, #5
 8009994:	d838      	bhi.n	8009a08 <UART_SetConfig+0x358>
 8009996:	a201      	add	r2, pc, #4	; (adr r2, 800999c <UART_SetConfig+0x2ec>)
 8009998:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800999c:	080099b5 	.word	0x080099b5
 80099a0:	080099bd 	.word	0x080099bd
 80099a4:	080099c5 	.word	0x080099c5
 80099a8:	080099cd 	.word	0x080099cd
 80099ac:	080099d5 	.word	0x080099d5
 80099b0:	08009a01 	.word	0x08009a01
 80099b4:	2300      	movs	r3, #0
 80099b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80099ba:	e14a      	b.n	8009c52 <UART_SetConfig+0x5a2>
 80099bc:	2304      	movs	r3, #4
 80099be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80099c2:	e146      	b.n	8009c52 <UART_SetConfig+0x5a2>
 80099c4:	2308      	movs	r3, #8
 80099c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80099ca:	e142      	b.n	8009c52 <UART_SetConfig+0x5a2>
 80099cc:	2310      	movs	r3, #16
 80099ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80099d2:	e13e      	b.n	8009c52 <UART_SetConfig+0x5a2>
 80099d4:	2320      	movs	r3, #32
 80099d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80099da:	e13a      	b.n	8009c52 <UART_SetConfig+0x5a2>
 80099dc:	cfff69f3 	.word	0xcfff69f3
 80099e0:	58000c00 	.word	0x58000c00
 80099e4:	11fff4ff 	.word	0x11fff4ff
 80099e8:	40011000 	.word	0x40011000
 80099ec:	58024400 	.word	0x58024400
 80099f0:	40004400 	.word	0x40004400
 80099f4:	40004800 	.word	0x40004800
 80099f8:	40004c00 	.word	0x40004c00
 80099fc:	40005000 	.word	0x40005000
 8009a00:	2340      	movs	r3, #64	; 0x40
 8009a02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a06:	e124      	b.n	8009c52 <UART_SetConfig+0x5a2>
 8009a08:	2380      	movs	r3, #128	; 0x80
 8009a0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a0e:	e120      	b.n	8009c52 <UART_SetConfig+0x5a2>
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	4acc      	ldr	r2, [pc, #816]	; (8009d48 <UART_SetConfig+0x698>)
 8009a16:	4293      	cmp	r3, r2
 8009a18:	d176      	bne.n	8009b08 <UART_SetConfig+0x458>
 8009a1a:	4bcc      	ldr	r3, [pc, #816]	; (8009d4c <UART_SetConfig+0x69c>)
 8009a1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a1e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009a22:	2b28      	cmp	r3, #40	; 0x28
 8009a24:	d86c      	bhi.n	8009b00 <UART_SetConfig+0x450>
 8009a26:	a201      	add	r2, pc, #4	; (adr r2, 8009a2c <UART_SetConfig+0x37c>)
 8009a28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a2c:	08009ad1 	.word	0x08009ad1
 8009a30:	08009b01 	.word	0x08009b01
 8009a34:	08009b01 	.word	0x08009b01
 8009a38:	08009b01 	.word	0x08009b01
 8009a3c:	08009b01 	.word	0x08009b01
 8009a40:	08009b01 	.word	0x08009b01
 8009a44:	08009b01 	.word	0x08009b01
 8009a48:	08009b01 	.word	0x08009b01
 8009a4c:	08009ad9 	.word	0x08009ad9
 8009a50:	08009b01 	.word	0x08009b01
 8009a54:	08009b01 	.word	0x08009b01
 8009a58:	08009b01 	.word	0x08009b01
 8009a5c:	08009b01 	.word	0x08009b01
 8009a60:	08009b01 	.word	0x08009b01
 8009a64:	08009b01 	.word	0x08009b01
 8009a68:	08009b01 	.word	0x08009b01
 8009a6c:	08009ae1 	.word	0x08009ae1
 8009a70:	08009b01 	.word	0x08009b01
 8009a74:	08009b01 	.word	0x08009b01
 8009a78:	08009b01 	.word	0x08009b01
 8009a7c:	08009b01 	.word	0x08009b01
 8009a80:	08009b01 	.word	0x08009b01
 8009a84:	08009b01 	.word	0x08009b01
 8009a88:	08009b01 	.word	0x08009b01
 8009a8c:	08009ae9 	.word	0x08009ae9
 8009a90:	08009b01 	.word	0x08009b01
 8009a94:	08009b01 	.word	0x08009b01
 8009a98:	08009b01 	.word	0x08009b01
 8009a9c:	08009b01 	.word	0x08009b01
 8009aa0:	08009b01 	.word	0x08009b01
 8009aa4:	08009b01 	.word	0x08009b01
 8009aa8:	08009b01 	.word	0x08009b01
 8009aac:	08009af1 	.word	0x08009af1
 8009ab0:	08009b01 	.word	0x08009b01
 8009ab4:	08009b01 	.word	0x08009b01
 8009ab8:	08009b01 	.word	0x08009b01
 8009abc:	08009b01 	.word	0x08009b01
 8009ac0:	08009b01 	.word	0x08009b01
 8009ac4:	08009b01 	.word	0x08009b01
 8009ac8:	08009b01 	.word	0x08009b01
 8009acc:	08009af9 	.word	0x08009af9
 8009ad0:	2301      	movs	r3, #1
 8009ad2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ad6:	e0bc      	b.n	8009c52 <UART_SetConfig+0x5a2>
 8009ad8:	2304      	movs	r3, #4
 8009ada:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ade:	e0b8      	b.n	8009c52 <UART_SetConfig+0x5a2>
 8009ae0:	2308      	movs	r3, #8
 8009ae2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ae6:	e0b4      	b.n	8009c52 <UART_SetConfig+0x5a2>
 8009ae8:	2310      	movs	r3, #16
 8009aea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009aee:	e0b0      	b.n	8009c52 <UART_SetConfig+0x5a2>
 8009af0:	2320      	movs	r3, #32
 8009af2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009af6:	e0ac      	b.n	8009c52 <UART_SetConfig+0x5a2>
 8009af8:	2340      	movs	r3, #64	; 0x40
 8009afa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009afe:	e0a8      	b.n	8009c52 <UART_SetConfig+0x5a2>
 8009b00:	2380      	movs	r3, #128	; 0x80
 8009b02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b06:	e0a4      	b.n	8009c52 <UART_SetConfig+0x5a2>
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	4a90      	ldr	r2, [pc, #576]	; (8009d50 <UART_SetConfig+0x6a0>)
 8009b0e:	4293      	cmp	r3, r2
 8009b10:	d130      	bne.n	8009b74 <UART_SetConfig+0x4c4>
 8009b12:	4b8e      	ldr	r3, [pc, #568]	; (8009d4c <UART_SetConfig+0x69c>)
 8009b14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b16:	f003 0307 	and.w	r3, r3, #7
 8009b1a:	2b05      	cmp	r3, #5
 8009b1c:	d826      	bhi.n	8009b6c <UART_SetConfig+0x4bc>
 8009b1e:	a201      	add	r2, pc, #4	; (adr r2, 8009b24 <UART_SetConfig+0x474>)
 8009b20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b24:	08009b3d 	.word	0x08009b3d
 8009b28:	08009b45 	.word	0x08009b45
 8009b2c:	08009b4d 	.word	0x08009b4d
 8009b30:	08009b55 	.word	0x08009b55
 8009b34:	08009b5d 	.word	0x08009b5d
 8009b38:	08009b65 	.word	0x08009b65
 8009b3c:	2300      	movs	r3, #0
 8009b3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b42:	e086      	b.n	8009c52 <UART_SetConfig+0x5a2>
 8009b44:	2304      	movs	r3, #4
 8009b46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b4a:	e082      	b.n	8009c52 <UART_SetConfig+0x5a2>
 8009b4c:	2308      	movs	r3, #8
 8009b4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b52:	e07e      	b.n	8009c52 <UART_SetConfig+0x5a2>
 8009b54:	2310      	movs	r3, #16
 8009b56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b5a:	e07a      	b.n	8009c52 <UART_SetConfig+0x5a2>
 8009b5c:	2320      	movs	r3, #32
 8009b5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b62:	e076      	b.n	8009c52 <UART_SetConfig+0x5a2>
 8009b64:	2340      	movs	r3, #64	; 0x40
 8009b66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b6a:	e072      	b.n	8009c52 <UART_SetConfig+0x5a2>
 8009b6c:	2380      	movs	r3, #128	; 0x80
 8009b6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b72:	e06e      	b.n	8009c52 <UART_SetConfig+0x5a2>
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	4a76      	ldr	r2, [pc, #472]	; (8009d54 <UART_SetConfig+0x6a4>)
 8009b7a:	4293      	cmp	r3, r2
 8009b7c:	d130      	bne.n	8009be0 <UART_SetConfig+0x530>
 8009b7e:	4b73      	ldr	r3, [pc, #460]	; (8009d4c <UART_SetConfig+0x69c>)
 8009b80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b82:	f003 0307 	and.w	r3, r3, #7
 8009b86:	2b05      	cmp	r3, #5
 8009b88:	d826      	bhi.n	8009bd8 <UART_SetConfig+0x528>
 8009b8a:	a201      	add	r2, pc, #4	; (adr r2, 8009b90 <UART_SetConfig+0x4e0>)
 8009b8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b90:	08009ba9 	.word	0x08009ba9
 8009b94:	08009bb1 	.word	0x08009bb1
 8009b98:	08009bb9 	.word	0x08009bb9
 8009b9c:	08009bc1 	.word	0x08009bc1
 8009ba0:	08009bc9 	.word	0x08009bc9
 8009ba4:	08009bd1 	.word	0x08009bd1
 8009ba8:	2300      	movs	r3, #0
 8009baa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009bae:	e050      	b.n	8009c52 <UART_SetConfig+0x5a2>
 8009bb0:	2304      	movs	r3, #4
 8009bb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009bb6:	e04c      	b.n	8009c52 <UART_SetConfig+0x5a2>
 8009bb8:	2308      	movs	r3, #8
 8009bba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009bbe:	e048      	b.n	8009c52 <UART_SetConfig+0x5a2>
 8009bc0:	2310      	movs	r3, #16
 8009bc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009bc6:	e044      	b.n	8009c52 <UART_SetConfig+0x5a2>
 8009bc8:	2320      	movs	r3, #32
 8009bca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009bce:	e040      	b.n	8009c52 <UART_SetConfig+0x5a2>
 8009bd0:	2340      	movs	r3, #64	; 0x40
 8009bd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009bd6:	e03c      	b.n	8009c52 <UART_SetConfig+0x5a2>
 8009bd8:	2380      	movs	r3, #128	; 0x80
 8009bda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009bde:	e038      	b.n	8009c52 <UART_SetConfig+0x5a2>
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	4a5c      	ldr	r2, [pc, #368]	; (8009d58 <UART_SetConfig+0x6a8>)
 8009be6:	4293      	cmp	r3, r2
 8009be8:	d130      	bne.n	8009c4c <UART_SetConfig+0x59c>
 8009bea:	4b58      	ldr	r3, [pc, #352]	; (8009d4c <UART_SetConfig+0x69c>)
 8009bec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009bee:	f003 0307 	and.w	r3, r3, #7
 8009bf2:	2b05      	cmp	r3, #5
 8009bf4:	d826      	bhi.n	8009c44 <UART_SetConfig+0x594>
 8009bf6:	a201      	add	r2, pc, #4	; (adr r2, 8009bfc <UART_SetConfig+0x54c>)
 8009bf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bfc:	08009c15 	.word	0x08009c15
 8009c00:	08009c1d 	.word	0x08009c1d
 8009c04:	08009c25 	.word	0x08009c25
 8009c08:	08009c2d 	.word	0x08009c2d
 8009c0c:	08009c35 	.word	0x08009c35
 8009c10:	08009c3d 	.word	0x08009c3d
 8009c14:	2302      	movs	r3, #2
 8009c16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c1a:	e01a      	b.n	8009c52 <UART_SetConfig+0x5a2>
 8009c1c:	2304      	movs	r3, #4
 8009c1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c22:	e016      	b.n	8009c52 <UART_SetConfig+0x5a2>
 8009c24:	2308      	movs	r3, #8
 8009c26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c2a:	e012      	b.n	8009c52 <UART_SetConfig+0x5a2>
 8009c2c:	2310      	movs	r3, #16
 8009c2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c32:	e00e      	b.n	8009c52 <UART_SetConfig+0x5a2>
 8009c34:	2320      	movs	r3, #32
 8009c36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c3a:	e00a      	b.n	8009c52 <UART_SetConfig+0x5a2>
 8009c3c:	2340      	movs	r3, #64	; 0x40
 8009c3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c42:	e006      	b.n	8009c52 <UART_SetConfig+0x5a2>
 8009c44:	2380      	movs	r3, #128	; 0x80
 8009c46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c4a:	e002      	b.n	8009c52 <UART_SetConfig+0x5a2>
 8009c4c:	2380      	movs	r3, #128	; 0x80
 8009c4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	4a40      	ldr	r2, [pc, #256]	; (8009d58 <UART_SetConfig+0x6a8>)
 8009c58:	4293      	cmp	r3, r2
 8009c5a:	f040 80ef 	bne.w	8009e3c <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009c5e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009c62:	2b20      	cmp	r3, #32
 8009c64:	dc46      	bgt.n	8009cf4 <UART_SetConfig+0x644>
 8009c66:	2b02      	cmp	r3, #2
 8009c68:	f2c0 8081 	blt.w	8009d6e <UART_SetConfig+0x6be>
 8009c6c:	3b02      	subs	r3, #2
 8009c6e:	2b1e      	cmp	r3, #30
 8009c70:	d87d      	bhi.n	8009d6e <UART_SetConfig+0x6be>
 8009c72:	a201      	add	r2, pc, #4	; (adr r2, 8009c78 <UART_SetConfig+0x5c8>)
 8009c74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c78:	08009cfb 	.word	0x08009cfb
 8009c7c:	08009d6f 	.word	0x08009d6f
 8009c80:	08009d03 	.word	0x08009d03
 8009c84:	08009d6f 	.word	0x08009d6f
 8009c88:	08009d6f 	.word	0x08009d6f
 8009c8c:	08009d6f 	.word	0x08009d6f
 8009c90:	08009d13 	.word	0x08009d13
 8009c94:	08009d6f 	.word	0x08009d6f
 8009c98:	08009d6f 	.word	0x08009d6f
 8009c9c:	08009d6f 	.word	0x08009d6f
 8009ca0:	08009d6f 	.word	0x08009d6f
 8009ca4:	08009d6f 	.word	0x08009d6f
 8009ca8:	08009d6f 	.word	0x08009d6f
 8009cac:	08009d6f 	.word	0x08009d6f
 8009cb0:	08009d23 	.word	0x08009d23
 8009cb4:	08009d6f 	.word	0x08009d6f
 8009cb8:	08009d6f 	.word	0x08009d6f
 8009cbc:	08009d6f 	.word	0x08009d6f
 8009cc0:	08009d6f 	.word	0x08009d6f
 8009cc4:	08009d6f 	.word	0x08009d6f
 8009cc8:	08009d6f 	.word	0x08009d6f
 8009ccc:	08009d6f 	.word	0x08009d6f
 8009cd0:	08009d6f 	.word	0x08009d6f
 8009cd4:	08009d6f 	.word	0x08009d6f
 8009cd8:	08009d6f 	.word	0x08009d6f
 8009cdc:	08009d6f 	.word	0x08009d6f
 8009ce0:	08009d6f 	.word	0x08009d6f
 8009ce4:	08009d6f 	.word	0x08009d6f
 8009ce8:	08009d6f 	.word	0x08009d6f
 8009cec:	08009d6f 	.word	0x08009d6f
 8009cf0:	08009d61 	.word	0x08009d61
 8009cf4:	2b40      	cmp	r3, #64	; 0x40
 8009cf6:	d036      	beq.n	8009d66 <UART_SetConfig+0x6b6>
 8009cf8:	e039      	b.n	8009d6e <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8009cfa:	f7fd fa85 	bl	8007208 <HAL_RCCEx_GetD3PCLK1Freq>
 8009cfe:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009d00:	e03b      	b.n	8009d7a <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009d02:	f107 0314 	add.w	r3, r7, #20
 8009d06:	4618      	mov	r0, r3
 8009d08:	f7fd fa94 	bl	8007234 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009d0c:	69bb      	ldr	r3, [r7, #24]
 8009d0e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009d10:	e033      	b.n	8009d7a <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009d12:	f107 0308 	add.w	r3, r7, #8
 8009d16:	4618      	mov	r0, r3
 8009d18:	f7fd fbe0 	bl	80074dc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009d20:	e02b      	b.n	8009d7a <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009d22:	4b0a      	ldr	r3, [pc, #40]	; (8009d4c <UART_SetConfig+0x69c>)
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	f003 0320 	and.w	r3, r3, #32
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d009      	beq.n	8009d42 <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009d2e:	4b07      	ldr	r3, [pc, #28]	; (8009d4c <UART_SetConfig+0x69c>)
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	08db      	lsrs	r3, r3, #3
 8009d34:	f003 0303 	and.w	r3, r3, #3
 8009d38:	4a08      	ldr	r2, [pc, #32]	; (8009d5c <UART_SetConfig+0x6ac>)
 8009d3a:	fa22 f303 	lsr.w	r3, r2, r3
 8009d3e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009d40:	e01b      	b.n	8009d7a <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 8009d42:	4b06      	ldr	r3, [pc, #24]	; (8009d5c <UART_SetConfig+0x6ac>)
 8009d44:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009d46:	e018      	b.n	8009d7a <UART_SetConfig+0x6ca>
 8009d48:	40011400 	.word	0x40011400
 8009d4c:	58024400 	.word	0x58024400
 8009d50:	40007800 	.word	0x40007800
 8009d54:	40007c00 	.word	0x40007c00
 8009d58:	58000c00 	.word	0x58000c00
 8009d5c:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009d60:	4bc4      	ldr	r3, [pc, #784]	; (800a074 <UART_SetConfig+0x9c4>)
 8009d62:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009d64:	e009      	b.n	8009d7a <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009d66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009d6a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009d6c:	e005      	b.n	8009d7a <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 8009d6e:	2300      	movs	r3, #0
 8009d70:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8009d72:	2301      	movs	r3, #1
 8009d74:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8009d78:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009d7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	f000 81da 	beq.w	800a136 <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d86:	4abc      	ldr	r2, [pc, #752]	; (800a078 <UART_SetConfig+0x9c8>)
 8009d88:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009d8c:	461a      	mov	r2, r3
 8009d8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d90:	fbb3 f3f2 	udiv	r3, r3, r2
 8009d94:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	685a      	ldr	r2, [r3, #4]
 8009d9a:	4613      	mov	r3, r2
 8009d9c:	005b      	lsls	r3, r3, #1
 8009d9e:	4413      	add	r3, r2
 8009da0:	6a3a      	ldr	r2, [r7, #32]
 8009da2:	429a      	cmp	r2, r3
 8009da4:	d305      	bcc.n	8009db2 <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	685b      	ldr	r3, [r3, #4]
 8009daa:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009dac:	6a3a      	ldr	r2, [r7, #32]
 8009dae:	429a      	cmp	r2, r3
 8009db0:	d903      	bls.n	8009dba <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 8009db2:	2301      	movs	r3, #1
 8009db4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8009db8:	e1bd      	b.n	800a136 <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009dba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009dbc:	4618      	mov	r0, r3
 8009dbe:	f04f 0100 	mov.w	r1, #0
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dc6:	4aac      	ldr	r2, [pc, #688]	; (800a078 <UART_SetConfig+0x9c8>)
 8009dc8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009dcc:	b29a      	uxth	r2, r3
 8009dce:	f04f 0300 	mov.w	r3, #0
 8009dd2:	f7f6 fa81 	bl	80002d8 <__aeabi_uldivmod>
 8009dd6:	4602      	mov	r2, r0
 8009dd8:	460b      	mov	r3, r1
 8009dda:	4610      	mov	r0, r2
 8009ddc:	4619      	mov	r1, r3
 8009dde:	f04f 0200 	mov.w	r2, #0
 8009de2:	f04f 0300 	mov.w	r3, #0
 8009de6:	020b      	lsls	r3, r1, #8
 8009de8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009dec:	0202      	lsls	r2, r0, #8
 8009dee:	6879      	ldr	r1, [r7, #4]
 8009df0:	6849      	ldr	r1, [r1, #4]
 8009df2:	0849      	lsrs	r1, r1, #1
 8009df4:	4608      	mov	r0, r1
 8009df6:	f04f 0100 	mov.w	r1, #0
 8009dfa:	1814      	adds	r4, r2, r0
 8009dfc:	eb43 0501 	adc.w	r5, r3, r1
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	685b      	ldr	r3, [r3, #4]
 8009e04:	461a      	mov	r2, r3
 8009e06:	f04f 0300 	mov.w	r3, #0
 8009e0a:	4620      	mov	r0, r4
 8009e0c:	4629      	mov	r1, r5
 8009e0e:	f7f6 fa63 	bl	80002d8 <__aeabi_uldivmod>
 8009e12:	4602      	mov	r2, r0
 8009e14:	460b      	mov	r3, r1
 8009e16:	4613      	mov	r3, r2
 8009e18:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009e1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e1c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009e20:	d308      	bcc.n	8009e34 <UART_SetConfig+0x784>
 8009e22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e24:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009e28:	d204      	bcs.n	8009e34 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009e30:	60da      	str	r2, [r3, #12]
 8009e32:	e180      	b.n	800a136 <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 8009e34:	2301      	movs	r3, #1
 8009e36:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8009e3a:	e17c      	b.n	800a136 <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	69db      	ldr	r3, [r3, #28]
 8009e40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009e44:	f040 80bf 	bne.w	8009fc6 <UART_SetConfig+0x916>
  {
    switch (clocksource)
 8009e48:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009e4c:	2b20      	cmp	r3, #32
 8009e4e:	dc49      	bgt.n	8009ee4 <UART_SetConfig+0x834>
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	db7c      	blt.n	8009f4e <UART_SetConfig+0x89e>
 8009e54:	2b20      	cmp	r3, #32
 8009e56:	d87a      	bhi.n	8009f4e <UART_SetConfig+0x89e>
 8009e58:	a201      	add	r2, pc, #4	; (adr r2, 8009e60 <UART_SetConfig+0x7b0>)
 8009e5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e5e:	bf00      	nop
 8009e60:	08009eeb 	.word	0x08009eeb
 8009e64:	08009ef3 	.word	0x08009ef3
 8009e68:	08009f4f 	.word	0x08009f4f
 8009e6c:	08009f4f 	.word	0x08009f4f
 8009e70:	08009efb 	.word	0x08009efb
 8009e74:	08009f4f 	.word	0x08009f4f
 8009e78:	08009f4f 	.word	0x08009f4f
 8009e7c:	08009f4f 	.word	0x08009f4f
 8009e80:	08009f0b 	.word	0x08009f0b
 8009e84:	08009f4f 	.word	0x08009f4f
 8009e88:	08009f4f 	.word	0x08009f4f
 8009e8c:	08009f4f 	.word	0x08009f4f
 8009e90:	08009f4f 	.word	0x08009f4f
 8009e94:	08009f4f 	.word	0x08009f4f
 8009e98:	08009f4f 	.word	0x08009f4f
 8009e9c:	08009f4f 	.word	0x08009f4f
 8009ea0:	08009f1b 	.word	0x08009f1b
 8009ea4:	08009f4f 	.word	0x08009f4f
 8009ea8:	08009f4f 	.word	0x08009f4f
 8009eac:	08009f4f 	.word	0x08009f4f
 8009eb0:	08009f4f 	.word	0x08009f4f
 8009eb4:	08009f4f 	.word	0x08009f4f
 8009eb8:	08009f4f 	.word	0x08009f4f
 8009ebc:	08009f4f 	.word	0x08009f4f
 8009ec0:	08009f4f 	.word	0x08009f4f
 8009ec4:	08009f4f 	.word	0x08009f4f
 8009ec8:	08009f4f 	.word	0x08009f4f
 8009ecc:	08009f4f 	.word	0x08009f4f
 8009ed0:	08009f4f 	.word	0x08009f4f
 8009ed4:	08009f4f 	.word	0x08009f4f
 8009ed8:	08009f4f 	.word	0x08009f4f
 8009edc:	08009f4f 	.word	0x08009f4f
 8009ee0:	08009f41 	.word	0x08009f41
 8009ee4:	2b40      	cmp	r3, #64	; 0x40
 8009ee6:	d02e      	beq.n	8009f46 <UART_SetConfig+0x896>
 8009ee8:	e031      	b.n	8009f4e <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009eea:	f7fb fd4f 	bl	800598c <HAL_RCC_GetPCLK1Freq>
 8009eee:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009ef0:	e033      	b.n	8009f5a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009ef2:	f7fb fd61 	bl	80059b8 <HAL_RCC_GetPCLK2Freq>
 8009ef6:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009ef8:	e02f      	b.n	8009f5a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009efa:	f107 0314 	add.w	r3, r7, #20
 8009efe:	4618      	mov	r0, r3
 8009f00:	f7fd f998 	bl	8007234 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009f04:	69bb      	ldr	r3, [r7, #24]
 8009f06:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009f08:	e027      	b.n	8009f5a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009f0a:	f107 0308 	add.w	r3, r7, #8
 8009f0e:	4618      	mov	r0, r3
 8009f10:	f7fd fae4 	bl	80074dc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009f18:	e01f      	b.n	8009f5a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009f1a:	4b58      	ldr	r3, [pc, #352]	; (800a07c <UART_SetConfig+0x9cc>)
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	f003 0320 	and.w	r3, r3, #32
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d009      	beq.n	8009f3a <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009f26:	4b55      	ldr	r3, [pc, #340]	; (800a07c <UART_SetConfig+0x9cc>)
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	08db      	lsrs	r3, r3, #3
 8009f2c:	f003 0303 	and.w	r3, r3, #3
 8009f30:	4a53      	ldr	r2, [pc, #332]	; (800a080 <UART_SetConfig+0x9d0>)
 8009f32:	fa22 f303 	lsr.w	r3, r2, r3
 8009f36:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009f38:	e00f      	b.n	8009f5a <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 8009f3a:	4b51      	ldr	r3, [pc, #324]	; (800a080 <UART_SetConfig+0x9d0>)
 8009f3c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009f3e:	e00c      	b.n	8009f5a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009f40:	4b4c      	ldr	r3, [pc, #304]	; (800a074 <UART_SetConfig+0x9c4>)
 8009f42:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009f44:	e009      	b.n	8009f5a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009f46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009f4a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009f4c:	e005      	b.n	8009f5a <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 8009f4e:	2300      	movs	r3, #0
 8009f50:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8009f52:	2301      	movs	r3, #1
 8009f54:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8009f58:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009f5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	f000 80ea 	beq.w	800a136 <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f66:	4a44      	ldr	r2, [pc, #272]	; (800a078 <UART_SetConfig+0x9c8>)
 8009f68:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009f6c:	461a      	mov	r2, r3
 8009f6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f70:	fbb3 f3f2 	udiv	r3, r3, r2
 8009f74:	005a      	lsls	r2, r3, #1
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	685b      	ldr	r3, [r3, #4]
 8009f7a:	085b      	lsrs	r3, r3, #1
 8009f7c:	441a      	add	r2, r3
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	685b      	ldr	r3, [r3, #4]
 8009f82:	fbb2 f3f3 	udiv	r3, r2, r3
 8009f86:	b29b      	uxth	r3, r3
 8009f88:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009f8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f8c:	2b0f      	cmp	r3, #15
 8009f8e:	d916      	bls.n	8009fbe <UART_SetConfig+0x90e>
 8009f90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009f96:	d212      	bcs.n	8009fbe <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009f98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f9a:	b29b      	uxth	r3, r3
 8009f9c:	f023 030f 	bic.w	r3, r3, #15
 8009fa0:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009fa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fa4:	085b      	lsrs	r3, r3, #1
 8009fa6:	b29b      	uxth	r3, r3
 8009fa8:	f003 0307 	and.w	r3, r3, #7
 8009fac:	b29a      	uxth	r2, r3
 8009fae:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009fb0:	4313      	orrs	r3, r2
 8009fb2:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8009fba:	60da      	str	r2, [r3, #12]
 8009fbc:	e0bb      	b.n	800a136 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8009fbe:	2301      	movs	r3, #1
 8009fc0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8009fc4:	e0b7      	b.n	800a136 <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009fc6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009fca:	2b20      	cmp	r3, #32
 8009fcc:	dc4a      	bgt.n	800a064 <UART_SetConfig+0x9b4>
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	f2c0 8086 	blt.w	800a0e0 <UART_SetConfig+0xa30>
 8009fd4:	2b20      	cmp	r3, #32
 8009fd6:	f200 8083 	bhi.w	800a0e0 <UART_SetConfig+0xa30>
 8009fda:	a201      	add	r2, pc, #4	; (adr r2, 8009fe0 <UART_SetConfig+0x930>)
 8009fdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fe0:	0800a06b 	.word	0x0800a06b
 8009fe4:	0800a085 	.word	0x0800a085
 8009fe8:	0800a0e1 	.word	0x0800a0e1
 8009fec:	0800a0e1 	.word	0x0800a0e1
 8009ff0:	0800a08d 	.word	0x0800a08d
 8009ff4:	0800a0e1 	.word	0x0800a0e1
 8009ff8:	0800a0e1 	.word	0x0800a0e1
 8009ffc:	0800a0e1 	.word	0x0800a0e1
 800a000:	0800a09d 	.word	0x0800a09d
 800a004:	0800a0e1 	.word	0x0800a0e1
 800a008:	0800a0e1 	.word	0x0800a0e1
 800a00c:	0800a0e1 	.word	0x0800a0e1
 800a010:	0800a0e1 	.word	0x0800a0e1
 800a014:	0800a0e1 	.word	0x0800a0e1
 800a018:	0800a0e1 	.word	0x0800a0e1
 800a01c:	0800a0e1 	.word	0x0800a0e1
 800a020:	0800a0ad 	.word	0x0800a0ad
 800a024:	0800a0e1 	.word	0x0800a0e1
 800a028:	0800a0e1 	.word	0x0800a0e1
 800a02c:	0800a0e1 	.word	0x0800a0e1
 800a030:	0800a0e1 	.word	0x0800a0e1
 800a034:	0800a0e1 	.word	0x0800a0e1
 800a038:	0800a0e1 	.word	0x0800a0e1
 800a03c:	0800a0e1 	.word	0x0800a0e1
 800a040:	0800a0e1 	.word	0x0800a0e1
 800a044:	0800a0e1 	.word	0x0800a0e1
 800a048:	0800a0e1 	.word	0x0800a0e1
 800a04c:	0800a0e1 	.word	0x0800a0e1
 800a050:	0800a0e1 	.word	0x0800a0e1
 800a054:	0800a0e1 	.word	0x0800a0e1
 800a058:	0800a0e1 	.word	0x0800a0e1
 800a05c:	0800a0e1 	.word	0x0800a0e1
 800a060:	0800a0d3 	.word	0x0800a0d3
 800a064:	2b40      	cmp	r3, #64	; 0x40
 800a066:	d037      	beq.n	800a0d8 <UART_SetConfig+0xa28>
 800a068:	e03a      	b.n	800a0e0 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a06a:	f7fb fc8f 	bl	800598c <HAL_RCC_GetPCLK1Freq>
 800a06e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a070:	e03c      	b.n	800a0ec <UART_SetConfig+0xa3c>
 800a072:	bf00      	nop
 800a074:	003d0900 	.word	0x003d0900
 800a078:	0800cb40 	.word	0x0800cb40
 800a07c:	58024400 	.word	0x58024400
 800a080:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a084:	f7fb fc98 	bl	80059b8 <HAL_RCC_GetPCLK2Freq>
 800a088:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a08a:	e02f      	b.n	800a0ec <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a08c:	f107 0314 	add.w	r3, r7, #20
 800a090:	4618      	mov	r0, r3
 800a092:	f7fd f8cf 	bl	8007234 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a096:	69bb      	ldr	r3, [r7, #24]
 800a098:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a09a:	e027      	b.n	800a0ec <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a09c:	f107 0308 	add.w	r3, r7, #8
 800a0a0:	4618      	mov	r0, r3
 800a0a2:	f7fd fa1b 	bl	80074dc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a0aa:	e01f      	b.n	800a0ec <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a0ac:	4b2c      	ldr	r3, [pc, #176]	; (800a160 <UART_SetConfig+0xab0>)
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	f003 0320 	and.w	r3, r3, #32
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d009      	beq.n	800a0cc <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a0b8:	4b29      	ldr	r3, [pc, #164]	; (800a160 <UART_SetConfig+0xab0>)
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	08db      	lsrs	r3, r3, #3
 800a0be:	f003 0303 	and.w	r3, r3, #3
 800a0c2:	4a28      	ldr	r2, [pc, #160]	; (800a164 <UART_SetConfig+0xab4>)
 800a0c4:	fa22 f303 	lsr.w	r3, r2, r3
 800a0c8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a0ca:	e00f      	b.n	800a0ec <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 800a0cc:	4b25      	ldr	r3, [pc, #148]	; (800a164 <UART_SetConfig+0xab4>)
 800a0ce:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a0d0:	e00c      	b.n	800a0ec <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a0d2:	4b25      	ldr	r3, [pc, #148]	; (800a168 <UART_SetConfig+0xab8>)
 800a0d4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a0d6:	e009      	b.n	800a0ec <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a0d8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a0dc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a0de:	e005      	b.n	800a0ec <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 800a0e0:	2300      	movs	r3, #0
 800a0e2:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800a0e4:	2301      	movs	r3, #1
 800a0e6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800a0ea:	bf00      	nop
    }

    if (pclk != 0U)
 800a0ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d021      	beq.n	800a136 <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0f6:	4a1d      	ldr	r2, [pc, #116]	; (800a16c <UART_SetConfig+0xabc>)
 800a0f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a0fc:	461a      	mov	r2, r3
 800a0fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a100:	fbb3 f2f2 	udiv	r2, r3, r2
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	685b      	ldr	r3, [r3, #4]
 800a108:	085b      	lsrs	r3, r3, #1
 800a10a:	441a      	add	r2, r3
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	685b      	ldr	r3, [r3, #4]
 800a110:	fbb2 f3f3 	udiv	r3, r2, r3
 800a114:	b29b      	uxth	r3, r3
 800a116:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a118:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a11a:	2b0f      	cmp	r3, #15
 800a11c:	d908      	bls.n	800a130 <UART_SetConfig+0xa80>
 800a11e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a120:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a124:	d204      	bcs.n	800a130 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a12c:	60da      	str	r2, [r3, #12]
 800a12e:	e002      	b.n	800a136 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800a130:	2301      	movs	r3, #1
 800a132:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	2201      	movs	r2, #1
 800a13a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	2201      	movs	r2, #1
 800a142:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	2200      	movs	r2, #0
 800a14a:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	2200      	movs	r2, #0
 800a150:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800a152:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800a156:	4618      	mov	r0, r3
 800a158:	3738      	adds	r7, #56	; 0x38
 800a15a:	46bd      	mov	sp, r7
 800a15c:	bdb0      	pop	{r4, r5, r7, pc}
 800a15e:	bf00      	nop
 800a160:	58024400 	.word	0x58024400
 800a164:	03d09000 	.word	0x03d09000
 800a168:	003d0900 	.word	0x003d0900
 800a16c:	0800cb40 	.word	0x0800cb40

0800a170 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a170:	b480      	push	{r7}
 800a172:	b083      	sub	sp, #12
 800a174:	af00      	add	r7, sp, #0
 800a176:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a17c:	f003 0301 	and.w	r3, r3, #1
 800a180:	2b00      	cmp	r3, #0
 800a182:	d00a      	beq.n	800a19a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	685b      	ldr	r3, [r3, #4]
 800a18a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	430a      	orrs	r2, r1
 800a198:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a19e:	f003 0302 	and.w	r3, r3, #2
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d00a      	beq.n	800a1bc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	685b      	ldr	r3, [r3, #4]
 800a1ac:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	430a      	orrs	r2, r1
 800a1ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1c0:	f003 0304 	and.w	r3, r3, #4
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d00a      	beq.n	800a1de <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	685b      	ldr	r3, [r3, #4]
 800a1ce:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	430a      	orrs	r2, r1
 800a1dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1e2:	f003 0308 	and.w	r3, r3, #8
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d00a      	beq.n	800a200 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	685b      	ldr	r3, [r3, #4]
 800a1f0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	430a      	orrs	r2, r1
 800a1fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a204:	f003 0310 	and.w	r3, r3, #16
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d00a      	beq.n	800a222 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	689b      	ldr	r3, [r3, #8]
 800a212:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	430a      	orrs	r2, r1
 800a220:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a226:	f003 0320 	and.w	r3, r3, #32
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d00a      	beq.n	800a244 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	689b      	ldr	r3, [r3, #8]
 800a234:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	430a      	orrs	r2, r1
 800a242:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a248:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d01a      	beq.n	800a286 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	685b      	ldr	r3, [r3, #4]
 800a256:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	430a      	orrs	r2, r1
 800a264:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a26a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a26e:	d10a      	bne.n	800a286 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	685b      	ldr	r3, [r3, #4]
 800a276:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	430a      	orrs	r2, r1
 800a284:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a28a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d00a      	beq.n	800a2a8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	685b      	ldr	r3, [r3, #4]
 800a298:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	430a      	orrs	r2, r1
 800a2a6:	605a      	str	r2, [r3, #4]
  }
}
 800a2a8:	bf00      	nop
 800a2aa:	370c      	adds	r7, #12
 800a2ac:	46bd      	mov	sp, r7
 800a2ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b2:	4770      	bx	lr

0800a2b4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a2b4:	b580      	push	{r7, lr}
 800a2b6:	b086      	sub	sp, #24
 800a2b8:	af02      	add	r7, sp, #8
 800a2ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	2200      	movs	r2, #0
 800a2c0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a2c4:	f7f7 f962 	bl	800158c <HAL_GetTick>
 800a2c8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	f003 0308 	and.w	r3, r3, #8
 800a2d4:	2b08      	cmp	r3, #8
 800a2d6:	d10e      	bne.n	800a2f6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a2d8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a2dc:	9300      	str	r3, [sp, #0]
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	2200      	movs	r2, #0
 800a2e2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a2e6:	6878      	ldr	r0, [r7, #4]
 800a2e8:	f000 f82f 	bl	800a34a <UART_WaitOnFlagUntilTimeout>
 800a2ec:	4603      	mov	r3, r0
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d001      	beq.n	800a2f6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a2f2:	2303      	movs	r3, #3
 800a2f4:	e025      	b.n	800a342 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	f003 0304 	and.w	r3, r3, #4
 800a300:	2b04      	cmp	r3, #4
 800a302:	d10e      	bne.n	800a322 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a304:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a308:	9300      	str	r3, [sp, #0]
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	2200      	movs	r2, #0
 800a30e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a312:	6878      	ldr	r0, [r7, #4]
 800a314:	f000 f819 	bl	800a34a <UART_WaitOnFlagUntilTimeout>
 800a318:	4603      	mov	r3, r0
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d001      	beq.n	800a322 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a31e:	2303      	movs	r3, #3
 800a320:	e00f      	b.n	800a342 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	2220      	movs	r2, #32
 800a326:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	2220      	movs	r2, #32
 800a32e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	2200      	movs	r2, #0
 800a336:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	2200      	movs	r2, #0
 800a33c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a340:	2300      	movs	r3, #0
}
 800a342:	4618      	mov	r0, r3
 800a344:	3710      	adds	r7, #16
 800a346:	46bd      	mov	sp, r7
 800a348:	bd80      	pop	{r7, pc}

0800a34a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a34a:	b580      	push	{r7, lr}
 800a34c:	b084      	sub	sp, #16
 800a34e:	af00      	add	r7, sp, #0
 800a350:	60f8      	str	r0, [r7, #12]
 800a352:	60b9      	str	r1, [r7, #8]
 800a354:	603b      	str	r3, [r7, #0]
 800a356:	4613      	mov	r3, r2
 800a358:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a35a:	e062      	b.n	800a422 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a35c:	69bb      	ldr	r3, [r7, #24]
 800a35e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a362:	d05e      	beq.n	800a422 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a364:	f7f7 f912 	bl	800158c <HAL_GetTick>
 800a368:	4602      	mov	r2, r0
 800a36a:	683b      	ldr	r3, [r7, #0]
 800a36c:	1ad3      	subs	r3, r2, r3
 800a36e:	69ba      	ldr	r2, [r7, #24]
 800a370:	429a      	cmp	r2, r3
 800a372:	d302      	bcc.n	800a37a <UART_WaitOnFlagUntilTimeout+0x30>
 800a374:	69bb      	ldr	r3, [r7, #24]
 800a376:	2b00      	cmp	r3, #0
 800a378:	d11d      	bne.n	800a3b6 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	681a      	ldr	r2, [r3, #0]
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a388:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	689a      	ldr	r2, [r3, #8]
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	f022 0201 	bic.w	r2, r2, #1
 800a398:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	2220      	movs	r2, #32
 800a39e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	2220      	movs	r2, #32
 800a3a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	2200      	movs	r2, #0
 800a3ae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800a3b2:	2303      	movs	r3, #3
 800a3b4:	e045      	b.n	800a442 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	f003 0304 	and.w	r3, r3, #4
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d02e      	beq.n	800a422 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	69db      	ldr	r3, [r3, #28]
 800a3ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a3ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a3d2:	d126      	bne.n	800a422 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a3dc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	681a      	ldr	r2, [r3, #0]
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a3ec:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	689a      	ldr	r2, [r3, #8]
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	f022 0201 	bic.w	r2, r2, #1
 800a3fc:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	2220      	movs	r2, #32
 800a402:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	2220      	movs	r2, #32
 800a40a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	2220      	movs	r2, #32
 800a412:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	2200      	movs	r2, #0
 800a41a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800a41e:	2303      	movs	r3, #3
 800a420:	e00f      	b.n	800a442 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	69da      	ldr	r2, [r3, #28]
 800a428:	68bb      	ldr	r3, [r7, #8]
 800a42a:	4013      	ands	r3, r2
 800a42c:	68ba      	ldr	r2, [r7, #8]
 800a42e:	429a      	cmp	r2, r3
 800a430:	bf0c      	ite	eq
 800a432:	2301      	moveq	r3, #1
 800a434:	2300      	movne	r3, #0
 800a436:	b2db      	uxtb	r3, r3
 800a438:	461a      	mov	r2, r3
 800a43a:	79fb      	ldrb	r3, [r7, #7]
 800a43c:	429a      	cmp	r2, r3
 800a43e:	d08d      	beq.n	800a35c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a440:	2300      	movs	r3, #0
}
 800a442:	4618      	mov	r0, r3
 800a444:	3710      	adds	r7, #16
 800a446:	46bd      	mov	sp, r7
 800a448:	bd80      	pop	{r7, pc}

0800a44a <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a44a:	b480      	push	{r7}
 800a44c:	b083      	sub	sp, #12
 800a44e:	af00      	add	r7, sp, #0
 800a450:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	681a      	ldr	r2, [r3, #0]
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800a460:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	689a      	ldr	r2, [r3, #8]
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800a470:	609a      	str	r2, [r3, #8]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	2220      	movs	r2, #32
 800a476:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800a47a:	bf00      	nop
 800a47c:	370c      	adds	r7, #12
 800a47e:	46bd      	mov	sp, r7
 800a480:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a484:	4770      	bx	lr
	...

0800a488 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a488:	b480      	push	{r7}
 800a48a:	b083      	sub	sp, #12
 800a48c:	af00      	add	r7, sp, #0
 800a48e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	681a      	ldr	r2, [r3, #0]
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800a49e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	6899      	ldr	r1, [r3, #8]
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	681a      	ldr	r2, [r3, #0]
 800a4aa:	4b0f      	ldr	r3, [pc, #60]	; (800a4e8 <UART_EndRxTransfer+0x60>)
 800a4ac:	400b      	ands	r3, r1
 800a4ae:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a4b4:	2b01      	cmp	r3, #1
 800a4b6:	d107      	bne.n	800a4c8 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	681a      	ldr	r2, [r3, #0]
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	f022 0210 	bic.w	r2, r2, #16
 800a4c6:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	2220      	movs	r2, #32
 800a4cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	2200      	movs	r2, #0
 800a4d4:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	2200      	movs	r2, #0
 800a4da:	671a      	str	r2, [r3, #112]	; 0x70
}
 800a4dc:	bf00      	nop
 800a4de:	370c      	adds	r7, #12
 800a4e0:	46bd      	mov	sp, r7
 800a4e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4e6:	4770      	bx	lr
 800a4e8:	effffffe 	.word	0xeffffffe

0800a4ec <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a4ec:	b580      	push	{r7, lr}
 800a4ee:	b084      	sub	sp, #16
 800a4f0:	af00      	add	r7, sp, #0
 800a4f2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4f8:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	69db      	ldr	r3, [r3, #28]
 800a4fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a502:	d014      	beq.n	800a52e <UART_DMATransmitCplt+0x42>
  {
    huart->TxXferCount = 0U;
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	2200      	movs	r2, #0
 800a508:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	689a      	ldr	r2, [r3, #8]
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a51a:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	681a      	ldr	r2, [r3, #0]
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a52a:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a52c:	e002      	b.n	800a534 <UART_DMATransmitCplt+0x48>
    HAL_UART_TxCpltCallback(huart);
 800a52e:	68f8      	ldr	r0, [r7, #12]
 800a530:	f7ff f894 	bl	800965c <HAL_UART_TxCpltCallback>
}
 800a534:	bf00      	nop
 800a536:	3710      	adds	r7, #16
 800a538:	46bd      	mov	sp, r7
 800a53a:	bd80      	pop	{r7, pc}

0800a53c <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a53c:	b580      	push	{r7, lr}
 800a53e:	b084      	sub	sp, #16
 800a540:	af00      	add	r7, sp, #0
 800a542:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a548:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800a54a:	68f8      	ldr	r0, [r7, #12]
 800a54c:	f7ff f890 	bl	8009670 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a550:	bf00      	nop
 800a552:	3710      	adds	r7, #16
 800a554:	46bd      	mov	sp, r7
 800a556:	bd80      	pop	{r7, pc}

0800a558 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a558:	b580      	push	{r7, lr}
 800a55a:	b086      	sub	sp, #24
 800a55c:	af00      	add	r7, sp, #0
 800a55e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a564:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800a566:	697b      	ldr	r3, [r7, #20]
 800a568:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a56c:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800a56e:	697b      	ldr	r3, [r7, #20]
 800a570:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a574:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800a576:	697b      	ldr	r3, [r7, #20]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	689b      	ldr	r3, [r3, #8]
 800a57c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a580:	2b80      	cmp	r3, #128	; 0x80
 800a582:	d109      	bne.n	800a598 <UART_DMAError+0x40>
 800a584:	693b      	ldr	r3, [r7, #16]
 800a586:	2b21      	cmp	r3, #33	; 0x21
 800a588:	d106      	bne.n	800a598 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800a58a:	697b      	ldr	r3, [r7, #20]
 800a58c:	2200      	movs	r2, #0
 800a58e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800a592:	6978      	ldr	r0, [r7, #20]
 800a594:	f7ff ff59 	bl	800a44a <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800a598:	697b      	ldr	r3, [r7, #20]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	689b      	ldr	r3, [r3, #8]
 800a59e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a5a2:	2b40      	cmp	r3, #64	; 0x40
 800a5a4:	d109      	bne.n	800a5ba <UART_DMAError+0x62>
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	2b22      	cmp	r3, #34	; 0x22
 800a5aa:	d106      	bne.n	800a5ba <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800a5ac:	697b      	ldr	r3, [r7, #20]
 800a5ae:	2200      	movs	r2, #0
 800a5b0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800a5b4:	6978      	ldr	r0, [r7, #20]
 800a5b6:	f7ff ff67 	bl	800a488 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a5ba:	697b      	ldr	r3, [r7, #20]
 800a5bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a5c0:	f043 0210 	orr.w	r2, r3, #16
 800a5c4:	697b      	ldr	r3, [r7, #20]
 800a5c6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a5ca:	6978      	ldr	r0, [r7, #20]
 800a5cc:	f7ff f85a 	bl	8009684 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a5d0:	bf00      	nop
 800a5d2:	3718      	adds	r7, #24
 800a5d4:	46bd      	mov	sp, r7
 800a5d6:	bd80      	pop	{r7, pc}

0800a5d8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a5d8:	b580      	push	{r7, lr}
 800a5da:	b084      	sub	sp, #16
 800a5dc:	af00      	add	r7, sp, #0
 800a5de:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5e4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	2200      	movs	r2, #0
 800a5ea:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	2200      	movs	r2, #0
 800a5f2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a5f6:	68f8      	ldr	r0, [r7, #12]
 800a5f8:	f7ff f844 	bl	8009684 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a5fc:	bf00      	nop
 800a5fe:	3710      	adds	r7, #16
 800a600:	46bd      	mov	sp, r7
 800a602:	bd80      	pop	{r7, pc}

0800a604 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a604:	b580      	push	{r7, lr}
 800a606:	b082      	sub	sp, #8
 800a608:	af00      	add	r7, sp, #0
 800a60a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	681a      	ldr	r2, [r3, #0]
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a61a:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	2220      	movs	r2, #32
 800a620:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	2200      	movs	r2, #0
 800a628:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a62a:	6878      	ldr	r0, [r7, #4]
 800a62c:	f7ff f816 	bl	800965c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a630:	bf00      	nop
 800a632:	3708      	adds	r7, #8
 800a634:	46bd      	mov	sp, r7
 800a636:	bd80      	pop	{r7, pc}

0800a638 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a638:	b480      	push	{r7}
 800a63a:	b083      	sub	sp, #12
 800a63c:	af00      	add	r7, sp, #0
 800a63e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a640:	bf00      	nop
 800a642:	370c      	adds	r7, #12
 800a644:	46bd      	mov	sp, r7
 800a646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a64a:	4770      	bx	lr

0800a64c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800a64c:	b480      	push	{r7}
 800a64e:	b083      	sub	sp, #12
 800a650:	af00      	add	r7, sp, #0
 800a652:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800a654:	bf00      	nop
 800a656:	370c      	adds	r7, #12
 800a658:	46bd      	mov	sp, r7
 800a65a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a65e:	4770      	bx	lr

0800a660 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800a660:	b480      	push	{r7}
 800a662:	b083      	sub	sp, #12
 800a664:	af00      	add	r7, sp, #0
 800a666:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a668:	bf00      	nop
 800a66a:	370c      	adds	r7, #12
 800a66c:	46bd      	mov	sp, r7
 800a66e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a672:	4770      	bx	lr

0800a674 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a674:	b480      	push	{r7}
 800a676:	b085      	sub	sp, #20
 800a678:	af00      	add	r7, sp, #0
 800a67a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a682:	2b01      	cmp	r3, #1
 800a684:	d101      	bne.n	800a68a <HAL_UARTEx_DisableFifoMode+0x16>
 800a686:	2302      	movs	r3, #2
 800a688:	e027      	b.n	800a6da <HAL_UARTEx_DisableFifoMode+0x66>
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	2201      	movs	r2, #1
 800a68e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	2224      	movs	r2, #36	; 0x24
 800a696:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	681a      	ldr	r2, [r3, #0]
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	f022 0201 	bic.w	r2, r2, #1
 800a6b0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a6b8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	2200      	movs	r2, #0
 800a6be:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	68fa      	ldr	r2, [r7, #12]
 800a6c6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	2220      	movs	r2, #32
 800a6cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	2200      	movs	r2, #0
 800a6d4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a6d8:	2300      	movs	r3, #0
}
 800a6da:	4618      	mov	r0, r3
 800a6dc:	3714      	adds	r7, #20
 800a6de:	46bd      	mov	sp, r7
 800a6e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6e4:	4770      	bx	lr

0800a6e6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a6e6:	b580      	push	{r7, lr}
 800a6e8:	b084      	sub	sp, #16
 800a6ea:	af00      	add	r7, sp, #0
 800a6ec:	6078      	str	r0, [r7, #4]
 800a6ee:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a6f6:	2b01      	cmp	r3, #1
 800a6f8:	d101      	bne.n	800a6fe <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a6fa:	2302      	movs	r3, #2
 800a6fc:	e02d      	b.n	800a75a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	2201      	movs	r2, #1
 800a702:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	2224      	movs	r2, #36	; 0x24
 800a70a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	681a      	ldr	r2, [r3, #0]
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	f022 0201 	bic.w	r2, r2, #1
 800a724:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	689b      	ldr	r3, [r3, #8]
 800a72c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	683a      	ldr	r2, [r7, #0]
 800a736:	430a      	orrs	r2, r1
 800a738:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a73a:	6878      	ldr	r0, [r7, #4]
 800a73c:	f000 f850 	bl	800a7e0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	68fa      	ldr	r2, [r7, #12]
 800a746:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	2220      	movs	r2, #32
 800a74c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	2200      	movs	r2, #0
 800a754:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a758:	2300      	movs	r3, #0
}
 800a75a:	4618      	mov	r0, r3
 800a75c:	3710      	adds	r7, #16
 800a75e:	46bd      	mov	sp, r7
 800a760:	bd80      	pop	{r7, pc}

0800a762 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a762:	b580      	push	{r7, lr}
 800a764:	b084      	sub	sp, #16
 800a766:	af00      	add	r7, sp, #0
 800a768:	6078      	str	r0, [r7, #4]
 800a76a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a772:	2b01      	cmp	r3, #1
 800a774:	d101      	bne.n	800a77a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a776:	2302      	movs	r3, #2
 800a778:	e02d      	b.n	800a7d6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	2201      	movs	r2, #1
 800a77e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	2224      	movs	r2, #36	; 0x24
 800a786:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	681a      	ldr	r2, [r3, #0]
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	f022 0201 	bic.w	r2, r2, #1
 800a7a0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	689b      	ldr	r3, [r3, #8]
 800a7a8:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	683a      	ldr	r2, [r7, #0]
 800a7b2:	430a      	orrs	r2, r1
 800a7b4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a7b6:	6878      	ldr	r0, [r7, #4]
 800a7b8:	f000 f812 	bl	800a7e0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	68fa      	ldr	r2, [r7, #12]
 800a7c2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	2220      	movs	r2, #32
 800a7c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	2200      	movs	r2, #0
 800a7d0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a7d4:	2300      	movs	r3, #0
}
 800a7d6:	4618      	mov	r0, r3
 800a7d8:	3710      	adds	r7, #16
 800a7da:	46bd      	mov	sp, r7
 800a7dc:	bd80      	pop	{r7, pc}
	...

0800a7e0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a7e0:	b480      	push	{r7}
 800a7e2:	b085      	sub	sp, #20
 800a7e4:	af00      	add	r7, sp, #0
 800a7e6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d108      	bne.n	800a802 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	2201      	movs	r2, #1
 800a7f4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	2201      	movs	r2, #1
 800a7fc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a800:	e031      	b.n	800a866 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a802:	2310      	movs	r3, #16
 800a804:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a806:	2310      	movs	r3, #16
 800a808:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	689b      	ldr	r3, [r3, #8]
 800a810:	0e5b      	lsrs	r3, r3, #25
 800a812:	b2db      	uxtb	r3, r3
 800a814:	f003 0307 	and.w	r3, r3, #7
 800a818:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	689b      	ldr	r3, [r3, #8]
 800a820:	0f5b      	lsrs	r3, r3, #29
 800a822:	b2db      	uxtb	r3, r3
 800a824:	f003 0307 	and.w	r3, r3, #7
 800a828:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a82a:	7bbb      	ldrb	r3, [r7, #14]
 800a82c:	7b3a      	ldrb	r2, [r7, #12]
 800a82e:	4911      	ldr	r1, [pc, #68]	; (800a874 <UARTEx_SetNbDataToProcess+0x94>)
 800a830:	5c8a      	ldrb	r2, [r1, r2]
 800a832:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a836:	7b3a      	ldrb	r2, [r7, #12]
 800a838:	490f      	ldr	r1, [pc, #60]	; (800a878 <UARTEx_SetNbDataToProcess+0x98>)
 800a83a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a83c:	fb93 f3f2 	sdiv	r3, r3, r2
 800a840:	b29a      	uxth	r2, r3
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a848:	7bfb      	ldrb	r3, [r7, #15]
 800a84a:	7b7a      	ldrb	r2, [r7, #13]
 800a84c:	4909      	ldr	r1, [pc, #36]	; (800a874 <UARTEx_SetNbDataToProcess+0x94>)
 800a84e:	5c8a      	ldrb	r2, [r1, r2]
 800a850:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a854:	7b7a      	ldrb	r2, [r7, #13]
 800a856:	4908      	ldr	r1, [pc, #32]	; (800a878 <UARTEx_SetNbDataToProcess+0x98>)
 800a858:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a85a:	fb93 f3f2 	sdiv	r3, r3, r2
 800a85e:	b29a      	uxth	r2, r3
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800a866:	bf00      	nop
 800a868:	3714      	adds	r7, #20
 800a86a:	46bd      	mov	sp, r7
 800a86c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a870:	4770      	bx	lr
 800a872:	bf00      	nop
 800a874:	0800cb58 	.word	0x0800cb58
 800a878:	0800cb60 	.word	0x0800cb60

0800a87c <arm_fir_f32>:
void arm_fir_f32(
  const arm_fir_instance_f32 * S,
  const float32_t * pSrc,
        float32_t * pDst,
        uint32_t blockSize)
{
 800a87c:	b480      	push	{r7}
 800a87e:	b08f      	sub	sp, #60	; 0x3c
 800a880:	af00      	add	r7, sp, #0
 800a882:	60f8      	str	r0, [r7, #12]
 800a884:	60b9      	str	r1, [r7, #8]
 800a886:	607a      	str	r2, [r7, #4]
 800a888:	603b      	str	r3, [r7, #0]
        float32_t *pState = S->pState;                 /* State pointer */
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	685b      	ldr	r3, [r3, #4]
 800a88e:	637b      	str	r3, [r7, #52]	; 0x34
  const float32_t *pCoeffs = S->pCoeffs;               /* Coefficient pointer */
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	689b      	ldr	r3, [r3, #8]
 800a894:	617b      	str	r3, [r7, #20]
        float32_t *pStateCurnt;                        /* Points to the current sample of the state */
        float32_t *px;                                 /* Temporary pointer for state buffer */
  const float32_t *pb;                                 /* Temporary pointer for coefficient buffer */
        float32_t acc0;                                /* Accumulator */
        uint32_t numTaps = S->numTaps;                 /* Number of filter coefficients in the filter */
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	881b      	ldrh	r3, [r3, #0]
 800a89a:	613b      	str	r3, [r7, #16]
        float32_t c0;                                           /* Temporary variable to hold coefficient value */
#endif

  /* S->pState points to state array which contains previous frame (numTaps - 1) samples */
  /* pStateCurnt points to the location where the new input data should be written */
  pStateCurnt = &(S->pState[(numTaps - 1U)]);
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	685a      	ldr	r2, [r3, #4]
 800a8a0:	6939      	ldr	r1, [r7, #16]
 800a8a2:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800a8a6:	440b      	add	r3, r1
 800a8a8:	009b      	lsls	r3, r3, #2
 800a8aa:	4413      	add	r3, r2
 800a8ac:	633b      	str	r3, [r7, #48]	; 0x30
  blkCnt = blockSize % 0x8U;

#else

  /* Initialize blkCnt with number of taps */
  blkCnt = blockSize;
 800a8ae:	683b      	ldr	r3, [r7, #0]
 800a8b0:	61bb      	str	r3, [r7, #24]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  while (blkCnt > 0U)
 800a8b2:	e034      	b.n	800a91e <arm_fir_f32+0xa2>
  {
    /* Copy one sample at a time into state buffer */
    *pStateCurnt++ = *pSrc++;
 800a8b4:	68ba      	ldr	r2, [r7, #8]
 800a8b6:	1d13      	adds	r3, r2, #4
 800a8b8:	60bb      	str	r3, [r7, #8]
 800a8ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8bc:	1d19      	adds	r1, r3, #4
 800a8be:	6339      	str	r1, [r7, #48]	; 0x30
 800a8c0:	6812      	ldr	r2, [r2, #0]
 800a8c2:	601a      	str	r2, [r3, #0]

    /* Set the accumulator to zero */
    acc0 = 0.0f;
 800a8c4:	f04f 0300 	mov.w	r3, #0
 800a8c8:	627b      	str	r3, [r7, #36]	; 0x24

    /* Initialize state pointer */
    px = pState;
 800a8ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a8cc:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Initialize Coefficient pointer */
    pb = pCoeffs;
 800a8ce:	697b      	ldr	r3, [r7, #20]
 800a8d0:	62bb      	str	r3, [r7, #40]	; 0x28

    i = numTaps;
 800a8d2:	693b      	ldr	r3, [r7, #16]
 800a8d4:	623b      	str	r3, [r7, #32]

    /* Perform the multiply-accumulates */
    while (i > 0U)
 800a8d6:	e014      	b.n	800a902 <arm_fir_f32+0x86>
    {
      /* acc =  b[numTaps-1] * x[n-numTaps-1] + b[numTaps-2] * x[n-numTaps-2] + b[numTaps-3] * x[n-numTaps-3] +...+ b[0] * x[0] */
      acc0 += *px++ * *pb++;
 800a8d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8da:	1d1a      	adds	r2, r3, #4
 800a8dc:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a8de:	ed93 7a00 	vldr	s14, [r3]
 800a8e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8e4:	1d1a      	adds	r2, r3, #4
 800a8e6:	62ba      	str	r2, [r7, #40]	; 0x28
 800a8e8:	edd3 7a00 	vldr	s15, [r3]
 800a8ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a8f0:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800a8f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a8f8:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

      i--;
 800a8fc:	6a3b      	ldr	r3, [r7, #32]
 800a8fe:	3b01      	subs	r3, #1
 800a900:	623b      	str	r3, [r7, #32]
    while (i > 0U)
 800a902:	6a3b      	ldr	r3, [r7, #32]
 800a904:	2b00      	cmp	r3, #0
 800a906:	d1e7      	bne.n	800a8d8 <arm_fir_f32+0x5c>
    }

    /* Store result in destination buffer. */
    *pDst++ = acc0;
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	1d1a      	adds	r2, r3, #4
 800a90c:	607a      	str	r2, [r7, #4]
 800a90e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a910:	601a      	str	r2, [r3, #0]

    /* Advance state pointer by 1 for the next sample */
    pState = pState + 1U;
 800a912:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a914:	3304      	adds	r3, #4
 800a916:	637b      	str	r3, [r7, #52]	; 0x34

    /* Decrement loop counter */
    blkCnt--;
 800a918:	69bb      	ldr	r3, [r7, #24]
 800a91a:	3b01      	subs	r3, #1
 800a91c:	61bb      	str	r3, [r7, #24]
  while (blkCnt > 0U)
 800a91e:	69bb      	ldr	r3, [r7, #24]
 800a920:	2b00      	cmp	r3, #0
 800a922:	d1c7      	bne.n	800a8b4 <arm_fir_f32+0x38>
  /* Processing is complete.
     Now copy the last numTaps - 1 samples to the start of the state buffer.
     This prepares the state buffer for the next function call. */

  /* Points to the start of the state buffer */
  pStateCurnt = S->pState;
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	685b      	ldr	r3, [r3, #4]
 800a928:	633b      	str	r3, [r7, #48]	; 0x30
  tapCnt = (numTaps - 1U) % 0x4U;

#else

  /* Initialize tapCnt with number of taps */
  tapCnt = (numTaps - 1U);
 800a92a:	693b      	ldr	r3, [r7, #16]
 800a92c:	3b01      	subs	r3, #1
 800a92e:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  /* Copy remaining data */
  while (tapCnt > 0U)
 800a930:	e00a      	b.n	800a948 <arm_fir_f32+0xcc>
  {
    *pStateCurnt++ = *pState++;
 800a932:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a934:	1d13      	adds	r3, r2, #4
 800a936:	637b      	str	r3, [r7, #52]	; 0x34
 800a938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a93a:	1d19      	adds	r1, r3, #4
 800a93c:	6339      	str	r1, [r7, #48]	; 0x30
 800a93e:	6812      	ldr	r2, [r2, #0]
 800a940:	601a      	str	r2, [r3, #0]

    /* Decrement loop counter */
    tapCnt--;
 800a942:	69fb      	ldr	r3, [r7, #28]
 800a944:	3b01      	subs	r3, #1
 800a946:	61fb      	str	r3, [r7, #28]
  while (tapCnt > 0U)
 800a948:	69fb      	ldr	r3, [r7, #28]
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d1f1      	bne.n	800a932 <arm_fir_f32+0xb6>
  }

}
 800a94e:	bf00      	nop
 800a950:	bf00      	nop
 800a952:	373c      	adds	r7, #60	; 0x3c
 800a954:	46bd      	mov	sp, r7
 800a956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a95a:	4770      	bx	lr

0800a95c <D16_GENERIC>:
 800a95c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a960:	b089      	sub	sp, #36	; 0x24
 800a962:	6993      	ldr	r3, [r2, #24]
 800a964:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 800a966:	9103      	str	r1, [sp, #12]
 800a968:	9307      	str	r3, [sp, #28]
 800a96a:	69d3      	ldr	r3, [r2, #28]
 800a96c:	e9d2 c102 	ldrd	ip, r1, [r2, #8]
 800a970:	e9d2 4a04 	ldrd	r4, sl, [r2, #16]
 800a974:	9106      	str	r1, [sp, #24]
 800a976:	e9d2 810c 	ldrd	r8, r1, [r2, #48]	; 0x30
 800a97a:	2d00      	cmp	r5, #0
 800a97c:	d063      	beq.n	800aa46 <D16_GENERIC+0xea>
 800a97e:	f001 0520 	and.w	r5, r1, #32
 800a982:	f001 0110 	and.w	r1, r1, #16
 800a986:	f8df e0e0 	ldr.w	lr, [pc, #224]	; 800aa68 <D16_GENERIC+0x10c>
 800a98a:	46c1      	mov	r9, r8
 800a98c:	9104      	str	r1, [sp, #16]
 800a98e:	2100      	movs	r1, #0
 800a990:	9505      	str	r5, [sp, #20]
 800a992:	e04d      	b.n	800aa30 <D16_GENERIC+0xd4>
 800a994:	5d87      	ldrb	r7, [r0, r6]
 800a996:	7805      	ldrb	r5, [r0, #0]
 800a998:	eb00 0046 	add.w	r0, r0, r6, lsl #1
 800a99c:	eb05 2707 	add.w	r7, r5, r7, lsl #8
 800a9a0:	b2fe      	uxtb	r6, r7
 800a9a2:	f3c7 2707 	ubfx	r7, r7, #8, #8
 800a9a6:	f85e 5026 	ldr.w	r5, [lr, r6, lsl #2]
 800a9aa:	f85e 6027 	ldr.w	r6, [lr, r7, lsl #2]
 800a9ae:	441d      	add	r5, r3
 800a9b0:	eb06 2395 	add.w	r3, r6, r5, lsr #10
 800a9b4:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800a9b8:	f3c3 0609 	ubfx	r6, r3, #0, #10
 800a9bc:	0a9b      	lsrs	r3, r3, #10
 800a9be:	ea46 4605 	orr.w	r6, r6, r5, lsl #16
 800a9c2:	4d27      	ldr	r5, [pc, #156]	; (800aa60 <D16_GENERIC+0x104>)
 800a9c4:	fb26 c505 	smlad	r5, r6, r5, ip
 800a9c8:	4f26      	ldr	r7, [pc, #152]	; (800aa64 <D16_GENERIC+0x108>)
 800a9ca:	fb26 fc07 	smuad	ip, r6, r7
 800a9ce:	9e04      	ldr	r6, [sp, #16]
 800a9d0:	f101 0801 	add.w	r8, r1, #1
 800a9d4:	f5a5 6500 	sub.w	r5, r5, #2048	; 0x800
 800a9d8:	b1ae      	cbz	r6, 800aa06 <D16_GENERIC+0xaa>
 800a9da:	442c      	add	r4, r5
 800a9dc:	f8d2 b020 	ldr.w	fp, [r2, #32]
 800a9e0:	eba4 040a 	sub.w	r4, r4, sl
 800a9e4:	46aa      	mov	sl, r5
 800a9e6:	17e7      	asrs	r7, r4, #31
 800a9e8:	fba4 450b 	umull	r4, r5, r4, fp
 800a9ec:	e9cd 4500 	strd	r4, r5, [sp]
 800a9f0:	fb0b 5407 	mla	r4, fp, r7, r5
 800a9f4:	9401      	str	r4, [sp, #4]
 800a9f6:	e9dd 4500 	ldrd	r4, r5, [sp]
 800a9fa:	f114 4400 	adds.w	r4, r4, #2147483648	; 0x80000000
 800a9fe:	f145 0500 	adc.w	r5, r5, #0
 800aa02:	006c      	lsls	r4, r5, #1
 800aa04:	4625      	mov	r5, r4
 800aa06:	f8b2 b028 	ldrh.w	fp, [r2, #40]	; 0x28
 800aa0a:	042d      	lsls	r5, r5, #16
 800aa0c:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800aa10:	2700      	movs	r7, #0
 800aa12:	fb01 fb0b 	mul.w	fp, r1, fp
 800aa16:	fa1f f188 	uxth.w	r1, r8
 800aa1a:	fbc9 6705 	smlal	r6, r7, r9, r5
 800aa1e:	9e03      	ldr	r6, [sp, #12]
 800aa20:	10bd      	asrs	r5, r7, #2
 800aa22:	f305 050f 	ssat	r5, #16, r5
 800aa26:	f826 501b 	strh.w	r5, [r6, fp, lsl #1]
 800aa2a:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 800aa2c:	428d      	cmp	r5, r1
 800aa2e:	d90a      	bls.n	800aa46 <D16_GENERIC+0xea>
 800aa30:	8d55      	ldrh	r5, [r2, #42]	; 0x2a
 800aa32:	2d01      	cmp	r5, #1
 800aa34:	b2ee      	uxtb	r6, r5
 800aa36:	d1ad      	bne.n	800a994 <D16_GENERIC+0x38>
 800aa38:	9d05      	ldr	r5, [sp, #20]
 800aa3a:	f850 7b02 	ldr.w	r7, [r0], #2
 800aa3e:	2d00      	cmp	r5, #0
 800aa40:	d0ae      	beq.n	800a9a0 <D16_GENERIC+0x44>
 800aa42:	ba7f      	rev16	r7, r7
 800aa44:	e7ac      	b.n	800a9a0 <D16_GENERIC+0x44>
 800aa46:	2000      	movs	r0, #0
 800aa48:	9906      	ldr	r1, [sp, #24]
 800aa4a:	61d3      	str	r3, [r2, #28]
 800aa4c:	9b07      	ldr	r3, [sp, #28]
 800aa4e:	f8c2 c008 	str.w	ip, [r2, #8]
 800aa52:	60d1      	str	r1, [r2, #12]
 800aa54:	6193      	str	r3, [r2, #24]
 800aa56:	e9c2 4a04 	strd	r4, sl, [r2, #16]
 800aa5a:	b009      	add	sp, #36	; 0x24
 800aa5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa60:	00030001 	.word	0x00030001
 800aa64:	00010003 	.word	0x00010003
 800aa68:	24000000 	.word	0x24000000

0800aa6c <D24_GENERIC>:
 800aa6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa70:	e9d2 4304 	ldrd	r4, r3, [r2, #16]
 800aa74:	b089      	sub	sp, #36	; 0x24
 800aa76:	8cd6      	ldrh	r6, [r2, #38]	; 0x26
 800aa78:	9303      	str	r3, [sp, #12]
 800aa7a:	6993      	ldr	r3, [r2, #24]
 800aa7c:	9104      	str	r1, [sp, #16]
 800aa7e:	9307      	str	r3, [sp, #28]
 800aa80:	69d1      	ldr	r1, [r2, #28]
 800aa82:	e9d2 3802 	ldrd	r3, r8, [r2, #8]
 800aa86:	e9d2 a50c 	ldrd	sl, r5, [r2, #48]	; 0x30
 800aa8a:	2e00      	cmp	r6, #0
 800aa8c:	f000 8088 	beq.w	800aba0 <D24_GENERIC+0x134>
 800aa90:	f005 0620 	and.w	r6, r5, #32
 800aa94:	f005 0510 	and.w	r5, r5, #16
 800aa98:	f04f 0c00 	mov.w	ip, #0
 800aa9c:	f8df e140 	ldr.w	lr, [pc, #320]	; 800abe0 <D24_GENERIC+0x174>
 800aaa0:	9606      	str	r6, [sp, #24]
 800aaa2:	9505      	str	r5, [sp, #20]
 800aaa4:	e064      	b.n	800ab70 <D24_GENERIC+0x104>
 800aaa6:	f810 5016 	ldrb.w	r5, [r0, r6, lsl #1]
 800aaaa:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 800aaae:	f810 b007 	ldrb.w	fp, [r0, r7]
 800aab2:	042d      	lsls	r5, r5, #16
 800aab4:	19f0      	adds	r0, r6, r7
 800aab6:	eb05 250b 	add.w	r5, r5, fp, lsl #8
 800aaba:	44a9      	add	r9, r5
 800aabc:	fa5f f689 	uxtb.w	r6, r9
 800aac0:	f3c9 2707 	ubfx	r7, r9, #8, #8
 800aac4:	ea4f 4919 	mov.w	r9, r9, lsr #16
 800aac8:	f85e 6026 	ldr.w	r6, [lr, r6, lsl #2]
 800aacc:	f85e 7027 	ldr.w	r7, [lr, r7, lsl #2]
 800aad0:	eb06 2691 	add.w	r6, r6, r1, lsr #10
 800aad4:	f85e 1029 	ldr.w	r1, [lr, r9, lsl #2]
 800aad8:	eb07 2796 	add.w	r7, r7, r6, lsr #10
 800aadc:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800aae0:	f3c7 0509 	ubfx	r5, r7, #0, #10
 800aae4:	eb01 2197 	add.w	r1, r1, r7, lsr #10
 800aae8:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
 800aaec:	4d3a      	ldr	r5, [pc, #232]	; (800abd8 <D24_GENERIC+0x16c>)
 800aaee:	fb26 8705 	smlad	r7, r6, r5, r8
 800aaf2:	4d3a      	ldr	r5, [pc, #232]	; (800abdc <D24_GENERIC+0x170>)
 800aaf4:	fb26 3805 	smlad	r8, r6, r5, r3
 800aaf8:	f3c1 0309 	ubfx	r3, r1, #0, #10
 800aafc:	eb03 0b43 	add.w	fp, r3, r3, lsl #1
 800ab00:	2301      	movs	r3, #1
 800ab02:	eb08 084b 	add.w	r8, r8, fp, lsl #1
 800ab06:	fb26 f603 	smuad	r6, r6, r3
 800ab0a:	eb0c 0903 	add.w	r9, ip, r3
 800ab0e:	eb0b 0306 	add.w	r3, fp, r6
 800ab12:	9e05      	ldr	r6, [sp, #20]
 800ab14:	f5a7 55d8 	sub.w	r5, r7, #6912	; 0x1b00
 800ab18:	b1ae      	cbz	r6, 800ab46 <D24_GENERIC+0xda>
 800ab1a:	442c      	add	r4, r5
 800ab1c:	9e03      	ldr	r6, [sp, #12]
 800ab1e:	f8d2 b020 	ldr.w	fp, [r2, #32]
 800ab22:	1ba4      	subs	r4, r4, r6
 800ab24:	9503      	str	r5, [sp, #12]
 800ab26:	17e7      	asrs	r7, r4, #31
 800ab28:	fba4 450b 	umull	r4, r5, r4, fp
 800ab2c:	e9cd 4500 	strd	r4, r5, [sp]
 800ab30:	fb0b 5407 	mla	r4, fp, r7, r5
 800ab34:	9401      	str	r4, [sp, #4]
 800ab36:	e9dd 4500 	ldrd	r4, r5, [sp]
 800ab3a:	f114 4400 	adds.w	r4, r4, #2147483648	; 0x80000000
 800ab3e:	f145 0500 	adc.w	r5, r5, #0
 800ab42:	006c      	lsls	r4, r5, #1
 800ab44:	4625      	mov	r5, r4
 800ab46:	f8b2 b028 	ldrh.w	fp, [r2, #40]	; 0x28
 800ab4a:	03ad      	lsls	r5, r5, #14
 800ab4c:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800ab50:	2700      	movs	r7, #0
 800ab52:	fb0c fb0b 	mul.w	fp, ip, fp
 800ab56:	fa1f fc89 	uxth.w	ip, r9
 800ab5a:	fbca 6705 	smlal	r6, r7, sl, r5
 800ab5e:	9e04      	ldr	r6, [sp, #16]
 800ab60:	10bd      	asrs	r5, r7, #2
 800ab62:	f305 050f 	ssat	r5, #16, r5
 800ab66:	f826 501b 	strh.w	r5, [r6, fp, lsl #1]
 800ab6a:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 800ab6c:	4565      	cmp	r5, ip
 800ab6e:	d917      	bls.n	800aba0 <D24_GENERIC+0x134>
 800ab70:	8d55      	ldrh	r5, [r2, #42]	; 0x2a
 800ab72:	f890 9000 	ldrb.w	r9, [r0]
 800ab76:	b2ef      	uxtb	r7, r5
 800ab78:	2d01      	cmp	r5, #1
 800ab7a:	b23e      	sxth	r6, r7
 800ab7c:	d193      	bne.n	800aaa6 <D24_GENERIC+0x3a>
 800ab7e:	9d06      	ldr	r5, [sp, #24]
 800ab80:	b1dd      	cbz	r5, 800abba <D24_GENERIC+0x14e>
 800ab82:	78c7      	ldrb	r7, [r0, #3]
 800ab84:	ea4f 2609 	mov.w	r6, r9, lsl #8
 800ab88:	f01c 0f01 	tst.w	ip, #1
 800ab8c:	ea4f 2507 	mov.w	r5, r7, lsl #8
 800ab90:	eb06 4607 	add.w	r6, r6, r7, lsl #16
 800ab94:	d11a      	bne.n	800abcc <D24_GENERIC+0x160>
 800ab96:	f890 9001 	ldrb.w	r9, [r0, #1]
 800ab9a:	3002      	adds	r0, #2
 800ab9c:	44b1      	add	r9, r6
 800ab9e:	e78d      	b.n	800aabc <D24_GENERIC+0x50>
 800aba0:	6093      	str	r3, [r2, #8]
 800aba2:	2000      	movs	r0, #0
 800aba4:	9b03      	ldr	r3, [sp, #12]
 800aba6:	f8c2 800c 	str.w	r8, [r2, #12]
 800abaa:	6153      	str	r3, [r2, #20]
 800abac:	9b07      	ldr	r3, [sp, #28]
 800abae:	61d1      	str	r1, [r2, #28]
 800abb0:	6114      	str	r4, [r2, #16]
 800abb2:	6193      	str	r3, [r2, #24]
 800abb4:	b009      	add	sp, #36	; 0x24
 800abb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800abba:	7845      	ldrb	r5, [r0, #1]
 800abbc:	3003      	adds	r0, #3
 800abbe:	f810 6c01 	ldrb.w	r6, [r0, #-1]
 800abc2:	022d      	lsls	r5, r5, #8
 800abc4:	eb05 4506 	add.w	r5, r5, r6, lsl #16
 800abc8:	44a9      	add	r9, r5
 800abca:	e777      	b.n	800aabc <D24_GENERIC+0x50>
 800abcc:	7886      	ldrb	r6, [r0, #2]
 800abce:	3004      	adds	r0, #4
 800abd0:	eb05 4506 	add.w	r5, r5, r6, lsl #16
 800abd4:	44a9      	add	r9, r5
 800abd6:	e771      	b.n	800aabc <D24_GENERIC+0x50>
 800abd8:	00030001 	.word	0x00030001
 800abdc:	00060007 	.word	0x00060007
 800abe0:	24000000 	.word	0x24000000

0800abe4 <D32_GENERIC>:
 800abe4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abe8:	e9d2 4304 	ldrd	r4, r3, [r2, #16]
 800abec:	b089      	sub	sp, #36	; 0x24
 800abee:	6b15      	ldr	r5, [r2, #48]	; 0x30
 800abf0:	8cd6      	ldrh	r6, [r2, #38]	; 0x26
 800abf2:	9302      	str	r3, [sp, #8]
 800abf4:	6993      	ldr	r3, [r2, #24]
 800abf6:	9104      	str	r1, [sp, #16]
 800abf8:	9307      	str	r3, [sp, #28]
 800abfa:	9503      	str	r5, [sp, #12]
 800abfc:	69d1      	ldr	r1, [r2, #28]
 800abfe:	6b55      	ldr	r5, [r2, #52]	; 0x34
 800ac00:	e9d2 3802 	ldrd	r3, r8, [r2, #8]
 800ac04:	2e00      	cmp	r6, #0
 800ac06:	f000 8097 	beq.w	800ad38 <D32_GENERIC+0x154>
 800ac0a:	f005 0620 	and.w	r6, r5, #32
 800ac0e:	f005 0510 	and.w	r5, r5, #16
 800ac12:	f04f 0e00 	mov.w	lr, #0
 800ac16:	f8df c150 	ldr.w	ip, [pc, #336]	; 800ad68 <D32_GENERIC+0x184>
 800ac1a:	9606      	str	r6, [sp, #24]
 800ac1c:	9505      	str	r5, [sp, #20]
 800ac1e:	e079      	b.n	800ad14 <D32_GENERIC+0x130>
 800ac20:	783d      	ldrb	r5, [r7, #0]
 800ac22:	f810 b009 	ldrb.w	fp, [r0, r9]
 800ac26:	042d      	lsls	r5, r5, #16
 800ac28:	f810 a006 	ldrb.w	sl, [r0, r6]
 800ac2c:	f890 9000 	ldrb.w	r9, [r0]
 800ac30:	eb07 0046 	add.w	r0, r7, r6, lsl #1
 800ac34:	eb05 650b 	add.w	r5, r5, fp, lsl #24
 800ac38:	eb05 250a 	add.w	r5, r5, sl, lsl #8
 800ac3c:	44a9      	add	r9, r5
 800ac3e:	fa5f f789 	uxtb.w	r7, r9
 800ac42:	f3c9 2507 	ubfx	r5, r9, #8, #8
 800ac46:	f3c9 4607 	ubfx	r6, r9, #16, #8
 800ac4a:	ea4f 6919 	mov.w	r9, r9, lsr #24
 800ac4e:	f85c 7027 	ldr.w	r7, [ip, r7, lsl #2]
 800ac52:	f85c 5025 	ldr.w	r5, [ip, r5, lsl #2]
 800ac56:	eb07 2191 	add.w	r1, r7, r1, lsr #10
 800ac5a:	f85c 6026 	ldr.w	r6, [ip, r6, lsl #2]
 800ac5e:	f85c 7029 	ldr.w	r7, [ip, r9, lsl #2]
 800ac62:	eb05 2591 	add.w	r5, r5, r1, lsr #10
 800ac66:	f3c1 0909 	ubfx	r9, r1, #0, #10
 800ac6a:	eb06 2695 	add.w	r6, r6, r5, lsr #10
 800ac6e:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800ac72:	eb07 2196 	add.w	r1, r7, r6, lsr #10
 800ac76:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800ac7a:	ea45 4909 	orr.w	r9, r5, r9, lsl #16
 800ac7e:	f3c1 0509 	ubfx	r5, r1, #0, #10
 800ac82:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
 800ac86:	4d34      	ldr	r5, [pc, #208]	; (800ad58 <D32_GENERIC+0x174>)
 800ac88:	fb29 8805 	smlad	r8, r9, r5, r8
 800ac8c:	f44f 3580 	mov.w	r5, #65536	; 0x10000
 800ac90:	fb26 8705 	smlad	r7, r6, r5, r8
 800ac94:	4d31      	ldr	r5, [pc, #196]	; (800ad5c <D32_GENERIC+0x178>)
 800ac96:	fb29 3305 	smlad	r3, r9, r5, r3
 800ac9a:	4d31      	ldr	r5, [pc, #196]	; (800ad60 <D32_GENERIC+0x17c>)
 800ac9c:	fb26 3805 	smlad	r8, r6, r5, r3
 800aca0:	2301      	movs	r3, #1
 800aca2:	fb29 f903 	smuad	r9, r9, r3
 800aca6:	4b2f      	ldr	r3, [pc, #188]	; (800ad64 <D32_GENERIC+0x180>)
 800aca8:	fb26 9303 	smlad	r3, r6, r3, r9
 800acac:	9e05      	ldr	r6, [sp, #20]
 800acae:	f10e 0901 	add.w	r9, lr, #1
 800acb2:	f5a7 4580 	sub.w	r5, r7, #16384	; 0x4000
 800acb6:	b1ae      	cbz	r6, 800ace4 <D32_GENERIC+0x100>
 800acb8:	442c      	add	r4, r5
 800acba:	9e02      	ldr	r6, [sp, #8]
 800acbc:	f8d2 a020 	ldr.w	sl, [r2, #32]
 800acc0:	1ba4      	subs	r4, r4, r6
 800acc2:	9502      	str	r5, [sp, #8]
 800acc4:	17e7      	asrs	r7, r4, #31
 800acc6:	fba4 450a 	umull	r4, r5, r4, sl
 800acca:	e9cd 4500 	strd	r4, r5, [sp]
 800acce:	fb0a 5407 	mla	r4, sl, r7, r5
 800acd2:	9401      	str	r4, [sp, #4]
 800acd4:	e9dd 4500 	ldrd	r4, r5, [sp]
 800acd8:	f114 4400 	adds.w	r4, r4, #2147483648	; 0x80000000
 800acdc:	f145 0500 	adc.w	r5, r5, #0
 800ace0:	006c      	lsls	r4, r5, #1
 800ace2:	4625      	mov	r5, r4
 800ace4:	f8b2 a028 	ldrh.w	sl, [r2, #40]	; 0x28
 800ace8:	036d      	lsls	r5, r5, #13
 800acea:	9f03      	ldr	r7, [sp, #12]
 800acec:	fb0e fb0a 	mul.w	fp, lr, sl
 800acf0:	fa1f fe89 	uxth.w	lr, r9
 800acf4:	f04f 0a00 	mov.w	sl, #0
 800acf8:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
 800acfc:	9e04      	ldr	r6, [sp, #16]
 800acfe:	fbc7 9a05 	smlal	r9, sl, r7, r5
 800ad02:	4657      	mov	r7, sl
 800ad04:	10bd      	asrs	r5, r7, #2
 800ad06:	f305 050f 	ssat	r5, #16, r5
 800ad0a:	f826 501b 	strh.w	r5, [r6, fp, lsl #1]
 800ad0e:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 800ad10:	4575      	cmp	r5, lr
 800ad12:	d911      	bls.n	800ad38 <D32_GENERIC+0x154>
 800ad14:	8d55      	ldrh	r5, [r2, #42]	; 0x2a
 800ad16:	b2ee      	uxtb	r6, r5
 800ad18:	2d01      	cmp	r5, #1
 800ad1a:	eb00 0746 	add.w	r7, r0, r6, lsl #1
 800ad1e:	eb06 0946 	add.w	r9, r6, r6, lsl #1
 800ad22:	f47f af7d 	bne.w	800ac20 <D32_GENERIC+0x3c>
 800ad26:	1d05      	adds	r5, r0, #4
 800ad28:	f8d0 9000 	ldr.w	r9, [r0]
 800ad2c:	9806      	ldr	r0, [sp, #24]
 800ad2e:	b180      	cbz	r0, 800ad52 <D32_GENERIC+0x16e>
 800ad30:	fa99 f999 	rev16.w	r9, r9
 800ad34:	4628      	mov	r0, r5
 800ad36:	e782      	b.n	800ac3e <D32_GENERIC+0x5a>
 800ad38:	6093      	str	r3, [r2, #8]
 800ad3a:	2000      	movs	r0, #0
 800ad3c:	9b02      	ldr	r3, [sp, #8]
 800ad3e:	f8c2 800c 	str.w	r8, [r2, #12]
 800ad42:	6153      	str	r3, [r2, #20]
 800ad44:	9b07      	ldr	r3, [sp, #28]
 800ad46:	61d1      	str	r1, [r2, #28]
 800ad48:	6114      	str	r4, [r2, #16]
 800ad4a:	6193      	str	r3, [r2, #24]
 800ad4c:	b009      	add	sp, #36	; 0x24
 800ad4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad52:	4628      	mov	r0, r5
 800ad54:	e773      	b.n	800ac3e <D32_GENERIC+0x5a>
 800ad56:	bf00      	nop
 800ad58:	00060003 	.word	0x00060003
 800ad5c:	000a000c 	.word	0x000a000c
 800ad60:	000c000a 	.word	0x000c000a
 800ad64:	00030006 	.word	0x00030006
 800ad68:	24000000 	.word	0x24000000

0800ad6c <D48_GENERIC>:
 800ad6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad70:	6913      	ldr	r3, [r2, #16]
 800ad72:	b089      	sub	sp, #36	; 0x24
 800ad74:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 800ad76:	9301      	str	r3, [sp, #4]
 800ad78:	6953      	ldr	r3, [r2, #20]
 800ad7a:	9104      	str	r1, [sp, #16]
 800ad7c:	9302      	str	r3, [sp, #8]
 800ad7e:	6993      	ldr	r3, [r2, #24]
 800ad80:	f8d2 c01c 	ldr.w	ip, [r2, #28]
 800ad84:	9307      	str	r3, [sp, #28]
 800ad86:	e9d2 3102 	ldrd	r3, r1, [r2, #8]
 800ad8a:	9100      	str	r1, [sp, #0]
 800ad8c:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800ad8e:	9103      	str	r1, [sp, #12]
 800ad90:	6b51      	ldr	r1, [r2, #52]	; 0x34
 800ad92:	2c00      	cmp	r4, #0
 800ad94:	f000 80be 	beq.w	800af14 <D48_GENERIC+0x1a8>
 800ad98:	f001 0420 	and.w	r4, r1, #32
 800ad9c:	f001 0110 	and.w	r1, r1, #16
 800ada0:	f04f 0e00 	mov.w	lr, #0
 800ada4:	9105      	str	r1, [sp, #20]
 800ada6:	9406      	str	r4, [sp, #24]
 800ada8:	4962      	ldr	r1, [pc, #392]	; (800af34 <D48_GENERIC+0x1c8>)
 800adaa:	e0a0      	b.n	800aeee <D48_GENERIC+0x182>
 800adac:	eb00 0608 	add.w	r6, r0, r8
 800adb0:	f810 a008 	ldrb.w	sl, [r0, r8]
 800adb4:	f810 9005 	ldrb.w	r9, [r0, r5]
 800adb8:	5df4      	ldrb	r4, [r6, r7]
 800adba:	443e      	add	r6, r7
 800adbc:	f890 b000 	ldrb.w	fp, [r0]
 800adc0:	0420      	lsls	r0, r4, #16
 800adc2:	eb06 0408 	add.w	r4, r6, r8
 800adc6:	f816 6008 	ldrb.w	r6, [r6, r8]
 800adca:	eb00 6a0a 	add.w	sl, r0, sl, lsl #24
 800adce:	f814 8007 	ldrb.w	r8, [r4, r7]
 800add2:	4427      	add	r7, r4
 800add4:	eb0a 2a09 	add.w	sl, sl, r9, lsl #8
 800add8:	eb08 2606 	add.w	r6, r8, r6, lsl #8
 800addc:	eb0a 040b 	add.w	r4, sl, fp
 800ade0:	eb07 0045 	add.w	r0, r7, r5, lsl #1
 800ade4:	f3c6 2807 	ubfx	r8, r6, #8, #8
 800ade8:	b2f7      	uxtb	r7, r6
 800adea:	b2e6      	uxtb	r6, r4
 800adec:	f3c4 2507 	ubfx	r5, r4, #8, #8
 800adf0:	f3c4 4907 	ubfx	r9, r4, #16, #8
 800adf4:	ea4f 6b14 	mov.w	fp, r4, lsr #24
 800adf8:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 800adfc:	f851 5025 	ldr.w	r5, [r1, r5, lsl #2]
 800ae00:	eb06 269c 	add.w	r6, r6, ip, lsr #10
 800ae04:	f851 9029 	ldr.w	r9, [r1, r9, lsl #2]
 800ae08:	f851 402b 	ldr.w	r4, [r1, fp, lsl #2]
 800ae0c:	eb05 2596 	add.w	r5, r5, r6, lsr #10
 800ae10:	f851 7027 	ldr.w	r7, [r1, r7, lsl #2]
 800ae14:	f851 c028 	ldr.w	ip, [r1, r8, lsl #2]
 800ae18:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800ae1c:	eb09 2995 	add.w	r9, r9, r5, lsr #10
 800ae20:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800ae24:	eb04 2499 	add.w	r4, r4, r9, lsr #10
 800ae28:	f3c9 0909 	ubfx	r9, r9, #0, #10
 800ae2c:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
 800ae30:	9d00      	ldr	r5, [sp, #0]
 800ae32:	eb07 2794 	add.w	r7, r7, r4, lsr #10
 800ae36:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800ae3a:	eb0c 2c97 	add.w	ip, ip, r7, lsr #10
 800ae3e:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800ae42:	ea44 4909 	orr.w	r9, r4, r9, lsl #16
 800ae46:	f3cc 0409 	ubfx	r4, ip, #0, #10
 800ae4a:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 800ae4e:	4c3a      	ldr	r4, [pc, #232]	; (800af38 <D48_GENERIC+0x1cc>)
 800ae50:	fb26 5a04 	smlad	sl, r6, r4, r5
 800ae54:	4c39      	ldr	r4, [pc, #228]	; (800af3c <D48_GENERIC+0x1d0>)
 800ae56:	fb29 aa04 	smlad	sl, r9, r4, sl
 800ae5a:	f44f 3480 	mov.w	r4, #65536	; 0x10000
 800ae5e:	fb27 aa04 	smlad	sl, r7, r4, sl
 800ae62:	4c37      	ldr	r4, [pc, #220]	; (800af40 <D48_GENERIC+0x1d4>)
 800ae64:	fb26 3304 	smlad	r3, r6, r4, r3
 800ae68:	f04f 141b 	mov.w	r4, #1769499	; 0x1b001b
 800ae6c:	fb29 3304 	smlad	r3, r9, r4, r3
 800ae70:	4c34      	ldr	r4, [pc, #208]	; (800af44 <D48_GENERIC+0x1d8>)
 800ae72:	fb27 3304 	smlad	r3, r7, r4, r3
 800ae76:	2501      	movs	r5, #1
 800ae78:	9300      	str	r3, [sp, #0]
 800ae7a:	fb26 f605 	smuad	r6, r6, r5
 800ae7e:	4b32      	ldr	r3, [pc, #200]	; (800af48 <D48_GENERIC+0x1dc>)
 800ae80:	fb29 6903 	smlad	r9, r9, r3, r6
 800ae84:	4b31      	ldr	r3, [pc, #196]	; (800af4c <D48_GENERIC+0x1e0>)
 800ae86:	fb27 9303 	smlad	r3, r7, r3, r9
 800ae8a:	9c05      	ldr	r4, [sp, #20]
 800ae8c:	eb0e 0805 	add.w	r8, lr, r5
 800ae90:	f5aa 4a58 	sub.w	sl, sl, #55296	; 0xd800
 800ae94:	b19c      	cbz	r4, 800aebe <D48_GENERIC+0x152>
 800ae96:	9c01      	ldr	r4, [sp, #4]
 800ae98:	9d02      	ldr	r5, [sp, #8]
 800ae9a:	4454      	add	r4, sl
 800ae9c:	f8d2 9020 	ldr.w	r9, [r2, #32]
 800aea0:	f8cd a008 	str.w	sl, [sp, #8]
 800aea4:	1b64      	subs	r4, r4, r5
 800aea6:	fba4 ab09 	umull	sl, fp, r4, r9
 800aeaa:	17e7      	asrs	r7, r4, #31
 800aeac:	f11a 4400 	adds.w	r4, sl, #2147483648	; 0x80000000
 800aeb0:	fb09 bb07 	mla	fp, r9, r7, fp
 800aeb4:	f14b 0500 	adc.w	r5, fp, #0
 800aeb8:	006c      	lsls	r4, r5, #1
 800aeba:	46a2      	mov	sl, r4
 800aebc:	9401      	str	r4, [sp, #4]
 800aebe:	8d16      	ldrh	r6, [r2, #40]	; 0x28
 800aec0:	ea4f 2aca 	mov.w	sl, sl, lsl #11
 800aec4:	9d03      	ldr	r5, [sp, #12]
 800aec6:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 800aeca:	fb0e f606 	mul.w	r6, lr, r6
 800aece:	fa1f fe88 	uxth.w	lr, r8
 800aed2:	f04f 0800 	mov.w	r8, #0
 800aed6:	fbc5 780a 	smlal	r7, r8, r5, sl
 800aeda:	4645      	mov	r5, r8
 800aedc:	10ac      	asrs	r4, r5, #2
 800aede:	9d04      	ldr	r5, [sp, #16]
 800aee0:	f304 040f 	ssat	r4, #16, r4
 800aee4:	f825 4016 	strh.w	r4, [r5, r6, lsl #1]
 800aee8:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 800aeea:	4574      	cmp	r4, lr
 800aeec:	d912      	bls.n	800af14 <D48_GENERIC+0x1a8>
 800aeee:	8d54      	ldrh	r4, [r2, #42]	; 0x2a
 800aef0:	b2e5      	uxtb	r5, r4
 800aef2:	2c01      	cmp	r4, #1
 800aef4:	eb05 0845 	add.w	r8, r5, r5, lsl #1
 800aef8:	f1c5 0700 	rsb	r7, r5, #0
 800aefc:	f47f af56 	bne.w	800adac <D48_GENERIC+0x40>
 800af00:	9d06      	ldr	r5, [sp, #24]
 800af02:	e9d0 4600 	ldrd	r4, r6, [r0]
 800af06:	3006      	adds	r0, #6
 800af08:	2d00      	cmp	r5, #0
 800af0a:	f43f af6b 	beq.w	800ade4 <D48_GENERIC+0x78>
 800af0e:	ba64      	rev16	r4, r4
 800af10:	ba76      	rev16	r6, r6
 800af12:	e767      	b.n	800ade4 <D48_GENERIC+0x78>
 800af14:	6093      	str	r3, [r2, #8]
 800af16:	2000      	movs	r0, #0
 800af18:	9b00      	ldr	r3, [sp, #0]
 800af1a:	f8c2 c01c 	str.w	ip, [r2, #28]
 800af1e:	60d3      	str	r3, [r2, #12]
 800af20:	9b01      	ldr	r3, [sp, #4]
 800af22:	6113      	str	r3, [r2, #16]
 800af24:	9b02      	ldr	r3, [sp, #8]
 800af26:	6153      	str	r3, [r2, #20]
 800af28:	9b07      	ldr	r3, [sp, #28]
 800af2a:	6193      	str	r3, [r2, #24]
 800af2c:	b009      	add	sp, #36	; 0x24
 800af2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af32:	bf00      	nop
 800af34:	24000000 	.word	0x24000000
 800af38:	000f000a 	.word	0x000f000a
 800af3c:	00060003 	.word	0x00060003
 800af40:	00150019 	.word	0x00150019
 800af44:	00190015 	.word	0x00190015
 800af48:	00030006 	.word	0x00030006
 800af4c:	000a000f 	.word	0x000a000f

0800af50 <D64_GENERIC>:
 800af50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af54:	6913      	ldr	r3, [r2, #16]
 800af56:	b089      	sub	sp, #36	; 0x24
 800af58:	6b15      	ldr	r5, [r2, #48]	; 0x30
 800af5a:	9300      	str	r3, [sp, #0]
 800af5c:	6953      	ldr	r3, [r2, #20]
 800af5e:	9105      	str	r1, [sp, #20]
 800af60:	9303      	str	r3, [sp, #12]
 800af62:	8cd1      	ldrh	r1, [r2, #38]	; 0x26
 800af64:	6993      	ldr	r3, [r2, #24]
 800af66:	69d4      	ldr	r4, [r2, #28]
 800af68:	9307      	str	r3, [sp, #28]
 800af6a:	9504      	str	r5, [sp, #16]
 800af6c:	e9d2 3602 	ldrd	r3, r6, [r2, #8]
 800af70:	2900      	cmp	r1, #0
 800af72:	f000 80e8 	beq.w	800b146 <D64_GENERIC+0x1f6>
 800af76:	6a11      	ldr	r1, [r2, #32]
 800af78:	2500      	movs	r5, #0
 800af7a:	46b3      	mov	fp, r6
 800af7c:	9302      	str	r3, [sp, #8]
 800af7e:	9106      	str	r1, [sp, #24]
 800af80:	4978      	ldr	r1, [pc, #480]	; (800b164 <D64_GENERIC+0x214>)
 800af82:	e0cc      	b.n	800b11e <D64_GENERIC+0x1ce>
 800af84:	eb0e 084e 	add.w	r8, lr, lr, lsl #1
 800af88:	f1ce 0c00 	rsb	ip, lr, #0
 800af8c:	f890 9000 	ldrb.w	r9, [r0]
 800af90:	eb00 0708 	add.w	r7, r0, r8
 800af94:	f810 6008 	ldrb.w	r6, [r0, r8]
 800af98:	eb07 0a4c 	add.w	sl, r7, ip, lsl #1
 800af9c:	f817 000c 	ldrb.w	r0, [r7, ip]
 800afa0:	f817 301c 	ldrb.w	r3, [r7, ip, lsl #1]
 800afa4:	eb0a 0748 	add.w	r7, sl, r8, lsl #1
 800afa8:	f81a a018 	ldrb.w	sl, [sl, r8, lsl #1]
 800afac:	ea4f 4800 	mov.w	r8, r0, lsl #16
 800afb0:	f817 000c 	ldrb.w	r0, [r7, ip]
 800afb4:	eb08 6606 	add.w	r6, r8, r6, lsl #24
 800afb8:	f817 801c 	ldrb.w	r8, [r7, ip, lsl #1]
 800afbc:	0400      	lsls	r0, r0, #16
 800afbe:	4467      	add	r7, ip
 800afc0:	eb06 2603 	add.w	r6, r6, r3, lsl #8
 800afc4:	eb00 600a 	add.w	r0, r0, sl, lsl #24
 800afc8:	f817 a01c 	ldrb.w	sl, [r7, ip, lsl #1]
 800afcc:	eb07 074c 	add.w	r7, r7, ip, lsl #1
 800afd0:	444e      	add	r6, r9
 800afd2:	eb00 2808 	add.w	r8, r0, r8, lsl #8
 800afd6:	eb07 008e 	add.w	r0, r7, lr, lsl #2
 800afda:	44c2      	add	sl, r8
 800afdc:	b2f7      	uxtb	r7, r6
 800afde:	f3c6 2807 	ubfx	r8, r6, #8, #8
 800afe2:	f3c6 4e07 	ubfx	lr, r6, #16, #8
 800afe6:	0e36      	lsrs	r6, r6, #24
 800afe8:	f851 7027 	ldr.w	r7, [r1, r7, lsl #2]
 800afec:	fa5f fc8a 	uxtb.w	ip, sl
 800aff0:	f851 8028 	ldr.w	r8, [r1, r8, lsl #2]
 800aff4:	f3ca 2907 	ubfx	r9, sl, #8, #8
 800aff8:	443c      	add	r4, r7
 800affa:	f851 702e 	ldr.w	r7, [r1, lr, lsl #2]
 800affe:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 800b002:	eb08 2894 	add.w	r8, r8, r4, lsr #10
 800b006:	f851 c02c 	ldr.w	ip, [r1, ip, lsl #2]
 800b00a:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800b00e:	4b56      	ldr	r3, [pc, #344]	; (800b168 <D64_GENERIC+0x218>)
 800b010:	eb07 2e98 	add.w	lr, r7, r8, lsr #10
 800b014:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800b018:	f851 7029 	ldr.w	r7, [r1, r9, lsl #2]
 800b01c:	eb06 269e 	add.w	r6, r6, lr, lsr #10
 800b020:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800b024:	ea48 4804 	orr.w	r8, r8, r4, lsl #16
 800b028:	f3ca 4407 	ubfx	r4, sl, #16, #8
 800b02c:	eb0c 2c96 	add.w	ip, ip, r6, lsr #10
 800b030:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800b034:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 800b038:	ea4f 6a1a 	mov.w	sl, sl, lsr #24
 800b03c:	eb07 279c 	add.w	r7, r7, ip, lsr #10
 800b040:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 800b044:	f851 902a 	ldr.w	r9, [r1, sl, lsl #2]
 800b048:	ea46 460e 	orr.w	r6, r6, lr, lsl #16
 800b04c:	eb04 2a97 	add.w	sl, r4, r7, lsr #10
 800b050:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800b054:	eb09 299a 	add.w	r9, r9, sl, lsr #10
 800b058:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 800b05c:	ea47 4c0c 	orr.w	ip, r7, ip, lsl #16
 800b060:	f3c9 0709 	ubfx	r7, r9, #0, #10
 800b064:	ea4f 2499 	mov.w	r4, r9, lsr #10
 800b068:	ea47 4a0a 	orr.w	sl, r7, sl, lsl #16
 800b06c:	fb28 b903 	smlad	r9, r8, r3, fp
 800b070:	4b3e      	ldr	r3, [pc, #248]	; (800b16c <D64_GENERIC+0x21c>)
 800b072:	fb26 9903 	smlad	r9, r6, r3, r9
 800b076:	4b3e      	ldr	r3, [pc, #248]	; (800b170 <D64_GENERIC+0x220>)
 800b078:	fb2c 9703 	smlad	r7, ip, r3, r9
 800b07c:	f44f 3980 	mov.w	r9, #65536	; 0x10000
 800b080:	fb2a 7909 	smlad	r9, sl, r9, r7
 800b084:	4f3b      	ldr	r7, [pc, #236]	; (800b174 <D64_GENERIC+0x224>)
 800b086:	9b02      	ldr	r3, [sp, #8]
 800b088:	fb28 3307 	smlad	r3, r8, r7, r3
 800b08c:	fb2a 3317 	smladx	r3, sl, r7, r3
 800b090:	4f39      	ldr	r7, [pc, #228]	; (800b178 <D64_GENERIC+0x228>)
 800b092:	fb26 3307 	smlad	r3, r6, r7, r3
 800b096:	fb2c 3b17 	smladx	fp, ip, r7, r3
 800b09a:	f04f 0e01 	mov.w	lr, #1
 800b09e:	fb28 f80e 	smuad	r8, r8, lr
 800b0a2:	4b36      	ldr	r3, [pc, #216]	; (800b17c <D64_GENERIC+0x22c>)
 800b0a4:	fb26 8603 	smlad	r6, r6, r3, r8
 800b0a8:	4b35      	ldr	r3, [pc, #212]	; (800b180 <D64_GENERIC+0x230>)
 800b0aa:	fb2c 6c03 	smlad	ip, ip, r3, r6
 800b0ae:	4b35      	ldr	r3, [pc, #212]	; (800b184 <D64_GENERIC+0x234>)
 800b0b0:	fb2a c303 	smlad	r3, sl, r3, ip
 800b0b4:	9f06      	ldr	r7, [sp, #24]
 800b0b6:	f5a9 3900 	sub.w	r9, r9, #131072	; 0x20000
 800b0ba:	9302      	str	r3, [sp, #8]
 800b0bc:	b1cf      	cbz	r7, 800b0f2 <D64_GENERIC+0x1a2>
 800b0be:	9b00      	ldr	r3, [sp, #0]
 800b0c0:	444b      	add	r3, r9
 800b0c2:	461e      	mov	r6, r3
 800b0c4:	9b03      	ldr	r3, [sp, #12]
 800b0c6:	f8cd 900c 	str.w	r9, [sp, #12]
 800b0ca:	1af6      	subs	r6, r6, r3
 800b0cc:	46b0      	mov	r8, r6
 800b0ce:	ea4f 79e6 	mov.w	r9, r6, asr #31
 800b0d2:	e9cd 8900 	strd	r8, r9, [sp]
 800b0d6:	fba6 8907 	umull	r8, r9, r6, r7
 800b0da:	9e01      	ldr	r6, [sp, #4]
 800b0dc:	fb07 9306 	mla	r3, r7, r6, r9
 800b0e0:	4646      	mov	r6, r8
 800b0e2:	f116 4600 	adds.w	r6, r6, #2147483648	; 0x80000000
 800b0e6:	f143 0700 	adc.w	r7, r3, #0
 800b0ea:	fa07 f30e 	lsl.w	r3, r7, lr
 800b0ee:	4699      	mov	r9, r3
 800b0f0:	9300      	str	r3, [sp, #0]
 800b0f2:	f8b2 c028 	ldrh.w	ip, [r2, #40]	; 0x28
 800b0f6:	ea4f 2989 	mov.w	r9, r9, lsl #10
 800b0fa:	9b04      	ldr	r3, [sp, #16]
 800b0fc:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800b100:	2700      	movs	r7, #0
 800b102:	fb05 fc0c 	mul.w	ip, r5, ip
 800b106:	3501      	adds	r5, #1
 800b108:	fbc3 6709 	smlal	r6, r7, r3, r9
 800b10c:	9b05      	ldr	r3, [sp, #20]
 800b10e:	10be      	asrs	r6, r7, #2
 800b110:	f306 060f 	ssat	r6, #16, r6
 800b114:	f823 601c 	strh.w	r6, [r3, ip, lsl #1]
 800b118:	8cd6      	ldrh	r6, [r2, #38]	; 0x26
 800b11a:	42ae      	cmp	r6, r5
 800b11c:	dd11      	ble.n	800b142 <D64_GENERIC+0x1f2>
 800b11e:	f8b2 e02a 	ldrh.w	lr, [r2, #42]	; 0x2a
 800b122:	f1be 0f01 	cmp.w	lr, #1
 800b126:	f47f af2d 	bne.w	800af84 <D64_GENERIC+0x34>
 800b12a:	6b57      	ldr	r7, [r2, #52]	; 0x34
 800b12c:	f100 0c08 	add.w	ip, r0, #8
 800b130:	06bb      	lsls	r3, r7, #26
 800b132:	e9d0 6a00 	ldrd	r6, sl, [r0]
 800b136:	d513      	bpl.n	800b160 <D64_GENERIC+0x210>
 800b138:	ba76      	rev16	r6, r6
 800b13a:	fa9a fa9a 	rev16.w	sl, sl
 800b13e:	4660      	mov	r0, ip
 800b140:	e74c      	b.n	800afdc <D64_GENERIC+0x8c>
 800b142:	465e      	mov	r6, fp
 800b144:	9b02      	ldr	r3, [sp, #8]
 800b146:	6093      	str	r3, [r2, #8]
 800b148:	2000      	movs	r0, #0
 800b14a:	9b00      	ldr	r3, [sp, #0]
 800b14c:	60d6      	str	r6, [r2, #12]
 800b14e:	6113      	str	r3, [r2, #16]
 800b150:	9b03      	ldr	r3, [sp, #12]
 800b152:	61d4      	str	r4, [r2, #28]
 800b154:	6153      	str	r3, [r2, #20]
 800b156:	9b07      	ldr	r3, [sp, #28]
 800b158:	6193      	str	r3, [r2, #24]
 800b15a:	b009      	add	sp, #36	; 0x24
 800b15c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b160:	4660      	mov	r0, ip
 800b162:	e73b      	b.n	800afdc <D64_GENERIC+0x8c>
 800b164:	24000000 	.word	0x24000000
 800b168:	001c0015 	.word	0x001c0015
 800b16c:	000f000a 	.word	0x000f000a
 800b170:	00060003 	.word	0x00060003
 800b174:	0024002a 	.word	0x0024002a
 800b178:	002e0030 	.word	0x002e0030
 800b17c:	00030006 	.word	0x00030006
 800b180:	000a000f 	.word	0x000a000f
 800b184:	0015001c 	.word	0x0015001c

0800b188 <D80_GENERIC>:
 800b188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b18c:	b08b      	sub	sp, #44	; 0x2c
 800b18e:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 800b190:	9107      	str	r1, [sp, #28]
 800b192:	6911      	ldr	r1, [r2, #16]
 800b194:	9104      	str	r1, [sp, #16]
 800b196:	6951      	ldr	r1, [r2, #20]
 800b198:	9105      	str	r1, [sp, #20]
 800b19a:	6991      	ldr	r1, [r2, #24]
 800b19c:	9109      	str	r1, [sp, #36]	; 0x24
 800b19e:	69d1      	ldr	r1, [r2, #28]
 800b1a0:	9102      	str	r1, [sp, #8]
 800b1a2:	6891      	ldr	r1, [r2, #8]
 800b1a4:	9103      	str	r1, [sp, #12]
 800b1a6:	68d1      	ldr	r1, [r2, #12]
 800b1a8:	9101      	str	r1, [sp, #4]
 800b1aa:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800b1ac:	9106      	str	r1, [sp, #24]
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	f000 810b 	beq.w	800b3ca <D80_GENERIC+0x242>
 800b1b4:	6a13      	ldr	r3, [r2, #32]
 800b1b6:	f04f 0800 	mov.w	r8, #0
 800b1ba:	f8df c260 	ldr.w	ip, [pc, #608]	; 800b41c <D80_GENERIC+0x294>
 800b1be:	9308      	str	r3, [sp, #32]
 800b1c0:	9200      	str	r2, [sp, #0]
 800b1c2:	e0ee      	b.n	800b3a2 <D80_GENERIC+0x21a>
 800b1c4:	b2db      	uxtb	r3, r3
 800b1c6:	f890 e000 	ldrb.w	lr, [r0]
 800b1ca:	b219      	sxth	r1, r3
 800b1cc:	425c      	negs	r4, r3
 800b1ce:	f810 9003 	ldrb.w	r9, [r0, r3]
 800b1d2:	004e      	lsls	r6, r1, #1
 800b1d4:	eb01 0581 	add.w	r5, r1, r1, lsl #2
 800b1d8:	4431      	add	r1, r6
 800b1da:	1843      	adds	r3, r0, r1
 800b1dc:	f810 b001 	ldrb.w	fp, [r0, r1]
 800b1e0:	1919      	adds	r1, r3, r4
 800b1e2:	5d1b      	ldrb	r3, [r3, r4]
 800b1e4:	1948      	adds	r0, r1, r5
 800b1e6:	f811 a005 	ldrb.w	sl, [r1, r5]
 800b1ea:	041b      	lsls	r3, r3, #16
 800b1ec:	1907      	adds	r7, r0, r4
 800b1ee:	5d01      	ldrb	r1, [r0, r4]
 800b1f0:	eb03 630b 	add.w	r3, r3, fp, lsl #24
 800b1f4:	f810 0014 	ldrb.w	r0, [r0, r4, lsl #1]
 800b1f8:	eb07 0b44 	add.w	fp, r7, r4, lsl #1
 800b1fc:	f817 7014 	ldrb.w	r7, [r7, r4, lsl #1]
 800b200:	0409      	lsls	r1, r1, #16
 800b202:	eb03 2309 	add.w	r3, r3, r9, lsl #8
 800b206:	eb0b 0905 	add.w	r9, fp, r5
 800b20a:	eb01 610a 	add.w	r1, r1, sl, lsl #24
 800b20e:	f81b 5005 	ldrb.w	r5, [fp, r5]
 800b212:	eb09 0b04 	add.w	fp, r9, r4
 800b216:	f819 4004 	ldrb.w	r4, [r9, r4]
 800b21a:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 800b21e:	4473      	add	r3, lr
 800b220:	eb0b 0006 	add.w	r0, fp, r6
 800b224:	eb04 2505 	add.w	r5, r4, r5, lsl #8
 800b228:	4439      	add	r1, r7
 800b22a:	f3c3 2407 	ubfx	r4, r3, #8, #8
 800b22e:	b2df      	uxtb	r7, r3
 800b230:	f3c3 4607 	ubfx	r6, r3, #16, #8
 800b234:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 800b238:	f85c 3027 	ldr.w	r3, [ip, r7, lsl #2]
 800b23c:	fa5f fa81 	uxtb.w	sl, r1
 800b240:	f85c 7024 	ldr.w	r7, [ip, r4, lsl #2]
 800b244:	9c02      	ldr	r4, [sp, #8]
 800b246:	f85c 9026 	ldr.w	r9, [ip, r6, lsl #2]
 800b24a:	441c      	add	r4, r3
 800b24c:	f85c 602e 	ldr.w	r6, [ip, lr, lsl #2]
 800b250:	f85c e02a 	ldr.w	lr, [ip, sl, lsl #2]
 800b254:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 800b258:	eb07 2794 	add.w	r7, r7, r4, lsr #10
 800b25c:	f3c4 0309 	ubfx	r3, r4, #0, #10
 800b260:	f3c1 2407 	ubfx	r4, r1, #8, #8
 800b264:	b2ed      	uxtb	r5, r5
 800b266:	eb09 2997 	add.w	r9, r9, r7, lsr #10
 800b26a:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800b26e:	f85c 4024 	ldr.w	r4, [ip, r4, lsl #2]
 800b272:	eb06 2699 	add.w	r6, r6, r9, lsr #10
 800b276:	f85c 5025 	ldr.w	r5, [ip, r5, lsl #2]
 800b27a:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
 800b27e:	f3c1 4707 	ubfx	r7, r1, #16, #8
 800b282:	eb0e 2e96 	add.w	lr, lr, r6, lsr #10
 800b286:	f85c a02a 	ldr.w	sl, [ip, sl, lsl #2]
 800b28a:	f85c 7027 	ldr.w	r7, [ip, r7, lsl #2]
 800b28e:	0e09      	lsrs	r1, r1, #24
 800b290:	eb04 249e 	add.w	r4, r4, lr, lsr #10
 800b294:	f3c9 0909 	ubfx	r9, r9, #0, #10
 800b298:	f85c 1021 	ldr.w	r1, [ip, r1, lsl #2]
 800b29c:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800b2a0:	eb07 2794 	add.w	r7, r7, r4, lsr #10
 800b2a4:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800b2a8:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800b2ac:	eb01 2197 	add.w	r1, r1, r7, lsr #10
 800b2b0:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800b2b4:	ea46 4609 	orr.w	r6, r6, r9, lsl #16
 800b2b8:	eb05 2591 	add.w	r5, r5, r1, lsr #10
 800b2bc:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800b2c0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 800b2c4:	eb0a 2a95 	add.w	sl, sl, r5, lsr #10
 800b2c8:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800b2cc:	ea41 4107 	orr.w	r1, r1, r7, lsl #16
 800b2d0:	ea4f 229a 	mov.w	r2, sl, lsr #10
 800b2d4:	f3ca 0709 	ubfx	r7, sl, #0, #10
 800b2d8:	9202      	str	r2, [sp, #8]
 800b2da:	ea47 4505 	orr.w	r5, r7, r5, lsl #16
 800b2de:	4a43      	ldr	r2, [pc, #268]	; (800b3ec <D80_GENERIC+0x264>)
 800b2e0:	9f01      	ldr	r7, [sp, #4]
 800b2e2:	fb23 7a02 	smlad	sl, r3, r2, r7
 800b2e6:	4a42      	ldr	r2, [pc, #264]	; (800b3f0 <D80_GENERIC+0x268>)
 800b2e8:	fb26 aa02 	smlad	sl, r6, r2, sl
 800b2ec:	4a41      	ldr	r2, [pc, #260]	; (800b3f4 <D80_GENERIC+0x26c>)
 800b2ee:	fb24 aa02 	smlad	sl, r4, r2, sl
 800b2f2:	4a41      	ldr	r2, [pc, #260]	; (800b3f8 <D80_GENERIC+0x270>)
 800b2f4:	fb21 a702 	smlad	r7, r1, r2, sl
 800b2f8:	f44f 3a80 	mov.w	sl, #65536	; 0x10000
 800b2fc:	fb25 7a0a 	smlad	sl, r5, sl, r7
 800b300:	4a3e      	ldr	r2, [pc, #248]	; (800b3fc <D80_GENERIC+0x274>)
 800b302:	9f03      	ldr	r7, [sp, #12]
 800b304:	fb23 7e02 	smlad	lr, r3, r2, r7
 800b308:	4a3d      	ldr	r2, [pc, #244]	; (800b400 <D80_GENERIC+0x278>)
 800b30a:	fb26 ee02 	smlad	lr, r6, r2, lr
 800b30e:	f04f 174b 	mov.w	r7, #4915275	; 0x4b004b
 800b312:	fb24 e707 	smlad	r7, r4, r7, lr
 800b316:	4a3b      	ldr	r2, [pc, #236]	; (800b404 <D80_GENERIC+0x27c>)
 800b318:	fb21 7702 	smlad	r7, r1, r2, r7
 800b31c:	4a3a      	ldr	r2, [pc, #232]	; (800b408 <D80_GENERIC+0x280>)
 800b31e:	fb25 7202 	smlad	r2, r5, r2, r7
 800b322:	f04f 0901 	mov.w	r9, #1
 800b326:	9201      	str	r2, [sp, #4]
 800b328:	fb23 f909 	smuad	r9, r3, r9
 800b32c:	4b37      	ldr	r3, [pc, #220]	; (800b40c <D80_GENERIC+0x284>)
 800b32e:	fb26 9603 	smlad	r6, r6, r3, r9
 800b332:	4f37      	ldr	r7, [pc, #220]	; (800b410 <D80_GENERIC+0x288>)
 800b334:	fb24 6407 	smlad	r4, r4, r7, r6
 800b338:	4f36      	ldr	r7, [pc, #216]	; (800b414 <D80_GENERIC+0x28c>)
 800b33a:	fb21 4707 	smlad	r7, r1, r7, r4
 800b33e:	4936      	ldr	r1, [pc, #216]	; (800b418 <D80_GENERIC+0x290>)
 800b340:	fb25 7301 	smlad	r3, r5, r1, r7
 800b344:	9303      	str	r3, [sp, #12]
 800b346:	f5aa 3a7a 	sub.w	sl, sl, #256000	; 0x3e800
 800b34a:	9b08      	ldr	r3, [sp, #32]
 800b34c:	b193      	cbz	r3, 800b374 <D80_GENERIC+0x1ec>
 800b34e:	9a04      	ldr	r2, [sp, #16]
 800b350:	4452      	add	r2, sl
 800b352:	4614      	mov	r4, r2
 800b354:	9a05      	ldr	r2, [sp, #20]
 800b356:	f8cd a014 	str.w	sl, [sp, #20]
 800b35a:	1aa4      	subs	r4, r4, r2
 800b35c:	fba4 1203 	umull	r1, r2, r4, r3
 800b360:	17e7      	asrs	r7, r4, #31
 800b362:	f111 4400 	adds.w	r4, r1, #2147483648	; 0x80000000
 800b366:	fb03 2207 	mla	r2, r3, r7, r2
 800b36a:	f142 0500 	adc.w	r5, r2, #0
 800b36e:	006b      	lsls	r3, r5, #1
 800b370:	469a      	mov	sl, r3
 800b372:	9304      	str	r3, [sp, #16]
 800b374:	9e00      	ldr	r6, [sp, #0]
 800b376:	ea4f 2a4a 	mov.w	sl, sl, lsl #9
 800b37a:	9a06      	ldr	r2, [sp, #24]
 800b37c:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800b380:	8d33      	ldrh	r3, [r6, #40]	; 0x28
 800b382:	2500      	movs	r5, #0
 800b384:	fb08 f303 	mul.w	r3, r8, r3
 800b388:	fbc2 450a 	smlal	r4, r5, r2, sl
 800b38c:	9a07      	ldr	r2, [sp, #28]
 800b38e:	f108 0801 	add.w	r8, r8, #1
 800b392:	10a9      	asrs	r1, r5, #2
 800b394:	f301 010f 	ssat	r1, #16, r1
 800b398:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800b39c:	8cf3      	ldrh	r3, [r6, #38]	; 0x26
 800b39e:	4543      	cmp	r3, r8
 800b3a0:	dd12      	ble.n	800b3c8 <D80_GENERIC+0x240>
 800b3a2:	9b00      	ldr	r3, [sp, #0]
 800b3a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b3a6:	2b01      	cmp	r3, #1
 800b3a8:	f47f af0c 	bne.w	800b1c4 <D80_GENERIC+0x3c>
 800b3ac:	9b00      	ldr	r3, [sp, #0]
 800b3ae:	6885      	ldr	r5, [r0, #8]
 800b3b0:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 800b3b2:	06b2      	lsls	r2, r6, #26
 800b3b4:	e9d0 3100 	ldrd	r3, r1, [r0]
 800b3b8:	f100 000a 	add.w	r0, r0, #10
 800b3bc:	f57f af35 	bpl.w	800b22a <D80_GENERIC+0xa2>
 800b3c0:	ba5b      	rev16	r3, r3
 800b3c2:	ba49      	rev16	r1, r1
 800b3c4:	ba6d      	rev16	r5, r5
 800b3c6:	e730      	b.n	800b22a <D80_GENERIC+0xa2>
 800b3c8:	4632      	mov	r2, r6
 800b3ca:	9b03      	ldr	r3, [sp, #12]
 800b3cc:	2000      	movs	r0, #0
 800b3ce:	6093      	str	r3, [r2, #8]
 800b3d0:	9b01      	ldr	r3, [sp, #4]
 800b3d2:	60d3      	str	r3, [r2, #12]
 800b3d4:	9b02      	ldr	r3, [sp, #8]
 800b3d6:	61d3      	str	r3, [r2, #28]
 800b3d8:	9b04      	ldr	r3, [sp, #16]
 800b3da:	6113      	str	r3, [r2, #16]
 800b3dc:	9b05      	ldr	r3, [sp, #20]
 800b3de:	6153      	str	r3, [r2, #20]
 800b3e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b3e2:	6193      	str	r3, [r2, #24]
 800b3e4:	b00b      	add	sp, #44	; 0x2c
 800b3e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3ea:	bf00      	nop
 800b3ec:	002d0024 	.word	0x002d0024
 800b3f0:	001c0015 	.word	0x001c0015
 800b3f4:	000f000a 	.word	0x000f000a
 800b3f8:	00060003 	.word	0x00060003
 800b3fc:	0037003f 	.word	0x0037003f
 800b400:	00450049 	.word	0x00450049
 800b404:	00490045 	.word	0x00490045
 800b408:	003f0037 	.word	0x003f0037
 800b40c:	00030006 	.word	0x00030006
 800b410:	000a000f 	.word	0x000a000f
 800b414:	0015001c 	.word	0x0015001c
 800b418:	0024002d 	.word	0x0024002d
 800b41c:	24000000 	.word	0x24000000

0800b420 <D128_GENERIC>:
 800b420:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b424:	b08d      	sub	sp, #52	; 0x34
 800b426:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 800b428:	f8d2 a01c 	ldr.w	sl, [r2, #28]
 800b42c:	9109      	str	r1, [sp, #36]	; 0x24
 800b42e:	6911      	ldr	r1, [r2, #16]
 800b430:	9201      	str	r2, [sp, #4]
 800b432:	9106      	str	r1, [sp, #24]
 800b434:	6951      	ldr	r1, [r2, #20]
 800b436:	9107      	str	r1, [sp, #28]
 800b438:	6991      	ldr	r1, [r2, #24]
 800b43a:	910b      	str	r1, [sp, #44]	; 0x2c
 800b43c:	6891      	ldr	r1, [r2, #8]
 800b43e:	9103      	str	r1, [sp, #12]
 800b440:	68d1      	ldr	r1, [r2, #12]
 800b442:	9102      	str	r1, [sp, #8]
 800b444:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800b446:	9108      	str	r1, [sp, #32]
 800b448:	2b00      	cmp	r3, #0
 800b44a:	f000 8183 	beq.w	800b754 <D128_GENERIC+0x334>
 800b44e:	2300      	movs	r3, #0
 800b450:	6a12      	ldr	r2, [r2, #32]
 800b452:	4681      	mov	r9, r0
 800b454:	920a      	str	r2, [sp, #40]	; 0x28
 800b456:	e9cd a304 	strd	sl, r3, [sp, #16]
 800b45a:	e165      	b.n	800b728 <D128_GENERIC+0x308>
 800b45c:	b2d2      	uxtb	r2, r2
 800b45e:	f899 b000 	ldrb.w	fp, [r9]
 800b462:	b213      	sxth	r3, r2
 800b464:	4255      	negs	r5, r2
 800b466:	f819 0002 	ldrb.w	r0, [r9, r2]
 800b46a:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 800b46e:	009f      	lsls	r7, r3, #2
 800b470:	eb09 0402 	add.w	r4, r9, r2
 800b474:	ebc3 06c3 	rsb	r6, r3, r3, lsl #3
 800b478:	f819 8002 	ldrb.w	r8, [r9, r2]
 800b47c:	443b      	add	r3, r7
 800b47e:	1962      	adds	r2, r4, r5
 800b480:	5d64      	ldrb	r4, [r4, r5]
 800b482:	eb02 0c03 	add.w	ip, r2, r3
 800b486:	0424      	lsls	r4, r4, #16
 800b488:	5cd3      	ldrb	r3, [r2, r3]
 800b48a:	eb0c 0e05 	add.w	lr, ip, r5
 800b48e:	f81c 9015 	ldrb.w	r9, [ip, r5, lsl #1]
 800b492:	f81c 2005 	ldrb.w	r2, [ip, r5]
 800b496:	eb04 6408 	add.w	r4, r4, r8, lsl #24
 800b49a:	eb0e 0c45 	add.w	ip, lr, r5, lsl #1
 800b49e:	f81e 8015 	ldrb.w	r8, [lr, r5, lsl #1]
 800b4a2:	eb04 2400 	add.w	r4, r4, r0, lsl #8
 800b4a6:	eb0c 0e06 	add.w	lr, ip, r6
 800b4aa:	f81c a006 	ldrb.w	sl, [ip, r6]
 800b4ae:	0412      	lsls	r2, r2, #16
 800b4b0:	445c      	add	r4, fp
 800b4b2:	eb0e 0c05 	add.w	ip, lr, r5
 800b4b6:	eb02 6203 	add.w	r2, r2, r3, lsl #24
 800b4ba:	f81e 3005 	ldrb.w	r3, [lr, r5]
 800b4be:	eb0c 0045 	add.w	r0, ip, r5, lsl #1
 800b4c2:	f81e e015 	ldrb.w	lr, [lr, r5, lsl #1]
 800b4c6:	041b      	lsls	r3, r3, #16
 800b4c8:	f81c c015 	ldrb.w	ip, [ip, r5, lsl #1]
 800b4cc:	eb00 0b06 	add.w	fp, r0, r6
 800b4d0:	5d80      	ldrb	r0, [r0, r6]
 800b4d2:	eb03 630a 	add.w	r3, r3, sl, lsl #24
 800b4d6:	f81b 6005 	ldrb.w	r6, [fp, r5]
 800b4da:	eb0b 0a05 	add.w	sl, fp, r5
 800b4de:	eb02 2209 	add.w	r2, r2, r9, lsl #8
 800b4e2:	f81b b015 	ldrb.w	fp, [fp, r5, lsl #1]
 800b4e6:	0436      	lsls	r6, r6, #16
 800b4e8:	eb0a 0945 	add.w	r9, sl, r5, lsl #1
 800b4ec:	4442      	add	r2, r8
 800b4ee:	eb06 6600 	add.w	r6, r6, r0, lsl #24
 800b4f2:	f81a 8015 	ldrb.w	r8, [sl, r5, lsl #1]
 800b4f6:	eb03 230e 	add.w	r3, r3, lr, lsl #8
 800b4fa:	44b9      	add	r9, r7
 800b4fc:	eb06 260b 	add.w	r6, r6, fp, lsl #8
 800b500:	4463      	add	r3, ip
 800b502:	eb06 0508 	add.w	r5, r6, r8
 800b506:	b2e7      	uxtb	r7, r4
 800b508:	f3c4 2607 	ubfx	r6, r4, #8, #8
 800b50c:	499b      	ldr	r1, [pc, #620]	; (800b77c <D128_GENERIC+0x35c>)
 800b50e:	f3c4 4007 	ubfx	r0, r4, #16, #8
 800b512:	0e24      	lsrs	r4, r4, #24
 800b514:	f851 c027 	ldr.w	ip, [r1, r7, lsl #2]
 800b518:	b2d7      	uxtb	r7, r2
 800b51a:	f851 b026 	ldr.w	fp, [r1, r6, lsl #2]
 800b51e:	f3c2 2607 	ubfx	r6, r2, #8, #8
 800b522:	9904      	ldr	r1, [sp, #16]
 800b524:	4461      	add	r1, ip
 800b526:	468c      	mov	ip, r1
 800b528:	4994      	ldr	r1, [pc, #592]	; (800b77c <D128_GENERIC+0x35c>)
 800b52a:	eb0b 2b9c 	add.w	fp, fp, ip, lsr #10
 800b52e:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 800b532:	f851 8024 	ldr.w	r8, [r1, r4, lsl #2]
 800b536:	f3c2 4407 	ubfx	r4, r2, #16, #8
 800b53a:	eb00 209b 	add.w	r0, r0, fp, lsr #10
 800b53e:	f851 e027 	ldr.w	lr, [r1, r7, lsl #2]
 800b542:	f851 7026 	ldr.w	r7, [r1, r6, lsl #2]
 800b546:	0e12      	lsrs	r2, r2, #24
 800b548:	eb08 2890 	add.w	r8, r8, r0, lsr #10
 800b54c:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 800b550:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 800b554:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800b558:	eb0e 2e98 	add.w	lr, lr, r8, lsr #10
 800b55c:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800b560:	b2da      	uxtb	r2, r3
 800b562:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 800b566:	eb07 279e 	add.w	r7, r7, lr, lsr #10
 800b56a:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 800b56e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800b572:	ea48 4800 	orr.w	r8, r8, r0, lsl #16
 800b576:	eb04 2a97 	add.w	sl, r4, r7, lsr #10
 800b57a:	f3c3 2007 	ubfx	r0, r3, #8, #8
 800b57e:	ea4b 4b0c 	orr.w	fp, fp, ip, lsl #16
 800b582:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800b586:	eb06 269a 	add.w	r6, r6, sl, lsr #10
 800b58a:	f851 c020 	ldr.w	ip, [r1, r0, lsl #2]
 800b58e:	f3c3 4007 	ubfx	r0, r3, #16, #8
 800b592:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800b596:	eb02 2296 	add.w	r2, r2, r6, lsr #10
 800b59a:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 800b59e:	f851 4020 	ldr.w	r4, [r1, r0, lsl #2]
 800b5a2:	0e1b      	lsrs	r3, r3, #24
 800b5a4:	eb0c 2c92 	add.w	ip, ip, r2, lsr #10
 800b5a8:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800b5ac:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
 800b5b0:	ea47 470e 	orr.w	r7, r7, lr, lsl #16
 800b5b4:	b2eb      	uxtb	r3, r5
 800b5b6:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800b5ba:	eb04 2e9c 	add.w	lr, r4, ip, lsr #10
 800b5be:	f3cc 0409 	ubfx	r4, ip, #0, #10
 800b5c2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800b5c6:	ea46 460a 	orr.w	r6, r6, sl, lsl #16
 800b5ca:	eb00 209e 	add.w	r0, r0, lr, lsr #10
 800b5ce:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 800b5d2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800b5d6:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800b5da:	eb03 2c90 	add.w	ip, r3, r0, lsr #10
 800b5de:	f851 202a 	ldr.w	r2, [r1, sl, lsl #2]
 800b5e2:	f3c5 4307 	ubfx	r3, r5, #16, #8
 800b5e6:	ea4f 6a15 	mov.w	sl, r5, lsr #24
 800b5ea:	eb02 229c 	add.w	r2, r2, ip, lsr #10
 800b5ee:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800b5f2:	f851 5023 	ldr.w	r5, [r1, r3, lsl #2]
 800b5f6:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 800b5fa:	f851 302a 	ldr.w	r3, [r1, sl, lsl #2]
 800b5fe:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 800b602:	eb05 2592 	add.w	r5, r5, r2, lsr #10
 800b606:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800b60a:	eb03 2e95 	add.w	lr, r3, r5, lsr #10
 800b60e:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800b612:	ea42 430c 	orr.w	r3, r2, ip, lsl #16
 800b616:	ea4f 219e 	mov.w	r1, lr, lsr #10
 800b61a:	f3ce 0209 	ubfx	r2, lr, #0, #10
 800b61e:	9104      	str	r1, [sp, #16]
 800b620:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 800b624:	9902      	ldr	r1, [sp, #8]
 800b626:	4a56      	ldr	r2, [pc, #344]	; (800b780 <D128_GENERIC+0x360>)
 800b628:	fb2b 1202 	smlad	r2, fp, r2, r1
 800b62c:	4955      	ldr	r1, [pc, #340]	; (800b784 <D128_GENERIC+0x364>)
 800b62e:	fb28 2201 	smlad	r2, r8, r1, r2
 800b632:	4955      	ldr	r1, [pc, #340]	; (800b788 <D128_GENERIC+0x368>)
 800b634:	fb27 2201 	smlad	r2, r7, r1, r2
 800b638:	4954      	ldr	r1, [pc, #336]	; (800b78c <D128_GENERIC+0x36c>)
 800b63a:	fb26 2201 	smlad	r2, r6, r1, r2
 800b63e:	4954      	ldr	r1, [pc, #336]	; (800b790 <D128_GENERIC+0x370>)
 800b640:	fb24 2201 	smlad	r2, r4, r1, r2
 800b644:	4953      	ldr	r1, [pc, #332]	; (800b794 <D128_GENERIC+0x374>)
 800b646:	fb20 2201 	smlad	r2, r0, r1, r2
 800b64a:	4953      	ldr	r1, [pc, #332]	; (800b798 <D128_GENERIC+0x378>)
 800b64c:	fb23 2201 	smlad	r2, r3, r1, r2
 800b650:	f44f 3c80 	mov.w	ip, #65536	; 0x10000
 800b654:	fb25 2a0c 	smlad	sl, r5, ip, r2
 800b658:	4950      	ldr	r1, [pc, #320]	; (800b79c <D128_GENERIC+0x37c>)
 800b65a:	9a03      	ldr	r2, [sp, #12]
 800b65c:	fb2b 2c01 	smlad	ip, fp, r1, r2
 800b660:	4a4f      	ldr	r2, [pc, #316]	; (800b7a0 <D128_GENERIC+0x380>)
 800b662:	fb28 ce02 	smlad	lr, r8, r2, ip
 800b666:	f8df c150 	ldr.w	ip, [pc, #336]	; 800b7b8 <D128_GENERIC+0x398>
 800b66a:	fb27 ec0c 	smlad	ip, r7, ip, lr
 800b66e:	f8df e14c 	ldr.w	lr, [pc, #332]	; 800b7bc <D128_GENERIC+0x39c>
 800b672:	fb26 cc0e 	smlad	ip, r6, lr, ip
 800b676:	f8df e148 	ldr.w	lr, [pc, #328]	; 800b7c0 <D128_GENERIC+0x3a0>
 800b67a:	fb24 ce0e 	smlad	lr, r4, lr, ip
 800b67e:	f8df c144 	ldr.w	ip, [pc, #324]	; 800b7c4 <D128_GENERIC+0x3a4>
 800b682:	fb20 ee0c 	smlad	lr, r0, ip, lr
 800b686:	f8df c140 	ldr.w	ip, [pc, #320]	; 800b7c8 <D128_GENERIC+0x3a8>
 800b68a:	fb23 ec0c 	smlad	ip, r3, ip, lr
 800b68e:	f8df e13c 	ldr.w	lr, [pc, #316]	; 800b7cc <D128_GENERIC+0x3ac>
 800b692:	fb25 c20e 	smlad	r2, r5, lr, ip
 800b696:	f04f 0c01 	mov.w	ip, #1
 800b69a:	9202      	str	r2, [sp, #8]
 800b69c:	fb2b fb0c 	smuad	fp, fp, ip
 800b6a0:	f8df c12c 	ldr.w	ip, [pc, #300]	; 800b7d0 <D128_GENERIC+0x3b0>
 800b6a4:	fb28 bb0c 	smlad	fp, r8, ip, fp
 800b6a8:	f8df c128 	ldr.w	ip, [pc, #296]	; 800b7d4 <D128_GENERIC+0x3b4>
 800b6ac:	fb27 bb0c 	smlad	fp, r7, ip, fp
 800b6b0:	4f3c      	ldr	r7, [pc, #240]	; (800b7a4 <D128_GENERIC+0x384>)
 800b6b2:	fb26 bb07 	smlad	fp, r6, r7, fp
 800b6b6:	4f3c      	ldr	r7, [pc, #240]	; (800b7a8 <D128_GENERIC+0x388>)
 800b6b8:	fb24 bb07 	smlad	fp, r4, r7, fp
 800b6bc:	4f3b      	ldr	r7, [pc, #236]	; (800b7ac <D128_GENERIC+0x38c>)
 800b6be:	fb20 bb07 	smlad	fp, r0, r7, fp
 800b6c2:	4f3b      	ldr	r7, [pc, #236]	; (800b7b0 <D128_GENERIC+0x390>)
 800b6c4:	fb23 bb07 	smlad	fp, r3, r7, fp
 800b6c8:	4b3a      	ldr	r3, [pc, #232]	; (800b7b4 <D128_GENERIC+0x394>)
 800b6ca:	fb25 b303 	smlad	r3, r5, r3, fp
 800b6ce:	9303      	str	r3, [sp, #12]
 800b6d0:	f5aa 1480 	sub.w	r4, sl, #1048576	; 0x100000
 800b6d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b6d6:	b183      	cbz	r3, 800b6fa <D128_GENERIC+0x2da>
 800b6d8:	9a06      	ldr	r2, [sp, #24]
 800b6da:	9907      	ldr	r1, [sp, #28]
 800b6dc:	4422      	add	r2, r4
 800b6de:	9407      	str	r4, [sp, #28]
 800b6e0:	1a52      	subs	r2, r2, r1
 800b6e2:	fba2 0103 	umull	r0, r1, r2, r3
 800b6e6:	17d5      	asrs	r5, r2, #31
 800b6e8:	f110 4200 	adds.w	r2, r0, #2147483648	; 0x80000000
 800b6ec:	fb03 1105 	mla	r1, r3, r5, r1
 800b6f0:	f141 0300 	adc.w	r3, r1, #0
 800b6f4:	005b      	lsls	r3, r3, #1
 800b6f6:	461c      	mov	r4, r3
 800b6f8:	9306      	str	r3, [sp, #24]
 800b6fa:	9d01      	ldr	r5, [sp, #4]
 800b6fc:	01e4      	lsls	r4, r4, #7
 800b6fe:	9e05      	ldr	r6, [sp, #20]
 800b700:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b704:	8d28      	ldrh	r0, [r5, #40]	; 0x28
 800b706:	2300      	movs	r3, #0
 800b708:	9908      	ldr	r1, [sp, #32]
 800b70a:	fb06 f000 	mul.w	r0, r6, r0
 800b70e:	3601      	adds	r6, #1
 800b710:	fbc1 2304 	smlal	r2, r3, r1, r4
 800b714:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b716:	109b      	asrs	r3, r3, #2
 800b718:	9605      	str	r6, [sp, #20]
 800b71a:	f303 030f 	ssat	r3, #16, r3
 800b71e:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
 800b722:	8ceb      	ldrh	r3, [r5, #38]	; 0x26
 800b724:	42b3      	cmp	r3, r6
 800b726:	dd13      	ble.n	800b750 <D128_GENERIC+0x330>
 800b728:	9b01      	ldr	r3, [sp, #4]
 800b72a:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800b72c:	2a01      	cmp	r2, #1
 800b72e:	f47f ae95 	bne.w	800b45c <D128_GENERIC+0x3c>
 800b732:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800b734:	f109 0610 	add.w	r6, r9, #16
 800b738:	0681      	lsls	r1, r0, #26
 800b73a:	e9d9 4200 	ldrd	r4, r2, [r9]
 800b73e:	e9d9 3502 	ldrd	r3, r5, [r9, #8]
 800b742:	d518      	bpl.n	800b776 <D128_GENERIC+0x356>
 800b744:	ba64      	rev16	r4, r4
 800b746:	ba52      	rev16	r2, r2
 800b748:	ba5b      	rev16	r3, r3
 800b74a:	ba6d      	rev16	r5, r5
 800b74c:	46b1      	mov	r9, r6
 800b74e:	e6da      	b.n	800b506 <D128_GENERIC+0xe6>
 800b750:	f8dd a010 	ldr.w	sl, [sp, #16]
 800b754:	9b01      	ldr	r3, [sp, #4]
 800b756:	2000      	movs	r0, #0
 800b758:	9903      	ldr	r1, [sp, #12]
 800b75a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b75c:	6099      	str	r1, [r3, #8]
 800b75e:	9902      	ldr	r1, [sp, #8]
 800b760:	f8c3 a01c 	str.w	sl, [r3, #28]
 800b764:	60d9      	str	r1, [r3, #12]
 800b766:	9906      	ldr	r1, [sp, #24]
 800b768:	619a      	str	r2, [r3, #24]
 800b76a:	6119      	str	r1, [r3, #16]
 800b76c:	9907      	ldr	r1, [sp, #28]
 800b76e:	6159      	str	r1, [r3, #20]
 800b770:	b00d      	add	sp, #52	; 0x34
 800b772:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b776:	46b1      	mov	r9, r6
 800b778:	e6c5      	b.n	800b506 <D128_GENERIC+0xe6>
 800b77a:	bf00      	nop
 800b77c:	24000000 	.word	0x24000000
 800b780:	00780069 	.word	0x00780069
 800b784:	005b004e 	.word	0x005b004e
 800b788:	00420037 	.word	0x00420037
 800b78c:	002d0024 	.word	0x002d0024
 800b790:	001c0015 	.word	0x001c0015
 800b794:	000f000a 	.word	0x000f000a
 800b798:	00060003 	.word	0x00060003
 800b79c:	00880096 	.word	0x00880096
 800b7a0:	00a200ac 	.word	0x00a200ac
 800b7a4:	0015001c 	.word	0x0015001c
 800b7a8:	0024002d 	.word	0x0024002d
 800b7ac:	00370042 	.word	0x00370042
 800b7b0:	004e005b 	.word	0x004e005b
 800b7b4:	00690078 	.word	0x00690078
 800b7b8:	00b400ba 	.word	0x00b400ba
 800b7bc:	00be00c0 	.word	0x00be00c0
 800b7c0:	00c000be 	.word	0x00c000be
 800b7c4:	00ba00b4 	.word	0x00ba00b4
 800b7c8:	00ac00a2 	.word	0x00ac00a2
 800b7cc:	00960088 	.word	0x00960088
 800b7d0:	00030006 	.word	0x00030006
 800b7d4:	000a000f 	.word	0x000a000f

0800b7d8 <D16_1CH_HTONS_VOL_HP>:
 800b7d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7dc:	6993      	ldr	r3, [r2, #24]
 800b7de:	b087      	sub	sp, #28
 800b7e0:	4682      	mov	sl, r0
 800b7e2:	8cd0      	ldrh	r0, [r2, #38]	; 0x26
 800b7e4:	9304      	str	r3, [sp, #16]
 800b7e6:	f8d2 b030 	ldr.w	fp, [r2, #48]	; 0x30
 800b7ea:	69d3      	ldr	r3, [r2, #28]
 800b7ec:	f8d2 e020 	ldr.w	lr, [r2, #32]
 800b7f0:	e9d2 5402 	ldrd	r5, r4, [r2, #8]
 800b7f4:	e9d2 6c04 	ldrd	r6, ip, [r2, #16]
 800b7f8:	9403      	str	r4, [sp, #12]
 800b7fa:	2800      	cmp	r0, #0
 800b7fc:	d054      	beq.n	800b8a8 <D16_1CH_HTONS_VOL_HP+0xd0>
 800b7fe:	f1a1 0902 	sub.w	r9, r1, #2
 800b802:	eb0a 0140 	add.w	r1, sl, r0, lsl #1
 800b806:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 800b8b4 <D16_1CH_HTONS_VOL_HP+0xdc>
 800b80a:	4650      	mov	r0, sl
 800b80c:	9101      	str	r1, [sp, #4]
 800b80e:	4619      	mov	r1, r3
 800b810:	f8cd b008 	str.w	fp, [sp, #8]
 800b814:	9205      	str	r2, [sp, #20]
 800b816:	f850 3b02 	ldr.w	r3, [r0], #2
 800b81a:	ba5b      	rev16	r3, r3
 800b81c:	b2dc      	uxtb	r4, r3
 800b81e:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800b822:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b826:	f858 4022 	ldr.w	r4, [r8, r2, lsl #2]
 800b82a:	4419      	add	r1, r3
 800b82c:	eb04 2491 	add.w	r4, r4, r1, lsr #10
 800b830:	f3c1 0309 	ubfx	r3, r1, #0, #10
 800b834:	f3c4 0209 	ubfx	r2, r4, #0, #10
 800b838:	0aa1      	lsrs	r1, r4, #10
 800b83a:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 800b83e:	4a1b      	ldr	r2, [pc, #108]	; (800b8ac <D16_1CH_HTONS_VOL_HP+0xd4>)
 800b840:	fb23 5402 	smlad	r4, r3, r2, r5
 800b844:	4a1a      	ldr	r2, [pc, #104]	; (800b8b0 <D16_1CH_HTONS_VOL_HP+0xd8>)
 800b846:	fb23 f502 	smuad	r5, r3, r2
 800b84a:	f5a4 6400 	sub.w	r4, r4, #2048	; 0x800
 800b84e:	f04f 4a00 	mov.w	sl, #2147483648	; 0x80000000
 800b852:	f04f 0b00 	mov.w	fp, #0
 800b856:	19a2      	adds	r2, r4, r6
 800b858:	eba2 020c 	sub.w	r2, r2, ip
 800b85c:	46a4      	mov	ip, r4
 800b85e:	17d7      	asrs	r7, r2, #31
 800b860:	fba2 230e 	umull	r2, r3, r2, lr
 800b864:	f112 4600 	adds.w	r6, r2, #2147483648	; 0x80000000
 800b868:	fb0e 3307 	mla	r3, lr, r7, r3
 800b86c:	f143 0700 	adc.w	r7, r3, #0
 800b870:	9b02      	ldr	r3, [sp, #8]
 800b872:	047a      	lsls	r2, r7, #17
 800b874:	007e      	lsls	r6, r7, #1
 800b876:	fbc3 ab02 	smlal	sl, fp, r3, r2
 800b87a:	ea4f 03ab 	mov.w	r3, fp, asr #2
 800b87e:	f303 030f 	ssat	r3, #16, r3
 800b882:	f829 3f02 	strh.w	r3, [r9, #2]!
 800b886:	9b01      	ldr	r3, [sp, #4]
 800b888:	4298      	cmp	r0, r3
 800b88a:	d1c4      	bne.n	800b816 <D16_1CH_HTONS_VOL_HP+0x3e>
 800b88c:	460b      	mov	r3, r1
 800b88e:	9a05      	ldr	r2, [sp, #20]
 800b890:	2000      	movs	r0, #0
 800b892:	9903      	ldr	r1, [sp, #12]
 800b894:	61d3      	str	r3, [r2, #28]
 800b896:	9b04      	ldr	r3, [sp, #16]
 800b898:	6095      	str	r5, [r2, #8]
 800b89a:	60d1      	str	r1, [r2, #12]
 800b89c:	6193      	str	r3, [r2, #24]
 800b89e:	e9c2 6404 	strd	r6, r4, [r2, #16]
 800b8a2:	b007      	add	sp, #28
 800b8a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8a8:	4664      	mov	r4, ip
 800b8aa:	e7f1      	b.n	800b890 <D16_1CH_HTONS_VOL_HP+0xb8>
 800b8ac:	00030001 	.word	0x00030001
 800b8b0:	00010003 	.word	0x00010003
 800b8b4:	24000000 	.word	0x24000000

0800b8b8 <D24_1CH_HTONS_VOL_HP>:
 800b8b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8bc:	6b16      	ldr	r6, [r2, #48]	; 0x30
 800b8be:	b089      	sub	sp, #36	; 0x24
 800b8c0:	6993      	ldr	r3, [r2, #24]
 800b8c2:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 800b8c4:	9604      	str	r6, [sp, #16]
 800b8c6:	6a16      	ldr	r6, [r2, #32]
 800b8c8:	9306      	str	r3, [sp, #24]
 800b8ca:	9505      	str	r5, [sp, #20]
 800b8cc:	69d3      	ldr	r3, [r2, #28]
 800b8ce:	9600      	str	r6, [sp, #0]
 800b8d0:	e9d2 4a04 	ldrd	r4, sl, [r2, #16]
 800b8d4:	e9d2 ce02 	ldrd	ip, lr, [r2, #8]
 800b8d8:	2d00      	cmp	r5, #0
 800b8da:	f000 8083 	beq.w	800b9e4 <D24_1CH_HTONS_VOL_HP+0x12c>
 800b8de:	9207      	str	r2, [sp, #28]
 800b8e0:	2600      	movs	r6, #0
 800b8e2:	4622      	mov	r2, r4
 800b8e4:	f1a1 0b02 	sub.w	fp, r1, #2
 800b8e8:	4f3f      	ldr	r7, [pc, #252]	; (800b9e8 <D24_1CH_HTONS_VOL_HP+0x130>)
 800b8ea:	461d      	mov	r5, r3
 800b8ec:	f8cd a00c 	str.w	sl, [sp, #12]
 800b8f0:	9c00      	ldr	r4, [sp, #0]
 800b8f2:	e056      	b.n	800b9a2 <D24_1CH_HTONS_VOL_HP+0xea>
 800b8f4:	7841      	ldrb	r1, [r0, #1]
 800b8f6:	eb08 4809 	add.w	r8, r8, r9, lsl #16
 800b8fa:	3002      	adds	r0, #2
 800b8fc:	4488      	add	r8, r1
 800b8fe:	fa5f f388 	uxtb.w	r3, r8
 800b902:	f3c8 2907 	ubfx	r9, r8, #8, #8
 800b906:	ea4f 4818 	mov.w	r8, r8, lsr #16
 800b90a:	f857 1023 	ldr.w	r1, [r7, r3, lsl #2]
 800b90e:	f857 3029 	ldr.w	r3, [r7, r9, lsl #2]
 800b912:	eb01 2195 	add.w	r1, r1, r5, lsr #10
 800b916:	f857 5028 	ldr.w	r5, [r7, r8, lsl #2]
 800b91a:	eb03 2891 	add.w	r8, r3, r1, lsr #10
 800b91e:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800b922:	f3c8 0309 	ubfx	r3, r8, #0, #10
 800b926:	eb05 2598 	add.w	r5, r5, r8, lsr #10
 800b92a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800b92e:	492f      	ldr	r1, [pc, #188]	; (800b9ec <D24_1CH_HTONS_VOL_HP+0x134>)
 800b930:	fb23 e901 	smlad	r9, r3, r1, lr
 800b934:	492e      	ldr	r1, [pc, #184]	; (800b9f0 <D24_1CH_HTONS_VOL_HP+0x138>)
 800b936:	fb23 ce01 	smlad	lr, r3, r1, ip
 800b93a:	f3c5 0c09 	ubfx	ip, r5, #0, #10
 800b93e:	2101      	movs	r1, #1
 800b940:	eb0c 084c 	add.w	r8, ip, ip, lsl #1
 800b944:	eb0e 0e48 	add.w	lr, lr, r8, lsl #1
 800b948:	fb23 f301 	smuad	r3, r3, r1
 800b94c:	f5a9 51d8 	sub.w	r1, r9, #6912	; 0x1b00
 800b950:	eb08 0c03 	add.w	ip, r8, r3
 800b954:	9b03      	ldr	r3, [sp, #12]
 800b956:	f04f 0a00 	mov.w	sl, #0
 800b95a:	440a      	add	r2, r1
 800b95c:	3601      	adds	r6, #1
 800b95e:	9103      	str	r1, [sp, #12]
 800b960:	1ad2      	subs	r2, r2, r3
 800b962:	ea4f 79e2 	mov.w	r9, r2, asr #31
 800b966:	fba2 2304 	umull	r2, r3, r2, r4
 800b96a:	e9cd 2300 	strd	r2, r3, [sp]
 800b96e:	fb04 3309 	mla	r3, r4, r9, r3
 800b972:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
 800b976:	9301      	str	r3, [sp, #4]
 800b978:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b97c:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 800b980:	f143 0300 	adc.w	r3, r3, #0
 800b984:	ea4f 38c3 	mov.w	r8, r3, lsl #15
 800b988:	005a      	lsls	r2, r3, #1
 800b98a:	9b04      	ldr	r3, [sp, #16]
 800b98c:	fbc3 9a08 	smlal	r9, sl, r3, r8
 800b990:	ea4f 03aa 	mov.w	r3, sl, asr #2
 800b994:	f303 030f 	ssat	r3, #16, r3
 800b998:	f82b 3f02 	strh.w	r3, [fp, #2]!
 800b99c:	9b05      	ldr	r3, [sp, #20]
 800b99e:	429e      	cmp	r6, r3
 800b9a0:	d010      	beq.n	800b9c4 <D24_1CH_HTONS_VOL_HP+0x10c>
 800b9a2:	f890 9003 	ldrb.w	r9, [r0, #3]
 800b9a6:	f016 0f01 	tst.w	r6, #1
 800b9aa:	7801      	ldrb	r1, [r0, #0]
 800b9ac:	ea4f 2309 	mov.w	r3, r9, lsl #8
 800b9b0:	ea4f 2801 	mov.w	r8, r1, lsl #8
 800b9b4:	d09e      	beq.n	800b8f4 <D24_1CH_HTONS_VOL_HP+0x3c>
 800b9b6:	f890 8002 	ldrb.w	r8, [r0, #2]
 800b9ba:	3004      	adds	r0, #4
 800b9bc:	eb03 4808 	add.w	r8, r3, r8, lsl #16
 800b9c0:	4488      	add	r8, r1
 800b9c2:	e79c      	b.n	800b8fe <D24_1CH_HTONS_VOL_HP+0x46>
 800b9c4:	4614      	mov	r4, r2
 800b9c6:	462b      	mov	r3, r5
 800b9c8:	9a07      	ldr	r2, [sp, #28]
 800b9ca:	2000      	movs	r0, #0
 800b9cc:	61d3      	str	r3, [r2, #28]
 800b9ce:	9b06      	ldr	r3, [sp, #24]
 800b9d0:	f8c2 c008 	str.w	ip, [r2, #8]
 800b9d4:	f8c2 e00c 	str.w	lr, [r2, #12]
 800b9d8:	6193      	str	r3, [r2, #24]
 800b9da:	e9c2 4104 	strd	r4, r1, [r2, #16]
 800b9de:	b009      	add	sp, #36	; 0x24
 800b9e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9e4:	4651      	mov	r1, sl
 800b9e6:	e7f0      	b.n	800b9ca <D24_1CH_HTONS_VOL_HP+0x112>
 800b9e8:	24000000 	.word	0x24000000
 800b9ec:	00030001 	.word	0x00030001
 800b9f0:	00060007 	.word	0x00060007

0800b9f4 <D32_1CH_HTONS_VOL_HP>:
 800b9f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9f8:	6993      	ldr	r3, [r2, #24]
 800b9fa:	b087      	sub	sp, #28
 800b9fc:	4683      	mov	fp, r0
 800b9fe:	8cd0      	ldrh	r0, [r2, #38]	; 0x26
 800ba00:	9304      	str	r3, [sp, #16]
 800ba02:	69d5      	ldr	r5, [r2, #28]
 800ba04:	6b14      	ldr	r4, [r2, #48]	; 0x30
 800ba06:	f8d2 a020 	ldr.w	sl, [r2, #32]
 800ba0a:	e9d2 8e04 	ldrd	r8, lr, [r2, #16]
 800ba0e:	e9d2 3c02 	ldrd	r3, ip, [r2, #8]
 800ba12:	2800      	cmp	r0, #0
 800ba14:	d077      	beq.n	800bb06 <D32_1CH_HTONS_VOL_HP+0x112>
 800ba16:	460f      	mov	r7, r1
 800ba18:	46f1      	mov	r9, lr
 800ba1a:	eb01 0140 	add.w	r1, r1, r0, lsl #1
 800ba1e:	f8cd 8000 	str.w	r8, [sp]
 800ba22:	4e3a      	ldr	r6, [pc, #232]	; (800bb0c <D32_1CH_HTONS_VOL_HP+0x118>)
 800ba24:	469e      	mov	lr, r3
 800ba26:	46a0      	mov	r8, r4
 800ba28:	9103      	str	r1, [sp, #12]
 800ba2a:	9205      	str	r2, [sp, #20]
 800ba2c:	f85b 4b04 	ldr.w	r4, [fp], #4
 800ba30:	ba64      	rev16	r4, r4
 800ba32:	b2e0      	uxtb	r0, r4
 800ba34:	f3c4 2307 	ubfx	r3, r4, #8, #8
 800ba38:	f3c4 4107 	ubfx	r1, r4, #16, #8
 800ba3c:	0e24      	lsrs	r4, r4, #24
 800ba3e:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 800ba42:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 800ba46:	eb00 2095 	add.w	r0, r0, r5, lsr #10
 800ba4a:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 800ba4e:	f856 5024 	ldr.w	r5, [r6, r4, lsl #2]
 800ba52:	eb03 2390 	add.w	r3, r3, r0, lsr #10
 800ba56:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800ba5a:	eb01 2193 	add.w	r1, r1, r3, lsr #10
 800ba5e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ba62:	eb05 2591 	add.w	r5, r5, r1, lsr #10
 800ba66:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800ba6a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800ba6e:	f3c5 0009 	ubfx	r0, r5, #0, #10
 800ba72:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800ba76:	4826      	ldr	r0, [pc, #152]	; (800bb10 <D32_1CH_HTONS_VOL_HP+0x11c>)
 800ba78:	fb23 c400 	smlad	r4, r3, r0, ip
 800ba7c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800ba80:	fb21 4402 	smlad	r4, r1, r2, r4
 800ba84:	4823      	ldr	r0, [pc, #140]	; (800bb14 <D32_1CH_HTONS_VOL_HP+0x120>)
 800ba86:	fb23 ec00 	smlad	ip, r3, r0, lr
 800ba8a:	4823      	ldr	r0, [pc, #140]	; (800bb18 <D32_1CH_HTONS_VOL_HP+0x124>)
 800ba8c:	fb21 cc00 	smlad	ip, r1, r0, ip
 800ba90:	2201      	movs	r2, #1
 800ba92:	fb23 f302 	smuad	r3, r3, r2
 800ba96:	4821      	ldr	r0, [pc, #132]	; (800bb1c <D32_1CH_HTONS_VOL_HP+0x128>)
 800ba98:	fb21 3e00 	smlad	lr, r1, r0, r3
 800ba9c:	9b00      	ldr	r3, [sp, #0]
 800ba9e:	f5a4 4480 	sub.w	r4, r4, #16384	; 0x4000
 800baa2:	4423      	add	r3, r4
 800baa4:	eba3 0209 	sub.w	r2, r3, r9
 800baa8:	46a1      	mov	r9, r4
 800baaa:	17d1      	asrs	r1, r2, #31
 800baac:	fba2 230a 	umull	r2, r3, r2, sl
 800bab0:	e9cd 2300 	strd	r2, r3, [sp]
 800bab4:	fb0a 3301 	mla	r3, sl, r1, r3
 800bab8:	9301      	str	r3, [sp, #4]
 800baba:	e9dd 2300 	ldrd	r2, r3, [sp]
 800babe:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 800bac2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800bac6:	f143 0300 	adc.w	r3, r3, #0
 800baca:	0399      	lsls	r1, r3, #14
 800bacc:	005b      	lsls	r3, r3, #1
 800bace:	9300      	str	r3, [sp, #0]
 800bad0:	2300      	movs	r3, #0
 800bad2:	fbc8 2301 	smlal	r2, r3, r8, r1
 800bad6:	109b      	asrs	r3, r3, #2
 800bad8:	f303 030f 	ssat	r3, #16, r3
 800badc:	f827 3b02 	strh.w	r3, [r7], #2
 800bae0:	9b03      	ldr	r3, [sp, #12]
 800bae2:	429f      	cmp	r7, r3
 800bae4:	d1a2      	bne.n	800ba2c <D32_1CH_HTONS_VOL_HP+0x38>
 800bae6:	4673      	mov	r3, lr
 800bae8:	f8dd 8000 	ldr.w	r8, [sp]
 800baec:	9a05      	ldr	r2, [sp, #20]
 800baee:	6093      	str	r3, [r2, #8]
 800baf0:	2000      	movs	r0, #0
 800baf2:	9b04      	ldr	r3, [sp, #16]
 800baf4:	f8c2 c00c 	str.w	ip, [r2, #12]
 800baf8:	61d5      	str	r5, [r2, #28]
 800bafa:	6193      	str	r3, [r2, #24]
 800bafc:	e9c2 8404 	strd	r8, r4, [r2, #16]
 800bb00:	b007      	add	sp, #28
 800bb02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb06:	4674      	mov	r4, lr
 800bb08:	e7f1      	b.n	800baee <D32_1CH_HTONS_VOL_HP+0xfa>
 800bb0a:	bf00      	nop
 800bb0c:	24000000 	.word	0x24000000
 800bb10:	00060003 	.word	0x00060003
 800bb14:	000a000c 	.word	0x000a000c
 800bb18:	000c000a 	.word	0x000c000a
 800bb1c:	00030006 	.word	0x00030006

0800bb20 <D48_1CH_HTONS_VOL_HP>:
 800bb20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb24:	6b17      	ldr	r7, [r2, #48]	; 0x30
 800bb26:	b087      	sub	sp, #28
 800bb28:	6993      	ldr	r3, [r2, #24]
 800bb2a:	9701      	str	r7, [sp, #4]
 800bb2c:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 800bb2e:	6a17      	ldr	r7, [r2, #32]
 800bb30:	9304      	str	r3, [sp, #16]
 800bb32:	69d6      	ldr	r6, [r2, #28]
 800bb34:	9702      	str	r7, [sp, #8]
 800bb36:	e9d2 4e04 	ldrd	r4, lr, [r2, #16]
 800bb3a:	e9d2 3c02 	ldrd	r3, ip, [r2, #8]
 800bb3e:	2d00      	cmp	r5, #0
 800bb40:	f000 8093 	beq.w	800bc6a <D48_1CH_HTONS_VOL_HP+0x14a>
 800bb44:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bb48:	f1a1 0b02 	sub.w	fp, r1, #2
 800bb4c:	46f2      	mov	sl, lr
 800bb4e:	4f48      	ldr	r7, [pc, #288]	; (800bc70 <D48_1CH_HTONS_VOL_HP+0x150>)
 800bb50:	eb00 0145 	add.w	r1, r0, r5, lsl #1
 800bb54:	469e      	mov	lr, r3
 800bb56:	9205      	str	r2, [sp, #20]
 800bb58:	9103      	str	r1, [sp, #12]
 800bb5a:	e9d0 3200 	ldrd	r3, r2, [r0]
 800bb5e:	3006      	adds	r0, #6
 800bb60:	ba5b      	rev16	r3, r3
 800bb62:	fa92 f992 	rev16.w	r9, r2
 800bb66:	b2dd      	uxtb	r5, r3
 800bb68:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800bb6c:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800bb70:	0e1b      	lsrs	r3, r3, #24
 800bb72:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 800bb76:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 800bb7a:	eb05 2696 	add.w	r6, r5, r6, lsr #10
 800bb7e:	f857 5022 	ldr.w	r5, [r7, r2, lsl #2]
 800bb82:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 800bb86:	fa5f f289 	uxtb.w	r2, r9
 800bb8a:	eb01 2196 	add.w	r1, r1, r6, lsr #10
 800bb8e:	f3c9 2907 	ubfx	r9, r9, #8, #8
 800bb92:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 800bb96:	f3c6 0809 	ubfx	r8, r6, #0, #10
 800bb9a:	eb05 2591 	add.w	r5, r5, r1, lsr #10
 800bb9e:	f857 6029 	ldr.w	r6, [r7, r9, lsl #2]
 800bba2:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800bba6:	eb03 2395 	add.w	r3, r3, r5, lsr #10
 800bbaa:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800bbae:	ea41 4808 	orr.w	r8, r1, r8, lsl #16
 800bbb2:	eb02 2293 	add.w	r2, r2, r3, lsr #10
 800bbb6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bbba:	eb06 2692 	add.w	r6, r6, r2, lsr #10
 800bbbe:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800bbc2:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
 800bbc6:	f3c6 0309 	ubfx	r3, r6, #0, #10
 800bbca:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 800bbce:	4b29      	ldr	r3, [pc, #164]	; (800bc74 <D48_1CH_HTONS_VOL_HP+0x154>)
 800bbd0:	fb28 c103 	smlad	r1, r8, r3, ip
 800bbd4:	4b28      	ldr	r3, [pc, #160]	; (800bc78 <D48_1CH_HTONS_VOL_HP+0x158>)
 800bbd6:	fb25 1103 	smlad	r1, r5, r3, r1
 800bbda:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800bbde:	fb22 1903 	smlad	r9, r2, r3, r1
 800bbe2:	4b26      	ldr	r3, [pc, #152]	; (800bc7c <D48_1CH_HTONS_VOL_HP+0x15c>)
 800bbe4:	fb28 ec03 	smlad	ip, r8, r3, lr
 800bbe8:	f04f 131b 	mov.w	r3, #1769499	; 0x1b001b
 800bbec:	fb25 cc03 	smlad	ip, r5, r3, ip
 800bbf0:	4b23      	ldr	r3, [pc, #140]	; (800bc80 <D48_1CH_HTONS_VOL_HP+0x160>)
 800bbf2:	fb22 cc03 	smlad	ip, r2, r3, ip
 800bbf6:	2101      	movs	r1, #1
 800bbf8:	fb28 f801 	smuad	r8, r8, r1
 800bbfc:	4b21      	ldr	r3, [pc, #132]	; (800bc84 <D48_1CH_HTONS_VOL_HP+0x164>)
 800bbfe:	fb25 8503 	smlad	r5, r5, r3, r8
 800bc02:	4b21      	ldr	r3, [pc, #132]	; (800bc88 <D48_1CH_HTONS_VOL_HP+0x168>)
 800bc04:	fb22 5e03 	smlad	lr, r2, r3, r5
 800bc08:	f5a9 4158 	sub.w	r1, r9, #55296	; 0xd800
 800bc0c:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 800bc10:	190a      	adds	r2, r1, r4
 800bc12:	9c02      	ldr	r4, [sp, #8]
 800bc14:	eba2 020a 	sub.w	r2, r2, sl
 800bc18:	468a      	mov	sl, r1
 800bc1a:	ea4f 79e2 	mov.w	r9, r2, asr #31
 800bc1e:	fba2 2304 	umull	r2, r3, r2, r4
 800bc22:	fb04 3309 	mla	r3, r4, r9, r3
 800bc26:	f112 4400 	adds.w	r4, r2, #2147483648	; 0x80000000
 800bc2a:	f04f 0900 	mov.w	r9, #0
 800bc2e:	f143 0500 	adc.w	r5, r3, #0
 800bc32:	9b01      	ldr	r3, [sp, #4]
 800bc34:	032a      	lsls	r2, r5, #12
 800bc36:	006c      	lsls	r4, r5, #1
 800bc38:	fbc3 8902 	smlal	r8, r9, r3, r2
 800bc3c:	ea4f 03a9 	mov.w	r3, r9, asr #2
 800bc40:	f303 030f 	ssat	r3, #16, r3
 800bc44:	f82b 3f02 	strh.w	r3, [fp, #2]!
 800bc48:	9b03      	ldr	r3, [sp, #12]
 800bc4a:	4283      	cmp	r3, r0
 800bc4c:	d185      	bne.n	800bb5a <D48_1CH_HTONS_VOL_HP+0x3a>
 800bc4e:	4673      	mov	r3, lr
 800bc50:	9a05      	ldr	r2, [sp, #20]
 800bc52:	6093      	str	r3, [r2, #8]
 800bc54:	2000      	movs	r0, #0
 800bc56:	9b04      	ldr	r3, [sp, #16]
 800bc58:	f8c2 c00c 	str.w	ip, [r2, #12]
 800bc5c:	61d6      	str	r6, [r2, #28]
 800bc5e:	6193      	str	r3, [r2, #24]
 800bc60:	e9c2 4104 	strd	r4, r1, [r2, #16]
 800bc64:	b007      	add	sp, #28
 800bc66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc6a:	4671      	mov	r1, lr
 800bc6c:	e7f1      	b.n	800bc52 <D48_1CH_HTONS_VOL_HP+0x132>
 800bc6e:	bf00      	nop
 800bc70:	24000000 	.word	0x24000000
 800bc74:	000f000a 	.word	0x000f000a
 800bc78:	00060003 	.word	0x00060003
 800bc7c:	00150019 	.word	0x00150019
 800bc80:	00190015 	.word	0x00190015
 800bc84:	00030006 	.word	0x00030006
 800bc88:	000a000f 	.word	0x000a000f

0800bc8c <D64_1CH_HTONS_VOL_HP>:
 800bc8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc90:	6b15      	ldr	r5, [r2, #48]	; 0x30
 800bc92:	b089      	sub	sp, #36	; 0x24
 800bc94:	6993      	ldr	r3, [r2, #24]
 800bc96:	4686      	mov	lr, r0
 800bc98:	9503      	str	r5, [sp, #12]
 800bc9a:	8cd0      	ldrh	r0, [r2, #38]	; 0x26
 800bc9c:	6a15      	ldr	r5, [r2, #32]
 800bc9e:	9306      	str	r3, [sp, #24]
 800bca0:	69d6      	ldr	r6, [r2, #28]
 800bca2:	9504      	str	r5, [sp, #16]
 800bca4:	e9d2 8404 	ldrd	r8, r4, [r2, #16]
 800bca8:	e9d2 3c02 	ldrd	r3, ip, [r2, #8]
 800bcac:	2800      	cmp	r0, #0
 800bcae:	f000 80a4 	beq.w	800bdfa <D64_1CH_HTONS_VOL_HP+0x16e>
 800bcb2:	460f      	mov	r7, r1
 800bcb4:	46f1      	mov	r9, lr
 800bcb6:	eb01 0140 	add.w	r1, r1, r0, lsl #1
 800bcba:	4d56      	ldr	r5, [pc, #344]	; (800be14 <D64_1CH_HTONS_VOL_HP+0x188>)
 800bcbc:	46a2      	mov	sl, r4
 800bcbe:	469e      	mov	lr, r3
 800bcc0:	9105      	str	r1, [sp, #20]
 800bcc2:	9207      	str	r2, [sp, #28]
 800bcc4:	f859 1b08 	ldr.w	r1, [r9], #8
 800bcc8:	f859 3c04 	ldr.w	r3, [r9, #-4]
 800bccc:	ba49      	rev16	r1, r1
 800bcce:	fa93 fb93 	rev16.w	fp, r3
 800bcd2:	b2cb      	uxtb	r3, r1
 800bcd4:	f3c1 2207 	ubfx	r2, r1, #8, #8
 800bcd8:	f3c1 4007 	ubfx	r0, r1, #16, #8
 800bcdc:	0e09      	lsrs	r1, r1, #24
 800bcde:	f855 4023 	ldr.w	r4, [r5, r3, lsl #2]
 800bce2:	fa5f f38b 	uxtb.w	r3, fp
 800bce6:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 800bcea:	4426      	add	r6, r4
 800bcec:	f855 4020 	ldr.w	r4, [r5, r0, lsl #2]
 800bcf0:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 800bcf4:	eb02 2296 	add.w	r2, r2, r6, lsr #10
 800bcf8:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
 800bcfc:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800bd00:	f3cb 2307 	ubfx	r3, fp, #8, #8
 800bd04:	eb04 2492 	add.w	r4, r4, r2, lsr #10
 800bd08:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800bd0c:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 800bd10:	eb01 2194 	add.w	r1, r1, r4, lsr #10
 800bd14:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800bd18:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 800bd1c:	f3cb 4607 	ubfx	r6, fp, #16, #8
 800bd20:	eb00 2091 	add.w	r0, r0, r1, lsr #10
 800bd24:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800bd28:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 800bd2c:	ea4f 6b1b 	mov.w	fp, fp, lsr #24
 800bd30:	eb03 2390 	add.w	r3, r3, r0, lsr #10
 800bd34:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800bd38:	f855 b02b 	ldr.w	fp, [r5, fp, lsl #2]
 800bd3c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800bd40:	eb06 2693 	add.w	r6, r6, r3, lsr #10
 800bd44:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bd48:	eb0b 2b96 	add.w	fp, fp, r6, lsr #10
 800bd4c:	f3c6 0409 	ubfx	r4, r6, #0, #10
 800bd50:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800bd54:	f3cb 0009 	ubfx	r0, fp, #0, #10
 800bd58:	ea4f 269b 	mov.w	r6, fp, lsr #10
 800bd5c:	ea40 4b04 	orr.w	fp, r0, r4, lsl #16
 800bd60:	482d      	ldr	r0, [pc, #180]	; (800be18 <D64_1CH_HTONS_VOL_HP+0x18c>)
 800bd62:	fb22 cc00 	smlad	ip, r2, r0, ip
 800bd66:	482d      	ldr	r0, [pc, #180]	; (800be1c <D64_1CH_HTONS_VOL_HP+0x190>)
 800bd68:	fb21 cc00 	smlad	ip, r1, r0, ip
 800bd6c:	482c      	ldr	r0, [pc, #176]	; (800be20 <D64_1CH_HTONS_VOL_HP+0x194>)
 800bd6e:	fb23 cc00 	smlad	ip, r3, r0, ip
 800bd72:	f44f 3480 	mov.w	r4, #65536	; 0x10000
 800bd76:	fb2b c404 	smlad	r4, fp, r4, ip
 800bd7a:	482a      	ldr	r0, [pc, #168]	; (800be24 <D64_1CH_HTONS_VOL_HP+0x198>)
 800bd7c:	fb22 ec00 	smlad	ip, r2, r0, lr
 800bd80:	fb2b cc10 	smladx	ip, fp, r0, ip
 800bd84:	4828      	ldr	r0, [pc, #160]	; (800be28 <D64_1CH_HTONS_VOL_HP+0x19c>)
 800bd86:	fb21 cc00 	smlad	ip, r1, r0, ip
 800bd8a:	fb23 cc10 	smladx	ip, r3, r0, ip
 800bd8e:	f04f 0e01 	mov.w	lr, #1
 800bd92:	fb22 f20e 	smuad	r2, r2, lr
 800bd96:	4825      	ldr	r0, [pc, #148]	; (800be2c <D64_1CH_HTONS_VOL_HP+0x1a0>)
 800bd98:	fb21 2100 	smlad	r1, r1, r0, r2
 800bd9c:	4a24      	ldr	r2, [pc, #144]	; (800be30 <D64_1CH_HTONS_VOL_HP+0x1a4>)
 800bd9e:	fb23 1302 	smlad	r3, r3, r2, r1
 800bda2:	4a24      	ldr	r2, [pc, #144]	; (800be34 <D64_1CH_HTONS_VOL_HP+0x1a8>)
 800bda4:	fb2b 3e02 	smlad	lr, fp, r2, r3
 800bda8:	f5a4 3400 	sub.w	r4, r4, #131072	; 0x20000
 800bdac:	eb04 0208 	add.w	r2, r4, r8
 800bdb0:	eba2 020a 	sub.w	r2, r2, sl
 800bdb4:	46a2      	mov	sl, r4
 800bdb6:	4610      	mov	r0, r2
 800bdb8:	17d1      	asrs	r1, r2, #31
 800bdba:	e9cd 0100 	strd	r0, r1, [sp]
 800bdbe:	9904      	ldr	r1, [sp, #16]
 800bdc0:	9801      	ldr	r0, [sp, #4]
 800bdc2:	fba2 2301 	umull	r2, r3, r2, r1
 800bdc6:	fb01 3300 	mla	r3, r1, r0, r3
 800bdca:	f112 4000 	adds.w	r0, r2, #2147483648	; 0x80000000
 800bdce:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800bdd2:	f143 0100 	adc.w	r1, r3, #0
 800bdd6:	9b03      	ldr	r3, [sp, #12]
 800bdd8:	02ca      	lsls	r2, r1, #11
 800bdda:	ea4f 0841 	mov.w	r8, r1, lsl #1
 800bdde:	2100      	movs	r1, #0
 800bde0:	fbc3 0102 	smlal	r0, r1, r3, r2
 800bde4:	108b      	asrs	r3, r1, #2
 800bde6:	f303 030f 	ssat	r3, #16, r3
 800bdea:	f827 3b02 	strh.w	r3, [r7], #2
 800bdee:	9b05      	ldr	r3, [sp, #20]
 800bdf0:	429f      	cmp	r7, r3
 800bdf2:	f47f af67 	bne.w	800bcc4 <D64_1CH_HTONS_VOL_HP+0x38>
 800bdf6:	4673      	mov	r3, lr
 800bdf8:	9a07      	ldr	r2, [sp, #28]
 800bdfa:	6093      	str	r3, [r2, #8]
 800bdfc:	2000      	movs	r0, #0
 800bdfe:	9b06      	ldr	r3, [sp, #24]
 800be00:	f8c2 c00c 	str.w	ip, [r2, #12]
 800be04:	61d6      	str	r6, [r2, #28]
 800be06:	6193      	str	r3, [r2, #24]
 800be08:	e9c2 8404 	strd	r8, r4, [r2, #16]
 800be0c:	b009      	add	sp, #36	; 0x24
 800be0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be12:	bf00      	nop
 800be14:	24000000 	.word	0x24000000
 800be18:	001c0015 	.word	0x001c0015
 800be1c:	000f000a 	.word	0x000f000a
 800be20:	00060003 	.word	0x00060003
 800be24:	0024002a 	.word	0x0024002a
 800be28:	002e0030 	.word	0x002e0030
 800be2c:	00030006 	.word	0x00030006
 800be30:	000a000f 	.word	0x000a000f
 800be34:	0015001c 	.word	0x0015001c

0800be38 <D80_1CH_HTONS_VOL_HP>:
 800be38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be3c:	6913      	ldr	r3, [r2, #16]
 800be3e:	b089      	sub	sp, #36	; 0x24
 800be40:	6b16      	ldr	r6, [r2, #48]	; 0x30
 800be42:	9301      	str	r3, [sp, #4]
 800be44:	9603      	str	r6, [sp, #12]
 800be46:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 800be48:	6a16      	ldr	r6, [r2, #32]
 800be4a:	e9d2 5305 	ldrd	r5, r3, [r2, #20]
 800be4e:	e9d2 7c02 	ldrd	r7, ip, [r2, #8]
 800be52:	9306      	str	r3, [sp, #24]
 800be54:	9604      	str	r6, [sp, #16]
 800be56:	69d3      	ldr	r3, [r2, #28]
 800be58:	2c00      	cmp	r4, #0
 800be5a:	f000 80ce 	beq.w	800bffa <D80_1CH_HTONS_VOL_HP+0x1c2>
 800be5e:	3902      	subs	r1, #2
 800be60:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 800be64:	4e66      	ldr	r6, [pc, #408]	; (800c000 <D80_1CH_HTONS_VOL_HP+0x1c8>)
 800be66:	469e      	mov	lr, r3
 800be68:	9102      	str	r1, [sp, #8]
 800be6a:	46aa      	mov	sl, r5
 800be6c:	eb00 0144 	add.w	r1, r0, r4, lsl #1
 800be70:	9207      	str	r2, [sp, #28]
 800be72:	9105      	str	r1, [sp, #20]
 800be74:	6883      	ldr	r3, [r0, #8]
 800be76:	e9d0 4200 	ldrd	r4, r2, [r0]
 800be7a:	300a      	adds	r0, #10
 800be7c:	ba64      	rev16	r4, r4
 800be7e:	ba52      	rev16	r2, r2
 800be80:	fa93 fb93 	rev16.w	fp, r3
 800be84:	b2e5      	uxtb	r5, r4
 800be86:	f3c4 2307 	ubfx	r3, r4, #8, #8
 800be8a:	f3c4 4107 	ubfx	r1, r4, #16, #8
 800be8e:	0e24      	lsrs	r4, r4, #24
 800be90:	f856 8025 	ldr.w	r8, [r6, r5, lsl #2]
 800be94:	b2d5      	uxtb	r5, r2
 800be96:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 800be9a:	44c6      	add	lr, r8
 800be9c:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 800bea0:	f856 4024 	ldr.w	r4, [r6, r4, lsl #2]
 800bea4:	eb03 239e 	add.w	r3, r3, lr, lsr #10
 800bea8:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
 800beac:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800beb0:	eb01 2993 	add.w	r9, r1, r3, lsr #10
 800beb4:	f3c2 2107 	ubfx	r1, r2, #8, #8
 800beb8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bebc:	eb04 2499 	add.w	r4, r4, r9, lsr #10
 800bec0:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 800bec4:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 800bec8:	f3cb 2e07 	ubfx	lr, fp, #8, #8
 800becc:	eb05 2894 	add.w	r8, r5, r4, lsr #10
 800bed0:	f3c2 4507 	ubfx	r5, r2, #16, #8
 800bed4:	0e12      	lsrs	r2, r2, #24
 800bed6:	f856 e02e 	ldr.w	lr, [r6, lr, lsl #2]
 800beda:	eb01 2198 	add.w	r1, r1, r8, lsr #10
 800bede:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
 800bee2:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
 800bee6:	fa5f fb8b 	uxtb.w	fp, fp
 800beea:	eb05 2591 	add.w	r5, r5, r1, lsr #10
 800beee:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800bef2:	f856 b02b 	ldr.w	fp, [r6, fp, lsl #2]
 800bef6:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800befa:	eb02 2295 	add.w	r2, r2, r5, lsr #10
 800befe:	f3c9 0909 	ubfx	r9, r9, #0, #10
 800bf02:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800bf06:	ea41 4808 	orr.w	r8, r1, r8, lsl #16
 800bf0a:	eb0b 2b92 	add.w	fp, fp, r2, lsr #10
 800bf0e:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800bf12:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800bf16:	eb0e 2e9b 	add.w	lr, lr, fp, lsr #10
 800bf1a:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 800bf1e:	ea44 4409 	orr.w	r4, r4, r9, lsl #16
 800bf22:	f3ce 0109 	ubfx	r1, lr, #0, #10
 800bf26:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
 800bf2a:	ea4f 2e9e 	mov.w	lr, lr, lsr #10
 800bf2e:	ea41 4b0b 	orr.w	fp, r1, fp, lsl #16
 800bf32:	4934      	ldr	r1, [pc, #208]	; (800c004 <D80_1CH_HTONS_VOL_HP+0x1cc>)
 800bf34:	fb23 cc01 	smlad	ip, r3, r1, ip
 800bf38:	4933      	ldr	r1, [pc, #204]	; (800c008 <D80_1CH_HTONS_VOL_HP+0x1d0>)
 800bf3a:	fb24 cc01 	smlad	ip, r4, r1, ip
 800bf3e:	4933      	ldr	r1, [pc, #204]	; (800c00c <D80_1CH_HTONS_VOL_HP+0x1d4>)
 800bf40:	fb28 cc01 	smlad	ip, r8, r1, ip
 800bf44:	4932      	ldr	r1, [pc, #200]	; (800c010 <D80_1CH_HTONS_VOL_HP+0x1d8>)
 800bf46:	fb22 cc01 	smlad	ip, r2, r1, ip
 800bf4a:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800bf4e:	fb2b c901 	smlad	r9, fp, r1, ip
 800bf52:	4930      	ldr	r1, [pc, #192]	; (800c014 <D80_1CH_HTONS_VOL_HP+0x1dc>)
 800bf54:	fb23 7701 	smlad	r7, r3, r1, r7
 800bf58:	492f      	ldr	r1, [pc, #188]	; (800c018 <D80_1CH_HTONS_VOL_HP+0x1e0>)
 800bf5a:	fb24 7701 	smlad	r7, r4, r1, r7
 800bf5e:	f04f 1c4b 	mov.w	ip, #4915275	; 0x4b004b
 800bf62:	fb28 7c0c 	smlad	ip, r8, ip, r7
 800bf66:	492d      	ldr	r1, [pc, #180]	; (800c01c <D80_1CH_HTONS_VOL_HP+0x1e4>)
 800bf68:	fb22 cc01 	smlad	ip, r2, r1, ip
 800bf6c:	492c      	ldr	r1, [pc, #176]	; (800c020 <D80_1CH_HTONS_VOL_HP+0x1e8>)
 800bf6e:	fb2b cc01 	smlad	ip, fp, r1, ip
 800bf72:	2101      	movs	r1, #1
 800bf74:	fb23 f301 	smuad	r3, r3, r1
 800bf78:	492a      	ldr	r1, [pc, #168]	; (800c024 <D80_1CH_HTONS_VOL_HP+0x1ec>)
 800bf7a:	fb24 3401 	smlad	r4, r4, r1, r3
 800bf7e:	492a      	ldr	r1, [pc, #168]	; (800c028 <D80_1CH_HTONS_VOL_HP+0x1f0>)
 800bf80:	fb28 4101 	smlad	r1, r8, r1, r4
 800bf84:	4f29      	ldr	r7, [pc, #164]	; (800c02c <D80_1CH_HTONS_VOL_HP+0x1f4>)
 800bf86:	fb22 1207 	smlad	r2, r2, r7, r1
 800bf8a:	4f29      	ldr	r7, [pc, #164]	; (800c030 <D80_1CH_HTONS_VOL_HP+0x1f8>)
 800bf8c:	fb2b 2707 	smlad	r7, fp, r7, r2
 800bf90:	f5a9 317a 	sub.w	r1, r9, #256000	; 0x3e800
 800bf94:	9b01      	ldr	r3, [sp, #4]
 800bf96:	9c04      	ldr	r4, [sp, #16]
 800bf98:	440b      	add	r3, r1
 800bf9a:	eba3 020a 	sub.w	r2, r3, sl
 800bf9e:	468a      	mov	sl, r1
 800bfa0:	ea4f 79e2 	mov.w	r9, r2, asr #31
 800bfa4:	fba2 2304 	umull	r2, r3, r2, r4
 800bfa8:	fb04 3309 	mla	r3, r4, r9, r3
 800bfac:	f112 4400 	adds.w	r4, r2, #2147483648	; 0x80000000
 800bfb0:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800bfb4:	f143 0500 	adc.w	r5, r3, #0
 800bfb8:	006b      	lsls	r3, r5, #1
 800bfba:	02aa      	lsls	r2, r5, #10
 800bfbc:	2500      	movs	r5, #0
 800bfbe:	9301      	str	r3, [sp, #4]
 800bfc0:	9b03      	ldr	r3, [sp, #12]
 800bfc2:	fbc3 4502 	smlal	r4, r5, r3, r2
 800bfc6:	9a02      	ldr	r2, [sp, #8]
 800bfc8:	10ab      	asrs	r3, r5, #2
 800bfca:	f303 030f 	ssat	r3, #16, r3
 800bfce:	f822 3f02 	strh.w	r3, [r2, #2]!
 800bfd2:	9b05      	ldr	r3, [sp, #20]
 800bfd4:	9202      	str	r2, [sp, #8]
 800bfd6:	4298      	cmp	r0, r3
 800bfd8:	f47f af4c 	bne.w	800be74 <D80_1CH_HTONS_VOL_HP+0x3c>
 800bfdc:	4673      	mov	r3, lr
 800bfde:	9a07      	ldr	r2, [sp, #28]
 800bfe0:	61d3      	str	r3, [r2, #28]
 800bfe2:	2000      	movs	r0, #0
 800bfe4:	9b01      	ldr	r3, [sp, #4]
 800bfe6:	6097      	str	r7, [r2, #8]
 800bfe8:	f8c2 c00c 	str.w	ip, [r2, #12]
 800bfec:	e9c2 3104 	strd	r3, r1, [r2, #16]
 800bff0:	9b06      	ldr	r3, [sp, #24]
 800bff2:	6193      	str	r3, [r2, #24]
 800bff4:	b009      	add	sp, #36	; 0x24
 800bff6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bffa:	4629      	mov	r1, r5
 800bffc:	e7f0      	b.n	800bfe0 <D80_1CH_HTONS_VOL_HP+0x1a8>
 800bffe:	bf00      	nop
 800c000:	24000000 	.word	0x24000000
 800c004:	002d0024 	.word	0x002d0024
 800c008:	001c0015 	.word	0x001c0015
 800c00c:	000f000a 	.word	0x000f000a
 800c010:	00060003 	.word	0x00060003
 800c014:	0037003f 	.word	0x0037003f
 800c018:	00450049 	.word	0x00450049
 800c01c:	00490045 	.word	0x00490045
 800c020:	003f0037 	.word	0x003f0037
 800c024:	00030006 	.word	0x00030006
 800c028:	000a000f 	.word	0x000a000f
 800c02c:	0015001c 	.word	0x0015001c
 800c030:	0024002d 	.word	0x0024002d

0800c034 <D128_1CH_HTONS_VOL_HP>:
 800c034:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c038:	6914      	ldr	r4, [r2, #16]
 800c03a:	b08d      	sub	sp, #52	; 0x34
 800c03c:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 800c03e:	9404      	str	r4, [sp, #16]
 800c040:	6954      	ldr	r4, [r2, #20]
 800c042:	920b      	str	r2, [sp, #44]	; 0x2c
 800c044:	9405      	str	r4, [sp, #20]
 800c046:	6994      	ldr	r4, [r2, #24]
 800c048:	f8d2 c01c 	ldr.w	ip, [r2, #28]
 800c04c:	940a      	str	r4, [sp, #40]	; 0x28
 800c04e:	6894      	ldr	r4, [r2, #8]
 800c050:	9403      	str	r4, [sp, #12]
 800c052:	68d4      	ldr	r4, [r2, #12]
 800c054:	9402      	str	r4, [sp, #8]
 800c056:	6b14      	ldr	r4, [r2, #48]	; 0x30
 800c058:	6a12      	ldr	r2, [r2, #32]
 800c05a:	9407      	str	r4, [sp, #28]
 800c05c:	9208      	str	r2, [sp, #32]
 800c05e:	2b00      	cmp	r3, #0
 800c060:	f000 812e 	beq.w	800c2c0 <D128_1CH_HTONS_VOL_HP+0x28c>
 800c064:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 800c068:	f100 0b10 	add.w	fp, r0, #16
 800c06c:	f8df 9290 	ldr.w	r9, [pc, #656]	; 800c300 <D128_1CH_HTONS_VOL_HP+0x2cc>
 800c070:	9106      	str	r1, [sp, #24]
 800c072:	9309      	str	r3, [sp, #36]	; 0x24
 800c074:	e95b 0204 	ldrd	r0, r2, [fp, #-16]
 800c078:	e95b 3602 	ldrd	r3, r6, [fp, #-8]
 800c07c:	ba40      	rev16	r0, r0
 800c07e:	ba52      	rev16	r2, r2
 800c080:	ba5b      	rev16	r3, r3
 800c082:	ba76      	rev16	r6, r6
 800c084:	b2c5      	uxtb	r5, r0
 800c086:	f3c0 2407 	ubfx	r4, r0, #8, #8
 800c08a:	f3c0 4107 	ubfx	r1, r0, #16, #8
 800c08e:	0e00      	lsrs	r0, r0, #24
 800c090:	f859 7025 	ldr.w	r7, [r9, r5, lsl #2]
 800c094:	b2d5      	uxtb	r5, r2
 800c096:	f859 e024 	ldr.w	lr, [r9, r4, lsl #2]
 800c09a:	f3c2 2407 	ubfx	r4, r2, #8, #8
 800c09e:	44bc      	add	ip, r7
 800c0a0:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800c0a4:	f859 7020 	ldr.w	r7, [r9, r0, lsl #2]
 800c0a8:	f3c2 4007 	ubfx	r0, r2, #16, #8
 800c0ac:	eb0e 2e9c 	add.w	lr, lr, ip, lsr #10
 800c0b0:	f859 a025 	ldr.w	sl, [r9, r5, lsl #2]
 800c0b4:	f859 5024 	ldr.w	r5, [r9, r4, lsl #2]
 800c0b8:	0e12      	lsrs	r2, r2, #24
 800c0ba:	eb01 219e 	add.w	r1, r1, lr, lsr #10
 800c0be:	f859 0020 	ldr.w	r0, [r9, r0, lsl #2]
 800c0c2:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 800c0c6:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800c0ca:	eb07 2791 	add.w	r7, r7, r1, lsr #10
 800c0ce:	f859 4022 	ldr.w	r4, [r9, r2, lsl #2]
 800c0d2:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800c0d6:	b2da      	uxtb	r2, r3
 800c0d8:	eb0a 2a97 	add.w	sl, sl, r7, lsr #10
 800c0dc:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800c0e0:	ea4e 4e0c 	orr.w	lr, lr, ip, lsl #16
 800c0e4:	f859 2022 	ldr.w	r2, [r9, r2, lsl #2]
 800c0e8:	eb05 259a 	add.w	r5, r5, sl, lsr #10
 800c0ec:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 800c0f0:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800c0f4:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800c0f8:	eb00 2c95 	add.w	ip, r0, r5, lsr #10
 800c0fc:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800c100:	f859 8021 	ldr.w	r8, [r9, r1, lsl #2]
 800c104:	f3c3 4107 	ubfx	r1, r3, #16, #8
 800c108:	eb04 249c 	add.w	r4, r4, ip, lsr #10
 800c10c:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 800c110:	f859 0021 	ldr.w	r0, [r9, r1, lsl #2]
 800c114:	0e1b      	lsrs	r3, r3, #24
 800c116:	eb02 2294 	add.w	r2, r2, r4, lsr #10
 800c11a:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800c11e:	f859 1023 	ldr.w	r1, [r9, r3, lsl #2]
 800c122:	ea45 450a 	orr.w	r5, r5, sl, lsl #16
 800c126:	eb08 2892 	add.w	r8, r8, r2, lsr #10
 800c12a:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800c12e:	b2f3      	uxtb	r3, r6
 800c130:	eb00 2a98 	add.w	sl, r0, r8, lsr #10
 800c134:	f3c8 0009 	ubfx	r0, r8, #0, #10
 800c138:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800c13c:	ea44 440c 	orr.w	r4, r4, ip, lsl #16
 800c140:	eb01 219a 	add.w	r1, r1, sl, lsr #10
 800c144:	f3c6 2c07 	ubfx	ip, r6, #8, #8
 800c148:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 800c14c:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 800c150:	eb03 2891 	add.w	r8, r3, r1, lsr #10
 800c154:	f859 202c 	ldr.w	r2, [r9, ip, lsl #2]
 800c158:	f3c6 4c07 	ubfx	ip, r6, #16, #8
 800c15c:	0e36      	lsrs	r6, r6, #24
 800c15e:	eb02 2298 	add.w	r2, r2, r8, lsr #10
 800c162:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800c166:	f859 302c 	ldr.w	r3, [r9, ip, lsl #2]
 800c16a:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800c16e:	f859 c026 	ldr.w	ip, [r9, r6, lsl #2]
 800c172:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800c176:	eb03 2692 	add.w	r6, r3, r2, lsr #10
 800c17a:	f3c2 0309 	ubfx	r3, r2, #0, #10
 800c17e:	9101      	str	r1, [sp, #4]
 800c180:	ea43 4208 	orr.w	r2, r3, r8, lsl #16
 800c184:	9b02      	ldr	r3, [sp, #8]
 800c186:	eb0c 2c96 	add.w	ip, ip, r6, lsr #10
 800c18a:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800c18e:	4611      	mov	r1, r2
 800c190:	f3cc 0209 	ubfx	r2, ip, #0, #10
 800c194:	ea4f 2c9c 	mov.w	ip, ip, lsr #10
 800c198:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
 800c19c:	4a49      	ldr	r2, [pc, #292]	; (800c2c4 <D128_1CH_HTONS_VOL_HP+0x290>)
 800c19e:	fb2e 3202 	smlad	r2, lr, r2, r3
 800c1a2:	4b49      	ldr	r3, [pc, #292]	; (800c2c8 <D128_1CH_HTONS_VOL_HP+0x294>)
 800c1a4:	fb27 2203 	smlad	r2, r7, r3, r2
 800c1a8:	4b48      	ldr	r3, [pc, #288]	; (800c2cc <D128_1CH_HTONS_VOL_HP+0x298>)
 800c1aa:	fb25 2203 	smlad	r2, r5, r3, r2
 800c1ae:	4b48      	ldr	r3, [pc, #288]	; (800c2d0 <D128_1CH_HTONS_VOL_HP+0x29c>)
 800c1b0:	fb24 2203 	smlad	r2, r4, r3, r2
 800c1b4:	4b47      	ldr	r3, [pc, #284]	; (800c2d4 <D128_1CH_HTONS_VOL_HP+0x2a0>)
 800c1b6:	fb20 2803 	smlad	r8, r0, r3, r2
 800c1ba:	4b47      	ldr	r3, [pc, #284]	; (800c2d8 <D128_1CH_HTONS_VOL_HP+0x2a4>)
 800c1bc:	9a01      	ldr	r2, [sp, #4]
 800c1be:	fb22 8203 	smlad	r2, r2, r3, r8
 800c1c2:	4b46      	ldr	r3, [pc, #280]	; (800c2dc <D128_1CH_HTONS_VOL_HP+0x2a8>)
 800c1c4:	9102      	str	r1, [sp, #8]
 800c1c6:	fb21 2203 	smlad	r2, r1, r3, r2
 800c1ca:	f44f 3880 	mov.w	r8, #65536	; 0x10000
 800c1ce:	fb26 2308 	smlad	r3, r6, r8, r2
 800c1d2:	4619      	mov	r1, r3
 800c1d4:	9a03      	ldr	r2, [sp, #12]
 800c1d6:	4b42      	ldr	r3, [pc, #264]	; (800c2e0 <D128_1CH_HTONS_VOL_HP+0x2ac>)
 800c1d8:	fb2e 2803 	smlad	r8, lr, r3, r2
 800c1dc:	4b41      	ldr	r3, [pc, #260]	; (800c2e4 <D128_1CH_HTONS_VOL_HP+0x2b0>)
 800c1de:	fb27 8a03 	smlad	sl, r7, r3, r8
 800c1e2:	f8df 8120 	ldr.w	r8, [pc, #288]	; 800c304 <D128_1CH_HTONS_VOL_HP+0x2d0>
 800c1e6:	fb25 a808 	smlad	r8, r5, r8, sl
 800c1ea:	f8df a11c 	ldr.w	sl, [pc, #284]	; 800c308 <D128_1CH_HTONS_VOL_HP+0x2d4>
 800c1ee:	fb24 880a 	smlad	r8, r4, sl, r8
 800c1f2:	f8df a118 	ldr.w	sl, [pc, #280]	; 800c30c <D128_1CH_HTONS_VOL_HP+0x2d8>
 800c1f6:	fb20 8a0a 	smlad	sl, r0, sl, r8
 800c1fa:	f8df 8114 	ldr.w	r8, [pc, #276]	; 800c310 <D128_1CH_HTONS_VOL_HP+0x2dc>
 800c1fe:	9b01      	ldr	r3, [sp, #4]
 800c200:	fb23 aa08 	smlad	sl, r3, r8, sl
 800c204:	f8df 810c 	ldr.w	r8, [pc, #268]	; 800c314 <D128_1CH_HTONS_VOL_HP+0x2e0>
 800c208:	9a02      	ldr	r2, [sp, #8]
 800c20a:	fb22 a808 	smlad	r8, r2, r8, sl
 800c20e:	f8df a108 	ldr.w	sl, [pc, #264]	; 800c318 <D128_1CH_HTONS_VOL_HP+0x2e4>
 800c212:	fb26 830a 	smlad	r3, r6, sl, r8
 800c216:	f04f 0801 	mov.w	r8, #1
 800c21a:	9302      	str	r3, [sp, #8]
 800c21c:	fb2e fe08 	smuad	lr, lr, r8
 800c220:	f8df 80f8 	ldr.w	r8, [pc, #248]	; 800c31c <D128_1CH_HTONS_VOL_HP+0x2e8>
 800c224:	fb27 ee08 	smlad	lr, r7, r8, lr
 800c228:	4f2f      	ldr	r7, [pc, #188]	; (800c2e8 <D128_1CH_HTONS_VOL_HP+0x2b4>)
 800c22a:	fb25 ee07 	smlad	lr, r5, r7, lr
 800c22e:	4f2f      	ldr	r7, [pc, #188]	; (800c2ec <D128_1CH_HTONS_VOL_HP+0x2b8>)
 800c230:	fb24 ee07 	smlad	lr, r4, r7, lr
 800c234:	4f2e      	ldr	r7, [pc, #184]	; (800c2f0 <D128_1CH_HTONS_VOL_HP+0x2bc>)
 800c236:	fb20 ee07 	smlad	lr, r0, r7, lr
 800c23a:	4f2e      	ldr	r7, [pc, #184]	; (800c2f4 <D128_1CH_HTONS_VOL_HP+0x2c0>)
 800c23c:	9b01      	ldr	r3, [sp, #4]
 800c23e:	fb23 ee07 	smlad	lr, r3, r7, lr
 800c242:	4f2d      	ldr	r7, [pc, #180]	; (800c2f8 <D128_1CH_HTONS_VOL_HP+0x2c4>)
 800c244:	fb22 e707 	smlad	r7, r2, r7, lr
 800c248:	4b2c      	ldr	r3, [pc, #176]	; (800c2fc <D128_1CH_HTONS_VOL_HP+0x2c8>)
 800c24a:	fb26 7303 	smlad	r3, r6, r3, r7
 800c24e:	f5a1 1680 	sub.w	r6, r1, #1048576	; 0x100000
 800c252:	9303      	str	r3, [sp, #12]
 800c254:	9b04      	ldr	r3, [sp, #16]
 800c256:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800c25a:	9f08      	ldr	r7, [sp, #32]
 800c25c:	2100      	movs	r1, #0
 800c25e:	4433      	add	r3, r6
 800c260:	f10b 0b10 	add.w	fp, fp, #16
 800c264:	461a      	mov	r2, r3
 800c266:	9b05      	ldr	r3, [sp, #20]
 800c268:	9605      	str	r6, [sp, #20]
 800c26a:	1ad2      	subs	r2, r2, r3
 800c26c:	17d5      	asrs	r5, r2, #31
 800c26e:	fba2 2307 	umull	r2, r3, r2, r7
 800c272:	1814      	adds	r4, r2, r0
 800c274:	fb07 3305 	mla	r3, r7, r5, r3
 800c278:	eb43 0501 	adc.w	r5, r3, r1
 800c27c:	006b      	lsls	r3, r5, #1
 800c27e:	022a      	lsls	r2, r5, #8
 800c280:	9304      	str	r3, [sp, #16]
 800c282:	9b07      	ldr	r3, [sp, #28]
 800c284:	fbc3 0102 	smlal	r0, r1, r3, r2
 800c288:	9a06      	ldr	r2, [sp, #24]
 800c28a:	108b      	asrs	r3, r1, #2
 800c28c:	f303 030f 	ssat	r3, #16, r3
 800c290:	f822 3b02 	strh.w	r3, [r2], #2
 800c294:	4613      	mov	r3, r2
 800c296:	9206      	str	r2, [sp, #24]
 800c298:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c29a:	4293      	cmp	r3, r2
 800c29c:	f47f aeea 	bne.w	800c074 <D128_1CH_HTONS_VOL_HP+0x40>
 800c2a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c2a2:	2000      	movs	r0, #0
 800c2a4:	9903      	ldr	r1, [sp, #12]
 800c2a6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c2a8:	6099      	str	r1, [r3, #8]
 800c2aa:	9902      	ldr	r1, [sp, #8]
 800c2ac:	f8c3 c01c 	str.w	ip, [r3, #28]
 800c2b0:	60d9      	str	r1, [r3, #12]
 800c2b2:	9904      	ldr	r1, [sp, #16]
 800c2b4:	619a      	str	r2, [r3, #24]
 800c2b6:	e9c3 1604 	strd	r1, r6, [r3, #16]
 800c2ba:	b00d      	add	sp, #52	; 0x34
 800c2bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2c0:	9e05      	ldr	r6, [sp, #20]
 800c2c2:	e7ed      	b.n	800c2a0 <D128_1CH_HTONS_VOL_HP+0x26c>
 800c2c4:	00780069 	.word	0x00780069
 800c2c8:	005b004e 	.word	0x005b004e
 800c2cc:	00420037 	.word	0x00420037
 800c2d0:	002d0024 	.word	0x002d0024
 800c2d4:	001c0015 	.word	0x001c0015
 800c2d8:	000f000a 	.word	0x000f000a
 800c2dc:	00060003 	.word	0x00060003
 800c2e0:	00880096 	.word	0x00880096
 800c2e4:	00a200ac 	.word	0x00a200ac
 800c2e8:	000a000f 	.word	0x000a000f
 800c2ec:	0015001c 	.word	0x0015001c
 800c2f0:	0024002d 	.word	0x0024002d
 800c2f4:	00370042 	.word	0x00370042
 800c2f8:	004e005b 	.word	0x004e005b
 800c2fc:	00690078 	.word	0x00690078
 800c300:	24000000 	.word	0x24000000
 800c304:	00b400ba 	.word	0x00b400ba
 800c308:	00be00c0 	.word	0x00be00c0
 800c30c:	00c000be 	.word	0x00c000be
 800c310:	00ba00b4 	.word	0x00ba00b4
 800c314:	00ac00a2 	.word	0x00ac00a2
 800c318:	00960088 	.word	0x00960088
 800c31c:	00030006 	.word	0x00030006

0800c320 <PDM_Filter_Init>:
 800c320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c322:	2240      	movs	r2, #64	; 0x40
 800c324:	2100      	movs	r1, #0
 800c326:	4604      	mov	r4, r0
 800c328:	300c      	adds	r0, #12
 800c32a:	f000 fa07 	bl	800c73c <memset>
 800c32e:	4a56      	ldr	r2, [pc, #344]	; (800c488 <PDM_Filter_Init+0x168>)
 800c330:	4856      	ldr	r0, [pc, #344]	; (800c48c <PDM_Filter_Init+0x16c>)
 800c332:	f64f 71f0 	movw	r1, #65520	; 0xfff0
 800c336:	6813      	ldr	r3, [r2, #0]
 800c338:	f24c 2540 	movw	r5, #49728	; 0xc240
 800c33c:	f023 0301 	bic.w	r3, r3, #1
 800c340:	6013      	str	r3, [r2, #0]
 800c342:	6803      	ldr	r3, [r0, #0]
 800c344:	400b      	ands	r3, r1
 800c346:	42ab      	cmp	r3, r5
 800c348:	d040      	beq.n	800c3cc <PDM_Filter_Init+0xac>
 800c34a:	6803      	ldr	r3, [r0, #0]
 800c34c:	f24c 2270 	movw	r2, #49776	; 0xc270
 800c350:	4019      	ands	r1, r3
 800c352:	4291      	cmp	r1, r2
 800c354:	d03a      	beq.n	800c3cc <PDM_Filter_Init+0xac>
 800c356:	4b4e      	ldr	r3, [pc, #312]	; (800c490 <PDM_Filter_Init+0x170>)
 800c358:	2101      	movs	r1, #1
 800c35a:	461a      	mov	r2, r3
 800c35c:	6019      	str	r1, [r3, #0]
 800c35e:	6813      	ldr	r3, [r2, #0]
 800c360:	2b00      	cmp	r3, #0
 800c362:	d1fc      	bne.n	800c35e <PDM_Filter_Init+0x3e>
 800c364:	4b4b      	ldr	r3, [pc, #300]	; (800c494 <PDM_Filter_Init+0x174>)
 800c366:	494c      	ldr	r1, [pc, #304]	; (800c498 <PDM_Filter_Init+0x178>)
 800c368:	4a4c      	ldr	r2, [pc, #304]	; (800c49c <PDM_Filter_Init+0x17c>)
 800c36a:	6019      	str	r1, [r3, #0]
 800c36c:	681b      	ldr	r3, [r3, #0]
 800c36e:	8820      	ldrh	r0, [r4, #0]
 800c370:	4293      	cmp	r3, r2
 800c372:	8961      	ldrh	r1, [r4, #10]
 800c374:	f04f 0300 	mov.w	r3, #0
 800c378:	8922      	ldrh	r2, [r4, #8]
 800c37a:	bf14      	ite	ne
 800c37c:	2500      	movne	r5, #0
 800c37e:	4d47      	ldreq	r5, [pc, #284]	; (800c49c <PDM_Filter_Init+0x17c>)
 800c380:	2801      	cmp	r0, #1
 800c382:	61a3      	str	r3, [r4, #24]
 800c384:	6465      	str	r5, [r4, #68]	; 0x44
 800c386:	60e3      	str	r3, [r4, #12]
 800c388:	6263      	str	r3, [r4, #36]	; 0x24
 800c38a:	6423      	str	r3, [r4, #64]	; 0x40
 800c38c:	86a1      	strh	r1, [r4, #52]	; 0x34
 800c38e:	86e2      	strh	r2, [r4, #54]	; 0x36
 800c390:	e9c4 3304 	strd	r3, r3, [r4, #16]
 800c394:	e9c4 3307 	strd	r3, r3, [r4, #28]
 800c398:	d936      	bls.n	800c408 <PDM_Filter_Init+0xe8>
 800c39a:	2003      	movs	r0, #3
 800c39c:	2302      	movs	r3, #2
 800c39e:	8862      	ldrh	r2, [r4, #2]
 800c3a0:	2a01      	cmp	r2, #1
 800c3a2:	d92e      	bls.n	800c402 <PDM_Filter_Init+0xe2>
 800c3a4:	2140      	movs	r1, #64	; 0x40
 800c3a6:	2300      	movs	r3, #0
 800c3a8:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800c3aa:	f1b2 1f01 	cmp.w	r2, #65537	; 0x10001
 800c3ae:	d101      	bne.n	800c3b4 <PDM_Filter_Init+0x94>
 800c3b0:	460b      	mov	r3, r1
 800c3b2:	6421      	str	r1, [r4, #64]	; 0x40
 800c3b4:	6862      	ldr	r2, [r4, #4]
 800c3b6:	b11a      	cbz	r2, 800c3c0 <PDM_Filter_Init+0xa0>
 800c3b8:	f043 0310 	orr.w	r3, r3, #16
 800c3bc:	62e2      	str	r2, [r4, #44]	; 0x2c
 800c3be:	6423      	str	r3, [r4, #64]	; 0x40
 800c3c0:	2200      	movs	r2, #0
 800c3c2:	8722      	strh	r2, [r4, #56]	; 0x38
 800c3c4:	b908      	cbnz	r0, 800c3ca <PDM_Filter_Init+0xaa>
 800c3c6:	3380      	adds	r3, #128	; 0x80
 800c3c8:	6423      	str	r3, [r4, #64]	; 0x40
 800c3ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c3cc:	4b34      	ldr	r3, [pc, #208]	; (800c4a0 <PDM_Filter_Init+0x180>)
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	d1c0      	bne.n	800c356 <PDM_Filter_Init+0x36>
 800c3d4:	4a33      	ldr	r2, [pc, #204]	; (800c4a4 <PDM_Filter_Init+0x184>)
 800c3d6:	6813      	ldr	r3, [r2, #0]
 800c3d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c3dc:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800c3e0:	d006      	beq.n	800c3f0 <PDM_Filter_Init+0xd0>
 800c3e2:	6813      	ldr	r3, [r2, #0]
 800c3e4:	f240 4283 	movw	r2, #1155	; 0x483
 800c3e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c3ec:	4293      	cmp	r3, r2
 800c3ee:	d1b2      	bne.n	800c356 <PDM_Filter_Init+0x36>
 800c3f0:	4b2d      	ldr	r3, [pc, #180]	; (800c4a8 <PDM_Filter_Init+0x188>)
 800c3f2:	2101      	movs	r1, #1
 800c3f4:	461a      	mov	r2, r3
 800c3f6:	6019      	str	r1, [r3, #0]
 800c3f8:	6813      	ldr	r3, [r2, #0]
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	d1fc      	bne.n	800c3f8 <PDM_Filter_Init+0xd8>
 800c3fe:	4b2b      	ldr	r3, [pc, #172]	; (800c4ac <PDM_Filter_Init+0x18c>)
 800c400:	e7b1      	b.n	800c366 <PDM_Filter_Init+0x46>
 800c402:	d03a      	beq.n	800c47a <PDM_Filter_Init+0x15a>
 800c404:	4618      	mov	r0, r3
 800c406:	e7cd      	b.n	800c3a4 <PDM_Filter_Init+0x84>
 800c408:	4d29      	ldr	r5, [pc, #164]	; (800c4b0 <PDM_Filter_Init+0x190>)
 800c40a:	782a      	ldrb	r2, [r5, #0]
 800c40c:	d01b      	beq.n	800c446 <PDM_Filter_Init+0x126>
 800c40e:	2a01      	cmp	r2, #1
 800c410:	d001      	beq.n	800c416 <PDM_Filter_Init+0xf6>
 800c412:	2001      	movs	r0, #1
 800c414:	e7c3      	b.n	800c39e <PDM_Filter_Init+0x7e>
 800c416:	4927      	ldr	r1, [pc, #156]	; (800c4b4 <PDM_Filter_Init+0x194>)
 800c418:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 800c4bc <PDM_Filter_Init+0x19c>
 800c41c:	f501 6780 	add.w	r7, r1, #1024	; 0x400
 800c420:	4e25      	ldr	r6, [pc, #148]	; (800c4b8 <PDM_Filter_Init+0x198>)
 800c422:	f851 2f04 	ldr.w	r2, [r1, #4]!
 800c426:	ea0c 5302 	and.w	r3, ip, r2, lsl #20
 800c42a:	ea02 0006 	and.w	r0, r2, r6
 800c42e:	f3c2 5209 	ubfx	r2, r2, #20, #10
 800c432:	428f      	cmp	r7, r1
 800c434:	ea43 0300 	orr.w	r3, r3, r0
 800c438:	4413      	add	r3, r2
 800c43a:	600b      	str	r3, [r1, #0]
 800c43c:	d1f1      	bne.n	800c422 <PDM_Filter_Init+0x102>
 800c43e:	2300      	movs	r3, #0
 800c440:	2001      	movs	r0, #1
 800c442:	702b      	strb	r3, [r5, #0]
 800c444:	e7ab      	b.n	800c39e <PDM_Filter_Init+0x7e>
 800c446:	2a00      	cmp	r2, #0
 800c448:	d1a9      	bne.n	800c39e <PDM_Filter_Init+0x7e>
 800c44a:	491a      	ldr	r1, [pc, #104]	; (800c4b4 <PDM_Filter_Init+0x194>)
 800c44c:	f8df c06c 	ldr.w	ip, [pc, #108]	; 800c4bc <PDM_Filter_Init+0x19c>
 800c450:	f501 6780 	add.w	r7, r1, #1024	; 0x400
 800c454:	4e18      	ldr	r6, [pc, #96]	; (800c4b8 <PDM_Filter_Init+0x198>)
 800c456:	f851 2f04 	ldr.w	r2, [r1, #4]!
 800c45a:	ea0c 5302 	and.w	r3, ip, r2, lsl #20
 800c45e:	ea02 0006 	and.w	r0, r2, r6
 800c462:	f3c2 5209 	ubfx	r2, r2, #20, #10
 800c466:	428f      	cmp	r7, r1
 800c468:	ea43 0300 	orr.w	r3, r3, r0
 800c46c:	4413      	add	r3, r2
 800c46e:	600b      	str	r3, [r1, #0]
 800c470:	d1f1      	bne.n	800c456 <PDM_Filter_Init+0x136>
 800c472:	2001      	movs	r0, #1
 800c474:	2300      	movs	r3, #0
 800c476:	7028      	strb	r0, [r5, #0]
 800c478:	e791      	b.n	800c39e <PDM_Filter_Init+0x7e>
 800c47a:	2220      	movs	r2, #32
 800c47c:	4618      	mov	r0, r3
 800c47e:	2160      	movs	r1, #96	; 0x60
 800c480:	6422      	str	r2, [r4, #64]	; 0x40
 800c482:	4613      	mov	r3, r2
 800c484:	e790      	b.n	800c3a8 <PDM_Filter_Init+0x88>
 800c486:	bf00      	nop
 800c488:	e0002000 	.word	0xe0002000
 800c48c:	e000ed00 	.word	0xe000ed00
 800c490:	40023008 	.word	0x40023008
 800c494:	40023000 	.word	0x40023000
 800c498:	f407a5c2 	.word	0xf407a5c2
 800c49c:	b5e8b5cd 	.word	0xb5e8b5cd
 800c4a0:	e0042000 	.word	0xe0042000
 800c4a4:	5c001000 	.word	0x5c001000
 800c4a8:	58024c08 	.word	0x58024c08
 800c4ac:	58024c00 	.word	0x58024c00
 800c4b0:	24000490 	.word	0x24000490
 800c4b4:	23fffffc 	.word	0x23fffffc
 800c4b8:	000ffc00 	.word	0x000ffc00
 800c4bc:	3ff00000 	.word	0x3ff00000

0800c4c0 <PDM_Filter_setConfig>:
 800c4c0:	4b67      	ldr	r3, [pc, #412]	; (800c660 <PDM_Filter_setConfig+0x1a0>)
 800c4c2:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c4c4:	429a      	cmp	r2, r3
 800c4c6:	d128      	bne.n	800c51a <PDM_Filter_setConfig+0x5a>
 800c4c8:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800c4ca:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c4cc:	880e      	ldrh	r6, [r1, #0]
 800c4ce:	460d      	mov	r5, r1
 800c4d0:	4604      	mov	r4, r0
 800c4d2:	f422 7180 	bic.w	r1, r2, #256	; 0x100
 800c4d6:	1e73      	subs	r3, r6, #1
 800c4d8:	f9b5 7004 	ldrsh.w	r7, [r5, #4]
 800c4dc:	f9b0 0038 	ldrsh.w	r0, [r0, #56]	; 0x38
 800c4e0:	2b06      	cmp	r3, #6
 800c4e2:	ed2d 8b02 	vpush	{d8}
 800c4e6:	6421      	str	r1, [r4, #64]	; 0x40
 800c4e8:	b083      	sub	sp, #12
 800c4ea:	d820      	bhi.n	800c52e <PDM_Filter_setConfig+0x6e>
 800c4ec:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 800c4ee:	42b3      	cmp	r3, r6
 800c4f0:	d03d      	beq.n	800c56e <PDM_Filter_setConfig+0xae>
 800c4f2:	4b5c      	ldr	r3, [pc, #368]	; (800c664 <PDM_Filter_setConfig+0x1a4>)
 800c4f4:	4013      	ands	r3, r2
 800c4f6:	4333      	orrs	r3, r6
 800c4f8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800c4fc:	6423      	str	r3, [r4, #64]	; 0x40
 800c4fe:	f003 030f 	and.w	r3, r3, #15
 800c502:	2a70      	cmp	r2, #112	; 0x70
 800c504:	f103 33ff 	add.w	r3, r3, #4294967295
 800c508:	d009      	beq.n	800c51e <PDM_Filter_setConfig+0x5e>
 800c50a:	2b06      	cmp	r3, #6
 800c50c:	d824      	bhi.n	800c558 <PDM_Filter_setConfig+0x98>
 800c50e:	e8df f003 	tbb	[pc, r3]
 800c512:	878a      	.short	0x878a
 800c514:	7b7e8184 	.word	0x7b7e8184
 800c518:	78          	.byte	0x78
 800c519:	00          	.byte	0x00
 800c51a:	2004      	movs	r0, #4
 800c51c:	4770      	bx	lr
 800c51e:	2b06      	cmp	r3, #6
 800c520:	d81a      	bhi.n	800c558 <PDM_Filter_setConfig+0x98>
 800c522:	e8df f003 	tbb	[pc, r3]
 800c526:	8f92      	.short	0x8f92
 800c528:	8617898c 	.word	0x8617898c
 800c52c:	83          	.byte	0x83
 800c52d:	00          	.byte	0x00
 800c52e:	4287      	cmp	r7, r0
 800c530:	f000 808e 	beq.w	800c650 <PDM_Filter_setConfig+0x190>
 800c534:	f117 0f0c 	cmn.w	r7, #12
 800c538:	f04f 0008 	mov.w	r0, #8
 800c53c:	da11      	bge.n	800c562 <PDM_Filter_setConfig+0xa2>
 800c53e:	f64f 73f4 	movw	r3, #65524	; 0xfff4
 800c542:	3040      	adds	r0, #64	; 0x40
 800c544:	80ab      	strh	r3, [r5, #4]
 800c546:	886b      	ldrh	r3, [r5, #2]
 800c548:	8626      	strh	r6, [r4, #48]	; 0x30
 800c54a:	8663      	strh	r3, [r4, #50]	; 0x32
 800c54c:	b003      	add	sp, #12
 800c54e:	ecbd 8b02 	vpop	{d8}
 800c552:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c554:	4b44      	ldr	r3, [pc, #272]	; (800c668 <PDM_Filter_setConfig+0x1a8>)
 800c556:	64a3      	str	r3, [r4, #72]	; 0x48
 800c558:	f117 0f0c 	cmn.w	r7, #12
 800c55c:	f04f 0000 	mov.w	r0, #0
 800c560:	dbed      	blt.n	800c53e <PDM_Filter_setConfig+0x7e>
 800c562:	2f33      	cmp	r7, #51	; 0x33
 800c564:	dd10      	ble.n	800c588 <PDM_Filter_setConfig+0xc8>
 800c566:	2333      	movs	r3, #51	; 0x33
 800c568:	3040      	adds	r0, #64	; 0x40
 800c56a:	80ab      	strh	r3, [r5, #4]
 800c56c:	e7eb      	b.n	800c546 <PDM_Filter_setConfig+0x86>
 800c56e:	4287      	cmp	r7, r0
 800c570:	d1f2      	bne.n	800c558 <PDM_Filter_setConfig+0x98>
 800c572:	886b      	ldrh	r3, [r5, #2]
 800c574:	8663      	strh	r3, [r4, #50]	; 0x32
 800c576:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c578:	2000      	movs	r0, #0
 800c57a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c57e:	6423      	str	r3, [r4, #64]	; 0x40
 800c580:	b003      	add	sp, #12
 800c582:	ecbd 8b02 	vpop	{d8}
 800c586:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c588:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c58a:	f003 030f 	and.w	r3, r3, #15
 800c58e:	3b01      	subs	r3, #1
 800c590:	2b06      	cmp	r3, #6
 800c592:	d831      	bhi.n	800c5f8 <PDM_Filter_setConfig+0x138>
 800c594:	4a35      	ldr	r2, [pc, #212]	; (800c66c <PDM_Filter_setConfig+0x1ac>)
 800c596:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 800c59a:	eddf 0a35 	vldr	s1, [pc, #212]	; 800c670 <PDM_Filter_setConfig+0x1b0>
 800c59e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c5a2:	9001      	str	r0, [sp, #4]
 800c5a4:	edd3 7a07 	vldr	s15, [r3, #28]
 800c5a8:	ed93 8a00 	vldr	s16, [r3]
 800c5ac:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800c5b0:	f000 f8e6 	bl	800c780 <powf>
 800c5b4:	eef0 8a40 	vmov.f32	s17, s0
 800c5b8:	9801      	ldr	r0, [sp, #4]
 800c5ba:	ee07 7a90 	vmov	s15, r7
 800c5be:	ee28 8a28 	vmul.f32	s16, s16, s17
 800c5c2:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 800c5c6:	9001      	str	r0, [sp, #4]
 800c5c8:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 800c5cc:	eddf 7a29 	vldr	s15, [pc, #164]	; 800c674 <PDM_Filter_setConfig+0x1b4>
 800c5d0:	ee60 0aa7 	vmul.f32	s1, s1, s15
 800c5d4:	f000 f8d4 	bl	800c780 <powf>
 800c5d8:	ee28 8a00 	vmul.f32	s16, s16, s0
 800c5dc:	886b      	ldrh	r3, [r5, #2]
 800c5de:	9801      	ldr	r0, [sp, #4]
 800c5e0:	feb8 8a48 	vrinta.f32	s16, s16
 800c5e4:	eebc 8ac8 	vcvt.u32.f32	s16, s16
 800c5e8:	8727      	strh	r7, [r4, #56]	; 0x38
 800c5ea:	8663      	strh	r3, [r4, #50]	; 0x32
 800c5ec:	8626      	strh	r6, [r4, #48]	; 0x30
 800c5ee:	ed84 8a0f 	vstr	s16, [r4, #60]	; 0x3c
 800c5f2:	2800      	cmp	r0, #0
 800c5f4:	d0bf      	beq.n	800c576 <PDM_Filter_setConfig+0xb6>
 800c5f6:	e7a9      	b.n	800c54c <PDM_Filter_setConfig+0x8c>
 800c5f8:	eddf 8a1f 	vldr	s17, [pc, #124]	; 800c678 <PDM_Filter_setConfig+0x1b8>
 800c5fc:	ed9f 8a1f 	vldr	s16, [pc, #124]	; 800c67c <PDM_Filter_setConfig+0x1bc>
 800c600:	e7db      	b.n	800c5ba <PDM_Filter_setConfig+0xfa>
 800c602:	4b1f      	ldr	r3, [pc, #124]	; (800c680 <PDM_Filter_setConfig+0x1c0>)
 800c604:	64a3      	str	r3, [r4, #72]	; 0x48
 800c606:	e7a7      	b.n	800c558 <PDM_Filter_setConfig+0x98>
 800c608:	4b1e      	ldr	r3, [pc, #120]	; (800c684 <PDM_Filter_setConfig+0x1c4>)
 800c60a:	64a3      	str	r3, [r4, #72]	; 0x48
 800c60c:	e7a4      	b.n	800c558 <PDM_Filter_setConfig+0x98>
 800c60e:	4b1e      	ldr	r3, [pc, #120]	; (800c688 <PDM_Filter_setConfig+0x1c8>)
 800c610:	64a3      	str	r3, [r4, #72]	; 0x48
 800c612:	e7a1      	b.n	800c558 <PDM_Filter_setConfig+0x98>
 800c614:	4b1d      	ldr	r3, [pc, #116]	; (800c68c <PDM_Filter_setConfig+0x1cc>)
 800c616:	64a3      	str	r3, [r4, #72]	; 0x48
 800c618:	e79e      	b.n	800c558 <PDM_Filter_setConfig+0x98>
 800c61a:	4b1d      	ldr	r3, [pc, #116]	; (800c690 <PDM_Filter_setConfig+0x1d0>)
 800c61c:	64a3      	str	r3, [r4, #72]	; 0x48
 800c61e:	e79b      	b.n	800c558 <PDM_Filter_setConfig+0x98>
 800c620:	4b1c      	ldr	r3, [pc, #112]	; (800c694 <PDM_Filter_setConfig+0x1d4>)
 800c622:	64a3      	str	r3, [r4, #72]	; 0x48
 800c624:	e798      	b.n	800c558 <PDM_Filter_setConfig+0x98>
 800c626:	4b1c      	ldr	r3, [pc, #112]	; (800c698 <PDM_Filter_setConfig+0x1d8>)
 800c628:	64a3      	str	r3, [r4, #72]	; 0x48
 800c62a:	e795      	b.n	800c558 <PDM_Filter_setConfig+0x98>
 800c62c:	4b1b      	ldr	r3, [pc, #108]	; (800c69c <PDM_Filter_setConfig+0x1dc>)
 800c62e:	64a3      	str	r3, [r4, #72]	; 0x48
 800c630:	e792      	b.n	800c558 <PDM_Filter_setConfig+0x98>
 800c632:	4b1b      	ldr	r3, [pc, #108]	; (800c6a0 <PDM_Filter_setConfig+0x1e0>)
 800c634:	64a3      	str	r3, [r4, #72]	; 0x48
 800c636:	e78f      	b.n	800c558 <PDM_Filter_setConfig+0x98>
 800c638:	4b1a      	ldr	r3, [pc, #104]	; (800c6a4 <PDM_Filter_setConfig+0x1e4>)
 800c63a:	64a3      	str	r3, [r4, #72]	; 0x48
 800c63c:	e78c      	b.n	800c558 <PDM_Filter_setConfig+0x98>
 800c63e:	4b1a      	ldr	r3, [pc, #104]	; (800c6a8 <PDM_Filter_setConfig+0x1e8>)
 800c640:	64a3      	str	r3, [r4, #72]	; 0x48
 800c642:	e789      	b.n	800c558 <PDM_Filter_setConfig+0x98>
 800c644:	4b19      	ldr	r3, [pc, #100]	; (800c6ac <PDM_Filter_setConfig+0x1ec>)
 800c646:	64a3      	str	r3, [r4, #72]	; 0x48
 800c648:	e786      	b.n	800c558 <PDM_Filter_setConfig+0x98>
 800c64a:	4b19      	ldr	r3, [pc, #100]	; (800c6b0 <PDM_Filter_setConfig+0x1f0>)
 800c64c:	64a3      	str	r3, [r4, #72]	; 0x48
 800c64e:	e783      	b.n	800c558 <PDM_Filter_setConfig+0x98>
 800c650:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 800c652:	42b3      	cmp	r3, r6
 800c654:	f47f af6e 	bne.w	800c534 <PDM_Filter_setConfig+0x74>
 800c658:	886b      	ldrh	r3, [r5, #2]
 800c65a:	2008      	movs	r0, #8
 800c65c:	8663      	strh	r3, [r4, #50]	; 0x32
 800c65e:	e775      	b.n	800c54c <PDM_Filter_setConfig+0x8c>
 800c660:	b5e8b5cd 	.word	0xb5e8b5cd
 800c664:	fffffef0 	.word	0xfffffef0
 800c668:	0800b7d9 	.word	0x0800b7d9
 800c66c:	0800caf0 	.word	0x0800caf0
 800c670:	42000000 	.word	0x42000000
 800c674:	3d4ccccd 	.word	0x3d4ccccd
 800c678:	4f800000 	.word	0x4f800000
 800c67c:	00000000 	.word	0x00000000
 800c680:	0800abe5 	.word	0x0800abe5
 800c684:	0800aa6d 	.word	0x0800aa6d
 800c688:	0800a95d 	.word	0x0800a95d
 800c68c:	0800b421 	.word	0x0800b421
 800c690:	0800b189 	.word	0x0800b189
 800c694:	0800af51 	.word	0x0800af51
 800c698:	0800ad6d 	.word	0x0800ad6d
 800c69c:	0800b9f5 	.word	0x0800b9f5
 800c6a0:	0800b8b9 	.word	0x0800b8b9
 800c6a4:	0800c035 	.word	0x0800c035
 800c6a8:	0800be39 	.word	0x0800be39
 800c6ac:	0800bc8d 	.word	0x0800bc8d
 800c6b0:	0800bb21 	.word	0x0800bb21

0800c6b4 <PDM_Filter>:
 800c6b4:	b410      	push	{r4}
 800c6b6:	4b0b      	ldr	r3, [pc, #44]	; (800c6e4 <PDM_Filter+0x30>)
 800c6b8:	6c54      	ldr	r4, [r2, #68]	; 0x44
 800c6ba:	429c      	cmp	r4, r3
 800c6bc:	d107      	bne.n	800c6ce <PDM_Filter+0x1a>
 800c6be:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800c6c0:	05dc      	lsls	r4, r3, #23
 800c6c2:	d508      	bpl.n	800c6d6 <PDM_Filter+0x22>
 800c6c4:	6c93      	ldr	r3, [r2, #72]	; 0x48
 800c6c6:	320c      	adds	r2, #12
 800c6c8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c6cc:	4718      	bx	r3
 800c6ce:	2004      	movs	r0, #4
 800c6d0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c6d4:	4770      	bx	lr
 800c6d6:	f013 0f80 	tst.w	r3, #128	; 0x80
 800c6da:	bf14      	ite	ne
 800c6dc:	2020      	movne	r0, #32
 800c6de:	2030      	moveq	r0, #48	; 0x30
 800c6e0:	e7f6      	b.n	800c6d0 <PDM_Filter+0x1c>
 800c6e2:	bf00      	nop
 800c6e4:	b5e8b5cd 	.word	0xb5e8b5cd

0800c6e8 <__errno>:
 800c6e8:	4b01      	ldr	r3, [pc, #4]	; (800c6f0 <__errno+0x8>)
 800c6ea:	6818      	ldr	r0, [r3, #0]
 800c6ec:	4770      	bx	lr
 800c6ee:	bf00      	nop
 800c6f0:	24000410 	.word	0x24000410

0800c6f4 <__libc_init_array>:
 800c6f4:	b570      	push	{r4, r5, r6, lr}
 800c6f6:	4d0d      	ldr	r5, [pc, #52]	; (800c72c <__libc_init_array+0x38>)
 800c6f8:	4c0d      	ldr	r4, [pc, #52]	; (800c730 <__libc_init_array+0x3c>)
 800c6fa:	1b64      	subs	r4, r4, r5
 800c6fc:	10a4      	asrs	r4, r4, #2
 800c6fe:	2600      	movs	r6, #0
 800c700:	42a6      	cmp	r6, r4
 800c702:	d109      	bne.n	800c718 <__libc_init_array+0x24>
 800c704:	4d0b      	ldr	r5, [pc, #44]	; (800c734 <__libc_init_array+0x40>)
 800c706:	4c0c      	ldr	r4, [pc, #48]	; (800c738 <__libc_init_array+0x44>)
 800c708:	f000 f9e6 	bl	800cad8 <_init>
 800c70c:	1b64      	subs	r4, r4, r5
 800c70e:	10a4      	asrs	r4, r4, #2
 800c710:	2600      	movs	r6, #0
 800c712:	42a6      	cmp	r6, r4
 800c714:	d105      	bne.n	800c722 <__libc_init_array+0x2e>
 800c716:	bd70      	pop	{r4, r5, r6, pc}
 800c718:	f855 3b04 	ldr.w	r3, [r5], #4
 800c71c:	4798      	blx	r3
 800c71e:	3601      	adds	r6, #1
 800c720:	e7ee      	b.n	800c700 <__libc_init_array+0xc>
 800c722:	f855 3b04 	ldr.w	r3, [r5], #4
 800c726:	4798      	blx	r3
 800c728:	3601      	adds	r6, #1
 800c72a:	e7f2      	b.n	800c712 <__libc_init_array+0x1e>
 800c72c:	0800cde0 	.word	0x0800cde0
 800c730:	0800cde0 	.word	0x0800cde0
 800c734:	0800cde0 	.word	0x0800cde0
 800c738:	0800cde4 	.word	0x0800cde4

0800c73c <memset>:
 800c73c:	4402      	add	r2, r0
 800c73e:	4603      	mov	r3, r0
 800c740:	4293      	cmp	r3, r2
 800c742:	d100      	bne.n	800c746 <memset+0xa>
 800c744:	4770      	bx	lr
 800c746:	f803 1b01 	strb.w	r1, [r3], #1
 800c74a:	e7f9      	b.n	800c740 <memset+0x4>

0800c74c <checkint>:
 800c74c:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800c750:	2b7e      	cmp	r3, #126	; 0x7e
 800c752:	dd10      	ble.n	800c776 <checkint+0x2a>
 800c754:	2b96      	cmp	r3, #150	; 0x96
 800c756:	dc0c      	bgt.n	800c772 <checkint+0x26>
 800c758:	2201      	movs	r2, #1
 800c75a:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 800c75e:	fa02 f303 	lsl.w	r3, r2, r3
 800c762:	1e5a      	subs	r2, r3, #1
 800c764:	4202      	tst	r2, r0
 800c766:	d106      	bne.n	800c776 <checkint+0x2a>
 800c768:	4203      	tst	r3, r0
 800c76a:	bf0c      	ite	eq
 800c76c:	2002      	moveq	r0, #2
 800c76e:	2001      	movne	r0, #1
 800c770:	4770      	bx	lr
 800c772:	2002      	movs	r0, #2
 800c774:	4770      	bx	lr
 800c776:	2000      	movs	r0, #0
 800c778:	4770      	bx	lr
 800c77a:	0000      	movs	r0, r0
 800c77c:	0000      	movs	r0, r0
	...

0800c780 <powf>:
 800c780:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c782:	ee10 1a10 	vmov	r1, s0
 800c786:	ee10 6a90 	vmov	r6, s1
 800c78a:	f5a1 0300 	sub.w	r3, r1, #8388608	; 0x800000
 800c78e:	0072      	lsls	r2, r6, #1
 800c790:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 800c794:	b085      	sub	sp, #20
 800c796:	f102 30ff 	add.w	r0, r2, #4294967295
 800c79a:	f06f 7380 	mvn.w	r3, #16777216	; 0x1000000
 800c79e:	d256      	bcs.n	800c84e <powf+0xce>
 800c7a0:	4298      	cmp	r0, r3
 800c7a2:	d256      	bcs.n	800c852 <powf+0xd2>
 800c7a4:	2000      	movs	r0, #0
 800c7a6:	f101 4240 	add.w	r2, r1, #3221225472	; 0xc0000000
 800c7aa:	4ea3      	ldr	r6, [pc, #652]	; (800ca38 <powf+0x2b8>)
 800c7ac:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 800c7b0:	f502 024d 	add.w	r2, r2, #13434880	; 0xcd0000
 800c7b4:	f3c2 47c3 	ubfx	r7, r2, #19, #4
 800c7b8:	0dd2      	lsrs	r2, r2, #23
 800c7ba:	eb06 1707 	add.w	r7, r6, r7, lsl #4
 800c7be:	05d2      	lsls	r2, r2, #23
 800c7c0:	1a8b      	subs	r3, r1, r2
 800c7c2:	ed97 5b00 	vldr	d5, [r7]
 800c7c6:	ee07 3a90 	vmov	s15, r3
 800c7ca:	15d2      	asrs	r2, r2, #23
 800c7cc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800c7d0:	eea5 6b07 	vfma.f64	d6, d5, d7
 800c7d4:	ed97 5b02 	vldr	d5, [r7, #8]
 800c7d8:	ee26 2b06 	vmul.f64	d2, d6, d6
 800c7dc:	ee22 1b02 	vmul.f64	d1, d2, d2
 800c7e0:	ee07 2a90 	vmov	s15, r2
 800c7e4:	ed96 4b40 	vldr	d4, [r6, #256]	; 0x100
 800c7e8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800c7ec:	ee37 7b05 	vadd.f64	d7, d7, d5
 800c7f0:	ed96 5b42 	vldr	d5, [r6, #264]	; 0x108
 800c7f4:	ed96 3b44 	vldr	d3, [r6, #272]	; 0x110
 800c7f8:	eea6 5b04 	vfma.f64	d5, d6, d4
 800c7fc:	ed96 4b46 	vldr	d4, [r6, #280]	; 0x118
 800c800:	eea6 4b03 	vfma.f64	d4, d6, d3
 800c804:	ed96 3b48 	vldr	d3, [r6, #288]	; 0x120
 800c808:	eeb7 0ae0 	vcvt.f64.f32	d0, s1
 800c80c:	eea6 7b03 	vfma.f64	d7, d6, d3
 800c810:	eea2 7b04 	vfma.f64	d7, d2, d4
 800c814:	eea5 7b01 	vfma.f64	d7, d5, d1
 800c818:	ee20 0b07 	vmul.f64	d0, d0, d7
 800c81c:	ee10 1a90 	vmov	r1, s1
 800c820:	2300      	movs	r3, #0
 800c822:	2700      	movs	r7, #0
 800c824:	f3c1 32cf 	ubfx	r2, r1, #15, #16
 800c828:	f248 06be 	movw	r6, #32958	; 0x80be
 800c82c:	429f      	cmp	r7, r3
 800c82e:	bf08      	it	eq
 800c830:	4296      	cmpeq	r6, r2
 800c832:	f080 80b1 	bcs.w	800c998 <powf+0x218>
 800c836:	ed9f 7b78 	vldr	d7, [pc, #480]	; 800ca18 <powf+0x298>
 800c83a:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800c83e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c842:	dd79      	ble.n	800c938 <powf+0x1b8>
 800c844:	b005      	add	sp, #20
 800c846:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800c84a:	f000 b91f 	b.w	800ca8c <__math_oflowf>
 800c84e:	4298      	cmp	r0, r3
 800c850:	d32d      	bcc.n	800c8ae <powf+0x12e>
 800c852:	b952      	cbnz	r2, 800c86a <powf+0xea>
 800c854:	f481 0380 	eor.w	r3, r1, #4194304	; 0x400000
 800c858:	005b      	lsls	r3, r3, #1
 800c85a:	f513 0f00 	cmn.w	r3, #8388608	; 0x800000
 800c85e:	f240 80cd 	bls.w	800c9fc <powf+0x27c>
 800c862:	ee30 0a20 	vadd.f32	s0, s0, s1
 800c866:	b005      	add	sp, #20
 800c868:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c86a:	f1b1 5f7e 	cmp.w	r1, #1065353216	; 0x3f800000
 800c86e:	d105      	bne.n	800c87c <powf+0xfc>
 800c870:	f486 0680 	eor.w	r6, r6, #4194304	; 0x400000
 800c874:	0076      	lsls	r6, r6, #1
 800c876:	f516 0f00 	cmn.w	r6, #8388608	; 0x800000
 800c87a:	e7f0      	b.n	800c85e <powf+0xde>
 800c87c:	004b      	lsls	r3, r1, #1
 800c87e:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
 800c882:	d8ee      	bhi.n	800c862 <powf+0xe2>
 800c884:	f1b2 4f7f 	cmp.w	r2, #4278190080	; 0xff000000
 800c888:	d1eb      	bne.n	800c862 <powf+0xe2>
 800c88a:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 800c88e:	f000 80b5 	beq.w	800c9fc <powf+0x27c>
 800c892:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 800c896:	ea6f 0606 	mvn.w	r6, r6
 800c89a:	bf34      	ite	cc
 800c89c:	2300      	movcc	r3, #0
 800c89e:	2301      	movcs	r3, #1
 800c8a0:	0ff6      	lsrs	r6, r6, #31
 800c8a2:	42b3      	cmp	r3, r6
 800c8a4:	f040 80ad 	bne.w	800ca02 <powf+0x282>
 800c8a8:	ee20 0aa0 	vmul.f32	s0, s1, s1
 800c8ac:	e7db      	b.n	800c866 <powf+0xe6>
 800c8ae:	004f      	lsls	r7, r1, #1
 800c8b0:	1e7a      	subs	r2, r7, #1
 800c8b2:	429a      	cmp	r2, r3
 800c8b4:	d31c      	bcc.n	800c8f0 <powf+0x170>
 800c8b6:	2900      	cmp	r1, #0
 800c8b8:	ee20 0a00 	vmul.f32	s0, s0, s0
 800c8bc:	da0f      	bge.n	800c8de <powf+0x15e>
 800c8be:	ee10 0a90 	vmov	r0, s1
 800c8c2:	f7ff ff43 	bl	800c74c <checkint>
 800c8c6:	2801      	cmp	r0, #1
 800c8c8:	d109      	bne.n	800c8de <powf+0x15e>
 800c8ca:	eeb1 0a40 	vneg.f32	s0, s0
 800c8ce:	b947      	cbnz	r7, 800c8e2 <powf+0x162>
 800c8d0:	2e00      	cmp	r6, #0
 800c8d2:	dac8      	bge.n	800c866 <powf+0xe6>
 800c8d4:	b005      	add	sp, #20
 800c8d6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800c8da:	f000 b8dd 	b.w	800ca98 <__math_divzerof>
 800c8de:	2000      	movs	r0, #0
 800c8e0:	e7f5      	b.n	800c8ce <powf+0x14e>
 800c8e2:	2e00      	cmp	r6, #0
 800c8e4:	dabf      	bge.n	800c866 <powf+0xe6>
 800c8e6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800c8ea:	ee87 0a80 	vdiv.f32	s0, s15, s0
 800c8ee:	e7ba      	b.n	800c866 <powf+0xe6>
 800c8f0:	2900      	cmp	r1, #0
 800c8f2:	da1f      	bge.n	800c934 <powf+0x1b4>
 800c8f4:	ee10 0a90 	vmov	r0, s1
 800c8f8:	f7ff ff28 	bl	800c74c <checkint>
 800c8fc:	b920      	cbnz	r0, 800c908 <powf+0x188>
 800c8fe:	b005      	add	sp, #20
 800c900:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800c904:	f000 b8d8 	b.w	800cab8 <__math_invalidf>
 800c908:	2801      	cmp	r0, #1
 800c90a:	bf14      	ite	ne
 800c90c:	2000      	movne	r0, #0
 800c90e:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 800c912:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800c916:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 800c91a:	f4bf af44 	bcs.w	800c7a6 <powf+0x26>
 800c91e:	eddf 7a47 	vldr	s15, [pc, #284]	; 800ca3c <powf+0x2bc>
 800c922:	ee20 0a27 	vmul.f32	s0, s0, s15
 800c926:	ee10 3a10 	vmov	r3, s0
 800c92a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c92e:	f1a3 6138 	sub.w	r1, r3, #192937984	; 0xb800000
 800c932:	e738      	b.n	800c7a6 <powf+0x26>
 800c934:	2000      	movs	r0, #0
 800c936:	e7ee      	b.n	800c916 <powf+0x196>
 800c938:	ed9f 7b39 	vldr	d7, [pc, #228]	; 800ca20 <powf+0x2a0>
 800c93c:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800c940:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c944:	dd10      	ble.n	800c968 <powf+0x1e8>
 800c946:	f04f 534c 	mov.w	r3, #855638016	; 0x33000000
 800c94a:	2800      	cmp	r0, #0
 800c94c:	d15c      	bne.n	800ca08 <powf+0x288>
 800c94e:	9302      	str	r3, [sp, #8]
 800c950:	eddd 7a02 	vldr	s15, [sp, #8]
 800c954:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c958:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c95c:	eef4 7a47 	vcmp.f32	s15, s14
 800c960:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c964:	f47f af6e 	bne.w	800c844 <powf+0xc4>
 800c968:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 800ca28 <powf+0x2a8>
 800c96c:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800c970:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c974:	d804      	bhi.n	800c980 <powf+0x200>
 800c976:	b005      	add	sp, #20
 800c978:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800c97c:	f000 b87a 	b.w	800ca74 <__math_uflowf>
 800c980:	ed9f 7b2b 	vldr	d7, [pc, #172]	; 800ca30 <powf+0x2b0>
 800c984:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800c988:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c98c:	d504      	bpl.n	800c998 <powf+0x218>
 800c98e:	b005      	add	sp, #20
 800c990:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800c994:	f000 b874 	b.w	800ca80 <__math_may_uflowf>
 800c998:	4b29      	ldr	r3, [pc, #164]	; (800ca40 <powf+0x2c0>)
 800c99a:	ed93 7b40 	vldr	d7, [r3, #256]	; 0x100
 800c99e:	ee30 6b07 	vadd.f64	d6, d0, d7
 800c9a2:	ed8d 6b00 	vstr	d6, [sp]
 800c9a6:	ee36 7b47 	vsub.f64	d7, d6, d7
 800c9aa:	ee30 7b47 	vsub.f64	d7, d0, d7
 800c9ae:	e9dd 6700 	ldrd	r6, r7, [sp]
 800c9b2:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800c9b6:	f006 011f 	and.w	r1, r6, #31
 800c9ba:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800c9be:	e9d1 ce00 	ldrd	ip, lr, [r1]
 800c9c2:	ed93 5b42 	vldr	d5, [r3, #264]	; 0x108
 800c9c6:	ed93 6b44 	vldr	d6, [r3, #272]	; 0x110
 800c9ca:	ed93 4b46 	vldr	d4, [r3, #280]	; 0x118
 800c9ce:	eea7 6b05 	vfma.f64	d6, d7, d5
 800c9d2:	ee27 5b07 	vmul.f64	d5, d7, d7
 800c9d6:	1836      	adds	r6, r6, r0
 800c9d8:	2300      	movs	r3, #0
 800c9da:	eb13 040c 	adds.w	r4, r3, ip
 800c9de:	ea4f 31c6 	mov.w	r1, r6, lsl #15
 800c9e2:	eb41 050e 	adc.w	r5, r1, lr
 800c9e6:	eea7 0b04 	vfma.f64	d0, d7, d4
 800c9ea:	ec45 4b17 	vmov	d7, r4, r5
 800c9ee:	eea6 0b05 	vfma.f64	d0, d6, d5
 800c9f2:	ee20 0b07 	vmul.f64	d0, d0, d7
 800c9f6:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800c9fa:	e734      	b.n	800c866 <powf+0xe6>
 800c9fc:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800ca00:	e731      	b.n	800c866 <powf+0xe6>
 800ca02:	ed9f 0a10 	vldr	s0, [pc, #64]	; 800ca44 <powf+0x2c4>
 800ca06:	e72e      	b.n	800c866 <powf+0xe6>
 800ca08:	9303      	str	r3, [sp, #12]
 800ca0a:	eddd 7a03 	vldr	s15, [sp, #12]
 800ca0e:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800ca12:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ca16:	e7a1      	b.n	800c95c <powf+0x1dc>
 800ca18:	ffd1d571 	.word	0xffd1d571
 800ca1c:	405fffff 	.word	0x405fffff
 800ca20:	ffa3aae2 	.word	0xffa3aae2
 800ca24:	405fffff 	.word	0x405fffff
 800ca28:	00000000 	.word	0x00000000
 800ca2c:	c062c000 	.word	0xc062c000
 800ca30:	00000000 	.word	0x00000000
 800ca34:	c062a000 	.word	0xc062a000
 800ca38:	0800ccb0 	.word	0x0800ccb0
 800ca3c:	4b000000 	.word	0x4b000000
 800ca40:	0800cb68 	.word	0x0800cb68
 800ca44:	00000000 	.word	0x00000000

0800ca48 <with_errnof>:
 800ca48:	b513      	push	{r0, r1, r4, lr}
 800ca4a:	4604      	mov	r4, r0
 800ca4c:	ed8d 0a01 	vstr	s0, [sp, #4]
 800ca50:	f7ff fe4a 	bl	800c6e8 <__errno>
 800ca54:	ed9d 0a01 	vldr	s0, [sp, #4]
 800ca58:	6004      	str	r4, [r0, #0]
 800ca5a:	b002      	add	sp, #8
 800ca5c:	bd10      	pop	{r4, pc}

0800ca5e <xflowf>:
 800ca5e:	b130      	cbz	r0, 800ca6e <xflowf+0x10>
 800ca60:	eef1 7a40 	vneg.f32	s15, s0
 800ca64:	ee27 0a80 	vmul.f32	s0, s15, s0
 800ca68:	2022      	movs	r0, #34	; 0x22
 800ca6a:	f7ff bfed 	b.w	800ca48 <with_errnof>
 800ca6e:	eef0 7a40 	vmov.f32	s15, s0
 800ca72:	e7f7      	b.n	800ca64 <xflowf+0x6>

0800ca74 <__math_uflowf>:
 800ca74:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800ca7c <__math_uflowf+0x8>
 800ca78:	f7ff bff1 	b.w	800ca5e <xflowf>
 800ca7c:	10000000 	.word	0x10000000

0800ca80 <__math_may_uflowf>:
 800ca80:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800ca88 <__math_may_uflowf+0x8>
 800ca84:	f7ff bfeb 	b.w	800ca5e <xflowf>
 800ca88:	1a200000 	.word	0x1a200000

0800ca8c <__math_oflowf>:
 800ca8c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800ca94 <__math_oflowf+0x8>
 800ca90:	f7ff bfe5 	b.w	800ca5e <xflowf>
 800ca94:	70000000 	.word	0x70000000

0800ca98 <__math_divzerof>:
 800ca98:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800ca9c:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 800caa0:	2800      	cmp	r0, #0
 800caa2:	fe40 7a27 	vseleq.f32	s15, s0, s15
 800caa6:	ed9f 0a03 	vldr	s0, [pc, #12]	; 800cab4 <__math_divzerof+0x1c>
 800caaa:	2022      	movs	r0, #34	; 0x22
 800caac:	ee87 0a80 	vdiv.f32	s0, s15, s0
 800cab0:	f7ff bfca 	b.w	800ca48 <with_errnof>
 800cab4:	00000000 	.word	0x00000000

0800cab8 <__math_invalidf>:
 800cab8:	eef0 7a40 	vmov.f32	s15, s0
 800cabc:	ee30 7a40 	vsub.f32	s14, s0, s0
 800cac0:	eef4 7a67 	vcmp.f32	s15, s15
 800cac4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cac8:	ee87 0a07 	vdiv.f32	s0, s14, s14
 800cacc:	d602      	bvs.n	800cad4 <__math_invalidf+0x1c>
 800cace:	2021      	movs	r0, #33	; 0x21
 800cad0:	f7ff bfba 	b.w	800ca48 <with_errnof>
 800cad4:	4770      	bx	lr
	...

0800cad8 <_init>:
 800cad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cada:	bf00      	nop
 800cadc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cade:	bc08      	pop	{r3}
 800cae0:	469e      	mov	lr, r3
 800cae2:	4770      	bx	lr

0800cae4 <_fini>:
 800cae4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cae6:	bf00      	nop
 800cae8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800caea:	bc08      	pop	{r3}
 800caec:	469e      	mov	lr, r3
 800caee:	4770      	bx	lr
