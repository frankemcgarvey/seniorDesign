/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * <h2><center>&copy; Copyright (c) 2021 STMicroelectronics.
  * All rights reserved.</center></h2>
  *
  * This software component is licensed by ST under BSD 3-Clause license,
  * the "License"; You may not use this file except in compliance with the
  * License. You may obtain a copy of the License at:
  *                        opensource.org/licenses/BSD-3-Clause
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

typedef struct{
	flag_t topLeftChannelFlag;
	flag_t topRightChannelFlag;
	flag_t bottomLeftChannelFlag;
	flag_t bottomRightChannelFlag;
}channel_flag_t;

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

#ifndef HSEM_ID_0
#define HSEM_ID_0 (0U) /* HW semaphore 0*/
#endif

#define HSEM_ID_1 1U


/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/

DFSDM_Filter_HandleTypeDef hdfsdm1_filter0;
DFSDM_Filter_HandleTypeDef hdfsdm1_filter1;
DFSDM_Filter_HandleTypeDef hdfsdm1_filter2;
DFSDM_Filter_HandleTypeDef hdfsdm1_filter3;
DFSDM_Channel_HandleTypeDef hdfsdm1_channel0;
DFSDM_Channel_HandleTypeDef hdfsdm1_channel1;
DFSDM_Channel_HandleTypeDef hdfsdm1_channel2;
DFSDM_Channel_HandleTypeDef hdfsdm1_channel3;
DMA_HandleTypeDef hdma_dfsdm1_flt0;
DMA_HandleTypeDef hdma_dfsdm1_flt1;
DMA_HandleTypeDef hdma_dfsdm1_flt2;
DMA_HandleTypeDef hdma_dfsdm1_flt3;

UART_HandleTypeDef huart3;
DMA_HandleTypeDef hdma_usart3_tx;

/* USER CODE BEGIN PV */

static buffer_t * const pcmBuffer = (buffer_t *) 0x30020000;
static volatile channel_flag_t channelFlag;

//static float coeff_fir[FIR_TAPS] = {-0.000000,-0.000000,0.000111,0.000396,0.000912,0.001710,0.002831,0.004307,0.006154,0.008378,0.010968,0.013901,0.017138,0.020629,0.024313,0.028118,0.031966,0.035773,0.039456,0.042929,0.046112,0.048931,0.051319,0.053222,0.054596,0.055413,0.054596,0.053222,0.051319,0.048931,0.046112,0.042929,0.039456,0.035773,0.031966,0.028118,0.024313,0.020629,0.017138,0.013901,0.010968,0.008378,0.006154,0.004307,0.002831,0.001710,0.000912,0.000396,0.000111,-0.000000,-0.000000};
static float coeff_iir[IIR_TAPS] = {1.000000, 0.000000, -1.000000, 1.895962, -0.994284, 1.000000, 0.000000, -1.000000, 1.952879, -0.996178, 1.000000, 0.000000, -1.000000, 1.885551, -0.983015, 1.000000, 0.000000, -1.000000, 1.945317, -0.988588, 1.000000, 0.000000, -1.000000, 1.875737, -0.972066, 1.000000, 0.000000, -1.000000, 1.937704, -0.981083, 1.000000, 0.000000, -1.000000, 1.866618, -0.961552, 1.000000, 0.000000, -1.000000, 1.930058, -0.973681, 1.000000, 0.000000, -1.000000, 1.858280, -0.951580, 1.000000, 0.000000, -1.000000, 1.922398, -0.966403, 1.000000, 0.000000, -1.000000, 1.850795, -0.942245, 1.000000, 0.000000, -1.000000, 1.914744, -0.959271, 1.000000, 0.000000, -1.000000, 1.844223, -0.933633, 1.000000, 0.000000, -1.000000, 1.907120, -0.952311, 1.000000, 0.000000, -1.000000, 1.838613, -0.925818, 1.000000, 0.000000, -1.000000, 1.899552, -0.945550, 1.000000, 0.000000, -1.000000, 1.833997, -0.918860, 1.000000, 0.000000, -1.000000, 1.892072, -0.939022, 1.000000, 0.000000, -1.000000, 1.830397, -0.912808, 1.000000, 0.000000, -1.000000, 1.884714, -0.932765, 1.000000, 0.000000, -1.000000, 1.827819, -0.907699, 1.000000, 0.000000, -1.000000, 1.877520, -0.926821, 1.000000, 0.000000, -1.000000, 1.826257, -0.903553, 1.000000, 0.000000, -1.000000, 1.870536, -0.921240, 1.000000, 0.000000, -1.000000, 1.825692, -0.900381};

static dsp_buffer_iir_t dsp_iir[CHANNEL_NUMBER];

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_DMA_Init(void);
static void MX_DFSDM1_Init(void);
static void MX_USART3_UART_Init(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */
/* USER CODE BEGIN Boot_Mode_Sequence_0 */
/* USER CODE END Boot_Mode_Sequence_0 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
/* wait until CPU2 wakes up from stop mode */
/* USER CODE END Boot_Mode_Sequence_2 */

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_DMA_Init();
  MX_DFSDM1_Init();
  MX_USART3_UART_Init();
  /* USER CODE BEGIN 2 */

  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
  DWT->LAR = 0xC5ACCE55;
  DWT->CYCCNT = 0;
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;

  IIR_Filter_Init(&dsp_iir[0], &coeff_iir[0]);

  HAL_DFSDM_FilterRegularStart_DMA(&hdfsdm1_filter3, &pcmBuffer->topRightChannel[0], 2*PCM_CHUNK_SIZE);
  HAL_DFSDM_FilterRegularStart_DMA(&hdfsdm1_filter2, &pcmBuffer->topLeftChannel[0], 2*PCM_CHUNK_SIZE);
  HAL_DFSDM_FilterRegularStart_DMA(&hdfsdm1_filter1, &pcmBuffer->bottomRightChannel[0], 2*PCM_CHUNK_SIZE);
  HAL_DFSDM_FilterRegularStart_DMA(&hdfsdm1_filter0, &pcmBuffer->bottomLeftChannel[0], 2*PCM_CHUNK_SIZE);

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while(1){

	  if(channelFlag.bottomLeftChannelFlag == HALF && channelFlag.bottomRightChannelFlag == HALF && channelFlag.topLeftChannelFlag == HALF && channelFlag.topRightChannelFlag == HALF){
		  DWT->CYCCNT = 0;
		  channelFlag.topLeftChannelFlag	 = NONE;
		  channelFlag.topRightChannelFlag	 = NONE;
		  channelFlag.bottomLeftChannelFlag  = NONE;
		  channelFlag.bottomRightChannelFlag = NONE;

		  for(uint32_t i = 0; i < PCM_CHUNK_SIZE; i++){
			  pcmBuffer->pcmBuffer_q31[0][i] = ((int32_t)pcmBuffer->bottomLeftChannel [i] >> 8);
			  pcmBuffer->pcmBuffer_q31[1][i] = ((int32_t)pcmBuffer->bottomRightChannel[i] >> 8);
			  pcmBuffer->pcmBuffer_q31[2][i] = ((int32_t)pcmBuffer->topLeftChannel	  [i] >> 8);
			  pcmBuffer->pcmBuffer_q31[3][i] = ((int32_t)pcmBuffer->topRightChannel	  [i] >> 8);
		  }

		  arm_q31_to_float(&pcmBuffer->pcmBuffer_q31[0][0], &pcmBuffer->pcmBuffer_flt[0][0], PCM_CHUNK_SIZE);
		  arm_q31_to_float(&pcmBuffer->pcmBuffer_q31[1][0], &pcmBuffer->pcmBuffer_flt[1][0], PCM_CHUNK_SIZE);
		  arm_q31_to_float(&pcmBuffer->pcmBuffer_q31[2][0], &pcmBuffer->pcmBuffer_flt[2][0], PCM_CHUNK_SIZE);
		  arm_q31_to_float(&pcmBuffer->pcmBuffer_q31[3][0], &pcmBuffer->pcmBuffer_flt[3][0], PCM_CHUNK_SIZE);

		  IIR_Filter(&dsp_iir[0], (float(*)[PCM_CHUNK_SIZE])&pcmBuffer->pcmBuffer_flt[0][0], (float(*)[PCM_CHUNK_SIZE])&pcmBuffer->pcmBuffer_flt[0][0]);

		  arm_float_to_q15(&pcmBuffer->pcmBuffer_flt[0][0], &pcmBuffer->pcmBuffer_q15[0][0], PCM_CHUNK_SIZE);
		  arm_float_to_q15(&pcmBuffer->pcmBuffer_flt[1][0], &pcmBuffer->pcmBuffer_q15[1][0], PCM_CHUNK_SIZE);
		  arm_float_to_q15(&pcmBuffer->pcmBuffer_flt[2][0], &pcmBuffer->pcmBuffer_q15[2][0], PCM_CHUNK_SIZE);
		  arm_float_to_q15(&pcmBuffer->pcmBuffer_flt[3][0], &pcmBuffer->pcmBuffer_q15[3][0], PCM_CHUNK_SIZE);

		  Clean((uint32_t*)&pcmBuffer->pcmBuffer_q15[0][0], 2*CHANNEL_NUMBER*PCM_CHUNK_SIZE);

		  HAL_UART_Transmit_DMA(&huart3, (uint8_t*)&pcmBuffer->pcmBuffer_q15[0][0], 2*CHANNEL_NUMBER*PCM_CHUNK_SIZE);

		  HAL_EXTI_GenerateSWInterrupt(EXTI_LINE7);
	  }

	  if(channelFlag.bottomLeftChannelFlag == FULL && channelFlag.bottomRightChannelFlag == FULL && channelFlag.topLeftChannelFlag == FULL && channelFlag.topRightChannelFlag == FULL){
		  DWT->CYCCNT = 0;
		  channelFlag.topLeftChannelFlag		= NONE;
		  channelFlag.topRightChannelFlag       = NONE;
		  channelFlag.bottomLeftChannelFlag 	= NONE;
		  channelFlag.bottomRightChannelFlag 	= NONE;

		  for(uint32_t i = 0; i < PCM_CHUNK_SIZE; i++){
			  pcmBuffer->pcmBuffer_q31[CHANNEL_NUMBER]    [i] = ((int32_t)pcmBuffer->bottomLeftChannel[PCM_CHUNK_SIZE  + i] >> 8);
			  pcmBuffer->pcmBuffer_q31[CHANNEL_NUMBER + 1][i] = ((int32_t)pcmBuffer->bottomRightChannel[PCM_CHUNK_SIZE + i] >> 8);
			  pcmBuffer->pcmBuffer_q31[CHANNEL_NUMBER + 2][i] = ((int32_t)pcmBuffer->topLeftChannel[PCM_CHUNK_SIZE     + i] >> 8);
			  pcmBuffer->pcmBuffer_q31[CHANNEL_NUMBER + 3][i] = ((int32_t)pcmBuffer->topRightChannel[PCM_CHUNK_SIZE    + i] >> 8);
		  }

		  arm_q31_to_float(&pcmBuffer->pcmBuffer_q31[CHANNEL_NUMBER]    [0], &pcmBuffer->pcmBuffer_flt[0][0], PCM_CHUNK_SIZE);
		  arm_q31_to_float(&pcmBuffer->pcmBuffer_q31[CHANNEL_NUMBER + 1][0], &pcmBuffer->pcmBuffer_flt[1][0], PCM_CHUNK_SIZE);
		  arm_q31_to_float(&pcmBuffer->pcmBuffer_q31[CHANNEL_NUMBER + 2][0], &pcmBuffer->pcmBuffer_flt[2][0], PCM_CHUNK_SIZE);
		  arm_q31_to_float(&pcmBuffer->pcmBuffer_q31[CHANNEL_NUMBER + 3][0], &pcmBuffer->pcmBuffer_flt[3][0], PCM_CHUNK_SIZE);

		  IIR_Filter(&dsp_iir[0], (float(*)[PCM_CHUNK_SIZE])&pcmBuffer->pcmBuffer_flt[0][0], (float(*)[PCM_CHUNK_SIZE])&pcmBuffer->pcmBuffer_flt[0][0]);

		  arm_float_to_q15(&pcmBuffer->pcmBuffer_flt[0][0], &pcmBuffer->pcmBuffer_q15[CHANNEL_NUMBER]    [0], PCM_CHUNK_SIZE);
		  arm_float_to_q15(&pcmBuffer->pcmBuffer_flt[1][0], &pcmBuffer->pcmBuffer_q15[CHANNEL_NUMBER + 1][0], PCM_CHUNK_SIZE);
		  arm_float_to_q15(&pcmBuffer->pcmBuffer_flt[2][0], &pcmBuffer->pcmBuffer_q15[CHANNEL_NUMBER + 2][0], PCM_CHUNK_SIZE);
		  arm_float_to_q15(&pcmBuffer->pcmBuffer_flt[3][0], &pcmBuffer->pcmBuffer_q15[CHANNEL_NUMBER + 3][0], PCM_CHUNK_SIZE);

		  Clean((uint32_t*)&pcmBuffer->pcmBuffer_q15[CHANNEL_NUMBER][0], 2*CHANNEL_NUMBER*PCM_CHUNK_SIZE);

		  HAL_UART_Transmit_DMA(&huart3, (uint8_t*)&pcmBuffer->pcmBuffer_q15[CHANNEL_NUMBER][0], 2*CHANNEL_NUMBER*PCM_CHUNK_SIZE);

		  HAL_EXTI_GenerateSWInterrupt(EXTI_LINE8);
	  }


    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 2;
  RCC_OscInitStruct.PLL.PLLN = 240;
  RCC_OscInitStruct.PLL.PLLP = 2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  RCC_OscInitStruct.PLL.PLLR = 2;
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{

  /* USER CODE BEGIN DFSDM1_Init 0 */

  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_filter0.Instance = DFSDM1_Filter0;
  hdfsdm1_filter0.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
  hdfsdm1_filter0.Init.RegularParam.FastMode = ENABLE;
  hdfsdm1_filter0.Init.RegularParam.DmaMode = ENABLE;
  hdfsdm1_filter0.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC3_ORDER;
  hdfsdm1_filter0.Init.FilterParam.Oversampling = 128;
  hdfsdm1_filter0.Init.FilterParam.IntOversampling = 1;
  if (HAL_DFSDM_FilterInit(&hdfsdm1_filter0) != HAL_OK)
  {
    Error_Handler();
  }
  hdfsdm1_filter1.Instance = DFSDM1_Filter1;
  hdfsdm1_filter1.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
  hdfsdm1_filter1.Init.RegularParam.FastMode = ENABLE;
  hdfsdm1_filter1.Init.RegularParam.DmaMode = ENABLE;
  hdfsdm1_filter1.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC3_ORDER;
  hdfsdm1_filter1.Init.FilterParam.Oversampling = 128;
  hdfsdm1_filter1.Init.FilterParam.IntOversampling = 1;
  if (HAL_DFSDM_FilterInit(&hdfsdm1_filter1) != HAL_OK)
  {
    Error_Handler();
  }
  hdfsdm1_filter2.Instance = DFSDM1_Filter2;
  hdfsdm1_filter2.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
  hdfsdm1_filter2.Init.RegularParam.FastMode = ENABLE;
  hdfsdm1_filter2.Init.RegularParam.DmaMode = ENABLE;
  hdfsdm1_filter2.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC3_ORDER;
  hdfsdm1_filter2.Init.FilterParam.Oversampling = 128;
  hdfsdm1_filter2.Init.FilterParam.IntOversampling = 1;
  if (HAL_DFSDM_FilterInit(&hdfsdm1_filter2) != HAL_OK)
  {
    Error_Handler();
  }
  hdfsdm1_filter3.Instance = DFSDM1_Filter3;
  hdfsdm1_filter3.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
  hdfsdm1_filter3.Init.RegularParam.FastMode = ENABLE;
  hdfsdm1_filter3.Init.RegularParam.DmaMode = ENABLE;
  hdfsdm1_filter3.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC3_ORDER;
  hdfsdm1_filter3.Init.FilterParam.Oversampling = 128;
  hdfsdm1_filter3.Init.FilterParam.IntOversampling = 1;
  if (HAL_DFSDM_FilterInit(&hdfsdm1_filter3) != HAL_OK)
  {
    Error_Handler();
  }
  hdfsdm1_channel0.Instance = DFSDM1_Channel0;
  hdfsdm1_channel0.Init.OutputClock.Activation = ENABLE;
  hdfsdm1_channel0.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_AUDIO;
  hdfsdm1_channel0.Init.OutputClock.Divider = 20;
  hdfsdm1_channel0.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
  hdfsdm1_channel0.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
  hdfsdm1_channel0.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
  hdfsdm1_channel0.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_FALLING;
  hdfsdm1_channel0.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
  hdfsdm1_channel0.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
  hdfsdm1_channel0.Init.Awd.Oversampling = 1;
  hdfsdm1_channel0.Init.Offset = 0;
  hdfsdm1_channel0.Init.RightBitShift = 0;
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel0) != HAL_OK)
  {
    Error_Handler();
  }
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_AUDIO;
  hdfsdm1_channel1.Init.OutputClock.Divider = 20;
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
  hdfsdm1_channel1.Init.Offset = 0;
  hdfsdm1_channel1.Init.RightBitShift = 0;
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
  {
    Error_Handler();
  }
  hdfsdm1_channel2.Instance = DFSDM1_Channel2;
  hdfsdm1_channel2.Init.OutputClock.Activation = ENABLE;
  hdfsdm1_channel2.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_AUDIO;
  hdfsdm1_channel2.Init.OutputClock.Divider = 20;
  hdfsdm1_channel2.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
  hdfsdm1_channel2.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
  hdfsdm1_channel2.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
  hdfsdm1_channel2.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
  hdfsdm1_channel2.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
  hdfsdm1_channel2.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
  hdfsdm1_channel2.Init.Awd.Oversampling = 1;
  hdfsdm1_channel2.Init.Offset = 0;
  hdfsdm1_channel2.Init.RightBitShift = 0;
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel2) != HAL_OK)
  {
    Error_Handler();
  }
  hdfsdm1_channel3.Instance = DFSDM1_Channel3;
  hdfsdm1_channel3.Init.OutputClock.Activation = ENABLE;
  hdfsdm1_channel3.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_AUDIO;
  hdfsdm1_channel3.Init.OutputClock.Divider = 20;
  hdfsdm1_channel3.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
  hdfsdm1_channel3.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
  hdfsdm1_channel3.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
  hdfsdm1_channel3.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_FALLING;
  hdfsdm1_channel3.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
  hdfsdm1_channel3.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
  hdfsdm1_channel3.Init.Awd.Oversampling = 1;
  hdfsdm1_channel3.Init.Offset = 0;
  hdfsdm1_channel3.Init.RightBitShift = 0;
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel3) != HAL_OK)
  {
    Error_Handler();
  }
  if (HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter0, DFSDM_CHANNEL_0, DFSDM_CONTINUOUS_CONV_ON) != HAL_OK)
  {
    Error_Handler();
  }
  if (HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter1, DFSDM_CHANNEL_1, DFSDM_CONTINUOUS_CONV_ON) != HAL_OK)
  {
    Error_Handler();
  }
  if (HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter2, DFSDM_CHANNEL_2, DFSDM_CONTINUOUS_CONV_ON) != HAL_OK)
  {
    Error_Handler();
  }
  if (HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter3, DFSDM_CHANNEL_3, DFSDM_CONTINUOUS_CONV_ON) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}

/**
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{

  /* USER CODE BEGIN USART3_Init 0 */

  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
  huart3.Init.BaudRate = 7000000;
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
  huart3.Init.StopBits = UART_STOPBITS_1;
  huart3.Init.Parity = UART_PARITY_NONE;
  huart3.Init.Mode = UART_MODE_TX_RX;
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
  if (HAL_UART_Init(&huart3) != HAL_OK)
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
  {
    Error_Handler();
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
  __HAL_RCC_DMA2_CLK_ENABLE();

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

}

/* USER CODE BEGIN 4 */

void HAL_DFSDM_FilterRegConvHalfCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter){

		 if(hdfsdm_filter == &hdfsdm1_filter3){
			channelFlag.topRightChannelFlag 	= HALF;
			SCB_InvalidateDCache_by_Addr((uint32_t*)&pcmBuffer->topRightChannel[0], 4*PCM_CHUNK_SIZE);

	}
	else if(hdfsdm_filter == &hdfsdm1_filter2){
			channelFlag.topLeftChannelFlag 	= HALF;
			SCB_InvalidateDCache_by_Addr((uint32_t*)&pcmBuffer->topLeftChannel[0], 4*PCM_CHUNK_SIZE);
	}
	else if(hdfsdm_filter == &hdfsdm1_filter1){
			channelFlag.bottomRightChannelFlag 	= HALF;
			SCB_InvalidateDCache_by_Addr((uint32_t*)&pcmBuffer->bottomRightChannel[0], 4*PCM_CHUNK_SIZE);
	}
	else{
			channelFlag.bottomLeftChannelFlag 	= HALF;
			SCB_InvalidateDCache_by_Addr((uint32_t*)&pcmBuffer->bottomLeftChannel[0], 4*PCM_CHUNK_SIZE);
	}

}

void HAL_DFSDM_FilterRegConvCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter){

		 if(hdfsdm_filter == &hdfsdm1_filter3){
			channelFlag.topRightChannelFlag = FULL;
			SCB_InvalidateDCache_by_Addr((uint32_t*)&pcmBuffer->topRightChannel[PCM_CHUNK_SIZE], 4*PCM_CHUNK_SIZE);
	}
	else if(hdfsdm_filter == &hdfsdm1_filter2){
			channelFlag.topLeftChannelFlag 	= FULL;
			SCB_InvalidateDCache_by_Addr((uint32_t*)&pcmBuffer->topLeftChannel[PCM_CHUNK_SIZE], 4*PCM_CHUNK_SIZE);

	}
	else if(hdfsdm_filter == &hdfsdm1_filter1){
			channelFlag.bottomRightChannelFlag 	= FULL;
			SCB_InvalidateDCache_by_Addr((uint32_t*)&pcmBuffer->bottomRightChannel[PCM_CHUNK_SIZE], 4*PCM_CHUNK_SIZE);
	}
	else{
			channelFlag.bottomLeftChannelFlag 	= FULL;
			SCB_InvalidateDCache_by_Addr((uint32_t*)&pcmBuffer->bottomLeftChannel[PCM_CHUNK_SIZE], 4*PCM_CHUNK_SIZE);
	}

}
/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */

/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
