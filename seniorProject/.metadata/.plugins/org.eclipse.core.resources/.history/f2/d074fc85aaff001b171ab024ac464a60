/*
 * localization.c
 *
 *  Created on: Jul 27, 2021
 *      Author: Chris
 */

#include "localization.h"

void Create_Arcsine_Table(float *arcsinTable){
	for(uint32_t i = 0; i < 2*ARCSIN_INDEX+1; i++){
		arcsinTable[i] = (float)( asin((((double)i-(double)size) / 48000.0l) * 340.0l / 0.5l) * 180.0l/acos(-1) );
	}
}

bool Localize_1D_CorrBuffer(float *sig_i, float *sig_j, float *arcsinTable, float *angle){

	static float max_i, max_j;
	static uint32_t sampleNum;
	static uint32_t corr_pos;
	static float dummy;
	static float buffer_i[2*PCM_CHUNK_SIZE], buffer_j[2*LOCALIZATION_SIZE];

	static bool maxFlag = false;
	static bool doneFlag = false;
	static bool startFlag = true;

	static float corr[4*PCM_CHUNK_SIZE];

	arm_max_no_idx_f32(sig_i, PCM_CHUNK_SIZE, &max_i);
	arm_max_no_idx_f32(sig_j, PCM_CHUNK_SIZE, &max_j);

	if( (max_i >= MAX) || (max_j >= MAX)){
		maxFlag = true;
	}
	else if(maxFlag){
		doneFlag = true;
	}

	if(maxFlag){
		if(startFlag){
			startFlag = false;

			arm_copy_f32(&sig_i[0], &buffer_i[PCM_CHUNK_SIZE], PCM_CHUNK_SIZE);
			arm_copy_f32(&sig_j[0], &buffer_j[PCM_CHUNK_SIZE], PCM_CHUNK_SIZE);
		}
		else{

			arm_copy_f32(&buffer_i[PCM_CHUNK_SIZE], &buffer_i[0], PCM_CHUNK_SIZE);
			arm_copy_f32(&buffer_j[PCM_CHUNK_SIZE], &buffer_j[0], PCM_CHUNK_SIZE);

			arm_copy_f32(&sig_i[0], &buffer_i[PCM_CHUNK_SIZE], PCM_CHUNK_SIZE);
			arm_copy_f32(&sig_j[0], &buffer_j[PCM_CHUNK_SIZE], PCM_CHUNK_SIZE);

			for(uint32_t i = 0; i < 4*PCM_CHUNK_SIZE)

		}
	}

	if(doneFlag){

		maxFlag = false;
		doneFlag = false;
		startFlag = true;

		return true;
	}

	else
		return false;

}
