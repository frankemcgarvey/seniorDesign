/*
 * dsp.c
 *
 *  Created on: Jul 3, 2021
 *      Author: Chris
 */

#include "dsp.h"

void FIR_Filter_Init(dsp_buffer_fir_t* dsp, float *coeff){
	for(uint32_t i = 0; i < CHANNEL_NUMBER; i++){
		arm_fir_init_f32(&dsp[i].Filter_inst, FIR_TAPS, &coeff[0], dsp[i].state, PCM_CHUNK_SIZE);
	}
}

void FIR_Filter(dsp_buffer_fir_t* dsp, float (*input)[PCM_CHUNK_SIZE], float (*output)[PCM_CHUNK_SIZE]){
	for(uint32_t i = 0; i < CHANNEL_NUMBER; i++){
		arm_fir_f32(&dsp[i].Filter_inst, &input[i][0], &output[i][0], PCM_CHUNK_SIZE);
	}
}

void IIR_Filter_Init(dsp_buffer_iir_t* dsp, float *coeff){
	for(uint32_t i = 0; i < CHANNEL_NUMBER; i++){
		arm_biquad_cascade_df2T_init_f32(&dsp[i].Filter_inst, STAGES, &coeff[0], dsp[i].state);
	}
}

void IIR_Filter(dsp_buffer_iir_t* dsp, float (*input)[PCM_CHUNK_SIZE], float (*output)[PCM_CHUNK_SIZE]){
	for(uint32_t i = 0; i < CHANNEL_NUMBER; i++){
		arm_biquad_cascade_df2T_f32(&dsp[i].Filter_inst, &input[i][0], &output[i][0], PCM_CHUNK_SIZE);
	}

}

void Normalized_CC(float *sig_i, float *sig_j, float *corr){

	float yy[2*PCM_CHUNK_SIZE - 1], xx[2*PCM_CHUNK_SIZE - 1], xy[2*PCM_CHUNK_SIZE - 1];

	float normalize[2];

	float normalize_scalar;

	arm_correlate_f32(&sig_i[0], PCM_CHUNK_SIZE, &sig_i[0], PCM_CHUNK_SIZE, &xx[0]);

	arm_correlate_f32(&sig_j[0], PCM_CHUNK_SIZE, &sig_j[0], PCM_CHUNK_SIZE, &yy[0]);

	arm_correlate_f32(&sig_i[0], PCM_CHUNK_SIZE, &sig_j[0], PCM_CHUNK_SIZE, &xy[0]);

	normalize[0] = xx[0];
	normalize[1] = yy[0];

	arm_abs_f32(&normalize[0], &normalize[0], 2);

	arn_vsqrt_f32(&normalize[0], &normalize[0], 2);

	normalize_scalar = normalize[0] * normalize[1];

	arm_scale_f32(&xy[0], normalize_scalar, &corr[0], 2*PCM_CHUNK_SIZE - 1);

}

void Upsample(float (*input)[UPSAMPLE_SIZE], float (*output)[UPSAMPLE_SIZE*UPSAMPLE]){

	for(uint32_t i = 0; i < UPSAMPLE_SIZE; i++){
		output[j][i*(UPSAMPLE)] = input[j][i];
	}
}
