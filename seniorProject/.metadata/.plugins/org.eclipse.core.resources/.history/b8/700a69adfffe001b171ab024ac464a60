/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * <h2><center>&copy; Copyright (c) 2021 STMicroelectronics.
  * All rights reserved.</center></h2>
  *
  * This software component is licensed by ST under BSD 3-Clause license,
  * the "License"; You may not use this file except in compliance with the
  * License. You may obtain a copy of the License at:
  *                        opensource.org/licenses/BSD-3-Clause
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

typedef struct{
	flag_t topLeftChannelFlag;
	flag_t topRightChannelFlag;
	flag_t bottomLeftChannelFlag;
	flag_t bottomRightChannelFlag;
}channel_flag_t;

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

#ifndef HSEM_ID_0
#define HSEM_ID_0 (0U) /* HW semaphore 0*/
#endif

#define HSEM_ID_1 1U


/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/

DFSDM_Filter_HandleTypeDef hdfsdm1_filter0;
DFSDM_Filter_HandleTypeDef hdfsdm1_filter1;
DFSDM_Filter_HandleTypeDef hdfsdm1_filter2;
DFSDM_Filter_HandleTypeDef hdfsdm1_filter3;
DFSDM_Channel_HandleTypeDef hdfsdm1_channel0;
DFSDM_Channel_HandleTypeDef hdfsdm1_channel1;
DFSDM_Channel_HandleTypeDef hdfsdm1_channel2;
DFSDM_Channel_HandleTypeDef hdfsdm1_channel3;
DMA_HandleTypeDef hdma_dfsdm1_flt0;
DMA_HandleTypeDef hdma_dfsdm1_flt1;
DMA_HandleTypeDef hdma_dfsdm1_flt2;
DMA_HandleTypeDef hdma_dfsdm1_flt3;

UART_HandleTypeDef huart3;
DMA_HandleTypeDef hdma_usart3_tx;

/* USER CODE BEGIN PV */

static buffer_t * const pcmBuffer = (buffer_t *) 0x30020000;
static volatile channel_flag_t channelFlag;
static float coeff[TAPS] = {0.000000165398674, 0.000000229690158, 0.000000397722403, 0.000000694217590, 0.000001137992058, 0.000001739037430, 0.000002494951104, 0.000003386718163, 0.000004373931461, 0.000005389634680, 0.000006335084436, 0.000007074826044, 0.000007432587154, 0.000007188562449, 0.000006078736078, 0.000003796896863, -0.000000000000002, -0.000005682549272, -0.000013635211872, -0.000024237933758, -0.000037842979509, -0.000054747142713, -0.000075159863627, -0.000099167991721, -0.000126698447275, -0.000157480186317, -0.000191007478861, -0.000226506395848, -0.000262907065917, -0.000298823986668, -0.000332547206199, -0.000362046441296, -0.000384990649763, -0.000398784701247, -0.000400624849135, -0.000387573178159, -0.000356651435141, -0.000304953166051, -0.000229772151215, -0.000128744461108, 0.000000000000034, 0.000157681148266, 0.000344713305822, 0.000560557411518, 0.000803587434348, 0.001070978702046, 0.001358625362627, 0.001661093789153, 0.001971618272364, 0.002282146131620, 0.002583432011306, 0.002865190617740, 0.003116302192211, 0.003325073281303, 0.003479547565803, 0.003567861858755, 0.003578637493774, 0.003501398488879, 0.003327003447339, 0.003048076527193, 0.002659422345459, 0.002158410614356, 0.001545312581584, 0.000823571928777, -0.000000000000125, -0.000915122160222, -0.001908043632284, -0.002961653750390, -0.004055706318468, -0.005167161114514, -0.006270634941757, -0.007338960189372, -0.008343835361302, -0.009256556630135, -0.010048799216747, -0.010693450458348, -0.011165439151227, -0.011442561633885, -0.011506262235343, -0.011342342942953, -0.010941583663225, -0.010300240479410, -0.009420401416719, -0.008310195058584, -0.006983817555010, -0.005461392458528, -0.003768648486584, -0.001936422428116, 0.000000000000095, 0.002001693472266, 0.004027028568089, 0.006032709497958, 0.007974884472787, 0.009810291230679, 0.011497415602207, 0.012997610494494, 0.014276152476668, 0.015303205698729, 0.016054648905993, 0.016512749716640, 0.016666667535901, 0.016512749716640, 0.016054648905993, 0.015303205698729, 0.014276152476668, 0.012997610494494, 0.011497415602207, 0.009810291230679, 0.007974884472787, 0.006032709497958, 0.004027028568089, 0.002001693472266, 0.000000000000095, -0.001936422428116, -0.003768648486584, -0.005461392458528, -0.006983817555010, -0.008310195058584, -0.009420401416719, -0.010300240479410, -0.010941583663225, -0.011342342942953, -0.011506262235343, -0.011442561633885, -0.011165439151227, -0.010693450458348, -0.010048799216747, -0.009256556630135, -0.008343835361302, -0.007338960189372, -0.006270634941757, -0.005167161114514, -0.004055706318468, -0.002961653750390, -0.001908043632284, -0.000915122160222, -0.000000000000125, 0.000823571928777, 0.001545312581584, 0.002158410614356, 0.002659422345459, 0.003048076527193, 0.003327003447339, 0.003501398488879, 0.003578637493774, 0.003567861858755, 0.003479547565803, 0.003325073281303, 0.003116302192211, 0.002865190617740, 0.002583432011306, 0.002282146131620, 0.001971618272364, 0.001661093789153, 0.001358625362627, 0.001070978702046, 0.000803587434348, 0.000560557411518, 0.000344713305822, 0.000157681148266, 0.000000000000034, -0.000128744461108, -0.000229772151215, -0.000304953166051, -0.000356651435141, -0.000387573178159, -0.000400624849135, -0.000398784701247, -0.000384990649763, -0.000362046441296, -0.000332547206199, -0.000298823986668, -0.000262907065917, -0.000226506395848, -0.000191007478861, -0.000157480186317, -0.000126698447275, -0.000099167991721, -0.000075159863627, -0.000054747142713, -0.000037842979509, -0.000024237933758, -0.000013635211872, -0.000005682549272, -0.000000000000002, 0.000003796896863, 0.000006078736078, 0.000007188562449, 0.000007432587154, 0.000007074826044, 0.000006335084436, 0.000005389634680, 0.000004373931461, 0.000003386718163, 0.000002494951104, 0.000001739037430, 0.000001137992058, 0.000000694217590, 0.000000397722403, 0.000000229690158, 0.000000165398674};

static float coeff_iir[5*STAGES] = {1.000000000000000, -1.989052414894104, 1.000000000000000, 1.974731206893921, -0.998637437820435, 1.000000000000000, -1.975357294082642, 1.000000000000000, 1.987789869308472, -0.999062776565552, 1.000000000000000, -1.989122509956360, 1.000000000000000, 1.971846342086792, -0.995820462703705, 1.000000000000000, -1.975199103355408, 1.000000000000000, 1.985921740531921, -0.997135937213898, 1.000000000000000, -1.989266753196716, 1.000000000000000, 1.968560099601746, -0.992704510688782, 1.000000000000000, -1.974866867065430, 1.000000000000000, 1.983935236930847, -0.995041072368622, 1.000000000000000, -1.989494204521179, 1.000000000000000, 1.964611291885376, -0.989033699035645, 1.000000000000000, -1.974324822425842, 1.000000000000000, 1.981693863868713, -0.992639362812042, 1.000000000000000, -1.989819884300232, 1.000000000000000, 1.959644317626953, -0.984460234642029, 1.000000000000000, -1.973506808280945, 1.000000000000000, 1.979018568992615, -0.989749372005463, 1.000000000000000, -1.990266919136047, 1.000000000000000, 1.953147649765015, -0.978478550910950, 1.000000000000000, -1.972295284271240, 1.000000000000000, 1.975655913352966, -0.986116766929626, 1.000000000000000, -1.990870952606201, 1.000000000000000, 1.944368124008179, -0.970328569412231, 1.000000000000000, -1.970471382141113, 1.000000000000000, 1.971226930618286, -0.981366753578186, 1.000000000000000, -1.991685509681702, 1.000000000000000, 1.932221770286560, -0.958876550197601, 1.000000000000000, -1.967595338821411, 1.000000000000000, 1.965142488479614, -0.974927484989166, 1.000000000000000, -1.992791175842285, 1.000000000000000, 1.915335536003113, -0.942583262920380, 1.000000000000000, -1.962661266326904, 1.000000000000000, 1.956461429595947, -0.965909242630005, 1.000000000000000, -1.994301438331604, 1.000000000000000, 1.892780542373657, -0.920072197914124, 1.000000000000000, -1.952865004539490, 1.000000000000000, 1.943670034408569, -0.952931165695190, 1.000000000000000, -1.996326804161072, 1.000000000000000, 1.924437880516052, -0.933997154235840, 1.000000000000000, -1.927310109138489, 1.000000000000000, 1.867101907730103, -0.892920613288879, 1.000000000000000, -1.998690128326416, 1.000000000000000, 1.896225452423096, -0.907381474971771, 1.000000000000000, -1.802518725395203, 1.000000000000000, 1.850903630256653, -0.872500360012054, 1.000000000000000, 0.000000000000000, -1.000000000000000, 1.863547563552856, -0.878983974456787};

static dsp_buffer_t dsp[CHANNEL_NUMBER];
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_DMA_Init(void);
static void MX_DFSDM1_Init(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */
/* USER CODE BEGIN Boot_Mode_Sequence_0 */
/* USER CODE END Boot_Mode_Sequence_0 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
/* wait until CPU2 wakes up from stop mode */
/* USER CODE END Boot_Mode_Sequence_2 */

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_DMA_Init();
  MX_DFSDM1_Init();
  /* USER CODE BEGIN 2 */

  channelFlag.topLeftChannelFlag		= NONE;
  channelFlag.bottomLeftChannelFlag 	= NONE;
  channelFlag.bottomRightChannelFlag 	= NONE;

  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
  DWT->LAR = 0xC5ACCE55;
  DWT->CYCCNT = 0;
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;

  FIR_Filter_Init(&dsp[0], &coeff[0]);

  static arm_biquad_cascade_stereo_df2T_instance_f32 S;
  static float state[2*STAGES];
  arm_biquad_cascade_stereo_df2T_init_f32(&S, STAGES, &coeff_iir[0], &state[0]);

//
  arm_matrix_instance_f32 matrix_S0;
  arm_mat_init_f32(&matrix_S0, 2, PCM_CHUNK_SIZE, &pcmBuffer->pcmBuffer_flt[0][0]);

  arm_matrix_instance_f32 matrix_S1;
  arm_mat_init_f32(&matrix_S1, PCM_CHUNK_SIZE, 2, &pcmBuffer->pcmBuffer_flt_trans_in[0][0]);

  arm_matrix_instance_f32 matrix_S2;
  arm_mat_init_f32(&matrix_S2, PCM_CHUNK_SIZE, 2, &pcmBuffer->pcmBuffer_flt_trans_out[0][0]);

  arm_matrix_instance_f32 matrix_S3;
  arm_mat_init_f32(&matrix_S3, 2, PCM_CHUNK_SIZE, &pcmBuffer->pcmBuffer_flt[CHANNEL_NUMBER][0]);

//

  HAL_DFSDM_FilterRegularStart_DMA(&hdfsdm1_filter2, &pcmBuffer->topLeftChannel[0], 2*PCM_CHUNK_SIZE);
  HAL_DFSDM_FilterRegularStart_DMA(&hdfsdm1_filter3, &pcmBuffer->topRightChannel[0], 2*PCM_CHUNK_SIZE);
  HAL_DFSDM_FilterRegularStart_DMA(&hdfsdm1_filter1, &pcmBuffer->bottomLeftChannel[0], 2*PCM_CHUNK_SIZE);
  HAL_DFSDM_FilterRegularStart_DMA(&hdfsdm1_filter0, &pcmBuffer->bottomRightChannel[0], 2*PCM_CHUNK_SIZE);

  HAL_Delay(1000);

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while(1){

	  if(channelFlag.bottomLeftChannelFlag == HALF && channelFlag.bottomRightChannelFlag == HALF && channelFlag.topLeftChannelFlag == HALF && channelFlag.topRightChannelFlag == HALF){
//		  DWT->CYCCNT = 0;
		  channelFlag.topLeftChannelFlag		= NONE;
		  channelFlag.topRightChannelFlag		= NONE;
		  channelFlag.bottomLeftChannelFlag 	= NONE;
		  channelFlag.bottomRightChannelFlag 	= NONE;

		  arm_q31_to_float((q31_t*)&pcmBuffer->bottomLeftChannel[0],  &pcmBuffer->pcmBuffer_flt[0][0], PCM_CHUNK_SIZE);
		  arm_q31_to_float((q31_t*)&pcmBuffer->bottomRightChannel[0], &pcmBuffer->pcmBuffer_flt[1][0], PCM_CHUNK_SIZE);
		  arm_q31_to_float((q31_t*)&pcmBuffer->topLeftChannel[0], 	  &pcmBuffer->pcmBuffer_flt[2][0], PCM_CHUNK_SIZE);
		  arm_q31_to_float((q31_t*)&pcmBuffer->topRightChannel[0], 	  &pcmBuffer->pcmBuffer_flt[3][0], PCM_CHUNK_SIZE);

		 // arm_mat_trans_f32(&matrix_S0, &matrix_S1);

		 // arm_biquad_cascade_stereo_df2T_f32(&S, &pcmBuffer->pcmBuffer_flt_trans_in[0][0], &pcmBuffer->pcmBuffer_flt_trans_out[0][0], PCM_CHUNK_SIZE);

		  //FIR_Filter(&dsp[0], (float(*)[PCM_CHUNK_SIZE])&pcmBuffer->pcmBuffer_flt[0][0], (float(*)[PCM_CHUNK_SIZE])&pcmBuffer->pcmBuffer_flt[0][0]);

		 // arm_mat_trans_f32(&matrix_S2, &matrix_S0);

		  arm_float_to_q15(&pcmBuffer->pcmBuffer_flt[0][0], &pcmBuffer->pcmBuffer_q15[0][0], CHANNEL_NUMBER*PCM_CHUNK_SIZE);

		  Clean((uint32_t*)&pcmBuffer->pcmBuffer_q15[0][0], 2*CHANNEL_NUMBER*PCM_CHUNK_SIZE);

		  HAL_EXTI_GenerateSWInterrupt(EXTI_LINE7);
	  }

	  if(channelFlag.bottomLeftChannelFlag == FULL && channelFlag.bottomRightChannelFlag == FULL && channelFlag.topLeftChannelFlag == FULL && channelFlag.topRightChannelFlag == FULL){
//		  DWT->CYCCNT = 0;
		  channelFlag.topLeftChannelFlag		= NONE;
		  channelFlag.topRightChannelFlag       = NONE;
		  channelFlag.bottomLeftChannelFlag 	= NONE;
		  channelFlag.bottomRightChannelFlag 	= NONE;

		  arm_q31_to_float((q31_t*)&pcmBuffer->bottomLeftChannel[PCM_CHUNK_SIZE],   &pcmBuffer->pcmBuffer_flt[CHANNEL_NUMBER][0],   PCM_CHUNK_SIZE);
		  arm_q31_to_float((q31_t*)&pcmBuffer->bottomRightChannel[PCM_CHUNK_SIZE],  &pcmBuffer->pcmBuffer_flt[CHANNEL_NUMBER+1][0], PCM_CHUNK_SIZE);
		  arm_q31_to_float((q31_t*)&pcmBuffer->topLeftChannel[PCM_CHUNK_SIZE], 	    &pcmBuffer->pcmBuffer_flt[CHANNEL_NUMBER+2][0], PCM_CHUNK_SIZE);
		  arm_q31_to_float((q31_t*)&pcmBuffer->topRightChannel[PCM_CHUNK_SIZE], 	&pcmBuffer->pcmBuffer_flt[CHANNEL_NUMBER+3][0], PCM_CHUNK_SIZE);

//		  arm_mat_trans_f32(&matrix_S3, &matrix_S4);

//		  arm_biquad_cascade_stereo_df2T_f32(&S, &pcmBuffer->pcmBuffer_flt_trans_in[PCM_CHUNK_SIZE][0], &pcmBuffer->pcmBuffer_flt_trans_out[PCM_CHUNK_SIZE][0], PCM_CHUNK_SIZE);

//		  FIR_Filter(&dsp[0], (float(*)[PCM_CHUNK_SIZE])&pcmBuffer->pcmBuffer_flt[CHANNEL_NUMBER][0], (float(*)[PCM_CHUNK_SIZE])&pcmBuffer->pcmBuffer_flt[CHANNEL_NUMBER][0]);

//		  arm_mat_trans_f32(&matrix_S5, &matrix_S3);

		  arm_float_to_q15(&pcmBuffer->pcmBuffer_flt[CHANNEL_NUMBER][0], &pcmBuffer->pcmBuffer_q15[CHANNEL_NUMBER][0], CHANNEL_NUMBER*PCM_CHUNK_SIZE);

		  Clean((uint32_t*)&pcmBuffer->pcmBuffer_q15[CHANNEL_NUMBER][0], 2*CHANNEL_NUMBER*PCM_CHUNK_SIZE);

		  HAL_EXTI_GenerateSWInterrupt(EXTI_LINE8);
	  }


    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 2;
  RCC_OscInitStruct.PLL.PLLN = 240;
  RCC_OscInitStruct.PLL.PLLP = 2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  RCC_OscInitStruct.PLL.PLLR = 2;
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{

  /* USER CODE BEGIN DFSDM1_Init 0 */

  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_filter0.Instance = DFSDM1_Filter0;
  hdfsdm1_filter0.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
  hdfsdm1_filter0.Init.RegularParam.FastMode = ENABLE;
  hdfsdm1_filter0.Init.RegularParam.DmaMode = ENABLE;
  hdfsdm1_filter0.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC4_ORDER;
  hdfsdm1_filter0.Init.FilterParam.Oversampling = 64;
  hdfsdm1_filter0.Init.FilterParam.IntOversampling = 1;
  if (HAL_DFSDM_FilterInit(&hdfsdm1_filter0) != HAL_OK)
  {
    Error_Handler();
  }
  hdfsdm1_filter1.Instance = DFSDM1_Filter1;
  hdfsdm1_filter1.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
  hdfsdm1_filter1.Init.RegularParam.FastMode = ENABLE;
  hdfsdm1_filter1.Init.RegularParam.DmaMode = ENABLE;
  hdfsdm1_filter1.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC4_ORDER;
  hdfsdm1_filter1.Init.FilterParam.Oversampling = 64;
  hdfsdm1_filter1.Init.FilterParam.IntOversampling = 1;
  if (HAL_DFSDM_FilterInit(&hdfsdm1_filter1) != HAL_OK)
  {
    Error_Handler();
  }
  hdfsdm1_filter2.Instance = DFSDM1_Filter2;
  hdfsdm1_filter2.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
  hdfsdm1_filter2.Init.RegularParam.FastMode = ENABLE;
  hdfsdm1_filter2.Init.RegularParam.DmaMode = ENABLE;
  hdfsdm1_filter2.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC4_ORDER;
  hdfsdm1_filter2.Init.FilterParam.Oversampling = 64;
  hdfsdm1_filter2.Init.FilterParam.IntOversampling = 1;
  if (HAL_DFSDM_FilterInit(&hdfsdm1_filter2) != HAL_OK)
  {
    Error_Handler();
  }
  hdfsdm1_filter3.Instance = DFSDM1_Filter3;
  hdfsdm1_filter3.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
  hdfsdm1_filter3.Init.RegularParam.FastMode = ENABLE;
  hdfsdm1_filter3.Init.RegularParam.DmaMode = ENABLE;
  hdfsdm1_filter3.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC4_ORDER;
  hdfsdm1_filter3.Init.FilterParam.Oversampling = 64;
  hdfsdm1_filter3.Init.FilterParam.IntOversampling = 1;
  if (HAL_DFSDM_FilterInit(&hdfsdm1_filter3) != HAL_OK)
  {
    Error_Handler();
  }
  hdfsdm1_channel0.Instance = DFSDM1_Channel0;
  hdfsdm1_channel0.Init.OutputClock.Activation = ENABLE;
  hdfsdm1_channel0.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_AUDIO;
  hdfsdm1_channel0.Init.OutputClock.Divider = 20;
  hdfsdm1_channel0.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
  hdfsdm1_channel0.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
  hdfsdm1_channel0.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
  hdfsdm1_channel0.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_FALLING;
  hdfsdm1_channel0.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
  hdfsdm1_channel0.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
  hdfsdm1_channel0.Init.Awd.Oversampling = 1;
  hdfsdm1_channel0.Init.Offset = 84000;
  hdfsdm1_channel0.Init.RightBitShift = 2;
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel0) != HAL_OK)
  {
    Error_Handler();
  }
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_AUDIO;
  hdfsdm1_channel1.Init.OutputClock.Divider = 20;
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
  hdfsdm1_channel1.Init.Offset = 84000;
  hdfsdm1_channel1.Init.RightBitShift = 2;
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
  {
    Error_Handler();
  }
  hdfsdm1_channel2.Instance = DFSDM1_Channel2;
  hdfsdm1_channel2.Init.OutputClock.Activation = ENABLE;
  hdfsdm1_channel2.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_AUDIO;
  hdfsdm1_channel2.Init.OutputClock.Divider = 20;
  hdfsdm1_channel2.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
  hdfsdm1_channel2.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
  hdfsdm1_channel2.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
  hdfsdm1_channel2.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
  hdfsdm1_channel2.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
  hdfsdm1_channel2.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
  hdfsdm1_channel2.Init.Awd.Oversampling = 1;
  hdfsdm1_channel2.Init.Offset = 84000;
  hdfsdm1_channel2.Init.RightBitShift = 2;
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel2) != HAL_OK)
  {
    Error_Handler();
  }
  hdfsdm1_channel3.Instance = DFSDM1_Channel3;
  hdfsdm1_channel3.Init.OutputClock.Activation = ENABLE;
  hdfsdm1_channel3.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_AUDIO;
  hdfsdm1_channel3.Init.OutputClock.Divider = 20;
  hdfsdm1_channel3.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
  hdfsdm1_channel3.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
  hdfsdm1_channel3.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
  hdfsdm1_channel3.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_FALLING;
  hdfsdm1_channel3.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
  hdfsdm1_channel3.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
  hdfsdm1_channel3.Init.Awd.Oversampling = 1;
  hdfsdm1_channel3.Init.Offset = 84000;
  hdfsdm1_channel3.Init.RightBitShift = 2;
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel3) != HAL_OK)
  {
    Error_Handler();
  }
  if (HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter0, DFSDM_CHANNEL_0, DFSDM_CONTINUOUS_CONV_ON) != HAL_OK)
  {
    Error_Handler();
  }
  if (HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter1, DFSDM_CHANNEL_1, DFSDM_CONTINUOUS_CONV_ON) != HAL_OK)
  {
    Error_Handler();
  }
  if (HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter2, DFSDM_CHANNEL_2, DFSDM_CONTINUOUS_CONV_ON) != HAL_OK)
  {
    Error_Handler();
  }
  if (HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter3, DFSDM_CHANNEL_3, DFSDM_CONTINUOUS_CONV_ON) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}

/**
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART3_UART_Init(void)
{

  /* USER CODE BEGIN USART3_Init 0 */

  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
  huart3.Init.BaudRate = 7000000;
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
  huart3.Init.StopBits = UART_STOPBITS_1;
  huart3.Init.Parity = UART_PARITY_NONE;
  huart3.Init.Mode = UART_MODE_TX_RX;
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
  if (HAL_UART_Init(&huart3) != HAL_OK)
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
  {
    Error_Handler();
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
  __HAL_RCC_DMA2_CLK_ENABLE();

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

}

/* USER CODE BEGIN 4 */

void HAL_DFSDM_FilterRegConvHalfCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter){

		 if(hdfsdm_filter == &hdfsdm1_filter3){
			channelFlag.topRightChannelFlag 	= HALF;
			SCB_InvalidateDCache_by_Addr((uint32_t*)&pcmBuffer->topRightChannel[0], 4*PCM_CHUNK_SIZE);
	}
	else if(hdfsdm_filter == &hdfsdm1_filter2){
			channelFlag.topLeftChannelFlag 	= HALF;
			SCB_InvalidateDCache_by_Addr((uint32_t*)&pcmBuffer->topLeftChannel[0], 4*PCM_CHUNK_SIZE);
	}
	else if(hdfsdm_filter == &hdfsdm1_filter1){
			channelFlag.bottomLeftChannelFlag 	= HALF;
			SCB_InvalidateDCache_by_Addr((uint32_t*)&pcmBuffer->bottomLeftChannel[0], 4*PCM_CHUNK_SIZE);
	}
	else{
			channelFlag.bottomRightChannelFlag 	= HALF;
			SCB_InvalidateDCache_by_Addr((uint32_t*)&pcmBuffer->bottomRightChannel[0], 4*PCM_CHUNK_SIZE);
	}

}

void HAL_DFSDM_FilterRegConvCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter){

		 if(hdfsdm_filter == &hdfsdm1_filter3){
			channelFlag.topRightChannelFlag = FULL;
			SCB_InvalidateDCache_by_Addr((uint32_t*)&pcmBuffer->topRightChannel[PCM_CHUNK_SIZE], 4*PCM_CHUNK_SIZE);
	}
	else if(hdfsdm_filter == &hdfsdm1_filter2){
			channelFlag.topLeftChannelFlag 	= FULL;
			SCB_InvalidateDCache_by_Addr((uint32_t*)&pcmBuffer->topLeftChannel[PCM_CHUNK_SIZE], 4*PCM_CHUNK_SIZE);

	}
	else if(hdfsdm_filter == &hdfsdm1_filter1){
			channelFlag.bottomLeftChannelFlag 	= FULL;
			SCB_InvalidateDCache_by_Addr((uint32_t*)&pcmBuffer->bottomLeftChannel[PCM_CHUNK_SIZE], 4*PCM_CHUNK_SIZE);
	}
	else{
			channelFlag.bottomRightChannelFlag 	= FULL;
			SCB_InvalidateDCache_by_Addr((uint32_t*)&pcmBuffer->bottomRightChannel[PCM_CHUNK_SIZE], 4*PCM_CHUNK_SIZE);
	}

}
/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */

/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
